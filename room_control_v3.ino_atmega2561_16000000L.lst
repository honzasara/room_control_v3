
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 29 47 	jmp	0x8e52	; 0x8e52 <__ctors_end>
       4:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
       8:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
       c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      10:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      14:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      18:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      1c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      20:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      24:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      28:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      2c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      30:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      34:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      38:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      3c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      40:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      44:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      48:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      4c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      50:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      54:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      58:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      5c:	0c 94 96 64 	jmp	0xc92c	; 0xc92c <__vector_23>
      60:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      64:	0c 94 9b 63 	jmp	0xc736	; 0xc736 <__vector_25>
      68:	0c 94 71 63 	jmp	0xc6e2	; 0xc6e2 <__vector_26>
      6c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      70:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      74:	0c 94 e0 64 	jmp	0xc9c0	; 0xc9c0 <__vector_29>
      78:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      7c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      80:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      84:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      88:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      8c:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      90:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      94:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      98:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      9c:	0c 94 4d 66 	jmp	0xcc9a	; 0xcc9a <__vector_39>
      a0:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      a4:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      a8:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      ac:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      b0:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      b4:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      b8:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      bc:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      c0:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      c4:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>
      c8:	0c 94 5a 47 	jmp	0x8eb4	; 0x8eb4 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 c5 7a 	jmp	0xf58a	; 0xf58a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
      d0:	0c 94 12 50 	jmp	0xa024	; 0xa024 <nullfce(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 23 51 	jmp	0xa246	; 0xa246 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>
      d8:	0c 94 4b 49 	jmp	0x9296	; 0x9296 <EthernetUDP::remoteIP()>
      dc:	0c 94 69 50 	jmp	0xa0d2	; 0xa0d2 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
      e0:	0c 94 ed 47 	jmp	0x8fda	; 0x8fda <turnOffPWM+0xc8>
      e4:	0c 94 a7 47 	jmp	0x8f4e	; 0x8f4e <turnOffPWM+0x3c>
      e8:	0c 94 c4 50 	jmp	0xa188	; 0xa188 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
      ec:	0c 94 43 49 	jmp	0x9286	; 0x9286 <EthernetUDP::available()>
      f0:	0c 94 9f 74 	jmp	0xe93e	; 0xe93e <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>
      f4:	0c 94 39 60 	jmp	0xc072	; 0xc072 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>
      f8:	0c 94 bd 6f 	jmp	0xdf7a	; 0xdf7a <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>
      fc:	0c 94 65 63 	jmp	0xc6ca	; 0xc6ca <serial_putc(char, __file*)>
     100:	0c 94 3f 4d 	jmp	0x9a7e	; 0x9a7e <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     104:	0c 94 3a 8b 	jmp	0x11674	; 0x11674 <EthernetServer::begin()>
     108:	0c 94 78 56 	jmp	0xacf0	; 0xacf0 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     10c:	0c 94 b6 94 	jmp	0x1296c	; 0x1296c <mqtt_callback(char*, unsigned char*, unsigned int)>
     110:	0c 94 47 49 	jmp	0x928e	; 0x928e <EthernetUDP::remotePort()>
     114:	0c 94 64 85 	jmp	0x10ac8	; 0x10ac8 <EthernetClient::connected()>
     118:	0c 94 b5 60 	jmp	0xc16a	; 0xc16a <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     11c:	0c 94 b9 70 	jmp	0xe172	; 0xe172 <helper_dialog_network_set_ip(unsigned int, unsigned int, unsigned char)>
     120:	0c 94 02 b7 	jmp	0x16e04	; 0x16e04 <HardwareSerial::available()>
     124:	0c 94 bb 47 	jmp	0x8f76	; 0x8f76 <turnOffPWM+0x64>
     128:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 19 51 	jmp	0xa232	; 0xa232 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     130:	0c 94 97 8e 	jmp	0x11d2e	; 0x11d2e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     134:	0c 94 b1 47 	jmp	0x8f62	; 0x8f62 <turnOffPWM+0x50>
     138:	0c 94 14 50 	jmp	0xa028	; 0xa028 <button_set_network_mac_onclick(unsigned int, unsigned int, unsigned char)>
     13c:	0c 94 c0 56 	jmp	0xad80	; 0xad80 <EthernetUDP::peek()>
     140:	0c 94 7f 94 	jmp	0x128fe	; 0x128fe <printf_via_mqtt(char, __file*)>
     144:	0c 94 83 6e 	jmp	0xdd06	; 0xdd06 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>
     148:	0c 94 8d 73 	jmp	0xe71a	; 0xe71a <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     14c:	0c 94 75 5b 	jmp	0xb6ea	; 0xb6ea <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     150:	0c 94 c9 47 	jmp	0x8f92	; 0x8f92 <turnOffPWM+0x80>
     154:	0c 94 ab 49 	jmp	0x9356	; 0x9356 <EthernetUDP::read(char*, unsigned int)>
     158:	0c 94 a8 5e 	jmp	0xbd50	; 0xbd50 <button_set_network_dns_onclick(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 99 51 	jmp	0xa332	; 0xa332 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     160:	0c 94 8a 61 	jmp	0xc314	; 0xc314 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     164:	0c 94 0a 76 	jmp	0xec14	; 0xec14 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>
     168:	0c 94 d4 50 	jmp	0xa1a8	; 0xa1a8 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 b7 50 	jmp	0xa16e	; 0xa16e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 bb 60 	jmp	0xc176	; 0xc176 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     174:	0c 94 b6 49 	jmp	0x936c	; 0x936c <LCDWIKI_KBV::Get_Width() const>
     178:	0c 94 1f 73 	jmp	0xe63e	; 0xe63e <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>
     17c:	0c 94 2f 53 	jmp	0xa65e	; 0xa65e <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     180:	0c 94 2d 60 	jmp	0xc05a	; 0xc05a <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 2d 53 	jmp	0xa65a	; 0xa65a <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 ba 49 	jmp	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     18c:	0c 94 e2 80 	jmp	0x101c4	; 0x101c4 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     190:	0c 94 9e 50 	jmp	0xa13c	; 0xa13c <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 e1 47 	jmp	0x8fc2	; 0x8fc2 <turnOffPWM+0xb0>
     198:	0c 94 cb 51 	jmp	0xa396	; 0xa396 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 dc 54 	jmp	0xa9b8	; 0xa9b8 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     1a0:	0c 94 68 51 	jmp	0xa2d0	; 0xa2d0 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>
     1a4:	0c 94 94 70 	jmp	0xe128	; 0xe128 <helper_dialog_network_set_mask(unsigned int, unsigned int, unsigned char)>
     1a8:	0c 94 2a 71 	jmp	0xe254	; 0xe254 <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>
     1ac:	0c 94 c5 47 	jmp	0x8f8a	; 0x8f8a <turnOffPWM+0x78>
     1b0:	0c 94 9a 56 	jmp	0xad34	; 0xad34 <EthernetClient::peek()>
     1b4:	0c 94 ec 47 	jmp	0x8fd8	; 0x8fd8 <turnOffPWM+0xc6>
     1b8:	0c 94 0b 50 	jmp	0xa016	; 0xa016 <valid_true()>
     1bc:	0c 94 4d 5f 	jmp	0xbe9a	; 0xbe9a <button_set_network_mask_onclick(unsigned int, unsigned int, unsigned char)>
     1c0:	0c 94 98 82 	jmp	0x10530	; 0x10530 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     1c4:	0c 94 67 79 	jmp	0xf2ce	; 0xf2ce <menu_tds_save_period(unsigned int, float, unsigned char)>
     1c8:	0c 94 03 ed 	jmp	0x1da06	; 0x1da06 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448>
     1cc:	0c 94 b0 48 	jmp	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
     1d0:	0c 94 ad 47 	jmp	0x8f5a	; 0x8f5a <turnOffPWM+0x48>
     1d4:	0c 94 c9 7d 	jmp	0xfb92	; 0xfb92 <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     1d8:	0c 94 e0 79 	jmp	0xf3c0	; 0xf3c0 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 e2 84 	jmp	0x109c4	; 0x109c4 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     1e0:	0c 94 7a 6e 	jmp	0xdcf4	; 0xdcf4 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     1e4:	0c 94 df 80 	jmp	0x101be	; 0x101be <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     1e8:	0c 94 a1 8b 	jmp	0x11742	; 0x11742 <EthernetClient::write(unsigned char const*, unsigned int)>
     1ec:	0c 94 32 71 	jmp	0xe264	; 0xe264 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     1f0:	0c 94 03 70 	jmp	0xe006	; 0xe006 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>
     1f4:	0c 94 a4 50 	jmp	0xa148	; 0xa148 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     1f8:	0c 94 6f 70 	jmp	0xe0de	; 0xe0de <helper_dialog_network_set_gw(unsigned int, unsigned int, unsigned char)>
     1fc:	0c 94 70 48 	jmp	0x90e0	; 0x90e0 <TwoWire::read()>
     200:	0c 94 c8 86 	jmp	0x10d90	; 0x10d90 <EthernetUDP::parsePacket()>
     204:	0c 94 96 75 	jmp	0xeb2c	; 0xeb2c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     208:	0c 94 28 73 	jmp	0xe650	; 0xe650 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     20c:	0c 94 40 60 	jmp	0xc080	; 0xc080 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 5f 51 	jmp	0xa2be	; 0xa2be <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     214:	0c 94 9b 6d 	jmp	0xdb36	; 0xdb36 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     218:	0c 94 95 5f 	jmp	0xbf2a	; 0xbf2a <button_set_network_ip_onclick(unsigned int, unsigned int, unsigned char)>
     21c:	0c 94 5e 6e 	jmp	0xdcbc	; 0xdcbc <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>
     220:	0c 94 26 48 	jmp	0x904c	; 0x904c <TwoWire::available()>
     224:	0c 94 6b 7b 	jmp	0xf6d6	; 0xf6d6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     228:	0c 94 5f 48 	jmp	0x90be	; 0x90be <TwoWire::onReceiveService(unsigned char*, int)>
     22c:	0c 94 4c 78 	jmp	0xf098	; 0xf098 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     230:	0c 94 83 78 	jmp	0xf106	; 0xf106 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 35 51 	jmp	0xa26a	; 0xa26a <menu_redraw_date(unsigned int, unsigned int, unsigned char)>
     238:	0c 94 90 56 	jmp	0xad20	; 0xad20 <Serial0_available()>
     23c:	0c 94 b2 49 	jmp	0x9364	; 0x9364 <LCDWIKI_KBV::Get_Height() const>
     240:	0c 94 9e 49 	jmp	0x933c	; 0x933c <EthernetClient::operator!=(EthernetClient const&)>
     244:	0c 94 db 47 	jmp	0x8fb6	; 0x8fb6 <turnOffPWM+0xa4>
     248:	0c 94 dd 5f 	jmp	0xbfba	; 0xbfba <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>
     24c:	0c 94 28 70 	jmp	0xe050	; 0xe050 <helper_dialog_network_set_dns(unsigned int, unsigned int, unsigned char)>
     250:	0c 94 e7 50 	jmp	0xa1ce	; 0xa1ce <a2d_complete(unsigned char, unsigned int)>
     254:	0c 94 10 62 	jmp	0xc420	; 0xc420 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     258:	0c 94 40 71 	jmp	0xe280	; 0xe280 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     25c:	0c 94 df 60 	jmp	0xc1be	; 0xc1be <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     260:	0c 94 5d 49 	jmp	0x92ba	; 0x92ba <EthernetServer::write(unsigned char)>
     264:	0c 94 51 4d 	jmp	0x9aa2	; 0x9aa2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     268:	0c 94 1d 5e 	jmp	0xbc3a	; 0xbc3a <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 60 87 	jmp	0x10ec0	; 0x10ec0 <EthernetUDP::begin(unsigned int)>
     270:	0c 94 31 50 	jmp	0xa062	; 0xa062 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     274:	0c 94 0e b7 	jmp	0x16e1c	; 0x16e1c <serialEventRun()>
     278:	0c 94 6e 6d 	jmp	0xdadc	; 0xdadc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 72 51 	jmp	0xa2e4	; 0xa2e4 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     280:	0c 94 8a 8a 	jmp	0x11514	; 0x11514 <EthernetClient::connect(char const*, unsigned int)>
     284:	0c 94 08 8c 	jmp	0x11810	; 0x11810 <EthernetServer::write(unsigned char const*, unsigned int)>
     288:	0c 94 b4 6c 	jmp	0xd968	; 0xd968 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     28c:	0c 94 7b 51 	jmp	0xa2f6	; 0xa2f6 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     290:	0c 94 63 7e 	jmp	0xfcc6	; 0xfcc6 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     294:	0c 94 bd 7c 	jmp	0xf97a	; 0xf97a <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     298:	0c 94 12 52 	jmp	0xa424	; 0xa424 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 12 6d 	jmp	0xda24	; 0xda24 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     2a0:	0c 94 cd 51 	jmp	0xa39a	; 0xa39a <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     2a4:	0c 94 1a 51 	jmp	0xa234	; 0xa234 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>
     2a8:	0c 94 38 6d 	jmp	0xda70	; 0xda70 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     2ac:	0c 94 e9 47 	jmp	0x8fd2	; 0x8fd2 <turnOffPWM+0xc0>
     2b0:	0c 94 5b 49 	jmp	0x92b6	; 0x92b6 <UDP::beginMulticast(IPAddress, unsigned int)>
     2b4:	0c 94 fd 60 	jmp	0xc1fa	; 0xc1fa <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     2b8:	0c 94 c6 50 	jmp	0xa18c	; 0xa18c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 af b6 	jmp	0x16d5e	; 0x16d5e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     2c0:	0c 94 e0 b6 	jmp	0x16dc0	; 0x16dc0 <HardwareSerial::read()>
     2c4:	0c 94 9c b6 	jmp	0x16d38	; 0x16d38 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     2c8:	0c 94 b5 47 	jmp	0x8f6a	; 0x8f6a <turnOffPWM+0x58>
     2cc:	0c 94 e5 47 	jmp	0x8fca	; 0x8fca <turnOffPWM+0xb8>
     2d0:	0c 94 fd 8a 	jmp	0x115fa	; 0x115fa <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     2d4:	0c 94 5c 47 	jmp	0x8eb8	; 0x8eb8 <Print::write(unsigned char const*, unsigned int)>
     2d8:	0c 94 cd 84 	jmp	0x1099a	; 0x1099a <EthernetUDP::stop()>
     2dc:	0c 94 5c 6e 	jmp	0xdcb8	; 0xdcb8 <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     2e0:	0c 94 d7 47 	jmp	0x8fae	; 0x8fae <turnOffPWM+0x9c>
     2e4:	0c 94 05 5f 	jmp	0xbe0a	; 0xbe0a <button_set_network_gw_onclick(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 41 80 	jmp	0x10082	; 0x10082 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 e7 62 	jmp	0xc5ce	; 0xc5ce <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2f0:	0c 94 7f 49 	jmp	0x92fe	; 0x92fe <EthernetClient::operator bool()>
     2f4:	0c 94 7f 86 	jmp	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
     2f8:	0c 94 37 87 	jmp	0x10e6e	; 0x10e6e <EthernetUDP::endPacket()>
     2fc:	0c 94 db 56 	jmp	0xadb6	; 0xadb6 <EthernetClient::available()>
     300:	0c 94 f4 b6 	jmp	0x16de8	; 0x16de8 <HardwareSerial::peek()>
     304:	0c 94 cd 47 	jmp	0x8f9a	; 0x8f9a <turnOffPWM+0x88>
     308:	0c 94 9e 86 	jmp	0x10d3c	; 0x10d3c <EthernetUDP::read()>
     30c:	0c 94 8c 6e 	jmp	0xdd18	; 0xdd18 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     310:	0c 94 27 60 	jmp	0xc04e	; 0xc04e <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     314:	0c 94 f5 62 	jmp	0xc5ea	; 0xc5ea <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     318:	0c 94 70 50 	jmp	0xa0e0	; 0xa0e0 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     31c:	0c 94 34 dd 	jmp	0x1ba68	; 0x1ba68 <HardwareSerial::flush()>
     320:	0c 94 a8 49 	jmp	0x9350	; 0x9350 <Print::availableForWrite()>
     324:	0c 94 65 5e 	jmp	0xbcca	; 0xbcca <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     328:	0c 94 54 5d 	jmp	0xbaa8	; 0xbaa8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     32c:	0c 94 61 77 	jmp	0xeec2	; 0xeec2 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     330:	0c 94 87 71 	jmp	0xe30e	; 0xe30e <helper_display_set_brightness(unsigned int, float, unsigned char)>
     334:	0c 94 17 8a 	jmp	0x1142e	; 0x1142e <EthernetUDP::beginPacket(char const*, unsigned int)>
     338:	0c 94 b9 51 	jmp	0xa372	; 0xa372 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     33c:	0c 94 2c 51 	jmp	0xa258	; 0xa258 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>
     340:	0c 94 6d 4b 	jmp	0x96da	; 0x96da <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     344:	0c 94 a6 73 	jmp	0xe74c	; 0xe74c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     348:	0c 94 13 50 	jmp	0xa026	; 0xa026 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 f0 5e 	jmp	0xbde0	; 0xbde0 <button_set_network_name_onclick(unsigned int, unsigned int, unsigned char)>
     350:	0c 94 0f 50 	jmp	0xa01e	; 0xa01e <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 f3 73 	jmp	0xe7e6	; 0xe7e6 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     358:	0c 94 73 8c 	jmp	0x118e6	; 0x118e6 <EthernetClient::connect(IPAddress, unsigned int)>
     35c:	0c 94 21 6d 	jmp	0xda42	; 0xda42 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     360:	0c 94 73 49 	jmp	0x92e6	; 0x92e6 <Print::flush()>
     364:	0c 94 2e 54 	jmp	0xa85c	; 0xa85c <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     368:	0c 94 0a 7c 	jmp	0xf814	; 0xf814 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>
     36c:	0c 94 9d 79 	jmp	0xf33a	; 0xf33a <menu_tds_save_offset(unsigned int, float, unsigned char)>
     370:	0c 94 0a 61 	jmp	0xc214	; 0xc214 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     374:	0c 94 4f 6d 	jmp	0xda9e	; 0xda9e <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     378:	0c 94 5e 48 	jmp	0x90bc	; 0x90bc <TwoWire::onRequestService()>
     37c:	0c 94 1c 7a 	jmp	0xf438	; 0xf438 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     380:	0c 94 92 51 	jmp	0xa324	; 0xa324 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     384:	0c 94 3a 56 	jmp	0xac74	; 0xac74 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     388:	0c 94 2d 7e 	jmp	0xfc5a	; 0xfc5a <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     38c:	0c 94 8f 51 	jmp	0xa31e	; 0xa31e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     390:	0c 94 e2 77 	jmp	0xefc4	; 0xefc4 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     394:	0c 94 3f 5d 	jmp	0xba7e	; 0xba7e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     398:	0c 94 83 48 	jmp	0x9106	; 0x9106 <TwoWire::write(unsigned char const*, unsigned int)>
     39c:	0c 94 61 48 	jmp	0x90c2	; 0x90c2 <TwoWire::peek()>
     3a0:	0c 94 57 52 	jmp	0xa4ae	; 0xa4ae <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     3a4:	0c 94 d1 72 	jmp	0xe5a2	; 0xe5a2 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     3a8:	0c 94 f1 53 	jmp	0xa7e2	; 0xa7e2 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     3ac:	0c 94 33 60 	jmp	0xc066	; 0xc066 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     3b0:	0c 94 d5 5d 	jmp	0xbbaa	; 0xbbaa <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>
     3b4:	0c 94 d3 47 	jmp	0x8fa6	; 0x8fa6 <turnOffPWM+0x94>
     3b8:	0c 94 f0 55 	jmp	0xabe0	; 0xabe0 <IPAddress::printTo(Print&) const>
     3bc:	0c 94 c0 5d 	jmp	0xbb80	; 0xbb80 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>
     3c0:	0c 94 4d 70 	jmp	0xe09a	; 0xe09a <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)>
     3c4:	0c 94 59 73 	jmp	0xe6b2	; 0xe6b2 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     3c8:	0c 94 08 75 	jmp	0xea10	; 0xea10 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     3cc:	0c 94 b9 53 	jmp	0xa772	; 0xa772 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     3d0:	0c 94 66 60 	jmp	0xc0cc	; 0xc0cc <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3d4:	0c 94 47 75 	jmp	0xea8e	; 0xea8e <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     3d8:	0c 94 e0 6f 	jmp	0xdfc0	; 0xdfc0 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>
     3dc:	0c 94 b1 80 	jmp	0x10162	; 0x10162 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     3e0:	0c 94 1b 49 	jmp	0x9236	; 0x9236 <EthernetUDP::flush()>
     3e4:	0c 94 1b 83 	jmp	0x10636	; 0x10636 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3e8:	0c 94 d7 77 	jmp	0xefae	; 0xefae <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     3ec:	0c 94 bf 47 	jmp	0x8f7e	; 0x8f7e <turnOffPWM+0x6c>
     3f0:	0c 94 88 49 	jmp	0x9310	; 0x9310 <EthernetClient::write(unsigned char)>
     3f4:	0c 94 5f 56 	jmp	0xacbe	; 0xacbe <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     3f8:	0c 94 36 79 	jmp	0xf26c	; 0xf26c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     3fc:	0c 94 60 48 	jmp	0x90c0	; 0x90c0 <TwoWire::flush()>
     400:	0c 94 29 74 	jmp	0xe852	; 0xe852 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     404:	0c 94 ca 69 	jmp	0xd394	; 0xd394 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     408:	0c 94 0d 50 	jmp	0xa01a	; 0xa01a <valid_ipv4_address_element_string()>
     40c:	0c 94 a9 71 	jmp	0xe352	; 0xe352 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
     410:	0c 94 87 85 	jmp	0x10b0e	; 0x10b0e <EthernetClient::stop()>
     414:	0c 94 2b 53 	jmp	0xa656	; 0xa656 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     418:	0c 94 63 77 	jmp	0xeec6	; 0xeec6 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     41c:	0c 94 c0 71 	jmp	0xe380	; 0xe380 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     420:	0c 94 74 49 	jmp	0x92e8	; 0x92e8 <EthernetClient::operator==(EthernetClient const&)>
     424:	0c 94 fa 7a 	jmp	0xf5f4	; 0xf5f4 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     428:	0c 94 19 87 	jmp	0x10e32	; 0x10e32 <EthernetClient::read(unsigned char*, unsigned int)>
     42c:	0c 94 5d 7d 	jmp	0xfaba	; 0xfaba <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     430:	0c 94 7b 81 	jmp	0x102f6	; 0x102f6 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     434:	0c 94 93 71 	jmp	0xe326	; 0xe326 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     438:	0c 94 cd 74 	jmp	0xe99a	; 0xe99a <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     43c:	0c 94 e4 56 	jmp	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
     440:	0c 94 fe 71 	jmp	0xe3fc	; 0xe3fc <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     444:	0c 94 e6 75 	jmp	0xebcc	; 0xebcc <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     448:	0c 94 2e 6a 	jmp	0xd45c	; 0xd45c <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     44c:	0c 94 87 49 	jmp	0x930e	; 0x930e <EthernetClient::flush()>
     450:	0c 94 ed dc 	jmp	0x1b9da	; 0x1b9da <HardwareSerial::write(unsigned char)>
     454:	0c 94 aa 50 	jmp	0xa154	; 0xa154 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     458:	0c 94 16 73 	jmp	0xe62c	; 0xe62c <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>
     45c:	0c 94 d1 b6 	jmp	0x16da2	; 0x16da2 <HardwareSerial::availableForWrite()>
     460:	0c 94 ab 5d 	jmp	0xbb56	; 0xbb56 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>
     464:	0c 94 8d 54 	jmp	0xa91a	; 0xa91a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     468:	0c 94 1d 87 	jmp	0x10e3a	; 0x10e3a <EthernetClient::read()>
     46c:	0c 94 64 74 	jmp	0xe8c8	; 0xe8c8 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     470:	0c 94 2d 49 	jmp	0x925a	; 0x925a <EthernetUDP::write(unsigned char)>
     474:	0c 94 d7 78 	jmp	0xf1ae	; 0xf1ae <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     478:	0c 94 f9 4b 	jmp	0x97f2	; 0x97f2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     47c:	0c 94 de 70 	jmp	0xe1bc	; 0xe1bc <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>
     480:	0c 94 63 50 	jmp	0xa0c6	; 0xa0c6 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     484:	0c 94 c6 73 	jmp	0xe78c	; 0xe78c <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>

00000488 <__trampolines_end>:
__trampolines_end():
     488:	4e 41       	sbci	r20, 0x1E	; 30
     48a:	4e 49       	Address 0x000000000000048a is out of bounds.
.word	0xffff	; ????

0000048b <pstr_inity>:
     48b:	49 4e 49 54 59                                      INITY

00000490 <pstr_inf>:
     490:	49 4e 46                                            INF

00000493 <pwr_m10>:
     493:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     4a3:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000004ab <pwr_p10>:
     4ab:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     4bb:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     4cb:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     4db:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     4eb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4fb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     50b:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     51b:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     52b:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     53b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     54b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     55b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     56b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     57b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     58b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     59b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     5ab:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     5bb:	3d 27                                               ='

000005bd <new_text_switch_brightness_automode>:
     5bd:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

000005cd <new_text_nastaveni_zobrazeni_full>:
     5cd:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
     5dd:	65 6e 69 00                                         eni.

000005e1 <new_nastaveni_nrf_input>:
     5e1:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

000005eb <new_nastaveni_mqtt_topic>:
     5eb:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

000005f6 <new_text_nastaveni_periferii_full>:
     5f6:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
     606:	72 69 69 00                                         rii.

0000060a <new_text_nastaveni_periferie>:
     60a:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

00000617 <new_text_nastaveni_zobrazeni>:
     617:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

00000624 <new_text_nastaveni_regulatoru>:
     624:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

00000632 <new_text_nastaveni_system>:
     632:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

0000063d <new_text_nastaveni_reload>:
     63d:	52 65 73 74 61 72 74 20 7a 61 72 69 7a 65 6e 69     Restart zarizeni
	...

0000064e <new_text_o_zarizeni>:
     64e:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

00000659 <nastaveni_default>:
     659:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000669 <nastaveni_nrf>:
     669:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00000677 <new_text_nastaveni_system_full>:
     677:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
     687:	75 00                                               u.

00000689 <new_text_novy_time_plan>:
     689:	4e 6f 76 79 20 70 6c 61 6e 00                       Novy plan.

00000693 <char_T>:
     693:	54 00                                               T.

00000695 <char_D>:
     695:	44 00                                               D.

00000697 <char_I>:
     697:	49 00                                               I.

00000699 <char_P>:
     699:	50 00                                               P.

0000069b <text_set_default>:
     69b:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

000006ab <text_button_mode_cool>:
     6ab:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

000006b4 <text_button_mode_heat>:
     6b4:	54 6f 70 65 6e 69 00                                Topeni.

000006bb <text_select_term_mode>:
     6bb:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     6cb:	61 74 6f 72 75 00                                   atoru.

000006d1 <nastaveni_deassociate_sensor>:
     6d1:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

000006df <text_current_ring_mode>:
     6df:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
     6ef:	75 6c 61 74 6f 72 75 00                             ulatoru.

000006f7 <text_nastavit_pid>:
     6f7:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

00000701 <text_assocoivat_output>:
     701:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

00000711 <text_assocoivat>:
     711:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

00000720 <new_text_termostat_statistika>:
     720:	53 74 61 74 69 73 74 69 6b 61 20 72 65 67 75 6c     Statistika regul
     730:	61 74 6f 72 75 00                                   atoru.

00000736 <ring_text_setup>:
     736:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000740 <text_select_term_default_ring>:
     740:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     750:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

0000075b <new_text_set_time_program>:
     75b:	43 61 73 6f 76 65 20 70 6c 61 6e 79 00              Casove plany.

00000768 <new_text_nastaveni_regulatoru_full>:
     768:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     778:	74 6f 72 75 00                                      toru.

0000077d <text_rtds_novy>:
     77d:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     78d:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

00000798 <nastaveni_rtds_subscribe>:
     798:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000007a8 <nastaveni_tds_offset>:
     7a8:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

000007b8 <nastaveni_name_sensor>:
     7b8:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

000007c7 <nastaveni_delete_sensor>:
     7c7:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

000007d5 <text_tds_sensors>:
     7d5:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     7e5:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000007f0 <new_text_ok>:
     7f0:	4f 4b 00                                            OK.

000007f3 <text_special_case>:
     7f3:	40 00                                               @.

000007f5 <text_lower_case>:
     7f5:	61 00                                               a.

000007f7 <text_upper_case>:
     7f7:	41 00                                               A.

000007f9 <text_delete_char>:
     7f9:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000803 <text_klavesnice>:
     803:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

0000080e <text_zrusit>:
     80e:	5a 72 75 73 69 74 00                                Zrusit.

00000815 <text_ulozit>:
     815:	55 6c 6f 7a 69 74 00                                Ulozit.

0000081c <text_no>:
     81c:	4e 65 00                                            Ne.

0000081f <text_yes>:
     81f:	41 6e 6f 00                                         Ano.

00000823 <text_upozorneni>:
     823:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000082e <new_text_show_all_temp>:
     82e:	5a 6f 62 72 61 7a 65 6e 69 20 76 73 65 63 68 20     Zobrazeni vsech 
     83e:	74 65 70 6c 6f 74 00                                teplot.

00000845 <new_text_mqtt_check>:
     845:	4d 51 54 54 20 6f 76 65 72 69 74 20 73 70 6f 6a     MQTT overit spoj
     855:	65 6e 69 00                                         eni.

00000859 <new_text_mqtt_pass>:
     859:	4d 51 54 54 20 68 65 73 6c 6f 00                    MQTT heslo.

00000864 <new_text_mqtt_user>:
     864:	4d 51 54 54 20 75 7a 69 76 61 74 65 6c 00           MQTT uzivatel.

00000872 <new_text_mqtt_broker>:
     872:	4d 51 54 54 20 73 65 72 76 65 72 00                 MQTT server.

0000087e <new_text_nastaveni_mqtt_pripojeni>:
     87e:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

0000088d <text_select_default_temp>:
     88d:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     89d:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000008a7 <new_text_time_set_date_manualy>:
     8a7:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     8b7:	64 61 74 75 6d 75 00                                datumu.

000008be <new_text_time_set_time_manualy>:
     8be:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     8ce:	63 61 73 75 00                                      casu.

000008d3 <new_text_time_set_offset>:
     8d3:	4e 54 50 20 70 6f 73 75 6e 75 74 69 20 63 61 73     NTP posunuti cas
     8e3:	75 00                                               u.

000008e5 <new_text_ntp_set_server>:
     8e5:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
     8f5:	72 76 65 72 75 00                                   rveru.

000008fb <text_ntp_sync_time>:
     8fb:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

0000090c <new_text_nastaveni_casu>:
     90c:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

0000091b <new_text_scan_onewire_bus>:
     91b:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

00000929 <new_text_set_network_test_connection>:
     929:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

00000938 <new_text_set_network_ip>:
     938:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

00000945 <new_text_set_network_mask>:
     945:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
     955:	73 69 74 65 00                                      site.

0000095a <new_text_set_network_gw>:
     95a:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
     96a:	69 20 62 72 61 6e 79 00                             i brany.

00000972 <new_text_set_network_name>:
     972:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
     982:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

0000098b <new_text_set_network_dns>:
     98b:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
     99b:	72 76 65 72 75 00                                   rveru.

000009a1 <new_text_set_network_mac>:
     9a1:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
     9b1:	72 65 73 79 00                                      resy.

000009b6 <button_zpet>:
     9b6:	5a 70 65 74 00                                      Zpet.

000009bb <nastaveni_site>:
     9bb:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

000009ca <char_NULL>:
	...

000009cb <nastaveni_text>:
     9cb:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000009d5 <funkce_text>:
     9d5:	46 75 6e 6b 63 65 00                                Funkce.

000009dc <regulator_text>:
     9dc:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

000009e6 <rf24_pa_dbm_e_str_3>:
     9e6:	50 41 5f 4d 41 58 00                                PA_MAX.

000009ed <rf24_pa_dbm_e_str_2>:
     9ed:	50 41 5f 48 49 47 48 00                             PA_HIGH.

000009f5 <rf24_pa_dbm_e_str_1>:
     9f5:	50 41 5f 4c 4f 57 00                                PA_LOW.

000009fc <rf24_pa_dbm_e_str_0>:
     9fc:	50 41 5f 4d 49 4e 00                                PA_MIN.

00000a03 <rf24_crclength_e_str_2>:
     a03:	31 36 20 62 69 74 73 00                             16 bits.

00000a0b <rf24_crclength_e_str_1>:
     a0b:	38 20 62 69 74 73 00                                8 bits.

00000a12 <rf24_crclength_e_str_0>:
     a12:	44 69 73 61 62 6c 65 64 00                          Disabled.

00000a1b <rf24_model_e_str_1>:
     a1b:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

00000a25 <rf24_model_e_str_0>:
     a25:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

00000a2e <rf24_datarate_e_str_2>:
     a2e:	32 35 30 4b 42 50 53 00                             250KBPS.

00000a36 <rf24_datarate_e_str_1>:
     a36:	32 4d 42 50 53 00                                   2MBPS.

00000a3c <rf24_datarate_e_str_0>:
     a3c:	31 4d 42 50 53 00                                   1MBPS.

00000a42 <Menu_All>:
     a42:	07 05 0a 07 46 83 dc 09 22 01 96 00 aa 00 28 00     ....F...".....(.
     a52:	02 05 12 50 30 2b 53 d5 09 22 01 5a 00 aa 00 28     ...P0+S..".Z...(
     a62:	00 02 01 12 50 30 2b 53 cb 09 22 01 1e 00 aa 00     ....P0+S..".....
     a72:	28 00 02 02 9c b6 30 2b 53 00 00 00 00 00 00 00     (.....0+S.......
	...
     af2:	26 85 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     &.....R.<.......
     b02:	8d 73 a6 73 22 2b 53 0c 85 64 00 dc 00 52 00 3c     .s.s"+S..d...R.<
     b12:	00 03 00 f8 ff ff 01 8d 73 a6 73 22 2b 53 f2 84     ........s.s"+S..
     b22:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 8d 73     ....R.<........s
     b32:	a6 73 22 2b 53 d6 84 18 01 dc 00 52 00 3c 00 03     .s"+S......R.<..
     b42:	e0 ff ff ff 02 8d 73 a6 73 22 2b 53 be 84 72 01     ......s.s"+S..r.
     b52:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 8d 73 a6 73     ..R.<........s.s
     b62:	22 2b 53 0a 00 82 00 a1 00 5d 7d f0 00 50 00 14     "+S......]}..P..
     b72:	9c b6 2b 53 ca 09 18 01 22 01 00 00 f5 62 00 00     ..+S...."....b..
     b82:	00 00 18 12 50 2b 53 ca 09 0a 00 1e 00 00 00 54     ....P+S........T
     b92:	5d 00 00 00 00 11 12 50 2b 53 ca 09 0a 00 1e 00     ]......P+S......
     ba2:	00 00 66 60 f4 00 54 00 20 12 50 2b 53 ca 09 0a     ..f`..T. .P+S...
     bb2:	00 82 00 00 00 c9 7d f4 00 54 00 20 12 50 2b 53     ......}..T. .P+S
     bc2:	ca 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d1a:	03 05 05 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     d2a:	01 01 ff ff 20 7b 51 72 51 5f 51 35 51 2d 53 bb     .... {QrQ_Q5Q-S.
     d3a:	09 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
     d4a:	2b 53 a1 09 18 01 dc 00 be 00 1e 00 01 00 14 50     +S.............P
     d5a:	10 2b 53 8b 09 18 01 b4 00 be 00 1e 00 01 00 a8     .+S.............
     d6a:	5e 10 2b 53 72 09 18 01 8c 00 be 00 1e 00 01 00     ^.+Sr...........
     d7a:	f0 5e 10 2b 53 5a 09 18 01 64 00 be 00 1e 00 01     .^.+SZ...d......
     d8a:	00 05 5f 10 2b 53 45 09 18 01 3c 00 be 00 1e 00     .._.+SE...<.....
     d9a:	01 00 4d 5f 10 2b 53 38 09 18 01 14 00 be 00 1e     ..M_.+S8........
     daa:	00 01 00 95 5f 10 2b 53 29 09 0a 00 aa 00 be 00     ...._.+S).......
     dba:	28 00 01 00 fd 8a 10 2b 53 00 00 00 00 00 00 00     (......+S.......
	...
     e56:	00 00 0a 00 28 00 00 00 7b 81 c8 00 78 00 10 12     ....(...{...x...
     e66:	50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00     P+S.............
	...
    100a:	00 00 00 08 00 01 00 00 00 00 00 10 00 00 00 00     ................
    101a:	e0 01 40 01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53     ..@.....-S-S-S-S
    102a:	2d 53 37 84 b6 09 0a 00 dc 00 be 00 28 00 02 00     -S7.........(...
    103a:	af b6 10 2b 53 1b 09 0a 00 28 00 be 00 28 00 02     ...+S....(...(..
    104a:	00 63 77 10 2b 53 00 00 00 00 00 00 00 00 00 00     .cw.+S..........
	...
    114a:	00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50     ..."....b......P
    115a:	2b 53 ca 09 9a 01 48 00 00 00 0a 61 28 00 7e 00     +S....H....a(.~.
    116a:	10 12 50 2b 53 ca 09 dc 00 14 00 00 00 b5 60 f0     ..P+S.........`.
    117a:	00 f0 00 10 12 50 2b 53 ca 09 00 00 00 00 00 00     .....P+S........
	...
    11ee:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
    11fe:	01 98 82 40 60 b7 50 10 00 00 00 00 00 00 00 00     ...@`.P.........
	...
    121a:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 c6 50     ...+....(.(....P
    122a:	10 2b 53 2d 9a 01 c8 00 28 00 28 00 02 00 d4 50     .+S-....(.(....P
    123a:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    12fe:	00 00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
    130e:	01 40 01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53 2d     .@.....-S-S-S-S-
    131e:	53 0c 09 b6 09 0a 00 dc 00 be 00 28 00 02 00 af     S..........(....
    132e:	b6 10 2b 53 fb 08 0a 00 28 00 be 00 28 00 01 00     ..+S....(...(...
    133e:	1c 7a 10 2b 53 e5 08 0a 00 64 00 be 00 28 00 01     .z.+S....d...(..
    134e:	00 dd 5f 10 2b 53 d3 08 0a 00 a0 00 be 00 28 00     .._.+S........(.
    135e:	01 00 e0 79 10 2b 53 be 08 18 01 28 00 be 00 28     ...y.+S....(...(
    136e:	00 01 00 65 5e 10 2b 53 a7 08 18 01 64 00 be 00     ...e^.+S....d...
    137e:	28 00 01 00 1d 5e 10 2b 53 00 00 00 00 00 00 00     (....^.+S.......
	...
    143e:	18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50 2b     .."....b......P+
    144e:	53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    15f2:	00 06 00 01 00 00 00 00 00 99 00 00 00 00 e0 01     ................
    1602:	40 01 01 ff ff 20 2d 53 2d 53 2d 53 35 51 2d 53     @.... -S-S-S5Q-S
    1612:	8d 08 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     ..........(.....
    1622:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    172e:	00 00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18     ....."....b.....
    173e:	12 50 2b 53 ca 09 9a 01 48 00 02 00 0a 61 28 00     .P+S....H....a(.
    174e:	56 00 10 12 50 2b 53 ca 09 05 00 1e 00 00 00 b5     V...P+S.........
    175e:	60 cc 01 b4 00 10 12 50 2b 53 ca 09 00 00 00 00     `......P+S......
	...
    1802:	00 2b 9a 01 1e 00 28 00 28 00 02 02 c6 50 10 2b     .+....(.(....P.+
    1812:	53 2d 9a 01 a0 00 28 00 28 00 02 02 d4 50 10 2b     S-....(.(....P.+
    1822:	53 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    18c6:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    18d6:	82 50 02 03 02 02 00 6b 7b c0 71 aa 50 a4 50 10     .P.....k{.q.P.P.
    18e6:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    18f6:	01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53 2d 53 7e     .....-S-S-S-S-S~
    1906:	08 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
    1916:	2b 53 72 08 0a 00 28 00 be 00 28 00 01 00 d5 5d     +Sr...(...(....]
    1926:	10 2b 53 64 08 0a 00 64 00 be 00 28 00 01 00 c0     .+Sd...d...(....
    1936:	5d 10 2b 53 59 08 0a 00 a0 00 be 00 28 00 01 00     ].+SY.......(...
    1946:	ab 5d 10 2b 53 45 08 18 01 28 00 be 00 28 00 01     .].+SE...(...(..
    1956:	00 13 50 10 2b 53 00 00 00 00 00 00 00 00 00 00     ..P.+S..........
	...
    1a22:	00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12     ...."....b......
    1a32:	50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00     P+S.............
	...
    1bd6:	00 00 00 05 00 01 00 00 00 00 00 9a 00 00 00 00     ................
    1be6:	e0 01 40 01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53     ..@.....-S-S-S-S
    1bf6:	2d 53 2e 08 b6 09 0a 00 dc 00 be 00 28 00 02 00     -S..........(...
    1c06:	af b6 10 2b 53 00 00 00 00 00 00 00 00 00 00 00     ...+S...........
	...
    1d16:	00 0f 00 2d 00 00 00 bd 7c 00 00 00 00 24 12 50     ...-....|....$.P
    1d26:	2b 53 ca 09 0a 00 28 00 00 00 b5 60 b8 01 aa 00     +S....(....`....
    1d36:	20 12 50 2b 53 ca 09 18 01 22 01 00 00 f5 62 00      .P+S...."....b.
    1d46:	00 00 00 18 12 50 2b 53 ca 09 00 00 00 00 00 00     .....P+S........
	...
    1eca:	00 00 01 00 03 00 00 00 00 00 a1 00 00 00 00 e0     ................
    1eda:	01 40 01 01 ff ff 20 2d 53 2d 53 5f 51 35 51 2d     .@.... -S-S_Q5Q-
    1eea:	53 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    27c2:	00 00 23 08 1f 08 1e 00 3c 00 64 00 28 00 02 00     ..#.....<.d.(...
    27d2:	fd 60 10 2b 53 1c 08 fa 00 3c 00 64 00 28 00 02     .`.+S....<.d.(..
    27e2:	00 af b6 10 2b 53 00 00 00 00 00 00 00 00 00 00     ....+S..........
	...
    28e2:	00 14 00 23 00 00 00 3f 5d 00 00 00 00 10 12 50     ...#...?]......P
    28f2:	2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00     +S..............
	...
    2a96:	00 00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c     ..........d2.2.|
    2aa6:	01 8c 00 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 2d     .......-S-S-S-S-
    2ab6:	53 23 08 15 08 0a 00 c8 00 82 00 28 00 02 00 df     S#.........(....
    2ac6:	60 10 2b 53 0e 08 96 00 c8 00 82 00 28 00 02 00     `.+S........(...
    2ad6:	af b6 10 2b 53 00 00 00 00 00 00 00 00 00 00 00     ...+S...........
	...
    2bd6:	64 00 2d 00 00 00 10 62 b4 00 28 00 10 12 50 2b     d.-....b..(...P+
    2be6:	53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    2ca6:	00 00 2b 3c 00 2d 00 28 00 28 00 02 00 cd 51 10     ..+<.-.(.(....Q.
    2cb6:	2b 53 2d 18 01 2d 00 28 00 28 00 02 00 12 52 10     +S-..-.(.(....R.
    2cc6:	2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00 00     +S..............
	...
    2d8a:	00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc 01     .........f......
    2d9a:	04 01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 2d 53     ......-S-S-S-S-S
    2daa:	03 08 15 08 0a 00 c8 00 82 00 28 00 02 00 bb 60     ..........(....`
    2dba:	10 2b 53 0e 08 96 00 c8 00 82 00 28 00 02 00 af     .+S........(....
    2dca:	b6 10 2b 53 f9 07 2c 01 c8 00 82 00 28 00 02 00     ..+S..,.....(...
    2dda:	3a 56 10 2b 53 f7 07 40 01 23 00 28 00 28 00 02     :V.+S..@.#.(.(..
    2dea:	00 8f 51 10 2b 53 f5 07 6d 01 23 00 28 00 28 00     ..Q.+S..m.#.(.(.
    2dfa:	02 01 8f 51 10 2b 53 f3 07 9a 01 23 00 28 00 28     ...Q.+S....#.(.(
    2e0a:	00 02 02 8f 51 10 2b 53 00 00 00 00 00 00 00 00     ....Q.+S........
	...
    2ec6:	00 00 00 0a 00 23 00 00 00 8a 61 2c 01 28 00 10     .....#....a,.(..
    2ed6:	12 50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00     .P+S............
	...
    301a:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    302a:	03 99 51 5f 56 92 51 10 00 00 00 00 00 00 00 00     ..Q_V.Q.........
	...
    307e:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    308e:	01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 2d 53 23     .....-S-S-S-S-S#
    309e:	08 15 08 0a 00 c8 00 82 00 28 00 02 00 bb 60 10     .........(....`.
    30ae:	2b 53 0e 08 96 00 c8 00 82 00 28 00 02 00 af b6     +S........(.....
    30be:	10 2b 53 f9 07 2c 01 c8 00 82 00 28 00 02 00 3a     .+S..,.....(...:
    30ce:	56 10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00     V.+S............
	...
    31ba:	00 00 0a 00 23 00 00 00 8a 61 2c 01 28 00 10 12     ....#....a,.(...
    31ca:	50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00     P+S.............
	...
    330e:	0a 00 5a 00 23 00 23 00 02 2d 2d 02 0a 00 00 02     ..Z.#.#..--.....
    331e:	b9 51 78 56 cb 51 10 00 00 00 00 00 00 00 00 00     .QxV.Q..........
	...
    336e:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    337e:	cc 01 04 01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53     ........-S-S-S-S
    338e:	2d 53 23 08 f0 07 fa 00 3c 00 64 00 28 00 02 00     -S#.....<.d.(...
    339e:	af b6 10 2b 53 00 00 00 00 00 00 00 00 00 00 00     ...+S...........
	...
    34ae:	00 14 00 23 00 00 00 3f 5d 00 00 00 00 10 12 50     ...#...?]......P
    34be:	2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00     +S..............
	...
    3662:	00 00 01 00 01 00 00 00 00 00 68 32 00 32 00 7c     ..........h2.2.|
    3672:	01 8c 00 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 2d     .......-S-S-S-S-
    3682:	53 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    4542:	d5 07 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     ..........(.....
    4552:	10 2b 53 c7 07 18 01 be 00 be 00 28 00 02 00 d7     .+S........(....
    4562:	77 10 2b 53 92 83 18 01 8c 00 be 00 28 00 02 00     w.+S........(...
    4572:	83 78 10 2b 53 b8 07 18 01 5a 00 be 00 28 00 02     .x.+S....Z...(..
    4582:	00 4c 78 10 2b 53 a8 07 18 01 28 00 be 00 28 00     .Lx.+S....(...(.
    4592:	02 00 d7 78 10 2b 53 00 00 00 00 00 00 00 00 00     ...x.+S.........
	...
    465e:	00 00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18     ....."....b.....
    466e:	12 50 2b 53 ca 09 14 00 14 00 00 00 1b 83 00 00     .P+S............
    467e:	00 00 10 12 50 2b 53 ca 09 14 00 14 00 00 00 e2     ....P+S.........
    468e:	77 00 00 00 00 14 12 50 2b 53 ca 09 00 00 00 00     w......P+S......
	...
    4816:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    4826:	01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53 2d 53 28     .....-S-S-S-S-S(
    4836:	84 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
    4846:	2b 53 c7 07 18 01 5a 00 be 00 28 00 02 00 fe 71     +S....Z...(....q
    4856:	10 2b 53 b8 07 18 01 28 00 be 00 28 00 02 00 e2     .+S....(...(....
    4866:	80 10 2b 53 98 07 18 01 8c 00 be 00 28 00 02 00     ..+S........(...
    4876:	df 80 10 2b 53 00 00 00 00 00 00 00 00 00 00 00     ...+S...........
	...
    4952:	00 00 14 00 14 00 00 00 63 7e 00 00 00 00 14 12     ........c~......
    4962:	50 2b 53 ca 09 18 01 22 01 00 00 f5 62 00 00 00     P+S...."....b...
    4972:	00 18 12 50 2b 53 ca 09 00 00 00 00 00 00 00 00     ...P+S..........
	...
    4b06:	00 00 00 04 00 02 00 00 00 00 00 07 00 00 00 00     ................
    4b16:	e0 01 40 01 01 ff ff 20 2d 53 2d 53 2d 53 35 51     ..@.... -S-S-S5Q
    4b26:	2d 53 28 84 b6 09 0a 00 dc 00 be 00 28 00 02 00     -S(.........(...
    4b36:	af b6 10 2b 53 7d 07 0a 00 28 00 be 00 28 00 01     ...+S}...(...(..
    4b46:	00 fa 7a 10 2b 53 00 00 00 00 00 00 00 00 00 00     ..z.+S..........
	...
    4c46:	00 dc 00 14 00 00 00 b5 60 f0 00 f0 00 10 12 50     ........`......P
    4c56:	2b 53 ca 09 18 01 22 01 00 00 f5 62 00 00 00 00     +S...."....b....
    4c66:	18 12 50 2b 53 ca 09 9a 01 48 00 01 00 0a 61 28     ..P+S....H....a(
    4c76:	00 7e 00 10 12 50 2b 53 ca 09 00 00 00 00 00 00     .~...P+S........
	...
    4cea:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01     ...#...7..<<....
    4cfa:	04 2d 7e c5 7a c4 50 24 00 00 00 00 00 00 00 00     .-~.z.P$........
	...
    4d16:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 01 c6 50     ...+....(.(....P
    4d26:	10 2b 53 2d 9a 01 c8 00 28 00 28 00 02 01 d4 50     .+S-....(.(....P
    4d36:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    4dfa:	00 00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0     ................
    4e0a:	01 40 01 01 ff ff 20 2d 53 2d 53 2c 51 35 51 2d     .@.... -S-S,Q5Q-
    4e1a:	53 68 07 b6 09 0a 00 dc 00 be 00 28 00 02 00 af     Sh.........(....
    4e2a:	b6 10 2b 53 5b 07 0a 00 78 00 be 00 28 00 01 a0     ..+S[...x...(...
    4e3a:	9c b6 20 2b 53 00 00 00 00 00 00 00 00 00 00 00     .. +S...........
	...
    4f3a:	18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50 2b     .."....b......P+
    4f4a:	53 ca 09 9a 01 48 00 04 00 0a 61 28 00 7e 00 24     S....H....a(.~.$
    4f5a:	12 50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00     .P+S............
	...
    4fde:	0a 00 28 00 be 00 37 00 01 01 01 00 01 01 00 01     ..(...7.........
    4fee:	08 75 39 60 19 51 20 e6 00 28 00 aa 00 37 00 01     .u9`.Q ..(...7..
    4ffe:	3c 3c 00 03 01 04 05 cd 74 33 60 19 51 24 2b 9a     <<......t3`.Q$+.
    500e:	01 1e 00 28 00 28 00 02 04 c6 50 20 2b 53 2d 9a     ...(.(....P +S-.
    501e:	01 c8 00 28 00 28 00 02 04 d4 50 20 2b 53 00 00     ...(.(....P +S..
	...
    50ee:	00 02 00 02 00 02 02 00 00 9e 00 00 00 00 e0 01     ................
    50fe:	40 01 01 ff ff 20 2d 53 2d 53 2c 51 35 51 2d 53     @.... -S-S,Q5Q-S
    510e:	40 07 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     @.........(.....
    511e:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    53c2:	00 00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff     ....(.x.2.......
    53d2:	82 3c 02 03 03 ff 05 47 75 c6 73 19 51 f3 73 21     .<.....Gu.s.Q.s!
    53e2:	01 00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c     ...............,
    53f2:	01 06 e0 ff 20 23 51 2d 53 2d 53 2d 53 2d 53 36     .... #Q-S-S-S-S6
    5402:	07 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
    5412:	2b 53 20 07 0a 00 a0 00 be 00 28 00 01 00 12 50     +S .......(....P
    5422:	20 2b 53 b8 07 18 01 28 00 be 00 28 00 02 00 9f      +S....(...(....
    5432:	74 20 2b 53 8f 84 0a 00 28 00 be 00 28 00 01 00     t +S....(...(...
    5442:	64 74 20 16 73 a0 84 0a 00 28 00 be 00 28 00 01     dt .s....(...(..
    5452:	00 29 74 20 1f 73 11 07 18 01 64 00 be 00 28 00     .)t .s....d...(.
    5462:	02 0b 9c b6 20 2b 53 01 07 18 01 a0 00 be 00 28     .... +S........(
    5472:	00 01 00 12 50 20 2b 53 f7 06 18 01 dc 00 be 00     ....P +S........
    5482:	28 00 02 0c 9c b6 20 2b 53 df 06 0a 00 64 00 be     (..... +S....d..
    5492:	00 28 00 01 9f 9c b6 20 2b 53 00 00 00 00 00 00     .(..... +S......
	...
    551e:	00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12     ...."....b......
    552e:	50 2b 53 ca 09 8c 00 05 00 00 00 96 75 00 00 00     P+S.........u...
    553e:	00 20 12 50 2b 53 ca 09 00 00 00 00 00 00 00 00     . .P+S..........
	...
    56d2:	00 00 00 09 00 02 00 00 00 00 00 09 00 00 00 00     ................
    56e2:	e0 01 40 01 01 ff ff 20 2d 53 2d 53 2d 53 2d 53     ..@.... -S-S-S-S
    56f2:	2d 53 11 07 b6 09 0a 00 dc 00 be 00 28 00 02 00     -S..........(...
    5702:	af b6 10 2b 53 d1 06 d2 00 dc 00 aa 00 28 00 02     ...+S........(..
    5712:	00 83 6e 20 2b 53 00 00 00 00 00 00 00 00 00 00     ..n +S..........
	...
    5812:	00 9a 01 52 00 03 00 0a 61 28 00 56 00 20 12 50     ...R....a(.V. .P
    5822:	2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00     +S..............
	...
    58e2:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 03 c6 50     ...+..(.(.(....P
    58f2:	20 2b 53 2d 9a 01 aa 00 28 00 28 00 02 03 d4 50      +S-....(.(....P
    5902:	20 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00      +S.............
	...
    59aa:	0a 00 28 00 78 00 32 00 01 01 e0 07 ff ff 82 3c     ..(.x.2........<
    59ba:	02 03 03 03 01 0a 7c 8c 6e aa 50 0a 76 20 02 00     ......|.n.P.v ..
    59ca:	01 00 00 02 00 01 0b 0a 00 0a 00 cc 01 2c 01 06     .............,..
    59da:	e0 ff 20 2d 53 2d 53 2d 53 2d 53 2d 53 bb 06 b6     .. -S-S-S-S-S...
    59ea:	09 0a 00 dc 00 be 00 28 00 02 00 af b6 10 2b 53     .......(......+S
	...
    5a92:	00 b4 06 0a 00 a0 00 5a 00 28 00 01 00 f8 ff ff     .......Z.(......
    5aa2:	03 3d 73 e6 75 26 28 73 ab 06 6e 00 a0 00 5a 00     .=s.u&(s..n...Z.
    5ab2:	28 00 01 1f 00 ff ff 05 3d 73 e6 75 26 28 73 00     (.......=s.u&(s.
	...
    5b06:	0a 00 28 00 e0 ff e7 62 be 00 a0 00 02 12 50 2b     ..(....b......P+
    5b16:	53 ca 09 32 00 28 00 00 00 10 62 6e 00 28 00 23     S..2.(....bn.(.#
    5b26:	12 50 28 73 ca 09 00 00 00 00 00 00 00 00 00 00     .P(s............
	...
    5bd6:	00 00 2b a0 00 28 00 28 00 28 00 02 00 cd 51 22     ..+..(.(.(....Q"
    5be6:	28 73 2d 0a 00 28 00 28 00 28 00 02 00 12 52 22     (s-..(.(.(....R"
    5bf6:	28 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00     (s..............
	...
    5c9a:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    5caa:	ff 01 32 00 05 01 ff 05 b9 53 6e 6d 19 51 59 73     ..2......Snm.QYs
    5cba:	22 01 02 02 00 00 02 00 01 9f 0a 00 0a 00 cc 01     "...............
    5cca:	2c 01 06 e0 ff 20 1a 51 72 51 68 51 2d 53 d1 72     ,.... .QrQhQ-S.r
    5cda:	5d 82 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     ].........(.....
    5cea:	10 2b 53 9b 06 0a 00 28 00 be 00 28 00 01 00 b4     .+S....(...(....
    5cfa:	6c 10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00     l.+S............
	...
    5df6:	00 00 00 0e 01 28 00 00 00 10 62 8c 00 28 00 10     .....(....b..(..
    5e06:	12 50 2b 53 99 06 0e 01 5a 00 01 00 10 62 8c 00     .P+S....Z....b..
    5e16:	28 00 10 12 50 2b 53 97 06 0e 01 8c 00 02 00 10     (...P+S.........
    5e26:	62 8c 00 28 00 10 12 50 2b 53 95 06 0e 01 be 00     b..(...P+S......
    5e36:	03 00 10 62 8c 00 28 00 10 12 50 2b 53 93 06 00     ...b..(...P+S...
	...
    5eca:	00 2b 9a 01 28 00 28 00 28 00 02 00 cd 51 10 2b     .+..(.(.(....Q.+
    5eda:	53 2d e6 00 28 00 28 00 28 00 02 00 12 52 10 2b     S-..(.(.(....R.+
    5eea:	53 2b 9a 01 5a 00 28 00 28 00 02 01 cd 51 10 2b     S+..Z.(.(....Q.+
    5efa:	53 2d e6 00 5a 00 28 00 28 00 02 01 12 52 10 2b     S-..Z.(.(....R.+
    5f0a:	53 2b 9a 01 8c 00 28 00 28 00 02 02 cd 51 10 2b     S+....(.(....Q.+
    5f1a:	53 2d e6 00 8c 00 28 00 28 00 02 02 12 52 10 2b     S-....(.(....R.+
    5f2a:	53 2b 9a 01 be 00 28 00 28 00 02 03 cd 51 10 2b     S+....(.(....Q.+
    5f3a:	53 2d e6 00 be 00 28 00 28 00 02 03 12 52 10 2b     S-....(.(....R.+
    5f4a:	53 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    5fae:	02 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc 01 2c     ...............,
    5fbe:	01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 57 52 5b     .....-S-S-S-SWR[
    5fce:	07 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
    5fde:	2b 53 89 06 0a 00 28 00 be 00 28 00 02 00 12 50     +S....(...(....P
    5fee:	20 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00      +S.............
	...
    60ea:	00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12     ...."....b......
    60fa:	50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00     P+S.............
	...
    629e:	00 00 00 02 00 01 00 00 00 00 00 a0 00 00 00 00     ................
    62ae:	e0 01 40 01 01 ff ff 20 2d 53 2d 53 2d 53 35 51     ..@.... -S-S-S5Q
    62be:	2d 53 77 06 b6 09 0a 00 dc 00 be 00 28 00 02 00     -Sw.........(...
    62ce:	af b6 10 2b 53 bb 09 0a 00 28 00 be 00 28 00 02     ...+S....(...(..
    62de:	10 9c b6 10 2b 53 69 06 0a 00 64 00 be 00 28 00     ....+Si...d...(.
    62ee:	02 00 12 50 10 2b 53 59 06 18 01 a0 00 be 00 28     ...P.+SY.......(
    62fe:	00 02 00 2a 71 10 2b 53 0c 09 18 01 28 00 be 00     ...*q.+S....(...
    630e:	28 00 02 99 9c b6 10 2b 53 4e 06 18 01 64 00 be     (......+SN...d..
    631e:	00 28 00 02 9c 9c b6 10 2b 53 7e 08 0a 00 a0 00     .(......+S~.....
    632e:	be 00 28 00 02 9a 9c b6 10 2b 53 3d 06 18 01 dc     ..(......+S=....
    633e:	00 be 00 28 00 01 00 0f 50 10 2b 53 00 00 00 00     ...(....P.+S....
	...
    63de:	00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50     ..."....b......P
    63ee:	2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00     +S..............
	...
    6592:	00 00 08 00 01 00 00 00 00 00 96 00 00 00 00 e0     ................
    65a2:	01 40 01 01 ff ff 10 2d 53 2d 53 2d 53 35 51 2d     .@.....-S-S-S5Q-
    65b2:	53 cb 09 b6 09 0a 00 dc 00 be 00 28 00 02 00 af     S..........(....
    65c2:	b6 10 2b 53 32 06 0a 00 28 00 be 00 28 00 02 96     ..+S2...(...(...
    65d2:	9c b6 20 2b 53 24 06 18 01 28 00 be 00 28 00 02     .. +S$...(...(..
    65e2:	9e 9c b6 20 2b 53 17 06 0a 00 a0 00 be 00 28 00     ... +S........(.
    65f2:	02 98 9c b6 20 2b 53 0a 06 0a 00 64 00 be 00 28     .... +S....d...(
    6602:	00 02 97 9c b6 20 2b 53 00 00 00 00 00 00 00 00     ..... +S........
	...
    66d2:	18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50 2b     .."....b......P+
    66e2:	53 ca 09 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    6886:	00 05 00 01 00 00 00 00 00 02 00 00 00 00 e0 01     ................
    6896:	40 01 01 ff ff 20 2d 53 2d 53 2d 53 35 51 2d 53     @.... -S-S-S5Q-S
    68a6:	f6 05 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     ..........(.....
    68b6:	10 2b 53 37 84 0a 00 28 00 be 00 28 00 02 03 9c     .+S7...(...(....
    68c6:	b6 10 2b 53 eb 05 0a 00 64 00 be 00 28 00 02 06     ..+S....d...(...
    68d6:	9c b6 10 2b 53 e1 05 0a 00 a0 00 be 00 28 00 02     ...+S........(..
    68e6:	00 12 50 10 2b 53 00 00 00 00 00 00 00 00 00 00     ..P.+S..........
	...
    69c2:	00 00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18     ....."....b.....
    69d2:	12 50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00     .P+S............
	...
    6b7a:	04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01 40     ...............@
    6b8a:	01 01 ff ff 10 2d 53 2d 53 2d 53 2d 53 2d 53 cd     .....-S-S-S-S-S.
    6b9a:	05 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10     .........(......
    6baa:	2b 53 8d 08 0a 00 28 00 be 00 28 00 01 08 9c b6     +S....(...(.....
    6bba:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    6cb6:	00 00 18 01 22 01 00 00 f5 62 00 00 00 00 18 12     ...."....b......
    6cc6:	50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00 00     P+S.............
	...
    6d5a:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    6d6a:	00 01 2e 54 2d 60 19 51 10 00 00 00 00 00 00 00     ...T-`.Q........
	...
    6e4e:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    6e5e:	32 00 01 01 ff 01 dc 54 27 60 19 51 63 50 10 02     2......T'`.QcP..
    6e6e:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    6e7e:	01 ff ff 10 2d 53 2d 53 2d 53 2d 53 2d 53 cd 05     ....-S-S-S-S-S..
    6e8e:	b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6 10 2b     ........(......+
    6e9e:	53 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     S...............
	...
    6faa:	00 0e 01 28 00 00 00 10 62 8c 00 28 00 10 12 50     ...(....b..(...P
    6fba:	69 50 ca 09 00 00 00 00 00 00 00 00 00 00 00 00     iP..............
	...
    700a:	bd 05 0a 00 28 00 be 00 28 00 01 e0 07 ff ff 00     ....(...(.......
    701a:	93 71 9e 50 f1 53 10 00 00 00 00 00 00 00 00 00     .q.P.S..........
	...
    707a:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 00 cd 51     ...+..(.(.(....Q
    708a:	10 69 50 2d e6 00 28 00 28 00 28 00 02 00 12 52     .iP-..(.(.(....R
    709a:	10 69 50 00 00 00 00 00 00 00 00 00 00 00 00 00     .iP.............
	...
    715e:	00 00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc     ................
    716e:	01 18 01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 70     .......-S-S-S-Sp
    717e:	50 4e 06 b6 09 0a 00 dc 00 be 00 28 00 02 00 af     PN.........(....
    718e:	b6 10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00     ..+S............
	...
    729e:	18 01 22 01 00 00 f5 62 00 00 00 00 18 12 50 2b     .."....b......P+
    72ae:	53 ca 09 0a 00 1e 00 00 00 75 5b 00 00 00 00 2c     S........u[....,
    72be:	12 50 2b 53 ca 09 00 00 00 00 00 00 00 00 00 00     .P+S............
	...
    7452:	00 01 00 02 00 00 00 00 00 9c 00 00 00 00 e0 01     ................
    7462:	40 01 01 ff ff 10 2d 53 2d 53 5f 51 35 51 2d 53     @.....-S-S_Q5Q-S
    7472:	66 85 b6 09 0a 00 dc 00 be 00 28 00 02 00 af b6     f.........(.....
    7482:	10 2b 53 00 00 00 00 00 00 00 00 00 00 00 00 00     .+S.............
	...
    7726:	00 00 0a 00 28 00 64 00 28 00 01 01 e0 07 ff ff     ....(.d.(.......
    7736:	6e 32 02 04 02 ff 06 8d 54 40 71 19 51 31 50 10     n2......T@q.Q1P.
    7746:	01 00 00 01 00 00 00 01 9d 0a 00 0a 00 cc 01 18     ................
    7756:	01 06 e0 ff 10 2d 53 2d 53 2d 53 2d 53 70 50 00     .....-S-S-S-SpP.
	...

0000803e <keyboad_number_char_special>:
    803e:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    804e:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00008058 <keyboad_number_char_lower>:
    8058:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    8068:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

00008072 <keyboad_number_char_upper>:
    8072:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    8082:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

0000808c <network_name>:
    808c:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00008099 <network_mqtt_key>:
    8099:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

000080aa <network_mqtt_user>:
    80aa:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    80ba:	72 00                                               r.

000080bc <network_mqtt_port>:
    80bc:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    80cc:	74 00                                               t.

000080ce <network_mqtt_host>:
    80ce:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    80de:	74 00                                               t.

000080e0 <network_ntp>:
    80e0:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000080ec <network_dns>:
    80ec:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000080f8 <network_gw>:
    80f8:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

00008103 <network_netmask>:
    8103:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

00008113 <network_mac>:
    8113:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

0000811f <new_text_slash_rtds_control_list>:
    811f:	2f 72 74 64 73 2d 63 6f 6e 74 72 6f 6c 2f 6c 69     /rtds-control/li
    812f:	73 74 00                                            st.

00008132 <new_text_slash_rtds_slash>:
    8132:	2f 72 74 64 73 2f 00                                /rtds/.

00008139 <global_time_offset>:
    8139:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    8149:	6f 66 66 73 65 74 00                                offset.

00008150 <global_time_ntp>:
    8150:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00008160 <global_time_set>:
    8160:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00008170 <termbig_header_out>:
    8170:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

0000817e <termbig_subscribe>:
    817e:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    818e:	73 63 72 69 62 65 00                                scribe.

00008195 <thermctl_subscribe>:
    8195:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    81a5:	62 73 63 72 69 62 65 00                             bscribe.

000081ad <lightctl_header_out>:
    81ad:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

000081bc <thermctl_header_in>:
    81bc:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

000081ca <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    81ca:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    81da:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    81ea:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    81fa:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    820a:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    821a:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    822a:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

00008236 <text_rtc_cas>:
    8236:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    8246:	6e 79 00                                            ny.

00008249 <text_ntp_cas>:
    8249:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    8259:	63 61 73 00                                         cas.

0000825d <text_pid_regulator>:
    825d:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

0000826b <text_nrf_rozhrani>:
    826b:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00008278 <text_rest_rozhrani>:
    8278:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    8288:	69 00                                               i.

0000828a <thermctl_header_out>:
    828a:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00008299 <text_mqtt_rozhrani>:
    8299:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

000082a7 <text_ethernet_rozhrani>:
    82a7:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    82b7:	69 00                                               i.

000082b9 <text_onewire_hledam>:
    82b9:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

000082c6 <text_onewire_rozhrani>:
    82c6:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

000082d5 <text_touchscreen>:
    82d5:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

000082e1 <text_nastaveni_systemu>:
    82e1:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    82f1:	75 00                                               u.

000082f3 <text_test_eeprom>:
    82f3:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

00008303 <text_ok>:
    8303:	4f 4b 00                                            OK.

00008306 <text_test_ram>:
    8306:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

00008313 <text_bezny_start>:
    8313:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

0000831f <text_prog>:
    831f:	50 52 4f 47 00                                      PROG.

00008324 <text_vychozi_nastaveni>:
    8324:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    8334:	69 00                                               i.

00008336 <text_vnitrni_ochrany>:
    8336:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

00008346 <term_title>:
    8346:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    8356:	6f 72 20 76 33 00                                   or v3.

0000835c <new_text_regulator>:
    835c:	52 65 67 75 6c 61 74 6f 72 3a 20 00                 Regulator: .

00008368 <current_time>:
    8368:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00008375 <current_temp>:
    8375:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    8385:	3a 00                                               :.

00008387 <new_text_date_error>:
    8387:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

00008392 <nastaveni_tds_period>:
    8392:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

000083a1 <temp_offset_short>:
    83a1:	6f 66 66 73 65 74 3a 00                             offset:.

000083a9 <text_online>:
    83a9:	4f 6e 6c 69 6e 65 00                                Online.

000083b0 <text_last_update>:
    83b0:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    83c0:	7a 61 63 65 3a 00                                   zace:.

000083c6 <current_temp_short>:
    83c6:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

000083cf <text_nazev>:
    83cf:	4e 61 7a 65 76 3a 00                                Nazev:.

000083d6 <new_text_rtds_type_temp>:
    83d6:	54 79 70 3a 20 76 7a 64 61 6c 65 6e 61 20 74 65     Typ: vzdalena te
    83e6:	70 6c 6f 74 61 00                                   plota.

000083ec <text_nastavit_tds>:
    83ec:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    83fc:	6c 6f 00                                            lo.

000083ff <text_not_used>:
    83ff:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

0000840c <text_associovat_tds>:
    840c:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    841c:	64 6c 6f 00                                         dlo.

00008420 <text_rtds_prefix>:
    8420:	2f 00                                               /.

00008422 <text_err>:
    8422:	45 72 72 6f 72 00                                   Error.

00008428 <nastaveni_rtds>:
    8428:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

00008437 <nastaveni_onewire>:
    8437:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

00008445 <text_term_do_activate>:
    8445:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    8455:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

0000845f <text_term_deactive>:
    845f:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00008469 <text_term_active>:
    8469:	41 6b 74 69 76 6e 69 00                             Aktivni.

00008471 <text_change_default_ring>:
    8471:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    8481:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

0000848b <text_dashdash>:
    848b:	2d 2d 2d 00                                         ---.

0000848f <text_term_do_deactivate>:
    848f:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 2e     Deaktivovat reg.
	...

000084a0 <text_term_do_activate1>:
    84a0:	41 6b 74 69 76 6f 76 61 74 20 72 65 67 2e 00        Aktivovat reg..

000084af <text_button_term_man_comment>:
    84af:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

000084be <text_button_term_man>:
    84be:	4d 41 4e 00                                         MAN.

000084c2 <text_button_term_prog_comment>:
    84c2:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    84d2:	72 61 6d 00                                         ram.

000084d6 <text_button_term_prog>:
    84d6:	50 52 4f 47 00                                      PROG.

000084db <text_button_term_min_comment>:
    84db:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    84eb:	67 75 6c 61 63 65 00                                gulace.

000084f2 <text_button_term_min>:
    84f2:	4d 49 4e 00                                         MIN.

000084f6 <text_button_term_max_comment>:
    84f6:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    8506:	75 6c 61 63 65 00                                   ulace.

0000850c <text_button_term_max>:
    850c:	4d 41 58 00                                         MAX.

00008510 <text_button_term_off_comment>:
    8510:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    8520:	79 20 6d 6f 64 00                                   y mod.

00008526 <text_button_term_off>:
    8526:	4f 46 46 00                                         OFF.

0000852a <new_text_jas_display>:
    852a:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    853a:	69 73 70 6c 61 79 65 00                             isplaye.

00008542 <new_text_jas_display_manual>:
    8542:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

00008553 <new_text_jas_display_automat>:
    8553:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    8563:	6e 69 00                                            ni.

00008566 <new_text_auto_display_shutdown>:
    8566:	41 75 74 6f 6d 61 74 69 63 6b 65 20 76 79 70 6e     Automaticke vypn
    8576:	75 74 69 20 64 69 73 70 6c 61 79 65 00              uti displaye.

00008583 <new_text_vypnuto>:
    8583:	56 79 70 6e 75 74 6f 00                             Vypnuto.

0000858b <new_text_device_dns>:
    858b:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

00008596 <new_text_device_gw>:
    8596:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

000085a4 <new_text_device_mask>:
    85a4:	49 50 20 6d 61 73 6b 61 00                          IP maska.

000085ad <new_text_device_ip>:
    85ad:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

000085b7 <new_text_device_nazev>:
    85b7:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

000085c6 <new_text_device_mac>:
    85c6:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

000085d1 <new_text_error_ntp_time>:
    85d1:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    85e1:	45 52 52 4f 52 00                                   ERROR.

000085e7 <new_text_ok_ntp_time>:
    85e7:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    85f7:	4f 4b 00                                            OK.

000085fa <new_text_ok_connect_seznam>:
    85fa:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

00008609 <new_text_err_connect_seznam>:
    8609:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    8619:	52 00                                               R.

0000861b <seznam_server>:
    861b:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

00008629 <new_text_mqtt_error>:
    8629:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

00008638 <new_text_mqtt_processed>:
    8638:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    8648:	68 3a 20 00                                         h: .

0000864c <new_text_mqtt_receive>:
    864c:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

0000865d <new_text_mqtt_send>:
    865d:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    866d:	20 00                                                .

0000866f <new_text_selfcheck_test>:
    866f:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

0000867b <new_text_internal_temp>:
    867b:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    868b:	20 00                                                .

0000868d <new_text_consume_ampere>:
    868d:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

0000869c <new_text_tritri_volt>:
    869c:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    86ac:	2e 33 20 00                                         .3 .

000086b0 <new_text_pet_volt>:
    86b0:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    86c0:	2e 30 20 00                                         .0 .

000086c4 <new_text_input_volt>:
    86c4:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

000086d4 <port_to_mode_PGM>:
    86d4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

000086e4 <digital_pin_to_timer_PGM>:
    86e4:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    8718:	00 03                                               ..

0000871a <RF24::print_status(unsigned char)::__c>:
    871a:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    872a:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    873a:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    874a:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    875a:	3d 25 78 0d 0a 00                                   =%x...

00008760 <_ZZN4RF2412printDetailsEvE3__c__12_>:
    8760:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

00008771 <rf24_pa_dbm_e_str_P>:
    8771:	fc 09 f5 09 ed 09 e6 09                             ........

00008779 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    8779:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    8789:	0d 0a 00                                            ...

0000878c <rf24_crclength_e_str_P>:
    878c:	12 0a 0b 0a 03 0a                                   ......

00008792 <_ZZN4RF2412printDetailsEvE3__c__10_>:
    8792:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

000087a1 <rf24_model_e_str_P>:
    87a1:	25 0a 1b 0a                                         %...

000087a5 <RF24::printDetails()::__c>:
    87a5:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    87b5:	0a 00                                               ..

000087b7 <rf24_datarate_e_str_P>:
    87b7:	3c 0a 36 0a 2e 0a                                   <.6...

000087bd <RF24::printDetails()::__c>:
    87bd:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000087cb <RF24::printDetails()::__c>:
    87cb:	43 4f 4e 46 49 47 09 00                             CONFIG..

000087d3 <RF24::printDetails()::__c>:
    87d3:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

000087dc <RF24::printDetails()::__c>:
    87dc:	52 46 5f 43 48 09 00                                RF_CH..

000087e3 <RF24::printDetails()::__c>:
    87e3:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

000087ed <RF24::printDetails()::__c>:
    87ed:	45 4e 5f 41 41 09 00                                EN_AA..

000087f4 <RF24::printDetails()::__c>:
    87f4:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

000087ff <RF24::printDetails()::__c>:
    87ff:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

00008808 <RF24::printDetails()::__c>:
    8808:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00008815 <RF24::printDetails()::__c>:
    8815:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

00008822 <status_know_devices>:
    8822:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    8832:	63 65 73 00                                         ces.

00008836 <network_ip>:
    8836:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

00008841 <status_mqtt_process>:
    8841:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    8851:	65 73 73 00                                         ess.

00008855 <status_mqtt_receive>:
    8855:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    8865:	69 76 65 00                                         ive.

00008869 <status_mqtt_error>:
    8869:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    8879:	72 00                                               r.

0000887b <status_mqtt_send>:
    887b:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

0000888c <termbig_header_in>:
    888c:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

00008899 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8899:	0d 0a 00                                            ...

0000889c <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    889c:	25 30 32 78 00                                      %02x.

000088a1 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    88a1:	20 30 78 00                                          0x.

000088a5 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    88a5:	25 53 09 20 3d 00                                   %S. =.

000088ab <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    88ab:	0d 0a 00                                            ...

000088ae <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    88ae:	20 30 78 25 30 32 78 00                              0x%02x.

000088b6 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    88b6:	25 53 09 20 3d 00                                   %S. =.

000088bc <_ZL11daysInMonth.lto_priv.265>:
    88bc:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

000088c8 <lcd_font>:
    88c8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    88d8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    88e8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    88f8:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    8908:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    8918:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    8928:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    8938:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    8948:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    8958:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    8968:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    8978:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    8988:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    8998:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    89a8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    89b8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    89c8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    89d8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    89e8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    89f8:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    8a08:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    8a18:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    8a28:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    8a38:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    8a48:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    8a58:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    8a68:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    8a78:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    8a88:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    8a98:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    8aa8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    8ab8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    8ac8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    8ad8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    8ae8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    8af8:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    8b08:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    8b18:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    8b28:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    8b38:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    8b48:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    8b58:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    8b68:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    8b78:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    8b88:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    8b98:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    8ba8:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    8bb8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    8bc8:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    8bd8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    8be8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    8bf8:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    8c08:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    8c18:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    8c28:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    8c38:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    8c48:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    8c58:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    8c68:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    8c78:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    8c88:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    8c98:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    8ca8:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    8cb8:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    8cc8:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    8cd8:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    8ce8:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    8cf8:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    8d08:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    8d18:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    8d28:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    8d38:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    8d48:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    8d58:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    8d68:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    8d78:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    8d88:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    8d98:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    8da8:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    8db8:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00008dc3 <port_to_input_PGM>:
    8dc3:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00008dd3 <digital_pin_to_bit_mask_PGM>:
    8dd3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    8de3:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    8df3:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    8e03:	08 10 20 40 80 20                                   .. @. 

00008e09 <port_to_output_PGM>:
    8e09:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00008e19 <digital_pin_to_port_PGM>:
    8e19:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    8e29:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    8e39:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    8e49:	06 06 06 06 06 07 00                                .......

00008e50 <__ctors_start>:
__ctors_start():
    8e50:	03 ed       	ldi	r16, 0xD3	; 211

00008e52 <__ctors_end>:
__dtors_end():
    8e52:	11 24       	eor	r1, r1
    8e54:	1f be       	out	0x3f, r1	; 63
    8e56:	cf ef       	ldi	r28, 0xFF	; 255
    8e58:	d1 e2       	ldi	r29, 0x21	; 33
    8e5a:	de bf       	out	0x3e, r29	; 62
    8e5c:	cd bf       	out	0x3d, r28	; 61
    8e5e:	00 e0       	ldi	r16, 0x00	; 0
    8e60:	0c bf       	out	0x3c, r16	; 60

00008e62 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    8e62:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    8e64:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    8e66:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    8e68:	ee e8       	ldi	r30, 0x8E	; 142
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    8e6a:	fd ef       	ldi	r31, 0xFD	; 253
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    8e6c:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    8e6e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    8e70:	02 c0       	rjmp	.+4      	; 0x8e76 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    8e72:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    8e74:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    8e76:	a8 39       	cpi	r26, 0x98	; 152
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    8e78:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    8e7a:	d9 f7       	brne	.-10     	; 0x8e72 <__do_copy_data+0x10>

00008e7c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    8e7c:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    8e7e:	a8 e9       	ldi	r26, 0x98	; 152
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    8e80:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    8e82:	01 c0       	rjmp	.+2      	; 0x8e86 <.do_clear_bss_start>

00008e84 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    8e84:	1d 92       	st	X+, r1

00008e86 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    8e86:	a3 32       	cpi	r26, 0x23	; 35
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    8e88:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    8e8a:	e1 f7       	brne	.-8      	; 0x8e84 <.do_clear_bss_loop>

00008e8c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    8e8c:	17 e4       	ldi	r17, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    8e8e:	c9 e2       	ldi	r28, 0x29	; 41
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    8e90:	d7 e4       	ldi	r29, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    8e92:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    8e94:	06 c0       	rjmp	.+12     	; 0x8ea2 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    8e96:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    8e98:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    8e9a:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    8e9c:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    8e9e:	0e 94 1c fd 	call	0x1fa38	; 0x1fa38 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    8ea2:	c8 32       	cpi	r28, 0x28	; 40
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    8ea4:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    8ea6:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    8ea8:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    8eaa:	a9 f7       	brne	.-22     	; 0x8e96 <__do_global_ctors+0xa>
    8eac:	0e 94 df de 	call	0x1bdbe	; 0x1bdbe <main>
    8eb0:	0c 94 c5 fe 	jmp	0x1fd8a	; 0x1fd8a <_exit>

00008eb4 <__bad_interrupt>:
__vector_38():
    8eb4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008eb8 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    8eb8:	af 92       	push	r10
    8eba:	bf 92       	push	r11
    8ebc:	cf 92       	push	r12
    8ebe:	df 92       	push	r13
    8ec0:	ef 92       	push	r14
    8ec2:	ff 92       	push	r15
    8ec4:	0f 93       	push	r16
    8ec6:	1f 93       	push	r17
    8ec8:	cf 93       	push	r28
    8eca:	df 93       	push	r29
    8ecc:	6c 01       	movw	r12, r24
    8ece:	7b 01       	movw	r14, r22
    8ed0:	8b 01       	movw	r16, r22
    8ed2:	04 0f       	add	r16, r20
    8ed4:	15 1f       	adc	r17, r21
    8ed6:	eb 01       	movw	r28, r22
    8ed8:	5e 01       	movw	r10, r28
    8eda:	ae 18       	sub	r10, r14
    8edc:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    8ede:	c0 17       	cp	r28, r16
    8ee0:	d1 07       	cpc	r29, r17
    8ee2:	59 f0       	breq	.+22     	; 0x8efa <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    8ee4:	69 91       	ld	r22, Y+
    8ee6:	d6 01       	movw	r26, r12
    8ee8:	ed 91       	ld	r30, X+
    8eea:	fc 91       	ld	r31, X
    8eec:	01 90       	ld	r0, Z+
    8eee:	f0 81       	ld	r31, Z
    8ef0:	e0 2d       	mov	r30, r0
    8ef2:	c6 01       	movw	r24, r12
    8ef4:	19 95       	eicall
    8ef6:	89 2b       	or	r24, r25
    8ef8:	79 f7       	brne	.-34     	; 0x8ed8 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    8efa:	c5 01       	movw	r24, r10
    8efc:	df 91       	pop	r29
    8efe:	cf 91       	pop	r28
    8f00:	1f 91       	pop	r17
    8f02:	0f 91       	pop	r16
    8f04:	ff 90       	pop	r15
    8f06:	ef 90       	pop	r14
    8f08:	df 90       	pop	r13
    8f0a:	cf 90       	pop	r12
    8f0c:	bf 90       	pop	r11
    8f0e:	af 90       	pop	r10
    8f10:	08 95       	ret

00008f12 <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    8f12:	82 50       	subi	r24, 0x02	; 2
    8f14:	82 31       	cpi	r24, 0x12	; 18
    8f16:	08 f0       	brcs	.+2      	; 0x8f1a <turnOffPWM+0x8>
    8f18:	5f c0       	rjmp	.+190    	; 0x8fd8 <turnOffPWM+0xc6>
    8f1a:	e8 2f       	mov	r30, r24
    8f1c:	f0 e0       	ldi	r31, 0x00	; 0
    8f1e:	88 27       	eor	r24, r24
    8f20:	eb 56       	subi	r30, 0x6B	; 107
    8f22:	f8 4b       	sbci	r31, 0xB8	; 184
    8f24:	8f 4f       	sbci	r24, 0xFF	; 255
    8f26:	0c 94 1c fd 	jmp	0x1fa38	; 0x1fa38 <__tablejump2__>
    8f2a:	e9 47       	sbci	r30, 0x79	; 121
    8f2c:	ed 47       	sbci	r30, 0x7D	; 125
    8f2e:	a7 47       	sbci	r26, 0x77	; 119
    8f30:	ad 47       	sbci	r26, 0x7D	; 125
    8f32:	b1 47       	sbci	r27, 0x71	; 113
    8f34:	ec 47       	sbci	r30, 0x7C	; 124
    8f36:	b5 47       	sbci	r27, 0x75	; 117
    8f38:	bb 47       	sbci	r27, 0x7B	; 123
    8f3a:	bf 47       	sbci	r27, 0x7F	; 127
    8f3c:	c5 47       	sbci	r28, 0x75	; 117
    8f3e:	c9 47       	sbci	r28, 0x79	; 121
    8f40:	cd 47       	sbci	r28, 0x7D	; 125
    8f42:	d3 47       	sbci	r29, 0x73	; 115
    8f44:	d7 47       	sbci	r29, 0x77	; 119
    8f46:	ec 47       	sbci	r30, 0x7C	; 124
    8f48:	db 47       	sbci	r29, 0x7B	; 123
    8f4a:	e1 47       	sbci	r30, 0x71	; 113
    8f4c:	e5 47       	sbci	r30, 0x75	; 117
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    8f4e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8f52:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    8f54:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8f58:	08 95       	ret
    8f5a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8f5e:	8f 7d       	andi	r24, 0xDF	; 223
    8f60:	f9 cf       	rjmp	.-14     	; 0x8f54 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    8f62:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8f66:	87 7f       	andi	r24, 0xF7	; 247
    8f68:	f5 cf       	rjmp	.-22     	; 0x8f54 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    8f6a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f6e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    8f70:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f74:	08 95       	ret
    8f76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f7a:	8f 7d       	andi	r24, 0xDF	; 223
    8f7c:	f9 cf       	rjmp	.-14     	; 0x8f70 <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    8f7e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f82:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    8f84:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f88:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    8f8a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f8e:	8f 7d       	andi	r24, 0xDF	; 223
    8f90:	f9 cf       	rjmp	.-14     	; 0x8f84 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    8f92:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f96:	87 7f       	andi	r24, 0xF7	; 247
    8f98:	f5 cf       	rjmp	.-22     	; 0x8f84 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    8f9a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8f9e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    8fa0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8fa4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    8fa6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8faa:	8f 7d       	andi	r24, 0xDF	; 223
    8fac:	f9 cf       	rjmp	.-14     	; 0x8fa0 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    8fae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8fb2:	87 7f       	andi	r24, 0xF7	; 247
    8fb4:	f5 cf       	rjmp	.-22     	; 0x8fa0 <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    8fb6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8fba:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    8fbc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8fc0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    8fc2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8fc6:	8f 7d       	andi	r24, 0xDF	; 223
    8fc8:	f9 cf       	rjmp	.-14     	; 0x8fbc <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    8fca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8fce:	87 7f       	andi	r24, 0xF7	; 247
    8fd0:	f5 cf       	rjmp	.-22     	; 0x8fbc <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    8fd2:	84 b5       	in	r24, 0x24	; 36
    8fd4:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    8fd6:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    8fd8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    8fda:	84 b5       	in	r24, 0x24	; 36
    8fdc:	8f 7d       	andi	r24, 0xDF	; 223
    8fde:	fb cf       	rjmp	.-10     	; 0x8fd6 <turnOffPWM+0xc4>

00008fe0 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    8fe0:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    8fe2:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    8fe4:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <timer0_overflow_count>
    8fe8:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <timer0_overflow_count+0x1>
    8fec:	a0 91 04 0b 	lds	r26, 0x0B04	; 0x800b04 <timer0_overflow_count+0x2>
    8ff0:	b0 91 05 0b 	lds	r27, 0x0B05	; 0x800b05 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    8ff4:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    8ff6:	a8 9b       	sbis	0x15, 0	; 21
    8ff8:	05 c0       	rjmp	.+10     	; 0x9004 <micros+0x24>
    8ffa:	2f 3f       	cpi	r18, 0xFF	; 255
    8ffc:	19 f0       	breq	.+6      	; 0x9004 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    8ffe:	01 96       	adiw	r24, 0x01	; 1
    9000:	a1 1d       	adc	r26, r1
    9002:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    9004:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    9006:	ba 2f       	mov	r27, r26
    9008:	a9 2f       	mov	r26, r25
    900a:	98 2f       	mov	r25, r24
    900c:	88 27       	eor	r24, r24
    900e:	bc 01       	movw	r22, r24
    9010:	cd 01       	movw	r24, r26
    9012:	62 0f       	add	r22, r18
    9014:	71 1d       	adc	r23, r1
    9016:	81 1d       	adc	r24, r1
    9018:	91 1d       	adc	r25, r1
    901a:	42 e0       	ldi	r20, 0x02	; 2
    901c:	66 0f       	add	r22, r22
    901e:	77 1f       	adc	r23, r23
    9020:	88 1f       	adc	r24, r24
    9022:	99 1f       	adc	r25, r25
    9024:	4a 95       	dec	r20
    9026:	d1 f7       	brne	.-12     	; 0x901c <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    9028:	08 95       	ret

0000902a <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
    902a:	20 91 f9 0a 	lds	r18, 0x0AF9	; 0x800af9 <a2d_reference>
    902e:	90 e4       	ldi	r25, 0x40	; 64
    9030:	29 9f       	mul	r18, r25
    9032:	90 01       	movw	r18, r0
    9034:	11 24       	eor	r1, r1
    9036:	28 0f       	add	r18, r24
    9038:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
    903c:	80 93 fa 0a 	sts	0x0AFA, r24	; 0x800afa <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
    9040:	ea e7       	ldi	r30, 0x7A	; 122
    9042:	f0 e0       	ldi	r31, 0x00	; 0
    9044:	80 81       	ld	r24, Z
    9046:	80 64       	ori	r24, 0x40	; 64
    9048:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
    904a:	08 95       	ret

0000904c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    904c:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    9050:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:239
}
    9054:	89 1b       	sub	r24, r25
    9056:	99 0b       	sbc	r25, r25
    9058:	08 95       	ret

0000905a <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    905a:	85 ed       	ldi	r24, 0xD5	; 213
    905c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    9060:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    9064:	84 fd       	sbrc	r24, 4
    9066:	fc cf       	rjmp	.-8      	; 0x9060 <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    9068:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
    906c:	08 95       	ret

0000906e <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    906e:	20 91 d6 0a 	lds	r18, 0x0AD6	; 0x800ad6 <twi_txBufferLength>
    9072:	26 0f       	add	r18, r22
    9074:	33 27       	eor	r19, r19
    9076:	33 1f       	adc	r19, r19
    9078:	21 32       	cpi	r18, 0x21	; 33
    907a:	31 05       	cpc	r19, r1
    907c:	ec f4       	brge	.+58     	; 0x90b8 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    907e:	20 91 00 0d 	lds	r18, 0x0D00	; 0x800d00 <twi_state.lto_priv.272>
    9082:	fc 01       	movw	r30, r24
    9084:	90 e0       	ldi	r25, 0x00	; 0
    9086:	80 e0       	ldi	r24, 0x00	; 0
    9088:	24 30       	cpi	r18, 0x04	; 4
    908a:	69 f0       	breq	.+26     	; 0x90a6 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:313
    return 2;
    908c:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    908e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    9090:	a0 91 d6 0a 	lds	r26, 0x0AD6	; 0x800ad6 <twi_txBufferLength>
    9094:	21 91       	ld	r18, Z+
    9096:	ac 01       	movw	r20, r24
    9098:	4a 54       	subi	r20, 0x4A	; 74
    909a:	55 4f       	sbci	r21, 0xF5	; 245
    909c:	a4 0f       	add	r26, r20
    909e:	b5 2f       	mov	r27, r21
    90a0:	b1 1d       	adc	r27, r1
    90a2:	2c 93       	st	X, r18
    90a4:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    90a6:	86 17       	cp	r24, r22
    90a8:	98 f3       	brcs	.-26     	; 0x9090 <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    90aa:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <twi_txBufferLength>
    90ae:	68 0f       	add	r22, r24
    90b0:	60 93 d6 0a 	sts	0x0AD6, r22	; 0x800ad6 <twi_txBufferLength>
    90b4:	80 e0       	ldi	r24, 0x00	; 0
    90b6:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    90b8:	81 e0       	ldi	r24, 0x01	; 1
    90ba:	08 95       	ret

000090bc <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    90bc:	08 95       	ret

000090be <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    90be:	08 95       	ret

000090c0 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    90c0:	08 95       	ret

000090c2 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    90c2:	e0 91 a0 0c 	lds	r30, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    90c6:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    90ca:	e8 17       	cp	r30, r24
    90cc:	30 f4       	brcc	.+12     	; 0x90da <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    90ce:	f0 e0       	ldi	r31, 0x00	; 0
    90d0:	e6 54       	subi	r30, 0x46	; 70
    90d2:	f3 4f       	sbci	r31, 0xF3	; 243
    90d4:	80 81       	ld	r24, Z
    90d6:	90 e0       	ldi	r25, 0x00	; 0
    90d8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    90da:	8f ef       	ldi	r24, 0xFF	; 255
    90dc:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    90de:	08 95       	ret

000090e0 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    90e0:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    90e4:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    90e8:	2f ef       	ldi	r18, 0xFF	; 255
    90ea:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    90ec:	98 17       	cp	r25, r24
    90ee:	48 f4       	brcc	.+18     	; 0x9102 <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    90f0:	e9 2f       	mov	r30, r25
    90f2:	f0 e0       	ldi	r31, 0x00	; 0
    90f4:	e6 54       	subi	r30, 0x46	; 70
    90f6:	f3 4f       	sbci	r31, 0xF3	; 243
    90f8:	20 81       	ld	r18, Z
    90fa:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    90fc:	9f 5f       	subi	r25, 0xFF	; 255
    90fe:	90 93 a0 0c 	sts	0x0CA0, r25	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    9102:	c9 01       	movw	r24, r18
    9104:	08 95       	ret

00009106 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    9106:	cf 92       	push	r12
    9108:	df 92       	push	r13
    910a:	ef 92       	push	r14
    910c:	ff 92       	push	r15
    910e:	0f 93       	push	r16
    9110:	1f 93       	push	r17
    9112:	cf 93       	push	r28
    9114:	df 93       	push	r29
    9116:	7c 01       	movw	r14, r24
    9118:	cb 01       	movw	r24, r22
    911a:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    911c:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <TwoWire::transmitting>
    9120:	22 23       	and	r18, r18
    9122:	89 f0       	breq	.+34     	; 0x9146 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    9124:	eb 01       	movw	r28, r22
    9126:	6b 01       	movw	r12, r22
    9128:	c4 0e       	add	r12, r20
    912a:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    912c:	cc 15       	cp	r28, r12
    912e:	dd 05       	cpc	r29, r13
    9130:	69 f0       	breq	.+26     	; 0x914c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    9132:	69 91       	ld	r22, Y+
    9134:	d7 01       	movw	r26, r14
    9136:	ed 91       	ld	r30, X+
    9138:	fc 91       	ld	r31, X
    913a:	01 90       	ld	r0, Z+
    913c:	f0 81       	ld	r31, Z
    913e:	e0 2d       	mov	r30, r0
    9140:	c7 01       	movw	r24, r14
    9142:	19 95       	eicall
    9144:	f3 cf       	rjmp	.-26     	; 0x912c <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    9146:	64 2f       	mov	r22, r20
    9148:	0e 94 37 48 	call	0x906e	; 0x906e <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    914c:	c8 01       	movw	r24, r16
    914e:	df 91       	pop	r29
    9150:	cf 91       	pop	r28
    9152:	1f 91       	pop	r17
    9154:	0f 91       	pop	r16
    9156:	ff 90       	pop	r15
    9158:	ef 90       	pop	r14
    915a:	df 90       	pop	r13
    915c:	cf 90       	pop	r12
    915e:	08 95       	ret

00009160 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    9160:	cf 93       	push	r28
    9162:	df 93       	push	r29
    9164:	1f 92       	push	r1
    9166:	cd b7       	in	r28, 0x3d	; 61
    9168:	de b7       	in	r29, 0x3e	; 62
    916a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    916c:	20 91 b9 0c 	lds	r18, 0x0CB9	; 0x800cb9 <TwoWire::transmitting>
    9170:	22 23       	and	r18, r18
    9172:	f9 f0       	breq	.+62     	; 0x91b2 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    9174:	20 91 b6 0c 	lds	r18, 0x0CB6	; 0x800cb6 <TwoWire::txBufferLength>
    9178:	20 32       	cpi	r18, 0x20	; 32
    917a:	58 f0       	brcs	.+22     	; 0x9192 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    917c:	21 e0       	ldi	r18, 0x01	; 1
    917e:	30 e0       	ldi	r19, 0x00	; 0
    9180:	fc 01       	movw	r30, r24
    9182:	33 83       	std	Z+3, r19	; 0x03
    9184:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    9186:	90 e0       	ldi	r25, 0x00	; 0
    9188:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    918a:	0f 90       	pop	r0
    918c:	df 91       	pop	r29
    918e:	cf 91       	pop	r28
    9190:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    9192:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <TwoWire::txBufferIndex>
    9196:	e8 2f       	mov	r30, r24
    9198:	f0 e0       	ldi	r31, 0x00	; 0
    919a:	ea 56       	subi	r30, 0x6A	; 106
    919c:	f5 4f       	sbci	r31, 0xF5	; 245
    919e:	99 81       	ldd	r25, Y+1	; 0x01
    91a0:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    91a2:	8f 5f       	subi	r24, 0xFF	; 255
    91a4:	80 93 b7 0c 	sts	0x0CB7, r24	; 0x800cb7 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    91a8:	80 93 b6 0c 	sts	0x0CB6, r24	; 0x800cb6 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    91ac:	81 e0       	ldi	r24, 0x01	; 1
    91ae:	90 e0       	ldi	r25, 0x00	; 0
    91b0:	ec cf       	rjmp	.-40     	; 0x918a <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    91b2:	61 e0       	ldi	r22, 0x01	; 1
    91b4:	ce 01       	movw	r24, r28
    91b6:	01 96       	adiw	r24, 0x01	; 1
    91b8:	0e 94 37 48 	call	0x906e	; 0x906e <twi_transmit>
    91bc:	f7 cf       	rjmp	.-18     	; 0x91ac <TwoWire::write(unsigned char)+0x4c>

000091be <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    91be:	0f 93       	push	r16
    91c0:	1f 93       	push	r17
    91c2:	cf 93       	push	r28
    91c4:	df 93       	push	r29
    91c6:	ec 01       	movw	r28, r24
    91c8:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
    91ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    91cc:	88 23       	and	r24, r24
    91ce:	61 f1       	breq	.+88     	; 0x9228 <PID::SetControllerDirection(int)+0x6a>
    91d0:	88 8d       	ldd	r24, Y+24	; 0x18
    91d2:	99 8d       	ldd	r25, Y+25	; 0x19
    91d4:	86 17       	cp	r24, r22
    91d6:	97 07       	cpc	r25, r23
    91d8:	39 f1       	breq	.+78     	; 0x9228 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
    91da:	2c 85       	ldd	r18, Y+12	; 0x0c
    91dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    91de:	4e 85       	ldd	r20, Y+14	; 0x0e
    91e0:	5f 85       	ldd	r21, Y+15	; 0x0f
    91e2:	60 e0       	ldi	r22, 0x00	; 0
    91e4:	70 e0       	ldi	r23, 0x00	; 0
    91e6:	cb 01       	movw	r24, r22
    91e8:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    91ec:	6c 87       	std	Y+12, r22	; 0x0c
    91ee:	7d 87       	std	Y+13, r23	; 0x0d
    91f0:	8e 87       	std	Y+14, r24	; 0x0e
    91f2:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
    91f4:	28 89       	ldd	r18, Y+16	; 0x10
    91f6:	39 89       	ldd	r19, Y+17	; 0x11
    91f8:	4a 89       	ldd	r20, Y+18	; 0x12
    91fa:	5b 89       	ldd	r21, Y+19	; 0x13
    91fc:	60 e0       	ldi	r22, 0x00	; 0
    91fe:	70 e0       	ldi	r23, 0x00	; 0
    9200:	cb 01       	movw	r24, r22
    9202:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    9206:	68 8b       	std	Y+16, r22	; 0x10
    9208:	79 8b       	std	Y+17, r23	; 0x11
    920a:	8a 8b       	std	Y+18, r24	; 0x12
    920c:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
    920e:	2c 89       	ldd	r18, Y+20	; 0x14
    9210:	3d 89       	ldd	r19, Y+21	; 0x15
    9212:	4e 89       	ldd	r20, Y+22	; 0x16
    9214:	5f 89       	ldd	r21, Y+23	; 0x17
    9216:	60 e0       	ldi	r22, 0x00	; 0
    9218:	70 e0       	ldi	r23, 0x00	; 0
    921a:	cb 01       	movw	r24, r22
    921c:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    9220:	6c 8b       	std	Y+20, r22	; 0x14
    9222:	7d 8b       	std	Y+21, r23	; 0x15
    9224:	8e 8b       	std	Y+22, r24	; 0x16
    9226:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
    9228:	19 8f       	std	Y+25, r17	; 0x19
    922a:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
    922c:	df 91       	pop	r29
    922e:	cf 91       	pop	r28
    9230:	1f 91       	pop	r17
    9232:	0f 91       	pop	r16
    9234:	08 95       	ret

00009236 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    9236:	cf 93       	push	r28
    9238:	df 93       	push	r29
    923a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    923c:	89 8d       	ldd	r24, Y+25	; 0x19
    923e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9240:	89 2b       	or	r24, r25
    9242:	41 f0       	breq	.+16     	; 0x9254 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    9244:	e8 81       	ld	r30, Y
    9246:	f9 81       	ldd	r31, Y+1	; 0x01
    9248:	02 84       	ldd	r0, Z+10	; 0x0a
    924a:	f3 85       	ldd	r31, Z+11	; 0x0b
    924c:	e0 2d       	mov	r30, r0
    924e:	ce 01       	movw	r24, r28
    9250:	19 95       	eicall
    9252:	f4 cf       	rjmp	.-24     	; 0x923c <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    9254:	df 91       	pop	r29
    9256:	cf 91       	pop	r28
    9258:	08 95       	ret

0000925a <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    925a:	cf 93       	push	r28
    925c:	df 93       	push	r29
    925e:	1f 92       	push	r1
    9260:	cd b7       	in	r28, 0x3d	; 61
    9262:	de b7       	in	r29, 0x3e	; 62
    9264:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    9266:	dc 01       	movw	r26, r24
    9268:	ed 91       	ld	r30, X+
    926a:	fc 91       	ld	r31, X
    926c:	02 80       	ldd	r0, Z+2	; 0x02
    926e:	f3 81       	ldd	r31, Z+3	; 0x03
    9270:	e0 2d       	mov	r30, r0
    9272:	41 e0       	ldi	r20, 0x01	; 1
    9274:	50 e0       	ldi	r21, 0x00	; 0
    9276:	be 01       	movw	r22, r28
    9278:	6f 5f       	subi	r22, 0xFF	; 255
    927a:	7f 4f       	sbci	r23, 0xFF	; 255
    927c:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    927e:	0f 90       	pop	r0
    9280:	df 91       	pop	r29
    9282:	cf 91       	pop	r28
    9284:	08 95       	ret

00009286 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    9286:	fc 01       	movw	r30, r24
    9288:	81 8d       	ldd	r24, Z+25	; 0x19
    928a:	92 8d       	ldd	r25, Z+26	; 0x1a
    928c:	08 95       	ret

0000928e <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    928e:	fc 01       	movw	r30, r24
    9290:	85 89       	ldd	r24, Z+21	; 0x15
    9292:	96 89       	ldd	r25, Z+22	; 0x16
    9294:	08 95       	ret

00009296 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    9296:	22 ef       	ldi	r18, 0xF2	; 242
    9298:	32 e0       	ldi	r19, 0x02	; 2
    929a:	fc 01       	movw	r30, r24
    929c:	31 83       	std	Z+1, r19	; 0x01
    929e:	20 83       	st	Z, r18
    92a0:	fb 01       	movw	r30, r22
    92a2:	41 89       	ldd	r20, Z+17	; 0x11
    92a4:	52 89       	ldd	r21, Z+18	; 0x12
    92a6:	63 89       	ldd	r22, Z+19	; 0x13
    92a8:	74 89       	ldd	r23, Z+20	; 0x14
    92aa:	fc 01       	movw	r30, r24
    92ac:	42 83       	std	Z+2, r20	; 0x02
    92ae:	53 83       	std	Z+3, r21	; 0x03
    92b0:	64 83       	std	Z+4, r22	; 0x04
    92b2:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    92b4:	08 95       	ret

000092b6 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    92b6:	80 e0       	ldi	r24, 0x00	; 0
    92b8:	08 95       	ret

000092ba <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    92ba:	cf 93       	push	r28
    92bc:	df 93       	push	r29
    92be:	1f 92       	push	r1
    92c0:	cd b7       	in	r28, 0x3d	; 61
    92c2:	de b7       	in	r29, 0x3e	; 62
    92c4:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
    92c6:	dc 01       	movw	r26, r24
    92c8:	ed 91       	ld	r30, X+
    92ca:	fc 91       	ld	r31, X
    92cc:	02 80       	ldd	r0, Z+2	; 0x02
    92ce:	f3 81       	ldd	r31, Z+3	; 0x03
    92d0:	e0 2d       	mov	r30, r0
    92d2:	41 e0       	ldi	r20, 0x01	; 1
    92d4:	50 e0       	ldi	r21, 0x00	; 0
    92d6:	be 01       	movw	r22, r28
    92d8:	6f 5f       	subi	r22, 0xFF	; 255
    92da:	7f 4f       	sbci	r23, 0xFF	; 255
    92dc:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
    92de:	0f 90       	pop	r0
    92e0:	df 91       	pop	r29
    92e2:	cf 91       	pop	r28
    92e4:	08 95       	ret

000092e6 <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    92e6:	08 95       	ret

000092e8 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    92e8:	fc 01       	movw	r30, r24
    92ea:	94 85       	ldd	r25, Z+12	; 0x0c
    92ec:	fb 01       	movw	r30, r22
    92ee:	84 85       	ldd	r24, Z+12	; 0x0c
    92f0:	98 13       	cpse	r25, r24
    92f2:	03 c0       	rjmp	.+6      	; 0x92fa <EthernetClient::operator==(EthernetClient const&)+0x12>
    92f4:	81 e0       	ldi	r24, 0x01	; 1
    92f6:	98 30       	cpi	r25, 0x08	; 8
    92f8:	09 f4       	brne	.+2      	; 0x92fc <EthernetClient::operator==(EthernetClient const&)+0x14>
    92fa:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    92fc:	08 95       	ret

000092fe <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    92fe:	21 e0       	ldi	r18, 0x01	; 1
    9300:	fc 01       	movw	r30, r24
    9302:	84 85       	ldd	r24, Z+12	; 0x0c
    9304:	88 30       	cpi	r24, 0x08	; 8
    9306:	09 f4       	brne	.+2      	; 0x930a <EthernetClient::operator bool()+0xc>
    9308:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    930a:	82 2f       	mov	r24, r18
    930c:	08 95       	ret

0000930e <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    930e:	08 95       	ret

00009310 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    9310:	cf 93       	push	r28
    9312:	df 93       	push	r29
    9314:	1f 92       	push	r1
    9316:	cd b7       	in	r28, 0x3d	; 61
    9318:	de b7       	in	r29, 0x3e	; 62
    931a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    931c:	dc 01       	movw	r26, r24
    931e:	ed 91       	ld	r30, X+
    9320:	fc 91       	ld	r31, X
    9322:	02 80       	ldd	r0, Z+2	; 0x02
    9324:	f3 81       	ldd	r31, Z+3	; 0x03
    9326:	e0 2d       	mov	r30, r0
    9328:	41 e0       	ldi	r20, 0x01	; 1
    932a:	50 e0       	ldi	r21, 0x00	; 0
    932c:	be 01       	movw	r22, r28
    932e:	6f 5f       	subi	r22, 0xFF	; 255
    9330:	7f 4f       	sbci	r23, 0xFF	; 255
    9332:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    9334:	0f 90       	pop	r0
    9336:	df 91       	pop	r29
    9338:	cf 91       	pop	r28
    933a:	08 95       	ret

0000933c <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    933c:	dc 01       	movw	r26, r24
    933e:	ed 91       	ld	r30, X+
    9340:	fc 91       	ld	r31, X
    9342:	02 8c       	ldd	r0, Z+26	; 0x1a
    9344:	f3 8d       	ldd	r31, Z+27	; 0x1b
    9346:	e0 2d       	mov	r30, r0
    9348:	19 95       	eicall
    934a:	91 e0       	ldi	r25, 0x01	; 1
    934c:	89 27       	eor	r24, r25
    934e:	08 95       	ret

00009350 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    9350:	90 e0       	ldi	r25, 0x00	; 0
    9352:	80 e0       	ldi	r24, 0x00	; 0
    9354:	08 95       	ret

00009356 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    9356:	dc 01       	movw	r26, r24
    9358:	ed 91       	ld	r30, X+
    935a:	fc 91       	ld	r31, X
    935c:	04 8c       	ldd	r0, Z+28	; 0x1c
    935e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    9360:	e0 2d       	mov	r30, r0
    9362:	19 94       	eijmp

00009364 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    9364:	fc 01       	movw	r30, r24
    9366:	84 89       	ldd	r24, Z+20	; 0x14
    9368:	95 89       	ldd	r25, Z+21	; 0x15
    936a:	08 95       	ret

0000936c <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    936c:	fc 01       	movw	r30, r24
    936e:	82 89       	ldd	r24, Z+18	; 0x12
    9370:	93 89       	ldd	r25, Z+19	; 0x13
    9372:	08 95       	ret

00009374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    9374:	4f 92       	push	r4
    9376:	5f 92       	push	r5
    9378:	6f 92       	push	r6
    937a:	7f 92       	push	r7
    937c:	8f 92       	push	r8
    937e:	9f 92       	push	r9
    9380:	af 92       	push	r10
    9382:	bf 92       	push	r11
    9384:	cf 92       	push	r12
    9386:	df 92       	push	r13
    9388:	ef 92       	push	r14
    938a:	ff 92       	push	r15
    938c:	0f 93       	push	r16
    938e:	1f 93       	push	r17
    9390:	cf 93       	push	r28
    9392:	df 93       	push	r29
    9394:	ec 01       	movw	r28, r24
    9396:	5a 01       	movw	r10, r20
    9398:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    939a:	37 ff       	sbrs	r19, 7
    939c:	05 c0       	rjmp	.+10     	; 0x93a8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    939e:	62 0f       	add	r22, r18
    93a0:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    93a2:	31 95       	neg	r19
    93a4:	21 95       	neg	r18
    93a6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    93a8:	7b 01       	movw	r14, r22
    93aa:	e2 0e       	add	r14, r18
    93ac:	f3 1e       	adc	r15, r19
    93ae:	6b 01       	movw	r12, r22
    93b0:	77 ff       	sbrs	r23, 7
    93b2:	02 c0       	rjmp	.+4      	; 0x93b8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    93b4:	d1 2c       	mov	r13, r1
    93b6:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    93b8:	e8 81       	ld	r30, Y
    93ba:	f9 81       	ldd	r31, Y+1	; 0x01
    93bc:	06 84       	ldd	r0, Z+14	; 0x0e
    93be:	f7 85       	ldd	r31, Z+15	; 0x0f
    93c0:	e0 2d       	mov	r30, r0
    93c2:	ce 01       	movw	r24, r28
    93c4:	19 95       	eicall
    93c6:	8e 15       	cp	r24, r14
    93c8:	9f 05       	cpc	r25, r15
    93ca:	44 f4       	brge	.+16     	; 0x93dc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    93cc:	e8 81       	ld	r30, Y
    93ce:	f9 81       	ldd	r31, Y+1	; 0x01
    93d0:	06 84       	ldd	r0, Z+14	; 0x0e
    93d2:	f7 85       	ldd	r31, Z+15	; 0x0f
    93d4:	e0 2d       	mov	r30, r0
    93d6:	ce 01       	movw	r24, r28
    93d8:	19 95       	eicall
    93da:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    93dc:	47 01       	movw	r8, r14
    93de:	8c 18       	sub	r8, r12
    93e0:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    93e2:	17 ff       	sbrs	r17, 7
    93e4:	05 c0       	rjmp	.+10     	; 0x93f0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    93e6:	a0 0e       	add	r10, r16
    93e8:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    93ea:	11 95       	neg	r17
    93ec:	01 95       	neg	r16
    93ee:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    93f0:	0a 0d       	add	r16, r10
    93f2:	1b 1d       	adc	r17, r11
    93f4:	b7 fe       	sbrs	r11, 7
    93f6:	02 c0       	rjmp	.+4      	; 0x93fc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    93f8:	b1 2c       	mov	r11, r1
    93fa:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    93fc:	e8 81       	ld	r30, Y
    93fe:	f9 81       	ldd	r31, Y+1	; 0x01
    9400:	04 84       	ldd	r0, Z+12	; 0x0c
    9402:	f5 85       	ldd	r31, Z+13	; 0x0d
    9404:	e0 2d       	mov	r30, r0
    9406:	ce 01       	movw	r24, r28
    9408:	19 95       	eicall
    940a:	80 17       	cp	r24, r16
    940c:	91 07       	cpc	r25, r17
    940e:	44 f4       	brge	.+16     	; 0x9420 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    9410:	e8 81       	ld	r30, Y
    9412:	f9 81       	ldd	r31, Y+1	; 0x01
    9414:	04 84       	ldd	r0, Z+12	; 0x0c
    9416:	f5 85       	ldd	r31, Z+13	; 0x0d
    9418:	e0 2d       	mov	r30, r0
    941a:	ce 01       	movw	r24, r28
    941c:	19 95       	eicall
    941e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    9420:	38 01       	movw	r6, r16
    9422:	6a 18       	sub	r6, r10
    9424:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    9426:	01 50       	subi	r16, 0x01	; 1
    9428:	11 09       	sbc	r17, r1
    942a:	97 01       	movw	r18, r14
    942c:	21 50       	subi	r18, 0x01	; 1
    942e:	31 09       	sbc	r19, r1
    9430:	e8 81       	ld	r30, Y
    9432:	f9 81       	ldd	r31, Y+1	; 0x01
    9434:	06 80       	ldd	r0, Z+6	; 0x06
    9436:	f7 81       	ldd	r31, Z+7	; 0x07
    9438:	e0 2d       	mov	r30, r0
    943a:	a5 01       	movw	r20, r10
    943c:	b6 01       	movw	r22, r12
    943e:	ce 01       	movw	r24, r28
    9440:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    9442:	ee a5       	ldd	r30, Y+46	; 0x2e
    9444:	ff a5       	ldd	r31, Y+47	; 0x2f
    9446:	80 81       	ld	r24, Z
    9448:	9a ad       	ldd	r25, Y+58	; 0x3a
    944a:	89 23       	and	r24, r25
    944c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    944e:	88 8d       	ldd	r24, Y+24	; 0x18
    9450:	99 8d       	ldd	r25, Y+25	; 0x19
    9452:	89 2b       	or	r24, r25
    9454:	c9 f4       	brne	.+50     	; 0x9488 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    9456:	e8 a9       	ldd	r30, Y+48	; 0x30
    9458:	f9 a9       	ldd	r31, Y+49	; 0x31
    945a:	80 81       	ld	r24, Z
    945c:	9b ad       	ldd	r25, Y+59	; 0x3b
    945e:	89 23       	and	r24, r25
    9460:	80 83       	st	Z, r24
    9462:	12 b8       	out	0x02, r1	; 2
    9464:	ea a9       	ldd	r30, Y+50	; 0x32
    9466:	fb a9       	ldd	r31, Y+51	; 0x33
    9468:	80 81       	ld	r24, Z
    946a:	9c ad       	ldd	r25, Y+60	; 0x3c
    946c:	89 23       	and	r24, r25
    946e:	80 83       	st	Z, r24
    9470:	ea a9       	ldd	r30, Y+50	; 0x32
    9472:	fb a9       	ldd	r31, Y+51	; 0x33
    9474:	80 81       	ld	r24, Z
    9476:	98 ad       	ldd	r25, Y+56	; 0x38
    9478:	89 2b       	or	r24, r25
    947a:	80 83       	st	Z, r24
    947c:	e8 a9       	ldd	r30, Y+48	; 0x30
    947e:	f9 a9       	ldd	r31, Y+49	; 0x31
    9480:	80 81       	ld	r24, Z
    9482:	9f a9       	ldd	r25, Y+55	; 0x37
    9484:	89 2b       	or	r24, r25
    9486:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    9488:	e8 a9       	ldd	r30, Y+48	; 0x30
    948a:	f9 a9       	ldd	r31, Y+49	; 0x31
    948c:	80 81       	ld	r24, Z
    948e:	9b ad       	ldd	r25, Y+59	; 0x3b
    9490:	89 23       	and	r24, r25
    9492:	80 83       	st	Z, r24
    9494:	88 a1       	ldd	r24, Y+32	; 0x20
    9496:	82 b9       	out	0x02, r24	; 2
    9498:	ea a9       	ldd	r30, Y+50	; 0x32
    949a:	fb a9       	ldd	r31, Y+51	; 0x33
    949c:	80 81       	ld	r24, Z
    949e:	9c ad       	ldd	r25, Y+60	; 0x3c
    94a0:	89 23       	and	r24, r25
    94a2:	80 83       	st	Z, r24
    94a4:	ea a9       	ldd	r30, Y+50	; 0x32
    94a6:	fb a9       	ldd	r31, Y+51	; 0x33
    94a8:	80 81       	ld	r24, Z
    94aa:	98 ad       	ldd	r25, Y+56	; 0x38
    94ac:	89 2b       	or	r24, r25
    94ae:	80 83       	st	Z, r24
    94b0:	e8 a9       	ldd	r30, Y+48	; 0x30
    94b2:	f9 a9       	ldd	r31, Y+49	; 0x31
    94b4:	80 81       	ld	r24, Z
    94b6:	9f a9       	ldd	r25, Y+55	; 0x37
    94b8:	89 2b       	or	r24, r25
    94ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    94bc:	86 14       	cp	r8, r6
    94be:	97 04       	cpc	r9, r7
    94c0:	2c f0       	brlt	.+10     	; 0x94cc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    94c2:	96 2d       	mov	r25, r6
    94c4:	87 2d       	mov	r24, r7
    94c6:	34 01       	movw	r6, r8
    94c8:	89 2e       	mov	r8, r25
    94ca:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    94cc:	18 14       	cp	r1, r8
    94ce:	19 04       	cpc	r1, r9
    94d0:	0c f5       	brge	.+66     	; 0x9514 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    94d2:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    94d4:	52 b8       	out	0x02, r5	; 2
    94d6:	ea a9       	ldd	r30, Y+50	; 0x32
    94d8:	fb a9       	ldd	r31, Y+51	; 0x33
    94da:	20 81       	ld	r18, Z
    94dc:	3c ad       	ldd	r19, Y+60	; 0x3c
    94de:	23 23       	and	r18, r19
    94e0:	20 83       	st	Z, r18
    94e2:	ea a9       	ldd	r30, Y+50	; 0x32
    94e4:	fb a9       	ldd	r31, Y+51	; 0x33
    94e6:	20 81       	ld	r18, Z
    94e8:	38 ad       	ldd	r19, Y+56	; 0x38
    94ea:	23 2b       	or	r18, r19
    94ec:	20 83       	st	Z, r18
    94ee:	42 b8       	out	0x02, r4	; 2
    94f0:	ea a9       	ldd	r30, Y+50	; 0x32
    94f2:	fb a9       	ldd	r31, Y+51	; 0x33
    94f4:	20 81       	ld	r18, Z
    94f6:	3c ad       	ldd	r19, Y+60	; 0x3c
    94f8:	23 23       	and	r18, r19
    94fa:	20 83       	st	Z, r18
    94fc:	ea a9       	ldd	r30, Y+50	; 0x32
    94fe:	fb a9       	ldd	r31, Y+51	; 0x33
    9500:	20 81       	ld	r18, Z
    9502:	38 ad       	ldd	r19, Y+56	; 0x38
    9504:	23 2b       	or	r18, r19
    9506:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    9508:	01 97       	sbiw	r24, 0x01	; 1
    950a:	21 f7       	brne	.-56     	; 0x94d4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    950c:	81 e0       	ldi	r24, 0x01	; 1
    950e:	88 1a       	sub	r8, r24
    9510:	91 08       	sbc	r9, r1
    9512:	dc cf       	rjmp	.-72     	; 0x94cc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    9514:	88 8d       	ldd	r24, Y+24	; 0x18
    9516:	99 8d       	ldd	r25, Y+25	; 0x19
    9518:	00 97       	sbiw	r24, 0x00	; 0
    951a:	51 f5       	brne	.+84     	; 0x9570 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    951c:	0c 89       	ldd	r16, Y+20	; 0x14
    951e:	1d 89       	ldd	r17, Y+21	; 0x15
    9520:	01 50       	subi	r16, 0x01	; 1
    9522:	11 09       	sbc	r17, r1
    9524:	2a 89       	ldd	r18, Y+18	; 0x12
    9526:	3b 89       	ldd	r19, Y+19	; 0x13
    9528:	21 50       	subi	r18, 0x01	; 1
    952a:	31 09       	sbc	r19, r1
    952c:	e8 81       	ld	r30, Y
    952e:	f9 81       	ldd	r31, Y+1	; 0x01
    9530:	06 80       	ldd	r0, Z+6	; 0x06
    9532:	f7 81       	ldd	r31, Z+7	; 0x07
    9534:	e0 2d       	mov	r30, r0
    9536:	50 e0       	ldi	r21, 0x00	; 0
    9538:	40 e0       	ldi	r20, 0x00	; 0
    953a:	70 e0       	ldi	r23, 0x00	; 0
    953c:	60 e0       	ldi	r22, 0x00	; 0
    953e:	ce 01       	movw	r24, r28
    9540:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    9542:	ee a5       	ldd	r30, Y+46	; 0x2e
    9544:	ff a5       	ldd	r31, Y+47	; 0x2f
    9546:	80 81       	ld	r24, Z
    9548:	9e a9       	ldd	r25, Y+54	; 0x36
    954a:	89 2b       	or	r24, r25
    954c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    954e:	df 91       	pop	r29
    9550:	cf 91       	pop	r28
    9552:	1f 91       	pop	r17
    9554:	0f 91       	pop	r16
    9556:	ff 90       	pop	r15
    9558:	ef 90       	pop	r14
    955a:	df 90       	pop	r13
    955c:	cf 90       	pop	r12
    955e:	bf 90       	pop	r11
    9560:	af 90       	pop	r10
    9562:	9f 90       	pop	r9
    9564:	8f 90       	pop	r8
    9566:	7f 90       	pop	r7
    9568:	6f 90       	pop	r6
    956a:	5f 90       	pop	r5
    956c:	4f 90       	pop	r4
    956e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    9570:	01 97       	sbiw	r24, 0x01	; 1
    9572:	39 f7       	brne	.-50     	; 0x9542 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    9574:	ee a5       	ldd	r30, Y+46	; 0x2e
    9576:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    9578:	80 81       	ld	r24, Z
    957a:	9a ad       	ldd	r25, Y+58	; 0x3a
    957c:	89 23       	and	r24, r25
    957e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    9580:	e8 a9       	ldd	r30, Y+48	; 0x30
    9582:	f9 a9       	ldd	r31, Y+49	; 0x31
    9584:	80 81       	ld	r24, Z
    9586:	9b ad       	ldd	r25, Y+59	; 0x3b
    9588:	89 23       	and	r24, r25
    958a:	80 83       	st	Z, r24
    958c:	84 e0       	ldi	r24, 0x04	; 4
    958e:	82 b9       	out	0x02, r24	; 2
    9590:	ea a9       	ldd	r30, Y+50	; 0x32
    9592:	fb a9       	ldd	r31, Y+51	; 0x33
    9594:	80 81       	ld	r24, Z
    9596:	9c ad       	ldd	r25, Y+60	; 0x3c
    9598:	89 23       	and	r24, r25
    959a:	80 83       	st	Z, r24
    959c:	ea a9       	ldd	r30, Y+50	; 0x32
    959e:	fb a9       	ldd	r31, Y+51	; 0x33
    95a0:	80 81       	ld	r24, Z
    95a2:	98 ad       	ldd	r25, Y+56	; 0x38
    95a4:	89 2b       	or	r24, r25
    95a6:	80 83       	st	Z, r24
    95a8:	e8 a9       	ldd	r30, Y+48	; 0x30
    95aa:	f9 a9       	ldd	r31, Y+49	; 0x31
    95ac:	80 81       	ld	r24, Z
    95ae:	9f a9       	ldd	r25, Y+55	; 0x37
    95b0:	89 2b       	or	r24, r25
    95b2:	80 83       	st	Z, r24
    95b4:	8a 89       	ldd	r24, Y+18	; 0x12
    95b6:	9b 89       	ldd	r25, Y+19	; 0x13
    95b8:	01 97       	sbiw	r24, 0x01	; 1
    95ba:	92 b9       	out	0x02, r25	; 2
    95bc:	ea a9       	ldd	r30, Y+50	; 0x32
    95be:	fb a9       	ldd	r31, Y+51	; 0x33
    95c0:	80 81       	ld	r24, Z
    95c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    95c4:	89 23       	and	r24, r25
    95c6:	80 83       	st	Z, r24
    95c8:	ea a9       	ldd	r30, Y+50	; 0x32
    95ca:	fb a9       	ldd	r31, Y+51	; 0x33
    95cc:	80 81       	ld	r24, Z
    95ce:	98 ad       	ldd	r25, Y+56	; 0x38
    95d0:	89 2b       	or	r24, r25
    95d2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    95d4:	e8 a9       	ldd	r30, Y+48	; 0x30
    95d6:	f9 a9       	ldd	r31, Y+49	; 0x31
    95d8:	80 81       	ld	r24, Z
    95da:	9b ad       	ldd	r25, Y+59	; 0x3b
    95dc:	89 23       	and	r24, r25
    95de:	80 83       	st	Z, r24
    95e0:	85 e0       	ldi	r24, 0x05	; 5
    95e2:	82 b9       	out	0x02, r24	; 2
    95e4:	ea a9       	ldd	r30, Y+50	; 0x32
    95e6:	fb a9       	ldd	r31, Y+51	; 0x33
    95e8:	80 81       	ld	r24, Z
    95ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    95ec:	89 23       	and	r24, r25
    95ee:	80 83       	st	Z, r24
    95f0:	ea a9       	ldd	r30, Y+50	; 0x32
    95f2:	fb a9       	ldd	r31, Y+51	; 0x33
    95f4:	80 81       	ld	r24, Z
    95f6:	98 ad       	ldd	r25, Y+56	; 0x38
    95f8:	89 2b       	or	r24, r25
    95fa:	80 83       	st	Z, r24
    95fc:	e8 a9       	ldd	r30, Y+48	; 0x30
    95fe:	f9 a9       	ldd	r31, Y+49	; 0x31
    9600:	80 81       	ld	r24, Z
    9602:	9f a9       	ldd	r25, Y+55	; 0x37
    9604:	89 2b       	or	r24, r25
    9606:	80 83       	st	Z, r24
    9608:	8a 89       	ldd	r24, Y+18	; 0x12
    960a:	81 50       	subi	r24, 0x01	; 1
    960c:	82 b9       	out	0x02, r24	; 2
    960e:	ea a9       	ldd	r30, Y+50	; 0x32
    9610:	fb a9       	ldd	r31, Y+51	; 0x33
    9612:	80 81       	ld	r24, Z
    9614:	9c ad       	ldd	r25, Y+60	; 0x3c
    9616:	89 23       	and	r24, r25
    9618:	80 83       	st	Z, r24
    961a:	ea a9       	ldd	r30, Y+50	; 0x32
    961c:	fb a9       	ldd	r31, Y+51	; 0x33
    961e:	80 81       	ld	r24, Z
    9620:	98 ad       	ldd	r25, Y+56	; 0x38
    9622:	89 2b       	or	r24, r25
    9624:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    9626:	e8 a9       	ldd	r30, Y+48	; 0x30
    9628:	f9 a9       	ldd	r31, Y+49	; 0x31
    962a:	80 81       	ld	r24, Z
    962c:	9b ad       	ldd	r25, Y+59	; 0x3b
    962e:	89 23       	and	r24, r25
    9630:	80 83       	st	Z, r24
    9632:	88 e0       	ldi	r24, 0x08	; 8
    9634:	82 b9       	out	0x02, r24	; 2
    9636:	ea a9       	ldd	r30, Y+50	; 0x32
    9638:	fb a9       	ldd	r31, Y+51	; 0x33
    963a:	80 81       	ld	r24, Z
    963c:	9c ad       	ldd	r25, Y+60	; 0x3c
    963e:	89 23       	and	r24, r25
    9640:	80 83       	st	Z, r24
    9642:	ea a9       	ldd	r30, Y+50	; 0x32
    9644:	fb a9       	ldd	r31, Y+51	; 0x33
    9646:	80 81       	ld	r24, Z
    9648:	98 ad       	ldd	r25, Y+56	; 0x38
    964a:	89 2b       	or	r24, r25
    964c:	80 83       	st	Z, r24
    964e:	e8 a9       	ldd	r30, Y+48	; 0x30
    9650:	f9 a9       	ldd	r31, Y+49	; 0x31
    9652:	80 81       	ld	r24, Z
    9654:	9f a9       	ldd	r25, Y+55	; 0x37
    9656:	89 2b       	or	r24, r25
    9658:	80 83       	st	Z, r24
    965a:	8c 89       	ldd	r24, Y+20	; 0x14
    965c:	9d 89       	ldd	r25, Y+21	; 0x15
    965e:	01 97       	sbiw	r24, 0x01	; 1
    9660:	92 b9       	out	0x02, r25	; 2
    9662:	ea a9       	ldd	r30, Y+50	; 0x32
    9664:	fb a9       	ldd	r31, Y+51	; 0x33
    9666:	80 81       	ld	r24, Z
    9668:	9c ad       	ldd	r25, Y+60	; 0x3c
    966a:	89 23       	and	r24, r25
    966c:	80 83       	st	Z, r24
    966e:	ea a9       	ldd	r30, Y+50	; 0x32
    9670:	fb a9       	ldd	r31, Y+51	; 0x33
    9672:	80 81       	ld	r24, Z
    9674:	98 ad       	ldd	r25, Y+56	; 0x38
    9676:	89 2b       	or	r24, r25
    9678:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    967a:	e8 a9       	ldd	r30, Y+48	; 0x30
    967c:	f9 a9       	ldd	r31, Y+49	; 0x31
    967e:	80 81       	ld	r24, Z
    9680:	9b ad       	ldd	r25, Y+59	; 0x3b
    9682:	89 23       	and	r24, r25
    9684:	80 83       	st	Z, r24
    9686:	89 e0       	ldi	r24, 0x09	; 9
    9688:	82 b9       	out	0x02, r24	; 2
    968a:	ea a9       	ldd	r30, Y+50	; 0x32
    968c:	fb a9       	ldd	r31, Y+51	; 0x33
    968e:	80 81       	ld	r24, Z
    9690:	9c ad       	ldd	r25, Y+60	; 0x3c
    9692:	89 23       	and	r24, r25
    9694:	80 83       	st	Z, r24
    9696:	ea a9       	ldd	r30, Y+50	; 0x32
    9698:	fb a9       	ldd	r31, Y+51	; 0x33
    969a:	80 81       	ld	r24, Z
    969c:	98 ad       	ldd	r25, Y+56	; 0x38
    969e:	89 2b       	or	r24, r25
    96a0:	80 83       	st	Z, r24
    96a2:	e8 a9       	ldd	r30, Y+48	; 0x30
    96a4:	f9 a9       	ldd	r31, Y+49	; 0x31
    96a6:	80 81       	ld	r24, Z
    96a8:	9f a9       	ldd	r25, Y+55	; 0x37
    96aa:	89 2b       	or	r24, r25
    96ac:	80 83       	st	Z, r24
    96ae:	8c 89       	ldd	r24, Y+20	; 0x14
    96b0:	81 50       	subi	r24, 0x01	; 1
    96b2:	82 b9       	out	0x02, r24	; 2
    96b4:	ea a9       	ldd	r30, Y+50	; 0x32
    96b6:	fb a9       	ldd	r31, Y+51	; 0x33
    96b8:	80 81       	ld	r24, Z
    96ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    96bc:	89 23       	and	r24, r25
    96be:	80 83       	st	Z, r24
    96c0:	ea a9       	ldd	r30, Y+50	; 0x32
    96c2:	fb a9       	ldd	r31, Y+51	; 0x33
    96c4:	80 81       	ld	r24, Z
    96c6:	98 ad       	ldd	r25, Y+56	; 0x38
    96c8:	89 2b       	or	r24, r25
    96ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    96cc:	ee a5       	ldd	r30, Y+46	; 0x2e
    96ce:	ff a5       	ldd	r31, Y+47	; 0x2f
    96d0:	80 81       	ld	r24, Z
    96d2:	9e a9       	ldd	r25, Y+54	; 0x36
    96d4:	89 2b       	or	r24, r25
    96d6:	80 83       	st	Z, r24
    96d8:	34 cf       	rjmp	.-408    	; 0x9542 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

000096da <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    96da:	af 92       	push	r10
    96dc:	bf 92       	push	r11
    96de:	cf 92       	push	r12
    96e0:	df 92       	push	r13
    96e2:	ef 92       	push	r14
    96e4:	ff 92       	push	r15
    96e6:	0f 93       	push	r16
    96e8:	1f 93       	push	r17
    96ea:	cf 93       	push	r28
    96ec:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    96ee:	77 fd       	sbrc	r23, 7
    96f0:	75 c0       	rjmp	.+234    	; 0x97dc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    96f2:	57 fd       	sbrc	r21, 7
    96f4:	73 c0       	rjmp	.+230    	; 0x97dc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    96f6:	c3 2e       	mov	r12, r19
    96f8:	d2 2e       	mov	r13, r18
    96fa:	5a 01       	movw	r10, r20
    96fc:	7b 01       	movw	r14, r22
    96fe:	ec 01       	movw	r28, r24
    9700:	e8 81       	ld	r30, Y
    9702:	f9 81       	ldd	r31, Y+1	; 0x01
    9704:	06 84       	ldd	r0, Z+14	; 0x0e
    9706:	f7 85       	ldd	r31, Z+15	; 0x0f
    9708:	e0 2d       	mov	r30, r0
    970a:	19 95       	eicall
    970c:	8e 15       	cp	r24, r14
    970e:	9f 05       	cpc	r25, r15
    9710:	0c f4       	brge	.+2      	; 0x9714 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    9712:	64 c0       	rjmp	.+200    	; 0x97dc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    9714:	e8 81       	ld	r30, Y
    9716:	f9 81       	ldd	r31, Y+1	; 0x01
    9718:	04 84       	ldd	r0, Z+12	; 0x0c
    971a:	f5 85       	ldd	r31, Z+13	; 0x0d
    971c:	e0 2d       	mov	r30, r0
    971e:	ce 01       	movw	r24, r28
    9720:	19 95       	eicall
    9722:	8a 15       	cp	r24, r10
    9724:	9b 05       	cpc	r25, r11
    9726:	0c f4       	brge	.+2      	; 0x972a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    9728:	59 c0       	rjmp	.+178    	; 0x97dc <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    972a:	e8 81       	ld	r30, Y
    972c:	f9 81       	ldd	r31, Y+1	; 0x01
    972e:	06 80       	ldd	r0, Z+6	; 0x06
    9730:	f7 81       	ldd	r31, Z+7	; 0x07
    9732:	e0 2d       	mov	r30, r0
    9734:	85 01       	movw	r16, r10
    9736:	97 01       	movw	r18, r14
    9738:	a5 01       	movw	r20, r10
    973a:	b7 01       	movw	r22, r14
    973c:	ce 01       	movw	r24, r28
    973e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    9740:	ee a5       	ldd	r30, Y+46	; 0x2e
    9742:	ff a5       	ldd	r31, Y+47	; 0x2f
    9744:	80 81       	ld	r24, Z
    9746:	9a ad       	ldd	r25, Y+58	; 0x3a
    9748:	89 23       	and	r24, r25
    974a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    974c:	98 a1       	ldd	r25, Y+32	; 0x20
    974e:	29 a1       	ldd	r18, Y+33	; 0x21
    9750:	e8 a9       	ldd	r30, Y+48	; 0x30
    9752:	f9 a9       	ldd	r31, Y+49	; 0x31
    9754:	80 81       	ld	r24, Z
    9756:	3b ad       	ldd	r19, Y+59	; 0x3b
    9758:	83 23       	and	r24, r19
    975a:	80 83       	st	Z, r24
    975c:	22 b9       	out	0x02, r18	; 2
    975e:	ea a9       	ldd	r30, Y+50	; 0x32
    9760:	fb a9       	ldd	r31, Y+51	; 0x33
    9762:	80 81       	ld	r24, Z
    9764:	2c ad       	ldd	r18, Y+60	; 0x3c
    9766:	82 23       	and	r24, r18
    9768:	80 83       	st	Z, r24
    976a:	ea a9       	ldd	r30, Y+50	; 0x32
    976c:	fb a9       	ldd	r31, Y+51	; 0x33
    976e:	80 81       	ld	r24, Z
    9770:	28 ad       	ldd	r18, Y+56	; 0x38
    9772:	82 2b       	or	r24, r18
    9774:	80 83       	st	Z, r24
    9776:	92 b9       	out	0x02, r25	; 2
    9778:	ea a9       	ldd	r30, Y+50	; 0x32
    977a:	fb a9       	ldd	r31, Y+51	; 0x33
    977c:	80 81       	ld	r24, Z
    977e:	9c ad       	ldd	r25, Y+60	; 0x3c
    9780:	89 23       	and	r24, r25
    9782:	80 83       	st	Z, r24
    9784:	ea a9       	ldd	r30, Y+50	; 0x32
    9786:	fb a9       	ldd	r31, Y+51	; 0x33
    9788:	80 81       	ld	r24, Z
    978a:	98 ad       	ldd	r25, Y+56	; 0x38
    978c:	89 2b       	or	r24, r25
    978e:	80 83       	st	Z, r24
    9790:	e8 a9       	ldd	r30, Y+48	; 0x30
    9792:	f9 a9       	ldd	r31, Y+49	; 0x31
    9794:	80 81       	ld	r24, Z
    9796:	9f a9       	ldd	r25, Y+55	; 0x37
    9798:	89 2b       	or	r24, r25
    979a:	80 83       	st	Z, r24
    979c:	c2 b8       	out	0x02, r12	; 2
    979e:	ea a9       	ldd	r30, Y+50	; 0x32
    97a0:	fb a9       	ldd	r31, Y+51	; 0x33
    97a2:	80 81       	ld	r24, Z
    97a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    97a6:	89 23       	and	r24, r25
    97a8:	80 83       	st	Z, r24
    97aa:	ea a9       	ldd	r30, Y+50	; 0x32
    97ac:	fb a9       	ldd	r31, Y+51	; 0x33
    97ae:	80 81       	ld	r24, Z
    97b0:	98 ad       	ldd	r25, Y+56	; 0x38
    97b2:	89 2b       	or	r24, r25
    97b4:	80 83       	st	Z, r24
    97b6:	d2 b8       	out	0x02, r13	; 2
    97b8:	ea a9       	ldd	r30, Y+50	; 0x32
    97ba:	fb a9       	ldd	r31, Y+51	; 0x33
    97bc:	80 81       	ld	r24, Z
    97be:	9c ad       	ldd	r25, Y+60	; 0x3c
    97c0:	89 23       	and	r24, r25
    97c2:	80 83       	st	Z, r24
    97c4:	ea a9       	ldd	r30, Y+50	; 0x32
    97c6:	fb a9       	ldd	r31, Y+51	; 0x33
    97c8:	80 81       	ld	r24, Z
    97ca:	98 ad       	ldd	r25, Y+56	; 0x38
    97cc:	89 2b       	or	r24, r25
    97ce:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    97d0:	ee a5       	ldd	r30, Y+46	; 0x2e
    97d2:	ff a5       	ldd	r31, Y+47	; 0x2f
    97d4:	80 81       	ld	r24, Z
    97d6:	9e a9       	ldd	r25, Y+54	; 0x36
    97d8:	89 2b       	or	r24, r25
    97da:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    97dc:	df 91       	pop	r29
    97de:	cf 91       	pop	r28
    97e0:	1f 91       	pop	r17
    97e2:	0f 91       	pop	r16
    97e4:	ff 90       	pop	r15
    97e6:	ef 90       	pop	r14
    97e8:	df 90       	pop	r13
    97ea:	cf 90       	pop	r12
    97ec:	bf 90       	pop	r11
    97ee:	af 90       	pop	r10
    97f0:	08 95       	ret

000097f2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    97f2:	7f 92       	push	r7
    97f4:	8f 92       	push	r8
    97f6:	9f 92       	push	r9
    97f8:	af 92       	push	r10
    97fa:	bf 92       	push	r11
    97fc:	cf 92       	push	r12
    97fe:	df 92       	push	r13
    9800:	ef 92       	push	r14
    9802:	ff 92       	push	r15
    9804:	0f 93       	push	r16
    9806:	1f 93       	push	r17
    9808:	cf 93       	push	r28
    980a:	df 93       	push	r29
    980c:	ec 01       	movw	r28, r24
    980e:	59 01       	movw	r10, r18
    9810:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    9812:	0e 9d       	mul	r16, r14
    9814:	60 01       	movw	r12, r0
    9816:	0f 9d       	mul	r16, r15
    9818:	d0 0c       	add	r13, r0
    981a:	1e 9d       	mul	r17, r14
    981c:	d0 0c       	add	r13, r0
    981e:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    9820:	87 01       	movw	r16, r14
    9822:	04 0f       	add	r16, r20
    9824:	15 1f       	adc	r17, r21
    9826:	01 50       	subi	r16, 0x01	; 1
    9828:	11 09       	sbc	r17, r1
    982a:	26 0f       	add	r18, r22
    982c:	37 1f       	adc	r19, r23
    982e:	21 50       	subi	r18, 0x01	; 1
    9830:	31 09       	sbc	r19, r1
    9832:	e8 81       	ld	r30, Y
    9834:	f9 81       	ldd	r31, Y+1	; 0x01
    9836:	06 80       	ldd	r0, Z+6	; 0x06
    9838:	f7 81       	ldd	r31, Z+7	; 0x07
    983a:	e0 2d       	mov	r30, r0
    983c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    983e:	77 24       	eor	r7, r7
    9840:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    9842:	1c 14       	cp	r1, r12
    9844:	1d 04       	cpc	r1, r13
    9846:	0c f0       	brlt	.+2      	; 0x984a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    9848:	0a c1       	rjmp	.+532    	; 0x9a5e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    984a:	ee a5       	ldd	r30, Y+46	; 0x2e
    984c:	ff a5       	ldd	r31, Y+47	; 0x2f
    984e:	80 81       	ld	r24, Z
    9850:	9a ad       	ldd	r25, Y+58	; 0x3a
    9852:	89 23       	and	r24, r25
    9854:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    9856:	e8 a9       	ldd	r30, Y+48	; 0x30
    9858:	f9 a9       	ldd	r31, Y+49	; 0x31
    985a:	80 81       	ld	r24, Z
    985c:	9b ad       	ldd	r25, Y+59	; 0x3b
    985e:	89 23       	and	r24, r25
    9860:	80 83       	st	Z, r24
    9862:	9a a1       	ldd	r25, Y+34	; 0x22
    9864:	8b a1       	ldd	r24, Y+35	; 0x23
    9866:	82 b9       	out	0x02, r24	; 2
    9868:	ea a9       	ldd	r30, Y+50	; 0x32
    986a:	fb a9       	ldd	r31, Y+51	; 0x33
    986c:	80 81       	ld	r24, Z
    986e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9870:	82 23       	and	r24, r18
    9872:	80 83       	st	Z, r24
    9874:	ea a9       	ldd	r30, Y+50	; 0x32
    9876:	fb a9       	ldd	r31, Y+51	; 0x33
    9878:	80 81       	ld	r24, Z
    987a:	28 ad       	ldd	r18, Y+56	; 0x38
    987c:	82 2b       	or	r24, r18
    987e:	80 83       	st	Z, r24
    9880:	92 b9       	out	0x02, r25	; 2
    9882:	ea a9       	ldd	r30, Y+50	; 0x32
    9884:	fb a9       	ldd	r31, Y+51	; 0x33
    9886:	80 81       	ld	r24, Z
    9888:	9c ad       	ldd	r25, Y+60	; 0x3c
    988a:	89 23       	and	r24, r25
    988c:	80 83       	st	Z, r24
    988e:	ea a9       	ldd	r30, Y+50	; 0x32
    9890:	fb a9       	ldd	r31, Y+51	; 0x33
    9892:	80 81       	ld	r24, Z
    9894:	98 ad       	ldd	r25, Y+56	; 0x38
    9896:	89 2b       	or	r24, r25
    9898:	80 83       	st	Z, r24
    989a:	e8 a9       	ldd	r30, Y+48	; 0x30
    989c:	f9 a9       	ldd	r31, Y+49	; 0x31
    989e:	80 81       	ld	r24, Z
    98a0:	9f a9       	ldd	r25, Y+55	; 0x37
    98a2:	89 2b       	or	r24, r25
    98a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    98a6:	81 b1       	in	r24, 0x01	; 1
    98a8:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    98aa:	88 8d       	ldd	r24, Y+24	; 0x18
    98ac:	99 8d       	ldd	r25, Y+25	; 0x19
    98ae:	89 2b       	or	r24, r25
    98b0:	09 f0       	breq	.+2      	; 0x98b4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    98b2:	67 c0       	rjmp	.+206    	; 0x9982 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    98b4:	f5 01       	movw	r30, r10
    98b6:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    98b8:	42 e0       	ldi	r20, 0x02	; 2
    98ba:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    98bc:	ac a9       	ldd	r26, Y+52	; 0x34
    98be:	bd a9       	ldd	r27, Y+53	; 0x35
    98c0:	2c 91       	ld	r18, X
    98c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    98c4:	23 23       	and	r18, r19
    98c6:	2c 93       	st	X, r18
    98c8:	20 b1       	in	r18, 0x00	; 0
    98ca:	ac a9       	ldd	r26, Y+52	; 0x34
    98cc:	bd a9       	ldd	r27, Y+53	; 0x35
    98ce:	2c 91       	ld	r18, X
    98d0:	39 ad       	ldd	r19, Y+57	; 0x39
    98d2:	23 2b       	or	r18, r19
    98d4:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    98d6:	ac a9       	ldd	r26, Y+52	; 0x34
    98d8:	bd a9       	ldd	r27, Y+53	; 0x35
    98da:	2c 91       	ld	r18, X
    98dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    98de:	23 23       	and	r18, r19
    98e0:	2c 93       	st	X, r18
    98e2:	20 b1       	in	r18, 0x00	; 0
    98e4:	ac a9       	ldd	r26, Y+52	; 0x34
    98e6:	bd a9       	ldd	r27, Y+53	; 0x35
    98e8:	2c 91       	ld	r18, X
    98ea:	39 ad       	ldd	r19, Y+57	; 0x39
    98ec:	23 2b       	or	r18, r19
    98ee:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    98f0:	ac a9       	ldd	r26, Y+52	; 0x34
    98f2:	bd a9       	ldd	r27, Y+53	; 0x35
    98f4:	2c 91       	ld	r18, X
    98f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    98f8:	23 23       	and	r18, r19
    98fa:	2c 93       	st	X, r18
    98fc:	20 b1       	in	r18, 0x00	; 0
    98fe:	ac a9       	ldd	r26, Y+52	; 0x34
    9900:	bd a9       	ldd	r27, Y+53	; 0x35
    9902:	3c 91       	ld	r19, X
    9904:	69 ad       	ldd	r22, Y+57	; 0x39
    9906:	36 2b       	or	r19, r22
    9908:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    990a:	ac a9       	ldd	r26, Y+52	; 0x34
    990c:	bd a9       	ldd	r27, Y+53	; 0x35
    990e:	3c 91       	ld	r19, X
    9910:	6d ad       	ldd	r22, Y+61	; 0x3d
    9912:	36 23       	and	r19, r22
    9914:	3c 93       	st	X, r19
    9916:	60 b1       	in	r22, 0x00	; 0
    9918:	ac a9       	ldd	r26, Y+52	; 0x34
    991a:	bd a9       	ldd	r27, Y+53	; 0x35
    991c:	3c 91       	ld	r19, X
    991e:	79 ad       	ldd	r23, Y+57	; 0x39
    9920:	37 2b       	or	r19, r23
    9922:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    9924:	41 30       	cpi	r20, 0x01	; 1
    9926:	51 05       	cpc	r21, r1
    9928:	49 f5       	brne	.+82     	; 0x997c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    992a:	32 2f       	mov	r19, r18
    992c:	26 2f       	mov	r18, r22
    992e:	21 93       	st	Z+, r18
    9930:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    9932:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    9934:	09 f0       	breq	.+2      	; 0x9938 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    9936:	c0 cf       	rjmp	.-128    	; 0x98b8 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    9938:	cc 0c       	add	r12, r12
    993a:	dd 1c       	adc	r13, r13
    993c:	ac 0c       	add	r10, r12
    993e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    9940:	0c 89       	ldd	r16, Y+20	; 0x14
    9942:	1d 89       	ldd	r17, Y+21	; 0x15
    9944:	01 50       	subi	r16, 0x01	; 1
    9946:	11 09       	sbc	r17, r1
    9948:	2a 89       	ldd	r18, Y+18	; 0x12
    994a:	3b 89       	ldd	r19, Y+19	; 0x13
    994c:	21 50       	subi	r18, 0x01	; 1
    994e:	31 09       	sbc	r19, r1
    9950:	e8 81       	ld	r30, Y
    9952:	f9 81       	ldd	r31, Y+1	; 0x01
    9954:	06 80       	ldd	r0, Z+6	; 0x06
    9956:	f7 81       	ldd	r31, Z+7	; 0x07
    9958:	e0 2d       	mov	r30, r0
    995a:	50 e0       	ldi	r21, 0x00	; 0
    995c:	40 e0       	ldi	r20, 0x00	; 0
    995e:	70 e0       	ldi	r23, 0x00	; 0
    9960:	60 e0       	ldi	r22, 0x00	; 0
    9962:	ce 01       	movw	r24, r28
    9964:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    9966:	ee a5       	ldd	r30, Y+46	; 0x2e
    9968:	ff a5       	ldd	r31, Y+47	; 0x2f
    996a:	80 81       	ld	r24, Z
    996c:	9e a9       	ldd	r25, Y+54	; 0x36
    996e:	89 2b       	or	r24, r25
    9970:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    9972:	81 b1       	in	r24, 0x01	; 1
    9974:	71 b8       	out	0x01, r7	; 1
    9976:	d1 2c       	mov	r13, r1
    9978:	c1 2c       	mov	r12, r1
    997a:	63 cf       	rjmp	.-314    	; 0x9842 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    997c:	41 e0       	ldi	r20, 0x01	; 1
    997e:	50 e0       	ldi	r21, 0x00	; 0
    9980:	9d cf       	rjmp	.-198    	; 0x98bc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    9982:	ec a9       	ldd	r30, Y+52	; 0x34
    9984:	fd a9       	ldd	r31, Y+53	; 0x35
    9986:	80 81       	ld	r24, Z
    9988:	9d ad       	ldd	r25, Y+61	; 0x3d
    998a:	89 23       	and	r24, r25
    998c:	80 83       	st	Z, r24
    998e:	80 b1       	in	r24, 0x00	; 0
    9990:	ec a9       	ldd	r30, Y+52	; 0x34
    9992:	fd a9       	ldd	r31, Y+53	; 0x35
    9994:	80 81       	ld	r24, Z
    9996:	99 ad       	ldd	r25, Y+57	; 0x39
    9998:	89 2b       	or	r24, r25
    999a:	80 83       	st	Z, r24
    999c:	75 01       	movw	r14, r10
    999e:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    99a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    99a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    99a4:	81 30       	cpi	r24, 0x01	; 1
    99a6:	91 05       	cpc	r25, r1
    99a8:	d9 f5       	brne	.+118    	; 0x9a20 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    99aa:	ec a9       	ldd	r30, Y+52	; 0x34
    99ac:	fd a9       	ldd	r31, Y+53	; 0x35
    99ae:	80 81       	ld	r24, Z
    99b0:	9d ad       	ldd	r25, Y+61	; 0x3d
    99b2:	89 23       	and	r24, r25
    99b4:	80 83       	st	Z, r24
    99b6:	60 b1       	in	r22, 0x00	; 0
    99b8:	ec a9       	ldd	r30, Y+52	; 0x34
    99ba:	fd a9       	ldd	r31, Y+53	; 0x35
    99bc:	80 81       	ld	r24, Z
    99be:	99 ad       	ldd	r25, Y+57	; 0x39
    99c0:	89 2b       	or	r24, r25
    99c2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    99c4:	ec a9       	ldd	r30, Y+52	; 0x34
    99c6:	fd a9       	ldd	r31, Y+53	; 0x35
    99c8:	80 81       	ld	r24, Z
    99ca:	9d ad       	ldd	r25, Y+61	; 0x3d
    99cc:	89 23       	and	r24, r25
    99ce:	80 83       	st	Z, r24
    99d0:	40 b1       	in	r20, 0x00	; 0
    99d2:	ec a9       	ldd	r30, Y+52	; 0x34
    99d4:	fd a9       	ldd	r31, Y+53	; 0x35
    99d6:	80 81       	ld	r24, Z
    99d8:	99 ad       	ldd	r25, Y+57	; 0x39
    99da:	89 2b       	or	r24, r25
    99dc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    99de:	ec a9       	ldd	r30, Y+52	; 0x34
    99e0:	fd a9       	ldd	r31, Y+53	; 0x35
    99e2:	80 81       	ld	r24, Z
    99e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    99e6:	89 23       	and	r24, r25
    99e8:	80 83       	st	Z, r24
    99ea:	20 b1       	in	r18, 0x00	; 0
    99ec:	ec a9       	ldd	r30, Y+52	; 0x34
    99ee:	fd a9       	ldd	r31, Y+53	; 0x35
    99f0:	80 81       	ld	r24, Z
    99f2:	99 ad       	ldd	r25, Y+57	; 0x39
    99f4:	89 2b       	or	r24, r25
    99f6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    99f8:	e8 81       	ld	r30, Y
    99fa:	f9 81       	ldd	r31, Y+1	; 0x01
    99fc:	01 90       	ld	r0, Z+
    99fe:	f0 81       	ld	r31, Z
    9a00:	e0 2d       	mov	r30, r0
    9a02:	ce 01       	movw	r24, r28
    9a04:	19 95       	eicall
    9a06:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    9a08:	f7 01       	movw	r30, r14
    9a0a:	81 92       	st	Z+, r8
    9a0c:	91 92       	st	Z+, r9
    9a0e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    9a10:	01 50       	subi	r16, 0x01	; 1
    9a12:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    9a14:	29 f6       	brne	.-118    	; 0x99a0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    9a16:	cc 0c       	add	r12, r12
    9a18:	dd 1c       	adc	r13, r13
    9a1a:	ac 0c       	add	r10, r12
    9a1c:	bd 1c       	adc	r11, r13
    9a1e:	a3 cf       	rjmp	.-186    	; 0x9966 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    9a20:	89 2b       	or	r24, r25
    9a22:	91 f7       	brne	.-28     	; 0x9a08 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    9a24:	ec a9       	ldd	r30, Y+52	; 0x34
    9a26:	fd a9       	ldd	r31, Y+53	; 0x35
    9a28:	80 81       	ld	r24, Z
    9a2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    9a2c:	89 23       	and	r24, r25
    9a2e:	80 83       	st	Z, r24
    9a30:	80 b0       	in	r8, 0x00	; 0
    9a32:	ec a9       	ldd	r30, Y+52	; 0x34
    9a34:	fd a9       	ldd	r31, Y+53	; 0x35
    9a36:	80 81       	ld	r24, Z
    9a38:	99 ad       	ldd	r25, Y+57	; 0x39
    9a3a:	89 2b       	or	r24, r25
    9a3c:	80 83       	st	Z, r24
    9a3e:	ec a9       	ldd	r30, Y+52	; 0x34
    9a40:	fd a9       	ldd	r31, Y+53	; 0x35
    9a42:	80 81       	ld	r24, Z
    9a44:	9d ad       	ldd	r25, Y+61	; 0x3d
    9a46:	89 23       	and	r24, r25
    9a48:	80 83       	st	Z, r24
    9a4a:	90 b1       	in	r25, 0x00	; 0
    9a4c:	ec a9       	ldd	r30, Y+52	; 0x34
    9a4e:	fd a9       	ldd	r31, Y+53	; 0x35
    9a50:	80 81       	ld	r24, Z
    9a52:	29 ad       	ldd	r18, Y+57	; 0x39
    9a54:	82 2b       	or	r24, r18
    9a56:	80 83       	st	Z, r24
    9a58:	98 2c       	mov	r9, r8
    9a5a:	89 2e       	mov	r8, r25
    9a5c:	d5 cf       	rjmp	.-86     	; 0x9a08 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    9a5e:	90 e0       	ldi	r25, 0x00	; 0
    9a60:	80 e0       	ldi	r24, 0x00	; 0
    9a62:	df 91       	pop	r29
    9a64:	cf 91       	pop	r28
    9a66:	1f 91       	pop	r17
    9a68:	0f 91       	pop	r16
    9a6a:	ff 90       	pop	r15
    9a6c:	ef 90       	pop	r14
    9a6e:	df 90       	pop	r13
    9a70:	cf 90       	pop	r12
    9a72:	bf 90       	pop	r11
    9a74:	af 90       	pop	r10
    9a76:	9f 90       	pop	r9
    9a78:	8f 90       	pop	r8
    9a7a:	7f 90       	pop	r7
    9a7c:	08 95       	ret

00009a7e <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    9a7e:	38 e0       	ldi	r19, 0x08	; 8
    9a80:	43 9f       	mul	r20, r19
    9a82:	c0 01       	movw	r24, r0
    9a84:	11 24       	eor	r1, r1
    9a86:	80 7e       	andi	r24, 0xE0	; 224
    9a88:	97 70       	andi	r25, 0x07	; 7
    9a8a:	26 95       	lsr	r18
    9a8c:	26 95       	lsr	r18
    9a8e:	26 95       	lsr	r18
    9a90:	82 2b       	or	r24, r18
    9a92:	70 e0       	ldi	r23, 0x00	; 0
    9a94:	76 2f       	mov	r23, r22
    9a96:	66 27       	eor	r22, r22
    9a98:	66 27       	eor	r22, r22
    9a9a:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    9a9c:	86 2b       	or	r24, r22
    9a9e:	97 2b       	or	r25, r23
    9aa0:	08 95       	ret

00009aa2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    9aa2:	0f 93       	push	r16
    9aa4:	cf 93       	push	r28
    9aa6:	df 93       	push	r29
    9aa8:	dc 01       	movw	r26, r24
    9aaa:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    9aac:	9e 96       	adiw	r26, 0x2e	; 46
    9aae:	ed 91       	ld	r30, X+
    9ab0:	fc 91       	ld	r31, X
    9ab2:	9f 97       	sbiw	r26, 0x2f	; 47
    9ab4:	80 81       	ld	r24, Z
    9ab6:	da 96       	adiw	r26, 0x3a	; 58
    9ab8:	9c 91       	ld	r25, X
    9aba:	da 97       	sbiw	r26, 0x3a	; 58
    9abc:	89 23       	and	r24, r25
    9abe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    9ac0:	22 23       	and	r18, r18
    9ac2:	09 f4       	brne	.+2      	; 0x9ac6 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    9ac4:	5b c0       	rjmp	.+182    	; 0x9b7c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    9ac6:	58 96       	adiw	r26, 0x18	; 24
    9ac8:	8d 91       	ld	r24, X+
    9aca:	9c 91       	ld	r25, X
    9acc:	59 97       	sbiw	r26, 0x19	; 25
    9ace:	89 2b       	or	r24, r25
    9ad0:	49 f5       	brne	.+82     	; 0x9b24 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    9ad2:	d0 96       	adiw	r26, 0x30	; 48
    9ad4:	ed 91       	ld	r30, X+
    9ad6:	fc 91       	ld	r31, X
    9ad8:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    9ada:	80 81       	ld	r24, Z
    9adc:	db 96       	adiw	r26, 0x3b	; 59
    9ade:	9c 91       	ld	r25, X
    9ae0:	db 97       	sbiw	r26, 0x3b	; 59
    9ae2:	89 23       	and	r24, r25
    9ae4:	80 83       	st	Z, r24
    9ae6:	12 b8       	out	0x02, r1	; 2
    9ae8:	d2 96       	adiw	r26, 0x32	; 50
    9aea:	ed 91       	ld	r30, X+
    9aec:	fc 91       	ld	r31, X
    9aee:	d3 97       	sbiw	r26, 0x33	; 51
    9af0:	80 81       	ld	r24, Z
    9af2:	dc 96       	adiw	r26, 0x3c	; 60
    9af4:	9c 91       	ld	r25, X
    9af6:	dc 97       	sbiw	r26, 0x3c	; 60
    9af8:	89 23       	and	r24, r25
    9afa:	80 83       	st	Z, r24
    9afc:	d2 96       	adiw	r26, 0x32	; 50
    9afe:	ed 91       	ld	r30, X+
    9b00:	fc 91       	ld	r31, X
    9b02:	d3 97       	sbiw	r26, 0x33	; 51
    9b04:	80 81       	ld	r24, Z
    9b06:	d8 96       	adiw	r26, 0x38	; 56
    9b08:	9c 91       	ld	r25, X
    9b0a:	d8 97       	sbiw	r26, 0x38	; 56
    9b0c:	89 2b       	or	r24, r25
    9b0e:	80 83       	st	Z, r24
    9b10:	d0 96       	adiw	r26, 0x30	; 48
    9b12:	ed 91       	ld	r30, X+
    9b14:	fc 91       	ld	r31, X
    9b16:	d1 97       	sbiw	r26, 0x31	; 49
    9b18:	80 81       	ld	r24, Z
    9b1a:	d7 96       	adiw	r26, 0x37	; 55
    9b1c:	9c 91       	ld	r25, X
    9b1e:	d7 97       	sbiw	r26, 0x37	; 55
    9b20:	89 2b       	or	r24, r25
    9b22:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    9b24:	d0 96       	adiw	r26, 0x30	; 48
    9b26:	ed 91       	ld	r30, X+
    9b28:	fc 91       	ld	r31, X
    9b2a:	d1 97       	sbiw	r26, 0x31	; 49
    9b2c:	80 81       	ld	r24, Z
    9b2e:	db 96       	adiw	r26, 0x3b	; 59
    9b30:	9c 91       	ld	r25, X
    9b32:	db 97       	sbiw	r26, 0x3b	; 59
    9b34:	89 23       	and	r24, r25
    9b36:	80 83       	st	Z, r24
    9b38:	90 96       	adiw	r26, 0x20	; 32
    9b3a:	8c 91       	ld	r24, X
    9b3c:	90 97       	sbiw	r26, 0x20	; 32
    9b3e:	82 b9       	out	0x02, r24	; 2
    9b40:	d2 96       	adiw	r26, 0x32	; 50
    9b42:	ed 91       	ld	r30, X+
    9b44:	fc 91       	ld	r31, X
    9b46:	d3 97       	sbiw	r26, 0x33	; 51
    9b48:	80 81       	ld	r24, Z
    9b4a:	dc 96       	adiw	r26, 0x3c	; 60
    9b4c:	9c 91       	ld	r25, X
    9b4e:	dc 97       	sbiw	r26, 0x3c	; 60
    9b50:	89 23       	and	r24, r25
    9b52:	80 83       	st	Z, r24
    9b54:	d2 96       	adiw	r26, 0x32	; 50
    9b56:	ed 91       	ld	r30, X+
    9b58:	fc 91       	ld	r31, X
    9b5a:	d3 97       	sbiw	r26, 0x33	; 51
    9b5c:	80 81       	ld	r24, Z
    9b5e:	d8 96       	adiw	r26, 0x38	; 56
    9b60:	9c 91       	ld	r25, X
    9b62:	d8 97       	sbiw	r26, 0x38	; 56
    9b64:	89 2b       	or	r24, r25
    9b66:	80 83       	st	Z, r24
    9b68:	d0 96       	adiw	r26, 0x30	; 48
    9b6a:	ed 91       	ld	r30, X+
    9b6c:	fc 91       	ld	r31, X
    9b6e:	d1 97       	sbiw	r26, 0x31	; 49
    9b70:	80 81       	ld	r24, Z
    9b72:	d7 96       	adiw	r26, 0x37	; 55
    9b74:	9c 91       	ld	r25, X
    9b76:	d7 97       	sbiw	r26, 0x37	; 55
    9b78:	89 2b       	or	r24, r25
    9b7a:	80 83       	st	Z, r24
    9b7c:	eb 01       	movw	r28, r22
    9b7e:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    9b80:	18 16       	cp	r1, r24
    9b82:	19 06       	cpc	r1, r25
    9b84:	bc f5       	brge	.+110    	; 0x9bf4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    9b86:	00 23       	and	r16, r16
    9b88:	91 f1       	breq	.+100    	; 0x9bee <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    9b8a:	fe 01       	movw	r30, r28
    9b8c:	45 91       	lpm	r20, Z+
    9b8e:	54 91       	lpm	r21, Z
    9b90:	34 2f       	mov	r19, r20
    9b92:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    9b94:	22 b9       	out	0x02, r18	; 2
    9b96:	d2 96       	adiw	r26, 0x32	; 50
    9b98:	ed 91       	ld	r30, X+
    9b9a:	fc 91       	ld	r31, X
    9b9c:	d3 97       	sbiw	r26, 0x33	; 51
    9b9e:	20 81       	ld	r18, Z
    9ba0:	dc 96       	adiw	r26, 0x3c	; 60
    9ba2:	4c 91       	ld	r20, X
    9ba4:	dc 97       	sbiw	r26, 0x3c	; 60
    9ba6:	24 23       	and	r18, r20
    9ba8:	20 83       	st	Z, r18
    9baa:	d2 96       	adiw	r26, 0x32	; 50
    9bac:	ed 91       	ld	r30, X+
    9bae:	fc 91       	ld	r31, X
    9bb0:	d3 97       	sbiw	r26, 0x33	; 51
    9bb2:	20 81       	ld	r18, Z
    9bb4:	d8 96       	adiw	r26, 0x38	; 56
    9bb6:	4c 91       	ld	r20, X
    9bb8:	d8 97       	sbiw	r26, 0x38	; 56
    9bba:	24 2b       	or	r18, r20
    9bbc:	20 83       	st	Z, r18
    9bbe:	32 b9       	out	0x02, r19	; 2
    9bc0:	d2 96       	adiw	r26, 0x32	; 50
    9bc2:	ed 91       	ld	r30, X+
    9bc4:	fc 91       	ld	r31, X
    9bc6:	d3 97       	sbiw	r26, 0x33	; 51
    9bc8:	20 81       	ld	r18, Z
    9bca:	dc 96       	adiw	r26, 0x3c	; 60
    9bcc:	3c 91       	ld	r19, X
    9bce:	dc 97       	sbiw	r26, 0x3c	; 60
    9bd0:	23 23       	and	r18, r19
    9bd2:	20 83       	st	Z, r18
    9bd4:	d2 96       	adiw	r26, 0x32	; 50
    9bd6:	ed 91       	ld	r30, X+
    9bd8:	fc 91       	ld	r31, X
    9bda:	d3 97       	sbiw	r26, 0x33	; 51
    9bdc:	20 81       	ld	r18, Z
    9bde:	d8 96       	adiw	r26, 0x38	; 56
    9be0:	3c 91       	ld	r19, X
    9be2:	d8 97       	sbiw	r26, 0x38	; 56
    9be4:	23 2b       	or	r18, r19
    9be6:	20 83       	st	Z, r18
    9be8:	22 96       	adiw	r28, 0x02	; 2
    9bea:	01 97       	sbiw	r24, 0x01	; 1
    9bec:	c9 cf       	rjmp	.-110    	; 0x9b80 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    9bee:	38 81       	ld	r19, Y
    9bf0:	29 81       	ldd	r18, Y+1	; 0x01
    9bf2:	d0 cf       	rjmp	.-96     	; 0x9b94 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    9bf4:	9e 96       	adiw	r26, 0x2e	; 46
    9bf6:	ed 91       	ld	r30, X+
    9bf8:	fc 91       	ld	r31, X
    9bfa:	9f 97       	sbiw	r26, 0x2f	; 47
    9bfc:	80 81       	ld	r24, Z
    9bfe:	d6 96       	adiw	r26, 0x36	; 54
    9c00:	9c 91       	ld	r25, X
    9c02:	89 2b       	or	r24, r25
    9c04:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    9c06:	df 91       	pop	r29
    9c08:	cf 91       	pop	r28
    9c0a:	0f 91       	pop	r16
    9c0c:	08 95       	ret

00009c0e <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    9c0e:	2f 92       	push	r2
    9c10:	3f 92       	push	r3
    9c12:	4f 92       	push	r4
    9c14:	5f 92       	push	r5
    9c16:	6f 92       	push	r6
    9c18:	7f 92       	push	r7
    9c1a:	8f 92       	push	r8
    9c1c:	9f 92       	push	r9
    9c1e:	af 92       	push	r10
    9c20:	bf 92       	push	r11
    9c22:	cf 92       	push	r12
    9c24:	df 92       	push	r13
    9c26:	ef 92       	push	r14
    9c28:	ff 92       	push	r15
    9c2a:	0f 93       	push	r16
    9c2c:	1f 93       	push	r17
    9c2e:	cf 93       	push	r28
    9c30:	df 93       	push	r29
    9c32:	00 d0       	rcall	.+0      	; 0x9c34 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    9c34:	00 d0       	rcall	.+0      	; 0x9c36 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    9c36:	cd b7       	in	r28, 0x3d	; 61
    9c38:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    9c3a:	28 2e       	mov	r2, r24
    9c3c:	31 2c       	mov	r3, r1
    9c3e:	c1 01       	movw	r24, r2
    9c40:	88 0f       	add	r24, r24
    9c42:	99 1f       	adc	r25, r25
    9c44:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <array_pids>
    9c48:	f0 91 b4 0d 	lds	r31, 0x0DB4	; 0x800db4 <array_pids+0x1>
    9c4c:	e8 0f       	add	r30, r24
    9c4e:	f9 1f       	adc	r31, r25
    9c50:	80 81       	ld	r24, Z
    9c52:	91 81       	ldd	r25, Z+1	; 0x01
    9c54:	9e 83       	std	Y+6, r25	; 0x06
    9c56:	8d 83       	std	Y+5, r24	; 0x05
    9c58:	81 01       	movw	r16, r2
    9c5a:	00 0f       	add	r16, r16
    9c5c:	11 1f       	adc	r17, r17
    9c5e:	00 0f       	add	r16, r16
    9c60:	11 1f       	adc	r17, r17
    9c62:	f8 01       	movw	r30, r16
    9c64:	ec 5a       	subi	r30, 0xAC	; 172
    9c66:	f5 4f       	sbci	r31, 0xF5	; 245
    9c68:	40 80       	ld	r4, Z
    9c6a:	51 80       	ldd	r5, Z+1	; 0x01
    9c6c:	62 80       	ldd	r6, Z+2	; 0x02
    9c6e:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    9c70:	20 e0       	ldi	r18, 0x00	; 0
    9c72:	30 e0       	ldi	r19, 0x00	; 0
    9c74:	a9 01       	movw	r20, r18
    9c76:	c3 01       	movw	r24, r6
    9c78:	b2 01       	movw	r22, r4
    9c7a:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
    9c7e:	87 fd       	sbrc	r24, 7
    9c80:	97 c0       	rjmp	.+302    	; 0x9db0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    9c82:	f8 01       	movw	r30, r16
    9c84:	e8 59       	subi	r30, 0x98	; 152
    9c86:	f5 4f       	sbci	r31, 0xF5	; 245
    9c88:	80 80       	ld	r8, Z
    9c8a:	91 80       	ldd	r9, Z+1	; 0x01
    9c8c:	a2 80       	ldd	r10, Z+2	; 0x02
    9c8e:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    9c90:	20 e0       	ldi	r18, 0x00	; 0
    9c92:	30 e0       	ldi	r19, 0x00	; 0
    9c94:	a9 01       	movw	r20, r18
    9c96:	c5 01       	movw	r24, r10
    9c98:	b4 01       	movw	r22, r8
    9c9a:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
    9c9e:	87 fd       	sbrc	r24, 7
    9ca0:	87 c0       	rjmp	.+270    	; 0x9db0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    9ca2:	f8 01       	movw	r30, r16
    9ca4:	e4 58       	subi	r30, 0x84	; 132
    9ca6:	f5 4f       	sbci	r31, 0xF5	; 245
    9ca8:	c0 80       	ld	r12, Z
    9caa:	d1 80       	ldd	r13, Z+1	; 0x01
    9cac:	e2 80       	ldd	r14, Z+2	; 0x02
    9cae:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    9cb0:	20 e0       	ldi	r18, 0x00	; 0
    9cb2:	30 e0       	ldi	r19, 0x00	; 0
    9cb4:	a9 01       	movw	r20, r18
    9cb6:	c7 01       	movw	r24, r14
    9cb8:	b6 01       	movw	r22, r12
    9cba:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
    9cbe:	87 fd       	sbrc	r24, 7
    9cc0:	77 c0       	rjmp	.+238    	; 0x9db0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    9cc2:	81 e0       	ldi	r24, 0x01	; 1
    9cc4:	ed 81       	ldd	r30, Y+5	; 0x05
    9cc6:	fe 81       	ldd	r31, Y+6	; 0x06
    9cc8:	22 8d       	ldd	r18, Z+26	; 0x1a
    9cca:	33 8d       	ldd	r19, Z+27	; 0x1b
    9ccc:	21 30       	cpi	r18, 0x01	; 1
    9cce:	31 05       	cpc	r19, r1
    9cd0:	09 f0       	breq	.+2      	; 0x9cd4 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    9cd2:	80 e0       	ldi	r24, 0x00	; 0
    9cd4:	ed 81       	ldd	r30, Y+5	; 0x05
    9cd6:	fe 81       	ldd	r31, Y+6	; 0x06
    9cd8:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    9cda:	40 82       	st	Z, r4
    9cdc:	51 82       	std	Z+1, r5	; 0x01
    9cde:	62 82       	std	Z+2, r6	; 0x02
    9ce0:	73 82       	std	Z+3, r7	; 0x03
    9ce2:	84 82       	std	Z+4, r8	; 0x04
    9ce4:	95 82       	std	Z+5, r9	; 0x05
    9ce6:	a6 82       	std	Z+6, r10	; 0x06
    9ce8:	b7 82       	std	Z+7, r11	; 0x07
    9cea:	c0 86       	std	Z+8, r12	; 0x08
    9cec:	d1 86       	std	Z+9, r13	; 0x09
    9cee:	e2 86       	std	Z+10, r14	; 0x0a
    9cf0:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    9cf2:	66 a5       	ldd	r22, Z+46	; 0x2e
    9cf4:	77 a5       	ldd	r23, Z+47	; 0x2f
    9cf6:	80 a9       	ldd	r24, Z+48	; 0x30
    9cf8:	91 a9       	ldd	r25, Z+49	; 0x31
    9cfa:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    9cfe:	20 e0       	ldi	r18, 0x00	; 0
    9d00:	30 e0       	ldi	r19, 0x00	; 0
    9d02:	4a e7       	ldi	r20, 0x7A	; 122
    9d04:	54 e4       	ldi	r21, 0x44	; 68
    9d06:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    9d0a:	69 83       	std	Y+1, r22	; 0x01
    9d0c:	7a 83       	std	Y+2, r23	; 0x02
    9d0e:	8b 83       	std	Y+3, r24	; 0x03
    9d10:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    9d12:	ed 81       	ldd	r30, Y+5	; 0x05
    9d14:	fe 81       	ldd	r31, Y+6	; 0x06
    9d16:	44 86       	std	Z+12, r4	; 0x0c
    9d18:	55 86       	std	Z+13, r5	; 0x0d
    9d1a:	66 86       	std	Z+14, r6	; 0x0e
    9d1c:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    9d1e:	9b 01       	movw	r18, r22
    9d20:	ac 01       	movw	r20, r24
    9d22:	c5 01       	movw	r24, r10
    9d24:	b4 01       	movw	r22, r8
    9d26:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
    9d2a:	4b 01       	movw	r8, r22
    9d2c:	5c 01       	movw	r10, r24
    9d2e:	ed 81       	ldd	r30, Y+5	; 0x05
    9d30:	fe 81       	ldd	r31, Y+6	; 0x06
    9d32:	80 8a       	std	Z+16, r8	; 0x10
    9d34:	91 8a       	std	Z+17, r9	; 0x11
    9d36:	a2 8a       	std	Z+18, r10	; 0x12
    9d38:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    9d3a:	29 81       	ldd	r18, Y+1	; 0x01
    9d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    9d3e:	4b 81       	ldd	r20, Y+3	; 0x03
    9d40:	5c 81       	ldd	r21, Y+4	; 0x04
    9d42:	c7 01       	movw	r24, r14
    9d44:	b6 01       	movw	r22, r12
    9d46:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    9d4a:	6b 01       	movw	r12, r22
    9d4c:	7c 01       	movw	r14, r24
    9d4e:	ed 81       	ldd	r30, Y+5	; 0x05
    9d50:	fe 81       	ldd	r31, Y+6	; 0x06
    9d52:	c4 8a       	std	Z+20, r12	; 0x14
    9d54:	d5 8a       	std	Z+21, r13	; 0x15
    9d56:	e6 8a       	std	Z+22, r14	; 0x16
    9d58:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    9d5a:	80 8d       	ldd	r24, Z+24	; 0x18
    9d5c:	91 8d       	ldd	r25, Z+25	; 0x19
    9d5e:	01 97       	sbiw	r24, 0x01	; 1
    9d60:	39 f5       	brne	.+78     	; 0x9db0 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    9d62:	a3 01       	movw	r20, r6
    9d64:	92 01       	movw	r18, r4
    9d66:	60 e0       	ldi	r22, 0x00	; 0
    9d68:	70 e0       	ldi	r23, 0x00	; 0
    9d6a:	cb 01       	movw	r24, r22
    9d6c:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    9d70:	ed 81       	ldd	r30, Y+5	; 0x05
    9d72:	fe 81       	ldd	r31, Y+6	; 0x06
    9d74:	64 87       	std	Z+12, r22	; 0x0c
    9d76:	75 87       	std	Z+13, r23	; 0x0d
    9d78:	86 87       	std	Z+14, r24	; 0x0e
    9d7a:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    9d7c:	a5 01       	movw	r20, r10
    9d7e:	94 01       	movw	r18, r8
    9d80:	60 e0       	ldi	r22, 0x00	; 0
    9d82:	70 e0       	ldi	r23, 0x00	; 0
    9d84:	cb 01       	movw	r24, r22
    9d86:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    9d8a:	ed 81       	ldd	r30, Y+5	; 0x05
    9d8c:	fe 81       	ldd	r31, Y+6	; 0x06
    9d8e:	60 8b       	std	Z+16, r22	; 0x10
    9d90:	71 8b       	std	Z+17, r23	; 0x11
    9d92:	82 8b       	std	Z+18, r24	; 0x12
    9d94:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    9d96:	a7 01       	movw	r20, r14
    9d98:	96 01       	movw	r18, r12
    9d9a:	60 e0       	ldi	r22, 0x00	; 0
    9d9c:	70 e0       	ldi	r23, 0x00	; 0
    9d9e:	cb 01       	movw	r24, r22
    9da0:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    9da4:	ed 81       	ldd	r30, Y+5	; 0x05
    9da6:	fe 81       	ldd	r31, Y+6	; 0x06
    9da8:	64 8b       	std	Z+20, r22	; 0x14
    9daa:	75 8b       	std	Z+21, r23	; 0x15
    9dac:	86 8b       	std	Z+22, r24	; 0x16
    9dae:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    9db0:	f1 01       	movw	r30, r2
    9db2:	e0 57       	subi	r30, 0x70	; 112
    9db4:	f5 4f       	sbci	r31, 0xF5	; 245
    9db6:	10 81       	ld	r17, Z
    9db8:	61 2f       	mov	r22, r17
    9dba:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    9dbc:	61 15       	cp	r22, r1
    9dbe:	71 05       	cpc	r23, r1
    9dc0:	f1 f1       	breq	.+124    	; 0x9e3e <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    9dc2:	07 2e       	mov	r0, r23
    9dc4:	00 0c       	add	r0, r0
    9dc6:	88 0b       	sbc	r24, r24
    9dc8:	99 0b       	sbc	r25, r25
    9dca:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    9dce:	6b 01       	movw	r12, r22
    9dd0:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    9dd2:	ed 81       	ldd	r30, Y+5	; 0x05
    9dd4:	fe 81       	ldd	r31, Y+6	; 0x06
    9dd6:	66 a5       	ldd	r22, Z+46	; 0x2e
    9dd8:	77 a5       	ldd	r23, Z+47	; 0x2f
    9dda:	80 a9       	ldd	r24, Z+48	; 0x30
    9ddc:	91 a9       	ldd	r25, Z+49	; 0x31
    9dde:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    9de2:	9b 01       	movw	r18, r22
    9de4:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    9de6:	c7 01       	movw	r24, r14
    9de8:	b6 01       	movw	r22, r12
    9dea:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    9dee:	6b 01       	movw	r12, r22
    9df0:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    9df2:	ac 01       	movw	r20, r24
    9df4:	9b 01       	movw	r18, r22
    9df6:	ed 81       	ldd	r30, Y+5	; 0x05
    9df8:	fe 81       	ldd	r31, Y+6	; 0x06
    9dfa:	60 89       	ldd	r22, Z+16	; 0x10
    9dfc:	71 89       	ldd	r23, Z+17	; 0x11
    9dfe:	82 89       	ldd	r24, Z+18	; 0x12
    9e00:	93 89       	ldd	r25, Z+19	; 0x13
    9e02:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
    9e06:	ed 81       	ldd	r30, Y+5	; 0x05
    9e08:	fe 81       	ldd	r31, Y+6	; 0x06
    9e0a:	60 8b       	std	Z+16, r22	; 0x10
    9e0c:	71 8b       	std	Z+17, r23	; 0x11
    9e0e:	82 8b       	std	Z+18, r24	; 0x12
    9e10:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    9e12:	a7 01       	movw	r20, r14
    9e14:	96 01       	movw	r18, r12
    9e16:	64 89       	ldd	r22, Z+20	; 0x14
    9e18:	75 89       	ldd	r23, Z+21	; 0x15
    9e1a:	86 89       	ldd	r24, Z+22	; 0x16
    9e1c:	97 89       	ldd	r25, Z+23	; 0x17
    9e1e:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    9e22:	ed 81       	ldd	r30, Y+5	; 0x05
    9e24:	fe 81       	ldd	r31, Y+6	; 0x06
    9e26:	64 8b       	std	Z+20, r22	; 0x14
    9e28:	75 8b       	std	Z+21, r23	; 0x15
    9e2a:	86 8b       	std	Z+22, r24	; 0x16
    9e2c:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    9e2e:	81 2f       	mov	r24, r17
    9e30:	90 e0       	ldi	r25, 0x00	; 0
    9e32:	b0 e0       	ldi	r27, 0x00	; 0
    9e34:	a0 e0       	ldi	r26, 0x00	; 0
    9e36:	86 a7       	std	Z+46, r24	; 0x2e
    9e38:	97 a7       	std	Z+47, r25	; 0x2f
    9e3a:	a0 ab       	std	Z+48, r26	; 0x30
    9e3c:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
    9e3e:	26 96       	adiw	r28, 0x06	; 6
    9e40:	0f b6       	in	r0, 0x3f	; 63
    9e42:	f8 94       	cli
    9e44:	de bf       	out	0x3e, r29	; 62
    9e46:	0f be       	out	0x3f, r0	; 63
    9e48:	cd bf       	out	0x3d, r28	; 61
    9e4a:	df 91       	pop	r29
    9e4c:	cf 91       	pop	r28
    9e4e:	1f 91       	pop	r17
    9e50:	0f 91       	pop	r16
    9e52:	ff 90       	pop	r15
    9e54:	ef 90       	pop	r14
    9e56:	df 90       	pop	r13
    9e58:	cf 90       	pop	r12
    9e5a:	bf 90       	pop	r11
    9e5c:	af 90       	pop	r10
    9e5e:	9f 90       	pop	r9
    9e60:	8f 90       	pop	r8
    9e62:	7f 90       	pop	r7
    9e64:	6f 90       	pop	r6
    9e66:	5f 90       	pop	r5
    9e68:	4f 90       	pop	r4
    9e6a:	3f 90       	pop	r3
    9e6c:	2f 90       	pop	r2
    9e6e:	08 95       	ret

00009e70 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    9e70:	fb 01       	movw	r30, r22
    9e72:	9c 01       	movw	r18, r24
    9e74:	28 5f       	subi	r18, 0xF8	; 248
    9e76:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    9e78:	dc 01       	movw	r26, r24
    9e7a:	5d 91       	ld	r21, X+
    9e7c:	cd 01       	movw	r24, r26
    9e7e:	41 91       	ld	r20, Z+
    9e80:	54 13       	cpse	r21, r20
    9e82:	05 c0       	rjmp	.+10     	; 0x9e8e <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    9e84:	a2 17       	cp	r26, r18
    9e86:	b3 07       	cpc	r27, r19
    9e88:	b9 f7       	brne	.-18     	; 0x9e78 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    9e8a:	81 e0       	ldi	r24, 0x01	; 1
    9e8c:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    9e8e:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    9e90:	08 95       	ret

00009e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    9e92:	80 33       	cpi	r24, 0x30	; 48
    9e94:	9c f0       	brlt	.+38     	; 0x9ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    9e96:	8a 33       	cpi	r24, 0x3A	; 58
    9e98:	24 f0       	brlt	.+8      	; 0x9ea2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    9e9a:	8f 35       	cpi	r24, 0x5F	; 95
    9e9c:	24 f0       	brlt	.+8      	; 0x9ea6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    9e9e:	8b 37       	cpi	r24, 0x7B	; 123
    9ea0:	24 f4       	brge	.+8      	; 0x9eaa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    9ea2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    9ea4:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    9ea6:	81 34       	cpi	r24, 0x41	; 65
    9ea8:	4c f0       	brlt	.+18     	; 0x9ebc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    9eaa:	8b 35       	cpi	r24, 0x5B	; 91
    9eac:	d4 f3       	brlt	.-12     	; 0x9ea2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    9eae:	93 ed       	ldi	r25, 0xD3	; 211
    9eb0:	98 0f       	add	r25, r24
    9eb2:	81 e0       	ldi	r24, 0x01	; 1
    9eb4:	92 30       	cpi	r25, 0x02	; 2
    9eb6:	b0 f3       	brcs	.-20     	; 0x9ea4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    9eb8:	80 e0       	ldi	r24, 0x00	; 0
    9eba:	08 95       	ret
    9ebc:	8b 32       	cpi	r24, 0x2B	; 43
    9ebe:	b9 f7       	brne	.-18     	; 0x9eae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    9ec0:	f0 cf       	rjmp	.-32     	; 0x9ea2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00009ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    9ec2:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    9ec4:	80 85       	ldd	r24, Z+8	; 0x08
    9ec6:	81 11       	cpse	r24, r1
    9ec8:	0a c0       	rjmp	.+20     	; 0x9ede <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    9eca:	a2 81       	ldd	r26, Z+2	; 0x02
    9ecc:	b3 81       	ldd	r27, Z+3	; 0x03
    9ece:	cd 01       	movw	r24, r26
    9ed0:	01 96       	adiw	r24, 0x01	; 1
    9ed2:	93 83       	std	Z+3, r25	; 0x03
    9ed4:	82 83       	std	Z+2, r24	; 0x02
    9ed6:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    9ed8:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    9eda:	81 e0       	ldi	r24, 0x01	; 1
    9edc:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    9ede:	87 81       	ldd	r24, Z+7	; 0x07
    9ee0:	08 95       	ret

00009ee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    9ee2:	df 92       	push	r13
    9ee4:	ef 92       	push	r14
    9ee6:	ff 92       	push	r15
    9ee8:	0f 93       	push	r16
    9eea:	1f 93       	push	r17
    9eec:	cf 93       	push	r28
    9eee:	df 93       	push	r29
    9ef0:	ec 01       	movw	r28, r24
    9ef2:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    9ef4:	0c 81       	ldd	r16, Y+4	; 0x04
    9ef6:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    9ef8:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9efc:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9efe:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    9f00:	ce 01       	movw	r24, r28
    9f02:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f06:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    9f08:	d8 16       	cp	r13, r24
    9f0a:	89 f1       	breq	.+98     	; 0x9f6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    9f0c:	81 11       	cpse	r24, r1
    9f0e:	0a c0       	rjmp	.+20     	; 0x9f24 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    9f10:	81 e0       	ldi	r24, 0x01	; 1
    9f12:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    9f14:	df 91       	pop	r29
    9f16:	cf 91       	pop	r28
    9f18:	1f 91       	pop	r17
    9f1a:	0f 91       	pop	r16
    9f1c:	ff 90       	pop	r15
    9f1e:	ef 90       	pop	r14
    9f20:	df 90       	pop	r13
    9f22:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    9f24:	8c 35       	cpi	r24, 0x5C	; 92
    9f26:	d1 f4       	brne	.+52     	; 0x9f5c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    9f28:	ce 01       	movw	r24, r28
    9f2a:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    9f2e:	88 23       	and	r24, r24
    9f30:	79 f3       	breq	.-34     	; 0x9f10 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    9f32:	85 37       	cpi	r24, 0x75	; 117
    9f34:	19 f4       	brne	.+6      	; 0x9f3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    9f36:	84 e0       	ldi	r24, 0x04	; 4
    9f38:	90 e0       	ldi	r25, 0x00	; 0
    9f3a:	ec cf       	rjmp	.-40     	; 0x9f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    9f3c:	e8 ef       	ldi	r30, 0xF8	; 248
    9f3e:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    9f40:	90 81       	ld	r25, Z
    9f42:	99 23       	and	r25, r25
    9f44:	51 f0       	breq	.+20     	; 0x9f5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    9f46:	89 13       	cpse	r24, r25
    9f48:	06 c0       	rjmp	.+12     	; 0x9f56 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    9f4a:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    9f4c:	81 11       	cpse	r24, r1
    9f4e:	05 c0       	rjmp	.+10     	; 0x9f5a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    9f50:	82 e0       	ldi	r24, 0x02	; 2
    9f52:	90 e0       	ldi	r25, 0x00	; 0
    9f54:	df cf       	rjmp	.-66     	; 0x9f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    9f56:	32 96       	adiw	r30, 0x02	; 2
    9f58:	f3 cf       	rjmp	.-26     	; 0x9f40 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f5a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    9f5c:	ec 81       	ldd	r30, Y+4	; 0x04
    9f5e:	fd 81       	ldd	r31, Y+5	; 0x05
    9f60:	9f 01       	movw	r18, r30
    9f62:	2f 5f       	subi	r18, 0xFF	; 255
    9f64:	3f 4f       	sbci	r19, 0xFF	; 255
    9f66:	3d 83       	std	Y+5, r19	; 0x05
    9f68:	2c 83       	std	Y+4, r18	; 0x04
    9f6a:	80 83       	st	Z, r24
    9f6c:	c9 cf       	rjmp	.-110    	; 0x9f00 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    9f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    9f70:	fd 81       	ldd	r31, Y+5	; 0x05
    9f72:	cf 01       	movw	r24, r30
    9f74:	01 96       	adiw	r24, 0x01	; 1
    9f76:	9d 83       	std	Y+5, r25	; 0x05
    9f78:	8c 83       	std	Y+4, r24	; 0x04
    9f7a:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    9f7c:	f7 01       	movw	r30, r14
    9f7e:	11 83       	std	Z+1, r17	; 0x01
    9f80:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    9f82:	83 e0       	ldi	r24, 0x03	; 3
    9f84:	90 e0       	ldi	r25, 0x00	; 0
    9f86:	01 2b       	or	r16, r17
    9f88:	29 f2       	breq	.-118    	; 0x9f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    9f8a:	90 e0       	ldi	r25, 0x00	; 0
    9f8c:	80 e0       	ldi	r24, 0x00	; 0
    9f8e:	c2 cf       	rjmp	.-124    	; 0x9f14 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00009f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    9f90:	1f 93       	push	r17
    9f92:	cf 93       	push	r28
    9f94:	df 93       	push	r29
    9f96:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    9f98:	ce 01       	movw	r24, r28
    9f9a:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9f9e:	8b 30       	cpi	r24, 0x0B	; 11
    9fa0:	3c f4       	brge	.+14     	; 0x9fb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    9fa2:	89 30       	cpi	r24, 0x09	; 9
    9fa4:	5c f4       	brge	.+22     	; 0x9fbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    9fa6:	88 23       	and	r24, r24
    9fa8:	e9 f0       	breq	.+58     	; 0x9fe4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    9faa:	90 e0       	ldi	r25, 0x00	; 0
    9fac:	80 e0       	ldi	r24, 0x00	; 0
    9fae:	1c c0       	rjmp	.+56     	; 0x9fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    9fb0:	80 32       	cpi	r24, 0x20	; 32
    9fb2:	21 f0       	breq	.+8      	; 0x9fbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    9fb4:	8f 32       	cpi	r24, 0x2F	; 47
    9fb6:	21 f0       	breq	.+8      	; 0x9fc0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    9fb8:	8d 30       	cpi	r24, 0x0D	; 13
    9fba:	b9 f7       	brne	.-18     	; 0x9faa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9fbc:	18 86       	std	Y+8, r1	; 0x08
    9fbe:	ec cf       	rjmp	.-40     	; 0x9f98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    9fc0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    9fc2:	ce 01       	movw	r24, r28
    9fc4:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9fc8:	8a 32       	cpi	r24, 0x2A	; 42
    9fca:	29 f0       	breq	.+10     	; 0x9fd6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    9fcc:	8f 32       	cpi	r24, 0x2F	; 47
    9fce:	d1 f0       	breq	.+52     	; 0xa004 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    9fd0:	82 e0       	ldi	r24, 0x02	; 2
    9fd2:	90 e0       	ldi	r25, 0x00	; 0
    9fd4:	09 c0       	rjmp	.+18     	; 0x9fe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9fd6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    9fd8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    9fda:	ce 01       	movw	r24, r28
    9fdc:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    9fe0:	81 11       	cpse	r24, r1
    9fe2:	06 c0       	rjmp	.+12     	; 0x9ff0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    9fe4:	81 e0       	ldi	r24, 0x01	; 1
    9fe6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    9fe8:	df 91       	pop	r29
    9fea:	cf 91       	pop	r28
    9fec:	1f 91       	pop	r17
    9fee:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    9ff0:	8f 32       	cpi	r24, 0x2F	; 47
    9ff2:	11 f4       	brne	.+4      	; 0x9ff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    9ff4:	11 11       	cpse	r17, r1
    9ff6:	e2 cf       	rjmp	.-60     	; 0x9fbc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    9ff8:	11 e0       	ldi	r17, 0x01	; 1
    9ffa:	8a 32       	cpi	r24, 0x2A	; 42
    9ffc:	09 f0       	breq	.+2      	; 0xa000 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    9ffe:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    a000:	18 86       	std	Y+8, r1	; 0x08
    a002:	eb cf       	rjmp	.-42     	; 0x9fda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    a004:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    a006:	ce 01       	movw	r24, r28
    a008:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    a00c:	88 23       	and	r24, r24
    a00e:	51 f3       	breq	.-44     	; 0x9fe4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    a010:	8a 30       	cpi	r24, 0x0A	; 10
    a012:	c1 f7       	brne	.-16     	; 0xa004 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    a014:	c1 cf       	rjmp	.-126    	; 0x9f98 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

0000a016 <valid_true()>:
_Z10valid_truev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6237
}
////
uint8_t valid_true(void)
{
  return 1;
}
    a016:	81 e0       	ldi	r24, 0x01	; 1
    a018:	08 95       	ret

0000a01a <valid_ipv4_address_element_string()>:
_Z33valid_ipv4_address_element_stringv():
    a01a:	81 e0       	ldi	r24, 0x01	; 1
    a01c:	08 95       	ret

0000a01e <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_nastaveni_reload_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6106
   funkce pro restartovani zarizeni
*/
void button_nastaveni_reload_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  resetFunc();
    a01e:	f0 e0       	ldi	r31, 0x00	; 0
    a020:	e0 e0       	ldi	r30, 0x00	; 0
    a022:	19 94       	eijmp

0000a024 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:596





void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
    a024:	08 95       	ret

0000a026 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_check_mqtt_connection_onclickjjh():
    a026:	08 95       	ret

0000a028 <button_set_network_mac_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_network_mac_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5968
/*
 * funkce pro random mac adresy
 */
void button_set_network_mac_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] =  dvanact >> 1; device.mac[4] =  proud >> 1; device.mac[5] =  light_curr >> 1;
    a028:	e5 eb       	ldi	r30, 0xB5	; 181
    a02a:	fd e0       	ldi	r31, 0x0D	; 13
    a02c:	82 e0       	ldi	r24, 0x02	; 2
    a02e:	80 83       	st	Z, r24
    a030:	91 e0       	ldi	r25, 0x01	; 1
    a032:	91 83       	std	Z+1, r25	; 0x01
    a034:	82 83       	std	Z+2, r24	; 0x02
    a036:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <dvanact>
    a03a:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <dvanact+0x1>
    a03e:	96 95       	lsr	r25
    a040:	87 95       	ror	r24
    a042:	83 83       	std	Z+3, r24	; 0x03
    a044:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <proud>
    a048:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <proud+0x1>
    a04c:	96 95       	lsr	r25
    a04e:	87 95       	ror	r24
    a050:	84 83       	std	Z+4, r24	; 0x04
    a052:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <light_curr>
    a056:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <light_curr+0x1>
    a05a:	96 95       	lsr	r25
    a05c:	87 95       	ror	r24
    a05e:	85 83       	std	Z+5, r24	; 0x05
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5969
}
    a060:	08 95       	ret

0000a062 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z62button_set_brightness_auto_shutdown_select_time_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5751
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    a062:	41 11       	cpse	r20, r1
    a064:	07 c0       	rjmp	.+14     	; 0xa074 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x12>
    a066:	81 e0       	ldi	r24, 0x01	; 1
    a068:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a06c:	99 23       	and	r25, r25
    a06e:	49 f0       	breq	.+18     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5759
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    a070:	80 e0       	ldi	r24, 0x00	; 0
    a072:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5753
uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    a074:	41 30       	cpi	r20, 0x01	; 1
    a076:	31 f4       	brne	.+12     	; 0xa084 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x22>
    a078:	81 e0       	ldi	r24, 0x01	; 1
    a07a:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a07e:	9e 31       	cpi	r25, 0x1E	; 30
    a080:	b9 f7       	brne	.-18     	; 0xa070 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5764
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    ret = 1;
  return ret;
}
    a082:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    a084:	42 30       	cpi	r20, 0x02	; 2
    a086:	31 f4       	brne	.+12     	; 0xa094 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    a088:	81 e0       	ldi	r24, 0x01	; 1
    a08a:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a08e:	9c 33       	cpi	r25, 0x3C	; 60
    a090:	79 f7       	brne	.-34     	; 0xa070 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    a092:	f7 cf       	rjmp	.-18     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    a094:	43 30       	cpi	r20, 0x03	; 3
    a096:	31 f4       	brne	.+12     	; 0xa0a4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x42>
    a098:	81 e0       	ldi	r24, 0x01	; 1
    a09a:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a09e:	98 37       	cpi	r25, 0x78	; 120
    a0a0:	39 f7       	brne	.-50     	; 0xa070 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    a0a2:	ef cf       	rjmp	.-34     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5759
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    a0a4:	44 30       	cpi	r20, 0x04	; 4
    a0a6:	31 f4       	brne	.+12     	; 0xa0b4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x52>
    a0a8:	81 e0       	ldi	r24, 0x01	; 1
    a0aa:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a0ae:	94 3b       	cpi	r25, 0xB4	; 180
    a0b0:	f9 f6       	brne	.-66     	; 0xa070 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    a0b2:	e7 cf       	rjmp	.-50     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5750
  }
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    a0b4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    a0b6:	45 30       	cpi	r20, 0x05	; 5
    a0b8:	21 f7       	brne	.-56     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    a0ba:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a0be:	9a 3f       	cpi	r25, 0xFA	; 250
    a0c0:	01 f7       	brne	.-64     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5760
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
    a0c2:	81 e0       	ldi	r24, 0x01	; 1
    a0c4:	de cf       	rjmp	.-68     	; 0xa082 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>

0000a0c6 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5679
}

uint8_t button_set_brightness_auto_shutdown_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    a0c6:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5682
    ret = 1;
  return ret;
}
    a0ca:	86 fb       	bst	r24, 6
    a0cc:	88 27       	eor	r24, r24
    a0ce:	80 f9       	bld	r24, 0
    a0d0:	08 95       	ret

0000a0d2 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_brightness_manual_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5592
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    a0d2:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a0d6:	80 95       	com	r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
{
  uint8_t ret = 0;
  if (switch_brightness_automode_get_status_fnt(0, 0, 0) == 0)
    ret = 1;
  return ret;
}
    a0d8:	88 1f       	adc	r24, r24
    a0da:	88 27       	eor	r24, r24
    a0dc:	88 1f       	adc	r24, r24
    a0de:	08 95       	ret

0000a0e0 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5632
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a0e0:	cf 93       	push	r28
    a0e2:	df 93       	push	r29
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a0e4:	cd e5       	ldi	r28, 0x5D	; 93
    a0e6:	d9 e0       	ldi	r29, 0x09	; 9
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5633
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
    a0e8:	60 91 23 0b 	lds	r22, 0x0B23	; 0x800b23 <brigthness_display_values>
    a0ec:	70 e0       	ldi	r23, 0x00	; 0
    a0ee:	90 e0       	ldi	r25, 0x00	; 0
    a0f0:	80 e0       	ldi	r24, 0x00	; 0
    a0f2:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    a0f6:	68 83       	st	Y, r22
    a0f8:	79 83       	std	Y+1, r23	; 0x01
    a0fa:	8a 83       	std	Y+2, r24	; 0x02
    a0fc:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    a0fe:	80 e0       	ldi	r24, 0x00	; 0
    a100:	90 e0       	ldi	r25, 0x00	; 0
    a102:	a0 ea       	ldi	r26, 0xA0	; 160
    a104:	b0 e4       	ldi	r27, 0x40	; 64
    a106:	88 87       	std	Y+8, r24	; 0x08
    a108:	99 87       	std	Y+9, r25	; 0x09
    a10a:	aa 87       	std	Y+10, r26	; 0x0a
    a10c:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    a10e:	40 e0       	ldi	r20, 0x00	; 0
    a110:	50 e0       	ldi	r21, 0x00	; 0
    a112:	68 ec       	ldi	r22, 0xC8	; 200
    a114:	72 e4       	ldi	r23, 0x42	; 66
    a116:	4c 83       	std	Y+4, r20	; 0x04
    a118:	5d 83       	std	Y+5, r21	; 0x05
    a11a:	6e 83       	std	Y+6, r22	; 0x06
    a11c:	7f 83       	std	Y+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    a11e:	8e 87       	std	Y+14, r24	; 0x0e
    a120:	9f 87       	std	Y+15, r25	; 0x0f
    a122:	a8 8b       	std	Y+16, r26	; 0x10
    a124:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    a126:	81 e0       	ldi	r24, 0x01	; 1
    a128:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    a12a:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    a12c:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    a12e:	87 e8       	ldi	r24, 0x87	; 135
    a130:	91 e7       	ldi	r25, 0x71	; 113
    a132:	9c 8b       	std	Y+20, r25	; 0x14
    a134:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5634
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}
    a136:	df 91       	pop	r29
    a138:	cf 91       	pop	r28
    a13a:	08 95       	ret

0000a13c <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5592
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    a13c:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5594
  return ret;
}
    a140:	88 1f       	adc	r24, r24
    a142:	88 27       	eor	r24, r24
    a144:	88 1f       	adc	r24, r24
    a146:	08 95       	ret

0000a148 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4943
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    a148:	81 e0       	ldi	r24, 0x01	; 1
    a14a:	90 91 54 09 	lds	r25, 0x0954	; 0x800954 <default_show_temp>
    a14e:	94 13       	cpse	r25, r20
    a150:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4947
    ret = 1;

  return ret;
}
    a152:	08 95       	ret

0000a154 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4929
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    a154:	00 97       	sbiw	r24, 0x00	; 0
    a156:	31 f4       	brne	.+12     	; 0xa164 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
    return use_tds + use_rtds;
    a158:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <use_tds>
    a15c:	90 91 2d 0c 	lds	r25, 0x0C2D	; 0x800c2d <use_rtds>
    a160:	89 0f       	add	r24, r25
    a162:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    a164:	01 97       	sbiw	r24, 0x01	; 1
    a166:	09 f0       	breq	.+2      	; 0xa16a <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    a168:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    a16a:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
}
    a16c:	08 95       	ret

0000a16e <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4681
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a16e:	ea e5       	ldi	r30, 0x5A	; 90
    a170:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4682
  uint8_t active = 0;
    a172:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4684
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    a174:	91 85       	ldd	r25, Z+9	; 0x09
    a176:	91 30       	cpi	r25, 0x01	; 1
    a178:	09 f4       	brne	.+2      	; 0xa17c <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    a17a:	8f 5f       	subi	r24, 0xFF	; 255
    a17c:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    a17e:	9c e0       	ldi	r25, 0x0C	; 12
    a180:	ec 39       	cpi	r30, 0x9C	; 156
    a182:	f9 07       	cpc	r31, r25
    a184:	b9 f7       	brne	.-18     	; 0xa174 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4686
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    a186:	08 95       	ret

0000a188 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4598
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    a188:	8a e0       	ldi	r24, 0x0A	; 10
    a18a:	08 95       	ret

0000a18c <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4415
  }
}
///
void display_function_vertical_slider_dec(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    a18c:	fc 01       	movw	r30, r24
    a18e:	e5 5b       	subi	r30, 0xB5	; 181
    a190:	f6 4f       	sbci	r31, 0xF6	; 246
    a192:	90 81       	ld	r25, Z
    a194:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <menu_slider_data_min>
    a198:	89 17       	cp	r24, r25
    a19a:	28 f4       	brcc	.+10     	; 0xa1a6 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4417
  {
    menu_slider_data_current[args1]--;
    a19c:	91 50       	subi	r25, 0x01	; 1
    a19e:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
    display_update_slider = 1;
    a1a0:	81 e0       	ldi	r24, 0x01	; 1
    a1a2:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
  }
}
    a1a6:	08 95       	ret

0000a1a8 <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    a1a8:	fc 01       	movw	r30, r24
    a1aa:	e5 5b       	subi	r30, 0xB5	; 181
    a1ac:	f6 4f       	sbci	r31, 0xF6	; 246
    a1ae:	90 81       	ld	r25, Z
    a1b0:	20 91 53 09 	lds	r18, 0x0953	; 0x800953 <menu_slider_data_max>
    a1b4:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <menu_slider_data_max_element>
    a1b8:	28 1b       	sub	r18, r24
    a1ba:	33 0b       	sbc	r19, r19
    a1bc:	92 17       	cp	r25, r18
    a1be:	13 06       	cpc	r1, r19
    a1c0:	2c f4       	brge	.+10     	; 0xa1cc <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4408
  {
    menu_slider_data_current[args1]++;
    a1c2:	9f 5f       	subi	r25, 0xFF	; 255
    a1c4:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
    display_update_slider = 1;
    a1c6:	81 e0       	ldi	r24, 0x01	; 1
    a1c8:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
  }
}
    a1cc:	08 95       	ret

0000a1ce <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    a1ce:	83 30       	cpi	r24, 0x03	; 3
    a1d0:	41 f4       	brne	.+16     	; 0xa1e2 <a2d_complete(unsigned char, unsigned int)+0x14>
    a1d2:	70 93 1b 0b 	sts	0x0B1B, r23	; 0x800b1b <proud+0x1>
    a1d6:	60 93 1a 0b 	sts	0x0B1A, r22	; 0x800b1a <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    a1da:	81 e0       	ldi	r24, 0x01	; 1
    a1dc:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123
}
    a1e0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3118
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    a1e2:	86 30       	cpi	r24, 0x06	; 6
    a1e4:	29 f4       	brne	.+10     	; 0xa1f0 <a2d_complete(unsigned char, unsigned int)+0x22>
    a1e6:	70 93 21 0b 	sts	0x0B21, r23	; 0x800b21 <tritri+0x1>
    a1ea:	60 93 20 0b 	sts	0x0B20, r22	; 0x800b20 <tritri>
    a1ee:	f5 cf       	rjmp	.-22     	; 0xa1da <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
  if (channel == A_PETV) petnula = data;
    a1f0:	85 30       	cpi	r24, 0x05	; 5
    a1f2:	29 f4       	brne	.+10     	; 0xa1fe <a2d_complete(unsigned char, unsigned int)+0x30>
    a1f4:	70 93 1f 0b 	sts	0x0B1F, r23	; 0x800b1f <petnula+0x1>
    a1f8:	60 93 1e 0b 	sts	0x0B1E, r22	; 0x800b1e <petnula>
    a1fc:	ee cf       	rjmp	.-36     	; 0xa1da <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
  if (channel == A_DVANACTV) dvanact = data;
    a1fe:	84 30       	cpi	r24, 0x04	; 4
    a200:	29 f4       	brne	.+10     	; 0xa20c <a2d_complete(unsigned char, unsigned int)+0x3e>
    a202:	70 93 1d 0b 	sts	0x0B1D, r23	; 0x800b1d <dvanact+0x1>
    a206:	60 93 1c 0b 	sts	0x0B1C, r22	; 0x800b1c <dvanact>
    a20a:	e7 cf       	rjmp	.-50     	; 0xa1da <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3121
  if (channel == A_LIGHT) light_curr = data;
    a20c:	87 30       	cpi	r24, 0x07	; 7
    a20e:	29 f7       	brne	.-54     	; 0xa1da <a2d_complete(unsigned char, unsigned int)+0xc>
    a210:	70 93 40 0c 	sts	0x0C40, r23	; 0x800c40 <light_curr+0x1>
    a214:	60 93 3f 0c 	sts	0x0C3F, r22	; 0x800c3f <light_curr>
    a218:	e0 cf       	rjmp	.-64     	; 0xa1da <a2d_complete(unsigned char, unsigned int)+0xc>

0000a21a <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3134
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    a21a:	21 e0       	ldi	r18, 0x01	; 1
    a21c:	30 e0       	ldi	r19, 0x00	; 0
    a21e:	01 c0       	rjmp	.+2      	; 0xa222 <selftest_set_0(unsigned char)+0x8>
    a220:	22 0f       	add	r18, r18
    a222:	8a 95       	dec	r24
    a224:	ea f7       	brpl	.-6      	; 0xa220 <selftest_set_0(unsigned char)+0x6>
    a226:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
    a22a:	82 2b       	or	r24, r18
    a22c:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3135
}
    a230:	08 95       	ret

0000a232 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1708


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    a232:	08 95       	ret

0000a234 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>:
_Z27menu_redraw_change_variablejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1695
  return 0;
}

uint8_t menu_redraw_change_variable(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_dialog_variable_change == 1)
    a234:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <menu_dialog_variable_change>
    a238:	81 30       	cpi	r24, 0x01	; 1
    a23a:	19 f4       	brne	.+6      	; 0xa242 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
  {
    menu_dialog_variable_change = 0;
    a23c:	10 92 a5 08 	sts	0x08A5, r1	; 0x8008a5 <menu_dialog_variable_change>
    a240:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1700
    return 1;
  }
  return 0;
    a242:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1701
}
    a244:	08 95       	ret

0000a246 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>:
_Z31menu_redraw_change_default_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1685
}


uint8_t menu_redraw_change_default_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_redraw_default_ring == 1)
    a246:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <display_redraw_default_ring>
    a24a:	81 30       	cpi	r24, 0x01	; 1
    a24c:	19 f4       	brne	.+6      	; 0xa254 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
  {
    display_redraw_default_ring = 0;
    a24e:	10 92 55 09 	sts	0x0955, r1	; 0x800955 <display_redraw_default_ring>
    a252:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1690
    return 1;
  }
  return 0;
    a254:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1691
}
    a256:	08 95       	ret

0000a258 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>:
_Z18menu_redraw_sliderjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1674
}


uint8_t menu_redraw_slider(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_update_slider == 1)
    a258:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <display_update_slider>
    a25c:	81 30       	cpi	r24, 0x01	; 1
    a25e:	19 f4       	brne	.+6      	; 0xa266 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1676
  {
    display_update_slider = 0;
    a260:	10 92 4a 09 	sts	0x094A, r1	; 0x80094a <display_update_slider>
    a264:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1679
    return 1;
  }
  return 0;
    a266:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1680
}
    a268:	08 95       	ret

0000a26a <menu_redraw_date(unsigned int, unsigned int, unsigned char)>:
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    a26a:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <now>
    a26e:	90 e0       	ldi	r25, 0x00	; 0
    a270:	80 53       	subi	r24, 0x30	; 48
    a272:	98 4f       	sbci	r25, 0xF8	; 248
    a274:	30 91 11 12 	lds	r19, 0x1211	; 0x801211 <now+0x1>
    a278:	20 91 12 12 	lds	r18, 0x1212	; 0x801212 <now+0x2>
_Z16menu_redraw_datejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1660
}


uint8_t menu_redraw_date(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (now.year() != last_year || now.month() != last_month || now.day() != last_day || display_update_date == 1)
    a27c:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <last_year>
    a280:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <last_year+0x1>
    a284:	48 17       	cp	r20, r24
    a286:	59 07       	cpc	r21, r25
    a288:	61 f4       	brne	.+24     	; 0xa2a2 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a28a:	40 91 a2 08 	lds	r20, 0x08A2	; 0x8008a2 <last_month>
    a28e:	43 13       	cpse	r20, r19
    a290:	08 c0       	rjmp	.+16     	; 0xa2a2 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a292:	40 91 a1 08 	lds	r20, 0x08A1	; 0x8008a1 <last_day>
    a296:	42 13       	cpse	r20, r18
    a298:	04 c0       	rjmp	.+8      	; 0xa2a2 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a29a:	40 91 a0 08 	lds	r20, 0x08A0	; 0x8008a0 <display_update_date>
    a29e:	41 30       	cpi	r20, 0x01	; 1
    a2a0:	61 f4       	brne	.+24     	; 0xa2ba <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
  {
    display_update_date = 0;
    a2a2:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <display_update_date>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1663
    last_year = now.year();
    a2a6:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <last_year+0x1>
    a2aa:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <last_year>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1664
    last_month = now.month();
    a2ae:	30 93 a2 08 	sts	0x08A2, r19	; 0x8008a2 <last_month>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
    last_day = now.day();
    a2b2:	20 93 a1 08 	sts	0x08A1, r18	; 0x8008a1 <last_day>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
    return 1;
    a2b6:	81 e0       	ldi	r24, 0x01	; 1
    a2b8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  }
  return 0;
    a2ba:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
}
    a2bc:	08 95       	ret

0000a2be <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1649
  return 0;
}

uint8_t menu_redraw_update_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw10s == 1)
    a2be:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <menu_redraw10s>
    a2c2:	81 30       	cpi	r24, 0x01	; 1
    a2c4:	19 f4       	brne	.+6      	; 0xa2cc <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
  {
    menu_redraw10s = 0;
    a2c6:	10 92 46 0c 	sts	0x0C46, r1	; 0x800c46 <menu_redraw10s>
    a2ca:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1654
    return 1;
  }
  return 0;
    a2cc:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1655
}
    a2ce:	08 95       	ret

0000a2d0 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>:
_Z38menu_redraw_change_term_mode_cool_heatjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1639
}

uint8_t menu_redraw_change_term_mode_cool_heat(uint16_t args1, uint16_t args2, uint8_t args3)
{

  if (change_term_mode == 2)
    a2d0:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <change_term_mode>
    a2d4:	82 30       	cpi	r24, 0x02	; 2
    a2d6:	21 f4       	brne	.+8      	; 0xa2e0 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1641
  {
    change_term_mode = 0;
    a2d8:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1642
    return 1;
    a2dc:	81 e0       	ldi	r24, 0x01	; 1
    a2de:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1644
  }
  return 0;
    a2e0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1645
}
    a2e2:	08 95       	ret

0000a2e4 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1628



uint8_t menu_redraw_change_term_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (change_term_mode == 1)
    a2e4:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <change_term_mode>
    a2e8:	81 30       	cpi	r24, 0x01	; 1
    a2ea:	19 f4       	brne	.+6      	; 0xa2f2 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
  {
    change_term_mode = 0;
    a2ec:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <change_term_mode>
    a2f0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1633
    return 1;
  }
  return 0;
    a2f2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1634
}
    a2f4:	08 95       	ret

0000a2f6 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1605
  return 0;
}


uint8_t menu_redraw_time05s(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a2f6:	90 91 13 12 	lds	r25, 0x1213	; 0x801213 <now+0x3>
    a2fa:	80 91 14 12 	lds	r24, 0x1214	; 0x801214 <now+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1615
      return 1;
    }
    return 0;
  */

  if (last_time_hour != now.hour() || last_time_minute != now.minute())
    a2fe:	20 91 9f 08 	lds	r18, 0x089F	; 0x80089f <last_time_hour>
    a302:	29 13       	cpse	r18, r25
    a304:	04 c0       	rjmp	.+8      	; 0xa30e <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x18>
    a306:	20 91 9e 08 	lds	r18, 0x089E	; 0x80089e <last_time_minute>
    a30a:	28 17       	cp	r18, r24
    a30c:	31 f0       	breq	.+12     	; 0xa31a <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1617
  {
    last_time_hour = now.hour();
    a30e:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <last_time_hour>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1618
    last_time_minute = now.minute();
    a312:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <last_time_minute>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1619
    return 1;
    a316:	81 e0       	ldi	r24, 0x01	; 1
    a318:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1621
  }
  return 0;
    a31a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1622
}
    a31c:	08 95       	ret

0000a31e <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1564
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_set_string_keyboard_type = args1;
    a31e:	80 93 99 08 	sts	0x0899, r24	; 0x800899 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1565
}
    a322:	08 95       	ret

0000a324 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1554
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    a324:	80 91 99 08 	lds	r24, 0x0899	; 0x800899 <dialog_set_string_keyboard_type>
    a328:	83 30       	cpi	r24, 0x03	; 3
    a32a:	08 f0       	brcs	.+2      	; 0xa32e <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    a32c:	08 95       	ret
    a32e:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1560
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    a330:	08 95       	ret

0000a332 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1523
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a332:	0f 93       	push	r16
    a334:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1525
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    a336:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <dialog_set_string_keyboard_type>
    a33a:	91 11       	cpse	r25, r1
    a33c:	0c c0       	rjmp	.+24     	; 0xa356 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    a33e:	e8 2f       	mov	r30, r24
    a340:	f0 e0       	ldi	r31, 0x00	; 0
    a342:	ee 58       	subi	r30, 0x8E	; 142
    a344:	ff 47       	sbci	r31, 0x7F	; 127
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    a346:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1531
  line1[0] = znak;
    a348:	d9 01       	movw	r26, r18
    a34a:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1532
  line2[0] = 0;
    a34c:	f8 01       	movw	r30, r16
    a34e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1533
}
    a350:	1f 91       	pop	r17
    a352:	0f 91       	pop	r16
    a354:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    a356:	91 30       	cpi	r25, 0x01	; 1
    a358:	29 f4       	brne	.+10     	; 0xa364 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    a35a:	e8 2f       	mov	r30, r24
    a35c:	f0 e0       	ldi	r31, 0x00	; 0
    a35e:	e8 5a       	subi	r30, 0xA8	; 168
    a360:	ff 47       	sbci	r31, 0x7F	; 127
    a362:	f1 cf       	rjmp	.-30     	; 0xa346 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1529
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    a364:	92 30       	cpi	r25, 0x02	; 2
    a366:	81 f7       	brne	.-32     	; 0xa348 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    a368:	e8 2f       	mov	r30, r24
    a36a:	f0 e0       	ldi	r31, 0x00	; 0
    a36c:	e2 5c       	subi	r30, 0xC2	; 194
    a36e:	ff 47       	sbci	r31, 0x7F	; 127
    a370:	ea cf       	rjmp	.-44     	; 0xa346 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000a372 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a372:	0f 93       	push	r16
    a374:	1f 93       	push	r17
    a376:	f9 01       	movw	r30, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1516
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    a378:	8a 30       	cpi	r24, 0x0A	; 10
    a37a:	39 f4       	brne	.+14     	; 0xa38a <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a37c:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1517
  if (args1 == 11) line1[0] = ':';
    a37e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1518
  line2[0] = 0;
    a380:	f8 01       	movw	r30, r16
    a382:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1519
}
    a384:	1f 91       	pop	r17
    a386:	0f 91       	pop	r16
    a388:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1517
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    a38a:	8b 30       	cpi	r24, 0x0B	; 11
    a38c:	11 f0       	breq	.+4      	; 0xa392 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    a38e:	80 5d       	subi	r24, 0xD0	; 208
    a390:	f6 cf       	rjmp	.-20     	; 0xa37e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1517
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    a392:	8a e3       	ldi	r24, 0x3A	; 58
    a394:	f4 cf       	rjmp	.-24     	; 0xa37e <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

0000a396 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1494
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 12;
}
    a396:	8c e0       	ldi	r24, 0x0C	; 12
    a398:	08 95       	ret

0000a39a <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a39a:	cf 92       	push	r12
    a39c:	df 92       	push	r13
    a39e:	ef 92       	push	r14
    a3a0:	ff 92       	push	r15
    a3a2:	cf 93       	push	r28
    a3a4:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    a3a6:	25 e1       	ldi	r18, 0x15	; 21
    a3a8:	28 9f       	mul	r18, r24
    a3aa:	e0 01       	movw	r28, r0
    a3ac:	29 9f       	mul	r18, r25
    a3ae:	d0 0d       	add	r29, r0
    a3b0:	11 24       	eor	r1, r1
    a3b2:	c3 5a       	subi	r28, 0xA3	; 163
    a3b4:	d6 4f       	sbci	r29, 0xF6	; 246
    a3b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    a3b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    a3ba:	48 89       	ldd	r20, Y+16	; 0x10
    a3bc:	59 89       	ldd	r21, Y+17	; 0x11
    a3be:	68 81       	ld	r22, Y
    a3c0:	79 81       	ldd	r23, Y+1	; 0x01
    a3c2:	8a 81       	ldd	r24, Y+2	; 0x02
    a3c4:	9b 81       	ldd	r25, Y+3	; 0x03
    a3c6:	0e 94 f7 fb 	call	0x1f7ee	; 0x1f7ee <__addsf3>
    a3ca:	6b 01       	movw	r12, r22
    a3cc:	7c 01       	movw	r14, r24
    a3ce:	2c 81       	ldd	r18, Y+4	; 0x04
    a3d0:	3d 81       	ldd	r19, Y+5	; 0x05
    a3d2:	4e 81       	ldd	r20, Y+6	; 0x06
    a3d4:	5f 81       	ldd	r21, Y+7	; 0x07
    a3d6:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
    a3da:	18 16       	cp	r1, r24
    a3dc:	e4 f0       	brlt	.+56     	; 0xa416 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1347
  {
    menu_dialog_variable_change = 1;
    a3de:	81 e0       	ldi	r24, 0x01	; 1
    a3e0:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    a3e4:	c8 82       	st	Y, r12
    a3e6:	d9 82       	std	Y+1, r13	; 0x01
    a3e8:	ea 82       	std	Y+2, r14	; 0x02
    a3ea:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1349
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    a3ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    a3ee:	81 30       	cpi	r24, 0x01	; 1
    a3f0:	91 f4       	brne	.+36     	; 0xa416 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    a3f2:	c7 01       	movw	r24, r14
    a3f4:	b6 01       	movw	r22, r12
    a3f6:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
    a3fa:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a3fc:	8a 89       	ldd	r24, Y+18	; 0x12
    a3fe:	eb 89       	ldd	r30, Y+19	; 0x13
    a400:	fc 89       	ldd	r31, Y+20	; 0x14
    a402:	b7 01       	movw	r22, r14
    a404:	a6 01       	movw	r20, r12
    a406:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
    a408:	df 91       	pop	r29
    a40a:	cf 91       	pop	r28
    a40c:	ff 90       	pop	r15
    a40e:	ef 90       	pop	r14
    a410:	df 90       	pop	r13
    a412:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a414:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
    a416:	df 91       	pop	r29
    a418:	cf 91       	pop	r28
    a41a:	ff 90       	pop	r15
    a41c:	ef 90       	pop	r14
    a41e:	df 90       	pop	r13
    a420:	cf 90       	pop	r12
    a422:	08 95       	ret

0000a424 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a424:	cf 92       	push	r12
    a426:	df 92       	push	r13
    a428:	ef 92       	push	r14
    a42a:	ff 92       	push	r15
    a42c:	cf 93       	push	r28
    a42e:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    a430:	25 e1       	ldi	r18, 0x15	; 21
    a432:	28 9f       	mul	r18, r24
    a434:	e0 01       	movw	r28, r0
    a436:	29 9f       	mul	r18, r25
    a438:	d0 0d       	add	r29, r0
    a43a:	11 24       	eor	r1, r1
    a43c:	c3 5a       	subi	r28, 0xA3	; 163
    a43e:	d6 4f       	sbci	r29, 0xF6	; 246
    a440:	2e 85       	ldd	r18, Y+14	; 0x0e
    a442:	3f 85       	ldd	r19, Y+15	; 0x0f
    a444:	48 89       	ldd	r20, Y+16	; 0x10
    a446:	59 89       	ldd	r21, Y+17	; 0x11
    a448:	68 81       	ld	r22, Y
    a44a:	79 81       	ldd	r23, Y+1	; 0x01
    a44c:	8a 81       	ldd	r24, Y+2	; 0x02
    a44e:	9b 81       	ldd	r25, Y+3	; 0x03
    a450:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
    a454:	6b 01       	movw	r12, r22
    a456:	7c 01       	movw	r14, r24
    a458:	28 85       	ldd	r18, Y+8	; 0x08
    a45a:	39 85       	ldd	r19, Y+9	; 0x09
    a45c:	4a 85       	ldd	r20, Y+10	; 0x0a
    a45e:	5b 85       	ldd	r21, Y+11	; 0x0b
    a460:	0e 94 0b fd 	call	0x1fa16	; 0x1fa16 <__gesf2>
    a464:	87 fd       	sbrc	r24, 7
    a466:	1c c0       	rjmp	.+56     	; 0xa4a0 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1335
  {
    menu_dialog_variable_change = 1;
    a468:	81 e0       	ldi	r24, 0x01	; 1
    a46a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    a46e:	c8 82       	st	Y, r12
    a470:	d9 82       	std	Y+1, r13	; 0x01
    a472:	ea 82       	std	Y+2, r14	; 0x02
    a474:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1337
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    a476:	8c 85       	ldd	r24, Y+12	; 0x0c
    a478:	81 30       	cpi	r24, 0x01	; 1
    a47a:	91 f4       	brne	.+36     	; 0xa4a0 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
    a47c:	c7 01       	movw	r24, r14
    a47e:	b6 01       	movw	r22, r12
    a480:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
    a484:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a486:	8a 89       	ldd	r24, Y+18	; 0x12
    a488:	eb 89       	ldd	r30, Y+19	; 0x13
    a48a:	fc 89       	ldd	r31, Y+20	; 0x14
    a48c:	b7 01       	movw	r22, r14
    a48e:	a6 01       	movw	r20, r12
    a490:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
    }
  }
}
    a492:	df 91       	pop	r29
    a494:	cf 91       	pop	r28
    a496:	ff 90       	pop	r15
    a498:	ef 90       	pop	r14
    a49a:	df 90       	pop	r13
    a49c:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a49e:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
    }
  }
}
    a4a0:	df 91       	pop	r29
    a4a2:	cf 91       	pop	r28
    a4a4:	ff 90       	pop	r15
    a4a6:	ef 90       	pop	r14
    a4a8:	df 90       	pop	r13
    a4aa:	cf 90       	pop	r12
    a4ac:	08 95       	ret

0000a4ae <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1300
}


/// TODO spravne predat id ringu
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a4ae:	4f 92       	push	r4
    a4b0:	5f 92       	push	r5
    a4b2:	6f 92       	push	r6
    a4b4:	7f 92       	push	r7
    a4b6:	8f 92       	push	r8
    a4b8:	9f 92       	push	r9
    a4ba:	af 92       	push	r10
    a4bc:	bf 92       	push	r11
    a4be:	cf 92       	push	r12
    a4c0:	df 92       	push	r13
    a4c2:	ef 92       	push	r14
    a4c4:	ff 92       	push	r15
    a4c6:	0f 93       	push	r16
    a4c8:	1f 93       	push	r17
    a4ca:	cf 93       	push	r28
    a4cc:	8b 01       	movw	r16, r22
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    a4ce:	9b 01       	movw	r18, r22
    a4d0:	33 27       	eor	r19, r19
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a4d2:	ed e5       	ldi	r30, 0x5D	; 93
    a4d4:	f9 e0       	ldi	r31, 0x09	; 9
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
    a4d6:	c9 01       	movw	r24, r18
    a4d8:	88 0f       	add	r24, r24
    a4da:	99 1f       	adc	r25, r25
    a4dc:	88 0f       	add	r24, r24
    a4de:	99 1f       	adc	r25, r25
    a4e0:	dc 01       	movw	r26, r24
    a4e2:	ac 5a       	subi	r26, 0xAC	; 172
    a4e4:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    a4e6:	4d 91       	ld	r20, X+
    a4e8:	5d 91       	ld	r21, X+
    a4ea:	6d 91       	ld	r22, X+
    a4ec:	7c 91       	ld	r23, X
    a4ee:	40 83       	st	Z, r20
    a4f0:	51 83       	std	Z+1, r21	; 0x01
    a4f2:	62 83       	std	Z+2, r22	; 0x02
    a4f4:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].variable_min = min;
    a4f6:	41 2c       	mov	r4, r1
    a4f8:	51 2c       	mov	r5, r1
    a4fa:	50 e2       	ldi	r21, 0x20	; 32
    a4fc:	65 2e       	mov	r6, r21
    a4fe:	51 ec       	ldi	r21, 0xC1	; 193
    a500:	75 2e       	mov	r7, r21
    a502:	40 86       	std	Z+8, r4	; 0x08
    a504:	51 86       	std	Z+9, r5	; 0x09
    a506:	62 86       	std	Z+10, r6	; 0x0a
    a508:	73 86       	std	Z+11, r7	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    a50a:	c1 2c       	mov	r12, r1
    a50c:	d1 2c       	mov	r13, r1
    a50e:	60 e2       	ldi	r22, 0x20	; 32
    a510:	e6 2e       	mov	r14, r22
    a512:	61 e4       	ldi	r22, 0x41	; 65
    a514:	f6 2e       	mov	r15, r22
    a516:	c4 82       	std	Z+4, r12	; 0x04
    a518:	d5 82       	std	Z+5, r13	; 0x05
    a51a:	e6 82       	std	Z+6, r14	; 0x06
    a51c:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    a51e:	7d ec       	ldi	r23, 0xCD	; 205
    a520:	87 2e       	mov	r8, r23
    a522:	7c ec       	ldi	r23, 0xCC	; 204
    a524:	97 2e       	mov	r9, r23
    a526:	a9 2c       	mov	r10, r9
    a528:	7d e3       	ldi	r23, 0x3D	; 61
    a52a:	b7 2e       	mov	r11, r23
    a52c:	86 86       	std	Z+14, r8	; 0x0e
    a52e:	97 86       	std	Z+15, r9	; 0x0f
    a530:	a0 8a       	std	Z+16, r10	; 0x10
    a532:	b1 8a       	std	Z+17, r11	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    a534:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    a536:	02 8b       	std	Z+18, r16	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    a538:	c1 e0       	ldi	r28, 0x01	; 1
    a53a:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    a53c:	4f e4       	ldi	r20, 0x4F	; 79
    a53e:	5d e6       	ldi	r21, 0x6D	; 109
    a540:	54 8b       	std	Z+20, r21	; 0x14
    a542:	43 8b       	std	Z+19, r20	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    a544:	dc 01       	movw	r26, r24
    a546:	a8 59       	subi	r26, 0x98	; 152
    a548:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a54a:	4d 91       	ld	r20, X+
    a54c:	5d 91       	ld	r21, X+
    a54e:	6d 91       	ld	r22, X+
    a550:	7c 91       	ld	r23, X
    a552:	45 8b       	std	Z+21, r20	; 0x15
    a554:	56 8b       	std	Z+22, r21	; 0x16
    a556:	67 8b       	std	Z+23, r22	; 0x17
    a558:	70 8f       	std	Z+24, r23	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].variable_min = min;
    a55a:	45 8e       	std	Z+29, r4	; 0x1d
    a55c:	56 8e       	std	Z+30, r5	; 0x1e
    a55e:	67 8e       	std	Z+31, r6	; 0x1f
    a560:	70 a2       	std	Z+32, r7	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    a562:	c1 8e       	std	Z+25, r12	; 0x19
    a564:	d2 8e       	std	Z+26, r13	; 0x1a
    a566:	e3 8e       	std	Z+27, r14	; 0x1b
    a568:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    a56a:	83 a2       	std	Z+35, r8	; 0x23
    a56c:	94 a2       	std	Z+36, r9	; 0x24
    a56e:	a5 a2       	std	Z+37, r10	; 0x25
    a570:	b6 a2       	std	Z+38, r11	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    a572:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    a574:	07 a3       	std	Z+39, r16	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    a576:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    a578:	48 e3       	ldi	r20, 0x38	; 56
    a57a:	5d e6       	ldi	r21, 0x6D	; 109
    a57c:	51 a7       	std	Z+41, r21	; 0x29
    a57e:	40 a7       	std	Z+40, r20	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    a580:	84 58       	subi	r24, 0x84	; 132
    a582:	95 4f       	sbci	r25, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a584:	dc 01       	movw	r26, r24
    a586:	4d 91       	ld	r20, X+
    a588:	5d 91       	ld	r21, X+
    a58a:	6d 91       	ld	r22, X+
    a58c:	7c 91       	ld	r23, X
    a58e:	42 a7       	std	Z+42, r20	; 0x2a
    a590:	53 a7       	std	Z+43, r21	; 0x2b
    a592:	64 a7       	std	Z+44, r22	; 0x2c
    a594:	75 a7       	std	Z+45, r23	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].variable_min = min;
    a596:	42 aa       	std	Z+50, r4	; 0x32
    a598:	53 aa       	std	Z+51, r5	; 0x33
    a59a:	64 aa       	std	Z+52, r6	; 0x34
    a59c:	75 aa       	std	Z+53, r7	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    a59e:	c6 a6       	std	Z+46, r12	; 0x2e
    a5a0:	d7 a6       	std	Z+47, r13	; 0x2f
    a5a2:	e0 aa       	std	Z+48, r14	; 0x30
    a5a4:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    a5a6:	80 ae       	std	Z+56, r8	; 0x38
    a5a8:	91 ae       	std	Z+57, r9	; 0x39
    a5aa:	a2 ae       	std	Z+58, r10	; 0x3a
    a5ac:	b3 ae       	std	Z+59, r11	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    a5ae:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    a5b0:	04 af       	std	Z+60, r16	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    a5b2:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    a5b4:	81 e2       	ldi	r24, 0x21	; 33
    a5b6:	9d e6       	ldi	r25, 0x6D	; 109
    a5b8:	96 af       	std	Z+62, r25	; 0x3e
    a5ba:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    a5bc:	20 57       	subi	r18, 0x70	; 112
    a5be:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1304
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    a5c0:	f9 01       	movw	r30, r18
    a5c2:	60 81       	ld	r22, Z
    a5c4:	70 e0       	ldi	r23, 0x00	; 0
    a5c6:	90 e0       	ldi	r25, 0x00	; 0
    a5c8:	80 e0       	ldi	r24, 0x00	; 0
    a5ca:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    a5ce:	60 93 9c 09 	sts	0x099C, r22	; 0x80099c <menu_dialog_variable+0x3f>
    a5d2:	70 93 9d 09 	sts	0x099D, r23	; 0x80099d <menu_dialog_variable+0x40>
    a5d6:	80 93 9e 09 	sts	0x099E, r24	; 0x80099e <menu_dialog_variable+0x41>
    a5da:	90 93 9f 09 	sts	0x099F, r25	; 0x80099f <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    a5de:	c0 92 a4 09 	sts	0x09A4, r12	; 0x8009a4 <menu_dialog_variable+0x47>
    a5e2:	d0 92 a5 09 	sts	0x09A5, r13	; 0x8009a5 <menu_dialog_variable+0x48>
    a5e6:	e0 92 a6 09 	sts	0x09A6, r14	; 0x8009a6 <menu_dialog_variable+0x49>
    a5ea:	f0 92 a7 09 	sts	0x09A7, r15	; 0x8009a7 <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    a5ee:	80 e0       	ldi	r24, 0x00	; 0
    a5f0:	90 e0       	ldi	r25, 0x00	; 0
    a5f2:	ae e7       	ldi	r26, 0x7E	; 126
    a5f4:	b3 e4       	ldi	r27, 0x43	; 67
    a5f6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <menu_dialog_variable+0x43>
    a5fa:	90 93 a1 09 	sts	0x09A1, r25	; 0x8009a1 <menu_dialog_variable+0x44>
    a5fe:	a0 93 a2 09 	sts	0x09A2, r26	; 0x8009a2 <menu_dialog_variable+0x45>
    a602:	b0 93 a3 09 	sts	0x09A3, r27	; 0x8009a3 <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    a606:	80 e0       	ldi	r24, 0x00	; 0
    a608:	90 e0       	ldi	r25, 0x00	; 0
    a60a:	a0 e0       	ldi	r26, 0x00	; 0
    a60c:	b0 e4       	ldi	r27, 0x40	; 64
    a60e:	80 93 aa 09 	sts	0x09AA, r24	; 0x8009aa <menu_dialog_variable+0x4d>
    a612:	90 93 ab 09 	sts	0x09AB, r25	; 0x8009ab <menu_dialog_variable+0x4e>
    a616:	a0 93 ac 09 	sts	0x09AC, r26	; 0x8009ac <menu_dialog_variable+0x4f>
    a61a:	b0 93 ad 09 	sts	0x09AD, r27	; 0x8009ad <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    a61e:	c0 93 a9 09 	sts	0x09A9, r28	; 0x8009a9 <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    a622:	00 93 ae 09 	sts	0x09AE, r16	; 0x8009ae <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    a626:	c0 93 a8 09 	sts	0x09A8, r28	; 0x8009a8 <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    a62a:	82 e1       	ldi	r24, 0x12	; 18
    a62c:	9d e6       	ldi	r25, 0x6D	; 109
    a62e:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <menu_dialog_variable+0x53>
    a632:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1305
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    a636:	cf 91       	pop	r28
    a638:	1f 91       	pop	r17
    a63a:	0f 91       	pop	r16
    a63c:	ff 90       	pop	r15
    a63e:	ef 90       	pop	r14
    a640:	df 90       	pop	r13
    a642:	cf 90       	pop	r12
    a644:	bf 90       	pop	r11
    a646:	af 90       	pop	r10
    a648:	9f 90       	pop	r9
    a64a:	8f 90       	pop	r8
    a64c:	7f 90       	pop	r7
    a64e:	6f 90       	pop	r6
    a650:	5f 90       	pop	r5
    a652:	4f 90       	pop	r4
    a654:	08 95       	ret

0000a656 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:605
  return 0;
}
uint8_t display_enable_show(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    a656:	81 e0       	ldi	r24, 0x01	; 1
    a658:	08 95       	ret

0000a65a <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:601
void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
void nullfceargs(uint16_t args1, uint16_t args2, uint8_t args3) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 0;
}
    a65a:	80 e0       	ldi	r24, 0x00	; 0
    a65c:	08 95       	ret

0000a65e <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    a65e:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    a660:	86 81       	ldd	r24, Z+6	; 0x06
    a662:	97 81       	ldd	r25, Z+7	; 0x07
    a664:	68 0f       	add	r22, r24
    a666:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    a668:	24 81       	ldd	r18, Z+4	; 0x04
    a66a:	35 81       	ldd	r19, Z+5	; 0x05
    a66c:	26 17       	cp	r18, r22
    a66e:	37 07       	cpc	r19, r23
    a670:	38 f0       	brcs	.+14     	; 0xa680 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    a672:	22 81       	ldd	r18, Z+2	; 0x02
    a674:	33 81       	ldd	r19, Z+3	; 0x03
    a676:	82 0f       	add	r24, r18
    a678:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    a67a:	77 83       	std	Z+7, r23	; 0x07
    a67c:	66 83       	std	Z+6, r22	; 0x06
    a67e:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    a680:	90 e0       	ldi	r25, 0x00	; 0
    a682:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    a684:	08 95       	ret

0000a686 <remote_tds_get_data(unsigned char) [clone .part.31]>:
_Z19remote_tds_get_datah.part.31():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    a686:	0f 93       	push	r16
    a688:	1f 93       	push	r17
    a68a:	cf 93       	push	r28
    a68c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
{
  int value = 0;
  if (idx < MAX_RTDS)
  {
    value = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    a68e:	94 e0       	ldi	r25, 0x04	; 4
    a690:	89 9f       	mul	r24, r25
    a692:	e0 01       	movw	r28, r0
    a694:	11 24       	eor	r1, r1
    a696:	be 01       	movw	r22, r28
    a698:	6b 59       	subi	r22, 0x9B	; 155
    a69a:	7f 4f       	sbci	r23, 0xFF	; 255
    a69c:	07 2e       	mov	r0, r23
    a69e:	00 0c       	add	r0, r0
    a6a0:	88 0b       	sbc	r24, r24
    a6a2:	99 0b       	sbc	r25, r25
    a6a4:	0e 94 38 ba 	call	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
    a6a8:	08 2f       	mov	r16, r24
    a6aa:	10 e0       	ldi	r17, 0x00	; 0
    a6ac:	10 2f       	mov	r17, r16
    a6ae:	00 27       	eor	r16, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
    value = value + SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    a6b0:	be 01       	movw	r22, r28
    a6b2:	6c 59       	subi	r22, 0x9C	; 156
    a6b4:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b6:	07 2e       	mov	r0, r23
    a6b8:	00 0c       	add	r0, r0
    a6ba:	88 0b       	sbc	r24, r24
    a6bc:	99 0b       	sbc	r25, r25
    a6be:	0e 94 38 ba 	call	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1946
  }
  return value;
}
    a6c2:	80 0f       	add	r24, r16
    a6c4:	91 2f       	mov	r25, r17
    a6c6:	91 1d       	adc	r25, r1
    a6c8:	df 91       	pop	r29
    a6ca:	cf 91       	pop	r28
    a6cc:	1f 91       	pop	r17
    a6ce:	0f 91       	pop	r16
    a6d0:	08 95       	ret

0000a6d2 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1950
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    a6d2:	8a 30       	cpi	r24, 0x0A	; 10
    a6d4:	60 f4       	brcc	.+24     	; 0xa6ee <remote_tds_get_last_update(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1952
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    a6d6:	94 e0       	ldi	r25, 0x04	; 4
    a6d8:	89 9f       	mul	r24, r25
    a6da:	b0 01       	movw	r22, r0
    a6dc:	11 24       	eor	r1, r1
    a6de:	6a 59       	subi	r22, 0x9A	; 154
    a6e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a6e2:	07 2e       	mov	r0, r23
    a6e4:	00 0c       	add	r0, r0
    a6e6:	88 0b       	sbc	r24, r24
    a6e8:	99 0b       	sbc	r25, r25
    a6ea:	0c 94 38 ba 	jmp	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1955
  }
  return last;
}
    a6ee:	8f ef       	ldi	r24, 0xFF	; 255
    a6f0:	08 95       	ret

0000a6f2 <remote_tds_get_type(unsigned char)>:
_Z19remote_tds_get_typeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
  }
}
uint8_t remote_tds_get_type(uint8_t idx)
{
  uint8_t type = 255;
  if (idx < MAX_RTDS)
    a6f2:	8a 30       	cpi	r24, 0x0A	; 10
    a6f4:	60 f4       	brcc	.+24     	; 0xa70e <remote_tds_get_type(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
  {
    type = SRAM.readByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx));
    a6f6:	94 e0       	ldi	r25, 0x04	; 4
    a6f8:	89 9f       	mul	r24, r25
    a6fa:	b0 01       	movw	r22, r0
    a6fc:	11 24       	eor	r1, r1
    a6fe:	69 59       	subi	r22, 0x99	; 153
    a700:	7f 4f       	sbci	r23, 0xFF	; 255
    a702:	07 2e       	mov	r0, r23
    a704:	00 0c       	add	r0, r0
    a706:	88 0b       	sbc	r24, r24
    a708:	99 0b       	sbc	r25, r25
    a70a:	0c 94 38 ba 	jmp	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
  }
  return type;
}
    a70e:	8f ef       	ldi	r24, 0xFF	; 255
    a710:	08 95       	ret

0000a712 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929

void remote_tds_set_data(uint8_t idx, int value)
{
    a712:	1f 93       	push	r17
    a714:	cf 93       	push	r28
    a716:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
  if (idx < MAX_RTDS)
    a718:	8a 30       	cpi	r24, 0x0A	; 10
    a71a:	39 f1       	breq	.+78     	; 0xa76a <remote_tds_set_data(unsigned char, int)+0x58>
    a71c:	17 2f       	mov	r17, r23
    a71e:	46 2f       	mov	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    a720:	90 e0       	ldi	r25, 0x00	; 0
    a722:	49 96       	adiw	r24, 0x19	; 25
    a724:	ec 01       	movw	r28, r24
    a726:	cc 0f       	add	r28, r28
    a728:	dd 1f       	adc	r29, r29
    a72a:	cc 0f       	add	r28, r28
    a72c:	dd 1f       	adc	r29, r29
    a72e:	be 01       	movw	r22, r28
    a730:	0d 2e       	mov	r0, r29
    a732:	00 0c       	add	r0, r0
    a734:	88 0b       	sbc	r24, r24
    a736:	99 0b       	sbc	r25, r25
    a738:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    a73c:	be 01       	movw	r22, r28
    a73e:	6f 5f       	subi	r22, 0xFF	; 255
    a740:	7f 4f       	sbci	r23, 0xFF	; 255
    a742:	07 2e       	mov	r0, r23
    a744:	00 0c       	add	r0, r0
    a746:	88 0b       	sbc	r24, r24
    a748:	99 0b       	sbc	r25, r25
    a74a:	41 2f       	mov	r20, r17
    a74c:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    a750:	be 01       	movw	r22, r28
    a752:	6e 5f       	subi	r22, 0xFE	; 254
    a754:	7f 4f       	sbci	r23, 0xFF	; 255
    a756:	07 2e       	mov	r0, r23
    a758:	00 0c       	add	r0, r0
    a75a:	88 0b       	sbc	r24, r24
    a75c:	99 0b       	sbc	r25, r25
    a75e:	40 e0       	ldi	r20, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
  }
}
    a760:	df 91       	pop	r29
    a762:	cf 91       	pop	r28
    a764:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    a766:	0c 94 fc b9 	jmp	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
  }
}
    a76a:	df 91       	pop	r29
    a76c:	cf 91       	pop	r28
    a76e:	1f 91       	pop	r17
    a770:	08 95       	ret

0000a772 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z41button_select_term_mode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_select_term_mode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a772:	0f 93       	push	r16
    a774:	1f 93       	push	r17
    a776:	48 2f       	mov	r20, r24
    a778:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5424
  if (args1 == 0)
    a77a:	41 11       	cpse	r20, r1
    a77c:	0b c0       	rjmp	.+22     	; 0xa794 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
  {
    strcpy_P(line1, text_button_term_off);
    a77e:	66 e2       	ldi	r22, 0x26	; 38
    a780:	75 e8       	ldi	r23, 0x85	; 133
    a782:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5427
    strcpy_P(line2, text_button_term_off_comment);
    a786:	60 e1       	ldi	r22, 0x10	; 16
    a788:	75 e8       	ldi	r23, 0x85	; 133
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5447
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    a78a:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
  }
}
    a78c:	1f 91       	pop	r17
    a78e:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5447
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    a790:	0c 94 85 f1 	jmp	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5429
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    a794:	41 30       	cpi	r20, 0x01	; 1
    a796:	39 f4       	brne	.+14     	; 0xa7a6 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5431
  {
    strcpy_P(line1, text_button_term_max);
    a798:	6c e0       	ldi	r22, 0x0C	; 12
    a79a:	75 e8       	ldi	r23, 0x85	; 133
    a79c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5432
    strcpy_P(line2, text_button_term_max_comment);
    a7a0:	66 ef       	ldi	r22, 0xF6	; 246
    a7a2:	74 e8       	ldi	r23, 0x84	; 132
    a7a4:	f2 cf       	rjmp	.-28     	; 0xa78a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5434
  }
  if (args1 == 2)
    a7a6:	42 30       	cpi	r20, 0x02	; 2
    a7a8:	39 f4       	brne	.+14     	; 0xa7b8 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5436
  {
    strcpy_P(line1, text_button_term_min);
    a7aa:	62 ef       	ldi	r22, 0xF2	; 242
    a7ac:	74 e8       	ldi	r23, 0x84	; 132
    a7ae:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5437
    strcpy_P(line2, text_button_term_min_comment);
    a7b2:	6b ed       	ldi	r22, 0xDB	; 219
    a7b4:	74 e8       	ldi	r23, 0x84	; 132
    a7b6:	e9 cf       	rjmp	.-46     	; 0xa78a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5439
  }
  if (args1 == 3)
    a7b8:	43 30       	cpi	r20, 0x03	; 3
    a7ba:	39 f4       	brne	.+14     	; 0xa7ca <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5441
  {
    strcpy_P(line1, text_button_term_prog);
    a7bc:	66 ed       	ldi	r22, 0xD6	; 214
    a7be:	74 e8       	ldi	r23, 0x84	; 132
    a7c0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5442
    strcpy_P(line2, text_button_term_prog_comment);
    a7c4:	62 ec       	ldi	r22, 0xC2	; 194
    a7c6:	74 e8       	ldi	r23, 0x84	; 132
    a7c8:	e0 cf       	rjmp	.-64     	; 0xa78a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5444
  }
  if (args1 == 4)
    a7ca:	44 30       	cpi	r20, 0x04	; 4
    a7cc:	39 f4       	brne	.+14     	; 0xa7dc <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5446
  {
    strcpy_P(line1, text_button_term_man);
    a7ce:	6e eb       	ldi	r22, 0xBE	; 190
    a7d0:	74 e8       	ldi	r23, 0x84	; 132
    a7d2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5447
    strcpy_P(line2, text_button_term_man_comment);
    a7d6:	6f ea       	ldi	r22, 0xAF	; 175
    a7d8:	74 e8       	ldi	r23, 0x84	; 132
    a7da:	d7 cf       	rjmp	.-82     	; 0xa78a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
  }
}
    a7dc:	1f 91       	pop	r17
    a7de:	0f 91       	pop	r16
    a7e0:	08 95       	ret

0000a7e2 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5598
  return ret;
}
////////
/// Funkce, ktera vraci popisky pro dynamicke tlacitko
void switch_brightness_automode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a7e2:	0f 93       	push	r16
    a7e4:	1f 93       	push	r17
    a7e6:	cf 93       	push	r28
    a7e8:	df 93       	push	r29
    a7ea:	00 d0       	rcall	.+0      	; 0xa7ec <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    a7ec:	00 d0       	rcall	.+0      	; 0xa7ee <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    a7ee:	1f 92       	push	r1
    a7f0:	1f 92       	push	r1
    a7f2:	cd b7       	in	r28, 0x3d	; 61
    a7f4:	de b7       	in	r29, 0x3e	; 62
    a7f6:	89 01       	movw	r16, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
  char str2[8];
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    a7f8:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a7fc:	87 ff       	sbrs	r24, 7
    a7fe:	1a c0       	rjmp	.+52     	; 0xa834 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5602
  {
    strcpy_P(line1, new_text_jas_display_automat);
    a800:	63 e5       	ldi	r22, 0x53	; 83
    a802:	75 e8       	ldi	r23, 0x85	; 133
    a804:	c9 01       	movw	r24, r18
    a806:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5603
    itoa(brigthness_display_auto_values / 2, str2, 10);
    a80a:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <brigthness_display_auto_values>
    a80e:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    a810:	4a e0       	ldi	r20, 0x0A	; 10
    a812:	be 01       	movw	r22, r28
    a814:	6f 5f       	subi	r22, 0xFF	; 255
    a816:	7f 4f       	sbci	r23, 0xFF	; 255
    a818:	90 e0       	ldi	r25, 0x00	; 0
    a81a:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5604
    strcat(line1, str2);
    a81e:	be 01       	movw	r22, r28
    a820:	6f 5f       	subi	r22, 0xFF	; 255
    a822:	7f 4f       	sbci	r23, 0xFF	; 255
    a824:	c8 01       	movw	r24, r16
    a826:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5605
    strcat(line1, "%");
    a82a:	63 e0       	ldi	r22, 0x03	; 3
    a82c:	73 e0       	ldi	r23, 0x03	; 3
    a82e:	c8 01       	movw	r24, r16
    a830:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5607
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    a834:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a838:	87 fd       	sbrc	r24, 7
    a83a:	05 c0       	rjmp	.+10     	; 0xa846 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5609
  {
    strcpy_P(line1, new_text_jas_display_manual);
    a83c:	62 e4       	ldi	r22, 0x42	; 66
    a83e:	75 e8       	ldi	r23, 0x85	; 133
    a840:	c8 01       	movw	r24, r16
    a842:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
  }
}
    a846:	28 96       	adiw	r28, 0x08	; 8
    a848:	0f b6       	in	r0, 0x3f	; 63
    a84a:	f8 94       	cli
    a84c:	de bf       	out	0x3e, r29	; 62
    a84e:	0f be       	out	0x3f, r0	; 63
    a850:	cd bf       	out	0x3d, r28	; 61
    a852:	df 91       	pop	r29
    a854:	cf 91       	pop	r28
    a856:	1f 91       	pop	r17
    a858:	0f 91       	pop	r16
    a85a:	08 95       	ret

0000a85c <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5563
   Display funkce

*/
/// Funkce ktera vrati popisek pro tlacitko
void button_change_brightness_display_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a85c:	0f 93       	push	r16
    a85e:	1f 93       	push	r17
    a860:	cf 93       	push	r28
    a862:	df 93       	push	r29
    a864:	00 d0       	rcall	.+0      	; 0xa866 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    a866:	00 d0       	rcall	.+0      	; 0xa868 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    a868:	1f 92       	push	r1
    a86a:	1f 92       	push	r1
    a86c:	cd b7       	in	r28, 0x3d	; 61
    a86e:	de b7       	in	r29, 0x3e	; 62
    a870:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5565
  char str2[8];
  strcpy_P(line1, new_text_jas_display);
    a872:	6a e2       	ldi	r22, 0x2A	; 42
    a874:	75 e8       	ldi	r23, 0x85	; 133
    a876:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5566
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    a87a:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a87e:	87 ff       	sbrs	r24, 7
    a880:	1a c0       	rjmp	.+52     	; 0xa8b6 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5568
  {
    strcpy_P(line2, new_text_jas_display_automat);
    a882:	63 e5       	ldi	r22, 0x53	; 83
    a884:	75 e8       	ldi	r23, 0x85	; 133
    a886:	c8 01       	movw	r24, r16
    a888:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5569
    itoa(brigthness_display_auto_values / 2, str2, 10);
    a88c:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <brigthness_display_auto_values>
    a890:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a892:	4a e0       	ldi	r20, 0x0A	; 10
    a894:	be 01       	movw	r22, r28
    a896:	6f 5f       	subi	r22, 0xFF	; 255
    a898:	7f 4f       	sbci	r23, 0xFF	; 255
    a89a:	90 e0       	ldi	r25, 0x00	; 0
    a89c:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5570
    strcat(line2, str2);
    a8a0:	be 01       	movw	r22, r28
    a8a2:	6f 5f       	subi	r22, 0xFF	; 255
    a8a4:	7f 4f       	sbci	r23, 0xFF	; 255
    a8a6:	c8 01       	movw	r24, r16
    a8a8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5571
    strcat(line2, "%");
    a8ac:	63 e0       	ldi	r22, 0x03	; 3
    a8ae:	73 e0       	ldi	r23, 0x03	; 3
    a8b0:	c8 01       	movw	r24, r16
    a8b2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5573
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    a8b6:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a8ba:	87 fd       	sbrc	r24, 7
    a8bc:	23 c0       	rjmp	.+70     	; 0xa904 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5575
  {
    strcpy_P(line2, new_text_jas_display_manual);
    a8be:	62 e4       	ldi	r22, 0x42	; 66
    a8c0:	75 e8       	ldi	r23, 0x85	; 133
    a8c2:	c8 01       	movw	r24, r16
    a8c4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5576
    itoa(brigthness_display_values, str2, 10);
    a8c8:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a8cc:	4a e0       	ldi	r20, 0x0A	; 10
    a8ce:	be 01       	movw	r22, r28
    a8d0:	6f 5f       	subi	r22, 0xFF	; 255
    a8d2:	7f 4f       	sbci	r23, 0xFF	; 255
    a8d4:	90 e0       	ldi	r25, 0x00	; 0
    a8d6:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5577
    strcat(line2, str2);
    a8da:	be 01       	movw	r22, r28
    a8dc:	6f 5f       	subi	r22, 0xFF	; 255
    a8de:	7f 4f       	sbci	r23, 0xFF	; 255
    a8e0:	c8 01       	movw	r24, r16
    a8e2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5578
    strcat(line2, "%");
    a8e6:	63 e0       	ldi	r22, 0x03	; 3
    a8e8:	73 e0       	ldi	r23, 0x03	; 3
    a8ea:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5580
  }
}
    a8ec:	28 96       	adiw	r28, 0x08	; 8
    a8ee:	0f b6       	in	r0, 0x3f	; 63
    a8f0:	f8 94       	cli
    a8f2:	de bf       	out	0x3e, r29	; 62
    a8f4:	0f be       	out	0x3f, r0	; 63
    a8f6:	cd bf       	out	0x3d, r28	; 61
    a8f8:	df 91       	pop	r29
    a8fa:	cf 91       	pop	r28
    a8fc:	1f 91       	pop	r17
    a8fe:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5578
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    strcpy_P(line2, new_text_jas_display_manual);
    itoa(brigthness_display_values, str2, 10);
    strcat(line2, str2);
    strcat(line2, "%");
    a900:	0c 94 13 fe 	jmp	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5580
  }
}
    a904:	28 96       	adiw	r28, 0x08	; 8
    a906:	0f b6       	in	r0, 0x3f	; 63
    a908:	f8 94       	cli
    a90a:	de bf       	out	0x3e, r29	; 62
    a90c:	0f be       	out	0x3f, r0	; 63
    a90e:	cd bf       	out	0x3d, r28	; 61
    a910:	df 91       	pop	r29
    a912:	cf 91       	pop	r28
    a914:	1f 91       	pop	r17
    a916:	0f 91       	pop	r16
    a918:	08 95       	ret

0000a91a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z65button_set_brightness_auto_shutdown_select_time_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5685
    ret = 1;
  return ret;
}

void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a91a:	0f 93       	push	r16
    a91c:	1f 93       	push	r17
    a91e:	48 2f       	mov	r20, r24
    a920:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5686
  line2[0] = 0;
    a922:	f8 01       	movw	r30, r16
    a924:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
  if (args1 == 0)
    a926:	41 11       	cpse	r20, r1
    a928:	07 c0       	rjmp	.+14     	; 0xa938 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5688
    strcpy_P(line1, new_text_vypnuto);
    a92a:	63 e8       	ldi	r22, 0x83	; 131
    a92c:	75 e8       	ldi	r23, 0x85	; 133
    a92e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
}
    a932:	1f 91       	pop	r17
    a934:	0f 91       	pop	r16
    a936:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5689
void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    a938:	41 30       	cpi	r20, 0x01	; 1
    a93a:	29 f4       	brne	.+10     	; 0xa946 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5690
    strcpy(line1, "30 sec");
    a93c:	65 e0       	ldi	r22, 0x05	; 5
    a93e:	73 e0       	ldi	r23, 0x03	; 3
    a940:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
    a944:	f6 cf       	rjmp	.-20     	; 0xa932 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5692
  if (args1 == 2)
    strcpy(line1, "1 min");
    a946:	6c e0       	ldi	r22, 0x0C	; 12
    a948:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5691
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    a94a:	42 30       	cpi	r20, 0x02	; 2
    a94c:	61 f0       	breq	.+24     	; 0xa966 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5694
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
    a94e:	62 e1       	ldi	r22, 0x12	; 18
    a950:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5693
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    a952:	43 30       	cpi	r20, 0x03	; 3
    a954:	41 f0       	breq	.+16     	; 0xa966 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5696
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
    a956:	68 e1       	ldi	r22, 0x18	; 24
    a958:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5695
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    a95a:	44 30       	cpi	r20, 0x04	; 4
    a95c:	21 f0       	breq	.+8      	; 0xa966 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5697
    strcpy(line1, "3 min");
  if (args1 == 5)
    a95e:	45 30       	cpi	r20, 0x05	; 5
    a960:	41 f7       	brne	.-48     	; 0xa932 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5698
    strcpy(line1, "4 min");
    a962:	6e e1       	ldi	r22, 0x1E	; 30
    a964:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
}
    a966:	1f 91       	pop	r17
    a968:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5698
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
    a96a:	0c 94 32 fe 	jmp	0x1fc64	; 0x1fc64 <strcpy>

0000a96e <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1383
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    a96e:	6a e2       	ldi	r22, 0x2A	; 42
    a970:	79 e0       	ldi	r23, 0x09	; 9
    a972:	0c 94 32 fe 	jmp	0x1fc64	; 0x1fc64 <strcpy>

0000a976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>:
_Z26display_element_set_stringPchhPFvjjhEPFhvE():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  menu_dialog_variable[idx].update_now = update_now;
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
    a976:	ef 92       	push	r14
    a978:	ff 92       	push	r15
    a97a:	0f 93       	push	r16
    a97c:	1f 93       	push	r17
    a97e:	cf 93       	push	r28
    a980:	df 93       	push	r29
    a982:	e6 2e       	mov	r14, r22
    a984:	f4 2e       	mov	r15, r20
    a986:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  strcpy(dialog_set_string, str);
    a988:	bc 01       	movw	r22, r24
    a98a:	8a e2       	ldi	r24, 0x2A	; 42
    a98c:	99 e0       	ldi	r25, 0x09	; 9
    a98e:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_set_string_max_length = max_length;
    a992:	e0 92 98 08 	sts	0x0898, r14	; 0x800898 <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1371
  dialog_set_string_args = idx;
    a996:	f0 92 57 09 	sts	0x0957, r15	; 0x800957 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1372
  dialog_save_string_function = save_function;
    a99a:	d0 93 9b 08 	sts	0x089B, r29	; 0x80089b <dialog_save_string_function+0x1>
    a99e:	c0 93 9a 08 	sts	0x089A, r28	; 0x80089a <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1373
  dialog_save_valid_function = valid_function;
    a9a2:	10 93 9d 08 	sts	0x089D, r17	; 0x80089d <dialog_save_valid_function+0x1>
    a9a6:	00 93 9c 08 	sts	0x089C, r16	; 0x80089c <dialog_save_valid_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1374
}
    a9aa:	df 91       	pop	r29
    a9ac:	cf 91       	pop	r28
    a9ae:	1f 91       	pop	r17
    a9b0:	0f 91       	pop	r16
    a9b2:	ff 90       	pop	r15
    a9b4:	ef 90       	pop	r14
    a9b6:	08 95       	ret

0000a9b8 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5663
   Funkce pro automaticke vypinani displaye pri neaktivite


*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a9b8:	0f 93       	push	r16
    a9ba:	1f 93       	push	r17
    a9bc:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5664
  strcpy_P(line1, new_text_auto_display_shutdown);
    a9be:	66 e6       	ldi	r22, 0x66	; 102
    a9c0:	75 e8       	ldi	r23, 0x85	; 133
    a9c2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5665
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    a9c6:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    a9ca:	86 fd       	sbrc	r24, 6
    a9cc:	07 c0       	rjmp	.+14     	; 0xa9dc <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5666
    strcpy_P(line2, new_text_vypnuto);
    a9ce:	63 e8       	ldi	r22, 0x83	; 131
    a9d0:	75 e8       	ldi	r23, 0x85	; 133
    a9d2:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}
    a9d4:	1f 91       	pop	r17
    a9d6:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5666
*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, new_text_auto_display_shutdown);
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    strcpy_P(line2, new_text_vypnuto);
    a9d8:	0c 94 85 f1 	jmp	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5668
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
    a9dc:	80 91 33 0c 	lds	r24, 0x0C33	; 0x800c33 <display_auto_shutdown>
    a9e0:	1f 92       	push	r1
    a9e2:	8f 93       	push	r24
    a9e4:	84 e2       	ldi	r24, 0x24	; 36
    a9e6:	93 e0       	ldi	r25, 0x03	; 3
    a9e8:	9f 93       	push	r25
    a9ea:	8f 93       	push	r24
    a9ec:	1f 93       	push	r17
    a9ee:	0f 93       	push	r16
    a9f0:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
    a9f4:	0f 90       	pop	r0
    a9f6:	0f 90       	pop	r0
    a9f8:	0f 90       	pop	r0
    a9fa:	0f 90       	pop	r0
    a9fc:	0f 90       	pop	r0
    a9fe:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
}
    aa00:	1f 91       	pop	r17
    aa02:	0f 91       	pop	r16
    aa04:	08 95       	ret

0000aa06 <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
/// ip2CharArray - jednoducha funkce prevodu objectu IPAddress na char pole
/*
   ip - object typu IP address
 * *buf - ukazatel na pole s vysledkem
*/
void ip2CharArray(IPAddress ip, char* buf) {
    aa06:	fc 01       	movw	r30, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
  sprintf(buf, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
    aa08:	85 81       	ldd	r24, Z+5	; 0x05
    aa0a:	1f 92       	push	r1
    aa0c:	8f 93       	push	r24
    aa0e:	84 81       	ldd	r24, Z+4	; 0x04
    aa10:	1f 92       	push	r1
    aa12:	8f 93       	push	r24
    aa14:	83 81       	ldd	r24, Z+3	; 0x03
    aa16:	1f 92       	push	r1
    aa18:	8f 93       	push	r24
    aa1a:	82 81       	ldd	r24, Z+2	; 0x02
    aa1c:	1f 92       	push	r1
    aa1e:	8f 93       	push	r24
    aa20:	85 e3       	ldi	r24, 0x35	; 53
    aa22:	93 e0       	ldi	r25, 0x03	; 3
    aa24:	9f 93       	push	r25
    aa26:	8f 93       	push	r24
    aa28:	7f 93       	push	r23
    aa2a:	6f 93       	push	r22
    aa2c:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
    aa30:	8d b7       	in	r24, 0x3d	; 61
    aa32:	9e b7       	in	r25, 0x3e	; 62
    aa34:	0c 96       	adiw	r24, 0x0c	; 12
    aa36:	0f b6       	in	r0, 0x3f	; 63
    aa38:	f8 94       	cli
    aa3a:	9e bf       	out	0x3e, r25	; 62
    aa3c:	0f be       	out	0x3f, r0	; 63
    aa3e:	8d bf       	out	0x3d, r24	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1761
}
    aa40:	08 95       	ret

0000aa42 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    aa42:	af 92       	push	r10
    aa44:	bf 92       	push	r11
    aa46:	cf 92       	push	r12
    aa48:	df 92       	push	r13
    aa4a:	ff 92       	push	r15
    aa4c:	0f 93       	push	r16
    aa4e:	1f 93       	push	r17
    aa50:	cf 93       	push	r28
    aa52:	df 93       	push	r29
    aa54:	cd b7       	in	r28, 0x3d	; 61
    aa56:	de b7       	in	r29, 0x3e	; 62
    aa58:	a0 97       	sbiw	r28, 0x20	; 32
    aa5a:	0f b6       	in	r0, 0x3f	; 63
    aa5c:	f8 94       	cli
    aa5e:	de bf       	out	0x3e, r29	; 62
    aa60:	0f be       	out	0x3f, r0	; 63
    aa62:	cd bf       	out	0x3d, r28	; 61
    aa64:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    aa66:	a8 2e       	mov	r10, r24
    aa68:	b1 2c       	mov	r11, r1
    aa6a:	65 01       	movw	r12, r10
    aa6c:	cc 0c       	add	r12, r12
    aa6e:	dd 1c       	adc	r13, r13
    aa70:	cc 0c       	add	r12, r12
    aa72:	dd 1c       	adc	r13, r13
    aa74:	f6 01       	movw	r30, r12
    aa76:	ec 5a       	subi	r30, 0xAC	; 172
    aa78:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    aa7a:	60 81       	ld	r22, Z
    aa7c:	71 81       	ldd	r23, Z+1	; 0x01
    aa7e:	82 81       	ldd	r24, Z+2	; 0x02
    aa80:	93 81       	ldd	r25, Z+3	; 0x03
    aa82:	8e 01       	movw	r16, r28
    aa84:	0f 5f       	subi	r16, 0xFF	; 255
    aa86:	1f 4f       	sbci	r17, 0xFF	; 255
    aa88:	22 e0       	ldi	r18, 0x02	; 2
    aa8a:	47 e0       	ldi	r20, 0x07	; 7
    aa8c:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    aa90:	98 01       	movw	r18, r16
    aa92:	43 e6       	ldi	r20, 0x63	; 99
    aa94:	56 e0       	ldi	r21, 0x06	; 6
    aa96:	6f 2d       	mov	r22, r15
    aa98:	81 e4       	ldi	r24, 0x41	; 65
    aa9a:	93 e0       	ldi	r25, 0x03	; 3
    aa9c:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    aaa0:	f6 01       	movw	r30, r12
    aaa2:	e8 59       	subi	r30, 0x98	; 152
    aaa4:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    aaa6:	60 81       	ld	r22, Z
    aaa8:	71 81       	ldd	r23, Z+1	; 0x01
    aaaa:	82 81       	ldd	r24, Z+2	; 0x02
    aaac:	93 81       	ldd	r25, Z+3	; 0x03
    aaae:	22 e0       	ldi	r18, 0x02	; 2
    aab0:	47 e0       	ldi	r20, 0x07	; 7
    aab2:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3018
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    aab6:	98 01       	movw	r18, r16
    aab8:	4a e6       	ldi	r20, 0x6A	; 106
    aaba:	56 e0       	ldi	r21, 0x06	; 6
    aabc:	6f 2d       	mov	r22, r15
    aabe:	81 e4       	ldi	r24, 0x41	; 65
    aac0:	93 e0       	ldi	r25, 0x03	; 3
    aac2:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    aac6:	f6 01       	movw	r30, r12
    aac8:	e4 58       	subi	r30, 0x84	; 132
    aaca:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3019
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    aacc:	60 81       	ld	r22, Z
    aace:	71 81       	ldd	r23, Z+1	; 0x01
    aad0:	82 81       	ldd	r24, Z+2	; 0x02
    aad2:	93 81       	ldd	r25, Z+3	; 0x03
    aad4:	22 e0       	ldi	r18, 0x02	; 2
    aad6:	47 e0       	ldi	r20, 0x07	; 7
    aad8:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    aadc:	98 01       	movw	r18, r16
    aade:	41 e7       	ldi	r20, 0x71	; 113
    aae0:	56 e0       	ldi	r21, 0x06	; 6
    aae2:	6f 2d       	mov	r22, r15
    aae4:	81 e4       	ldi	r24, 0x41	; 65
    aae6:	93 e0       	ldi	r25, 0x03	; 3
    aae8:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    aaec:	f5 01       	movw	r30, r10
    aaee:	e0 57       	subi	r30, 0x70	; 112
    aaf0:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3021
  itoa(thermostat_get_pid_time(idx), payload, 10);
    aaf2:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    aaf4:	4a e0       	ldi	r20, 0x0A	; 10
    aaf6:	b8 01       	movw	r22, r16
    aaf8:	90 e0       	ldi	r25, 0x00	; 0
    aafa:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    aafe:	98 01       	movw	r18, r16
    ab00:	48 e7       	ldi	r20, 0x78	; 120
    ab02:	56 e0       	ldi	r21, 0x06	; 6
    ab04:	6f 2d       	mov	r22, r15
    ab06:	81 e4       	ldi	r24, 0x41	; 65
    ab08:	93 e0       	ldi	r25, 0x03	; 3
    ab0a:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
}
    ab0e:	a0 96       	adiw	r28, 0x20	; 32
    ab10:	0f b6       	in	r0, 0x3f	; 63
    ab12:	f8 94       	cli
    ab14:	de bf       	out	0x3e, r29	; 62
    ab16:	0f be       	out	0x3f, r0	; 63
    ab18:	cd bf       	out	0x3d, r28	; 61
    ab1a:	df 91       	pop	r29
    ab1c:	cf 91       	pop	r28
    ab1e:	1f 91       	pop	r17
    ab20:	0f 91       	pop	r16
    ab22:	ff 90       	pop	r15
    ab24:	df 90       	pop	r13
    ab26:	cf 90       	pop	r12
    ab28:	bf 90       	pop	r11
    ab2a:	af 90       	pop	r10
    ab2c:	08 95       	ret

0000ab2e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    ab2e:	8f 92       	push	r8
    ab30:	9f 92       	push	r9
    ab32:	af 92       	push	r10
    ab34:	bf 92       	push	r11
    ab36:	ef 92       	push	r14
    ab38:	ff 92       	push	r15
    ab3a:	0f 93       	push	r16
    ab3c:	1f 93       	push	r17
    ab3e:	cf 93       	push	r28
    ab40:	df 93       	push	r29
    ab42:	cd b7       	in	r28, 0x3d	; 61
    ab44:	de b7       	in	r29, 0x3e	; 62
    ab46:	a1 97       	sbiw	r28, 0x21	; 33
    ab48:	0f b6       	in	r0, 0x3f	; 63
    ab4a:	f8 94       	cli
    ab4c:	de bf       	out	0x3e, r29	; 62
    ab4e:	0f be       	out	0x3f, r0	; 63
    ab50:	cd bf       	out	0x3d, r28	; 61
    ab52:	7c 01       	movw	r14, r24
    ab54:	fa 01       	movw	r30, r20
    ab56:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    ab58:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    ab5a:	22 30       	cpi	r18, 0x02	; 2
    ab5c:	08 f4       	brcc	.+2      	; 0xab60 <Print::printNumber(unsigned long, unsigned char)+0x32>
    ab5e:	2a e0       	ldi	r18, 0x0A	; 10
    ab60:	8e 01       	movw	r16, r28
    ab62:	0f 5d       	subi	r16, 0xDF	; 223
    ab64:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    ab66:	82 2e       	mov	r8, r18
    ab68:	91 2c       	mov	r9, r1
    ab6a:	b1 2c       	mov	r11, r1
    ab6c:	a1 2c       	mov	r10, r1
    ab6e:	bf 01       	movw	r22, r30
    ab70:	a5 01       	movw	r20, r10
    ab72:	94 01       	movw	r18, r8
    ab74:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    ab78:	f9 01       	movw	r30, r18
    ab7a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    ab7c:	6a 30       	cpi	r22, 0x0A	; 10
    ab7e:	74 f5       	brge	.+92     	; 0xabdc <Print::printNumber(unsigned long, unsigned char)+0xae>
    ab80:	60 5d       	subi	r22, 0xD0	; 208
    ab82:	d8 01       	movw	r26, r16
    ab84:	6e 93       	st	-X, r22
    ab86:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    ab88:	23 2b       	or	r18, r19
    ab8a:	24 2b       	or	r18, r20
    ab8c:	25 2b       	or	r18, r21
    ab8e:	79 f7       	brne	.-34     	; 0xab6e <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    ab90:	90 e0       	ldi	r25, 0x00	; 0
    ab92:	80 e0       	ldi	r24, 0x00	; 0
write():
    ab94:	10 97       	sbiw	r26, 0x00	; 0
    ab96:	89 f0       	breq	.+34     	; 0xabba <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    ab98:	fd 01       	movw	r30, r26
    ab9a:	01 90       	ld	r0, Z+
    ab9c:	00 20       	and	r0, r0
    ab9e:	e9 f7       	brne	.-6      	; 0xab9a <Print::printNumber(unsigned long, unsigned char)+0x6c>
    aba0:	31 97       	sbiw	r30, 0x01	; 1
    aba2:	af 01       	movw	r20, r30
    aba4:	4a 1b       	sub	r20, r26
    aba6:	5b 0b       	sbc	r21, r27
    aba8:	d7 01       	movw	r26, r14
    abaa:	ed 91       	ld	r30, X+
    abac:	fc 91       	ld	r31, X
    abae:	02 80       	ldd	r0, Z+2	; 0x02
    abb0:	f3 81       	ldd	r31, Z+3	; 0x03
    abb2:	e0 2d       	mov	r30, r0
    abb4:	b8 01       	movw	r22, r16
    abb6:	c7 01       	movw	r24, r14
    abb8:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    abba:	a1 96       	adiw	r28, 0x21	; 33
    abbc:	0f b6       	in	r0, 0x3f	; 63
    abbe:	f8 94       	cli
    abc0:	de bf       	out	0x3e, r29	; 62
    abc2:	0f be       	out	0x3f, r0	; 63
    abc4:	cd bf       	out	0x3d, r28	; 61
    abc6:	df 91       	pop	r29
    abc8:	cf 91       	pop	r28
    abca:	1f 91       	pop	r17
    abcc:	0f 91       	pop	r16
    abce:	ff 90       	pop	r15
    abd0:	ef 90       	pop	r14
    abd2:	bf 90       	pop	r11
    abd4:	af 90       	pop	r10
    abd6:	9f 90       	pop	r9
    abd8:	8f 90       	pop	r8
    abda:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    abdc:	69 5c       	subi	r22, 0xC9	; 201
    abde:	d1 cf       	rjmp	.-94     	; 0xab82 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000abe0 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    abe0:	8f 92       	push	r8
    abe2:	9f 92       	push	r9
    abe4:	af 92       	push	r10
    abe6:	bf 92       	push	r11
    abe8:	cf 92       	push	r12
    abea:	df 92       	push	r13
    abec:	ef 92       	push	r14
    abee:	ff 92       	push	r15
    abf0:	0f 93       	push	r16
    abf2:	1f 93       	push	r17
    abf4:	cf 93       	push	r28
    abf6:	df 93       	push	r29
    abf8:	7c 01       	movw	r14, r24
    abfa:	eb 01       	movw	r28, r22
    abfc:	6c 01       	movw	r12, r24
    abfe:	82 e0       	ldi	r24, 0x02	; 2
    ac00:	c8 0e       	add	r12, r24
    ac02:	d1 1c       	adc	r13, r1
    ac04:	47 01       	movw	r8, r14
    ac06:	e5 e0       	ldi	r30, 0x05	; 5
    ac08:	8e 0e       	add	r8, r30
    ac0a:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    ac0c:	10 e0       	ldi	r17, 0x00	; 0
    ac0e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    ac10:	f6 01       	movw	r30, r12
    ac12:	41 91       	ld	r20, Z+
    ac14:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    ac16:	50 e0       	ldi	r21, 0x00	; 0
    ac18:	70 e0       	ldi	r23, 0x00	; 0
    ac1a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    ac1c:	2a e0       	ldi	r18, 0x0A	; 10
    ac1e:	ce 01       	movw	r24, r28
    ac20:	0e 94 97 55 	call	0xab2e	; 0xab2e <Print::printNumber(unsigned long, unsigned char)>
    ac24:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    ac26:	e8 81       	ld	r30, Y
    ac28:	f9 81       	ldd	r31, Y+1	; 0x01
    ac2a:	01 90       	ld	r0, Z+
    ac2c:	f0 81       	ld	r31, Z
    ac2e:	e0 2d       	mov	r30, r0
    ac30:	6e e2       	ldi	r22, 0x2E	; 46
    ac32:	ce 01       	movw	r24, r28
    ac34:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    ac36:	8a 0d       	add	r24, r10
    ac38:	9b 1d       	adc	r25, r11
    ac3a:	08 0f       	add	r16, r24
    ac3c:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    ac3e:	c8 14       	cp	r12, r8
    ac40:	d9 04       	cpc	r13, r9
    ac42:	31 f7       	brne	.-52     	; 0xac10 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    ac44:	f7 01       	movw	r30, r14
    ac46:	45 81       	ldd	r20, Z+5	; 0x05
    ac48:	50 e0       	ldi	r21, 0x00	; 0
    ac4a:	70 e0       	ldi	r23, 0x00	; 0
    ac4c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    ac4e:	2a e0       	ldi	r18, 0x0A	; 10
    ac50:	ce 01       	movw	r24, r28
    ac52:	0e 94 97 55 	call	0xab2e	; 0xab2e <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    ac56:	80 0f       	add	r24, r16
    ac58:	91 1f       	adc	r25, r17
    ac5a:	df 91       	pop	r29
    ac5c:	cf 91       	pop	r28
    ac5e:	1f 91       	pop	r17
    ac60:	0f 91       	pop	r16
    ac62:	ff 90       	pop	r15
    ac64:	ef 90       	pop	r14
    ac66:	df 90       	pop	r13
    ac68:	cf 90       	pop	r12
    ac6a:	bf 90       	pop	r11
    ac6c:	af 90       	pop	r10
    ac6e:	9f 90       	pop	r9
    ac70:	8f 90       	pop	r8
    ac72:	08 95       	ret

0000ac74 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
  }
}

void display_element_set_string_del_char(uint16_t args1, uint16_t idx, uint8_t args3)
{
  uint8_t len = strlen(dialog_set_string);
    ac74:	8a e2       	ldi	r24, 0x2A	; 42
    ac76:	99 e0       	ldi	r25, 0x09	; 9
    ac78:	fc 01       	movw	r30, r24
    ac7a:	01 90       	ld	r0, Z+
    ac7c:	00 20       	and	r0, r0
    ac7e:	e9 f7       	brne	.-6      	; 0xac7a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    ac80:	cf 01       	movw	r24, r30
    ac82:	8b 52       	subi	r24, 0x2B	; 43
    ac84:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1399
  if (len > 0)
    ac86:	88 23       	and	r24, r24
    ac88:	29 f0       	breq	.+10     	; 0xac94 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1400
    dialog_set_string[len - 1] = 0;
    ac8a:	99 27       	eor	r25, r25
    ac8c:	fc 01       	movw	r30, r24
    ac8e:	e7 5d       	subi	r30, 0xD7	; 215
    ac90:	f6 4f       	sbci	r31, 0xF6	; 246
    ac92:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1401
}
    ac94:	08 95       	ret

0000ac96 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    ac96:	ea e2       	ldi	r30, 0x2A	; 42
    ac98:	f9 e0       	ldi	r31, 0x09	; 9
    ac9a:	01 90       	ld	r0, Z+
    ac9c:	00 20       	and	r0, r0
    ac9e:	e9 f7       	brne	.-6      	; 0xac9a <display_element_set_string_add_char(char)+0x4>
    aca0:	eb 52       	subi	r30, 0x2B	; 43
    aca2:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
  if (len  < dialog_set_string_max_length - 1)
    aca4:	ff 27       	eor	r31, r31
    aca6:	20 91 98 08 	lds	r18, 0x0898	; 0x800898 <__data_end>
    acaa:	21 50       	subi	r18, 0x01	; 1
    acac:	33 0b       	sbc	r19, r19
    acae:	e2 17       	cp	r30, r18
    acb0:	f3 07       	cpc	r31, r19
    acb2:	24 f4       	brge	.+8      	; 0xacbc <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
  {
    dialog_set_string[len] = znak;
    acb4:	e6 5d       	subi	r30, 0xD6	; 214
    acb6:	f6 4f       	sbci	r31, 0xF6	; 246
    acb8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1392
    dialog_set_string[len + 1] = 0;
    acba:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1394
  }
}
    acbc:	08 95       	ret

0000acbe <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1542
   args3 ... index prvku
*/
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    acbe:	90 91 99 08 	lds	r25, 0x0899	; 0x800899 <dialog_set_string_keyboard_type>
    acc2:	91 11       	cpse	r25, r1
    acc4:	07 c0       	rjmp	.+14     	; 0xacd4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1543
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    acc6:	e4 2f       	mov	r30, r20
    acc8:	f0 e0       	ldi	r31, 0x00	; 0
    acca:	ee 58       	subi	r30, 0x8E	; 142
    accc:	ff 47       	sbci	r31, 0x7F	; 127
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    acce:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1549
  ///
  display_element_set_string_add_char(znak);
    acd0:	0c 94 4b 56 	jmp	0xac96	; 0xac96 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    acd4:	91 30       	cpi	r25, 0x01	; 1
    acd6:	29 f4       	brne	.+10     	; 0xace2 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1545
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    acd8:	e4 2f       	mov	r30, r20
    acda:	f0 e0       	ldi	r31, 0x00	; 0
    acdc:	e8 5a       	subi	r30, 0xA8	; 168
    acde:	ff 47       	sbci	r31, 0x7F	; 127
    ace0:	f6 cf       	rjmp	.-20     	; 0xacce <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1546
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    ace2:	92 30       	cpi	r25, 0x02	; 2
    ace4:	a9 f7       	brne	.-22     	; 0xacd0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1547
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    ace6:	e4 2f       	mov	r30, r20
    ace8:	f0 e0       	ldi	r31, 0x00	; 0
    acea:	e2 5c       	subi	r30, 0xC2	; 194
    acec:	ff 47       	sbci	r31, 0x7F	; 127
    acee:	ef cf       	rjmp	.-34     	; 0xacce <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

0000acf0 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1504
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
  if (args3 == 10) znak = '.';
    acf0:	8e e2       	ldi	r24, 0x2E	; 46
    acf2:	4a 30       	cpi	r20, 0x0A	; 10
    acf4:	29 f0       	breq	.+10     	; 0xad00 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1503
   args3 ... index prvku
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    acf6:	80 e3       	ldi	r24, 0x30	; 48
    acf8:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1505
  if (args3 == 10) znak = '.';
  if (args3 == 11) znak = ':';
    acfa:	4b 30       	cpi	r20, 0x0B	; 11
    acfc:	09 f4       	brne	.+2      	; 0xad00 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    acfe:	8a e3       	ldi	r24, 0x3A	; 58
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1506
  display_element_set_string_add_char(znak);
    ad00:	0c 94 4b 56 	jmp	0xac96	; 0xac96 <display_element_set_string_add_char(char)>

0000ad04 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    ad04:	0e 94 05 fe 	call	0x1fc0a	; 0x1fc0a <abort>

0000ad08 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    ad08:	dc 01       	movw	r26, r24
    ad0a:	82 ef       	ldi	r24, 0xF2	; 242
    ad0c:	92 e0       	ldi	r25, 0x02	; 2
    ad0e:	8d 93       	st	X+, r24
    ad10:	9d 93       	st	X+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    ad12:	84 e0       	ldi	r24, 0x04	; 4
    ad14:	fb 01       	movw	r30, r22
    ad16:	01 90       	ld	r0, Z+
    ad18:	0d 92       	st	X+, r0
    ad1a:	8a 95       	dec	r24
    ad1c:	e1 f7       	brne	.-8      	; 0xad16 <IPAddress::IPAddress(unsigned char const*)+0xe>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:44
}
    ad1e:	08 95       	ret

0000ad20 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    ad20:	81 e0       	ldi	r24, 0x01	; 1
    ad22:	9d e0       	ldi	r25, 0x0D	; 13
    ad24:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <HardwareSerial::available()>
    ad28:	21 e0       	ldi	r18, 0x01	; 1
    ad2a:	89 2b       	or	r24, r25
    ad2c:	09 f4       	brne	.+2      	; 0xad30 <Serial0_available()+0x10>
    ad2e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    ad30:	82 2f       	mov	r24, r18
    ad32:	08 95       	ret

0000ad34 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    ad34:	0f 93       	push	r16
    ad36:	1f 93       	push	r17
    ad38:	cf 93       	push	r28
    ad3a:	df 93       	push	r29
    ad3c:	1f 92       	push	r1
    ad3e:	cd b7       	in	r28, 0x3d	; 61
    ad40:	de b7       	in	r29, 0x3e	; 62
    ad42:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    ad44:	dc 01       	movw	r26, r24
    ad46:	ed 91       	ld	r30, X+
    ad48:	fc 91       	ld	r31, X
    ad4a:	00 84       	ldd	r0, Z+8	; 0x08
    ad4c:	f1 85       	ldd	r31, Z+9	; 0x09
    ad4e:	e0 2d       	mov	r30, r0
    ad50:	19 95       	eicall
    ad52:	89 2b       	or	r24, r25
    ad54:	91 f0       	breq	.+36     	; 0xad7a <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    ad56:	21 e0       	ldi	r18, 0x01	; 1
    ad58:	41 e0       	ldi	r20, 0x01	; 1
    ad5a:	50 e0       	ldi	r21, 0x00	; 0
    ad5c:	be 01       	movw	r22, r28
    ad5e:	6f 5f       	subi	r22, 0xFF	; 255
    ad60:	7f 4f       	sbci	r23, 0xFF	; 255
    ad62:	f8 01       	movw	r30, r16
    ad64:	84 85       	ldd	r24, Z+12	; 0x0c
    ad66:	0e 94 ec db 	call	0x1b7d8	; 0x1b7d8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    ad6a:	89 81       	ldd	r24, Y+1	; 0x01
    ad6c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    ad6e:	0f 90       	pop	r0
    ad70:	df 91       	pop	r29
    ad72:	cf 91       	pop	r28
    ad74:	1f 91       	pop	r17
    ad76:	0f 91       	pop	r16
    ad78:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    ad7a:	8f ef       	ldi	r24, 0xFF	; 255
    ad7c:	9f ef       	ldi	r25, 0xFF	; 255
    ad7e:	f7 cf       	rjmp	.-18     	; 0xad6e <EthernetClient::peek()+0x3a>

0000ad80 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
    ad80:	cf 93       	push	r28
    ad82:	df 93       	push	r29
    ad84:	1f 92       	push	r1
    ad86:	cd b7       	in	r28, 0x3d	; 61
    ad88:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    ad8a:	fc 01       	movw	r30, r24
    ad8c:	21 8d       	ldd	r18, Z+25	; 0x19
    ad8e:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
    ad90:	8f ef       	ldi	r24, 0xFF	; 255
    ad92:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    ad94:	23 2b       	or	r18, r19
    ad96:	59 f0       	breq	.+22     	; 0xadae <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
    ad98:	21 e0       	ldi	r18, 0x01	; 1
    ad9a:	41 e0       	ldi	r20, 0x01	; 1
    ad9c:	50 e0       	ldi	r21, 0x00	; 0
    ad9e:	be 01       	movw	r22, r28
    ada0:	6f 5f       	subi	r22, 0xFF	; 255
    ada2:	7f 4f       	sbci	r23, 0xFF	; 255
    ada4:	84 85       	ldd	r24, Z+12	; 0x0c
    ada6:	0e 94 ec db 	call	0x1b7d8	; 0x1b7d8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
    adaa:	89 81       	ldd	r24, Y+1	; 0x01
    adac:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
    adae:	0f 90       	pop	r0
    adb0:	df 91       	pop	r29
    adb2:	cf 91       	pop	r28
    adb4:	08 95       	ret

0000adb6 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    adb6:	fc 01       	movw	r30, r24
    adb8:	84 85       	ldd	r24, Z+12	; 0x0c
    adba:	88 30       	cpi	r24, 0x08	; 8
    adbc:	11 f0       	breq	.+4      	; 0xadc2 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    adbe:	0c 94 54 dc 	jmp	0x1b8a8	; 0x1b8a8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    adc2:	90 e0       	ldi	r25, 0x00	; 0
    adc4:	80 e0       	ldi	r24, 0x00	; 0
    adc6:	08 95       	ret

0000adc8 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    adc8:	af 92       	push	r10
    adca:	bf 92       	push	r11
    adcc:	cf 92       	push	r12
    adce:	df 92       	push	r13
    add0:	ff 92       	push	r15
    add2:	0f 93       	push	r16
    add4:	1f 93       	push	r17
    add6:	cf 93       	push	r28
    add8:	df 93       	push	r29
    adda:	8c 01       	movw	r16, r24
    addc:	5b 01       	movw	r10, r22
    adde:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    ade0:	fc 01       	movw	r30, r24
    ade2:	c7 88       	ldd	r12, Z+23	; 0x17
    ade4:	d0 8c       	ldd	r13, Z+24	; 0x18
    ade6:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    ade8:	8f 2d       	mov	r24, r15
    adea:	0e 94 b0 dc 	call	0x1b960	; 0x1b960 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    adee:	8c 17       	cp	r24, r28
    adf0:	9d 07       	cpc	r25, r29
    adf2:	20 f4       	brcc	.+8      	; 0xadfc <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    adf4:	8f 2d       	mov	r24, r15
    adf6:	0e 94 b0 dc 	call	0x1b960	; 0x1b960 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    adfa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    adfc:	9e 01       	movw	r18, r28
    adfe:	a5 01       	movw	r20, r10
    ae00:	b6 01       	movw	r22, r12
    ae02:	8f 2d       	mov	r24, r15
    ae04:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
    ae08:	f8 01       	movw	r30, r16
    ae0a:	87 89       	ldd	r24, Z+23	; 0x17
    ae0c:	90 8d       	ldd	r25, Z+24	; 0x18
    ae0e:	8c 0f       	add	r24, r28
    ae10:	9d 1f       	adc	r25, r29
    ae12:	90 8f       	std	Z+24, r25	; 0x18
    ae14:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
    ae16:	ce 01       	movw	r24, r28
    ae18:	df 91       	pop	r29
    ae1a:	cf 91       	pop	r28
    ae1c:	1f 91       	pop	r17
    ae1e:	0f 91       	pop	r16
    ae20:	ff 90       	pop	r15
    ae22:	df 90       	pop	r13
    ae24:	cf 90       	pop	r12
    ae26:	bf 90       	pop	r11
    ae28:	af 90       	pop	r10
    ae2a:	08 95       	ret

0000ae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    ae2c:	0f 93       	push	r16
    ae2e:	1f 93       	push	r17
    ae30:	cf 93       	push	r28
    ae32:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    ae34:	00 97       	sbiw	r24, 0x00	; 0
    ae36:	01 f1       	breq	.+64     	; 0xae78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
    ae38:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    ae3a:	fc 01       	movw	r30, r24
    ae3c:	c0 81       	ld	r28, Z
    ae3e:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    ae40:	20 97       	sbiw	r28, 0x00	; 0
    ae42:	d1 f0       	breq	.+52     	; 0xae78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    ae44:	6a 85       	ldd	r22, Y+10	; 0x0a
    ae46:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    ae48:	01 15       	cp	r16, r1
    ae4a:	11 05       	cpc	r17, r1
    ae4c:	19 f0       	breq	.+6      	; 0xae54 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x28>
    ae4e:	61 15       	cp	r22, r1
    ae50:	71 05       	cpc	r23, r1
    ae52:	49 f4       	brne	.+18     	; 0xae66 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x3a>
    ae54:	06 17       	cp	r16, r22
    ae56:	17 07       	cpc	r17, r23
    ae58:	59 f4       	brne	.+22     	; 0xae70 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    ae5a:	ce 01       	movw	r24, r28
    ae5c:	df 91       	pop	r29
    ae5e:	cf 91       	pop	r28
    ae60:	1f 91       	pop	r17
    ae62:	0f 91       	pop	r16
    ae64:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    ae66:	c8 01       	movw	r24, r16
    ae68:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    ae6c:	89 2b       	or	r24, r25
    ae6e:	a9 f3       	breq	.-22     	; 0xae5a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    ae70:	0e 80       	ldd	r0, Y+6	; 0x06
    ae72:	df 81       	ldd	r29, Y+7	; 0x07
    ae74:	c0 2d       	mov	r28, r0
    ae76:	e4 cf       	rjmp	.-56     	; 0xae40 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    ae78:	d0 e0       	ldi	r29, 0x00	; 0
    ae7a:	c0 e0       	ldi	r28, 0x00	; 0
    ae7c:	ee cf       	rjmp	.-36     	; 0xae5a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>

0000ae7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    ae7e:	4f 92       	push	r4
    ae80:	5f 92       	push	r5
    ae82:	6f 92       	push	r6
    ae84:	7f 92       	push	r7
    ae86:	8f 92       	push	r8
    ae88:	9f 92       	push	r9
    ae8a:	af 92       	push	r10
    ae8c:	bf 92       	push	r11
    ae8e:	df 92       	push	r13
    ae90:	ef 92       	push	r14
    ae92:	ff 92       	push	r15
    ae94:	0f 93       	push	r16
    ae96:	1f 93       	push	r17
    ae98:	cf 93       	push	r28
    ae9a:	df 93       	push	r29
    ae9c:	cd b7       	in	r28, 0x3d	; 61
    ae9e:	de b7       	in	r29, 0x3e	; 62
    aea0:	c4 54       	subi	r28, 0x44	; 68
    aea2:	d1 09       	sbc	r29, r1
    aea4:	0f b6       	in	r0, 0x3f	; 63
    aea6:	f8 94       	cli
    aea8:	de bf       	out	0x3e, r29	; 62
    aeaa:	0f be       	out	0x3f, r0	; 63
    aeac:	cd bf       	out	0x3d, r28	; 61
    aeae:	8c 01       	movw	r16, r24
    aeb0:	4a 01       	movw	r8, r20
    aeb2:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    aeb4:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    aeb8:	00 97       	sbiw	r24, 0x00	; 0
    aeba:	09 f0       	breq	.+2      	; 0xaebe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    aebc:	b0 c0       	rjmp	.+352    	; 0xb01e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    aebe:	c8 01       	movw	r24, r16
    aec0:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    aec4:	75 01       	movw	r14, r10
    aec6:	8b 35       	cpi	r24, 0x5B	; 91
    aec8:	49 f1       	breq	.+82     	; 0xaf1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    aeca:	8b 37       	cpi	r24, 0x7B	; 123
    aecc:	09 f4       	brne	.+2      	; 0xaed0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    aece:	d2 c0       	rjmp	.+420    	; 0xb074 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    aed0:	c8 01       	movw	r24, r16
    aed2:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    aed6:	87 32       	cpi	r24, 0x27	; 39
    aed8:	09 f4       	brne	.+2      	; 0xaedc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    aeda:	eb c1       	rjmp	.+982    	; 0xb2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    aedc:	82 32       	cpi	r24, 0x22	; 34
    aede:	09 f4       	brne	.+2      	; 0xaee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    aee0:	e8 c1       	rjmp	.+976    	; 0xb2b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    aee2:	c8 01       	movw	r24, r16
    aee4:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    aee8:	b8 2e       	mov	r11, r24
    aeea:	ce 01       	movw	r24, r28
    aeec:	01 96       	adiw	r24, 0x01	; 1
    aeee:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    aef0:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    aef2:	8b 2d       	mov	r24, r11
    aef4:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    aef8:	88 23       	and	r24, r24
    aefa:	09 f4       	brne	.+2      	; 0xaefe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    aefc:	f5 c1       	rjmp	.+1002   	; 0xb2e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    aefe:	bf e3       	ldi	r27, 0x3F	; 63
    af00:	db 16       	cp	r13, r27
    af02:	09 f4       	brne	.+2      	; 0xaf06 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    af04:	f1 c1       	rjmp	.+994    	; 0xb2e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    af06:	f8 01       	movw	r30, r16
    af08:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    af0a:	d3 94       	inc	r13
    af0c:	d4 01       	movw	r26, r8
    af0e:	bd 92       	st	X+, r11
    af10:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    af12:	c8 01       	movw	r24, r16
    af14:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    af18:	b8 2e       	mov	r11, r24
    af1a:	eb cf       	rjmp	.-42     	; 0xaef2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    af1c:	d8 01       	movw	r26, r16
    af1e:	16 96       	adiw	r26, 0x06	; 6
    af20:	8c 91       	ld	r24, X
    af22:	88 23       	and	r24, r24
    af24:	09 f4       	brne	.+2      	; 0xaf28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    af26:	c1 c1       	rjmp	.+898    	; 0xb2aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    af28:	a1 14       	cp	r10, r1
    af2a:	b1 04       	cpc	r11, r1
    af2c:	09 f4       	brne	.+2      	; 0xaf30 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    af2e:	2d c1       	rjmp	.+602    	; 0xb18a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    af30:	88 e0       	ldi	r24, 0x08	; 8
    af32:	90 e0       	ldi	r25, 0x00	; 0
    af34:	f5 01       	movw	r30, r10
    af36:	91 83       	std	Z+1, r25	; 0x01
    af38:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    af3a:	13 82       	std	Z+3, r1	; 0x03
    af3c:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    af3e:	15 82       	std	Z+5, r1	; 0x05
    af40:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    af42:	c8 01       	movw	r24, r16
    af44:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    af48:	8b 35       	cpi	r24, 0x5B	; 91
    af4a:	09 f0       	breq	.+2      	; 0xaf4e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    af4c:	ef c0       	rjmp	.+478    	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    af4e:	d8 01       	movw	r26, r16
    af50:	18 96       	adiw	r26, 0x08	; 8
    af52:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    af54:	c8 01       	movw	r24, r16
    af56:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    af5a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    af5c:	89 2b       	or	r24, r25
    af5e:	09 f0       	breq	.+2      	; 0xaf62 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    af60:	5d c0       	rjmp	.+186    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    af62:	c8 01       	movw	r24, r16
    af64:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    af68:	8d 35       	cpi	r24, 0x5D	; 93
    af6a:	09 f4       	brne	.+2      	; 0xaf6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    af6c:	55 c0       	rjmp	.+170    	; 0xb018 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    af6e:	8c e0       	ldi	r24, 0x0C	; 12
    af70:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    af72:	d4 01       	movw	r26, r8
    af74:	ed 91       	ld	r30, X+
    af76:	fc 91       	ld	r31, X
    af78:	01 90       	ld	r0, Z+
    af7a:	f0 81       	ld	r31, Z
    af7c:	e0 2d       	mov	r30, r0
    af7e:	6c e0       	ldi	r22, 0x0C	; 12
    af80:	70 e0       	ldi	r23, 0x00	; 0
    af82:	c4 01       	movw	r24, r8
    af84:	19 95       	eicall
    af86:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    af88:	00 97       	sbiw	r24, 0x00	; 0
    af8a:	09 f4       	brne	.+2      	; 0xaf8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    af8c:	64 c0       	rjmp	.+200    	; 0xb056 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    af8e:	dc 01       	movw	r26, r24
    af90:	2d 2d       	mov	r18, r13
    af92:	1d 92       	st	X+, r1
    af94:	2a 95       	dec	r18
    af96:	e9 f7       	brne	.-6      	; 0xaf92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    af98:	11 82       	std	Z+1, r1	; 0x01
    af9a:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    af9c:	d7 01       	movw	r26, r14
    af9e:	14 96       	adiw	r26, 0x04	; 4
    afa0:	8d 91       	ld	r24, X+
    afa2:	9c 91       	ld	r25, X
    afa4:	15 97       	sbiw	r26, 0x05	; 5
    afa6:	00 97       	sbiw	r24, 0x00	; 0
    afa8:	09 f4       	brne	.+2      	; 0xafac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    afaa:	50 c0       	rjmp	.+160    	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    afac:	91 87       	std	Z+9, r25	; 0x09
    afae:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    afb0:	14 96       	adiw	r26, 0x04	; 4
    afb2:	8d 91       	ld	r24, X+
    afb4:	9c 91       	ld	r25, X
    afb6:	dc 01       	movw	r26, r24
    afb8:	17 96       	adiw	r26, 0x07	; 7
    afba:	fc 93       	st	X, r31
    afbc:	ee 93       	st	-X, r30
    afbe:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    afc0:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    afc2:	15 96       	adiw	r26, 0x05	; 5
    afc4:	fc 93       	st	X, r31
    afc6:	ee 93       	st	-X, r30
    afc8:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    afca:	98 2d       	mov	r25, r8
    afcc:	89 2d       	mov	r24, r9
    afce:	49 2e       	mov	r4, r25
    afd0:	58 2e       	mov	r5, r24
    afd2:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    afd4:	ef 2b       	or	r30, r31
    afd6:	09 f4       	brne	.+2      	; 0xafda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    afd8:	d8 c0       	rjmp	.+432    	; 0xb18a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    afda:	f8 01       	movw	r30, r16
    afdc:	86 81       	ldd	r24, Z+6	; 0x06
    afde:	81 50       	subi	r24, 0x01	; 1
    afe0:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    afe2:	b3 01       	movw	r22, r6
    afe4:	a2 01       	movw	r20, r4
    afe6:	c8 01       	movw	r24, r16
    afe8:	0e 94 3f 57 	call	0xae7e	; 0xae7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    afec:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    afee:	d8 01       	movw	r26, r16
    aff0:	16 96       	adiw	r26, 0x06	; 6
    aff2:	8c 91       	ld	r24, X
    aff4:	16 97       	sbiw	r26, 0x06	; 6
    aff6:	8f 5f       	subi	r24, 0xFF	; 255
    aff8:	16 96       	adiw	r26, 0x06	; 6
    affa:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    affc:	a1 14       	cp	r10, r1
    affe:	b1 04       	cpc	r11, r1
    b000:	69 f4       	brne	.+26     	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    b002:	c8 01       	movw	r24, r16
    b004:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b008:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    b00a:	89 2b       	or	r24, r25
    b00c:	39 f4       	brne	.+14     	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b00e:	c8 01       	movw	r24, r16
    b010:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b014:	8d 35       	cpi	r24, 0x5D	; 93
    b016:	21 f5       	brne	.+72     	; 0xb060 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b018:	f8 01       	movw	r30, r16
    b01a:	10 86       	std	Z+8, r1	; 0x08
    b01c:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    b01e:	cc 5b       	subi	r28, 0xBC	; 188
    b020:	df 4f       	sbci	r29, 0xFF	; 255
    b022:	0f b6       	in	r0, 0x3f	; 63
    b024:	f8 94       	cli
    b026:	de bf       	out	0x3e, r29	; 62
    b028:	0f be       	out	0x3f, r0	; 63
    b02a:	cd bf       	out	0x3d, r28	; 61
    b02c:	df 91       	pop	r29
    b02e:	cf 91       	pop	r28
    b030:	1f 91       	pop	r17
    b032:	0f 91       	pop	r16
    b034:	ff 90       	pop	r15
    b036:	ef 90       	pop	r14
    b038:	df 90       	pop	r13
    b03a:	bf 90       	pop	r11
    b03c:	af 90       	pop	r10
    b03e:	9f 90       	pop	r9
    b040:	8f 90       	pop	r8
    b042:	7f 90       	pop	r7
    b044:	6f 90       	pop	r6
    b046:	5f 90       	pop	r5
    b048:	4f 90       	pop	r4
    b04a:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    b04c:	13 96       	adiw	r26, 0x03	; 3
    b04e:	fc 93       	st	X, r31
    b050:	ee 93       	st	-X, r30
    b052:	12 97       	sbiw	r26, 0x02	; 2
    b054:	b6 cf       	rjmp	.-148    	; 0xafc2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    b056:	f0 e0       	ldi	r31, 0x00	; 0
    b058:	e0 e0       	ldi	r30, 0x00	; 0
    b05a:	90 e0       	ldi	r25, 0x00	; 0
    b05c:	80 e0       	ldi	r24, 0x00	; 0
    b05e:	b7 cf       	rjmp	.-146    	; 0xafce <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b060:	c8 01       	movw	r24, r16
    b062:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b066:	8c 32       	cpi	r24, 0x2C	; 44
    b068:	09 f0       	breq	.+2      	; 0xb06c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    b06a:	60 c0       	rjmp	.+192    	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b06c:	d8 01       	movw	r26, r16
    b06e:	18 96       	adiw	r26, 0x08	; 8
    b070:	1c 92       	st	X, r1
    b072:	7f cf       	rjmp	.-258    	; 0xaf72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    b074:	f8 01       	movw	r30, r16
    b076:	86 81       	ldd	r24, Z+6	; 0x06
    b078:	88 23       	and	r24, r24
    b07a:	09 f4       	brne	.+2      	; 0xb07e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    b07c:	16 c1       	rjmp	.+556    	; 0xb2aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    b07e:	a1 14       	cp	r10, r1
    b080:	b1 04       	cpc	r11, r1
    b082:	09 f4       	brne	.+2      	; 0xb086 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    b084:	82 c0       	rjmp	.+260    	; 0xb18a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    b086:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    b088:	89 e0       	ldi	r24, 0x09	; 9
    b08a:	90 e0       	ldi	r25, 0x00	; 0
    b08c:	d5 01       	movw	r26, r10
    b08e:	11 96       	adiw	r26, 0x01	; 1
    b090:	9c 93       	st	X, r25
    b092:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    b094:	13 96       	adiw	r26, 0x03	; 3
    b096:	1c 92       	st	X, r1
    b098:	1e 92       	st	-X, r1
    b09a:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    b09c:	15 96       	adiw	r26, 0x05	; 5
    b09e:	1c 92       	st	X, r1
    b0a0:	1e 92       	st	-X, r1
    b0a2:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    b0a4:	45 01       	movw	r8, r10
    b0a6:	b2 e0       	ldi	r27, 0x02	; 2
    b0a8:	8b 0e       	add	r8, r27
    b0aa:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b0ac:	c8 01       	movw	r24, r16
    b0ae:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b0b2:	8b 37       	cpi	r24, 0x7B	; 123
    b0b4:	d9 f5       	brne	.+118    	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b0b6:	f8 01       	movw	r30, r16
    b0b8:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    b0ba:	c8 01       	movw	r24, r16
    b0bc:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b0c0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    b0c2:	89 2b       	or	r24, r25
    b0c4:	09 f0       	breq	.+2      	; 0xb0c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    b0c6:	aa cf       	rjmp	.-172    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b0c8:	c8 01       	movw	r24, r16
    b0ca:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b0ce:	8d 37       	cpi	r24, 0x7D	; 125
    b0d0:	09 f4       	brne	.+2      	; 0xb0d4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    b0d2:	9c c0       	rjmp	.+312    	; 0xb20c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    b0d4:	bc e0       	ldi	r27, 0x0C	; 12
    b0d6:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    b0d8:	c8 01       	movw	r24, r16
    b0da:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    b0de:	87 32       	cpi	r24, 0x27	; 39
    b0e0:	79 f0       	breq	.+30     	; 0xb100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    b0e2:	82 32       	cpi	r24, 0x22	; 34
    b0e4:	69 f0       	breq	.+26     	; 0xb100 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    b0e6:	f8 01       	movw	r30, r16
    b0e8:	a4 80       	ldd	r10, Z+4	; 0x04
    b0ea:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    b0ec:	c8 01       	movw	r24, r16
    b0ee:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b0f2:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    b0f4:	81 11       	cpse	r24, r1
    b0f6:	1e c0       	rjmp	.+60     	; 0xb134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    b0f8:	aa 24       	eor	r10, r10
    b0fa:	a3 94       	inc	r10
    b0fc:	b1 2c       	mov	r11, r1
    b0fe:	8e cf       	rjmp	.-228    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    b100:	be 01       	movw	r22, r28
    b102:	6f 5f       	subi	r22, 0xFF	; 255
    b104:	7f 4f       	sbci	r23, 0xFF	; 255
    b106:	c8 01       	movw	r24, r16
    b108:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    b10c:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    b10e:	89 2b       	or	r24, r25
    b110:	09 f0       	breq	.+2      	; 0xb114 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    b112:	84 cf       	rjmp	.-248    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    b114:	c8 01       	movw	r24, r16
    b116:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b11a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    b11c:	89 2b       	or	r24, r25
    b11e:	09 f0       	breq	.+2      	; 0xb122 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    b120:	7d cf       	rjmp	.-262    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b122:	c8 01       	movw	r24, r16
    b124:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b128:	8a 33       	cpi	r24, 0x3A	; 58
    b12a:	99 f1       	breq	.+102    	; 0xb192 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    b12c:	72 e0       	ldi	r23, 0x02	; 2
    b12e:	a7 2e       	mov	r10, r23
    b130:	b1 2c       	mov	r11, r1
    b132:	74 cf       	rjmp	.-280    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    b134:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    b138:	88 23       	and	r24, r24
    b13a:	c1 f3       	breq	.-16     	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b13c:	d8 01       	movw	r26, r16
    b13e:	18 96       	adiw	r26, 0x08	; 8
    b140:	1c 92       	st	X, r1
    b142:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    b144:	14 96       	adiw	r26, 0x04	; 4
    b146:	ed 91       	ld	r30, X+
    b148:	fc 91       	ld	r31, X
    b14a:	15 97       	sbiw	r26, 0x05	; 5
    b14c:	cf 01       	movw	r24, r30
    b14e:	01 96       	adiw	r24, 0x01	; 1
    b150:	15 96       	adiw	r26, 0x05	; 5
    b152:	9c 93       	st	X, r25
    b154:	8e 93       	st	-X, r24
    b156:	14 97       	sbiw	r26, 0x04	; 4
    b158:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    b15a:	c8 01       	movw	r24, r16
    b15c:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b160:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    b162:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    b166:	81 11       	cpse	r24, r1
    b168:	e9 cf       	rjmp	.-46     	; 0xb13c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    b16a:	d8 01       	movw	r26, r16
    b16c:	14 96       	adiw	r26, 0x04	; 4
    b16e:	ed 91       	ld	r30, X+
    b170:	fc 91       	ld	r31, X
    b172:	15 97       	sbiw	r26, 0x05	; 5
    b174:	cf 01       	movw	r24, r30
    b176:	01 96       	adiw	r24, 0x01	; 1
    b178:	15 96       	adiw	r26, 0x05	; 5
    b17a:	9c 93       	st	X, r25
    b17c:	8e 93       	st	-X, r24
    b17e:	14 97       	sbiw	r26, 0x04	; 4
    b180:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    b182:	ba 82       	std	Y+2, r11	; 0x02
    b184:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    b186:	ab 28       	or	r10, r11
    b188:	29 f6       	brne	.-118    	; 0xb114 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    b18a:	e3 e0       	ldi	r30, 0x03	; 3
    b18c:	ae 2e       	mov	r10, r30
    b18e:	b1 2c       	mov	r11, r1
    b190:	45 cf       	rjmp	.-374    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b192:	f8 01       	movw	r30, r16
    b194:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    b196:	a9 80       	ldd	r10, Y+1	; 0x01
    b198:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    b19a:	a1 14       	cp	r10, r1
    b19c:	b1 04       	cpc	r11, r1
    b19e:	d1 f5       	brne	.+116    	; 0xb214 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b1a0:	90 e0       	ldi	r25, 0x00	; 0
    b1a2:	80 e0       	ldi	r24, 0x00	; 0
    b1a4:	30 e0       	ldi	r19, 0x00	; 0
    b1a6:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    b1a8:	22 96       	adiw	r28, 0x02	; 2
    b1aa:	3f af       	std	Y+63, r19	; 0x3f
    b1ac:	22 97       	sbiw	r28, 0x02	; 2
    b1ae:	23 96       	adiw	r28, 0x03	; 3
    b1b0:	2f af       	std	Y+63, r18	; 0x3f
    b1b2:	23 97       	sbiw	r28, 0x03	; 3
    b1b4:	25 96       	adiw	r28, 0x05	; 5
    b1b6:	9f af       	std	Y+63, r25	; 0x3f
    b1b8:	8e af       	std	Y+62, r24	; 0x3e
    b1ba:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    b1bc:	89 2b       	or	r24, r25
    b1be:	29 f3       	breq	.-54     	; 0xb18a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    b1c0:	d8 01       	movw	r26, r16
    b1c2:	16 96       	adiw	r26, 0x06	; 6
    b1c4:	8c 91       	ld	r24, X
    b1c6:	16 97       	sbiw	r26, 0x06	; 6
    b1c8:	81 50       	subi	r24, 0x01	; 1
    b1ca:	16 96       	adiw	r26, 0x06	; 6
    b1cc:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    b1ce:	25 96       	adiw	r28, 0x05	; 5
    b1d0:	4c ad       	ldd	r20, Y+60	; 0x3c
    b1d2:	5d ad       	ldd	r21, Y+61	; 0x3d
    b1d4:	6e ad       	ldd	r22, Y+62	; 0x3e
    b1d6:	7f ad       	ldd	r23, Y+63	; 0x3f
    b1d8:	25 97       	sbiw	r28, 0x05	; 5
    b1da:	c8 01       	movw	r24, r16
    b1dc:	0e 94 3f 57 	call	0xae7e	; 0xae7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    b1e0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    b1e2:	f8 01       	movw	r30, r16
    b1e4:	86 81       	ldd	r24, Z+6	; 0x06
    b1e6:	8f 5f       	subi	r24, 0xFF	; 255
    b1e8:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    b1ea:	a1 14       	cp	r10, r1
    b1ec:	b1 04       	cpc	r11, r1
    b1ee:	09 f0       	breq	.+2      	; 0xb1f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    b1f0:	15 cf       	rjmp	.-470    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    b1f2:	c8 01       	movw	r24, r16
    b1f4:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b1f8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    b1fa:	89 2b       	or	r24, r25
    b1fc:	09 f0       	breq	.+2      	; 0xb200 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    b1fe:	0e cf       	rjmp	.-484    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b200:	c8 01       	movw	r24, r16
    b202:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b206:	8d 37       	cpi	r24, 0x7D	; 125
    b208:	09 f0       	breq	.+2      	; 0xb20c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    b20a:	3f c0       	rjmp	.+126    	; 0xb28a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b20c:	d8 01       	movw	r26, r16
    b20e:	18 96       	adiw	r26, 0x08	; 8
    b210:	1c 92       	st	X, r1
    b212:	04 cf       	rjmp	.-504    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    b214:	b5 01       	movw	r22, r10
    b216:	c4 01       	movw	r24, r8
    b218:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    b21c:	00 97       	sbiw	r24, 0x00	; 0
    b21e:	49 f5       	brne	.+82     	; 0xb272 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    b220:	d3 01       	movw	r26, r6
    b222:	ed 91       	ld	r30, X+
    b224:	fc 91       	ld	r31, X
    b226:	01 90       	ld	r0, Z+
    b228:	f0 81       	ld	r31, Z
    b22a:	e0 2d       	mov	r30, r0
    b22c:	6c e0       	ldi	r22, 0x0C	; 12
    b22e:	70 e0       	ldi	r23, 0x00	; 0
    b230:	c3 01       	movw	r24, r6
    b232:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    b234:	00 97       	sbiw	r24, 0x00	; 0
    b236:	09 f4       	brne	.+2      	; 0xb23a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    b238:	b3 cf       	rjmp	.-154    	; 0xb1a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    b23a:	fc 01       	movw	r30, r24
    b23c:	25 2d       	mov	r18, r5
    b23e:	11 92       	st	Z+, r1
    b240:	2a 95       	dec	r18
    b242:	e9 f7       	brne	.-6      	; 0xb23e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    b244:	dc 01       	movw	r26, r24
    b246:	1d 92       	st	X+, r1
    b248:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    b24a:	d7 01       	movw	r26, r14
    b24c:	14 96       	adiw	r26, 0x04	; 4
    b24e:	ed 91       	ld	r30, X+
    b250:	fc 91       	ld	r31, X
    b252:	15 97       	sbiw	r26, 0x05	; 5
    b254:	30 97       	sbiw	r30, 0x00	; 0
    b256:	81 f0       	breq	.+32     	; 0xb278 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    b258:	dc 01       	movw	r26, r24
    b25a:	19 96       	adiw	r26, 0x09	; 9
    b25c:	fc 93       	st	X, r31
    b25e:	ee 93       	st	-X, r30
    b260:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    b262:	97 83       	std	Z+7, r25	; 0x07
    b264:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    b266:	f7 01       	movw	r30, r14
    b268:	95 83       	std	Z+5, r25	; 0x05
    b26a:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    b26c:	fc 01       	movw	r30, r24
    b26e:	b3 86       	std	Z+11, r11	; 0x0b
    b270:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    b272:	36 2d       	mov	r19, r6
    b274:	27 2d       	mov	r18, r7
    b276:	98 cf       	rjmp	.-208    	; 0xb1a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    b278:	13 96       	adiw	r26, 0x03	; 3
    b27a:	9c 93       	st	X, r25
    b27c:	8e 93       	st	-X, r24
    b27e:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    b280:	15 96       	adiw	r26, 0x05	; 5
    b282:	9c 93       	st	X, r25
    b284:	8e 93       	st	-X, r24
    b286:	14 97       	sbiw	r26, 0x04	; 4
    b288:	f1 cf       	rjmp	.-30     	; 0xb26c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b28a:	c8 01       	movw	r24, r16
    b28c:	0e 94 61 4f 	call	0x9ec2	; 0x9ec2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b290:	8c 32       	cpi	r24, 0x2C	; 44
    b292:	09 f0       	breq	.+2      	; 0xb296 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    b294:	4b cf       	rjmp	.-362    	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b296:	f8 01       	movw	r30, r16
    b298:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    b29a:	c8 01       	movw	r24, r16
    b29c:	0e 94 c8 4f 	call	0x9f90	; 0x9f90 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b2a0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    b2a2:	89 2b       	or	r24, r25
    b2a4:	09 f4       	brne	.+2      	; 0xb2a8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    b2a6:	18 cf       	rjmp	.-464    	; 0xb0d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    b2a8:	b9 ce       	rjmp	.-654    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    b2aa:	f5 e0       	ldi	r31, 0x05	; 5
    b2ac:	af 2e       	mov	r10, r31
    b2ae:	b1 2c       	mov	r11, r1
    b2b0:	b5 ce       	rjmp	.-662    	; 0xb01c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    b2b2:	be 01       	movw	r22, r28
    b2b4:	6f 5f       	subi	r22, 0xFF	; 255
    b2b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b2b8:	c8 01       	movw	r24, r16
    b2ba:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    b2be:	00 97       	sbiw	r24, 0x00	; 0
    b2c0:	09 f0       	breq	.+2      	; 0xb2c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    b2c2:	ad ce       	rjmp	.-678    	; 0xb01e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    b2c4:	e1 14       	cp	r14, r1
    b2c6:	f1 04       	cpc	r15, r1
    b2c8:	61 f0       	breq	.+24     	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    b2ca:	89 81       	ldd	r24, Y+1	; 0x01
    b2cc:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    b2ce:	23 e0       	ldi	r18, 0x03	; 3
    b2d0:	30 e0       	ldi	r19, 0x00	; 0
    b2d2:	d7 01       	movw	r26, r14
    b2d4:	11 96       	adiw	r26, 0x01	; 1
    b2d6:	3c 93       	st	X, r19
    b2d8:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    b2da:	13 96       	adiw	r26, 0x03	; 3
    b2dc:	9c 93       	st	X, r25
    b2de:	8e 93       	st	-X, r24
    b2e0:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    b2e2:	90 e0       	ldi	r25, 0x00	; 0
    b2e4:	80 e0       	ldi	r24, 0x00	; 0
    b2e6:	9b ce       	rjmp	.-714    	; 0xb01e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    b2e8:	e1 e0       	ldi	r30, 0x01	; 1
    b2ea:	f0 e0       	ldi	r31, 0x00	; 0
    b2ec:	ec 0f       	add	r30, r28
    b2ee:	fd 1f       	adc	r31, r29
    b2f0:	ed 0d       	add	r30, r13
    b2f2:	f1 1d       	adc	r31, r1
    b2f4:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    b2f6:	19 81       	ldd	r17, Y+1	; 0x01
    b2f8:	11 23       	and	r17, r17
    b2fa:	09 f4       	brne	.+2      	; 0xb2fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    b2fc:	51 c0       	rjmp	.+162    	; 0xb3a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    b2fe:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b300:	1d 32       	cpi	r17, 0x2D	; 45
    b302:	71 f1       	breq	.+92     	; 0xb360 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    b304:	1b 32       	cpi	r17, 0x2B	; 43
    b306:	61 f1       	breq	.+88     	; 0xb360 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    b308:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    b30a:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b30c:	90 ed       	ldi	r25, 0xD0	; 208
    b30e:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    b310:	9a 30       	cpi	r25, 0x0A	; 10
    b312:	d8 f3       	brcs	.-10     	; 0xb30a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    b314:	81 11       	cpse	r24, r1
    b316:	44 c0       	rjmp	.+136    	; 0xb3a0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    b318:	14 37       	cpi	r17, 0x74	; 116
    b31a:	09 f4       	brne	.+2      	; 0xb31e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    b31c:	dd c1       	rjmp	.+954    	; 0xb6d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    b31e:	1b 32       	cpi	r17, 0x2B	; 43
    b320:	09 f1       	breq	.+66     	; 0xb364 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    b322:	1d 32       	cpi	r17, 0x2D	; 45
    b324:	19 f1       	breq	.+70     	; 0xb36c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    b326:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    b328:	fe 01       	movw	r30, r28
    b32a:	31 96       	adiw	r30, 0x01	; 1
    b32c:	20 e0       	ldi	r18, 0x00	; 0
    b32e:	30 e0       	ldi	r19, 0x00	; 0
    b330:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    b332:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b334:	80 ed       	ldi	r24, 0xD0	; 208
    b336:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    b338:	8a 30       	cpi	r24, 0x0A	; 10
    b33a:	d0 f4       	brcc	.+52     	; 0xb370 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    b33c:	aa e0       	ldi	r26, 0x0A	; 10
    b33e:	b0 e0       	ldi	r27, 0x00	; 0
    b340:	0e 94 dc fb 	call	0x1f7b8	; 0x1f7b8 <__muluhisi3>
    b344:	20 2f       	mov	r18, r16
    b346:	00 0f       	add	r16, r16
    b348:	33 0b       	sbc	r19, r19
    b34a:	20 53       	subi	r18, 0x30	; 48
    b34c:	31 09       	sbc	r19, r1
    b34e:	03 2e       	mov	r0, r19
    b350:	00 0c       	add	r0, r0
    b352:	44 0b       	sbc	r20, r20
    b354:	55 0b       	sbc	r21, r21
    b356:	26 0f       	add	r18, r22
    b358:	37 1f       	adc	r19, r23
    b35a:	48 1f       	adc	r20, r24
    b35c:	59 1f       	adc	r21, r25
    b35e:	e9 cf       	rjmp	.-46     	; 0xb332 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    b360:	32 96       	adiw	r30, 0x02	; 2
    b362:	d3 cf       	rjmp	.-90     	; 0xb30a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    b364:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    b366:	fe 01       	movw	r30, r28
    b368:	32 96       	adiw	r30, 0x02	; 2
    b36a:	e0 cf       	rjmp	.-64     	; 0xb32c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    b36c:	11 e0       	ldi	r17, 0x01	; 1
    b36e:	fb cf       	rjmp	.-10     	; 0xb366 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    b370:	11 23       	and	r17, r17
    b372:	09 f4       	brne	.+2      	; 0xb376 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    b374:	b5 c1       	rjmp	.+874    	; 0xb6e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    b376:	e1 14       	cp	r14, r1
    b378:	f1 04       	cpc	r15, r1
    b37a:	09 f4       	brne	.+2      	; 0xb37e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    b37c:	b2 cf       	rjmp	.-156    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    b37e:	87 e0       	ldi	r24, 0x07	; 7
    b380:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    b382:	21 15       	cp	r18, r1
    b384:	31 05       	cpc	r19, r1
    b386:	41 05       	cpc	r20, r1
    b388:	51 05       	cpc	r21, r1
    b38a:	11 f4       	brne	.+4      	; 0xb390 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    b38c:	86 e0       	ldi	r24, 0x06	; 6
    b38e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    b390:	f7 01       	movw	r30, r14
    b392:	91 83       	std	Z+1, r25	; 0x01
    b394:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    b396:	22 83       	std	Z+2, r18	; 0x02
    b398:	33 83       	std	Z+3, r19	; 0x03
    b39a:	44 83       	std	Z+4, r20	; 0x04
    b39c:	55 83       	std	Z+5, r21	; 0x05
    b39e:	a1 cf       	rjmp	.-190    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    b3a0:	65 e4       	ldi	r22, 0x45	; 69
    b3a2:	73 e0       	ldi	r23, 0x03	; 3
    b3a4:	ce 01       	movw	r24, r28
    b3a6:	01 96       	adiw	r24, 0x01	; 1
    b3a8:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    b3ac:	89 2b       	or	r24, r25
    b3ae:	09 f4       	brne	.+2      	; 0xb3b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    b3b0:	46 c0       	rjmp	.+140    	; 0xb43e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    b3b2:	5e 01       	movw	r10, r28
    b3b4:	f2 e0       	ldi	r31, 0x02	; 2
    b3b6:	af 0e       	add	r10, r31
    b3b8:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b3ba:	1d 32       	cpi	r17, 0x2D	; 45
    b3bc:	49 f0       	breq	.+18     	; 0xb3d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    b3be:	fe 01       	movw	r30, r28
    b3c0:	31 96       	adiw	r30, 0x01	; 1
    b3c2:	5f 01       	movw	r10, r30
    b3c4:	1b 32       	cpi	r17, 0x2B	; 43
    b3c6:	21 f4       	brne	.+8      	; 0xb3d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    b3c8:	5e 01       	movw	r10, r28
    b3ca:	22 e0       	ldi	r18, 0x02	; 2
    b3cc:	a2 0e       	add	r10, r18
    b3ce:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    b3d0:	69 e4       	ldi	r22, 0x49	; 73
    b3d2:	73 e0       	ldi	r23, 0x03	; 3
    b3d4:	c5 01       	movw	r24, r10
    b3d6:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    b3da:	89 2b       	or	r24, r25
    b3dc:	81 f1       	breq	.+96     	; 0xb43e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    b3de:	d5 01       	movw	r26, r10
    b3e0:	8c 91       	ld	r24, X
    b3e2:	88 23       	and	r24, r24
    b3e4:	09 f4       	brne	.+2      	; 0xb3e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    b3e6:	3b c1       	rjmp	.+630    	; 0xb65e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    b3e8:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    b3ea:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b3ec:	90 ed       	ldi	r25, 0xD0	; 208
    b3ee:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    b3f0:	9a 30       	cpi	r25, 0x0A	; 10
    b3f2:	d0 f3       	brcs	.-12     	; 0xb3e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    b3f4:	8e 32       	cpi	r24, 0x2E	; 46
    b3f6:	41 f4       	brne	.+16     	; 0xb408 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    b3f8:	9d 01       	movw	r18, r26
    b3fa:	f9 01       	movw	r30, r18
    b3fc:	2f 5f       	subi	r18, 0xFF	; 255
    b3fe:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b400:	80 81       	ld	r24, Z
    b402:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    b404:	8a 30       	cpi	r24, 0x0A	; 10
    b406:	c8 f3       	brcs	.-14     	; 0xb3fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    b408:	80 81       	ld	r24, Z
    b40a:	8f 7d       	andi	r24, 0xDF	; 223
    b40c:	85 34       	cpi	r24, 0x45	; 69
    b40e:	a1 f4       	brne	.+40     	; 0xb438 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    b410:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b412:	8d 32       	cpi	r24, 0x2D	; 45
    b414:	09 f4       	brne	.+2      	; 0xb418 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    b416:	57 c0       	rjmp	.+174    	; 0xb4c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    b418:	8b 32       	cpi	r24, 0x2B	; 43
    b41a:	09 f4       	brne	.+2      	; 0xb41e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    b41c:	54 c0       	rjmp	.+168    	; 0xb4c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    b41e:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b420:	80 81       	ld	r24, Z
    b422:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    b424:	8a 30       	cpi	r24, 0x0A	; 10
    b426:	08 f0       	brcs	.+2      	; 0xb42a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    b428:	1a c1       	rjmp	.+564    	; 0xb65e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    b42a:	cf 01       	movw	r24, r30
    b42c:	fc 01       	movw	r30, r24
    b42e:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b430:	20 81       	ld	r18, Z
    b432:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    b434:	2a 30       	cpi	r18, 0x0A	; 10
    b436:	d0 f3       	brcs	.-12     	; 0xb42c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    b438:	80 81       	ld	r24, Z
    b43a:	81 11       	cpse	r24, r1
    b43c:	10 c1       	rjmp	.+544    	; 0xb65e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    b43e:	1b 32       	cpi	r17, 0x2B	; 43
    b440:	09 f4       	brne	.+2      	; 0xb444 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    b442:	43 c0       	rjmp	.+134    	; 0xb4ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    b444:	1d 32       	cpi	r17, 0x2D	; 45
    b446:	09 f0       	breq	.+2      	; 0xb44a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    b448:	47 c0       	rjmp	.+142    	; 0xb4d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    b44a:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    b44c:	dd 24       	eor	r13, r13
    b44e:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    b450:	5e 01       	movw	r10, r28
    b452:	b2 e0       	ldi	r27, 0x02	; 2
    b454:	ab 0e       	add	r10, r27
    b456:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    b458:	60 e0       	ldi	r22, 0x00	; 0
    b45a:	70 e0       	ldi	r23, 0x00	; 0
    b45c:	80 e8       	ldi	r24, 0x80	; 128
    b45e:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    b460:	14 37       	cpi	r17, 0x74	; 116
    b462:	09 f4       	brne	.+2      	; 0xb466 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    b464:	d2 c0       	rjmp	.+420    	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    b466:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b468:	60 e0       	ldi	r22, 0x00	; 0
    b46a:	70 e0       	ldi	r23, 0x00	; 0
    b46c:	80 ec       	ldi	r24, 0xC0	; 192
    b46e:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    b470:	1e 34       	cpi	r17, 0x4E	; 78
    b472:	09 f4       	brne	.+2      	; 0xb476 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    b474:	ca c0       	rjmp	.+404    	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    b476:	19 34       	cpi	r17, 0x49	; 73
    b478:	09 f4       	brne	.+2      	; 0xb47c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    b47a:	97 c0       	rjmp	.+302    	; 0xb5aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    b47c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    b47e:	20 e0       	ldi	r18, 0x00	; 0
    b480:	30 e0       	ldi	r19, 0x00	; 0
    b482:	a9 01       	movw	r20, r18
    b484:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    b486:	d5 01       	movw	r26, r10
    b488:	1d 91       	ld	r17, X+
    b48a:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b48c:	80 ed       	ldi	r24, 0xD0	; 208
    b48e:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    b490:	8a 30       	cpi	r24, 0x0A	; 10
    b492:	48 f5       	brcc	.+82     	; 0xb4e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    b494:	2c 3c       	cpi	r18, 0xCC	; 204
    b496:	bc ec       	ldi	r27, 0xCC	; 204
    b498:	3b 07       	cpc	r19, r27
    b49a:	bc e0       	ldi	r27, 0x0C	; 12
    b49c:	4b 07       	cpc	r20, r27
    b49e:	51 05       	cpc	r21, r1
    b4a0:	04 f5       	brge	.+64     	; 0xb4e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    b4a2:	aa e0       	ldi	r26, 0x0A	; 10
    b4a4:	b0 e0       	ldi	r27, 0x00	; 0
    b4a6:	0e 94 dc fb 	call	0x1f7b8	; 0x1f7b8 <__muluhisi3>
    b4aa:	21 2f       	mov	r18, r17
    b4ac:	11 0f       	add	r17, r17
    b4ae:	33 0b       	sbc	r19, r19
    b4b0:	20 53       	subi	r18, 0x30	; 48
    b4b2:	31 09       	sbc	r19, r1
    b4b4:	03 2e       	mov	r0, r19
    b4b6:	00 0c       	add	r0, r0
    b4b8:	44 0b       	sbc	r20, r20
    b4ba:	55 0b       	sbc	r21, r21
    b4bc:	26 0f       	add	r18, r22
    b4be:	37 1f       	adc	r19, r23
    b4c0:	48 1f       	adc	r20, r24
    b4c2:	59 1f       	adc	r21, r25
    b4c4:	df cf       	rjmp	.-66     	; 0xb484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    b4c6:	32 96       	adiw	r30, 0x02	; 2
    b4c8:	ab cf       	rjmp	.-170    	; 0xb420 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    b4ca:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    b4cc:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    b4ce:	5e 01       	movw	r10, r28
    b4d0:	e2 e0       	ldi	r30, 0x02	; 2
    b4d2:	ae 0e       	add	r10, r30
    b4d4:	b1 1c       	adc	r11, r1
    b4d6:	c0 cf       	rjmp	.-128    	; 0xb458 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    b4d8:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    b4da:	ce 01       	movw	r24, r28
    b4dc:	01 96       	adiw	r24, 0x01	; 1
    b4de:	5c 01       	movw	r10, r24
    b4e0:	bb cf       	rjmp	.-138    	; 0xb458 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    b4e2:	0f 5f       	subi	r16, 0xFF	; 255
    b4e4:	cf cf       	rjmp	.-98     	; 0xb484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    b4e6:	1e 32       	cpi	r17, 0x2E	; 46
    b4e8:	31 f5       	brne	.+76     	; 0xb536 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    b4ea:	5f 01       	movw	r10, r30
    b4ec:	8f ef       	ldi	r24, 0xFF	; 255
    b4ee:	a8 1a       	sub	r10, r24
    b4f0:	b8 0a       	sbc	r11, r24
    b4f2:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    b4f4:	d5 01       	movw	r26, r10
    b4f6:	1d 91       	ld	r17, X+
    b4f8:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b4fa:	80 ed       	ldi	r24, 0xD0	; 208
    b4fc:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    b4fe:	8a 30       	cpi	r24, 0x0A	; 10
    b500:	d0 f4       	brcc	.+52     	; 0xb536 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    b502:	2c 3c       	cpi	r18, 0xCC	; 204
    b504:	bc ec       	ldi	r27, 0xCC	; 204
    b506:	3b 07       	cpc	r19, r27
    b508:	bc e0       	ldi	r27, 0x0C	; 12
    b50a:	4b 07       	cpc	r20, r27
    b50c:	51 05       	cpc	r21, r1
    b50e:	8c f7       	brge	.-30     	; 0xb4f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    b510:	aa e0       	ldi	r26, 0x0A	; 10
    b512:	b0 e0       	ldi	r27, 0x00	; 0
    b514:	0e 94 dc fb 	call	0x1f7b8	; 0x1f7b8 <__muluhisi3>
    b518:	21 2f       	mov	r18, r17
    b51a:	11 0f       	add	r17, r17
    b51c:	33 0b       	sbc	r19, r19
    b51e:	20 53       	subi	r18, 0x30	; 48
    b520:	31 09       	sbc	r19, r1
    b522:	03 2e       	mov	r0, r19
    b524:	00 0c       	add	r0, r0
    b526:	44 0b       	sbc	r20, r20
    b528:	55 0b       	sbc	r21, r21
    b52a:	26 0f       	add	r18, r22
    b52c:	37 1f       	adc	r19, r23
    b52e:	48 1f       	adc	r20, r24
    b530:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    b532:	01 50       	subi	r16, 0x01	; 1
    b534:	de cf       	rjmp	.-68     	; 0xb4f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    b536:	80 81       	ld	r24, Z
    b538:	8f 7d       	andi	r24, 0xDF	; 223
    b53a:	00 2e       	mov	r0, r16
    b53c:	00 0c       	add	r0, r0
    b53e:	11 0b       	sbc	r17, r17
    b540:	85 34       	cpi	r24, 0x45	; 69
    b542:	09 f0       	breq	.+2      	; 0xb546 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    b544:	70 c0       	rjmp	.+224    	; 0xb626 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    b546:	81 81       	ldd	r24, Z+1	; 0x01
    b548:	8d 32       	cpi	r24, 0x2D	; 45
    b54a:	41 f5       	brne	.+80     	; 0xb59c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    b54c:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    b54e:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    b550:	90 e0       	ldi	r25, 0x00	; 0
    b552:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    b554:	6a e0       	ldi	r22, 0x0A	; 10
    b556:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    b558:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b55a:	60 ed       	ldi	r22, 0xD0	; 208
    b55c:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    b55e:	6a 30       	cpi	r22, 0x0A	; 10
    b560:	78 f5       	brcc	.+94     	; 0xb5c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    b562:	b8 9e       	mul	r11, r24
    b564:	b0 01       	movw	r22, r0
    b566:	b9 9e       	mul	r11, r25
    b568:	70 0d       	add	r23, r0
    b56a:	11 24       	eor	r1, r1
    b56c:	8a 2f       	mov	r24, r26
    b56e:	aa 0f       	add	r26, r26
    b570:	99 0b       	sbc	r25, r25
    b572:	c0 97       	sbiw	r24, 0x30	; 48
    b574:	86 0f       	add	r24, r22
    b576:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    b578:	b8 01       	movw	r22, r16
    b57a:	68 0f       	add	r22, r24
    b57c:	79 1f       	adc	r23, r25
    b57e:	67 32       	cpi	r22, 0x27	; 39
    b580:	71 05       	cpc	r23, r1
    b582:	54 f3       	brlt	.-44     	; 0xb558 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    b584:	bb 23       	and	r27, r27
    b586:	89 f0       	breq	.+34     	; 0xb5aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    b588:	60 e0       	ldi	r22, 0x00	; 0
    b58a:	70 e0       	ldi	r23, 0x00	; 0
    b58c:	80 e0       	ldi	r24, 0x00	; 0
    b58e:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    b590:	d1 10       	cpse	r13, r1
    b592:	3b c0       	rjmp	.+118    	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b594:	60 e0       	ldi	r22, 0x00	; 0
    b596:	70 e0       	ldi	r23, 0x00	; 0
    b598:	cb 01       	movw	r24, r22
    b59a:	37 c0       	rjmp	.+110    	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    b59c:	8b 32       	cpi	r24, 0x2B	; 43
    b59e:	19 f0       	breq	.+6      	; 0xb5a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    b5a0:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    b5a2:	b0 e0       	ldi	r27, 0x00	; 0
    b5a4:	d5 cf       	rjmp	.-86     	; 0xb550 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    b5a6:	32 96       	adiw	r30, 0x02	; 2
    b5a8:	fc cf       	rjmp	.-8      	; 0xb5a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    b5aa:	60 e0       	ldi	r22, 0x00	; 0
    b5ac:	70 e0       	ldi	r23, 0x00	; 0
    b5ae:	80 e8       	ldi	r24, 0x80	; 128
    b5b0:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    b5b2:	d1 10       	cpse	r13, r1
    b5b4:	2a c0       	rjmp	.+84     	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    b5b6:	60 e0       	ldi	r22, 0x00	; 0
    b5b8:	70 e0       	ldi	r23, 0x00	; 0
    b5ba:	80 e8       	ldi	r24, 0x80	; 128
    b5bc:	9f e7       	ldi	r25, 0x7F	; 127
    b5be:	25 c0       	rjmp	.+74     	; 0xb60a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    b5c0:	bb 23       	and	r27, r27
    b5c2:	19 f0       	breq	.+6      	; 0xb5ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    b5c4:	91 95       	neg	r25
    b5c6:	81 95       	neg	r24
    b5c8:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    b5ca:	08 0f       	add	r16, r24
    b5cc:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    b5ce:	ca 01       	movw	r24, r20
    b5d0:	b9 01       	movw	r22, r18
    b5d2:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    b5d6:	10 16       	cp	r1, r16
    b5d8:	11 06       	cpc	r1, r17
    b5da:	44 f5       	brge	.+80     	; 0xb62c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    b5dc:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    b5de:	00 ff       	sbrs	r16, 0
    b5e0:	0c c0       	rjmp	.+24     	; 0xb5fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    b5e2:	24 e0       	ldi	r18, 0x04	; 4
    b5e4:	b2 9e       	mul	r11, r18
    b5e6:	f0 01       	movw	r30, r0
    b5e8:	11 24       	eor	r1, r1
    b5ea:	e6 5c       	subi	r30, 0xC6	; 198
    b5ec:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    b5ee:	20 81       	ld	r18, Z
    b5f0:	31 81       	ldd	r19, Z+1	; 0x01
    b5f2:	42 81       	ldd	r20, Z+2	; 0x02
    b5f4:	53 81       	ldd	r21, Z+3	; 0x03
    b5f6:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    b5fa:	15 95       	asr	r17
    b5fc:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    b5fe:	b3 94       	inc	r11
    b600:	01 15       	cp	r16, r1
    b602:	11 05       	cpc	r17, r1
    b604:	61 f7       	brne	.-40     	; 0xb5de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    b606:	d1 10       	cpse	r13, r1
    b608:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    b60a:	e1 14       	cp	r14, r1
    b60c:	f1 04       	cpc	r15, r1
    b60e:	09 f4       	brne	.+2      	; 0xb612 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    b610:	68 ce       	rjmp	.-816    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    b612:	2a e0       	ldi	r18, 0x0A	; 10
    b614:	30 e0       	ldi	r19, 0x00	; 0
    b616:	f7 01       	movw	r30, r14
    b618:	31 83       	std	Z+1, r19	; 0x01
    b61a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    b61c:	62 83       	std	Z+2, r22	; 0x02
    b61e:	73 83       	std	Z+3, r23	; 0x03
    b620:	84 83       	std	Z+4, r24	; 0x04
    b622:	95 83       	std	Z+5, r25	; 0x05
    b624:	5e ce       	rjmp	.-836    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    b626:	90 e0       	ldi	r25, 0x00	; 0
    b628:	80 e0       	ldi	r24, 0x00	; 0
    b62a:	cf cf       	rjmp	.-98     	; 0xb5ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    b62c:	11 95       	neg	r17
    b62e:	01 95       	neg	r16
    b630:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    b632:	b1 2c       	mov	r11, r1
make_float():
    b634:	01 15       	cp	r16, r1
    b636:	11 05       	cpc	r17, r1
    b638:	31 f3       	breq	.-52     	; 0xb606 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    b63a:	00 ff       	sbrs	r16, 0
    b63c:	0c c0       	rjmp	.+24     	; 0xb656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    b63e:	a4 e0       	ldi	r26, 0x04	; 4
    b640:	ba 9e       	mul	r11, r26
    b642:	f0 01       	movw	r30, r0
    b644:	11 24       	eor	r1, r1
    b646:	ee 5d       	subi	r30, 0xDE	; 222
    b648:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    b64a:	20 81       	ld	r18, Z
    b64c:	31 81       	ldd	r19, Z+1	; 0x01
    b64e:	42 81       	ldd	r20, Z+2	; 0x02
    b650:	53 81       	ldd	r21, Z+3	; 0x03
    b652:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    b656:	15 95       	asr	r17
    b658:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    b65a:	b3 94       	inc	r11
    b65c:	eb cf       	rjmp	.-42     	; 0xb634 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    b65e:	62 e5       	ldi	r22, 0x52	; 82
    b660:	73 e0       	ldi	r23, 0x03	; 3
    b662:	ce 01       	movw	r24, r28
    b664:	01 96       	adiw	r24, 0x01	; 1
    b666:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    b66a:	89 2b       	or	r24, r25
    b66c:	91 f4       	brne	.+36     	; 0xb692 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    b66e:	e1 14       	cp	r14, r1
    b670:	f1 04       	cpc	r15, r1
    b672:	09 f4       	brne	.+2      	; 0xb676 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    b674:	36 ce       	rjmp	.-916    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    b676:	85 e0       	ldi	r24, 0x05	; 5
    b678:	90 e0       	ldi	r25, 0x00	; 0
    b67a:	f7 01       	movw	r30, r14
    b67c:	91 83       	std	Z+1, r25	; 0x01
    b67e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    b680:	81 e0       	ldi	r24, 0x01	; 1
    b682:	90 e0       	ldi	r25, 0x00	; 0
    b684:	a0 e0       	ldi	r26, 0x00	; 0
    b686:	b0 e0       	ldi	r27, 0x00	; 0
    b688:	82 83       	std	Z+2, r24	; 0x02
    b68a:	93 83       	std	Z+3, r25	; 0x03
    b68c:	a4 83       	std	Z+4, r26	; 0x04
    b68e:	b5 83       	std	Z+5, r27	; 0x05
    b690:	28 ce       	rjmp	.-944    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    b692:	67 e5       	ldi	r22, 0x57	; 87
    b694:	73 e0       	ldi	r23, 0x03	; 3
    b696:	ce 01       	movw	r24, r28
    b698:	01 96       	adiw	r24, 0x01	; 1
    b69a:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    b69e:	89 2b       	or	r24, r25
    b6a0:	79 f4       	brne	.+30     	; 0xb6c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    b6a2:	e1 14       	cp	r14, r1
    b6a4:	f1 04       	cpc	r15, r1
    b6a6:	09 f4       	brne	.+2      	; 0xb6aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    b6a8:	1c ce       	rjmp	.-968    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    b6aa:	85 e0       	ldi	r24, 0x05	; 5
    b6ac:	90 e0       	ldi	r25, 0x00	; 0
    b6ae:	d7 01       	movw	r26, r14
    b6b0:	8d 93       	st	X+, r24
    b6b2:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    b6b4:	f7 01       	movw	r30, r14
    b6b6:	12 82       	std	Z+2, r1	; 0x02
    b6b8:	13 82       	std	Z+3, r1	; 0x03
    b6ba:	14 82       	std	Z+4, r1	; 0x04
    b6bc:	15 82       	std	Z+5, r1	; 0x05
    b6be:	11 ce       	rjmp	.-990    	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    b6c0:	6d e5       	ldi	r22, 0x5D	; 93
    b6c2:	73 e0       	ldi	r23, 0x03	; 3
    b6c4:	ce 01       	movw	r24, r28
    b6c6:	01 96       	adiw	r24, 0x01	; 1
    b6c8:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
    b6cc:	89 2b       	or	r24, r25
    b6ce:	09 f4       	brne	.+2      	; 0xb6d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    b6d0:	08 ce       	rjmp	.-1008   	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    b6d2:	82 e0       	ldi	r24, 0x02	; 2
    b6d4:	90 e0       	ldi	r25, 0x00	; 0
    b6d6:	a3 cc       	rjmp	.-1722   	; 0xb01e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    b6d8:	21 e0       	ldi	r18, 0x01	; 1
    b6da:	30 e0       	ldi	r19, 0x00	; 0
    b6dc:	40 e0       	ldi	r20, 0x00	; 0
    b6de:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    b6e0:	e1 14       	cp	r14, r1
    b6e2:	f1 04       	cpc	r15, r1
    b6e4:	09 f0       	breq	.+2      	; 0xb6e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    b6e6:	52 ce       	rjmp	.-860    	; 0xb38c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    b6e8:	fc cd       	rjmp	.-1032   	; 0xb2e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

0000b6ea <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6155
/*

   Funkce ktera zobrazuje vsechny interni veliciny vhodne k diagnostice zarizeni
*/
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    b6ea:	af 92       	push	r10
    b6ec:	bf 92       	push	r11
    b6ee:	cf 92       	push	r12
    b6f0:	df 92       	push	r13
    b6f2:	ef 92       	push	r14
    b6f4:	ff 92       	push	r15
    b6f6:	0f 93       	push	r16
    b6f8:	1f 93       	push	r17
    b6fa:	cf 93       	push	r28
    b6fc:	df 93       	push	r29
    b6fe:	cd b7       	in	r28, 0x3d	; 61
    b700:	de b7       	in	r29, 0x3e	; 62
    b702:	a8 97       	sbiw	r28, 0x28	; 40
    b704:	0f b6       	in	r0, 0x3f	; 63
    b706:	f8 94       	cli
    b708:	de bf       	out	0x3e, r29	; 62
    b70a:	0f be       	out	0x3f, r0	; 63
    b70c:	cd bf       	out	0x3d, r28	; 61
    b70e:	6c 01       	movw	r12, r24
    b710:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6158
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
    b712:	64 ec       	ldi	r22, 0xC4	; 196
    b714:	76 e8       	ldi	r23, 0x86	; 134
    b716:	ce 01       	movw	r24, r28
    b718:	01 96       	adiw	r24, 0x01	; 1
    b71a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b71e:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <dvanact>
    b722:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <dvanact+0x1>
    b726:	29 e3       	ldi	r18, 0x39	; 57
    b728:	28 9f       	mul	r18, r24
    b72a:	b0 01       	movw	r22, r0
    b72c:	29 9f       	mul	r18, r25
    b72e:	70 0d       	add	r23, r0
    b730:	11 24       	eor	r1, r1
    b732:	90 e0       	ldi	r25, 0x00	; 0
    b734:	80 e0       	ldi	r24, 0x00	; 0
    b736:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    b73a:	20 e0       	ldi	r18, 0x00	; 0
    b73c:	30 e0       	ldi	r19, 0x00	; 0
    b73e:	4a e7       	ldi	r20, 0x7A	; 122
    b740:	54 e4       	ldi	r21, 0x44	; 68
    b742:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6159
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
  dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, str2);
    b746:	8e 01       	movw	r16, r28
    b748:	0f 5d       	subi	r16, 0xDF	; 223
    b74a:	1f 4f       	sbci	r17, 0xFF	; 255
    b74c:	22 e0       	ldi	r18, 0x02	; 2
    b74e:	44 e0       	ldi	r20, 0x04	; 4
    b750:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6160
  strcat(str1, str2);
    b754:	b8 01       	movw	r22, r16
    b756:	ce 01       	movw	r24, r28
    b758:	01 96       	adiw	r24, 0x01	; 1
    b75a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6161
  strcat(str1, "V");
    b75e:	67 ed       	ldi	r22, 0xD7	; 215
    b760:	77 e0       	ldi	r23, 0x07	; 7
    b762:	ce 01       	movw	r24, r28
    b764:	01 96       	adiw	r24, 0x01	; 1
    b766:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6162
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    b76a:	85 e0       	ldi	r24, 0x05	; 5
    b76c:	c8 0e       	add	r12, r24
    b76e:	d1 1c       	adc	r13, r1
    b770:	a5 01       	movw	r20, r10
    b772:	46 5f       	subi	r20, 0xF6	; 246
    b774:	5f 4f       	sbci	r21, 0xFF	; 255
    b776:	ee 24       	eor	r14, r14
    b778:	ea 94       	dec	r14
    b77a:	fe 2c       	mov	r15, r14
    b77c:	10 e0       	ldi	r17, 0x00	; 0
    b77e:	00 e0       	ldi	r16, 0x00	; 0
    b780:	21 e0       	ldi	r18, 0x01	; 1
    b782:	b6 01       	movw	r22, r12
    b784:	ce 01       	movw	r24, r28
    b786:	01 96       	adiw	r24, 0x01	; 1
    b788:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6164

  strcpy_P(str1, new_text_pet_volt);
    b78c:	60 eb       	ldi	r22, 0xB0	; 176
    b78e:	76 e8       	ldi	r23, 0x86	; 134
    b790:	ce 01       	movw	r24, r28
    b792:	01 96       	adiw	r24, 0x01	; 1
    b794:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6165
  strcat(str1, ": ");
    b798:	66 ed       	ldi	r22, 0xD6	; 214
    b79a:	76 e0       	ldi	r23, 0x06	; 6
    b79c:	ce 01       	movw	r24, r28
    b79e:	01 96       	adiw	r24, 0x01	; 1
    b7a0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b7a4:	60 91 1e 0b 	lds	r22, 0x0B1E	; 0x800b1e <petnula>
    b7a8:	70 91 1f 0b 	lds	r23, 0x0B1F	; 0x800b1f <petnula+0x1>
    b7ac:	93 e0       	ldi	r25, 0x03	; 3
    b7ae:	66 0f       	add	r22, r22
    b7b0:	77 1f       	adc	r23, r23
    b7b2:	9a 95       	dec	r25
    b7b4:	e1 f7       	brne	.-8      	; 0xb7ae <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc4>
    b7b6:	90 e0       	ldi	r25, 0x00	; 0
    b7b8:	80 e0       	ldi	r24, 0x00	; 0
    b7ba:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    b7be:	20 e0       	ldi	r18, 0x00	; 0
    b7c0:	30 e0       	ldi	r19, 0x00	; 0
    b7c2:	4a e7       	ldi	r20, 0x7A	; 122
    b7c4:	54 e4       	ldi	r21, 0x44	; 68
    b7c6:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6166
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_pet_volt);
  strcat(str1, ": ");
  dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, str2);
    b7ca:	8e 01       	movw	r16, r28
    b7cc:	0f 5d       	subi	r16, 0xDF	; 223
    b7ce:	1f 4f       	sbci	r17, 0xFF	; 255
    b7d0:	22 e0       	ldi	r18, 0x02	; 2
    b7d2:	44 e0       	ldi	r20, 0x04	; 4
    b7d4:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6167
  strcat(str1, str2);
    b7d8:	b8 01       	movw	r22, r16
    b7da:	ce 01       	movw	r24, r28
    b7dc:	01 96       	adiw	r24, 0x01	; 1
    b7de:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6168
  strcat(str1, "V");
    b7e2:	67 ed       	ldi	r22, 0xD7	; 215
    b7e4:	77 e0       	ldi	r23, 0x07	; 7
    b7e6:	ce 01       	movw	r24, r28
    b7e8:	01 96       	adiw	r24, 0x01	; 1
    b7ea:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6169
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    b7ee:	a5 01       	movw	r20, r10
    b7f0:	47 5e       	subi	r20, 0xE7	; 231
    b7f2:	5f 4f       	sbci	r21, 0xFF	; 255
    b7f4:	10 e0       	ldi	r17, 0x00	; 0
    b7f6:	00 e0       	ldi	r16, 0x00	; 0
    b7f8:	21 e0       	ldi	r18, 0x01	; 1
    b7fa:	b6 01       	movw	r22, r12
    b7fc:	ce 01       	movw	r24, r28
    b7fe:	01 96       	adiw	r24, 0x01	; 1
    b800:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6171

  strcpy_P(str1, new_text_tritri_volt);
    b804:	6c e9       	ldi	r22, 0x9C	; 156
    b806:	76 e8       	ldi	r23, 0x86	; 134
    b808:	ce 01       	movw	r24, r28
    b80a:	01 96       	adiw	r24, 0x01	; 1
    b80c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b810:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <tritri>
    b814:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <tritri+0x1>
    b818:	25 e0       	ldi	r18, 0x05	; 5
    b81a:	28 9f       	mul	r18, r24
    b81c:	b0 01       	movw	r22, r0
    b81e:	29 9f       	mul	r18, r25
    b820:	70 0d       	add	r23, r0
    b822:	11 24       	eor	r1, r1
    b824:	90 e0       	ldi	r25, 0x00	; 0
    b826:	80 e0       	ldi	r24, 0x00	; 0
    b828:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    b82c:	20 e0       	ldi	r18, 0x00	; 0
    b82e:	30 e0       	ldi	r19, 0x00	; 0
    b830:	4a e7       	ldi	r20, 0x7A	; 122
    b832:	54 e4       	ldi	r21, 0x44	; 68
    b834:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6172
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_tritri_volt);
  dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, str2);
    b838:	8e 01       	movw	r16, r28
    b83a:	0f 5d       	subi	r16, 0xDF	; 223
    b83c:	1f 4f       	sbci	r17, 0xFF	; 255
    b83e:	22 e0       	ldi	r18, 0x02	; 2
    b840:	44 e0       	ldi	r20, 0x04	; 4
    b842:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6173
  strcat(str1, str2);
    b846:	b8 01       	movw	r22, r16
    b848:	ce 01       	movw	r24, r28
    b84a:	01 96       	adiw	r24, 0x01	; 1
    b84c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6174
  strcat(str1, "V");
    b850:	67 ed       	ldi	r22, 0xD7	; 215
    b852:	77 e0       	ldi	r23, 0x07	; 7
    b854:	ce 01       	movw	r24, r28
    b856:	01 96       	adiw	r24, 0x01	; 1
    b858:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6175
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);
    b85c:	a5 01       	movw	r20, r10
    b85e:	48 5d       	subi	r20, 0xD8	; 216
    b860:	5f 4f       	sbci	r21, 0xFF	; 255
    b862:	10 e0       	ldi	r17, 0x00	; 0
    b864:	00 e0       	ldi	r16, 0x00	; 0
    b866:	21 e0       	ldi	r18, 0x01	; 1
    b868:	b6 01       	movw	r22, r12
    b86a:	ce 01       	movw	r24, r28
    b86c:	01 96       	adiw	r24, 0x01	; 1
    b86e:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6177

  strcpy_P(str1, new_text_consume_ampere);;
    b872:	6d e8       	ldi	r22, 0x8D	; 141
    b874:	76 e8       	ldi	r23, 0x86	; 134
    b876:	ce 01       	movw	r24, r28
    b878:	01 96       	adiw	r24, 0x01	; 1
    b87a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    b87e:	60 91 1a 0b 	lds	r22, 0x0B1A	; 0x800b1a <proud>
    b882:	70 91 1b 0b 	lds	r23, 0x0B1B	; 0x800b1b <proud+0x1>
    b886:	90 e0       	ldi	r25, 0x00	; 0
    b888:	80 e0       	ldi	r24, 0x00	; 0
    b88a:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6178
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_consume_ampere);;
  dtostrf(prepocet_proudu(proud), 4, 2, str2);
    b88e:	8e 01       	movw	r16, r28
    b890:	0f 5d       	subi	r16, 0xDF	; 223
    b892:	1f 4f       	sbci	r17, 0xFF	; 255
    b894:	22 e0       	ldi	r18, 0x02	; 2
    b896:	44 e0       	ldi	r20, 0x04	; 4
    b898:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6179
  strcat(str1, str2);
    b89c:	b8 01       	movw	r22, r16
    b89e:	ce 01       	movw	r24, r28
    b8a0:	01 96       	adiw	r24, 0x01	; 1
    b8a2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6180
  strcat(str1, "mA");
    b8a6:	62 e6       	ldi	r22, 0x62	; 98
    b8a8:	73 e0       	ldi	r23, 0x03	; 3
    b8aa:	ce 01       	movw	r24, r28
    b8ac:	01 96       	adiw	r24, 0x01	; 1
    b8ae:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6181
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    b8b2:	a5 01       	movw	r20, r10
    b8b4:	49 5c       	subi	r20, 0xC9	; 201
    b8b6:	5f 4f       	sbci	r21, 0xFF	; 255
    b8b8:	10 e0       	ldi	r17, 0x00	; 0
    b8ba:	00 e0       	ldi	r16, 0x00	; 0
    b8bc:	21 e0       	ldi	r18, 0x01	; 1
    b8be:	b6 01       	movw	r22, r12
    b8c0:	ce 01       	movw	r24, r28
    b8c2:	01 96       	adiw	r24, 0x01	; 1
    b8c4:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6183

  strcpy_P(str1, new_text_internal_temp);
    b8c8:	6b e7       	ldi	r22, 0x7B	; 123
    b8ca:	76 e8       	ldi	r23, 0x86	; 134
    b8cc:	ce 01       	movw	r24, r28
    b8ce:	01 96       	adiw	r24, 0x01	; 1
    b8d0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6184
  dtostrf(internal_temp, 4, 2, str2);
    b8d4:	60 91 42 0c 	lds	r22, 0x0C42	; 0x800c42 <internal_temp>
    b8d8:	70 91 43 0c 	lds	r23, 0x0C43	; 0x800c43 <internal_temp+0x1>
    b8dc:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <internal_temp+0x2>
    b8e0:	90 91 45 0c 	lds	r25, 0x0C45	; 0x800c45 <internal_temp+0x3>
    b8e4:	8e 01       	movw	r16, r28
    b8e6:	0f 5d       	subi	r16, 0xDF	; 223
    b8e8:	1f 4f       	sbci	r17, 0xFF	; 255
    b8ea:	22 e0       	ldi	r18, 0x02	; 2
    b8ec:	44 e0       	ldi	r20, 0x04	; 4
    b8ee:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6185
  strcat(str1, str2);
    b8f2:	b8 01       	movw	r22, r16
    b8f4:	ce 01       	movw	r24, r28
    b8f6:	01 96       	adiw	r24, 0x01	; 1
    b8f8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6186
  strcat(str1, "C");
    b8fc:	67 ef       	ldi	r22, 0xF7	; 247
    b8fe:	73 e0       	ldi	r23, 0x03	; 3
    b900:	ce 01       	movw	r24, r28
    b902:	01 96       	adiw	r24, 0x01	; 1
    b904:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6187
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    b908:	a5 01       	movw	r20, r10
    b90a:	4a 5b       	subi	r20, 0xBA	; 186
    b90c:	5f 4f       	sbci	r21, 0xFF	; 255
    b90e:	10 e0       	ldi	r17, 0x00	; 0
    b910:	00 e0       	ldi	r16, 0x00	; 0
    b912:	21 e0       	ldi	r18, 0x01	; 1
    b914:	b6 01       	movw	r22, r12
    b916:	ce 01       	movw	r24, r28
    b918:	01 96       	adiw	r24, 0x01	; 1
    b91a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6189

  strcpy_P(str1, new_text_selfcheck_test);
    b91e:	6f e6       	ldi	r22, 0x6F	; 111
    b920:	76 e8       	ldi	r23, 0x86	; 134
    b922:	ce 01       	movw	r24, r28
    b924:	01 96       	adiw	r24, 0x01	; 1
    b926:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6190
  itoa(selftest_data, str2, 16);
    b92a:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b92e:	40 e1       	ldi	r20, 0x10	; 16
    b930:	be 01       	movw	r22, r28
    b932:	6f 5d       	subi	r22, 0xDF	; 223
    b934:	7f 4f       	sbci	r23, 0xFF	; 255
    b936:	90 e0       	ldi	r25, 0x00	; 0
    b938:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6191
  strcat(str1, str2);
    b93c:	be 01       	movw	r22, r28
    b93e:	6f 5d       	subi	r22, 0xDF	; 223
    b940:	7f 4f       	sbci	r23, 0xFF	; 255
    b942:	ce 01       	movw	r24, r28
    b944:	01 96       	adiw	r24, 0x01	; 1
    b946:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6192
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    b94a:	a5 01       	movw	r20, r10
    b94c:	4b 5a       	subi	r20, 0xAB	; 171
    b94e:	5f 4f       	sbci	r21, 0xFF	; 255
    b950:	21 e0       	ldi	r18, 0x01	; 1
    b952:	b6 01       	movw	r22, r12
    b954:	ce 01       	movw	r24, r28
    b956:	01 96       	adiw	r24, 0x01	; 1
    b958:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6194

  strcpy_P(str1, new_text_mqtt_send);
    b95c:	6d e5       	ldi	r22, 0x5D	; 93
    b95e:	76 e8       	ldi	r23, 0x86	; 134
    b960:	ce 01       	movw	r24, r28
    b962:	01 96       	adiw	r24, 0x01	; 1
    b964:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b968:	4a e0       	ldi	r20, 0x0A	; 10
    b96a:	be 01       	movw	r22, r28
    b96c:	6f 5d       	subi	r22, 0xDF	; 223
    b96e:	7f 4f       	sbci	r23, 0xFF	; 255
    b970:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <mqtt_send_message>
    b974:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <mqtt_send_message+0x1>
    b978:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6196
  itoa(mqtt_send_message, str2, 10);
  strcat(str1, str2);
    b97c:	be 01       	movw	r22, r28
    b97e:	6f 5d       	subi	r22, 0xDF	; 223
    b980:	7f 4f       	sbci	r23, 0xFF	; 255
    b982:	ce 01       	movw	r24, r28
    b984:	01 96       	adiw	r24, 0x01	; 1
    b986:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6197
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    b98a:	a5 01       	movw	r20, r10
    b98c:	4c 59       	subi	r20, 0x9C	; 156
    b98e:	5f 4f       	sbci	r21, 0xFF	; 255
    b990:	21 e0       	ldi	r18, 0x01	; 1
    b992:	b6 01       	movw	r22, r12
    b994:	ce 01       	movw	r24, r28
    b996:	01 96       	adiw	r24, 0x01	; 1
    b998:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6199

  strcpy_P(str1, new_text_mqtt_receive);
    b99c:	6c e4       	ldi	r22, 0x4C	; 76
    b99e:	76 e8       	ldi	r23, 0x86	; 134
    b9a0:	ce 01       	movw	r24, r28
    b9a2:	01 96       	adiw	r24, 0x01	; 1
    b9a4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b9a8:	4a e0       	ldi	r20, 0x0A	; 10
    b9aa:	be 01       	movw	r22, r28
    b9ac:	6f 5d       	subi	r22, 0xDF	; 223
    b9ae:	7f 4f       	sbci	r23, 0xFF	; 255
    b9b0:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <mqtt_receive_message>
    b9b4:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <mqtt_receive_message+0x1>
    b9b8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6201
  itoa(mqtt_receive_message, str2, 10);
  strcat(str1, str2);
    b9bc:	be 01       	movw	r22, r28
    b9be:	6f 5d       	subi	r22, 0xDF	; 223
    b9c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b9c2:	ce 01       	movw	r24, r28
    b9c4:	01 96       	adiw	r24, 0x01	; 1
    b9c6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6202
  show_string(str1, x + 5 , y + 115 , 1, BLACK, WHITE, 0);
    b9ca:	a5 01       	movw	r20, r10
    b9cc:	4d 58       	subi	r20, 0x8D	; 141
    b9ce:	5f 4f       	sbci	r21, 0xFF	; 255
    b9d0:	21 e0       	ldi	r18, 0x01	; 1
    b9d2:	b6 01       	movw	r22, r12
    b9d4:	ce 01       	movw	r24, r28
    b9d6:	01 96       	adiw	r24, 0x01	; 1
    b9d8:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6204

  strcpy_P(str1, new_text_mqtt_processed);
    b9dc:	68 e3       	ldi	r22, 0x38	; 56
    b9de:	76 e8       	ldi	r23, 0x86	; 134
    b9e0:	ce 01       	movw	r24, r28
    b9e2:	01 96       	adiw	r24, 0x01	; 1
    b9e4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b9e8:	4a e0       	ldi	r20, 0x0A	; 10
    b9ea:	be 01       	movw	r22, r28
    b9ec:	6f 5d       	subi	r22, 0xDF	; 223
    b9ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b9f0:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
    b9f4:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
    b9f8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6206
  itoa(mqtt_process_message, str2, 10);
  strcat(str1, str2);
    b9fc:	be 01       	movw	r22, r28
    b9fe:	6f 5d       	subi	r22, 0xDF	; 223
    ba00:	7f 4f       	sbci	r23, 0xFF	; 255
    ba02:	ce 01       	movw	r24, r28
    ba04:	01 96       	adiw	r24, 0x01	; 1
    ba06:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6207
  show_string(str1, x + 5 , y + 130 , 1, BLACK, WHITE, 0);
    ba0a:	a5 01       	movw	r20, r10
    ba0c:	4e 57       	subi	r20, 0x7E	; 126
    ba0e:	5f 4f       	sbci	r21, 0xFF	; 255
    ba10:	21 e0       	ldi	r18, 0x01	; 1
    ba12:	b6 01       	movw	r22, r12
    ba14:	ce 01       	movw	r24, r28
    ba16:	01 96       	adiw	r24, 0x01	; 1
    ba18:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6209

  strcpy_P(str1, new_text_mqtt_error);
    ba1c:	69 e2       	ldi	r22, 0x29	; 41
    ba1e:	76 e8       	ldi	r23, 0x86	; 134
    ba20:	ce 01       	movw	r24, r28
    ba22:	01 96       	adiw	r24, 0x01	; 1
    ba24:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ba28:	4a e0       	ldi	r20, 0x0A	; 10
    ba2a:	be 01       	movw	r22, r28
    ba2c:	6f 5d       	subi	r22, 0xDF	; 223
    ba2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba30:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <mqtt_error>
    ba34:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <mqtt_error+0x1>
    ba38:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6211
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
    ba3c:	be 01       	movw	r22, r28
    ba3e:	6f 5d       	subi	r22, 0xDF	; 223
    ba40:	7f 4f       	sbci	r23, 0xFF	; 255
    ba42:	ce 01       	movw	r24, r28
    ba44:	01 96       	adiw	r24, 0x01	; 1
    ba46:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6212
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
    ba4a:	a5 01       	movw	r20, r10
    ba4c:	4f 56       	subi	r20, 0x6F	; 111
    ba4e:	5f 4f       	sbci	r21, 0xFF	; 255
    ba50:	21 e0       	ldi	r18, 0x01	; 1
    ba52:	b6 01       	movw	r22, r12
    ba54:	ce 01       	movw	r24, r28
    ba56:	01 96       	adiw	r24, 0x01	; 1
    ba58:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6213
}
    ba5c:	a8 96       	adiw	r28, 0x28	; 40
    ba5e:	0f b6       	in	r0, 0x3f	; 63
    ba60:	f8 94       	cli
    ba62:	de bf       	out	0x3e, r29	; 62
    ba64:	0f be       	out	0x3f, r0	; 63
    ba66:	cd bf       	out	0x3d, r28	; 61
    ba68:	df 91       	pop	r29
    ba6a:	cf 91       	pop	r28
    ba6c:	1f 91       	pop	r17
    ba6e:	0f 91       	pop	r16
    ba70:	ff 90       	pop	r15
    ba72:	ef 90       	pop	r14
    ba74:	df 90       	pop	r13
    ba76:	cf 90       	pop	r12
    ba78:	bf 90       	pop	r11
    ba7a:	af 90       	pop	r10
    ba7c:	08 95       	ret

0000ba7e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4234
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    ba7e:	ef 92       	push	r14
    ba80:	ff 92       	push	r15
    ba82:	0f 93       	push	r16
    ba84:	1f 93       	push	r17
    ba86:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4235
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    ba88:	ee 24       	eor	r14, r14
    ba8a:	ea 94       	dec	r14
    ba8c:	fe 2c       	mov	r15, r14
    ba8e:	10 e0       	ldi	r17, 0x00	; 0
    ba90:	00 e0       	ldi	r16, 0x00	; 0
    ba92:	22 e0       	ldi	r18, 0x02	; 2
    ba94:	bc 01       	movw	r22, r24
    ba96:	81 eb       	ldi	r24, 0xB1	; 177
    ba98:	99 e0       	ldi	r25, 0x09	; 9
    ba9a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
}
    ba9e:	1f 91       	pop	r17
    baa0:	0f 91       	pop	r16
    baa2:	ff 90       	pop	r15
    baa4:	ef 90       	pop	r14
    baa6:	08 95       	ret

0000baa8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    baa8:	cf 92       	push	r12
    baaa:	df 92       	push	r13
    baac:	ef 92       	push	r14
    baae:	ff 92       	push	r15
    bab0:	0f 93       	push	r16
    bab2:	1f 93       	push	r17
    bab4:	cf 93       	push	r28
    bab6:	df 93       	push	r29
    bab8:	cd b7       	in	r28, 0x3d	; 61
    baba:	de b7       	in	r29, 0x3e	; 62
    babc:	68 97       	sbiw	r28, 0x18	; 24
    babe:	0f b6       	in	r0, 0x3f	; 63
    bac0:	f8 94       	cli
    bac2:	de bf       	out	0x3e, r29	; 62
    bac4:	0f be       	out	0x3f, r0	; 63
    bac6:	cd bf       	out	0x3d, r28	; 61
    bac8:	8c 01       	movw	r16, r24
    baca:	7b 01       	movw	r14, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    bacc:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
    bad0:	9e 01       	movw	r18, r28
    bad2:	2f 5f       	subi	r18, 0xFF	; 255
    bad4:	3f 4f       	sbci	r19, 0xFF	; 255
    bad6:	69 01       	movw	r12, r18
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4134

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[24];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    bad8:	80 fd       	sbrc	r24, 0
    bada:	37 c0       	rjmp	.+110    	; 0xbb4a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4136
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    badc:	80 91 14 12 	lds	r24, 0x1214	; 0x801214 <now+0x4>
    bae0:	1f 92       	push	r1
    bae2:	8f 93       	push	r24
    bae4:	80 91 13 12 	lds	r24, 0x1213	; 0x801213 <now+0x3>
    bae8:	1f 92       	push	r1
    baea:	8f 93       	push	r24
    baec:	8f e7       	ldi	r24, 0x7F	; 127
    baee:	93 e0       	ldi	r25, 0x03	; 3
    baf0:	9f 93       	push	r25
    baf2:	8f 93       	push	r24
    baf4:	3f 93       	push	r19
    baf6:	2f 93       	push	r18
    baf8:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
    bafc:	0f b6       	in	r0, 0x3f	; 63
    bafe:	f8 94       	cli
    bb00:	de bf       	out	0x3e, r29	; 62
    bb02:	0f be       	out	0x3f, r0	; 63
    bb04:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    bb06:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    bb0a:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4143
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    bb0e:	a7 01       	movw	r20, r14
    bb10:	4c 5e       	subi	r20, 0xEC	; 236
    bb12:	5f 4f       	sbci	r21, 0xFF	; 255
    bb14:	b8 01       	movw	r22, r16
    bb16:	6c 5f       	subi	r22, 0xFC	; 252
    bb18:	7f 4f       	sbci	r23, 0xFF	; 255
    bb1a:	ee 24       	eor	r14, r14
    bb1c:	ea 94       	dec	r14
    bb1e:	fe 2c       	mov	r15, r14
    bb20:	10 e0       	ldi	r17, 0x00	; 0
    bb22:	00 e0       	ldi	r16, 0x00	; 0
    bb24:	28 e0       	ldi	r18, 0x08	; 8
    bb26:	c6 01       	movw	r24, r12
    bb28:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4144
}
    bb2c:	68 96       	adiw	r28, 0x18	; 24
    bb2e:	0f b6       	in	r0, 0x3f	; 63
    bb30:	f8 94       	cli
    bb32:	de bf       	out	0x3e, r29	; 62
    bb34:	0f be       	out	0x3f, r0	; 63
    bb36:	cd bf       	out	0x3d, r28	; 61
    bb38:	df 91       	pop	r29
    bb3a:	cf 91       	pop	r28
    bb3c:	1f 91       	pop	r17
    bb3e:	0f 91       	pop	r16
    bb40:	ff 90       	pop	r15
    bb42:	ef 90       	pop	r14
    bb44:	df 90       	pop	r13
    bb46:	cf 90       	pop	r12
    bb48:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4140
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
  }
  else
  {
    strcpy(str1, "--:--");
    bb4a:	65 e6       	ldi	r22, 0x65	; 101
    bb4c:	73 e0       	ldi	r23, 0x03	; 3
    bb4e:	c9 01       	movw	r24, r18
    bb50:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
    bb54:	d8 cf       	rjmp	.-80     	; 0xbb06 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x5e>

0000bb56 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6049
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bb56:	0f 93       	push	r16
    bb58:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6050
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    bb5a:	70 e0       	ldi	r23, 0x00	; 0
    bb5c:	60 e0       	ldi	r22, 0x00	; 0
    bb5e:	87 e6       	ldi	r24, 0x67	; 103
    bb60:	90 e0       	ldi	r25, 0x00	; 0
    bb62:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6051
  display_element_set_string(device.mqtt_key, 20, 0, &helper_dialog_mqtt_set_pass, &valid_true);
    bb66:	0b e0       	ldi	r16, 0x0B	; 11
    bb68:	10 e5       	ldi	r17, 0x50	; 80
    bb6a:	2d eb       	ldi	r18, 0xBD	; 189
    bb6c:	3f e6       	ldi	r19, 0x6F	; 111
    bb6e:	40 e0       	ldi	r20, 0x00	; 0
    bb70:	64 e1       	ldi	r22, 0x14	; 20
    bb72:	8f ee       	ldi	r24, 0xEF	; 239
    bb74:	9d e0       	ldi	r25, 0x0D	; 13
    bb76:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6052
}
    bb7a:	1f 91       	pop	r17
    bb7c:	0f 91       	pop	r16
    bb7e:	08 95       	ret

0000bb80 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6043
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bb80:	0f 93       	push	r16
    bb82:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6044
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    bb84:	70 e0       	ldi	r23, 0x00	; 0
    bb86:	60 e0       	ldi	r22, 0x00	; 0
    bb88:	87 e6       	ldi	r24, 0x67	; 103
    bb8a:	90 e0       	ldi	r25, 0x00	; 0
    bb8c:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6045
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
    bb90:	0b e0       	ldi	r16, 0x0B	; 11
    bb92:	10 e5       	ldi	r17, 0x50	; 80
    bb94:	20 ee       	ldi	r18, 0xE0	; 224
    bb96:	3f e6       	ldi	r19, 0x6F	; 111
    bb98:	40 e0       	ldi	r20, 0x00	; 0
    bb9a:	64 e1       	ldi	r22, 0x14	; 20
    bb9c:	8b ed       	ldi	r24, 0xDB	; 219
    bb9e:	9d e0       	ldi	r25, 0x0D	; 13
    bba0:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6046
}
    bba4:	1f 91       	pop	r17
    bba6:	0f 91       	pop	r16
    bba8:	08 95       	ret

0000bbaa <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_mqtt_broker_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6035


*/
//// funkce obsluha tlacitka nastaveni mqqt serveru
void button_set_mqtt_broker_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bbaa:	ef 92       	push	r14
    bbac:	ff 92       	push	r15
    bbae:	0f 93       	push	r16
    bbb0:	1f 93       	push	r17
    bbb2:	cf 93       	push	r28
    bbb4:	df 93       	push	r29
    bbb6:	cd b7       	in	r28, 0x3d	; 61
    bbb8:	de b7       	in	r29, 0x3e	; 62
    bbba:	60 97       	sbiw	r28, 0x10	; 16
    bbbc:	0f b6       	in	r0, 0x3f	; 63
    bbbe:	f8 94       	cli
    bbc0:	de bf       	out	0x3e, r29	; 62
    bbc2:	0f be       	out	0x3f, r0	; 63
    bbc4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bbc6:	70 e0       	ldi	r23, 0x00	; 0
    bbc8:	60 e0       	ldi	r22, 0x00	; 0
    bbca:	85 e6       	ldi	r24, 0x65	; 101
    bbcc:	90 e0       	ldi	r25, 0x00	; 0
    bbce:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6038
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
    bbd2:	e5 eb       	ldi	r30, 0xB5	; 181
    bbd4:	fd e0       	ldi	r31, 0x0D	; 13
    bbd6:	83 a1       	ldd	r24, Z+35	; 0x23
    bbd8:	1f 92       	push	r1
    bbda:	8f 93       	push	r24
    bbdc:	82 a1       	ldd	r24, Z+34	; 0x22
    bbde:	1f 92       	push	r1
    bbe0:	8f 93       	push	r24
    bbe2:	81 a1       	ldd	r24, Z+33	; 0x21
    bbe4:	1f 92       	push	r1
    bbe6:	8f 93       	push	r24
    bbe8:	80 a1       	ldd	r24, Z+32	; 0x20
    bbea:	1f 92       	push	r1
    bbec:	8f 93       	push	r24
    bbee:	85 e3       	ldi	r24, 0x35	; 53
    bbf0:	93 e0       	ldi	r25, 0x03	; 3
    bbf2:	9f 93       	push	r25
    bbf4:	8f 93       	push	r24
    bbf6:	ce 01       	movw	r24, r28
    bbf8:	01 96       	adiw	r24, 0x01	; 1
    bbfa:	7c 01       	movw	r14, r24
    bbfc:	9f 93       	push	r25
    bbfe:	8f 93       	push	r24
    bc00:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6039
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
    bc04:	0d e0       	ldi	r16, 0x0D	; 13
    bc06:	10 e5       	ldi	r17, 0x50	; 80
    bc08:	23 e0       	ldi	r18, 0x03	; 3
    bc0a:	30 e7       	ldi	r19, 0x70	; 112
    bc0c:	40 e0       	ldi	r20, 0x00	; 0
    bc0e:	60 e1       	ldi	r22, 0x10	; 16
    bc10:	c7 01       	movw	r24, r14
    bc12:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bc16:	0f b6       	in	r0, 0x3f	; 63
    bc18:	f8 94       	cli
    bc1a:	de bf       	out	0x3e, r29	; 62
    bc1c:	0f be       	out	0x3f, r0	; 63
    bc1e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6040
}
    bc20:	60 96       	adiw	r28, 0x10	; 16
    bc22:	0f b6       	in	r0, 0x3f	; 63
    bc24:	f8 94       	cli
    bc26:	de bf       	out	0x3e, r29	; 62
    bc28:	0f be       	out	0x3f, r0	; 63
    bc2a:	cd bf       	out	0x3d, r28	; 61
    bc2c:	df 91       	pop	r29
    bc2e:	cf 91       	pop	r28
    bc30:	1f 91       	pop	r17
    bc32:	0f 91       	pop	r16
    bc34:	ff 90       	pop	r15
    bc36:	ef 90       	pop	r14
    bc38:	08 95       	ret

0000bc3a <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011
  parseBytes(cas_text, ':', tim, 3, 10);
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
}
////
void button_time_set_date_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bc3a:	ef 92       	push	r14
    bc3c:	ff 92       	push	r15
    bc3e:	0f 93       	push	r16
    bc40:	1f 93       	push	r17
    bc42:	cf 93       	push	r28
    bc44:	df 93       	push	r29
    bc46:	cd b7       	in	r28, 0x3d	; 61
    bc48:	de b7       	in	r29, 0x3e	; 62
    bc4a:	2c 97       	sbiw	r28, 0x0c	; 12
    bc4c:	0f b6       	in	r0, 0x3f	; 63
    bc4e:	f8 94       	cli
    bc50:	de bf       	out	0x3e, r29	; 62
    bc52:	0f be       	out	0x3f, r0	; 63
    bc54:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6013
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bc56:	70 e0       	ldi	r23, 0x00	; 0
    bc58:	60 e0       	ldi	r22, 0x00	; 0
    bc5a:	85 e6       	ldi	r24, 0x65	; 101
    bc5c:	90 e0       	ldi	r25, 0x00	; 0
    bc5e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    bc62:	e0 e1       	ldi	r30, 0x10	; 16
    bc64:	f2 e1       	ldi	r31, 0x12	; 18
    bc66:	80 81       	ld	r24, Z
    bc68:	90 e0       	ldi	r25, 0x00	; 0
    bc6a:	80 53       	subi	r24, 0x30	; 48
    bc6c:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6014
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
    bc6e:	9f 93       	push	r25
    bc70:	8f 93       	push	r24
    bc72:	81 81       	ldd	r24, Z+1	; 0x01
    bc74:	1f 92       	push	r1
    bc76:	8f 93       	push	r24
    bc78:	82 81       	ldd	r24, Z+2	; 0x02
    bc7a:	1f 92       	push	r1
    bc7c:	8f 93       	push	r24
    bc7e:	8b e6       	ldi	r24, 0x6B	; 107
    bc80:	93 e0       	ldi	r25, 0x03	; 3
    bc82:	9f 93       	push	r25
    bc84:	8f 93       	push	r24
    bc86:	ce 01       	movw	r24, r28
    bc88:	01 96       	adiw	r24, 0x01	; 1
    bc8a:	7c 01       	movw	r14, r24
    bc8c:	9f 93       	push	r25
    bc8e:	8f 93       	push	r24
    bc90:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6015
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
    bc94:	0b e0       	ldi	r16, 0x0B	; 11
    bc96:	10 e5       	ldi	r17, 0x50	; 80
    bc98:	2a ec       	ldi	r18, 0xCA	; 202
    bc9a:	39 e6       	ldi	r19, 0x69	; 105
    bc9c:	40 e0       	ldi	r20, 0x00	; 0
    bc9e:	6b e0       	ldi	r22, 0x0B	; 11
    bca0:	c7 01       	movw	r24, r14
    bca2:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bca6:	0f b6       	in	r0, 0x3f	; 63
    bca8:	f8 94       	cli
    bcaa:	de bf       	out	0x3e, r29	; 62
    bcac:	0f be       	out	0x3f, r0	; 63
    bcae:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6016
}
    bcb0:	2c 96       	adiw	r28, 0x0c	; 12
    bcb2:	0f b6       	in	r0, 0x3f	; 63
    bcb4:	f8 94       	cli
    bcb6:	de bf       	out	0x3e, r29	; 62
    bcb8:	0f be       	out	0x3f, r0	; 63
    bcba:	cd bf       	out	0x3d, r28	; 61
    bcbc:	df 91       	pop	r29
    bcbe:	cf 91       	pop	r28
    bcc0:	1f 91       	pop	r17
    bcc2:	0f 91       	pop	r16
    bcc4:	ff 90       	pop	r15
    bcc6:	ef 90       	pop	r14
    bcc8:	08 95       	ret

0000bcca <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5995
/////////////////////////////////////////////////////////////////////////////////
/*
   Funkce pro rucni nastaveni casu a datumu
*/
void button_time_set_time_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bcca:	ef 92       	push	r14
    bccc:	ff 92       	push	r15
    bcce:	0f 93       	push	r16
    bcd0:	1f 93       	push	r17
    bcd2:	cf 93       	push	r28
    bcd4:	df 93       	push	r29
    bcd6:	00 d0       	rcall	.+0      	; 0xbcd8 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    bcd8:	00 d0       	rcall	.+0      	; 0xbcda <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0x10>
    bcda:	00 d0       	rcall	.+0      	; 0xbcdc <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0x12>
    bcdc:	1f 92       	push	r1
    bcde:	cd b7       	in	r28, 0x3d	; 61
    bce0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5997
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bce2:	70 e0       	ldi	r23, 0x00	; 0
    bce4:	60 e0       	ldi	r22, 0x00	; 0
    bce6:	85 e6       	ldi	r24, 0x65	; 101
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5998
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
    bcee:	e0 e1       	ldi	r30, 0x10	; 16
    bcf0:	f2 e1       	ldi	r31, 0x12	; 18
    bcf2:	85 81       	ldd	r24, Z+5	; 0x05
    bcf4:	1f 92       	push	r1
    bcf6:	8f 93       	push	r24
    bcf8:	84 81       	ldd	r24, Z+4	; 0x04
    bcfa:	1f 92       	push	r1
    bcfc:	8f 93       	push	r24
    bcfe:	83 81       	ldd	r24, Z+3	; 0x03
    bd00:	1f 92       	push	r1
    bd02:	8f 93       	push	r24
    bd04:	8a e7       	ldi	r24, 0x7A	; 122
    bd06:	93 e0       	ldi	r25, 0x03	; 3
    bd08:	9f 93       	push	r25
    bd0a:	8f 93       	push	r24
    bd0c:	ce 01       	movw	r24, r28
    bd0e:	01 96       	adiw	r24, 0x01	; 1
    bd10:	7c 01       	movw	r14, r24
    bd12:	9f 93       	push	r25
    bd14:	8f 93       	push	r24
    bd16:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5999
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
    bd1a:	0b e0       	ldi	r16, 0x0B	; 11
    bd1c:	10 e5       	ldi	r17, 0x50	; 80
    bd1e:	2e e2       	ldi	r18, 0x2E	; 46
    bd20:	3a e6       	ldi	r19, 0x6A	; 106
    bd22:	40 e0       	ldi	r20, 0x00	; 0
    bd24:	69 e0       	ldi	r22, 0x09	; 9
    bd26:	c7 01       	movw	r24, r14
    bd28:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bd2c:	0f b6       	in	r0, 0x3f	; 63
    bd2e:	f8 94       	cli
    bd30:	de bf       	out	0x3e, r29	; 62
    bd32:	0f be       	out	0x3f, r0	; 63
    bd34:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6000
}
    bd36:	2a 96       	adiw	r28, 0x0a	; 10
    bd38:	0f b6       	in	r0, 0x3f	; 63
    bd3a:	f8 94       	cli
    bd3c:	de bf       	out	0x3e, r29	; 62
    bd3e:	0f be       	out	0x3f, r0	; 63
    bd40:	cd bf       	out	0x3d, r28	; 61
    bd42:	df 91       	pop	r29
    bd44:	cf 91       	pop	r28
    bd46:	1f 91       	pop	r17
    bd48:	0f 91       	pop	r16
    bd4a:	ff 90       	pop	r15
    bd4c:	ef 90       	pop	r14
    bd4e:	08 95       	ret

0000bd50 <button_set_network_dns_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_network_dns_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5947

/*
 * funkce onclick a pomocna funkce pro nastaveni dns
 */
void button_set_network_dns_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bd50:	ef 92       	push	r14
    bd52:	ff 92       	push	r15
    bd54:	0f 93       	push	r16
    bd56:	1f 93       	push	r17
    bd58:	cf 93       	push	r28
    bd5a:	df 93       	push	r29
    bd5c:	cd b7       	in	r28, 0x3d	; 61
    bd5e:	de b7       	in	r29, 0x3e	; 62
    bd60:	60 97       	sbiw	r28, 0x10	; 16
    bd62:	0f b6       	in	r0, 0x3f	; 63
    bd64:	f8 94       	cli
    bd66:	de bf       	out	0x3e, r29	; 62
    bd68:	0f be       	out	0x3f, r0	; 63
    bd6a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5949
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bd6c:	70 e0       	ldi	r23, 0x00	; 0
    bd6e:	60 e0       	ldi	r22, 0x00	; 0
    bd70:	85 e6       	ldi	r24, 0x65	; 101
    bd72:	90 e0       	ldi	r25, 0x00	; 0
    bd74:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5950
  sprintf(ip_text, "%d.%d.%d.%d", device.myDNS[0], device.myDNS[1], device.myDNS[2], device.myDNS[3]);
    bd78:	e5 eb       	ldi	r30, 0xB5	; 181
    bd7a:	fd e0       	ldi	r31, 0x0D	; 13
    bd7c:	81 89       	ldd	r24, Z+17	; 0x11
    bd7e:	1f 92       	push	r1
    bd80:	8f 93       	push	r24
    bd82:	80 89       	ldd	r24, Z+16	; 0x10
    bd84:	1f 92       	push	r1
    bd86:	8f 93       	push	r24
    bd88:	87 85       	ldd	r24, Z+15	; 0x0f
    bd8a:	1f 92       	push	r1
    bd8c:	8f 93       	push	r24
    bd8e:	86 85       	ldd	r24, Z+14	; 0x0e
    bd90:	1f 92       	push	r1
    bd92:	8f 93       	push	r24
    bd94:	85 e3       	ldi	r24, 0x35	; 53
    bd96:	93 e0       	ldi	r25, 0x03	; 3
    bd98:	9f 93       	push	r25
    bd9a:	8f 93       	push	r24
    bd9c:	ce 01       	movw	r24, r28
    bd9e:	01 96       	adiw	r24, 0x01	; 1
    bda0:	7c 01       	movw	r14, r24
    bda2:	9f 93       	push	r25
    bda4:	8f 93       	push	r24
    bda6:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5951
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_dns, &valid_ipv4_address_element_string);
    bdaa:	0d e0       	ldi	r16, 0x0D	; 13
    bdac:	10 e5       	ldi	r17, 0x50	; 80
    bdae:	28 e2       	ldi	r18, 0x28	; 40
    bdb0:	30 e7       	ldi	r19, 0x70	; 112
    bdb2:	40 e0       	ldi	r20, 0x00	; 0
    bdb4:	60 e1       	ldi	r22, 0x10	; 16
    bdb6:	c7 01       	movw	r24, r14
    bdb8:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bdbc:	0f b6       	in	r0, 0x3f	; 63
    bdbe:	f8 94       	cli
    bdc0:	de bf       	out	0x3e, r29	; 62
    bdc2:	0f be       	out	0x3f, r0	; 63
    bdc4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5952
}
    bdc6:	60 96       	adiw	r28, 0x10	; 16
    bdc8:	0f b6       	in	r0, 0x3f	; 63
    bdca:	f8 94       	cli
    bdcc:	de bf       	out	0x3e, r29	; 62
    bdce:	0f be       	out	0x3f, r0	; 63
    bdd0:	cd bf       	out	0x3d, r28	; 61
    bdd2:	df 91       	pop	r29
    bdd4:	cf 91       	pop	r28
    bdd6:	1f 91       	pop	r17
    bdd8:	0f 91       	pop	r16
    bdda:	ff 90       	pop	r15
    bddc:	ef 90       	pop	r14
    bdde:	08 95       	ret

0000bde0 <button_set_network_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_set_network_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5929

/*
 * funkce onclick a pomocna funkce pro nastaveni nazvu
 */
void button_set_network_name_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bde0:	0f 93       	push	r16
    bde2:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5931
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    bde4:	70 e0       	ldi	r23, 0x00	; 0
    bde6:	60 e0       	ldi	r22, 0x00	; 0
    bde8:	87 e6       	ldi	r24, 0x67	; 103
    bdea:	90 e0       	ldi	r25, 0x00	; 0
    bdec:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5932
  display_element_set_string(device.nazev, 10, 0, &helper_dialog_network_set_name, &valid_true);
    bdf0:	0b e0       	ldi	r16, 0x0B	; 11
    bdf2:	10 e5       	ldi	r17, 0x50	; 80
    bdf4:	2d e4       	ldi	r18, 0x4D	; 77
    bdf6:	30 e7       	ldi	r19, 0x70	; 112
    bdf8:	40 e0       	ldi	r20, 0x00	; 0
    bdfa:	6a e0       	ldi	r22, 0x0A	; 10
    bdfc:	8b ec       	ldi	r24, 0xCB	; 203
    bdfe:	9d e0       	ldi	r25, 0x0D	; 13
    be00:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5933
}
    be04:	1f 91       	pop	r17
    be06:	0f 91       	pop	r16
    be08:	08 95       	ret

0000be0a <button_set_network_gw_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_set_network_gw_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5909

/*
 * funkce onclick a pomocna funkce pro nastaveni vychozi brany
 */
void button_set_network_gw_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    be0a:	ef 92       	push	r14
    be0c:	ff 92       	push	r15
    be0e:	0f 93       	push	r16
    be10:	1f 93       	push	r17
    be12:	cf 93       	push	r28
    be14:	df 93       	push	r29
    be16:	cd b7       	in	r28, 0x3d	; 61
    be18:	de b7       	in	r29, 0x3e	; 62
    be1a:	60 97       	sbiw	r28, 0x10	; 16
    be1c:	0f b6       	in	r0, 0x3f	; 63
    be1e:	f8 94       	cli
    be20:	de bf       	out	0x3e, r29	; 62
    be22:	0f be       	out	0x3f, r0	; 63
    be24:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5911
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    be26:	70 e0       	ldi	r23, 0x00	; 0
    be28:	60 e0       	ldi	r22, 0x00	; 0
    be2a:	85 e6       	ldi	r24, 0x65	; 101
    be2c:	90 e0       	ldi	r25, 0x00	; 0
    be2e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5912
  sprintf(ip_text, "%d.%d.%d.%d", device.myGW[0], device.myGW[1], device.myGW[2], device.myGW[3]);
    be32:	e5 eb       	ldi	r30, 0xB5	; 181
    be34:	fd e0       	ldi	r31, 0x0D	; 13
    be36:	85 89       	ldd	r24, Z+21	; 0x15
    be38:	1f 92       	push	r1
    be3a:	8f 93       	push	r24
    be3c:	84 89       	ldd	r24, Z+20	; 0x14
    be3e:	1f 92       	push	r1
    be40:	8f 93       	push	r24
    be42:	83 89       	ldd	r24, Z+19	; 0x13
    be44:	1f 92       	push	r1
    be46:	8f 93       	push	r24
    be48:	82 89       	ldd	r24, Z+18	; 0x12
    be4a:	1f 92       	push	r1
    be4c:	8f 93       	push	r24
    be4e:	85 e3       	ldi	r24, 0x35	; 53
    be50:	93 e0       	ldi	r25, 0x03	; 3
    be52:	9f 93       	push	r25
    be54:	8f 93       	push	r24
    be56:	ce 01       	movw	r24, r28
    be58:	01 96       	adiw	r24, 0x01	; 1
    be5a:	7c 01       	movw	r14, r24
    be5c:	9f 93       	push	r25
    be5e:	8f 93       	push	r24
    be60:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5913
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_gw, &valid_ipv4_address_element_string);
    be64:	0d e0       	ldi	r16, 0x0D	; 13
    be66:	10 e5       	ldi	r17, 0x50	; 80
    be68:	2f e6       	ldi	r18, 0x6F	; 111
    be6a:	30 e7       	ldi	r19, 0x70	; 112
    be6c:	40 e0       	ldi	r20, 0x00	; 0
    be6e:	60 e1       	ldi	r22, 0x10	; 16
    be70:	c7 01       	movw	r24, r14
    be72:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    be76:	0f b6       	in	r0, 0x3f	; 63
    be78:	f8 94       	cli
    be7a:	de bf       	out	0x3e, r29	; 62
    be7c:	0f be       	out	0x3f, r0	; 63
    be7e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914
}
    be80:	60 96       	adiw	r28, 0x10	; 16
    be82:	0f b6       	in	r0, 0x3f	; 63
    be84:	f8 94       	cli
    be86:	de bf       	out	0x3e, r29	; 62
    be88:	0f be       	out	0x3f, r0	; 63
    be8a:	cd bf       	out	0x3d, r28	; 61
    be8c:	df 91       	pop	r29
    be8e:	cf 91       	pop	r28
    be90:	1f 91       	pop	r17
    be92:	0f 91       	pop	r16
    be94:	ff 90       	pop	r15
    be96:	ef 90       	pop	r14
    be98:	08 95       	ret

0000be9a <button_set_network_mask_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_set_network_mask_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5889

/*
 * funkce onclick a pomocna funkce pro nastaveni masky
 */
void button_set_network_mask_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    be9a:	ef 92       	push	r14
    be9c:	ff 92       	push	r15
    be9e:	0f 93       	push	r16
    bea0:	1f 93       	push	r17
    bea2:	cf 93       	push	r28
    bea4:	df 93       	push	r29
    bea6:	cd b7       	in	r28, 0x3d	; 61
    bea8:	de b7       	in	r29, 0x3e	; 62
    beaa:	60 97       	sbiw	r28, 0x10	; 16
    beac:	0f b6       	in	r0, 0x3f	; 63
    beae:	f8 94       	cli
    beb0:	de bf       	out	0x3e, r29	; 62
    beb2:	0f be       	out	0x3f, r0	; 63
    beb4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5891
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    beb6:	70 e0       	ldi	r23, 0x00	; 0
    beb8:	60 e0       	ldi	r22, 0x00	; 0
    beba:	85 e6       	ldi	r24, 0x65	; 101
    bebc:	90 e0       	ldi	r25, 0x00	; 0
    bebe:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5892
  sprintf(ip_text, "%d.%d.%d.%d", device.myMASK[0], device.myMASK[1], device.myMASK[2], device.myMASK[3]);
    bec2:	e5 eb       	ldi	r30, 0xB5	; 181
    bec4:	fd e0       	ldi	r31, 0x0D	; 13
    bec6:	85 85       	ldd	r24, Z+13	; 0x0d
    bec8:	1f 92       	push	r1
    beca:	8f 93       	push	r24
    becc:	84 85       	ldd	r24, Z+12	; 0x0c
    bece:	1f 92       	push	r1
    bed0:	8f 93       	push	r24
    bed2:	83 85       	ldd	r24, Z+11	; 0x0b
    bed4:	1f 92       	push	r1
    bed6:	8f 93       	push	r24
    bed8:	82 85       	ldd	r24, Z+10	; 0x0a
    beda:	1f 92       	push	r1
    bedc:	8f 93       	push	r24
    bede:	85 e3       	ldi	r24, 0x35	; 53
    bee0:	93 e0       	ldi	r25, 0x03	; 3
    bee2:	9f 93       	push	r25
    bee4:	8f 93       	push	r24
    bee6:	ce 01       	movw	r24, r28
    bee8:	01 96       	adiw	r24, 0x01	; 1
    beea:	7c 01       	movw	r14, r24
    beec:	9f 93       	push	r25
    beee:	8f 93       	push	r24
    bef0:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5893
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_mask, &valid_ipv4_address_element_string);
    bef4:	0d e0       	ldi	r16, 0x0D	; 13
    bef6:	10 e5       	ldi	r17, 0x50	; 80
    bef8:	24 e9       	ldi	r18, 0x94	; 148
    befa:	30 e7       	ldi	r19, 0x70	; 112
    befc:	40 e0       	ldi	r20, 0x00	; 0
    befe:	60 e1       	ldi	r22, 0x10	; 16
    bf00:	c7 01       	movw	r24, r14
    bf02:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bf06:	0f b6       	in	r0, 0x3f	; 63
    bf08:	f8 94       	cli
    bf0a:	de bf       	out	0x3e, r29	; 62
    bf0c:	0f be       	out	0x3f, r0	; 63
    bf0e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5894
}
    bf10:	60 96       	adiw	r28, 0x10	; 16
    bf12:	0f b6       	in	r0, 0x3f	; 63
    bf14:	f8 94       	cli
    bf16:	de bf       	out	0x3e, r29	; 62
    bf18:	0f be       	out	0x3f, r0	; 63
    bf1a:	cd bf       	out	0x3d, r28	; 61
    bf1c:	df 91       	pop	r29
    bf1e:	cf 91       	pop	r28
    bf20:	1f 91       	pop	r17
    bf22:	0f 91       	pop	r16
    bf24:	ff 90       	pop	r15
    bf26:	ef 90       	pop	r14
    bf28:	08 95       	ret

0000bf2a <button_set_network_ip_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_set_network_ip_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5869

/*
 * funkce onclick a pomocna funkce pro nastaveni ip adresy zarizeni
 */
void button_set_network_ip_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bf2a:	ef 92       	push	r14
    bf2c:	ff 92       	push	r15
    bf2e:	0f 93       	push	r16
    bf30:	1f 93       	push	r17
    bf32:	cf 93       	push	r28
    bf34:	df 93       	push	r29
    bf36:	cd b7       	in	r28, 0x3d	; 61
    bf38:	de b7       	in	r29, 0x3e	; 62
    bf3a:	60 97       	sbiw	r28, 0x10	; 16
    bf3c:	0f b6       	in	r0, 0x3f	; 63
    bf3e:	f8 94       	cli
    bf40:	de bf       	out	0x3e, r29	; 62
    bf42:	0f be       	out	0x3f, r0	; 63
    bf44:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5871
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bf46:	70 e0       	ldi	r23, 0x00	; 0
    bf48:	60 e0       	ldi	r22, 0x00	; 0
    bf4a:	85 e6       	ldi	r24, 0x65	; 101
    bf4c:	90 e0       	ldi	r25, 0x00	; 0
    bf4e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5872
  sprintf(ip_text, "%d.%d.%d.%d", device.myIP[0], device.myIP[1], device.myIP[2], device.myIP[3]);
    bf52:	e5 eb       	ldi	r30, 0xB5	; 181
    bf54:	fd e0       	ldi	r31, 0x0D	; 13
    bf56:	81 85       	ldd	r24, Z+9	; 0x09
    bf58:	1f 92       	push	r1
    bf5a:	8f 93       	push	r24
    bf5c:	80 85       	ldd	r24, Z+8	; 0x08
    bf5e:	1f 92       	push	r1
    bf60:	8f 93       	push	r24
    bf62:	87 81       	ldd	r24, Z+7	; 0x07
    bf64:	1f 92       	push	r1
    bf66:	8f 93       	push	r24
    bf68:	86 81       	ldd	r24, Z+6	; 0x06
    bf6a:	1f 92       	push	r1
    bf6c:	8f 93       	push	r24
    bf6e:	85 e3       	ldi	r24, 0x35	; 53
    bf70:	93 e0       	ldi	r25, 0x03	; 3
    bf72:	9f 93       	push	r25
    bf74:	8f 93       	push	r24
    bf76:	ce 01       	movw	r24, r28
    bf78:	01 96       	adiw	r24, 0x01	; 1
    bf7a:	7c 01       	movw	r14, r24
    bf7c:	9f 93       	push	r25
    bf7e:	8f 93       	push	r24
    bf80:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5873
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_ip, &valid_ipv4_address_element_string);
    bf84:	0d e0       	ldi	r16, 0x0D	; 13
    bf86:	10 e5       	ldi	r17, 0x50	; 80
    bf88:	29 eb       	ldi	r18, 0xB9	; 185
    bf8a:	30 e7       	ldi	r19, 0x70	; 112
    bf8c:	40 e0       	ldi	r20, 0x00	; 0
    bf8e:	60 e1       	ldi	r22, 0x10	; 16
    bf90:	c7 01       	movw	r24, r14
    bf92:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    bf96:	0f b6       	in	r0, 0x3f	; 63
    bf98:	f8 94       	cli
    bf9a:	de bf       	out	0x3e, r29	; 62
    bf9c:	0f be       	out	0x3f, r0	; 63
    bf9e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5874
}
    bfa0:	60 96       	adiw	r28, 0x10	; 16
    bfa2:	0f b6       	in	r0, 0x3f	; 63
    bfa4:	f8 94       	cli
    bfa6:	de bf       	out	0x3e, r29	; 62
    bfa8:	0f be       	out	0x3f, r0	; 63
    bfaa:	cd bf       	out	0x3d, r28	; 61
    bfac:	df 91       	pop	r29
    bfae:	cf 91       	pop	r28
    bfb0:	1f 91       	pop	r17
    bfb2:	0f 91       	pop	r16
    bfb4:	ff 90       	pop	r15
    bfb6:	ef 90       	pop	r14
    bfb8:	08 95       	ret

0000bfba <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_ntp_set_server_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5848

/*
 * funkce onclick a pomocna funkce pro nastaveni ntp serveru
 */
void button_ntp_set_server_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bfba:	ef 92       	push	r14
    bfbc:	ff 92       	push	r15
    bfbe:	0f 93       	push	r16
    bfc0:	1f 93       	push	r17
    bfc2:	cf 93       	push	r28
    bfc4:	df 93       	push	r29
    bfc6:	cd b7       	in	r28, 0x3d	; 61
    bfc8:	de b7       	in	r29, 0x3e	; 62
    bfca:	60 97       	sbiw	r28, 0x10	; 16
    bfcc:	0f b6       	in	r0, 0x3f	; 63
    bfce:	f8 94       	cli
    bfd0:	de bf       	out	0x3e, r29	; 62
    bfd2:	0f be       	out	0x3f, r0	; 63
    bfd4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5850
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bfd6:	70 e0       	ldi	r23, 0x00	; 0
    bfd8:	60 e0       	ldi	r22, 0x00	; 0
    bfda:	85 e6       	ldi	r24, 0x65	; 101
    bfdc:	90 e0       	ldi	r25, 0x00	; 0
    bfde:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5851
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
    bfe2:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <device+0x51>
    bfe6:	1f 92       	push	r1
    bfe8:	8f 93       	push	r24
    bfea:	80 91 05 0e 	lds	r24, 0x0E05	; 0x800e05 <device+0x50>
    bfee:	1f 92       	push	r1
    bff0:	8f 93       	push	r24
    bff2:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <device+0x4f>
    bff6:	1f 92       	push	r1
    bff8:	8f 93       	push	r24
    bffa:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <device+0x4e>
    bffe:	1f 92       	push	r1
    c000:	8f 93       	push	r24
    c002:	85 e3       	ldi	r24, 0x35	; 53
    c004:	93 e0       	ldi	r25, 0x03	; 3
    c006:	9f 93       	push	r25
    c008:	8f 93       	push	r24
    c00a:	ce 01       	movw	r24, r28
    c00c:	01 96       	adiw	r24, 0x01	; 1
    c00e:	7c 01       	movw	r14, r24
    c010:	9f 93       	push	r25
    c012:	8f 93       	push	r24
    c014:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5852
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
    c018:	0d e0       	ldi	r16, 0x0D	; 13
    c01a:	10 e5       	ldi	r17, 0x50	; 80
    c01c:	2e ed       	ldi	r18, 0xDE	; 222
    c01e:	30 e7       	ldi	r19, 0x70	; 112
    c020:	40 e0       	ldi	r20, 0x00	; 0
    c022:	60 e1       	ldi	r22, 0x10	; 16
    c024:	c7 01       	movw	r24, r14
    c026:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
    c02a:	0f b6       	in	r0, 0x3f	; 63
    c02c:	f8 94       	cli
    c02e:	de bf       	out	0x3e, r29	; 62
    c030:	0f be       	out	0x3f, r0	; 63
    c032:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
}
    c034:	60 96       	adiw	r28, 0x10	; 16
    c036:	0f b6       	in	r0, 0x3f	; 63
    c038:	f8 94       	cli
    c03a:	de bf       	out	0x3e, r29	; 62
    c03c:	0f be       	out	0x3f, r0	; 63
    c03e:	cd bf       	out	0x3d, r28	; 61
    c040:	df 91       	pop	r29
    c042:	cf 91       	pop	r28
    c044:	1f 91       	pop	r17
    c046:	0f 91       	pop	r16
    c048:	ff 90       	pop	r15
    c04a:	ef 90       	pop	r14
    c04c:	08 95       	ret

0000c04e <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5673
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}

void button_set_brightness_auto_shutdown_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_AUTO_SHUTDOWN_SCREEN, 0, 0);
    c04e:	70 e0       	ldi	r23, 0x00	; 0
    c050:	60 e0       	ldi	r22, 0x00	; 0
    c052:	8d e9       	ldi	r24, 0x9D	; 157
    c054:	90 e0       	ldi	r25, 0x00	; 0
    c056:	0c 94 6b bb 	jmp	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000c05a <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
}
///
/// Funce pro nastaveni dialogu pro zobrazeni nastaveni podsvetleni
void button_change_brightness_display_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_BRIGTHNESS_SCREEN, 0, 0);
    c05a:	70 e0       	ldi	r23, 0x00	; 0
    c05c:	60 e0       	ldi	r22, 0x00	; 0
    c05e:	8b e9       	ldi	r24, 0x9B	; 155
    c060:	90 e0       	ldi	r25, 0x00	; 0
    c062:	0c 94 6b bb 	jmp	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000c066 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z49dyn_button_show_all_thermostat_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
   funkce pro vyber menu nastaveni regulatoru
   args3 je index dynamickeho tlacitka
*/
void dyn_button_show_all_thermostat_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_RING_SCREEN, args3, 0);
    c066:	64 2f       	mov	r22, r20
    c068:	70 e0       	ldi	r23, 0x00	; 0
    c06a:	89 e0       	ldi	r24, 0x09	; 9
    c06c:	90 e0       	ldi	r25, 0x00	; 0
    c06e:	0c 94 6b bb 	jmp	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000c072 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z45button_change_default_ring_via_dialog_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4984
/////

/// funkce vyberu vychozi ringu regulatoru
void button_change_default_ring_via_dialog_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring, 0);
    c072:	60 91 22 0b 	lds	r22, 0x0B22	; 0x800b22 <default_ring>
    c076:	70 e0       	ldi	r23, 0x00	; 0
    c078:	8a e0       	ldi	r24, 0x0A	; 10
    c07a:	90 e0       	ldi	r25, 0x00	; 0
    c07c:	0c 94 6b bb 	jmp	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000c080 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695
  tds_associate(idx);
}

/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint16_t args1, uint16_t args2, uint8_t idx)
{
    c080:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4697
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    c082:	8b e0       	ldi	r24, 0x0B	; 11
    c084:	48 9f       	mul	r20, r24
    c086:	f0 01       	movw	r30, r0
    c088:	11 24       	eor	r1, r1
    c08a:	e6 5a       	subi	r30, 0xA6	; 166
    c08c:	f3 4f       	sbci	r31, 0xF3	; 243
    c08e:	62 85       	ldd	r22, Z+10	; 0x0a
    c090:	6f 3f       	cpi	r22, 0xFF	; 255
    c092:	b1 f4       	brne	.+44     	; 0xc0c0 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    c094:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4699
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    c096:	70 e0       	ldi	r23, 0x00	; 0
    c098:	60 e0       	ldi	r22, 0x00	; 0
    c09a:	84 e6       	ldi	r24, 0x64	; 100
    c09c:	90 e0       	ldi	r25, 0x00	; 0
    c09e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4700
    dialog_yes_function = &helper_tds_associate;
    c0a2:	81 e6       	ldi	r24, 0x61	; 97
    c0a4:	97 e7       	ldi	r25, 0x77	; 119
    c0a6:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <dialog_yes_function+0x1>
    c0aa:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701
    dialog_yes_args1 = idx;
    c0ae:	c0 93 58 09 	sts	0x0958, r28	; 0x800958 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4702
    strcpy_P(dialog_text, text_associovat_tds);
    c0b2:	6c e0       	ldi	r22, 0x0C	; 12
    c0b4:	74 e8       	ldi	r23, 0x84	; 132
    c0b6:	81 eb       	ldi	r24, 0xB1	; 177
    c0b8:	99 e0       	ldi	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
  }
}
    c0ba:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4702
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &helper_tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    c0bc:	0c 94 85 f1 	jmp	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    c0c0:	70 e0       	ldi	r23, 0x00	; 0
    c0c2:	84 e0       	ldi	r24, 0x04	; 4
    c0c4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4708
  }
}
    c0c6:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    c0c8:	0c 94 6b bb 	jmp	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000c0cc <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_time_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4121
*/


/// dekorativni funkce zobrazeni casu
void display_element_show_time_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c0cc:	6f 92       	push	r6
    c0ce:	7f 92       	push	r7
    c0d0:	8f 92       	push	r8
    c0d2:	9f 92       	push	r9
    c0d4:	af 92       	push	r10
    c0d6:	bf 92       	push	r11
    c0d8:	cf 92       	push	r12
    c0da:	df 92       	push	r13
    c0dc:	ef 92       	push	r14
    c0de:	ff 92       	push	r15
    c0e0:	0f 93       	push	r16
    c0e2:	1f 93       	push	r17
    c0e4:	cf 93       	push	r28
    c0e6:	df 93       	push	r29
    c0e8:	cd b7       	in	r28, 0x3d	; 61
    c0ea:	de b7       	in	r29, 0x3e	; 62
    c0ec:	68 97       	sbiw	r28, 0x18	; 24
    c0ee:	0f b6       	in	r0, 0x3f	; 63
    c0f0:	f8 94       	cli
    c0f2:	de bf       	out	0x3e, r29	; 62
    c0f4:	0f be       	out	0x3f, r0	; 63
    c0f6:	cd bf       	out	0x3d, r28	; 61
    c0f8:	6c 01       	movw	r12, r24
    c0fa:	5b 01       	movw	r10, r22
    c0fc:	4a 01       	movw	r8, r20
    c0fe:	39 01       	movw	r6, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4124
  uint16_t pos = 0;
  char str1[24];
  strcpy_P(str1, current_time);
    c100:	68 e6       	ldi	r22, 0x68	; 104
    c102:	73 e8       	ldi	r23, 0x83	; 131
    c104:	ce 01       	movw	r24, r28
    c106:	01 96       	adiw	r24, 0x01	; 1
    c108:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4126
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    c10c:	a5 01       	movw	r20, r10
    c10e:	4b 5f       	subi	r20, 0xFB	; 251
    c110:	5f 4f       	sbci	r21, 0xFF	; 255
    c112:	b6 01       	movw	r22, r12
    c114:	61 5b       	subi	r22, 0xB1	; 177
    c116:	7f 4f       	sbci	r23, 0xFF	; 255
    c118:	ee 24       	eor	r14, r14
    c11a:	ea 94       	dec	r14
    c11c:	fe 2c       	mov	r15, r14
    c11e:	10 e0       	ldi	r17, 0x00	; 0
    c120:	00 e0       	ldi	r16, 0x00	; 0
    c122:	21 e0       	ldi	r18, 0x01	; 1
    c124:	ce 01       	movw	r24, r28
    c126:	01 96       	adiw	r24, 0x01	; 1
    c128:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4127
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    c12c:	95 01       	movw	r18, r10
    c12e:	26 0d       	add	r18, r6
    c130:	37 1d       	adc	r19, r7
    c132:	a6 01       	movw	r20, r12
    c134:	48 0d       	add	r20, r8
    c136:	59 1d       	adc	r21, r9
    c138:	b5 01       	movw	r22, r10
    c13a:	c6 01       	movw	r24, r12
    c13c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4128
}
    c140:	68 96       	adiw	r28, 0x18	; 24
    c142:	0f b6       	in	r0, 0x3f	; 63
    c144:	f8 94       	cli
    c146:	de bf       	out	0x3e, r29	; 62
    c148:	0f be       	out	0x3f, r0	; 63
    c14a:	cd bf       	out	0x3d, r28	; 61
    c14c:	df 91       	pop	r29
    c14e:	cf 91       	pop	r28
    c150:	1f 91       	pop	r17
    c152:	0f 91       	pop	r16
    c154:	ff 90       	pop	r15
    c156:	ef 90       	pop	r14
    c158:	df 90       	pop	r13
    c15a:	cf 90       	pop	r12
    c15c:	bf 90       	pop	r11
    c15e:	af 90       	pop	r10
    c160:	9f 90       	pop	r9
    c162:	8f 90       	pop	r8
    c164:	7f 90       	pop	r7
    c166:	6f 90       	pop	r6
    c168:	08 95       	ret

0000c16a <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z25display_element_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082
}

//-----------------------------------------------------------------------------------------------------------------------------------
void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    c16a:	26 0f       	add	r18, r22
    c16c:	37 1f       	adc	r19, r23
    c16e:	48 0f       	add	r20, r24
    c170:	59 1f       	adc	r21, r25
    c172:	0c 94 73 b9 	jmp	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>

0000c176 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1586
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c176:	ff 92       	push	r15
    c178:	0f 93       	push	r16
    c17a:	1f 93       	push	r17
    c17c:	cf 93       	push	r28
    c17e:	df 93       	push	r29
    c180:	ec 01       	movw	r28, r24
    c182:	8b 01       	movw	r16, r22
    c184:	f4 2e       	mov	r15, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1587
  if (dialog_save_valid_function() == 1)
    c186:	e0 91 9c 08 	lds	r30, 0x089C	; 0x80089c <dialog_save_valid_function>
    c18a:	f0 91 9d 08 	lds	r31, 0x089D	; 0x80089d <dialog_save_valid_function+0x1>
    c18e:	19 95       	eicall
    c190:	81 30       	cpi	r24, 0x01	; 1
    c192:	79 f4       	brne	.+30     	; 0xc1b2 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
  {
    dialog_save_string_function(args1, args2, args3);
    c194:	e0 91 9a 08 	lds	r30, 0x089A	; 0x80089a <dialog_save_string_function>
    c198:	f0 91 9b 08 	lds	r31, 0x089B	; 0x80089b <dialog_save_string_function+0x1>
    c19c:	4f 2d       	mov	r20, r15
    c19e:	b8 01       	movw	r22, r16
    c1a0:	ce 01       	movw	r24, r28
    c1a2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1592
    MenuHistoryPrevMenu(0, 0, 0);
  }
}
    c1a4:	df 91       	pop	r29
    c1a6:	cf 91       	pop	r28
    c1a8:	1f 91       	pop	r17
    c1aa:	0f 91       	pop	r16
    c1ac:	ff 90       	pop	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1590
void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_save_valid_function() == 1)
  {
    dialog_save_string_function(args1, args2, args3);
    MenuHistoryPrevMenu(0, 0, 0);
    c1ae:	0c 94 61 bb 	jmp	0x176c2	; 0x176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1592
  }
}
    c1b2:	df 91       	pop	r29
    c1b4:	cf 91       	pop	r28
    c1b6:	1f 91       	pop	r17
    c1b8:	0f 91       	pop	r16
    c1ba:	ff 90       	pop	r15
    c1bc:	08 95       	ret

0000c1be <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1580
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    c1be:	1f 93       	push	r17
    c1c0:	cf 93       	push	r28
    c1c2:	df 93       	push	r29
    c1c4:	ec 01       	movw	r28, r24
    c1c6:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1581
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    c1c8:	90 e0       	ldi	r25, 0x00	; 0
    c1ca:	80 e0       	ldi	r24, 0x00	; 0
    c1cc:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
    c1d0:	ab 01       	movw	r20, r22
    c1d2:	bc 01       	movw	r22, r24
    c1d4:	85 e1       	ldi	r24, 0x15	; 21
    c1d6:	8c 9f       	mul	r24, r28
    c1d8:	f0 01       	movw	r30, r0
    c1da:	8d 9f       	mul	r24, r29
    c1dc:	f0 0d       	add	r31, r0
    c1de:	11 24       	eor	r1, r1
    c1e0:	e3 5a       	subi	r30, 0xA3	; 163
    c1e2:	f6 4f       	sbci	r31, 0xF6	; 246
    c1e4:	03 88       	ldd	r0, Z+19	; 0x13
    c1e6:	f4 89       	ldd	r31, Z+20	; 0x14
    c1e8:	e0 2d       	mov	r30, r0
    c1ea:	21 2f       	mov	r18, r17
    c1ec:	ce 01       	movw	r24, r28
    c1ee:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1583
  MenuHistoryPrevMenu(0, 0, 0);
}
    c1f0:	df 91       	pop	r29
    c1f2:	cf 91       	pop	r28
    c1f4:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1582
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
    c1f6:	0c 94 61 bb 	jmp	0x176c2	; 0x176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000c1fa <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1575
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    c1fa:	80 91 58 09 	lds	r24, 0x0958	; 0x800958 <dialog_yes_args1>
    c1fe:	e0 91 59 09 	lds	r30, 0x0959	; 0x800959 <dialog_yes_function>
    c202:	f0 91 5a 09 	lds	r31, 0x095A	; 0x80095a <dialog_yes_function+0x1>
    c206:	40 e0       	ldi	r20, 0x00	; 0
    c208:	70 e0       	ldi	r23, 0x00	; 0
    c20a:	60 e0       	ldi	r22, 0x00	; 0
    c20c:	90 e0       	ldi	r25, 0x00	; 0
    c20e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1576
  MenuHistoryPrevMenu(0, 0, 0);
    c210:	0c 94 61 bb 	jmp	0x176c2	; 0x176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000c214 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c214:	4f 92       	push	r4
    c216:	5f 92       	push	r5
    c218:	6f 92       	push	r6
    c21a:	7f 92       	push	r7
    c21c:	8f 92       	push	r8
    c21e:	9f 92       	push	r9
    c220:	af 92       	push	r10
    c222:	bf 92       	push	r11
    c224:	cf 92       	push	r12
    c226:	df 92       	push	r13
    c228:	ef 92       	push	r14
    c22a:	ff 92       	push	r15
    c22c:	0f 93       	push	r16
    c22e:	1f 93       	push	r17
    c230:	cf 93       	push	r28
    c232:	df 93       	push	r29
    c234:	ec 01       	movw	r28, r24
    c236:	7b 01       	movw	r14, r22
    c238:	3a 01       	movw	r6, r20
    c23a:	69 01       	movw	r12, r18
    c23c:	28 01       	movw	r4, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c23e:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    c242:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
    c246:	10 e0       	ldi	r17, 0x00	; 0
    c248:	00 e0       	ldi	r16, 0x00	; 0
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4396
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    c24a:	4b 01       	movw	r8, r22
    c24c:	82 0e       	add	r8, r18
    c24e:	93 1e       	adc	r9, r19
    c250:	5c 01       	movw	r10, r24
    c252:	a4 0e       	add	r10, r20
    c254:	b5 1e       	adc	r11, r21
    c256:	94 01       	movw	r18, r8
    c258:	20 1b       	sub	r18, r16
    c25a:	31 0b       	sbc	r19, r17
    c25c:	a5 01       	movw	r20, r10
    c25e:	40 1b       	sub	r20, r16
    c260:	51 0b       	sbc	r21, r17
    c262:	b8 01       	movw	r22, r16
    c264:	6e 0d       	add	r22, r14
    c266:	7f 1d       	adc	r23, r15
    c268:	c8 01       	movw	r24, r16
    c26a:	8c 0f       	add	r24, r28
    c26c:	9d 1f       	adc	r25, r29
    c26e:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    c272:	0f 5f       	subi	r16, 0xFF	; 255
    c274:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    c276:	03 30       	cpi	r16, 0x03	; 3
    c278:	11 05       	cpc	r17, r1
    c27a:	69 f7       	brne	.-38     	; 0xc256 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x42>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c27c:	8f ef       	ldi	r24, 0xFF	; 255
    c27e:	9f ef       	ldi	r25, 0xFF	; 255
    c280:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
    c284:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4398
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    c288:	83 e0       	ldi	r24, 0x03	; 3
    c28a:	68 1a       	sub	r6, r24
    c28c:	71 08       	sbc	r7, r1
    c28e:	6c 0e       	add	r6, r28
    c290:	7d 1e       	adc	r7, r29
    c292:	23 96       	adiw	r28, 0x03	; 3
    c294:	96 01       	movw	r18, r12
    c296:	23 50       	subi	r18, 0x03	; 3
    c298:	31 09       	sbc	r19, r1
    c29a:	2e 0d       	add	r18, r14
    c29c:	3f 1d       	adc	r19, r15
    c29e:	b7 01       	movw	r22, r14
    c2a0:	6d 5f       	subi	r22, 0xFD	; 253
    c2a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c2a4:	a3 01       	movw	r20, r6
    c2a6:	ce 01       	movw	r24, r28
    c2a8:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    c2ac:	60 91 53 09 	lds	r22, 0x0953	; 0x800953 <menu_slider_data_max>
    c2b0:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <menu_slider_data_max_element>
    c2b4:	68 1b       	sub	r22, r24
    c2b6:	77 0b       	sbc	r23, r23
    c2b8:	6f 5f       	subi	r22, 0xFF	; 255
    c2ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c2bc:	c6 01       	movw	r24, r12
    c2be:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <__udivmodhi4>
    c2c2:	f2 01       	movw	r30, r4
    c2c4:	e5 5b       	subi	r30, 0xB5	; 181
    c2c6:	f6 4f       	sbci	r31, 0xF6	; 246
    c2c8:	80 81       	ld	r24, Z
    c2ca:	86 9f       	mul	r24, r22
    c2cc:	60 2d       	mov	r22, r0
    c2ce:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c2d0:	8a e9       	ldi	r24, 0x9A	; 154
    c2d2:	96 ed       	ldi	r25, 0xD6	; 214
    c2d4:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
    c2d8:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    c2dc:	6e 0d       	add	r22, r14
    c2de:	7f 2d       	mov	r23, r15
    c2e0:	71 1d       	adc	r23, r1
    c2e2:	9b 01       	movw	r18, r22
    c2e4:	26 5f       	subi	r18, 0xF6	; 246
    c2e6:	3f 4f       	sbci	r19, 0xFF	; 255
    c2e8:	6b 5f       	subi	r22, 0xFB	; 251
    c2ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c2ec:	a3 01       	movw	r20, r6
    c2ee:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4402
}
    c2f0:	df 91       	pop	r29
    c2f2:	cf 91       	pop	r28
    c2f4:	1f 91       	pop	r17
    c2f6:	0f 91       	pop	r16
    c2f8:	ff 90       	pop	r15
    c2fa:	ef 90       	pop	r14
    c2fc:	df 90       	pop	r13
    c2fe:	cf 90       	pop	r12
    c300:	bf 90       	pop	r11
    c302:	af 90       	pop	r10
    c304:	9f 90       	pop	r9
    c306:	8f 90       	pop	r8
    c308:	7f 90       	pop	r7
    c30a:	6f 90       	pop	r6
    c30c:	5f 90       	pop	r5
    c30e:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    c310:	0c 94 2d b9 	jmp	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>

0000c314 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4371
  if (strlen(text) > 0)
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c314:	6f 92       	push	r6
    c316:	7f 92       	push	r7
    c318:	8f 92       	push	r8
    c31a:	9f 92       	push	r9
    c31c:	af 92       	push	r10
    c31e:	bf 92       	push	r11
    c320:	cf 92       	push	r12
    c322:	df 92       	push	r13
    c324:	ef 92       	push	r14
    c326:	ff 92       	push	r15
    c328:	0f 93       	push	r16
    c32a:	1f 93       	push	r17
    c32c:	cf 93       	push	r28
    c32e:	df 93       	push	r29
    c330:	6c 01       	movw	r12, r24
    c332:	8b 01       	movw	r16, r22
    c334:	3a 01       	movw	r6, r20
    c336:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c338:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    c33c:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
    c340:	f1 2c       	mov	r15, r1
    c342:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4375
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    c344:	4b 01       	movw	r8, r22
    c346:	82 0e       	add	r8, r18
    c348:	93 1e       	adc	r9, r19
    c34a:	5c 01       	movw	r10, r24
    c34c:	a4 0e       	add	r10, r20
    c34e:	b5 1e       	adc	r11, r21
    c350:	94 01       	movw	r18, r8
    c352:	2e 19       	sub	r18, r14
    c354:	3f 09       	sbc	r19, r15
    c356:	a5 01       	movw	r20, r10
    c358:	4e 19       	sub	r20, r14
    c35a:	5f 09       	sbc	r21, r15
    c35c:	b7 01       	movw	r22, r14
    c35e:	60 0f       	add	r22, r16
    c360:	71 1f       	adc	r23, r17
    c362:	c7 01       	movw	r24, r14
    c364:	8c 0d       	add	r24, r12
    c366:	9d 1d       	adc	r25, r13
    c368:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    c36c:	2f ef       	ldi	r18, 0xFF	; 255
    c36e:	e2 1a       	sub	r14, r18
    c370:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    c372:	83 e0       	ldi	r24, 0x03	; 3
    c374:	e8 16       	cp	r14, r24
    c376:	f1 04       	cpc	r15, r1
    c378:	59 f7       	brne	.-42     	; 0xc350 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c37a:	8f ef       	ldi	r24, 0xFF	; 255
    c37c:	9f ef       	ldi	r25, 0xFF	; 255
    c37e:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
    c382:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    c386:	9e 01       	movw	r18, r28
    c388:	23 50       	subi	r18, 0x03	; 3
    c38a:	31 09       	sbc	r19, r1
    c38c:	20 0f       	add	r18, r16
    c38e:	31 1f       	adc	r19, r17
    c390:	a3 01       	movw	r20, r6
    c392:	43 50       	subi	r20, 0x03	; 3
    c394:	51 09       	sbc	r21, r1
    c396:	4c 0d       	add	r20, r12
    c398:	5d 1d       	adc	r21, r13
    c39a:	b8 01       	movw	r22, r16
    c39c:	6d 5f       	subi	r22, 0xFD	; 253
    c39e:	7f 4f       	sbci	r23, 0xFF	; 255
    c3a0:	c6 01       	movw	r24, r12
    c3a2:	03 96       	adiw	r24, 0x03	; 3
    c3a4:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c3a8:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    c3ac:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    c3b0:	8a e2       	ldi	r24, 0x2A	; 42
    c3b2:	99 e0       	ldi	r25, 0x09	; 9
    c3b4:	fc 01       	movw	r30, r24
    c3b6:	01 90       	ld	r0, Z+
    c3b8:	00 20       	and	r0, r0
    c3ba:	e9 f7       	brne	.-6      	; 0xc3b6 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xa2>
    c3bc:	cf 01       	movw	r24, r30
    c3be:	8b 52       	subi	r24, 0x2B	; 43
    c3c0:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    c3c2:	ae 01       	movw	r20, r28
    c3c4:	4c 50       	subi	r20, 0x0C	; 12
    c3c6:	51 09       	sbc	r21, r1
    c3c8:	56 95       	lsr	r21
    c3ca:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c3cc:	01 50       	subi	r16, 0x01	; 1
    c3ce:	11 09       	sbc	r17, r1
    c3d0:	40 0f       	add	r20, r16
    c3d2:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    c3d4:	f6 e0       	ldi	r31, 0x06	; 6
    c3d6:	8f 9f       	mul	r24, r31
    c3d8:	c0 01       	movw	r24, r0
    c3da:	11 24       	eor	r1, r1
    c3dc:	88 0f       	add	r24, r24
    c3de:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4381
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    c3e0:	b3 01       	movw	r22, r6
    c3e2:	68 1b       	sub	r22, r24
    c3e4:	79 0b       	sbc	r23, r25
    c3e6:	76 95       	lsr	r23
    c3e8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4383
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c3ea:	6c 0d       	add	r22, r12
    c3ec:	7d 1d       	adc	r23, r13
    c3ee:	ee 24       	eor	r14, r14
    c3f0:	ea 94       	dec	r14
    c3f2:	fe 2c       	mov	r15, r14
    c3f4:	10 e0       	ldi	r17, 0x00	; 0
    c3f6:	00 e0       	ldi	r16, 0x00	; 0
    c3f8:	22 e0       	ldi	r18, 0x02	; 2
    c3fa:	8a e2       	ldi	r24, 0x2A	; 42
    c3fc:	99 e0       	ldi	r25, 0x09	; 9
    c3fe:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
}
    c402:	df 91       	pop	r29
    c404:	cf 91       	pop	r28
    c406:	1f 91       	pop	r17
    c408:	0f 91       	pop	r16
    c40a:	ff 90       	pop	r15
    c40c:	ef 90       	pop	r14
    c40e:	df 90       	pop	r13
    c410:	cf 90       	pop	r12
    c412:	bf 90       	pop	r11
    c414:	af 90       	pop	r10
    c416:	9f 90       	pop	r9
    c418:	8f 90       	pop	r8
    c41a:	7f 90       	pop	r7
    c41c:	6f 90       	pop	r6
    c41e:	08 95       	ret

0000c420 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
    }
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t idx, uint8_t args2, char *text)
{
    c420:	2f 92       	push	r2
    c422:	3f 92       	push	r3
    c424:	4f 92       	push	r4
    c426:	5f 92       	push	r5
    c428:	6f 92       	push	r6
    c42a:	7f 92       	push	r7
    c42c:	8f 92       	push	r8
    c42e:	9f 92       	push	r9
    c430:	af 92       	push	r10
    c432:	bf 92       	push	r11
    c434:	cf 92       	push	r12
    c436:	df 92       	push	r13
    c438:	ef 92       	push	r14
    c43a:	ff 92       	push	r15
    c43c:	0f 93       	push	r16
    c43e:	1f 93       	push	r17
    c440:	cf 93       	push	r28
    c442:	df 93       	push	r29
    c444:	00 d0       	rcall	.+0      	; 0xc446 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x26>
    c446:	00 d0       	rcall	.+0      	; 0xc448 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x28>
    c448:	00 d0       	rcall	.+0      	; 0xc44a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x2a>
    c44a:	1f 92       	push	r1
    c44c:	1f 92       	push	r1
    c44e:	cd b7       	in	r28, 0x3d	; 61
    c450:	de b7       	in	r29, 0x3e	; 62
    c452:	5c 01       	movw	r10, r24
    c454:	7b 01       	movw	r14, r22
    c456:	2a 01       	movw	r4, r20
    c458:	39 01       	movw	r6, r18
    c45a:	18 01       	movw	r2, r16
    c45c:	46 01       	movw	r8, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c45e:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    c462:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
    c466:	10 e0       	ldi	r17, 0x00	; 0
    c468:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4349
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    c46a:	9b 01       	movw	r18, r22
    c46c:	26 0d       	add	r18, r6
    c46e:	37 1d       	adc	r19, r7
    c470:	3b 87       	std	Y+11, r19	; 0x0b
    c472:	2a 87       	std	Y+10, r18	; 0x0a
    c474:	6c 01       	movw	r12, r24
    c476:	c4 0e       	add	r12, r20
    c478:	d5 1e       	adc	r13, r21
    c47a:	2a 85       	ldd	r18, Y+10	; 0x0a
    c47c:	3b 85       	ldd	r19, Y+11	; 0x0b
    c47e:	20 1b       	sub	r18, r16
    c480:	31 0b       	sbc	r19, r17
    c482:	a6 01       	movw	r20, r12
    c484:	40 1b       	sub	r20, r16
    c486:	51 0b       	sbc	r21, r17
    c488:	b8 01       	movw	r22, r16
    c48a:	6e 0d       	add	r22, r14
    c48c:	7f 1d       	adc	r23, r15
    c48e:	c8 01       	movw	r24, r16
    c490:	8a 0d       	add	r24, r10
    c492:	9b 1d       	adc	r25, r11
    c494:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    c498:	0f 5f       	subi	r16, 0xFF	; 255
    c49a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4348
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    c49c:	03 30       	cpi	r16, 0x03	; 3
    c49e:	11 05       	cpc	r17, r1
    c4a0:	61 f7       	brne	.-40     	; 0xc47a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x5a>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c4a2:	8f ef       	ldi	r24, 0xFF	; 255
    c4a4:	9f ef       	ldi	r25, 0xFF	; 255
    c4a6:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
    c4aa:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4351
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    c4ae:	93 01       	movw	r18, r6
    c4b0:	23 50       	subi	r18, 0x03	; 3
    c4b2:	31 09       	sbc	r19, r1
    c4b4:	2e 0d       	add	r18, r14
    c4b6:	3f 1d       	adc	r19, r15
    c4b8:	a2 01       	movw	r20, r4
    c4ba:	43 50       	subi	r20, 0x03	; 3
    c4bc:	51 09       	sbc	r21, r1
    c4be:	4a 0d       	add	r20, r10
    c4c0:	5b 1d       	adc	r21, r11
    c4c2:	b7 01       	movw	r22, r14
    c4c4:	6d 5f       	subi	r22, 0xFD	; 253
    c4c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c4c8:	c5 01       	movw	r24, r10
    c4ca:	03 96       	adiw	r24, 0x03	; 3
    c4cc:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4353

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    c4d0:	85 e1       	ldi	r24, 0x15	; 21
    c4d2:	82 9d       	mul	r24, r2
    c4d4:	f0 01       	movw	r30, r0
    c4d6:	83 9d       	mul	r24, r3
    c4d8:	f0 0d       	add	r31, r0
    c4da:	11 24       	eor	r1, r1
    c4dc:	e3 5a       	subi	r30, 0xA3	; 163
    c4de:	f6 4f       	sbci	r31, 0xF6	; 246
    c4e0:	85 85       	ldd	r24, Z+13	; 0x0d
    c4e2:	9e 01       	movw	r18, r28
    c4e4:	2f 5f       	subi	r18, 0xFF	; 255
    c4e6:	3f 4f       	sbci	r19, 0xFF	; 255
    c4e8:	69 01       	movw	r12, r18
    c4ea:	81 11       	cpse	r24, r1
    c4ec:	09 c0       	rjmp	.+18     	; 0xc500 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4354
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    c4ee:	60 81       	ld	r22, Z
    c4f0:	71 81       	ldd	r23, Z+1	; 0x01
    c4f2:	82 81       	ldd	r24, Z+2	; 0x02
    c4f4:	93 81       	ldd	r25, Z+3	; 0x03
    c4f6:	89 01       	movw	r16, r18
    c4f8:	22 e0       	ldi	r18, 0x02	; 2
    c4fa:	44 e0       	ldi	r20, 0x04	; 4
    c4fc:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    c500:	85 e1       	ldi	r24, 0x15	; 21
    c502:	82 9d       	mul	r24, r2
    c504:	f0 01       	movw	r30, r0
    c506:	83 9d       	mul	r24, r3
    c508:	f0 0d       	add	r31, r0
    c50a:	11 24       	eor	r1, r1
    c50c:	e3 5a       	subi	r30, 0xA3	; 163
    c50e:	f6 4f       	sbci	r31, 0xF6	; 246
    c510:	85 85       	ldd	r24, Z+13	; 0x0d
    c512:	81 30       	cpi	r24, 0x01	; 1
    c514:	59 f4       	brne	.+22     	; 0xc52c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4357
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    c516:	60 81       	ld	r22, Z
    c518:	71 81       	ldd	r23, Z+1	; 0x01
    c51a:	82 81       	ldd	r24, Z+2	; 0x02
    c51c:	93 81       	ldd	r25, Z+3	; 0x03
    c51e:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
    c522:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    c524:	4a e0       	ldi	r20, 0x0A	; 10
    c526:	b6 01       	movw	r22, r12
    c528:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c52c:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    c530:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    c534:	f6 01       	movw	r30, r12
    c536:	01 90       	ld	r0, Z+
    c538:	00 20       	and	r0, r0
    c53a:	e9 f7       	brne	.-6      	; 0xc536 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x116>
    c53c:	31 97       	sbiw	r30, 0x01	; 1
    c53e:	ec 19       	sub	r30, r12
    c540:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    c542:	3c e0       	ldi	r19, 0x0C	; 12
    c544:	63 1a       	sub	r6, r19
    c546:	71 08       	sbc	r7, r1
    c548:	76 94       	lsr	r7
    c54a:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c54c:	81 e0       	ldi	r24, 0x01	; 1
    c54e:	e8 1a       	sub	r14, r24
    c550:	f1 08       	sbc	r15, r1
    c552:	6e 0c       	add	r6, r14
    c554:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    c556:	96 e0       	ldi	r25, 0x06	; 6
    c558:	e9 9f       	mul	r30, r25
    c55a:	f0 01       	movw	r30, r0
    c55c:	11 24       	eor	r1, r1
    c55e:	ee 0f       	add	r30, r30
    c560:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4362
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    c562:	b2 01       	movw	r22, r4
    c564:	6e 1b       	sub	r22, r30
    c566:	7f 0b       	sbc	r23, r31
    c568:	76 95       	lsr	r23
    c56a:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c56c:	6a 0d       	add	r22, r10
    c56e:	7b 1d       	adc	r23, r11
    c570:	ee 24       	eor	r14, r14
    c572:	ea 94       	dec	r14
    c574:	fe 2c       	mov	r15, r14
    c576:	10 e0       	ldi	r17, 0x00	; 0
    c578:	00 e0       	ldi	r16, 0x00	; 0
    c57a:	22 e0       	ldi	r18, 0x02	; 2
    c57c:	a3 01       	movw	r20, r6
    c57e:	c6 01       	movw	r24, r12
    c580:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366

  if (strlen(text) > 0)
    c584:	f4 01       	movw	r30, r8
    c586:	80 81       	ld	r24, Z
    c588:	88 23       	and	r24, r24
    c58a:	41 f0       	breq	.+16     	; 0xc59c <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x17c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4367
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c58c:	b5 01       	movw	r22, r10
    c58e:	6b 5f       	subi	r22, 0xFB	; 251
    c590:	7f 4f       	sbci	r23, 0xFF	; 255
    c592:	22 e0       	ldi	r18, 0x02	; 2
    c594:	a3 01       	movw	r20, r6
    c596:	c4 01       	movw	r24, r8
    c598:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
}
    c59c:	2b 96       	adiw	r28, 0x0b	; 11
    c59e:	0f b6       	in	r0, 0x3f	; 63
    c5a0:	f8 94       	cli
    c5a2:	de bf       	out	0x3e, r29	; 62
    c5a4:	0f be       	out	0x3f, r0	; 63
    c5a6:	cd bf       	out	0x3d, r28	; 61
    c5a8:	df 91       	pop	r29
    c5aa:	cf 91       	pop	r28
    c5ac:	1f 91       	pop	r17
    c5ae:	0f 91       	pop	r16
    c5b0:	ff 90       	pop	r15
    c5b2:	ef 90       	pop	r14
    c5b4:	df 90       	pop	r13
    c5b6:	cf 90       	pop	r12
    c5b8:	bf 90       	pop	r11
    c5ba:	af 90       	pop	r10
    c5bc:	9f 90       	pop	r9
    c5be:	8f 90       	pop	r8
    c5c0:	7f 90       	pop	r7
    c5c2:	6f 90       	pop	r6
    c5c4:	5f 90       	pop	r5
    c5c6:	4f 90       	pop	r4
    c5c8:	3f 90       	pop	r3
    c5ca:	2f 90       	pop	r2
    c5cc:	08 95       	ret

0000c5ce <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z30display_element_fill_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

void display_element_fill_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c5ce:	0f 93       	push	r16
    c5d0:	1f 93       	push	r17
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c5d2:	10 93 60 0f 	sts	0x0F60, r17	; 0x800f60 <my_lcd+0xb>
    c5d6:	00 93 5f 0f 	sts	0x0F5F, r16	; 0x800f5f <my_lcd+0xa>
_Z30display_element_fill_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
  my_lcd.Set_Draw_color(args1);
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c5da:	26 0f       	add	r18, r22
    c5dc:	37 1f       	adc	r19, r23
    c5de:	48 0f       	add	r20, r24
    c5e0:	59 1f       	adc	r21, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4089
}
    c5e2:	1f 91       	pop	r17
    c5e4:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4088
}

void display_element_fill_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  my_lcd.Set_Draw_color(args1);
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c5e6:	0c 94 2d b9 	jmp	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>

0000c5ea <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4220
  }

}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c5ea:	af 92       	push	r10
    c5ec:	bf 92       	push	r11
    c5ee:	cf 92       	push	r12
    c5f0:	df 92       	push	r13
    c5f2:	ef 92       	push	r14
    c5f4:	ff 92       	push	r15
    c5f6:	0f 93       	push	r16
    c5f8:	1f 93       	push	r17
    c5fa:	cf 93       	push	r28
    c5fc:	df 93       	push	r29
    c5fe:	cd b7       	in	r28, 0x3d	; 61
    c600:	de b7       	in	r29, 0x3e	; 62
    c602:	60 97       	sbiw	r28, 0x10	; 16
    c604:	0f b6       	in	r0, 0x3f	; 63
    c606:	f8 94       	cli
    c608:	de bf       	out	0x3e, r29	; 62
    c60a:	0f be       	out	0x3f, r0	; 63
    c60c:	cd bf       	out	0x3d, r28	; 61
    c60e:	5c 01       	movw	r10, r24
    c610:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    c612:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
    c616:	9e 01       	movw	r18, r28
    c618:	2f 5f       	subi	r18, 0xFF	; 255
    c61a:	3f 4f       	sbci	r19, 0xFF	; 255
    c61c:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4222
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    c61e:	80 fd       	sbrc	r24, 0
    c620:	4e c0       	rjmp	.+156    	; 0xc6be <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    c622:	80 91 10 12 	lds	r24, 0x1210	; 0x801210 <now>
    c626:	90 e0       	ldi	r25, 0x00	; 0
    c628:	80 53       	subi	r24, 0x30	; 48
    c62a:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4224
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    c62c:	9f 93       	push	r25
    c62e:	8f 93       	push	r24
    c630:	80 91 11 12 	lds	r24, 0x1211	; 0x801211 <now+0x1>
    c634:	1f 92       	push	r1
    c636:	8f 93       	push	r24
    c638:	80 91 12 12 	lds	r24, 0x1212	; 0x801212 <now+0x2>
    c63c:	1f 92       	push	r1
    c63e:	8f 93       	push	r24
    c640:	8b e6       	ldi	r24, 0x6B	; 107
    c642:	93 e0       	ldi	r25, 0x03	; 3
    c644:	9f 93       	push	r25
    c646:	8f 93       	push	r24
    c648:	3f 93       	push	r19
    c64a:	2f 93       	push	r18
    c64c:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
    c650:	0f b6       	in	r0, 0x3f	; 63
    c652:	f8 94       	cli
    c654:	de bf       	out	0x3e, r29	; 62
    c656:	0f be       	out	0x3f, r0	; 63
    c658:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c65a:	8f ef       	ldi	r24, 0xFF	; 255
    c65c:	9f ef       	ldi	r25, 0xFF	; 255
    c65e:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
    c662:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4230
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    c666:	4e e8       	ldi	r20, 0x8E	; 142
    c668:	50 e0       	ldi	r21, 0x00	; 0
    c66a:	b8 01       	movw	r22, r16
    c66c:	c5 01       	movw	r24, r10
    c66e:	0e 94 5d b9 	call	0x172ba	; 0x172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
    c672:	b8 01       	movw	r22, r16
    c674:	6f 5f       	subi	r22, 0xFF	; 255
    c676:	7f 4f       	sbci	r23, 0xFF	; 255
    c678:	4e e8       	ldi	r20, 0x8E	; 142
    c67a:	50 e0       	ldi	r21, 0x00	; 0
    c67c:	c5 01       	movw	r24, r10
    c67e:	0e 94 5d b9 	call	0x172ba	; 0x172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
    c682:	a8 01       	movw	r20, r16
    c684:	4e 5f       	subi	r20, 0xFE	; 254
    c686:	5f 4f       	sbci	r21, 0xFF	; 255
    c688:	ee 24       	eor	r14, r14
    c68a:	ea 94       	dec	r14
    c68c:	fe 2c       	mov	r15, r14
    c68e:	10 e0       	ldi	r17, 0x00	; 0
    c690:	00 e0       	ldi	r16, 0x00	; 0
    c692:	23 e0       	ldi	r18, 0x03	; 3
    c694:	b5 01       	movw	r22, r10
    c696:	c6 01       	movw	r24, r12
    c698:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4231
}
    c69c:	60 96       	adiw	r28, 0x10	; 16
    c69e:	0f b6       	in	r0, 0x3f	; 63
    c6a0:	f8 94       	cli
    c6a2:	de bf       	out	0x3e, r29	; 62
    c6a4:	0f be       	out	0x3f, r0	; 63
    c6a6:	cd bf       	out	0x3d, r28	; 61
    c6a8:	df 91       	pop	r29
    c6aa:	cf 91       	pop	r28
    c6ac:	1f 91       	pop	r17
    c6ae:	0f 91       	pop	r16
    c6b0:	ff 90       	pop	r15
    c6b2:	ef 90       	pop	r14
    c6b4:	df 90       	pop	r13
    c6b6:	cf 90       	pop	r12
    c6b8:	bf 90       	pop	r11
    c6ba:	af 90       	pop	r10
    c6bc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
    c6be:	67 e8       	ldi	r22, 0x87	; 135
    c6c0:	73 e8       	ldi	r23, 0x83	; 131
    c6c2:	c9 01       	movw	r24, r18
    c6c4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    c6c8:	c8 cf       	rjmp	.-112    	; 0xc65a <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x70>

0000c6ca <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    c6ca:	cf 93       	push	r28
    c6cc:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    c6ce:	68 2f       	mov	r22, r24
    c6d0:	81 e0       	ldi	r24, 0x01	; 1
    c6d2:	9d e0       	ldi	r25, 0x0D	; 13
    c6d4:	0e 94 ed dc 	call	0x1b9da	; 0x1b9da <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    c6d8:	8c 2f       	mov	r24, r28
    c6da:	cc 0f       	add	r28, r28
    c6dc:	99 0b       	sbc	r25, r25
    c6de:	cf 91       	pop	r28
    c6e0:	08 95       	ret

0000c6e2 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    c6e2:	1f 92       	push	r1
    c6e4:	0f 92       	push	r0
    c6e6:	0f b6       	in	r0, 0x3f	; 63
    c6e8:	0f 92       	push	r0
    c6ea:	11 24       	eor	r1, r1
    c6ec:	0b b6       	in	r0, 0x3b	; 59
    c6ee:	0f 92       	push	r0
    c6f0:	2f 93       	push	r18
    c6f2:	3f 93       	push	r19
    c6f4:	4f 93       	push	r20
    c6f6:	5f 93       	push	r21
    c6f8:	6f 93       	push	r22
    c6fa:	7f 93       	push	r23
    c6fc:	8f 93       	push	r24
    c6fe:	9f 93       	push	r25
    c700:	af 93       	push	r26
    c702:	bf 93       	push	r27
    c704:	ef 93       	push	r30
    c706:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    c708:	81 e0       	ldi	r24, 0x01	; 1
    c70a:	9d e0       	ldi	r25, 0x0D	; 13
    c70c:	0e 94 cc dc 	call	0x1b998	; 0x1b998 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    c710:	ff 91       	pop	r31
    c712:	ef 91       	pop	r30
    c714:	bf 91       	pop	r27
    c716:	af 91       	pop	r26
    c718:	9f 91       	pop	r25
    c71a:	8f 91       	pop	r24
    c71c:	7f 91       	pop	r23
    c71e:	6f 91       	pop	r22
    c720:	5f 91       	pop	r21
    c722:	4f 91       	pop	r20
    c724:	3f 91       	pop	r19
    c726:	2f 91       	pop	r18
    c728:	0f 90       	pop	r0
    c72a:	0b be       	out	0x3b, r0	; 59
    c72c:	0f 90       	pop	r0
    c72e:	0f be       	out	0x3f, r0	; 63
    c730:	0f 90       	pop	r0
    c732:	1f 90       	pop	r1
    c734:	18 95       	reti

0000c736 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    c736:	1f 92       	push	r1
    c738:	0f 92       	push	r0
    c73a:	0f b6       	in	r0, 0x3f	; 63
    c73c:	0f 92       	push	r0
    c73e:	11 24       	eor	r1, r1
    c740:	0b b6       	in	r0, 0x3b	; 59
    c742:	0f 92       	push	r0
    c744:	2f 93       	push	r18
    c746:	8f 93       	push	r24
    c748:	9f 93       	push	r25
    c74a:	ef 93       	push	r30
    c74c:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    c74e:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <Serial+0x10>
    c752:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <Serial+0x11>
    c756:	80 81       	ld	r24, Z
    c758:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <Serial+0x16>
    c75c:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <Serial+0x17>
    c760:	82 fd       	sbrc	r24, 2
    c762:	1d c0       	rjmp	.+58     	; 0xc79e <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    c764:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    c766:	80 91 1a 0d 	lds	r24, 0x0D1A	; 0x800d1a <Serial+0x19>
    c76a:	8f 5f       	subi	r24, 0xFF	; 255
    c76c:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    c76e:	20 91 1b 0d 	lds	r18, 0x0D1B	; 0x800d1b <Serial+0x1a>
    c772:	82 17       	cp	r24, r18
    c774:	41 f0       	breq	.+16     	; 0xc786 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    c776:	e0 91 1a 0d 	lds	r30, 0x0D1A	; 0x800d1a <Serial+0x19>
    c77a:	f0 e0       	ldi	r31, 0x00	; 0
    c77c:	ef 5f       	subi	r30, 0xFF	; 255
    c77e:	f2 4f       	sbci	r31, 0xF2	; 242
    c780:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    c782:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    c786:	ff 91       	pop	r31
    c788:	ef 91       	pop	r30
    c78a:	9f 91       	pop	r25
    c78c:	8f 91       	pop	r24
    c78e:	2f 91       	pop	r18
    c790:	0f 90       	pop	r0
    c792:	0b be       	out	0x3b, r0	; 59
    c794:	0f 90       	pop	r0
    c796:	0f be       	out	0x3f, r0	; 63
    c798:	0f 90       	pop	r0
    c79a:	1f 90       	pop	r1
    c79c:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    c79e:	80 81       	ld	r24, Z
    c7a0:	f2 cf       	rjmp	.-28     	; 0xc786 <__vector_25+0x50>

0000c7a2 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    c7a2:	1f 93       	push	r17
    c7a4:	cf 93       	push	r28
    c7a6:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    c7a8:	28 2f       	mov	r18, r24
    c7aa:	30 e0       	ldi	r19, 0x00	; 0
    c7ac:	f9 01       	movw	r30, r18
    c7ae:	ec 51       	subi	r30, 0x1C	; 28
    c7b0:	f9 47       	sbci	r31, 0x79	; 121
    c7b2:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    c7b4:	f9 01       	movw	r30, r18
    c7b6:	ed 52       	subi	r30, 0x2D	; 45
    c7b8:	f2 47       	sbci	r31, 0x72	; 114
    c7ba:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    c7bc:	f9 01       	movw	r30, r18
    c7be:	e7 5e       	subi	r30, 0xE7	; 231
    c7c0:	f1 47       	sbci	r31, 0x71	; 113
    c7c2:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    c7c4:	cc 23       	and	r28, r28
    c7c6:	a9 f0       	breq	.+42     	; 0xc7f2 <digitalWrite+0x50>
    c7c8:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c7ca:	81 11       	cpse	r24, r1
    c7cc:	0e 94 89 47 	call	0x8f12	; 0x8f12 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    c7d0:	ec 2f       	mov	r30, r28
    c7d2:	f0 e0       	ldi	r31, 0x00	; 0
    c7d4:	ee 0f       	add	r30, r30
    c7d6:	ff 1f       	adc	r31, r31
    c7d8:	e7 5f       	subi	r30, 0xF7	; 247
    c7da:	f1 47       	sbci	r31, 0x71	; 113
    c7dc:	a5 91       	lpm	r26, Z+
    c7de:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    c7e0:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    c7e2:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    c7e4:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    c7e6:	11 11       	cpse	r17, r1
    c7e8:	08 c0       	rjmp	.+16     	; 0xc7fa <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    c7ea:	d0 95       	com	r29
    c7ec:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    c7ee:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    c7f0:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
    c7f2:	df 91       	pop	r29
    c7f4:	cf 91       	pop	r28
    c7f6:	1f 91       	pop	r17
    c7f8:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    c7fa:	de 2b       	or	r29, r30
    c7fc:	f8 cf       	rjmp	.-16     	; 0xc7ee <digitalWrite+0x4c>

0000c7fe <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    c7fe:	cf 93       	push	r28
    c800:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    c802:	90 e0       	ldi	r25, 0x00	; 0
    c804:	fc 01       	movw	r30, r24
    c806:	ed 52       	subi	r30, 0x2D	; 45
    c808:	f2 47       	sbci	r31, 0x72	; 114
    c80a:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    c80c:	87 5e       	subi	r24, 0xE7	; 231
    c80e:	91 47       	sbci	r25, 0x71	; 113
    c810:	fc 01       	movw	r30, r24
    c812:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    c814:	88 23       	and	r24, r24
    c816:	c9 f0       	breq	.+50     	; 0xc84a <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    c818:	90 e0       	ldi	r25, 0x00	; 0
    c81a:	88 0f       	add	r24, r24
    c81c:	99 1f       	adc	r25, r25
    c81e:	fc 01       	movw	r30, r24
    c820:	ec 52       	subi	r30, 0x2C	; 44
    c822:	f9 47       	sbci	r31, 0x79	; 121
    c824:	a5 91       	lpm	r26, Z+
    c826:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    c828:	fc 01       	movw	r30, r24
    c82a:	e7 5f       	subi	r30, 0xF7	; 247
    c82c:	f1 47       	sbci	r31, 0x71	; 113
    c82e:	c5 91       	lpm	r28, Z+
    c830:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    c832:	61 11       	cpse	r22, r1
    c834:	0d c0       	rjmp	.+26     	; 0xc850 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    c836:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    c838:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    c83a:	8c 91       	ld	r24, X
    c83c:	20 95       	com	r18
    c83e:	82 23       	and	r24, r18
    c840:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    c842:	88 81       	ld	r24, Y
    c844:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    c846:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    c848:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    c84a:	df 91       	pop	r29
    c84c:	cf 91       	pop	r28
    c84e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    c850:	62 30       	cpi	r22, 0x02	; 2
    c852:	51 f4       	brne	.+20     	; 0xc868 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    c854:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    c856:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    c858:	3c 91       	ld	r19, X
    c85a:	82 2f       	mov	r24, r18
    c85c:	80 95       	com	r24
    c85e:	83 23       	and	r24, r19
    c860:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    c862:	e8 81       	ld	r30, Y
    c864:	2e 2b       	or	r18, r30
    c866:	ef cf       	rjmp	.-34     	; 0xc846 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    c868:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    c86a:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    c86c:	ec 91       	ld	r30, X
    c86e:	2e 2b       	or	r18, r30
    c870:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    c872:	8f bf       	out	0x3f, r24	; 63
    c874:	ea cf       	rjmp	.-44     	; 0xc84a <pinMode+0x4c>

0000c876 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    c876:	cf 93       	push	r28
    c878:	df 93       	push	r29
    c87a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    c87c:	61 e0       	ldi	r22, 0x01	; 1
    c87e:	8c 81       	ldd	r24, Y+4	; 0x04
    c880:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    c884:	60 e0       	ldi	r22, 0x00	; 0
    c886:	8b 81       	ldd	r24, Y+3	; 0x03
    c888:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    c88c:	61 e0       	ldi	r22, 0x01	; 1
    c88e:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    c890:	df 91       	pop	r29
    c892:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    c894:	0c 94 ff 63 	jmp	0xc7fe	; 0xc7fe <pinMode>

0000c898 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    c898:	82 30       	cpi	r24, 0x02	; 2
    c89a:	91 05       	cpc	r25, r1
    c89c:	38 f0       	brcs	.+14     	; 0xc8ac <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    c89e:	88 0f       	add	r24, r24
    c8a0:	99 1f       	adc	r25, r25
    c8a2:	88 0f       	add	r24, r24
    c8a4:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    c8a6:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    c8a8:	01 97       	sbiw	r24, 0x01	; 1
    c8aa:	f1 f7       	brne	.-4      	; 0xc8a8 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    c8ac:	08 95       	ret

0000c8ae <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396
#endif
#endif // 0
}

void delay(unsigned long ms)
{
    c8ae:	8f 92       	push	r8
    c8b0:	9f 92       	push	r9
    c8b2:	af 92       	push	r10
    c8b4:	bf 92       	push	r11
    c8b6:	cf 92       	push	r12
    c8b8:	df 92       	push	r13
    c8ba:	ef 92       	push	r14
    c8bc:	ff 92       	push	r15
    c8be:	6b 01       	movw	r12, r22
    c8c0:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    c8c2:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <micros>
    c8c6:	4b 01       	movw	r8, r22
    c8c8:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    c8ca:	c1 14       	cp	r12, r1
    c8cc:	d1 04       	cpc	r13, r1
    c8ce:	e1 04       	cpc	r14, r1
    c8d0:	f1 04       	cpc	r15, r1
    c8d2:	b9 f0       	breq	.+46     	; 0xc902 <delay+0x54>
    c8d4:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <micros>
    c8d8:	68 19       	sub	r22, r8
    c8da:	79 09       	sbc	r23, r9
    c8dc:	8a 09       	sbc	r24, r10
    c8de:	9b 09       	sbc	r25, r11
    c8e0:	68 3e       	cpi	r22, 0xE8	; 232
    c8e2:	73 40       	sbci	r23, 0x03	; 3
    c8e4:	81 05       	cpc	r24, r1
    c8e6:	91 05       	cpc	r25, r1
    c8e8:	80 f3       	brcs	.-32     	; 0xc8ca <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    c8ea:	21 e0       	ldi	r18, 0x01	; 1
    c8ec:	c2 1a       	sub	r12, r18
    c8ee:	d1 08       	sbc	r13, r1
    c8f0:	e1 08       	sbc	r14, r1
    c8f2:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    c8f4:	88 ee       	ldi	r24, 0xE8	; 232
    c8f6:	88 0e       	add	r8, r24
    c8f8:	83 e0       	ldi	r24, 0x03	; 3
    c8fa:	98 1e       	adc	r9, r24
    c8fc:	a1 1c       	adc	r10, r1
    c8fe:	b1 1c       	adc	r11, r1
    c900:	e4 cf       	rjmp	.-56     	; 0xc8ca <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
    c902:	ff 90       	pop	r15
    c904:	ef 90       	pop	r14
    c906:	df 90       	pop	r13
    c908:	cf 90       	pop	r12
    c90a:	bf 90       	pop	r11
    c90c:	af 90       	pop	r10
    c90e:	9f 90       	pop	r9
    c910:	8f 90       	pop	r8
    c912:	08 95       	ret

0000c914 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    c914:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    c916:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    c918:	60 91 fe 0a 	lds	r22, 0x0AFE	; 0x800afe <timer0_millis>
    c91c:	70 91 ff 0a 	lds	r23, 0x0AFF	; 0x800aff <timer0_millis+0x1>
    c920:	80 91 00 0b 	lds	r24, 0x0B00	; 0x800b00 <timer0_millis+0x2>
    c924:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    c928:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    c92a:	08 95       	ret

0000c92c <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    c92c:	1f 92       	push	r1
    c92e:	0f 92       	push	r0
    c930:	0f b6       	in	r0, 0x3f	; 63
    c932:	0f 92       	push	r0
    c934:	11 24       	eor	r1, r1
    c936:	2f 93       	push	r18
    c938:	3f 93       	push	r19
    c93a:	8f 93       	push	r24
    c93c:	9f 93       	push	r25
    c93e:	af 93       	push	r26
    c940:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    c942:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <timer0_millis>
    c946:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <timer0_millis+0x1>
    c94a:	a0 91 00 0b 	lds	r26, 0x0B00	; 0x800b00 <timer0_millis+0x2>
    c94e:	b0 91 01 0b 	lds	r27, 0x0B01	; 0x800b01 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    c952:	30 91 fd 0a 	lds	r19, 0x0AFD	; 0x800afd <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    c956:	23 e0       	ldi	r18, 0x03	; 3
    c958:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    c95a:	2d 37       	cpi	r18, 0x7D	; 125
    c95c:	68 f1       	brcs	.+90     	; 0xc9b8 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    c95e:	26 e8       	ldi	r18, 0x86	; 134
    c960:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    c962:	02 96       	adiw	r24, 0x02	; 2
    c964:	a1 1d       	adc	r26, r1
    c966:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    c968:	20 93 fd 0a 	sts	0x0AFD, r18	; 0x800afd <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    c96c:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <timer0_millis>
    c970:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <timer0_millis+0x1>
    c974:	a0 93 00 0b 	sts	0x0B00, r26	; 0x800b00 <timer0_millis+0x2>
    c978:	b0 93 01 0b 	sts	0x0B01, r27	; 0x800b01 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    c97c:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <timer0_overflow_count>
    c980:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <timer0_overflow_count+0x1>
    c984:	a0 91 04 0b 	lds	r26, 0x0B04	; 0x800b04 <timer0_overflow_count+0x2>
    c988:	b0 91 05 0b 	lds	r27, 0x0B05	; 0x800b05 <timer0_overflow_count+0x3>
    c98c:	01 96       	adiw	r24, 0x01	; 1
    c98e:	a1 1d       	adc	r26, r1
    c990:	b1 1d       	adc	r27, r1
    c992:	80 93 02 0b 	sts	0x0B02, r24	; 0x800b02 <timer0_overflow_count>
    c996:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <timer0_overflow_count+0x1>
    c99a:	a0 93 04 0b 	sts	0x0B04, r26	; 0x800b04 <timer0_overflow_count+0x2>
    c99e:	b0 93 05 0b 	sts	0x0B05, r27	; 0x800b05 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    c9a2:	bf 91       	pop	r27
    c9a4:	af 91       	pop	r26
    c9a6:	9f 91       	pop	r25
    c9a8:	8f 91       	pop	r24
    c9aa:	3f 91       	pop	r19
    c9ac:	2f 91       	pop	r18
    c9ae:	0f 90       	pop	r0
    c9b0:	0f be       	out	0x3f, r0	; 63
    c9b2:	0f 90       	pop	r0
    c9b4:	1f 90       	pop	r1
    c9b6:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    c9b8:	01 96       	adiw	r24, 0x01	; 1
    c9ba:	a1 1d       	adc	r26, r1
    c9bc:	b1 1d       	adc	r27, r1
    c9be:	d4 cf       	rjmp	.-88     	; 0xc968 <__vector_23+0x3c>

0000c9c0 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
    c9c0:	1f 92       	push	r1
    c9c2:	0f 92       	push	r0
    c9c4:	0f b6       	in	r0, 0x3f	; 63
    c9c6:	0f 92       	push	r0
    c9c8:	11 24       	eor	r1, r1
    c9ca:	0b b6       	in	r0, 0x3b	; 59
    c9cc:	0f 92       	push	r0
    c9ce:	2f 93       	push	r18
    c9d0:	3f 93       	push	r19
    c9d2:	4f 93       	push	r20
    c9d4:	5f 93       	push	r21
    c9d6:	6f 93       	push	r22
    c9d8:	7f 93       	push	r23
    c9da:	8f 93       	push	r24
    c9dc:	9f 93       	push	r25
    c9de:	af 93       	push	r26
    c9e0:	bf 93       	push	r27
    c9e2:	cf 93       	push	r28
    c9e4:	ef 93       	push	r30
    c9e6:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
    c9e8:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
    c9ea:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    c9ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    c9f2:	e0 91 fb 0a 	lds	r30, 0x0AFB	; 0x800afb <a2d_interupt_func>
    c9f6:	f0 91 fc 0a 	lds	r31, 0x0AFC	; 0x800afc <a2d_interupt_func+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
    c9fa:	68 2f       	mov	r22, r24
    c9fc:	70 e0       	ldi	r23, 0x00	; 0
    c9fe:	76 2f       	mov	r23, r22
    ca00:	66 27       	eor	r22, r22
    ca02:	69 0f       	add	r22, r25
    ca04:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    ca06:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <a2d_input>
    ca0a:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
    ca0c:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
    ca0e:	ff 91       	pop	r31
    ca10:	ef 91       	pop	r30
    ca12:	cf 91       	pop	r28
    ca14:	bf 91       	pop	r27
    ca16:	af 91       	pop	r26
    ca18:	9f 91       	pop	r25
    ca1a:	8f 91       	pop	r24
    ca1c:	7f 91       	pop	r23
    ca1e:	6f 91       	pop	r22
    ca20:	5f 91       	pop	r21
    ca22:	4f 91       	pop	r20
    ca24:	3f 91       	pop	r19
    ca26:	2f 91       	pop	r18
    ca28:	0f 90       	pop	r0
    ca2a:	0b be       	out	0x3b, r0	; 59
    ca2c:	0f 90       	pop	r0
    ca2e:	0f be       	out	0x3f, r0	; 63
    ca30:	0f 90       	pop	r0
    ca32:	1f 90       	pop	r1
    ca34:	18 95       	reti

0000ca36 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
    ca36:	cf 92       	push	r12
    ca38:	df 92       	push	r13
    ca3a:	ef 92       	push	r14
    ca3c:	ff 92       	push	r15
    ca3e:	0f 93       	push	r16
    ca40:	1f 93       	push	r17
    ca42:	cf 93       	push	r28
    ca44:	df 93       	push	r29
    ca46:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
    ca48:	cf 80       	ldd	r12, Y+7	; 0x07
    ca4a:	d8 84       	ldd	r13, Y+8	; 0x08
    ca4c:	e9 84       	ldd	r14, Y+9	; 0x09
    ca4e:	fa 84       	ldd	r15, Y+10	; 0x0a
    ca50:	8f 85       	ldd	r24, Y+15	; 0x0f
    ca52:	98 89       	ldd	r25, Y+16	; 0x10
    ca54:	a9 89       	ldd	r26, Y+17	; 0x11
    ca56:	ba 89       	ldd	r27, Y+18	; 0x12
    ca58:	c8 0e       	add	r12, r24
    ca5a:	d9 1e       	adc	r13, r25
    ca5c:	ea 1e       	adc	r14, r26
    ca5e:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
    ca60:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
    ca64:	0b 89       	ldd	r16, Y+19	; 0x13
    ca66:	1c 89       	ldd	r17, Y+20	; 0x14
    ca68:	2d 89       	ldd	r18, Y+21	; 0x15
    ca6a:	3e 89       	ldd	r19, Y+22	; 0x16
    ca6c:	60 1b       	sub	r22, r16
    ca6e:	71 0b       	sbc	r23, r17
    ca70:	82 0b       	sbc	r24, r18
    ca72:	93 0b       	sbc	r25, r19
    ca74:	28 ee       	ldi	r18, 0xE8	; 232
    ca76:	33 e0       	ldi	r19, 0x03	; 3
    ca78:	40 e0       	ldi	r20, 0x00	; 0
    ca7a:	50 e0       	ldi	r21, 0x00	; 0
    ca7c:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
    ca80:	ca 01       	movw	r24, r20
    ca82:	b9 01       	movw	r22, r18
    ca84:	6c 0d       	add	r22, r12
    ca86:	7d 1d       	adc	r23, r13
    ca88:	8e 1d       	adc	r24, r14
    ca8a:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
    ca8c:	df 91       	pop	r29
    ca8e:	cf 91       	pop	r28
    ca90:	1f 91       	pop	r17
    ca92:	0f 91       	pop	r16
    ca94:	ff 90       	pop	r15
    ca96:	ef 90       	pop	r14
    ca98:	df 90       	pop	r13
    ca9a:	cf 90       	pop	r12
    ca9c:	08 95       	ret

0000ca9e <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
    ca9e:	cf 93       	push	r28
    caa0:	df 93       	push	r29
    caa2:	00 d0       	rcall	.+0      	; 0xcaa4 <NTPClient::getYear() const+0x6>
    caa4:	1f 92       	push	r1
    caa6:	cd b7       	in	r28, 0x3d	; 61
    caa8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
    caaa:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
    caae:	69 83       	std	Y+1, r22	; 0x01
    cab0:	7a 83       	std	Y+2, r23	; 0x02
    cab2:	8b 83       	std	Y+3, r24	; 0x03
    cab4:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
    cab6:	ce 01       	movw	r24, r28
    cab8:	01 96       	adiw	r24, 0x01	; 1
    caba:	0e 94 6d dd 	call	0x1bada	; 0x1bada <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1870;
    cabe:	fc 01       	movw	r30, r24
    cac0:	86 81       	ldd	r24, Z+6	; 0x06
    cac2:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
    cac4:	82 5b       	subi	r24, 0xB2	; 178
    cac6:	98 4f       	sbci	r25, 0xF8	; 248
    cac8:	0f 90       	pop	r0
    caca:	0f 90       	pop	r0
    cacc:	0f 90       	pop	r0
    cace:	0f 90       	pop	r0
    cad0:	df 91       	pop	r29
    cad2:	cf 91       	pop	r28
    cad4:	08 95       	ret

0000cad6 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
    cad6:	cf 93       	push	r28
    cad8:	df 93       	push	r29
    cada:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    cadc:	89 e3       	ldi	r24, 0x39	; 57
    cade:	95 e0       	ldi	r25, 0x05	; 5
    cae0:	9e 83       	std	Y+6, r25	; 0x06
    cae2:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    cae4:	88 81       	ld	r24, Y
    cae6:	99 81       	ldd	r25, Y+1	; 0x01
    cae8:	dc 01       	movw	r26, r24
    caea:	ed 91       	ld	r30, X+
    caec:	fc 91       	ld	r31, X
    caee:	06 84       	ldd	r0, Z+14	; 0x0e
    caf0:	f7 85       	ldd	r31, Z+15	; 0x0f
    caf2:	e0 2d       	mov	r30, r0
    caf4:	69 e3       	ldi	r22, 0x39	; 57
    caf6:	75 e0       	ldi	r23, 0x05	; 5
    caf8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    cafa:	81 e0       	ldi	r24, 0x01	; 1
    cafc:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
    cafe:	df 91       	pop	r29
    cb00:	cf 91       	pop	r28
    cb02:	08 95       	ret

0000cb04 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
    cb04:	cf 92       	push	r12
    cb06:	df 92       	push	r13
    cb08:	ef 92       	push	r14
    cb0a:	ff 92       	push	r15
    cb0c:	0f 93       	push	r16
    cb0e:	1f 93       	push	r17
    cb10:	cf 93       	push	r28
    cb12:	df 93       	push	r29
    cb14:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    cb16:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
    cb1a:	0b 89       	ldd	r16, Y+19	; 0x13
    cb1c:	1c 89       	ldd	r17, Y+20	; 0x14
    cb1e:	2d 89       	ldd	r18, Y+21	; 0x15
    cb20:	3e 89       	ldd	r19, Y+22	; 0x16
    cb22:	60 1b       	sub	r22, r16
    cb24:	71 0b       	sbc	r23, r17
    cb26:	82 0b       	sbc	r24, r18
    cb28:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    cb2a:	cb 84       	ldd	r12, Y+11	; 0x0b
    cb2c:	dc 84       	ldd	r13, Y+12	; 0x0c
    cb2e:	ed 84       	ldd	r14, Y+13	; 0x0d
    cb30:	fe 84       	ldd	r15, Y+14	; 0x0e
    cb32:	6c 15       	cp	r22, r12
    cb34:	7d 05       	cpc	r23, r13
    cb36:	8e 05       	cpc	r24, r14
    cb38:	9f 05       	cpc	r25, r15
    cb3a:	28 f4       	brcc	.+10     	; 0xcb46 <NTPClient::update()+0x42>
    cb3c:	01 2b       	or	r16, r17
    cb3e:	02 2b       	or	r16, r18
    cb40:	03 2b       	or	r16, r19
    cb42:	09 f0       	breq	.+2      	; 0xcb46 <NTPClient::update()+0x42>
    cb44:	9e c0       	rjmp	.+316    	; 0xcc82 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    cb46:	8a 81       	ldd	r24, Y+2	; 0x02
    cb48:	81 11       	cpse	r24, r1
    cb4a:	03 c0       	rjmp	.+6      	; 0xcb52 <NTPClient::update()+0x4e>
    cb4c:	ce 01       	movw	r24, r28
    cb4e:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
    cb52:	7e 01       	movw	r14, r28
    cb54:	87 e1       	ldi	r24, 0x17	; 23
    cb56:	e8 0e       	add	r14, r24
    cb58:	f1 1c       	adc	r15, r1
    cb5a:	8c e2       	ldi	r24, 0x2C	; 44
    cb5c:	fe 01       	movw	r30, r28
    cb5e:	7b 96       	adiw	r30, 0x1b	; 27
    cb60:	df 01       	movw	r26, r30
    cb62:	1d 92       	st	X+, r1
    cb64:	8a 95       	dec	r24
    cb66:	e9 f7       	brne	.-6      	; 0xcb62 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    cb68:	83 ee       	ldi	r24, 0xE3	; 227
    cb6a:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
    cb6c:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
    cb6e:	86 e0       	ldi	r24, 0x06	; 6
    cb70:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
    cb72:	8c ee       	ldi	r24, 0xEC	; 236
    cb74:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
    cb76:	81 e3       	ldi	r24, 0x31	; 49
    cb78:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
    cb7a:	9e e4       	ldi	r25, 0x4E	; 78
    cb7c:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
    cb7e:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
    cb80:	84 e3       	ldi	r24, 0x34	; 52
    cb82:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
    cb84:	88 81       	ld	r24, Y
    cb86:	99 81       	ldd	r25, Y+1	; 0x01
    cb88:	6b 81       	ldd	r22, Y+3	; 0x03
    cb8a:	7c 81       	ldd	r23, Y+4	; 0x04
    cb8c:	dc 01       	movw	r26, r24
    cb8e:	ed 91       	ld	r30, X+
    cb90:	fc 91       	ld	r31, X
    cb92:	06 88       	ldd	r0, Z+22	; 0x16
    cb94:	f7 89       	ldd	r31, Z+23	; 0x17
    cb96:	e0 2d       	mov	r30, r0
    cb98:	4b e7       	ldi	r20, 0x7B	; 123
    cb9a:	50 e0       	ldi	r21, 0x00	; 0
    cb9c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
    cb9e:	88 81       	ld	r24, Y
    cba0:	99 81       	ldd	r25, Y+1	; 0x01
    cba2:	dc 01       	movw	r26, r24
    cba4:	ed 91       	ld	r30, X+
    cba6:	fc 91       	ld	r31, X
    cba8:	02 80       	ldd	r0, Z+2	; 0x02
    cbaa:	f3 81       	ldd	r31, Z+3	; 0x03
    cbac:	e0 2d       	mov	r30, r0
    cbae:	40 e3       	ldi	r20, 0x30	; 48
    cbb0:	50 e0       	ldi	r21, 0x00	; 0
    cbb2:	b7 01       	movw	r22, r14
    cbb4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
    cbb6:	88 81       	ld	r24, Y
    cbb8:	99 81       	ldd	r25, Y+1	; 0x01
    cbba:	dc 01       	movw	r26, r24
    cbbc:	ed 91       	ld	r30, X+
    cbbe:	fc 91       	ld	r31, X
    cbc0:	00 8c       	ldd	r0, Z+24	; 0x18
    cbc2:	f1 8d       	ldd	r31, Z+25	; 0x19
    cbc4:	e0 2d       	mov	r30, r0
    cbc6:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
    cbc8:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
    cbca:	6a e0       	ldi	r22, 0x0A	; 10
    cbcc:	70 e0       	ldi	r23, 0x00	; 0
    cbce:	80 e0       	ldi	r24, 0x00	; 0
    cbd0:	90 e0       	ldi	r25, 0x00	; 0
    cbd2:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
    cbd6:	88 81       	ld	r24, Y
    cbd8:	99 81       	ldd	r25, Y+1	; 0x01
    cbda:	dc 01       	movw	r26, r24
    cbdc:	ed 91       	ld	r30, X+
    cbde:	fc 91       	ld	r31, X
    cbe0:	02 8c       	ldd	r0, Z+26	; 0x1a
    cbe2:	f3 8d       	ldd	r31, Z+27	; 0x1b
    cbe4:	e0 2d       	mov	r30, r0
    cbe6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
    cbe8:	15 36       	cpi	r17, 0x65	; 101
    cbea:	09 f4       	brne	.+2      	; 0xcbee <NTPClient::update()+0xea>
    cbec:	54 c0       	rjmp	.+168    	; 0xcc96 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
    cbee:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
    cbf0:	89 2b       	or	r24, r25
    cbf2:	59 f3       	breq	.-42     	; 0xcbca <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
    cbf4:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
    cbf8:	21 2f       	mov	r18, r17
    cbfa:	30 e0       	ldi	r19, 0x00	; 0
    cbfc:	a9 01       	movw	r20, r18
    cbfe:	4f 5f       	subi	r20, 0xFF	; 255
    cc00:	5f 4f       	sbci	r21, 0xFF	; 255
    cc02:	ea e0       	ldi	r30, 0x0A	; 10
    cc04:	e4 9f       	mul	r30, r20
    cc06:	90 01       	movw	r18, r0
    cc08:	e5 9f       	mul	r30, r21
    cc0a:	30 0d       	add	r19, r0
    cc0c:	11 24       	eor	r1, r1
    cc0e:	89 01       	movw	r16, r18
    cc10:	33 0f       	add	r19, r19
    cc12:	22 0b       	sbc	r18, r18
    cc14:	33 0b       	sbc	r19, r19
    cc16:	ab 01       	movw	r20, r22
    cc18:	bc 01       	movw	r22, r24
    cc1a:	40 1b       	sub	r20, r16
    cc1c:	51 0b       	sbc	r21, r17
    cc1e:	62 0b       	sbc	r22, r18
    cc20:	73 0b       	sbc	r23, r19
    cc22:	4b 8b       	std	Y+19, r20	; 0x13
    cc24:	5c 8b       	std	Y+20, r21	; 0x14
    cc26:	6d 8b       	std	Y+21, r22	; 0x15
    cc28:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
    cc2a:	88 81       	ld	r24, Y
    cc2c:	99 81       	ldd	r25, Y+1	; 0x01
    cc2e:	dc 01       	movw	r26, r24
    cc30:	ed 91       	ld	r30, X+
    cc32:	fc 91       	ld	r31, X
    cc34:	04 8c       	ldd	r0, Z+28	; 0x1c
    cc36:	f5 8d       	ldd	r31, Z+29	; 0x1d
    cc38:	e0 2d       	mov	r30, r0
    cc3a:	40 e3       	ldi	r20, 0x30	; 48
    cc3c:	50 e0       	ldi	r21, 0x00	; 0
    cc3e:	b7 01       	movw	r22, r14
    cc40:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
    cc42:	fe 01       	movw	r30, r28
    cc44:	ff 96       	adiw	r30, 0x3f	; 63
    cc46:	80 81       	ld	r24, Z
    cc48:	91 81       	ldd	r25, Z+1	; 0x01
    cc4a:	98 27       	eor	r25, r24
    cc4c:	89 27       	eor	r24, r25
    cc4e:	98 27       	eor	r25, r24
    cc50:	b0 e0       	ldi	r27, 0x00	; 0
    cc52:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    cc54:	dc 01       	movw	r26, r24
    cc56:	99 27       	eor	r25, r25
    cc58:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
    cc5a:	32 96       	adiw	r30, 0x02	; 2
    cc5c:	40 81       	ld	r20, Z
    cc5e:	51 81       	ldd	r21, Z+1	; 0x01
    cc60:	54 27       	eor	r21, r20
    cc62:	45 27       	eor	r20, r21
    cc64:	54 27       	eor	r21, r20
    cc66:	70 e0       	ldi	r23, 0x00	; 0
    cc68:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    cc6a:	84 2b       	or	r24, r20
    cc6c:	95 2b       	or	r25, r21
    cc6e:	a6 2b       	or	r26, r22
    cc70:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
    cc72:	80 58       	subi	r24, 0x80	; 128
    cc74:	9e 47       	sbci	r25, 0x7E	; 126
    cc76:	aa 4a       	sbci	r26, 0xAA	; 170
    cc78:	b3 48       	sbci	r27, 0x83	; 131
    cc7a:	8f 87       	std	Y+15, r24	; 0x0f
    cc7c:	98 8b       	std	Y+16, r25	; 0x10
    cc7e:	a9 8b       	std	Y+17, r26	; 0x11
    cc80:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
    cc82:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
    cc84:	df 91       	pop	r29
    cc86:	cf 91       	pop	r28
    cc88:	1f 91       	pop	r17
    cc8a:	0f 91       	pop	r16
    cc8c:	ff 90       	pop	r15
    cc8e:	ef 90       	pop	r14
    cc90:	df 90       	pop	r13
    cc92:	cf 90       	pop	r12
    cc94:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
    cc96:	80 e0       	ldi	r24, 0x00	; 0
    cc98:	f5 cf       	rjmp	.-22     	; 0xcc84 <NTPClient::update()+0x180>

0000cc9a <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    cc9a:	1f 92       	push	r1
    cc9c:	0f 92       	push	r0
    cc9e:	0f b6       	in	r0, 0x3f	; 63
    cca0:	0f 92       	push	r0
    cca2:	11 24       	eor	r1, r1
    cca4:	0b b6       	in	r0, 0x3b	; 59
    cca6:	0f 92       	push	r0
    cca8:	2f 93       	push	r18
    ccaa:	3f 93       	push	r19
    ccac:	4f 93       	push	r20
    ccae:	5f 93       	push	r21
    ccb0:	6f 93       	push	r22
    ccb2:	7f 93       	push	r23
    ccb4:	8f 93       	push	r24
    ccb6:	9f 93       	push	r25
    ccb8:	af 93       	push	r26
    ccba:	bf 93       	push	r27
    ccbc:	ef 93       	push	r30
    ccbe:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    ccc0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    ccc4:	88 7f       	andi	r24, 0xF8	; 248
    ccc6:	80 36       	cpi	r24, 0x60	; 96
    ccc8:	09 f4       	brne	.+2      	; 0xcccc <__vector_39+0x32>
    ccca:	4d c0       	rjmp	.+154    	; 0xcd66 <__vector_39+0xcc>
    cccc:	08 f0       	brcs	.+2      	; 0xccd0 <__vector_39+0x36>
    ccce:	40 c0       	rjmp	.+128    	; 0xcd50 <__vector_39+0xb6>
    ccd0:	88 32       	cpi	r24, 0x28	; 40
    ccd2:	09 f4       	brne	.+2      	; 0xccd6 <__vector_39+0x3c>
    ccd4:	a9 c0       	rjmp	.+338    	; 0xce28 <__vector_39+0x18e>
    ccd6:	28 f5       	brcc	.+74     	; 0xcd22 <__vector_39+0x88>
    ccd8:	80 31       	cpi	r24, 0x10	; 16
    ccda:	09 f4       	brne	.+2      	; 0xccde <__vector_39+0x44>
    ccdc:	9d c0       	rjmp	.+314    	; 0xce18 <__vector_39+0x17e>
    ccde:	c8 f4       	brcc	.+50     	; 0xcd12 <__vector_39+0x78>
    cce0:	88 23       	and	r24, r24
    cce2:	09 f4       	brne	.+2      	; 0xcce6 <__vector_39+0x4c>
    cce4:	fb c0       	rjmp	.+502    	; 0xcedc <__vector_39+0x242>
    cce6:	88 30       	cpi	r24, 0x08	; 8
    cce8:	09 f4       	brne	.+2      	; 0xccec <__vector_39+0x52>
    ccea:	96 c0       	rjmp	.+300    	; 0xce18 <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    ccec:	ff 91       	pop	r31
    ccee:	ef 91       	pop	r30
    ccf0:	bf 91       	pop	r27
    ccf2:	af 91       	pop	r26
    ccf4:	9f 91       	pop	r25
    ccf6:	8f 91       	pop	r24
    ccf8:	7f 91       	pop	r23
    ccfa:	6f 91       	pop	r22
    ccfc:	5f 91       	pop	r21
    ccfe:	4f 91       	pop	r20
    cd00:	3f 91       	pop	r19
    cd02:	2f 91       	pop	r18
    cd04:	0f 90       	pop	r0
    cd06:	0b be       	out	0x3b, r0	; 59
    cd08:	0f 90       	pop	r0
    cd0a:	0f be       	out	0x3f, r0	; 63
    cd0c:	0f 90       	pop	r0
    cd0e:	1f 90       	pop	r1
    cd10:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cd12:	88 31       	cpi	r24, 0x18	; 24
    cd14:	09 f4       	brne	.+2      	; 0xcd18 <__vector_39+0x7e>
    cd16:	88 c0       	rjmp	.+272    	; 0xce28 <__vector_39+0x18e>
    cd18:	80 32       	cpi	r24, 0x20	; 32
    cd1a:	41 f7       	brne	.-48     	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    cd1c:	80 93 fe 0c 	sts	0x0CFE, r24	; 0x800cfe <twi_error.lto_priv.273>
    cd20:	14 c0       	rjmp	.+40     	; 0xcd4a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cd22:	80 34       	cpi	r24, 0x40	; 64
    cd24:	09 f4       	brne	.+2      	; 0xcd28 <__vector_39+0x8e>
    cd26:	9d c0       	rjmp	.+314    	; 0xce62 <__vector_39+0x1c8>
    cd28:	40 f4       	brcc	.+16     	; 0xcd3a <__vector_39+0xa0>
    cd2a:	80 33       	cpi	r24, 0x30	; 48
    cd2c:	b9 f3       	breq	.-18     	; 0xcd1c <__vector_39+0x82>
    cd2e:	88 33       	cpi	r24, 0x38	; 56
    cd30:	e9 f6       	brne	.-70     	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    cd32:	80 93 fe 0c 	sts	0x0CFE, r24	; 0x800cfe <twi_error.lto_priv.273>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    cd36:	85 ec       	ldi	r24, 0xC5	; 197
    cd38:	b0 c0       	rjmp	.+352    	; 0xce9a <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cd3a:	80 35       	cpi	r24, 0x50	; 80
    cd3c:	09 f4       	brne	.+2      	; 0xcd40 <__vector_39+0xa6>
    cd3e:	85 c0       	rjmp	.+266    	; 0xce4a <__vector_39+0x1b0>
    cd40:	88 35       	cpi	r24, 0x58	; 88
    cd42:	09 f4       	brne	.+2      	; 0xcd46 <__vector_39+0xac>
    cd44:	96 c0       	rjmp	.+300    	; 0xce72 <__vector_39+0x1d8>
    cd46:	88 34       	cpi	r24, 0x48	; 72
    cd48:	89 f6       	brne	.-94     	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    cd4a:	0e 94 2d 48 	call	0x905a	; 0x905a <twi_stop>
    cd4e:	ce cf       	rjmp	.-100    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cd50:	88 39       	cpi	r24, 0x98	; 152
    cd52:	09 f4       	brne	.+2      	; 0xcd56 <__vector_39+0xbc>
    cd54:	8c c0       	rjmp	.+280    	; 0xce6e <__vector_39+0x1d4>
    cd56:	38 f5       	brcc	.+78     	; 0xcda6 <__vector_39+0x10c>
    cd58:	88 37       	cpi	r24, 0x78	; 120
    cd5a:	29 f0       	breq	.+10     	; 0xcd66 <__vector_39+0xcc>
    cd5c:	50 f4       	brcc	.+20     	; 0xcd72 <__vector_39+0xd8>
    cd5e:	88 36       	cpi	r24, 0x68	; 104
    cd60:	11 f0       	breq	.+4      	; 0xcd66 <__vector_39+0xcc>
    cd62:	80 37       	cpi	r24, 0x70	; 112
    cd64:	19 f6       	brne	.-122    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    cd66:	83 e0       	ldi	r24, 0x03	; 3
    cd68:	80 93 00 0d 	sts	0x0D00, r24	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    cd6c:	10 92 f8 0a 	sts	0x0AF8, r1	; 0x800af8 <twi_rxBufferIndex>
    cd70:	57 c0       	rjmp	.+174    	; 0xce20 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cd72:	88 38       	cpi	r24, 0x88	; 136
    cd74:	09 f4       	brne	.+2      	; 0xcd78 <__vector_39+0xde>
    cd76:	7b c0       	rjmp	.+246    	; 0xce6e <__vector_39+0x1d4>
    cd78:	80 39       	cpi	r24, 0x90	; 144
    cd7a:	19 f0       	breq	.+6      	; 0xcd82 <__vector_39+0xe8>
    cd7c:	80 38       	cpi	r24, 0x80	; 128
    cd7e:	09 f0       	breq	.+2      	; 0xcd82 <__vector_39+0xe8>
    cd80:	b5 cf       	rjmp	.-150    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    cd82:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <twi_rxBufferIndex>
    cd86:	80 32       	cpi	r24, 0x20	; 32
    cd88:	08 f0       	brcs	.+2      	; 0xcd8c <__vector_39+0xf2>
    cd8a:	71 c0       	rjmp	.+226    	; 0xce6e <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    cd8c:	e0 91 f8 0a 	lds	r30, 0x0AF8	; 0x800af8 <twi_rxBufferIndex>
    cd90:	81 e0       	ldi	r24, 0x01	; 1
    cd92:	8e 0f       	add	r24, r30
    cd94:	80 93 f8 0a 	sts	0x0AF8, r24	; 0x800af8 <twi_rxBufferIndex>
    cd98:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    cd9c:	f0 e0       	ldi	r31, 0x00	; 0
    cd9e:	e8 52       	subi	r30, 0x28	; 40
    cda0:	f5 4f       	sbci	r31, 0xF5	; 245
    cda2:	80 83       	st	Z, r24
    cda4:	3d c0       	rjmp	.+122    	; 0xce20 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cda6:	80 3b       	cpi	r24, 0xB0	; 176
    cda8:	39 f0       	breq	.+14     	; 0xcdb8 <__vector_39+0x11e>
    cdaa:	e0 f4       	brcc	.+56     	; 0xcde4 <__vector_39+0x14a>
    cdac:	80 3a       	cpi	r24, 0xA0	; 160
    cdae:	09 f4       	brne	.+2      	; 0xcdb2 <__vector_39+0x118>
    cdb0:	79 c0       	rjmp	.+242    	; 0xcea4 <__vector_39+0x20a>
    cdb2:	88 3a       	cpi	r24, 0xA8	; 168
    cdb4:	09 f0       	breq	.+2      	; 0xcdb8 <__vector_39+0x11e>
    cdb6:	9a cf       	rjmp	.-204    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    cdb8:	84 e0       	ldi	r24, 0x04	; 4
    cdba:	80 93 00 0d 	sts	0x0D00, r24	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    cdbe:	10 92 d7 0a 	sts	0x0AD7, r1	; 0x800ad7 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    cdc2:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    cdc6:	e0 91 4e 0c 	lds	r30, 0x0C4E	; 0x800c4e <twi_onSlaveTransmit.lto_priv.275>
    cdca:	f0 91 4f 0c 	lds	r31, 0x0C4F	; 0x800c4f <twi_onSlaveTransmit.lto_priv.275+0x1>
    cdce:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    cdd0:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <twi_txBufferLength>
    cdd4:	81 11       	cpse	r24, r1
    cdd6:	0f c0       	rjmp	.+30     	; 0xcdf6 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    cdd8:	81 e0       	ldi	r24, 0x01	; 1
    cdda:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    cdde:	10 92 b6 0a 	sts	0x0AB6, r1	; 0x800ab6 <twi_txBuffer>
    cde2:	09 c0       	rjmp	.+18     	; 0xcdf6 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    cde4:	80 3c       	cpi	r24, 0xC0	; 192
    cde6:	09 f4       	brne	.+2      	; 0xcdea <__vector_39+0x150>
    cde8:	a6 cf       	rjmp	.-180    	; 0xcd36 <__vector_39+0x9c>
    cdea:	88 3c       	cpi	r24, 0xC8	; 200
    cdec:	09 f4       	brne	.+2      	; 0xcdf0 <__vector_39+0x156>
    cdee:	a3 cf       	rjmp	.-186    	; 0xcd36 <__vector_39+0x9c>
    cdf0:	88 3b       	cpi	r24, 0xB8	; 184
    cdf2:	09 f0       	breq	.+2      	; 0xcdf6 <__vector_39+0x15c>
    cdf4:	7b cf       	rjmp	.-266    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    cdf6:	e0 91 d7 0a 	lds	r30, 0x0AD7	; 0x800ad7 <twi_txBufferIndex>
    cdfa:	81 e0       	ldi	r24, 0x01	; 1
    cdfc:	8e 0f       	add	r24, r30
    cdfe:	80 93 d7 0a 	sts	0x0AD7, r24	; 0x800ad7 <twi_txBufferIndex>
    ce02:	f0 e0       	ldi	r31, 0x00	; 0
    ce04:	ea 54       	subi	r30, 0x4A	; 74
    ce06:	f5 4f       	sbci	r31, 0xF5	; 245
    ce08:	80 81       	ld	r24, Z
    ce0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    ce0e:	90 91 d7 0a 	lds	r25, 0x0AD7	; 0x800ad7 <twi_txBufferIndex>
    ce12:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <twi_txBufferLength>
    ce16:	29 c0       	rjmp	.+82     	; 0xce6a <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    ce18:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    ce1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    ce20:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    ce22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    ce26:	62 cf       	rjmp	.-316    	; 0xccec <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    ce28:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce2c:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <twi_masterBufferLength.lto_priv.268>
    ce30:	98 17       	cp	r25, r24
    ce32:	58 f5       	brcc	.+86     	; 0xce8a <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    ce34:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce38:	81 e0       	ldi	r24, 0x01	; 1
    ce3a:	8e 0f       	add	r24, r30
    ce3c:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce40:	f0 e0       	ldi	r31, 0x00	; 0
    ce42:	e6 52       	subi	r30, 0x26	; 38
    ce44:	f3 4f       	sbci	r31, 0xF3	; 243
    ce46:	80 81       	ld	r24, Z
    ce48:	e9 cf       	rjmp	.-46     	; 0xce1c <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    ce4a:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce4e:	81 e0       	ldi	r24, 0x01	; 1
    ce50:	8e 0f       	add	r24, r30
    ce52:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    ce5a:	f0 e0       	ldi	r31, 0x00	; 0
    ce5c:	e6 52       	subi	r30, 0x26	; 38
    ce5e:	f3 4f       	sbci	r31, 0xF3	; 243
    ce60:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    ce62:	90 91 fd 0c 	lds	r25, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce66:	80 91 fc 0c 	lds	r24, 0x0CFC	; 0x800cfc <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    ce6a:	98 17       	cp	r25, r24
    ce6c:	c8 f2       	brcs	.-78     	; 0xce20 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    ce6e:	85 e8       	ldi	r24, 0x85	; 133
    ce70:	d8 cf       	rjmp	.-80     	; 0xce22 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    ce72:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce76:	81 e0       	ldi	r24, 0x01	; 1
    ce78:	8e 0f       	add	r24, r30
    ce7a:	80 93 fd 0c 	sts	0x0CFD, r24	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
    ce7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    ce82:	f0 e0       	ldi	r31, 0x00	; 0
    ce84:	e6 52       	subi	r30, 0x26	; 38
    ce86:	f3 4f       	sbci	r31, 0xF3	; 243
    ce88:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    ce8a:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <twi_sendStop.lto_priv.270>
    ce8e:	81 11       	cpse	r24, r1
    ce90:	5c cf       	rjmp	.-328    	; 0xcd4a <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    ce92:	81 e0       	ldi	r24, 0x01	; 1
    ce94:	80 93 fa 0c 	sts	0x0CFA, r24	; 0x800cfa <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    ce98:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    ce9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    ce9e:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <twi_state.lto_priv.272>
    cea2:	24 cf       	rjmp	.-440    	; 0xccec <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    cea4:	85 ec       	ldi	r24, 0xC5	; 197
    cea6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    ceaa:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <twi_state.lto_priv.272>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    ceae:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <twi_rxBufferIndex>
    ceb2:	80 32       	cpi	r24, 0x20	; 32
    ceb4:	30 f4       	brcc	.+12     	; 0xcec2 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    ceb6:	e0 91 f8 0a 	lds	r30, 0x0AF8	; 0x800af8 <twi_rxBufferIndex>
    ceba:	f0 e0       	ldi	r31, 0x00	; 0
    cebc:	e8 52       	subi	r30, 0x28	; 40
    cebe:	f5 4f       	sbci	r31, 0xF5	; 245
    cec0:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    cec2:	60 91 f8 0a 	lds	r22, 0x0AF8	; 0x800af8 <twi_rxBufferIndex>
    cec6:	70 e0       	ldi	r23, 0x00	; 0
    cec8:	e0 91 4c 0c 	lds	r30, 0x0C4C	; 0x800c4c <twi_onSlaveReceive.lto_priv.274>
    cecc:	f0 91 4d 0c 	lds	r31, 0x0C4D	; 0x800c4d <twi_onSlaveReceive.lto_priv.274+0x1>
    ced0:	88 ed       	ldi	r24, 0xD8	; 216
    ced2:	9a e0       	ldi	r25, 0x0A	; 10
    ced4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    ced6:	10 92 f8 0a 	sts	0x0AF8, r1	; 0x800af8 <twi_rxBufferIndex>
    ceda:	08 cf       	rjmp	.-496    	; 0xccec <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    cedc:	10 92 fe 0c 	sts	0x0CFE, r1	; 0x800cfe <twi_error.lto_priv.273>
    cee0:	34 cf       	rjmp	.-408    	; 0xcd4a <__vector_39+0xb0>

0000cee2 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    cee2:	20 91 b6 0c 	lds	r18, 0x0CB6	; 0x800cb6 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    cee6:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    cee8:	21 32       	cpi	r18, 0x21	; 33
    ceea:	08 f0       	brcs	.+2      	; 0xceee <TwoWire::endTransmission()+0xc>
    ceec:	44 c0       	rjmp	.+136    	; 0xcf76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    ceee:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <twi_state.lto_priv.272>
    cef2:	81 11       	cpse	r24, r1
    cef4:	fc cf       	rjmp	.-8      	; 0xceee <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
    cef6:	80 91 b8 0c 	lds	r24, 0x0CB8	; 0x800cb8 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    cefa:	92 e0       	ldi	r25, 0x02	; 2
    cefc:	90 93 00 0d 	sts	0x0D00, r25	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    cf00:	91 e0       	ldi	r25, 0x01	; 1
    cf02:	90 93 ff 0c 	sts	0x0CFF, r25	; 0x800cff <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    cf06:	9f ef       	ldi	r25, 0xFF	; 255
    cf08:	90 93 fe 0c 	sts	0x0CFE, r25	; 0x800cfe <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    cf0c:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    cf10:	20 93 fc 0c 	sts	0x0CFC, r18	; 0x800cfc <twi_masterBufferLength.lto_priv.268>
    cf14:	a6 e9       	ldi	r26, 0x96	; 150
    cf16:	ba e0       	ldi	r27, 0x0A	; 10
    cf18:	ea ed       	ldi	r30, 0xDA	; 218
    cf1a:	fc e0       	ldi	r31, 0x0C	; 12
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    cf1c:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    cf1e:	29 13       	cpse	r18, r25
    cf20:	31 c0       	rjmp	.+98     	; 0xcf84 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    cf22:	10 92 fb 0c 	sts	0x0CFB, r1	; 0x800cfb <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    cf26:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <twi_slarw.lto_priv.266>
    cf2a:	88 0f       	add	r24, r24
    cf2c:	89 2b       	or	r24, r25
    cf2e:	80 93 fb 0c 	sts	0x0CFB, r24	; 0x800cfb <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    cf32:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <twi_inRepStart.lto_priv.271>
    cf36:	81 30       	cpi	r24, 0x01	; 1
    cf38:	49 f5       	brne	.+82     	; 0xcf8c <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    cf3a:	10 92 fa 0c 	sts	0x0CFA, r1	; 0x800cfa <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    cf3e:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <twi_slarw.lto_priv.266>
    cf42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    cf46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    cf4a:	83 fd       	sbrc	r24, 3
    cf4c:	f8 cf       	rjmp	.-16     	; 0xcf3e <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    cf4e:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    cf50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    cf54:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <twi_state.lto_priv.272>
    cf58:	82 30       	cpi	r24, 0x02	; 2
    cf5a:	e1 f3       	breq	.-8      	; 0xcf54 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    cf5c:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <twi_error.lto_priv.273>
    cf60:	8f 3f       	cpi	r24, 0xFF	; 255
    cf62:	b1 f0       	breq	.+44     	; 0xcf90 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    cf64:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <twi_error.lto_priv.273>
    cf68:	80 32       	cpi	r24, 0x20	; 32
    cf6a:	a1 f0       	breq	.+40     	; 0xcf94 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    cf6c:	80 91 fe 0c 	lds	r24, 0x0CFE	; 0x800cfe <twi_error.lto_priv.273>
    cf70:	80 33       	cpi	r24, 0x30	; 48
    cf72:	91 f0       	breq	.+36     	; 0xcf98 <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    cf74:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    cf76:	10 92 b7 0c 	sts	0x0CB7, r1	; 0x800cb7 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    cf7a:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    cf7e:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    cf82:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    cf84:	3d 91       	ld	r19, X+
    cf86:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    cf88:	9f 5f       	subi	r25, 0xFF	; 255
    cf8a:	c9 cf       	rjmp	.-110    	; 0xcf1e <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    cf8c:	85 ee       	ldi	r24, 0xE5	; 229
    cf8e:	e0 cf       	rjmp	.-64     	; 0xcf50 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    cf90:	80 e0       	ldi	r24, 0x00	; 0
    cf92:	f1 cf       	rjmp	.-30     	; 0xcf76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    cf94:	82 e0       	ldi	r24, 0x02	; 2
    cf96:	ef cf       	rjmp	.-34     	; 0xcf76 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    cf98:	83 e0       	ldi	r24, 0x03	; 3
    cf9a:	ed cf       	rjmp	.-38     	; 0xcf76 <TwoWire::endTransmission()+0x94>

0000cf9c <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    cf9c:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    cfa0:	80 ef       	ldi	r24, 0xF0	; 240
    cfa2:	90 e0       	ldi	r25, 0x00	; 0
    cfa4:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    cfa8:	84 e9       	ldi	r24, 0x94	; 148
    cfaa:	9f e0       	ldi	r25, 0x0F	; 15
    cfac:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
    cfb0:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    cfb2:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    cfb4:	08 95       	ret

0000cfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    cfb6:	86 2f       	mov	r24, r22
twi_readFrom():
    cfb8:	64 2f       	mov	r22, r20
    cfba:	0e 94 92 ba 	call	0x17524	; 0x17524 <twi_readFrom.part.0.constprop.201>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    cfbe:	10 92 a0 0c 	sts	0x0CA0, r1	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    cfc2:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    cfc6:	08 95       	ret

0000cfc8 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    cfc8:	ff 92       	push	r15
    cfca:	0f 93       	push	r16
    cfcc:	1f 93       	push	r17
    cfce:	cf 93       	push	r28
    cfd0:	df 93       	push	r29
    cfd2:	d8 2f       	mov	r29, r24
    cfd4:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    cfd6:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    cfda:	86 e9       	ldi	r24, 0x96	; 150
    cfdc:	90 e0       	ldi	r25, 0x00	; 0
    cfde:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    cfe2:	84 e9       	ldi	r24, 0x94	; 148
    cfe4:	9f e0       	ldi	r25, 0x0F	; 15
    cfe6:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
    cfea:	ce ef       	ldi	r28, 0xFE	; 254
    cfec:	88 23       	and	r24, r24
    cfee:	41 f0       	breq	.+16     	; 0xd000 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    cff0:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    cff2:	8c 2f       	mov	r24, r28
    cff4:	df 91       	pop	r29
    cff6:	cf 91       	pop	r28
    cff8:	1f 91       	pop	r17
    cffa:	0f 91       	pop	r16
    cffc:	ff 90       	pop	r15
    cffe:	08 95       	ret
    d000:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    d002:	e1 f1       	breq	.+120    	; 0xd07c <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    d004:	41 e0       	ldi	r20, 0x01	; 1
    d006:	6d 2f       	mov	r22, r29
    d008:	84 e9       	ldi	r24, 0x94	; 148
    d00a:	9f e0       	ldi	r25, 0x0F	; 15
    d00c:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    d010:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    d014:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    d018:	89 1b       	sub	r24, r25
    d01a:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    d01c:	18 16       	cp	r1, r24
    d01e:	19 06       	cpc	r1, r25
    d020:	1c f4       	brge	.+6      	; 0xd028 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    d022:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
    d026:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    d028:	f0 fc       	sbrc	r15, 0
    d02a:	ea cf       	rjmp	.-44     	; 0xd000 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    d02c:	8d 2f       	mov	r24, r29
    d02e:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    d032:	81 ee       	ldi	r24, 0xE1	; 225
    d034:	90 e0       	ldi	r25, 0x00	; 0
    d036:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    d03a:	61 ee       	ldi	r22, 0xE1	; 225
    d03c:	84 e9       	ldi	r24, 0x94	; 148
    d03e:	9f e0       	ldi	r25, 0x0F	; 15
    d040:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    d044:	84 e9       	ldi	r24, 0x94	; 148
    d046:	9f e0       	ldi	r25, 0x0F	; 15
    d048:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
    d04c:	c8 2f       	mov	r28, r24
    d04e:	81 11       	cpse	r24, r1
    d050:	cf cf       	rjmp	.-98     	; 0xcff0 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    d052:	41 e0       	ldi	r20, 0x01	; 1
    d054:	6d 2f       	mov	r22, r29
    d056:	84 e9       	ldi	r24, 0x94	; 148
    d058:	9f e0       	ldi	r25, 0x0F	; 15
    d05a:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    d05e:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    d062:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    d066:	89 1b       	sub	r24, r25
    d068:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    d06a:	18 16       	cp	r1, r24
    d06c:	19 06       	cpc	r1, r25
    d06e:	0c f0       	brlt	.+2      	; 0xd072 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
    d070:	c0 cf       	rjmp	.-128    	; 0xcff2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    d072:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
    d076:	f8 01       	movw	r30, r16
    d078:	80 83       	st	Z, r24
    d07a:	bb cf       	rjmp	.-138    	; 0xcff2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    d07c:	c4 e0       	ldi	r28, 0x04	; 4
    d07e:	b9 cf       	rjmp	.-142    	; 0xcff2 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0000d080 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    d080:	0f 93       	push	r16
    d082:	1f 93       	push	r17
    d084:	cf 93       	push	r28
    d086:	df 93       	push	r29
    d088:	08 2f       	mov	r16, r24
    d08a:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    d08c:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    d090:	85 ea       	ldi	r24, 0xA5	; 165
    d092:	90 e0       	ldi	r25, 0x00	; 0
    d094:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    d098:	6d 2f       	mov	r22, r29
    d09a:	84 e9       	ldi	r24, 0x94	; 148
    d09c:	9f e0       	ldi	r25, 0x0F	; 15
    d09e:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    d0a2:	84 e9       	ldi	r24, 0x94	; 148
    d0a4:	9f e0       	ldi	r25, 0x0F	; 15
    d0a6:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
    d0aa:	c8 2f       	mov	r28, r24
    d0ac:	81 11       	cpse	r24, r1
    d0ae:	1d c0       	rjmp	.+58     	; 0xd0ea <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    d0b0:	1e ef       	ldi	r17, 0xFE	; 254
    d0b2:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    d0b4:	e1 f0       	breq	.+56     	; 0xd0ee <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    d0b6:	41 e0       	ldi	r20, 0x01	; 1
    d0b8:	60 2f       	mov	r22, r16
    d0ba:	84 e9       	ldi	r24, 0x94	; 148
    d0bc:	9f e0       	ldi	r25, 0x0F	; 15
    d0be:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    d0c2:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    d0c6:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    d0ca:	89 1b       	sub	r24, r25
    d0cc:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    d0ce:	18 16       	cp	r1, r24
    d0d0:	19 06       	cpc	r1, r25
    d0d2:	1c f4       	brge	.+6      	; 0xd0da <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    d0d4:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
    d0d8:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    d0da:	d0 fd       	sbrc	r29, 0
    d0dc:	ea cf       	rjmp	.-44     	; 0xd0b2 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    d0de:	8c 2f       	mov	r24, r28
    d0e0:	df 91       	pop	r29
    d0e2:	cf 91       	pop	r28
    d0e4:	1f 91       	pop	r17
    d0e6:	0f 91       	pop	r16
    d0e8:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    d0ea:	c3 e0       	ldi	r28, 0x03	; 3
    d0ec:	f8 cf       	rjmp	.-16     	; 0xd0de <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    d0ee:	c4 e0       	ldi	r28, 0x04	; 4
    d0f0:	f6 cf       	rjmp	.-20     	; 0xd0de <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0000d0f2 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    d0f2:	ef 92       	push	r14
    d0f4:	ff 92       	push	r15
    d0f6:	1f 93       	push	r17
    d0f8:	cf 93       	push	r28
    d0fa:	df 93       	push	r29
    d0fc:	18 2f       	mov	r17, r24
    d0fe:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    d100:	65 e5       	ldi	r22, 0x55	; 85
    d102:	0e 94 40 68 	call	0xd080	; 0xd080 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    d106:	81 11       	cpse	r24, r1
    d108:	0d c0       	rjmp	.+26     	; 0xd124 <owMatchRom(unsigned char, unsigned char*)+0x32>
    d10a:	e7 01       	movw	r28, r14
    d10c:	88 e0       	ldi	r24, 0x08	; 8
    d10e:	e8 0e       	add	r14, r24
    d110:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    d112:	69 91       	ld	r22, Y+
    d114:	81 2f       	mov	r24, r17
    d116:	0e 94 40 68 	call	0xd080	; 0xd080 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    d11a:	81 11       	cpse	r24, r1
    d11c:	03 c0       	rjmp	.+6      	; 0xd124 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    d11e:	ec 16       	cp	r14, r28
    d120:	fd 06       	cpc	r15, r29
    d122:	b9 f7       	brne	.-18     	; 0xd112 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    d124:	df 91       	pop	r29
    d126:	cf 91       	pop	r28
    d128:	1f 91       	pop	r17
    d12a:	ff 90       	pop	r15
    d12c:	ef 90       	pop	r14
    d12e:	08 95       	ret

0000d130 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    d130:	0f 93       	push	r16
    d132:	1f 93       	push	r17
    d134:	cf 93       	push	r28
    d136:	df 93       	push	r29
    d138:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    d13a:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    d13e:	84 eb       	ldi	r24, 0xB4	; 180
    d140:	90 e0       	ldi	r25, 0x00	; 0
    d142:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    d146:	84 e9       	ldi	r24, 0x94	; 148
    d148:	9f e0       	ldi	r25, 0x0F	; 15
    d14a:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
    d14e:	c8 2f       	mov	r28, r24
    d150:	81 11       	cpse	r24, r1
    d152:	1b c0       	rjmp	.+54     	; 0xd18a <ds2482owReset(unsigned char)+0x5a>
    d154:	de ef       	ldi	r29, 0xFE	; 254
    d156:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    d158:	f9 f0       	breq	.+62     	; 0xd198 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    d15a:	41 e0       	ldi	r20, 0x01	; 1
    d15c:	60 2f       	mov	r22, r16
    d15e:	84 e9       	ldi	r24, 0x94	; 148
    d160:	9f e0       	ldi	r25, 0x0F	; 15
    d162:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    d166:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
    d16a:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
    d16e:	89 1b       	sub	r24, r25
    d170:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    d172:	18 16       	cp	r1, r24
    d174:	19 06       	cpc	r1, r25
    d176:	1c f4       	brge	.+6      	; 0xd17e <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    d178:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
    d17c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    d17e:	10 fd       	sbrc	r17, 0
    d180:	ea cf       	rjmp	.-44     	; 0xd156 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    d182:	11 fd       	sbrc	r17, 1
    d184:	03 c0       	rjmp	.+6      	; 0xd18c <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    d186:	c5 e0       	ldi	r28, 0x05	; 5
    d188:	01 c0       	rjmp	.+2      	; 0xd18c <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    d18a:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    d18c:	8c 2f       	mov	r24, r28
    d18e:	df 91       	pop	r29
    d190:	cf 91       	pop	r28
    d192:	1f 91       	pop	r17
    d194:	0f 91       	pop	r16
    d196:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    d198:	c4 e0       	ldi	r28, 0x04	; 4
    d19a:	f8 cf       	rjmp	.-16     	; 0xd18c <ds2482owReset(unsigned char)+0x5c>

0000d19c <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
    d19c:	cf 92       	push	r12
    d19e:	df 92       	push	r13
    d1a0:	ff 92       	push	r15
    d1a2:	0f 93       	push	r16
    d1a4:	1f 93       	push	r17
    d1a6:	cf 93       	push	r28
    d1a8:	df 93       	push	r29
    d1aa:	6c 01       	movw	r12, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    d1ac:	88 e6       	ldi	r24, 0x68	; 104
    d1ae:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
    d1b2:	60 e0       	ldi	r22, 0x00	; 0
    d1b4:	84 e9       	ldi	r24, 0x94	; 148
    d1b6:	9f e0       	ldi	r25, 0x0F	; 15
    d1b8:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
    d1bc:	84 e9       	ldi	r24, 0x94	; 148
    d1be:	9f e0       	ldi	r25, 0x0F	; 15
    d1c0:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
    d1c4:	87 e0       	ldi	r24, 0x07	; 7
    d1c6:	90 e0       	ldi	r25, 0x00	; 0
    d1c8:	0e 94 95 bf 	call	0x17f2a	; 0x17f2a <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    d1cc:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
    d1d0:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d1d2:	28 2f       	mov	r18, r24
    d1d4:	30 e0       	ldi	r19, 0x00	; 0
    d1d6:	94 e0       	ldi	r25, 0x04	; 4
    d1d8:	35 95       	asr	r19
    d1da:	27 95       	ror	r18
    d1dc:	9a 95       	dec	r25
    d1de:	e1 f7       	brne	.-8      	; 0xd1d8 <RTC_DS1307::now()+0x3c>
    d1e0:	92 2f       	mov	r25, r18
    d1e2:	99 0f       	add	r25, r25
    d1e4:	99 0f       	add	r25, r25
    d1e6:	c2 2f       	mov	r28, r18
    d1e8:	c9 1b       	sub	r28, r25
    d1ea:	cc 0f       	add	r28, r28
    d1ec:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    d1ee:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d1f2:	9c 01       	movw	r18, r24
    d1f4:	44 e0       	ldi	r20, 0x04	; 4
    d1f6:	35 95       	asr	r19
    d1f8:	27 95       	ror	r18
    d1fa:	4a 95       	dec	r20
    d1fc:	e1 f7       	brne	.-8      	; 0xd1f6 <RTC_DS1307::now()+0x5a>
    d1fe:	2f 70       	andi	r18, 0x0F	; 15
    d200:	33 27       	eor	r19, r19
    d202:	92 2f       	mov	r25, r18
    d204:	99 0f       	add	r25, r25
    d206:	99 0f       	add	r25, r25
    d208:	d2 2f       	mov	r29, r18
    d20a:	d9 1b       	sub	r29, r25
    d20c:	dd 0f       	add	r29, r29
    d20e:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    d210:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d214:	9c 01       	movw	r18, r24
    d216:	54 e0       	ldi	r21, 0x04	; 4
    d218:	35 95       	asr	r19
    d21a:	27 95       	ror	r18
    d21c:	5a 95       	dec	r21
    d21e:	e1 f7       	brne	.-8      	; 0xd218 <RTC_DS1307::now()+0x7c>
    d220:	2f 70       	andi	r18, 0x0F	; 15
    d222:	33 27       	eor	r19, r19
    d224:	92 2f       	mov	r25, r18
    d226:	99 0f       	add	r25, r25
    d228:	99 0f       	add	r25, r25
    d22a:	12 2f       	mov	r17, r18
    d22c:	19 1b       	sub	r17, r25
    d22e:	11 0f       	add	r17, r17
    d230:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    d232:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
    d236:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d23a:	9c 01       	movw	r18, r24
    d23c:	64 e0       	ldi	r22, 0x04	; 4
    d23e:	35 95       	asr	r19
    d240:	27 95       	ror	r18
    d242:	6a 95       	dec	r22
    d244:	e1 f7       	brne	.-8      	; 0xd23e <RTC_DS1307::now()+0xa2>
    d246:	2f 70       	andi	r18, 0x0F	; 15
    d248:	33 27       	eor	r19, r19
    d24a:	92 2f       	mov	r25, r18
    d24c:	99 0f       	add	r25, r25
    d24e:	99 0f       	add	r25, r25
    d250:	02 2f       	mov	r16, r18
    d252:	09 1b       	sub	r16, r25
    d254:	00 0f       	add	r16, r16
    d256:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    d258:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d25c:	9c 01       	movw	r18, r24
    d25e:	74 e0       	ldi	r23, 0x04	; 4
    d260:	35 95       	asr	r19
    d262:	27 95       	ror	r18
    d264:	7a 95       	dec	r23
    d266:	e1 f7       	brne	.-8      	; 0xd260 <RTC_DS1307::now()+0xc4>
    d268:	2f 70       	andi	r18, 0x0F	; 15
    d26a:	33 27       	eor	r19, r19
    d26c:	92 2f       	mov	r25, r18
    d26e:	99 0f       	add	r25, r25
    d270:	99 0f       	add	r25, r25
    d272:	f2 2e       	mov	r15, r18
    d274:	f9 1a       	sub	r15, r25
    d276:	ff 0c       	add	r15, r15
    d278:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    d27a:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    d27e:	9c 01       	movw	r18, r24
    d280:	e4 e0       	ldi	r30, 0x04	; 4
    d282:	35 95       	asr	r19
    d284:	27 95       	ror	r18
    d286:	ea 95       	dec	r30
    d288:	e1 f7       	brne	.-8      	; 0xd282 <RTC_DS1307::now()+0xe6>
    d28a:	2f 70       	andi	r18, 0x0F	; 15
    d28c:	33 27       	eor	r19, r19
    d28e:	92 2f       	mov	r25, r18
    d290:	99 0f       	add	r25, r25
    d292:	99 0f       	add	r25, r25
    d294:	29 1b       	sub	r18, r25
    d296:	22 0f       	add	r18, r18
    d298:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    d29a:	f6 01       	movw	r30, r12
    d29c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d29e:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d2a0:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d2a2:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d2a4:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d2a6:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    d2a8:	c6 01       	movw	r24, r12
    d2aa:	df 91       	pop	r29
    d2ac:	cf 91       	pop	r28
    d2ae:	1f 91       	pop	r17
    d2b0:	0f 91       	pop	r16
    d2b2:	ff 90       	pop	r15
    d2b4:	df 90       	pop	r13
    d2b6:	cf 90       	pop	r12
    d2b8:	08 95       	ret

0000d2ba <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    d2ba:	1f 93       	push	r17
    d2bc:	cf 93       	push	r28
    d2be:	df 93       	push	r29
    d2c0:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
    d2c2:	88 e6       	ldi	r24, 0x68	; 104
    d2c4:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    d2c8:	60 e0       	ldi	r22, 0x00	; 0
    d2ca:	84 e9       	ldi	r24, 0x94	; 148
    d2cc:	9f e0       	ldi	r25, 0x0F	; 15
    d2ce:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d2d2:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d2d4:	1a e0       	ldi	r17, 0x0A	; 10
    d2d6:	82 2f       	mov	r24, r18
    d2d8:	61 2f       	mov	r22, r17
    d2da:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d2de:	68 2f       	mov	r22, r24
    d2e0:	66 0f       	add	r22, r22
    d2e2:	68 0f       	add	r22, r24
    d2e4:	66 0f       	add	r22, r22
    d2e6:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    d2e8:	84 e9       	ldi	r24, 0x94	; 148
    d2ea:	9f e0       	ldi	r25, 0x0F	; 15
    d2ec:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d2f0:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d2f2:	82 2f       	mov	r24, r18
    d2f4:	61 2f       	mov	r22, r17
    d2f6:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d2fa:	68 2f       	mov	r22, r24
    d2fc:	66 0f       	add	r22, r22
    d2fe:	68 0f       	add	r22, r24
    d300:	66 0f       	add	r22, r22
    d302:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    d304:	84 e9       	ldi	r24, 0x94	; 148
    d306:	9f e0       	ldi	r25, 0x0F	; 15
    d308:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d30c:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d30e:	82 2f       	mov	r24, r18
    d310:	61 2f       	mov	r22, r17
    d312:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d316:	68 2f       	mov	r22, r24
    d318:	66 0f       	add	r22, r22
    d31a:	68 0f       	add	r22, r24
    d31c:	66 0f       	add	r22, r22
    d31e:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    d320:	84 e9       	ldi	r24, 0x94	; 148
    d322:	9f e0       	ldi	r25, 0x0F	; 15
    d324:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
    d328:	60 e0       	ldi	r22, 0x00	; 0
    d32a:	84 e9       	ldi	r24, 0x94	; 148
    d32c:	9f e0       	ldi	r25, 0x0F	; 15
    d32e:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d332:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d334:	82 2f       	mov	r24, r18
    d336:	61 2f       	mov	r22, r17
    d338:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d33c:	68 2f       	mov	r22, r24
    d33e:	66 0f       	add	r22, r22
    d340:	68 0f       	add	r22, r24
    d342:	66 0f       	add	r22, r22
    d344:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    d346:	84 e9       	ldi	r24, 0x94	; 148
    d348:	9f e0       	ldi	r25, 0x0F	; 15
    d34a:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d34e:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d350:	82 2f       	mov	r24, r18
    d352:	61 2f       	mov	r22, r17
    d354:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d358:	68 2f       	mov	r22, r24
    d35a:	66 0f       	add	r22, r22
    d35c:	68 0f       	add	r22, r24
    d35e:	66 0f       	add	r22, r22
    d360:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    d362:	84 e9       	ldi	r24, 0x94	; 148
    d364:	9f e0       	ldi	r25, 0x0F	; 15
    d366:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
    d36a:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d36c:	82 2f       	mov	r24, r18
    d36e:	61 2f       	mov	r22, r17
    d370:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d374:	68 2f       	mov	r22, r24
    d376:	66 0f       	add	r22, r22
    d378:	68 0f       	add	r22, r24
    d37a:	66 0f       	add	r22, r22
    d37c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    d37e:	84 e9       	ldi	r24, 0x94	; 148
    d380:	9f e0       	ldi	r25, 0x0F	; 15
    d382:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
    d386:	84 e9       	ldi	r24, 0x94	; 148
    d388:	9f e0       	ldi	r25, 0x0F	; 15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
    d38a:	df 91       	pop	r29
    d38c:	cf 91       	pop	r28
    d38e:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    d390:	0c 94 71 67 	jmp	0xcee2	; 0xcee2 <TwoWire::endTransmission()>

0000d394 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
void helper_set_date_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d394:	cf 92       	push	r12
    d396:	df 92       	push	r13
    d398:	ef 92       	push	r14
    d39a:	ff 92       	push	r15
    d39c:	0f 93       	push	r16
    d39e:	1f 93       	push	r17
    d3a0:	cf 93       	push	r28
    d3a2:	df 93       	push	r29
    d3a4:	cd b7       	in	r28, 0x3d	; 61
    d3a6:	de b7       	in	r29, 0x3e	; 62
    d3a8:	69 97       	sbiw	r28, 0x19	; 25
    d3aa:	0f b6       	in	r0, 0x3f	; 63
    d3ac:	f8 94       	cli
    d3ae:	de bf       	out	0x3e, r29	; 62
    d3b0:	0f be       	out	0x3f, r0	; 63
    d3b2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6021
  char datum_text[12];
  uint16_t dat[3];
  display_element_get_string(datum_text);
    d3b4:	ce 01       	movw	r24, r28
    d3b6:	01 96       	adiw	r24, 0x01	; 1
    d3b8:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
    d3bc:	7e 01       	movw	r14, r28
    d3be:	74 e1       	ldi	r23, 0x14	; 20
    d3c0:	e7 0e       	add	r14, r23
    d3c2:	f1 1c       	adc	r15, r1
    d3c4:	6e 01       	movw	r12, r28
    d3c6:	8a e1       	ldi	r24, 0x1A	; 26
    d3c8:	c8 0e       	add	r12, r24
    d3ca:	d1 1c       	adc	r13, r1
    d3cc:	8e 01       	movw	r16, r28
    d3ce:	0f 5f       	subi	r16, 0xFF	; 255
    d3d0:	1f 4f       	sbci	r17, 0xFF	; 255
parseBytes():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    d3d2:	4a e0       	ldi	r20, 0x0A	; 10
    d3d4:	50 e0       	ldi	r21, 0x00	; 0
    d3d6:	70 e0       	ldi	r23, 0x00	; 0
    d3d8:	60 e0       	ldi	r22, 0x00	; 0
    d3da:	c8 01       	movw	r24, r16
    d3dc:	0e 94 4c f0 	call	0x1e098	; 0x1e098 <strtoul>
    d3e0:	f7 01       	movw	r30, r14
    d3e2:	61 93       	st	Z+, r22
    d3e4:	71 93       	st	Z+, r23
    d3e6:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
    d3e8:	6e e2       	ldi	r22, 0x2E	; 46
    d3ea:	70 e0       	ldi	r23, 0x00	; 0
    d3ec:	c8 01       	movw	r24, r16
    d3ee:	0e 94 1e fe 	call	0x1fc3c	; 0x1fc3c <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
    d3f2:	00 97       	sbiw	r24, 0x00	; 0
    d3f4:	51 f0       	breq	.+20     	; 0xd40a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
    d3f6:	fc 01       	movw	r30, r24
    d3f8:	20 81       	ld	r18, Z
    d3fa:	22 23       	and	r18, r18
    d3fc:	31 f0       	breq	.+12     	; 0xd40a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    d3fe:	8c 01       	movw	r16, r24
    d400:	0f 5f       	subi	r16, 0xFF	; 255
    d402:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    d404:	ce 14       	cp	r12, r14
    d406:	df 04       	cpc	r13, r15
    d408:	21 f7       	brne	.-56     	; 0xd3d2 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x3e>
    d40a:	20 91 15 12 	lds	r18, 0x1215	; 0x801215 <now+0x5>
    d40e:	30 91 14 12 	lds	r19, 0x1214	; 0x801214 <now+0x4>
    d412:	40 91 13 12 	lds	r20, 0x1213	; 0x801213 <now+0x3>
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023
  parseBytes(datum_text, '.', dat, 3, 10);
  rtc.adjust(DateTime(dat[2], dat[1], dat[0], now.hour(), now.minute(), now.second()));
    d416:	5c 89       	ldd	r21, Y+20	; 0x14
    d418:	6e 89       	ldd	r22, Y+22	; 0x16
    d41a:	88 8d       	ldd	r24, Y+24	; 0x18
    d41c:	99 8d       	ldd	r25, Y+25	; 0x19
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d41e:	80 3d       	cpi	r24, 0xD0	; 208
    d420:	f7 e0       	ldi	r31, 0x07	; 7
    d422:	9f 07       	cpc	r25, r31
    d424:	10 f0       	brcs	.+4      	; 0xd42a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x96>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d426:	80 5d       	subi	r24, 0xD0	; 208
    d428:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    d42a:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d42c:	6e 87       	std	Y+14, r22	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d42e:	5f 87       	std	Y+15, r21	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d430:	48 8b       	std	Y+16, r20	; 0x10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d432:	39 8b       	std	Y+17, r19	; 0x11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d434:	2a 8b       	std	Y+18, r18	; 0x12
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023
    d436:	ce 01       	movw	r24, r28
    d438:	0d 96       	adiw	r24, 0x0d	; 13
    d43a:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6024
}
    d43e:	69 96       	adiw	r28, 0x19	; 25
    d440:	0f b6       	in	r0, 0x3f	; 63
    d442:	f8 94       	cli
    d444:	de bf       	out	0x3e, r29	; 62
    d446:	0f be       	out	0x3f, r0	; 63
    d448:	cd bf       	out	0x3d, r28	; 61
    d44a:	df 91       	pop	r29
    d44c:	cf 91       	pop	r28
    d44e:	1f 91       	pop	r17
    d450:	0f 91       	pop	r16
    d452:	ff 90       	pop	r15
    d454:	ef 90       	pop	r14
    d456:	df 90       	pop	r13
    d458:	cf 90       	pop	r12
    d45a:	08 95       	ret

0000d45c <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6002
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
void helper_set_time_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d45c:	cf 93       	push	r28
    d45e:	df 93       	push	r29
    d460:	cd b7       	in	r28, 0x3d	; 61
    d462:	de b7       	in	r29, 0x3e	; 62
    d464:	64 97       	sbiw	r28, 0x14	; 20
    d466:	0f b6       	in	r0, 0x3f	; 63
    d468:	f8 94       	cli
    d46a:	de bf       	out	0x3e, r29	; 62
    d46c:	0f be       	out	0x3f, r0	; 63
    d46e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6005
  char cas_text[10];
  uint8_t tim[3];
  display_element_get_string(cas_text);
    d470:	ce 01       	movw	r24, r28
    d472:	01 96       	adiw	r24, 0x01	; 1
    d474:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6006
  parseBytes(cas_text, ':', tim, 3, 10);
    d478:	23 e0       	ldi	r18, 0x03	; 3
    d47a:	30 e0       	ldi	r19, 0x00	; 0
    d47c:	ae 01       	movw	r20, r28
    d47e:	4e 5e       	subi	r20, 0xEE	; 238
    d480:	5f 4f       	sbci	r21, 0xFF	; 255
    d482:	6a e3       	ldi	r22, 0x3A	; 58
    d484:	ce 01       	movw	r24, r28
    d486:	01 96       	adiw	r24, 0x01	; 1
    d488:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6007
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
    d48c:	8c 89       	ldd	r24, Y+20	; 0x14
    d48e:	9b 89       	ldd	r25, Y+19	; 0x13
    d490:	2a 89       	ldd	r18, Y+18	; 0x12
    d492:	e0 e1       	ldi	r30, 0x10	; 16
    d494:	f2 e1       	ldi	r31, 0x12	; 18
    d496:	32 81       	ldd	r19, Z+2	; 0x02
    d498:	41 81       	ldd	r20, Z+1	; 0x01
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    d49a:	50 81       	ld	r21, Z
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    d49c:	5b 87       	std	Y+11, r21	; 0x0b
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d49e:	4c 87       	std	Y+12, r20	; 0x0c
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d4a0:	3d 87       	std	Y+13, r19	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d4a2:	2e 87       	std	Y+14, r18	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d4a4:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d4a6:	88 8b       	std	Y+16, r24	; 0x10
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6007
    d4a8:	ce 01       	movw	r24, r28
    d4aa:	0b 96       	adiw	r24, 0x0b	; 11
    d4ac:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6008
}
    d4b0:	64 96       	adiw	r28, 0x14	; 20
    d4b2:	0f b6       	in	r0, 0x3f	; 63
    d4b4:	f8 94       	cli
    d4b6:	de bf       	out	0x3e, r29	; 62
    d4b8:	0f be       	out	0x3f, r0	; 63
    d4ba:	cd bf       	out	0x3d, r28	; 61
    d4bc:	df 91       	pop	r29
    d4be:	cf 91       	pop	r28
    d4c0:	08 95       	ret

0000d4c2 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
    d4c2:	cf 93       	push	r28
    d4c4:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
    d4c6:	fc 01       	movw	r30, r24
    d4c8:	a0 81       	ld	r26, Z
    d4ca:	b1 81       	ldd	r27, Z+1	; 0x01
    d4cc:	10 97       	sbiw	r26, 0x00	; 0
    d4ce:	21 f4       	brne	.+8      	; 0xd4d8 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
    d4d0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
    d4d2:	df 91       	pop	r29
    d4d4:	cf 91       	pop	r28
    d4d6:	08 95       	ret
    d4d8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    d4da:	ed 91       	ld	r30, X+
    d4dc:	fc 91       	ld	r31, X
    d4de:	11 97       	sbiw	r26, 0x01	; 1
    d4e0:	06 88       	ldd	r0, Z+22	; 0x16
    d4e2:	f7 89       	ldd	r31, Z+23	; 0x17
    d4e4:	e0 2d       	mov	r30, r0
    d4e6:	cd 01       	movw	r24, r26
    d4e8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
    d4ea:	81 11       	cpse	r24, r1
    d4ec:	1e c0       	rjmp	.+60     	; 0xd52a <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
    d4ee:	fe 01       	movw	r30, r28
    d4f0:	e5 5e       	subi	r30, 0xE5	; 229
    d4f2:	fd 4f       	sbci	r31, 0xFD	; 253
    d4f4:	80 81       	ld	r24, Z
    d4f6:	91 81       	ldd	r25, Z+1	; 0x01
    d4f8:	89 2b       	or	r24, r25
    d4fa:	51 f7       	brne	.-44     	; 0xd4d0 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
    d4fc:	8d ef       	ldi	r24, 0xFD	; 253
    d4fe:	9f ef       	ldi	r25, 0xFF	; 255
    d500:	91 83       	std	Z+1, r25	; 0x01
    d502:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
    d504:	88 81       	ld	r24, Y
    d506:	99 81       	ldd	r25, Y+1	; 0x01
    d508:	dc 01       	movw	r26, r24
    d50a:	ed 91       	ld	r30, X+
    d50c:	fc 91       	ld	r31, X
    d50e:	06 80       	ldd	r0, Z+6	; 0x06
    d510:	f7 81       	ldd	r31, Z+7	; 0x07
    d512:	e0 2d       	mov	r30, r0
    d514:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
    d516:	88 81       	ld	r24, Y
    d518:	99 81       	ldd	r25, Y+1	; 0x01
    d51a:	dc 01       	movw	r26, r24
    d51c:	ed 91       	ld	r30, X+
    d51e:	fc 91       	ld	r31, X
    d520:	04 88       	ldd	r0, Z+20	; 0x14
    d522:	f5 89       	ldd	r31, Z+21	; 0x15
    d524:	e0 2d       	mov	r30, r0
    d526:	19 95       	eicall
    d528:	d3 cf       	rjmp	.-90     	; 0xd4d0 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    d52a:	81 e0       	ldi	r24, 0x01	; 1
    d52c:	d2 cf       	rjmp	.-92     	; 0xd4d2 <PubSubClient::connected()+0x10>

0000d52e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    d52e:	bf 92       	push	r11
    d530:	cf 92       	push	r12
    d532:	df 92       	push	r13
    d534:	ef 92       	push	r14
    d536:	ff 92       	push	r15
    d538:	0f 93       	push	r16
    d53a:	1f 93       	push	r17
    d53c:	cf 93       	push	r28
    d53e:	df 93       	push	r29
    d540:	00 d0       	rcall	.+0      	; 0xd542 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
    d542:	1f 92       	push	r1
    d544:	cd b7       	in	r28, 0x3d	; 61
    d546:	de b7       	in	r29, 0x3e	; 62
    d548:	7c 01       	movw	r14, r24
    d54a:	b6 2e       	mov	r11, r22
    d54c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    d54e:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    d550:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
    d552:	be 01       	movw	r22, r28
    d554:	6f 5f       	subi	r22, 0xFF	; 255
    d556:	7f 4f       	sbci	r23, 0xFF	; 255
    d558:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
    d55a:	28 2f       	mov	r18, r24
    d55c:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
    d55e:	88 0f       	add	r24, r24
    d560:	89 2f       	mov	r24, r25
    d562:	88 1f       	adc	r24, r24
    d564:	99 0b       	sbc	r25, r25
    d566:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
    d568:	00 97       	sbiw	r24, 0x00	; 0
    d56a:	09 f0       	breq	.+2      	; 0xd56e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
    d56c:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
    d56e:	f6 01       	movw	r30, r12
    d570:	e3 0f       	add	r30, r19
    d572:	f1 1d       	adc	r31, r1
    d574:	20 83       	st	Z, r18
    d576:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
    d578:	00 97       	sbiw	r24, 0x00	; 0
    d57a:	79 f7       	brne	.-34     	; 0xd55a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
    d57c:	e3 2f       	mov	r30, r19
    d57e:	f0 e0       	ldi	r31, 0x00	; 0
    d580:	ba 01       	movw	r22, r20
    d582:	6e 1b       	sub	r22, r30
    d584:	7f 0b       	sbc	r23, r31
    d586:	6c 5f       	subi	r22, 0xFC	; 252
    d588:	7f 4f       	sbci	r23, 0xFF	; 255
    d58a:	db 01       	movw	r26, r22
    d58c:	bc 92       	st	X, r11
    d58e:	4e 1b       	sub	r20, r30
    d590:	5f 0b       	sbc	r21, r31
    d592:	4b 5f       	subi	r20, 0xFB	; 251
    d594:	5f 4f       	sbci	r21, 0xFF	; 255
    d596:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
    d598:	9c 01       	movw	r18, r24
    d59a:	2c 19       	sub	r18, r12
    d59c:	3d 09       	sbc	r19, r13
    d59e:	2e 17       	cp	r18, r30
    d5a0:	3f 07       	cpc	r19, r31
    d5a2:	3c f4       	brge	.+14     	; 0xd5b2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
    d5a4:	dc 01       	movw	r26, r24
    d5a6:	2d 91       	ld	r18, X+
    d5a8:	cd 01       	movw	r24, r26
    d5aa:	da 01       	movw	r26, r20
    d5ac:	2d 93       	st	X+, r18
    d5ae:	ad 01       	movw	r20, r26
    d5b0:	f3 cf       	rjmp	.-26     	; 0xd598 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
    d5b2:	d7 01       	movw	r26, r14
    d5b4:	8d 91       	ld	r24, X+
    d5b6:	9c 91       	ld	r25, X
    d5b8:	0f 5f       	subi	r16, 0xFF	; 255
    d5ba:	1f 4f       	sbci	r17, 0xFF	; 255
    d5bc:	0e 0f       	add	r16, r30
    d5be:	1f 1f       	adc	r17, r31
    d5c0:	dc 01       	movw	r26, r24
    d5c2:	ed 91       	ld	r30, X+
    d5c4:	fc 91       	ld	r31, X
    d5c6:	02 80       	ldd	r0, Z+2	; 0x02
    d5c8:	f3 81       	ldd	r31, Z+3	; 0x03
    d5ca:	e0 2d       	mov	r30, r0
    d5cc:	a8 01       	movw	r20, r16
    d5ce:	19 95       	eicall
    d5d0:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
    d5d2:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
    d5d6:	f7 01       	movw	r30, r14
    d5d8:	ec 5f       	subi	r30, 0xFC	; 252
    d5da:	fd 4f       	sbci	r31, 0xFD	; 253
    d5dc:	60 83       	st	Z, r22
    d5de:	71 83       	std	Z+1, r23	; 0x01
    d5e0:	82 83       	std	Z+2, r24	; 0x02
    d5e2:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
    d5e4:	81 e0       	ldi	r24, 0x01	; 1
    d5e6:	0c 15       	cp	r16, r12
    d5e8:	1d 05       	cpc	r17, r13
    d5ea:	09 f0       	breq	.+2      	; 0xd5ee <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
    d5ec:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
    d5ee:	0f 90       	pop	r0
    d5f0:	0f 90       	pop	r0
    d5f2:	0f 90       	pop	r0
    d5f4:	0f 90       	pop	r0
    d5f6:	df 91       	pop	r29
    d5f8:	cf 91       	pop	r28
    d5fa:	1f 91       	pop	r17
    d5fc:	0f 91       	pop	r16
    d5fe:	ff 90       	pop	r15
    d600:	ef 90       	pop	r14
    d602:	df 90       	pop	r13
    d604:	cf 90       	pop	r12
    d606:	bf 90       	pop	r11
    d608:	08 95       	ret

0000d60a <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    d60a:	af 92       	push	r10
    d60c:	bf 92       	push	r11
    d60e:	cf 92       	push	r12
    d610:	df 92       	push	r13
    d612:	ef 92       	push	r14
    d614:	ff 92       	push	r15
    d616:	0f 93       	push	r16
    d618:	1f 93       	push	r17
    d61a:	cf 93       	push	r28
    d61c:	df 93       	push	r29
    d61e:	7c 01       	movw	r14, r24
    d620:	5b 01       	movw	r10, r22
    d622:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
    d624:	ea 01       	movw	r28, r20
    d626:	09 90       	ld	r0, Y+
    d628:	00 20       	and	r0, r0
    d62a:	e9 f7       	brne	.-6      	; 0xd626 <PubSubClient::publish(char const*, char const*)+0x1c>
    d62c:	21 97       	sbiw	r28, 0x01	; 1
    d62e:	c4 1b       	sub	r28, r20
    d630:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
    d632:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
    d636:	88 23       	and	r24, r24
    d638:	c9 f1       	breq	.+114    	; 0xd6ac <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
    d63a:	f5 01       	movw	r30, r10
    d63c:	01 90       	ld	r0, Z+
    d63e:	00 20       	and	r0, r0
    d640:	e9 f7       	brne	.-6      	; 0xd63c <PubSubClient::publish(char const*, char const*)+0x32>
    d642:	31 97       	sbiw	r30, 0x01	; 1
    d644:	ea 19       	sub	r30, r10
    d646:	fb 09       	sbc	r31, r11
    d648:	ce 01       	movw	r24, r28
    d64a:	07 96       	adiw	r24, 0x07	; 7
    d64c:	e8 0f       	add	r30, r24
    d64e:	f9 1f       	adc	r31, r25
    d650:	e1 30       	cpi	r30, 0x01	; 1
    d652:	f2 40       	sbci	r31, 0x02	; 2
    d654:	58 f5       	brcc	.+86     	; 0xd6ac <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
    d656:	67 01       	movw	r12, r14
    d658:	82 e0       	ldi	r24, 0x02	; 2
    d65a:	c8 0e       	add	r12, r24
    d65c:	d1 1c       	adc	r13, r1
    d65e:	45 e0       	ldi	r20, 0x05	; 5
    d660:	50 e0       	ldi	r21, 0x00	; 0
    d662:	b6 01       	movw	r22, r12
    d664:	c5 01       	movw	r24, r10
    d666:	0e 94 70 ba 	call	0x174e0	; 0x174e0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
    d66a:	f8 01       	movw	r30, r16
    d66c:	dc 01       	movw	r26, r24
    d66e:	12 96       	adiw	r26, 0x02	; 2
    d670:	ae 0d       	add	r26, r14
    d672:	bf 1d       	adc	r27, r15
    d674:	a8 01       	movw	r20, r16
    d676:	4c 0f       	add	r20, r28
    d678:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
    d67a:	e4 17       	cp	r30, r20
    d67c:	f5 07       	cpc	r31, r21
    d67e:	19 f0       	breq	.+6      	; 0xd686 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
    d680:	21 91       	ld	r18, Z+
    d682:	2d 93       	st	X+, r18
    d684:	fa cf       	rjmp	.-12     	; 0xd67a <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    d686:	25 97       	sbiw	r28, 0x05	; 5
    d688:	9e 01       	movw	r18, r28
    d68a:	28 0f       	add	r18, r24
    d68c:	39 1f       	adc	r19, r25
    d68e:	a6 01       	movw	r20, r12
    d690:	60 e3       	ldi	r22, 0x30	; 48
    d692:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    d694:	df 91       	pop	r29
    d696:	cf 91       	pop	r28
    d698:	1f 91       	pop	r17
    d69a:	0f 91       	pop	r16
    d69c:	ff 90       	pop	r15
    d69e:	ef 90       	pop	r14
    d6a0:	df 90       	pop	r13
    d6a2:	cf 90       	pop	r12
    d6a4:	bf 90       	pop	r11
    d6a6:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    d6a8:	0c 94 97 6a 	jmp	0xd52e	; 0xd52e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    d6ac:	80 e0       	ldi	r24, 0x00	; 0
    d6ae:	df 91       	pop	r29
    d6b0:	cf 91       	pop	r28
    d6b2:	1f 91       	pop	r17
    d6b4:	0f 91       	pop	r16
    d6b6:	ff 90       	pop	r15
    d6b8:	ef 90       	pop	r14
    d6ba:	df 90       	pop	r13
    d6bc:	cf 90       	pop	r12
    d6be:	bf 90       	pop	r11
    d6c0:	af 90       	pop	r10
    d6c2:	08 95       	ret

0000d6c4 <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>:
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3071
    }
  }
}
///
///
void mqtt_publis_output(uint8_t idx, uint8_t state)
    d6c4:	0f 93       	push	r16
    d6c6:	1f 93       	push	r17
    d6c8:	cf 93       	push	r28
    d6ca:	df 93       	push	r29
    d6cc:	cd b7       	in	r28, 0x3d	; 61
    d6ce:	de b7       	in	r29, 0x3e	; 62
    d6d0:	c8 58       	subi	r28, 0x88	; 136
    d6d2:	d1 09       	sbc	r29, r1
    d6d4:	0f b6       	in	r0, 0x3f	; 63
    d6d6:	f8 94       	cli
    d6d8:	de bf       	out	0x3e, r29	; 62
    d6da:	0f be       	out	0x3f, r0	; 63
    d6dc:	cd bf       	out	0x3d, r28	; 61
    d6de:	08 2f       	mov	r16, r24
    d6e0:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
  {
    strcpy_P(str_topic, termbig_header_in);
    d6e2:	6c e8       	ldi	r22, 0x8C	; 140
    d6e4:	78 e8       	ldi	r23, 0x88	; 136
    d6e6:	ce 01       	movw	r24, r28
    d6e8:	01 96       	adiw	r24, 0x01	; 1
    d6ea:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
    strcat(str_topic, "power-output/");
    d6ee:	69 e8       	ldi	r22, 0x89	; 137
    d6f0:	73 e0       	ldi	r23, 0x03	; 3
    d6f2:	ce 01       	movw	r24, r28
    d6f4:	01 96       	adiw	r24, 0x01	; 1
    d6f6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    d6fa:	4a e0       	ldi	r20, 0x0A	; 10
    d6fc:	be 01       	movw	r22, r28
    d6fe:	6f 57       	subi	r22, 0x7F	; 127
    d700:	7f 4f       	sbci	r23, 0xFF	; 255
    d702:	80 2f       	mov	r24, r16
    d704:	90 e0       	ldi	r25, 0x00	; 0
    d706:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3081
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    d70a:	be 01       	movw	r22, r28
    d70c:	6f 57       	subi	r22, 0x7F	; 127
    d70e:	7f 4f       	sbci	r23, 0xFF	; 255
    d710:	ce 01       	movw	r24, r28
    d712:	01 96       	adiw	r24, 0x01	; 1
    d714:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3082
    strcat(str_topic, "/state");
    d718:	67 e9       	ldi	r22, 0x97	; 151
    d71a:	73 e0       	ldi	r23, 0x03	; 3
    d71c:	ce 01       	movw	r24, r28
    d71e:	01 96       	adiw	r24, 0x01	; 1
    d720:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    d724:	4a e0       	ldi	r20, 0x0A	; 10
    d726:	be 01       	movw	r22, r28
    d728:	6f 5b       	subi	r22, 0xBF	; 191
    d72a:	7f 4f       	sbci	r23, 0xFF	; 255
    d72c:	81 2f       	mov	r24, r17
    d72e:	90 e0       	ldi	r25, 0x00	; 0
    d730:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3084
    itoa(state, payload, 10);
    mqtt_client.publish(str_topic, payload);
    d734:	ae 01       	movw	r20, r28
    d736:	4f 5b       	subi	r20, 0xBF	; 191
    d738:	5f 4f       	sbci	r21, 0xFF	; 255
    d73a:	be 01       	movw	r22, r28
    d73c:	6f 5f       	subi	r22, 0xFF	; 255
    d73e:	7f 4f       	sbci	r23, 0xFF	; 255
    d740:	8b ec       	ldi	r24, 0xCB	; 203
    d742:	9f e0       	ldi	r25, 0x0F	; 15
    d744:	0e 94 05 6b 	call	0xd60a	; 0xd60a <PubSubClient::publish(char const*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
  }
}
    d748:	c8 57       	subi	r28, 0x78	; 120
    d74a:	df 4f       	sbci	r29, 0xFF	; 255
    d74c:	0f b6       	in	r0, 0x3f	; 63
    d74e:	f8 94       	cli
    d750:	de bf       	out	0x3e, r29	; 62
    d752:	0f be       	out	0x3f, r0	; 63
    d754:	cd bf       	out	0x3d, r28	; 61
    d756:	df 91       	pop	r29
    d758:	cf 91       	pop	r28
    d75a:	1f 91       	pop	r17
    d75c:	0f 91       	pop	r16
    d75e:	08 95       	ret

0000d760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.276():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    d760:	0c 94 55 fb 	jmp	0x1f6aa	; 0x1f6aa <eeprom_write_byte>

0000d764 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:70
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
    d764:	cf 92       	push	r12
    d766:	df 92       	push	r13
    d768:	ef 92       	push	r14
    d76a:	ff 92       	push	r15
    d76c:	0f 93       	push	r16
    d76e:	1f 93       	push	r17
    d770:	cf 93       	push	r28
    d772:	df 93       	push	r29
    d774:	00 d0       	rcall	.+0      	; 0xd776 <EEPROMwriteFloat(unsigned int, float)+0x12>
    d776:	1f 92       	push	r1
    d778:	cd b7       	in	r28, 0x3d	; 61
    d77a:	de b7       	in	r29, 0x3e	; 62
    d77c:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
    d77e:	49 83       	std	Y+1, r20	; 0x01
    d780:	5a 83       	std	Y+2, r21	; 0x02
    d782:	6b 83       	std	Y+3, r22	; 0x03
    d784:	7c 83       	std	Y+4, r23	; 0x04
    d786:	ce 01       	movw	r24, r28
    d788:	01 96       	adiw	r24, 0x01	; 1
    d78a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
    d78c:	10 e0       	ldi	r17, 0x00	; 0
    d78e:	00 e0       	ldi	r16, 0x00	; 0
    d790:	f7 01       	movw	r30, r14
    d792:	61 91       	ld	r22, Z+
    d794:	7f 01       	movw	r14, r30
    d796:	c8 01       	movw	r24, r16
    d798:	8c 0d       	add	r24, r12
    d79a:	9d 1d       	adc	r25, r13
    d79c:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    d7a0:	0f 5f       	subi	r16, 0xFF	; 255
    d7a2:	1f 4f       	sbci	r17, 0xFF	; 255
    d7a4:	04 30       	cpi	r16, 0x04	; 4
    d7a6:	11 05       	cpc	r17, r1
    d7a8:	99 f7       	brne	.-26     	; 0xd790 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:77
}
    d7aa:	0f 90       	pop	r0
    d7ac:	0f 90       	pop	r0
    d7ae:	0f 90       	pop	r0
    d7b0:	0f 90       	pop	r0
    d7b2:	df 91       	pop	r29
    d7b4:	cf 91       	pop	r28
    d7b6:	1f 91       	pop	r17
    d7b8:	0f 91       	pop	r16
    d7ba:	ff 90       	pop	r15
    d7bc:	ef 90       	pop	r14
    d7be:	df 90       	pop	r13
    d7c0:	cf 90       	pop	r12
    d7c2:	08 95       	ret

0000d7c4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    d7c4:	2d e4       	ldi	r18, 0x4D	; 77
    d7c6:	82 9f       	mul	r24, r18
    d7c8:	c0 01       	movw	r24, r0
    d7ca:	11 24       	eor	r1, r1
    d7cc:	26 e0       	ldi	r18, 0x06	; 6
    d7ce:	62 9f       	mul	r22, r18
    d7d0:	80 0d       	add	r24, r0
    d7d2:	91 1d       	adc	r25, r1
    d7d4:	11 24       	eor	r1, r1
    d7d6:	64 2f       	mov	r22, r20
    d7d8:	8e 50       	subi	r24, 0x0E	; 14
    d7da:	9e 4f       	sbci	r25, 0xFE	; 254
    d7dc:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d7e0 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    d7e0:	1f 93       	push	r17
    d7e2:	cf 93       	push	r28
    d7e4:	df 93       	push	r29
    d7e6:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    d7e8:	9d e4       	ldi	r25, 0x4D	; 77
    d7ea:	89 9f       	mul	r24, r25
    d7ec:	e0 01       	movw	r28, r0
    d7ee:	11 24       	eor	r1, r1
    d7f0:	cf 50       	subi	r28, 0x0F	; 15
    d7f2:	de 4f       	sbci	r29, 0xFE	; 254
    d7f4:	86 e0       	ldi	r24, 0x06	; 6
    d7f6:	68 9f       	mul	r22, r24
    d7f8:	c0 0d       	add	r28, r0
    d7fa:	d1 1d       	adc	r29, r1
    d7fc:	11 24       	eor	r1, r1
    d7fe:	65 2f       	mov	r22, r21
    d800:	ce 01       	movw	r24, r28
    d802:	05 96       	adiw	r24, 0x05	; 5
    d804:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    d808:	61 2f       	mov	r22, r17
    d80a:	ce 01       	movw	r24, r28
    d80c:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
    d80e:	df 91       	pop	r29
    d810:	cf 91       	pop	r28
    d812:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    d814:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d818 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    d818:	cf 92       	push	r12
    d81a:	ef 92       	push	r14
    d81c:	0f 93       	push	r16
    d81e:	1f 93       	push	r17
    d820:	cf 93       	push	r28
    d822:	df 93       	push	r29
    d824:	c8 2f       	mov	r28, r24
    d826:	56 2f       	mov	r21, r22
    d828:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    d82a:	3f e0       	ldi	r19, 0x0F	; 15
    d82c:	63 2f       	mov	r22, r19
    d82e:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d832:	83 70       	andi	r24, 0x03	; 3
    d834:	98 e0       	ldi	r25, 0x08	; 8
    d836:	09 9f       	mul	r16, r25
    d838:	80 01       	movw	r16, r0
    d83a:	11 24       	eor	r1, r1
    d83c:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    d83e:	8d e4       	ldi	r24, 0x4D	; 77
    d840:	c8 9f       	mul	r28, r24
    d842:	e0 01       	movw	r28, r0
    d844:	11 24       	eor	r1, r1
    d846:	cf 50       	subi	r28, 0x0F	; 15
    d848:	de 4f       	sbci	r29, 0xFE	; 254
    d84a:	96 e0       	ldi	r25, 0x06	; 6
    d84c:	59 9f       	mul	r21, r25
    d84e:	c0 0d       	add	r28, r0
    d850:	d1 1d       	adc	r29, r1
    d852:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    d854:	82 2f       	mov	r24, r18
    d856:	0e 94 10 fd 	call	0x1fa20	; 0x1fa20 <__udivmodqi4>
    d85a:	68 2f       	mov	r22, r24
    d85c:	66 0f       	add	r22, r22
    d85e:	66 70       	andi	r22, 0x06	; 6
    d860:	88 e0       	ldi	r24, 0x08	; 8
    d862:	48 9f       	mul	r20, r24
    d864:	a0 01       	movw	r20, r0
    d866:	11 24       	eor	r1, r1
    d868:	9c 2d       	mov	r25, r12
    d86a:	91 70       	andi	r25, 0x01	; 1
    d86c:	c9 2e       	mov	r12, r25
    d86e:	c4 0e       	add	r12, r20
    d870:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    d872:	ce 01       	movw	r24, r28
    d874:	02 96       	adiw	r24, 0x02	; 2
    d876:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    d87a:	60 2f       	mov	r22, r16
    d87c:	ce 01       	movw	r24, r28
    d87e:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
    d880:	df 91       	pop	r29
    d882:	cf 91       	pop	r28
    d884:	1f 91       	pop	r17
    d886:	0f 91       	pop	r16
    d888:	ef 90       	pop	r14
    d88a:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    d88c:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d890 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    d890:	ef 92       	push	r14
    d892:	ff 92       	push	r15
    d894:	0f 93       	push	r16
    d896:	1f 93       	push	r17
    d898:	cf 93       	push	r28
    d89a:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    d89c:	9d e4       	ldi	r25, 0x4D	; 77
    d89e:	89 9f       	mul	r24, r25
    d8a0:	80 01       	movw	r16, r0
    d8a2:	11 24       	eor	r1, r1
    d8a4:	eb 01       	movw	r28, r22
    d8a6:	78 01       	movw	r14, r16
    d8a8:	8c ec       	ldi	r24, 0xCC	; 204
    d8aa:	e8 1a       	sub	r14, r24
    d8ac:	8d ef       	ldi	r24, 0xFD	; 253
    d8ae:	f8 0a       	sbc	r15, r24
    d8b0:	02 5c       	subi	r16, 0xC2	; 194
    d8b2:	1d 4f       	sbci	r17, 0xFD	; 253
    d8b4:	69 91       	ld	r22, Y+
    d8b6:	c7 01       	movw	r24, r14
    d8b8:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    d8bc:	fe 01       	movw	r30, r28
    d8be:	31 97       	sbiw	r30, 0x01	; 1
    d8c0:	80 81       	ld	r24, Z
    d8c2:	88 23       	and	r24, r24
    d8c4:	31 f0       	breq	.+12     	; 0xd8d2 <thermostat_program_set_name(unsigned char, char*)+0x42>
    d8c6:	9f ef       	ldi	r25, 0xFF	; 255
    d8c8:	e9 1a       	sub	r14, r25
    d8ca:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    d8cc:	e0 16       	cp	r14, r16
    d8ce:	f1 06       	cpc	r15, r17
    d8d0:	89 f7       	brne	.-30     	; 0xd8b4 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    d8d2:	df 91       	pop	r29
    d8d4:	cf 91       	pop	r28
    d8d6:	1f 91       	pop	r17
    d8d8:	0f 91       	pop	r16
    d8da:	ff 90       	pop	r15
    d8dc:	ef 90       	pop	r14
    d8de:	08 95       	ret

0000d8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    d8e0:	ef 92       	push	r14
    d8e2:	ff 92       	push	r15
    d8e4:	0f 93       	push	r16
    d8e6:	1f 93       	push	r17
    d8e8:	cf 93       	push	r28
    d8ea:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    d8ec:	e8 2e       	mov	r14, r24
    d8ee:	f1 2c       	mov	r15, r1
    d8f0:	91 e2       	ldi	r25, 0x21	; 33
    d8f2:	89 9f       	mul	r24, r25
    d8f4:	e0 01       	movw	r28, r0
    d8f6:	11 24       	eor	r1, r1
    d8f8:	87 01       	movw	r16, r14
    d8fa:	00 0f       	add	r16, r16
    d8fc:	11 1f       	adc	r17, r17
    d8fe:	00 0f       	add	r16, r16
    d900:	11 1f       	adc	r17, r17
    d902:	f8 01       	movw	r30, r16
    d904:	ec 5a       	subi	r30, 0xAC	; 172
    d906:	f5 4f       	sbci	r31, 0xF5	; 245
    d908:	40 81       	ld	r20, Z
    d90a:	51 81       	ldd	r21, Z+1	; 0x01
    d90c:	62 81       	ldd	r22, Z+2	; 0x02
    d90e:	73 81       	ldd	r23, Z+3	; 0x03
    d910:	ce 01       	movw	r24, r28
    d912:	80 5a       	subi	r24, 0xA0	; 160
    d914:	9e 4f       	sbci	r25, 0xFE	; 254
    d916:	0e 94 b2 6b 	call	0xd764	; 0xd764 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    d91a:	f8 01       	movw	r30, r16
    d91c:	e8 59       	subi	r30, 0x98	; 152
    d91e:	f5 4f       	sbci	r31, 0xF5	; 245
    d920:	40 81       	ld	r20, Z
    d922:	51 81       	ldd	r21, Z+1	; 0x01
    d924:	62 81       	ldd	r22, Z+2	; 0x02
    d926:	73 81       	ldd	r23, Z+3	; 0x03
    d928:	ce 01       	movw	r24, r28
    d92a:	8c 59       	subi	r24, 0x9C	; 156
    d92c:	9e 4f       	sbci	r25, 0xFE	; 254
    d92e:	0e 94 b2 6b 	call	0xd764	; 0xd764 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    d932:	f8 01       	movw	r30, r16
    d934:	e4 58       	subi	r30, 0x84	; 132
    d936:	f5 4f       	sbci	r31, 0xF5	; 245
    d938:	40 81       	ld	r20, Z
    d93a:	51 81       	ldd	r21, Z+1	; 0x01
    d93c:	62 81       	ldd	r22, Z+2	; 0x02
    d93e:	73 81       	ldd	r23, Z+3	; 0x03
    d940:	ce 01       	movw	r24, r28
    d942:	88 59       	subi	r24, 0x98	; 152
    d944:	9e 4f       	sbci	r25, 0xFE	; 254
    d946:	0e 94 b2 6b 	call	0xd764	; 0xd764 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    d94a:	f7 01       	movw	r30, r14
    d94c:	e0 57       	subi	r30, 0x70	; 112
    d94e:	f5 4f       	sbci	r31, 0xF5	; 245
    d950:	60 81       	ld	r22, Z
    d952:	ce 01       	movw	r24, r28
    d954:	84 59       	subi	r24, 0x94	; 148
    d956:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
    d958:	df 91       	pop	r29
    d95a:	cf 91       	pop	r28
    d95c:	1f 91       	pop	r17
    d95e:	0f 91       	pop	r16
    d960:	ff 90       	pop	r15
    d962:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    d964:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d968 <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1283
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_time(args1, args3);
}
void button_click_ring_term_set_pid_default(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d968:	8f 92       	push	r8
    d96a:	9f 92       	push	r9
    d96c:	af 92       	push	r10
    d96e:	bf 92       	push	r11
    d970:	ef 92       	push	r14
    d972:	ff 92       	push	r15
    d974:	0f 93       	push	r16
    d976:	1f 93       	push	r17
    d978:	cf 93       	push	r28
    d97a:	df 93       	push	r29
    d97c:	eb 01       	movw	r28, r22
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d97e:	7b 01       	movw	r14, r22
    d980:	ff 24       	eor	r15, r15
    d982:	87 01       	movw	r16, r14
    d984:	00 0f       	add	r16, r16
    d986:	11 1f       	adc	r17, r17
    d988:	00 0f       	add	r16, r16
    d98a:	11 1f       	adc	r17, r17
    d98c:	f8 01       	movw	r30, r16
    d98e:	ec 5a       	subi	r30, 0xAC	; 172
    d990:	f5 4f       	sbci	r31, 0xF5	; 245
    d992:	81 2c       	mov	r8, r1
    d994:	91 2c       	mov	r9, r1
    d996:	90 e8       	ldi	r25, 0x80	; 128
    d998:	a9 2e       	mov	r10, r25
    d99a:	9f e3       	ldi	r25, 0x3F	; 63
    d99c:	b9 2e       	mov	r11, r25
    d99e:	80 82       	st	Z, r8
    d9a0:	91 82       	std	Z+1, r9	; 0x01
    d9a2:	a2 82       	std	Z+2, r10	; 0x02
    d9a4:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d9a6:	86 2f       	mov	r24, r22
    d9a8:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d9ac:	8c 2f       	mov	r24, r28
    d9ae:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d9b2:	f8 01       	movw	r30, r16
    d9b4:	e8 59       	subi	r30, 0x98	; 152
    d9b6:	f5 4f       	sbci	r31, 0xF5	; 245
    d9b8:	80 e0       	ldi	r24, 0x00	; 0
    d9ba:	90 e0       	ldi	r25, 0x00	; 0
    d9bc:	a0 e0       	ldi	r26, 0x00	; 0
    d9be:	bf e3       	ldi	r27, 0x3F	; 63
    d9c0:	80 83       	st	Z, r24
    d9c2:	91 83       	std	Z+1, r25	; 0x01
    d9c4:	a2 83       	std	Z+2, r26	; 0x02
    d9c6:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d9c8:	8c 2f       	mov	r24, r28
    d9ca:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d9ce:	8c 2f       	mov	r24, r28
    d9d0:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d9d4:	f8 01       	movw	r30, r16
    d9d6:	e4 58       	subi	r30, 0x84	; 132
    d9d8:	f5 4f       	sbci	r31, 0xF5	; 245
    d9da:	80 82       	st	Z, r8
    d9dc:	91 82       	std	Z+1, r9	; 0x01
    d9de:	a2 82       	std	Z+2, r10	; 0x02
    d9e0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d9e2:	8c 2f       	mov	r24, r28
    d9e4:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d9e8:	8c 2f       	mov	r24, r28
    d9ea:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d9ee:	f7 01       	movw	r30, r14
    d9f0:	e0 57       	subi	r30, 0x70	; 112
    d9f2:	f5 4f       	sbci	r31, 0xF5	; 245
    d9f4:	8c e3       	ldi	r24, 0x3C	; 60
    d9f6:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d9f8:	8c 2f       	mov	r24, r28
    d9fa:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d9fe:	8c 2f       	mov	r24, r28
    da00:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1288
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    da04:	40 e0       	ldi	r20, 0x00	; 0
    da06:	be 01       	movw	r22, r28
    da08:	90 e0       	ldi	r25, 0x00	; 0
    da0a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1289
}
    da0c:	df 91       	pop	r29
    da0e:	cf 91       	pop	r28
    da10:	1f 91       	pop	r17
    da12:	0f 91       	pop	r16
    da14:	ff 90       	pop	r15
    da16:	ef 90       	pop	r14
    da18:	bf 90       	pop	r11
    da1a:	af 90       	pop	r10
    da1c:	9f 90       	pop	r9
    da1e:	8f 90       	pop	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1288
{
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    da20:	0c 94 57 52 	jmp	0xa4ae	; 0xa4ae <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

0000da24 <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1279
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
    da24:	cf 93       	push	r28
    da26:	df 93       	push	r29
    da28:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    da2a:	fc 01       	movw	r30, r24
    da2c:	ff 27       	eor	r31, r31
    da2e:	e0 57       	subi	r30, 0x70	; 112
    da30:	f5 4f       	sbci	r31, 0xF5	; 245
    da32:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    da34:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    da38:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1281
  thermostat_ring_pid_set_time(args1, args3);
}
    da3a:	df 91       	pop	r29
    da3c:	cf 91       	pop	r28
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
    da3e:	0c 94 70 6c 	jmp	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000da42 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1275
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
    da42:	cf 93       	push	r28
    da44:	df 93       	push	r29
    da46:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    da48:	fc 01       	movw	r30, r24
    da4a:	ff 27       	eor	r31, r31
    da4c:	ee 0f       	add	r30, r30
    da4e:	ff 1f       	adc	r31, r31
    da50:	ee 0f       	add	r30, r30
    da52:	ff 1f       	adc	r31, r31
    da54:	e4 58       	subi	r30, 0x84	; 132
    da56:	f5 4f       	sbci	r31, 0xF5	; 245
    da58:	40 83       	st	Z, r20
    da5a:	51 83       	std	Z+1, r21	; 0x01
    da5c:	62 83       	std	Z+2, r22	; 0x02
    da5e:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    da60:	8c 2f       	mov	r24, r28
    da62:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    da66:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1277
  thermostat_ring_pid_set_kd(args1, args2);
}
    da68:	df 91       	pop	r29
    da6a:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
    da6c:	0c 94 70 6c 	jmp	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000da70 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1271
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
    da70:	cf 93       	push	r28
    da72:	df 93       	push	r29
    da74:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    da76:	fc 01       	movw	r30, r24
    da78:	ff 27       	eor	r31, r31
    da7a:	ee 0f       	add	r30, r30
    da7c:	ff 1f       	adc	r31, r31
    da7e:	ee 0f       	add	r30, r30
    da80:	ff 1f       	adc	r31, r31
    da82:	e8 59       	subi	r30, 0x98	; 152
    da84:	f5 4f       	sbci	r31, 0xF5	; 245
    da86:	40 83       	st	Z, r20
    da88:	51 83       	std	Z+1, r21	; 0x01
    da8a:	62 83       	std	Z+2, r22	; 0x02
    da8c:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    da8e:	8c 2f       	mov	r24, r28
    da90:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    da94:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1273
  thermostat_ring_pid_set_ki(args1, args2);
}
    da96:	df 91       	pop	r29
    da98:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
    da9a:	0c 94 70 6c 	jmp	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000da9e <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1267
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
    da9e:	cf 93       	push	r28
    daa0:	df 93       	push	r29
    daa2:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    daa4:	fc 01       	movw	r30, r24
    daa6:	ff 27       	eor	r31, r31
    daa8:	ee 0f       	add	r30, r30
    daaa:	ff 1f       	adc	r31, r31
    daac:	ee 0f       	add	r30, r30
    daae:	ff 1f       	adc	r31, r31
    dab0:	ec 5a       	subi	r30, 0xAC	; 172
    dab2:	f5 4f       	sbci	r31, 0xF5	; 245
    dab4:	40 83       	st	Z, r20
    dab6:	51 83       	std	Z+1, r21	; 0x01
    dab8:	62 83       	std	Z+2, r22	; 0x02
    daba:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    dabc:	8c 2f       	mov	r24, r28
    dabe:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    dac2:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1269
  thermostat_ring_pid_set_kp(args1, args2);
}
    dac4:	df 91       	pop	r29
    dac6:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
    dac8:	0c 94 70 6c 	jmp	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000dacc <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    dacc:	21 e2       	ldi	r18, 0x21	; 33
    dace:	82 9f       	mul	r24, r18
    dad0:	c0 01       	movw	r24, r0
    dad2:	11 24       	eor	r1, r1
    dad4:	82 5a       	subi	r24, 0xA2	; 162
    dad6:	9e 4f       	sbci	r25, 0xFE	; 254
    dad8:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000dadc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_select_term_mode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5405
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/

void button_select_term_mode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dadc:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5406
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    dade:	60 e0       	ldi	r22, 0x00	; 0
    dae0:	44 23       	and	r20, r20
    dae2:	61 f0       	breq	.+24     	; 0xdafc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    dae4:	61 e0       	ldi	r22, 0x01	; 1
    dae6:	41 30       	cpi	r20, 0x01	; 1
    dae8:	49 f0       	breq	.+18     	; 0xdafc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    daea:	67 e0       	ldi	r22, 0x07	; 7
    daec:	42 30       	cpi	r20, 0x02	; 2
    daee:	31 f0       	breq	.+12     	; 0xdafc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5409
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    daf0:	62 e0       	ldi	r22, 0x02	; 2
    daf2:	43 30       	cpi	r20, 0x03	; 3
    daf4:	19 f0       	breq	.+6      	; 0xdafc <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5410
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    daf6:	44 30       	cpi	r20, 0x04	; 4
    daf8:	19 f4       	brne	.+6      	; 0xdb00 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
    dafa:	68 e0       	ldi	r22, 0x08	; 8
    dafc:	0e 94 66 6d 	call	0xdacc	; 0xdacc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5411
  change_term_mode = 1;
    db00:	81 e0       	ldi	r24, 0x01	; 1
    db02:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5412
}
    db06:	08 95       	ret

0000db08 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    db08:	1f 93       	push	r17
    db0a:	cf 93       	push	r28
    db0c:	df 93       	push	r29
    db0e:	16 2f       	mov	r17, r22
    db10:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    db12:	91 e2       	ldi	r25, 0x21	; 33
    db14:	89 9f       	mul	r24, r25
    db16:	e0 01       	movw	r28, r0
    db18:	11 24       	eor	r1, r1
    db1a:	ce 01       	movw	r24, r28
    db1c:	8a 5a       	subi	r24, 0xAA	; 170
    db1e:	9e 4f       	sbci	r25, 0xFE	; 254
    db20:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    db24:	61 2f       	mov	r22, r17
    db26:	ce 01       	movw	r24, r28
    db28:	89 5a       	subi	r24, 0xA9	; 169
    db2a:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
    db2c:	df 91       	pop	r29
    db2e:	cf 91       	pop	r28
    db30:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    db32:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000db36 <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1263
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
    db36:	cf 93       	push	r28
    db38:	c8 2f       	mov	r28, r24
    db3a:	cb 01       	movw	r24, r22
    db3c:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1264
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    db3e:	20 e0       	ldi	r18, 0x00	; 0
    db40:	30 e0       	ldi	r19, 0x00	; 0
    db42:	40 e2       	ldi	r20, 0x20	; 32
    db44:	51 e4       	ldi	r21, 0x41	; 65
    db46:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
    db4a:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
    db4e:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1265
}
    db50:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1264
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    db52:	0c 94 84 6d 	jmp	0xdb08	; 0xdb08 <thermostat_ring_set_mezni(unsigned char, int)>

0000db56 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    db56:	df 92       	push	r13
    db58:	ef 92       	push	r14
    db5a:	ff 92       	push	r15
    db5c:	0f 93       	push	r16
    db5e:	1f 93       	push	r17
    db60:	cf 93       	push	r28
    db62:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    db64:	91 e2       	ldi	r25, 0x21	; 33
    db66:	89 9f       	mul	r24, r25
    db68:	e0 01       	movw	r28, r0
    db6a:	11 24       	eor	r1, r1
    db6c:	7b 01       	movw	r14, r22
    db6e:	8e 01       	movw	r16, r28
    db70:	04 5b       	subi	r16, 0xB4	; 180
    db72:	1e 4f       	sbci	r17, 0xFE	; 254
    db74:	cb 5a       	subi	r28, 0xAB	; 171
    db76:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    db78:	f7 01       	movw	r30, r14
    db7a:	d1 90       	ld	r13, Z+
    db7c:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    db7e:	6d 2d       	mov	r22, r13
    db80:	c8 01       	movw	r24, r16
    db82:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    db86:	dd 20       	and	r13, r13
    db88:	29 f0       	breq	.+10     	; 0xdb94 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    db8a:	0f 5f       	subi	r16, 0xFF	; 255
    db8c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    db8e:	0c 17       	cp	r16, r28
    db90:	1d 07       	cpc	r17, r29
    db92:	91 f7       	brne	.-28     	; 0xdb78 <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    db94:	df 91       	pop	r29
    db96:	cf 91       	pop	r28
    db98:	1f 91       	pop	r17
    db9a:	0f 91       	pop	r16
    db9c:	ff 90       	pop	r15
    db9e:	ef 90       	pop	r14
    dba0:	df 90       	pop	r13
    dba2:	08 95       	ret

0000dba4 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    dba4:	8f 92       	push	r8
    dba6:	9f 92       	push	r9
    dba8:	af 92       	push	r10
    dbaa:	bf 92       	push	r11
    dbac:	ef 92       	push	r14
    dbae:	ff 92       	push	r15
    dbb0:	0f 93       	push	r16
    dbb2:	1f 93       	push	r17
    dbb4:	cf 93       	push	r28
    dbb6:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    dbb8:	e8 2e       	mov	r14, r24
    dbba:	f1 2c       	mov	r15, r1
    dbbc:	87 01       	movw	r16, r14
    dbbe:	00 0f       	add	r16, r16
    dbc0:	11 1f       	adc	r17, r17
    dbc2:	00 0f       	add	r16, r16
    dbc4:	11 1f       	adc	r17, r17
    dbc6:	f8 01       	movw	r30, r16
    dbc8:	ec 5a       	subi	r30, 0xAC	; 172
    dbca:	f5 4f       	sbci	r31, 0xF5	; 245
    dbcc:	81 2c       	mov	r8, r1
    dbce:	91 2c       	mov	r9, r1
    dbd0:	90 e8       	ldi	r25, 0x80	; 128
    dbd2:	a9 2e       	mov	r10, r25
    dbd4:	9f e3       	ldi	r25, 0x3F	; 63
    dbd6:	b9 2e       	mov	r11, r25
    dbd8:	80 82       	st	Z, r8
    dbda:	91 82       	std	Z+1, r9	; 0x01
    dbdc:	a2 82       	std	Z+2, r10	; 0x02
    dbde:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    dbe0:	8c 2f       	mov	r24, r28
    dbe2:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    dbe6:	8c 2f       	mov	r24, r28
    dbe8:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    dbec:	f8 01       	movw	r30, r16
    dbee:	e8 59       	subi	r30, 0x98	; 152
    dbf0:	f5 4f       	sbci	r31, 0xF5	; 245
    dbf2:	80 e0       	ldi	r24, 0x00	; 0
    dbf4:	90 e0       	ldi	r25, 0x00	; 0
    dbf6:	a0 e0       	ldi	r26, 0x00	; 0
    dbf8:	bf e3       	ldi	r27, 0x3F	; 63
    dbfa:	80 83       	st	Z, r24
    dbfc:	91 83       	std	Z+1, r25	; 0x01
    dbfe:	a2 83       	std	Z+2, r26	; 0x02
    dc00:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    dc02:	8c 2f       	mov	r24, r28
    dc04:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    dc08:	8c 2f       	mov	r24, r28
    dc0a:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    dc0e:	f8 01       	movw	r30, r16
    dc10:	e4 58       	subi	r30, 0x84	; 132
    dc12:	f5 4f       	sbci	r31, 0xF5	; 245
    dc14:	80 82       	st	Z, r8
    dc16:	91 82       	std	Z+1, r9	; 0x01
    dc18:	a2 82       	std	Z+2, r10	; 0x02
    dc1a:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    dc1c:	8c 2f       	mov	r24, r28
    dc1e:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    dc22:	8c 2f       	mov	r24, r28
    dc24:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    dc28:	f7 01       	movw	r30, r14
    dc2a:	e0 57       	subi	r30, 0x70	; 112
    dc2c:	f5 4f       	sbci	r31, 0xF5	; 245
    dc2e:	8c e3       	ldi	r24, 0x3C	; 60
    dc30:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    dc32:	8c 2f       	mov	r24, r28
    dc34:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    dc38:	8c 2f       	mov	r24, r28
    dc3a:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    dc3e:	81 e2       	ldi	r24, 0x21	; 33
    dc40:	c8 9f       	mul	r28, r24
    dc42:	80 01       	movw	r16, r0
    dc44:	11 24       	eor	r1, r1
    dc46:	6f ef       	ldi	r22, 0xFF	; 255
    dc48:	c8 01       	movw	r24, r16
    dc4a:	84 5a       	subi	r24, 0xA4	; 164
    dc4c:	9e 4f       	sbci	r25, 0xFE	; 254
    dc4e:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
    dc52:	6c ed       	ldi	r22, 0xDC	; 220
    dc54:	70 e0       	ldi	r23, 0x00	; 0
    dc56:	8c 2f       	mov	r24, r28
    dc58:	0e 94 84 6d 	call	0xdb08	; 0xdb08 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    dc5c:	6f ef       	ldi	r22, 0xFF	; 255
    dc5e:	c8 01       	movw	r24, r16
    dc60:	85 5a       	subi	r24, 0xA5	; 165
    dc62:	9e 4f       	sbci	r25, 0xFE	; 254
    dc64:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    dc68:	f7 01       	movw	r30, r14
    dc6a:	e7 5d       	subi	r30, 0xD7	; 215
    dc6c:	f4 4f       	sbci	r31, 0xF4	; 244
    dc6e:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    dc70:	6f ef       	ldi	r22, 0xFF	; 255
    dc72:	c8 01       	movw	r24, r16
    dc74:	83 5a       	subi	r24, 0xA3	; 163
    dc76:	9e 4f       	sbci	r25, 0xFE	; 254
    dc78:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    dc7c:	6f ef       	ldi	r22, 0xFF	; 255
    dc7e:	c8 01       	movw	r24, r16
    dc80:	81 5a       	subi	r24, 0xA1	; 161
    dc82:	9e 4f       	sbci	r25, 0xFE	; 254
    dc84:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    dc88:	60 e0       	ldi	r22, 0x00	; 0
    dc8a:	8c 2f       	mov	r24, r28
    dc8c:	0e 94 66 6d 	call	0xdacc	; 0xdacc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    dc90:	6e e9       	ldi	r22, 0x9E	; 158
    dc92:	73 e0       	ldi	r23, 0x03	; 3
    dc94:	8c 2f       	mov	r24, r28
    dc96:	0e 94 ab 6d 	call	0xdb56	; 0xdb56 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    dc9a:	60 e0       	ldi	r22, 0x00	; 0
    dc9c:	c8 01       	movw	r24, r16
    dc9e:	88 5a       	subi	r24, 0xA8	; 168
    dca0:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    dca2:	cf 91       	pop	r28
    dca4:	1f 91       	pop	r17
    dca6:	0f 91       	pop	r16
    dca8:	ff 90       	pop	r15
    dcaa:	ef 90       	pop	r14
    dcac:	bf 90       	pop	r11
    dcae:	af 90       	pop	r10
    dcb0:	9f 90       	pop	r9
    dcb2:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    dcb4:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000dcb8 <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48helper_thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5224
   Funkce pro aktivovani/deaktivovani ringu termostatu
*/

void helper_thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_clear(args1);
    dcb8:	0c 94 d2 6d 	jmp	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>

0000dcbc <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z38helper_thermostat_button_set_ring_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5191
   args3
   promene nemaji zadny vyznam
*/

void helper_thermostat_button_set_ring_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dcbc:	cf 93       	push	r28
    dcbe:	df 93       	push	r29
    dcc0:	00 d0       	rcall	.+0      	; 0xdcc2 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    dcc2:	00 d0       	rcall	.+0      	; 0xdcc4 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    dcc4:	00 d0       	rcall	.+0      	; 0xdcc6 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    dcc6:	1f 92       	push	r1
    dcc8:	cd b7       	in	r28, 0x3d	; 61
    dcca:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5193
  char name[10];
  display_element_get_string(name);
    dccc:	ce 01       	movw	r24, r28
    dcce:	01 96       	adiw	r24, 0x01	; 1
    dcd0:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5195
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    dcd4:	be 01       	movw	r22, r28
    dcd6:	6f 5f       	subi	r22, 0xFF	; 255
    dcd8:	7f 4f       	sbci	r23, 0xFF	; 255
    dcda:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <dialog_set_string_args>
    dcde:	0e 94 ab 6d 	call	0xdb56	; 0xdb56 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5196
}
    dce2:	2a 96       	adiw	r28, 0x0a	; 10
    dce4:	0f b6       	in	r0, 0x3f	; 63
    dce6:	f8 94       	cli
    dce8:	de bf       	out	0x3e, r29	; 62
    dcea:	0f be       	out	0x3f, r0	; 63
    dcec:	cd bf       	out	0x3d, r28	; 61
    dcee:	df 91       	pop	r29
    dcf0:	cf 91       	pop	r28
    dcf2:	08 95       	ret

0000dcf4 <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z46helper_thermostat_button_activate_ring_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    dcf4:	21 e2       	ldi	r18, 0x21	; 33
    dcf6:	82 9f       	mul	r24, r18
    dcf8:	c0 01       	movw	r24, r0
    dcfa:	11 24       	eor	r1, r1
    dcfc:	61 e0       	ldi	r22, 0x01	; 1
    dcfe:	83 5a       	subi	r24, 0xA3	; 163
    dd00:	9e 4f       	sbci	r25, 0xFE	; 254
    dd02:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000dd06 <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48button_deassociate_input_sensor_for_term_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    dd06:	21 e2       	ldi	r18, 0x21	; 33
    dd08:	62 9f       	mul	r22, r18
    dd0a:	c0 01       	movw	r24, r0
    dd0c:	11 24       	eor	r1, r1
    dd0e:	6f ef       	ldi	r22, 0xFF	; 255
    dd10:	84 5a       	subi	r24, 0xA4	; 164
    dd12:	9e 4f       	sbci	r25, 0xFE	; 254
    dd14:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000dd18 <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z47button_select_term_ring_input_in_dialog_onclickjjh():
    dd18:	21 e2       	ldi	r18, 0x21	; 33
    dd1a:	62 9f       	mul	r22, r18
    dd1c:	c0 01       	movw	r24, r0
    dd1e:	11 24       	eor	r1, r1
    dd20:	64 2f       	mov	r22, r20
    dd22:	84 5a       	subi	r24, 0xA4	; 164
    dd24:	9e 4f       	sbci	r25, 0xFE	; 254
    dd26:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000dd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    dd2a:	af 92       	push	r10
    dd2c:	bf 92       	push	r11
    dd2e:	cf 92       	push	r12
    dd30:	df 92       	push	r13
    dd32:	ef 92       	push	r14
    dd34:	ff 92       	push	r15
    dd36:	0f 93       	push	r16
    dd38:	1f 93       	push	r17
    dd3a:	cf 93       	push	r28
    dd3c:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    dd3e:	86 30       	cpi	r24, 0x06	; 6
    dd40:	08 f0       	brcs	.+2      	; 0xdd44 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    dd42:	49 c0       	rjmp	.+146    	; 0xddd6 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    dd44:	6b 01       	movw	r12, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    dd46:	96 e1       	ldi	r25, 0x16	; 22
    dd48:	89 9f       	mul	r24, r25
    dd4a:	e0 01       	movw	r28, r0
    dd4c:	11 24       	eor	r1, r1
    dd4e:	f6 01       	movw	r30, r12
    dd50:	61 91       	ld	r22, Z+
    dd52:	7f 01       	movw	r14, r30
    dd54:	ce 01       	movw	r24, r28
    dd56:	88 53       	subi	r24, 0x38	; 56
    dd58:	9f 4f       	sbci	r25, 0xFF	; 255
    dd5a:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dd5e:	8e 01       	movw	r16, r28
    dd60:	07 53       	subi	r16, 0x37	; 55
    dd62:	1f 4f       	sbci	r17, 0xFF	; 255
    dd64:	5e 01       	movw	r10, r28
    dd66:	f1 ed       	ldi	r31, 0xD1	; 209
    dd68:	af 0e       	add	r10, r31
    dd6a:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    dd6c:	f7 01       	movw	r30, r14
    dd6e:	61 91       	ld	r22, Z+
    dd70:	7f 01       	movw	r14, r30
    dd72:	c8 01       	movw	r24, r16
    dd74:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    dd78:	f7 01       	movw	r30, r14
    dd7a:	62 85       	ldd	r22, Z+10	; 0x0a
    dd7c:	c8 01       	movw	r24, r16
    dd7e:	0b 96       	adiw	r24, 0x0b	; 11
    dd80:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dd84:	0f 5f       	subi	r16, 0xFF	; 255
    dd86:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    dd88:	0a 15       	cp	r16, r10
    dd8a:	1b 05       	cpc	r17, r11
    dd8c:	79 f7       	brne	.-34     	; 0xdd6c <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    dd8e:	f6 01       	movw	r30, r12
    dd90:	61 85       	ldd	r22, Z+9	; 0x09
    dd92:	c8 01       	movw	r24, r16
    dd94:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    dd98:	f6 01       	movw	r30, r12
    dd9a:	63 85       	ldd	r22, Z+11	; 0x0b
    dd9c:	ce 01       	movw	r24, r28
    dd9e:	8e 52       	subi	r24, 0x2E	; 46
    dda0:	9f 4f       	sbci	r25, 0xFF	; 255
    dda2:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    dda6:	f6 01       	movw	r30, r12
    dda8:	62 85       	ldd	r22, Z+10	; 0x0a
    ddaa:	ce 01       	movw	r24, r28
    ddac:	8d 52       	subi	r24, 0x2D	; 45
    ddae:	9f 4f       	sbci	r25, 0xFF	; 255
    ddb0:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    ddb4:	f6 01       	movw	r30, r12
    ddb6:	64 89       	ldd	r22, Z+20	; 0x14
    ddb8:	ce 01       	movw	r24, r28
    ddba:	84 52       	subi	r24, 0x24	; 36
    ddbc:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    ddbe:	df 91       	pop	r29
    ddc0:	cf 91       	pop	r28
    ddc2:	1f 91       	pop	r17
    ddc4:	0f 91       	pop	r16
    ddc6:	ff 90       	pop	r15
    ddc8:	ef 90       	pop	r14
    ddca:	df 90       	pop	r13
    ddcc:	cf 90       	pop	r12
    ddce:	bf 90       	pop	r11
    ddd0:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    ddd2:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    ddd6:	df 91       	pop	r29
    ddd8:	cf 91       	pop	r28
    ddda:	1f 91       	pop	r17
    dddc:	0f 91       	pop	r16
    ddde:	ff 90       	pop	r15
    dde0:	ef 90       	pop	r14
    dde2:	df 90       	pop	r13
    dde4:	cf 90       	pop	r12
    dde6:	bf 90       	pop	r11
    dde8:	af 90       	pop	r10
    ddea:	08 95       	ret

0000ddec <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    ddec:	ff 92       	push	r15
    ddee:	0f 93       	push	r16
    ddf0:	1f 93       	push	r17
    ddf2:	cf 93       	push	r28
    ddf4:	df 93       	push	r29
    ddf6:	8c 01       	movw	r16, r24
    ddf8:	d0 e0       	ldi	r29, 0x00	; 0
    ddfa:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    ddfc:	f8 01       	movw	r30, r16
    ddfe:	f1 90       	ld	r15, Z+
    de00:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    de02:	6f 2d       	mov	r22, r15
    de04:	ce 01       	movw	r24, r28
    de06:	8c 59       	subi	r24, 0x9C	; 156
    de08:	9f 4f       	sbci	r25, 0xFF	; 255
    de0a:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    de0e:	f1 10       	cpse	r15, r1
    de10:	0b c0       	rjmp	.+22     	; 0xde28 <device_set_name(char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    de12:	60 e0       	ldi	r22, 0x00	; 0
    de14:	ce 01       	movw	r24, r28
    de16:	8b 59       	subi	r24, 0x9B	; 155
    de18:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    de1a:	df 91       	pop	r29
    de1c:	cf 91       	pop	r28
    de1e:	1f 91       	pop	r17
    de20:	0f 91       	pop	r16
    de22:	ff 90       	pop	r15
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    de24:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    de28:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    de2a:	c9 30       	cpi	r28, 0x09	; 9
    de2c:	d1 05       	cpc	r29, r1
    de2e:	31 f7       	brne	.-52     	; 0xddfc <device_set_name(char*)+0x10>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    de30:	df 91       	pop	r29
    de32:	cf 91       	pop	r28
    de34:	1f 91       	pop	r17
    de36:	0f 91       	pop	r16
    de38:	ff 90       	pop	r15
    de3a:	08 95       	ret

0000de3c <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    de3c:	ef 92       	push	r14
    de3e:	ff 92       	push	r15
    de40:	0f 93       	push	r16
    de42:	1f 93       	push	r17
    de44:	cf 93       	push	r28
    de46:	df 93       	push	r29
    de48:	05 eb       	ldi	r16, 0xB5	; 181
    de4a:	1d e0       	ldi	r17, 0x0D	; 13
    de4c:	ce e6       	ldi	r28, 0x6E	; 110
    de4e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    de50:	f8 01       	movw	r30, r16
    de52:	61 91       	ld	r22, Z+
    de54:	8f 01       	movw	r16, r30
    de56:	ce 01       	movw	r24, r28
    de58:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    de5c:	21 96       	adiw	r28, 0x01	; 1
    de5e:	c4 37       	cpi	r28, 0x74	; 116
    de60:	d1 05       	cpc	r29, r1
    de62:	b1 f7       	brne	.-20     	; 0xde50 <save_setup_network()+0x14>
    de64:	0b eb       	ldi	r16, 0xBB	; 187
    de66:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    de68:	f8 01       	movw	r30, r16
    de6a:	61 91       	ld	r22, Z+
    de6c:	8f 01       	movw	r16, r30
    de6e:	ce 01       	movw	r24, r28
    de70:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    de74:	21 96       	adiw	r28, 0x01	; 1
    de76:	c8 37       	cpi	r28, 0x78	; 120
    de78:	d1 05       	cpc	r29, r1
    de7a:	b1 f7       	brne	.-20     	; 0xde68 <save_setup_network()+0x2c>
    de7c:	0f eb       	ldi	r16, 0xBF	; 191
    de7e:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    de80:	f8 01       	movw	r30, r16
    de82:	61 91       	ld	r22, Z+
    de84:	8f 01       	movw	r16, r30
    de86:	ce 01       	movw	r24, r28
    de88:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    de8c:	21 96       	adiw	r28, 0x01	; 1
    de8e:	cc 37       	cpi	r28, 0x7C	; 124
    de90:	d1 05       	cpc	r29, r1
    de92:	b1 f7       	brne	.-20     	; 0xde80 <save_setup_network()+0x44>
    de94:	27 ec       	ldi	r18, 0xC7	; 199
    de96:	e2 2e       	mov	r14, r18
    de98:	2d e0       	ldi	r18, 0x0D	; 13
    de9a:	f2 2e       	mov	r15, r18
    de9c:	00 e8       	ldi	r16, 0x80	; 128
    de9e:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    dea0:	f7 01       	movw	r30, r14
    dea2:	61 91       	ld	r22, Z+
    dea4:	7f 01       	movw	r14, r30
    dea6:	c8 01       	movw	r24, r16
    dea8:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    deac:	0f 5f       	subi	r16, 0xFF	; 255
    deae:	1f 4f       	sbci	r17, 0xFF	; 255
    deb0:	04 38       	cpi	r16, 0x84	; 132
    deb2:	11 05       	cpc	r17, r1
    deb4:	a9 f7       	brne	.-22     	; 0xdea0 <save_setup_network()+0x64>
    deb6:	93 ec       	ldi	r25, 0xC3	; 195
    deb8:	e9 2e       	mov	r14, r25
    deba:	9d e0       	ldi	r25, 0x0D	; 13
    debc:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    debe:	f7 01       	movw	r30, r14
    dec0:	61 91       	ld	r22, Z+
    dec2:	7f 01       	movw	r14, r30
    dec4:	ce 01       	movw	r24, r28
    dec6:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    deca:	21 96       	adiw	r28, 0x01	; 1
    decc:	c0 38       	cpi	r28, 0x80	; 128
    dece:	d1 05       	cpc	r29, r1
    ded0:	b1 f7       	brne	.-20     	; 0xdebe <save_setup_network()+0x82>
    ded2:	8b ec       	ldi	r24, 0xCB	; 203
    ded4:	e8 2e       	mov	r14, r24
    ded6:	8d e0       	ldi	r24, 0x0D	; 13
    ded8:	f8 2e       	mov	r15, r24
    deda:	c4 e6       	ldi	r28, 0x64	; 100
    dedc:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    dede:	f7 01       	movw	r30, r14
    dee0:	61 91       	ld	r22, Z+
    dee2:	7f 01       	movw	r14, r30
    dee4:	ce 01       	movw	r24, r28
    dee6:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    deea:	21 96       	adiw	r28, 0x01	; 1
    deec:	cd 36       	cpi	r28, 0x6D	; 109
    deee:	d1 05       	cpc	r29, r1
    def0:	b1 f7       	brne	.-20     	; 0xdede <save_setup_network()+0xa2>
    def2:	c5 ed       	ldi	r28, 0xD5	; 213
    def4:	dd e0       	ldi	r29, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    def6:	69 91       	ld	r22, Y+
    def8:	c8 01       	movw	r24, r16
    defa:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    defe:	0f 5f       	subi	r16, 0xFF	; 255
    df00:	1f 4f       	sbci	r17, 0xFF	; 255
    df02:	08 38       	cpi	r16, 0x88	; 136
    df04:	11 05       	cpc	r17, r1
    df06:	b9 f7       	brne	.-18     	; 0xdef6 <save_setup_network()+0xba>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    df08:	60 91 da 0d 	lds	r22, 0x0DDA	; 0x800dda <device+0x25>
    df0c:	88 e8       	ldi	r24, 0x88	; 136
    df0e:	90 e0       	ldi	r25, 0x00	; 0
    df10:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    df14:	60 91 d9 0d 	lds	r22, 0x0DD9	; 0x800dd9 <device+0x24>
    df18:	89 e8       	ldi	r24, 0x89	; 137
    df1a:	90 e0       	ldi	r25, 0x00	; 0
    df1c:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    df20:	0b ed       	ldi	r16, 0xDB	; 219
    df22:	1d e0       	ldi	r17, 0x0D	; 13
    df24:	ca e8       	ldi	r28, 0x8A	; 138
    df26:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    df28:	f8 01       	movw	r30, r16
    df2a:	61 91       	ld	r22, Z+
    df2c:	8f 01       	movw	r16, r30
    df2e:	ce 01       	movw	r24, r28
    df30:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    df34:	21 96       	adiw	r28, 0x01	; 1
    df36:	ce 39       	cpi	r28, 0x9E	; 158
    df38:	d1 05       	cpc	r29, r1
    df3a:	b1 f7       	brne	.-20     	; 0xdf28 <save_setup_network()+0xec>
    df3c:	0f ee       	ldi	r16, 0xEF	; 239
    df3e:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    df40:	f8 01       	movw	r30, r16
    df42:	61 91       	ld	r22, Z+
    df44:	8f 01       	movw	r16, r30
    df46:	ce 01       	movw	r24, r28
    df48:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    df4c:	21 96       	adiw	r28, 0x01	; 1
    df4e:	c2 3b       	cpi	r28, 0xB2	; 178
    df50:	d1 05       	cpc	r29, r1
    df52:	b1 f7       	brne	.-20     	; 0xdf40 <save_setup_network()+0x104>
    df54:	03 e0       	ldi	r16, 0x03	; 3
    df56:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    df58:	f8 01       	movw	r30, r16
    df5a:	61 91       	ld	r22, Z+
    df5c:	8f 01       	movw	r16, r30
    df5e:	ce 01       	movw	r24, r28
    df60:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    df64:	21 96       	adiw	r28, 0x01	; 1
    df66:	c6 3b       	cpi	r28, 0xB6	; 182
    df68:	d1 05       	cpc	r29, r1
    df6a:	b1 f7       	brne	.-20     	; 0xdf58 <save_setup_network()+0x11c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:54
}
    df6c:	df 91       	pop	r29
    df6e:	cf 91       	pop	r28
    df70:	1f 91       	pop	r17
    df72:	0f 91       	pop	r16
    df74:	ff 90       	pop	r15
    df76:	ef 90       	pop	r14
    df78:	08 95       	ret

0000df7a <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_passjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6079
  strcpy(device.mqtt_user, user);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_pass(uint16_t args1, uint16_t args2, uint8_t args3)
{
    df7a:	cf 93       	push	r28
    df7c:	df 93       	push	r29
    df7e:	cd b7       	in	r28, 0x3d	; 61
    df80:	de b7       	in	r29, 0x3e	; 62
    df82:	64 97       	sbiw	r28, 0x14	; 20
    df84:	0f b6       	in	r0, 0x3f	; 63
    df86:	f8 94       	cli
    df88:	de bf       	out	0x3e, r29	; 62
    df8a:	0f be       	out	0x3f, r0	; 63
    df8c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6081
  char key[20];
  display_element_get_string(key);
    df8e:	ce 01       	movw	r24, r28
    df90:	01 96       	adiw	r24, 0x01	; 1
    df92:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6082
  strcpy(device.mqtt_key, key);
    df96:	be 01       	movw	r22, r28
    df98:	6f 5f       	subi	r22, 0xFF	; 255
    df9a:	7f 4f       	sbci	r23, 0xFF	; 255
    df9c:	8f ee       	ldi	r24, 0xEF	; 239
    df9e:	9d e0       	ldi	r25, 0x0D	; 13
    dfa0:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6083
  save_setup_network();
    dfa4:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6084
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dfa8:	87 e0       	ldi	r24, 0x07	; 7
    dfaa:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6085
}
    dfae:	64 96       	adiw	r28, 0x14	; 20
    dfb0:	0f b6       	in	r0, 0x3f	; 63
    dfb2:	f8 94       	cli
    dfb4:	de bf       	out	0x3e, r29	; 62
    dfb6:	0f be       	out	0x3f, r0	; 63
    dfb8:	cd bf       	out	0x3d, r28	; 61
    dfba:	df 91       	pop	r29
    dfbc:	cf 91       	pop	r28
    dfbe:	08 95       	ret

0000dfc0 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_userjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6071
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_user(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dfc0:	cf 93       	push	r28
    dfc2:	df 93       	push	r29
    dfc4:	cd b7       	in	r28, 0x3d	; 61
    dfc6:	de b7       	in	r29, 0x3e	; 62
    dfc8:	64 97       	sbiw	r28, 0x14	; 20
    dfca:	0f b6       	in	r0, 0x3f	; 63
    dfcc:	f8 94       	cli
    dfce:	de bf       	out	0x3e, r29	; 62
    dfd0:	0f be       	out	0x3f, r0	; 63
    dfd2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6073
  char user[20];
  display_element_get_string(user);
    dfd4:	ce 01       	movw	r24, r28
    dfd6:	01 96       	adiw	r24, 0x01	; 1
    dfd8:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6074
  strcpy(device.mqtt_user, user);
    dfdc:	be 01       	movw	r22, r28
    dfde:	6f 5f       	subi	r22, 0xFF	; 255
    dfe0:	7f 4f       	sbci	r23, 0xFF	; 255
    dfe2:	8b ed       	ldi	r24, 0xDB	; 219
    dfe4:	9d e0       	ldi	r25, 0x0D	; 13
    dfe6:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6075
  save_setup_network();
    dfea:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6076
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dfee:	87 e0       	ldi	r24, 0x07	; 7
    dff0:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6077
}
    dff4:	64 96       	adiw	r28, 0x14	; 20
    dff6:	0f b6       	in	r0, 0x3f	; 63
    dff8:	f8 94       	cli
    dffa:	de bf       	out	0x3e, r29	; 62
    dffc:	0f be       	out	0x3f, r0	; 63
    dffe:	cd bf       	out	0x3d, r28	; 61
    e000:	df 91       	pop	r29
    e002:	cf 91       	pop	r28
    e004:	08 95       	ret

0000e006 <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_mqtt_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6063

/*

*/
void helper_dialog_mqtt_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e006:	cf 93       	push	r28
    e008:	df 93       	push	r29
    e00a:	cd b7       	in	r28, 0x3d	; 61
    e00c:	de b7       	in	r29, 0x3e	; 62
    e00e:	60 97       	sbiw	r28, 0x10	; 16
    e010:	0f b6       	in	r0, 0x3f	; 63
    e012:	f8 94       	cli
    e014:	de bf       	out	0x3e, r29	; 62
    e016:	0f be       	out	0x3f, r0	; 63
    e018:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6065
  char ip_text[16];
  display_element_get_string(ip_text);
    e01a:	ce 01       	movw	r24, r28
    e01c:	01 96       	adiw	r24, 0x01	; 1
    e01e:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6066
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
    e022:	24 e0       	ldi	r18, 0x04	; 4
    e024:	30 e0       	ldi	r19, 0x00	; 0
    e026:	45 ed       	ldi	r20, 0xD5	; 213
    e028:	5d e0       	ldi	r21, 0x0D	; 13
    e02a:	6e e2       	ldi	r22, 0x2E	; 46
    e02c:	ce 01       	movw	r24, r28
    e02e:	01 96       	adiw	r24, 0x01	; 1
    e030:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6067
  save_setup_network();
    e034:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6068
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e038:	87 e0       	ldi	r24, 0x07	; 7
    e03a:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6069
}
    e03e:	60 96       	adiw	r28, 0x10	; 16
    e040:	0f b6       	in	r0, 0x3f	; 63
    e042:	f8 94       	cli
    e044:	de bf       	out	0x3e, r29	; 62
    e046:	0f be       	out	0x3f, r0	; 63
    e048:	cd bf       	out	0x3d, r28	; 61
    e04a:	df 91       	pop	r29
    e04c:	cf 91       	pop	r28
    e04e:	08 95       	ret

0000e050 <helper_dialog_network_set_dns(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_network_set_dnsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5954
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.myDNS[0], device.myDNS[1], device.myDNS[2], device.myDNS[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_dns, &valid_ipv4_address_element_string);
}
void helper_dialog_network_set_dns(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e050:	cf 93       	push	r28
    e052:	df 93       	push	r29
    e054:	cd b7       	in	r28, 0x3d	; 61
    e056:	de b7       	in	r29, 0x3e	; 62
    e058:	60 97       	sbiw	r28, 0x10	; 16
    e05a:	0f b6       	in	r0, 0x3f	; 63
    e05c:	f8 94       	cli
    e05e:	de bf       	out	0x3e, r29	; 62
    e060:	0f be       	out	0x3f, r0	; 63
    e062:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5957
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e064:	ce 01       	movw	r24, r28
    e066:	01 96       	adiw	r24, 0x01	; 1
    e068:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5958
  parseBytes(ip_text, '.', device.myDNS, 4, 10);
    e06c:	24 e0       	ldi	r18, 0x04	; 4
    e06e:	30 e0       	ldi	r19, 0x00	; 0
    e070:	43 ec       	ldi	r20, 0xC3	; 195
    e072:	5d e0       	ldi	r21, 0x0D	; 13
    e074:	6e e2       	ldi	r22, 0x2E	; 46
    e076:	ce 01       	movw	r24, r28
    e078:	01 96       	adiw	r24, 0x01	; 1
    e07a:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5959
  save_setup_network();
    e07e:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5960
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e082:	87 e0       	ldi	r24, 0x07	; 7
    e084:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5961
}
    e088:	60 96       	adiw	r28, 0x10	; 16
    e08a:	0f b6       	in	r0, 0x3f	; 63
    e08c:	f8 94       	cli
    e08e:	de bf       	out	0x3e, r29	; 62
    e090:	0f be       	out	0x3f, r0	; 63
    e092:	cd bf       	out	0x3d, r28	; 61
    e094:	df 91       	pop	r29
    e096:	cf 91       	pop	r28
    e098:	08 95       	ret

0000e09a <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)>:
_Z30helper_dialog_network_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5935
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.nazev, 10, 0, &helper_dialog_network_set_name, &valid_true);
}
void helper_dialog_network_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e09a:	cf 93       	push	r28
    e09c:	df 93       	push	r29
    e09e:	00 d0       	rcall	.+0      	; 0xe0a0 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0x6>
    e0a0:	00 d0       	rcall	.+0      	; 0xe0a2 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0x8>
    e0a2:	00 d0       	rcall	.+0      	; 0xe0a4 <helper_dialog_network_set_name(unsigned int, unsigned int, unsigned char)+0xa>
    e0a4:	1f 92       	push	r1
    e0a6:	1f 92       	push	r1
    e0a8:	cd b7       	in	r28, 0x3d	; 61
    e0aa:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5937
  char ip_text[11];
  display_element_get_string(ip_text);
    e0ac:	ce 01       	movw	r24, r28
    e0ae:	01 96       	adiw	r24, 0x01	; 1
    e0b0:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5938
  strcpy(device.nazev, ip_text);
    e0b4:	be 01       	movw	r22, r28
    e0b6:	6f 5f       	subi	r22, 0xFF	; 255
    e0b8:	7f 4f       	sbci	r23, 0xFF	; 255
    e0ba:	8b ec       	ldi	r24, 0xCB	; 203
    e0bc:	9d e0       	ldi	r25, 0x0D	; 13
    e0be:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5939
  save_setup_network();
    e0c2:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5940
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e0c6:	87 e0       	ldi	r24, 0x07	; 7
    e0c8:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5941
}
    e0cc:	2b 96       	adiw	r28, 0x0b	; 11
    e0ce:	0f b6       	in	r0, 0x3f	; 63
    e0d0:	f8 94       	cli
    e0d2:	de bf       	out	0x3e, r29	; 62
    e0d4:	0f be       	out	0x3f, r0	; 63
    e0d6:	cd bf       	out	0x3d, r28	; 61
    e0d8:	df 91       	pop	r29
    e0da:	cf 91       	pop	r28
    e0dc:	08 95       	ret

0000e0de <helper_dialog_network_set_gw(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_network_set_gwjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.myGW[0], device.myGW[1], device.myGW[2], device.myGW[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_gw, &valid_ipv4_address_element_string);
}
void helper_dialog_network_set_gw(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e0de:	cf 93       	push	r28
    e0e0:	df 93       	push	r29
    e0e2:	cd b7       	in	r28, 0x3d	; 61
    e0e4:	de b7       	in	r29, 0x3e	; 62
    e0e6:	60 97       	sbiw	r28, 0x10	; 16
    e0e8:	0f b6       	in	r0, 0x3f	; 63
    e0ea:	f8 94       	cli
    e0ec:	de bf       	out	0x3e, r29	; 62
    e0ee:	0f be       	out	0x3f, r0	; 63
    e0f0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5919
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e0f2:	ce 01       	movw	r24, r28
    e0f4:	01 96       	adiw	r24, 0x01	; 1
    e0f6:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5920
  parseBytes(ip_text, '.', device.myGW, 4, 10);
    e0fa:	24 e0       	ldi	r18, 0x04	; 4
    e0fc:	30 e0       	ldi	r19, 0x00	; 0
    e0fe:	47 ec       	ldi	r20, 0xC7	; 199
    e100:	5d e0       	ldi	r21, 0x0D	; 13
    e102:	6e e2       	ldi	r22, 0x2E	; 46
    e104:	ce 01       	movw	r24, r28
    e106:	01 96       	adiw	r24, 0x01	; 1
    e108:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5921
  save_setup_network();
    e10c:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5922
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e110:	87 e0       	ldi	r24, 0x07	; 7
    e112:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5923
}
    e116:	60 96       	adiw	r28, 0x10	; 16
    e118:	0f b6       	in	r0, 0x3f	; 63
    e11a:	f8 94       	cli
    e11c:	de bf       	out	0x3e, r29	; 62
    e11e:	0f be       	out	0x3f, r0	; 63
    e120:	cd bf       	out	0x3d, r28	; 61
    e122:	df 91       	pop	r29
    e124:	cf 91       	pop	r28
    e126:	08 95       	ret

0000e128 <helper_dialog_network_set_mask(unsigned int, unsigned int, unsigned char)>:
_Z30helper_dialog_network_set_maskjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5896
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.myMASK[0], device.myMASK[1], device.myMASK[2], device.myMASK[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_mask, &valid_ipv4_address_element_string);
}
void helper_dialog_network_set_mask(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e128:	cf 93       	push	r28
    e12a:	df 93       	push	r29
    e12c:	cd b7       	in	r28, 0x3d	; 61
    e12e:	de b7       	in	r29, 0x3e	; 62
    e130:	60 97       	sbiw	r28, 0x10	; 16
    e132:	0f b6       	in	r0, 0x3f	; 63
    e134:	f8 94       	cli
    e136:	de bf       	out	0x3e, r29	; 62
    e138:	0f be       	out	0x3f, r0	; 63
    e13a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5899
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e13c:	ce 01       	movw	r24, r28
    e13e:	01 96       	adiw	r24, 0x01	; 1
    e140:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5900
  parseBytes(ip_text, '.', device.myMASK, 4, 10);
    e144:	24 e0       	ldi	r18, 0x04	; 4
    e146:	30 e0       	ldi	r19, 0x00	; 0
    e148:	4f eb       	ldi	r20, 0xBF	; 191
    e14a:	5d e0       	ldi	r21, 0x0D	; 13
    e14c:	6e e2       	ldi	r22, 0x2E	; 46
    e14e:	ce 01       	movw	r24, r28
    e150:	01 96       	adiw	r24, 0x01	; 1
    e152:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5901
  save_setup_network();
    e156:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5902
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e15a:	87 e0       	ldi	r24, 0x07	; 7
    e15c:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5903
}
    e160:	60 96       	adiw	r28, 0x10	; 16
    e162:	0f b6       	in	r0, 0x3f	; 63
    e164:	f8 94       	cli
    e166:	de bf       	out	0x3e, r29	; 62
    e168:	0f be       	out	0x3f, r0	; 63
    e16a:	cd bf       	out	0x3d, r28	; 61
    e16c:	df 91       	pop	r29
    e16e:	cf 91       	pop	r28
    e170:	08 95       	ret

0000e172 <helper_dialog_network_set_ip(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_network_set_ipjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5876
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.myIP[0], device.myIP[1], device.myIP[2], device.myIP[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_network_set_ip, &valid_ipv4_address_element_string);
}
void helper_dialog_network_set_ip(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e172:	cf 93       	push	r28
    e174:	df 93       	push	r29
    e176:	cd b7       	in	r28, 0x3d	; 61
    e178:	de b7       	in	r29, 0x3e	; 62
    e17a:	60 97       	sbiw	r28, 0x10	; 16
    e17c:	0f b6       	in	r0, 0x3f	; 63
    e17e:	f8 94       	cli
    e180:	de bf       	out	0x3e, r29	; 62
    e182:	0f be       	out	0x3f, r0	; 63
    e184:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5879
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e186:	ce 01       	movw	r24, r28
    e188:	01 96       	adiw	r24, 0x01	; 1
    e18a:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5880
  parseBytes(ip_text, '.', device.myIP, 4, 10);
    e18e:	24 e0       	ldi	r18, 0x04	; 4
    e190:	30 e0       	ldi	r19, 0x00	; 0
    e192:	4b eb       	ldi	r20, 0xBB	; 187
    e194:	5d e0       	ldi	r21, 0x0D	; 13
    e196:	6e e2       	ldi	r22, 0x2E	; 46
    e198:	ce 01       	movw	r24, r28
    e19a:	01 96       	adiw	r24, 0x01	; 1
    e19c:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5881
  save_setup_network();
    e1a0:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5882
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e1a4:	87 e0       	ldi	r24, 0x07	; 7
    e1a6:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5883
}
    e1aa:	60 96       	adiw	r28, 0x10	; 16
    e1ac:	0f b6       	in	r0, 0x3f	; 63
    e1ae:	f8 94       	cli
    e1b0:	de bf       	out	0x3e, r29	; 62
    e1b2:	0f be       	out	0x3f, r0	; 63
    e1b4:	cd bf       	out	0x3d, r28	; 61
    e1b6:	df 91       	pop	r29
    e1b8:	cf 91       	pop	r28
    e1ba:	08 95       	ret

0000e1bc <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_ntp_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5856
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}

void helper_dialog_ntp_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e1bc:	cf 93       	push	r28
    e1be:	df 93       	push	r29
    e1c0:	cd b7       	in	r28, 0x3d	; 61
    e1c2:	de b7       	in	r29, 0x3e	; 62
    e1c4:	60 97       	sbiw	r28, 0x10	; 16
    e1c6:	0f b6       	in	r0, 0x3f	; 63
    e1c8:	f8 94       	cli
    e1ca:	de bf       	out	0x3e, r29	; 62
    e1cc:	0f be       	out	0x3f, r0	; 63
    e1ce:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5859
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    e1d0:	ce 01       	movw	r24, r28
    e1d2:	01 96       	adiw	r24, 0x01	; 1
    e1d4:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5860
  parseBytes(ip_text, '.', device.ntp_server, 4, 10);
    e1d8:	24 e0       	ldi	r18, 0x04	; 4
    e1da:	30 e0       	ldi	r19, 0x00	; 0
    e1dc:	43 e0       	ldi	r20, 0x03	; 3
    e1de:	5e e0       	ldi	r21, 0x0E	; 14
    e1e0:	6e e2       	ldi	r22, 0x2E	; 46
    e1e2:	ce 01       	movw	r24, r28
    e1e4:	01 96       	adiw	r24, 0x01	; 1
    e1e6:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5861
  save_setup_network();
    e1ea:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    e1ee:	87 e0       	ldi	r24, 0x07	; 7
    e1f0:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5863
}
    e1f4:	60 96       	adiw	r28, 0x10	; 16
    e1f6:	0f b6       	in	r0, 0x3f	; 63
    e1f8:	f8 94       	cli
    e1fa:	de bf       	out	0x3e, r29	; 62
    e1fc:	0f be       	out	0x3f, r0	; 63
    e1fe:	cd bf       	out	0x3d, r28	; 61
    e200:	df 91       	pop	r29
    e202:	cf 91       	pop	r28
    e204:	08 95       	ret

0000e206 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>:
_Z19remote_tds_set_namehPc.part.24():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    e206:	df 92       	push	r13
    e208:	ef 92       	push	r14
    e20a:	ff 92       	push	r15
    e20c:	0f 93       	push	r16
    e20e:	1f 93       	push	r17
    e210:	cf 93       	push	r28
    e212:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1805
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    e214:	94 e1       	ldi	r25, 0x14	; 20
    e216:	89 9f       	mul	r24, r25
    e218:	e0 01       	movw	r28, r0
    e21a:	11 24       	eor	r1, r1
    e21c:	7b 01       	movw	r14, r22
    e21e:	8e 01       	movw	r16, r28
    e220:	06 55       	subi	r16, 0x56	; 86
    e222:	1a 4f       	sbci	r17, 0xFA	; 250
    e224:	c4 54       	subi	r28, 0x44	; 68
    e226:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1804
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    e228:	f7 01       	movw	r30, r14
    e22a:	d1 90       	ld	r13, Z+
    e22c:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1805
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    e22e:	6d 2d       	mov	r22, r13
    e230:	c8 01       	movw	r24, r16
    e232:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
      if (t == 0) break;
    e236:	dd 20       	and	r13, r13
    e238:	29 f0       	breq	.+10     	; 0xe244 <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x3e>
    e23a:	0f 5f       	subi	r16, 0xFF	; 255
    e23c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    e23e:	0c 17       	cp	r16, r28
    e240:	1d 07       	cpc	r17, r29
    e242:	91 f7       	brne	.-28     	; 0xe228 <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1808
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    e244:	df 91       	pop	r29
    e246:	cf 91       	pop	r28
    e248:	1f 91       	pop	r17
    e24a:	0f 91       	pop	r16
    e24c:	ff 90       	pop	r15
    e24e:	ef 90       	pop	r14
    e250:	df 90       	pop	r13
    e252:	08 95       	ret

0000e254 <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>:
_Z30button_nastaveni_default_valuejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6097
   a pak restart
*/
void button_nastaveni_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  EEPROM.write(set_default_values, 255);
    e254:	6f ef       	ldi	r22, 0xFF	; 255
    e256:	8a e5       	ldi	r24, 0x5A	; 90
    e258:	90 e0       	ldi	r25, 0x00	; 0
    e25a:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6098
  resetFunc();
    e25e:	f0 e0       	ldi	r31, 0x00	; 0
    e260:	e0 e0       	ldi	r30, 0x00	; 0
    e262:	19 94       	eijmp

0000e264 <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z27helper_set_menu_time_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1328
  return menu_dialog_variable[idx].variable_now ;
}

int display_function_get_variable_int(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    e264:	60 91 5d 09 	lds	r22, 0x095D	; 0x80095d <menu_dialog_variable>
    e268:	70 91 5e 09 	lds	r23, 0x095E	; 0x80095e <menu_dialog_variable+0x1>
    e26c:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <menu_dialog_variable+0x2>
    e270:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <menu_dialog_variable+0x3>
    e274:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
    e278:	81 e0       	ldi	r24, 0x01	; 1
    e27a:	90 e0       	ldi	r25, 0x00	; 0
    e27c:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000e280 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z66button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5704
}

void button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t click1 = 0;
  display_auto_shutdown_now = 0;
    e280:	10 92 32 0c 	sts	0x0C32, r1	; 0x800c32 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5705
  if (args3 == 0)
    e284:	41 11       	cpse	r20, r1
    e286:	13 c0       	rjmp	.+38     	; 0xe2ae <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5707
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e288:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e28c:	8f 7b       	andi	r24, 0xBF	; 191
    e28e:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5708
    display_auto_shutdown = 0;
    e292:	10 92 33 0c 	sts	0x0C33, r1	; 0x800c33 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5743
    display_auto_shutdown = 250;
    click1 = 1;
  }
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    e296:	60 91 33 0c 	lds	r22, 0x0C33	; 0x800c33 <display_auto_shutdown>
    e29a:	80 e6       	ldi	r24, 0x60	; 96
    e29c:	90 e0       	ldi	r25, 0x00	; 0
    e29e:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5744
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
    e2a2:	60 91 41 0c 	lds	r22, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e2a6:	8f e5       	ldi	r24, 0x5F	; 95
    e2a8:	90 e0       	ldi	r25, 0x00	; 0
    e2aa:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 0;
    click1 = 1;
  }
  if (args3 == 1)
    e2ae:	41 30       	cpi	r20, 0x01	; 1
    e2b0:	49 f4       	brne	.+18     	; 0xe2c4 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5713
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e2b2:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e2b6:	80 64       	ori	r24, 0x40	; 64
    e2b8:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5714
    display_auto_shutdown = 30;
    e2bc:	8e e1       	ldi	r24, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5738
    click1 = 1;
  }
  if (args3 == 5)
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 250;
    e2be:	80 93 33 0c 	sts	0x0C33, r24	; 0x800c33 <display_auto_shutdown>
    e2c2:	e9 cf       	rjmp	.-46     	; 0xe296 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5717
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 30;
    click1 = 1;
  }
  if (args3 == 2)
    e2c4:	42 30       	cpi	r20, 0x02	; 2
    e2c6:	39 f4       	brne	.+14     	; 0xe2d6 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5719
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e2c8:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e2cc:	80 64       	ori	r24, 0x40	; 64
    e2ce:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5720
    display_auto_shutdown = 60;
    e2d2:	8c e3       	ldi	r24, 0x3C	; 60
    e2d4:	f4 cf       	rjmp	.-24     	; 0xe2be <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5723
    click1 = 1;
  }
  if (args3 == 3)
    e2d6:	43 30       	cpi	r20, 0x03	; 3
    e2d8:	39 f4       	brne	.+14     	; 0xe2e8 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5725
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e2da:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e2de:	80 64       	ori	r24, 0x40	; 64
    e2e0:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5726
    display_auto_shutdown = 120;
    e2e4:	88 e7       	ldi	r24, 0x78	; 120
    e2e6:	eb cf       	rjmp	.-42     	; 0xe2be <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5729
    click1 = 1;
  }
  if (args3 == 4)
    e2e8:	44 30       	cpi	r20, 0x04	; 4
    e2ea:	39 f4       	brne	.+14     	; 0xe2fa <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5731
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e2ec:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e2f0:	80 64       	ori	r24, 0x40	; 64
    e2f2:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5732
    display_auto_shutdown = 180;
    e2f6:	84 eb       	ldi	r24, 0xB4	; 180
    e2f8:	e2 cf       	rjmp	.-60     	; 0xe2be <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5735
    click1 = 1;
  }
  if (args3 == 5)
    e2fa:	45 30       	cpi	r20, 0x05	; 5
    e2fc:	39 f4       	brne	.+14     	; 0xe30c <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5737
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    e2fe:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e302:	80 64       	ori	r24, 0x40	; 64
    e304:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5738
    display_auto_shutdown = 250;
    e308:	8a ef       	ldi	r24, 0xFA	; 250
    e30a:	d9 cf       	rjmp	.-78     	; 0xe2be <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5746
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
  }
}
    e30c:	08 95       	ret

0000e30e <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5638
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}

void helper_display_set_brightness(uint16_t args1, float args2, uint8_t args3)
{
  brigthness_display_values = args3;
    e30e:	20 93 23 0b 	sts	0x0B23, r18	; 0x800b23 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5639
  my_touch.TP_SetBacklight(brigthness_display_values * 2);
    e312:	82 2f       	mov	r24, r18
    e314:	88 0f       	add	r24, r24
    e316:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5640
  EEPROM.write(my_brightness_values, brigthness_display_values);
    e31a:	60 91 23 0b 	lds	r22, 0x0B23	; 0x800b23 <brigthness_display_values>
    e31e:	8e e5       	ldi	r24, 0x5E	; 94
    e320:	90 e0       	ldi	r25, 0x00	; 0
    e322:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000e326 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5616
}
////////
/// Obsluzna funkce nastaveni rizeni podsvetleni
void switch_brightness_automode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    e326:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e32a:	87 ff       	sbrs	r24, 7
    e32c:	0e c0       	rjmp	.+28     	; 0xe34a <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5618
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    e32e:	8f 77       	andi	r24, 0x7F	; 127
    e330:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5619
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    e334:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <brigthness_display_values>
    e338:	88 0f       	add	r24, r24
    e33a:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
  }
switch_brightness_automode_onclick_end:
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
    e33e:	60 91 41 0c 	lds	r22, 0x0C41	; 0x800c41 <brigthness_display_mode>
    e342:	8f e5       	ldi	r24, 0x5F	; 95
    e344:	90 e0       	ldi	r25, 0x00	; 0
    e346:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5624
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    goto switch_brightness_automode_onclick_end;
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    e34a:	80 68       	ori	r24, 0x80	; 128
    e34c:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
    e350:	f6 cf       	rjmp	.-20     	; 0xe33e <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x18>

0000e352 <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5075
    ret = 2;
  return ret;
}
////
void term_ring_do_activate(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e352:	cf 93       	push	r28
    e354:	c8 2f       	mov	r28, r24
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    e356:	21 e2       	ldi	r18, 0x21	; 33
    e358:	82 9f       	mul	r24, r18
    e35a:	c0 01       	movw	r24, r0
    e35c:	11 24       	eor	r1, r1
    e35e:	61 e0       	ldi	r22, 0x01	; 1
    e360:	83 5a       	subi	r24, 0xA3	; 163
    e362:	9e 4f       	sbci	r25, 0xFE	; 254
    e364:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5077
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
    e368:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
    e36c:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5078
  default_ring = args1;
    e370:	c0 93 22 0b 	sts	0x0B22, r28	; 0x800b22 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    e374:	6c 2f       	mov	r22, r28
    e376:	8c e5       	ldi	r24, 0x5C	; 92
    e378:	90 e0       	ldi	r25, 0x00	; 0
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5080
{
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
  default_ring = args1;
  set_default_ring(default_ring);
}
    e37a:	cf 91       	pop	r28
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    e37c:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000e380 <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  default_show_temp = args3;
    e380:	40 93 54 09 	sts	0x0954, r20	; 0x800954 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    e384:	64 2f       	mov	r22, r20
    e386:	8d e5       	ldi	r24, 0x5D	; 93
    e388:	90 e0       	ldi	r25, 0x00	; 0
    e38a:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000e38e <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    e38e:	cf 93       	push	r28
    e390:	df 93       	push	r29
    e392:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    e394:	8a 30       	cpi	r24, 0x0A	; 10
    e396:	78 f4       	brcc	.+30     	; 0xe3b6 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    e398:	ba 01       	movw	r22, r20
    e39a:	c8 2f       	mov	r28, r24
    e39c:	0e 94 03 71 	call	0xe206	; 0xe206 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    e3a0:	24 e1       	ldi	r18, 0x14	; 20
    e3a2:	c2 9f       	mul	r28, r18
    e3a4:	c0 01       	movw	r24, r0
    e3a6:	11 24       	eor	r1, r1
    e3a8:	6d 2f       	mov	r22, r29
    e3aa:	83 54       	subi	r24, 0x43	; 67
    e3ac:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    e3ae:	df 91       	pop	r29
    e3b0:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    e3b2:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    e3b6:	df 91       	pop	r29
    e3b8:	cf 91       	pop	r28
    e3ba:	08 95       	ret

0000e3bc <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832



///
void remote_tds_clear(uint8_t idx)
{
    e3bc:	cf 93       	push	r28
    e3be:	df 93       	push	r29
    e3c0:	cd b7       	in	r28, 0x3d	; 61
    e3c2:	de b7       	in	r29, 0x3e	; 62
    e3c4:	62 97       	sbiw	r28, 0x12	; 18
    e3c6:	0f b6       	in	r0, 0x3f	; 63
    e3c8:	f8 94       	cli
    e3ca:	de bf       	out	0x3e, r29	; 62
    e3cc:	0f be       	out	0x3f, r0	; 63
    e3ce:	cd bf       	out	0x3d, r28	; 61
    e3d0:	e1 e0       	ldi	r30, 0x01	; 1
    e3d2:	f0 e0       	ldi	r31, 0x00	; 0
    e3d4:	ec 0f       	add	r30, r28
    e3d6:	fd 1f       	adc	r31, r29
    e3d8:	e8 0f       	add	r30, r24
    e3da:	f1 1d       	adc	r31, r1
    e3dc:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1836
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    e3de:	ae 01       	movw	r20, r28
    e3e0:	4f 5f       	subi	r20, 0xFF	; 255
    e3e2:	5f 4f       	sbci	r21, 0xFF	; 255
    e3e4:	60 e0       	ldi	r22, 0x00	; 0
    e3e6:	0e 94 c7 71 	call	0xe38e	; 0xe38e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1837
}
    e3ea:	62 96       	adiw	r28, 0x12	; 18
    e3ec:	0f b6       	in	r0, 0x3f	; 63
    e3ee:	f8 94       	cli
    e3f0:	de bf       	out	0x3e, r29	; 62
    e3f2:	0f be       	out	0x3f, r0	; 63
    e3f4:	cd bf       	out	0x3d, r28	; 61
    e3f6:	df 91       	pop	r29
    e3f8:	cf 91       	pop	r28
    e3fa:	08 95       	ret

0000e3fc <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4635
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e3fc:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4636
  remote_tds_clear(args2);
    e3fe:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637
  MenuHistoryPrevMenu(0, 0, 0);
    e402:	0c 94 61 bb 	jmp	0x176c2	; 0x176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000e406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.279():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    e406:	0c 94 4d fb 	jmp	0x1f69a	; 0x1f69a <eeprom_read_byte>

0000e40a <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:59
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
    e40a:	cf 92       	push	r12
    e40c:	df 92       	push	r13
    e40e:	ef 92       	push	r14
    e410:	ff 92       	push	r15
    e412:	0f 93       	push	r16
    e414:	1f 93       	push	r17
    e416:	cf 93       	push	r28
    e418:	df 93       	push	r29
    e41a:	00 d0       	rcall	.+0      	; 0xe41c <EEPROMreadFloat(unsigned int)+0x12>
    e41c:	1f 92       	push	r1
    e41e:	cd b7       	in	r28, 0x3d	; 61
    e420:	de b7       	in	r29, 0x3e	; 62
    e422:	7e 01       	movw	r14, r28
    e424:	25 e0       	ldi	r18, 0x05	; 5
    e426:	e2 0e       	add	r14, r18
    e428:	f1 1c       	adc	r15, r1
    e42a:	8e 01       	movw	r16, r28
    e42c:	0f 5f       	subi	r16, 0xFF	; 255
    e42e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
    e430:	6c 01       	movw	r12, r24
    e432:	c0 1a       	sub	r12, r16
    e434:	d1 0a       	sbc	r13, r17
    e436:	c6 01       	movw	r24, r12
    e438:	80 0f       	add	r24, r16
    e43a:	91 1f       	adc	r25, r17
    e43c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e440:	f8 01       	movw	r30, r16
    e442:	81 93       	st	Z+, r24
    e444:	8f 01       	movw	r16, r30
    e446:	ee 15       	cp	r30, r14
    e448:	ff 05       	cpc	r31, r15
    e44a:	a9 f7       	brne	.-22     	; 0xe436 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
  return data.f;
    e44c:	69 81       	ldd	r22, Y+1	; 0x01
    e44e:	7a 81       	ldd	r23, Y+2	; 0x02
    e450:	8b 81       	ldd	r24, Y+3	; 0x03
    e452:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:66
}
    e454:	0f 90       	pop	r0
    e456:	0f 90       	pop	r0
    e458:	0f 90       	pop	r0
    e45a:	0f 90       	pop	r0
    e45c:	df 91       	pop	r29
    e45e:	cf 91       	pop	r28
    e460:	1f 91       	pop	r17
    e462:	0f 91       	pop	r16
    e464:	ff 90       	pop	r15
    e466:	ef 90       	pop	r14
    e468:	df 90       	pop	r13
    e46a:	cf 90       	pop	r12
    e46c:	08 95       	ret

0000e46e <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
    e46e:	1f 93       	push	r17
    e470:	cf 93       	push	r28
    e472:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
    e474:	9d e4       	ldi	r25, 0x4D	; 77
    e476:	89 9f       	mul	r24, r25
    e478:	e0 01       	movw	r28, r0
    e47a:	11 24       	eor	r1, r1
    e47c:	cf 50       	subi	r28, 0x0F	; 15
    e47e:	de 4f       	sbci	r29, 0xFE	; 254
    e480:	86 e0       	ldi	r24, 0x06	; 6
    e482:	68 9f       	mul	r22, r24
    e484:	c0 0d       	add	r28, r0
    e486:	d1 1d       	adc	r29, r1
    e488:	11 24       	eor	r1, r1
    e48a:	ce 01       	movw	r24, r28
    e48c:	05 96       	adiw	r24, 0x05	; 5
    e48e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e492:	18 2f       	mov	r17, r24
    e494:	ce 01       	movw	r24, r28
    e496:	04 96       	adiw	r24, 0x04	; 4
    e498:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e49c:	21 2f       	mov	r18, r17
    e49e:	30 e0       	ldi	r19, 0x00	; 0
    e4a0:	32 2f       	mov	r19, r18
    e4a2:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
    e4a4:	82 0f       	add	r24, r18
    e4a6:	93 2f       	mov	r25, r19
    e4a8:	91 1d       	adc	r25, r1
    e4aa:	df 91       	pop	r29
    e4ac:	cf 91       	pop	r28
    e4ae:	1f 91       	pop	r17
    e4b0:	08 95       	ret

0000e4b2 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
    e4b2:	7f 92       	push	r7
    e4b4:	8f 92       	push	r8
    e4b6:	9f 92       	push	r9
    e4b8:	af 92       	push	r10
    e4ba:	bf 92       	push	r11
    e4bc:	cf 92       	push	r12
    e4be:	df 92       	push	r13
    e4c0:	ef 92       	push	r14
    e4c2:	ff 92       	push	r15
    e4c4:	0f 93       	push	r16
    e4c6:	1f 93       	push	r17
    e4c8:	cf 93       	push	r28
    e4ca:	df 93       	push	r29
    e4cc:	5a 01       	movw	r10, r20
    e4ce:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    e4d0:	9d e4       	ldi	r25, 0x4D	; 77
    e4d2:	89 9f       	mul	r24, r25
    e4d4:	40 01       	movw	r8, r0
    e4d6:	11 24       	eor	r1, r1
    e4d8:	ef e0       	ldi	r30, 0x0F	; 15
    e4da:	8e 1a       	sub	r8, r30
    e4dc:	ee ef       	ldi	r30, 0xFE	; 254
    e4de:	9e 0a       	sbc	r9, r30
    e4e0:	f6 e0       	ldi	r31, 0x06	; 6
    e4e2:	6f 9f       	mul	r22, r31
    e4e4:	80 0c       	add	r8, r0
    e4e6:	91 1c       	adc	r9, r1
    e4e8:	11 24       	eor	r1, r1
    e4ea:	c4 01       	movw	r24, r8
    e4ec:	02 96       	adiw	r24, 0x02	; 2
    e4ee:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e4f2:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    e4f4:	c4 01       	movw	r24, r8
    e4f6:	03 96       	adiw	r24, 0x03	; 3
    e4f8:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    e4fc:	97 2d       	mov	r25, r7
    e4fe:	96 95       	lsr	r25
    e500:	96 95       	lsr	r25
    e502:	96 95       	lsr	r25
    e504:	f5 01       	movw	r30, r10
    e506:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    e508:	27 2d       	mov	r18, r7
    e50a:	30 e0       	ldi	r19, 0x00	; 0
    e50c:	35 95       	asr	r19
    e50e:	27 95       	ror	r18
    e510:	23 70       	andi	r18, 0x03	; 3
    e512:	9f e0       	ldi	r25, 0x0F	; 15
    e514:	29 9f       	mul	r18, r25
    e516:	20 2d       	mov	r18, r0
    e518:	11 24       	eor	r1, r1
    e51a:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    e51c:	28 2f       	mov	r18, r24
    e51e:	26 95       	lsr	r18
    e520:	26 95       	lsr	r18
    e522:	26 95       	lsr	r18
    e524:	f8 01       	movw	r30, r16
    e526:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    e528:	83 70       	andi	r24, 0x03	; 3
    e52a:	89 9f       	mul	r24, r25
    e52c:	80 2d       	mov	r24, r0
    e52e:	11 24       	eor	r1, r1
    e530:	f7 01       	movw	r30, r14
    e532:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    e534:	87 2d       	mov	r24, r7
    e536:	81 70       	andi	r24, 0x01	; 1
    e538:	f6 01       	movw	r30, r12
    e53a:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
    e53c:	df 91       	pop	r29
    e53e:	cf 91       	pop	r28
    e540:	1f 91       	pop	r17
    e542:	0f 91       	pop	r16
    e544:	ff 90       	pop	r15
    e546:	ef 90       	pop	r14
    e548:	df 90       	pop	r13
    e54a:	cf 90       	pop	r12
    e54c:	bf 90       	pop	r11
    e54e:	af 90       	pop	r10
    e550:	9f 90       	pop	r9
    e552:	8f 90       	pop	r8
    e554:	7f 90       	pop	r7
    e556:	08 95       	ret

0000e558 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    e558:	21 e2       	ldi	r18, 0x21	; 33
    e55a:	82 9f       	mul	r24, r18
    e55c:	c0 01       	movw	r24, r0
    e55e:	11 24       	eor	r1, r1
    e560:	82 5a       	subi	r24, 0xA2	; 162
    e562:	9e 4f       	sbci	r25, 0xFE	; 254
    e564:	0c 94 03 72 	jmp	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000e568 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    e568:	0f 93       	push	r16
    e56a:	1f 93       	push	r17
    e56c:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    e56e:	91 e2       	ldi	r25, 0x21	; 33
    e570:	89 9f       	mul	r24, r25
    e572:	80 01       	movw	r16, r0
    e574:	11 24       	eor	r1, r1
    e576:	c8 01       	movw	r24, r16
    e578:	8a 5a       	subi	r24, 0xAA	; 170
    e57a:	9e 4f       	sbci	r25, 0xFE	; 254
    e57c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e580:	c8 2f       	mov	r28, r24
    e582:	c8 01       	movw	r24, r16
    e584:	89 5a       	subi	r24, 0xA9	; 169
    e586:	9e 4f       	sbci	r25, 0xFE	; 254
    e588:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e58c:	2c 2f       	mov	r18, r28
    e58e:	30 e0       	ldi	r19, 0x00	; 0
    e590:	32 2f       	mov	r19, r18
    e592:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
    e594:	82 0f       	add	r24, r18
    e596:	93 2f       	mov	r25, r19
    e598:	91 1d       	adc	r25, r1
    e59a:	cf 91       	pop	r28
    e59c:	1f 91       	pop	r17
    e59e:	0f 91       	pop	r16
    e5a0:	08 95       	ret

0000e5a2 <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1293
  preload_pid_menu(0, args2, 0);
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e5a2:	1f 93       	push	r17
    e5a4:	cf 93       	push	r28
    e5a6:	df 93       	push	r29
    e5a8:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1294
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    e5aa:	86 2f       	mov	r24, r22
    e5ac:	0e 94 b4 72 	call	0xe568	; 0xe568 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e5b0:	cd e5       	ldi	r28, 0x5D	; 93
    e5b2:	d9 e0       	ldi	r29, 0x09	; 9
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1294
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    e5b4:	bc 01       	movw	r22, r24
    e5b6:	99 0f       	add	r25, r25
    e5b8:	88 0b       	sbc	r24, r24
    e5ba:	99 0b       	sbc	r25, r25
    e5bc:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    e5c0:	20 e0       	ldi	r18, 0x00	; 0
    e5c2:	30 e0       	ldi	r19, 0x00	; 0
    e5c4:	40 e2       	ldi	r20, 0x20	; 32
    e5c6:	51 e4       	ldi	r21, 0x41	; 65
    e5c8:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e5cc:	68 83       	st	Y, r22
    e5ce:	79 83       	std	Y+1, r23	; 0x01
    e5d0:	8a 83       	std	Y+2, r24	; 0x02
    e5d2:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].variable_min = min;
    e5d4:	80 e0       	ldi	r24, 0x00	; 0
    e5d6:	90 e0       	ldi	r25, 0x00	; 0
    e5d8:	a0 e8       	ldi	r26, 0x80	; 128
    e5da:	b1 e4       	ldi	r27, 0x41	; 65
    e5dc:	88 87       	std	Y+8, r24	; 0x08
    e5de:	99 87       	std	Y+9, r25	; 0x09
    e5e0:	aa 87       	std	Y+10, r26	; 0x0a
    e5e2:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    e5e4:	80 e0       	ldi	r24, 0x00	; 0
    e5e6:	90 e0       	ldi	r25, 0x00	; 0
    e5e8:	a0 e0       	ldi	r26, 0x00	; 0
    e5ea:	b2 e4       	ldi	r27, 0x42	; 66
    e5ec:	8c 83       	std	Y+4, r24	; 0x04
    e5ee:	9d 83       	std	Y+5, r25	; 0x05
    e5f0:	ae 83       	std	Y+6, r26	; 0x06
    e5f2:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    e5f4:	80 e0       	ldi	r24, 0x00	; 0
    e5f6:	90 e0       	ldi	r25, 0x00	; 0
    e5f8:	a0 e0       	ldi	r26, 0x00	; 0
    e5fa:	bf e3       	ldi	r27, 0x3F	; 63
    e5fc:	8e 87       	std	Y+14, r24	; 0x0e
    e5fe:	9f 87       	std	Y+15, r25	; 0x0f
    e600:	a8 8b       	std	Y+16, r26	; 0x10
    e602:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    e604:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    e606:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    e608:	81 e0       	ldi	r24, 0x01	; 1
    e60a:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    e60c:	8b e9       	ldi	r24, 0x9B	; 155
    e60e:	9d e6       	ldi	r25, 0x6D	; 109
    e610:	9c 8b       	std	Y+20, r25	; 0x14
    e612:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1295


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    e614:	df 91       	pop	r29
    e616:	cf 91       	pop	r28
    e618:	1f 91       	pop	r17
    e61a:	08 95       	ret

0000e61c <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    e61c:	21 e2       	ldi	r18, 0x21	; 33
    e61e:	82 9f       	mul	r24, r18
    e620:	c0 01       	movw	r24, r0
    e622:	11 24       	eor	r1, r1
    e624:	83 5a       	subi	r24, 0xA3	; 163
    e626:	9e 4f       	sbci	r25, 0xFE	; 254
    e628:	0c 94 03 72 	jmp	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000e62c <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>:
_Z44display_enable_show_thermostat_deactive_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5548
    ret = 1;
  return ret;
}

uint8_t display_enable_show_thermostat_deactive_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e62c:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5550
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e62e:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e632:	91 e0       	ldi	r25, 0x01	; 1
    e634:	8f 3f       	cpi	r24, 0xFF	; 255
    e636:	09 f4       	brne	.+2      	; 0xe63a <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)+0xe>
    e638:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5553
    ret = 1;
  return ret;
}
    e63a:	89 2f       	mov	r24, r25
    e63c:	08 95       	ret

0000e63e <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_thermostat_active_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5540
  }
*/


uint8_t display_enable_show_thermostat_active_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e63e:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) == RING_FREE)
    e640:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e644:	91 e0       	ldi	r25, 0x01	; 1
    e646:	8f 3f       	cpi	r24, 0xFF	; 255
    e648:	09 f0       	breq	.+2      	; 0xe64c <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)+0xe>
    e64a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5545
    ret = 1;
  return ret;
}
    e64c:	89 2f       	mov	r24, r25
    e64e:	08 95       	ret

0000e650 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5516
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e650:	cf 93       	push	r28
    e652:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5518
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e654:	86 2f       	mov	r24, r22
    e656:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e65a:	8f 3f       	cpi	r24, 0xFF	; 255
    e65c:	59 f0       	breq	.+22     	; 0xe674 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5520
  {
    mode = thermostat_ring_get_mode(args2);
    e65e:	8c 2f       	mov	r24, r28
    e660:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
    e664:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5522
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
      return 1;
    e666:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5521
{
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    mode = thermostat_ring_get_mode(args2);
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    e668:	93 30       	cpi	r25, 0x03	; 3
    e66a:	29 f0       	breq	.+10     	; 0xe676 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    e66c:	95 30       	cpi	r25, 0x05	; 5
    e66e:	19 f0       	breq	.+6      	; 0xe676 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    e670:	98 30       	cpi	r25, 0x08	; 8
    e672:	09 f0       	breq	.+2      	; 0xe676 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5524
      return 1;
  }
  return 0;
    e674:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5525
}
    e676:	cf 91       	pop	r28
    e678:	08 95       	ret

0000e67a <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5498
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/

void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e67a:	0f 93       	push	r16
    e67c:	1f 93       	push	r17
    e67e:	cf 93       	push	r28
    e680:	8c 01       	movw	r16, r24
    e682:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5499
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e684:	86 2f       	mov	r24, r22
    e686:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e68a:	8f 3f       	cpi	r24, 0xFF	; 255
    e68c:	71 f0       	breq	.+28     	; 0xe6aa <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    e68e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5501

void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    e690:	03 30       	cpi	r16, 0x03	; 3
    e692:	11 05       	cpc	r17, r1
    e694:	21 f0       	breq	.+8      	; 0xe69e <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    e696:	05 30       	cpi	r16, 0x05	; 5
    e698:	11 05       	cpc	r17, r1
    e69a:	21 f4       	brne	.+8      	; 0xe6a4 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5504
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 1);
    e69c:	61 e0       	ldi	r22, 0x01	; 1
    e69e:	8c 2f       	mov	r24, r28
    e6a0:	0e 94 54 dd 	call	0x1baa8	; 0x1baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5505
    change_term_mode = 2;
    e6a4:	82 e0       	ldi	r24, 0x02	; 2
    e6a6:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5507
  }
}
    e6aa:	cf 91       	pop	r28
    e6ac:	1f 91       	pop	r17
    e6ae:	0f 91       	pop	r16
    e6b0:	08 95       	ret

0000e6b2 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z38button_select_term_mode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5381
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e6b2:	cf 93       	push	r28
    e6b4:	df 93       	push	r29
    e6b6:	d6 2f       	mov	r29, r22
    e6b8:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5384
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e6ba:	86 2f       	mov	r24, r22
    e6bc:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e6c0:	8f 3f       	cpi	r24, 0xFF	; 255
    e6c2:	49 f1       	breq	.+82     	; 0xe716 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5387
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    e6c4:	8d 2f       	mov	r24, r29
    e6c6:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
    e6ca:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5388
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    e6cc:	c1 11       	cpse	r28, r1
    e6ce:	05 c0       	rjmp	.+10     	; 0xe6da <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x28>
    e6d0:	81 e0       	ldi	r24, 0x01	; 1
    e6d2:	99 23       	and	r25, r25
    e6d4:	39 f0       	breq	.+14     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5386
{
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    ret = 0;
    e6d6:	80 e0       	ldi	r24, 0x00	; 0
    e6d8:	05 c0       	rjmp	.+10     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5389
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    e6da:	c1 30       	cpi	r28, 0x01	; 1
    e6dc:	31 f4       	brne	.+12     	; 0xe6ea <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x38>
    e6de:	81 e0       	ldi	r24, 0x01	; 1
    e6e0:	91 30       	cpi	r25, 0x01	; 1
    e6e2:	c9 f7       	brne	.-14     	; 0xe6d6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5395
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  }
  return ret;
}
    e6e4:	df 91       	pop	r29
    e6e6:	cf 91       	pop	r28
    e6e8:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5390
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    e6ea:	c2 30       	cpi	r28, 0x02	; 2
    e6ec:	21 f4       	brne	.+8      	; 0xe6f6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x44>
    e6ee:	81 e0       	ldi	r24, 0x01	; 1
    e6f0:	97 30       	cpi	r25, 0x07	; 7
    e6f2:	89 f7       	brne	.-30     	; 0xe6d6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e6f4:	f7 cf       	rjmp	.-18     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5391
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    e6f6:	c3 30       	cpi	r28, 0x03	; 3
    e6f8:	21 f4       	brne	.+8      	; 0xe702 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x50>
    e6fa:	81 e0       	ldi	r24, 0x01	; 1
    e6fc:	92 30       	cpi	r25, 0x02	; 2
    e6fe:	59 f7       	brne	.-42     	; 0xe6d6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e700:	f1 cf       	rjmp	.-30     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5392
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    e702:	c4 30       	cpi	r28, 0x04	; 4
    e704:	41 f7       	brne	.-48     	; 0xe6d6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e706:	81 e0       	ldi	r24, 0x01	; 1
    e708:	98 30       	cpi	r25, 0x08	; 8
    e70a:	61 f3       	breq	.-40     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    e70c:	93 30       	cpi	r25, 0x03	; 3
    e70e:	51 f3       	breq	.-44     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    e710:	95 30       	cpi	r25, 0x05	; 5
    e712:	09 f7       	brne	.-62     	; 0xe6d6 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e714:	e7 cf       	rjmp	.-50     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5383
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 2;
    e716:	82 e0       	ldi	r24, 0x02	; 2
    e718:	e5 cf       	rjmp	.-54     	; 0xe6e4 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>

0000e71a <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5302
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/

void button_click_default_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e71a:	cf 93       	push	r28
    e71c:	df 93       	push	r29
    e71e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5303
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    e720:	c0 91 22 0b 	lds	r28, 0x0B22	; 0x800b22 <default_ring>
    e724:	8c 2f       	mov	r24, r28
    e726:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e72a:	8f 3f       	cpi	r24, 0xFF	; 255
    e72c:	61 f0       	breq	.+24     	; 0xe746 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5305
  {
    thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    e72e:	8c 2f       	mov	r24, r28
    e730:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
    e734:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5306
    thermostat_ring_set_mode(default_ring, args1);
    e738:	6d 2f       	mov	r22, r29
    e73a:	8c 2f       	mov	r24, r28
    e73c:	0e 94 66 6d 	call	0xdacc	; 0xdacc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5307
    change_term_mode = 1;
    e740:	81 e0       	ldi	r24, 0x01	; 1
    e742:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5309
  }
}
    e746:	df 91       	pop	r29
    e748:	cf 91       	pop	r28
    e74a:	08 95       	ret

0000e74c <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5280
   return
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e74c:	1f 93       	push	r17
    e74e:	cf 93       	push	r28
    e750:	df 93       	push	r29
    e752:	ec 01       	movw	r28, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5282
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    e754:	10 91 22 0b 	lds	r17, 0x0B22	; 0x800b22 <default_ring>
    e758:	81 2f       	mov	r24, r17
    e75a:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e75e:	8f 3f       	cpi	r24, 0xFF	; 255
    e760:	71 f0       	breq	.+28     	; 0xe77e <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    e762:	81 2f       	mov	r24, r17
    e764:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
    e768:	98 2f       	mov	r25, r24
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5286
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
    e76a:	8c 17       	cp	r24, r28
    e76c:	1d 06       	cpc	r1, r29
    e76e:	29 f0       	breq	.+10     	; 0xe77a <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x2e>
    e770:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <thermostat_mode_default_ring_last_state>
    e774:	8c 17       	cp	r24, r28
    e776:	1d 06       	cpc	r1, r29
    e778:	39 f4       	brne	.+14     	; 0xe788 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x3c>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
    e77a:	81 e0       	ldi	r24, 0x01	; 1
    e77c:	9c 13       	cpse	r25, r28
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5281
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    e77e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5292
      ret = 2;
    //printf("last:%d, mode%d, idx%d\n", thermostat_mode_default_ring_last_state, thermostat_ring_get_mode(default_ring), args1);
  }
  //printf("ret %d\n\n", ret);
  return ret;
}
    e780:	df 91       	pop	r29
    e782:	cf 91       	pop	r28
    e784:	1f 91       	pop	r17
    e786:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
      ret = 2;
    e788:	82 e0       	ldi	r24, 0x02	; 2
    e78a:	fa cf       	rjmp	.-12     	; 0xe780 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x34>

0000e78c <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5089
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e78c:	cf 93       	push	r28
    e78e:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
  if (thermostat_ring_get_active(args3) != RING_FREE)
    e790:	84 2f       	mov	r24, r20
    e792:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e796:	8f 3f       	cpi	r24, 0xFF	; 255
    e798:	89 f0       	breq	.+34     	; 0xe7bc <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5092
  {
    last_default_ring = default_ring;
    e79a:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
    e79e:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093
    default_ring = args3;
    e7a2:	c0 93 22 0b 	sts	0x0B22, r28	; 0x800b22 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1198
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    e7a6:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
    e7aa:	f0 e0       	ldi	r31, 0x00	; 0
    e7ac:	ef 55       	subi	r30, 0x5F	; 95
    e7ae:	f3 4f       	sbci	r31, 0xF3	; 243
    e7b0:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5103
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
  display_redraw_default_ring = 1;
    e7b2:	81 e0       	ldi	r24, 0x01	; 1
    e7b4:	80 93 55 09 	sts	0x0955, r24	; 0x800955 <display_redraw_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5104
}
    e7b8:	cf 91       	pop	r28
    e7ba:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5098
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e7bc:	70 e0       	ldi	r23, 0x00	; 0
    e7be:	60 e0       	ldi	r22, 0x00	; 0
    e7c0:	84 e6       	ldi	r24, 0x64	; 100
    e7c2:	90 e0       	ldi	r25, 0x00	; 0
    e7c4:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5099
    dialog_yes_function = &term_ring_do_activate;
    e7c8:	89 ea       	ldi	r24, 0xA9	; 169
    e7ca:	91 e7       	ldi	r25, 0x71	; 113
    e7cc:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <dialog_yes_function+0x1>
    e7d0:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
    dialog_yes_args1 = args3;
    e7d4:	c0 93 58 09 	sts	0x0958, r28	; 0x800958 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5101
    strcpy_P(dialog_text, text_term_do_activate);
    e7d8:	65 e4       	ldi	r22, 0x45	; 69
    e7da:	74 e8       	ldi	r23, 0x84	; 132
    e7dc:	81 eb       	ldi	r24, 0xB1	; 177
    e7de:	99 e0       	ldi	r25, 0x09	; 9
    e7e0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    e7e4:	e6 cf       	rjmp	.-52     	; 0xe7b2 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x26>

0000e7e6 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5067
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    e7e6:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
    e7ea:	84 13       	cpse	r24, r20
    e7ec:	08 c0       	rjmp	.+16     	; 0xe7fe <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x18>
    e7ee:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    e7f2:	91 e0       	ldi	r25, 0x01	; 1
    e7f4:	81 30       	cpi	r24, 0x01	; 1
    e7f6:	09 f0       	breq	.+2      	; 0xe7fa <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5066
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    e7f8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5072
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    ret = 2;
  return ret;
}
    e7fa:	89 2f       	mov	r24, r25
    e7fc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5069
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    e7fe:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <last_default_ring>
    e802:	84 17       	cp	r24, r20
    e804:	c9 f3       	breq	.-14     	; 0xe7f8 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070
    ret = 2;
    e806:	92 e0       	ldi	r25, 0x02	; 2
    e808:	f8 cf       	rjmp	.-16     	; 0xe7fa <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>

0000e80a <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    e80a:	ef 92       	push	r14
    e80c:	ff 92       	push	r15
    e80e:	0f 93       	push	r16
    e810:	1f 93       	push	r17
    e812:	cf 93       	push	r28
    e814:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    e816:	91 e2       	ldi	r25, 0x21	; 33
    e818:	89 9f       	mul	r24, r25
    e81a:	e0 01       	movw	r28, r0
    e81c:	11 24       	eor	r1, r1
    e81e:	8e 01       	movw	r16, r28
    e820:	04 5b       	subi	r16, 0xB4	; 180
    e822:	1e 4f       	sbci	r17, 0xFE	; 254
    e824:	7b 01       	movw	r14, r22
    e826:	cb 5a       	subi	r28, 0xAB	; 171
    e828:	de 4f       	sbci	r29, 0xFE	; 254
    e82a:	c8 01       	movw	r24, r16
    e82c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
    e830:	f7 01       	movw	r30, r14
    e832:	81 93       	st	Z+, r24
    e834:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    e836:	88 23       	and	r24, r24
    e838:	29 f0       	breq	.+10     	; 0xe844 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    e83a:	0f 5f       	subi	r16, 0xFF	; 255
    e83c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    e83e:	0c 17       	cp	r16, r28
    e840:	1d 07       	cpc	r17, r29
    e842:	99 f7       	brne	.-26     	; 0xe82a <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    e844:	df 91       	pop	r29
    e846:	cf 91       	pop	r28
    e848:	1f 91       	pop	r17
    e84a:	0f 91       	pop	r16
    e84c:	ff 90       	pop	r15
    e84e:	ef 90       	pop	r14
    e850:	08 95       	ret

0000e852 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_activate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5247
  thermostat_ring_get_name(args2, str2);
  strcat(dialog_text, str2);
}

void thermostat_button_activate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e852:	1f 93       	push	r17
    e854:	cf 93       	push	r28
    e856:	df 93       	push	r29
    e858:	00 d0       	rcall	.+0      	; 0xe85a <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    e85a:	00 d0       	rcall	.+0      	; 0xe85c <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    e85c:	00 d0       	rcall	.+0      	; 0xe85e <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e85e:	1f 92       	push	r1
    e860:	cd b7       	in	r28, 0x3d	; 61
    e862:	de b7       	in	r29, 0x3e	; 62
    e864:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5250
  //printf("aktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e866:	70 e0       	ldi	r23, 0x00	; 0
    e868:	60 e0       	ldi	r22, 0x00	; 0
    e86a:	84 e6       	ldi	r24, 0x64	; 100
    e86c:	90 e0       	ldi	r25, 0x00	; 0
    e86e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5251
  dialog_yes_function = &helper_thermostat_button_activate_ring_onclick;
    e872:	8a e7       	ldi	r24, 0x7A	; 122
    e874:	9e e6       	ldi	r25, 0x6E	; 110
    e876:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <dialog_yes_function+0x1>
    e87a:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5252
  dialog_yes_args1 = args2;
    e87e:	10 93 58 09 	sts	0x0958, r17	; 0x800958 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5253
  strcpy_P(dialog_text, text_term_do_activate1);
    e882:	60 ea       	ldi	r22, 0xA0	; 160
    e884:	74 e8       	ldi	r23, 0x84	; 132
    e886:	81 eb       	ldi	r24, 0xB1	; 177
    e888:	99 e0       	ldi	r25, 0x09	; 9
    e88a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5254
  strcat(dialog_text, ": ");
    e88e:	66 ed       	ldi	r22, 0xD6	; 214
    e890:	76 e0       	ldi	r23, 0x06	; 6
    e892:	81 eb       	ldi	r24, 0xB1	; 177
    e894:	99 e0       	ldi	r25, 0x09	; 9
    e896:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5255
  thermostat_ring_get_name(args2, str2);
    e89a:	be 01       	movw	r22, r28
    e89c:	6f 5f       	subi	r22, 0xFF	; 255
    e89e:	7f 4f       	sbci	r23, 0xFF	; 255
    e8a0:	81 2f       	mov	r24, r17
    e8a2:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5256
  strcat(dialog_text, str2);
    e8a6:	be 01       	movw	r22, r28
    e8a8:	6f 5f       	subi	r22, 0xFF	; 255
    e8aa:	7f 4f       	sbci	r23, 0xFF	; 255
    e8ac:	81 eb       	ldi	r24, 0xB1	; 177
    e8ae:	99 e0       	ldi	r25, 0x09	; 9
    e8b0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5257
}
    e8b4:	2a 96       	adiw	r28, 0x0a	; 10
    e8b6:	0f b6       	in	r0, 0x3f	; 63
    e8b8:	f8 94       	cli
    e8ba:	de bf       	out	0x3e, r29	; 62
    e8bc:	0f be       	out	0x3f, r0	; 63
    e8be:	cd bf       	out	0x3d, r28	; 61
    e8c0:	df 91       	pop	r29
    e8c2:	cf 91       	pop	r28
    e8c4:	1f 91       	pop	r17
    e8c6:	08 95       	ret

0000e8c8 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z41thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5234
  thermostat_ring_set_active(args1, 1);
}

/// funkce pro deaktivaci termostatu
void thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e8c8:	1f 93       	push	r17
    e8ca:	cf 93       	push	r28
    e8cc:	df 93       	push	r29
    e8ce:	00 d0       	rcall	.+0      	; 0xe8d0 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    e8d0:	00 d0       	rcall	.+0      	; 0xe8d2 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    e8d2:	00 d0       	rcall	.+0      	; 0xe8d4 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e8d4:	1f 92       	push	r1
    e8d6:	cd b7       	in	r28, 0x3d	; 61
    e8d8:	de b7       	in	r29, 0x3e	; 62
    e8da:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5237
  //printf("deaktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e8dc:	70 e0       	ldi	r23, 0x00	; 0
    e8de:	60 e0       	ldi	r22, 0x00	; 0
    e8e0:	84 e6       	ldi	r24, 0x64	; 100
    e8e2:	90 e0       	ldi	r25, 0x00	; 0
    e8e4:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5238
  dialog_yes_function = &helper_thermostat_button_deactivate_ring_onclick;
    e8e8:	8c e5       	ldi	r24, 0x5C	; 92
    e8ea:	9e e6       	ldi	r25, 0x6E	; 110
    e8ec:	90 93 5a 09 	sts	0x095A, r25	; 0x80095a <dialog_yes_function+0x1>
    e8f0:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5239
  dialog_yes_args1 = args2;
    e8f4:	10 93 58 09 	sts	0x0958, r17	; 0x800958 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5240
  strcpy_P(dialog_text, text_term_do_deactivate);
    e8f8:	6f e8       	ldi	r22, 0x8F	; 143
    e8fa:	74 e8       	ldi	r23, 0x84	; 132
    e8fc:	81 eb       	ldi	r24, 0xB1	; 177
    e8fe:	99 e0       	ldi	r25, 0x09	; 9
    e900:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5241
  strcat(dialog_text, ": ");
    e904:	66 ed       	ldi	r22, 0xD6	; 214
    e906:	76 e0       	ldi	r23, 0x06	; 6
    e908:	81 eb       	ldi	r24, 0xB1	; 177
    e90a:	99 e0       	ldi	r25, 0x09	; 9
    e90c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5242
  thermostat_ring_get_name(args2, str2);
    e910:	be 01       	movw	r22, r28
    e912:	6f 5f       	subi	r22, 0xFF	; 255
    e914:	7f 4f       	sbci	r23, 0xFF	; 255
    e916:	81 2f       	mov	r24, r17
    e918:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  strcat(dialog_text, str2);
    e91c:	be 01       	movw	r22, r28
    e91e:	6f 5f       	subi	r22, 0xFF	; 255
    e920:	7f 4f       	sbci	r23, 0xFF	; 255
    e922:	81 eb       	ldi	r24, 0xB1	; 177
    e924:	99 e0       	ldi	r25, 0x09	; 9
    e926:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5244
}
    e92a:	2a 96       	adiw	r28, 0x0a	; 10
    e92c:	0f b6       	in	r0, 0x3f	; 63
    e92e:	f8 94       	cli
    e930:	de bf       	out	0x3e, r29	; 62
    e932:	0f be       	out	0x3f, r0	; 63
    e934:	cd bf       	out	0x3d, r28	; 61
    e936:	df 91       	pop	r29
    e938:	cf 91       	pop	r28
    e93a:	1f 91       	pop	r17
    e93c:	08 95       	ret

0000e93e <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_set_ring_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
   args3 - nepotrebuji
   promene nemaji zadny vyznam
*/

void thermostat_button_set_ring_name_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e93e:	ff 92       	push	r15
    e940:	0f 93       	push	r16
    e942:	1f 93       	push	r17
    e944:	cf 93       	push	r28
    e946:	df 93       	push	r29
    e948:	00 d0       	rcall	.+0      	; 0xe94a <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e94a:	00 d0       	rcall	.+0      	; 0xe94c <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    e94c:	00 d0       	rcall	.+0      	; 0xe94e <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0x10>
    e94e:	1f 92       	push	r1
    e950:	cd b7       	in	r28, 0x3d	; 61
    e952:	de b7       	in	r29, 0x3e	; 62
    e954:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
  char name[10];
  //printf("%d -- %d -- %d\n", args1, args2, args3);
  thermostat_ring_get_name(args2, name);
    e956:	be 01       	movw	r22, r28
    e958:	6f 5f       	subi	r22, 0xFF	; 255
    e95a:	7f 4f       	sbci	r23, 0xFF	; 255
    e95c:	8f 2d       	mov	r24, r15
    e95e:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5212
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    e962:	70 e0       	ldi	r23, 0x00	; 0
    e964:	60 e0       	ldi	r22, 0x00	; 0
    e966:	87 e6       	ldi	r24, 0x67	; 103
    e968:	90 e0       	ldi	r25, 0x00	; 0
    e96a:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
  display_element_set_string(name, 9, args2, &helper_thermostat_button_set_ring_name, &valid_true);
    e96e:	0b e0       	ldi	r16, 0x0B	; 11
    e970:	10 e5       	ldi	r17, 0x50	; 80
    e972:	2e e5       	ldi	r18, 0x5E	; 94
    e974:	3e e6       	ldi	r19, 0x6E	; 110
    e976:	4f 2d       	mov	r20, r15
    e978:	69 e0       	ldi	r22, 0x09	; 9
    e97a:	ce 01       	movw	r24, r28
    e97c:	01 96       	adiw	r24, 0x01	; 1
    e97e:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5214
}
    e982:	2a 96       	adiw	r28, 0x0a	; 10
    e984:	0f b6       	in	r0, 0x3f	; 63
    e986:	f8 94       	cli
    e988:	de bf       	out	0x3e, r29	; 62
    e98a:	0f be       	out	0x3f, r0	; 63
    e98c:	cd bf       	out	0x3d, r28	; 61
    e98e:	df 91       	pop	r29
    e990:	cf 91       	pop	r28
    e992:	1f 91       	pop	r17
    e994:	0f 91       	pop	r16
    e996:	ff 90       	pop	r15
    e998:	08 95       	ret

0000e99a <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z48dyn_button_show_all_thermostat_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5160


/////////////////////
/// Funkce pro vyplneni popisku vyberoveho menu ringu termostatu
void dyn_button_show_all_thermostat_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e99a:	cf 92       	push	r12
    e99c:	df 92       	push	r13
    e99e:	ef 92       	push	r14
    e9a0:	ff 92       	push	r15
    e9a2:	0f 93       	push	r16
    e9a4:	1f 93       	push	r17
    e9a6:	cf 93       	push	r28
    e9a8:	df 93       	push	r29
    e9aa:	00 d0       	rcall	.+0      	; 0xe9ac <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    e9ac:	00 d0       	rcall	.+0      	; 0xe9ae <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    e9ae:	00 d0       	rcall	.+0      	; 0xe9b0 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    e9b0:	1f 92       	push	r1
    e9b2:	cd b7       	in	r28, 0x3d	; 61
    e9b4:	de b7       	in	r29, 0x3e	; 62
    e9b6:	d2 2e       	mov	r13, r18
    e9b8:	c3 2e       	mov	r12, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5162
  char name[10];
  thermostat_ring_get_name(args1, name);
    e9ba:	9e 01       	movw	r18, r28
    e9bc:	2f 5f       	subi	r18, 0xFF	; 255
    e9be:	3f 4f       	sbci	r19, 0xFF	; 255
    e9c0:	79 01       	movw	r14, r18
    e9c2:	b9 01       	movw	r22, r18
    e9c4:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5163
  sprintf(line1, "Regulator: %s", name);
    e9c8:	ff 92       	push	r15
    e9ca:	ef 92       	push	r14
    e9cc:	83 ea       	ldi	r24, 0xA3	; 163
    e9ce:	93 e0       	ldi	r25, 0x03	; 3
    e9d0:	9f 93       	push	r25
    e9d2:	8f 93       	push	r24
    e9d4:	cf 92       	push	r12
    e9d6:	df 92       	push	r13
    e9d8:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5164
  strcpy_P(line2, text_dashdash);
    e9dc:	6b e8       	ldi	r22, 0x8B	; 139
    e9de:	74 e8       	ldi	r23, 0x84	; 132
    e9e0:	c8 01       	movw	r24, r16
    e9e2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    e9e6:	0f 90       	pop	r0
    e9e8:	0f 90       	pop	r0
    e9ea:	0f 90       	pop	r0
    e9ec:	0f 90       	pop	r0
    e9ee:	0f 90       	pop	r0
    e9f0:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5165
}
    e9f2:	2a 96       	adiw	r28, 0x0a	; 10
    e9f4:	0f b6       	in	r0, 0x3f	; 63
    e9f6:	f8 94       	cli
    e9f8:	de bf       	out	0x3e, r29	; 62
    e9fa:	0f be       	out	0x3f, r0	; 63
    e9fc:	cd bf       	out	0x3d, r28	; 61
    e9fe:	df 91       	pop	r29
    ea00:	cf 91       	pop	r28
    ea02:	1f 91       	pop	r17
    ea04:	0f 91       	pop	r16
    ea06:	ff 90       	pop	r15
    ea08:	ef 90       	pop	r14
    ea0a:	df 90       	pop	r13
    ea0c:	cf 90       	pop	r12
    ea0e:	08 95       	ret

0000ea10 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    ea10:	ef 92       	push	r14
    ea12:	ff 92       	push	r15
    ea14:	0f 93       	push	r16
    ea16:	1f 93       	push	r17
    ea18:	cf 93       	push	r28
    ea1a:	df 93       	push	r29
    ea1c:	00 d0       	rcall	.+0      	; 0xea1e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    ea1e:	00 d0       	rcall	.+0      	; 0xea20 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    ea20:	00 d0       	rcall	.+0      	; 0xea22 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    ea22:	1f 92       	push	r1
    ea24:	cd b7       	in	r28, 0x3d	; 61
    ea26:	de b7       	in	r29, 0x3e	; 62
    ea28:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5136
  char name[10];
  strcpy_P(line1, text_change_default_ring);
    ea2a:	61 e7       	ldi	r22, 0x71	; 113
    ea2c:	74 e8       	ldi	r23, 0x84	; 132
    ea2e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5137
  if (default_ring != NO_DEFAULT_RING)
    ea32:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
    ea36:	8f 3f       	cpi	r24, 0xFF	; 255
    ea38:	21 f1       	breq	.+72     	; 0xea82 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5139
  {
    thermostat_ring_get_name(default_ring, name);
    ea3a:	9e 01       	movw	r18, r28
    ea3c:	2f 5f       	subi	r18, 0xFF	; 255
    ea3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea40:	79 01       	movw	r14, r18
    ea42:	b9 01       	movw	r22, r18
    ea44:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5140
    sprintf(line2, "Regulator: %s", name);
    ea48:	ff 92       	push	r15
    ea4a:	ef 92       	push	r14
    ea4c:	83 ea       	ldi	r24, 0xA3	; 163
    ea4e:	93 e0       	ldi	r25, 0x03	; 3
    ea50:	9f 93       	push	r25
    ea52:	8f 93       	push	r24
    ea54:	1f 93       	push	r17
    ea56:	0f 93       	push	r16
    ea58:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
    ea5c:	0f 90       	pop	r0
    ea5e:	0f 90       	pop	r0
    ea60:	0f 90       	pop	r0
    ea62:	0f 90       	pop	r0
    ea64:	0f 90       	pop	r0
    ea66:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5146
  }
  else
  {
    strcpy_P(line2, text_dashdash);
  }
}
    ea68:	2a 96       	adiw	r28, 0x0a	; 10
    ea6a:	0f b6       	in	r0, 0x3f	; 63
    ea6c:	f8 94       	cli
    ea6e:	de bf       	out	0x3e, r29	; 62
    ea70:	0f be       	out	0x3f, r0	; 63
    ea72:	cd bf       	out	0x3d, r28	; 61
    ea74:	df 91       	pop	r29
    ea76:	cf 91       	pop	r28
    ea78:	1f 91       	pop	r17
    ea7a:	0f 91       	pop	r16
    ea7c:	ff 90       	pop	r15
    ea7e:	ef 90       	pop	r14
    ea80:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5144
    thermostat_ring_get_name(default_ring, name);
    sprintf(line2, "Regulator: %s", name);
  }
  else
  {
    strcpy_P(line2, text_dashdash);
    ea82:	6b e8       	ldi	r22, 0x8B	; 139
    ea84:	74 e8       	ldi	r23, 0x84	; 132
    ea86:	c8 01       	movw	r24, r16
    ea88:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    ea8c:	ed cf       	rjmp	.-38     	; 0xea68 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>

0000ea8e <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5115
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    ea8e:	af 92       	push	r10
    ea90:	bf 92       	push	r11
    ea92:	cf 92       	push	r12
    ea94:	df 92       	push	r13
    ea96:	ff 92       	push	r15
    ea98:	0f 93       	push	r16
    ea9a:	1f 93       	push	r17
    ea9c:	cf 93       	push	r28
    ea9e:	df 93       	push	r29
    eaa0:	cd b7       	in	r28, 0x3d	; 61
    eaa2:	de b7       	in	r29, 0x3e	; 62
    eaa4:	66 97       	sbiw	r28, 0x16	; 22
    eaa6:	0f b6       	in	r0, 0x3f	; 63
    eaa8:	f8 94       	cli
    eaaa:	de bf       	out	0x3e, r29	; 62
    eaac:	0f be       	out	0x3f, r0	; 63
    eaae:	cd bf       	out	0x3d, r28	; 61
    eab0:	f8 2e       	mov	r15, r24
    eab2:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5118
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    eab4:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    eab8:	9e 01       	movw	r18, r28
    eaba:	2f 5f       	subi	r18, 0xFF	; 255
    eabc:	3f 4f       	sbci	r19, 0xFF	; 255
    eabe:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
    strcpy_P(active, text_term_active);
    eac0:	69 e6       	ldi	r22, 0x69	; 105
    eac2:	74 e8       	ldi	r23, 0x84	; 132
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5118
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    eac4:	8f 3f       	cpi	r24, 0xFF	; 255
    eac6:	11 f4       	brne	.+4      	; 0xeacc <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5121
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    eac8:	6f e5       	ldi	r22, 0x5F	; 95
    eaca:	74 e8       	ldi	r23, 0x84	; 132
    eacc:	c6 01       	movw	r24, r12
    eace:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5122
  thermostat_ring_get_name(args1, name);
    ead2:	be 01       	movw	r22, r28
    ead4:	63 5f       	subi	r22, 0xF3	; 243
    ead6:	7f 4f       	sbci	r23, 0xFF	; 255
    ead8:	8f 2d       	mov	r24, r15
    eada:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5123
  sprintf(line2, "Reg. %d %s", args1, active);
    eade:	df 92       	push	r13
    eae0:	cf 92       	push	r12
    eae2:	1f 92       	push	r1
    eae4:	ff 92       	push	r15
    eae6:	81 eb       	ldi	r24, 0xB1	; 177
    eae8:	93 e0       	ldi	r25, 0x03	; 3
    eaea:	9f 93       	push	r25
    eaec:	8f 93       	push	r24
    eaee:	1f 93       	push	r17
    eaf0:	0f 93       	push	r16
    eaf2:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5124
  strcpy(line1, name);
    eaf6:	be 01       	movw	r22, r28
    eaf8:	63 5f       	subi	r22, 0xF3	; 243
    eafa:	7f 4f       	sbci	r23, 0xFF	; 255
    eafc:	c5 01       	movw	r24, r10
    eafe:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
    eb02:	0f b6       	in	r0, 0x3f	; 63
    eb04:	f8 94       	cli
    eb06:	de bf       	out	0x3e, r29	; 62
    eb08:	0f be       	out	0x3f, r0	; 63
    eb0a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5125
}
    eb0c:	66 96       	adiw	r28, 0x16	; 22
    eb0e:	0f b6       	in	r0, 0x3f	; 63
    eb10:	f8 94       	cli
    eb12:	de bf       	out	0x3e, r29	; 62
    eb14:	0f be       	out	0x3f, r0	; 63
    eb16:	cd bf       	out	0x3d, r28	; 61
    eb18:	df 91       	pop	r29
    eb1a:	cf 91       	pop	r28
    eb1c:	1f 91       	pop	r17
    eb1e:	0f 91       	pop	r16
    eb20:	ff 90       	pop	r15
    eb22:	df 90       	pop	r13
    eb24:	cf 90       	pop	r12
    eb26:	bf 90       	pop	r11
    eb28:	af 90       	pop	r10
    eb2a:	08 95       	ret

0000eb2c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4093
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    eb2c:	af 92       	push	r10
    eb2e:	bf 92       	push	r11
    eb30:	cf 92       	push	r12
    eb32:	df 92       	push	r13
    eb34:	ef 92       	push	r14
    eb36:	ff 92       	push	r15
    eb38:	0f 93       	push	r16
    eb3a:	1f 93       	push	r17
    eb3c:	cf 93       	push	r28
    eb3e:	df 93       	push	r29
    eb40:	cd b7       	in	r28, 0x3d	; 61
    eb42:	de b7       	in	r29, 0x3e	; 62
    eb44:	a8 97       	sbiw	r28, 0x28	; 40
    eb46:	0f b6       	in	r0, 0x3f	; 63
    eb48:	f8 94       	cli
    eb4a:	de bf       	out	0x3e, r29	; 62
    eb4c:	0f be       	out	0x3f, r0	; 63
    eb4e:	cd bf       	out	0x3d, r28	; 61
    eb50:	6c 01       	movw	r12, r24
    eb52:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4096
  char name[10];
  char default_text[30];
  strcpy_P(default_text, new_text_regulator);
    eb54:	6c e5       	ldi	r22, 0x5C	; 92
    eb56:	73 e8       	ldi	r23, 0x83	; 131
    eb58:	ce 01       	movw	r24, r28
    eb5a:	01 96       	adiw	r24, 0x01	; 1
    eb5c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
  if (thermostat_ring_get_active(args2) != RING_FREE)
    eb60:	8e 2d       	mov	r24, r14
    eb62:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    eb66:	8f 3f       	cpi	r24, 0xFF	; 255
    eb68:	51 f1       	breq	.+84     	; 0xebbe <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4099
  {
    thermostat_ring_get_name(args2, name);
    eb6a:	be 01       	movw	r22, r28
    eb6c:	61 5e       	subi	r22, 0xE1	; 225
    eb6e:	7f 4f       	sbci	r23, 0xFF	; 255
    eb70:	8e 2d       	mov	r24, r14
    eb72:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    eb76:	be 01       	movw	r22, r28
    eb78:	61 5e       	subi	r22, 0xE1	; 225
    eb7a:	7f 4f       	sbci	r23, 0xFF	; 255
    eb7c:	ce 01       	movw	r24, r28
    eb7e:	01 96       	adiw	r24, 0x01	; 1
    eb80:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4107
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    eb84:	ee 24       	eor	r14, r14
    eb86:	ea 94       	dec	r14
    eb88:	fe 2c       	mov	r15, r14
    eb8a:	10 e0       	ldi	r17, 0x00	; 0
    eb8c:	00 e0       	ldi	r16, 0x00	; 0
    eb8e:	22 e0       	ldi	r18, 0x02	; 2
    eb90:	a5 01       	movw	r20, r10
    eb92:	b6 01       	movw	r22, r12
    eb94:	ce 01       	movw	r24, r28
    eb96:	01 96       	adiw	r24, 0x01	; 1
    eb98:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4108
}
    eb9c:	a8 96       	adiw	r28, 0x28	; 40
    eb9e:	0f b6       	in	r0, 0x3f	; 63
    eba0:	f8 94       	cli
    eba2:	de bf       	out	0x3e, r29	; 62
    eba4:	0f be       	out	0x3f, r0	; 63
    eba6:	cd bf       	out	0x3d, r28	; 61
    eba8:	df 91       	pop	r29
    ebaa:	cf 91       	pop	r28
    ebac:	1f 91       	pop	r17
    ebae:	0f 91       	pop	r16
    ebb0:	ff 90       	pop	r15
    ebb2:	ef 90       	pop	r14
    ebb4:	df 90       	pop	r13
    ebb6:	cf 90       	pop	r12
    ebb8:	bf 90       	pop	r11
    ebba:	af 90       	pop	r10
    ebbc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4104
    thermostat_ring_get_name(args2, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    ebbe:	6f e5       	ldi	r22, 0x5F	; 95
    ebc0:	74 e8       	ldi	r23, 0x84	; 132
    ebc2:	ce 01       	movw	r24, r28
    ebc4:	4f 96       	adiw	r24, 0x1f	; 31
    ebc6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    ebca:	d5 cf       	rjmp	.-86     	; 0xeb76 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x4a>

0000ebcc <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5475
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ebcc:	0f 93       	push	r16
    ebce:	1f 93       	push	r17
    ebd0:	cf 93       	push	r28
    ebd2:	8c 01       	movw	r16, r24
    ebd4:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478
  uint8_t ret = 2;
  uint8_t b;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    ebd6:	86 2f       	mov	r24, r22
    ebd8:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
    ebdc:	8f 3f       	cpi	r24, 0xFF	; 255
    ebde:	81 f0       	breq	.+32     	; 0xec00 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x34>
thermostat_ring_get_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    ebe0:	21 e2       	ldi	r18, 0x21	; 33
    ebe2:	c2 9f       	mul	r28, r18
    ebe4:	c0 01       	movw	r24, r0
    ebe6:	11 24       	eor	r1, r1
    ebe8:	88 5a       	subi	r24, 0xA8	; 168
    ebea:	9e 4f       	sbci	r25, 0xFE	; 254
    ebec:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5482
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    ebf0:	80 fd       	sbrc	r24, 0
    ebf2:	0b c0       	rjmp	.+22     	; 0xec0a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    ebf4:	81 e0       	ldi	r24, 0x01	; 1
    ebf6:	03 30       	cpi	r16, 0x03	; 3
    ebf8:	11 05       	cpc	r17, r1
    ebfa:	19 f0       	breq	.+6      	; 0xec02 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5484
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    ebfc:	80 e0       	ldi	r24, 0x00	; 0
    ebfe:	01 c0       	rjmp	.+2      	; 0xec02 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5476
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 2;
    ec00:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5488
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
      ret = 1;
  }
  return ret;
}
    ec02:	cf 91       	pop	r28
    ec04:	1f 91       	pop	r17
    ec06:	0f 91       	pop	r16
    ec08:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5484
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    ec0a:	81 e0       	ldi	r24, 0x01	; 1
    ec0c:	05 30       	cpi	r16, 0x05	; 5
    ec0e:	11 05       	cpc	r17, r1
    ec10:	a9 f7       	brne	.-22     	; 0xebfc <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x30>
    ec12:	f7 cf       	rjmp	.-18     	; 0xec02 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>

0000ec14 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_select_term_ring_input_in_dialog_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ec14:	cf 93       	push	r28
    ec16:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    ec18:	21 e2       	ldi	r18, 0x21	; 33
    ec1a:	62 9f       	mul	r22, r18
    ec1c:	c0 01       	movw	r24, r0
    ec1e:	11 24       	eor	r1, r1
    ec20:	84 5a       	subi	r24, 0xA4	; 164
    ec22:	9e 4f       	sbci	r25, 0xFE	; 254
    ec24:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4956
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(args2) == args3)
    ec28:	91 e0       	ldi	r25, 0x01	; 1
    ec2a:	c8 13       	cpse	r28, r24
    ec2c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4959
    ret = 1;
  return ret;
}
    ec2e:	89 2f       	mov	r24, r25
    ec30:	cf 91       	pop	r28
    ec32:	08 95       	ret

0000ec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    ec34:	af 92       	push	r10
    ec36:	bf 92       	push	r11
    ec38:	cf 92       	push	r12
    ec3a:	df 92       	push	r13
    ec3c:	ef 92       	push	r14
    ec3e:	ff 92       	push	r15
    ec40:	0f 93       	push	r16
    ec42:	1f 93       	push	r17
    ec44:	cf 93       	push	r28
    ec46:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    ec48:	86 30       	cpi	r24, 0x06	; 6
    ec4a:	08 f0       	brcs	.+2      	; 0xec4e <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    ec4c:	56 c0       	rjmp	.+172    	; 0xecfa <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    ec4e:	8b 01       	movw	r16, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    ec50:	96 e1       	ldi	r25, 0x16	; 22
    ec52:	89 9f       	mul	r24, r25
    ec54:	e0 01       	movw	r28, r0
    ec56:	11 24       	eor	r1, r1
    ec58:	ce 01       	movw	r24, r28
    ec5a:	88 53       	subi	r24, 0x38	; 56
    ec5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ec5e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ec62:	f8 01       	movw	r30, r16
    ec64:	81 93       	st	Z+, r24
    ec66:	6f 01       	movw	r12, r30
    ec68:	7e 01       	movw	r14, r28
    ec6a:	f9 ec       	ldi	r31, 0xC9	; 201
    ec6c:	ef 0e       	add	r14, r31
    ec6e:	f1 1c       	adc	r15, r1
    ec70:	5e 01       	movw	r10, r28
    ec72:	81 ed       	ldi	r24, 0xD1	; 209
    ec74:	a8 0e       	add	r10, r24
    ec76:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    ec78:	c7 01       	movw	r24, r14
    ec7a:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ec7e:	f6 01       	movw	r30, r12
    ec80:	81 93       	st	Z+, r24
    ec82:	6f 01       	movw	r12, r30
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    ec84:	c7 01       	movw	r24, r14
    ec86:	0b 96       	adiw	r24, 0x0b	; 11
    ec88:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ec8c:	f6 01       	movw	r30, r12
    ec8e:	82 87       	std	Z+10, r24	; 0x0a
    ec90:	ff ef       	ldi	r31, 0xFF	; 255
    ec92:	ef 1a       	sub	r14, r31
    ec94:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    ec96:	ea 14       	cp	r14, r10
    ec98:	fb 04       	cpc	r15, r11
    ec9a:	71 f7       	brne	.-36     	; 0xec78 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    ec9c:	f8 01       	movw	r30, r16
    ec9e:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    eca0:	c7 01       	movw	r24, r14
    eca2:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    eca6:	f8 01       	movw	r30, r16
    eca8:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    ecaa:	ce 01       	movw	r24, r28
    ecac:	8e 52       	subi	r24, 0x2E	; 46
    ecae:	9f 4f       	sbci	r25, 0xFF	; 255
    ecb0:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ecb4:	f8 2e       	mov	r15, r24
    ecb6:	ce 01       	movw	r24, r28
    ecb8:	8d 52       	subi	r24, 0x2D	; 45
    ecba:	9f 4f       	sbci	r25, 0xFF	; 255
    ecbc:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ecc0:	2f 2d       	mov	r18, r15
    ecc2:	30 e0       	ldi	r19, 0x00	; 0
    ecc4:	32 2f       	mov	r19, r18
    ecc6:	22 27       	eor	r18, r18
    ecc8:	82 0f       	add	r24, r18
    ecca:	93 2f       	mov	r25, r19
    eccc:	91 1d       	adc	r25, r1
    ecce:	f8 01       	movw	r30, r16
    ecd0:	93 87       	std	Z+11, r25	; 0x0b
    ecd2:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    ecd4:	ce 01       	movw	r24, r28
    ecd6:	84 52       	subi	r24, 0x24	; 36
    ecd8:	9f 4f       	sbci	r25, 0xFF	; 255
    ecda:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    ecde:	f8 01       	movw	r30, r16
    ece0:	84 8b       	std	Z+20, r24	; 0x14
    ece2:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    ece4:	df 91       	pop	r29
    ece6:	cf 91       	pop	r28
    ece8:	1f 91       	pop	r17
    ecea:	0f 91       	pop	r16
    ecec:	ff 90       	pop	r15
    ecee:	ef 90       	pop	r14
    ecf0:	df 90       	pop	r13
    ecf2:	cf 90       	pop	r12
    ecf4:	bf 90       	pop	r11
    ecf6:	af 90       	pop	r10
    ecf8:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    ecfa:	80 e0       	ldi	r24, 0x00	; 0
    ecfc:	f3 cf       	rjmp	.-26     	; 0xece4 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000ecfe <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    ecfe:	ef 92       	push	r14
    ed00:	ff 92       	push	r15
    ed02:	0f 93       	push	r16
    ed04:	1f 93       	push	r17
    ed06:	cf 93       	push	r28
    ed08:	df 93       	push	r29
    ed0a:	cd b7       	in	r28, 0x3d	; 61
    ed0c:	de b7       	in	r29, 0x3e	; 62
    ed0e:	6e 97       	sbiw	r28, 0x1e	; 30
    ed10:	0f b6       	in	r0, 0x3f	; 63
    ed12:	f8 94       	cli
    ed14:	de bf       	out	0x3e, r29	; 62
    ed16:	0f be       	out	0x3f, r0	; 63
    ed18:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    ed1a:	1f 8a       	std	Y+23, r1	; 0x17
    ed1c:	18 8e       	std	Y+24, r1	; 0x18
    ed1e:	19 8e       	std	Y+25, r1	; 0x19
    ed20:	1a 8e       	std	Y+26, r1	; 0x1a
    ed22:	1b 8e       	std	Y+27, r1	; 0x1b
    ed24:	1c 8e       	std	Y+28, r1	; 0x1c
    ed26:	1d 8e       	std	Y+29, r1	; 0x1d
    ed28:	1e 8e       	std	Y+30, r1	; 0x1e
    ed2a:	0a e5       	ldi	r16, 0x5A	; 90
    ed2c:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    ed2e:	ee 24       	eor	r14, r14
    ed30:	ea 94       	dec	r14
    ed32:	f8 01       	movw	r30, r16
    ed34:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    ed36:	b8 01       	movw	r22, r16
    ed38:	ce 01       	movw	r24, r28
    ed3a:	47 96       	adiw	r24, 0x17	; 23
    ed3c:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <tds_compare_rom(unsigned char*, unsigned char*)>
    ed40:	81 11       	cpse	r24, r1
    ed42:	14 c0       	rjmp	.+40     	; 0xed6c <tds_update_associate()+0x6e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ed44:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    ed46:	be 01       	movw	r22, r28
    ed48:	6f 5f       	subi	r22, 0xFF	; 255
    ed4a:	7f 4f       	sbci	r23, 0xFF	; 255
    ed4c:	8f 2d       	mov	r24, r15
    ed4e:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    ed52:	b8 01       	movw	r22, r16
    ed54:	ce 01       	movw	r24, r28
    ed56:	02 96       	adiw	r24, 0x02	; 2
    ed58:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <tds_compare_rom(unsigned char*, unsigned char*)>
    ed5c:	88 23       	and	r24, r24
    ed5e:	11 f0       	breq	.+4      	; 0xed64 <tds_update_associate()+0x66>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    ed60:	f8 01       	movw	r30, r16
    ed62:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ed64:	f3 94       	inc	r15
    ed66:	f6 e0       	ldi	r31, 0x06	; 6
    ed68:	ff 12       	cpse	r15, r31
    ed6a:	ed cf       	rjmp	.-38     	; 0xed46 <tds_update_associate()+0x48>
    ed6c:	05 5f       	subi	r16, 0xF5	; 245
    ed6e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    ed70:	8c e0       	ldi	r24, 0x0C	; 12
    ed72:	0c 39       	cpi	r16, 0x9C	; 156
    ed74:	18 07       	cpc	r17, r24
    ed76:	e9 f6       	brne	.-70     	; 0xed32 <tds_update_associate()+0x34>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    ed78:	6e 96       	adiw	r28, 0x1e	; 30
    ed7a:	0f b6       	in	r0, 0x3f	; 63
    ed7c:	f8 94       	cli
    ed7e:	de bf       	out	0x3e, r29	; 62
    ed80:	0f be       	out	0x3f, r0	; 63
    ed82:	cd bf       	out	0x3d, r28	; 61
    ed84:	df 91       	pop	r29
    ed86:	cf 91       	pop	r28
    ed88:	1f 91       	pop	r17
    ed8a:	0f 91       	pop	r16
    ed8c:	ff 90       	pop	r15
    ed8e:	ef 90       	pop	r14
    ed90:	08 95       	ret

0000ed92 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    ed92:	af 92       	push	r10
    ed94:	bf 92       	push	r11
    ed96:	cf 92       	push	r12
    ed98:	df 92       	push	r13
    ed9a:	ef 92       	push	r14
    ed9c:	ff 92       	push	r15
    ed9e:	1f 93       	push	r17
    eda0:	cf 93       	push	r28
    eda2:	df 93       	push	r29
    eda4:	cd b7       	in	r28, 0x3d	; 61
    eda6:	de b7       	in	r29, 0x3e	; 62
    eda8:	66 97       	sbiw	r28, 0x16	; 22
    edaa:	0f b6       	in	r0, 0x3f	; 63
    edac:	f8 94       	cli
    edae:	de bf       	out	0x3e, r29	; 62
    edb0:	0f be       	out	0x3f, r0	; 63
    edb2:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    edb4:	90 91 9c 0c 	lds	r25, 0x0C9C	; 0x800c9c <Global_HWwirenum>
    edb8:	89 17       	cp	r24, r25
    edba:	a0 f0       	brcs	.+40     	; 0xede4 <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    edbc:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    edbe:	0e 94 7f 76 	call	0xecfe	; 0xecfe <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
    edc2:	81 2f       	mov	r24, r17
    edc4:	66 96       	adiw	r28, 0x16	; 22
    edc6:	0f b6       	in	r0, 0x3f	; 63
    edc8:	f8 94       	cli
    edca:	de bf       	out	0x3e, r29	; 62
    edcc:	0f be       	out	0x3f, r0	; 63
    edce:	cd bf       	out	0x3d, r28	; 61
    edd0:	df 91       	pop	r29
    edd2:	cf 91       	pop	r28
    edd4:	1f 91       	pop	r17
    edd6:	ff 90       	pop	r15
    edd8:	ef 90       	pop	r14
    edda:	df 90       	pop	r13
    eddc:	cf 90       	pop	r12
    edde:	bf 90       	pop	r11
    ede0:	af 90       	pop	r10
    ede2:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ede4:	a8 2e       	mov	r10, r24
    ede6:	b1 2c       	mov	r11, r1
    ede8:	2b e0       	ldi	r18, 0x0B	; 11
    edea:	82 9f       	mul	r24, r18
    edec:	c0 01       	movw	r24, r0
    edee:	11 24       	eor	r1, r1
    edf0:	fc 01       	movw	r30, r24
    edf2:	e6 5a       	subi	r30, 0xA6	; 166
    edf4:	f3 4f       	sbci	r31, 0xF3	; 243
    edf6:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    edf8:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    edfa:	be 01       	movw	r22, r28
    edfc:	6f 5f       	subi	r22, 0xFF	; 255
    edfe:	7f 4f       	sbci	r23, 0xFF	; 255
    ee00:	81 2f       	mov	r24, r17
    ee02:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ee06:	b7 01       	movw	r22, r14
    ee08:	ce 01       	movw	r24, r28
    ee0a:	02 96       	adiw	r24, 0x02	; 2
    ee0c:	0e 94 38 4f 	call	0x9e70	; 0x9e70 <tds_compare_rom(unsigned char*, unsigned char*)>
    ee10:	81 11       	cpse	r24, r1
    ee12:	d4 cf       	rjmp	.-88     	; 0xedbc <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ee14:	1f 5f       	subi	r17, 0xFF	; 255
    ee16:	16 30       	cpi	r17, 0x06	; 6
    ee18:	81 f7       	brne	.-32     	; 0xedfa <tds_associate(unsigned char)+0x68>
    ee1a:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    ee1c:	2b e0       	ldi	r18, 0x0B	; 11
    ee1e:	2a 9d       	mul	r18, r10
    ee20:	c0 01       	movw	r24, r0
    ee22:	2b 9d       	mul	r18, r11
    ee24:	90 0d       	add	r25, r0
    ee26:	11 24       	eor	r1, r1
    ee28:	fc 01       	movw	r30, r24
    ee2a:	ed 59       	subi	r30, 0x9D	; 157
    ee2c:	f3 4f       	sbci	r31, 0xF3	; 243
    ee2e:	6f 01       	movw	r12, r30
    ee30:	03 c0       	rjmp	.+6      	; 0xee38 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ee32:	1f 5f       	subi	r17, 0xFF	; 255
    ee34:	16 30       	cpi	r17, 0x06	; 6
    ee36:	11 f2       	breq	.-124    	; 0xedbc <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    ee38:	be 01       	movw	r22, r28
    ee3a:	6f 5f       	subi	r22, 0xFF	; 255
    ee3c:	7f 4f       	sbci	r23, 0xFF	; 255
    ee3e:	81 2f       	mov	r24, r17
    ee40:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    ee44:	89 81       	ldd	r24, Y+1	; 0x01
    ee46:	81 11       	cpse	r24, r1
    ee48:	f4 cf       	rjmp	.-24     	; 0xee32 <tds_associate(unsigned char)+0xa0>
    ee4a:	f6 01       	movw	r30, r12
    ee4c:	80 81       	ld	r24, Z
    ee4e:	81 30       	cpi	r24, 0x01	; 1
    ee50:	81 f7       	brne	.-32     	; 0xee32 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    ee52:	89 83       	std	Y+1, r24	; 0x01
    ee54:	fe 01       	movw	r30, r28
    ee56:	32 96       	adiw	r30, 0x02	; 2
    ee58:	90 e0       	ldi	r25, 0x00	; 0
    ee5a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    ee5c:	d7 01       	movw	r26, r14
    ee5e:	a8 0f       	add	r26, r24
    ee60:	b9 1f       	adc	r27, r25
    ee62:	2c 91       	ld	r18, X
    ee64:	21 93       	st	Z+, r18
    ee66:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    ee68:	88 30       	cpi	r24, 0x08	; 8
    ee6a:	91 05       	cpc	r25, r1
    ee6c:	b9 f7       	brne	.-18     	; 0xee5c <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    ee6e:	2b e0       	ldi	r18, 0x0B	; 11
    ee70:	12 9f       	mul	r17, r18
    ee72:	f0 01       	movw	r30, r0
    ee74:	11 24       	eor	r1, r1
    ee76:	e6 5a       	subi	r30, 0xA6	; 166
    ee78:	f3 4f       	sbci	r31, 0xF3	; 243
    ee7a:	e0 85       	ldd	r30, Z+8	; 0x08
    ee7c:	f0 e0       	ldi	r31, 0x00	; 0
    ee7e:	ee 0f       	add	r30, r30
    ee80:	ff 1f       	adc	r31, r31
    ee82:	e3 56       	subi	r30, 0x63	; 99
    ee84:	f3 4f       	sbci	r31, 0xF3	; 243
    ee86:	80 81       	ld	r24, Z
    ee88:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    ee8a:	be 01       	movw	r22, r28
    ee8c:	6f 5f       	subi	r22, 0xFF	; 255
    ee8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ee90:	81 2f       	mov	r24, r17
    ee92:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
    ee96:	3e e1       	ldi	r19, 0x1E	; 30
    ee98:	13 9f       	mul	r17, r19
    ee9a:	a0 01       	movw	r20, r0
    ee9c:	11 24       	eor	r1, r1
    ee9e:	90 e0       	ldi	r25, 0x00	; 0
    eea0:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    eea2:	20 e2       	ldi	r18, 0x20	; 32
    eea4:	3e e4       	ldi	r19, 0x4E	; 78
    eea6:	fc 01       	movw	r30, r24
    eea8:	ee 0f       	add	r30, r30
    eeaa:	ff 1f       	adc	r31, r31
    eeac:	e4 0f       	add	r30, r20
    eeae:	f5 1f       	adc	r31, r21
    eeb0:	e6 59       	subi	r30, 0x96	; 150
    eeb2:	f4 4f       	sbci	r31, 0xF4	; 244
    eeb4:	30 87       	std	Z+8, r19	; 0x08
    eeb6:	27 83       	std	Z+7, r18	; 0x07
    eeb8:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    eeba:	8a 30       	cpi	r24, 0x0A	; 10
    eebc:	91 05       	cpc	r25, r1
    eebe:	99 f7       	brne	.-26     	; 0xeea6 <tds_associate(unsigned char)+0x114>
    eec0:	7e cf       	rjmp	.-260    	; 0xedbe <tds_associate(unsigned char)+0x2c>

0000eec2 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4690
  return active;
}

void helper_tds_associate(uint16_t idx, uint16_t args2, uint8_t args3)
{
  tds_associate(idx);
    eec2:	0c 94 c9 76 	jmp	0xed92	; 0xed92 <tds_associate(unsigned char)>

0000eec6 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4718
  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
}

void clik_button_onewire_scan_bus(uint16_t args1, uint16_t args2, uint8_t args3)
{
    eec6:	0f 93       	push	r16
    eec8:	1f 93       	push	r17
    eeca:	cf 93       	push	r28
    eecc:	df 93       	push	r29
    eece:	cd b7       	in	r28, 0x3d	; 61
    eed0:	de b7       	in	r29, 0x3e	; 62
    eed2:	a0 97       	sbiw	r28, 0x20	; 32
    eed4:	0f b6       	in	r0, 0x3f	; 63
    eed6:	f8 94       	cli
    eed8:	de bf       	out	0x3e, r29	; 62
    eeda:	0f be       	out	0x3f, r0	; 63
    eedc:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4720
  char str1[32];
  Global_HWwirenum = 0;
    eede:	10 92 9c 0c 	sts	0x0C9C, r1	; 0x800c9c <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4721
  one_hw_search_device(0);
    eee2:	0e 94 38 bc 	call	0x17870	; 0x17870 <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4722
  tds_update_associate();
    eee6:	0e 94 7f 76 	call	0xecfe	; 0xecfe <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
  MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    eeea:	70 e0       	ldi	r23, 0x00	; 0
    eeec:	60 e0       	ldi	r22, 0x00	; 0
    eeee:	88 e6       	ldi	r24, 0x68	; 104
    eef0:	90 e0       	ldi	r25, 0x00	; 0
    eef2:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
  /// TODO text
  sprintf(str1, "Nalezeno: %d novych 1Wire", Global_HWwirenum);
    eef6:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <Global_HWwirenum>
    eefa:	1f 92       	push	r1
    eefc:	8f 93       	push	r24
    eefe:	8c eb       	ldi	r24, 0xBC	; 188
    ef00:	93 e0       	ldi	r25, 0x03	; 3
    ef02:	9f 93       	push	r25
    ef04:	8f 93       	push	r24
    ef06:	8e 01       	movw	r16, r28
    ef08:	0f 5f       	subi	r16, 0xFF	; 255
    ef0a:	1f 4f       	sbci	r17, 0xFF	; 255
    ef0c:	1f 93       	push	r17
    ef0e:	0f 93       	push	r16
    ef10:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
  strcpy(dialog_text, str1);
    ef14:	b8 01       	movw	r22, r16
    ef16:	81 eb       	ldi	r24, 0xB1	; 177
    ef18:	99 e0       	ldi	r25, 0x09	; 9
    ef1a:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
    ef1e:	0f 90       	pop	r0
    ef20:	0f 90       	pop	r0
    ef22:	0f 90       	pop	r0
    ef24:	0f 90       	pop	r0
    ef26:	0f 90       	pop	r0
    ef28:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4727
}
    ef2a:	a0 96       	adiw	r28, 0x20	; 32
    ef2c:	0f b6       	in	r0, 0x3f	; 63
    ef2e:	f8 94       	cli
    ef30:	de bf       	out	0x3e, r29	; 62
    ef32:	0f be       	out	0x3f, r0	; 63
    ef34:	cd bf       	out	0x3d, r28	; 61
    ef36:	df 91       	pop	r29
    ef38:	cf 91       	pop	r28
    ef3a:	1f 91       	pop	r17
    ef3c:	0f 91       	pop	r16
    ef3e:	08 95       	ret

0000ef40 <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    ef40:	1f 93       	push	r17
    ef42:	cf 93       	push	r28
    ef44:	df 93       	push	r29
    ef46:	cd b7       	in	r28, 0x3d	; 61
    ef48:	de b7       	in	r29, 0x3e	; 62
    ef4a:	66 97       	sbiw	r28, 0x16	; 22
    ef4c:	0f b6       	in	r0, 0x3f	; 63
    ef4e:	f8 94       	cli
    ef50:	de bf       	out	0x3e, r29	; 62
    ef52:	0f be       	out	0x3f, r0	; 63
    ef54:	cd bf       	out	0x3d, r28	; 61
    ef56:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ef58:	be 01       	movw	r22, r28
    ef5a:	6f 5f       	subi	r22, 0xFF	; 255
    ef5c:	7f 4f       	sbci	r23, 0xFF	; 255
    ef5e:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    ef62:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    ef64:	6e e9       	ldi	r22, 0x9E	; 158
    ef66:	73 e0       	ldi	r23, 0x03	; 3
    ef68:	ce 01       	movw	r24, r28
    ef6a:	0d 96       	adiw	r24, 0x0d	; 13
    ef6c:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    ef70:	1c 86       	std	Y+12, r1	; 0x0c
    ef72:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    ef74:	8a e0       	ldi	r24, 0x0A	; 10
    ef76:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    ef78:	1a 82       	std	Y+2, r1	; 0x02
    ef7a:	1b 82       	std	Y+3, r1	; 0x03
    ef7c:	1c 82       	std	Y+4, r1	; 0x04
    ef7e:	1d 82       	std	Y+5, r1	; 0x05
    ef80:	1e 82       	std	Y+6, r1	; 0x06
    ef82:	1f 82       	std	Y+7, r1	; 0x07
    ef84:	18 86       	std	Y+8, r1	; 0x08
    ef86:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    ef88:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    ef8a:	be 01       	movw	r22, r28
    ef8c:	6f 5f       	subi	r22, 0xFF	; 255
    ef8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef90:	81 2f       	mov	r24, r17
    ef92:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    ef96:	0e 94 7f 76 	call	0xecfe	; 0xecfe <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:132
}
    ef9a:	66 96       	adiw	r28, 0x16	; 22
    ef9c:	0f b6       	in	r0, 0x3f	; 63
    ef9e:	f8 94       	cli
    efa0:	de bf       	out	0x3e, r29	; 62
    efa2:	0f be       	out	0x3f, r0	; 63
    efa4:	cd bf       	out	0x3d, r28	; 61
    efa6:	df 91       	pop	r29
    efa8:	cf 91       	pop	r28
    efaa:	1f 91       	pop	r17
    efac:	08 95       	ret

0000efae <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    efae:	8b e0       	ldi	r24, 0x0B	; 11
    efb0:	68 9f       	mul	r22, r24
    efb2:	f0 01       	movw	r30, r0
    efb4:	11 24       	eor	r1, r1
    efb6:	e6 5a       	subi	r30, 0xA6	; 166
    efb8:	f3 4f       	sbci	r31, 0xF3	; 243
    efba:	82 85       	ldd	r24, Z+10	; 0x0a
    efbc:	0e 94 a0 77 	call	0xef40	; 0xef40 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4714
/// zruseni associace
void click_tds_deassociate_onewire(uint16_t args1, uint16_t idx, uint8_t args3)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
    efc0:	0c 94 61 bb 	jmp	0x176c2	; 0x176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000efc4 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    efc4:	af 92       	push	r10
    efc6:	bf 92       	push	r11
    efc8:	cf 92       	push	r12
    efca:	df 92       	push	r13
    efcc:	ef 92       	push	r14
    efce:	ff 92       	push	r15
    efd0:	0f 93       	push	r16
    efd2:	1f 93       	push	r17
    efd4:	cf 93       	push	r28
    efd6:	df 93       	push	r29
    efd8:	cd b7       	in	r28, 0x3d	; 61
    efda:	de b7       	in	r29, 0x3e	; 62
    efdc:	ca 54       	subi	r28, 0x4A	; 74
    efde:	d1 09       	sbc	r29, r1
    efe0:	0f b6       	in	r0, 0x3f	; 63
    efe2:	f8 94       	cli
    efe4:	de bf       	out	0x3e, r29	; 62
    efe6:	0f be       	out	0x3f, r0	; 63
    efe8:	cd bf       	out	0x3d, r28	; 61
    efea:	6c 01       	movw	r12, r24
    efec:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    efee:	be 01       	movw	r22, r28
    eff0:	6b 5c       	subi	r22, 0xCB	; 203
    eff2:	7f 4f       	sbci	r23, 0xFF	; 255
    eff4:	8e 2d       	mov	r24, r14
    eff6:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    effa:	81 30       	cpi	r24, 0x01	; 1
    effc:	d9 f5       	brne	.+118    	; 0xf074 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4247
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    effe:	8e e1       	ldi	r24, 0x1E	; 30
    f000:	e8 9e       	mul	r14, r24
    f002:	f0 01       	movw	r30, r0
    f004:	11 24       	eor	r1, r1
    f006:	e6 59       	subi	r30, 0x96	; 150
    f008:	f4 4f       	sbci	r31, 0xF4	; 244
    f00a:	65 81       	ldd	r22, Z+5	; 0x05
    f00c:	76 81       	ldd	r23, Z+6	; 0x06
    f00e:	07 2e       	mov	r0, r23
    f010:	00 0c       	add	r0, r0
    f012:	88 0b       	sbc	r24, r24
    f014:	99 0b       	sbc	r25, r25
    f016:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f01a:	20 e0       	ldi	r18, 0x00	; 0
    f01c:	30 e0       	ldi	r19, 0x00	; 0
    f01e:	4a e7       	ldi	r20, 0x7A	; 122
    f020:	54 e4       	ldi	r21, 0x44	; 68
    f022:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248
    dtostrf(te, 4, 2, str1);
    f026:	8e 01       	movw	r16, r28
    f028:	05 5e       	subi	r16, 0xE5	; 229
    f02a:	1f 4f       	sbci	r17, 0xFF	; 255
    f02c:	22 e0       	ldi	r18, 0x02	; 2
    f02e:	44 e0       	ldi	r20, 0x04	; 4
    f030:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
    strcat(str1, "C");
    f034:	67 ef       	ldi	r22, 0xF7	; 247
    f036:	73 e0       	ldi	r23, 0x03	; 3
    f038:	c8 01       	movw	r24, r16
    f03a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250
    strcpy_P(str2, current_temp_short);
    f03e:	66 ec       	ldi	r22, 0xC6	; 198
    f040:	73 e8       	ldi	r23, 0x83	; 131
    f042:	ce 01       	movw	r24, r28
    f044:	01 96       	adiw	r24, 0x01	; 1
    f046:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4251
    strcat(str2, str1);
    f04a:	b8 01       	movw	r22, r16
    f04c:	ce 01       	movw	r24, r28
    f04e:	01 96       	adiw	r24, 0x01	; 1
    f050:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4252
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    f054:	a5 01       	movw	r20, r10
    f056:	44 57       	subi	r20, 0x74	; 116
    f058:	5f 4f       	sbci	r21, 0xFF	; 255
    f05a:	b6 01       	movw	r22, r12
    f05c:	66 5f       	subi	r22, 0xF6	; 246
    f05e:	7f 4f       	sbci	r23, 0xFF	; 255
    f060:	ee 24       	eor	r14, r14
    f062:	ea 94       	dec	r14
    f064:	fe 2c       	mov	r15, r14
    f066:	10 e0       	ldi	r17, 0x00	; 0
    f068:	00 e0       	ldi	r16, 0x00	; 0
    f06a:	22 e0       	ldi	r18, 0x02	; 2
    f06c:	ce 01       	movw	r24, r28
    f06e:	01 96       	adiw	r24, 0x01	; 1
    f070:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4254
  }
}
    f074:	c6 5b       	subi	r28, 0xB6	; 182
    f076:	df 4f       	sbci	r29, 0xFF	; 255
    f078:	0f b6       	in	r0, 0x3f	; 63
    f07a:	f8 94       	cli
    f07c:	de bf       	out	0x3e, r29	; 62
    f07e:	0f be       	out	0x3f, r0	; 63
    f080:	cd bf       	out	0x3d, r28	; 61
    f082:	df 91       	pop	r29
    f084:	cf 91       	pop	r28
    f086:	1f 91       	pop	r17
    f088:	0f 91       	pop	r16
    f08a:	ff 90       	pop	r15
    f08c:	ef 90       	pop	r14
    f08e:	df 90       	pop	r13
    f090:	cf 90       	pop	r12
    f092:	bf 90       	pop	r11
    f094:	af 90       	pop	r10
    f096:	08 95       	ret

0000f098 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f098:	ff 92       	push	r15
    f09a:	0f 93       	push	r16
    f09c:	1f 93       	push	r17
    f09e:	cf 93       	push	r28
    f0a0:	df 93       	push	r29
    f0a2:	cd b7       	in	r28, 0x3d	; 61
    f0a4:	de b7       	in	r29, 0x3e	; 62
    f0a6:	a0 97       	sbiw	r28, 0x20	; 32
    f0a8:	0f b6       	in	r0, 0x3f	; 63
    f0aa:	f8 94       	cli
    f0ac:	de bf       	out	0x3e, r29	; 62
    f0ae:	0f be       	out	0x3f, r0	; 63
    f0b0:	cd bf       	out	0x3d, r28	; 61
    f0b2:	f6 2e       	mov	r15, r22
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f0b4:	be 01       	movw	r22, r28
    f0b6:	6f 5f       	subi	r22, 0xFF	; 255
    f0b8:	7f 4f       	sbci	r23, 0xFF	; 255
    f0ba:	8f 2d       	mov	r24, r15
    f0bc:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    f0c0:	be 01       	movw	r22, r28
    f0c2:	63 5f       	subi	r22, 0xF3	; 243
    f0c4:	7f 4f       	sbci	r23, 0xFF	; 255
    f0c6:	ce 01       	movw	r24, r28
    f0c8:	47 96       	adiw	r24, 0x17	; 23
    f0ca:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1454
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    f0ce:	70 e0       	ldi	r23, 0x00	; 0
    f0d0:	60 e0       	ldi	r22, 0x00	; 0
    f0d2:	87 e6       	ldi	r24, 0x67	; 103
    f0d4:	90 e0       	ldi	r25, 0x00	; 0
    f0d6:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1455
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
    f0da:	0b e0       	ldi	r16, 0x0B	; 11
    f0dc:	10 e5       	ldi	r17, 0x50	; 80
    f0de:	26 e3       	ldi	r18, 0x36	; 54
    f0e0:	39 e7       	ldi	r19, 0x79	; 121
    f0e2:	4f 2d       	mov	r20, r15
    f0e4:	68 e0       	ldi	r22, 0x08	; 8
    f0e6:	ce 01       	movw	r24, r28
    f0e8:	47 96       	adiw	r24, 0x17	; 23
    f0ea:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1457
  //dialog_save_variable_function = ;
}
    f0ee:	a0 96       	adiw	r28, 0x20	; 32
    f0f0:	0f b6       	in	r0, 0x3f	; 63
    f0f2:	f8 94       	cli
    f0f4:	de bf       	out	0x3e, r29	; 62
    f0f6:	0f be       	out	0x3f, r0	; 63
    f0f8:	cd bf       	out	0x3d, r28	; 61
    f0fa:	df 91       	pop	r29
    f0fc:	cf 91       	pop	r28
    f0fe:	1f 91       	pop	r17
    f100:	0f 91       	pop	r16
    f102:	ff 90       	pop	r15
    f104:	08 95       	ret

0000f106 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1443
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f106:	ff 92       	push	r15
    f108:	0f 93       	push	r16
    f10a:	1f 93       	push	r17
    f10c:	cf 93       	push	r28
    f10e:	df 93       	push	r29
    f110:	cd b7       	in	r28, 0x3d	; 61
    f112:	de b7       	in	r29, 0x3e	; 62
    f114:	66 97       	sbiw	r28, 0x16	; 22
    f116:	0f b6       	in	r0, 0x3f	; 63
    f118:	f8 94       	cli
    f11a:	de bf       	out	0x3e, r29	; 62
    f11c:	0f be       	out	0x3f, r0	; 63
    f11e:	cd bf       	out	0x3d, r28	; 61
    f120:	08 2f       	mov	r16, r24
    f122:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1444
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    f124:	70 e0       	ldi	r23, 0x00	; 0
    f126:	60 e0       	ldi	r22, 0x00	; 0
    f128:	86 e6       	ldi	r24, 0x66	; 102
    f12a:	90 e0       	ldi	r25, 0x00	; 0
    f12c:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f130:	be 01       	movw	r22, r28
    f132:	6f 5f       	subi	r22, 0xFF	; 255
    f134:	7f 4f       	sbci	r23, 0xFF	; 255
    f136:	8f 2d       	mov	r24, r15
    f138:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:115
  return tds.period;
    f13c:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    f13e:	85 e1       	ldi	r24, 0x15	; 21
    f140:	08 9f       	mul	r16, r24
    f142:	80 01       	movw	r16, r0
    f144:	11 24       	eor	r1, r1
    f146:	03 5a       	subi	r16, 0xA3	; 163
    f148:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1445

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    f14a:	70 e0       	ldi	r23, 0x00	; 0
    f14c:	90 e0       	ldi	r25, 0x00	; 0
    f14e:	80 e0       	ldi	r24, 0x00	; 0
    f150:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f154:	f8 01       	movw	r30, r16
    f156:	60 83       	st	Z, r22
    f158:	71 83       	std	Z+1, r23	; 0x01
    f15a:	82 83       	std	Z+2, r24	; 0x02
    f15c:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    f15e:	80 e0       	ldi	r24, 0x00	; 0
    f160:	90 e0       	ldi	r25, 0x00	; 0
    f162:	a0 e8       	ldi	r26, 0x80	; 128
    f164:	bf e3       	ldi	r27, 0x3F	; 63
    f166:	80 87       	std	Z+8, r24	; 0x08
    f168:	91 87       	std	Z+9, r25	; 0x09
    f16a:	a2 87       	std	Z+10, r26	; 0x0a
    f16c:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    f16e:	40 e0       	ldi	r20, 0x00	; 0
    f170:	50 e0       	ldi	r21, 0x00	; 0
    f172:	6f e7       	ldi	r22, 0x7F	; 127
    f174:	73 e4       	ldi	r23, 0x43	; 67
    f176:	44 83       	std	Z+4, r20	; 0x04
    f178:	55 83       	std	Z+5, r21	; 0x05
    f17a:	66 83       	std	Z+6, r22	; 0x06
    f17c:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    f17e:	86 87       	std	Z+14, r24	; 0x0e
    f180:	97 87       	std	Z+15, r25	; 0x0f
    f182:	a0 8b       	std	Z+16, r26	; 0x10
    f184:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    f186:	81 e0       	ldi	r24, 0x01	; 1
    f188:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    f18a:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    f18c:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    f18e:	87 e6       	ldi	r24, 0x67	; 103
    f190:	99 e7       	ldi	r25, 0x79	; 121
    f192:	94 8b       	std	Z+20, r25	; 0x14
    f194:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1447
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    f196:	66 96       	adiw	r28, 0x16	; 22
    f198:	0f b6       	in	r0, 0x3f	; 63
    f19a:	f8 94       	cli
    f19c:	de bf       	out	0x3e, r29	; 62
    f19e:	0f be       	out	0x3f, r0	; 63
    f1a0:	cd bf       	out	0x3d, r28	; 61
    f1a2:	df 91       	pop	r29
    f1a4:	cf 91       	pop	r28
    f1a6:	1f 91       	pop	r17
    f1a8:	0f 91       	pop	r16
    f1aa:	ff 90       	pop	r15
    f1ac:	08 95       	ret

0000f1ae <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1435
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f1ae:	ff 92       	push	r15
    f1b0:	0f 93       	push	r16
    f1b2:	1f 93       	push	r17
    f1b4:	cf 93       	push	r28
    f1b6:	df 93       	push	r29
    f1b8:	cd b7       	in	r28, 0x3d	; 61
    f1ba:	de b7       	in	r29, 0x3e	; 62
    f1bc:	66 97       	sbiw	r28, 0x16	; 22
    f1be:	0f b6       	in	r0, 0x3f	; 63
    f1c0:	f8 94       	cli
    f1c2:	de bf       	out	0x3e, r29	; 62
    f1c4:	0f be       	out	0x3f, r0	; 63
    f1c6:	cd bf       	out	0x3d, r28	; 61
    f1c8:	08 2f       	mov	r16, r24
    f1ca:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1436
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    f1cc:	70 e0       	ldi	r23, 0x00	; 0
    f1ce:	60 e0       	ldi	r22, 0x00	; 0
    f1d0:	86 e6       	ldi	r24, 0x66	; 102
    f1d2:	90 e0       	ldi	r25, 0x00	; 0
    f1d4:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f1d8:	be 01       	movw	r22, r28
    f1da:	6f 5f       	subi	r22, 0xFF	; 255
    f1dc:	7f 4f       	sbci	r23, 0xFF	; 255
    f1de:	8f 2d       	mov	r24, r15
    f1e0:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:99
  return tds.offset;
    f1e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    f1e6:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    f1e8:	85 e1       	ldi	r24, 0x15	; 21
    f1ea:	08 9f       	mul	r16, r24
    f1ec:	80 01       	movw	r16, r0
    f1ee:	11 24       	eor	r1, r1
    f1f0:	03 5a       	subi	r16, 0xA3	; 163
    f1f2:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1437
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    f1f4:	07 2e       	mov	r0, r23
    f1f6:	00 0c       	add	r0, r0
    f1f8:	88 0b       	sbc	r24, r24
    f1fa:	99 0b       	sbc	r25, r25
    f1fc:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f200:	20 e0       	ldi	r18, 0x00	; 0
    f202:	30 e0       	ldi	r19, 0x00	; 0
    f204:	4a e7       	ldi	r20, 0x7A	; 122
    f206:	54 e4       	ldi	r21, 0x44	; 68
    f208:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    f20c:	f8 01       	movw	r30, r16
    f20e:	60 83       	st	Z, r22
    f210:	71 83       	std	Z+1, r23	; 0x01
    f212:	82 83       	std	Z+2, r24	; 0x02
    f214:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].variable_min = min;
    f216:	80 e0       	ldi	r24, 0x00	; 0
    f218:	90 e0       	ldi	r25, 0x00	; 0
    f21a:	a0 e2       	ldi	r26, 0x20	; 32
    f21c:	b1 ec       	ldi	r27, 0xC1	; 193
    f21e:	80 87       	std	Z+8, r24	; 0x08
    f220:	91 87       	std	Z+9, r25	; 0x09
    f222:	a2 87       	std	Z+10, r26	; 0x0a
    f224:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    f226:	80 e0       	ldi	r24, 0x00	; 0
    f228:	90 e0       	ldi	r25, 0x00	; 0
    f22a:	a0 e2       	ldi	r26, 0x20	; 32
    f22c:	b1 e4       	ldi	r27, 0x41	; 65
    f22e:	84 83       	std	Z+4, r24	; 0x04
    f230:	95 83       	std	Z+5, r25	; 0x05
    f232:	a6 83       	std	Z+6, r26	; 0x06
    f234:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    f236:	8d ec       	ldi	r24, 0xCD	; 205
    f238:	9c ec       	ldi	r25, 0xCC	; 204
    f23a:	ac ec       	ldi	r26, 0xCC	; 204
    f23c:	bd e3       	ldi	r27, 0x3D	; 61
    f23e:	86 87       	std	Z+14, r24	; 0x0e
    f240:	97 87       	std	Z+15, r25	; 0x0f
    f242:	a0 8b       	std	Z+16, r26	; 0x10
    f244:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    f246:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    f248:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    f24a:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    f24c:	8d e9       	ldi	r24, 0x9D	; 157
    f24e:	99 e7       	ldi	r25, 0x79	; 121
    f250:	94 8b       	std	Z+20, r25	; 0x14
    f252:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1439
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    f254:	66 96       	adiw	r28, 0x16	; 22
    f256:	0f b6       	in	r0, 0x3f	; 63
    f258:	f8 94       	cli
    f25a:	de bf       	out	0x3e, r29	; 62
    f25c:	0f be       	out	0x3f, r0	; 63
    f25e:	cd bf       	out	0x3d, r28	; 61
    f260:	df 91       	pop	r29
    f262:	cf 91       	pop	r28
    f264:	1f 91       	pop	r17
    f266:	0f 91       	pop	r16
    f268:	ff 90       	pop	r15
    f26a:	08 95       	ret

0000f26c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f26c:	1f 93       	push	r17
    f26e:	cf 93       	push	r28
    f270:	df 93       	push	r29
    f272:	cd b7       	in	r28, 0x3d	; 61
    f274:	de b7       	in	r29, 0x3e	; 62
    f276:	a0 97       	sbiw	r28, 0x20	; 32
    f278:	0f b6       	in	r0, 0x3f	; 63
    f27a:	f8 94       	cli
    f27c:	de bf       	out	0x3e, r29	; 62
    f27e:	0f be       	out	0x3f, r0	; 63
    f280:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1420
  char name[10];
  display_element_get_string(name);
    f282:	ce 01       	movw	r24, r28
    f284:	47 96       	adiw	r24, 0x17	; 23
    f286:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1421
  if (strlen(name) > 0)
    f28a:	8f 89       	ldd	r24, Y+23	; 0x17
    f28c:	88 23       	and	r24, r24
    f28e:	a9 f0       	breq	.+42     	; 0xf2ba <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x4e>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    f290:	10 91 57 09 	lds	r17, 0x0957	; 0x800957 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f294:	be 01       	movw	r22, r28
    f296:	6f 5f       	subi	r22, 0xFF	; 255
    f298:	7f 4f       	sbci	r23, 0xFF	; 255
    f29a:	81 2f       	mov	r24, r17
    f29c:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    f2a0:	be 01       	movw	r22, r28
    f2a2:	69 5e       	subi	r22, 0xE9	; 233
    f2a4:	7f 4f       	sbci	r23, 0xFF	; 255
    f2a6:	ce 01       	movw	r24, r28
    f2a8:	0d 96       	adiw	r24, 0x0d	; 13
    f2aa:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    f2ae:	be 01       	movw	r22, r28
    f2b0:	6f 5f       	subi	r22, 0xFF	; 255
    f2b2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2b4:	81 2f       	mov	r24, r17
    f2b6:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1423
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    f2ba:	a0 96       	adiw	r28, 0x20	; 32
    f2bc:	0f b6       	in	r0, 0x3f	; 63
    f2be:	f8 94       	cli
    f2c0:	de bf       	out	0x3e, r29	; 62
    f2c2:	0f be       	out	0x3f, r0	; 63
    f2c4:	cd bf       	out	0x3d, r28	; 61
    f2c6:	df 91       	pop	r29
    f2c8:	cf 91       	pop	r28
    f2ca:	1f 91       	pop	r17
    f2cc:	08 95       	ret

0000f2ce <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1413
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
    f2ce:	ff 92       	push	r15
    f2d0:	0f 93       	push	r16
    f2d2:	1f 93       	push	r17
    f2d4:	cf 93       	push	r28
    f2d6:	df 93       	push	r29
    f2d8:	cd b7       	in	r28, 0x3d	; 61
    f2da:	de b7       	in	r29, 0x3e	; 62
    f2dc:	66 97       	sbiw	r28, 0x16	; 22
    f2de:	0f b6       	in	r0, 0x3f	; 63
    f2e0:	f8 94       	cli
    f2e2:	de bf       	out	0x3e, r29	; 62
    f2e4:	0f be       	out	0x3f, r0	; 63
    f2e6:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1323
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    f2e8:	95 e1       	ldi	r25, 0x15	; 21
    f2ea:	89 9f       	mul	r24, r25
    f2ec:	80 01       	movw	r16, r0
    f2ee:	11 24       	eor	r1, r1
    f2f0:	03 5a       	subi	r16, 0xA3	; 163
    f2f2:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1414
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
    f2f4:	f8 01       	movw	r30, r16
    f2f6:	60 81       	ld	r22, Z
    f2f8:	71 81       	ldd	r23, Z+1	; 0x01
    f2fa:	82 81       	ldd	r24, Z+2	; 0x02
    f2fc:	93 81       	ldd	r25, Z+3	; 0x03
    f2fe:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
    f302:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1318
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    f304:	f8 01       	movw	r30, r16
    f306:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f308:	be 01       	movw	r22, r28
    f30a:	6f 5f       	subi	r22, 0xFF	; 255
    f30c:	7f 4f       	sbci	r23, 0xFF	; 255
    f30e:	81 2f       	mov	r24, r17
    f310:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:107
  tds.period = period;
    f314:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    f316:	be 01       	movw	r22, r28
    f318:	6f 5f       	subi	r22, 0xFF	; 255
    f31a:	7f 4f       	sbci	r23, 0xFF	; 255
    f31c:	81 2f       	mov	r24, r17
    f31e:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
    f322:	66 96       	adiw	r28, 0x16	; 22
    f324:	0f b6       	in	r0, 0x3f	; 63
    f326:	f8 94       	cli
    f328:	de bf       	out	0x3e, r29	; 62
    f32a:	0f be       	out	0x3f, r0	; 63
    f32c:	cd bf       	out	0x3d, r28	; 61
    f32e:	df 91       	pop	r29
    f330:	cf 91       	pop	r28
    f332:	1f 91       	pop	r17
    f334:	0f 91       	pop	r16
    f336:	ff 90       	pop	r15
    f338:	08 95       	ret

0000f33a <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1408
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
    f33a:	cf 92       	push	r12
    f33c:	df 92       	push	r13
    f33e:	ef 92       	push	r14
    f340:	ff 92       	push	r15
    f342:	0f 93       	push	r16
    f344:	1f 93       	push	r17
    f346:	cf 93       	push	r28
    f348:	df 93       	push	r29
    f34a:	cd b7       	in	r28, 0x3d	; 61
    f34c:	de b7       	in	r29, 0x3e	; 62
    f34e:	66 97       	sbiw	r28, 0x16	; 22
    f350:	0f b6       	in	r0, 0x3f	; 63
    f352:	f8 94       	cli
    f354:	de bf       	out	0x3e, r29	; 62
    f356:	0f be       	out	0x3f, r0	; 63
    f358:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1323
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    f35a:	95 e1       	ldi	r25, 0x15	; 21
    f35c:	89 9f       	mul	r24, r25
    f35e:	80 01       	movw	r16, r0
    f360:	11 24       	eor	r1, r1
    f362:	03 5a       	subi	r16, 0xA3	; 163
    f364:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1409
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
    f366:	20 e0       	ldi	r18, 0x00	; 0
    f368:	30 e0       	ldi	r19, 0x00	; 0
    f36a:	4a e7       	ldi	r20, 0x7A	; 122
    f36c:	54 e4       	ldi	r21, 0x44	; 68
    f36e:	f8 01       	movw	r30, r16
    f370:	60 81       	ld	r22, Z
    f372:	71 81       	ldd	r23, Z+1	; 0x01
    f374:	82 81       	ldd	r24, Z+2	; 0x02
    f376:	93 81       	ldd	r25, Z+3	; 0x03
    f378:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
    f37c:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
    f380:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1318
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    f382:	f8 01       	movw	r30, r16
    f384:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f386:	be 01       	movw	r22, r28
    f388:	6f 5f       	subi	r22, 0xFF	; 255
    f38a:	7f 4f       	sbci	r23, 0xFF	; 255
    f38c:	81 2f       	mov	r24, r17
    f38e:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    f392:	dc 86       	std	Y+12, r13	; 0x0c
    f394:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    f396:	be 01       	movw	r22, r28
    f398:	6f 5f       	subi	r22, 0xFF	; 255
    f39a:	7f 4f       	sbci	r23, 0xFF	; 255
    f39c:	81 2f       	mov	r24, r17
    f39e:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1410
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}
    f3a2:	66 96       	adiw	r28, 0x16	; 22
    f3a4:	0f b6       	in	r0, 0x3f	; 63
    f3a6:	f8 94       	cli
    f3a8:	de bf       	out	0x3e, r29	; 62
    f3aa:	0f be       	out	0x3f, r0	; 63
    f3ac:	cd bf       	out	0x3d, r28	; 61
    f3ae:	df 91       	pop	r29
    f3b0:	cf 91       	pop	r28
    f3b2:	1f 91       	pop	r17
    f3b4:	0f 91       	pop	r16
    f3b6:	ff 90       	pop	r15
    f3b8:	ef 90       	pop	r14
    f3ba:	df 90       	pop	r13
    f3bc:	cf 90       	pop	r12
    f3be:	08 95       	ret

0000f3c0 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979
////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f3c0:	cf 93       	push	r28
    f3c2:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    f3c4:	70 e0       	ldi	r23, 0x00	; 0
    f3c6:	60 e0       	ldi	r22, 0x00	; 0
    f3c8:	86 e6       	ldi	r24, 0x66	; 102
    f3ca:	90 e0       	ldi	r25, 0x00	; 0
    f3cc:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f3d0:	81 e0       	ldi	r24, 0x01	; 1
    f3d2:	90 e0       	ldi	r25, 0x00	; 0
    f3d4:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    f3d8:	cd e5       	ldi	r28, 0x5D	; 93
    f3da:	d9 e0       	ldi	r29, 0x09	; 9
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5981
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
    f3dc:	68 2f       	mov	r22, r24
    f3de:	88 0f       	add	r24, r24
    f3e0:	77 0b       	sbc	r23, r23
    f3e2:	88 0b       	sbc	r24, r24
    f3e4:	99 0b       	sbc	r25, r25
    f3e6:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f3ea:	68 83       	st	Y, r22
    f3ec:	79 83       	std	Y+1, r23	; 0x01
    f3ee:	8a 83       	std	Y+2, r24	; 0x02
    f3f0:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    f3f2:	80 e0       	ldi	r24, 0x00	; 0
    f3f4:	90 e0       	ldi	r25, 0x00	; 0
    f3f6:	a0 e4       	ldi	r26, 0x40	; 64
    f3f8:	b1 ec       	ldi	r27, 0xC1	; 193
    f3fa:	88 87       	std	Y+8, r24	; 0x08
    f3fc:	99 87       	std	Y+9, r25	; 0x09
    f3fe:	aa 87       	std	Y+10, r26	; 0x0a
    f400:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].variable_max = max;
    f402:	80 e0       	ldi	r24, 0x00	; 0
    f404:	90 e0       	ldi	r25, 0x00	; 0
    f406:	a0 e4       	ldi	r26, 0x40	; 64
    f408:	b1 e4       	ldi	r27, 0x41	; 65
    f40a:	8c 83       	std	Y+4, r24	; 0x04
    f40c:	9d 83       	std	Y+5, r25	; 0x05
    f40e:	ae 83       	std	Y+6, r26	; 0x06
    f410:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].variable_step = step;
    f412:	80 e0       	ldi	r24, 0x00	; 0
    f414:	90 e0       	ldi	r25, 0x00	; 0
    f416:	a0 e8       	ldi	r26, 0x80	; 128
    f418:	bf e3       	ldi	r27, 0x3F	; 63
    f41a:	8e 87       	std	Y+14, r24	; 0x0e
    f41c:	9f 87       	std	Y+15, r25	; 0x0f
    f41e:	a8 8b       	std	Y+16, r26	; 0x10
    f420:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].number_type = number_type;
    f422:	81 e0       	ldi	r24, 0x01	; 1
    f424:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1362
  menu_dialog_variable[idx].args = args;
    f426:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1363
  menu_dialog_variable[idx].update_now = update_now;
    f428:	1c 86       	std	Y+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1364
  menu_dialog_variable[idx].save_function = save_function;
    f42a:	82 e3       	ldi	r24, 0x32	; 50
    f42c:	91 e7       	ldi	r25, 0x71	; 113
    f42e:	9c 8b       	std	Y+20, r25	; 0x14
    f430:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5982
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
}
    f432:	df 91       	pop	r29
    f434:	cf 91       	pop	r28
    f436:	08 95       	ret

0000f438 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5823
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka synchronizace NTP casu
*/
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f438:	0f 93       	push	r16
    f43a:	1f 93       	push	r17
    f43c:	cf 93       	push	r28
    f43e:	df 93       	push	r29
    f440:	cd b7       	in	r28, 0x3d	; 61
    f442:	de b7       	in	r29, 0x3e	; 62
    f444:	c4 55       	subi	r28, 0x54	; 84
    f446:	d1 09       	sbc	r29, r1
    f448:	0f b6       	in	r0, 0x3f	; 63
    f44a:	f8 94       	cli
    f44c:	de bf       	out	0x3e, r29	; 62
    f44e:	0f be       	out	0x3f, r0	; 63
    f450:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    f452:	1b 82       	std	Y+3, r1	; 0x03
    f454:	86 ed       	ldi	r24, 0xD6	; 214
    f456:	93 e0       	ldi	r25, 0x03	; 3
    f458:	9d 83       	std	Y+5, r25	; 0x05
    f45a:	8c 83       	std	Y+4, r24	; 0x04
    f45c:	89 e3       	ldi	r24, 0x39	; 57
    f45e:	95 e0       	ldi	r25, 0x05	; 5
    f460:	9f 83       	std	Y+7, r25	; 0x07
    f462:	8e 83       	std	Y+6, r24	; 0x06
    f464:	18 86       	std	Y+8, r1	; 0x08
    f466:	19 86       	std	Y+9, r1	; 0x09
    f468:	1a 86       	std	Y+10, r1	; 0x0a
    f46a:	1b 86       	std	Y+11, r1	; 0x0b
    f46c:	80 e6       	ldi	r24, 0x60	; 96
    f46e:	9a ee       	ldi	r25, 0xEA	; 234
    f470:	a0 e0       	ldi	r26, 0x00	; 0
    f472:	b0 e0       	ldi	r27, 0x00	; 0
    f474:	8c 87       	std	Y+12, r24	; 0x0c
    f476:	9d 87       	std	Y+13, r25	; 0x0d
    f478:	ae 87       	std	Y+14, r26	; 0x0e
    f47a:	bf 87       	std	Y+15, r27	; 0x0f
    f47c:	18 8a       	std	Y+16, r1	; 0x10
    f47e:	19 8a       	std	Y+17, r1	; 0x11
    f480:	1a 8a       	std	Y+18, r1	; 0x12
    f482:	1b 8a       	std	Y+19, r1	; 0x13
    f484:	1c 8a       	std	Y+20, r1	; 0x14
    f486:	1d 8a       	std	Y+21, r1	; 0x15
    f488:	1e 8a       	std	Y+22, r1	; 0x16
    f48a:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    f48c:	88 ee       	ldi	r24, 0xE8	; 232
    f48e:	91 e1       	ldi	r25, 0x11	; 17
    f490:	9a 83       	std	Y+2, r25	; 0x02
    f492:	89 83       	std	Y+1, r24	; 0x01
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5826
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
    f494:	ce 01       	movw	r24, r28
    f496:	88 5b       	subi	r24, 0xB8	; 184
    f498:	9f 4f       	sbci	r25, 0xFF	; 255
    f49a:	0e 94 99 c0 	call	0x18132	; 0x18132 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f49e:	81 e0       	ldi	r24, 0x01	; 1
    f4a0:	90 e0       	ldi	r25, 0x00	; 0
    f4a2:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5827
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    f4a6:	ae 01       	movw	r20, r28
    f4a8:	48 5b       	subi	r20, 0xB8	; 184
    f4aa:	5f 4f       	sbci	r21, 0xFF	; 255
    f4ac:	68 2f       	mov	r22, r24
    f4ae:	ce 01       	movw	r24, r28
    f4b0:	01 96       	adiw	r24, 0x01	; 1
    f4b2:	0e 94 b5 bf 	call	0x17f6a	; 0x17f6a <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
    f4b6:	81 30       	cpi	r24, 0x01	; 1
    f4b8:	09 f0       	breq	.+2      	; 0xf4bc <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x84>
    f4ba:	42 c0       	rjmp	.+132    	; 0xf540 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x108>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f4bc:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
    f4c0:	8d 7f       	andi	r24, 0xFD	; 253
    f4c2:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5830
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
  {
    selftest_clear_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    f4c6:	70 e0       	ldi	r23, 0x00	; 0
    f4c8:	60 e0       	ldi	r22, 0x00	; 0
    f4ca:	88 e6       	ldi	r24, 0x68	; 104
    f4cc:	90 e0       	ldi	r25, 0x00	; 0
    f4ce:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5831
    sprintf(str2, "%02d:%02d", ted.hour(), ted.minute());
    f4d2:	2d 96       	adiw	r28, 0x0d	; 13
    f4d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    f4d6:	2d 97       	sbiw	r28, 0x0d	; 13
    f4d8:	1f 92       	push	r1
    f4da:	8f 93       	push	r24
    f4dc:	2c 96       	adiw	r28, 0x0c	; 12
    f4de:	8f ad       	ldd	r24, Y+63	; 0x3f
    f4e0:	2c 97       	sbiw	r28, 0x0c	; 12
    f4e2:	1f 92       	push	r1
    f4e4:	8f 93       	push	r24
    f4e6:	8f e7       	ldi	r24, 0x7F	; 127
    f4e8:	93 e0       	ldi	r25, 0x03	; 3
    f4ea:	9f 93       	push	r25
    f4ec:	8f 93       	push	r24
    f4ee:	8e 01       	movw	r16, r28
    f4f0:	01 5b       	subi	r16, 0xB1	; 177
    f4f2:	1f 4f       	sbci	r17, 0xFF	; 255
    f4f4:	1f 93       	push	r17
    f4f6:	0f 93       	push	r16
    f4f8:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5832
    strcpy_P(dialog_text, new_text_ok_ntp_time);
    f4fc:	67 ee       	ldi	r22, 0xE7	; 231
    f4fe:	75 e8       	ldi	r23, 0x85	; 133
    f500:	81 eb       	ldi	r24, 0xB1	; 177
    f502:	99 e0       	ldi	r25, 0x09	; 9
    f504:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5833
    strcat(dialog_text, " ");
    f508:	67 ed       	ldi	r22, 0xD7	; 215
    f50a:	76 e0       	ldi	r23, 0x06	; 6
    f50c:	81 eb       	ldi	r24, 0xB1	; 177
    f50e:	99 e0       	ldi	r25, 0x09	; 9
    f510:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5834
    strcat(dialog_text, str2);
    f514:	b8 01       	movw	r22, r16
    f516:	81 eb       	ldi	r24, 0xB1	; 177
    f518:	99 e0       	ldi	r25, 0x09	; 9
    f51a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
    f51e:	0f b6       	in	r0, 0x3f	; 63
    f520:	f8 94       	cli
    f522:	de bf       	out	0x3e, r29	; 62
    f524:	0f be       	out	0x3f, r0	; 63
    f526:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5842
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
    f528:	cc 5a       	subi	r28, 0xAC	; 172
    f52a:	df 4f       	sbci	r29, 0xFF	; 255
    f52c:	0f b6       	in	r0, 0x3f	; 63
    f52e:	f8 94       	cli
    f530:	de bf       	out	0x3e, r29	; 62
    f532:	0f be       	out	0x3f, r0	; 63
    f534:	cd bf       	out	0x3d, r28	; 61
    f536:	df 91       	pop	r29
    f538:	cf 91       	pop	r28
    f53a:	1f 91       	pop	r17
    f53c:	0f 91       	pop	r16
    f53e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5838
    strcat(dialog_text, " ");
    strcat(dialog_text, str2);
  }
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    f540:	81 e0       	ldi	r24, 0x01	; 1
    f542:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5839
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    f546:	70 e0       	ldi	r23, 0x00	; 0
    f548:	60 e0       	ldi	r22, 0x00	; 0
    f54a:	88 e6       	ldi	r24, 0x68	; 104
    f54c:	90 e0       	ldi	r25, 0x00	; 0
    f54e:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5840
    strcpy_P(dialog_text, new_text_error_ntp_time);
    f552:	61 ed       	ldi	r22, 0xD1	; 209
    f554:	75 e8       	ldi	r23, 0x85	; 133
    f556:	81 eb       	ldi	r24, 0xB1	; 177
    f558:	99 e0       	ldi	r25, 0x09	; 9
    f55a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
    f55e:	e4 cf       	rjmp	.-56     	; 0xf528 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xf0>

0000f560 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    f560:	cf 93       	push	r28
    f562:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
  if (idx < MAX_RTDS)
    f564:	8a 30       	cpi	r24, 0x0A	; 10
    f566:	68 f4       	brcc	.+26     	; 0xf582 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    f568:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    f56a:	24 e1       	ldi	r18, 0x14	; 20
    f56c:	82 9f       	mul	r24, r18
    f56e:	c0 01       	movw	r24, r0
    f570:	11 24       	eor	r1, r1
    f572:	83 54       	subi	r24, 0x43	; 67
    f574:	9a 4f       	sbci	r25, 0xFA	; 250
    f576:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    f57a:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
  }
  else
    *active = 255;
}
    f57c:	df 91       	pop	r29
    f57e:	cf 91       	pop	r28
    f580:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1818
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    f582:	8f ef       	ldi	r24, 0xFF	; 255
    f584:	fb 01       	movw	r30, r22
    f586:	80 83       	st	Z, r24
    f588:	f9 cf       	rjmp	.-14     	; 0xf57c <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000f58a <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4790
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint16_t args1, uint16_t args2, uint8_t loop_idx)
{
    f58a:	1f 93       	push	r17
    f58c:	cf 93       	push	r28
    f58e:	df 93       	push	r29
    f590:	1f 92       	push	r1
    f592:	cd b7       	in	r28, 0x3d	; 61
    f594:	de b7       	in	r29, 0x3e	; 62
    f596:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    f598:	be 01       	movw	r22, r28
    f59a:	6f 5f       	subi	r22, 0xFF	; 255
    f59c:	7f 4f       	sbci	r23, 0xFF	; 255
    f59e:	84 2f       	mov	r24, r20
    f5a0:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4796
  if (active == 1)
    f5a4:	89 81       	ldd	r24, Y+1	; 0x01
    f5a6:	81 30       	cpi	r24, 0x01	; 1
    f5a8:	31 f4       	brne	.+12     	; 0xf5b6 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4798
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx, 0);
    f5aa:	61 2f       	mov	r22, r17
    f5ac:	70 e0       	ldi	r23, 0x00	; 0
    f5ae:	87 e0       	ldi	r24, 0x07	; 7
    f5b0:	90 e0       	ldi	r25, 0x00	; 0
    f5b2:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
  }
}
    f5b6:	0f 90       	pop	r0
    f5b8:	df 91       	pop	r29
    f5ba:	cf 91       	pop	r28
    f5bc:	1f 91       	pop	r17
    f5be:	08 95       	ret

0000f5c0 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    f5c0:	1f 93       	push	r17
    f5c2:	cf 93       	push	r28
    f5c4:	df 93       	push	r29
    f5c6:	1f 92       	push	r1
    f5c8:	cd b7       	in	r28, 0x3d	; 61
    f5ca:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f5cc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1882
  {
    remote_tds_get_active(idx, &active);
    f5ce:	be 01       	movw	r22, r28
    f5d0:	6f 5f       	subi	r22, 0xFF	; 255
    f5d2:	7f 4f       	sbci	r23, 0xFF	; 255
    f5d4:	81 2f       	mov	r24, r17
    f5d6:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
    if (active == 0)
    f5da:	89 81       	ldd	r24, Y+1	; 0x01
    f5dc:	88 23       	and	r24, r24
    f5de:	21 f0       	breq	.+8      	; 0xf5e8 <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f5e0:	1f 5f       	subi	r17, 0xFF	; 255
    f5e2:	1a 30       	cpi	r17, 0x0A	; 10
    f5e4:	a1 f7       	brne	.-24     	; 0xf5ce <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    f5e6:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
      ret = idx;
      break;
    }
  }
  return ret;
}
    f5e8:	81 2f       	mov	r24, r17
    f5ea:	0f 90       	pop	r0
    f5ec:	df 91       	pop	r29
    f5ee:	cf 91       	pop	r28
    f5f0:	1f 91       	pop	r17
    f5f2:	08 95       	ret

0000f5f4 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4744
  }
  return cnt;
}

void click_rtds_add_sensor(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f5f4:	ff 92       	push	r15
    f5f6:	0f 93       	push	r16
    f5f8:	1f 93       	push	r17
    f5fa:	cf 93       	push	r28
    f5fc:	df 93       	push	r29
    f5fe:	00 d0       	rcall	.+0      	; 0xf600 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0xc>
    f600:	1f 92       	push	r1
    f602:	1f 92       	push	r1
    f604:	cd b7       	in	r28, 0x3d	; 61
    f606:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4747
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    f608:	0e 94 e0 7a 	call	0xf5c0	; 0xf5c0 <remote_tds_find_free()>
    f60c:	f8 2e       	mov	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4748
  if (idx != 255)
    f60e:	8f ef       	ldi	r24, 0xFF	; 255
    f610:	f8 16       	cp	r15, r24
    f612:	b1 f0       	breq	.+44     	; 0xf640 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4750
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    f614:	60 e2       	ldi	r22, 0x20	; 32
    f616:	74 e8       	ldi	r23, 0x84	; 132
    f618:	ce 01       	movw	r24, r28
    f61a:	01 96       	adiw	r24, 0x01	; 1
    f61c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4751
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    f620:	70 e0       	ldi	r23, 0x00	; 0
    f622:	60 e0       	ldi	r22, 0x00	; 0
    f624:	87 e6       	ldi	r24, 0x67	; 103
    f626:	90 e0       	ldi	r25, 0x00	; 0
    f628:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
    f62c:	0b e0       	ldi	r16, 0x0B	; 11
    f62e:	10 e5       	ldi	r17, 0x50	; 80
    f630:	21 eb       	ldi	r18, 0xB1	; 177
    f632:	30 e8       	ldi	r19, 0x80	; 128
    f634:	4f 2d       	mov	r20, r15
    f636:	62 e1       	ldi	r22, 0x12	; 18
    f638:	ce 01       	movw	r24, r28
    f63a:	01 96       	adiw	r24, 0x01	; 1
    f63c:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4754
  }
}
    f640:	0f 90       	pop	r0
    f642:	0f 90       	pop	r0
    f644:	0f 90       	pop	r0
    f646:	0f 90       	pop	r0
    f648:	0f 90       	pop	r0
    f64a:	df 91       	pop	r29
    f64c:	cf 91       	pop	r28
    f64e:	1f 91       	pop	r17
    f650:	0f 91       	pop	r16
    f652:	ff 90       	pop	r15
    f654:	08 95       	ret

0000f656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    f656:	af 92       	push	r10
    f658:	bf 92       	push	r11
    f65a:	cf 92       	push	r12
    f65c:	df 92       	push	r13
    f65e:	ef 92       	push	r14
    f660:	ff 92       	push	r15
    f662:	0f 93       	push	r16
    f664:	1f 93       	push	r17
    f666:	cf 93       	push	r28
    f668:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1775
  char t;
  if (idx < MAX_RTDS)
    f66a:	8a 30       	cpi	r24, 0x0A	; 10
    f66c:	88 f5       	brcc	.+98     	; 0xf6d0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    f66e:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    f670:	94 e1       	ldi	r25, 0x14	; 20
    f672:	89 9f       	mul	r24, r25
    f674:	e0 01       	movw	r28, r0
    f676:	11 24       	eor	r1, r1
    f678:	6e 01       	movw	r12, r28
    f67a:	e6 e5       	ldi	r30, 0x56	; 86
    f67c:	ce 1a       	sub	r12, r30
    f67e:	ea ef       	ldi	r30, 0xFA	; 250
    f680:	de 0a       	sbc	r13, r30
    f682:	8a 01       	movw	r16, r20
    f684:	5e 01       	movw	r10, r28
    f686:	f4 e4       	ldi	r31, 0x44	; 68
    f688:	af 1a       	sub	r10, r31
    f68a:	fa ef       	ldi	r31, 0xFA	; 250
    f68c:	bf 0a       	sbc	r11, r31
    f68e:	c6 01       	movw	r24, r12
    f690:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
      name[i] = t;
    f694:	f8 01       	movw	r30, r16
    f696:	81 93       	st	Z+, r24
    f698:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1781
      name[i + 1] = 0;
    f69a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1782
      if (t == 0) break;
    f69c:	88 23       	and	r24, r24
    f69e:	31 f0       	breq	.+12     	; 0xf6ac <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    f6a0:	ff ef       	ldi	r31, 0xFF	; 255
    f6a2:	cf 1a       	sub	r12, r31
    f6a4:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    f6a6:	ca 14       	cp	r12, r10
    f6a8:	db 04       	cpc	r13, r11
    f6aa:	89 f7       	brne	.-30     	; 0xf68e <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1784
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    f6ac:	ce 01       	movw	r24, r28
    f6ae:	83 54       	subi	r24, 0x43	; 67
    f6b0:	9a 4f       	sbci	r25, 0xFA	; 250
    f6b2:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    f6b6:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
  }
  else
  {
    *active = 255;
    f6b8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
  }
}
    f6ba:	df 91       	pop	r29
    f6bc:	cf 91       	pop	r28
    f6be:	1f 91       	pop	r17
    f6c0:	0f 91       	pop	r16
    f6c2:	ff 90       	pop	r15
    f6c4:	ef 90       	pop	r14
    f6c6:	df 90       	pop	r13
    f6c8:	cf 90       	pop	r12
    f6ca:	bf 90       	pop	r11
    f6cc:	af 90       	pop	r10
    f6ce:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    f6d0:	8f ef       	ldi	r24, 0xFF	; 255
    f6d2:	fb 01       	movw	r30, r22
    f6d4:	f1 cf       	rjmp	.-30     	; 0xf6b8 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000f6d6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4860
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    f6d6:	7f 92       	push	r7
    f6d8:	8f 92       	push	r8
    f6da:	9f 92       	push	r9
    f6dc:	af 92       	push	r10
    f6de:	bf 92       	push	r11
    f6e0:	cf 92       	push	r12
    f6e2:	df 92       	push	r13
    f6e4:	ef 92       	push	r14
    f6e6:	ff 92       	push	r15
    f6e8:	0f 93       	push	r16
    f6ea:	1f 93       	push	r17
    f6ec:	cf 93       	push	r28
    f6ee:	df 93       	push	r29
    f6f0:	cd b7       	in	r28, 0x3d	; 61
    f6f2:	de b7       	in	r29, 0x3e	; 62
    f6f4:	aa 97       	sbiw	r28, 0x2a	; 42
    f6f6:	0f b6       	in	r0, 0x3f	; 63
    f6f8:	f8 94       	cli
    f6fa:	de bf       	out	0x3e, r29	; 62
    f6fc:	0f be       	out	0x3f, r0	; 63
    f6fe:	cd bf       	out	0x3d, r28	; 61
    f700:	78 2e       	mov	r7, r24
    f702:	e4 2e       	mov	r14, r20
    f704:	69 01       	movw	r12, r18
    f706:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4864
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
    f708:	67 e3       	ldi	r22, 0x37	; 55
    f70a:	74 e8       	ldi	r23, 0x84	; 132
    f70c:	c9 01       	movw	r24, r18
    f70e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4865
  strcpy(line2, "");
    f712:	62 e0       	ldi	r22, 0x02	; 2
    f714:	73 e0       	ldi	r23, 0x03	; 3
    f716:	c8 01       	movw	r24, r16
    f718:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
    f71c:	88 ec       	ldi	r24, 0xC8	; 200
    f71e:	88 2e       	mov	r8, r24
    f720:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f722:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4862
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    f724:	f1 2c       	mov	r15, r1
tds_used():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    f726:	c4 01       	movw	r24, r8
    f728:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4870
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    f72c:	81 30       	cpi	r24, 0x01	; 1
    f72e:	11 f4       	brne	.+4      	; 0xf734 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>
    f730:	ee 20       	and	r14, r14
    f732:	19 f0       	breq	.+6      	; 0xf73a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    f734:	81 e0       	ldi	r24, 0x01	; 1
    f736:	e8 12       	cpse	r14, r24
    f738:	2f c0       	rjmp	.+94     	; 0xf798 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4872
    {
      if (cri == args1)
    f73a:	7f 10       	cpse	r7, r15
    f73c:	2c c0       	rjmp	.+88     	; 0xf796 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f73e:	be 01       	movw	r22, r28
    f740:	6f 5f       	subi	r22, 0xFF	; 255
    f742:	7f 4f       	sbci	r23, 0xFF	; 255
    f744:	81 2f       	mov	r24, r17
    f746:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    f74a:	be 01       	movw	r22, r28
    f74c:	63 5f       	subi	r22, 0xF3	; 243
    f74e:	7f 4f       	sbci	r23, 0xFF	; 255
    f750:	ce 01       	movw	r24, r28
    f752:	47 96       	adiw	r24, 0x17	; 23
    f754:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4875
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    f758:	be 01       	movw	r22, r28
    f75a:	69 5e       	subi	r22, 0xE9	; 233
    f75c:	7f 4f       	sbci	r23, 0xFF	; 255
    f75e:	c5 01       	movw	r24, r10
    f760:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4876
        strcpy_P(line1, nastaveni_onewire);
    f764:	67 e3       	ldi	r22, 0x37	; 55
    f766:	74 e8       	ldi	r23, 0x84	; 132
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    f768:	c6 01       	movw	r24, r12
    f76a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4903
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    f76e:	aa 96       	adiw	r28, 0x2a	; 42
    f770:	0f b6       	in	r0, 0x3f	; 63
    f772:	f8 94       	cli
    f774:	de bf       	out	0x3e, r29	; 62
    f776:	0f be       	out	0x3f, r0	; 63
    f778:	cd bf       	out	0x3d, r28	; 61
    f77a:	df 91       	pop	r29
    f77c:	cf 91       	pop	r28
    f77e:	1f 91       	pop	r17
    f780:	0f 91       	pop	r16
    f782:	ff 90       	pop	r15
    f784:	ef 90       	pop	r14
    f786:	df 90       	pop	r13
    f788:	cf 90       	pop	r12
    f78a:	bf 90       	pop	r11
    f78c:	af 90       	pop	r10
    f78e:	9f 90       	pop	r9
    f790:	8f 90       	pop	r8
    f792:	7f 90       	pop	r7
    f794:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4879
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    f796:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f798:	1f 5f       	subi	r17, 0xFF	; 255
    f79a:	86 e1       	ldi	r24, 0x16	; 22
    f79c:	88 0e       	add	r8, r24
    f79e:	91 1c       	adc	r9, r1
    f7a0:	16 30       	cpi	r17, 0x06	; 6
    f7a2:	09 f6       	brne	.-126    	; 0xf726 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4883
      }
      cri++;
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
    f7a4:	68 e2       	ldi	r22, 0x28	; 40
    f7a6:	74 e8       	ldi	r23, 0x84	; 132
    f7a8:	c6 01       	movw	r24, r12
    f7aa:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4884
  strcpy(line2, "");
    f7ae:	62 e0       	ldi	r22, 0x02	; 2
    f7b0:	73 e0       	ldi	r23, 0x03	; 3
    f7b2:	c5 01       	movw	r24, r10
    f7b4:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4885
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f7b8:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4887
  {
    remote_tds_get_active(idx, &active);
    f7ba:	be 01       	movw	r22, r28
    f7bc:	6f 5f       	subi	r22, 0xFF	; 255
    f7be:	7f 4f       	sbci	r23, 0xFF	; 255
    f7c0:	81 2f       	mov	r24, r17
    f7c2:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    f7c6:	89 81       	ldd	r24, Y+1	; 0x01
    f7c8:	81 30       	cpi	r24, 0x01	; 1
    f7ca:	d9 f4       	brne	.+54     	; 0xf802 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    f7cc:	e1 10       	cpse	r14, r1
    f7ce:	19 c0       	rjmp	.+50     	; 0xf802 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    f7d0:	81 2f       	mov	r24, r17
    f7d2:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
    f7d6:	81 30       	cpi	r24, 0x01	; 1
    f7d8:	b9 f4       	brne	.+46     	; 0xf808 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4890
    {
      if (cri == args1)
    f7da:	7f 10       	cpse	r7, r15
    f7dc:	19 c0       	rjmp	.+50     	; 0xf810 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x13a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4892
      {
        remote_tds_get_complete(idx, &active, name);
    f7de:	ae 01       	movw	r20, r28
    f7e0:	49 5e       	subi	r20, 0xE9	; 233
    f7e2:	5f 4f       	sbci	r21, 0xFF	; 255
    f7e4:	be 01       	movw	r22, r28
    f7e6:	6f 5f       	subi	r22, 0xFF	; 255
    f7e8:	7f 4f       	sbci	r23, 0xFF	; 255
    f7ea:	81 2f       	mov	r24, r17
    f7ec:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4893
        strcpy(line2, name);
    f7f0:	be 01       	movw	r22, r28
    f7f2:	69 5e       	subi	r22, 0xE9	; 233
    f7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    f7f6:	c5 01       	movw	r24, r10
    f7f8:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
        strcpy_P(line1, nastaveni_rtds);
    f7fc:	68 e2       	ldi	r22, 0x28	; 40
    f7fe:	74 e8       	ldi	r23, 0x84	; 132
    f800:	b3 cf       	rjmp	.-154    	; 0xf768 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4888
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_active(idx, &active);
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    f802:	81 e0       	ldi	r24, 0x01	; 1
    f804:	e8 16       	cp	r14, r24
    f806:	49 f3       	breq	.-46     	; 0xf7da <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4885
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f808:	1f 5f       	subi	r17, 0xFF	; 255
    f80a:	1a 30       	cpi	r17, 0x0A	; 10
    f80c:	b1 f6       	brne	.-84     	; 0xf7ba <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe4>
    f80e:	af cf       	rjmp	.-162    	; 0xf76e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4897
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
        goto button_get_show_default_temp_end;
      }
      cri++;
    f810:	f3 94       	inc	r15
    f812:	fa cf       	rjmp	.-12     	; 0xf808 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>

0000f814 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_show_default_temp_1hhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4906
  /// hack kvuli goto
  cri = 0;
}

void button_get_show_default_temp_1(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    f814:	0f 93       	push	r16
    f816:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4907
  button_get_show_default_temp(args1, args2, args3, line1, line2);
    f818:	0e 94 6b 7b 	call	0xf6d6	; 0xf6d6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4908
}
    f81c:	1f 91       	pop	r17
    f81e:	0f 91       	pop	r16
    f820:	08 95       	ret

0000f822 <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
    f822:	8f 92       	push	r8
    f824:	9f 92       	push	r9
    f826:	af 92       	push	r10
    f828:	bf 92       	push	r11
    f82a:	cf 92       	push	r12
    f82c:	df 92       	push	r13
    f82e:	ef 92       	push	r14
    f830:	ff 92       	push	r15
    f832:	0f 93       	push	r16
    f834:	1f 93       	push	r17
    f836:	cf 93       	push	r28
    f838:	df 93       	push	r29
    f83a:	cd b7       	in	r28, 0x3d	; 61
    f83c:	de b7       	in	r29, 0x3e	; 62
    f83e:	67 97       	sbiw	r28, 0x17	; 23
    f840:	0f b6       	in	r0, 0x3f	; 63
    f842:	f8 94       	cli
    f844:	de bf       	out	0x3e, r29	; 62
    f846:	0f be       	out	0x3f, r0	; 63
    f848:	cd bf       	out	0x3d, r28	; 61
    f84a:	98 2e       	mov	r9, r24
    f84c:	6b 01       	movw	r12, r22
    f84e:	5a 01       	movw	r10, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4810
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    f850:	62 e2       	ldi	r22, 0x22	; 34
    f852:	74 e8       	ldi	r23, 0x84	; 132
    f854:	c6 01       	movw	r24, r12
    f856:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4811
  *temp = 0.0;
    f85a:	f5 01       	movw	r30, r10
    f85c:	10 82       	st	Z, r1
    f85e:	11 82       	std	Z+1, r1	; 0x01
    f860:	12 82       	std	Z+2, r1	; 0x02
    f862:	13 82       	std	Z+3, r1	; 0x03
    f864:	f1 2c       	mov	r15, r1
    f866:	e1 2c       	mov	r14, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4807
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    f868:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    f86a:	8e e1       	ldi	r24, 0x1E	; 30
    f86c:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4814
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    f86e:	be 01       	movw	r22, r28
    f870:	6f 5f       	subi	r22, 0xFF	; 255
    f872:	7f 4f       	sbci	r23, 0xFF	; 255
    f874:	8e 2d       	mov	r24, r14
    f876:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    f87a:	81 30       	cpi	r24, 0x01	; 1
    f87c:	e9 f5       	brne	.+122    	; 0xf8f8 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4815
      if (tds.used == 1)
    f87e:	89 81       	ldd	r24, Y+1	; 0x01
    f880:	81 30       	cpi	r24, 0x01	; 1
    f882:	d1 f5       	brne	.+116    	; 0xf8f8 <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4817
      {
        if (cri == device)
    f884:	90 12       	cpse	r9, r16
    f886:	37 c0       	rjmp	.+110    	; 0xf8f6 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4819
        {
          strcpy(name, tds.name);
    f888:	be 01       	movw	r22, r28
    f88a:	63 5f       	subi	r22, 0xF3	; 243
    f88c:	7f 4f       	sbci	r23, 0xFF	; 255
    f88e:	c6 01       	movw	r24, r12
    f890:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4820
          if (status_tds18s20[idx].online == True)
    f894:	8e 9c       	mul	r8, r14
    f896:	f0 01       	movw	r30, r0
    f898:	8f 9c       	mul	r8, r15
    f89a:	f0 0d       	add	r31, r0
    f89c:	11 24       	eor	r1, r1
    f89e:	e6 59       	subi	r30, 0x96	; 150
    f8a0:	f4 4f       	sbci	r31, 0xF4	; 244
    f8a2:	13 8d       	ldd	r17, Z+27	; 0x1b
    f8a4:	11 30       	cpi	r17, 0x01	; 1
    f8a6:	39 f5       	brne	.+78     	; 0xf8f6 <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    f8a8:	65 81       	ldd	r22, Z+5	; 0x05
    f8aa:	76 81       	ldd	r23, Z+6	; 0x06
    f8ac:	07 2e       	mov	r0, r23
    f8ae:	00 0c       	add	r0, r0
    f8b0:	88 0b       	sbc	r24, r24
    f8b2:	99 0b       	sbc	r25, r25
    f8b4:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f8b8:	20 e0       	ldi	r18, 0x00	; 0
    f8ba:	30 e0       	ldi	r19, 0x00	; 0
    f8bc:	4a e7       	ldi	r20, 0x7A	; 122
    f8be:	54 e4       	ldi	r21, 0x44	; 68
    f8c0:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    f8c4:	f5 01       	movw	r30, r10
    f8c6:	60 83       	st	Z, r22
    f8c8:	71 83       	std	Z+1, r23	; 0x01
    f8ca:	82 83       	std	Z+2, r24	; 0x02
    f8cc:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4851
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
}
    f8ce:	81 2f       	mov	r24, r17
    f8d0:	67 96       	adiw	r28, 0x17	; 23
    f8d2:	0f b6       	in	r0, 0x3f	; 63
    f8d4:	f8 94       	cli
    f8d6:	de bf       	out	0x3e, r29	; 62
    f8d8:	0f be       	out	0x3f, r0	; 63
    f8da:	cd bf       	out	0x3d, r28	; 61
    f8dc:	df 91       	pop	r29
    f8de:	cf 91       	pop	r28
    f8e0:	1f 91       	pop	r17
    f8e2:	0f 91       	pop	r16
    f8e4:	ff 90       	pop	r15
    f8e6:	ef 90       	pop	r14
    f8e8:	df 90       	pop	r13
    f8ea:	cf 90       	pop	r12
    f8ec:	bf 90       	pop	r11
    f8ee:	af 90       	pop	r10
    f8f0:	9f 90       	pop	r9
    f8f2:	8f 90       	pop	r8
    f8f4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    f8f6:	0f 5f       	subi	r16, 0xFF	; 255
    f8f8:	ff ef       	ldi	r31, 0xFF	; 255
    f8fa:	ef 1a       	sub	r14, r31
    f8fc:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4813
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f8fe:	86 e0       	ldi	r24, 0x06	; 6
    f900:	e8 16       	cp	r14, r24
    f902:	f1 04       	cpc	r15, r1
    f904:	09 f0       	breq	.+2      	; 0xf908 <get_global_temp(unsigned char, char*, float*)+0xe6>
    f906:	b3 cf       	rjmp	.-154    	; 0xf86e <get_global_temp(unsigned char, char*, float*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f908:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
  {
    remote_tds_get_active(idx, &active);
    f90a:	be 01       	movw	r22, r28
    f90c:	69 5e       	subi	r22, 0xE9	; 233
    f90e:	7f 4f       	sbci	r23, 0xFF	; 255
    f910:	81 2f       	mov	r24, r17
    f912:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4833
    if (active == 1)
    f916:	8f 89       	ldd	r24, Y+23	; 0x17
    f918:	81 30       	cpi	r24, 0x01	; 1
    f91a:	51 f5       	brne	.+84     	; 0xf970 <get_global_temp(unsigned char, char*, float*)+0x14e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4835
    {
      if (cri == device)
    f91c:	90 12       	cpse	r9, r16
    f91e:	27 c0       	rjmp	.+78     	; 0xf96e <get_global_temp(unsigned char, char*, float*)+0x14c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
      {
        remote_tds_get_complete(idx, &active, name);
    f920:	a6 01       	movw	r20, r12
    f922:	be 01       	movw	r22, r28
    f924:	69 5e       	subi	r22, 0xE9	; 233
    f926:	7f 4f       	sbci	r23, 0xFF	; 255
    f928:	81 2f       	mov	r24, r17
    f92a:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4838
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
    f92e:	81 2f       	mov	r24, r17
    f930:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <remote_tds_get_last_update(unsigned char)>
    f934:	8a 3f       	cpi	r24, 0xFA	; 250
    f936:	d8 f4       	brcc	.+54     	; 0xf96e <get_global_temp(unsigned char, char*, float*)+0x14c>
    f938:	81 2f       	mov	r24, r17
    f93a:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
    f93e:	81 30       	cpi	r24, 0x01	; 1
    f940:	b1 f4       	brne	.+44     	; 0xf96e <get_global_temp(unsigned char, char*, float*)+0x14c>
remote_tds_get_data():
    f942:	81 2f       	mov	r24, r17
    f944:	0e 94 43 53 	call	0xa686	; 0xa686 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    f948:	bc 01       	movw	r22, r24
    f94a:	99 0f       	add	r25, r25
    f94c:	88 0b       	sbc	r24, r24
    f94e:	99 0b       	sbc	r25, r25
    f950:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    f954:	20 e0       	ldi	r18, 0x00	; 0
    f956:	30 e0       	ldi	r19, 0x00	; 0
    f958:	4a e7       	ldi	r20, 0x7A	; 122
    f95a:	54 e4       	ldi	r21, 0x44	; 68
    f95c:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
    f960:	f5 01       	movw	r30, r10
    f962:	60 83       	st	Z, r22
    f964:	71 83       	std	Z+1, r23	; 0x01
    f966:	82 83       	std	Z+2, r24	; 0x02
    f968:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
          ret = 2;
    f96a:	12 e0       	ldi	r17, 0x02	; 2
    f96c:	b0 cf       	rjmp	.-160    	; 0xf8ce <get_global_temp(unsigned char, char*, float*)+0xac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
          goto get_global_temp_end;
        }
      }
      cri++;
    f96e:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f970:	1f 5f       	subi	r17, 0xFF	; 255
    f972:	1a 30       	cpi	r17, 0x0A	; 10
    f974:	51 f6       	brne	.-108    	; 0xf90a <get_global_temp(unsigned char, char*, float*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4808
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    f976:	10 e0       	ldi	r17, 0x00	; 0
    f978:	aa cf       	rjmp	.-172    	; 0xf8ce <get_global_temp(unsigned char, char*, float*)+0xac>

0000f97a <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z29display_element_show_all_tempjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4185
  }
}

/// funkce pro ukazani vsech namerenych hodnot
void display_element_show_all_temp(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    f97a:	4f 92       	push	r4
    f97c:	5f 92       	push	r5
    f97e:	6f 92       	push	r6
    f980:	7f 92       	push	r7
    f982:	8f 92       	push	r8
    f984:	9f 92       	push	r9
    f986:	af 92       	push	r10
    f988:	bf 92       	push	r11
    f98a:	cf 92       	push	r12
    f98c:	df 92       	push	r13
    f98e:	ef 92       	push	r14
    f990:	ff 92       	push	r15
    f992:	0f 93       	push	r16
    f994:	1f 93       	push	r17
    f996:	cf 93       	push	r28
    f998:	df 93       	push	r29
    f99a:	cd b7       	in	r28, 0x3d	; 61
    f99c:	de b7       	in	r29, 0x3e	; 62
    f99e:	ac 97       	sbiw	r28, 0x2c	; 44
    f9a0:	0f b6       	in	r0, 0x3f	; 63
    f9a2:	f8 94       	cli
    f9a4:	de bf       	out	0x3e, r29	; 62
    f9a6:	0f be       	out	0x3f, r0	; 63
    f9a8:	cd bf       	out	0x3d, r28	; 61
    f9aa:	4c 01       	movw	r8, r24
    f9ac:	3b 01       	movw	r6, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4192
  char str1[8];
  float te;
  uint8_t active;
  uint8_t cri = 0;

  dtostrf(lm75_temp.readTemperatureC(), 4, 2, str1);
    f9ae:	0e 94 de ba 	call	0x175bc	; 0x175bc <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]>
    f9b2:	5e 01       	movw	r10, r28
    f9b4:	21 e2       	ldi	r18, 0x21	; 33
    f9b6:	a2 0e       	add	r10, r18
    f9b8:	b1 1c       	adc	r11, r1
    f9ba:	85 01       	movw	r16, r10
    f9bc:	22 e0       	ldi	r18, 0x02	; 2
    f9be:	44 e0       	ldi	r20, 0x04	; 4
    f9c0:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
  sprintf(name, "interni zarizeni: %sC", str1);
    f9c4:	bf 92       	push	r11
    f9c6:	af 92       	push	r10
    f9c8:	83 ee       	ldi	r24, 0xE3	; 227
    f9ca:	93 e0       	ldi	r25, 0x03	; 3
    f9cc:	9f 93       	push	r25
    f9ce:	8f 93       	push	r24
    f9d0:	ce 01       	movw	r24, r28
    f9d2:	01 96       	adiw	r24, 0x01	; 1
    f9d4:	6c 01       	movw	r12, r24
    f9d6:	9f 93       	push	r25
    f9d8:	8f 93       	push	r24
    f9da:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4194
  show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);
    f9de:	ee 24       	eor	r14, r14
    f9e0:	ea 94       	dec	r14
    f9e2:	fe 2c       	mov	r15, r14
    f9e4:	10 e0       	ldi	r17, 0x00	; 0
    f9e6:	00 e0       	ldi	r16, 0x00	; 0
    f9e8:	21 e0       	ldi	r18, 0x01	; 1
    f9ea:	a3 01       	movw	r20, r6
    f9ec:	b4 01       	movw	r22, r8
    f9ee:	c6 01       	movw	r24, r12
    f9f0:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    f9f4:	0f 90       	pop	r0
    f9f6:	0f 90       	pop	r0
    f9f8:	0f 90       	pop	r0
    f9fa:	0f 90       	pop	r0
    f9fc:	0f 90       	pop	r0
    f9fe:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197

  cri++;
  for (uint8_t idx = 0; idx < button_get_show_default_temp_max_items(INPUT_SENSOR_SHOW_ACTIVE, 0, 0); idx++)
    fa00:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4213
    {
      strcat(name, ": ");
      strcat_P(name, text_err);
    }

    show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);
    fa02:	2f e0       	ldi	r18, 0x0F	; 15
    fa04:	42 2e       	mov	r4, r18
    fa06:	55 24       	eor	r5, r5
    fa08:	53 94       	inc	r5
    fa0a:	58 0e       	add	r5, r24
button_get_show_default_temp_max_items():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4930
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    return use_tds + use_rtds;
    fa0c:	90 91 2c 0c 	lds	r25, 0x0C2C	; 0x800c2c <use_tds>
    fa10:	20 91 2d 0c 	lds	r18, 0x0C2D	; 0x800c2d <use_rtds>
    fa14:	92 0f       	add	r25, r18
_Z29display_element_show_all_tempjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197
  dtostrf(lm75_temp.readTemperatureC(), 4, 2, str1);
  sprintf(name, "interni zarizeni: %sC", str1);
  show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);

  cri++;
  for (uint8_t idx = 0; idx < button_get_show_default_temp_max_items(INPUT_SENSOR_SHOW_ACTIVE, 0, 0); idx++)
    fa16:	89 17       	cp	r24, r25
    fa18:	c8 f5       	brcc	.+114    	; 0xfa8c <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x112>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4199
  {
    active = get_global_temp(idx, name, &te);
    fa1a:	ae 01       	movw	r20, r28
    fa1c:	47 5d       	subi	r20, 0xD7	; 215
    fa1e:	5f 4f       	sbci	r21, 0xFF	; 255
    fa20:	b6 01       	movw	r22, r12
    fa22:	0e 94 11 7c 	call	0xf822	; 0xf822 <get_global_temp(unsigned char, char*, float*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
    if (active > 0)
    {
      strcat(name, ": ");
    fa26:	66 ed       	ldi	r22, 0xD6	; 214
    fa28:	76 e0       	ldi	r23, 0x06	; 6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4200

  cri++;
  for (uint8_t idx = 0; idx < button_get_show_default_temp_max_items(INPUT_SENSOR_SHOW_ACTIVE, 0, 0); idx++)
  {
    active = get_global_temp(idx, name, &te);
    if (active > 0)
    fa2a:	88 23       	and	r24, r24
    fa2c:	31 f1       	breq	.+76     	; 0xfa7a <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x100>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4202
    {
      strcat(name, ": ");
    fa2e:	c6 01       	movw	r24, r12
    fa30:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4203
      dtostrf(te, 4, 1, str1);
    fa34:	69 a5       	ldd	r22, Y+41	; 0x29
    fa36:	7a a5       	ldd	r23, Y+42	; 0x2a
    fa38:	8b a5       	ldd	r24, Y+43	; 0x2b
    fa3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    fa3c:	85 01       	movw	r16, r10
    fa3e:	21 e0       	ldi	r18, 0x01	; 1
    fa40:	44 e0       	ldi	r20, 0x04	; 4
    fa42:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4204
      strcat(str1, "C");
    fa46:	67 ef       	ldi	r22, 0xF7	; 247
    fa48:	73 e0       	ldi	r23, 0x03	; 3
    fa4a:	c5 01       	movw	r24, r10
    fa4c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4205
      strcat(name, str1);
    fa50:	b5 01       	movw	r22, r10
    fa52:	c6 01       	movw	r24, r12
    fa54:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4213
    {
      strcat(name, ": ");
      strcat_P(name, text_err);
    }

    show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);
    fa58:	a3 01       	movw	r20, r6
    fa5a:	54 9c       	mul	r5, r4
    fa5c:	40 0d       	add	r20, r0
    fa5e:	51 1d       	adc	r21, r1
    fa60:	11 24       	eor	r1, r1
    fa62:	ee 24       	eor	r14, r14
    fa64:	ea 94       	dec	r14
    fa66:	fe 2c       	mov	r15, r14
    fa68:	10 e0       	ldi	r17, 0x00	; 0
    fa6a:	00 e0       	ldi	r16, 0x00	; 0
    fa6c:	21 e0       	ldi	r18, 0x01	; 1
    fa6e:	b4 01       	movw	r22, r8
    fa70:	c6 01       	movw	r24, r12
    fa72:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197
  dtostrf(lm75_temp.readTemperatureC(), 4, 2, str1);
  sprintf(name, "interni zarizeni: %sC", str1);
  show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);

  cri++;
  for (uint8_t idx = 0; idx < button_get_show_default_temp_max_items(INPUT_SENSOR_SHOW_ACTIVE, 0, 0); idx++)
    fa76:	85 2d       	mov	r24, r5
    fa78:	c6 cf       	rjmp	.-116    	; 0xfa06 <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4209
      strcat(str1, "C");
      strcat(name, str1);
    }
    else
    {
      strcat(name, ": ");
    fa7a:	c6 01       	movw	r24, r12
    fa7c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4210
      strcat_P(name, text_err);
    fa80:	62 e2       	ldi	r22, 0x22	; 34
    fa82:	74 e8       	ldi	r23, 0x84	; 132
    fa84:	c6 01       	movw	r24, r12
    fa86:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
    fa8a:	e6 cf       	rjmp	.-52     	; 0xfa58 <display_element_show_all_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xde>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4217

    show_string(name, x, y + (15 * cri), 1, BLACK, WHITE, 0);
    cri++;
  }

}
    fa8c:	ac 96       	adiw	r28, 0x2c	; 44
    fa8e:	0f b6       	in	r0, 0x3f	; 63
    fa90:	f8 94       	cli
    fa92:	de bf       	out	0x3e, r29	; 62
    fa94:	0f be       	out	0x3f, r0	; 63
    fa96:	cd bf       	out	0x3d, r28	; 61
    fa98:	df 91       	pop	r29
    fa9a:	cf 91       	pop	r28
    fa9c:	1f 91       	pop	r17
    fa9e:	0f 91       	pop	r16
    faa0:	ff 90       	pop	r15
    faa2:	ef 90       	pop	r14
    faa4:	df 90       	pop	r13
    faa6:	cf 90       	pop	r12
    faa8:	bf 90       	pop	r11
    faaa:	af 90       	pop	r10
    faac:	9f 90       	pop	r9
    faae:	8f 90       	pop	r8
    fab0:	7f 90       	pop	r7
    fab2:	6f 90       	pop	r6
    fab4:	5f 90       	pop	r5
    fab6:	4f 90       	pop	r4
    fab8:	08 95       	ret

0000faba <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4163
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    faba:	8f 92       	push	r8
    fabc:	9f 92       	push	r9
    fabe:	af 92       	push	r10
    fac0:	bf 92       	push	r11
    fac2:	cf 92       	push	r12
    fac4:	df 92       	push	r13
    fac6:	ef 92       	push	r14
    fac8:	ff 92       	push	r15
    faca:	0f 93       	push	r16
    facc:	1f 93       	push	r17
    face:	cf 93       	push	r28
    fad0:	df 93       	push	r29
    fad2:	cd b7       	in	r28, 0x3d	; 61
    fad4:	de b7       	in	r29, 0x3e	; 62
    fad6:	e8 97       	sbiw	r28, 0x38	; 56
    fad8:	0f b6       	in	r0, 0x3f	; 63
    fada:	f8 94       	cli
    fadc:	de bf       	out	0x3e, r29	; 62
    fade:	0f be       	out	0x3f, r0	; 63
    fae0:	cd bf       	out	0x3d, r28	; 61
    fae2:	5c 01       	movw	r10, r24
    fae4:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4168
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  stat = get_global_temp(default_show_temp, str2, &te);
    fae6:	ae 01       	movw	r20, r28
    fae8:	4b 5c       	subi	r20, 0xCB	; 203
    faea:	5f 4f       	sbci	r21, 0xFF	; 255
    faec:	be 01       	movw	r22, r28
    faee:	6f 5d       	subi	r22, 0xDF	; 223
    faf0:	7f 4f       	sbci	r23, 0xFF	; 255
    faf2:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <default_show_temp>
    faf6:	0e 94 11 7c 	call	0xf822	; 0xf822 <get_global_temp(unsigned char, char*, float*)>
    fafa:	24 e1       	ldi	r18, 0x14	; 20
    fafc:	82 0e       	add	r8, r18
    fafe:	91 1c       	adc	r9, r1
    fb00:	34 e0       	ldi	r19, 0x04	; 4
    fb02:	a3 0e       	add	r10, r19
    fb04:	b1 1c       	adc	r11, r1
    fb06:	9e 01       	movw	r18, r28
    fb08:	2f 5f       	subi	r18, 0xFF	; 255
    fb0a:	3f 4f       	sbci	r19, 0xFF	; 255
    fb0c:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
  if (stat > 0)
    fb0e:	88 23       	and	r24, r24
    fb10:	a9 f1       	breq	.+106    	; 0xfb7c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
  {
    dtostrf(te, 4, 1, str1);
    fb12:	6d a9       	ldd	r22, Y+53	; 0x35
    fb14:	7e a9       	ldd	r23, Y+54	; 0x36
    fb16:	8f a9       	ldd	r24, Y+55	; 0x37
    fb18:	98 ad       	ldd	r25, Y+56	; 0x38
    fb1a:	89 01       	movw	r16, r18
    fb1c:	21 e0       	ldi	r18, 0x01	; 1
    fb1e:	44 e0       	ldi	r20, 0x04	; 4
    fb20:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
    if (strlen(str1) <= 4)
    fb24:	f6 01       	movw	r30, r12
    fb26:	01 90       	ld	r0, Z+
    fb28:	00 20       	and	r0, r0
    fb2a:	e9 f7       	brne	.-6      	; 0xfb26 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x6c>
    fb2c:	31 97       	sbiw	r30, 0x01	; 1
    fb2e:	ec 19       	sub	r30, r12
    fb30:	fd 09       	sbc	r31, r13
    fb32:	35 97       	sbiw	r30, 0x05	; 5
    fb34:	28 f4       	brcc	.+10     	; 0xfb40 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4173
      strcat(str1, "C");
    fb36:	67 ef       	ldi	r22, 0xF7	; 247
    fb38:	73 e0       	ldi	r23, 0x03	; 3
    fb3a:	c6 01       	movw	r24, r12
    fb3c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4174
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    fb40:	ee 24       	eor	r14, r14
    fb42:	ea 94       	dec	r14
    fb44:	fe 2c       	mov	r15, r14
    fb46:	10 e0       	ldi	r17, 0x00	; 0
    fb48:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    fb4a:	28 e0       	ldi	r18, 0x08	; 8
    fb4c:	a4 01       	movw	r20, r8
    fb4e:	b5 01       	movw	r22, r10
    fb50:	c6 01       	movw	r24, r12
    fb52:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4181
  }
}
    fb56:	e8 96       	adiw	r28, 0x38	; 56
    fb58:	0f b6       	in	r0, 0x3f	; 63
    fb5a:	f8 94       	cli
    fb5c:	de bf       	out	0x3e, r29	; 62
    fb5e:	0f be       	out	0x3f, r0	; 63
    fb60:	cd bf       	out	0x3d, r28	; 61
    fb62:	df 91       	pop	r29
    fb64:	cf 91       	pop	r28
    fb66:	1f 91       	pop	r17
    fb68:	0f 91       	pop	r16
    fb6a:	ff 90       	pop	r15
    fb6c:	ef 90       	pop	r14
    fb6e:	df 90       	pop	r13
    fb70:	cf 90       	pop	r12
    fb72:	bf 90       	pop	r11
    fb74:	af 90       	pop	r10
    fb76:	9f 90       	pop	r9
    fb78:	8f 90       	pop	r8
    fb7a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4178
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    fb7c:	62 e2       	ldi	r22, 0x22	; 34
    fb7e:	74 e8       	ldi	r23, 0x84	; 132
    fb80:	c9 01       	movw	r24, r18
    fb82:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    fb86:	ee 24       	eor	r14, r14
    fb88:	ea 94       	dec	r14
    fb8a:	fe 2c       	mov	r15, r14
    fb8c:	00 e0       	ldi	r16, 0x00	; 0
    fb8e:	18 ef       	ldi	r17, 0xF8	; 248
    fb90:	dc cf       	rjmp	.-72     	; 0xfb4a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x90>

0000fb92 <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_temp_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4149
}
///

/// dekorativni funkce pro zobrazeni teploty
void display_element_show_temp_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    fb92:	6f 92       	push	r6
    fb94:	7f 92       	push	r7
    fb96:	8f 92       	push	r8
    fb98:	9f 92       	push	r9
    fb9a:	af 92       	push	r10
    fb9c:	bf 92       	push	r11
    fb9e:	cf 92       	push	r12
    fba0:	df 92       	push	r13
    fba2:	ef 92       	push	r14
    fba4:	ff 92       	push	r15
    fba6:	0f 93       	push	r16
    fba8:	1f 93       	push	r17
    fbaa:	cf 93       	push	r28
    fbac:	df 93       	push	r29
    fbae:	cd b7       	in	r28, 0x3d	; 61
    fbb0:	de b7       	in	r29, 0x3e	; 62
    fbb2:	e8 97       	sbiw	r28, 0x38	; 56
    fbb4:	0f b6       	in	r0, 0x3f	; 63
    fbb6:	f8 94       	cli
    fbb8:	de bf       	out	0x3e, r29	; 62
    fbba:	0f be       	out	0x3f, r0	; 63
    fbbc:	cd bf       	out	0x3d, r28	; 61
    fbbe:	6c 01       	movw	r12, r24
    fbc0:	5b 01       	movw	r10, r22
    fbc2:	4a 01       	movw	r8, r20
    fbc4:	39 01       	movw	r6, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    fbc6:	65 e7       	ldi	r22, 0x75	; 117
    fbc8:	73 e8       	ldi	r23, 0x83	; 131
    fbca:	ce 01       	movw	r24, r28
    fbcc:	01 96       	adiw	r24, 0x01	; 1
    fbce:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
  stat = get_global_temp(default_show_temp, str2, &te);
    fbd2:	ae 01       	movw	r20, r28
    fbd4:	4b 5c       	subi	r20, 0xCB	; 203
    fbd6:	5f 4f       	sbci	r21, 0xFF	; 255
    fbd8:	be 01       	movw	r22, r28
    fbda:	6f 5d       	subi	r22, 0xDF	; 223
    fbdc:	7f 4f       	sbci	r23, 0xFF	; 255
    fbde:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <default_show_temp>
    fbe2:	0e 94 11 7c 	call	0xf822	; 0xf822 <get_global_temp(unsigned char, char*, float*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4156
  strcat(str1, str2);
    fbe6:	be 01       	movw	r22, r28
    fbe8:	6f 5d       	subi	r22, 0xDF	; 223
    fbea:	7f 4f       	sbci	r23, 0xFF	; 255
    fbec:	ce 01       	movw	r24, r28
    fbee:	01 96       	adiw	r24, 0x01	; 1
    fbf0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    fbf4:	a5 01       	movw	r20, r10
    fbf6:	4b 5f       	subi	r20, 0xFB	; 251
    fbf8:	5f 4f       	sbci	r21, 0xFF	; 255
    fbfa:	b6 01       	movw	r22, r12
    fbfc:	6b 5f       	subi	r22, 0xFB	; 251
    fbfe:	7f 4f       	sbci	r23, 0xFF	; 255
    fc00:	ee 24       	eor	r14, r14
    fc02:	ea 94       	dec	r14
    fc04:	fe 2c       	mov	r15, r14
    fc06:	10 e0       	ldi	r17, 0x00	; 0
    fc08:	00 e0       	ldi	r16, 0x00	; 0
    fc0a:	21 e0       	ldi	r18, 0x01	; 1
    fc0c:	ce 01       	movw	r24, r28
    fc0e:	01 96       	adiw	r24, 0x01	; 1
    fc10:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    fc14:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    fc18:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z36display_element_show_temp_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4159
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    fc1c:	95 01       	movw	r18, r10
    fc1e:	26 0d       	add	r18, r6
    fc20:	37 1d       	adc	r19, r7
    fc22:	a6 01       	movw	r20, r12
    fc24:	48 0d       	add	r20, r8
    fc26:	59 1d       	adc	r21, r9
    fc28:	b5 01       	movw	r22, r10
    fc2a:	c6 01       	movw	r24, r12
    fc2c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4160
}
    fc30:	e8 96       	adiw	r28, 0x38	; 56
    fc32:	0f b6       	in	r0, 0x3f	; 63
    fc34:	f8 94       	cli
    fc36:	de bf       	out	0x3e, r29	; 62
    fc38:	0f be       	out	0x3f, r0	; 63
    fc3a:	cd bf       	out	0x3d, r28	; 61
    fc3c:	df 91       	pop	r29
    fc3e:	cf 91       	pop	r28
    fc40:	1f 91       	pop	r17
    fc42:	0f 91       	pop	r16
    fc44:	ff 90       	pop	r15
    fc46:	ef 90       	pop	r14
    fc48:	df 90       	pop	r13
    fc4a:	cf 90       	pop	r12
    fc4c:	bf 90       	pop	r11
    fc4e:	af 90       	pop	r10
    fc50:	9f 90       	pop	r9
    fc52:	8f 90       	pop	r8
    fc54:	7f 90       	pop	r7
    fc56:	6f 90       	pop	r6
    fc58:	08 95       	ret

0000fc5a <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4617
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    fc5a:	cf 92       	push	r12
    fc5c:	df 92       	push	r13
    fc5e:	ff 92       	push	r15
    fc60:	0f 93       	push	r16
    fc62:	1f 93       	push	r17
    fc64:	cf 93       	push	r28
    fc66:	df 93       	push	r29
    fc68:	1f 92       	push	r1
    fc6a:	cd b7       	in	r28, 0x3d	; 61
    fc6c:	de b7       	in	r29, 0x3e	; 62
    fc6e:	f8 2e       	mov	r15, r24
    fc70:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4619
  uint8_t active;
  strcpy_P(line1, text_not_used);
    fc72:	6f ef       	ldi	r22, 0xFF	; 255
    fc74:	73 e8       	ldi	r23, 0x83	; 131
    fc76:	c9 01       	movw	r24, r18
    fc78:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4620
  line2[0] = 0;
    fc7c:	f8 01       	movw	r30, r16
    fc7e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
  remote_tds_get_active(args1, &active);
    fc80:	be 01       	movw	r22, r28
    fc82:	6f 5f       	subi	r22, 0xFF	; 255
    fc84:	7f 4f       	sbci	r23, 0xFF	; 255
    fc86:	8f 2d       	mov	r24, r15
    fc88:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
  if (active == 1)
    fc8c:	89 81       	ldd	r24, Y+1	; 0x01
    fc8e:	81 30       	cpi	r24, 0x01	; 1
    fc90:	89 f4       	brne	.+34     	; 0xfcb4 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
  {
    remote_tds_get_complete(args1, &active, line1);
    fc92:	a6 01       	movw	r20, r12
    fc94:	be 01       	movw	r22, r28
    fc96:	6f 5f       	subi	r22, 0xFF	; 255
    fc98:	7f 4f       	sbci	r23, 0xFF	; 255
    fc9a:	8f 2d       	mov	r24, r15
    fc9c:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4625
    if (remote_tds_get_type(args1) == RTDS_REMOTE_TYPE_TEMP)
    fca0:	8f 2d       	mov	r24, r15
    fca2:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
    fca6:	81 30       	cpi	r24, 0x01	; 1
    fca8:	29 f4       	brne	.+10     	; 0xfcb4 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
      strcpy_P(line2, new_text_rtds_type_temp);
    fcaa:	66 ed       	ldi	r22, 0xD6	; 214
    fcac:	73 e8       	ldi	r23, 0x83	; 131
    fcae:	c8 01       	movw	r24, r16
    fcb0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
  }
}
    fcb4:	0f 90       	pop	r0
    fcb6:	df 91       	pop	r29
    fcb8:	cf 91       	pop	r28
    fcba:	1f 91       	pop	r17
    fcbc:	0f 91       	pop	r16
    fcbe:	ff 90       	pop	r15
    fcc0:	df 90       	pop	r13
    fcc2:	cf 90       	pop	r12
    fcc4:	08 95       	ret

0000fcc6 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4298
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    fcc6:	5f 92       	push	r5
    fcc8:	6f 92       	push	r6
    fcca:	7f 92       	push	r7
    fccc:	8f 92       	push	r8
    fcce:	9f 92       	push	r9
    fcd0:	af 92       	push	r10
    fcd2:	bf 92       	push	r11
    fcd4:	cf 92       	push	r12
    fcd6:	df 92       	push	r13
    fcd8:	ef 92       	push	r14
    fcda:	ff 92       	push	r15
    fcdc:	0f 93       	push	r16
    fcde:	1f 93       	push	r17
    fce0:	cf 93       	push	r28
    fce2:	df 93       	push	r29
    fce4:	cd b7       	in	r28, 0x3d	; 61
    fce6:	de b7       	in	r29, 0x3e	; 62
    fce8:	cd 54       	subi	r28, 0x4D	; 77
    fcea:	d1 09       	sbc	r29, r1
    fcec:	0f b6       	in	r0, 0x3f	; 63
    fcee:	f8 94       	cli
    fcf0:	de bf       	out	0x3e, r29	; 62
    fcf2:	0f be       	out	0x3f, r0	; 63
    fcf4:	cd bf       	out	0x3d, r28	; 61
    fcf6:	3c 01       	movw	r6, r24
    fcf8:	5b 01       	movw	r10, r22
    fcfa:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    fcfc:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
    fd00:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    fd04:	26 0f       	add	r18, r22
    fd06:	37 1f       	adc	r19, r23
    fd08:	48 0f       	add	r20, r24
    fd0a:	59 1f       	adc	r21, r25
    fd0c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4307
  remote_tds_get_complete(args2, &active, name);
    fd10:	ae 01       	movw	r20, r28
    fd12:	45 5c       	subi	r20, 0xC5	; 197
    fd14:	5f 4f       	sbci	r21, 0xFF	; 255
    fd16:	be 01       	movw	r22, r28
    fd18:	63 5b       	subi	r22, 0xB3	; 179
    fd1a:	7f 4f       	sbci	r23, 0xFF	; 255
    fd1c:	8e 2d       	mov	r24, r14
    fd1e:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
  if (active == 1)
    fd22:	2e 96       	adiw	r28, 0x0e	; 14
    fd24:	8f ad       	ldd	r24, Y+63	; 0x3f
    fd26:	2e 97       	sbiw	r28, 0x0e	; 14
    fd28:	81 30       	cpi	r24, 0x01	; 1
    fd2a:	09 f0       	breq	.+2      	; 0xfd2e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x68>
    fd2c:	c2 c0       	rjmp	.+388    	; 0xfeb2 <__DATA_REGION_LENGTH__+0xb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    fd2e:	6f ec       	ldi	r22, 0xCF	; 207
    fd30:	73 e8       	ldi	r23, 0x83	; 131
    fd32:	ce 01       	movw	r24, r28
    fd34:	01 96       	adiw	r24, 0x01	; 1
    fd36:	6c 01       	movw	r12, r24
    fd38:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4312
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    fd3c:	43 01       	movw	r8, r6
    fd3e:	95 e0       	ldi	r25, 0x05	; 5
    fd40:	89 0e       	add	r8, r25
    fd42:	91 1c       	adc	r9, r1
    fd44:	ee 24       	eor	r14, r14
    fd46:	ea 94       	dec	r14
    fd48:	fe 2c       	mov	r15, r14
    fd4a:	10 e0       	ldi	r17, 0x00	; 0
    fd4c:	00 e0       	ldi	r16, 0x00	; 0
    fd4e:	22 e0       	ldi	r18, 0x02	; 2
    fd50:	a5 01       	movw	r20, r10
    fd52:	46 5f       	subi	r20, 0xF6	; 246
    fd54:	5f 4f       	sbci	r21, 0xFF	; 255
    fd56:	b4 01       	movw	r22, r8
    fd58:	c6 01       	movw	r24, r12
    fd5a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
    strcpy(str1, name);
    fd5e:	be 01       	movw	r22, r28
    fd60:	65 5c       	subi	r22, 0xC5	; 197
    fd62:	7f 4f       	sbci	r23, 0xFF	; 255
    fd64:	c6 01       	movw	r24, r12
    fd66:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4314
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    fd6a:	b3 01       	movw	r22, r6
    fd6c:	6c 5e       	subi	r22, 0xEC	; 236
    fd6e:	7f 4f       	sbci	r23, 0xFF	; 255
    fd70:	22 e0       	ldi	r18, 0x02	; 2
    fd72:	a5 01       	movw	r20, r10
    fd74:	42 5e       	subi	r20, 0xE2	; 226
    fd76:	5f 4f       	sbci	r21, 0xFF	; 255
    fd78:	c6 01       	movw	r24, r12
    fd7a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
    if (remote_tds_get_type(args2) == RTDS_REMOTE_TYPE_TEMP)
    fd7e:	85 2d       	mov	r24, r5
    fd80:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
    fd84:	81 30       	cpi	r24, 0x01	; 1
    fd86:	09 f0       	breq	.+2      	; 0xfd8a <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc4>
    fd88:	94 c0       	rjmp	.+296    	; 0xfeb2 <__DATA_REGION_LENGTH__+0xb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
    fd8a:	66 ed       	ldi	r22, 0xD6	; 214
    fd8c:	73 e8       	ldi	r23, 0x83	; 131
    fd8e:	c6 01       	movw	r24, r12
    fd90:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);
    fd94:	21 e0       	ldi	r18, 0x01	; 1
    fd96:	a5 01       	movw	r20, r10
    fd98:	44 5c       	subi	r20, 0xC4	; 196
    fd9a:	5f 4f       	sbci	r21, 0xFF	; 255
    fd9c:	b4 01       	movw	r22, r8
    fd9e:	c6 01       	movw	r24, r12
    fda0:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
  if (idx < MAX_RTDS)
    fda4:	89 e0       	ldi	r24, 0x09	; 9
    fda6:	85 15       	cp	r24, r5
    fda8:	08 f4       	brcc	.+2      	; 0xfdac <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xe6>
    fdaa:	9a c0       	rjmp	.+308    	; 0xfee0 <__DATA_REGION_LENGTH__+0xe0>
    fdac:	85 2d       	mov	r24, r5
    fdae:	0e 94 43 53 	call	0xa686	; 0xa686 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);

      te = remote_tds_get_data(args2) / 1000.0;
    fdb2:	bc 01       	movw	r22, r24
    fdb4:	99 0f       	add	r25, r25
    fdb6:	88 0b       	sbc	r24, r24
    fdb8:	99 0b       	sbc	r25, r25
    fdba:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
    fdbe:	20 e0       	ldi	r18, 0x00	; 0
    fdc0:	30 e0       	ldi	r19, 0x00	; 0
    fdc2:	4a e7       	ldi	r20, 0x7A	; 122
    fdc4:	54 e4       	ldi	r21, 0x44	; 68
    fdc6:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4322
      dtostrf(te, 4, 2, str1);
    fdca:	86 01       	movw	r16, r12
    fdcc:	22 e0       	ldi	r18, 0x02	; 2
    fdce:	44 e0       	ldi	r20, 0x04	; 4
    fdd0:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
      strcat(str1, "C");
    fdd4:	67 ef       	ldi	r22, 0xF7	; 247
    fdd6:	73 e0       	ldi	r23, 0x03	; 3
    fdd8:	c6 01       	movw	r24, r12
    fdda:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
      strcpy_P(str2, current_temp_short);
    fdde:	3e 01       	movw	r6, r28
    fde0:	91 e2       	ldi	r25, 0x21	; 33
    fde2:	69 0e       	add	r6, r25
    fde4:	71 1c       	adc	r7, r1
    fde6:	66 ec       	ldi	r22, 0xC6	; 198
    fde8:	73 e8       	ldi	r23, 0x83	; 131
    fdea:	c3 01       	movw	r24, r6
    fdec:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
      strcat(str2, str1);
    fdf0:	b6 01       	movw	r22, r12
    fdf2:	c3 01       	movw	r24, r6
    fdf4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
      show_string(str2, x + 5, y + 80 , 2, BLACK, WHITE, 0);
    fdf8:	ee 24       	eor	r14, r14
    fdfa:	ea 94       	dec	r14
    fdfc:	fe 2c       	mov	r15, r14
    fdfe:	10 e0       	ldi	r17, 0x00	; 0
    fe00:	00 e0       	ldi	r16, 0x00	; 0
    fe02:	22 e0       	ldi	r18, 0x02	; 2
    fe04:	a5 01       	movw	r20, r10
    fe06:	40 5b       	subi	r20, 0xB0	; 176
    fe08:	5f 4f       	sbci	r21, 0xFF	; 255
    fe0a:	b4 01       	movw	r22, r8
    fe0c:	c3 01       	movw	r24, r6
    fe0e:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
    fe12:	85 2d       	mov	r24, r5
    fe14:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <remote_tds_get_last_update(unsigned char)>
    fe18:	58 2e       	mov	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
      strcpy_P(str2, text_last_update);
    fe1a:	60 eb       	ldi	r22, 0xB0	; 176
    fe1c:	73 e8       	ldi	r23, 0x83	; 131
    fe1e:	c3 01       	movw	r24, r6
    fe20:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
      sprintf(str1, "%s: %d", str2, last_update);
    fe24:	1f 92       	push	r1
    fe26:	5f 92       	push	r5
    fe28:	7f 92       	push	r7
    fe2a:	6f 92       	push	r6
    fe2c:	89 ef       	ldi	r24, 0xF9	; 249
    fe2e:	93 e0       	ldi	r25, 0x03	; 3
    fe30:	9f 93       	push	r25
    fe32:	8f 93       	push	r24
    fe34:	df 92       	push	r13
    fe36:	cf 92       	push	r12
    fe38:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4331
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
    fe3c:	21 e0       	ldi	r18, 0x01	; 1
    fe3e:	a5 01       	movw	r20, r10
    fe40:	4c 59       	subi	r20, 0x9C	; 156
    fe42:	5f 4f       	sbci	r21, 0xFF	; 255
    fe44:	b4 01       	movw	r22, r8
    fe46:	c6 01       	movw	r24, r12
    fe48:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
      active = 1;
      if (last_update >= 250) active = 0;
    fe4c:	0f b6       	in	r0, 0x3f	; 63
    fe4e:	f8 94       	cli
    fe50:	de bf       	out	0x3e, r29	; 62
    fe52:	0f be       	out	0x3f, r0	; 63
    fe54:	cd bf       	out	0x3d, r28	; 61
    fe56:	99 ef       	ldi	r25, 0xF9	; 249
    fe58:	95 15       	cp	r25, r5
    fe5a:	08 f4       	brcc	.+2      	; 0xfe5e <__DATA_REGION_LENGTH__+0x5e>
    fe5c:	44 c0       	rjmp	.+136    	; 0xfee6 <__DATA_REGION_LENGTH__+0xe6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
    fe5e:	81 e0       	ldi	r24, 0x01	; 1
    fe60:	2e 96       	adiw	r28, 0x0e	; 14
    fe62:	8f af       	std	Y+63, r24	; 0x3f
    fe64:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
      if (last_update >= 250) active = 0;
      strcpy_P(str2, text_online);
    fe66:	69 ea       	ldi	r22, 0xA9	; 169
    fe68:	73 e8       	ldi	r23, 0x83	; 131
    fe6a:	c3 01       	movw	r24, r6
    fe6c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4335
      sprintf(str1, "%s: %d", str2, active);
    fe70:	2e 96       	adiw	r28, 0x0e	; 14
    fe72:	8f ad       	ldd	r24, Y+63	; 0x3f
    fe74:	2e 97       	sbiw	r28, 0x0e	; 14
    fe76:	1f 92       	push	r1
    fe78:	8f 93       	push	r24
    fe7a:	7f 92       	push	r7
    fe7c:	6f 92       	push	r6
    fe7e:	89 ef       	ldi	r24, 0xF9	; 249
    fe80:	93 e0       	ldi	r25, 0x03	; 3
    fe82:	9f 93       	push	r25
    fe84:	8f 93       	push	r24
    fe86:	df 92       	push	r13
    fe88:	cf 92       	push	r12
    fe8a:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4336
      show_string(str1, x + 5, y + 120 , 2, BLACK, WHITE, 0);
    fe8e:	a5 01       	movw	r20, r10
    fe90:	48 58       	subi	r20, 0x88	; 136
    fe92:	5f 4f       	sbci	r21, 0xFF	; 255
    fe94:	ee 24       	eor	r14, r14
    fe96:	ea 94       	dec	r14
    fe98:	fe 2c       	mov	r15, r14
    fe9a:	10 e0       	ldi	r17, 0x00	; 0
    fe9c:	00 e0       	ldi	r16, 0x00	; 0
    fe9e:	22 e0       	ldi	r18, 0x02	; 2
    fea0:	b4 01       	movw	r22, r8
    fea2:	c6 01       	movw	r24, r12
    fea4:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    fea8:	0f b6       	in	r0, 0x3f	; 63
    feaa:	f8 94       	cli
    feac:	de bf       	out	0x3e, r29	; 62
    feae:	0f be       	out	0x3f, r0	; 63
    feb0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
    }
  }
}
    feb2:	c3 5b       	subi	r28, 0xB3	; 179
    feb4:	df 4f       	sbci	r29, 0xFF	; 255
    feb6:	0f b6       	in	r0, 0x3f	; 63
    feb8:	f8 94       	cli
    feba:	de bf       	out	0x3e, r29	; 62
    febc:	0f be       	out	0x3f, r0	; 63
    febe:	cd bf       	out	0x3d, r28	; 61
    fec0:	df 91       	pop	r29
    fec2:	cf 91       	pop	r28
    fec4:	1f 91       	pop	r17
    fec6:	0f 91       	pop	r16
    fec8:	ff 90       	pop	r15
    feca:	ef 90       	pop	r14
    fecc:	df 90       	pop	r13
    fece:	cf 90       	pop	r12
    fed0:	bf 90       	pop	r11
    fed2:	af 90       	pop	r10
    fed4:	9f 90       	pop	r9
    fed6:	8f 90       	pop	r8
    fed8:	7f 90       	pop	r7
    feda:	6f 90       	pop	r6
    fedc:	5f 90       	pop	r5
    fede:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
    fee0:	90 e0       	ldi	r25, 0x00	; 0
    fee2:	80 e0       	ldi	r24, 0x00	; 0
    fee4:	66 cf       	rjmp	.-308    	; 0xfdb2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
      if (last_update >= 250) active = 0;
    fee6:	2e 96       	adiw	r28, 0x0e	; 14
    fee8:	1f ae       	std	Y+63, r1	; 0x3f
    feea:	2e 97       	sbiw	r28, 0x0e	; 14
    feec:	bc cf       	rjmp	.-136    	; 0xfe66 <__DATA_REGION_LENGTH__+0x66>

0000feee <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    feee:	cf 92       	push	r12
    fef0:	df 92       	push	r13
    fef2:	ef 92       	push	r14
    fef4:	ff 92       	push	r15
    fef6:	1f 93       	push	r17
    fef8:	cf 93       	push	r28
    fefa:	df 93       	push	r29
    fefc:	cd b7       	in	r28, 0x3d	; 61
    fefe:	de b7       	in	r29, 0x3e	; 62
    ff00:	63 97       	sbiw	r28, 0x13	; 19
    ff02:	0f b6       	in	r0, 0x3f	; 63
    ff04:	f8 94       	cli
    ff06:	de bf       	out	0x3e, r29	; 62
    ff08:	0f be       	out	0x3f, r0	; 63
    ff0a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
  uint8_t active = 0;
    ff0c:	1b 8a       	std	Y+19, r1	; 0x13
    ff0e:	86 e6       	ldi	r24, 0x66	; 102
    ff10:	c8 2e       	mov	r12, r24
    ff12:	d1 2c       	mov	r13, r1
    ff14:	e1 2c       	mov	r14, r1
    ff16:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ff18:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3053
  {
    remote_tds_get_complete(idx, &active, payload);
    ff1a:	ae 01       	movw	r20, r28
    ff1c:	4f 5f       	subi	r20, 0xFF	; 255
    ff1e:	5f 4f       	sbci	r21, 0xFF	; 255
    ff20:	be 01       	movw	r22, r28
    ff22:	6d 5e       	subi	r22, 0xED	; 237
    ff24:	7f 4f       	sbci	r23, 0xFF	; 255
    ff26:	81 2f       	mov	r24, r17
    ff28:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    ff2c:	8b 89       	ldd	r24, Y+19	; 0x13
    ff2e:	81 30       	cpi	r24, 0x01	; 1
    ff30:	09 f0       	breq	.+2      	; 0xff34 <send_mqtt_remote_tds_status()+0x46>
    ff32:	58 c0       	rjmp	.+176    	; 0xffe4 <send_mqtt_remote_tds_status()+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    ff34:	9e 01       	movw	r18, r28
    ff36:	2f 5f       	subi	r18, 0xFF	; 255
    ff38:	3f 4f       	sbci	r19, 0xFF	; 255
    ff3a:	40 e0       	ldi	r20, 0x00	; 0
    ff3c:	54 e0       	ldi	r21, 0x04	; 4
    ff3e:	61 2f       	mov	r22, r17
    ff40:	85 e0       	ldi	r24, 0x05	; 5
    ff42:	94 e0       	ldi	r25, 0x04	; 4
    ff44:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
      itoa(active, payload, 10);
    ff48:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ff4a:	4a e0       	ldi	r20, 0x0A	; 10
    ff4c:	be 01       	movw	r22, r28
    ff4e:	6f 5f       	subi	r22, 0xFF	; 255
    ff50:	7f 4f       	sbci	r23, 0xFF	; 255
    ff52:	90 e0       	ldi	r25, 0x00	; 0
    ff54:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    ff58:	9e 01       	movw	r18, r28
    ff5a:	2f 5f       	subi	r18, 0xFF	; 255
    ff5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ff5e:	4a e0       	ldi	r20, 0x0A	; 10
    ff60:	54 e0       	ldi	r21, 0x04	; 4
    ff62:	61 2f       	mov	r22, r17
    ff64:	85 e0       	ldi	r24, 0x05	; 5
    ff66:	94 e0       	ldi	r25, 0x04	; 4
    ff68:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_data():
    ff6c:	81 2f       	mov	r24, r17
    ff6e:	0e 94 43 53 	call	0xa686	; 0xa686 <remote_tds_get_data(unsigned char) [clone .part.31]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ff72:	4a e0       	ldi	r20, 0x0A	; 10
    ff74:	be 01       	movw	r22, r28
    ff76:	6f 5f       	subi	r22, 0xFF	; 255
    ff78:	7f 4f       	sbci	r23, 0xFF	; 255
    ff7a:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3061
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
    ff7e:	9e 01       	movw	r18, r28
    ff80:	2f 5f       	subi	r18, 0xFF	; 255
    ff82:	3f 4f       	sbci	r19, 0xFF	; 255
    ff84:	41 e1       	ldi	r20, 0x11	; 17
    ff86:	54 e0       	ldi	r21, 0x04	; 4
    ff88:	61 2f       	mov	r22, r17
    ff8a:	85 e0       	ldi	r24, 0x05	; 5
    ff8c:	94 e0       	ldi	r25, 0x04	; 4
    ff8e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
      itoa(remote_tds_get_type(idx), payload, 10);
    ff92:	81 2f       	mov	r24, r17
    ff94:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ff98:	4a e0       	ldi	r20, 0x0A	; 10
    ff9a:	be 01       	movw	r22, r28
    ff9c:	6f 5f       	subi	r22, 0xFF	; 255
    ff9e:	7f 4f       	sbci	r23, 0xFF	; 255
    ffa0:	90 e0       	ldi	r25, 0x00	; 0
    ffa2:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3063
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
    ffa6:	9e 01       	movw	r18, r28
    ffa8:	2f 5f       	subi	r18, 0xFF	; 255
    ffaa:	3f 4f       	sbci	r19, 0xFF	; 255
    ffac:	47 e1       	ldi	r20, 0x17	; 23
    ffae:	54 e0       	ldi	r21, 0x04	; 4
    ffb0:	61 2f       	mov	r22, r17
    ffb2:	85 e0       	ldi	r24, 0x05	; 5
    ffb4:	94 e0       	ldi	r25, 0x04	; 4
    ffb6:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1952
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ffba:	c7 01       	movw	r24, r14
    ffbc:	b6 01       	movw	r22, r12
    ffbe:	0e 94 38 ba 	call	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    ffc2:	4a e0       	ldi	r20, 0x0A	; 10
    ffc4:	be 01       	movw	r22, r28
    ffc6:	6f 5f       	subi	r22, 0xFF	; 255
    ffc8:	7f 4f       	sbci	r23, 0xFF	; 255
    ffca:	90 e0       	ldi	r25, 0x00	; 0
    ffcc:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3065
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
      itoa(remote_tds_get_type(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    ffd0:	9e 01       	movw	r18, r28
    ffd2:	2f 5f       	subi	r18, 0xFF	; 255
    ffd4:	3f 4f       	sbci	r19, 0xFF	; 255
    ffd6:	4c e1       	ldi	r20, 0x1C	; 28
    ffd8:	54 e0       	ldi	r21, 0x04	; 4
    ffda:	61 2f       	mov	r22, r17
    ffdc:	85 e0       	ldi	r24, 0x05	; 5
    ffde:	94 e0       	ldi	r25, 0x04	; 4
    ffe0:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3051
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    ffe4:	1f 5f       	subi	r17, 0xFF	; 255
    ffe6:	84 e0       	ldi	r24, 0x04	; 4
    ffe8:	c8 0e       	add	r12, r24
    ffea:	d1 1c       	adc	r13, r1
    ffec:	e1 1c       	adc	r14, r1
    ffee:	f1 1c       	adc	r15, r1
    fff0:	8e e8       	ldi	r24, 0x8E	; 142
    fff2:	c8 16       	cp	r12, r24
    fff4:	d1 04       	cpc	r13, r1
    fff6:	e1 04       	cpc	r14, r1
    fff8:	f1 04       	cpc	r15, r1
    fffa:	09 f0       	breq	.+2      	; 0xfffe <send_mqtt_remote_tds_status()+0x110>
    fffc:	8e cf       	rjmp	.-228    	; 0xff1a <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    fffe:	63 96       	adiw	r28, 0x13	; 19
   10000:	0f b6       	in	r0, 0x3f	; 63
   10002:	f8 94       	cli
   10004:	de bf       	out	0x3e, r29	; 62
   10006:	0f be       	out	0x3f, r0	; 63
   10008:	cd bf       	out	0x3d, r28	; 61
   1000a:	df 91       	pop	r29
   1000c:	cf 91       	pop	r28
   1000e:	1f 91       	pop	r17
   10010:	ff 90       	pop	r15
   10012:	ef 90       	pop	r14
   10014:	df 90       	pop	r13
   10016:	cf 90       	pop	r12
   10018:	08 95       	ret

0001001a <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
   1001a:	ef 92       	push	r14
   1001c:	ff 92       	push	r15
   1001e:	0f 93       	push	r16
   10020:	1f 93       	push	r17
   10022:	cf 93       	push	r28
   10024:	df 93       	push	r29
   10026:	cd b7       	in	r28, 0x3d	; 61
   10028:	de b7       	in	r29, 0x3e	; 62
   1002a:	63 97       	sbiw	r28, 0x13	; 19
   1002c:	0f b6       	in	r0, 0x3f	; 63
   1002e:	f8 94       	cli
   10030:	de bf       	out	0x3e, r29	; 62
   10032:	0f be       	out	0x3f, r0	; 63
   10034:	cd bf       	out	0x3d, r28	; 61
   10036:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   10038:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1900
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
   1003a:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1904
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
   1003c:	ae 01       	movw	r20, r28
   1003e:	4f 5f       	subi	r20, 0xFF	; 255
   10040:	5f 4f       	sbci	r21, 0xFF	; 255
   10042:	be 01       	movw	r22, r28
   10044:	6d 5e       	subi	r22, 0xED	; 237
   10046:	7f 4f       	sbci	r23, 0xFF	; 255
   10048:	81 2f       	mov	r24, r17
   1004a:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1905
    if (strcmp(name, tmp_name) == 0)
   1004e:	be 01       	movw	r22, r28
   10050:	6f 5f       	subi	r22, 0xFF	; 255
   10052:	7f 4f       	sbci	r23, 0xFF	; 255
   10054:	c7 01       	movw	r24, r14
   10056:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1005a:	89 2b       	or	r24, r25
   1005c:	09 f4       	brne	.+2      	; 0x10060 <remote_tds_name_exist(char*)+0x46>
   1005e:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   10060:	1f 5f       	subi	r17, 0xFF	; 255
   10062:	1a 30       	cpi	r17, 0x0A	; 10
   10064:	59 f7       	brne	.-42     	; 0x1003c <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
   10066:	80 2f       	mov	r24, r16
   10068:	63 96       	adiw	r28, 0x13	; 19
   1006a:	0f b6       	in	r0, 0x3f	; 63
   1006c:	f8 94       	cli
   1006e:	de bf       	out	0x3e, r29	; 62
   10070:	0f be       	out	0x3f, r0	; 63
   10072:	cd bf       	out	0x3d, r28	; 61
   10074:	df 91       	pop	r29
   10076:	cf 91       	pop	r28
   10078:	1f 91       	pop	r17
   1007a:	0f 91       	pop	r16
   1007c:	ff 90       	pop	r15
   1007e:	ef 90       	pop	r14
   10080:	08 95       	ret

00010082 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
   10082:	1f 93       	push	r17
   10084:	cf 93       	push	r28
   10086:	df 93       	push	r29
   10088:	cd b7       	in	r28, 0x3d	; 61
   1008a:	de b7       	in	r29, 0x3e	; 62
   1008c:	62 97       	sbiw	r28, 0x12	; 18
   1008e:	0f b6       	in	r0, 0x3f	; 63
   10090:	f8 94       	cli
   10092:	de bf       	out	0x3e, r29	; 62
   10094:	0f be       	out	0x3f, r0	; 63
   10096:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
   10098:	10 91 57 09 	lds	r17, 0x0957	; 0x800957 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4775

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
   1009c:	ce 01       	movw	r24, r28
   1009e:	01 96       	adiw	r24, 0x01	; 1
   100a0:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
   100a4:	89 81       	ldd	r24, Y+1	; 0x01
   100a6:	88 23       	and	r24, r24
   100a8:	71 f0       	breq	.+28     	; 0x100c6 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
  {
    if (remote_tds_name_exist(name) == 255)
   100aa:	ce 01       	movw	r24, r28
   100ac:	01 96       	adiw	r24, 0x01	; 1
   100ae:	0e 94 0d 80 	call	0x1001a	; 0x1001a <remote_tds_name_exist(char*)>
   100b2:	8f 3f       	cpi	r24, 0xFF	; 255
   100b4:	41 f4       	brne	.+16     	; 0x100c6 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
   100b6:	1a 30       	cpi	r17, 0x0A	; 10
   100b8:	30 f4       	brcc	.+12     	; 0x100c6 <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
   100ba:	be 01       	movw	r22, r28
   100bc:	6f 5f       	subi	r22, 0xFF	; 255
   100be:	7f 4f       	sbci	r23, 0xFF	; 255
   100c0:	81 2f       	mov	r24, r17
   100c2:	0e 94 03 71 	call	0xe206	; 0xe206 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
   100c6:	62 96       	adiw	r28, 0x12	; 18
   100c8:	0f b6       	in	r0, 0x3f	; 63
   100ca:	f8 94       	cli
   100cc:	de bf       	out	0x3e, r29	; 62
   100ce:	0f be       	out	0x3f, r0	; 63
   100d0:	cd bf       	out	0x3d, r28	; 61
   100d2:	df 91       	pop	r29
   100d4:	cf 91       	pop	r28
   100d6:	1f 91       	pop	r17
   100d8:	08 95       	ret

000100da <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/


void remote_tds_subscibe_topic(uint8_t idx)
{
   100da:	cf 93       	push	r28
   100dc:	df 93       	push	r29
   100de:	cd b7       	in	r28, 0x3d	; 61
   100e0:	de b7       	in	r29, 0x3e	; 62
   100e2:	c1 58       	subi	r28, 0x81	; 129
   100e4:	d1 09       	sbc	r29, r1
   100e6:	0f b6       	in	r0, 0x3f	; 63
   100e8:	f8 94       	cli
   100ea:	de bf       	out	0x3e, r29	; 62
   100ec:	0f be       	out	0x3f, r0	; 63
   100ee:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1848
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
   100f0:	cf 57       	subi	r28, 0x7F	; 127
   100f2:	df 4f       	sbci	r29, 0xFF	; 255
   100f4:	18 82       	st	Y, r1
   100f6:	c1 58       	subi	r28, 0x81	; 129
   100f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
  remote_tds_get_complete(idx, &active, tmp1);
   100fa:	ae 01       	movw	r20, r28
   100fc:	4f 5f       	subi	r20, 0xFF	; 255
   100fe:	5f 4f       	sbci	r21, 0xFF	; 255
   10100:	be 01       	movw	r22, r28
   10102:	6f 57       	subi	r22, 0x7F	; 127
   10104:	7f 4f       	sbci	r23, 0xFF	; 255
   10106:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
  if (active == 1)
   1010a:	cf 57       	subi	r28, 0x7F	; 127
   1010c:	df 4f       	sbci	r29, 0xFF	; 255
   1010e:	88 81       	ld	r24, Y
   10110:	c1 58       	subi	r28, 0x81	; 129
   10112:	d0 40       	sbci	r29, 0x00	; 0
   10114:	81 30       	cpi	r24, 0x01	; 1
   10116:	d9 f4       	brne	.+54     	; 0x1014e <remote_tds_subscibe_topic(unsigned char)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1852
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash); /// /rtds/
   10118:	62 e3       	ldi	r22, 0x32	; 50
   1011a:	71 e8       	ldi	r23, 0x81	; 129
   1011c:	ce 01       	movw	r24, r28
   1011e:	8f 5b       	subi	r24, 0xBF	; 191
   10120:	9f 4f       	sbci	r25, 0xFF	; 255
   10122:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
    strcat(tmp2, tmp1);
   10126:	be 01       	movw	r22, r28
   10128:	6f 5f       	subi	r22, 0xFF	; 255
   1012a:	7f 4f       	sbci	r23, 0xFF	; 255
   1012c:	ce 01       	movw	r24, r28
   1012e:	8f 5b       	subi	r24, 0xBF	; 191
   10130:	9f 4f       	sbci	r25, 0xFF	; 255
   10132:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
    strcat(tmp2, "/#");
   10136:	63 e8       	ldi	r22, 0x83	; 131
   10138:	76 e0       	ldi	r23, 0x06	; 6
   1013a:	ce 01       	movw	r24, r28
   1013c:	8f 5b       	subi	r24, 0xBF	; 191
   1013e:	9f 4f       	sbci	r25, 0xFF	; 255
   10140:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
    mqtt_client.subscribe(tmp2);
   10144:	ce 01       	movw	r24, r28
   10146:	8f 5b       	subi	r24, 0xBF	; 191
   10148:	9f 4f       	sbci	r25, 0xFF	; 255
   1014a:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
  }
}
   1014e:	cf 57       	subi	r28, 0x7F	; 127
   10150:	df 4f       	sbci	r29, 0xFF	; 255
   10152:	0f b6       	in	r0, 0x3f	; 63
   10154:	f8 94       	cli
   10156:	de bf       	out	0x3e, r29	; 62
   10158:	0f be       	out	0x3f, r0	; 63
   1015a:	cd bf       	out	0x3d, r28	; 61
   1015c:	df 91       	pop	r29
   1015e:	cf 91       	pop	r28
   10160:	08 95       	ret

00010162 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4757
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}

void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
   10162:	1f 93       	push	r17
   10164:	cf 93       	push	r28
   10166:	df 93       	push	r29
   10168:	cd b7       	in	r28, 0x3d	; 61
   1016a:	de b7       	in	r29, 0x3e	; 62
   1016c:	62 97       	sbiw	r28, 0x12	; 18
   1016e:	0f b6       	in	r0, 0x3f	; 63
   10170:	f8 94       	cli
   10172:	de bf       	out	0x3e, r29	; 62
   10174:	0f be       	out	0x3f, r0	; 63
   10176:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1378
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
   10178:	10 91 57 09 	lds	r17, 0x0957	; 0x800957 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4761
void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
   1017c:	ce 01       	movw	r24, r28
   1017e:	01 96       	adiw	r24, 0x01	; 1
   10180:	0e 94 b7 54 	call	0xa96e	; 0xa96e <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4763
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
   10184:	89 81       	ldd	r24, Y+1	; 0x01
   10186:	88 23       	and	r24, r24
   10188:	81 f0       	breq	.+32     	; 0x101aa <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
    if (remote_tds_name_exist(name) == 255)
   1018a:	ce 01       	movw	r24, r28
   1018c:	01 96       	adiw	r24, 0x01	; 1
   1018e:	0e 94 0d 80 	call	0x1001a	; 0x1001a <remote_tds_name_exist(char*)>
   10192:	8f 3f       	cpi	r24, 0xFF	; 255
   10194:	51 f4       	brne	.+20     	; 0x101aa <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4766
    {
      remote_tds_set_complete(idx, active, name);
   10196:	ae 01       	movw	r20, r28
   10198:	4f 5f       	subi	r20, 0xFF	; 255
   1019a:	5f 4f       	sbci	r21, 0xFF	; 255
   1019c:	61 e0       	ldi	r22, 0x01	; 1
   1019e:	81 2f       	mov	r24, r17
   101a0:	0e 94 c7 71 	call	0xe38e	; 0xe38e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767
      remote_tds_subscibe_topic(idx);
   101a4:	81 2f       	mov	r24, r17
   101a6:	0e 94 6d 80 	call	0x100da	; 0x100da <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769
    }
}
   101aa:	62 96       	adiw	r28, 0x12	; 18
   101ac:	0f b6       	in	r0, 0x3f	; 63
   101ae:	f8 94       	cli
   101b0:	de bf       	out	0x3e, r29	; 62
   101b2:	0f be       	out	0x3f, r0	; 63
   101b4:	cd bf       	out	0x3d, r28	; 61
   101b6:	df 91       	pop	r29
   101b8:	cf 91       	pop	r28
   101ba:	1f 91       	pop	r17
   101bc:	08 95       	ret

000101be <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4641
  remote_tds_clear(args2);
  MenuHistoryPrevMenu(0, 0, 0);
}
////
void click_rtds_subscribe(uint16_t args1, uint16_t idx, uint8_t args3)
{
   101be:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4642
  remote_tds_subscibe_topic(idx);
   101c0:	0c 94 6d 80 	jmp	0x100da	; 0x100da <remote_tds_subscibe_topic(unsigned char)>

000101c4 <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1460
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
   101c4:	ff 92       	push	r15
   101c6:	0f 93       	push	r16
   101c8:	1f 93       	push	r17
   101ca:	cf 93       	push	r28
   101cc:	df 93       	push	r29
   101ce:	cd b7       	in	r28, 0x3d	; 61
   101d0:	de b7       	in	r29, 0x3e	; 62
   101d2:	63 97       	sbiw	r28, 0x13	; 19
   101d4:	0f b6       	in	r0, 0x3f	; 63
   101d6:	f8 94       	cli
   101d8:	de bf       	out	0x3e, r29	; 62
   101da:	0f be       	out	0x3f, r0	; 63
   101dc:	cd bf       	out	0x3d, r28	; 61
   101de:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1463
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
   101e0:	ae 01       	movw	r20, r28
   101e2:	4f 5f       	subi	r20, 0xFF	; 255
   101e4:	5f 4f       	sbci	r21, 0xFF	; 255
   101e6:	be 01       	movw	r22, r28
   101e8:	6d 5e       	subi	r22, 0xED	; 237
   101ea:	7f 4f       	sbci	r23, 0xFF	; 255
   101ec:	8f 2d       	mov	r24, r15
   101ee:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1464
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
   101f2:	70 e0       	ldi	r23, 0x00	; 0
   101f4:	60 e0       	ldi	r22, 0x00	; 0
   101f6:	87 e6       	ldi	r24, 0x67	; 103
   101f8:	90 e0       	ldi	r25, 0x00	; 0
   101fa:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1465
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name, &valid_true);
   101fe:	0b e0       	ldi	r16, 0x0B	; 11
   10200:	10 e5       	ldi	r17, 0x50	; 80
   10202:	21 e4       	ldi	r18, 0x41	; 65
   10204:	30 e8       	ldi	r19, 0x80	; 128
   10206:	4f 2d       	mov	r20, r15
   10208:	62 e1       	ldi	r22, 0x12	; 18
   1020a:	ce 01       	movw	r24, r28
   1020c:	01 96       	adiw	r24, 0x01	; 1
   1020e:	0e 94 bb 54 	call	0xa976	; 0xa976 <display_element_set_string(char*, unsigned char, unsigned char, void (*)(unsigned int, unsigned int, unsigned char), unsigned char (*)())>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1467
  //dialog_save_variable_function = ;
}
   10212:	63 96       	adiw	r28, 0x13	; 19
   10214:	0f b6       	in	r0, 0x3f	; 63
   10216:	f8 94       	cli
   10218:	de bf       	out	0x3e, r29	; 62
   1021a:	0f be       	out	0x3f, r0	; 63
   1021c:	cd bf       	out	0x3d, r28	; 61
   1021e:	df 91       	pop	r29
   10220:	cf 91       	pop	r28
   10222:	1f 91       	pop	r17
   10224:	0f 91       	pop	r16
   10226:	ff 90       	pop	r15
   10228:	08 95       	ret

0001022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
}



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   1022a:	4f 92       	push	r4
   1022c:	5f 92       	push	r5
   1022e:	6f 92       	push	r6
   10230:	7f 92       	push	r7
   10232:	8f 92       	push	r8
   10234:	9f 92       	push	r9
   10236:	af 92       	push	r10
   10238:	bf 92       	push	r11
   1023a:	cf 92       	push	r12
   1023c:	df 92       	push	r13
   1023e:	ef 92       	push	r14
   10240:	ff 92       	push	r15
   10242:	0f 93       	push	r16
   10244:	1f 93       	push	r17
   10246:	cf 93       	push	r28
   10248:	df 93       	push	r29
   1024a:	00 d0       	rcall	.+0      	; 0x1024c <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   1024c:	00 d0       	rcall	.+0      	; 0x1024e <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   1024e:	1f 92       	push	r1
   10250:	1f 92       	push	r1
   10252:	cd b7       	in	r28, 0x3d	; 61
   10254:	de b7       	in	r29, 0x3e	; 62
   10256:	6c 01       	movw	r12, r24
   10258:	46 2e       	mov	r4, r22
   1025a:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
   1025c:	fc 01       	movw	r30, r24
   1025e:	10 82       	st	Z, r1
   10260:	3a 01       	movw	r6, r20
   10262:	f1 2c       	mov	r15, r1
   10264:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   10266:	a0 2e       	mov	r10, r16
   10268:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   1026a:	8e 01       	movw	r16, r28
   1026c:	0f 5f       	subi	r16, 0xFF	; 255
   1026e:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   10270:	82 2f       	mov	r24, r18
   10272:	81 50       	subi	r24, 0x01	; 1
   10274:	99 0b       	sbc	r25, r25
   10276:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   10278:	f3 01       	movw	r30, r6
   1027a:	81 91       	ld	r24, Z+
   1027c:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
   1027e:	a5 01       	movw	r20, r10
   10280:	b8 01       	movw	r22, r16
   10282:	90 e0       	ldi	r25, 0x00	; 0
   10284:	0e 94 b7 f1 	call	0x1e36e	; 0x1e36e <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < 2)
   10288:	f8 01       	movw	r30, r16
   1028a:	01 90       	ld	r0, Z+
   1028c:	00 20       	and	r0, r0
   1028e:	e9 f7       	brne	.-6      	; 0x1028a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   10290:	31 97       	sbiw	r30, 0x01	; 1
   10292:	e0 1b       	sub	r30, r16
   10294:	f1 0b       	sbc	r31, r17
   10296:	32 97       	sbiw	r30, 0x02	; 2
   10298:	28 f4       	brcc	.+10     	; 0x102a4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
   1029a:	68 e2       	ldi	r22, 0x28	; 40
   1029c:	74 e0       	ldi	r23, 0x04	; 4
   1029e:	c6 01       	movw	r24, r12
   102a0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
   102a4:	b8 01       	movw	r22, r16
   102a6:	c6 01       	movw	r24, r12
   102a8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
   102ac:	e8 14       	cp	r14, r8
   102ae:	f9 04       	cpc	r15, r9
   102b0:	34 f4       	brge	.+12     	; 0x102be <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
   102b2:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
   102b4:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
   102b6:	b8 01       	movw	r22, r16
   102b8:	c6 01       	movw	r24, r12
   102ba:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
   102be:	ff ef       	ldi	r31, 0xFF	; 255
   102c0:	ef 1a       	sub	r14, r31
   102c2:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   102c4:	e5 14       	cp	r14, r5
   102c6:	c0 f2       	brcs	.-80     	; 0x10278 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   102c8:	28 96       	adiw	r28, 0x08	; 8
   102ca:	0f b6       	in	r0, 0x3f	; 63
   102cc:	f8 94       	cli
   102ce:	de bf       	out	0x3e, r29	; 62
   102d0:	0f be       	out	0x3f, r0	; 63
   102d2:	cd bf       	out	0x3d, r28	; 61
   102d4:	df 91       	pop	r29
   102d6:	cf 91       	pop	r28
   102d8:	1f 91       	pop	r17
   102da:	0f 91       	pop	r16
   102dc:	ff 90       	pop	r15
   102de:	ef 90       	pop	r14
   102e0:	df 90       	pop	r13
   102e2:	cf 90       	pop	r12
   102e4:	bf 90       	pop	r11
   102e6:	af 90       	pop	r10
   102e8:	9f 90       	pop	r9
   102ea:	8f 90       	pop	r8
   102ec:	7f 90       	pop	r7
   102ee:	6f 90       	pop	r6
   102f0:	5f 90       	pop	r5
   102f2:	4f 90       	pop	r4
   102f4:	08 95       	ret

000102f6 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5776

   Funkce pro zobrazeni sitovych informaci

*/
void display_element_show_network_detail(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
   102f6:	af 92       	push	r10
   102f8:	bf 92       	push	r11
   102fa:	cf 92       	push	r12
   102fc:	df 92       	push	r13
   102fe:	ef 92       	push	r14
   10300:	ff 92       	push	r15
   10302:	0f 93       	push	r16
   10304:	1f 93       	push	r17
   10306:	cf 93       	push	r28
   10308:	df 93       	push	r29
   1030a:	cd b7       	in	r28, 0x3d	; 61
   1030c:	de b7       	in	r29, 0x3e	; 62
   1030e:	c2 54       	subi	r28, 0x42	; 66
   10310:	d1 09       	sbc	r29, r1
   10312:	0f b6       	in	r0, 0x3f	; 63
   10314:	f8 94       	cli
   10316:	de bf       	out	0x3e, r29	; 62
   10318:	0f be       	out	0x3f, r0	; 63
   1031a:	cd bf       	out	0x3d, r28	; 61
   1031c:	6c 01       	movw	r12, r24
   1031e:	5b 01       	movw	r10, r22
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   10320:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   10324:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z35display_element_show_network_detailjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5780
  char str1[36];
  char str2[24];
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
   10328:	26 0f       	add	r18, r22
   1032a:	37 1f       	adc	r19, r23
   1032c:	48 0f       	add	r20, r24
   1032e:	59 1f       	adc	r21, r25
   10330:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5782
  /// mac adresa
  strcpy_P(str1, new_text_device_mac);
   10334:	66 ec       	ldi	r22, 0xC6	; 198
   10336:	75 e8       	ldi	r23, 0x85	; 133
   10338:	ce 01       	movw	r24, r28
   1033a:	01 96       	adiw	r24, 0x01	; 1
   1033c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5783
  strcat(str1, ": ");
   10340:	66 ed       	ldi	r22, 0xD6	; 214
   10342:	76 e0       	ldi	r23, 0x06	; 6
   10344:	ce 01       	movw	r24, r28
   10346:	01 96       	adiw	r24, 0x01	; 1
   10348:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5784
  createString(str2, '.', device.mac, 6, 16);
   1034c:	00 e1       	ldi	r16, 0x10	; 16
   1034e:	26 e0       	ldi	r18, 0x06	; 6
   10350:	45 eb       	ldi	r20, 0xB5	; 181
   10352:	5d e0       	ldi	r21, 0x0D	; 13
   10354:	6e e2       	ldi	r22, 0x2E	; 46
   10356:	ce 01       	movw	r24, r28
   10358:	85 96       	adiw	r24, 0x25	; 37
   1035a:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5785
  strcat(str1, str2);
   1035e:	be 01       	movw	r22, r28
   10360:	6b 5d       	subi	r22, 0xDB	; 219
   10362:	7f 4f       	sbci	r23, 0xFF	; 255
   10364:	ce 01       	movw	r24, r28
   10366:	01 96       	adiw	r24, 0x01	; 1
   10368:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5786
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
   1036c:	85 e0       	ldi	r24, 0x05	; 5
   1036e:	c8 0e       	add	r12, r24
   10370:	d1 1c       	adc	r13, r1
   10372:	a5 01       	movw	r20, r10
   10374:	46 5f       	subi	r20, 0xF6	; 246
   10376:	5f 4f       	sbci	r21, 0xFF	; 255
   10378:	ee 24       	eor	r14, r14
   1037a:	ea 94       	dec	r14
   1037c:	fe 2c       	mov	r15, r14
   1037e:	10 e0       	ldi	r17, 0x00	; 0
   10380:	00 e0       	ldi	r16, 0x00	; 0
   10382:	21 e0       	ldi	r18, 0x01	; 1
   10384:	b6 01       	movw	r22, r12
   10386:	ce 01       	movw	r24, r28
   10388:	01 96       	adiw	r24, 0x01	; 1
   1038a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5788
  /// nazev
  strcpy_P(str1, new_text_device_nazev);
   1038e:	67 eb       	ldi	r22, 0xB7	; 183
   10390:	75 e8       	ldi	r23, 0x85	; 133
   10392:	ce 01       	movw	r24, r28
   10394:	01 96       	adiw	r24, 0x01	; 1
   10396:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5789
  strcat(str1, ": ");
   1039a:	66 ed       	ldi	r22, 0xD6	; 214
   1039c:	76 e0       	ldi	r23, 0x06	; 6
   1039e:	ce 01       	movw	r24, r28
   103a0:	01 96       	adiw	r24, 0x01	; 1
   103a2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5790
  strcat(str1, device.nazev);
   103a6:	6b ec       	ldi	r22, 0xCB	; 203
   103a8:	7d e0       	ldi	r23, 0x0D	; 13
   103aa:	ce 01       	movw	r24, r28
   103ac:	01 96       	adiw	r24, 0x01	; 1
   103ae:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5791
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
   103b2:	a5 01       	movw	r20, r10
   103b4:	47 5e       	subi	r20, 0xE7	; 231
   103b6:	5f 4f       	sbci	r21, 0xFF	; 255
   103b8:	21 e0       	ldi	r18, 0x01	; 1
   103ba:	b6 01       	movw	r22, r12
   103bc:	ce 01       	movw	r24, r28
   103be:	01 96       	adiw	r24, 0x01	; 1
   103c0:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5793
  /// ip adresa
  ip2CharArray(device.myIP, str2);
   103c4:	6b eb       	ldi	r22, 0xBB	; 187
   103c6:	7d e0       	ldi	r23, 0x0D	; 13
   103c8:	ce 01       	movw	r24, r28
   103ca:	cd 96       	adiw	r24, 0x3d	; 61
   103cc:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   103d0:	be 01       	movw	r22, r28
   103d2:	6b 5d       	subi	r22, 0xDB	; 219
   103d4:	7f 4f       	sbci	r23, 0xFF	; 255
   103d6:	ce 01       	movw	r24, r28
   103d8:	cd 96       	adiw	r24, 0x3d	; 61
   103da:	0e 94 03 55 	call	0xaa06	; 0xaa06 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
  strcpy_P(str1, new_text_device_ip);
   103de:	6d ea       	ldi	r22, 0xAD	; 173
   103e0:	75 e8       	ldi	r23, 0x85	; 133
   103e2:	ce 01       	movw	r24, r28
   103e4:	01 96       	adiw	r24, 0x01	; 1
   103e6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5795
  strcat(str1, ": ");
   103ea:	66 ed       	ldi	r22, 0xD6	; 214
   103ec:	76 e0       	ldi	r23, 0x06	; 6
   103ee:	ce 01       	movw	r24, r28
   103f0:	01 96       	adiw	r24, 0x01	; 1
   103f2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
  strcat(str1, str2);
   103f6:	be 01       	movw	r22, r28
   103f8:	6b 5d       	subi	r22, 0xDB	; 219
   103fa:	7f 4f       	sbci	r23, 0xFF	; 255
   103fc:	ce 01       	movw	r24, r28
   103fe:	01 96       	adiw	r24, 0x01	; 1
   10400:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5797
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
   10404:	a5 01       	movw	r20, r10
   10406:	49 5c       	subi	r20, 0xC9	; 201
   10408:	5f 4f       	sbci	r21, 0xFF	; 255
   1040a:	21 e0       	ldi	r18, 0x01	; 1
   1040c:	b6 01       	movw	r22, r12
   1040e:	ce 01       	movw	r24, r28
   10410:	01 96       	adiw	r24, 0x01	; 1
   10412:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5799
  /// ip maska
  ip2CharArray(device.myMASK, str2);
   10416:	6f eb       	ldi	r22, 0xBF	; 191
   10418:	7d e0       	ldi	r23, 0x0D	; 13
   1041a:	ce 01       	movw	r24, r28
   1041c:	cd 96       	adiw	r24, 0x3d	; 61
   1041e:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   10422:	be 01       	movw	r22, r28
   10424:	6b 5d       	subi	r22, 0xDB	; 219
   10426:	7f 4f       	sbci	r23, 0xFF	; 255
   10428:	ce 01       	movw	r24, r28
   1042a:	cd 96       	adiw	r24, 0x3d	; 61
   1042c:	0e 94 03 55 	call	0xaa06	; 0xaa06 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5800
  strcpy_P(str1, new_text_device_mask);
   10430:	64 ea       	ldi	r22, 0xA4	; 164
   10432:	75 e8       	ldi	r23, 0x85	; 133
   10434:	ce 01       	movw	r24, r28
   10436:	01 96       	adiw	r24, 0x01	; 1
   10438:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5801
  strcat(str1, ": ");
   1043c:	66 ed       	ldi	r22, 0xD6	; 214
   1043e:	76 e0       	ldi	r23, 0x06	; 6
   10440:	ce 01       	movw	r24, r28
   10442:	01 96       	adiw	r24, 0x01	; 1
   10444:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5802
  strcat(str1, str2);
   10448:	be 01       	movw	r22, r28
   1044a:	6b 5d       	subi	r22, 0xDB	; 219
   1044c:	7f 4f       	sbci	r23, 0xFF	; 255
   1044e:	ce 01       	movw	r24, r28
   10450:	01 96       	adiw	r24, 0x01	; 1
   10452:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5803
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
   10456:	a5 01       	movw	r20, r10
   10458:	4a 5b       	subi	r20, 0xBA	; 186
   1045a:	5f 4f       	sbci	r21, 0xFF	; 255
   1045c:	21 e0       	ldi	r18, 0x01	; 1
   1045e:	b6 01       	movw	r22, r12
   10460:	ce 01       	movw	r24, r28
   10462:	01 96       	adiw	r24, 0x01	; 1
   10464:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5805
  /// ip gw
  ip2CharArray(device.myGW, str2);
   10468:	67 ec       	ldi	r22, 0xC7	; 199
   1046a:	7d e0       	ldi	r23, 0x0D	; 13
   1046c:	ce 01       	movw	r24, r28
   1046e:	cd 96       	adiw	r24, 0x3d	; 61
   10470:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   10474:	be 01       	movw	r22, r28
   10476:	6b 5d       	subi	r22, 0xDB	; 219
   10478:	7f 4f       	sbci	r23, 0xFF	; 255
   1047a:	ce 01       	movw	r24, r28
   1047c:	cd 96       	adiw	r24, 0x3d	; 61
   1047e:	0e 94 03 55 	call	0xaa06	; 0xaa06 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5806
  strcpy_P(str1, new_text_device_gw);
   10482:	66 e9       	ldi	r22, 0x96	; 150
   10484:	75 e8       	ldi	r23, 0x85	; 133
   10486:	ce 01       	movw	r24, r28
   10488:	01 96       	adiw	r24, 0x01	; 1
   1048a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5807
  strcat(str1, ": ");
   1048e:	66 ed       	ldi	r22, 0xD6	; 214
   10490:	76 e0       	ldi	r23, 0x06	; 6
   10492:	ce 01       	movw	r24, r28
   10494:	01 96       	adiw	r24, 0x01	; 1
   10496:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5808
  strcat(str1, str2);
   1049a:	be 01       	movw	r22, r28
   1049c:	6b 5d       	subi	r22, 0xDB	; 219
   1049e:	7f 4f       	sbci	r23, 0xFF	; 255
   104a0:	ce 01       	movw	r24, r28
   104a2:	01 96       	adiw	r24, 0x01	; 1
   104a4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5809
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
   104a8:	a5 01       	movw	r20, r10
   104aa:	4b 5a       	subi	r20, 0xAB	; 171
   104ac:	5f 4f       	sbci	r21, 0xFF	; 255
   104ae:	21 e0       	ldi	r18, 0x01	; 1
   104b0:	b6 01       	movw	r22, r12
   104b2:	ce 01       	movw	r24, r28
   104b4:	01 96       	adiw	r24, 0x01	; 1
   104b6:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5811
  /// ip dns serveru
  ip2CharArray(device.myDNS, str2);
   104ba:	63 ec       	ldi	r22, 0xC3	; 195
   104bc:	7d e0       	ldi	r23, 0x0D	; 13
   104be:	ce 01       	movw	r24, r28
   104c0:	cd 96       	adiw	r24, 0x3d	; 61
   104c2:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   104c6:	be 01       	movw	r22, r28
   104c8:	6b 5d       	subi	r22, 0xDB	; 219
   104ca:	7f 4f       	sbci	r23, 0xFF	; 255
   104cc:	ce 01       	movw	r24, r28
   104ce:	cd 96       	adiw	r24, 0x3d	; 61
   104d0:	0e 94 03 55 	call	0xaa06	; 0xaa06 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5812
  strcpy_P(str1, new_text_device_dns);
   104d4:	6b e8       	ldi	r22, 0x8B	; 139
   104d6:	75 e8       	ldi	r23, 0x85	; 133
   104d8:	ce 01       	movw	r24, r28
   104da:	01 96       	adiw	r24, 0x01	; 1
   104dc:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5813
  strcat(str1, ": ");
   104e0:	66 ed       	ldi	r22, 0xD6	; 214
   104e2:	76 e0       	ldi	r23, 0x06	; 6
   104e4:	ce 01       	movw	r24, r28
   104e6:	01 96       	adiw	r24, 0x01	; 1
   104e8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5814
  strcat(str1, str2);
   104ec:	be 01       	movw	r22, r28
   104ee:	6b 5d       	subi	r22, 0xDB	; 219
   104f0:	7f 4f       	sbci	r23, 0xFF	; 255
   104f2:	ce 01       	movw	r24, r28
   104f4:	01 96       	adiw	r24, 0x01	; 1
   104f6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5815
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
   104fa:	a5 01       	movw	r20, r10
   104fc:	4c 59       	subi	r20, 0x9C	; 156
   104fe:	5f 4f       	sbci	r21, 0xFF	; 255
   10500:	21 e0       	ldi	r18, 0x01	; 1
   10502:	b6 01       	movw	r22, r12
   10504:	ce 01       	movw	r24, r28
   10506:	01 96       	adiw	r24, 0x01	; 1
   10508:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5816
}
   1050c:	ce 5b       	subi	r28, 0xBE	; 190
   1050e:	df 4f       	sbci	r29, 0xFF	; 255
   10510:	0f b6       	in	r0, 0x3f	; 63
   10512:	f8 94       	cli
   10514:	de bf       	out	0x3e, r29	; 62
   10516:	0f be       	out	0x3f, r0	; 63
   10518:	cd bf       	out	0x3d, r28	; 61
   1051a:	df 91       	pop	r29
   1051c:	cf 91       	pop	r28
   1051e:	1f 91       	pop	r17
   10520:	0f 91       	pop	r16
   10522:	ff 90       	pop	r15
   10524:	ef 90       	pop	r14
   10526:	df 90       	pop	r13
   10528:	cf 90       	pop	r12
   1052a:	bf 90       	pop	r11
   1052c:	af 90       	pop	r10
   1052e:	08 95       	ret

00010530 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4658
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
   10530:	7f 92       	push	r7
   10532:	8f 92       	push	r8
   10534:	9f 92       	push	r9
   10536:	af 92       	push	r10
   10538:	bf 92       	push	r11
   1053a:	cf 92       	push	r12
   1053c:	df 92       	push	r13
   1053e:	ef 92       	push	r14
   10540:	ff 92       	push	r15
   10542:	0f 93       	push	r16
   10544:	1f 93       	push	r17
   10546:	cf 93       	push	r28
   10548:	df 93       	push	r29
   1054a:	cd b7       	in	r28, 0x3d	; 61
   1054c:	de b7       	in	r29, 0x3e	; 62
   1054e:	e0 97       	sbiw	r28, 0x30	; 48
   10550:	0f b6       	in	r0, 0x3f	; 63
   10552:	f8 94       	cli
   10554:	de bf       	out	0x3e, r29	; 62
   10556:	0f be       	out	0x3f, r0	; 63
   10558:	cd bf       	out	0x3d, r28	; 61
   1055a:	98 2e       	mov	r9, r24
   1055c:	82 2e       	mov	r8, r18
   1055e:	73 2e       	mov	r7, r19
   10560:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4660
  char str2[26];
  strcpy_P(line1, text_not_used);
   10562:	6f ef       	ldi	r22, 0xFF	; 255
   10564:	73 e8       	ldi	r23, 0x83	; 131
   10566:	82 2f       	mov	r24, r18
   10568:	93 2f       	mov	r25, r19
   1056a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4661
  strcpy(line2, "-");
   1056e:	69 e6       	ldi	r22, 0x69	; 105
   10570:	73 e0       	ldi	r23, 0x03	; 3
   10572:	c8 01       	movw	r24, r16
   10574:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4662
  if (w_rom[args1].used == 1)
   10578:	4b e0       	ldi	r20, 0x0B	; 11
   1057a:	49 9d       	mul	r20, r9
   1057c:	c0 01       	movw	r24, r0
   1057e:	11 24       	eor	r1, r1
   10580:	9c 01       	movw	r18, r24
   10582:	26 5a       	subi	r18, 0xA6	; 166
   10584:	33 4f       	sbci	r19, 0xF3	; 243
   10586:	69 01       	movw	r12, r18
   10588:	f9 01       	movw	r30, r18
   1058a:	81 85       	ldd	r24, Z+9	; 0x09
   1058c:	81 30       	cpi	r24, 0x01	; 1
   1058e:	c9 f5       	brne	.+114    	; 0x10602 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
   10590:	a9 01       	movw	r20, r18
   10592:	00 e1       	ldi	r16, 0x10	; 16
   10594:	28 e0       	ldi	r18, 0x08	; 8
   10596:	6a e3       	ldi	r22, 0x3A	; 58
   10598:	ce 01       	movw	r24, r28
   1059a:	01 96       	adiw	r24, 0x01	; 1
   1059c:	5c 01       	movw	r10, r24
   1059e:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
    sprintf(line1, "%d: %s", args1, str2);
   105a2:	bf 92       	push	r11
   105a4:	af 92       	push	r10
   105a6:	1f 92       	push	r1
   105a8:	9f 92       	push	r9
   105aa:	8a e2       	ldi	r24, 0x2A	; 42
   105ac:	94 e0       	ldi	r25, 0x04	; 4
   105ae:	9f 93       	push	r25
   105b0:	8f 93       	push	r24
   105b2:	7f 92       	push	r7
   105b4:	8f 92       	push	r8
   105b6:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4667

    if (w_rom[args1].tds_idx != 255)
   105ba:	0f b6       	in	r0, 0x3f	; 63
   105bc:	f8 94       	cli
   105be:	de bf       	out	0x3e, r29	; 62
   105c0:	0f be       	out	0x3f, r0	; 63
   105c2:	cd bf       	out	0x3d, r28	; 61
   105c4:	f6 01       	movw	r30, r12
   105c6:	82 85       	ldd	r24, Z+10	; 0x0a
   105c8:	8f 3f       	cpi	r24, 0xFF	; 255
   105ca:	79 f1       	breq	.+94     	; 0x1062a <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4669
    {
      strcpy_P(line2, text_nastavit_tds);
   105cc:	6c ee       	ldi	r22, 0xEC	; 236
   105ce:	73 e8       	ldi	r23, 0x83	; 131
   105d0:	c7 01       	movw	r24, r14
   105d2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   105d6:	be 01       	movw	r22, r28
   105d8:	65 5e       	subi	r22, 0xE5	; 229
   105da:	7f 4f       	sbci	r23, 0xFF	; 255
   105dc:	f6 01       	movw	r30, r12
   105de:	82 85       	ldd	r24, Z+10	; 0x0a
   105e0:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
   105e4:	be 01       	movw	r22, r28
   105e6:	69 5d       	subi	r22, 0xD9	; 217
   105e8:	7f 4f       	sbci	r23, 0xFF	; 255
   105ea:	c5 01       	movw	r24, r10
   105ec:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4671
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
   105f0:	67 ed       	ldi	r22, 0xD7	; 215
   105f2:	76 e0       	ldi	r23, 0x06	; 6
   105f4:	c7 01       	movw	r24, r14
   105f6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4672
      strcat(line2, str2);
   105fa:	b5 01       	movw	r22, r10
   105fc:	c7 01       	movw	r24, r14
   105fe:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4677
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
   10602:	e0 96       	adiw	r28, 0x30	; 48
   10604:	0f b6       	in	r0, 0x3f	; 63
   10606:	f8 94       	cli
   10608:	de bf       	out	0x3e, r29	; 62
   1060a:	0f be       	out	0x3f, r0	; 63
   1060c:	cd bf       	out	0x3d, r28	; 61
   1060e:	df 91       	pop	r29
   10610:	cf 91       	pop	r28
   10612:	1f 91       	pop	r17
   10614:	0f 91       	pop	r16
   10616:	ff 90       	pop	r15
   10618:	ef 90       	pop	r14
   1061a:	df 90       	pop	r13
   1061c:	cf 90       	pop	r12
   1061e:	bf 90       	pop	r11
   10620:	af 90       	pop	r10
   10622:	9f 90       	pop	r9
   10624:	8f 90       	pop	r8
   10626:	7f 90       	pop	r7
   10628:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4675
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
   1062a:	6c e0       	ldi	r22, 0x0C	; 12
   1062c:	74 e8       	ldi	r23, 0x84	; 132
   1062e:	c7 01       	movw	r24, r14
   10630:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
   10634:	e6 cf       	rjmp	.-52     	; 0x10602 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0xd2>

00010636 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4257
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
   10636:	3f 92       	push	r3
   10638:	4f 92       	push	r4
   1063a:	5f 92       	push	r5
   1063c:	6f 92       	push	r6
   1063e:	7f 92       	push	r7
   10640:	8f 92       	push	r8
   10642:	9f 92       	push	r9
   10644:	af 92       	push	r10
   10646:	bf 92       	push	r11
   10648:	cf 92       	push	r12
   1064a:	df 92       	push	r13
   1064c:	ef 92       	push	r14
   1064e:	ff 92       	push	r15
   10650:	0f 93       	push	r16
   10652:	1f 93       	push	r17
   10654:	cf 93       	push	r28
   10656:	df 93       	push	r29
   10658:	cd b7       	in	r28, 0x3d	; 61
   1065a:	de b7       	in	r29, 0x3e	; 62
   1065c:	ca 54       	subi	r28, 0x4A	; 74
   1065e:	d1 09       	sbc	r29, r1
   10660:	0f b6       	in	r0, 0x3f	; 63
   10662:	f8 94       	cli
   10664:	de bf       	out	0x3e, r29	; 62
   10666:	0f be       	out	0x3f, r0	; 63
   10668:	cd bf       	out	0x3d, r28	; 61
   1066a:	4c 01       	movw	r8, r24
   1066c:	3b 01       	movw	r6, r22
   1066e:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   10670:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   10674:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
   10678:	26 0f       	add	r18, r22
   1067a:	37 1f       	adc	r19, r23
   1067c:	48 0f       	add	r20, r24
   1067e:	59 1f       	adc	r21, r25
   10680:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4264
  if (get_tds18s20(args2, &tds) == 1)
   10684:	be 01       	movw	r22, r28
   10686:	6b 5c       	subi	r22, 0xCB	; 203
   10688:	7f 4f       	sbci	r23, 0xFF	; 255
   1068a:	8e 2d       	mov	r24, r14
   1068c:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   10690:	23 01       	movw	r4, r6
   10692:	28 e2       	ldi	r18, 0x28	; 40
   10694:	42 0e       	add	r4, r18
   10696:	51 1c       	adc	r5, r1
   10698:	9e 01       	movw	r18, r28
   1069a:	2f 5f       	subi	r18, 0xFF	; 255
   1069c:	3f 4f       	sbci	r19, 0xFF	; 255
   1069e:	59 01       	movw	r10, r18
   106a0:	81 30       	cpi	r24, 0x01	; 1
   106a2:	09 f0       	breq	.+2      	; 0x106a6 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x70>
   106a4:	ca c0       	rjmp	.+404    	; 0x1083a <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4266
  {
    createString(str2, ':', tds.rom, 8, 16);
   106a6:	6e 01       	movw	r12, r28
   106a8:	3b e1       	ldi	r19, 0x1B	; 27
   106aa:	c3 0e       	add	r12, r19
   106ac:	d1 1c       	adc	r13, r1
   106ae:	00 e1       	ldi	r16, 0x10	; 16
   106b0:	28 e0       	ldi	r18, 0x08	; 8
   106b2:	ae 01       	movw	r20, r28
   106b4:	4a 5c       	subi	r20, 0xCA	; 202
   106b6:	5f 4f       	sbci	r21, 0xFF	; 255
   106b8:	6a e3       	ldi	r22, 0x3A	; 58
   106ba:	c6 01       	movw	r24, r12
   106bc:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4267
    sprintf(str1, "rom: %s", str2);
   106c0:	df 92       	push	r13
   106c2:	cf 92       	push	r12
   106c4:	81 e3       	ldi	r24, 0x31	; 49
   106c6:	94 e0       	ldi	r25, 0x04	; 4
   106c8:	9f 93       	push	r25
   106ca:	8f 93       	push	r24
   106cc:	bf 92       	push	r11
   106ce:	af 92       	push	r10
   106d0:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4268
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
   106d4:	8a e0       	ldi	r24, 0x0A	; 10
   106d6:	88 0e       	add	r8, r24
   106d8:	91 1c       	adc	r9, r1
   106da:	a3 01       	movw	r20, r6
   106dc:	4b 5a       	subi	r20, 0xAB	; 171
   106de:	5f 4f       	sbci	r21, 0xFF	; 255
   106e0:	ee 24       	eor	r14, r14
   106e2:	ea 94       	dec	r14
   106e4:	fe 2c       	mov	r15, r14
   106e6:	10 e0       	ldi	r17, 0x00	; 0
   106e8:	00 e0       	ldi	r16, 0x00	; 0
   106ea:	21 e0       	ldi	r18, 0x01	; 1
   106ec:	b4 01       	movw	r22, r8
   106ee:	c5 01       	movw	r24, r10
   106f0:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
    ///
    strcpy_P(str2, text_nazev);
   106f4:	6f ec       	ldi	r22, 0xCF	; 207
   106f6:	73 e8       	ldi	r23, 0x83	; 131
   106f8:	c6 01       	movw	r24, r12
   106fa:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4271
    sprintf(str1, "%s: %s", str2, tds.name);
   106fe:	85 e3       	ldi	r24, 0x35	; 53
   10700:	90 e0       	ldi	r25, 0x00	; 0
   10702:	8c 0f       	add	r24, r28
   10704:	9d 1f       	adc	r25, r29
   10706:	0c 96       	adiw	r24, 0x0c	; 12
   10708:	9f 93       	push	r25
   1070a:	8f 93       	push	r24
   1070c:	df 92       	push	r13
   1070e:	cf 92       	push	r12
   10710:	89 e3       	ldi	r24, 0x39	; 57
   10712:	94 e0       	ldi	r25, 0x04	; 4
   10714:	9f 93       	push	r25
   10716:	8f 93       	push	r24
   10718:	bf 92       	push	r11
   1071a:	af 92       	push	r10
   1071c:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4272
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
   10720:	22 e0       	ldi	r18, 0x02	; 2
   10722:	a2 01       	movw	r20, r4
   10724:	b4 01       	movw	r22, r8
   10726:	c5 01       	movw	r24, r10
   10728:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
   1072c:	21 96       	adiw	r28, 0x01	; 1
   1072e:	6e ad       	ldd	r22, Y+62	; 0x3e
   10730:	7f ad       	ldd	r23, Y+63	; 0x3f
   10732:	21 97       	sbiw	r28, 0x01	; 1
   10734:	07 2e       	mov	r0, r23
   10736:	00 0c       	add	r0, r0
   10738:	88 0b       	sbc	r24, r24
   1073a:	99 0b       	sbc	r25, r25
   1073c:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   10740:	20 e0       	ldi	r18, 0x00	; 0
   10742:	30 e0       	ldi	r19, 0x00	; 0
   10744:	4a e7       	ldi	r20, 0x7A	; 122
   10746:	54 e4       	ldi	r21, 0x44	; 68
   10748:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
    dtostrf(te, 4, 2, str1);
   1074c:	85 01       	movw	r16, r10
   1074e:	22 e0       	ldi	r18, 0x02	; 2
   10750:	44 e0       	ldi	r20, 0x04	; 4
   10752:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
    strcat(str1, "C");
   10756:	67 ef       	ldi	r22, 0xF7	; 247
   10758:	73 e0       	ldi	r23, 0x03	; 3
   1075a:	c5 01       	movw	r24, r10
   1075c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4277
    strcpy_P(str2, temp_offset_short);
   10760:	61 ea       	ldi	r22, 0xA1	; 161
   10762:	73 e8       	ldi	r23, 0x83	; 131
   10764:	c6 01       	movw	r24, r12
   10766:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
    strcat(str2, str1);
   1076a:	b5 01       	movw	r22, r10
   1076c:	c6 01       	movw	r24, r12
   1076e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4279
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
   10772:	a3 01       	movw	r20, r6
   10774:	44 5c       	subi	r20, 0xC4	; 196
   10776:	5f 4f       	sbci	r21, 0xFF	; 255
   10778:	10 e0       	ldi	r17, 0x00	; 0
   1077a:	00 e0       	ldi	r16, 0x00	; 0
   1077c:	22 e0       	ldi	r18, 0x02	; 2
   1077e:	b4 01       	movw	r22, r8
   10780:	c6 01       	movw	r24, r12
   10782:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
    ///
    strcpy_P(str2, nastaveni_tds_period);
   10786:	62 e9       	ldi	r22, 0x92	; 146
   10788:	73 e8       	ldi	r23, 0x83	; 131
   1078a:	c6 01       	movw	r24, r12
   1078c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4282
    sprintf(str1, "%s: %ds", str2, tds.period);
   10790:	2a 96       	adiw	r28, 0x0a	; 10
   10792:	8f ad       	ldd	r24, Y+63	; 0x3f
   10794:	2a 97       	sbiw	r28, 0x0a	; 10
   10796:	1f 92       	push	r1
   10798:	8f 93       	push	r24
   1079a:	df 92       	push	r13
   1079c:	cf 92       	push	r12
   1079e:	80 e4       	ldi	r24, 0x40	; 64
   107a0:	94 e0       	ldi	r25, 0x04	; 4
   107a2:	9f 93       	push	r25
   107a4:	8f 93       	push	r24
   107a6:	bf 92       	push	r11
   107a8:	af 92       	push	r10
   107aa:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
   107ae:	a3 01       	movw	r20, r6
   107b0:	4c 59       	subi	r20, 0x9C	; 156
   107b2:	5f 4f       	sbci	r21, 0xFF	; 255
   107b4:	22 e0       	ldi	r18, 0x02	; 2
   107b6:	b4 01       	movw	r22, r8
   107b8:	c5 01       	movw	r24, r10
   107ba:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286

    ///
    strcpy_P(str2, text_online);
   107be:	69 ea       	ldi	r22, 0xA9	; 169
   107c0:	73 e8       	ldi	r23, 0x83	; 131
   107c2:	c6 01       	movw	r24, r12
   107c4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
   107c8:	9e e1       	ldi	r25, 0x1E	; 30
   107ca:	39 9e       	mul	r3, r25
   107cc:	f0 01       	movw	r30, r0
   107ce:	11 24       	eor	r1, r1
   107d0:	e6 59       	subi	r30, 0x96	; 150
   107d2:	f4 4f       	sbci	r31, 0xF4	; 244
   107d4:	83 8d       	ldd	r24, Z+27	; 0x1b
   107d6:	1f 92       	push	r1
   107d8:	8f 93       	push	r24
   107da:	df 92       	push	r13
   107dc:	cf 92       	push	r12
   107de:	89 ef       	ldi	r24, 0xF9	; 249
   107e0:	93 e0       	ldi	r25, 0x03	; 3
   107e2:	9f 93       	push	r25
   107e4:	8f 93       	push	r24
   107e6:	bf 92       	push	r11
   107e8:	af 92       	push	r10
   107ea:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
   107ee:	a3 01       	movw	r20, r6
   107f0:	48 58       	subi	r20, 0x88	; 136
   107f2:	5f 4f       	sbci	r21, 0xFF	; 255
   107f4:	22 e0       	ldi	r18, 0x02	; 2
   107f6:	b4 01       	movw	r22, r8
   107f8:	c5 01       	movw	r24, r10
   107fa:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   107fe:	0f b6       	in	r0, 0x3f	; 63
   10800:	f8 94       	cli
   10802:	de bf       	out	0x3e, r29	; 62
   10804:	0f be       	out	0x3f, r0	; 63
   10806:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4295
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
   10808:	c6 5b       	subi	r28, 0xB6	; 182
   1080a:	df 4f       	sbci	r29, 0xFF	; 255
   1080c:	0f b6       	in	r0, 0x3f	; 63
   1080e:	f8 94       	cli
   10810:	de bf       	out	0x3e, r29	; 62
   10812:	0f be       	out	0x3f, r0	; 63
   10814:	cd bf       	out	0x3d, r28	; 61
   10816:	df 91       	pop	r29
   10818:	cf 91       	pop	r28
   1081a:	1f 91       	pop	r17
   1081c:	0f 91       	pop	r16
   1081e:	ff 90       	pop	r15
   10820:	ef 90       	pop	r14
   10822:	df 90       	pop	r13
   10824:	cf 90       	pop	r12
   10826:	bf 90       	pop	r11
   10828:	af 90       	pop	r10
   1082a:	9f 90       	pop	r9
   1082c:	8f 90       	pop	r8
   1082e:	7f 90       	pop	r7
   10830:	6f 90       	pop	r6
   10832:	5f 90       	pop	r5
   10834:	4f 90       	pop	r4
   10836:	3f 90       	pop	r3
   10838:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
   1083a:	62 e2       	ldi	r22, 0x22	; 34
   1083c:	74 e8       	ldi	r23, 0x84	; 132
   1083e:	c9 01       	movw	r24, r18
   10840:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
   10844:	b4 01       	movw	r22, r8
   10846:	67 5e       	subi	r22, 0xE7	; 231
   10848:	7f 4f       	sbci	r23, 0xFF	; 255
   1084a:	ee 24       	eor	r14, r14
   1084c:	ea 94       	dec	r14
   1084e:	fe 2c       	mov	r15, r14
   10850:	00 e0       	ldi	r16, 0x00	; 0
   10852:	18 ef       	ldi	r17, 0xF8	; 248
   10854:	24 e0       	ldi	r18, 0x04	; 4
   10856:	a2 01       	movw	r20, r4
   10858:	c5 01       	movw	r24, r10
   1085a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   1085e:	d4 cf       	rjmp	.-88     	; 0x10808 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1d2>

00010860 <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   10860:	61 e0       	ldi	r22, 0x01	; 1
   10862:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <SPI_CS>
   10866:	0c 94 d1 63 	jmp	0xc7a2	; 0xc7a2 <digitalWrite>

0001086a <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   1086a:	60 e0       	ldi	r22, 0x00	; 0
   1086c:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <SPI_CS>
   10870:	0c 94 d1 63 	jmp	0xc7a2	; 0xc7a2 <digitalWrite>

00010874 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   10874:	08 95       	ret

00010876 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   10876:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   10878:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   1087a:	0d b4       	in	r0, 0x2d	; 45
   1087c:	07 fe       	sbrs	r0, 7
   1087e:	fd cf       	rjmp	.-6      	; 0x1087a <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:221
    return SPDR;
   10880:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:222
  }
   10882:	08 95       	ret

00010884 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   10884:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   10886:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:208
  }
   10888:	08 95       	ret

0001088a <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   1088a:	cf 93       	push	r28
   1088c:	df 93       	push	r29
   1088e:	d8 2f       	mov	r29, r24
   10890:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   10892:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <wiznet_SPI_settings>
   10896:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <wiznet_SPI_settings+0x1>
   1089a:	0e 94 42 84 	call	0x10884	; 0x10884 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   1089e:	0e 94 35 84 	call	0x1086a	; 0x1086a <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   108a2:	80 e0       	ldi	r24, 0x00	; 0
   108a4:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   108a8:	8d 2f       	mov	r24, r29
   108aa:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   108ae:	8c 2f       	mov	r24, r28
   108b0:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   108b4:	80 e0       	ldi	r24, 0x00	; 0
   108b6:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   108ba:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   108bc:	0e 94 30 84 	call	0x10860	; 0x10860 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   108c0:	8c 2f       	mov	r24, r28
   108c2:	df 91       	pop	r29
   108c4:	cf 91       	pop	r28
   108c6:	08 95       	ret

000108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   108c8:	df 92       	push	r13
   108ca:	ef 92       	push	r14
   108cc:	ff 92       	push	r15
   108ce:	0f 93       	push	r16
   108d0:	1f 93       	push	r17
   108d2:	cf 93       	push	r28
   108d4:	df 93       	push	r29
   108d6:	d8 2f       	mov	r29, r24
   108d8:	d9 2e       	mov	r13, r25
   108da:	c6 2f       	mov	r28, r22
   108dc:	7a 01       	movw	r14, r20
   108de:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   108e0:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <wiznet_SPI_settings>
   108e4:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <wiznet_SPI_settings+0x1>
   108e8:	0e 94 42 84 	call	0x10884	; 0x10884 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   108ec:	0e 94 35 84 	call	0x1086a	; 0x1086a <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   108f0:	8d 2d       	mov	r24, r13
   108f2:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   108f6:	8d 2f       	mov	r24, r29
   108f8:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   108fc:	8c 2f       	mov	r24, r28
   108fe:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   10902:	e7 01       	movw	r28, r14
   10904:	e0 0e       	add	r14, r16
   10906:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   10908:	ce 15       	cp	r28, r14
   1090a:	df 05       	cpc	r29, r15
   1090c:	21 f0       	breq	.+8      	; 0x10916 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   1090e:	89 91       	ld	r24, Y+
   10910:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   10914:	f9 cf       	rjmp	.-14     	; 0x10908 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   10916:	0e 94 30 84 	call	0x10860	; 0x10860 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   1091a:	c8 01       	movw	r24, r16
   1091c:	df 91       	pop	r29
   1091e:	cf 91       	pop	r28
   10920:	1f 91       	pop	r17
   10922:	0f 91       	pop	r16
   10924:	ff 90       	pop	r15
   10926:	ef 90       	pop	r14
   10928:	df 90       	pop	r13
   1092a:	08 95       	ret

0001092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   1092c:	1f 93       	push	r17
   1092e:	cf 93       	push	r28
   10930:	df 93       	push	r29
   10932:	18 2f       	mov	r17, r24
   10934:	d6 2f       	mov	r29, r22
   10936:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   10938:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <wiznet_SPI_settings>
   1093c:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <wiznet_SPI_settings+0x1>
   10940:	0e 94 42 84 	call	0x10884	; 0x10884 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   10944:	0e 94 35 84 	call	0x1086a	; 0x1086a <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   10948:	80 e0       	ldi	r24, 0x00	; 0
   1094a:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   1094e:	81 2f       	mov	r24, r17
   10950:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   10954:	8d 2f       	mov	r24, r29
   10956:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   1095a:	8c 2f       	mov	r24, r28
   1095c:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   10960:	0e 94 30 84 	call	0x10860	; 0x10860 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   10964:	81 e0       	ldi	r24, 0x01	; 1
   10966:	df 91       	pop	r29
   10968:	cf 91       	pop	r28
   1096a:	1f 91       	pop	r17
   1096c:	08 95       	ret

0001096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   1096e:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   10970:	82 95       	swap	r24
   10972:	88 0f       	add	r24, r24
   10974:	80 7e       	andi	r24, 0xE0	; 224
   10976:	6c e0       	ldi	r22, 0x0C	; 12
   10978:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   1097a:	c9 01       	movw	r24, r18
   1097c:	0c 94 96 84 	jmp	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>

00010980 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   10980:	cf 93       	push	r28
   10982:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   10984:	60 e1       	ldi	r22, 0x10	; 16
   10986:	70 e0       	ldi	r23, 0x00	; 0
   10988:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1098c:	4f ef       	ldi	r20, 0xFF	; 255
   1098e:	62 e0       	ldi	r22, 0x02	; 2
   10990:	70 e0       	ldi	r23, 0x00	; 0
   10992:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   10994:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   10996:	0c 94 b7 84 	jmp	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001099a <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   1099a:	cf 93       	push	r28
   1099c:	df 93       	push	r29
   1099e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   109a0:	8c 85       	ldd	r24, Y+12	; 0x0c
   109a2:	88 30       	cpi	r24, 0x08	; 8
   109a4:	61 f0       	breq	.+24     	; 0x109be <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   109a6:	0e 94 c0 84 	call	0x10980	; 0x10980 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   109aa:	ec 85       	ldd	r30, Y+12	; 0x0c
   109ac:	f0 e0       	ldi	r31, 0x00	; 0
   109ae:	ee 0f       	add	r30, r30
   109b0:	ff 1f       	adc	r31, r31
   109b2:	ea 5f       	subi	r30, 0xFA	; 250
   109b4:	f4 4f       	sbci	r31, 0xF4	; 244
   109b6:	11 82       	std	Z+1, r1	; 0x01
   109b8:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   109ba:	88 e0       	ldi	r24, 0x08	; 8
   109bc:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   109be:	df 91       	pop	r29
   109c0:	cf 91       	pop	r28
   109c2:	08 95       	ret

000109c4 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   109c4:	1f 93       	push	r17
   109c6:	cf 93       	push	r28
   109c8:	df 93       	push	r29
   109ca:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   109cc:	dc 01       	movw	r26, r24
   109ce:	58 96       	adiw	r26, 0x18	; 24
   109d0:	1c 92       	st	X, r1
   109d2:	1e 92       	st	-X, r1
   109d4:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   109d6:	22 81       	ldd	r18, Z+2	; 0x02
   109d8:	21 11       	cpse	r18, r1
   109da:	09 c0       	rjmp	.+18     	; 0x109ee <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   109dc:	23 81       	ldd	r18, Z+3	; 0x03
   109de:	21 11       	cpse	r18, r1
   109e0:	06 c0       	rjmp	.+12     	; 0x109ee <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   109e2:	24 81       	ldd	r18, Z+4	; 0x04
   109e4:	21 11       	cpse	r18, r1
   109e6:	03 c0       	rjmp	.+6      	; 0x109ee <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   109e8:	25 81       	ldd	r18, Z+5	; 0x05
   109ea:	22 23       	and	r18, r18
   109ec:	39 f1       	breq	.+78     	; 0x10a3c <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   109ee:	41 15       	cp	r20, r1
   109f0:	51 05       	cpc	r21, r1
   109f2:	21 f1       	breq	.+72     	; 0x10a3c <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   109f4:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   109f6:	dc 01       	movw	r26, r24
   109f8:	1c 96       	adiw	r26, 0x0c	; 12
   109fa:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   109fc:	af 01       	movw	r20, r30
   109fe:	4e 5f       	subi	r20, 0xFE	; 254
   10a00:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   10a02:	61 2f       	mov	r22, r17
   10a04:	62 95       	swap	r22
   10a06:	66 0f       	add	r22, r22
   10a08:	60 7e       	andi	r22, 0xE0	; 224
   10a0a:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   10a0c:	24 e0       	ldi	r18, 0x04	; 4
   10a0e:	30 e0       	ldi	r19, 0x00	; 0
   10a10:	8c e0       	ldi	r24, 0x0C	; 12
   10a12:	90 e0       	ldi	r25, 0x00	; 0
   10a14:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   10a18:	4d 2f       	mov	r20, r29
   10a1a:	60 e1       	ldi	r22, 0x10	; 16
   10a1c:	70 e0       	ldi	r23, 0x00	; 0
   10a1e:	81 2f       	mov	r24, r17
   10a20:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10a24:	4c 2f       	mov	r20, r28
   10a26:	61 e1       	ldi	r22, 0x11	; 17
   10a28:	70 e0       	ldi	r23, 0x00	; 0
   10a2a:	81 2f       	mov	r24, r17
   10a2c:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10a30:	81 e0       	ldi	r24, 0x01	; 1
   10a32:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   10a34:	df 91       	pop	r29
   10a36:	cf 91       	pop	r28
   10a38:	1f 91       	pop	r17
   10a3a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   10a3c:	90 e0       	ldi	r25, 0x00	; 0
   10a3e:	80 e0       	ldi	r24, 0x00	; 0
   10a40:	f9 cf       	rjmp	.-14     	; 0x10a34 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

00010a42 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
   10a42:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
   10a44:	82 95       	swap	r24
   10a46:	88 0f       	add	r24, r24
   10a48:	80 7e       	andi	r24, 0xE0	; 224
   10a4a:	68 e0       	ldi	r22, 0x08	; 8
   10a4c:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   10a4e:	c9 01       	movw	r24, r18
   10a50:	0c 94 45 84 	jmp	0x1088a	; 0x1088a <W5500Class::read(unsigned int, unsigned char)>

00010a54 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   10a54:	1f 93       	push	r17
   10a56:	cf 93       	push	r28
   10a58:	df 93       	push	r29
   10a5a:	18 2f       	mov	r17, r24
   10a5c:	66 e2       	ldi	r22, 0x26	; 38
   10a5e:	70 e0       	ldi	r23, 0x00	; 0
   10a60:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   10a64:	c8 2f       	mov	r28, r24
   10a66:	d0 e0       	ldi	r29, 0x00	; 0
   10a68:	dc 2f       	mov	r29, r28
   10a6a:	cc 27       	eor	r28, r28
   10a6c:	67 e2       	ldi	r22, 0x27	; 39
   10a6e:	70 e0       	ldi	r23, 0x00	; 0
   10a70:	81 2f       	mov	r24, r17
   10a72:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   10a76:	8c 0f       	add	r24, r28
   10a78:	9d 2f       	mov	r25, r29
   10a7a:	91 1d       	adc	r25, r1
   10a7c:	df 91       	pop	r29
   10a7e:	cf 91       	pop	r28
   10a80:	1f 91       	pop	r17
   10a82:	08 95       	ret

00010a84 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   10a84:	1f 93       	push	r17
   10a86:	cf 93       	push	r28
   10a88:	df 93       	push	r29
   10a8a:	18 2f       	mov	r17, r24
   10a8c:	60 e2       	ldi	r22, 0x20	; 32
   10a8e:	70 e0       	ldi	r23, 0x00	; 0
   10a90:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   10a94:	c8 2f       	mov	r28, r24
   10a96:	d0 e0       	ldi	r29, 0x00	; 0
   10a98:	dc 2f       	mov	r29, r28
   10a9a:	cc 27       	eor	r28, r28
   10a9c:	61 e2       	ldi	r22, 0x21	; 33
   10a9e:	70 e0       	ldi	r23, 0x00	; 0
   10aa0:	81 2f       	mov	r24, r17
   10aa2:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   10aa6:	8c 0f       	add	r24, r28
   10aa8:	9d 2f       	mov	r25, r29
   10aaa:	91 1d       	adc	r25, r1
   10aac:	df 91       	pop	r29
   10aae:	cf 91       	pop	r28
   10ab0:	1f 91       	pop	r17
   10ab2:	08 95       	ret

00010ab4 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   10ab4:	fc 01       	movw	r30, r24
   10ab6:	84 85       	ldd	r24, Z+12	; 0x0c
   10ab8:	88 30       	cpi	r24, 0x08	; 8
   10aba:	21 f0       	breq	.+8      	; 0x10ac4 <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   10abc:	63 e0       	ldi	r22, 0x03	; 3
   10abe:	70 e0       	ldi	r23, 0x00	; 0
   10ac0:	0c 94 21 85 	jmp	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   10ac4:	80 e0       	ldi	r24, 0x00	; 0
   10ac6:	08 95       	ret

00010ac8 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   10ac8:	cf 93       	push	r28
   10aca:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   10acc:	fc 01       	movw	r30, r24
   10ace:	24 85       	ldd	r18, Z+12	; 0x0c
   10ad0:	28 30       	cpi	r18, 0x08	; 8
   10ad2:	d9 f0       	breq	.+54     	; 0x10b0a <EthernetClient::connected()+0x42>
   10ad4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   10ad6:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   10ada:	84 31       	cpi	r24, 0x14	; 20
   10adc:	89 f0       	breq	.+34     	; 0x10b00 <EthernetClient::connected()+0x38>
   10ade:	88 23       	and	r24, r24
   10ae0:	79 f0       	breq	.+30     	; 0x10b00 <EthernetClient::connected()+0x38>
   10ae2:	88 31       	cpi	r24, 0x18	; 24
   10ae4:	69 f0       	breq	.+26     	; 0x10b00 <EthernetClient::connected()+0x38>
   10ae6:	21 e0       	ldi	r18, 0x01	; 1
   10ae8:	8c 31       	cpi	r24, 0x1C	; 28
   10aea:	59 f4       	brne	.+22     	; 0x10b02 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   10aec:	e8 81       	ld	r30, Y
   10aee:	f9 81       	ldd	r31, Y+1	; 0x01
   10af0:	00 84       	ldd	r0, Z+8	; 0x08
   10af2:	f1 85       	ldd	r31, Z+9	; 0x09
   10af4:	e0 2d       	mov	r30, r0
   10af6:	ce 01       	movw	r24, r28
   10af8:	19 95       	eicall
   10afa:	21 e0       	ldi	r18, 0x01	; 1
   10afc:	89 2b       	or	r24, r25
   10afe:	09 f4       	brne	.+2      	; 0x10b02 <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   10b00:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   10b02:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   10b04:	df 91       	pop	r29
   10b06:	cf 91       	pop	r28
   10b08:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   10b0a:	80 e0       	ldi	r24, 0x00	; 0
   10b0c:	fb cf       	rjmp	.-10     	; 0x10b04 <EthernetClient::connected()+0x3c>

00010b0e <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   10b0e:	cf 92       	push	r12
   10b10:	df 92       	push	r13
   10b12:	ef 92       	push	r14
   10b14:	ff 92       	push	r15
   10b16:	cf 93       	push	r28
   10b18:	df 93       	push	r29
   10b1a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   10b1c:	8c 85       	ldd	r24, Y+12	; 0x0c
   10b1e:	88 30       	cpi	r24, 0x08	; 8
   10b20:	89 f1       	breq	.+98     	; 0x10b84 <EthernetClient::stop()+0x76>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   10b22:	68 e0       	ldi	r22, 0x08	; 8
   10b24:	70 e0       	ldi	r23, 0x00	; 0
   10b26:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   10b2a:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   10b2e:	6b 01       	movw	r12, r22
   10b30:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   10b32:	ce 01       	movw	r24, r28
   10b34:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   10b38:	88 23       	and	r24, r24
   10b3a:	91 f0       	breq	.+36     	; 0x10b60 <EthernetClient::stop()+0x52>
   10b3c:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   10b40:	6c 19       	sub	r22, r12
   10b42:	7d 09       	sbc	r23, r13
   10b44:	8e 09       	sbc	r24, r14
   10b46:	9f 09       	sbc	r25, r15
   10b48:	68 3e       	cpi	r22, 0xE8	; 232
   10b4a:	73 40       	sbci	r23, 0x03	; 3
   10b4c:	81 05       	cpc	r24, r1
   10b4e:	91 05       	cpc	r25, r1
   10b50:	38 f4       	brcc	.+14     	; 0x10b60 <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   10b52:	61 e0       	ldi	r22, 0x01	; 1
   10b54:	70 e0       	ldi	r23, 0x00	; 0
   10b56:	80 e0       	ldi	r24, 0x00	; 0
   10b58:	90 e0       	ldi	r25, 0x00	; 0
   10b5a:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
   10b5e:	e9 cf       	rjmp	.-46     	; 0x10b32 <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   10b60:	ce 01       	movw	r24, r28
   10b62:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   10b66:	88 23       	and	r24, r24
   10b68:	19 f0       	breq	.+6      	; 0x10b70 <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   10b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
   10b6c:	0e 94 c0 84 	call	0x10980	; 0x10980 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   10b70:	ec 85       	ldd	r30, Y+12	; 0x0c
   10b72:	f0 e0       	ldi	r31, 0x00	; 0
   10b74:	ee 0f       	add	r30, r30
   10b76:	ff 1f       	adc	r31, r31
   10b78:	ea 5f       	subi	r30, 0xFA	; 250
   10b7a:	f4 4f       	sbci	r31, 0xF4	; 244
   10b7c:	11 82       	std	Z+1, r1	; 0x01
   10b7e:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   10b80:	88 e0       	ldi	r24, 0x08	; 8
   10b82:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   10b84:	df 91       	pop	r29
   10b86:	cf 91       	pop	r28
   10b88:	ff 90       	pop	r15
   10b8a:	ef 90       	pop	r14
   10b8c:	df 90       	pop	r13
   10b8e:	cf 90       	pop	r12
   10b90:	08 95       	ret

00010b92 <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
   10b92:	4f 92       	push	r4
   10b94:	5f 92       	push	r5
   10b96:	6f 92       	push	r6
   10b98:	7f 92       	push	r7
   10b9a:	8f 92       	push	r8
   10b9c:	9f 92       	push	r9
   10b9e:	af 92       	push	r10
   10ba0:	bf 92       	push	r11
   10ba2:	cf 92       	push	r12
   10ba4:	df 92       	push	r13
   10ba6:	ef 92       	push	r14
   10ba8:	ff 92       	push	r15
   10baa:	1f 93       	push	r17
   10bac:	cf 93       	push	r28
   10bae:	df 93       	push	r29
   10bb0:	cd b7       	in	r28, 0x3d	; 61
   10bb2:	de b7       	in	r29, 0x3e	; 62
   10bb4:	2d 97       	sbiw	r28, 0x0d	; 13
   10bb6:	0f b6       	in	r0, 0x3f	; 63
   10bb8:	f8 94       	cli
   10bba:	de bf       	out	0x3e, r29	; 62
   10bbc:	0f be       	out	0x3f, r0	; 63
   10bbe:	cd bf       	out	0x3d, r28	; 61
   10bc0:	7c 01       	movw	r14, r24
   10bc2:	96 e0       	ldi	r25, 0x06	; 6
   10bc4:	a9 2e       	mov	r10, r25
   10bc6:	9b e0       	ldi	r25, 0x0B	; 11
   10bc8:	b9 2e       	mov	r11, r25
   10bca:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
   10bcc:	d1 2c       	mov	r13, r1
   10bce:	c1 2c       	mov	r12, r1
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   10bd0:	28 ee       	ldi	r18, 0xE8	; 232
   10bd2:	42 2e       	mov	r4, r18
   10bd4:	23 e0       	ldi	r18, 0x03	; 3
   10bd6:	52 2e       	mov	r5, r18
   10bd8:	61 2c       	mov	r6, r1
   10bda:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   10bdc:	30 ed       	ldi	r19, 0xD0	; 208
   10bde:	83 2e       	mov	r8, r19
   10be0:	32 e0       	ldi	r19, 0x02	; 2
   10be2:	93 2e       	mov	r9, r19
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10be4:	1c 82       	std	Y+4, r1	; 0x04
   10be6:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10be8:	4d 82       	std	Y+5, r4	; 0x05
   10bea:	5e 82       	std	Y+6, r5	; 0x06
   10bec:	6f 82       	std	Y+7, r6	; 0x07
   10bee:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   10bf0:	9a 82       	std	Y+2, r9	; 0x02
   10bf2:	89 82       	std	Y+1, r8	; 0x01
   10bf4:	1d 87       	std	Y+13, r17	; 0x0d
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
   10bf6:	d5 01       	movw	r26, r10
   10bf8:	2d 91       	ld	r18, X+
   10bfa:	3d 91       	ld	r19, X+
   10bfc:	5d 01       	movw	r10, r26
   10bfe:	f7 01       	movw	r30, r14
   10c00:	84 81       	ldd	r24, Z+4	; 0x04
   10c02:	95 81       	ldd	r25, Z+5	; 0x05
   10c04:	28 17       	cp	r18, r24
   10c06:	39 07       	cpc	r19, r25
   10c08:	b1 f4       	brne	.+44     	; 0x10c36 <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
   10c0a:	ce 01       	movw	r24, r28
   10c0c:	01 96       	adiw	r24, 0x01	; 1
   10c0e:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   10c12:	84 31       	cpi	r24, 0x14	; 20
   10c14:	99 f1       	breq	.+102    	; 0x10c7c <EthernetServer::accept()+0xea>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
   10c16:	ce 01       	movw	r24, r28
   10c18:	01 96       	adiw	r24, 0x01	; 1
   10c1a:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   10c1e:	8c 31       	cpi	r24, 0x1C	; 28
   10c20:	51 f4       	brne	.+20     	; 0x10c36 <EthernetServer::accept()+0xa4>
   10c22:	ce 01       	movw	r24, r28
   10c24:	01 96       	adiw	r24, 0x01	; 1
   10c26:	0e 94 db 56 	call	0xadb6	; 0xadb6 <EthernetClient::available()>
   10c2a:	89 2b       	or	r24, r25
   10c2c:	21 f4       	brne	.+8      	; 0x10c36 <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
   10c2e:	ce 01       	movw	r24, r28
   10c30:	01 96       	adiw	r24, 0x01	; 1
   10c32:	0e 94 87 85 	call	0x10b0e	; 0x10b0e <EthernetClient::stop()>
   10c36:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   10c38:	18 30       	cpi	r17, 0x08	; 8
   10c3a:	a1 f6       	brne	.-88     	; 0x10be4 <EthernetServer::accept()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
   10c3c:	cd 28       	or	r12, r13
   10c3e:	41 f4       	brne	.+16     	; 0x10c50 <EthernetServer::accept()+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
   10c40:	d7 01       	movw	r26, r14
   10c42:	ed 91       	ld	r30, X+
   10c44:	fc 91       	ld	r31, X
   10c46:	00 84       	ldd	r0, Z+8	; 0x08
   10c48:	f1 85       	ldd	r31, Z+9	; 0x09
   10c4a:	e0 2d       	mov	r30, r0
   10c4c:	c7 01       	movw	r24, r14
   10c4e:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
   10c50:	2d 96       	adiw	r28, 0x0d	; 13
   10c52:	0f b6       	in	r0, 0x3f	; 63
   10c54:	f8 94       	cli
   10c56:	de bf       	out	0x3e, r29	; 62
   10c58:	0f be       	out	0x3f, r0	; 63
   10c5a:	cd bf       	out	0x3d, r28	; 61
   10c5c:	df 91       	pop	r29
   10c5e:	cf 91       	pop	r28
   10c60:	1f 91       	pop	r17
   10c62:	ff 90       	pop	r15
   10c64:	ef 90       	pop	r14
   10c66:	df 90       	pop	r13
   10c68:	cf 90       	pop	r12
   10c6a:	bf 90       	pop	r11
   10c6c:	af 90       	pop	r10
   10c6e:	9f 90       	pop	r9
   10c70:	8f 90       	pop	r8
   10c72:	7f 90       	pop	r7
   10c74:	6f 90       	pop	r6
   10c76:	5f 90       	pop	r5
   10c78:	4f 90       	pop	r4
   10c7a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
   10c7c:	cc 24       	eor	r12, r12
   10c7e:	c3 94       	inc	r12
   10c80:	d1 2c       	mov	r13, r1
   10c82:	d9 cf       	rjmp	.-78     	; 0x10c36 <EthernetServer::accept()+0xa4>

00010c84 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   10c84:	cf 92       	push	r12
   10c86:	df 92       	push	r13
   10c88:	ef 92       	push	r14
   10c8a:	ff 92       	push	r15
   10c8c:	1f 93       	push	r17
   10c8e:	cf 93       	push	r28
   10c90:	df 93       	push	r29
   10c92:	18 2f       	mov	r17, r24
   10c94:	6b 01       	movw	r12, r22
   10c96:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   10c98:	0e 94 54 dc 	call	0x1b8a8	; 0x1b8a8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
   10c9c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   10c9e:	00 97       	sbiw	r24, 0x00	; 0
   10ca0:	d9 f4       	brne	.+54     	; 0x10cd8 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   10ca2:	63 e0       	ldi	r22, 0x03	; 3
   10ca4:	70 e0       	ldi	r23, 0x00	; 0
   10ca6:	81 2f       	mov	r24, r17
   10ca8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   10cac:	84 31       	cpi	r24, 0x14	; 20
   10cae:	59 f0       	breq	.+22     	; 0x10cc6 <recv(unsigned char, unsigned char*, int)+0x42>
   10cb0:	88 23       	and	r24, r24
   10cb2:	49 f0       	breq	.+18     	; 0x10cc6 <recv(unsigned char, unsigned char*, int)+0x42>
   10cb4:	c1 e0       	ldi	r28, 0x01	; 1
   10cb6:	d0 e0       	ldi	r29, 0x00	; 0
   10cb8:	8c 31       	cpi	r24, 0x1C	; 28
   10cba:	11 f4       	brne	.+4      	; 0x10cc0 <recv(unsigned char, unsigned char*, int)+0x3c>
   10cbc:	d0 e0       	ldi	r29, 0x00	; 0
   10cbe:	c0 e0       	ldi	r28, 0x00	; 0
   10cc0:	d1 95       	neg	r29
   10cc2:	c1 95       	neg	r28
   10cc4:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   10cc6:	ce 01       	movw	r24, r28
   10cc8:	df 91       	pop	r29
   10cca:	cf 91       	pop	r28
   10ccc:	1f 91       	pop	r17
   10cce:	ff 90       	pop	r15
   10cd0:	ef 90       	pop	r14
   10cd2:	df 90       	pop	r13
   10cd4:	cf 90       	pop	r12
   10cd6:	08 95       	ret
   10cd8:	e8 16       	cp	r14, r24
   10cda:	f9 06       	cpc	r15, r25
   10cdc:	0c f4       	brge	.+2      	; 0x10ce0 <recv(unsigned char, unsigned char*, int)+0x5c>
   10cde:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   10ce0:	1c 16       	cp	r1, r28
   10ce2:	1d 06       	cpc	r1, r29
   10ce4:	84 f7       	brge	.-32     	; 0x10cc6 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   10ce6:	20 e0       	ldi	r18, 0x00	; 0
   10ce8:	ae 01       	movw	r20, r28
   10cea:	b6 01       	movw	r22, r12
   10cec:	81 2f       	mov	r24, r17
   10cee:	0e 94 ec db 	call	0x1b7d8	; 0x1b7d8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   10cf2:	60 e4       	ldi	r22, 0x40	; 64
   10cf4:	70 e0       	ldi	r23, 0x00	; 0
   10cf6:	81 2f       	mov	r24, r17
   10cf8:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
   10cfc:	e4 cf       	rjmp	.-56     	; 0x10cc6 <recv(unsigned char, unsigned char*, int)+0x42>

00010cfe <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   10cfe:	cf 93       	push	r28
   10d00:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   10d02:	fc 01       	movw	r30, r24
   10d04:	21 8d       	ldd	r18, Z+25	; 0x19
   10d06:	32 8d       	ldd	r19, Z+26	; 0x1a
   10d08:	21 15       	cp	r18, r1
   10d0a:	31 05       	cpc	r19, r1
   10d0c:	29 f4       	brne	.+10     	; 0x10d18 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   10d0e:	8f ef       	ldi	r24, 0xFF	; 255
   10d10:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   10d12:	df 91       	pop	r29
   10d14:	cf 91       	pop	r28
   10d16:	08 95       	ret
   10d18:	ec 01       	movw	r28, r24
   10d1a:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   10d1c:	42 17       	cp	r20, r18
   10d1e:	53 07       	cpc	r21, r19
   10d20:	08 f0       	brcs	.+2      	; 0x10d24 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   10d22:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   10d24:	0e 94 42 86 	call	0x10c84	; 0x10c84 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   10d28:	18 16       	cp	r1, r24
   10d2a:	19 06       	cpc	r1, r25
   10d2c:	84 f7       	brge	.-32     	; 0x10d0e <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   10d2e:	29 8d       	ldd	r18, Y+25	; 0x19
   10d30:	3a 8d       	ldd	r19, Y+26	; 0x1a
   10d32:	28 1b       	sub	r18, r24
   10d34:	39 0b       	sbc	r19, r25
   10d36:	3a 8f       	std	Y+26, r19	; 0x1a
   10d38:	29 8f       	std	Y+25, r18	; 0x19
   10d3a:	eb cf       	rjmp	.-42     	; 0x10d12 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00010d3c <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   10d3c:	0f 93       	push	r16
   10d3e:	1f 93       	push	r17
   10d40:	cf 93       	push	r28
   10d42:	df 93       	push	r29
   10d44:	1f 92       	push	r1
   10d46:	cd b7       	in	r28, 0x3d	; 61
   10d48:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   10d4a:	fc 01       	movw	r30, r24
   10d4c:	21 8d       	ldd	r18, Z+25	; 0x19
   10d4e:	32 8d       	ldd	r19, Z+26	; 0x1a
   10d50:	23 2b       	or	r18, r19
   10d52:	41 f4       	brne	.+16     	; 0x10d64 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   10d54:	8f ef       	ldi	r24, 0xFF	; 255
   10d56:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   10d58:	0f 90       	pop	r0
   10d5a:	df 91       	pop	r29
   10d5c:	cf 91       	pop	r28
   10d5e:	1f 91       	pop	r17
   10d60:	0f 91       	pop	r16
   10d62:	08 95       	ret
   10d64:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   10d66:	41 e0       	ldi	r20, 0x01	; 1
   10d68:	50 e0       	ldi	r21, 0x00	; 0
   10d6a:	be 01       	movw	r22, r28
   10d6c:	6f 5f       	subi	r22, 0xFF	; 255
   10d6e:	7f 4f       	sbci	r23, 0xFF	; 255
   10d70:	fc 01       	movw	r30, r24
   10d72:	84 85       	ldd	r24, Z+12	; 0x0c
   10d74:	0e 94 42 86 	call	0x10c84	; 0x10c84 <recv(unsigned char, unsigned char*, int)>
   10d78:	18 16       	cp	r1, r24
   10d7a:	19 06       	cpc	r1, r25
   10d7c:	5c f7       	brge	.-42     	; 0x10d54 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   10d7e:	f8 01       	movw	r30, r16
   10d80:	81 8d       	ldd	r24, Z+25	; 0x19
   10d82:	92 8d       	ldd	r25, Z+26	; 0x1a
   10d84:	01 97       	sbiw	r24, 0x01	; 1
   10d86:	92 8f       	std	Z+26, r25	; 0x1a
   10d88:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   10d8a:	89 81       	ldd	r24, Y+1	; 0x01
   10d8c:	90 e0       	ldi	r25, 0x00	; 0
   10d8e:	e4 cf       	rjmp	.-56     	; 0x10d58 <EthernetUDP::read()+0x1c>

00010d90 <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   10d90:	0f 93       	push	r16
   10d92:	1f 93       	push	r17
   10d94:	cf 93       	push	r28
   10d96:	df 93       	push	r29
   10d98:	00 d0       	rcall	.+0      	; 0x10d9a <EthernetUDP::parsePacket()+0xa>
   10d9a:	00 d0       	rcall	.+0      	; 0x10d9c <EthernetUDP::parsePacket()+0xc>
   10d9c:	1f 92       	push	r1
   10d9e:	1f 92       	push	r1
   10da0:	cd b7       	in	r28, 0x3d	; 61
   10da2:	de b7       	in	r29, 0x3e	; 62
   10da4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   10da6:	dc 01       	movw	r26, r24
   10da8:	ed 91       	ld	r30, X+
   10daa:	fc 91       	ld	r31, X
   10dac:	06 80       	ldd	r0, Z+6	; 0x06
   10dae:	f7 81       	ldd	r31, Z+7	; 0x07
   10db0:	e0 2d       	mov	r30, r0
   10db2:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   10db4:	f8 01       	movw	r30, r16
   10db6:	84 85       	ldd	r24, Z+12	; 0x0c
   10db8:	0e 94 54 dc 	call	0x1b8a8	; 0x1b8a8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
   10dbc:	89 2b       	or	r24, r25
   10dbe:	b1 f1       	breq	.+108    	; 0x10e2c <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   10dc0:	48 e0       	ldi	r20, 0x08	; 8
   10dc2:	50 e0       	ldi	r21, 0x00	; 0
   10dc4:	be 01       	movw	r22, r28
   10dc6:	6f 5f       	subi	r22, 0xFF	; 255
   10dc8:	7f 4f       	sbci	r23, 0xFF	; 255
   10dca:	d8 01       	movw	r26, r16
   10dcc:	1c 96       	adiw	r26, 0x0c	; 12
   10dce:	8c 91       	ld	r24, X
   10dd0:	0e 94 42 86 	call	0x10c84	; 0x10c84 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   10dd4:	18 16       	cp	r1, r24
   10dd6:	19 06       	cpc	r1, r25
   10dd8:	f4 f4       	brge	.+60     	; 0x10e16 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   10dda:	d8 01       	movw	r26, r16
   10ddc:	51 96       	adiw	r26, 0x11	; 17
   10dde:	84 e0       	ldi	r24, 0x04	; 4
   10de0:	fe 01       	movw	r30, r28
   10de2:	31 96       	adiw	r30, 0x01	; 1
   10de4:	01 90       	ld	r0, Z+
   10de6:	0d 92       	st	X+, r0
   10de8:	8a 95       	dec	r24
   10dea:	e1 f7       	brne	.-8      	; 0x10de4 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   10dec:	8d 81       	ldd	r24, Y+5	; 0x05
   10dee:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   10df0:	98 2f       	mov	r25, r24
   10df2:	88 27       	eor	r24, r24
   10df4:	2e 81       	ldd	r18, Y+6	; 0x06
   10df6:	82 0f       	add	r24, r18
   10df8:	91 1d       	adc	r25, r1
   10dfa:	f8 01       	movw	r30, r16
   10dfc:	96 8b       	std	Z+22, r25	; 0x16
   10dfe:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   10e00:	8f 81       	ldd	r24, Y+7	; 0x07
   10e02:	28 2f       	mov	r18, r24
   10e04:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   10e06:	32 2f       	mov	r19, r18
   10e08:	22 27       	eor	r18, r18
   10e0a:	88 85       	ldd	r24, Y+8	; 0x08
   10e0c:	82 0f       	add	r24, r18
   10e0e:	93 2f       	mov	r25, r19
   10e10:	91 1d       	adc	r25, r1
   10e12:	92 8f       	std	Z+26, r25	; 0x1a
   10e14:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   10e16:	28 96       	adiw	r28, 0x08	; 8
   10e18:	0f b6       	in	r0, 0x3f	; 63
   10e1a:	f8 94       	cli
   10e1c:	de bf       	out	0x3e, r29	; 62
   10e1e:	0f be       	out	0x3f, r0	; 63
   10e20:	cd bf       	out	0x3d, r28	; 61
   10e22:	df 91       	pop	r29
   10e24:	cf 91       	pop	r28
   10e26:	1f 91       	pop	r17
   10e28:	0f 91       	pop	r16
   10e2a:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   10e2c:	90 e0       	ldi	r25, 0x00	; 0
   10e2e:	80 e0       	ldi	r24, 0x00	; 0
   10e30:	f2 cf       	rjmp	.-28     	; 0x10e16 <EthernetUDP::parsePacket()+0x86>

00010e32 <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   10e32:	fc 01       	movw	r30, r24
   10e34:	84 85       	ldd	r24, Z+12	; 0x0c
   10e36:	0c 94 42 86 	jmp	0x10c84	; 0x10c84 <recv(unsigned char, unsigned char*, int)>

00010e3a <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
   10e3a:	cf 93       	push	r28
   10e3c:	df 93       	push	r29
   10e3e:	1f 92       	push	r1
   10e40:	cd b7       	in	r28, 0x3d	; 61
   10e42:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   10e44:	41 e0       	ldi	r20, 0x01	; 1
   10e46:	50 e0       	ldi	r21, 0x00	; 0
   10e48:	be 01       	movw	r22, r28
   10e4a:	6f 5f       	subi	r22, 0xFF	; 255
   10e4c:	7f 4f       	sbci	r23, 0xFF	; 255
   10e4e:	fc 01       	movw	r30, r24
   10e50:	84 85       	ldd	r24, Z+12	; 0x0c
   10e52:	0e 94 42 86 	call	0x10c84	; 0x10c84 <recv(unsigned char, unsigned char*, int)>
   10e56:	18 16       	cp	r1, r24
   10e58:	19 06       	cpc	r1, r25
   10e5a:	34 f4       	brge	.+12     	; 0x10e68 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   10e5c:	89 81       	ldd	r24, Y+1	; 0x01
   10e5e:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   10e60:	0f 90       	pop	r0
   10e62:	df 91       	pop	r29
   10e64:	cf 91       	pop	r28
   10e66:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   10e68:	8f ef       	ldi	r24, 0xFF	; 255
   10e6a:	9f ef       	ldi	r25, 0xFF	; 255
   10e6c:	f9 cf       	rjmp	.-14     	; 0x10e60 <EthernetClient::read()+0x26>

00010e6e <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   10e6e:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   10e70:	fc 01       	movw	r30, r24
   10e72:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   10e74:	60 e2       	ldi	r22, 0x20	; 32
   10e76:	70 e0       	ldi	r23, 0x00	; 0
   10e78:	8c 2f       	mov	r24, r28
   10e7a:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   10e7e:	62 e0       	ldi	r22, 0x02	; 2
   10e80:	70 e0       	ldi	r23, 0x00	; 0
   10e82:	8c 2f       	mov	r24, r28
   10e84:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   10e88:	84 fd       	sbrc	r24, 4
   10e8a:	11 c0       	rjmp	.+34     	; 0x10eae <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   10e8c:	62 e0       	ldi	r22, 0x02	; 2
   10e8e:	70 e0       	ldi	r23, 0x00	; 0
   10e90:	8c 2f       	mov	r24, r28
   10e92:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   10e96:	83 ff       	sbrs	r24, 3
   10e98:	f2 cf       	rjmp	.-28     	; 0x10e7e <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   10e9a:	48 e1       	ldi	r20, 0x18	; 24
   10e9c:	62 e0       	ldi	r22, 0x02	; 2
   10e9e:	70 e0       	ldi	r23, 0x00	; 0
   10ea0:	8c 2f       	mov	r24, r28
   10ea2:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   10ea6:	90 e0       	ldi	r25, 0x00	; 0
   10ea8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   10eaa:	cf 91       	pop	r28
   10eac:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   10eae:	40 e1       	ldi	r20, 0x10	; 16
   10eb0:	62 e0       	ldi	r22, 0x02	; 2
   10eb2:	70 e0       	ldi	r23, 0x00	; 0
   10eb4:	8c 2f       	mov	r24, r28
   10eb6:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   10eba:	81 e0       	ldi	r24, 0x01	; 1
   10ebc:	90 e0       	ldi	r25, 0x00	; 0
   10ebe:	f5 cf       	rjmp	.-22     	; 0x10eaa <EthernetUDP::endPacket()+0x3c>

00010ec0 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   10ec0:	ef 92       	push	r14
   10ec2:	ff 92       	push	r15
   10ec4:	1f 93       	push	r17
   10ec6:	cf 93       	push	r28
   10ec8:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   10eca:	fc 01       	movw	r30, r24
   10ecc:	24 85       	ldd	r18, Z+12	; 0x0c
   10ece:	28 30       	cpi	r18, 0x08	; 8
   10ed0:	39 f0       	breq	.+14     	; 0x10ee0 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   10ed2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   10ed4:	df 91       	pop	r29
   10ed6:	cf 91       	pop	r28
   10ed8:	1f 91       	pop	r17
   10eda:	ff 90       	pop	r15
   10edc:	ef 90       	pop	r14
   10ede:	08 95       	ret
   10ee0:	7b 01       	movw	r14, r22
   10ee2:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   10ee4:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   10ee6:	63 e0       	ldi	r22, 0x03	; 3
   10ee8:	70 e0       	ldi	r23, 0x00	; 0
   10eea:	81 2f       	mov	r24, r17
   10eec:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   10ef0:	81 11       	cpse	r24, r1
   10ef2:	0e c0       	rjmp	.+28     	; 0x10f10 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   10ef4:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   10ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
   10ef8:	88 30       	cpi	r24, 0x08	; 8
   10efa:	59 f3       	breq	.-42     	; 0x10ed2 <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   10efc:	fe 86       	std	Y+14, r15	; 0x0e
   10efe:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   10f00:	1a 8e       	std	Y+26, r1	; 0x1a
   10f02:	19 8e       	std	Y+25, r1	; 0x19
socket():
   10f04:	a7 01       	movw	r20, r14
   10f06:	62 e0       	ldi	r22, 0x02	; 2
   10f08:	0e 94 13 d5 	call	0x1aa26	; 0x1aa26 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   10f0c:	81 e0       	ldi	r24, 0x01	; 1
   10f0e:	e2 cf       	rjmp	.-60     	; 0x10ed4 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   10f10:	88 31       	cpi	r24, 0x18	; 24
   10f12:	81 f3       	breq	.-32     	; 0x10ef4 <EthernetUDP::begin(unsigned int)+0x34>
   10f14:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   10f16:	18 30       	cpi	r17, 0x08	; 8
   10f18:	31 f7       	brne	.-52     	; 0x10ee6 <EthernetUDP::begin(unsigned int)+0x26>
   10f1a:	ed cf       	rjmp	.-38     	; 0x10ef6 <EthernetUDP::begin(unsigned int)+0x36>

00010f1c <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   10f1c:	4f 92       	push	r4
   10f1e:	5f 92       	push	r5
   10f20:	6f 92       	push	r6
   10f22:	7f 92       	push	r7
   10f24:	8f 92       	push	r8
   10f26:	9f 92       	push	r9
   10f28:	af 92       	push	r10
   10f2a:	bf 92       	push	r11
   10f2c:	cf 92       	push	r12
   10f2e:	df 92       	push	r13
   10f30:	ef 92       	push	r14
   10f32:	ff 92       	push	r15
   10f34:	0f 93       	push	r16
   10f36:	1f 93       	push	r17
   10f38:	cf 93       	push	r28
   10f3a:	df 93       	push	r29
   10f3c:	cd b7       	in	r28, 0x3d	; 61
   10f3e:	de b7       	in	r29, 0x3e	; 62
   10f40:	63 97       	sbiw	r28, 0x13	; 19
   10f42:	0f b6       	in	r0, 0x3f	; 63
   10f44:	f8 94       	cli
   10f46:	de bf       	out	0x3e, r29	; 62
   10f48:	0f be       	out	0x3f, r0	; 63
   10f4a:	cd bf       	out	0x3d, r28	; 61
   10f4c:	7c 01       	movw	r14, r24
   10f4e:	6b 01       	movw	r12, r22
   10f50:	3a 01       	movw	r6, r20
   10f52:	fb 01       	movw	r30, r22
   10f54:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   10f56:	8d 91       	ld	r24, X+
   10f58:	81 11       	cpse	r24, r1
   10f5a:	fd cf       	rjmp	.-6      	; 0x10f56 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   10f5c:	30 e0       	ldi	r19, 0x00	; 0
   10f5e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   10f60:	90 e0       	ldi	r25, 0x00	; 0
   10f62:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   10f64:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   10f66:	41 91       	ld	r20, Z+
   10f68:	44 23       	and	r20, r20
   10f6a:	01 f1       	breq	.+64     	; 0x10fac <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
   10f6c:	84 30       	cpi	r24, 0x04	; 4
   10f6e:	91 05       	cpc	r25, r1
   10f70:	0c f0       	brlt	.+2      	; 0x10f74 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   10f72:	42 c0       	rjmp	.+132    	; 0x10ff8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   10f74:	4e 32       	cpi	r20, 0x2E	; 46
   10f76:	69 f4       	brne	.+26     	; 0x10f92 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   10f78:	2f 3f       	cpi	r18, 0xFF	; 255
   10f7a:	31 05       	cpc	r19, r1
   10f7c:	09 f0       	breq	.+2      	; 0x10f80 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
   10f7e:	e4 f5       	brge	.+120    	; 0x10ff8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   10f80:	d3 01       	movw	r26, r6
   10f82:	a8 0f       	add	r26, r24
   10f84:	b9 1f       	adc	r27, r25
   10f86:	12 96       	adiw	r26, 0x02	; 2
   10f88:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   10f8a:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   10f8c:	30 e0       	ldi	r19, 0x00	; 0
   10f8e:	20 e0       	ldi	r18, 0x00	; 0
   10f90:	ea cf       	rjmp	.-44     	; 0x10f66 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   10f92:	52 9f       	mul	r21, r18
   10f94:	b0 01       	movw	r22, r0
   10f96:	53 9f       	mul	r21, r19
   10f98:	70 0d       	add	r23, r0
   10f9a:	11 24       	eor	r1, r1
   10f9c:	24 2f       	mov	r18, r20
   10f9e:	44 0f       	add	r20, r20
   10fa0:	33 0b       	sbc	r19, r19
   10fa2:	20 53       	subi	r18, 0x30	; 48
   10fa4:	31 09       	sbc	r19, r1
   10fa6:	26 0f       	add	r18, r22
   10fa8:	37 1f       	adc	r19, r23
   10faa:	dd cf       	rjmp	.-70     	; 0x10f66 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   10fac:	2f 3f       	cpi	r18, 0xFF	; 255
   10fae:	31 05       	cpc	r19, r1
   10fb0:	09 f0       	breq	.+2      	; 0x10fb4 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
   10fb2:	14 f5       	brge	.+68     	; 0x10ff8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
   10fb4:	84 30       	cpi	r24, 0x04	; 4
   10fb6:	91 05       	cpc	r25, r1
   10fb8:	fc f4       	brge	.+62     	; 0x10ff8 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   10fba:	68 0e       	add	r6, r24
   10fbc:	79 1e       	adc	r7, r25
   10fbe:	f3 01       	movw	r30, r6
   10fc0:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   10fc2:	cc 24       	eor	r12, r12
   10fc4:	c3 94       	inc	r12
   10fc6:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
   10fc8:	c6 01       	movw	r24, r12
   10fca:	63 96       	adiw	r28, 0x13	; 19
   10fcc:	0f b6       	in	r0, 0x3f	; 63
   10fce:	f8 94       	cli
   10fd0:	de bf       	out	0x3e, r29	; 62
   10fd2:	0f be       	out	0x3f, r0	; 63
   10fd4:	cd bf       	out	0x3d, r28	; 61
   10fd6:	df 91       	pop	r29
   10fd8:	cf 91       	pop	r28
   10fda:	1f 91       	pop	r17
   10fdc:	0f 91       	pop	r16
   10fde:	ff 90       	pop	r15
   10fe0:	ef 90       	pop	r14
   10fe2:	df 90       	pop	r13
   10fe4:	cf 90       	pop	r12
   10fe6:	bf 90       	pop	r11
   10fe8:	af 90       	pop	r10
   10fea:	9f 90       	pop	r9
   10fec:	8f 90       	pop	r8
   10fee:	7f 90       	pop	r7
   10ff0:	6f 90       	pop	r6
   10ff2:	5f 90       	pop	r5
   10ff4:	4f 90       	pop	r4
   10ff6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   10ff8:	f7 01       	movw	r30, r14
   10ffa:	42 81       	ldd	r20, Z+2	; 0x02
   10ffc:	53 81       	ldd	r21, Z+3	; 0x03
   10ffe:	64 81       	ldd	r22, Z+4	; 0x04
   11000:	75 81       	ldd	r23, Z+5	; 0x05
   11002:	80 91 af 0d 	lds	r24, 0x0DAF	; 0x800daf <_ZL11INADDR_NONE.lto_priv.237+0x2>
   11006:	90 91 b0 0d 	lds	r25, 0x0DB0	; 0x800db0 <_ZL11INADDR_NONE.lto_priv.237+0x3>
   1100a:	a0 91 b1 0d 	lds	r26, 0x0DB1	; 0x800db1 <_ZL11INADDR_NONE.lto_priv.237+0x4>
   1100e:	b0 91 b2 0d 	lds	r27, 0x0DB2	; 0x800db2 <_ZL11INADDR_NONE.lto_priv.237+0x5>
   11012:	48 17       	cp	r20, r24
   11014:	59 07       	cpc	r21, r25
   11016:	6a 07       	cpc	r22, r26
   11018:	7b 07       	cpc	r23, r27
   1101a:	09 f4       	brne	.+2      	; 0x1101e <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
   1101c:	00 c2       	rjmp	.+1024   	; 0x1141e <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   1101e:	87 01       	movw	r16, r14
   11020:	08 5f       	subi	r16, 0xF8	; 248
   11022:	1f 4f       	sbci	r17, 0xFF	; 255
   11024:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   11028:	6f 70       	andi	r22, 0x0F	; 15
   1102a:	77 27       	eor	r23, r23
   1102c:	7c 5f       	subi	r23, 0xFC	; 252
   1102e:	c8 01       	movw	r24, r16
   11030:	0e 94 60 87 	call	0x10ec0	; 0x10ec0 <EthernetUDP::begin(unsigned int)>
   11034:	81 30       	cpi	r24, 0x01	; 1
   11036:	09 f0       	breq	.+2      	; 0x1103a <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
   11038:	f7 c1       	rjmp	.+1006   	; 0x11428 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1103a:	82 ef       	ldi	r24, 0xF2	; 242
   1103c:	92 e0       	ldi	r25, 0x02	; 2
   1103e:	9a 83       	std	Y+2, r25	; 0x02
   11040:	89 83       	std	Y+1, r24	; 0x01
   11042:	f7 01       	movw	r30, r14
   11044:	82 81       	ldd	r24, Z+2	; 0x02
   11046:	93 81       	ldd	r25, Z+3	; 0x03
   11048:	a4 81       	ldd	r26, Z+4	; 0x04
   1104a:	b5 81       	ldd	r27, Z+5	; 0x05
   1104c:	8b 83       	std	Y+3, r24	; 0x03
   1104e:	9c 83       	std	Y+4, r25	; 0x04
   11050:	ad 83       	std	Y+5, r26	; 0x05
   11052:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   11054:	45 e3       	ldi	r20, 0x35	; 53
   11056:	50 e0       	ldi	r21, 0x00	; 0
   11058:	be 01       	movw	r22, r28
   1105a:	6f 5f       	subi	r22, 0xFF	; 255
   1105c:	7f 4f       	sbci	r23, 0xFF	; 255
   1105e:	c8 01       	movw	r24, r16
   11060:	0e 94 e2 84 	call	0x109c4	; 0x109c4 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   11064:	89 2b       	or	r24, r25
   11066:	31 f4       	brne	.+12     	; 0x11074 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   11068:	d1 2c       	mov	r13, r1
   1106a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   1106c:	c8 01       	movw	r24, r16
   1106e:	0e 94 cd 84 	call	0x1099a	; 0x1099a <EthernetUDP::stop()>
   11072:	aa cf       	rjmp	.-172    	; 0x10fc8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   11074:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   11078:	f7 01       	movw	r30, r14
   1107a:	77 83       	std	Z+7, r23	; 0x07
   1107c:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   1107e:	42 e0       	ldi	r20, 0x02	; 2
   11080:	50 e0       	ldi	r21, 0x00	; 0
   11082:	b7 01       	movw	r22, r14
   11084:	6a 5f       	subi	r22, 0xFA	; 250
   11086:	7f 4f       	sbci	r23, 0xFF	; 255
   11088:	c8 01       	movw	r24, r16
   1108a:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   1108e:	81 e0       	ldi	r24, 0x01	; 1
   11090:	90 e0       	ldi	r25, 0x00	; 0
   11092:	9a 83       	std	Y+2, r25	; 0x02
   11094:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   11096:	42 e0       	ldi	r20, 0x02	; 2
   11098:	50 e0       	ldi	r21, 0x00	; 0
   1109a:	be 01       	movw	r22, r28
   1109c:	6f 5f       	subi	r22, 0xFF	; 255
   1109e:	7f 4f       	sbci	r23, 0xFF	; 255
   110a0:	c8 01       	movw	r24, r16
   110a2:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   110a6:	80 e0       	ldi	r24, 0x00	; 0
   110a8:	91 e0       	ldi	r25, 0x01	; 1
   110aa:	9a 83       	std	Y+2, r25	; 0x02
   110ac:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   110ae:	42 e0       	ldi	r20, 0x02	; 2
   110b0:	50 e0       	ldi	r21, 0x00	; 0
   110b2:	be 01       	movw	r22, r28
   110b4:	6f 5f       	subi	r22, 0xFF	; 255
   110b6:	7f 4f       	sbci	r23, 0xFF	; 255
   110b8:	c8 01       	movw	r24, r16
   110ba:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   110be:	1a 82       	std	Y+2, r1	; 0x02
   110c0:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   110c2:	42 e0       	ldi	r20, 0x02	; 2
   110c4:	50 e0       	ldi	r21, 0x00	; 0
   110c6:	be 01       	movw	r22, r28
   110c8:	6f 5f       	subi	r22, 0xFF	; 255
   110ca:	7f 4f       	sbci	r23, 0xFF	; 255
   110cc:	c8 01       	movw	r24, r16
   110ce:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   110d2:	42 e0       	ldi	r20, 0x02	; 2
   110d4:	50 e0       	ldi	r21, 0x00	; 0
   110d6:	be 01       	movw	r22, r28
   110d8:	6f 5f       	subi	r22, 0xFF	; 255
   110da:	7f 4f       	sbci	r23, 0xFF	; 255
   110dc:	c8 01       	movw	r24, r16
   110de:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   110e2:	42 e0       	ldi	r20, 0x02	; 2
   110e4:	50 e0       	ldi	r21, 0x00	; 0
   110e6:	be 01       	movw	r22, r28
   110e8:	6f 5f       	subi	r22, 0xFF	; 255
   110ea:	7f 4f       	sbci	r23, 0xFF	; 255
   110ec:	c8 01       	movw	r24, r16
   110ee:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   110f2:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   110f4:	f6 01       	movw	r30, r12
   110f6:	80 81       	ld	r24, Z
   110f8:	88 23       	and	r24, r24
   110fa:	01 f1       	breq	.+64     	; 0x1113c <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   110fc:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   110fe:	f6 01       	movw	r30, r12
   11100:	81 91       	ld	r24, Z+
   11102:	2f 01       	movw	r4, r30
   11104:	88 23       	and	r24, r24
   11106:	11 f0       	breq	.+4      	; 0x1110c <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
   11108:	8e 32       	cpi	r24, 0x2E	; 46
   1110a:	b1 f4       	brne	.+44     	; 0x11138 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   1110c:	46 01       	movw	r8, r12
   1110e:	8a 18       	sub	r8, r10
   11110:	9b 08       	sbc	r9, r11
   11112:	18 14       	cp	r1, r8
   11114:	19 04       	cpc	r1, r9
   11116:	74 f4       	brge	.+28     	; 0x11134 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   11118:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   1111a:	41 e0       	ldi	r20, 0x01	; 1
   1111c:	50 e0       	ldi	r21, 0x00	; 0
   1111e:	be 01       	movw	r22, r28
   11120:	63 5f       	subi	r22, 0xF3	; 243
   11122:	7f 4f       	sbci	r23, 0xFF	; 255
   11124:	c8 01       	movw	r24, r16
   11126:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   1112a:	a4 01       	movw	r20, r8
   1112c:	b5 01       	movw	r22, r10
   1112e:	c8 01       	movw	r24, r16
   11130:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
   11134:	52 01       	movw	r10, r4
   11136:	de cf       	rjmp	.-68     	; 0x110f4 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
   11138:	62 01       	movw	r12, r4
   1113a:	e1 cf       	rjmp	.-62     	; 0x110fe <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   1113c:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   1113e:	41 e0       	ldi	r20, 0x01	; 1
   11140:	50 e0       	ldi	r21, 0x00	; 0
   11142:	be 01       	movw	r22, r28
   11144:	63 5f       	subi	r22, 0xF3	; 243
   11146:	7f 4f       	sbci	r23, 0xFF	; 255
   11148:	c8 01       	movw	r24, r16
   1114a:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   1114e:	c1 2c       	mov	r12, r1
   11150:	dd 24       	eor	r13, r13
   11152:	d3 94       	inc	r13
   11154:	da 82       	std	Y+2, r13	; 0x02
   11156:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   11158:	42 e0       	ldi	r20, 0x02	; 2
   1115a:	50 e0       	ldi	r21, 0x00	; 0
   1115c:	be 01       	movw	r22, r28
   1115e:	6f 5f       	subi	r22, 0xFF	; 255
   11160:	7f 4f       	sbci	r23, 0xFF	; 255
   11162:	c8 01       	movw	r24, r16
   11164:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   11168:	da 82       	std	Y+2, r13	; 0x02
   1116a:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   1116c:	42 e0       	ldi	r20, 0x02	; 2
   1116e:	50 e0       	ldi	r21, 0x00	; 0
   11170:	be 01       	movw	r22, r28
   11172:	6f 5f       	subi	r22, 0xFF	; 255
   11174:	7f 4f       	sbci	r23, 0xFF	; 255
   11176:	c8 01       	movw	r24, r16
   11178:	0e 94 e4 56 	call	0xadc8	; 0xadc8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   1117c:	c8 01       	movw	r24, r16
   1117e:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   11182:	89 2b       	or	r24, r25
   11184:	09 f4       	brne	.+2      	; 0x11188 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
   11186:	70 cf       	rjmp	.-288    	; 0x11068 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
   11188:	f3 e0       	ldi	r31, 0x03	; 3
   1118a:	af 2e       	mov	r10, r31
   1118c:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1118e:	23 01       	movw	r4, r6
   11190:	22 e0       	ldi	r18, 0x02	; 2
   11192:	42 0e       	add	r4, r18
   11194:	51 1c       	adc	r5, r1
   11196:	43 c0       	rjmp	.+134    	; 0x1121e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   11198:	f7 01       	movw	r30, r14
   1119a:	42 81       	ldd	r20, Z+2	; 0x02
   1119c:	53 81       	ldd	r21, Z+3	; 0x03
   1119e:	64 81       	ldd	r22, Z+4	; 0x04
   111a0:	75 81       	ldd	r23, Z+5	; 0x05
   111a2:	81 8d       	ldd	r24, Z+25	; 0x19
   111a4:	92 8d       	ldd	r25, Z+26	; 0x1a
   111a6:	a3 8d       	ldd	r26, Z+27	; 0x1b
   111a8:	b4 8d       	ldd	r27, Z+28	; 0x1c
   111aa:	48 17       	cp	r20, r24
   111ac:	59 07       	cpc	r21, r25
   111ae:	6a 07       	cpc	r22, r26
   111b0:	7b 07       	cpc	r23, r27
   111b2:	09 f0       	breq	.+2      	; 0x111b6 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
   111b4:	2a c1       	rjmp	.+596    	; 0x1140a <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
   111b6:	85 8d       	ldd	r24, Z+29	; 0x1d
   111b8:	96 8d       	ldd	r25, Z+30	; 0x1e
   111ba:	c5 97       	sbiw	r24, 0x35	; 53
   111bc:	09 f0       	breq	.+2      	; 0x111c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
   111be:	25 c1       	rjmp	.+586    	; 0x1140a <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   111c0:	81 a1       	ldd	r24, Z+33	; 0x21
   111c2:	92 a1       	ldd	r25, Z+34	; 0x22
   111c4:	0c 97       	sbiw	r24, 0x0c	; 12
   111c6:	0c f4       	brge	.+2      	; 0x111ca <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
   111c8:	25 c1       	rjmp	.+586    	; 0x11414 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   111ca:	4c e0       	ldi	r20, 0x0C	; 12
   111cc:	50 e0       	ldi	r21, 0x00	; 0
   111ce:	be 01       	movw	r22, r28
   111d0:	6f 5f       	subi	r22, 0xFF	; 255
   111d2:	7f 4f       	sbci	r23, 0xFF	; 255
   111d4:	c8 01       	movw	r24, r16
   111d6:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   111da:	8b 81       	ldd	r24, Y+3	; 0x03
   111dc:	9c 81       	ldd	r25, Y+4	; 0x04
   111de:	98 27       	eor	r25, r24
   111e0:	89 27       	eor	r24, r25
   111e2:	98 27       	eor	r25, r24
   111e4:	9a 8b       	std	Y+18, r25	; 0x12
   111e6:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   111e8:	f7 01       	movw	r30, r14
   111ea:	46 81       	ldd	r20, Z+6	; 0x06
   111ec:	57 81       	ldd	r21, Z+7	; 0x07
   111ee:	29 81       	ldd	r18, Y+1	; 0x01
   111f0:	3a 81       	ldd	r19, Y+2	; 0x02
   111f2:	42 17       	cp	r20, r18
   111f4:	53 07       	cpc	r21, r19
   111f6:	11 f4       	brne	.+4      	; 0x111fc <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
   111f8:	97 fd       	sbrc	r25, 7
   111fa:	2f c0       	rjmp	.+94     	; 0x1125a <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   111fc:	c8 01       	movw	r24, r16
   111fe:	0e 94 1b 49 	call	0x9236	; 0x9236 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   11202:	ec ef       	ldi	r30, 0xFC	; 252
   11204:	ce 2e       	mov	r12, r30
   11206:	dd 24       	eor	r13, r13
   11208:	da 94       	dec	r13
   1120a:	81 e0       	ldi	r24, 0x01	; 1
   1120c:	a8 1a       	sub	r10, r24
   1120e:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   11210:	09 f4       	brne	.+2      	; 0x11214 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
   11212:	2c cf       	rjmp	.-424    	; 0x1106c <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
   11214:	ff ef       	ldi	r31, 0xFF	; 255
   11216:	cf 16       	cp	r12, r31
   11218:	df 06       	cpc	r13, r31
   1121a:	09 f0       	breq	.+2      	; 0x1121e <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
   1121c:	27 cf       	rjmp	.-434    	; 0x1106c <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
   1121e:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   11222:	3b 01       	movw	r6, r22
   11224:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   11226:	c8 01       	movw	r24, r16
   11228:	0e 94 c8 86 	call	0x10d90	; 0x10d90 <EthernetUDP::parsePacket()>
   1122c:	18 16       	cp	r1, r24
   1122e:	19 06       	cpc	r1, r25
   11230:	0c f4       	brge	.+2      	; 0x11234 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
   11232:	b2 cf       	rjmp	.-156    	; 0x11198 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   11234:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   11238:	66 19       	sub	r22, r6
   1123a:	77 09       	sbc	r23, r7
   1123c:	88 09       	sbc	r24, r8
   1123e:	99 09       	sbc	r25, r9
   11240:	69 38       	cpi	r22, 0x89	; 137
   11242:	73 41       	sbci	r23, 0x13	; 19
   11244:	81 05       	cpc	r24, r1
   11246:	91 05       	cpc	r25, r1
   11248:	08 f0       	brcs	.+2      	; 0x1124c <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
   1124a:	db c0       	rjmp	.+438    	; 0x11402 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   1124c:	62 e3       	ldi	r22, 0x32	; 50
   1124e:	70 e0       	ldi	r23, 0x00	; 0
   11250:	80 e0       	ldi	r24, 0x00	; 0
   11252:	90 e0       	ldi	r25, 0x00	; 0
   11254:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
   11258:	e6 cf       	rjmp	.-52     	; 0x11226 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   1125a:	8f 70       	andi	r24, 0x0F	; 15
   1125c:	92 70       	andi	r25, 0x02	; 2
   1125e:	89 2b       	or	r24, r25
   11260:	41 f0       	breq	.+16     	; 0x11272 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   11262:	c8 01       	movw	r24, r16
   11264:	0e 94 1b 49 	call	0x9236	; 0x9236 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   11268:	7b ef       	ldi	r23, 0xFB	; 251
   1126a:	c7 2e       	mov	r12, r23
   1126c:	dd 24       	eor	r13, r13
   1126e:	da 94       	dec	r13
   11270:	cc cf       	rjmp	.-104    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   11272:	6f 80       	ldd	r6, Y+7	; 0x07
   11274:	78 84       	ldd	r7, Y+8	; 0x08
   11276:	76 24       	eor	r7, r6
   11278:	67 24       	eor	r6, r7
   1127a:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   1127c:	d1 2c       	mov	r13, r1
   1127e:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   11280:	61 14       	cp	r6, r1
   11282:	71 04       	cpc	r7, r1
   11284:	d1 f4       	brne	.+52     	; 0x112ba <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   11286:	c8 01       	movw	r24, r16
   11288:	0e 94 1b 49 	call	0x9236	; 0x9236 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   1128c:	6a ef       	ldi	r22, 0xFA	; 250
   1128e:	c6 2e       	mov	r12, r22
   11290:	dd 24       	eor	r13, r13
   11292:	da 94       	dec	r13
   11294:	ba cf       	rjmp	.-140    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   11296:	8d 85       	ldd	r24, Y+13	; 0x0d
   11298:	81 11       	cpse	r24, r1
   1129a:	17 c0       	rjmp	.+46     	; 0x112ca <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   1129c:	c8 01       	movw	r24, r16
   1129e:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   112a2:	c8 01       	movw	r24, r16
   112a4:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   112a8:	c8 01       	movw	r24, r16
   112aa:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   112ae:	c8 01       	movw	r24, r16
   112b0:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   112b4:	ff ef       	ldi	r31, 0xFF	; 255
   112b6:	cf 1a       	sub	r12, r31
   112b8:	df 0a       	sbc	r13, r31
   112ba:	8d 81       	ldd	r24, Y+5	; 0x05
   112bc:	9e 81       	ldd	r25, Y+6	; 0x06
   112be:	98 27       	eor	r25, r24
   112c0:	89 27       	eor	r24, r25
   112c2:	98 27       	eor	r25, r24
   112c4:	c8 16       	cp	r12, r24
   112c6:	d9 06       	cpc	r13, r25
   112c8:	a8 f4       	brcc	.+42     	; 0x112f4 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   112ca:	41 e0       	ldi	r20, 0x01	; 1
   112cc:	50 e0       	ldi	r21, 0x00	; 0
   112ce:	be 01       	movw	r22, r28
   112d0:	63 5f       	subi	r22, 0xF3	; 243
   112d2:	7f 4f       	sbci	r23, 0xFF	; 255
   112d4:	c8 01       	movw	r24, r16
   112d6:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   112da:	8d 85       	ldd	r24, Y+13	; 0x0d
   112dc:	88 23       	and	r24, r24
   112de:	d9 f2       	breq	.-74     	; 0x11296 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   112e0:	8d 85       	ldd	r24, Y+13	; 0x0d
   112e2:	9f ef       	ldi	r25, 0xFF	; 255
   112e4:	98 0f       	add	r25, r24
   112e6:	9d 87       	std	Y+13, r25	; 0x0d
   112e8:	88 23       	and	r24, r24
   112ea:	a9 f2       	breq	.-86     	; 0x11296 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   112ec:	c8 01       	movw	r24, r16
   112ee:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   112f2:	f6 cf       	rjmp	.-20     	; 0x112e0 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   112f4:	91 2c       	mov	r9, r1
   112f6:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   112f8:	41 e0       	ldi	r20, 0x01	; 1
   112fa:	50 e0       	ldi	r21, 0x00	; 0
   112fc:	be 01       	movw	r22, r28
   112fe:	6d 5e       	subi	r22, 0xED	; 237
   11300:	7f 4f       	sbci	r23, 0xFF	; 255
   11302:	c8 01       	movw	r24, r16
   11304:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   11308:	8b 89       	ldd	r24, Y+19	; 0x13
   1130a:	98 2f       	mov	r25, r24
   1130c:	90 7c       	andi	r25, 0xC0	; 192
   1130e:	61 f4       	brne	.+24     	; 0x11328 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   11310:	88 23       	and	r24, r24
   11312:	89 f0       	breq	.+34     	; 0x11336 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   11314:	8b 89       	ldd	r24, Y+19	; 0x13
   11316:	9f ef       	ldi	r25, 0xFF	; 255
   11318:	98 0f       	add	r25, r24
   1131a:	9b 8b       	std	Y+19, r25	; 0x13
   1131c:	88 23       	and	r24, r24
   1131e:	41 f0       	breq	.+16     	; 0x11330 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   11320:	c8 01       	movw	r24, r16
   11322:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   11326:	f6 cf       	rjmp	.-20     	; 0x11314 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   11328:	c8 01       	movw	r24, r16
   1132a:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   1132e:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   11330:	8b 89       	ldd	r24, Y+19	; 0x13
   11332:	81 11       	cpse	r24, r1
   11334:	e1 cf       	rjmp	.-62     	; 0x112f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   11336:	42 e0       	ldi	r20, 0x02	; 2
   11338:	50 e0       	ldi	r21, 0x00	; 0
   1133a:	be 01       	movw	r22, r28
   1133c:	61 5f       	subi	r22, 0xF1	; 241
   1133e:	7f 4f       	sbci	r23, 0xFF	; 255
   11340:	c8 01       	movw	r24, r16
   11342:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   11346:	42 e0       	ldi	r20, 0x02	; 2
   11348:	50 e0       	ldi	r21, 0x00	; 0
   1134a:	be 01       	movw	r22, r28
   1134c:	63 5f       	subi	r22, 0xF3	; 243
   1134e:	7f 4f       	sbci	r23, 0xFF	; 255
   11350:	c8 01       	movw	r24, r16
   11352:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   11356:	c8 01       	movw	r24, r16
   11358:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   1135c:	c8 01       	movw	r24, r16
   1135e:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   11362:	c8 01       	movw	r24, r16
   11364:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
   11368:	c8 01       	movw	r24, r16
   1136a:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   1136e:	42 e0       	ldi	r20, 0x02	; 2
   11370:	50 e0       	ldi	r21, 0x00	; 0
   11372:	be 01       	movw	r22, r28
   11374:	6f 5e       	subi	r22, 0xEF	; 239
   11376:	7f 4f       	sbci	r23, 0xFF	; 255
   11378:	c8 01       	movw	r24, r16
   1137a:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   1137e:	8f 85       	ldd	r24, Y+15	; 0x0f
   11380:	98 89       	ldd	r25, Y+16	; 0x10
   11382:	81 15       	cp	r24, r1
   11384:	91 40       	sbci	r25, 0x01	; 1
   11386:	e9 f4       	brne	.+58     	; 0x113c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
   11388:	cd 84       	ldd	r12, Y+13	; 0x0d
   1138a:	de 84       	ldd	r13, Y+14	; 0x0e
   1138c:	dc 24       	eor	r13, r12
   1138e:	cd 24       	eor	r12, r13
   11390:	dc 24       	eor	r13, r12
   11392:	81 e0       	ldi	r24, 0x01	; 1
   11394:	c8 16       	cp	r12, r24
   11396:	d1 04       	cpc	r13, r1
   11398:	a1 f4       	brne	.+40     	; 0x113c2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   1139a:	89 89       	ldd	r24, Y+17	; 0x11
   1139c:	9a 89       	ldd	r25, Y+18	; 0x12
   1139e:	81 15       	cp	r24, r1
   113a0:	94 40       	sbci	r25, 0x04	; 4
   113a2:	41 f0       	breq	.+16     	; 0x113b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   113a4:	c8 01       	movw	r24, r16
   113a6:	0e 94 1b 49 	call	0x9236	; 0x9236 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   113aa:	57 ef       	ldi	r21, 0xF7	; 247
   113ac:	c5 2e       	mov	r12, r21
   113ae:	dd 24       	eor	r13, r13
   113b0:	da 94       	dec	r13
   113b2:	2b cf       	rjmp	.-426    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   113b4:	44 e0       	ldi	r20, 0x04	; 4
   113b6:	50 e0       	ldi	r21, 0x00	; 0
   113b8:	b2 01       	movw	r22, r4
   113ba:	c8 01       	movw	r24, r16
   113bc:	0e 94 7f 86 	call	0x10cfe	; 0x10cfe <EthernetUDP::read(unsigned char*, unsigned int)>
   113c0:	24 cf       	rjmp	.-440    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   113c2:	d1 2c       	mov	r13, r1
   113c4:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   113c6:	89 89       	ldd	r24, Y+17	; 0x11
   113c8:	9a 89       	ldd	r25, Y+18	; 0x12
   113ca:	98 27       	eor	r25, r24
   113cc:	89 27       	eor	r24, r25
   113ce:	98 27       	eor	r25, r24
   113d0:	c8 16       	cp	r12, r24
   113d2:	d9 06       	cpc	r13, r25
   113d4:	38 f4       	brcc	.+14     	; 0x113e4 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
   113d6:	c8 01       	movw	r24, r16
   113d8:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   113dc:	ff ef       	ldi	r31, 0xFF	; 255
   113de:	cf 1a       	sub	r12, r31
   113e0:	df 0a       	sbc	r13, r31
   113e2:	f1 cf       	rjmp	.-30     	; 0x113c6 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   113e4:	2f ef       	ldi	r18, 0xFF	; 255
   113e6:	82 1a       	sub	r8, r18
   113e8:	92 0a       	sbc	r9, r18
   113ea:	68 14       	cp	r6, r8
   113ec:	79 04       	cpc	r7, r9
   113ee:	09 f0       	breq	.+2      	; 0x113f2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
   113f0:	83 cf       	rjmp	.-250    	; 0x112f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   113f2:	c8 01       	movw	r24, r16
   113f4:	0e 94 1b 49 	call	0x9236	; 0x9236 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   113f8:	46 ef       	ldi	r20, 0xF6	; 246
   113fa:	c4 2e       	mov	r12, r20
   113fc:	dd 24       	eor	r13, r13
   113fe:	da 94       	dec	r13
   11400:	04 cf       	rjmp	.-504    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   11402:	cc 24       	eor	r12, r12
   11404:	ca 94       	dec	r12
   11406:	dc 2c       	mov	r13, r12
   11408:	00 cf       	rjmp	.-512    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   1140a:	2e ef       	ldi	r18, 0xFE	; 254
   1140c:	c2 2e       	mov	r12, r18
   1140e:	dd 24       	eor	r13, r13
   11410:	da 94       	dec	r13
   11412:	fb ce       	rjmp	.-522    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   11414:	9d ef       	ldi	r25, 0xFD	; 253
   11416:	c9 2e       	mov	r12, r25
   11418:	dd 24       	eor	r13, r13
   1141a:	da 94       	dec	r13
   1141c:	f6 ce       	rjmp	.-532    	; 0x1120a <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   1141e:	8e ef       	ldi	r24, 0xFE	; 254
   11420:	c8 2e       	mov	r12, r24
   11422:	dd 24       	eor	r13, r13
   11424:	da 94       	dec	r13
   11426:	d0 cd       	rjmp	.-1120   	; 0x10fc8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
   11428:	d1 2c       	mov	r13, r1
   1142a:	c1 2c       	mov	r12, r1
   1142c:	cd cd       	rjmp	.-1126   	; 0x10fc8 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

0001142e <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   1142e:	cf 92       	push	r12
   11430:	df 92       	push	r13
   11432:	ef 92       	push	r14
   11434:	ff 92       	push	r15
   11436:	0f 93       	push	r16
   11438:	1f 93       	push	r17
   1143a:	cf 93       	push	r28
   1143c:	df 93       	push	r29
   1143e:	cd b7       	in	r28, 0x3d	; 61
   11440:	de b7       	in	r29, 0x3e	; 62
   11442:	af 97       	sbiw	r28, 0x2f	; 47
   11444:	0f b6       	in	r0, 0x3f	; 63
   11446:	f8 94       	cli
   11448:	de bf       	out	0x3e, r29	; 62
   1144a:	0f be       	out	0x3f, r0	; 63
   1144c:	cd bf       	out	0x3d, r28	; 61
   1144e:	7c 01       	movw	r14, r24
   11450:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11452:	02 ef       	ldi	r16, 0xF2	; 242
   11454:	12 e0       	ldi	r17, 0x02	; 2
   11456:	1a 83       	std	Y+2, r17	; 0x02
   11458:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1145a:	1c 86       	std	Y+12, r1	; 0x0c
   1145c:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1145e:	88 ee       	ldi	r24, 0xE8	; 232
   11460:	93 e0       	ldi	r25, 0x03	; 3
   11462:	a0 e0       	ldi	r26, 0x00	; 0
   11464:	b0 e0       	ldi	r27, 0x00	; 0
   11466:	8d 87       	std	Y+13, r24	; 0x0d
   11468:	9e 87       	std	Y+14, r25	; 0x0e
   1146a:	af 87       	std	Y+15, r26	; 0x0f
   1146c:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   1146e:	88 ea       	ldi	r24, 0xA8	; 168
   11470:	92 e0       	ldi	r25, 0x02	; 2
   11472:	9a 87       	std	Y+10, r25	; 0x0a
   11474:	89 87       	std	Y+9, r24	; 0x09
   11476:	88 e0       	ldi	r24, 0x08	; 8
   11478:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
   1147a:	19 8f       	std	Y+25, r17	; 0x19
   1147c:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   1147e:	1a 8e       	std	Y+26, r1	; 0x1a
   11480:	1b 8e       	std	Y+27, r1	; 0x1b
   11482:	1c 8e       	std	Y+28, r1	; 0x1c
   11484:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11486:	1b a7       	std	Y+43, r17	; 0x2b
   11488:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   1148a:	1c a6       	std	Y+44, r1	; 0x2c
   1148c:	1d a6       	std	Y+45, r1	; 0x2d
   1148e:	1e a6       	std	Y+46, r1	; 0x2e
   11490:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   11492:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <Ethernet+0x2>
   11496:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <Ethernet+0x3>
   1149a:	a0 91 a4 0d 	lds	r26, 0x0DA4	; 0x800da4 <Ethernet+0x4>
   1149e:	b0 91 a5 0d 	lds	r27, 0x0DA5	; 0x800da5 <Ethernet+0x5>
   114a2:	8e a3       	std	Y+38, r24	; 0x26
   114a4:	9f a3       	std	Y+39, r25	; 0x27
   114a6:	a8 a7       	std	Y+40, r26	; 0x28
   114a8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   114aa:	8b 83       	std	Y+3, r24	; 0x03
   114ac:	9c 83       	std	Y+4, r25	; 0x04
   114ae:	ad 83       	std	Y+5, r26	; 0x05
   114b0:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   114b2:	18 86       	std	Y+8, r1	; 0x08
   114b4:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   114b6:	ae 01       	movw	r20, r28
   114b8:	46 5d       	subi	r20, 0xD6	; 214
   114ba:	5f 4f       	sbci	r21, 0xFF	; 255
   114bc:	ce 01       	movw	r24, r28
   114be:	01 96       	adiw	r24, 0x01	; 1
   114c0:	0e 94 8e 87 	call	0x10f1c	; 0x10f1c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   114c4:	81 30       	cpi	r24, 0x01	; 1
   114c6:	91 05       	cpc	r25, r1
   114c8:	b1 f4       	brne	.+44     	; 0x114f6 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   114ca:	d7 01       	movw	r26, r14
   114cc:	ed 91       	ld	r30, X+
   114ce:	fc 91       	ld	r31, X
   114d0:	04 88       	ldd	r0, Z+20	; 0x14
   114d2:	f5 89       	ldd	r31, Z+21	; 0x15
   114d4:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   114d6:	1d a3       	std	Y+37, r17	; 0x25
   114d8:	0c a3       	std	Y+36, r16	; 0x24
   114da:	8c a5       	ldd	r24, Y+44	; 0x2c
   114dc:	9d a5       	ldd	r25, Y+45	; 0x2d
   114de:	ae a5       	ldd	r26, Y+46	; 0x2e
   114e0:	bf a5       	ldd	r27, Y+47	; 0x2f
   114e2:	8e a3       	std	Y+38, r24	; 0x26
   114e4:	9f a3       	std	Y+39, r25	; 0x27
   114e6:	a8 a7       	std	Y+40, r26	; 0x28
   114e8:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   114ea:	a6 01       	movw	r20, r12
   114ec:	be 01       	movw	r22, r28
   114ee:	6c 5d       	subi	r22, 0xDC	; 220
   114f0:	7f 4f       	sbci	r23, 0xFF	; 255
   114f2:	c7 01       	movw	r24, r14
   114f4:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   114f6:	af 96       	adiw	r28, 0x2f	; 47
   114f8:	0f b6       	in	r0, 0x3f	; 63
   114fa:	f8 94       	cli
   114fc:	de bf       	out	0x3e, r29	; 62
   114fe:	0f be       	out	0x3f, r0	; 63
   11500:	cd bf       	out	0x3d, r28	; 61
   11502:	df 91       	pop	r29
   11504:	cf 91       	pop	r28
   11506:	1f 91       	pop	r17
   11508:	0f 91       	pop	r16
   1150a:	ff 90       	pop	r15
   1150c:	ef 90       	pop	r14
   1150e:	df 90       	pop	r13
   11510:	cf 90       	pop	r12
   11512:	08 95       	ret

00011514 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
   11514:	cf 92       	push	r12
   11516:	df 92       	push	r13
   11518:	ef 92       	push	r14
   1151a:	ff 92       	push	r15
   1151c:	0f 93       	push	r16
   1151e:	1f 93       	push	r17
   11520:	cf 93       	push	r28
   11522:	df 93       	push	r29
   11524:	cd b7       	in	r28, 0x3d	; 61
   11526:	de b7       	in	r29, 0x3e	; 62
   11528:	af 97       	sbiw	r28, 0x2f	; 47
   1152a:	0f b6       	in	r0, 0x3f	; 63
   1152c:	f8 94       	cli
   1152e:	de bf       	out	0x3e, r29	; 62
   11530:	0f be       	out	0x3f, r0	; 63
   11532:	cd bf       	out	0x3d, r28	; 61
   11534:	7c 01       	movw	r14, r24
   11536:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   11538:	02 ef       	ldi	r16, 0xF2	; 242
   1153a:	12 e0       	ldi	r17, 0x02	; 2
   1153c:	1a 83       	std	Y+2, r17	; 0x02
   1153e:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   11540:	1c 86       	std	Y+12, r1	; 0x0c
   11542:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   11544:	88 ee       	ldi	r24, 0xE8	; 232
   11546:	93 e0       	ldi	r25, 0x03	; 3
   11548:	a0 e0       	ldi	r26, 0x00	; 0
   1154a:	b0 e0       	ldi	r27, 0x00	; 0
   1154c:	8d 87       	std	Y+13, r24	; 0x0d
   1154e:	9e 87       	std	Y+14, r25	; 0x0e
   11550:	af 87       	std	Y+15, r26	; 0x0f
   11552:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   11554:	88 ea       	ldi	r24, 0xA8	; 168
   11556:	92 e0       	ldi	r25, 0x02	; 2
   11558:	9a 87       	std	Y+10, r25	; 0x0a
   1155a:	89 87       	std	Y+9, r24	; 0x09
   1155c:	88 e0       	ldi	r24, 0x08	; 8
   1155e:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
   11560:	19 8f       	std	Y+25, r17	; 0x19
   11562:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   11564:	1a 8e       	std	Y+26, r1	; 0x1a
   11566:	1b 8e       	std	Y+27, r1	; 0x1b
   11568:	1c 8e       	std	Y+28, r1	; 0x1c
   1156a:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   1156c:	1b a7       	std	Y+43, r17	; 0x2b
   1156e:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   11570:	1c a6       	std	Y+44, r1	; 0x2c
   11572:	1d a6       	std	Y+45, r1	; 0x2d
   11574:	1e a6       	std	Y+46, r1	; 0x2e
   11576:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   11578:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <Ethernet+0x2>
   1157c:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <Ethernet+0x3>
   11580:	a0 91 a4 0d 	lds	r26, 0x0DA4	; 0x800da4 <Ethernet+0x4>
   11584:	b0 91 a5 0d 	lds	r27, 0x0DA5	; 0x800da5 <Ethernet+0x5>
   11588:	8e a3       	std	Y+38, r24	; 0x26
   1158a:	9f a3       	std	Y+39, r25	; 0x27
   1158c:	a8 a7       	std	Y+40, r26	; 0x28
   1158e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   11590:	8b 83       	std	Y+3, r24	; 0x03
   11592:	9c 83       	std	Y+4, r25	; 0x04
   11594:	ad 83       	std	Y+5, r26	; 0x05
   11596:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   11598:	18 86       	std	Y+8, r1	; 0x08
   1159a:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   1159c:	ae 01       	movw	r20, r28
   1159e:	46 5d       	subi	r20, 0xD6	; 214
   115a0:	5f 4f       	sbci	r21, 0xFF	; 255
   115a2:	ce 01       	movw	r24, r28
   115a4:	01 96       	adiw	r24, 0x01	; 1
   115a6:	0e 94 8e 87 	call	0x10f1c	; 0x10f1c <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
   115aa:	81 30       	cpi	r24, 0x01	; 1
   115ac:	91 05       	cpc	r25, r1
   115ae:	b1 f4       	brne	.+44     	; 0x115dc <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
   115b0:	d7 01       	movw	r26, r14
   115b2:	ed 91       	ld	r30, X+
   115b4:	fc 91       	ld	r31, X
   115b6:	06 84       	ldd	r0, Z+14	; 0x0e
   115b8:	f7 85       	ldd	r31, Z+15	; 0x0f
   115ba:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   115bc:	1d a3       	std	Y+37, r17	; 0x25
   115be:	0c a3       	std	Y+36, r16	; 0x24
   115c0:	8c a5       	ldd	r24, Y+44	; 0x2c
   115c2:	9d a5       	ldd	r25, Y+45	; 0x2d
   115c4:	ae a5       	ldd	r26, Y+46	; 0x2e
   115c6:	bf a5       	ldd	r27, Y+47	; 0x2f
   115c8:	8e a3       	std	Y+38, r24	; 0x26
   115ca:	9f a3       	std	Y+39, r25	; 0x27
   115cc:	a8 a7       	std	Y+40, r26	; 0x28
   115ce:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
   115d0:	a6 01       	movw	r20, r12
   115d2:	be 01       	movw	r22, r28
   115d4:	6c 5d       	subi	r22, 0xDC	; 220
   115d6:	7f 4f       	sbci	r23, 0xFF	; 255
   115d8:	c7 01       	movw	r24, r14
   115da:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
   115dc:	af 96       	adiw	r28, 0x2f	; 47
   115de:	0f b6       	in	r0, 0x3f	; 63
   115e0:	f8 94       	cli
   115e2:	de bf       	out	0x3e, r29	; 62
   115e4:	0f be       	out	0x3f, r0	; 63
   115e6:	cd bf       	out	0x3d, r28	; 61
   115e8:	df 91       	pop	r29
   115ea:	cf 91       	pop	r28
   115ec:	1f 91       	pop	r17
   115ee:	0f 91       	pop	r16
   115f0:	ff 90       	pop	r15
   115f2:	ef 90       	pop	r14
   115f4:	df 90       	pop	r13
   115f6:	cf 90       	pop	r12
   115f8:	08 95       	ret

000115fa <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6113
///////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
   115fa:	cf 93       	push	r28
   115fc:	df 93       	push	r29
   115fe:	cd b7       	in	r28, 0x3d	; 61
   11600:	de b7       	in	r29, 0x3e	; 62
   11602:	60 97       	sbiw	r28, 0x10	; 16
   11604:	0f b6       	in	r0, 0x3f	; 63
   11606:	f8 94       	cli
   11608:	de bf       	out	0x3e, r29	; 62
   1160a:	0f be       	out	0x3f, r0	; 63
   1160c:	cd bf       	out	0x3d, r28	; 61
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6128
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
   1160e:	6b e1       	ldi	r22, 0x1B	; 27
   11610:	76 e8       	ldi	r23, 0x86	; 134
   11612:	ce 01       	movw	r24, r28
   11614:	01 96       	adiw	r24, 0x01	; 1
   11616:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6129
  if (!ethClient1.connected())
   1161a:	83 e0       	ldi	r24, 0x03	; 3
   1161c:	92 e1       	ldi	r25, 0x12	; 18
   1161e:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <EthernetClient::connected()>
   11622:	81 11       	cpse	r24, r1
   11624:	17 c0       	rjmp	.+46     	; 0x11654 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6131
  {
    if (ethClient1.connect(server, 80))
   11626:	40 e5       	ldi	r20, 0x50	; 80
   11628:	50 e0       	ldi	r21, 0x00	; 0
   1162a:	be 01       	movw	r22, r28
   1162c:	6f 5f       	subi	r22, 0xFF	; 255
   1162e:	7f 4f       	sbci	r23, 0xFF	; 255
   11630:	83 e0       	ldi	r24, 0x03	; 3
   11632:	92 e1       	ldi	r25, 0x12	; 18
   11634:	0e 94 8a 8a 	call	0x11514	; 0x11514 <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6133
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   11638:	70 e0       	ldi	r23, 0x00	; 0
   1163a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6131
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
   1163c:	89 2b       	or	r24, r25
   1163e:	99 f0       	breq	.+38     	; 0x11666 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6133
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   11640:	88 e6       	ldi	r24, 0x68	; 104
   11642:	90 e0       	ldi	r25, 0x00	; 0
   11644:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6134
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
   11648:	6a ef       	ldi	r22, 0xFA	; 250
   1164a:	75 e8       	ldi	r23, 0x85	; 133
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6140
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   1164c:	81 eb       	ldi	r24, 0xB1	; 177
   1164e:	99 e0       	ldi	r25, 0x09	; 9
   11650:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6116
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
  /// TODO - pridat do selfcheck testu
}
   11654:	60 96       	adiw	r28, 0x10	; 16
   11656:	0f b6       	in	r0, 0x3f	; 63
   11658:	f8 94       	cli
   1165a:	de bf       	out	0x3e, r29	; 62
   1165c:	0f be       	out	0x3f, r0	; 63
   1165e:	cd bf       	out	0x3d, r28	; 61
   11660:	df 91       	pop	r29
   11662:	cf 91       	pop	r28
   11664:	08 95       	ret
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6139
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   11666:	88 e6       	ldi	r24, 0x68	; 104
   11668:	90 e0       	ldi	r25, 0x00	; 0
   1166a:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6140
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   1166e:	69 e0       	ldi	r22, 0x09	; 9
   11670:	76 e8       	ldi	r23, 0x86	; 134
   11672:	ec cf       	rjmp	.-40     	; 0x1164c <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x52>

00011674 <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
   11674:	8f 92       	push	r8
   11676:	9f 92       	push	r9
   11678:	af 92       	push	r10
   1167a:	bf 92       	push	r11
   1167c:	cf 92       	push	r12
   1167e:	df 92       	push	r13
   11680:	ef 92       	push	r14
   11682:	ff 92       	push	r15
   11684:	0f 93       	push	r16
   11686:	1f 93       	push	r17
   11688:	cf 93       	push	r28
   1168a:	df 93       	push	r29
   1168c:	cd b7       	in	r28, 0x3d	; 61
   1168e:	de b7       	in	r29, 0x3e	; 62
   11690:	2d 97       	sbiw	r28, 0x0d	; 13
   11692:	0f b6       	in	r0, 0x3f	; 63
   11694:	f8 94       	cli
   11696:	de bf       	out	0x3e, r29	; 62
   11698:	0f be       	out	0x3f, r0	; 63
   1169a:	cd bf       	out	0x3d, r28	; 61
   1169c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1169e:	10 e0       	ldi	r17, 0x00	; 0
   116a0:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   116a2:	38 ee       	ldi	r19, 0xE8	; 232
   116a4:	83 2e       	mov	r8, r19
   116a6:	33 e0       	ldi	r19, 0x03	; 3
   116a8:	93 2e       	mov	r9, r19
   116aa:	a1 2c       	mov	r10, r1
   116ac:	b1 2c       	mov	r11, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   116ae:	40 ed       	ldi	r20, 0xD0	; 208
   116b0:	c4 2e       	mov	r12, r20
   116b2:	42 e0       	ldi	r20, 0x02	; 2
   116b4:	d4 2e       	mov	r13, r20
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   116b6:	1c 82       	std	Y+4, r1	; 0x04
   116b8:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   116ba:	8d 82       	std	Y+5, r8	; 0x05
   116bc:	9e 82       	std	Y+6, r9	; 0x06
   116be:	af 82       	std	Y+7, r10	; 0x07
   116c0:	b8 86       	std	Y+8, r11	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   116c2:	da 82       	std	Y+2, r13	; 0x02
   116c4:	c9 82       	std	Y+1, r12	; 0x01
   116c6:	0d 87       	std	Y+13, r16	; 0x0d
_ZN14EthernetServer5beginEv():
    EthernetClient client(sock);
    if (client.status() == SnSR::CLOSED) {
   116c8:	ce 01       	movw	r24, r28
   116ca:	01 96       	adiw	r24, 0x01	; 1
   116cc:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   116d0:	81 11       	cpse	r24, r1
   116d2:	30 c0       	rjmp	.+96     	; 0x11734 <EthernetServer::begin()+0xc0>
socket():
   116d4:	f7 01       	movw	r30, r14
   116d6:	44 81       	ldd	r20, Z+4	; 0x04
   116d8:	55 81       	ldd	r21, Z+5	; 0x05
   116da:	61 e0       	ldi	r22, 0x01	; 1
   116dc:	80 2f       	mov	r24, r16
   116de:	0e 94 13 d5 	call	0x1aa26	; 0x1aa26 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   116e2:	63 e0       	ldi	r22, 0x03	; 3
   116e4:	70 e0       	ldi	r23, 0x00	; 0
   116e6:	80 2f       	mov	r24, r16
   116e8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
listen():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:55
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (w5500.readSnSR(s) != SnSR::INIT)
   116ec:	83 31       	cpi	r24, 0x13	; 19
   116ee:	29 f4       	brne	.+10     	; 0x116fa <EthernetServer::begin()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:57
    return 0;
  w5500.execCmdSn(s, Sock_LISTEN);
   116f0:	62 e0       	ldi	r22, 0x02	; 2
   116f2:	70 e0       	ldi	r23, 0x00	; 0
   116f4:	80 2f       	mov	r24, r16
   116f6:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      socket(sock, SnMR::TCP, _port, 0);
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
   116fa:	f7 01       	movw	r30, r14
   116fc:	84 81       	ldd	r24, Z+4	; 0x04
   116fe:	95 81       	ldd	r25, Z+5	; 0x05
   11700:	00 0f       	add	r16, r16
   11702:	11 1f       	adc	r17, r17
   11704:	f8 01       	movw	r30, r16
   11706:	ea 5f       	subi	r30, 0xFA	; 250
   11708:	f4 4f       	sbci	r31, 0xF4	; 244
   1170a:	91 83       	std	Z+1, r25	; 0x01
   1170c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
   1170e:	2d 96       	adiw	r28, 0x0d	; 13
   11710:	0f b6       	in	r0, 0x3f	; 63
   11712:	f8 94       	cli
   11714:	de bf       	out	0x3e, r29	; 62
   11716:	0f be       	out	0x3f, r0	; 63
   11718:	cd bf       	out	0x3d, r28	; 61
   1171a:	df 91       	pop	r29
   1171c:	cf 91       	pop	r28
   1171e:	1f 91       	pop	r17
   11720:	0f 91       	pop	r16
   11722:	ff 90       	pop	r15
   11724:	ef 90       	pop	r14
   11726:	df 90       	pop	r13
   11728:	cf 90       	pop	r12
   1172a:	bf 90       	pop	r11
   1172c:	af 90       	pop	r10
   1172e:	9f 90       	pop	r9
   11730:	8f 90       	pop	r8
   11732:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   11734:	0f 5f       	subi	r16, 0xFF	; 255
   11736:	1f 4f       	sbci	r17, 0xFF	; 255
   11738:	08 30       	cpi	r16, 0x08	; 8
   1173a:	11 05       	cpc	r17, r1
   1173c:	09 f0       	breq	.+2      	; 0x11740 <EthernetServer::begin()+0xcc>
   1173e:	bb cf       	rjmp	.-138    	; 0x116b6 <EthernetServer::begin()+0x42>
   11740:	e6 cf       	rjmp	.-52     	; 0x1170e <EthernetServer::begin()+0x9a>

00011742 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   11742:	8f 92       	push	r8
   11744:	9f 92       	push	r9
   11746:	af 92       	push	r10
   11748:	bf 92       	push	r11
   1174a:	cf 92       	push	r12
   1174c:	df 92       	push	r13
   1174e:	ef 92       	push	r14
   11750:	ff 92       	push	r15
   11752:	0f 93       	push	r16
   11754:	1f 93       	push	r17
   11756:	cf 93       	push	r28
   11758:	6c 01       	movw	r12, r24
   1175a:	5b 01       	movw	r10, r22
   1175c:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   1175e:	fc 01       	movw	r30, r24
   11760:	c4 85       	ldd	r28, Z+12	; 0x0c
   11762:	c8 30       	cpi	r28, 0x08	; 8
   11764:	a1 f4       	brne	.+40     	; 0x1178e <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   11766:	81 e0       	ldi	r24, 0x01	; 1
   11768:	90 e0       	ldi	r25, 0x00	; 0
   1176a:	f6 01       	movw	r30, r12
   1176c:	93 83       	std	Z+3, r25	; 0x03
   1176e:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   11770:	f1 2c       	mov	r15, r1
   11772:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   11774:	c7 01       	movw	r24, r14
   11776:	cf 91       	pop	r28
   11778:	1f 91       	pop	r17
   1177a:	0f 91       	pop	r16
   1177c:	ff 90       	pop	r15
   1177e:	ef 90       	pop	r14
   11780:	df 90       	pop	r13
   11782:	cf 90       	pop	r12
   11784:	bf 90       	pop	r11
   11786:	af 90       	pop	r10
   11788:	9f 90       	pop	r9
   1178a:	8f 90       	pop	r8
   1178c:	08 95       	ret
   1178e:	8a 01       	movw	r16, r20
   11790:	41 30       	cpi	r20, 0x01	; 1
   11792:	58 40       	sbci	r21, 0x08	; 8
   11794:	10 f0       	brcs	.+4      	; 0x1179a <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
   11796:	00 e0       	ldi	r16, 0x00	; 0
   11798:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
   1179a:	8c 2f       	mov	r24, r28
   1179c:	0e 94 b0 dc 	call	0x1b960	; 0x1b960 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
   117a0:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   117a2:	63 e0       	ldi	r22, 0x03	; 3
   117a4:	70 e0       	ldi	r23, 0x00	; 0
   117a6:	8c 2f       	mov	r24, r28
   117a8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
   117ac:	87 31       	cpi	r24, 0x17	; 23
   117ae:	11 f0       	breq	.+4      	; 0x117b4 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
   117b0:	8c 31       	cpi	r24, 0x1C	; 28
   117b2:	09 f5       	brne	.+66     	; 0x117f6 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
   117b4:	80 16       	cp	r8, r16
   117b6:	91 06       	cpc	r9, r17
   117b8:	80 f3       	brcs	.-32     	; 0x1179a <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
   117ba:	98 01       	movw	r18, r16
   117bc:	a5 01       	movw	r20, r10
   117be:	70 e0       	ldi	r23, 0x00	; 0
   117c0:	60 e0       	ldi	r22, 0x00	; 0
   117c2:	8c 2f       	mov	r24, r28
   117c4:	0e 94 70 dc 	call	0x1b8e0	; 0x1b8e0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
   117c8:	60 e2       	ldi	r22, 0x20	; 32
   117ca:	70 e0       	ldi	r23, 0x00	; 0
   117cc:	8c 2f       	mov	r24, r28
   117ce:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   117d2:	62 e0       	ldi	r22, 0x02	; 2
   117d4:	70 e0       	ldi	r23, 0x00	; 0
   117d6:	8c 2f       	mov	r24, r28
   117d8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   117dc:	84 fd       	sbrc	r24, 4
   117de:	0e c0       	rjmp	.+28     	; 0x117fc <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   117e0:	63 e0       	ldi	r22, 0x03	; 3
   117e2:	70 e0       	ldi	r23, 0x00	; 0
   117e4:	8c 2f       	mov	r24, r28
   117e6:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
   117ea:	81 11       	cpse	r24, r1
   117ec:	f2 cf       	rjmp	.-28     	; 0x117d2 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
   117ee:	8c 2f       	mov	r24, r28
   117f0:	0e 94 c0 84 	call	0x10980	; 0x10980 <close(unsigned char)>
   117f4:	b8 cf       	rjmp	.-144    	; 0x11766 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
   117f6:	10 e0       	ldi	r17, 0x00	; 0
   117f8:	00 e0       	ldi	r16, 0x00	; 0
   117fa:	df cf       	rjmp	.-66     	; 0x117ba <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   117fc:	40 e1       	ldi	r20, 0x10	; 16
   117fe:	62 e0       	ldi	r22, 0x02	; 2
   11800:	70 e0       	ldi	r23, 0x00	; 0
   11802:	8c 2f       	mov	r24, r28
   11804:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   11808:	01 2b       	or	r16, r17
   1180a:	09 f0       	breq	.+2      	; 0x1180e <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
   1180c:	b3 cf       	rjmp	.-154    	; 0x11774 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
   1180e:	ab cf       	rjmp	.-170    	; 0x11766 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00011810 <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
   11810:	3f 92       	push	r3
   11812:	4f 92       	push	r4
   11814:	5f 92       	push	r5
   11816:	6f 92       	push	r6
   11818:	7f 92       	push	r7
   1181a:	8f 92       	push	r8
   1181c:	9f 92       	push	r9
   1181e:	af 92       	push	r10
   11820:	bf 92       	push	r11
   11822:	cf 92       	push	r12
   11824:	df 92       	push	r13
   11826:	ef 92       	push	r14
   11828:	ff 92       	push	r15
   1182a:	0f 93       	push	r16
   1182c:	1f 93       	push	r17
   1182e:	cf 93       	push	r28
   11830:	df 93       	push	r29
   11832:	cd b7       	in	r28, 0x3d	; 61
   11834:	de b7       	in	r29, 0x3e	; 62
   11836:	2d 97       	sbiw	r28, 0x0d	; 13
   11838:	0f b6       	in	r0, 0x3f	; 63
   1183a:	f8 94       	cli
   1183c:	de bf       	out	0x3e, r29	; 62
   1183e:	0f be       	out	0x3f, r0	; 63
   11840:	cd bf       	out	0x3d, r28	; 61
   11842:	6c 01       	movw	r12, r24
   11844:	5b 01       	movw	r10, r22
   11846:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   11848:	0e 94 c9 85 	call	0x10b92	; 0x10b92 <EthernetServer::accept()>
   1184c:	86 e0       	ldi	r24, 0x06	; 6
   1184e:	e8 2e       	mov	r14, r24
   11850:	8b e0       	ldi	r24, 0x0B	; 11
   11852:	f8 2e       	mov	r15, r24
   11854:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   11856:	10 e0       	ldi	r17, 0x00	; 0
   11858:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1185a:	98 ee       	ldi	r25, 0xE8	; 232
   1185c:	49 2e       	mov	r4, r25
   1185e:	93 e0       	ldi	r25, 0x03	; 3
   11860:	59 2e       	mov	r5, r25
   11862:	61 2c       	mov	r6, r1
   11864:	71 2c       	mov	r7, r1
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   11866:	1c 82       	std	Y+4, r1	; 0x04
   11868:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1186a:	4d 82       	std	Y+5, r4	; 0x05
   1186c:	5e 82       	std	Y+6, r5	; 0x06
   1186e:	6f 82       	std	Y+7, r6	; 0x07
   11870:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   11872:	80 ed       	ldi	r24, 0xD0	; 208
   11874:	92 e0       	ldi	r25, 0x02	; 2
   11876:	9a 83       	std	Y+2, r25	; 0x02
   11878:	89 83       	std	Y+1, r24	; 0x01
   1187a:	3d 86       	std	Y+13, r3	; 0x0d
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   1187c:	f7 01       	movw	r30, r14
   1187e:	21 91       	ld	r18, Z+
   11880:	31 91       	ld	r19, Z+
   11882:	7f 01       	movw	r14, r30
   11884:	f6 01       	movw	r30, r12
   11886:	84 81       	ldd	r24, Z+4	; 0x04
   11888:	95 81       	ldd	r25, Z+5	; 0x05
   1188a:	28 17       	cp	r18, r24
   1188c:	39 07       	cpc	r19, r25
   1188e:	71 f4       	brne	.+28     	; 0x118ac <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85
      client.status() == SnSR::ESTABLISHED) {
   11890:	ce 01       	movw	r24, r28
   11892:	01 96       	adiw	r24, 0x01	; 1
   11894:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   11898:	87 31       	cpi	r24, 0x17	; 23
   1189a:	41 f4       	brne	.+16     	; 0x118ac <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   1189c:	a4 01       	movw	r20, r8
   1189e:	b5 01       	movw	r22, r10
   118a0:	ce 01       	movw	r24, r28
   118a2:	01 96       	adiw	r24, 0x01	; 1
   118a4:	0e 94 a1 8b 	call	0x11742	; 0x11742 <EthernetClient::write(unsigned char const*, unsigned int)>
   118a8:	08 0f       	add	r16, r24
   118aa:	19 1f       	adc	r17, r25
   118ac:	33 94       	inc	r3
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   118ae:	f8 e0       	ldi	r31, 0x08	; 8
   118b0:	3f 12       	cpse	r3, r31
   118b2:	d9 cf       	rjmp	.-78     	; 0x11866 <EthernetServer::write(unsigned char const*, unsigned int)+0x56>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   118b4:	c8 01       	movw	r24, r16
   118b6:	2d 96       	adiw	r28, 0x0d	; 13
   118b8:	0f b6       	in	r0, 0x3f	; 63
   118ba:	f8 94       	cli
   118bc:	de bf       	out	0x3e, r29	; 62
   118be:	0f be       	out	0x3f, r0	; 63
   118c0:	cd bf       	out	0x3d, r28	; 61
   118c2:	df 91       	pop	r29
   118c4:	cf 91       	pop	r28
   118c6:	1f 91       	pop	r17
   118c8:	0f 91       	pop	r16
   118ca:	ff 90       	pop	r15
   118cc:	ef 90       	pop	r14
   118ce:	df 90       	pop	r13
   118d0:	cf 90       	pop	r12
   118d2:	bf 90       	pop	r11
   118d4:	af 90       	pop	r10
   118d6:	9f 90       	pop	r9
   118d8:	8f 90       	pop	r8
   118da:	7f 90       	pop	r7
   118dc:	6f 90       	pop	r6
   118de:	5f 90       	pop	r5
   118e0:	4f 90       	pop	r4
   118e2:	3f 90       	pop	r3
   118e4:	08 95       	ret

000118e6 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   118e6:	df 92       	push	r13
   118e8:	ef 92       	push	r14
   118ea:	ff 92       	push	r15
   118ec:	0f 93       	push	r16
   118ee:	1f 93       	push	r17
   118f0:	cf 93       	push	r28
   118f2:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   118f4:	fc 01       	movw	r30, r24
   118f6:	24 85       	ldd	r18, Z+12	; 0x0c
   118f8:	28 30       	cpi	r18, 0x08	; 8
   118fa:	51 f0       	breq	.+20     	; 0x11910 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   118fc:	90 e0       	ldi	r25, 0x00	; 0
   118fe:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   11900:	df 91       	pop	r29
   11902:	cf 91       	pop	r28
   11904:	1f 91       	pop	r17
   11906:	0f 91       	pop	r16
   11908:	ff 90       	pop	r15
   1190a:	ef 90       	pop	r14
   1190c:	df 90       	pop	r13
   1190e:	08 95       	ret
   11910:	7a 01       	movw	r14, r20
   11912:	eb 01       	movw	r28, r22
   11914:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   11916:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   11918:	63 e0       	ldi	r22, 0x03	; 3
   1191a:	70 e0       	ldi	r23, 0x00	; 0
   1191c:	8d 2d       	mov	r24, r13
   1191e:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   11922:	81 11       	cpse	r24, r1
   11924:	28 c0       	rjmp	.+80     	; 0x11976 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   11926:	f8 01       	movw	r30, r16
   11928:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1192a:	f8 01       	movw	r30, r16
   1192c:	84 85       	ldd	r24, Z+12	; 0x0c
   1192e:	88 30       	cpi	r24, 0x08	; 8
   11930:	29 f3       	breq	.-54     	; 0x118fc <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   11932:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   11936:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1193a:	2f 5f       	subi	r18, 0xFF	; 255
   1193c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   1193e:	19 f1       	breq	.+70     	; 0x11986 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   11940:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   11944:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
socket():
   11948:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   1194c:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   11950:	61 e0       	ldi	r22, 0x01	; 1
   11952:	0e 94 13 d5 	call	0x1aa26	; 0x1aa26 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   11956:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
   11958:	8f 3f       	cpi	r24, 0xFF	; 255
   1195a:	c1 f4       	brne	.+48     	; 0x1198c <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   1195c:	8b 81       	ldd	r24, Y+3	; 0x03
   1195e:	8f 3f       	cpi	r24, 0xFF	; 255
   11960:	01 f5       	brne	.+64     	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   11962:	8c 81       	ldd	r24, Y+4	; 0x04
   11964:	8f 3f       	cpi	r24, 0xFF	; 255
   11966:	e9 f4       	brne	.+58     	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   11968:	8d 81       	ldd	r24, Y+5	; 0x05
   1196a:	8f 3f       	cpi	r24, 0xFF	; 255
   1196c:	d1 f4       	brne	.+52     	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
   1196e:	88 e0       	ldi	r24, 0x08	; 8
   11970:	f8 01       	movw	r30, r16
   11972:	84 87       	std	Z+12, r24	; 0x0c
   11974:	c3 cf       	rjmp	.-122    	; 0x118fc <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   11976:	8b 7f       	andi	r24, 0xFB	; 251
   11978:	88 31       	cpi	r24, 0x18	; 24
   1197a:	a9 f2       	breq	.-86     	; 0x11926 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
   1197c:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1197e:	f8 e0       	ldi	r31, 0x08	; 8
   11980:	df 12       	cpse	r13, r31
   11982:	ca cf       	rjmp	.-108    	; 0x11918 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
   11984:	d2 cf       	rjmp	.-92     	; 0x1192a <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   11986:	20 e0       	ldi	r18, 0x00	; 0
   11988:	34 e0       	ldi	r19, 0x04	; 4
   1198a:	da cf       	rjmp	.-76     	; 0x11940 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
   1198c:	81 11       	cpse	r24, r1
   1198e:	09 c0       	rjmp	.+18     	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   11990:	8b 81       	ldd	r24, Y+3	; 0x03
   11992:	81 11       	cpse	r24, r1
   11994:	06 c0       	rjmp	.+12     	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   11996:	8c 81       	ldd	r24, Y+4	; 0x04
   11998:	81 11       	cpse	r24, r1
   1199a:	03 c0       	rjmp	.+6      	; 0x119a2 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   1199c:	8d 81       	ldd	r24, Y+5	; 0x05
   1199e:	88 23       	and	r24, r24
   119a0:	31 f3       	breq	.-52     	; 0x1196e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
   119a2:	e1 14       	cp	r14, r1
   119a4:	f1 04       	cpc	r15, r1
   119a6:	19 f3       	breq	.-58     	; 0x1196e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   119a8:	f8 01       	movw	r30, r16
   119aa:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   119ac:	ae 01       	movw	r20, r28
   119ae:	4e 5f       	subi	r20, 0xFE	; 254
   119b0:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   119b2:	6d 2d       	mov	r22, r13
   119b4:	62 95       	swap	r22
   119b6:	66 0f       	add	r22, r22
   119b8:	60 7e       	andi	r22, 0xE0	; 224
   119ba:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   119bc:	24 e0       	ldi	r18, 0x04	; 4
   119be:	30 e0       	ldi	r19, 0x00	; 0
   119c0:	8c e0       	ldi	r24, 0x0C	; 12
   119c2:	90 e0       	ldi	r25, 0x00	; 0
   119c4:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   119c8:	4f 2d       	mov	r20, r15
   119ca:	60 e1       	ldi	r22, 0x10	; 16
   119cc:	70 e0       	ldi	r23, 0x00	; 0
   119ce:	8d 2d       	mov	r24, r13
   119d0:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   119d4:	4e 2d       	mov	r20, r14
   119d6:	61 e1       	ldi	r22, 0x11	; 17
   119d8:	70 e0       	ldi	r23, 0x00	; 0
   119da:	8d 2d       	mov	r24, r13
   119dc:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
   119e0:	64 e0       	ldi	r22, 0x04	; 4
   119e2:	70 e0       	ldi	r23, 0x00	; 0
   119e4:	8d 2d       	mov	r24, r13
   119e6:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   119ea:	c8 01       	movw	r24, r16
   119ec:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   119f0:	87 31       	cpi	r24, 0x17	; 23
   119f2:	61 f0       	breq	.+24     	; 0x11a0c <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   119f4:	61 e0       	ldi	r22, 0x01	; 1
   119f6:	70 e0       	ldi	r23, 0x00	; 0
   119f8:	80 e0       	ldi	r24, 0x00	; 0
   119fa:	90 e0       	ldi	r25, 0x00	; 0
   119fc:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   11a00:	c8 01       	movw	r24, r16
   11a02:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
   11a06:	81 11       	cpse	r24, r1
   11a08:	f0 cf       	rjmp	.-32     	; 0x119ea <EthernetClient::connect(IPAddress, unsigned int)+0x104>
   11a0a:	b1 cf       	rjmp	.-158    	; 0x1196e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   11a0c:	81 e0       	ldi	r24, 0x01	; 1
   11a0e:	90 e0       	ldi	r25, 0x00	; 0
   11a10:	77 cf       	rjmp	.-274    	; 0x11900 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

00011a12 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   11a12:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   11a14:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   11a16:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   11a18:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <SPIClass::initialized>
   11a1c:	81 11       	cpse	r24, r1
   11a1e:	27 c0       	rjmp	.+78     	; 0x11a6e <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   11a20:	e1 e2       	ldi	r30, 0x21	; 33
   11a22:	fe e8       	ldi	r31, 0x8E	; 142
   11a24:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   11a26:	eb ed       	ldi	r30, 0xDB	; 219
   11a28:	fd e8       	ldi	r31, 0x8D	; 141
   11a2a:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   11a2c:	e8 2f       	mov	r30, r24
   11a2e:	f0 e0       	ldi	r31, 0x00	; 0
   11a30:	ee 0f       	add	r30, r30
   11a32:	ff 1f       	adc	r31, r31
   11a34:	ec 52       	subi	r30, 0x2C	; 44
   11a36:	f9 47       	sbci	r31, 0x79	; 121
   11a38:	a5 91       	lpm	r26, Z+
   11a3a:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   11a3c:	ec 91       	ld	r30, X
   11a3e:	e9 23       	and	r30, r25
   11a40:	21 f4       	brne	.+8      	; 0x11a4a <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   11a42:	61 e0       	ldi	r22, 0x01	; 1
   11a44:	88 e0       	ldi	r24, 0x08	; 8
   11a46:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   11a4a:	61 e0       	ldi	r22, 0x01	; 1
   11a4c:	88 e0       	ldi	r24, 0x08	; 8
   11a4e:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   11a52:	8c b5       	in	r24, 0x2c	; 44
   11a54:	80 61       	ori	r24, 0x10	; 16
   11a56:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   11a58:	8c b5       	in	r24, 0x2c	; 44
   11a5a:	80 64       	ori	r24, 0x40	; 64
   11a5c:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   11a5e:	61 e0       	ldi	r22, 0x01	; 1
   11a60:	89 e0       	ldi	r24, 0x09	; 9
   11a62:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   11a66:	61 e0       	ldi	r22, 0x01	; 1
   11a68:	8a e0       	ldi	r24, 0x0A	; 10
   11a6a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   11a6e:	80 91 95 0a 	lds	r24, 0x0A95	; 0x800a95 <SPIClass::initialized>
   11a72:	8f 5f       	subi	r24, 0xFF	; 255
   11a74:	80 93 95 0a 	sts	0x0A95, r24	; 0x800a95 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   11a78:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   11a7a:	cf 91       	pop	r28
   11a7c:	08 95       	ret

00011a7e <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   11a7e:	7f 92       	push	r7
   11a80:	8f 92       	push	r8
   11a82:	9f 92       	push	r9
   11a84:	af 92       	push	r10
   11a86:	bf 92       	push	r11
   11a88:	cf 92       	push	r12
   11a8a:	df 92       	push	r13
   11a8c:	ef 92       	push	r14
   11a8e:	ff 92       	push	r15
   11a90:	0f 93       	push	r16
   11a92:	1f 93       	push	r17
   11a94:	cf 93       	push	r28
   11a96:	df 93       	push	r29
   11a98:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   11a9a:	fc 01       	movw	r30, r24
   11a9c:	86 81       	ldd	r24, Z+6	; 0x06
   11a9e:	81 11       	cpse	r24, r1
   11aa0:	35 c0       	rjmp	.+106    	; 0x11b0c <SoftSPIB::transfer(unsigned char)+0x8e>
   11aa2:	86 2f       	mov	r24, r22
   11aa4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   11aa6:	ec 01       	movw	r28, r24
   11aa8:	d6 95       	lsr	r29
   11aaa:	dc 2f       	mov	r29, r28
   11aac:	cc 27       	eor	r28, r28
   11aae:	d7 95       	ror	r29
   11ab0:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   11ab2:	66 1f       	adc	r22, r22
   11ab4:	66 27       	eor	r22, r22
   11ab6:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11ab8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   11aba:	ec 01       	movw	r28, r24
   11abc:	55 e0       	ldi	r21, 0x05	; 5
   11abe:	cc 0f       	add	r28, r28
   11ac0:	dd 1f       	adc	r29, r29
   11ac2:	5a 95       	dec	r21
   11ac4:	e1 f7       	brne	.-8      	; 0x11abe <SoftSPIB::transfer(unsigned char)+0x40>
   11ac6:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11ac8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   11aca:	ec 01       	movw	r28, r24
   11acc:	73 e0       	ldi	r23, 0x03	; 3
   11ace:	cc 0f       	add	r28, r28
   11ad0:	dd 1f       	adc	r29, r29
   11ad2:	7a 95       	dec	r23
   11ad4:	e1 f7       	brne	.-8      	; 0x11ace <SoftSPIB::transfer(unsigned char)+0x50>
   11ad6:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11ad8:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   11ada:	ec 01       	movw	r28, r24
   11adc:	cc 0f       	add	r28, r28
   11ade:	dd 1f       	adc	r29, r29
   11ae0:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11ae2:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   11ae4:	ec 01       	movw	r28, r24
   11ae6:	d5 95       	asr	r29
   11ae8:	c7 95       	ror	r28
   11aea:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11aec:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   11aee:	ec 01       	movw	r28, r24
   11af0:	a3 e0       	ldi	r26, 0x03	; 3
   11af2:	d5 95       	asr	r29
   11af4:	c7 95       	ror	r28
   11af6:	aa 95       	dec	r26
   11af8:	e1 f7       	brne	.-8      	; 0x11af2 <SoftSPIB::transfer(unsigned char)+0x74>
   11afa:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   11afc:	6c 2b       	or	r22, r28
   11afe:	b5 e0       	ldi	r27, 0x05	; 5
   11b00:	95 95       	asr	r25
   11b02:	87 95       	ror	r24
   11b04:	ba 95       	dec	r27
   11b06:	e1 f7       	brne	.-8      	; 0x11b00 <SoftSPIB::transfer(unsigned char)+0x82>
   11b08:	82 70       	andi	r24, 0x02	; 2
   11b0a:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   11b0c:	91 e0       	ldi	r25, 0x01	; 1
   11b0e:	80 e0       	ldi	r24, 0x00	; 0
   11b10:	f8 01       	movw	r30, r16
   11b12:	21 81       	ldd	r18, Z+1	; 0x01
   11b14:	21 11       	cpse	r18, r1
   11b16:	01 c0       	rjmp	.+2      	; 0x11b1a <SoftSPIB::transfer(unsigned char)+0x9c>
   11b18:	90 e0       	ldi	r25, 0x00	; 0
   11b1a:	e9 2e       	mov	r14, r25
   11b1c:	f8 2e       	mov	r15, r24
   11b1e:	d1 2c       	mov	r13, r1
   11b20:	c1 2c       	mov	r12, r1
   11b22:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   11b24:	c6 2f       	mov	r28, r22
   11b26:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   11b28:	f8 01       	movw	r30, r16
   11b2a:	80 81       	ld	r24, Z
   11b2c:	88 23       	and	r24, r24
   11b2e:	39 f0       	breq	.+14     	; 0x11b3e <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   11b30:	f1 e0       	ldi	r31, 0x01	; 1
   11b32:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   11b34:	6e 2d       	mov	r22, r14
   11b36:	f8 01       	movw	r30, r16
   11b38:	85 81       	ldd	r24, Z+5	; 0x05
   11b3a:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   11b3e:	be 01       	movw	r22, r28
   11b40:	0c 2c       	mov	r0, r12
   11b42:	02 c0       	rjmp	.+4      	; 0x11b48 <SoftSPIB::transfer(unsigned char)+0xca>
   11b44:	75 95       	asr	r23
   11b46:	67 95       	ror	r22
   11b48:	0a 94       	dec	r0
   11b4a:	e2 f7       	brpl	.-8      	; 0x11b44 <SoftSPIB::transfer(unsigned char)+0xc6>
   11b4c:	61 70       	andi	r22, 0x01	; 1
   11b4e:	f8 01       	movw	r30, r16
   11b50:	84 81       	ldd	r24, Z+4	; 0x04
   11b52:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   11b56:	57 01       	movw	r10, r14
   11b58:	f1 e0       	ldi	r31, 0x01	; 1
   11b5a:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   11b5c:	6a 2d       	mov	r22, r10
   11b5e:	f8 01       	movw	r30, r16
   11b60:	85 81       	ldd	r24, Z+5	; 0x05
   11b62:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
   11b66:	f8 01       	movw	r30, r16
   11b68:	23 81       	ldd	r18, Z+3	; 0x03
   11b6a:	30 e0       	ldi	r19, 0x00	; 0
   11b6c:	f9 01       	movw	r30, r18
   11b6e:	ec 51       	subi	r30, 0x1C	; 28
   11b70:	f9 47       	sbci	r31, 0x79	; 121
   11b72:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   11b74:	f9 01       	movw	r30, r18
   11b76:	ed 52       	subi	r30, 0x2D	; 45
   11b78:	f2 47       	sbci	r31, 0x72	; 114
   11b7a:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   11b7c:	f9 01       	movw	r30, r18
   11b7e:	e7 5e       	subi	r30, 0xE7	; 231
   11b80:	f1 47       	sbci	r31, 0x71	; 113
   11b82:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   11b84:	77 20       	and	r7, r7
   11b86:	a9 f1       	breq	.+106    	; 0x11bf2 <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   11b88:	81 11       	cpse	r24, r1
   11b8a:	0e 94 89 47 	call	0x8f12	; 0x8f12 <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   11b8e:	e7 2d       	mov	r30, r7
   11b90:	f0 e0       	ldi	r31, 0x00	; 0
   11b92:	ee 0f       	add	r30, r30
   11b94:	ff 1f       	adc	r31, r31
   11b96:	ed 53       	subi	r30, 0x3D	; 61
   11b98:	f2 47       	sbci	r31, 0x72	; 114
   11b9a:	a5 91       	lpm	r26, Z+
   11b9c:	b4 91       	lpm	r27, Z
   11b9e:	ec 91       	ld	r30, X
   11ba0:	8e 22       	and	r8, r30
   11ba2:	31 e0       	ldi	r19, 0x01	; 1
   11ba4:	20 e0       	ldi	r18, 0x00	; 0
   11ba6:	09 f4       	brne	.+2      	; 0x11baa <SoftSPIB::transfer(unsigned char)+0x12c>
   11ba8:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   11baa:	83 2f       	mov	r24, r19
   11bac:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
   11bae:	f8 01       	movw	r30, r16
   11bb0:	26 81       	ldd	r18, Z+6	; 0x06
   11bb2:	21 11       	cpse	r18, r1
   11bb4:	21 c0       	rjmp	.+66     	; 0x11bf8 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   11bb6:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   11bb8:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   11bba:	f8 01       	movw	r30, r16
   11bbc:	80 81       	ld	r24, Z
   11bbe:	88 23       	and	r24, r24
   11bc0:	11 f1       	breq	.+68     	; 0x11c06 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   11bc2:	75 01       	movw	r14, r10
   11bc4:	ff ef       	ldi	r31, 0xFF	; 255
   11bc6:	cf 1a       	sub	r12, r31
   11bc8:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   11bca:	28 e0       	ldi	r18, 0x08	; 8
   11bcc:	c2 16       	cp	r12, r18
   11bce:	d1 04       	cpc	r13, r1
   11bd0:	09 f0       	breq	.+2      	; 0x11bd4 <SoftSPIB::transfer(unsigned char)+0x156>
   11bd2:	aa cf       	rjmp	.-172    	; 0x11b28 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   11bd4:	89 2d       	mov	r24, r9
   11bd6:	df 91       	pop	r29
   11bd8:	cf 91       	pop	r28
   11bda:	1f 91       	pop	r17
   11bdc:	0f 91       	pop	r16
   11bde:	ff 90       	pop	r15
   11be0:	ef 90       	pop	r14
   11be2:	df 90       	pop	r13
   11be4:	cf 90       	pop	r12
   11be6:	bf 90       	pop	r11
   11be8:	af 90       	pop	r10
   11bea:	9f 90       	pop	r9
   11bec:	8f 90       	pop	r8
   11bee:	7f 90       	pop	r7
   11bf0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
   11bf2:	90 e0       	ldi	r25, 0x00	; 0
   11bf4:	80 e0       	ldi	r24, 0x00	; 0
   11bf6:	db cf       	rjmp	.-74     	; 0x11bae <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   11bf8:	96 95       	lsr	r25
   11bfa:	98 2f       	mov	r25, r24
   11bfc:	88 27       	eor	r24, r24
   11bfe:	97 95       	ror	r25
   11c00:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   11c02:	96 94       	lsr	r9
   11c04:	d9 cf       	rjmp	.-78     	; 0x11bb8 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   11c06:	6e 2d       	mov	r22, r14
   11c08:	85 81       	ldd	r24, Z+5	; 0x05
   11c0a:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
   11c0e:	da cf       	rjmp	.-76     	; 0x11bc4 <SoftSPIB::transfer(unsigned char)+0x146>

00011c10 <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:13
#include "LCDWIKI_TOUCH.h"
#include "mcu_touch_magic.h"
#include "cali_para.h"

void delay_hus(u32 us)
{
   11c10:	0f 93       	push	r16
   11c12:	1f 93       	push	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:16
    //u32 time=100*us/7; 
    //while(--time);
    for (uint8_t i=0; i< us; i++) __asm__("nop\n\t");
   11c14:	40 e0       	ldi	r20, 0x00	; 0
   11c16:	04 2f       	mov	r16, r20
   11c18:	10 e0       	ldi	r17, 0x00	; 0
   11c1a:	30 e0       	ldi	r19, 0x00	; 0
   11c1c:	20 e0       	ldi	r18, 0x00	; 0
   11c1e:	06 17       	cp	r16, r22
   11c20:	17 07       	cpc	r17, r23
   11c22:	28 07       	cpc	r18, r24
   11c24:	39 07       	cpc	r19, r25
   11c26:	18 f4       	brcc	.+6      	; 0x11c2e <delay_hus(unsigned long)+0x1e>
   11c28:	00 00       	nop
   11c2a:	4f 5f       	subi	r20, 0xFF	; 255
   11c2c:	f4 cf       	rjmp	.-24     	; 0x11c16 <delay_hus(unsigned long)+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:17
}
   11c2e:	1f 91       	pop	r17
   11c30:	0f 91       	pop	r16
   11c32:	08 95       	ret

00011c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   11c34:	cf 93       	push	r28
   11c36:	df 93       	push	r29
   11c38:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
   11c3a:	a6 a5       	ldd	r26, Z+46	; 0x2e
   11c3c:	b7 a5       	ldd	r27, Z+47	; 0x2f
   11c3e:	8c 91       	ld	r24, X
   11c40:	92 ad       	ldd	r25, Z+58	; 0x3a
   11c42:	89 23       	and	r24, r25
   11c44:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
   11c46:	a0 a9       	ldd	r26, Z+48	; 0x30
   11c48:	b1 a9       	ldd	r27, Z+49	; 0x31
   11c4a:	8c 91       	ld	r24, X
   11c4c:	93 ad       	ldd	r25, Z+59	; 0x3b
   11c4e:	89 23       	and	r24, r25
   11c50:	8c 93       	st	X, r24
   11c52:	72 b9       	out	0x02, r23	; 2
   11c54:	a2 a9       	ldd	r26, Z+50	; 0x32
   11c56:	b3 a9       	ldd	r27, Z+51	; 0x33
   11c58:	8c 91       	ld	r24, X
   11c5a:	94 ad       	ldd	r25, Z+60	; 0x3c
   11c5c:	89 23       	and	r24, r25
   11c5e:	8c 93       	st	X, r24
   11c60:	a2 a9       	ldd	r26, Z+50	; 0x32
   11c62:	b3 a9       	ldd	r27, Z+51	; 0x33
   11c64:	8c 91       	ld	r24, X
   11c66:	90 ad       	ldd	r25, Z+56	; 0x38
   11c68:	89 2b       	or	r24, r25
   11c6a:	8c 93       	st	X, r24
   11c6c:	62 b9       	out	0x02, r22	; 2
   11c6e:	a2 a9       	ldd	r26, Z+50	; 0x32
   11c70:	b3 a9       	ldd	r27, Z+51	; 0x33
   11c72:	8c 91       	ld	r24, X
   11c74:	94 ad       	ldd	r25, Z+60	; 0x3c
   11c76:	89 23       	and	r24, r25
   11c78:	8c 93       	st	X, r24
   11c7a:	a2 a9       	ldd	r26, Z+50	; 0x32
   11c7c:	b3 a9       	ldd	r27, Z+51	; 0x33
   11c7e:	8c 91       	ld	r24, X
   11c80:	90 ad       	ldd	r25, Z+56	; 0x38
   11c82:	89 2b       	or	r24, r25
   11c84:	8c 93       	st	X, r24
   11c86:	a0 a9       	ldd	r26, Z+48	; 0x30
   11c88:	b1 a9       	ldd	r27, Z+49	; 0x31
   11c8a:	8c 91       	ld	r24, X
   11c8c:	97 a9       	ldd	r25, Z+55	; 0x37
   11c8e:	89 2b       	or	r24, r25
   11c90:	8c 93       	st	X, r24
   11c92:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
   11c94:	9f ef       	ldi	r25, 0xFF	; 255
   11c96:	92 0f       	add	r25, r18
   11c98:	12 16       	cp	r1, r18
   11c9a:	0c f0       	brlt	.+2      	; 0x11c9e <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   11c9c:	3f c0       	rjmp	.+126    	; 0x11d1c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
   11c9e:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
   11ca0:	82 b9       	out	0x02, r24	; 2
   11ca2:	c2 a9       	ldd	r28, Z+50	; 0x32
   11ca4:	d3 a9       	ldd	r29, Z+51	; 0x33
   11ca6:	88 81       	ld	r24, Y
   11ca8:	24 ad       	ldd	r18, Z+60	; 0x3c
   11caa:	82 23       	and	r24, r18
   11cac:	88 83       	st	Y, r24
   11cae:	c2 a9       	ldd	r28, Z+50	; 0x32
   11cb0:	d3 a9       	ldd	r29, Z+51	; 0x33
   11cb2:	88 81       	ld	r24, Y
   11cb4:	20 ad       	ldd	r18, Z+56	; 0x38
   11cb6:	82 2b       	or	r24, r18
   11cb8:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
   11cba:	99 23       	and	r25, r25
   11cbc:	69 f1       	breq	.+90     	; 0x11d18 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   11cbe:	20 8d       	ldd	r18, Z+24	; 0x18
   11cc0:	31 8d       	ldd	r19, Z+25	; 0x19
   11cc2:	21 30       	cpi	r18, 0x01	; 1
   11cc4:	31 05       	cpc	r19, r1
   11cc6:	41 f5       	brne	.+80     	; 0x11d18 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
   11cc8:	6f 5f       	subi	r22, 0xFF	; 255
   11cca:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
   11ccc:	c0 a9       	ldd	r28, Z+48	; 0x30
   11cce:	d1 a9       	ldd	r29, Z+49	; 0x31
   11cd0:	88 81       	ld	r24, Y
   11cd2:	23 ad       	ldd	r18, Z+59	; 0x3b
   11cd4:	82 23       	and	r24, r18
   11cd6:	88 83       	st	Y, r24
   11cd8:	72 b9       	out	0x02, r23	; 2
   11cda:	c2 a9       	ldd	r28, Z+50	; 0x32
   11cdc:	d3 a9       	ldd	r29, Z+51	; 0x33
   11cde:	88 81       	ld	r24, Y
   11ce0:	24 ad       	ldd	r18, Z+60	; 0x3c
   11ce2:	82 23       	and	r24, r18
   11ce4:	88 83       	st	Y, r24
   11ce6:	c2 a9       	ldd	r28, Z+50	; 0x32
   11ce8:	d3 a9       	ldd	r29, Z+51	; 0x33
   11cea:	88 81       	ld	r24, Y
   11cec:	20 ad       	ldd	r18, Z+56	; 0x38
   11cee:	82 2b       	or	r24, r18
   11cf0:	88 83       	st	Y, r24
   11cf2:	62 b9       	out	0x02, r22	; 2
   11cf4:	c2 a9       	ldd	r28, Z+50	; 0x32
   11cf6:	d3 a9       	ldd	r29, Z+51	; 0x33
   11cf8:	88 81       	ld	r24, Y
   11cfa:	24 ad       	ldd	r18, Z+60	; 0x3c
   11cfc:	82 23       	and	r24, r18
   11cfe:	88 83       	st	Y, r24
   11d00:	c2 a9       	ldd	r28, Z+50	; 0x32
   11d02:	d3 a9       	ldd	r29, Z+51	; 0x33
   11d04:	88 81       	ld	r24, Y
   11d06:	20 ad       	ldd	r18, Z+56	; 0x38
   11d08:	82 2b       	or	r24, r18
   11d0a:	88 83       	st	Y, r24
   11d0c:	c0 a9       	ldd	r28, Z+48	; 0x30
   11d0e:	d1 a9       	ldd	r29, Z+49	; 0x31
   11d10:	88 81       	ld	r24, Y
   11d12:	27 a9       	ldd	r18, Z+55	; 0x37
   11d14:	82 2b       	or	r24, r18
   11d16:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   11d18:	29 2f       	mov	r18, r25
   11d1a:	bc cf       	rjmp	.-136    	; 0x11c94 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
   11d1c:	a6 a5       	ldd	r26, Z+46	; 0x2e
   11d1e:	b7 a5       	ldd	r27, Z+47	; 0x2f
   11d20:	8c 91       	ld	r24, X
   11d22:	96 a9       	ldd	r25, Z+54	; 0x36
   11d24:	89 2b       	or	r24, r25
   11d26:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
   11d28:	df 91       	pop	r29
   11d2a:	cf 91       	pop	r28
   11d2c:	08 95       	ret

00011d2e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
   11d2e:	af 92       	push	r10
   11d30:	bf 92       	push	r11
   11d32:	cf 92       	push	r12
   11d34:	df 92       	push	r13
   11d36:	ef 92       	push	r14
   11d38:	ff 92       	push	r15
   11d3a:	0f 93       	push	r16
   11d3c:	1f 93       	push	r17
   11d3e:	cf 93       	push	r28
   11d40:	df 93       	push	r29
   11d42:	00 d0       	rcall	.+0      	; 0x11d44 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   11d44:	00 d0       	rcall	.+0      	; 0x11d46 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   11d46:	1f 92       	push	r1
   11d48:	1f 92       	push	r1
   11d4a:	cd b7       	in	r28, 0x3d	; 61
   11d4c:	de b7       	in	r29, 0x3e	; 62
   11d4e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
   11d50:	dc 01       	movw	r26, r24
   11d52:	9e 96       	adiw	r26, 0x2e	; 46
   11d54:	ed 91       	ld	r30, X+
   11d56:	fc 91       	ld	r31, X
   11d58:	9f 97       	sbiw	r26, 0x2f	; 47
   11d5a:	80 81       	ld	r24, Z
   11d5c:	da 96       	adiw	r26, 0x3a	; 58
   11d5e:	9c 91       	ld	r25, X
   11d60:	da 97       	sbiw	r26, 0x3a	; 58
   11d62:	89 23       	and	r24, r25
   11d64:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
   11d66:	58 96       	adiw	r26, 0x18	; 24
   11d68:	8d 91       	ld	r24, X+
   11d6a:	9c 91       	ld	r25, X
   11d6c:	59 97       	sbiw	r26, 0x19	; 25
   11d6e:	00 97       	sbiw	r24, 0x00	; 0
   11d70:	09 f0       	breq	.+2      	; 0x11d74 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   11d72:	44 c3       	rjmp	.+1672   	; 0x123fc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
   11d74:	56 96       	adiw	r26, 0x16	; 22
   11d76:	8d 91       	ld	r24, X+
   11d78:	9c 91       	ld	r25, X
   11d7a:	57 97       	sbiw	r26, 0x17	; 23
   11d7c:	82 30       	cpi	r24, 0x02	; 2
   11d7e:	91 05       	cpc	r25, r1
   11d80:	09 f4       	brne	.+2      	; 0x11d84 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   11d82:	0b c3       	rjmp	.+1558   	; 0x1239a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   11d84:	83 30       	cpi	r24, 0x03	; 3
   11d86:	91 05       	cpc	r25, r1
   11d88:	09 f4       	brne	.+2      	; 0x11d8c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   11d8a:	23 c3       	rjmp	.+1606   	; 0x123d2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   11d8c:	01 97       	sbiw	r24, 0x01	; 1
   11d8e:	09 f0       	breq	.+2      	; 0x11d92 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   11d90:	32 c3       	rjmp	.+1636   	; 0x123f6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
   11d92:	1e 96       	adiw	r26, 0x0e	; 14
   11d94:	0d 90       	ld	r0, X+
   11d96:	bc 91       	ld	r27, X
   11d98:	a0 2d       	mov	r26, r0
   11d9a:	68 01       	movw	r12, r16
   11d9c:	c0 94       	com	r12
   11d9e:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
   11da0:	40 95       	com	r20
   11da2:	50 95       	com	r21
   11da4:	fa 01       	movw	r30, r20
   11da6:	ea 0f       	add	r30, r26
   11da8:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
   11daa:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
   11dac:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
   11dae:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
   11db0:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
   11db2:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   11db4:	6a 0f       	add	r22, r26
   11db6:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
   11db8:	d7 01       	movw	r26, r14
   11dba:	d0 96       	adiw	r26, 0x30	; 48
   11dbc:	cd 90       	ld	r12, X+
   11dbe:	dc 90       	ld	r13, X
   11dc0:	d6 01       	movw	r26, r12
   11dc2:	bc 90       	ld	r11, X
   11dc4:	d7 01       	movw	r26, r14
   11dc6:	db 96       	adiw	r26, 0x3b	; 59
   11dc8:	ac 90       	ld	r10, X
   11dca:	ba 20       	and	r11, r10
   11dcc:	d6 01       	movw	r26, r12
   11dce:	bc 92       	st	X, r11
   11dd0:	12 b8       	out	0x02, r1	; 2
   11dd2:	d7 01       	movw	r26, r14
   11dd4:	d2 96       	adiw	r26, 0x32	; 50
   11dd6:	cd 90       	ld	r12, X+
   11dd8:	dc 90       	ld	r13, X
   11dda:	d6 01       	movw	r26, r12
   11ddc:	bc 90       	ld	r11, X
   11dde:	d7 01       	movw	r26, r14
   11de0:	dc 96       	adiw	r26, 0x3c	; 60
   11de2:	ac 90       	ld	r10, X
   11de4:	ba 20       	and	r11, r10
   11de6:	d6 01       	movw	r26, r12
   11de8:	bc 92       	st	X, r11
   11dea:	d7 01       	movw	r26, r14
   11dec:	d2 96       	adiw	r26, 0x32	; 50
   11dee:	cd 90       	ld	r12, X+
   11df0:	dc 90       	ld	r13, X
   11df2:	d6 01       	movw	r26, r12
   11df4:	bc 90       	ld	r11, X
   11df6:	d7 01       	movw	r26, r14
   11df8:	d8 96       	adiw	r26, 0x38	; 56
   11dfa:	ac 90       	ld	r10, X
   11dfc:	ba 28       	or	r11, r10
   11dfe:	d6 01       	movw	r26, r12
   11e00:	bc 92       	st	X, r11
   11e02:	a0 e5       	ldi	r26, 0x50	; 80
   11e04:	a2 b9       	out	0x02, r26	; 2
   11e06:	d7 01       	movw	r26, r14
   11e08:	d2 96       	adiw	r26, 0x32	; 50
   11e0a:	cd 90       	ld	r12, X+
   11e0c:	dc 90       	ld	r13, X
   11e0e:	d6 01       	movw	r26, r12
   11e10:	bc 90       	ld	r11, X
   11e12:	d7 01       	movw	r26, r14
   11e14:	dc 96       	adiw	r26, 0x3c	; 60
   11e16:	ac 90       	ld	r10, X
   11e18:	ba 20       	and	r11, r10
   11e1a:	d6 01       	movw	r26, r12
   11e1c:	bc 92       	st	X, r11
   11e1e:	d7 01       	movw	r26, r14
   11e20:	d2 96       	adiw	r26, 0x32	; 50
   11e22:	cd 90       	ld	r12, X+
   11e24:	dc 90       	ld	r13, X
   11e26:	d6 01       	movw	r26, r12
   11e28:	bc 90       	ld	r11, X
   11e2a:	d7 01       	movw	r26, r14
   11e2c:	d8 96       	adiw	r26, 0x38	; 56
   11e2e:	ac 90       	ld	r10, X
   11e30:	ba 28       	or	r11, r10
   11e32:	d6 01       	movw	r26, r12
   11e34:	bc 92       	st	X, r11
   11e36:	d7 01       	movw	r26, r14
   11e38:	d0 96       	adiw	r26, 0x30	; 48
   11e3a:	cd 90       	ld	r12, X+
   11e3c:	dc 90       	ld	r13, X
   11e3e:	d6 01       	movw	r26, r12
   11e40:	bc 90       	ld	r11, X
   11e42:	d7 01       	movw	r26, r14
   11e44:	d7 96       	adiw	r26, 0x37	; 55
   11e46:	ac 90       	ld	r10, X
   11e48:	ba 28       	or	r11, r10
   11e4a:	d6 01       	movw	r26, r12
   11e4c:	bc 92       	st	X, r11
   11e4e:	72 b9       	out	0x02, r23	; 2
   11e50:	d7 01       	movw	r26, r14
   11e52:	d2 96       	adiw	r26, 0x32	; 50
   11e54:	ad 90       	ld	r10, X+
   11e56:	bc 90       	ld	r11, X
   11e58:	d5 01       	movw	r26, r10
   11e5a:	7c 91       	ld	r23, X
   11e5c:	d7 01       	movw	r26, r14
   11e5e:	dc 96       	adiw	r26, 0x3c	; 60
   11e60:	dc 90       	ld	r13, X
   11e62:	7d 21       	and	r23, r13
   11e64:	d5 01       	movw	r26, r10
   11e66:	7c 93       	st	X, r23
   11e68:	d7 01       	movw	r26, r14
   11e6a:	d2 96       	adiw	r26, 0x32	; 50
   11e6c:	ad 90       	ld	r10, X+
   11e6e:	bc 90       	ld	r11, X
   11e70:	d5 01       	movw	r26, r10
   11e72:	7c 91       	ld	r23, X
   11e74:	d7 01       	movw	r26, r14
   11e76:	d8 96       	adiw	r26, 0x38	; 56
   11e78:	dc 90       	ld	r13, X
   11e7a:	7d 29       	or	r23, r13
   11e7c:	d5 01       	movw	r26, r10
   11e7e:	7c 93       	st	X, r23
   11e80:	62 b9       	out	0x02, r22	; 2
   11e82:	d7 01       	movw	r26, r14
   11e84:	d2 96       	adiw	r26, 0x32	; 50
   11e86:	cd 90       	ld	r12, X+
   11e88:	dc 90       	ld	r13, X
   11e8a:	d6 01       	movw	r26, r12
   11e8c:	6c 91       	ld	r22, X
   11e8e:	d7 01       	movw	r26, r14
   11e90:	dc 96       	adiw	r26, 0x3c	; 60
   11e92:	7c 91       	ld	r23, X
   11e94:	67 23       	and	r22, r23
   11e96:	d6 01       	movw	r26, r12
   11e98:	6c 93       	st	X, r22
   11e9a:	d7 01       	movw	r26, r14
   11e9c:	d2 96       	adiw	r26, 0x32	; 50
   11e9e:	cd 90       	ld	r12, X+
   11ea0:	dc 90       	ld	r13, X
   11ea2:	d6 01       	movw	r26, r12
   11ea4:	6c 91       	ld	r22, X
   11ea6:	d7 01       	movw	r26, r14
   11ea8:	d8 96       	adiw	r26, 0x38	; 56
   11eaa:	7c 91       	ld	r23, X
   11eac:	67 2b       	or	r22, r23
   11eae:	d6 01       	movw	r26, r12
   11eb0:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
   11eb2:	d7 01       	movw	r26, r14
   11eb4:	d0 96       	adiw	r26, 0x30	; 48
   11eb6:	cd 90       	ld	r12, X+
   11eb8:	dc 90       	ld	r13, X
   11eba:	d6 01       	movw	r26, r12
   11ebc:	6c 91       	ld	r22, X
   11ebe:	d7 01       	movw	r26, r14
   11ec0:	db 96       	adiw	r26, 0x3b	; 59
   11ec2:	7c 91       	ld	r23, X
   11ec4:	67 23       	and	r22, r23
   11ec6:	d6 01       	movw	r26, r12
   11ec8:	6c 93       	st	X, r22
   11eca:	12 b8       	out	0x02, r1	; 2
   11ecc:	d7 01       	movw	r26, r14
   11ece:	d2 96       	adiw	r26, 0x32	; 50
   11ed0:	cd 90       	ld	r12, X+
   11ed2:	dc 90       	ld	r13, X
   11ed4:	d6 01       	movw	r26, r12
   11ed6:	6c 91       	ld	r22, X
   11ed8:	d7 01       	movw	r26, r14
   11eda:	dc 96       	adiw	r26, 0x3c	; 60
   11edc:	7c 91       	ld	r23, X
   11ede:	67 23       	and	r22, r23
   11ee0:	d6 01       	movw	r26, r12
   11ee2:	6c 93       	st	X, r22
   11ee4:	d7 01       	movw	r26, r14
   11ee6:	d2 96       	adiw	r26, 0x32	; 50
   11ee8:	cd 90       	ld	r12, X+
   11eea:	dc 90       	ld	r13, X
   11eec:	d6 01       	movw	r26, r12
   11eee:	6c 91       	ld	r22, X
   11ef0:	d7 01       	movw	r26, r14
   11ef2:	d8 96       	adiw	r26, 0x38	; 56
   11ef4:	7c 91       	ld	r23, X
   11ef6:	67 2b       	or	r22, r23
   11ef8:	d6 01       	movw	r26, r12
   11efa:	6c 93       	st	X, r22
   11efc:	61 e5       	ldi	r22, 0x51	; 81
   11efe:	62 b9       	out	0x02, r22	; 2
   11f00:	d7 01       	movw	r26, r14
   11f02:	d2 96       	adiw	r26, 0x32	; 50
   11f04:	cd 90       	ld	r12, X+
   11f06:	dc 90       	ld	r13, X
   11f08:	d6 01       	movw	r26, r12
   11f0a:	6c 91       	ld	r22, X
   11f0c:	d7 01       	movw	r26, r14
   11f0e:	dc 96       	adiw	r26, 0x3c	; 60
   11f10:	7c 91       	ld	r23, X
   11f12:	67 23       	and	r22, r23
   11f14:	d6 01       	movw	r26, r12
   11f16:	6c 93       	st	X, r22
   11f18:	d7 01       	movw	r26, r14
   11f1a:	d2 96       	adiw	r26, 0x32	; 50
   11f1c:	cd 90       	ld	r12, X+
   11f1e:	dc 90       	ld	r13, X
   11f20:	d6 01       	movw	r26, r12
   11f22:	6c 91       	ld	r22, X
   11f24:	d7 01       	movw	r26, r14
   11f26:	d8 96       	adiw	r26, 0x38	; 56
   11f28:	7c 91       	ld	r23, X
   11f2a:	67 2b       	or	r22, r23
   11f2c:	d6 01       	movw	r26, r12
   11f2e:	6c 93       	st	X, r22
   11f30:	d7 01       	movw	r26, r14
   11f32:	d0 96       	adiw	r26, 0x30	; 48
   11f34:	cd 90       	ld	r12, X+
   11f36:	dc 90       	ld	r13, X
   11f38:	d6 01       	movw	r26, r12
   11f3a:	6c 91       	ld	r22, X
   11f3c:	d7 01       	movw	r26, r14
   11f3e:	d7 96       	adiw	r26, 0x37	; 55
   11f40:	7c 91       	ld	r23, X
   11f42:	67 2b       	or	r22, r23
   11f44:	d6 01       	movw	r26, r12
   11f46:	6c 93       	st	X, r22
   11f48:	32 b9       	out	0x02, r19	; 2
   11f4a:	d7 01       	movw	r26, r14
   11f4c:	d2 96       	adiw	r26, 0x32	; 50
   11f4e:	cd 90       	ld	r12, X+
   11f50:	dc 90       	ld	r13, X
   11f52:	d6 01       	movw	r26, r12
   11f54:	3c 91       	ld	r19, X
   11f56:	d7 01       	movw	r26, r14
   11f58:	dc 96       	adiw	r26, 0x3c	; 60
   11f5a:	6c 91       	ld	r22, X
   11f5c:	36 23       	and	r19, r22
   11f5e:	d6 01       	movw	r26, r12
   11f60:	3c 93       	st	X, r19
   11f62:	d7 01       	movw	r26, r14
   11f64:	d2 96       	adiw	r26, 0x32	; 50
   11f66:	cd 90       	ld	r12, X+
   11f68:	dc 90       	ld	r13, X
   11f6a:	d6 01       	movw	r26, r12
   11f6c:	3c 91       	ld	r19, X
   11f6e:	d7 01       	movw	r26, r14
   11f70:	d8 96       	adiw	r26, 0x38	; 56
   11f72:	6c 91       	ld	r22, X
   11f74:	36 2b       	or	r19, r22
   11f76:	d6 01       	movw	r26, r12
   11f78:	3c 93       	st	X, r19
   11f7a:	22 b9       	out	0x02, r18	; 2
   11f7c:	d7 01       	movw	r26, r14
   11f7e:	d2 96       	adiw	r26, 0x32	; 50
   11f80:	6d 91       	ld	r22, X+
   11f82:	7c 91       	ld	r23, X
   11f84:	db 01       	movw	r26, r22
   11f86:	2c 91       	ld	r18, X
   11f88:	d7 01       	movw	r26, r14
   11f8a:	dc 96       	adiw	r26, 0x3c	; 60
   11f8c:	3c 91       	ld	r19, X
   11f8e:	23 23       	and	r18, r19
   11f90:	db 01       	movw	r26, r22
   11f92:	2c 93       	st	X, r18
   11f94:	d7 01       	movw	r26, r14
   11f96:	d2 96       	adiw	r26, 0x32	; 50
   11f98:	6d 91       	ld	r22, X+
   11f9a:	7c 91       	ld	r23, X
   11f9c:	db 01       	movw	r26, r22
   11f9e:	2c 91       	ld	r18, X
   11fa0:	d7 01       	movw	r26, r14
   11fa2:	d8 96       	adiw	r26, 0x38	; 56
   11fa4:	3c 91       	ld	r19, X
   11fa6:	23 2b       	or	r18, r19
   11fa8:	db 01       	movw	r26, r22
   11faa:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
   11fac:	d7 01       	movw	r26, r14
   11fae:	d0 96       	adiw	r26, 0x30	; 48
   11fb0:	6d 91       	ld	r22, X+
   11fb2:	7c 91       	ld	r23, X
   11fb4:	db 01       	movw	r26, r22
   11fb6:	2c 91       	ld	r18, X
   11fb8:	d7 01       	movw	r26, r14
   11fba:	db 96       	adiw	r26, 0x3b	; 59
   11fbc:	3c 91       	ld	r19, X
   11fbe:	23 23       	and	r18, r19
   11fc0:	db 01       	movw	r26, r22
   11fc2:	2c 93       	st	X, r18
   11fc4:	12 b8       	out	0x02, r1	; 2
   11fc6:	d7 01       	movw	r26, r14
   11fc8:	d2 96       	adiw	r26, 0x32	; 50
   11fca:	6d 91       	ld	r22, X+
   11fcc:	7c 91       	ld	r23, X
   11fce:	db 01       	movw	r26, r22
   11fd0:	2c 91       	ld	r18, X
   11fd2:	d7 01       	movw	r26, r14
   11fd4:	dc 96       	adiw	r26, 0x3c	; 60
   11fd6:	3c 91       	ld	r19, X
   11fd8:	23 23       	and	r18, r19
   11fda:	db 01       	movw	r26, r22
   11fdc:	2c 93       	st	X, r18
   11fde:	d7 01       	movw	r26, r14
   11fe0:	d2 96       	adiw	r26, 0x32	; 50
   11fe2:	6d 91       	ld	r22, X+
   11fe4:	7c 91       	ld	r23, X
   11fe6:	db 01       	movw	r26, r22
   11fe8:	2c 91       	ld	r18, X
   11fea:	d7 01       	movw	r26, r14
   11fec:	d8 96       	adiw	r26, 0x38	; 56
   11fee:	3c 91       	ld	r19, X
   11ff0:	23 2b       	or	r18, r19
   11ff2:	db 01       	movw	r26, r22
   11ff4:	2c 93       	st	X, r18
   11ff6:	22 e5       	ldi	r18, 0x52	; 82
   11ff8:	22 b9       	out	0x02, r18	; 2
   11ffa:	d7 01       	movw	r26, r14
   11ffc:	d2 96       	adiw	r26, 0x32	; 50
   11ffe:	6d 91       	ld	r22, X+
   12000:	7c 91       	ld	r23, X
   12002:	db 01       	movw	r26, r22
   12004:	2c 91       	ld	r18, X
   12006:	d7 01       	movw	r26, r14
   12008:	dc 96       	adiw	r26, 0x3c	; 60
   1200a:	3c 91       	ld	r19, X
   1200c:	23 23       	and	r18, r19
   1200e:	db 01       	movw	r26, r22
   12010:	2c 93       	st	X, r18
   12012:	d7 01       	movw	r26, r14
   12014:	d2 96       	adiw	r26, 0x32	; 50
   12016:	6d 91       	ld	r22, X+
   12018:	7c 91       	ld	r23, X
   1201a:	db 01       	movw	r26, r22
   1201c:	2c 91       	ld	r18, X
   1201e:	d7 01       	movw	r26, r14
   12020:	d8 96       	adiw	r26, 0x38	; 56
   12022:	3c 91       	ld	r19, X
   12024:	23 2b       	or	r18, r19
   12026:	db 01       	movw	r26, r22
   12028:	2c 93       	st	X, r18
   1202a:	d7 01       	movw	r26, r14
   1202c:	d0 96       	adiw	r26, 0x30	; 48
   1202e:	6d 91       	ld	r22, X+
   12030:	7c 91       	ld	r23, X
   12032:	db 01       	movw	r26, r22
   12034:	2c 91       	ld	r18, X
   12036:	d7 01       	movw	r26, r14
   12038:	d7 96       	adiw	r26, 0x37	; 55
   1203a:	3c 91       	ld	r19, X
   1203c:	23 2b       	or	r18, r19
   1203e:	db 01       	movw	r26, r22
   12040:	2c 93       	st	X, r18
   12042:	52 b9       	out	0x02, r21	; 2
   12044:	d7 01       	movw	r26, r14
   12046:	d2 96       	adiw	r26, 0x32	; 50
   12048:	6d 91       	ld	r22, X+
   1204a:	7c 91       	ld	r23, X
   1204c:	db 01       	movw	r26, r22
   1204e:	2c 91       	ld	r18, X
   12050:	d7 01       	movw	r26, r14
   12052:	dc 96       	adiw	r26, 0x3c	; 60
   12054:	3c 91       	ld	r19, X
   12056:	23 23       	and	r18, r19
   12058:	db 01       	movw	r26, r22
   1205a:	2c 93       	st	X, r18
   1205c:	d7 01       	movw	r26, r14
   1205e:	d2 96       	adiw	r26, 0x32	; 50
   12060:	6d 91       	ld	r22, X+
   12062:	7c 91       	ld	r23, X
   12064:	db 01       	movw	r26, r22
   12066:	2c 91       	ld	r18, X
   12068:	d7 01       	movw	r26, r14
   1206a:	d8 96       	adiw	r26, 0x38	; 56
   1206c:	3c 91       	ld	r19, X
   1206e:	23 2b       	or	r18, r19
   12070:	db 01       	movw	r26, r22
   12072:	2c 93       	st	X, r18
   12074:	42 b9       	out	0x02, r20	; 2
   12076:	d7 01       	movw	r26, r14
   12078:	d2 96       	adiw	r26, 0x32	; 50
   1207a:	4d 91       	ld	r20, X+
   1207c:	5c 91       	ld	r21, X
   1207e:	da 01       	movw	r26, r20
   12080:	2c 91       	ld	r18, X
   12082:	d7 01       	movw	r26, r14
   12084:	dc 96       	adiw	r26, 0x3c	; 60
   12086:	3c 91       	ld	r19, X
   12088:	23 23       	and	r18, r19
   1208a:	da 01       	movw	r26, r20
   1208c:	2c 93       	st	X, r18
   1208e:	d7 01       	movw	r26, r14
   12090:	d2 96       	adiw	r26, 0x32	; 50
   12092:	4d 91       	ld	r20, X+
   12094:	5c 91       	ld	r21, X
   12096:	da 01       	movw	r26, r20
   12098:	2c 91       	ld	r18, X
   1209a:	d7 01       	movw	r26, r14
   1209c:	d8 96       	adiw	r26, 0x38	; 56
   1209e:	3c 91       	ld	r19, X
   120a0:	23 2b       	or	r18, r19
   120a2:	da 01       	movw	r26, r20
   120a4:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
   120a6:	d7 01       	movw	r26, r14
   120a8:	d0 96       	adiw	r26, 0x30	; 48
   120aa:	4d 91       	ld	r20, X+
   120ac:	5c 91       	ld	r21, X
   120ae:	da 01       	movw	r26, r20
   120b0:	2c 91       	ld	r18, X
   120b2:	d7 01       	movw	r26, r14
   120b4:	db 96       	adiw	r26, 0x3b	; 59
   120b6:	3c 91       	ld	r19, X
   120b8:	23 23       	and	r18, r19
   120ba:	da 01       	movw	r26, r20
   120bc:	2c 93       	st	X, r18
   120be:	12 b8       	out	0x02, r1	; 2
   120c0:	d7 01       	movw	r26, r14
   120c2:	d2 96       	adiw	r26, 0x32	; 50
   120c4:	4d 91       	ld	r20, X+
   120c6:	5c 91       	ld	r21, X
   120c8:	da 01       	movw	r26, r20
   120ca:	2c 91       	ld	r18, X
   120cc:	d7 01       	movw	r26, r14
   120ce:	dc 96       	adiw	r26, 0x3c	; 60
   120d0:	3c 91       	ld	r19, X
   120d2:	23 23       	and	r18, r19
   120d4:	da 01       	movw	r26, r20
   120d6:	2c 93       	st	X, r18
   120d8:	d7 01       	movw	r26, r14
   120da:	d2 96       	adiw	r26, 0x32	; 50
   120dc:	4d 91       	ld	r20, X+
   120de:	5c 91       	ld	r21, X
   120e0:	da 01       	movw	r26, r20
   120e2:	2c 91       	ld	r18, X
   120e4:	d7 01       	movw	r26, r14
   120e6:	d8 96       	adiw	r26, 0x38	; 56
   120e8:	3c 91       	ld	r19, X
   120ea:	23 2b       	or	r18, r19
   120ec:	da 01       	movw	r26, r20
   120ee:	2c 93       	st	X, r18
   120f0:	23 e5       	ldi	r18, 0x53	; 83
   120f2:	22 b9       	out	0x02, r18	; 2
   120f4:	d7 01       	movw	r26, r14
   120f6:	d2 96       	adiw	r26, 0x32	; 50
   120f8:	4d 91       	ld	r20, X+
   120fa:	5c 91       	ld	r21, X
   120fc:	da 01       	movw	r26, r20
   120fe:	2c 91       	ld	r18, X
   12100:	d7 01       	movw	r26, r14
   12102:	dc 96       	adiw	r26, 0x3c	; 60
   12104:	3c 91       	ld	r19, X
   12106:	23 23       	and	r18, r19
   12108:	da 01       	movw	r26, r20
   1210a:	2c 93       	st	X, r18
   1210c:	d7 01       	movw	r26, r14
   1210e:	d2 96       	adiw	r26, 0x32	; 50
   12110:	4d 91       	ld	r20, X+
   12112:	5c 91       	ld	r21, X
   12114:	da 01       	movw	r26, r20
   12116:	2c 91       	ld	r18, X
   12118:	d7 01       	movw	r26, r14
   1211a:	d8 96       	adiw	r26, 0x38	; 56
   1211c:	3c 91       	ld	r19, X
   1211e:	23 2b       	or	r18, r19
   12120:	da 01       	movw	r26, r20
   12122:	2c 93       	st	X, r18
   12124:	d7 01       	movw	r26, r14
   12126:	d0 96       	adiw	r26, 0x30	; 48
   12128:	4d 91       	ld	r20, X+
   1212a:	5c 91       	ld	r21, X
   1212c:	da 01       	movw	r26, r20
   1212e:	2c 91       	ld	r18, X
   12130:	d7 01       	movw	r26, r14
   12132:	d7 96       	adiw	r26, 0x37	; 55
   12134:	3c 91       	ld	r19, X
   12136:	23 2b       	or	r18, r19
   12138:	da 01       	movw	r26, r20
   1213a:	2c 93       	st	X, r18
   1213c:	12 b9       	out	0x02, r17	; 2
   1213e:	d7 01       	movw	r26, r14
   12140:	d2 96       	adiw	r26, 0x32	; 50
   12142:	4d 91       	ld	r20, X+
   12144:	5c 91       	ld	r21, X
   12146:	da 01       	movw	r26, r20
   12148:	2c 91       	ld	r18, X
   1214a:	d7 01       	movw	r26, r14
   1214c:	dc 96       	adiw	r26, 0x3c	; 60
   1214e:	3c 91       	ld	r19, X
   12150:	23 23       	and	r18, r19
   12152:	da 01       	movw	r26, r20
   12154:	2c 93       	st	X, r18
   12156:	d7 01       	movw	r26, r14
   12158:	d2 96       	adiw	r26, 0x32	; 50
   1215a:	4d 91       	ld	r20, X+
   1215c:	5c 91       	ld	r21, X
   1215e:	da 01       	movw	r26, r20
   12160:	2c 91       	ld	r18, X
   12162:	d7 01       	movw	r26, r14
   12164:	d8 96       	adiw	r26, 0x38	; 56
   12166:	3c 91       	ld	r19, X
   12168:	23 2b       	or	r18, r19
   1216a:	da 01       	movw	r26, r20
   1216c:	2c 93       	st	X, r18
   1216e:	02 b9       	out	0x02, r16	; 2
   12170:	d7 01       	movw	r26, r14
   12172:	d2 96       	adiw	r26, 0x32	; 50
   12174:	4d 91       	ld	r20, X+
   12176:	5c 91       	ld	r21, X
   12178:	da 01       	movw	r26, r20
   1217a:	2c 91       	ld	r18, X
   1217c:	d7 01       	movw	r26, r14
   1217e:	dc 96       	adiw	r26, 0x3c	; 60
   12180:	3c 91       	ld	r19, X
   12182:	23 23       	and	r18, r19
   12184:	da 01       	movw	r26, r20
   12186:	2c 93       	st	X, r18
   12188:	d7 01       	movw	r26, r14
   1218a:	d2 96       	adiw	r26, 0x32	; 50
   1218c:	4d 91       	ld	r20, X+
   1218e:	5c 91       	ld	r21, X
   12190:	da 01       	movw	r26, r20
   12192:	2c 91       	ld	r18, X
   12194:	d7 01       	movw	r26, r14
   12196:	d8 96       	adiw	r26, 0x38	; 56
   12198:	3c 91       	ld	r19, X
   1219a:	23 2b       	or	r18, r19
   1219c:	da 01       	movw	r26, r20
   1219e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
   121a0:	d7 01       	movw	r26, r14
   121a2:	d0 96       	adiw	r26, 0x30	; 48
   121a4:	4d 91       	ld	r20, X+
   121a6:	5c 91       	ld	r21, X
   121a8:	da 01       	movw	r26, r20
   121aa:	2c 91       	ld	r18, X
   121ac:	d7 01       	movw	r26, r14
   121ae:	db 96       	adiw	r26, 0x3b	; 59
   121b0:	3c 91       	ld	r19, X
   121b2:	23 23       	and	r18, r19
   121b4:	da 01       	movw	r26, r20
   121b6:	2c 93       	st	X, r18
   121b8:	12 b8       	out	0x02, r1	; 2
   121ba:	d7 01       	movw	r26, r14
   121bc:	d2 96       	adiw	r26, 0x32	; 50
   121be:	4d 91       	ld	r20, X+
   121c0:	5c 91       	ld	r21, X
   121c2:	da 01       	movw	r26, r20
   121c4:	2c 91       	ld	r18, X
   121c6:	d7 01       	movw	r26, r14
   121c8:	dc 96       	adiw	r26, 0x3c	; 60
   121ca:	3c 91       	ld	r19, X
   121cc:	23 23       	and	r18, r19
   121ce:	da 01       	movw	r26, r20
   121d0:	2c 93       	st	X, r18
   121d2:	d7 01       	movw	r26, r14
   121d4:	d2 96       	adiw	r26, 0x32	; 50
   121d6:	4d 91       	ld	r20, X+
   121d8:	5c 91       	ld	r21, X
   121da:	da 01       	movw	r26, r20
   121dc:	2c 91       	ld	r18, X
   121de:	d7 01       	movw	r26, r14
   121e0:	d8 96       	adiw	r26, 0x38	; 56
   121e2:	3c 91       	ld	r19, X
   121e4:	23 2b       	or	r18, r19
   121e6:	da 01       	movw	r26, r20
   121e8:	2c 93       	st	X, r18
   121ea:	20 e2       	ldi	r18, 0x20	; 32
   121ec:	22 b9       	out	0x02, r18	; 2
   121ee:	d7 01       	movw	r26, r14
   121f0:	d2 96       	adiw	r26, 0x32	; 50
   121f2:	4d 91       	ld	r20, X+
   121f4:	5c 91       	ld	r21, X
   121f6:	da 01       	movw	r26, r20
   121f8:	2c 91       	ld	r18, X
   121fa:	d7 01       	movw	r26, r14
   121fc:	dc 96       	adiw	r26, 0x3c	; 60
   121fe:	3c 91       	ld	r19, X
   12200:	23 23       	and	r18, r19
   12202:	da 01       	movw	r26, r20
   12204:	2c 93       	st	X, r18
   12206:	d7 01       	movw	r26, r14
   12208:	d2 96       	adiw	r26, 0x32	; 50
   1220a:	4d 91       	ld	r20, X+
   1220c:	5c 91       	ld	r21, X
   1220e:	da 01       	movw	r26, r20
   12210:	2c 91       	ld	r18, X
   12212:	d7 01       	movw	r26, r14
   12214:	d8 96       	adiw	r26, 0x38	; 56
   12216:	3c 91       	ld	r19, X
   12218:	23 2b       	or	r18, r19
   1221a:	da 01       	movw	r26, r20
   1221c:	2c 93       	st	X, r18
   1221e:	d7 01       	movw	r26, r14
   12220:	d0 96       	adiw	r26, 0x30	; 48
   12222:	4d 91       	ld	r20, X+
   12224:	5c 91       	ld	r21, X
   12226:	da 01       	movw	r26, r20
   12228:	2c 91       	ld	r18, X
   1222a:	d7 01       	movw	r26, r14
   1222c:	d7 96       	adiw	r26, 0x37	; 55
   1222e:	3c 91       	ld	r19, X
   12230:	23 2b       	or	r18, r19
   12232:	da 01       	movw	r26, r20
   12234:	2c 93       	st	X, r18
   12236:	f2 b9       	out	0x02, r31	; 2
   12238:	d7 01       	movw	r26, r14
   1223a:	d2 96       	adiw	r26, 0x32	; 50
   1223c:	4d 91       	ld	r20, X+
   1223e:	5c 91       	ld	r21, X
   12240:	da 01       	movw	r26, r20
   12242:	2c 91       	ld	r18, X
   12244:	d7 01       	movw	r26, r14
   12246:	dc 96       	adiw	r26, 0x3c	; 60
   12248:	3c 91       	ld	r19, X
   1224a:	23 23       	and	r18, r19
   1224c:	da 01       	movw	r26, r20
   1224e:	2c 93       	st	X, r18
   12250:	d7 01       	movw	r26, r14
   12252:	d2 96       	adiw	r26, 0x32	; 50
   12254:	4d 91       	ld	r20, X+
   12256:	5c 91       	ld	r21, X
   12258:	da 01       	movw	r26, r20
   1225a:	2c 91       	ld	r18, X
   1225c:	d7 01       	movw	r26, r14
   1225e:	d8 96       	adiw	r26, 0x38	; 56
   12260:	3c 91       	ld	r19, X
   12262:	23 2b       	or	r18, r19
   12264:	da 01       	movw	r26, r20
   12266:	2c 93       	st	X, r18
   12268:	e2 b9       	out	0x02, r30	; 2
   1226a:	d7 01       	movw	r26, r14
   1226c:	d2 96       	adiw	r26, 0x32	; 50
   1226e:	ed 91       	ld	r30, X+
   12270:	fc 91       	ld	r31, X
   12272:	d3 97       	sbiw	r26, 0x33	; 51
   12274:	20 81       	ld	r18, Z
   12276:	dc 96       	adiw	r26, 0x3c	; 60
   12278:	3c 91       	ld	r19, X
   1227a:	dc 97       	sbiw	r26, 0x3c	; 60
   1227c:	23 23       	and	r18, r19
   1227e:	20 83       	st	Z, r18
   12280:	d2 96       	adiw	r26, 0x32	; 50
   12282:	ed 91       	ld	r30, X+
   12284:	fc 91       	ld	r31, X
   12286:	d3 97       	sbiw	r26, 0x33	; 51
   12288:	20 81       	ld	r18, Z
   1228a:	d8 96       	adiw	r26, 0x38	; 56
   1228c:	3c 91       	ld	r19, X
   1228e:	d8 97       	sbiw	r26, 0x38	; 56
   12290:	23 2b       	or	r18, r19
   12292:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
   12294:	d0 96       	adiw	r26, 0x30	; 48
   12296:	ed 91       	ld	r30, X+
   12298:	fc 91       	ld	r31, X
   1229a:	d1 97       	sbiw	r26, 0x31	; 49
   1229c:	20 81       	ld	r18, Z
   1229e:	db 96       	adiw	r26, 0x3b	; 59
   122a0:	3c 91       	ld	r19, X
   122a2:	db 97       	sbiw	r26, 0x3b	; 59
   122a4:	23 23       	and	r18, r19
   122a6:	20 83       	st	Z, r18
   122a8:	12 b8       	out	0x02, r1	; 2
   122aa:	d2 96       	adiw	r26, 0x32	; 50
   122ac:	ed 91       	ld	r30, X+
   122ae:	fc 91       	ld	r31, X
   122b0:	d3 97       	sbiw	r26, 0x33	; 51
   122b2:	20 81       	ld	r18, Z
   122b4:	dc 96       	adiw	r26, 0x3c	; 60
   122b6:	3c 91       	ld	r19, X
   122b8:	dc 97       	sbiw	r26, 0x3c	; 60
   122ba:	23 23       	and	r18, r19
   122bc:	20 83       	st	Z, r18
   122be:	d2 96       	adiw	r26, 0x32	; 50
   122c0:	ed 91       	ld	r30, X+
   122c2:	fc 91       	ld	r31, X
   122c4:	d3 97       	sbiw	r26, 0x33	; 51
   122c6:	20 81       	ld	r18, Z
   122c8:	d8 96       	adiw	r26, 0x38	; 56
   122ca:	3c 91       	ld	r19, X
   122cc:	d8 97       	sbiw	r26, 0x38	; 56
   122ce:	23 2b       	or	r18, r19
   122d0:	20 83       	st	Z, r18
   122d2:	21 e2       	ldi	r18, 0x21	; 33
   122d4:	22 b9       	out	0x02, r18	; 2
   122d6:	d2 96       	adiw	r26, 0x32	; 50
   122d8:	ed 91       	ld	r30, X+
   122da:	fc 91       	ld	r31, X
   122dc:	d3 97       	sbiw	r26, 0x33	; 51
   122de:	20 81       	ld	r18, Z
   122e0:	dc 96       	adiw	r26, 0x3c	; 60
   122e2:	3c 91       	ld	r19, X
   122e4:	dc 97       	sbiw	r26, 0x3c	; 60
   122e6:	23 23       	and	r18, r19
   122e8:	20 83       	st	Z, r18
   122ea:	d2 96       	adiw	r26, 0x32	; 50
   122ec:	ed 91       	ld	r30, X+
   122ee:	fc 91       	ld	r31, X
   122f0:	d3 97       	sbiw	r26, 0x33	; 51
   122f2:	20 81       	ld	r18, Z
   122f4:	d8 96       	adiw	r26, 0x38	; 56
   122f6:	3c 91       	ld	r19, X
   122f8:	d8 97       	sbiw	r26, 0x38	; 56
   122fa:	23 2b       	or	r18, r19
   122fc:	20 83       	st	Z, r18
   122fe:	d0 96       	adiw	r26, 0x30	; 48
   12300:	ed 91       	ld	r30, X+
   12302:	fc 91       	ld	r31, X
   12304:	d1 97       	sbiw	r26, 0x31	; 49
   12306:	20 81       	ld	r18, Z
   12308:	d7 96       	adiw	r26, 0x37	; 55
   1230a:	3c 91       	ld	r19, X
   1230c:	d7 97       	sbiw	r26, 0x37	; 55
   1230e:	23 2b       	or	r18, r19
   12310:	20 83       	st	Z, r18
   12312:	92 b9       	out	0x02, r25	; 2
   12314:	d2 96       	adiw	r26, 0x32	; 50
   12316:	ed 91       	ld	r30, X+
   12318:	fc 91       	ld	r31, X
   1231a:	d3 97       	sbiw	r26, 0x33	; 51
   1231c:	90 81       	ld	r25, Z
   1231e:	dc 96       	adiw	r26, 0x3c	; 60
   12320:	2c 91       	ld	r18, X
   12322:	dc 97       	sbiw	r26, 0x3c	; 60
   12324:	92 23       	and	r25, r18
   12326:	90 83       	st	Z, r25
   12328:	d2 96       	adiw	r26, 0x32	; 50
   1232a:	ed 91       	ld	r30, X+
   1232c:	fc 91       	ld	r31, X
   1232e:	d3 97       	sbiw	r26, 0x33	; 51
   12330:	90 81       	ld	r25, Z
   12332:	d8 96       	adiw	r26, 0x38	; 56
   12334:	2c 91       	ld	r18, X
   12336:	d8 97       	sbiw	r26, 0x38	; 56
   12338:	92 2b       	or	r25, r18
   1233a:	90 83       	st	Z, r25
   1233c:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   1233e:	d2 96       	adiw	r26, 0x32	; 50
   12340:	ed 91       	ld	r30, X+
   12342:	fc 91       	ld	r31, X
   12344:	d3 97       	sbiw	r26, 0x33	; 51
   12346:	80 81       	ld	r24, Z
   12348:	dc 96       	adiw	r26, 0x3c	; 60
   1234a:	9c 91       	ld	r25, X
   1234c:	dc 97       	sbiw	r26, 0x3c	; 60
   1234e:	89 23       	and	r24, r25
   12350:	80 83       	st	Z, r24
   12352:	d2 96       	adiw	r26, 0x32	; 50
   12354:	ed 91       	ld	r30, X+
   12356:	fc 91       	ld	r31, X
   12358:	d3 97       	sbiw	r26, 0x33	; 51
   1235a:	80 81       	ld	r24, Z
   1235c:	d8 96       	adiw	r26, 0x38	; 56
   1235e:	9c 91       	ld	r25, X
   12360:	89 2b       	or	r24, r25
   12362:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
   12364:	d7 01       	movw	r26, r14
   12366:	9e 96       	adiw	r26, 0x2e	; 46
   12368:	ed 91       	ld	r30, X+
   1236a:	fc 91       	ld	r31, X
   1236c:	9f 97       	sbiw	r26, 0x2f	; 47
   1236e:	80 81       	ld	r24, Z
   12370:	d6 96       	adiw	r26, 0x36	; 54
   12372:	9c 91       	ld	r25, X
   12374:	89 2b       	or	r24, r25
   12376:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
   12378:	28 96       	adiw	r28, 0x08	; 8
   1237a:	0f b6       	in	r0, 0x3f	; 63
   1237c:	f8 94       	cli
   1237e:	de bf       	out	0x3e, r29	; 62
   12380:	0f be       	out	0x3f, r0	; 63
   12382:	cd bf       	out	0x3d, r28	; 61
   12384:	df 91       	pop	r29
   12386:	cf 91       	pop	r28
   12388:	1f 91       	pop	r17
   1238a:	0f 91       	pop	r16
   1238c:	ff 90       	pop	r15
   1238e:	ef 90       	pop	r14
   12390:	df 90       	pop	r13
   12392:	cf 90       	pop	r12
   12394:	bf 90       	pop	r11
   12396:	af 90       	pop	r10
   12398:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   1239a:	f7 01       	movw	r30, r14
   1239c:	a6 85       	ldd	r26, Z+14	; 0x0e
   1239e:	b7 85       	ldd	r27, Z+15	; 0x0f
   123a0:	59 01       	movw	r10, r18
   123a2:	a0 94       	com	r10
   123a4:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
   123a6:	9d 01       	movw	r18, r26
   123a8:	26 1b       	sub	r18, r22
   123aa:	37 0b       	sbc	r19, r23
   123ac:	21 50       	subi	r18, 0x01	; 1
   123ae:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   123b0:	60 89       	ldd	r22, Z+16	; 0x10
   123b2:	71 89       	ldd	r23, Z+17	; 0x11
   123b4:	68 01       	movw	r12, r16
   123b6:	c0 94       	com	r12
   123b8:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
   123ba:	8a 01       	movw	r16, r20
   123bc:	00 95       	com	r16
   123be:	10 95       	com	r17
   123c0:	06 0f       	add	r16, r22
   123c2:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
   123c4:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
   123c6:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   123c8:	a6 01       	movw	r20, r12
   123ca:	46 0f       	add	r20, r22
   123cc:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   123ce:	b5 01       	movw	r22, r10
   123d0:	f1 cc       	rjmp	.-1566   	; 0x11db4 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
   123d2:	f7 01       	movw	r30, r14
   123d4:	a0 89       	ldd	r26, Z+16	; 0x10
   123d6:	b1 89       	ldd	r27, Z+17	; 0x11
   123d8:	69 01       	movw	r12, r18
   123da:	c0 94       	com	r12
   123dc:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
   123de:	cd 01       	movw	r24, r26
   123e0:	86 1b       	sub	r24, r22
   123e2:	97 0b       	sbc	r25, r23
   123e4:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
   123e6:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
   123e8:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
   123ea:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
   123ec:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
   123ee:	a6 01       	movw	r20, r12
   123f0:	4a 0f       	add	r20, r26
   123f2:	5b 1f       	adc	r21, r27
   123f4:	e1 cc       	rjmp	.-1598   	; 0x11db8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
   123f6:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
   123f8:	fb 01       	movw	r30, r22
   123fa:	de cc       	rjmp	.-1604   	; 0x11db8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
   123fc:	01 97       	sbiw	r24, 0x01	; 1
   123fe:	09 f0       	breq	.+2      	; 0x12402 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   12400:	e5 c1       	rjmp	.+970    	; 0x127cc <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
   12402:	d0 96       	adiw	r26, 0x30	; 48
   12404:	ed 91       	ld	r30, X+
   12406:	fc 91       	ld	r31, X
   12408:	d1 97       	sbiw	r26, 0x31	; 49
   1240a:	80 81       	ld	r24, Z
   1240c:	db 96       	adiw	r26, 0x3b	; 59
   1240e:	9c 91       	ld	r25, X
   12410:	db 97       	sbiw	r26, 0x3b	; 59
   12412:	89 23       	and	r24, r25
   12414:	80 83       	st	Z, r24
   12416:	82 e0       	ldi	r24, 0x02	; 2
   12418:	82 b9       	out	0x02, r24	; 2
   1241a:	d2 96       	adiw	r26, 0x32	; 50
   1241c:	ed 91       	ld	r30, X+
   1241e:	fc 91       	ld	r31, X
   12420:	d3 97       	sbiw	r26, 0x33	; 51
   12422:	80 81       	ld	r24, Z
   12424:	dc 96       	adiw	r26, 0x3c	; 60
   12426:	9c 91       	ld	r25, X
   12428:	dc 97       	sbiw	r26, 0x3c	; 60
   1242a:	89 23       	and	r24, r25
   1242c:	80 83       	st	Z, r24
   1242e:	d2 96       	adiw	r26, 0x32	; 50
   12430:	ed 91       	ld	r30, X+
   12432:	fc 91       	ld	r31, X
   12434:	d3 97       	sbiw	r26, 0x33	; 51
   12436:	80 81       	ld	r24, Z
   12438:	d8 96       	adiw	r26, 0x38	; 56
   1243a:	9c 91       	ld	r25, X
   1243c:	d8 97       	sbiw	r26, 0x38	; 56
   1243e:	89 2b       	or	r24, r25
   12440:	80 83       	st	Z, r24
   12442:	d0 96       	adiw	r26, 0x30	; 48
   12444:	ed 91       	ld	r30, X+
   12446:	fc 91       	ld	r31, X
   12448:	d1 97       	sbiw	r26, 0x31	; 49
   1244a:	80 81       	ld	r24, Z
   1244c:	d7 96       	adiw	r26, 0x37	; 55
   1244e:	9c 91       	ld	r25, X
   12450:	d7 97       	sbiw	r26, 0x37	; 55
   12452:	89 2b       	or	r24, r25
   12454:	80 83       	st	Z, r24
   12456:	72 b9       	out	0x02, r23	; 2
   12458:	d2 96       	adiw	r26, 0x32	; 50
   1245a:	ed 91       	ld	r30, X+
   1245c:	fc 91       	ld	r31, X
   1245e:	d3 97       	sbiw	r26, 0x33	; 51
   12460:	80 81       	ld	r24, Z
   12462:	dc 96       	adiw	r26, 0x3c	; 60
   12464:	9c 91       	ld	r25, X
   12466:	dc 97       	sbiw	r26, 0x3c	; 60
   12468:	89 23       	and	r24, r25
   1246a:	80 83       	st	Z, r24
   1246c:	d2 96       	adiw	r26, 0x32	; 50
   1246e:	ed 91       	ld	r30, X+
   12470:	fc 91       	ld	r31, X
   12472:	d3 97       	sbiw	r26, 0x33	; 51
   12474:	80 81       	ld	r24, Z
   12476:	d8 96       	adiw	r26, 0x38	; 56
   12478:	9c 91       	ld	r25, X
   1247a:	d8 97       	sbiw	r26, 0x38	; 56
   1247c:	89 2b       	or	r24, r25
   1247e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
   12480:	d0 96       	adiw	r26, 0x30	; 48
   12482:	ed 91       	ld	r30, X+
   12484:	fc 91       	ld	r31, X
   12486:	d1 97       	sbiw	r26, 0x31	; 49
   12488:	80 81       	ld	r24, Z
   1248a:	db 96       	adiw	r26, 0x3b	; 59
   1248c:	9c 91       	ld	r25, X
   1248e:	db 97       	sbiw	r26, 0x3b	; 59
   12490:	89 23       	and	r24, r25
   12492:	80 83       	st	Z, r24
   12494:	83 e0       	ldi	r24, 0x03	; 3
   12496:	82 b9       	out	0x02, r24	; 2
   12498:	d2 96       	adiw	r26, 0x32	; 50
   1249a:	ed 91       	ld	r30, X+
   1249c:	fc 91       	ld	r31, X
   1249e:	d3 97       	sbiw	r26, 0x33	; 51
   124a0:	80 81       	ld	r24, Z
   124a2:	dc 96       	adiw	r26, 0x3c	; 60
   124a4:	9c 91       	ld	r25, X
   124a6:	dc 97       	sbiw	r26, 0x3c	; 60
   124a8:	89 23       	and	r24, r25
   124aa:	80 83       	st	Z, r24
   124ac:	d2 96       	adiw	r26, 0x32	; 50
   124ae:	ed 91       	ld	r30, X+
   124b0:	fc 91       	ld	r31, X
   124b2:	d3 97       	sbiw	r26, 0x33	; 51
   124b4:	80 81       	ld	r24, Z
   124b6:	d8 96       	adiw	r26, 0x38	; 56
   124b8:	9c 91       	ld	r25, X
   124ba:	d8 97       	sbiw	r26, 0x38	; 56
   124bc:	89 2b       	or	r24, r25
   124be:	80 83       	st	Z, r24
   124c0:	d0 96       	adiw	r26, 0x30	; 48
   124c2:	ed 91       	ld	r30, X+
   124c4:	fc 91       	ld	r31, X
   124c6:	d1 97       	sbiw	r26, 0x31	; 49
   124c8:	80 81       	ld	r24, Z
   124ca:	d7 96       	adiw	r26, 0x37	; 55
   124cc:	9c 91       	ld	r25, X
   124ce:	d7 97       	sbiw	r26, 0x37	; 55
   124d0:	89 2b       	or	r24, r25
   124d2:	80 83       	st	Z, r24
   124d4:	62 b9       	out	0x02, r22	; 2
   124d6:	d2 96       	adiw	r26, 0x32	; 50
   124d8:	ed 91       	ld	r30, X+
   124da:	fc 91       	ld	r31, X
   124dc:	d3 97       	sbiw	r26, 0x33	; 51
   124de:	80 81       	ld	r24, Z
   124e0:	dc 96       	adiw	r26, 0x3c	; 60
   124e2:	9c 91       	ld	r25, X
   124e4:	dc 97       	sbiw	r26, 0x3c	; 60
   124e6:	89 23       	and	r24, r25
   124e8:	80 83       	st	Z, r24
   124ea:	d2 96       	adiw	r26, 0x32	; 50
   124ec:	ed 91       	ld	r30, X+
   124ee:	fc 91       	ld	r31, X
   124f0:	d3 97       	sbiw	r26, 0x33	; 51
   124f2:	80 81       	ld	r24, Z
   124f4:	d8 96       	adiw	r26, 0x38	; 56
   124f6:	9c 91       	ld	r25, X
   124f8:	d8 97       	sbiw	r26, 0x38	; 56
   124fa:	89 2b       	or	r24, r25
   124fc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
   124fe:	d0 96       	adiw	r26, 0x30	; 48
   12500:	ed 91       	ld	r30, X+
   12502:	fc 91       	ld	r31, X
   12504:	d1 97       	sbiw	r26, 0x31	; 49
   12506:	80 81       	ld	r24, Z
   12508:	db 96       	adiw	r26, 0x3b	; 59
   1250a:	9c 91       	ld	r25, X
   1250c:	db 97       	sbiw	r26, 0x3b	; 59
   1250e:	89 23       	and	r24, r25
   12510:	80 83       	st	Z, r24
   12512:	86 e0       	ldi	r24, 0x06	; 6
   12514:	82 b9       	out	0x02, r24	; 2
   12516:	d2 96       	adiw	r26, 0x32	; 50
   12518:	ed 91       	ld	r30, X+
   1251a:	fc 91       	ld	r31, X
   1251c:	d3 97       	sbiw	r26, 0x33	; 51
   1251e:	80 81       	ld	r24, Z
   12520:	dc 96       	adiw	r26, 0x3c	; 60
   12522:	9c 91       	ld	r25, X
   12524:	dc 97       	sbiw	r26, 0x3c	; 60
   12526:	89 23       	and	r24, r25
   12528:	80 83       	st	Z, r24
   1252a:	d2 96       	adiw	r26, 0x32	; 50
   1252c:	ed 91       	ld	r30, X+
   1252e:	fc 91       	ld	r31, X
   12530:	d3 97       	sbiw	r26, 0x33	; 51
   12532:	80 81       	ld	r24, Z
   12534:	d8 96       	adiw	r26, 0x38	; 56
   12536:	9c 91       	ld	r25, X
   12538:	d8 97       	sbiw	r26, 0x38	; 56
   1253a:	89 2b       	or	r24, r25
   1253c:	80 83       	st	Z, r24
   1253e:	d0 96       	adiw	r26, 0x30	; 48
   12540:	ed 91       	ld	r30, X+
   12542:	fc 91       	ld	r31, X
   12544:	d1 97       	sbiw	r26, 0x31	; 49
   12546:	80 81       	ld	r24, Z
   12548:	d7 96       	adiw	r26, 0x37	; 55
   1254a:	9c 91       	ld	r25, X
   1254c:	d7 97       	sbiw	r26, 0x37	; 55
   1254e:	89 2b       	or	r24, r25
   12550:	80 83       	st	Z, r24
   12552:	52 b9       	out	0x02, r21	; 2
   12554:	d2 96       	adiw	r26, 0x32	; 50
   12556:	ed 91       	ld	r30, X+
   12558:	fc 91       	ld	r31, X
   1255a:	d3 97       	sbiw	r26, 0x33	; 51
   1255c:	80 81       	ld	r24, Z
   1255e:	dc 96       	adiw	r26, 0x3c	; 60
   12560:	9c 91       	ld	r25, X
   12562:	dc 97       	sbiw	r26, 0x3c	; 60
   12564:	89 23       	and	r24, r25
   12566:	80 83       	st	Z, r24
   12568:	d2 96       	adiw	r26, 0x32	; 50
   1256a:	ed 91       	ld	r30, X+
   1256c:	fc 91       	ld	r31, X
   1256e:	d3 97       	sbiw	r26, 0x33	; 51
   12570:	80 81       	ld	r24, Z
   12572:	d8 96       	adiw	r26, 0x38	; 56
   12574:	9c 91       	ld	r25, X
   12576:	d8 97       	sbiw	r26, 0x38	; 56
   12578:	89 2b       	or	r24, r25
   1257a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
   1257c:	d0 96       	adiw	r26, 0x30	; 48
   1257e:	ed 91       	ld	r30, X+
   12580:	fc 91       	ld	r31, X
   12582:	d1 97       	sbiw	r26, 0x31	; 49
   12584:	80 81       	ld	r24, Z
   12586:	db 96       	adiw	r26, 0x3b	; 59
   12588:	9c 91       	ld	r25, X
   1258a:	db 97       	sbiw	r26, 0x3b	; 59
   1258c:	89 23       	and	r24, r25
   1258e:	80 83       	st	Z, r24
   12590:	87 e0       	ldi	r24, 0x07	; 7
   12592:	82 b9       	out	0x02, r24	; 2
   12594:	d2 96       	adiw	r26, 0x32	; 50
   12596:	ed 91       	ld	r30, X+
   12598:	fc 91       	ld	r31, X
   1259a:	d3 97       	sbiw	r26, 0x33	; 51
   1259c:	80 81       	ld	r24, Z
   1259e:	dc 96       	adiw	r26, 0x3c	; 60
   125a0:	9c 91       	ld	r25, X
   125a2:	dc 97       	sbiw	r26, 0x3c	; 60
   125a4:	89 23       	and	r24, r25
   125a6:	80 83       	st	Z, r24
   125a8:	d2 96       	adiw	r26, 0x32	; 50
   125aa:	ed 91       	ld	r30, X+
   125ac:	fc 91       	ld	r31, X
   125ae:	d3 97       	sbiw	r26, 0x33	; 51
   125b0:	80 81       	ld	r24, Z
   125b2:	d8 96       	adiw	r26, 0x38	; 56
   125b4:	9c 91       	ld	r25, X
   125b6:	d8 97       	sbiw	r26, 0x38	; 56
   125b8:	89 2b       	or	r24, r25
   125ba:	80 83       	st	Z, r24
   125bc:	d0 96       	adiw	r26, 0x30	; 48
   125be:	ed 91       	ld	r30, X+
   125c0:	fc 91       	ld	r31, X
   125c2:	d1 97       	sbiw	r26, 0x31	; 49
   125c4:	80 81       	ld	r24, Z
   125c6:	d7 96       	adiw	r26, 0x37	; 55
   125c8:	9c 91       	ld	r25, X
   125ca:	d7 97       	sbiw	r26, 0x37	; 55
   125cc:	89 2b       	or	r24, r25
   125ce:	80 83       	st	Z, r24
   125d0:	42 b9       	out	0x02, r20	; 2
   125d2:	d2 96       	adiw	r26, 0x32	; 50
   125d4:	ed 91       	ld	r30, X+
   125d6:	fc 91       	ld	r31, X
   125d8:	d3 97       	sbiw	r26, 0x33	; 51
   125da:	80 81       	ld	r24, Z
   125dc:	dc 96       	adiw	r26, 0x3c	; 60
   125de:	9c 91       	ld	r25, X
   125e0:	dc 97       	sbiw	r26, 0x3c	; 60
   125e2:	89 23       	and	r24, r25
   125e4:	80 83       	st	Z, r24
   125e6:	d2 96       	adiw	r26, 0x32	; 50
   125e8:	ed 91       	ld	r30, X+
   125ea:	fc 91       	ld	r31, X
   125ec:	d3 97       	sbiw	r26, 0x33	; 51
   125ee:	80 81       	ld	r24, Z
   125f0:	d8 96       	adiw	r26, 0x38	; 56
   125f2:	9c 91       	ld	r25, X
   125f4:	d8 97       	sbiw	r26, 0x38	; 56
   125f6:	89 2b       	or	r24, r25
   125f8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
   125fa:	d0 96       	adiw	r26, 0x30	; 48
   125fc:	ed 91       	ld	r30, X+
   125fe:	fc 91       	ld	r31, X
   12600:	d1 97       	sbiw	r26, 0x31	; 49
   12602:	80 81       	ld	r24, Z
   12604:	db 96       	adiw	r26, 0x3b	; 59
   12606:	9c 91       	ld	r25, X
   12608:	db 97       	sbiw	r26, 0x3b	; 59
   1260a:	89 23       	and	r24, r25
   1260c:	80 83       	st	Z, r24
   1260e:	84 e0       	ldi	r24, 0x04	; 4
   12610:	82 b9       	out	0x02, r24	; 2
   12612:	d2 96       	adiw	r26, 0x32	; 50
   12614:	ed 91       	ld	r30, X+
   12616:	fc 91       	ld	r31, X
   12618:	d3 97       	sbiw	r26, 0x33	; 51
   1261a:	80 81       	ld	r24, Z
   1261c:	dc 96       	adiw	r26, 0x3c	; 60
   1261e:	9c 91       	ld	r25, X
   12620:	dc 97       	sbiw	r26, 0x3c	; 60
   12622:	89 23       	and	r24, r25
   12624:	80 83       	st	Z, r24
   12626:	d2 96       	adiw	r26, 0x32	; 50
   12628:	ed 91       	ld	r30, X+
   1262a:	fc 91       	ld	r31, X
   1262c:	d3 97       	sbiw	r26, 0x33	; 51
   1262e:	80 81       	ld	r24, Z
   12630:	d8 96       	adiw	r26, 0x38	; 56
   12632:	9c 91       	ld	r25, X
   12634:	d8 97       	sbiw	r26, 0x38	; 56
   12636:	89 2b       	or	r24, r25
   12638:	80 83       	st	Z, r24
   1263a:	d0 96       	adiw	r26, 0x30	; 48
   1263c:	ed 91       	ld	r30, X+
   1263e:	fc 91       	ld	r31, X
   12640:	d1 97       	sbiw	r26, 0x31	; 49
   12642:	80 81       	ld	r24, Z
   12644:	d7 96       	adiw	r26, 0x37	; 55
   12646:	9c 91       	ld	r25, X
   12648:	d7 97       	sbiw	r26, 0x37	; 55
   1264a:	89 2b       	or	r24, r25
   1264c:	80 83       	st	Z, r24
   1264e:	32 b9       	out	0x02, r19	; 2
   12650:	d2 96       	adiw	r26, 0x32	; 50
   12652:	ed 91       	ld	r30, X+
   12654:	fc 91       	ld	r31, X
   12656:	d3 97       	sbiw	r26, 0x33	; 51
   12658:	80 81       	ld	r24, Z
   1265a:	dc 96       	adiw	r26, 0x3c	; 60
   1265c:	9c 91       	ld	r25, X
   1265e:	dc 97       	sbiw	r26, 0x3c	; 60
   12660:	89 23       	and	r24, r25
   12662:	80 83       	st	Z, r24
   12664:	d2 96       	adiw	r26, 0x32	; 50
   12666:	ed 91       	ld	r30, X+
   12668:	fc 91       	ld	r31, X
   1266a:	d3 97       	sbiw	r26, 0x33	; 51
   1266c:	80 81       	ld	r24, Z
   1266e:	d8 96       	adiw	r26, 0x38	; 56
   12670:	9c 91       	ld	r25, X
   12672:	d8 97       	sbiw	r26, 0x38	; 56
   12674:	89 2b       	or	r24, r25
   12676:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
   12678:	d0 96       	adiw	r26, 0x30	; 48
   1267a:	ed 91       	ld	r30, X+
   1267c:	fc 91       	ld	r31, X
   1267e:	d1 97       	sbiw	r26, 0x31	; 49
   12680:	80 81       	ld	r24, Z
   12682:	db 96       	adiw	r26, 0x3b	; 59
   12684:	9c 91       	ld	r25, X
   12686:	db 97       	sbiw	r26, 0x3b	; 59
   12688:	89 23       	and	r24, r25
   1268a:	80 83       	st	Z, r24
   1268c:	85 e0       	ldi	r24, 0x05	; 5
   1268e:	82 b9       	out	0x02, r24	; 2
   12690:	d2 96       	adiw	r26, 0x32	; 50
   12692:	ed 91       	ld	r30, X+
   12694:	fc 91       	ld	r31, X
   12696:	d3 97       	sbiw	r26, 0x33	; 51
   12698:	80 81       	ld	r24, Z
   1269a:	dc 96       	adiw	r26, 0x3c	; 60
   1269c:	9c 91       	ld	r25, X
   1269e:	dc 97       	sbiw	r26, 0x3c	; 60
   126a0:	89 23       	and	r24, r25
   126a2:	80 83       	st	Z, r24
   126a4:	d2 96       	adiw	r26, 0x32	; 50
   126a6:	ed 91       	ld	r30, X+
   126a8:	fc 91       	ld	r31, X
   126aa:	d3 97       	sbiw	r26, 0x33	; 51
   126ac:	80 81       	ld	r24, Z
   126ae:	d8 96       	adiw	r26, 0x38	; 56
   126b0:	9c 91       	ld	r25, X
   126b2:	d8 97       	sbiw	r26, 0x38	; 56
   126b4:	89 2b       	or	r24, r25
   126b6:	80 83       	st	Z, r24
   126b8:	d0 96       	adiw	r26, 0x30	; 48
   126ba:	ed 91       	ld	r30, X+
   126bc:	fc 91       	ld	r31, X
   126be:	d1 97       	sbiw	r26, 0x31	; 49
   126c0:	80 81       	ld	r24, Z
   126c2:	d7 96       	adiw	r26, 0x37	; 55
   126c4:	9c 91       	ld	r25, X
   126c6:	d7 97       	sbiw	r26, 0x37	; 55
   126c8:	89 2b       	or	r24, r25
   126ca:	80 83       	st	Z, r24
   126cc:	22 b9       	out	0x02, r18	; 2
   126ce:	d2 96       	adiw	r26, 0x32	; 50
   126d0:	ed 91       	ld	r30, X+
   126d2:	fc 91       	ld	r31, X
   126d4:	d3 97       	sbiw	r26, 0x33	; 51
   126d6:	80 81       	ld	r24, Z
   126d8:	dc 96       	adiw	r26, 0x3c	; 60
   126da:	9c 91       	ld	r25, X
   126dc:	dc 97       	sbiw	r26, 0x3c	; 60
   126de:	89 23       	and	r24, r25
   126e0:	80 83       	st	Z, r24
   126e2:	d2 96       	adiw	r26, 0x32	; 50
   126e4:	ed 91       	ld	r30, X+
   126e6:	fc 91       	ld	r31, X
   126e8:	d3 97       	sbiw	r26, 0x33	; 51
   126ea:	80 81       	ld	r24, Z
   126ec:	d8 96       	adiw	r26, 0x38	; 56
   126ee:	9c 91       	ld	r25, X
   126f0:	d8 97       	sbiw	r26, 0x38	; 56
   126f2:	89 2b       	or	r24, r25
   126f4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
   126f6:	d0 96       	adiw	r26, 0x30	; 48
   126f8:	ed 91       	ld	r30, X+
   126fa:	fc 91       	ld	r31, X
   126fc:	d1 97       	sbiw	r26, 0x31	; 49
   126fe:	80 81       	ld	r24, Z
   12700:	db 96       	adiw	r26, 0x3b	; 59
   12702:	9c 91       	ld	r25, X
   12704:	db 97       	sbiw	r26, 0x3b	; 59
   12706:	89 23       	and	r24, r25
   12708:	80 83       	st	Z, r24
   1270a:	88 e0       	ldi	r24, 0x08	; 8
   1270c:	82 b9       	out	0x02, r24	; 2
   1270e:	d2 96       	adiw	r26, 0x32	; 50
   12710:	ed 91       	ld	r30, X+
   12712:	fc 91       	ld	r31, X
   12714:	d3 97       	sbiw	r26, 0x33	; 51
   12716:	80 81       	ld	r24, Z
   12718:	dc 96       	adiw	r26, 0x3c	; 60
   1271a:	9c 91       	ld	r25, X
   1271c:	dc 97       	sbiw	r26, 0x3c	; 60
   1271e:	89 23       	and	r24, r25
   12720:	80 83       	st	Z, r24
   12722:	d2 96       	adiw	r26, 0x32	; 50
   12724:	ed 91       	ld	r30, X+
   12726:	fc 91       	ld	r31, X
   12728:	d3 97       	sbiw	r26, 0x33	; 51
   1272a:	80 81       	ld	r24, Z
   1272c:	d8 96       	adiw	r26, 0x38	; 56
   1272e:	9c 91       	ld	r25, X
   12730:	d8 97       	sbiw	r26, 0x38	; 56
   12732:	89 2b       	or	r24, r25
   12734:	80 83       	st	Z, r24
   12736:	d0 96       	adiw	r26, 0x30	; 48
   12738:	ed 91       	ld	r30, X+
   1273a:	fc 91       	ld	r31, X
   1273c:	d1 97       	sbiw	r26, 0x31	; 49
   1273e:	80 81       	ld	r24, Z
   12740:	d7 96       	adiw	r26, 0x37	; 55
   12742:	9c 91       	ld	r25, X
   12744:	d7 97       	sbiw	r26, 0x37	; 55
   12746:	89 2b       	or	r24, r25
   12748:	80 83       	st	Z, r24
   1274a:	12 b9       	out	0x02, r17	; 2
   1274c:	d2 96       	adiw	r26, 0x32	; 50
   1274e:	ed 91       	ld	r30, X+
   12750:	fc 91       	ld	r31, X
   12752:	d3 97       	sbiw	r26, 0x33	; 51
   12754:	80 81       	ld	r24, Z
   12756:	dc 96       	adiw	r26, 0x3c	; 60
   12758:	9c 91       	ld	r25, X
   1275a:	dc 97       	sbiw	r26, 0x3c	; 60
   1275c:	89 23       	and	r24, r25
   1275e:	80 83       	st	Z, r24
   12760:	d2 96       	adiw	r26, 0x32	; 50
   12762:	ed 91       	ld	r30, X+
   12764:	fc 91       	ld	r31, X
   12766:	d3 97       	sbiw	r26, 0x33	; 51
   12768:	80 81       	ld	r24, Z
   1276a:	d8 96       	adiw	r26, 0x38	; 56
   1276c:	9c 91       	ld	r25, X
   1276e:	d8 97       	sbiw	r26, 0x38	; 56
   12770:	89 2b       	or	r24, r25
   12772:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   12774:	d0 96       	adiw	r26, 0x30	; 48
   12776:	ed 91       	ld	r30, X+
   12778:	fc 91       	ld	r31, X
   1277a:	d1 97       	sbiw	r26, 0x31	; 49
   1277c:	80 81       	ld	r24, Z
   1277e:	db 96       	adiw	r26, 0x3b	; 59
   12780:	9c 91       	ld	r25, X
   12782:	db 97       	sbiw	r26, 0x3b	; 59
   12784:	89 23       	and	r24, r25
   12786:	80 83       	st	Z, r24
   12788:	89 e0       	ldi	r24, 0x09	; 9
   1278a:	82 b9       	out	0x02, r24	; 2
   1278c:	d2 96       	adiw	r26, 0x32	; 50
   1278e:	ed 91       	ld	r30, X+
   12790:	fc 91       	ld	r31, X
   12792:	d3 97       	sbiw	r26, 0x33	; 51
   12794:	80 81       	ld	r24, Z
   12796:	dc 96       	adiw	r26, 0x3c	; 60
   12798:	9c 91       	ld	r25, X
   1279a:	dc 97       	sbiw	r26, 0x3c	; 60
   1279c:	89 23       	and	r24, r25
   1279e:	80 83       	st	Z, r24
   127a0:	d2 96       	adiw	r26, 0x32	; 50
   127a2:	ed 91       	ld	r30, X+
   127a4:	fc 91       	ld	r31, X
   127a6:	d3 97       	sbiw	r26, 0x33	; 51
   127a8:	80 81       	ld	r24, Z
   127aa:	d8 96       	adiw	r26, 0x38	; 56
   127ac:	9c 91       	ld	r25, X
   127ae:	d8 97       	sbiw	r26, 0x38	; 56
   127b0:	89 2b       	or	r24, r25
   127b2:	80 83       	st	Z, r24
   127b4:	d0 96       	adiw	r26, 0x30	; 48
   127b6:	ed 91       	ld	r30, X+
   127b8:	fc 91       	ld	r31, X
   127ba:	d1 97       	sbiw	r26, 0x31	; 49
   127bc:	80 81       	ld	r24, Z
   127be:	d7 96       	adiw	r26, 0x37	; 55
   127c0:	9c 91       	ld	r25, X
   127c2:	d7 97       	sbiw	r26, 0x37	; 55
   127c4:	89 2b       	or	r24, r25
   127c6:	80 83       	st	Z, r24
   127c8:	02 b9       	out	0x02, r16	; 2
   127ca:	b9 cd       	rjmp	.-1166   	; 0x1233e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
   127cc:	7d 83       	std	Y+5, r23	; 0x05
   127ce:	6e 83       	std	Y+6, r22	; 0x06
   127d0:	3f 83       	std	Y+7, r19	; 0x07
   127d2:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
   127d4:	59 83       	std	Y+1, r21	; 0x01
   127d6:	4a 83       	std	Y+2, r20	; 0x02
   127d8:	1b 83       	std	Y+3, r17	; 0x03
   127da:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
   127dc:	f7 01       	movw	r30, r14
   127de:	64 8d       	ldd	r22, Z+28	; 0x1c
   127e0:	75 8d       	ldd	r23, Z+29	; 0x1d
   127e2:	24 e0       	ldi	r18, 0x04	; 4
   127e4:	ae 01       	movw	r20, r28
   127e6:	4b 5f       	subi	r20, 0xFB	; 251
   127e8:	5f 4f       	sbci	r21, 0xFF	; 255
   127ea:	c7 01       	movw	r24, r14
   127ec:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
   127f0:	d7 01       	movw	r26, r14
   127f2:	5e 96       	adiw	r26, 0x1e	; 30
   127f4:	6d 91       	ld	r22, X+
   127f6:	7c 91       	ld	r23, X
   127f8:	24 e0       	ldi	r18, 0x04	; 4
   127fa:	ae 01       	movw	r20, r28
   127fc:	4f 5f       	subi	r20, 0xFF	; 255
   127fe:	5f 4f       	sbci	r21, 0xFF	; 255
   12800:	c7 01       	movw	r24, r14
   12802:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   12806:	ae cd       	rjmp	.-1188   	; 0x12364 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00012808 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
   12808:	0f 93       	push	r16
   1280a:	1f 93       	push	r17
   1280c:	cf 93       	push	r28
   1280e:	df 93       	push	r29
   12810:	8c 01       	movw	r16, r24
   12812:	c4 e6       	ldi	r28, 0x64	; 100
   12814:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
   12816:	ce 01       	movw	r24, r28
   12818:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
   1281c:	f8 01       	movw	r30, r16
   1281e:	81 93       	st	Z+, r24
   12820:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
   12822:	10 82       	st	Z, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
   12824:	88 23       	and	r24, r24
   12826:	21 f0       	breq	.+8      	; 0x12830 <device_get_name(char*)+0x28>
   12828:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   1282a:	cd 36       	cpi	r28, 0x6D	; 109
   1282c:	d1 05       	cpc	r29, r1
   1282e:	99 f7       	brne	.-26     	; 0x12816 <device_get_name(char*)+0xe>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
   12830:	df 91       	pop	r29
   12832:	cf 91       	pop	r28
   12834:	1f 91       	pop	r17
   12836:	0f 91       	pop	r16
   12838:	08 95       	ret

0001283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
   1283a:	cf 92       	push	r12
   1283c:	df 92       	push	r13
   1283e:	ef 92       	push	r14
   12840:	ff 92       	push	r15
   12842:	0f 93       	push	r16
   12844:	1f 93       	push	r17
   12846:	cf 93       	push	r28
   12848:	df 93       	push	r29
   1284a:	cd b7       	in	r28, 0x3d	; 61
   1284c:	de b7       	in	r29, 0x3e	; 62
   1284e:	ca 54       	subi	r28, 0x4A	; 74
   12850:	d1 09       	sbc	r29, r1
   12852:	0f b6       	in	r0, 0x3f	; 63
   12854:	f8 94       	cli
   12856:	de bf       	out	0x3e, r29	; 62
   12858:	0f be       	out	0x3f, r0	; 63
   1285a:	cd bf       	out	0x3d, r28	; 61
   1285c:	8c 01       	movw	r16, r24
   1285e:	6b 01       	movw	r12, r22
   12860:	7a 01       	movw	r14, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:220
  char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
   12862:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   12866:	88 23       	and	r24, r24
   12868:	89 f1       	breq	.+98     	; 0x128cc <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
   1286a:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <mqtt_send_message>
   1286e:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <mqtt_send_message+0x1>
   12872:	01 96       	adiw	r24, 0x01	; 1
   12874:	90 93 57 0c 	sts	0x0C57, r25	; 0x800c57 <mqtt_send_message+0x1>
   12878:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
   1287c:	ce 01       	movw	r24, r28
   1287e:	8f 5b       	subi	r24, 0xBF	; 191
   12880:	9f 4f       	sbci	r25, 0xFF	; 255
   12882:	0e 94 04 94 	call	0x12808	; 0x12808 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
   12886:	60 91 54 0c 	lds	r22, 0x0C54	; 0x800c54 <header_out>
   1288a:	70 91 55 0c 	lds	r23, 0x0C55	; 0x800c55 <header_out+0x1>
   1288e:	ce 01       	movw	r24, r28
   12890:	01 96       	adiw	r24, 0x01	; 1
   12892:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
   12896:	be 01       	movw	r22, r28
   12898:	6f 5b       	subi	r22, 0xBF	; 191
   1289a:	7f 4f       	sbci	r23, 0xFF	; 255
   1289c:	ce 01       	movw	r24, r28
   1289e:	01 96       	adiw	r24, 0x01	; 1
   128a0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
   128a4:	6f e4       	ldi	r22, 0x4F	; 79
   128a6:	75 e0       	ldi	r23, 0x05	; 5
   128a8:	ce 01       	movw	r24, r28
   128aa:	01 96       	adiw	r24, 0x01	; 1
   128ac:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
   128b0:	b6 01       	movw	r22, r12
   128b2:	ce 01       	movw	r24, r28
   128b4:	01 96       	adiw	r24, 0x01	; 1
   128b6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   128ba:	a7 01       	movw	r20, r14
   128bc:	be 01       	movw	r22, r28
   128be:	6f 5f       	subi	r22, 0xFF	; 255
   128c0:	7f 4f       	sbci	r23, 0xFF	; 255
   128c2:	c8 01       	movw	r24, r16
   128c4:	0e 94 05 6b 	call	0xd60a	; 0xd60a <PubSubClient::publish(char const*, char const*)>
   128c8:	81 11       	cpse	r24, r1
   128ca:	09 c0       	rjmp	.+18     	; 0x128de <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
   128cc:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <mqtt_error>
   128d0:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <mqtt_error+0x1>
   128d4:	01 96       	adiw	r24, 0x01	; 1
   128d6:	90 93 59 0c 	sts	0x0C59, r25	; 0x800c59 <mqtt_error+0x1>
   128da:	80 93 58 0c 	sts	0x0C58, r24	; 0x800c58 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:232
}
   128de:	c6 5b       	subi	r28, 0xB6	; 182
   128e0:	df 4f       	sbci	r29, 0xFF	; 255
   128e2:	0f b6       	in	r0, 0x3f	; 63
   128e4:	f8 94       	cli
   128e6:	de bf       	out	0x3e, r29	; 62
   128e8:	0f be       	out	0x3f, r0	; 63
   128ea:	cd bf       	out	0x3d, r28	; 61
   128ec:	df 91       	pop	r29
   128ee:	cf 91       	pop	r28
   128f0:	1f 91       	pop	r17
   128f2:	0f 91       	pop	r16
   128f4:	ff 90       	pop	r15
   128f6:	ef 90       	pop	r14
   128f8:	df 90       	pop	r13
   128fa:	cf 90       	pop	r12
   128fc:	08 95       	ret

000128fe <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:439
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
   128fe:	cf 93       	push	r28
   12900:	df 93       	push	r29
   12902:	cd b7       	in	r28, 0x3d	; 61
   12904:	de b7       	in	r29, 0x3e	; 62
   12906:	60 97       	sbiw	r28, 0x10	; 16
   12908:	0f b6       	in	r0, 0x3f	; 63
   1290a:	f8 94       	cli
   1290c:	de bf       	out	0x3e, r29	; 62
   1290e:	0f be       	out	0x3f, r0	; 63
   12910:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:441
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
   12912:	90 91 53 0a 	lds	r25, 0x0A53	; 0x800a53 <mqtt_log_cnt>
   12916:	e9 2f       	mov	r30, r25
   12918:	f0 e0       	ldi	r31, 0x00	; 0
   1291a:	ed 52       	subi	r30, 0x2D	; 45
   1291c:	f6 4f       	sbci	r31, 0xF6	; 246
   1291e:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:442
  mqtt_log[mqtt_log_cnt + 1] = 0;
   12920:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:443
  mqtt_log_cnt++;
   12922:	9f 5f       	subi	r25, 0xFF	; 255
   12924:	90 93 53 0a 	sts	0x0A53, r25	; 0x800a53 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:444
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
   12928:	97 fd       	sbrc	r25, 7
   1292a:	04 c0       	rjmp	.+8      	; 0x12934 <printf_via_mqtt(char, __file*)+0x36>
   1292c:	8a 30       	cpi	r24, 0x0A	; 10
   1292e:	11 f0       	breq	.+4      	; 0x12934 <printf_via_mqtt(char, __file*)+0x36>
   12930:	81 11       	cpse	r24, r1
   12932:	13 c0       	rjmp	.+38     	; 0x1295a <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:446
  {
    strcpy(topic, "log-printf");
   12934:	68 e4       	ldi	r22, 0x48	; 72
   12936:	74 e0       	ldi	r23, 0x04	; 4
   12938:	ce 01       	movw	r24, r28
   1293a:	01 96       	adiw	r24, 0x01	; 1
   1293c:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:447
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
   12940:	43 ed       	ldi	r20, 0xD3	; 211
   12942:	59 e0       	ldi	r21, 0x09	; 9
   12944:	be 01       	movw	r22, r28
   12946:	6f 5f       	subi	r22, 0xFF	; 255
   12948:	7f 4f       	sbci	r23, 0xFF	; 255
   1294a:	80 91 d1 09 	lds	r24, 0x09D1	; 0x8009d1 <pub_mqtt_client>
   1294e:	90 91 d2 09 	lds	r25, 0x09D2	; 0x8009d2 <pub_mqtt_client+0x1>
   12952:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:448
    mqtt_log_cnt = 0;
   12956:	10 92 53 0a 	sts	0x0A53, r1	; 0x800a53 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:450
  }
}
   1295a:	60 96       	adiw	r28, 0x10	; 16
   1295c:	0f b6       	in	r0, 0x3f	; 63
   1295e:	f8 94       	cli
   12960:	de bf       	out	0x3e, r29	; 62
   12962:	0f be       	out	0x3f, r0	; 63
   12964:	cd bf       	out	0x3d, r28	; 61
   12966:	df 91       	pop	r29
   12968:	cf 91       	pop	r28
   1296a:	08 95       	ret

0001296c <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2051
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
   1296c:	2f 92       	push	r2
   1296e:	3f 92       	push	r3
   12970:	4f 92       	push	r4
   12972:	5f 92       	push	r5
   12974:	6f 92       	push	r6
   12976:	7f 92       	push	r7
   12978:	8f 92       	push	r8
   1297a:	9f 92       	push	r9
   1297c:	af 92       	push	r10
   1297e:	bf 92       	push	r11
   12980:	cf 92       	push	r12
   12982:	df 92       	push	r13
   12984:	ef 92       	push	r14
   12986:	ff 92       	push	r15
   12988:	0f 93       	push	r16
   1298a:	1f 93       	push	r17
   1298c:	cf 93       	push	r28
   1298e:	df 93       	push	r29
   12990:	cd b7       	in	r28, 0x3d	; 61
   12992:	de b7       	in	r29, 0x3e	; 62
   12994:	c6 54       	subi	r28, 0x46	; 70
   12996:	d1 40       	sbci	r29, 0x01	; 1
   12998:	0f b6       	in	r0, 0x3f	; 63
   1299a:	f8 94       	cli
   1299c:	de bf       	out	0x3e, r29	; 62
   1299e:	0f be       	out	0x3f, r0	; 63
   129a0:	cd bf       	out	0x3d, r28	; 61
   129a2:	4c 01       	movw	r8, r24
   129a4:	8b 01       	movw	r16, r22
   129a6:	7a 01       	movw	r14, r20
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   129a8:	1b 82       	std	Y+3, r1	; 0x03
   129aa:	86 ed       	ldi	r24, 0xD6	; 214
   129ac:	93 e0       	ldi	r25, 0x03	; 3
   129ae:	9d 83       	std	Y+5, r25	; 0x05
   129b0:	8c 83       	std	Y+4, r24	; 0x04
   129b2:	89 e3       	ldi	r24, 0x39	; 57
   129b4:	95 e0       	ldi	r25, 0x05	; 5
   129b6:	9f 83       	std	Y+7, r25	; 0x07
   129b8:	8e 83       	std	Y+6, r24	; 0x06
   129ba:	18 86       	std	Y+8, r1	; 0x08
   129bc:	19 86       	std	Y+9, r1	; 0x09
   129be:	1a 86       	std	Y+10, r1	; 0x0a
   129c0:	1b 86       	std	Y+11, r1	; 0x0b
   129c2:	80 e6       	ldi	r24, 0x60	; 96
   129c4:	9a ee       	ldi	r25, 0xEA	; 234
   129c6:	a0 e0       	ldi	r26, 0x00	; 0
   129c8:	b0 e0       	ldi	r27, 0x00	; 0
   129ca:	8c 87       	std	Y+12, r24	; 0x0c
   129cc:	9d 87       	std	Y+13, r25	; 0x0d
   129ce:	ae 87       	std	Y+14, r26	; 0x0e
   129d0:	bf 87       	std	Y+15, r27	; 0x0f
   129d2:	18 8a       	std	Y+16, r1	; 0x10
   129d4:	19 8a       	std	Y+17, r1	; 0x11
   129d6:	1a 8a       	std	Y+18, r1	; 0x12
   129d8:	1b 8a       	std	Y+19, r1	; 0x13
   129da:	1c 8a       	std	Y+20, r1	; 0x14
   129dc:	1d 8a       	std	Y+21, r1	; 0x15
   129de:	1e 8a       	std	Y+22, r1	; 0x16
   129e0:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   129e2:	88 ee       	ldi	r24, 0xE8	; 232
   129e4:	91 e1       	ldi	r25, 0x11	; 17
   129e6:	9a 83       	std	Y+2, r25	; 0x02
   129e8:	89 83       	std	Y+1, r24	; 0x01
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
  DateTime ted;
   129ea:	ce 01       	movw	r24, r28
   129ec:	84 5c       	subi	r24, 0xC4	; 196
   129ee:	9e 4f       	sbci	r25, 0xFE	; 254
   129f0:	0e 94 99 c0 	call	0x18132	; 0x18132 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   129f4:	e6 ea       	ldi	r30, 0xA6	; 166
   129f6:	f8 e0       	ldi	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
   129f8:	80 e0       	ldi	r24, 0x00	; 0
   129fa:	11 92       	st	Z+, r1
   129fc:	8f 5f       	subi	r24, 0xFF	; 255
   129fe:	80 38       	cpi	r24, 0x80	; 128
   12a00:	e1 f7       	brne	.-8      	; 0x129fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
   12a02:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <mqtt_receive_message>
   12a06:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <mqtt_receive_message+0x1>
   12a0a:	01 96       	adiw	r24, 0x01	; 1
   12a0c:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <mqtt_receive_message+0x1>
   12a10:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
  strncpy(my_payload, (char*) payload, length);
   12a14:	a7 01       	movw	r20, r14
   12a16:	b8 01       	movw	r22, r16
   12a18:	86 ea       	ldi	r24, 0xA6	; 166
   12a1a:	98 e0       	ldi	r25, 0x08	; 8
   12a1c:	0e 94 47 fe 	call	0x1fc8e	; 0x1fc8e <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
   12a20:	5e 01       	movw	r10, r28
   12a22:	28 ec       	ldi	r18, 0xC8	; 200
   12a24:	a2 0e       	add	r10, r18
   12a26:	b1 1c       	adc	r11, r1
   12a28:	6e e7       	ldi	r22, 0x7E	; 126
   12a2a:	71 e8       	ldi	r23, 0x81	; 129
   12a2c:	c5 01       	movw	r24, r10
   12a2e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2073
  if (strcmp(str1, topic) == 0)
   12a32:	b4 01       	movw	r22, r8
   12a34:	c5 01       	movw	r24, r10
   12a36:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12a3a:	89 2b       	or	r24, r25
   12a3c:	49 f4       	brne	.+18     	; 0x12a50 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
   12a3e:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12a42:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12a46:	01 96       	adiw	r24, 0x01	; 1
   12a48:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12a4c:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
   12a50:	65 e9       	ldi	r22, 0x95	; 149
   12a52:	71 e8       	ldi	r23, 0x81	; 129
   12a54:	c5 01       	movw	r24, r10
   12a56:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
  if (strcmp(str1, topic) == 0)
   12a5a:	b4 01       	movw	r22, r8
   12a5c:	c5 01       	movw	r24, r10
   12a5e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12a62:	89 2b       	or	r24, r25
   12a64:	49 f4       	brne	.+18     	; 0x12a78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2081
  {
    mqtt_process_message++;
   12a66:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12a6a:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12a6e:	01 96       	adiw	r24, 0x01	; 1
   12a70:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12a74:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
   12a78:	6c eb       	ldi	r22, 0xBC	; 188
   12a7a:	71 e8       	ldi	r23, 0x81	; 129
   12a7c:	c5 01       	movw	r24, r10
   12a7e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
  strcat_P(str1, global_time_set);
   12a82:	60 e6       	ldi	r22, 0x60	; 96
   12a84:	71 e8       	ldi	r23, 0x81	; 129
   12a86:	c5 01       	movw	r24, r10
   12a88:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
  if (strcmp(str1, topic) == 0)
   12a8c:	b4 01       	movw	r22, r8
   12a8e:	c5 01       	movw	r24, r10
   12a90:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12a94:	89 2b       	or	r24, r25
   12a96:	09 f0       	breq	.+2      	; 0x12a9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e>
   12a98:	b5 c0       	rjmp	.+362    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
  {
    mqtt_process_message++;
   12a9a:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12a9e:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12aa2:	01 96       	adiw	r24, 0x01	; 1
   12aa4:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12aa8:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
   12aac:	20 91 23 0e 	lds	r18, 0x0E23	; 0x800e23 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   12ab0:	84 e2       	ldi	r24, 0x24	; 36
   12ab2:	9e e0       	ldi	r25, 0x0E	; 14
   12ab4:	2a 96       	adiw	r28, 0x0a	; 10
   12ab6:	9f af       	std	Y+63, r25	; 0x3f
   12ab8:	8e af       	std	Y+62, r24	; 0x3e
   12aba:	2a 97       	sbiw	r28, 0x0a	; 10
   12abc:	86 ea       	ldi	r24, 0xA6	; 166
   12abe:	98 e0       	ldi	r25, 0x08	; 8
   12ac0:	2c 96       	adiw	r28, 0x0c	; 12
   12ac2:	9f af       	std	Y+63, r25	; 0x3f
   12ac4:	8e af       	std	Y+62, r24	; 0x3e
   12ac6:	2c 97       	sbiw	r28, 0x0c	; 12
   12ac8:	2e 96       	adiw	r28, 0x0e	; 14
   12aca:	9f af       	std	Y+63, r25	; 0x3f
   12acc:	8e af       	std	Y+62, r24	; 0x3e
   12ace:	2e 97       	sbiw	r28, 0x0e	; 14
   12ad0:	2f 96       	adiw	r28, 0x0f	; 15
   12ad2:	2f af       	std	Y+63, r18	; 0x3f
   12ad4:	2f 97       	sbiw	r28, 0x0f	; 15
   12ad6:	61 96       	adiw	r28, 0x11	; 17
   12ad8:	1f ae       	std	Y+63, r1	; 0x3f
   12ada:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
   12adc:	10 92 2b 0e 	sts	0x0E2B, r1	; 0x800e2b <doc+0x8>
   12ae0:	10 92 2a 0e 	sts	0x0E2A, r1	; 0x800e2a <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   12ae4:	8c e2       	ldi	r24, 0x2C	; 44
   12ae6:	9f e0       	ldi	r25, 0x0F	; 15
   12ae8:	89 2b       	or	r24, r25
   12aea:	09 f4       	brne	.+2      	; 0x12aee <mqtt_callback(char*, unsigned char*, unsigned int)+0x182>
   12aec:	51 c1       	rjmp	.+674    	; 0x12d90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x424>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
   12aee:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <doc+0x10a>
   12af2:	10 92 2c 0f 	sts	0x0F2C, r1	; 0x800f2c <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
   12af6:	84 e2       	ldi	r24, 0x24	; 36
   12af8:	9e e0       	ldi	r25, 0x0E	; 14
   12afa:	ac 01       	movw	r20, r24
   12afc:	6c e2       	ldi	r22, 0x2C	; 44
   12afe:	7f e0       	ldi	r23, 0x0F	; 15
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
   12b00:	ce 01       	movw	r24, r28
   12b02:	88 5b       	subi	r24, 0xB8	; 184
   12b04:	9f 4f       	sbci	r25, 0xFF	; 255
   12b06:	0e 94 3f 57 	call	0xae7e	; 0xae7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
   12b0a:	8c e2       	ldi	r24, 0x2C	; 44
   12b0c:	9f e0       	ldi	r25, 0x0F	; 15
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
   12b0e:	0c e2       	ldi	r16, 0x2C	; 44
   12b10:	1f e0       	ldi	r17, 0x0F	; 15
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
   12b12:	89 2b       	or	r24, r25
   12b14:	51 f0       	breq	.+20     	; 0x12b2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
   12b16:	80 91 2c 0f 	lds	r24, 0x0F2C	; 0x800f2c <doc+0x109>
   12b1a:	90 91 2d 0f 	lds	r25, 0x0F2D	; 0x800f2d <doc+0x10a>
_Z13mqtt_callbackPcPhj():
   12b1e:	0e e2       	ldi	r16, 0x2E	; 46
   12b20:	1f e0       	ldi	r17, 0x0F	; 15
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
   12b22:	09 97       	sbiw	r24, 0x09	; 9
   12b24:	11 f0       	breq	.+4      	; 0x12b2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
   12b26:	10 e0       	ldi	r17, 0x00	; 0
   12b28:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
   12b2a:	63 e5       	ldi	r22, 0x53	; 83
   12b2c:	74 e0       	ldi	r23, 0x04	; 4
   12b2e:	c8 01       	movw	r24, r16
   12b30:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12b34:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
   12b36:	89 2b       	or	r24, r25
   12b38:	09 f4       	brne	.+2      	; 0x12b3c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0>
   12b3a:	64 c0       	rjmp	.+200    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12b3c:	68 e5       	ldi	r22, 0x58	; 88
   12b3e:	74 e0       	ldi	r23, 0x04	; 4
   12b40:	c8 01       	movw	r24, r16
   12b42:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12b46:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
   12b48:	89 2b       	or	r24, r25
   12b4a:	09 f4       	brne	.+2      	; 0x12b4e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e2>
   12b4c:	5b c0       	rjmp	.+182    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12b4e:	6e e5       	ldi	r22, 0x5E	; 94
   12b50:	74 e0       	ldi	r23, 0x04	; 4
   12b52:	c8 01       	movw	r24, r16
   12b54:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12b58:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
   12b5a:	89 2b       	or	r24, r25
   12b5c:	09 f4       	brne	.+2      	; 0x12b60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1f4>
   12b5e:	52 c0       	rjmp	.+164    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12b60:	63 e6       	ldi	r22, 0x63	; 99
   12b62:	74 e0       	ldi	r23, 0x04	; 4
   12b64:	c8 01       	movw	r24, r16
   12b66:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12b6a:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
   12b6c:	89 2b       	or	r24, r25
   12b6e:	09 f4       	brne	.+2      	; 0x12b72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x206>
   12b70:	49 c0       	rjmp	.+146    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12b72:	6a e6       	ldi	r22, 0x6A	; 106
   12b74:	74 e0       	ldi	r23, 0x04	; 4
   12b76:	c8 01       	movw	r24, r16
   12b78:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2094
   12b7c:	00 97       	sbiw	r24, 0x00	; 0
   12b7e:	09 f4       	brne	.+2      	; 0x12b82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
   12b80:	41 c0       	rjmp	.+130    	; 0x12c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
   12b82:	0e 94 9d de 	call	0x1bd3a	; 0x1bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12b86:	38 2e       	mov	r3, r24
   12b88:	c6 01       	movw	r24, r12
   12b8a:	0e 94 9d de 	call	0x1bd3a	; 0x1bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12b8e:	d8 2e       	mov	r13, r24
   12b90:	c3 01       	movw	r24, r6
   12b92:	0e 94 9d de 	call	0x1bd3a	; 0x1bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12b96:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12b98:	61 e7       	ldi	r22, 0x71	; 113
   12b9a:	74 e0       	ldi	r23, 0x04	; 4
   12b9c:	c8 01       	movw	r24, r16
   12b9e:	0e 94 16 57 	call	0xae2c	; 0xae2c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
   12ba2:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
   12ba4:	00 97       	sbiw	r24, 0x00	; 0
   12ba6:	19 f0       	breq	.+6      	; 0x12bae <mqtt_callback(char*, unsigned char*, unsigned int)+0x242>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
   12ba8:	0e 94 9d de 	call	0x1bd3a	; 0x1bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12bac:	18 2f       	mov	r17, r24
   12bae:	c2 01       	movw	r24, r4
   12bb0:	0e 94 9d de 	call	0x1bd3a	; 0x1bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12bb4:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
   12bb6:	d7 01       	movw	r26, r14
   12bb8:	8d 91       	ld	r24, X+
   12bba:	9c 91       	ld	r25, X
   12bbc:	11 97       	sbiw	r26, 0x01	; 1
   12bbe:	87 30       	cpi	r24, 0x07	; 7
   12bc0:	91 05       	cpc	r25, r1
   12bc2:	08 f0       	brcs	.+2      	; 0x12bc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
   12bc4:	e8 c0       	rjmp	.+464    	; 0x12d96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
   12bc6:	85 30       	cpi	r24, 0x05	; 5
   12bc8:	91 05       	cpc	r25, r1
   12bca:	08 f0       	brcs	.+2      	; 0x12bce <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
   12bcc:	f2 c0       	rjmp	.+484    	; 0x12db2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
   12bce:	03 97       	sbiw	r24, 0x03	; 3
   12bd0:	08 f0       	brcs	.+2      	; 0x12bd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
   12bd2:	01 c1       	rjmp	.+514    	; 0x12dd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12bd4:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   12bd6:	29 96       	adiw	r28, 0x09	; 9
   12bd8:	6f af       	std	Y+63, r22	; 0x3f
   12bda:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   12bdc:	2a 96       	adiw	r28, 0x0a	; 10
   12bde:	0f af       	std	Y+63, r16	; 0x3f
   12be0:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   12be2:	2b 96       	adiw	r28, 0x0b	; 11
   12be4:	1f af       	std	Y+63, r17	; 0x3f
   12be6:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   12be8:	2c 96       	adiw	r28, 0x0c	; 12
   12bea:	cf ae       	std	Y+63, r12	; 0x3f
   12bec:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   12bee:	2d 96       	adiw	r28, 0x0d	; 13
   12bf0:	df ae       	std	Y+63, r13	; 0x3f
   12bf2:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   12bf4:	2e 96       	adiw	r28, 0x0e	; 14
   12bf6:	3f ae       	std	Y+63, r3	; 0x3f
   12bf8:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
   12bfa:	ce 01       	movw	r24, r28
   12bfc:	88 5b       	subi	r24, 0xB8	; 184
   12bfe:	9f 4f       	sbci	r25, 0xFF	; 255
   12c00:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
   12c04:	6c eb       	ldi	r22, 0xBC	; 188
   12c06:	71 e8       	ldi	r23, 0x81	; 129
   12c08:	c5 01       	movw	r24, r10
   12c0a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
  strcat_P(str1, global_time_ntp);
   12c0e:	60 e5       	ldi	r22, 0x50	; 80
   12c10:	71 e8       	ldi	r23, 0x81	; 129
   12c12:	c5 01       	movw	r24, r10
   12c14:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
  if (strcmp(str1, topic) == 0)
   12c18:	b4 01       	movw	r22, r8
   12c1a:	c5 01       	movw	r24, r10
   12c1c:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12c20:	89 2b       	or	r24, r25
   12c22:	e9 f4       	brne	.+58     	; 0x12c5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
  {
    mqtt_process_message++;
   12c24:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12c28:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12c2c:	01 96       	adiw	r24, 0x01	; 1
   12c2e:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12c32:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   12c36:	81 e0       	ldi	r24, 0x01	; 1
   12c38:	90 e0       	ldi	r25, 0x00	; 0
   12c3a:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
   12c3e:	ae 01       	movw	r20, r28
   12c40:	44 5c       	subi	r20, 0xC4	; 196
   12c42:	5e 4f       	sbci	r21, 0xFE	; 254
   12c44:	68 2f       	mov	r22, r24
   12c46:	ce 01       	movw	r24, r28
   12c48:	01 96       	adiw	r24, 0x01	; 1
   12c4a:	0e 94 b5 bf 	call	0x17f6a	; 0x17f6a <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
   12c4e:	81 30       	cpi	r24, 0x01	; 1
   12c50:	09 f0       	breq	.+2      	; 0x12c54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e8>
   12c52:	ee c0       	rjmp	.+476    	; 0x12e30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   12c54:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   12c58:	8d 7f       	andi	r24, 0xFD	; 253
   12c5a:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
   12c5e:	6c eb       	ldi	r22, 0xBC	; 188
   12c60:	71 e8       	ldi	r23, 0x81	; 129
   12c62:	c5 01       	movw	r24, r10
   12c64:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  strcat_P(str1, global_time_offset);
   12c68:	69 e3       	ldi	r22, 0x39	; 57
   12c6a:	71 e8       	ldi	r23, 0x81	; 129
   12c6c:	c5 01       	movw	r24, r10
   12c6e:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
  if (strcmp(str1, topic) == 0)
   12c72:	b4 01       	movw	r22, r8
   12c74:	c5 01       	movw	r24, r10
   12c76:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12c7a:	89 2b       	or	r24, r25
   12c7c:	91 f4       	brne	.+36     	; 0x12ca2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
  {
    mqtt_process_message++;
   12c7e:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12c82:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12c86:	01 96       	adiw	r24, 0x01	; 1
   12c88:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12c8c:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
    time_set_offset(atoi(my_payload));
   12c90:	86 ea       	ldi	r24, 0xA6	; 166
   12c92:	98 e0       	ldi	r25, 0x08	; 8
   12c94:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   12c98:	68 2f       	mov	r22, r24
   12c9a:	81 e0       	ldi	r24, 0x01	; 1
   12c9c:	90 e0       	ldi	r25, 0x00	; 0
   12c9e:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
   12ca2:	6c eb       	ldi	r22, 0xBC	; 188
   12ca4:	71 e8       	ldi	r23, 0x81	; 129
   12ca6:	c5 01       	movw	r24, r10
   12ca8:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
  strcat(str1, device.nazev);
   12cac:	6b ec       	ldi	r22, 0xCB	; 203
   12cae:	7d e0       	ldi	r23, 0x0D	; 13
   12cb0:	c5 01       	movw	r24, r10
   12cb2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
  strcat(str1, "/tds/associate");
   12cb6:	65 e7       	ldi	r22, 0x75	; 117
   12cb8:	74 e0       	ldi	r23, 0x04	; 4
   12cba:	c5 01       	movw	r24, r10
   12cbc:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  if (strcmp(str1, topic) == 0)
   12cc0:	b4 01       	movw	r22, r8
   12cc2:	c5 01       	movw	r24, r10
   12cc4:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2058
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
   12cc8:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
   12cca:	89 2b       	or	r24, r25
   12ccc:	b1 f4       	brne	.+44     	; 0x12cfa <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
  {
    mqtt_process_message++;
   12cce:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12cd2:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12cd6:	01 96       	adiw	r24, 0x01	; 1
   12cd8:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12cdc:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2124
    id = atoi(my_payload);
   12ce0:	86 ea       	ldi	r24, 0xA6	; 166
   12ce2:	98 e0       	ldi	r25, 0x08	; 8
   12ce4:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   12ce8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
    if (tds_associate(id) == 255)
   12cea:	0e 94 c9 76 	call	0xed92	; 0xed92 <tds_associate(unsigned char)>
   12cee:	8f 3f       	cpi	r24, 0xFF	; 255
   12cf0:	21 f4       	brne	.+8      	; 0x12cfa <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2126
      log_error(&mqtt_client, "E");
   12cf2:	81 ea       	ldi	r24, 0xA1	; 161
   12cf4:	93 e0       	ldi	r25, 0x03	; 3
   12cf6:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
   12cfa:	6c eb       	ldi	r22, 0xBC	; 188
   12cfc:	71 e8       	ldi	r23, 0x81	; 129
   12cfe:	c5 01       	movw	r24, r10
   12d00:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2133
  strcat(str1, device.nazev);
   12d04:	6b ec       	ldi	r22, 0xCB	; 203
   12d06:	7d e0       	ldi	r23, 0x0D	; 13
   12d08:	c5 01       	movw	r24, r10
   12d0a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
  strcat(str1, "/tds/set/");
   12d0e:	64 e8       	ldi	r22, 0x84	; 132
   12d10:	74 e0       	ldi	r23, 0x04	; 4
   12d12:	c5 01       	movw	r24, r10
   12d14:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2135
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12d18:	f5 01       	movw	r30, r10
   12d1a:	01 90       	ld	r0, Z+
   12d1c:	00 20       	and	r0, r0
   12d1e:	e9 f7       	brne	.-6      	; 0x12d1a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ae>
   12d20:	31 97       	sbiw	r30, 0x01	; 1
   12d22:	af 01       	movw	r20, r30
   12d24:	4a 19       	sub	r20, r10
   12d26:	5b 09       	sbc	r21, r11
   12d28:	b4 01       	movw	r22, r8
   12d2a:	c5 01       	movw	r24, r10
   12d2c:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   12d30:	89 2b       	or	r24, r25
   12d32:	09 f0       	breq	.+2      	; 0x12d36 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ca>
   12d34:	01 c1       	rjmp	.+514    	; 0x12f38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2137
  {
    mqtt_process_message++;
   12d36:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12d3a:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12d3e:	01 96       	adiw	r24, 0x01	; 1
   12d40:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12d44:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12d48:	f5 01       	movw	r30, r10
   12d4a:	01 90       	ld	r0, Z+
   12d4c:	00 20       	and	r0, r0
   12d4e:	e9 f7       	brne	.-6      	; 0x12d4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3de>
   12d50:	31 97       	sbiw	r30, 0x01	; 1
   12d52:	ea 19       	sub	r30, r10
   12d54:	fb 09       	sbc	r31, r11
   12d56:	9e 2f       	mov	r25, r30
   12d58:	4e 2f       	mov	r20, r30
   12d5a:	84 2f       	mov	r24, r20
   12d5c:	89 1b       	sub	r24, r25
   12d5e:	24 2f       	mov	r18, r20
   12d60:	30 e0       	ldi	r19, 0x00	; 0
   12d62:	d4 01       	movw	r26, r8
   12d64:	0d 90       	ld	r0, X+
   12d66:	00 20       	and	r0, r0
   12d68:	e9 f7       	brne	.-6      	; 0x12d64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
   12d6a:	11 97       	sbiw	r26, 0x01	; 1
   12d6c:	a8 19       	sub	r26, r8
   12d6e:	b9 09       	sbc	r27, r9
   12d70:	2a 17       	cp	r18, r26
   12d72:	3b 07       	cpc	r19, r27
   12d74:	08 f0       	brcs	.+2      	; 0x12d78 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40c>
   12d76:	60 c0       	rjmp	.+192    	; 0x12e38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2141
    {
      str1[cnt] = topic[f];
   12d78:	d5 01       	movw	r26, r10
   12d7a:	a8 0f       	add	r26, r24
   12d7c:	b1 1d       	adc	r27, r1
   12d7e:	28 0d       	add	r18, r8
   12d80:	39 1d       	adc	r19, r9
   12d82:	f9 01       	movw	r30, r18
   12d84:	80 81       	ld	r24, Z
   12d86:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
      str1[cnt + 1] = 0;
   12d88:	11 96       	adiw	r26, 0x01	; 1
   12d8a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12d8c:	4f 5f       	subi	r20, 0xFF	; 255
   12d8e:	e5 cf       	rjmp	.-54     	; 0x12d5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ee>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   12d90:	8c e2       	ldi	r24, 0x2C	; 44
   12d92:	9f e0       	ldi	r25, 0x0F	; 15
   12d94:	b2 ce       	rjmp	.-668    	; 0x12afa <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   12d96:	87 30       	cpi	r24, 0x07	; 7
   12d98:	91 05       	cpc	r25, r1
   12d9a:	b1 f0       	breq	.+44     	; 0x12dc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45c>
   12d9c:	0a 97       	sbiw	r24, 0x0a	; 10
   12d9e:	09 f0       	breq	.+2      	; 0x12da2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x436>
   12da0:	19 cf       	rjmp	.-462    	; 0x12bd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   12da2:	f7 01       	movw	r30, r14
   12da4:	62 81       	ldd	r22, Z+2	; 0x02
   12da6:	73 81       	ldd	r23, Z+3	; 0x03
   12da8:	84 81       	ldd	r24, Z+4	; 0x04
   12daa:	95 81       	ldd	r25, Z+5	; 0x05
   12dac:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
   12db0:	03 c0       	rjmp	.+6      	; 0x12db8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   12db2:	f7 01       	movw	r30, r14
   12db4:	62 81       	ldd	r22, Z+2	; 0x02
   12db6:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   12db8:	60 3d       	cpi	r22, 0xD0	; 208
   12dba:	f7 e0       	ldi	r31, 0x07	; 7
   12dbc:	7f 07       	cpc	r23, r31
   12dbe:	08 f4       	brcc	.+2      	; 0x12dc2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
   12dc0:	0a cf       	rjmp	.-492    	; 0x12bd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   12dc2:	60 5d       	subi	r22, 0xD0	; 208
   12dc4:	77 40       	sbci	r23, 0x07	; 7
   12dc6:	07 cf       	rjmp	.-498    	; 0x12bd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   12dc8:	12 96       	adiw	r26, 0x02	; 2
   12dca:	6d 91       	ld	r22, X+
   12dcc:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12dce:	71 95       	neg	r23
   12dd0:	61 95       	neg	r22
   12dd2:	71 09       	sbc	r23, r1
   12dd4:	f1 cf       	rjmp	.-30     	; 0x12db8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   12dd6:	12 96       	adiw	r26, 0x02	; 2
   12dd8:	ed 91       	ld	r30, X+
   12dda:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12ddc:	30 97       	sbiw	r30, 0x00	; 0
   12dde:	09 f4       	brne	.+2      	; 0x12de2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
   12de0:	f9 ce       	rjmp	.-526    	; 0x12bd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   12de2:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
   12de4:	61 e0       	ldi	r22, 0x01	; 1
   12de6:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
   12de8:	84 37       	cpi	r24, 0x74	; 116
   12dea:	09 f4       	brne	.+2      	; 0x12dee <mqtt_callback(char*, unsigned char*, unsigned int)+0x482>
   12dec:	f4 ce       	rjmp	.-536    	; 0x12bd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   12dee:	8b 32       	cpi	r24, 0x2B	; 43
   12df0:	c9 f0       	breq	.+50     	; 0x12e24 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b8>
   12df2:	8d 32       	cpi	r24, 0x2D	; 45
   12df4:	c1 f4       	brne	.+48     	; 0x12e26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   12df6:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   12df8:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
   12dfa:	70 e0       	ldi	r23, 0x00	; 0
   12dfc:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   12dfe:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   12e00:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   12e02:	20 ed       	ldi	r18, 0xD0	; 208
   12e04:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   12e06:	2a 30       	cpi	r18, 0x0A	; 10
   12e08:	80 f4       	brcc	.+32     	; 0x12e2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x4be>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   12e0a:	46 9f       	mul	r20, r22
   12e0c:	90 01       	movw	r18, r0
   12e0e:	47 9f       	mul	r20, r23
   12e10:	30 0d       	add	r19, r0
   12e12:	11 24       	eor	r1, r1
   12e14:	b9 01       	movw	r22, r18
   12e16:	60 53       	subi	r22, 0x30	; 48
   12e18:	71 09       	sbc	r23, r1
   12e1a:	69 0f       	add	r22, r25
   12e1c:	71 1d       	adc	r23, r1
   12e1e:	97 fd       	sbrc	r25, 7
   12e20:	7a 95       	dec	r23
   12e22:	ee cf       	rjmp	.-36     	; 0x12e00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   12e24:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   12e26:	80 e0       	ldi	r24, 0x00	; 0
   12e28:	e8 cf       	rjmp	.-48     	; 0x12dfa <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12e2a:	81 11       	cpse	r24, r1
   12e2c:	d0 cf       	rjmp	.-96     	; 0x12dce <mqtt_callback(char*, unsigned char*, unsigned int)+0x462>
   12e2e:	c4 cf       	rjmp	.-120    	; 0x12db8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
   12e30:	81 e0       	ldi	r24, 0x01	; 1
   12e32:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
   12e36:	13 cf       	rjmp	.-474    	; 0x12c5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12e38:	6f e4       	ldi	r22, 0x4F	; 79
   12e3a:	75 e0       	ldi	r23, 0x05	; 5
   12e3c:	c5 01       	movw	r24, r10
   12e3e:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   12e42:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2145
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12e44:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
   12e46:	e8 e4       	ldi	r30, 0x48	; 72
   12e48:	ce 2e       	mov	r12, r30
   12e4a:	d1 2c       	mov	r13, r1
   12e4c:	cc 0e       	add	r12, r28
   12e4e:	dd 1e       	adc	r13, r29
   12e50:	fc e0       	ldi	r31, 0x0C	; 12
   12e52:	cf 0e       	add	r12, r31
   12e54:	d1 1c       	adc	r13, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    pch = strtok (str1, "/");
    while (pch != NULL)
   12e56:	01 15       	cp	r16, r1
   12e58:	11 05       	cpc	r17, r1
   12e5a:	09 f4       	brne	.+2      	; 0x12e5e <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f2>
   12e5c:	6d c0       	rjmp	.+218    	; 0x12f38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
    {
      if (cnt == 0) id = atoi(pch);
   12e5e:	61 10       	cpse	r6, r1
   12e60:	0d c0       	rjmp	.+26     	; 0x12e7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x510>
   12e62:	c8 01       	movw	r24, r16
   12e64:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   12e68:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
      if (id < HW_ONEWIRE_MAXROMS)
   12e6a:	25 e0       	ldi	r18, 0x05	; 5
   12e6c:	28 17       	cp	r18, r24
   12e6e:	08 f0       	brcs	.+2      	; 0x12e72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
   12e70:	5a c0       	rjmp	.+180    	; 0x12f26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   12e72:	81 ea       	ldi	r24, 0xA1	; 161
   12e74:	93 e0       	ldi	r25, 0x03	; 3
   12e76:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   12e7a:	55 c0       	rjmp	.+170    	; 0x12f26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
   12e7c:	85 e0       	ldi	r24, 0x05	; 5
   12e7e:	87 15       	cp	r24, r7
   12e80:	c0 f3       	brcs	.-16     	; 0x12e72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
   12e82:	91 e0       	ldi	r25, 0x01	; 1
   12e84:	69 12       	cpse	r6, r25
   12e86:	4f c0       	rjmp	.+158    	; 0x12f26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   12e88:	60 e0       	ldi	r22, 0x00	; 0
   12e8a:	74 e0       	ldi	r23, 0x04	; 4
   12e8c:	c8 01       	movw	r24, r16
   12e8e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12e92:	89 2b       	or	r24, r25
   12e94:	89 f4       	brne	.+34     	; 0x12eb8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x54c>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   12e96:	be 01       	movw	r22, r28
   12e98:	68 5b       	subi	r22, 0xB8	; 184
   12e9a:	7f 4f       	sbci	r23, 0xFF	; 255
   12e9c:	87 2d       	mov	r24, r7
   12e9e:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
   12ea2:	66 ea       	ldi	r22, 0xA6	; 166
   12ea4:	78 e0       	ldi	r23, 0x08	; 8
   12ea6:	c6 01       	movw	r24, r12
   12ea8:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
   12eac:	be 01       	movw	r22, r28
   12eae:	68 5b       	subi	r22, 0xB8	; 184
   12eb0:	7f 4f       	sbci	r23, 0xFF	; 255
   12eb2:	87 2d       	mov	r24, r7
   12eb4:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2153
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
   12eb8:	6c ea       	ldi	r22, 0xAC	; 172
   12eba:	77 e0       	ldi	r23, 0x07	; 7
   12ebc:	c8 01       	movw	r24, r16
   12ebe:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12ec2:	89 2b       	or	r24, r25
   12ec4:	a9 f4       	brne	.+42     	; 0x12ef0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
   12ec6:	86 ea       	ldi	r24, 0xA6	; 166
   12ec8:	98 e0       	ldi	r25, 0x08	; 8
   12eca:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   12ece:	7c 01       	movw	r14, r24
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   12ed0:	be 01       	movw	r22, r28
   12ed2:	68 5b       	subi	r22, 0xB8	; 184
   12ed4:	7f 4f       	sbci	r23, 0xFF	; 255
   12ed6:	87 2d       	mov	r24, r7
   12ed8:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
   12edc:	64 96       	adiw	r28, 0x14	; 20
   12ede:	ff ae       	std	Y+63, r15	; 0x3f
   12ee0:	ee ae       	std	Y+62, r14	; 0x3e
   12ee2:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
   12ee4:	be 01       	movw	r22, r28
   12ee6:	68 5b       	subi	r22, 0xB8	; 184
   12ee8:	7f 4f       	sbci	r23, 0xFF	; 255
   12eea:	87 2d       	mov	r24, r7
   12eec:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2154
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
   12ef0:	63 e2       	ldi	r22, 0x23	; 35
   12ef2:	76 e0       	ldi	r23, 0x06	; 6
   12ef4:	c8 01       	movw	r24, r16
   12ef6:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   12efa:	89 2b       	or	r24, r25
   12efc:	a1 f4       	brne	.+40     	; 0x12f26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   12efe:	86 ea       	ldi	r24, 0xA6	; 166
   12f00:	98 e0       	ldi	r25, 0x08	; 8
   12f02:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   12f06:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   12f08:	be 01       	movw	r22, r28
   12f0a:	68 5b       	subi	r22, 0xB8	; 184
   12f0c:	7f 4f       	sbci	r23, 0xFF	; 255
   12f0e:	87 2d       	mov	r24, r7
   12f10:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2154
   12f14:	6d 96       	adiw	r28, 0x1d	; 29
   12f16:	1f af       	std	Y+63, r17	; 0x3f
   12f18:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
   12f1a:	be 01       	movw	r22, r28
   12f1c:	68 5b       	subi	r22, 0xB8	; 184
   12f1e:	7f 4f       	sbci	r23, 0xFF	; 255
   12f20:	87 2d       	mov	r24, r7
   12f22:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2160
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   12f26:	6f e4       	ldi	r22, 0x4F	; 79
   12f28:	75 e0       	ldi	r23, 0x05	; 5
   12f2a:	90 e0       	ldi	r25, 0x00	; 0
   12f2c:	80 e0       	ldi	r24, 0x00	; 0
   12f2e:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   12f32:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2161
      cnt++;
   12f34:	63 94       	inc	r6
   12f36:	8f cf       	rjmp	.-226    	; 0x12e56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
   12f38:	6c eb       	ldi	r22, 0xBC	; 188
   12f3a:	71 e8       	ldi	r23, 0x81	; 129
   12f3c:	c5 01       	movw	r24, r10
   12f3e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
  strcat(str1, device.nazev);
   12f42:	6b ec       	ldi	r22, 0xCB	; 203
   12f44:	7d e0       	ldi	r23, 0x0D	; 13
   12f46:	c5 01       	movw	r24, r10
   12f48:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
  strcat(str1, "/tds/clear");
   12f4c:	6e e8       	ldi	r22, 0x8E	; 142
   12f4e:	74 e0       	ldi	r23, 0x04	; 4
   12f50:	c5 01       	movw	r24, r10
   12f52:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12f56:	f5 01       	movw	r30, r10
   12f58:	01 90       	ld	r0, Z+
   12f5a:	00 20       	and	r0, r0
   12f5c:	e9 f7       	brne	.-6      	; 0x12f58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ec>
   12f5e:	31 97       	sbiw	r30, 0x01	; 1
   12f60:	af 01       	movw	r20, r30
   12f62:	4a 19       	sub	r20, r10
   12f64:	5b 09       	sbc	r21, r11
   12f66:	b4 01       	movw	r22, r8
   12f68:	c5 01       	movw	r24, r10
   12f6a:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   12f6e:	89 2b       	or	r24, r25
   12f70:	a1 f4       	brne	.+40     	; 0x12f9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
  {
    mqtt_process_message++;
   12f72:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12f76:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12f7a:	01 96       	adiw	r24, 0x01	; 1
   12f7c:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12f80:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2172
    id = atoi(my_payload);
   12f84:	86 ea       	ldi	r24, 0xA6	; 166
   12f86:	98 e0       	ldi	r25, 0x08	; 8
   12f88:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   12f8c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173
    if (id < HW_ONEWIRE_MAXROMS)
   12f8e:	a5 e0       	ldi	r26, 0x05	; 5
   12f90:	a8 17       	cp	r26, r24
   12f92:	08 f4       	brcc	.+2      	; 0x12f96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
   12f94:	83 c0       	rjmp	.+262    	; 0x1309c <mqtt_callback(char*, unsigned char*, unsigned int)+0x730>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2174
      tds_set_clear(id);
   12f96:	0e 94 a0 77 	call	0xef40	; 0xef40 <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  ///
  //// thermctl-in/XXXXX/rtds-control/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
   12f9a:	6c eb       	ldi	r22, 0xBC	; 188
   12f9c:	71 e8       	ldi	r23, 0x81	; 129
   12f9e:	c5 01       	movw	r24, r10
   12fa0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2184
  strcat(str1, device.nazev);
   12fa4:	6b ec       	ldi	r22, 0xCB	; 203
   12fa6:	7d e0       	ldi	r23, 0x0D	; 13
   12fa8:	c5 01       	movw	r24, r10
   12faa:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
  strcat(str1, "/rtds-control/register");
   12fae:	69 e9       	ldi	r22, 0x99	; 153
   12fb0:	74 e0       	ldi	r23, 0x04	; 4
   12fb2:	c5 01       	movw	r24, r10
   12fb4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12fb8:	f5 01       	movw	r30, r10
   12fba:	01 90       	ld	r0, Z+
   12fbc:	00 20       	and	r0, r0
   12fbe:	e9 f7       	brne	.-6      	; 0x12fba <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
   12fc0:	31 97       	sbiw	r30, 0x01	; 1
   12fc2:	af 01       	movw	r20, r30
   12fc4:	4a 19       	sub	r20, r10
   12fc6:	5b 09       	sbc	r21, r11
   12fc8:	b4 01       	movw	r22, r8
   12fca:	c5 01       	movw	r24, r10
   12fcc:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   12fd0:	89 2b       	or	r24, r25
   12fd2:	d1 f4       	brne	.+52     	; 0x13008 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
  {
    mqtt_process_message++;
   12fd4:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   12fd8:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   12fdc:	01 96       	adiw	r24, 0x01	; 1
   12fde:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   12fe2:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
    if (remote_tds_name_exist(my_payload) == 255)
   12fe6:	86 ea       	ldi	r24, 0xA6	; 166
   12fe8:	98 e0       	ldi	r25, 0x08	; 8
   12fea:	0e 94 0d 80 	call	0x1001a	; 0x1001a <remote_tds_name_exist(char*)>
   12fee:	8f 3f       	cpi	r24, 0xFF	; 255
   12ff0:	59 f4       	brne	.+22     	; 0x13008 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
    {
      id = remote_tds_find_free();
   12ff2:	0e 94 e0 7a 	call	0xf5c0	; 0xf5c0 <remote_tds_find_free()>
   12ff6:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192
      remote_tds_set_complete(id, 1, my_payload);
   12ff8:	46 ea       	ldi	r20, 0xA6	; 166
   12ffa:	58 e0       	ldi	r21, 0x08	; 8
   12ffc:	61 e0       	ldi	r22, 0x01	; 1
   12ffe:	0e 94 c7 71 	call	0xe38e	; 0xe38e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2193
      remote_tds_subscibe_topic(id);
   13002:	87 2d       	mov	r24, r7
   13004:	0e 94 6d 80 	call	0x100da	; 0x100da <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
    }
    ///TODO - vratit ze jiz existuje
  }
  ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
   13008:	6c eb       	ldi	r22, 0xBC	; 188
   1300a:	71 e8       	ldi	r23, 0x81	; 129
   1300c:	c5 01       	movw	r24, r10
   1300e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2200
  strcat(str1, device.nazev);
   13012:	6b ec       	ldi	r22, 0xCB	; 203
   13014:	7d e0       	ldi	r23, 0x0D	; 13
   13016:	c5 01       	movw	r24, r10
   13018:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2201
  strcat(str1, "/rtds-control/set/");
   1301c:	60 eb       	ldi	r22, 0xB0	; 176
   1301e:	74 e0       	ldi	r23, 0x04	; 4
   13020:	c5 01       	movw	r24, r10
   13022:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2202
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13026:	f5 01       	movw	r30, r10
   13028:	01 90       	ld	r0, Z+
   1302a:	00 20       	and	r0, r0
   1302c:	e9 f7       	brne	.-6      	; 0x13028 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6bc>
   1302e:	31 97       	sbiw	r30, 0x01	; 1
   13030:	af 01       	movw	r20, r30
   13032:	4a 19       	sub	r20, r10
   13034:	5b 09       	sbc	r21, r11
   13036:	b4 01       	movw	r22, r8
   13038:	c5 01       	movw	r24, r10
   1303a:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   1303e:	89 2b       	or	r24, r25
   13040:	09 f0       	breq	.+2      	; 0x13044 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6d8>
   13042:	6a c0       	rjmp	.+212    	; 0x13118 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204
  {
    mqtt_process_message++;
   13044:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13048:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   1304c:	01 96       	adiw	r24, 0x01	; 1
   1304e:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   13052:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13056:	f5 01       	movw	r30, r10
   13058:	01 90       	ld	r0, Z+
   1305a:	00 20       	and	r0, r0
   1305c:	e9 f7       	brne	.-6      	; 0x13058 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ec>
   1305e:	31 97       	sbiw	r30, 0x01	; 1
   13060:	ea 19       	sub	r30, r10
   13062:	fb 09       	sbc	r31, r11
   13064:	9e 2f       	mov	r25, r30
   13066:	4e 2f       	mov	r20, r30
   13068:	84 2f       	mov	r24, r20
   1306a:	89 1b       	sub	r24, r25
   1306c:	24 2f       	mov	r18, r20
   1306e:	30 e0       	ldi	r19, 0x00	; 0
   13070:	d4 01       	movw	r26, r8
   13072:	0d 90       	ld	r0, X+
   13074:	00 20       	and	r0, r0
   13076:	e9 f7       	brne	.-6      	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
   13078:	11 97       	sbiw	r26, 0x01	; 1
   1307a:	a8 19       	sub	r26, r8
   1307c:	b9 09       	sbc	r27, r9
   1307e:	2a 17       	cp	r18, r26
   13080:	3b 07       	cpc	r19, r27
   13082:	88 f4       	brcc	.+34     	; 0x130a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x73a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2208
    {
      str1[cnt] = topic[f];
   13084:	d5 01       	movw	r26, r10
   13086:	a8 0f       	add	r26, r24
   13088:	b1 1d       	adc	r27, r1
   1308a:	28 0d       	add	r18, r8
   1308c:	39 1d       	adc	r19, r9
   1308e:	f9 01       	movw	r30, r18
   13090:	80 81       	ld	r24, Z
   13092:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
      str1[cnt + 1] = 0;
   13094:	11 96       	adiw	r26, 0x01	; 1
   13096:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
  strcat(str1, "/rtds-control/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13098:	4f 5f       	subi	r20, 0xFF	; 255
   1309a:	e6 cf       	rjmp	.-52     	; 0x13068 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "E");
   1309c:	81 ea       	ldi	r24, 0xA1	; 161
   1309e:	93 e0       	ldi	r25, 0x03	; 3
   130a0:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   130a4:	7a cf       	rjmp	.-268    	; 0x12f9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2213
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   130a6:	6f e4       	ldi	r22, 0x4F	; 79
   130a8:	75 e0       	ldi	r23, 0x05	; 5
   130aa:	c5 01       	movw	r24, r10
   130ac:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2212
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   130b0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
    pch = strtok (str1, "/");
    while (pch != NULL)
   130b2:	00 97       	sbiw	r24, 0x00	; 0
   130b4:	89 f1       	breq	.+98     	; 0x13118 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
    {
      if (cnt == 0) id = atoi(pch);
   130b6:	11 11       	cpse	r17, r1
   130b8:	0b c0       	rjmp	.+22     	; 0x130d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x764>
   130ba:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   130be:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2230
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
   130c0:	6f e4       	ldi	r22, 0x4F	; 79
   130c2:	75 e0       	ldi	r23, 0x05	; 5
   130c4:	90 e0       	ldi	r25, 0x00	; 0
   130c6:	80 e0       	ldi	r24, 0x00	; 0
   130c8:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2231
      cnt++;
   130cc:	1f 5f       	subi	r17, 0xFF	; 255
   130ce:	f1 cf       	rjmp	.-30     	; 0x130b2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x746>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
   130d0:	11 30       	cpi	r17, 0x01	; 1
   130d2:	b1 f7       	brne	.-20     	; 0x130c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
   130d4:	60 e0       	ldi	r22, 0x00	; 0
   130d6:	74 e0       	ldi	r23, 0x04	; 4
   130d8:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   130dc:	89 2b       	or	r24, r25
   130de:	81 f7       	brne	.-32     	; 0x130c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
      {
        remote_tds_get_active(id, &active);
   130e0:	be 01       	movw	r22, r28
   130e2:	6a 5b       	subi	r22, 0xBA	; 186
   130e4:	7e 4f       	sbci	r23, 0xFE	; 254
   130e6:	87 2d       	mov	r24, r7
   130e8:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
        if (active == 0)
   130ec:	ca 5b       	subi	r28, 0xBA	; 186
   130ee:	de 4f       	sbci	r29, 0xFE	; 254
   130f0:	88 81       	ld	r24, Y
   130f2:	c6 54       	subi	r28, 0x46	; 70
   130f4:	d1 40       	sbci	r29, 0x01	; 1
   130f6:	81 11       	cpse	r24, r1
   130f8:	0a c0       	rjmp	.+20     	; 0x1310e <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2222
        {
          remote_tds_set_complete(id, 1, my_payload);
   130fa:	46 ea       	ldi	r20, 0xA6	; 166
   130fc:	58 e0       	ldi	r21, 0x08	; 8
   130fe:	61 e0       	ldi	r22, 0x01	; 1
   13100:	87 2d       	mov	r24, r7
   13102:	0e 94 c7 71 	call	0xe38e	; 0xe38e <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2223
          remote_tds_subscibe_topic(id);
   13106:	87 2d       	mov	r24, r7
   13108:	0e 94 6d 80 	call	0x100da	; 0x100da <remote_tds_subscibe_topic(unsigned char)>
   1310c:	d9 cf       	rjmp	.-78     	; 0x130c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
   1310e:	83 ec       	ldi	r24, 0xC3	; 195
   13110:	94 e0       	ldi	r25, 0x04	; 4
   13112:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13116:	d4 cf       	rjmp	.-88     	; 0x130c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
      cnt++;
    }
  }
  ///
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
   13118:	6c eb       	ldi	r22, 0xBC	; 188
   1311a:	71 e8       	ldi	r23, 0x81	; 129
   1311c:	c5 01       	movw	r24, r10
   1311e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
  strcat(str1, device.nazev);
   13122:	6b ec       	ldi	r22, 0xCB	; 203
   13124:	7d e0       	ldi	r23, 0x0D	; 13
   13126:	c5 01       	movw	r24, r10
   13128:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  strcat(str1, "/rtds-control/clear");
   1312c:	63 ed       	ldi	r22, 0xD3	; 211
   1312e:	74 e0       	ldi	r23, 0x04	; 4
   13130:	c5 01       	movw	r24, r10
   13132:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13136:	f5 01       	movw	r30, r10
   13138:	01 90       	ld	r0, Z+
   1313a:	00 20       	and	r0, r0
   1313c:	e9 f7       	brne	.-6      	; 0x13138 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
   1313e:	31 97       	sbiw	r30, 0x01	; 1
   13140:	af 01       	movw	r20, r30
   13142:	4a 19       	sub	r20, r10
   13144:	5b 09       	sbc	r21, r11
   13146:	b4 01       	movw	r22, r8
   13148:	c5 01       	movw	r24, r10
   1314a:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   1314e:	89 2b       	or	r24, r25
   13150:	09 f0       	breq	.+2      	; 0x13154 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e8>
   13152:	74 c0       	rjmp	.+232    	; 0x1323c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2241
  {
    mqtt_process_message++;
   13154:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13158:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   1315c:	01 96       	adiw	r24, 0x01	; 1
   1315e:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   13162:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2242
    id = atoi(my_payload);
   13166:	86 ea       	ldi	r24, 0xA6	; 166
   13168:	98 e0       	ldi	r25, 0x08	; 8
   1316a:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   1316e:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1864
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
   13170:	c8 5f       	subi	r28, 0xF8	; 248
   13172:	de 4f       	sbci	r29, 0xFE	; 254
   13174:	18 82       	st	Y, r1
   13176:	c8 50       	subi	r28, 0x08	; 8
   13178:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
  remote_tds_get_complete(idx, &active, tmp1);
   1317a:	ae 01       	movw	r20, r28
   1317c:	48 57       	subi	r20, 0x78	; 120
   1317e:	5f 4f       	sbci	r21, 0xFF	; 255
   13180:	be 01       	movw	r22, r28
   13182:	68 5f       	subi	r22, 0xF8	; 248
   13184:	7e 4f       	sbci	r23, 0xFE	; 254
   13186:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
  if (active == 1)
   1318a:	c8 5f       	subi	r28, 0xF8	; 248
   1318c:	de 4f       	sbci	r29, 0xFE	; 254
   1318e:	88 81       	ld	r24, Y
   13190:	c8 50       	subi	r28, 0x08	; 8
   13192:	d1 40       	sbci	r29, 0x01	; 1
   13194:	81 30       	cpi	r24, 0x01	; 1
   13196:	09 f0       	breq	.+2      	; 0x1319a <mqtt_callback(char*, unsigned char*, unsigned int)+0x82e>
   13198:	4e c0       	rjmp	.+156    	; 0x13236 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1868
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash);
   1319a:	8e 01       	movw	r16, r28
   1319c:	08 5b       	subi	r16, 0xB8	; 184
   1319e:	1f 4f       	sbci	r17, 0xFF	; 255
   131a0:	62 e3       	ldi	r22, 0x32	; 50
   131a2:	71 e8       	ldi	r23, 0x81	; 129
   131a4:	c8 01       	movw	r24, r16
   131a6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1869
    strcat(tmp2, tmp1);
   131aa:	be 01       	movw	r22, r28
   131ac:	68 57       	subi	r22, 0x78	; 120
   131ae:	7f 4f       	sbci	r23, 0xFF	; 255
   131b0:	c8 01       	movw	r24, r16
   131b2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1870
    strcat(tmp2, "/#");
   131b6:	63 e8       	ldi	r22, 0x83	; 131
   131b8:	76 e0       	ldi	r23, 0x06	; 6
   131ba:	c8 01       	movw	r24, r16
   131bc:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   131c0:	d8 01       	movw	r26, r16
   131c2:	0d 90       	ld	r0, X+
   131c4:	00 20       	and	r0, r0
   131c6:	e9 f7       	brne	.-6      	; 0x131c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x856>
   131c8:	cd 01       	movw	r24, r26
   131ca:	80 1b       	sub	r24, r16
   131cc:	91 0b       	sbc	r25, r17
   131ce:	08 96       	adiw	r24, 0x08	; 8
   131d0:	81 30       	cpi	r24, 0x01	; 1
   131d2:	92 40       	sbci	r25, 0x02	; 2
   131d4:	80 f5       	brcc	.+96     	; 0x13236 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
   131d6:	8b ec       	ldi	r24, 0xCB	; 203
   131d8:	9f e0       	ldi	r25, 0x0F	; 15
   131da:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   131de:	88 23       	and	r24, r24
   131e0:	51 f1       	breq	.+84     	; 0x13236 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
   131e2:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <mqtt_client+0x202>
   131e6:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <mqtt_client+0x203>
   131ea:	01 96       	adiw	r24, 0x01	; 1
   131ec:	90 93 ce 11 	sts	0x11CE, r25	; 0x8011ce <mqtt_client+0x203>
   131f0:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
   131f4:	89 2b       	or	r24, r25
   131f6:	31 f4       	brne	.+12     	; 0x13204 <mqtt_callback(char*, unsigned char*, unsigned int)+0x898>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
   131f8:	81 e0       	ldi	r24, 0x01	; 1
   131fa:	90 e0       	ldi	r25, 0x00	; 0
   131fc:	90 93 ce 11 	sts	0x11CE, r25	; 0x8011ce <mqtt_client+0x203>
   13200:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
   13204:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <mqtt_client+0x202>
   13208:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <mqtt_client+0x203>
   1320c:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
   13210:	80 93 d3 0f 	sts	0x0FD3, r24	; 0x800fd3 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
   13214:	47 e0       	ldi	r20, 0x07	; 7
   13216:	50 e0       	ldi	r21, 0x00	; 0
   13218:	6d ec       	ldi	r22, 0xCD	; 205
   1321a:	7f e0       	ldi	r23, 0x0F	; 15
   1321c:	c8 01       	movw	r24, r16
   1321e:	0e 94 70 ba 	call	0x174e0	; 0x174e0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
   13222:	9c 01       	movw	r18, r24
   13224:	25 50       	subi	r18, 0x05	; 5
   13226:	31 09       	sbc	r19, r1
   13228:	4d ec       	ldi	r20, 0xCD	; 205
   1322a:	5f e0       	ldi	r21, 0x0F	; 15
   1322c:	62 ea       	ldi	r22, 0xA2	; 162
   1322e:	8b ec       	ldi	r24, 0xCB	; 203
   13230:	9f e0       	ldi	r25, 0x0F	; 15
   13232:	0e 94 97 6a 	call	0xd52e	; 0xd52e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2245
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
   13236:	87 2d       	mov	r24, r7
   13238:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2249
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
   1323c:	6c eb       	ldi	r22, 0xBC	; 188
   1323e:	71 e8       	ldi	r23, 0x81	; 129
   13240:	c5 01       	movw	r24, r10
   13242:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2250
  strcat(str1, device.nazev);
   13246:	6b ec       	ldi	r22, 0xCB	; 203
   13248:	7d e0       	ldi	r23, 0x0D	; 13
   1324a:	c5 01       	movw	r24, r10
   1324c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2251
  strcat(str1, "/rtds-control/get");
   13250:	67 ee       	ldi	r22, 0xE7	; 231
   13252:	74 e0       	ldi	r23, 0x04	; 4
   13254:	c5 01       	movw	r24, r10
   13256:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2252
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1325a:	f5 01       	movw	r30, r10
   1325c:	01 90       	ld	r0, Z+
   1325e:	00 20       	and	r0, r0
   13260:	e9 f7       	brne	.-6      	; 0x1325c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f0>
   13262:	31 97       	sbiw	r30, 0x01	; 1
   13264:	af 01       	movw	r20, r30
   13266:	4a 19       	sub	r20, r10
   13268:	5b 09       	sbc	r21, r11
   1326a:	b4 01       	movw	r22, r8
   1326c:	c5 01       	movw	r24, r10
   1326e:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   13272:	89 2b       	or	r24, r25
   13274:	11 f4       	brne	.+4      	; 0x1327a <mqtt_callback(char*, unsigned char*, unsigned int)+0x90e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
  {
    send_mqtt_remote_tds_status();
   13276:	0e 94 77 7f 	call	0xfeee	; 0xfeee <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2258
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
   1327a:	62 e3       	ldi	r22, 0x32	; 50
   1327c:	71 e8       	ldi	r23, 0x81	; 129
   1327e:	c5 01       	movw	r24, r10
   13280:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13284:	f5 01       	movw	r30, r10
   13286:	01 90       	ld	r0, Z+
   13288:	00 20       	and	r0, r0
   1328a:	e9 f7       	brne	.-6      	; 0x13286 <mqtt_callback(char*, unsigned char*, unsigned int)+0x91a>
   1328c:	31 97       	sbiw	r30, 0x01	; 1
   1328e:	af 01       	movw	r20, r30
   13290:	4a 19       	sub	r20, r10
   13292:	5b 09       	sbc	r21, r11
   13294:	b4 01       	movw	r22, r8
   13296:	c5 01       	movw	r24, r10
   13298:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   1329c:	89 2b       	or	r24, r25
   1329e:	09 f0       	breq	.+2      	; 0x132a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
   132a0:	9a c0       	rjmp	.+308    	; 0x133d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2261
  {
    mqtt_process_message++;
   132a2:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   132a6:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   132aa:	01 96       	adiw	r24, 0x01	; 1
   132ac:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   132b0:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   132b4:	f5 01       	movw	r30, r10
   132b6:	01 90       	ld	r0, Z+
   132b8:	00 20       	and	r0, r0
   132ba:	e9 f7       	brne	.-6      	; 0x132b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x94a>
   132bc:	31 97       	sbiw	r30, 0x01	; 1
   132be:	ea 19       	sub	r30, r10
   132c0:	fb 09       	sbc	r31, r11
   132c2:	9e 2f       	mov	r25, r30
   132c4:	4e 2f       	mov	r20, r30
   132c6:	84 2f       	mov	r24, r20
   132c8:	89 1b       	sub	r24, r25
   132ca:	24 2f       	mov	r18, r20
   132cc:	30 e0       	ldi	r19, 0x00	; 0
   132ce:	d4 01       	movw	r26, r8
   132d0:	0d 90       	ld	r0, X+
   132d2:	00 20       	and	r0, r0
   132d4:	e9 f7       	brne	.-6      	; 0x132d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x964>
   132d6:	11 97       	sbiw	r26, 0x01	; 1
   132d8:	a8 19       	sub	r26, r8
   132da:	b9 09       	sbc	r27, r9
   132dc:	2a 17       	cp	r18, r26
   132de:	3b 07       	cpc	r19, r27
   132e0:	60 f4       	brcc	.+24     	; 0x132fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2265
    {
      str1[cnt] = topic[f];
   132e2:	d5 01       	movw	r26, r10
   132e4:	a8 0f       	add	r26, r24
   132e6:	b1 1d       	adc	r27, r1
   132e8:	28 0d       	add	r18, r8
   132ea:	39 1d       	adc	r19, r9
   132ec:	f9 01       	movw	r30, r18
   132ee:	80 81       	ld	r24, Z
   132f0:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
      str1[cnt + 1] = 0;
   132f2:	11 96       	adiw	r26, 0x01	; 1
   132f4:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   132f6:	4f 5f       	subi	r20, 0xFF	; 255
   132f8:	e6 cf       	rjmp	.-52     	; 0x132c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   132fa:	6f e4       	ldi	r22, 0x4F	; 79
   132fc:	75 e0       	ldi	r23, 0x05	; 5
   132fe:	c5 01       	movw	r24, r10
   13300:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13304:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
    pch = strtok (str1, "/");
    while (pch != NULL)
   13306:	00 97       	sbiw	r24, 0x00	; 0
   13308:	b9 f0       	breq	.+46     	; 0x13338 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
    {
      if (cnt == 0)
   1330a:	11 11       	cpse	r17, r1
   1330c:	0e c0       	rjmp	.+28     	; 0x1332a <mqtt_callback(char*, unsigned char*, unsigned int)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
        strcpy(tmp1, pch);
   1330e:	bc 01       	movw	r22, r24
   13310:	ce 01       	movw	r24, r28
   13312:	88 57       	subi	r24, 0x78	; 120
   13314:	9f 4f       	sbci	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
      if (cnt == 1)
        strcpy(tmp2, pch);
   13316:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
      pch = strtok (NULL, "/");
   1331a:	6f e4       	ldi	r22, 0x4F	; 79
   1331c:	75 e0       	ldi	r23, 0x05	; 5
   1331e:	90 e0       	ldi	r25, 0x00	; 0
   13320:	80 e0       	ldi	r24, 0x00	; 0
   13322:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
      cnt++;
   13326:	1f 5f       	subi	r17, 0xFF	; 255
   13328:	ee cf       	rjmp	.-36     	; 0x13306 <mqtt_callback(char*, unsigned char*, unsigned int)+0x99a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0)
        strcpy(tmp1, pch);
      if (cnt == 1)
   1332a:	11 30       	cpi	r17, 0x01	; 1
   1332c:	b1 f7       	brne	.-20     	; 0x1331a <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2276
        strcpy(tmp2, pch);
   1332e:	bc 01       	movw	r22, r24
   13330:	ce 01       	movw	r24, r28
   13332:	88 5f       	subi	r24, 0xF8	; 248
   13334:	9e 4f       	sbci	r25, 0xFE	; 254
   13336:	ef cf       	rjmp	.-34     	; 0x13316 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   13338:	77 e6       	ldi	r23, 0x67	; 103
   1333a:	c7 2e       	mov	r12, r23
   1333c:	d1 2c       	mov	r13, r1
   1333e:	e1 2c       	mov	r14, r1
   13340:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   13342:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
    {
      uint8_t active = 0;
   13344:	29 96       	adiw	r28, 0x09	; 9
   13346:	1f ae       	std	Y+63, r1	; 0x3f
   13348:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2283
      str1[0] = 0;
   1334a:	d5 01       	movw	r26, r10
   1334c:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
      remote_tds_get_complete(idx, &active, str1);
   1334e:	a5 01       	movw	r20, r10
   13350:	be 01       	movw	r22, r28
   13352:	68 5b       	subi	r22, 0xB8	; 184
   13354:	7f 4f       	sbci	r23, 0xFF	; 255
   13356:	81 2f       	mov	r24, r17
   13358:	0e 94 2b 7b 	call	0xf656	; 0xf656 <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
      if (active == 1 && strcmp(str1, tmp1) == 0)
   1335c:	29 96       	adiw	r28, 0x09	; 9
   1335e:	8f ad       	ldd	r24, Y+63	; 0x3f
   13360:	29 97       	sbiw	r28, 0x09	; 9
   13362:	81 30       	cpi	r24, 0x01	; 1
   13364:	59 f5       	brne	.+86     	; 0x133bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
   13366:	be 01       	movw	r22, r28
   13368:	68 57       	subi	r22, 0x78	; 120
   1336a:	7f 4f       	sbci	r23, 0xFF	; 255
   1336c:	c5 01       	movw	r24, r10
   1336e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13372:	89 2b       	or	r24, r25
   13374:	19 f5       	brne	.+70     	; 0x133bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
      {
        if (strcmp(tmp2, "value") == 0)
   13376:	61 e1       	ldi	r22, 0x11	; 17
   13378:	74 e0       	ldi	r23, 0x04	; 4
   1337a:	ce 01       	movw	r24, r28
   1337c:	88 5f       	subi	r24, 0xF8	; 248
   1337e:	9e 4f       	sbci	r25, 0xFE	; 254
   13380:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13384:	89 2b       	or	r24, r25
   13386:	41 f4       	brne	.+16     	; 0x13398 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288
          remote_tds_set_data(idx, atoi(my_payload));
   13388:	86 ea       	ldi	r24, 0xA6	; 166
   1338a:	98 e0       	ldi	r25, 0x08	; 8
   1338c:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13390:	bc 01       	movw	r22, r24
   13392:	81 2f       	mov	r24, r17
   13394:	0e 94 89 53 	call	0xa712	; 0xa712 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
        if (strcmp(tmp2, "type") == 0)
   13398:	67 e1       	ldi	r22, 0x17	; 23
   1339a:	74 e0       	ldi	r23, 0x04	; 4
   1339c:	ce 01       	movw	r24, r28
   1339e:	88 5f       	subi	r24, 0xF8	; 248
   133a0:	9e 4f       	sbci	r25, 0xFE	; 254
   133a2:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   133a6:	89 2b       	or	r24, r25
   133a8:	49 f4       	brne	.+18     	; 0x133bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2290
          remote_tds_set_type(idx, atoi(my_payload));
   133aa:	86 ea       	ldi	r24, 0xA6	; 166
   133ac:	98 e0       	ldi	r25, 0x08	; 8
   133ae:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   133b2:	48 2f       	mov	r20, r24
   133b4:	c7 01       	movw	r24, r14
   133b6:	b6 01       	movw	r22, r12
   133b8:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   133bc:	1f 5f       	subi	r17, 0xFF	; 255
   133be:	b4 e0       	ldi	r27, 0x04	; 4
   133c0:	cb 0e       	add	r12, r27
   133c2:	d1 1c       	adc	r13, r1
   133c4:	e1 1c       	adc	r14, r1
   133c6:	f1 1c       	adc	r15, r1
   133c8:	ef e8       	ldi	r30, 0x8F	; 143
   133ca:	ce 16       	cp	r12, r30
   133cc:	d1 04       	cpc	r13, r1
   133ce:	e1 04       	cpc	r14, r1
   133d0:	f1 04       	cpc	r15, r1
   133d2:	09 f0       	breq	.+2      	; 0x133d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
   133d4:	b7 cf       	rjmp	.-146    	; 0x13344 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2296
      }
    }
  }
  ///

  strcpy_P(str1, new_text_slash_rtds_control_list); /// /rtds-control/list"
   133d6:	6f e1       	ldi	r22, 0x1F	; 31
   133d8:	71 e8       	ldi	r23, 0x81	; 129
   133da:	c5 01       	movw	r24, r10
   133dc:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
   133e0:	6c eb       	ldi	r22, 0xBC	; 188
   133e2:	71 e8       	ldi	r23, 0x81	; 129
   133e4:	c5 01       	movw	r24, r10
   133e6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2312
  strcat(str1, device.nazev);
   133ea:	6b ec       	ldi	r22, 0xCB	; 203
   133ec:	7d e0       	ldi	r23, 0x0D	; 13
   133ee:	c5 01       	movw	r24, r10
   133f0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  strcat(str1, "/prog/set/");
   133f4:	69 ef       	ldi	r22, 0xF9	; 249
   133f6:	74 e0       	ldi	r23, 0x04	; 4
   133f8:	c5 01       	movw	r24, r10
   133fa:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
  if (strncmp(str1, topic, strlen(str1)) == 0)
   133fe:	f5 01       	movw	r30, r10
   13400:	01 90       	ld	r0, Z+
   13402:	00 20       	and	r0, r0
   13404:	e9 f7       	brne	.-6      	; 0x13400 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
   13406:	31 97       	sbiw	r30, 0x01	; 1
   13408:	af 01       	movw	r20, r30
   1340a:	4a 19       	sub	r20, r10
   1340c:	5b 09       	sbc	r21, r11
   1340e:	b4 01       	movw	r22, r8
   13410:	c5 01       	movw	r24, r10
   13412:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   13416:	89 2b       	or	r24, r25
   13418:	09 f0       	breq	.+2      	; 0x1341c <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
   1341a:	46 c0       	rjmp	.+140    	; 0x134a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  {
    mqtt_process_message++;
   1341c:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13420:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   13424:	01 96       	adiw	r24, 0x01	; 1
   13426:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   1342a:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1342e:	f5 01       	movw	r30, r10
   13430:	01 90       	ld	r0, Z+
   13432:	00 20       	and	r0, r0
   13434:	e9 f7       	brne	.-6      	; 0x13430 <mqtt_callback(char*, unsigned char*, unsigned int)+0xac4>
   13436:	31 97       	sbiw	r30, 0x01	; 1
   13438:	ea 19       	sub	r30, r10
   1343a:	fb 09       	sbc	r31, r11
   1343c:	9e 2f       	mov	r25, r30
   1343e:	4e 2f       	mov	r20, r30
   13440:	84 2f       	mov	r24, r20
   13442:	89 1b       	sub	r24, r25
   13444:	24 2f       	mov	r18, r20
   13446:	30 e0       	ldi	r19, 0x00	; 0
   13448:	d4 01       	movw	r26, r8
   1344a:	0d 90       	ld	r0, X+
   1344c:	00 20       	and	r0, r0
   1344e:	e9 f7       	brne	.-6      	; 0x1344a <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
   13450:	11 97       	sbiw	r26, 0x01	; 1
   13452:	a8 19       	sub	r26, r8
   13454:	b9 09       	sbc	r27, r9
   13456:	2a 17       	cp	r18, r26
   13458:	3b 07       	cpc	r19, r27
   1345a:	60 f4       	brcc	.+24     	; 0x13474 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320
    {
      str1[cnt] = topic[f];
   1345c:	d5 01       	movw	r26, r10
   1345e:	a8 0f       	add	r26, r24
   13460:	b1 1d       	adc	r27, r1
   13462:	28 0d       	add	r18, r8
   13464:	39 1d       	adc	r19, r9
   13466:	f9 01       	movw	r30, r18
   13468:	80 81       	ld	r24, Z
   1346a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
      str1[cnt + 1] = 0;
   1346c:	11 96       	adiw	r26, 0x01	; 1
   1346e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13470:	4f 5f       	subi	r20, 0xFF	; 255
   13472:	e6 cf       	rjmp	.-52     	; 0x13440 <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13474:	6f e4       	ldi	r22, 0x4F	; 79
   13476:	75 e0       	ldi	r23, 0x05	; 5
   13478:	c5 01       	movw	r24, r10
   1347a:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   1347e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13480:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   13482:	6d e4       	ldi	r22, 0x4D	; 77
   13484:	e6 2e       	mov	r14, r22
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
    pch = strtok (str1, "/");
    while (pch != NULL)
   13486:	01 15       	cp	r16, r1
   13488:	11 05       	cpc	r17, r1
   1348a:	71 f0       	breq	.+28     	; 0x134a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
    {
      if (cnt == 0) id = atoi(pch);
   1348c:	f1 10       	cpse	r15, r1
   1348e:	c7 c0       	rjmp	.+398    	; 0x1361e <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb2>
   13490:	c8 01       	movw	r24, r16
   13492:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13496:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
      if (id < AVAILABLE_PROGRAM)
   13498:	f7 e0       	ldi	r31, 0x07	; 7
   1349a:	f8 17       	cp	r31, r24
   1349c:	08 f0       	brcs	.+2      	; 0x134a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
   1349e:	e6 c0       	rjmp	.+460    	; 0x1366c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   134a0:	81 ea       	ldi	r24, 0xA1	; 161
   134a2:	93 e0       	ldi	r25, 0x03	; 3
   134a4:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
   134a8:	6c eb       	ldi	r22, 0xBC	; 188
   134aa:	71 e8       	ldi	r23, 0x81	; 129
   134ac:	c5 01       	movw	r24, r10
   134ae:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2345
  strcat(str1, device.nazev);
   134b2:	6b ec       	ldi	r22, 0xCB	; 203
   134b4:	7d e0       	ldi	r23, 0x0D	; 13
   134b6:	c5 01       	movw	r24, r10
   134b8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
  strcat(str1, "/prog/clear");
   134bc:	64 e0       	ldi	r22, 0x04	; 4
   134be:	75 e0       	ldi	r23, 0x05	; 5
   134c0:	c5 01       	movw	r24, r10
   134c2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  if (strncmp(str1, topic, strlen(str1)) == 0)
   134c6:	f5 01       	movw	r30, r10
   134c8:	01 90       	ld	r0, Z+
   134ca:	00 20       	and	r0, r0
   134cc:	e9 f7       	brne	.-6      	; 0x134c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb5c>
   134ce:	31 97       	sbiw	r30, 0x01	; 1
   134d0:	af 01       	movw	r20, r30
   134d2:	4a 19       	sub	r20, r10
   134d4:	5b 09       	sbc	r21, r11
   134d6:	b4 01       	movw	r22, r8
   134d8:	c5 01       	movw	r24, r10
   134da:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   134de:	89 2b       	or	r24, r25
   134e0:	09 f0       	breq	.+2      	; 0x134e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb78>
   134e2:	52 c0       	rjmp	.+164    	; 0x13588 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2349
  {
    mqtt_process_message++;
   134e4:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   134e8:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   134ec:	01 96       	adiw	r24, 0x01	; 1
   134ee:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   134f2:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
    id = atoi(my_payload);
   134f6:	86 ea       	ldi	r24, 0xA6	; 166
   134f8:	98 e0       	ldi	r25, 0x08	; 8
   134fa:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   134fe:	18 2f       	mov	r17, r24
   13500:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
    if (id < AVAILABLE_PROGRAM)
   13502:	97 e0       	ldi	r25, 0x07	; 7
   13504:	91 17       	cp	r25, r17
   13506:	08 f4       	brcc	.+2      	; 0x1350a <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
   13508:	ba c0       	rjmp	.+372    	; 0x1367e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
    {
      strcpy_P(tmp2, text_prog);
   1350a:	6f e1       	ldi	r22, 0x1F	; 31
   1350c:	73 e8       	ldi	r23, 0x83	; 131
   1350e:	ce 01       	movw	r24, r28
   13510:	88 5f       	subi	r24, 0xF8	; 248
   13512:	9e 4f       	sbci	r25, 0xFE	; 254
   13514:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2354
      thermostat_program_set_name(id, tmp2);
   13518:	be 01       	movw	r22, r28
   1351a:	68 5f       	subi	r22, 0xF8	; 248
   1351c:	7e 4f       	sbci	r23, 0xFE	; 254
   1351e:	81 2f       	mov	r24, r17
   13520:	0e 94 48 6c 	call	0xd890	; 0xd890 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
   13524:	ad e4       	ldi	r26, 0x4D	; 77
   13526:	1a 9f       	mul	r17, r26
   13528:	c0 01       	movw	r24, r0
   1352a:	11 24       	eor	r1, r1
   1352c:	6f ef       	ldi	r22, 0xFF	; 255
   1352e:	8f 50       	subi	r24, 0x0F	; 15
   13530:	9e 4f       	sbci	r25, 0xFE	; 254
   13532:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   13536:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
   13538:	c1 2c       	mov	r12, r1
   1353a:	e1 2c       	mov	r14, r1
   1353c:	00 e0       	ldi	r16, 0x00	; 0
   1353e:	20 e0       	ldi	r18, 0x00	; 0
   13540:	40 e0       	ldi	r20, 0x00	; 0
   13542:	61 2f       	mov	r22, r17
   13544:	87 2d       	mov	r24, r7
   13546:	0e 94 0c 6c 	call	0xd818	; 0xd818 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
        thermostat_program_set_threshold(id, progid, 220);
   1354a:	4c ed       	ldi	r20, 0xDC	; 220
   1354c:	50 e0       	ldi	r21, 0x00	; 0
   1354e:	61 2f       	mov	r22, r17
   13550:	87 2d       	mov	r24, r7
   13552:	0e 94 f0 6b 	call	0xd7e0	; 0xd7e0 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2360
        thermostat_program_set_week(id, progid, 0);
   13556:	40 e0       	ldi	r20, 0x00	; 0
   13558:	61 2f       	mov	r22, r17
   1355a:	87 2d       	mov	r24, r7
   1355c:	0e 94 e2 6b 	call	0xd7c4	; 0xd7c4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   13560:	1f 5f       	subi	r17, 0xFF	; 255
   13562:	1b 30       	cpi	r17, 0x0B	; 11
   13564:	49 f7       	brne	.-46     	; 0x13538 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
   13566:	0b e5       	ldi	r16, 0x5B	; 91
   13568:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1356a:	c8 01       	movw	r24, r16
   1356c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
   13570:	78 12       	cpse	r7, r24
   13572:	04 c0       	rjmp	.+8      	; 0x1357c <mqtt_callback(char*, unsigned char*, unsigned int)+0xc10>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   13574:	6f ef       	ldi	r22, 0xFF	; 255
   13576:	c8 01       	movw	r24, r16
   13578:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   1357c:	0f 5d       	subi	r16, 0xDF	; 223
   1357e:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   13580:	01 15       	cp	r16, r1
   13582:	b2 e0       	ldi	r27, 0x02	; 2
   13584:	1b 07       	cpc	r17, r27
   13586:	89 f7       	brne	.-30     	; 0x1356a <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
   13588:	6c eb       	ldi	r22, 0xBC	; 188
   1358a:	71 e8       	ldi	r23, 0x81	; 129
   1358c:	c5 01       	movw	r24, r10
   1358e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2377
  strcat(str1, device.nazev);
   13592:	6b ec       	ldi	r22, 0xCB	; 203
   13594:	7d e0       	ldi	r23, 0x0D	; 13
   13596:	c5 01       	movw	r24, r10
   13598:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
  strcat(str1, "/prog_interval/set/");
   1359c:	62 e2       	ldi	r22, 0x22	; 34
   1359e:	75 e0       	ldi	r23, 0x05	; 5
   135a0:	c5 01       	movw	r24, r10
   135a2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
  if (strncmp(str1, topic, strlen(str1)) == 0)
   135a6:	f5 01       	movw	r30, r10
   135a8:	01 90       	ld	r0, Z+
   135aa:	00 20       	and	r0, r0
   135ac:	e9 f7       	brne	.-6      	; 0x135a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc3c>
   135ae:	31 97       	sbiw	r30, 0x01	; 1
   135b0:	af 01       	movw	r20, r30
   135b2:	4a 19       	sub	r20, r10
   135b4:	5b 09       	sbc	r21, r11
   135b6:	b4 01       	movw	r22, r8
   135b8:	c5 01       	movw	r24, r10
   135ba:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   135be:	89 2b       	or	r24, r25
   135c0:	09 f0       	breq	.+2      	; 0x135c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
   135c2:	32 c1       	rjmp	.+612    	; 0x13828 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2381
  {
    mqtt_process_message++;
   135c4:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   135c8:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   135cc:	01 96       	adiw	r24, 0x01	; 1
   135ce:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   135d2:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   135d6:	f5 01       	movw	r30, r10
   135d8:	01 90       	ld	r0, Z+
   135da:	00 20       	and	r0, r0
   135dc:	e9 f7       	brne	.-6      	; 0x135d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6c>
   135de:	31 97       	sbiw	r30, 0x01	; 1
   135e0:	ea 19       	sub	r30, r10
   135e2:	fb 09       	sbc	r31, r11
   135e4:	9e 2f       	mov	r25, r30
   135e6:	4e 2f       	mov	r20, r30
   135e8:	84 2f       	mov	r24, r20
   135ea:	89 1b       	sub	r24, r25
   135ec:	24 2f       	mov	r18, r20
   135ee:	30 e0       	ldi	r19, 0x00	; 0
   135f0:	d4 01       	movw	r26, r8
   135f2:	0d 90       	ld	r0, X+
   135f4:	00 20       	and	r0, r0
   135f6:	e9 f7       	brne	.-6      	; 0x135f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc86>
   135f8:	11 97       	sbiw	r26, 0x01	; 1
   135fa:	a8 19       	sub	r26, r8
   135fc:	b9 09       	sbc	r27, r9
   135fe:	2a 17       	cp	r18, r26
   13600:	3b 07       	cpc	r19, r27
   13602:	08 f0       	brcs	.+2      	; 0x13606 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
   13604:	41 c0       	rjmp	.+130    	; 0x13688 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2385
    {
      str1[cnt] = topic[f];
   13606:	d5 01       	movw	r26, r10
   13608:	a8 0f       	add	r26, r24
   1360a:	b1 1d       	adc	r27, r1
   1360c:	28 0d       	add	r18, r8
   1360e:	39 1d       	adc	r19, r9
   13610:	f9 01       	movw	r30, r18
   13612:	80 81       	ld	r24, Z
   13614:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
      str1[cnt + 1] = 0;
   13616:	11 96       	adiw	r26, 0x01	; 1
   13618:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1361a:	4f 5f       	subi	r20, 0xFF	; 255
   1361c:	e5 cf       	rjmp	.-54     	; 0x135e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
   1361e:	27 e0       	ldi	r18, 0x07	; 7
   13620:	27 15       	cp	r18, r7
   13622:	08 f4       	brcc	.+2      	; 0x13626 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcba>
   13624:	3d cf       	rjmp	.-390    	; 0x134a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2331
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
   13626:	81 e0       	ldi	r24, 0x01	; 1
   13628:	f8 12       	cpse	r15, r24
   1362a:	20 c0       	rjmp	.+64     	; 0x1366c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   1362c:	60 e0       	ldi	r22, 0x00	; 0
   1362e:	74 e0       	ldi	r23, 0x04	; 4
   13630:	c8 01       	movw	r24, r16
   13632:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13636:	89 2b       	or	r24, r25
   13638:	29 f4       	brne	.+10     	; 0x13644 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd8>
   1363a:	66 ea       	ldi	r22, 0xA6	; 166
   1363c:	78 e0       	ldi	r23, 0x08	; 8
   1363e:	87 2d       	mov	r24, r7
   13640:	0e 94 48 6c 	call	0xd890	; 0xd890 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2332
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
   13644:	6a e0       	ldi	r22, 0x0A	; 10
   13646:	74 e0       	ldi	r23, 0x04	; 4
   13648:	c8 01       	movw	r24, r16
   1364a:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1364e:	89 2b       	or	r24, r25
   13650:	69 f4       	brne	.+26     	; 0x1366c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   13652:	86 ea       	ldi	r24, 0xA6	; 166
   13654:	98 e0       	ldi	r25, 0x08	; 8
   13656:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   1365a:	7e 9c       	mul	r7, r14
   1365c:	90 01       	movw	r18, r0
   1365e:	11 24       	eor	r1, r1
   13660:	68 2f       	mov	r22, r24
   13662:	c9 01       	movw	r24, r18
   13664:	8f 50       	subi	r24, 0x0F	; 15
   13666:	9e 4f       	sbci	r25, 0xFE	; 254
   13668:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2339
      else
      {
        log_error(&mqtt_client, "E");
        break;
      }
      pch = strtok (NULL, "/");
   1366c:	6f e4       	ldi	r22, 0x4F	; 79
   1366e:	75 e0       	ldi	r23, 0x05	; 5
   13670:	90 e0       	ldi	r25, 0x00	; 0
   13672:	80 e0       	ldi	r24, 0x00	; 0
   13674:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   13678:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2340
      cnt++;
   1367a:	f3 94       	inc	r15
   1367c:	04 cf       	rjmp	.-504    	; 0x13486 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2372
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
   1367e:	80 e1       	ldi	r24, 0x10	; 16
   13680:	95 e0       	ldi	r25, 0x05	; 5
   13682:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13686:	80 cf       	rjmp	.-256    	; 0x13588 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13688:	6f e4       	ldi	r22, 0x4F	; 79
   1368a:	75 e0       	ldi	r23, 0x05	; 5
   1368c:	c5 01       	movw	r24, r10
   1368e:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   13692:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2059
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
   13694:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2389
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13696:	31 2c       	mov	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
    pch = strtok (str1, "/");
    while (pch != NULL)
   13698:	41 14       	cp	r4, r1
   1369a:	51 04       	cpc	r5, r1
   1369c:	09 f4       	brne	.+2      	; 0x136a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
   1369e:	c4 c0       	rjmp	.+392    	; 0x13828 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2393
    {
      if (cnt == 0) id = atoi(pch);
   136a0:	31 10       	cpse	r3, r1
   136a2:	82 c0       	rjmp	.+260    	; 0x137a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
   136a4:	c2 01       	movw	r24, r4
   136a6:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   136aa:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
   136ac:	27 e0       	ldi	r18, 0x07	; 7
   136ae:	27 15       	cp	r18, r7
   136b0:	08 f4       	brcc	.+2      	; 0x136b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd48>
   136b2:	b6 c0       	rjmp	.+364    	; 0x13820 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
   136b4:	8a e0       	ldi	r24, 0x0A	; 10
   136b6:	86 15       	cp	r24, r6
   136b8:	08 f4       	brcc	.+2      	; 0x136bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd50>
   136ba:	b2 c0       	rjmp	.+356    	; 0x13820 <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
   136bc:	92 e0       	ldi	r25, 0x02	; 2
   136be:	39 12       	cpse	r3, r25
   136c0:	a6 c0       	rjmp	.+332    	; 0x1380e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
   136c2:	6a e0       	ldi	r22, 0x0A	; 10
   136c4:	74 e0       	ldi	r23, 0x04	; 4
   136c6:	c2 01       	movw	r24, r4
   136c8:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   136cc:	89 2b       	or	r24, r25
   136ce:	c1 f5       	brne	.+112    	; 0x13740 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
   136d0:	86 ea       	ldi	r24, 0xA6	; 166
   136d2:	98 e0       	ldi	r25, 0x08	; 8
   136d4:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   136d8:	28 2e       	mov	r2, r24
thermostat_program_set_interval_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379

/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   136da:	de 01       	movw	r26, r28
   136dc:	a8 5b       	subi	r26, 0xB8	; 184
   136de:	bf 4f       	sbci	r27, 0xFF	; 255
   136e0:	6d 01       	movw	r12, r26
   136e2:	fe 01       	movw	r30, r28
   136e4:	e8 5d       	subi	r30, 0xD8	; 216
   136e6:	fe 4f       	sbci	r31, 0xFE	; 254
   136e8:	7f 01       	movw	r14, r30
   136ea:	8e 01       	movw	r16, r28
   136ec:	0d 5b       	subi	r16, 0xBD	; 189
   136ee:	1e 4f       	sbci	r17, 0xFE	; 254
   136f0:	9e 01       	movw	r18, r28
   136f2:	2c 5b       	subi	r18, 0xBC	; 188
   136f4:	3e 4f       	sbci	r19, 0xFE	; 254
   136f6:	ae 01       	movw	r20, r28
   136f8:	4b 5b       	subi	r20, 0xBB	; 187
   136fa:	5e 4f       	sbci	r21, 0xFE	; 254
   136fc:	66 2d       	mov	r22, r6
   136fe:	87 2d       	mov	r24, r7
   13700:	0e 94 59 72 	call	0xe4b2	; 0xe4b2 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   13704:	29 96       	adiw	r28, 0x09	; 9
   13706:	8f ad       	ldd	r24, Y+63	; 0x3f
   13708:	29 97       	sbiw	r28, 0x09	; 9
   1370a:	28 16       	cp	r2, r24
   1370c:	c9 f0       	breq	.+50     	; 0x13740 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1370e:	c2 2c       	mov	r12, r2
   13710:	c8 5d       	subi	r28, 0xD8	; 216
   13712:	de 4f       	sbci	r29, 0xFE	; 254
   13714:	e8 80       	ld	r14, Y
   13716:	c8 52       	subi	r28, 0x28	; 40
   13718:	d1 40       	sbci	r29, 0x01	; 1
   1371a:	cd 5b       	subi	r28, 0xBD	; 189
   1371c:	de 4f       	sbci	r29, 0xFE	; 254
   1371e:	08 81       	ld	r16, Y
   13720:	c3 54       	subi	r28, 0x43	; 67
   13722:	d1 40       	sbci	r29, 0x01	; 1
   13724:	cc 5b       	subi	r28, 0xBC	; 188
   13726:	de 4f       	sbci	r29, 0xFE	; 254
   13728:	28 81       	ld	r18, Y
   1372a:	c4 54       	subi	r28, 0x44	; 68
   1372c:	d1 40       	sbci	r29, 0x01	; 1
   1372e:	cb 5b       	subi	r28, 0xBB	; 187
   13730:	de 4f       	sbci	r29, 0xFE	; 254
   13732:	48 81       	ld	r20, Y
   13734:	c5 54       	subi	r28, 0x45	; 69
   13736:	d1 40       	sbci	r29, 0x01	; 1
   13738:	66 2d       	mov	r22, r6
   1373a:	87 2d       	mov	r24, r7
   1373c:	0e 94 0c 6c 	call	0xd818	; 0xd818 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2398
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
   13740:	6a e2       	ldi	r22, 0x2A	; 42
   13742:	76 e0       	ldi	r23, 0x06	; 6
   13744:	c2 01       	movw	r24, r4
   13746:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1374a:	89 2b       	or	r24, r25
   1374c:	49 f4       	brne	.+18     	; 0x13760 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
   1374e:	86 ea       	ldi	r24, 0xA6	; 166
   13750:	98 e0       	ldi	r25, 0x08	; 8
   13752:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13756:	ac 01       	movw	r20, r24
   13758:	66 2d       	mov	r22, r6
   1375a:	87 2d       	mov	r24, r7
   1375c:	0e 94 f0 6b 	call	0xd7e0	; 0xd7e0 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
   13760:	68 e7       	ldi	r22, 0x78	; 120
   13762:	76 e0       	ldi	r23, 0x06	; 6
   13764:	c2 01       	movw	r24, r4
   13766:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1376a:	89 2b       	or	r24, r25
   1376c:	09 f0       	breq	.+2      	; 0x13770 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe04>
   1376e:	4f c0       	rjmp	.+158    	; 0x1380e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   13770:	66 e3       	ldi	r22, 0x36	; 54
   13772:	75 e0       	ldi	r23, 0x05	; 5
   13774:	86 ea       	ldi	r24, 0xA6	; 166
   13776:	98 e0       	ldi	r25, 0x08	; 8
   13778:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   1377c:	f1 2c       	mov	r15, r1
   1377e:	c1 2c       	mov	r12, r1
   13780:	e1 2c       	mov	r14, r1
   13782:	00 e0       	ldi	r16, 0x00	; 0
   13784:	51 2c       	mov	r5, r1
   13786:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   13788:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   1378a:	00 97       	sbiw	r24, 0x00	; 0
   1378c:	99 f1       	breq	.+102    	; 0x137f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   1378e:	11 11       	cpse	r17, r1
   13790:	13 c0       	rjmp	.+38     	; 0x137b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4c>
   13792:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13796:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   13798:	66 e3       	ldi	r22, 0x36	; 54
   1379a:	75 e0       	ldi	r23, 0x05	; 5
   1379c:	90 e0       	ldi	r25, 0x00	; 0
   1379e:	80 e0       	ldi	r24, 0x00	; 0
   137a0:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   137a4:	1f 5f       	subi	r17, 0xFF	; 255
   137a6:	f1 cf       	rjmp	.-30     	; 0x1378a <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1e>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2394
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
   137a8:	f1 e0       	ldi	r31, 0x01	; 1
   137aa:	3f 12       	cpse	r3, r31
   137ac:	7f cf       	rjmp	.-258    	; 0x136ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
   137ae:	c2 01       	movw	r24, r4
   137b0:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137b4:	68 2e       	mov	r6, r24
   137b6:	7a cf       	rjmp	.-268    	; 0x136ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   137b8:	11 30       	cpi	r17, 0x01	; 1
   137ba:	21 f4       	brne	.+8      	; 0x137c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe58>
   137bc:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137c0:	58 2e       	mov	r5, r24
   137c2:	ea cf       	rjmp	.-44     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   137c4:	12 30       	cpi	r17, 0x02	; 2
   137c6:	21 f4       	brne	.+8      	; 0x137d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe64>
   137c8:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137cc:	08 2f       	mov	r16, r24
   137ce:	e4 cf       	rjmp	.-56     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   137d0:	13 30       	cpi	r17, 0x03	; 3
   137d2:	21 f4       	brne	.+8      	; 0x137dc <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
   137d4:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137d8:	e8 2e       	mov	r14, r24
   137da:	de cf       	rjmp	.-68     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   137dc:	14 30       	cpi	r17, 0x04	; 4
   137de:	21 f4       	brne	.+8      	; 0x137e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
   137e0:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137e4:	f8 2e       	mov	r15, r24
   137e6:	d8 cf       	rjmp	.-80     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   137e8:	15 30       	cpi	r17, 0x05	; 5
   137ea:	b1 f6       	brne	.-84     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
   137ec:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   137f0:	c8 2e       	mov	r12, r24
   137f2:	d2 cf       	rjmp	.-92     	; 0x13798 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   137f4:	16 30       	cpi	r17, 0x06	; 6
   137f6:	59 f4       	brne	.+22     	; 0x1380e <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   137f8:	25 2d       	mov	r18, r5
   137fa:	4d 2d       	mov	r20, r13
   137fc:	66 2d       	mov	r22, r6
   137fe:	87 2d       	mov	r24, r7
   13800:	0e 94 0c 6c 	call	0xd818	; 0xd818 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   13804:	4f 2d       	mov	r20, r15
   13806:	66 2d       	mov	r22, r6
   13808:	87 2d       	mov	r24, r7
   1380a:	0e 94 e2 6b 	call	0xd7c4	; 0xd7c4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2406
      else
      {
        log_error(&mqtt_client, "E");
        break;
      }
      pch = strtok (NULL, "/");
   1380e:	6f e4       	ldi	r22, 0x4F	; 79
   13810:	75 e0       	ldi	r23, 0x05	; 5
   13812:	90 e0       	ldi	r25, 0x00	; 0
   13814:	80 e0       	ldi	r24, 0x00	; 0
   13816:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   1381a:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2407
      cnt++;
   1381c:	33 94       	inc	r3
   1381e:	3c cf       	rjmp	.-392    	; 0x13698 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "E");
   13820:	81 ea       	ldi	r24, 0xA1	; 161
   13822:	93 e0       	ldi	r25, 0x03	; 3
   13824:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
   13828:	6c eb       	ldi	r22, 0xBC	; 188
   1382a:	71 e8       	ldi	r23, 0x81	; 129
   1382c:	c5 01       	movw	r24, r10
   1382e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2413
  strcat(str1, device.nazev);
   13832:	6b ec       	ldi	r22, 0xCB	; 203
   13834:	7d e0       	ldi	r23, 0x0D	; 13
   13836:	c5 01       	movw	r24, r10
   13838:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
  strcat(str1, "/ring/default");
   1383c:	68 e3       	ldi	r22, 0x38	; 56
   1383e:	75 e0       	ldi	r23, 0x05	; 5
   13840:	c5 01       	movw	r24, r10
   13842:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
  if (strcmp(str1, topic) == 0)
   13846:	b4 01       	movw	r22, r8
   13848:	c5 01       	movw	r24, r10
   1384a:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1384e:	89 2b       	or	r24, r25
   13850:	d9 f4       	brne	.+54     	; 0x13888 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
  {
    mqtt_process_message++;
   13852:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13856:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   1385a:	01 96       	adiw	r24, 0x01	; 1
   1385c:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   13860:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
    last_default_ring = default_ring;
   13864:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
   13868:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2419
    default_ring = atoi(my_payload);
   1386c:	86 ea       	ldi	r24, 0xA6	; 166
   1386e:	98 e0       	ldi	r25, 0x08	; 8
   13870:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13874:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2420
    display_redraw_default_ring = 1;
   13878:	91 e0       	ldi	r25, 0x01	; 1
   1387a:	90 93 55 09 	sts	0x0955, r25	; 0x800955 <display_redraw_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   1387e:	68 2f       	mov	r22, r24
   13880:	8c e5       	ldi	r24, 0x5C	; 92
   13882:	90 e0       	ldi	r25, 0x00	; 0
   13884:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
    display_redraw_default_ring = 1;
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
   13888:	6c eb       	ldi	r22, 0xBC	; 188
   1388a:	71 e8       	ldi	r23, 0x81	; 129
   1388c:	c5 01       	movw	r24, r10
   1388e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2426
  strcat(str1, device.nazev);
   13892:	6b ec       	ldi	r22, 0xCB	; 203
   13894:	7d e0       	ldi	r23, 0x0D	; 13
   13896:	c5 01       	movw	r24, r10
   13898:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
  strcat(str1, "/ring/get/");
   1389c:	66 e4       	ldi	r22, 0x46	; 70
   1389e:	75 e0       	ldi	r23, 0x05	; 5
   138a0:	c5 01       	movw	r24, r10
   138a2:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
  if (strncmp(str1, topic, strlen(str1)) == 0)
   138a6:	f5 01       	movw	r30, r10
   138a8:	01 90       	ld	r0, Z+
   138aa:	00 20       	and	r0, r0
   138ac:	e9 f7       	brne	.-6      	; 0x138a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
   138ae:	31 97       	sbiw	r30, 0x01	; 1
   138b0:	8f 01       	movw	r16, r30
   138b2:	0a 19       	sub	r16, r10
   138b4:	1b 09       	sbc	r17, r11
   138b6:	a8 01       	movw	r20, r16
   138b8:	b4 01       	movw	r22, r8
   138ba:	c5 01       	movw	r24, r10
   138bc:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   138c0:	89 2b       	or	r24, r25
   138c2:	09 f0       	breq	.+2      	; 0x138c6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5a>
   138c4:	4c c0       	rjmp	.+152    	; 0x1395e <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   138c6:	90 2f       	mov	r25, r16
   138c8:	80 2f       	mov	r24, r16
   138ca:	89 1b       	sub	r24, r25
   138cc:	20 2f       	mov	r18, r16
   138ce:	30 e0       	ldi	r19, 0x00	; 0
   138d0:	f4 01       	movw	r30, r8
   138d2:	01 90       	ld	r0, Z+
   138d4:	00 20       	and	r0, r0
   138d6:	e9 f7       	brne	.-6      	; 0x138d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
   138d8:	31 97       	sbiw	r30, 0x01	; 1
   138da:	e8 19       	sub	r30, r8
   138dc:	f9 09       	sbc	r31, r9
   138de:	2e 17       	cp	r18, r30
   138e0:	3f 07       	cpc	r19, r31
   138e2:	70 f4       	brcc	.+28     	; 0x13900 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2433
    {
      str1[cnt] = topic[f];
   138e4:	e8 ec       	ldi	r30, 0xC8	; 200
   138e6:	f0 e0       	ldi	r31, 0x00	; 0
   138e8:	ec 0f       	add	r30, r28
   138ea:	fd 1f       	adc	r31, r29
   138ec:	e8 0f       	add	r30, r24
   138ee:	f1 1d       	adc	r31, r1
   138f0:	28 0d       	add	r18, r8
   138f2:	39 1d       	adc	r19, r9
   138f4:	d9 01       	movw	r26, r18
   138f6:	8c 91       	ld	r24, X
   138f8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
      str1[cnt + 1] = 0;
   138fa:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   138fc:	0f 5f       	subi	r16, 0xFF	; 255
   138fe:	e4 cf       	rjmp	.-56     	; 0x138c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13900:	6f e4       	ldi	r22, 0x4F	; 79
   13902:	75 e0       	ldi	r23, 0x05	; 5
   13904:	ce 01       	movw	r24, r28
   13906:	88 53       	subi	r24, 0x38	; 56
   13908:	9f 4f       	sbci	r25, 0xFF	; 255
   1390a:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1390e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
    pch = strtok (str1, "/");
    while (pch != NULL)
   13910:	00 97       	sbiw	r24, 0x00	; 0
   13912:	29 f1       	breq	.+74     	; 0x1395e <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
    {
      if (cnt == 0) id = atoi(my_payload);
   13914:	11 11       	cpse	r17, r1
   13916:	0d c0       	rjmp	.+26     	; 0x13932 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc6>
   13918:	86 ea       	ldi	r24, 0xA6	; 166
   1391a:	98 e0       	ldi	r25, 0x08	; 8
   1391c:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13920:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
      if (id < MAX_THERMOSTAT)
   13922:	b4 e0       	ldi	r27, 0x04	; 4
   13924:	b8 17       	cp	r27, r24
   13926:	98 f4       	brcc	.+38     	; 0x1394e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "E");
   13928:	81 ea       	ldi	r24, 0xA1	; 161
   1392a:	93 e0       	ldi	r25, 0x03	; 3
   1392c:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13930:	0e c0       	rjmp	.+28     	; 0x1394e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   13932:	e4 e0       	ldi	r30, 0x04	; 4
   13934:	e7 15       	cp	r30, r7
   13936:	c0 f3       	brcs	.-16     	; 0x13928 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2444
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   13938:	11 30       	cpi	r17, 0x01	; 1
   1393a:	49 f4       	brne	.+18     	; 0x1394e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   1393c:	61 e4       	ldi	r22, 0x41	; 65
   1393e:	73 e0       	ldi	r23, 0x03	; 3
   13940:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13944:	89 2b       	or	r24, r25
   13946:	19 f4       	brne	.+6      	; 0x1394e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   13948:	87 2d       	mov	r24, r7
   1394a:	0e 94 21 55 	call	0xaa42	; 0xaa42 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2450
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   1394e:	6f e4       	ldi	r22, 0x4F	; 79
   13950:	75 e0       	ldi	r23, 0x05	; 5
   13952:	90 e0       	ldi	r25, 0x00	; 0
   13954:	80 e0       	ldi	r24, 0x00	; 0
   13956:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2451
      cnt++;
   1395a:	1f 5f       	subi	r17, 0xFF	; 255
   1395c:	d9 cf       	rjmp	.-78     	; 0x13910 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   1395e:	6c eb       	ldi	r22, 0xBC	; 188
   13960:	71 e8       	ldi	r23, 0x81	; 129
   13962:	c5 01       	movw	r24, r10
   13964:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2471
  strcat(str1, device.nazev);
   13968:	6b ec       	ldi	r22, 0xCB	; 203
   1396a:	7d e0       	ldi	r23, 0x0D	; 13
   1396c:	c5 01       	movw	r24, r10
   1396e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2472
  strcat(str1, "/ring/set/");
   13972:	61 e5       	ldi	r22, 0x51	; 81
   13974:	75 e0       	ldi	r23, 0x05	; 5
   13976:	c5 01       	movw	r24, r10
   13978:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1397c:	f5 01       	movw	r30, r10
   1397e:	01 90       	ld	r0, Z+
   13980:	00 20       	and	r0, r0
   13982:	e9 f7       	brne	.-6      	; 0x1397e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1012>
   13984:	31 97       	sbiw	r30, 0x01	; 1
   13986:	8f 01       	movw	r16, r30
   13988:	0a 19       	sub	r16, r10
   1398a:	1b 09       	sbc	r17, r11
   1398c:	a8 01       	movw	r20, r16
   1398e:	b4 01       	movw	r22, r8
   13990:	c5 01       	movw	r24, r10
   13992:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   13996:	89 2b       	or	r24, r25
   13998:	09 f0       	breq	.+2      	; 0x1399c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1030>
   1399a:	cb c1       	rjmp	.+918    	; 0x13d32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1399c:	90 2f       	mov	r25, r16
   1399e:	80 2f       	mov	r24, r16
   139a0:	89 1b       	sub	r24, r25
   139a2:	20 2f       	mov	r18, r16
   139a4:	30 e0       	ldi	r19, 0x00	; 0
   139a6:	f4 01       	movw	r30, r8
   139a8:	01 90       	ld	r0, Z+
   139aa:	00 20       	and	r0, r0
   139ac:	e9 f7       	brne	.-6      	; 0x139a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x103c>
   139ae:	31 97       	sbiw	r30, 0x01	; 1
   139b0:	e8 19       	sub	r30, r8
   139b2:	f9 09       	sbc	r31, r9
   139b4:	2e 17       	cp	r18, r30
   139b6:	3f 07       	cpc	r19, r31
   139b8:	70 f4       	brcc	.+28     	; 0x139d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2478
    {
      str1[cnt] = topic[f];
   139ba:	e8 ec       	ldi	r30, 0xC8	; 200
   139bc:	f0 e0       	ldi	r31, 0x00	; 0
   139be:	ec 0f       	add	r30, r28
   139c0:	fd 1f       	adc	r31, r29
   139c2:	e8 0f       	add	r30, r24
   139c4:	f1 1d       	adc	r31, r1
   139c6:	28 0d       	add	r18, r8
   139c8:	39 1d       	adc	r19, r9
   139ca:	d9 01       	movw	r26, r18
   139cc:	8c 91       	ld	r24, X
   139ce:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
      str1[cnt + 1] = 0;
   139d0:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   139d2:	0f 5f       	subi	r16, 0xFF	; 255
   139d4:	e4 cf       	rjmp	.-56     	; 0x1399e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1032>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   139d6:	6f e4       	ldi	r22, 0x4F	; 79
   139d8:	75 e0       	ldi	r23, 0x05	; 5
   139da:	ce 01       	movw	r24, r28
   139dc:	88 53       	subi	r24, 0x38	; 56
   139de:	9f 4f       	sbci	r25, 0xFF	; 255
   139e0:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   139e4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2482
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   139e6:	e1 2c       	mov	r14, r1
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   139e8:	51 e2       	ldi	r21, 0x21	; 33
   139ea:	d5 2e       	mov	r13, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
          change_term_mode = 1;
   139ec:	cc 24       	eor	r12, r12
   139ee:	c3 94       	inc	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   139f0:	01 15       	cp	r16, r1
   139f2:	11 05       	cpc	r17, r1
   139f4:	09 f4       	brne	.+2      	; 0x139f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x108c>
   139f6:	9d c1       	rjmp	.+826    	; 0x13d32 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
    {
      if (cnt == 0) id = atoi(pch);
   139f8:	e1 10       	cpse	r14, r1
   139fa:	0d c0       	rjmp	.+26     	; 0x13a16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
   139fc:	c8 01       	movw	r24, r16
   139fe:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13a02:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
      if (id < MAX_THERMOSTAT)
   13a04:	b4 e0       	ldi	r27, 0x04	; 4
   13a06:	b8 17       	cp	r27, r24
   13a08:	08 f0       	brcs	.+2      	; 0x13a0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
   13a0a:	8a c1       	rjmp	.+788    	; 0x13d20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "E");
   13a0c:	81 ea       	ldi	r24, 0xA1	; 161
   13a0e:	93 e0       	ldi	r25, 0x03	; 3
   13a10:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13a14:	85 c1       	rjmp	.+778    	; 0x13d20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   13a16:	e4 e0       	ldi	r30, 0x04	; 4
   13a18:	e7 15       	cp	r30, r7
   13a1a:	c0 f3       	brcs	.-16     	; 0x13a0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   13a1c:	f1 e0       	ldi	r31, 0x01	; 1
   13a1e:	ef 12       	cpse	r14, r31
   13a20:	7f c1       	rjmp	.+766    	; 0x13d20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   13a22:	60 e0       	ldi	r22, 0x00	; 0
   13a24:	74 e0       	ldi	r23, 0x04	; 4
   13a26:	c8 01       	movw	r24, r16
   13a28:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13a2c:	89 2b       	or	r24, r25
   13a2e:	29 f4       	brne	.+10     	; 0x13a3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ce>
   13a30:	66 ea       	ldi	r22, 0xA6	; 166
   13a32:	78 e0       	ldi	r23, 0x08	; 8
   13a34:	87 2d       	mov	r24, r7
   13a36:	0e 94 ab 6d 	call	0xdb56	; 0xdb56 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   13a3a:	64 e3       	ldi	r22, 0x34	; 52
   13a3c:	76 e0       	ldi	r23, 0x06	; 6
   13a3e:	c8 01       	movw	r24, r16
   13a40:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13a44:	89 2b       	or	r24, r25
   13a46:	81 f4       	brne	.+32     	; 0x13a68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   13a48:	86 ea       	ldi	r24, 0xA6	; 166
   13a4a:	98 e0       	ldi	r25, 0x08	; 8
   13a4c:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13a50:	88 30       	cpi	r24, 0x08	; 8
   13a52:	91 05       	cpc	r25, r1
   13a54:	4c f4       	brge	.+18     	; 0x13a68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   13a56:	7d 9c       	mul	r7, r13
   13a58:	90 01       	movw	r18, r0
   13a5a:	11 24       	eor	r1, r1
   13a5c:	68 2f       	mov	r22, r24
   13a5e:	c9 01       	movw	r24, r18
   13a60:	85 5a       	subi	r24, 0xA5	; 165
   13a62:	9e 4f       	sbci	r25, 0xFE	; 254
   13a64:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2493
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0))
   13a68:	6c e3       	ldi	r22, 0x3C	; 60
   13a6a:	76 e0       	ldi	r23, 0x06	; 6
   13a6c:	c8 01       	movw	r24, r16
   13a6e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13a72:	89 2b       	or	r24, r25
   13a74:	79 f4       	brne	.+30     	; 0x13a94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2495
        {
          thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   13a76:	86 ea       	ldi	r24, 0xA6	; 166
   13a78:	98 e0       	ldi	r25, 0x08	; 8
   13a7a:	0e 94 4f f1 	call	0x1e29e	; 0x1e29e <atof>
   13a7e:	20 e0       	ldi	r18, 0x00	; 0
   13a80:	30 e0       	ldi	r19, 0x00	; 0
   13a82:	40 e2       	ldi	r20, 0x20	; 32
   13a84:	51 e4       	ldi	r21, 0x41	; 65
   13a86:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
   13a8a:	0e 94 d5 fc 	call	0x1f9aa	; 0x1f9aa <__fixsfsi>
   13a8e:	87 2d       	mov	r24, r7
   13a90:	0e 94 84 6d 	call	0xdb08	; 0xdb08 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2497
        }
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0))
   13a94:	6a e2       	ldi	r22, 0x2A	; 42
   13a96:	76 e0       	ldi	r23, 0x06	; 6
   13a98:	c8 01       	movw	r24, r16
   13a9a:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13a9e:	89 2b       	or	r24, r25
   13aa0:	41 f4       	brne	.+16     	; 0x13ab2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1146>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2499
        {
          thermostat_ring_set_mezni(id, atoi(my_payload));
   13aa2:	86 ea       	ldi	r24, 0xA6	; 166
   13aa4:	98 e0       	ldi	r25, 0x08	; 8
   13aa6:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13aaa:	bc 01       	movw	r22, r24
   13aac:	87 2d       	mov	r24, r7
   13aae:	0e 94 84 6d 	call	0xdb08	; 0xdb08 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   13ab2:	68 e4       	ldi	r22, 0x48	; 72
   13ab4:	76 e0       	ldi	r23, 0x06	; 6
   13ab6:	c8 01       	movw	r24, r16
   13ab8:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13abc:	89 2b       	or	r24, r25
   13abe:	09 f0       	breq	.+2      	; 0x13ac2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1156>
   13ac0:	5a c0       	rjmp	.+180    	; 0x13b76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   13ac2:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
   13ac6:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
   13aca:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <thermostat_mode_default_ring_last_state>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
   13ace:	62 e6       	ldi	r22, 0x62	; 98
   13ad0:	78 e0       	ldi	r23, 0x08	; 8
   13ad2:	86 ea       	ldi	r24, 0xA6	; 166
   13ad4:	98 e0       	ldi	r25, 0x08	; 8
   13ad6:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13ada:	ff 24       	eor	r15, r15
   13adc:	f3 94       	inc	r15
   13ade:	89 2b       	or	r24, r25
   13ae0:	09 f0       	breq	.+2      	; 0x13ae4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1178>
   13ae2:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3235
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
   13ae4:	6c e5       	ldi	r22, 0x5C	; 92
   13ae6:	75 e0       	ldi	r23, 0x05	; 5
   13ae8:	86 ea       	ldi	r24, 0xA6	; 166
   13aea:	98 e0       	ldi	r25, 0x08	; 8
   13aec:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13af0:	89 2b       	or	r24, r25
   13af2:	11 f4       	brne	.+4      	; 0x13af8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118c>
_Z13mqtt_callbackPcPhj():
   13af4:	43 e0       	ldi	r20, 0x03	; 3
   13af6:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
   13af8:	63 e6       	ldi	r22, 0x63	; 99
   13afa:	75 e0       	ldi	r23, 0x05	; 5
   13afc:	86 ea       	ldi	r24, 0xA6	; 166
   13afe:	98 e0       	ldi	r25, 0x08	; 8
   13b00:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13b04:	89 2b       	or	r24, r25
   13b06:	11 f4       	brne	.+4      	; 0x13b0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a0>
_Z13mqtt_callbackPcPhj():
   13b08:	32 e0       	ldi	r19, 0x02	; 2
   13b0a:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
   13b0c:	62 e5       	ldi	r22, 0x52	; 82
   13b0e:	78 e0       	ldi	r23, 0x08	; 8
   13b10:	86 ea       	ldi	r24, 0xA6	; 166
   13b12:	98 e0       	ldi	r25, 0x08	; 8
   13b14:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13b18:	89 2b       	or	r24, r25
   13b1a:	11 f4       	brne	.+4      	; 0x13b20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b4>
_Z13mqtt_callbackPcPhj():
   13b1c:	24 e0       	ldi	r18, 0x04	; 4
   13b1e:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
   13b20:	68 e6       	ldi	r22, 0x68	; 104
   13b22:	75 e0       	ldi	r23, 0x05	; 5
   13b24:	86 ea       	ldi	r24, 0xA6	; 166
   13b26:	98 e0       	ldi	r25, 0x08	; 8
   13b28:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13b2c:	89 2b       	or	r24, r25
   13b2e:	11 f4       	brne	.+4      	; 0x13b34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c8>
_Z13mqtt_callbackPcPhj():
   13b30:	96 e0       	ldi	r25, 0x06	; 6
   13b32:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
          thermostat_ring_set_mezni(id, atoi(my_payload));
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
          active = convert_text_mode(my_payload);
   13b34:	ca 5b       	subi	r28, 0xBA	; 186
   13b36:	de 4f       	sbci	r29, 0xFE	; 254
   13b38:	f8 82       	st	Y, r15
   13b3a:	c6 54       	subi	r28, 0x46	; 70
   13b3c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
          thermostat_ring_set_mode(id, active);
   13b3e:	6f 2d       	mov	r22, r15
   13b40:	87 2d       	mov	r24, r7
   13b42:	0e 94 66 6d 	call	0xdacc	; 0xdacc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
          if (active == TERM_MODE_MAN_HEAT)
   13b46:	ca 5b       	subi	r28, 0xBA	; 186
   13b48:	de 4f       	sbci	r29, 0xFE	; 254
   13b4a:	88 81       	ld	r24, Y
   13b4c:	c6 54       	subi	r28, 0x46	; 70
   13b4e:	d1 40       	sbci	r29, 0x01	; 1
   13b50:	83 30       	cpi	r24, 0x03	; 3
   13b52:	21 f4       	brne	.+8      	; 0x13b5c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   13b54:	60 e0       	ldi	r22, 0x00	; 0
   13b56:	87 2d       	mov	r24, r7
   13b58:	0e 94 54 dd 	call	0x1baa8	; 0x1baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
          if (active == TERM_MODE_MAN_COOL)
   13b5c:	ca 5b       	subi	r28, 0xBA	; 186
   13b5e:	de 4f       	sbci	r29, 0xFE	; 254
   13b60:	88 81       	ld	r24, Y
   13b62:	c6 54       	subi	r28, 0x46	; 70
   13b64:	d1 40       	sbci	r29, 0x01	; 1
   13b66:	85 30       	cpi	r24, 0x05	; 5
   13b68:	21 f4       	brne	.+8      	; 0x13b72 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2509
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   13b6a:	61 e0       	ldi	r22, 0x01	; 1
   13b6c:	87 2d       	mov	r24, r7
   13b6e:	0e 94 54 dd 	call	0x1baa8	; 0x1baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510
          change_term_mode = 1;
   13b72:	c0 92 5c 09 	sts	0x095C, r12	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513

        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   13b76:	6d e4       	ldi	r22, 0x4D	; 77
   13b78:	76 e0       	ldi	r23, 0x06	; 6
   13b7a:	c8 01       	movw	r24, r16
   13b7c:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13b80:	89 2b       	or	r24, r25
   13b82:	59 f5       	brne	.+86     	; 0x13bda <mqtt_callback(char*, unsigned char*, unsigned int)+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   13b84:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
   13b88:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
   13b8c:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
          active = atoi(my_payload);
   13b90:	86 ea       	ldi	r24, 0xA6	; 166
   13b92:	98 e0       	ldi	r25, 0x08	; 8
   13b94:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13b98:	ca 5b       	subi	r28, 0xBA	; 186
   13b9a:	de 4f       	sbci	r29, 0xFE	; 254
   13b9c:	88 83       	st	Y, r24
   13b9e:	c6 54       	subi	r28, 0x46	; 70
   13ba0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
          thermostat_ring_set_mode(id, active);
   13ba2:	68 2f       	mov	r22, r24
   13ba4:	87 2d       	mov	r24, r7
   13ba6:	0e 94 66 6d 	call	0xdacc	; 0xdacc <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
          if (active == TERM_MODE_MAN_HEAT)
   13baa:	ca 5b       	subi	r28, 0xBA	; 186
   13bac:	de 4f       	sbci	r29, 0xFE	; 254
   13bae:	88 81       	ld	r24, Y
   13bb0:	c6 54       	subi	r28, 0x46	; 70
   13bb2:	d1 40       	sbci	r29, 0x01	; 1
   13bb4:	83 30       	cpi	r24, 0x03	; 3
   13bb6:	21 f4       	brne	.+8      	; 0x13bc0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   13bb8:	60 e0       	ldi	r22, 0x00	; 0
   13bba:	87 2d       	mov	r24, r7
   13bbc:	0e 94 54 dd 	call	0x1baa8	; 0x1baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2520
          if (active == TERM_MODE_MAN_COOL)
   13bc0:	ca 5b       	subi	r28, 0xBA	; 186
   13bc2:	de 4f       	sbci	r29, 0xFE	; 254
   13bc4:	88 81       	ld	r24, Y
   13bc6:	c6 54       	subi	r28, 0x46	; 70
   13bc8:	d1 40       	sbci	r29, 0x01	; 1
   13bca:	85 30       	cpi	r24, 0x05	; 5
   13bcc:	21 f4       	brne	.+8      	; 0x13bd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   13bce:	61 e0       	ldi	r22, 0x01	; 1
   13bd0:	87 2d       	mov	r24, r7
   13bd2:	0e 94 54 dd 	call	0x1baa8	; 0x1baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2522
          change_term_mode = 1;
   13bd6:	c0 92 5c 09 	sts	0x095C, r12	; 0x80095c <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   13bda:	62 e5       	ldi	r22, 0x52	; 82
   13bdc:	76 e0       	ldi	r23, 0x06	; 6
   13bde:	c8 01       	movw	r24, r16
   13be0:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13be4:	89 2b       	or	r24, r25
   13be6:	69 f4       	brne	.+26     	; 0x13c02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1296>
   13be8:	86 ea       	ldi	r24, 0xA6	; 166
   13bea:	98 e0       	ldi	r25, 0x08	; 8
   13bec:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   13bf0:	7d 9c       	mul	r7, r13
   13bf2:	90 01       	movw	r18, r0
   13bf4:	11 24       	eor	r1, r1
   13bf6:	68 2f       	mov	r22, r24
   13bf8:	c9 01       	movw	r24, r18
   13bfa:	84 5a       	subi	r24, 0xA4	; 164
   13bfc:	9e 4f       	sbci	r25, 0xFE	; 254
   13bfe:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   13c02:	6a e0       	ldi	r22, 0x0A	; 10
   13c04:	74 e0       	ldi	r23, 0x04	; 4
   13c06:	c8 01       	movw	r24, r16
   13c08:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13c0c:	89 2b       	or	r24, r25
   13c0e:	69 f4       	brne	.+26     	; 0x13c2a <mqtt_callback(char*, unsigned char*, unsigned int)+0x12be>
   13c10:	86 ea       	ldi	r24, 0xA6	; 166
   13c12:	98 e0       	ldi	r25, 0x08	; 8
   13c14:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   13c18:	7d 9c       	mul	r7, r13
   13c1a:	90 01       	movw	r18, r0
   13c1c:	11 24       	eor	r1, r1
   13c1e:	68 2f       	mov	r22, r24
   13c20:	c9 01       	movw	r24, r18
   13c22:	83 5a       	subi	r24, 0xA3	; 163
   13c24:	9e 4f       	sbci	r25, 0xFE	; 254
   13c26:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   13c2a:	68 e5       	ldi	r22, 0x58	; 88
   13c2c:	76 e0       	ldi	r23, 0x06	; 6
   13c2e:	c8 01       	movw	r24, r16
   13c30:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13c34:	89 2b       	or	r24, r25
   13c36:	69 f4       	brne	.+26     	; 0x13c52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
   13c38:	86 ea       	ldi	r24, 0xA6	; 166
   13c3a:	98 e0       	ldi	r25, 0x08	; 8
   13c3c:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   13c40:	7d 9c       	mul	r7, r13
   13c42:	90 01       	movw	r18, r0
   13c44:	11 24       	eor	r1, r1
   13c46:	68 2f       	mov	r22, r24
   13c48:	c9 01       	movw	r24, r18
   13c4a:	81 5a       	subi	r24, 0xA1	; 161
   13c4c:	9e 4f       	sbci	r25, 0xFE	; 254
   13c4e:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   13c52:	6f e5       	ldi	r22, 0x5F	; 95
   13c54:	76 e0       	ldi	r23, 0x06	; 6
   13c56:	c8 01       	movw	r24, r16
   13c58:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13c5c:	89 2b       	or	r24, r25
   13c5e:	a1 f4       	brne	.+40     	; 0x13c88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x131c>
   13c60:	86 ea       	ldi	r24, 0xA6	; 166
   13c62:	98 e0       	ldi	r25, 0x08	; 8
   13c64:	0e 94 4f f1 	call	0x1e29e	; 0x1e29e <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
   13c68:	24 e0       	ldi	r18, 0x04	; 4
   13c6a:	72 9e       	mul	r7, r18
   13c6c:	f0 01       	movw	r30, r0
   13c6e:	11 24       	eor	r1, r1
   13c70:	ec 5a       	subi	r30, 0xAC	; 172
   13c72:	f5 4f       	sbci	r31, 0xF5	; 245
   13c74:	60 83       	st	Z, r22
   13c76:	71 83       	std	Z+1, r23	; 0x01
   13c78:	82 83       	std	Z+2, r24	; 0x02
   13c7a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   13c7c:	87 2d       	mov	r24, r7
   13c7e:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   13c82:	87 2d       	mov	r24, r7
   13c84:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2529
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   13c88:	66 e6       	ldi	r22, 0x66	; 102
   13c8a:	76 e0       	ldi	r23, 0x06	; 6
   13c8c:	c8 01       	movw	r24, r16
   13c8e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13c92:	89 2b       	or	r24, r25
   13c94:	a1 f4       	brne	.+40     	; 0x13cbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
   13c96:	86 ea       	ldi	r24, 0xA6	; 166
   13c98:	98 e0       	ldi	r25, 0x08	; 8
   13c9a:	0e 94 4f f1 	call	0x1e29e	; 0x1e29e <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
   13c9e:	a4 e0       	ldi	r26, 0x04	; 4
   13ca0:	7a 9e       	mul	r7, r26
   13ca2:	f0 01       	movw	r30, r0
   13ca4:	11 24       	eor	r1, r1
   13ca6:	e8 59       	subi	r30, 0x98	; 152
   13ca8:	f5 4f       	sbci	r31, 0xF5	; 245
   13caa:	60 83       	st	Z, r22
   13cac:	71 83       	std	Z+1, r23	; 0x01
   13cae:	82 83       	std	Z+2, r24	; 0x02
   13cb0:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   13cb2:	87 2d       	mov	r24, r7
   13cb4:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   13cb8:	87 2d       	mov	r24, r7
   13cba:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2530
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   13cbe:	6d e6       	ldi	r22, 0x6D	; 109
   13cc0:	76 e0       	ldi	r23, 0x06	; 6
   13cc2:	c8 01       	movw	r24, r16
   13cc4:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13cc8:	89 2b       	or	r24, r25
   13cca:	a1 f4       	brne	.+40     	; 0x13cf4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1388>
   13ccc:	86 ea       	ldi	r24, 0xA6	; 166
   13cce:	98 e0       	ldi	r25, 0x08	; 8
   13cd0:	0e 94 4f f1 	call	0x1e29e	; 0x1e29e <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
   13cd4:	b4 e0       	ldi	r27, 0x04	; 4
   13cd6:	7b 9e       	mul	r7, r27
   13cd8:	f0 01       	movw	r30, r0
   13cda:	11 24       	eor	r1, r1
   13cdc:	e4 58       	subi	r30, 0x84	; 132
   13cde:	f5 4f       	sbci	r31, 0xF5	; 245
   13ce0:	60 83       	st	Z, r22
   13ce2:	71 83       	std	Z+1, r23	; 0x01
   13ce4:	82 83       	std	Z+2, r24	; 0x02
   13ce6:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   13ce8:	87 2d       	mov	r24, r7
   13cea:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   13cee:	87 2d       	mov	r24, r7
   13cf0:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   13cf4:	64 e7       	ldi	r22, 0x74	; 116
   13cf6:	76 e0       	ldi	r23, 0x06	; 6
   13cf8:	c8 01       	movw	r24, r16
   13cfa:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   13cfe:	89 2b       	or	r24, r25
   13d00:	79 f4       	brne	.+30     	; 0x13d20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   13d02:	86 ea       	ldi	r24, 0xA6	; 166
   13d04:	98 e0       	ldi	r25, 0x08	; 8
   13d06:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
   13d0a:	e7 2d       	mov	r30, r7
   13d0c:	f0 e0       	ldi	r31, 0x00	; 0
   13d0e:	e0 57       	subi	r30, 0x70	; 112
   13d10:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2531
   13d12:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   13d14:	87 2d       	mov	r24, r7
   13d16:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   13d1a:	87 2d       	mov	r24, r7
   13d1c:	0e 94 70 6c 	call	0xd8e0	; 0xd8e0 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2537
      }
      else
      {
        log_error(&mqtt_client, "E");
      }
      pch = strtok (NULL, "/");
   13d20:	6f e4       	ldi	r22, 0x4F	; 79
   13d22:	75 e0       	ldi	r23, 0x05	; 5
   13d24:	90 e0       	ldi	r25, 0x00	; 0
   13d26:	80 e0       	ldi	r24, 0x00	; 0
   13d28:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   13d2c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2538
      cnt++;
   13d2e:	e3 94       	inc	r14
   13d30:	5f ce       	rjmp	.-834    	; 0x139f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1084>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   13d32:	6c eb       	ldi	r22, 0xBC	; 188
   13d34:	71 e8       	ldi	r23, 0x81	; 129
   13d36:	c5 01       	movw	r24, r10
   13d38:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2544
  strcat(str1, device.nazev);
   13d3c:	6b ec       	ldi	r22, 0xCB	; 203
   13d3e:	7d e0       	ldi	r23, 0x0D	; 13
   13d40:	c5 01       	movw	r24, r10
   13d42:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  strcat(str1, "/ring/clear");
   13d46:	61 e7       	ldi	r22, 0x71	; 113
   13d48:	75 e0       	ldi	r23, 0x05	; 5
   13d4a:	c5 01       	movw	r24, r10
   13d4c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13d50:	f5 01       	movw	r30, r10
   13d52:	01 90       	ld	r0, Z+
   13d54:	00 20       	and	r0, r0
   13d56:	e9 f7       	brne	.-6      	; 0x13d52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e6>
   13d58:	31 97       	sbiw	r30, 0x01	; 1
   13d5a:	af 01       	movw	r20, r30
   13d5c:	4a 19       	sub	r20, r10
   13d5e:	5b 09       	sbc	r21, r11
   13d60:	b4 01       	movw	r22, r8
   13d62:	c5 01       	movw	r24, r10
   13d64:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   13d68:	89 2b       	or	r24, r25
   13d6a:	a1 f4       	brne	.+40     	; 0x13d94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2548
  {
    mqtt_process_message++;
   13d6c:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13d70:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   13d74:	01 96       	adiw	r24, 0x01	; 1
   13d76:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   13d7a:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
    id = atoi(my_payload);
   13d7e:	86 ea       	ldi	r24, 0xA6	; 166
   13d80:	98 e0       	ldi	r25, 0x08	; 8
   13d82:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   13d86:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2550
    if (id < MAX_THERMOSTAT)
   13d88:	e4 e0       	ldi	r30, 0x04	; 4
   13d8a:	e8 17       	cp	r30, r24
   13d8c:	08 f4       	brcc	.+2      	; 0x13d90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1424>
   13d8e:	9c c1       	rjmp	.+824    	; 0x140c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x175c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2552
    {
      thermostat_ring_clear(id);
   13d90:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   13d94:	6c eb       	ldi	r22, 0xBC	; 188
   13d96:	71 e8       	ldi	r23, 0x81	; 129
   13d98:	c5 01       	movw	r24, r10
   13d9a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
  strcat(str1, device.nazev);
   13d9e:	6b ec       	ldi	r22, 0xCB	; 203
   13da0:	7d e0       	ldi	r23, 0x0D	; 13
   13da2:	c5 01       	movw	r24, r10
   13da4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
  strcat(str1, "/network/get/config");
   13da8:	6d e7       	ldi	r22, 0x7D	; 125
   13daa:	75 e0       	ldi	r23, 0x05	; 5
   13dac:	c5 01       	movw	r24, r10
   13dae:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2566
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13db2:	f5 01       	movw	r30, r10
   13db4:	01 90       	ld	r0, Z+
   13db6:	00 20       	and	r0, r0
   13db8:	e9 f7       	brne	.-6      	; 0x13db4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1448>
   13dba:	31 97       	sbiw	r30, 0x01	; 1
   13dbc:	af 01       	movw	r20, r30
   13dbe:	4a 19       	sub	r20, r10
   13dc0:	5b 09       	sbc	r21, r11
   13dc2:	b4 01       	movw	r22, r8
   13dc4:	c5 01       	movw	r24, r10
   13dc6:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   13dca:	89 2b       	or	r24, r25
   13dcc:	09 f0       	breq	.+2      	; 0x13dd0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1464>
   13dce:	2f c1       	rjmp	.+606    	; 0x1402e <mqtt_callback(char*, unsigned char*, unsigned int)+0x16c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
  {
    mqtt_process_message++;
   13dd0:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   13dd4:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   13dd8:	01 96       	adiw	r24, 0x01	; 1
   13dda:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   13dde:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:263
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
   13de2:	c8 5d       	subi	r28, 0xD8	; 216
   13de4:	de 4f       	sbci	r29, 0xFE	; 254
   13de6:	18 82       	st	Y, r1
   13de8:	c8 52       	subi	r28, 0x28	; 40
   13dea:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:264
  createString(payload, ':', device.mac, 6, 16);
   13dec:	00 e1       	ldi	r16, 0x10	; 16
   13dee:	26 e0       	ldi	r18, 0x06	; 6
   13df0:	45 eb       	ldi	r20, 0xB5	; 181
   13df2:	5d e0       	ldi	r21, 0x0D	; 13
   13df4:	6a e3       	ldi	r22, 0x3A	; 58
   13df6:	ce 01       	movw	r24, r28
   13df8:	88 5d       	subi	r24, 0xD8	; 216
   13dfa:	9e 4f       	sbci	r25, 0xFE	; 254
   13dfc:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:265
  strcpy_P(str_topic, network_mac);
   13e00:	63 e1       	ldi	r22, 0x13	; 19
   13e02:	71 e8       	ldi	r23, 0x81	; 129
   13e04:	ce 01       	movw	r24, r28
   13e06:	88 5b       	subi	r24, 0xB8	; 184
   13e08:	9f 4f       	sbci	r25, 0xFF	; 255
   13e0a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13e0e:	ae 01       	movw	r20, r28
   13e10:	48 5d       	subi	r20, 0xD8	; 216
   13e12:	5e 4f       	sbci	r21, 0xFE	; 254
   13e14:	be 01       	movw	r22, r28
   13e16:	68 5b       	subi	r22, 0xB8	; 184
   13e18:	7f 4f       	sbci	r23, 0xFF	; 255
   13e1a:	8b ec       	ldi	r24, 0xCB	; 203
   13e1c:	9f e0       	ldi	r25, 0x0F	; 15
   13e1e:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:268
  ///
  payload[0] = 0;
   13e22:	c8 5d       	subi	r28, 0xD8	; 216
   13e24:	de 4f       	sbci	r29, 0xFE	; 254
   13e26:	18 82       	st	Y, r1
   13e28:	c8 52       	subi	r28, 0x28	; 40
   13e2a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:269
  createString(payload, '.', device.myIP, 4, 10);
   13e2c:	0a e0       	ldi	r16, 0x0A	; 10
   13e2e:	24 e0       	ldi	r18, 0x04	; 4
   13e30:	4b eb       	ldi	r20, 0xBB	; 187
   13e32:	5d e0       	ldi	r21, 0x0D	; 13
   13e34:	6e e2       	ldi	r22, 0x2E	; 46
   13e36:	ce 01       	movw	r24, r28
   13e38:	88 5d       	subi	r24, 0xD8	; 216
   13e3a:	9e 4f       	sbci	r25, 0xFE	; 254
   13e3c:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:270
  strcpy_P(str_topic, network_ip);
   13e40:	66 e3       	ldi	r22, 0x36	; 54
   13e42:	78 e8       	ldi	r23, 0x88	; 136
   13e44:	ce 01       	movw	r24, r28
   13e46:	88 5b       	subi	r24, 0xB8	; 184
   13e48:	9f 4f       	sbci	r25, 0xFF	; 255
   13e4a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:271
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13e4e:	ae 01       	movw	r20, r28
   13e50:	48 5d       	subi	r20, 0xD8	; 216
   13e52:	5e 4f       	sbci	r21, 0xFE	; 254
   13e54:	be 01       	movw	r22, r28
   13e56:	68 5b       	subi	r22, 0xB8	; 184
   13e58:	7f 4f       	sbci	r23, 0xFF	; 255
   13e5a:	8b ec       	ldi	r24, 0xCB	; 203
   13e5c:	9f e0       	ldi	r25, 0x0F	; 15
   13e5e:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:273
  ///
  payload[0] = 0;
   13e62:	c8 5d       	subi	r28, 0xD8	; 216
   13e64:	de 4f       	sbci	r29, 0xFE	; 254
   13e66:	18 82       	st	Y, r1
   13e68:	c8 52       	subi	r28, 0x28	; 40
   13e6a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:274
  createString(payload, '.', device.myMASK, 4, 10);
   13e6c:	24 e0       	ldi	r18, 0x04	; 4
   13e6e:	4f eb       	ldi	r20, 0xBF	; 191
   13e70:	5d e0       	ldi	r21, 0x0D	; 13
   13e72:	6e e2       	ldi	r22, 0x2E	; 46
   13e74:	ce 01       	movw	r24, r28
   13e76:	88 5d       	subi	r24, 0xD8	; 216
   13e78:	9e 4f       	sbci	r25, 0xFE	; 254
   13e7a:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:275
  strcpy_P(str_topic, network_netmask);
   13e7e:	63 e0       	ldi	r22, 0x03	; 3
   13e80:	71 e8       	ldi	r23, 0x81	; 129
   13e82:	ce 01       	movw	r24, r28
   13e84:	88 5b       	subi	r24, 0xB8	; 184
   13e86:	9f 4f       	sbci	r25, 0xFF	; 255
   13e88:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:276
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13e8c:	ae 01       	movw	r20, r28
   13e8e:	48 5d       	subi	r20, 0xD8	; 216
   13e90:	5e 4f       	sbci	r21, 0xFE	; 254
   13e92:	be 01       	movw	r22, r28
   13e94:	68 5b       	subi	r22, 0xB8	; 184
   13e96:	7f 4f       	sbci	r23, 0xFF	; 255
   13e98:	8b ec       	ldi	r24, 0xCB	; 203
   13e9a:	9f e0       	ldi	r25, 0x0F	; 15
   13e9c:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:278
  ///
  payload[0] = 0;
   13ea0:	c8 5d       	subi	r28, 0xD8	; 216
   13ea2:	de 4f       	sbci	r29, 0xFE	; 254
   13ea4:	18 82       	st	Y, r1
   13ea6:	c8 52       	subi	r28, 0x28	; 40
   13ea8:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:279
  createString(payload, '.', device.myGW, 4, 10);
   13eaa:	24 e0       	ldi	r18, 0x04	; 4
   13eac:	47 ec       	ldi	r20, 0xC7	; 199
   13eae:	5d e0       	ldi	r21, 0x0D	; 13
   13eb0:	6e e2       	ldi	r22, 0x2E	; 46
   13eb2:	ce 01       	movw	r24, r28
   13eb4:	88 5d       	subi	r24, 0xD8	; 216
   13eb6:	9e 4f       	sbci	r25, 0xFE	; 254
   13eb8:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:280
  strcpy_P(str_topic, network_gw);
   13ebc:	68 ef       	ldi	r22, 0xF8	; 248
   13ebe:	70 e8       	ldi	r23, 0x80	; 128
   13ec0:	ce 01       	movw	r24, r28
   13ec2:	88 5b       	subi	r24, 0xB8	; 184
   13ec4:	9f 4f       	sbci	r25, 0xFF	; 255
   13ec6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13eca:	ae 01       	movw	r20, r28
   13ecc:	48 5d       	subi	r20, 0xD8	; 216
   13ece:	5e 4f       	sbci	r21, 0xFE	; 254
   13ed0:	be 01       	movw	r22, r28
   13ed2:	68 5b       	subi	r22, 0xB8	; 184
   13ed4:	7f 4f       	sbci	r23, 0xFF	; 255
   13ed6:	8b ec       	ldi	r24, 0xCB	; 203
   13ed8:	9f e0       	ldi	r25, 0x0F	; 15
   13eda:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:283
  ///
  payload[0] = 0;
   13ede:	c8 5d       	subi	r28, 0xD8	; 216
   13ee0:	de 4f       	sbci	r29, 0xFE	; 254
   13ee2:	18 82       	st	Y, r1
   13ee4:	c8 52       	subi	r28, 0x28	; 40
   13ee6:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.myDNS, 4, 10);
   13ee8:	24 e0       	ldi	r18, 0x04	; 4
   13eea:	43 ec       	ldi	r20, 0xC3	; 195
   13eec:	5d e0       	ldi	r21, 0x0D	; 13
   13eee:	6e e2       	ldi	r22, 0x2E	; 46
   13ef0:	ce 01       	movw	r24, r28
   13ef2:	88 5d       	subi	r24, 0xD8	; 216
   13ef4:	9e 4f       	sbci	r25, 0xFE	; 254
   13ef6:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:285
  strcpy_P(str_topic, network_dns);
   13efa:	6c ee       	ldi	r22, 0xEC	; 236
   13efc:	70 e8       	ldi	r23, 0x80	; 128
   13efe:	ce 01       	movw	r24, r28
   13f00:	88 5b       	subi	r24, 0xB8	; 184
   13f02:	9f 4f       	sbci	r25, 0xFF	; 255
   13f04:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:286
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13f08:	ae 01       	movw	r20, r28
   13f0a:	48 5d       	subi	r20, 0xD8	; 216
   13f0c:	5e 4f       	sbci	r21, 0xFE	; 254
   13f0e:	be 01       	movw	r22, r28
   13f10:	68 5b       	subi	r22, 0xB8	; 184
   13f12:	7f 4f       	sbci	r23, 0xFF	; 255
   13f14:	8b ec       	ldi	r24, 0xCB	; 203
   13f16:	9f e0       	ldi	r25, 0x0F	; 15
   13f18:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:288
  ///
  payload[0] = 0;
   13f1c:	c8 5d       	subi	r28, 0xD8	; 216
   13f1e:	de 4f       	sbci	r29, 0xFE	; 254
   13f20:	18 82       	st	Y, r1
   13f22:	c8 52       	subi	r28, 0x28	; 40
   13f24:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:289
  createString(payload, '.', device.ntp_server, 4, 10);
   13f26:	24 e0       	ldi	r18, 0x04	; 4
   13f28:	43 e0       	ldi	r20, 0x03	; 3
   13f2a:	5e e0       	ldi	r21, 0x0E	; 14
   13f2c:	6e e2       	ldi	r22, 0x2E	; 46
   13f2e:	ce 01       	movw	r24, r28
   13f30:	88 5d       	subi	r24, 0xD8	; 216
   13f32:	9e 4f       	sbci	r25, 0xFE	; 254
   13f34:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:290
  strcpy_P(str_topic, network_ntp);
   13f38:	60 ee       	ldi	r22, 0xE0	; 224
   13f3a:	70 e8       	ldi	r23, 0x80	; 128
   13f3c:	ce 01       	movw	r24, r28
   13f3e:	88 5b       	subi	r24, 0xB8	; 184
   13f40:	9f 4f       	sbci	r25, 0xFF	; 255
   13f42:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13f46:	ae 01       	movw	r20, r28
   13f48:	48 5d       	subi	r20, 0xD8	; 216
   13f4a:	5e 4f       	sbci	r21, 0xFE	; 254
   13f4c:	be 01       	movw	r22, r28
   13f4e:	68 5b       	subi	r22, 0xB8	; 184
   13f50:	7f 4f       	sbci	r23, 0xFF	; 255
   13f52:	8b ec       	ldi	r24, 0xCB	; 203
   13f54:	9f e0       	ldi	r25, 0x0F	; 15
   13f56:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:293
  ///
  payload[0] = 0;
   13f5a:	c8 5d       	subi	r28, 0xD8	; 216
   13f5c:	de 4f       	sbci	r29, 0xFE	; 254
   13f5e:	18 82       	st	Y, r1
   13f60:	c8 52       	subi	r28, 0x28	; 40
   13f62:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:294
  createString(payload, '.', device.mqtt_server, 4, 10);
   13f64:	24 e0       	ldi	r18, 0x04	; 4
   13f66:	45 ed       	ldi	r20, 0xD5	; 213
   13f68:	5d e0       	ldi	r21, 0x0D	; 13
   13f6a:	6e e2       	ldi	r22, 0x2E	; 46
   13f6c:	ce 01       	movw	r24, r28
   13f6e:	88 5d       	subi	r24, 0xD8	; 216
   13f70:	9e 4f       	sbci	r25, 0xFE	; 254
   13f72:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:295
  strcpy_P(str_topic, network_mqtt_host);
   13f76:	6e ec       	ldi	r22, 0xCE	; 206
   13f78:	70 e8       	ldi	r23, 0x80	; 128
   13f7a:	ce 01       	movw	r24, r28
   13f7c:	88 5b       	subi	r24, 0xB8	; 184
   13f7e:	9f 4f       	sbci	r25, 0xFF	; 255
   13f80:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:296
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13f84:	ae 01       	movw	r20, r28
   13f86:	48 5d       	subi	r20, 0xD8	; 216
   13f88:	5e 4f       	sbci	r21, 0xFE	; 254
   13f8a:	be 01       	movw	r22, r28
   13f8c:	68 5b       	subi	r22, 0xB8	; 184
   13f8e:	7f 4f       	sbci	r23, 0xFF	; 255
   13f90:	8b ec       	ldi	r24, 0xCB	; 203
   13f92:	9f e0       	ldi	r25, 0x0F	; 15
   13f94:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   13f98:	4a e0       	ldi	r20, 0x0A	; 10
   13f9a:	be 01       	movw	r22, r28
   13f9c:	68 5d       	subi	r22, 0xD8	; 216
   13f9e:	7e 4f       	sbci	r23, 0xFE	; 254
   13fa0:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <device+0x24>
   13fa4:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <device+0x25>
   13fa8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:299
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
   13fac:	6c eb       	ldi	r22, 0xBC	; 188
   13fae:	70 e8       	ldi	r23, 0x80	; 128
   13fb0:	ce 01       	movw	r24, r28
   13fb2:	88 5b       	subi	r24, 0xB8	; 184
   13fb4:	9f 4f       	sbci	r25, 0xFF	; 255
   13fb6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:300
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13fba:	ae 01       	movw	r20, r28
   13fbc:	48 5d       	subi	r20, 0xD8	; 216
   13fbe:	5e 4f       	sbci	r21, 0xFE	; 254
   13fc0:	be 01       	movw	r22, r28
   13fc2:	68 5b       	subi	r22, 0xB8	; 184
   13fc4:	7f 4f       	sbci	r23, 0xFF	; 255
   13fc6:	8b ec       	ldi	r24, 0xCB	; 203
   13fc8:	9f e0       	ldi	r25, 0x0F	; 15
   13fca:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:302
  ///
  strcpy_P(str_topic, network_mqtt_user);
   13fce:	6a ea       	ldi	r22, 0xAA	; 170
   13fd0:	70 e8       	ldi	r23, 0x80	; 128
   13fd2:	ce 01       	movw	r24, r28
   13fd4:	88 5b       	subi	r24, 0xB8	; 184
   13fd6:	9f 4f       	sbci	r25, 0xFF	; 255
   13fd8:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:303
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
   13fdc:	4b ed       	ldi	r20, 0xDB	; 219
   13fde:	5d e0       	ldi	r21, 0x0D	; 13
   13fe0:	be 01       	movw	r22, r28
   13fe2:	68 5b       	subi	r22, 0xB8	; 184
   13fe4:	7f 4f       	sbci	r23, 0xFF	; 255
   13fe6:	8b ec       	ldi	r24, 0xCB	; 203
   13fe8:	9f e0       	ldi	r25, 0x0F	; 15
   13fea:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:305
  ///
  strcpy_P(str_topic, network_mqtt_key);
   13fee:	69 e9       	ldi	r22, 0x99	; 153
   13ff0:	70 e8       	ldi	r23, 0x80	; 128
   13ff2:	ce 01       	movw	r24, r28
   13ff4:	88 5b       	subi	r24, 0xB8	; 184
   13ff6:	9f 4f       	sbci	r25, 0xFF	; 255
   13ff8:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:306
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
   13ffc:	4f ee       	ldi	r20, 0xEF	; 239
   13ffe:	5d e0       	ldi	r21, 0x0D	; 13
   14000:	be 01       	movw	r22, r28
   14002:	68 5b       	subi	r22, 0xB8	; 184
   14004:	7f 4f       	sbci	r23, 0xFF	; 255
   14006:	8b ec       	ldi	r24, 0xCB	; 203
   14008:	9f e0       	ldi	r25, 0x0F	; 15
   1400a:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:308
  ///
  strcpy_P(str_topic, network_name);
   1400e:	6c e8       	ldi	r22, 0x8C	; 140
   14010:	70 e8       	ldi	r23, 0x80	; 128
   14012:	ce 01       	movw	r24, r28
   14014:	88 5b       	subi	r24, 0xB8	; 184
   14016:	9f 4f       	sbci	r25, 0xFF	; 255
   14018:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:309
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
   1401c:	4b ec       	ldi	r20, 0xCB	; 203
   1401e:	5d e0       	ldi	r21, 0x0D	; 13
   14020:	be 01       	movw	r22, r28
   14022:	68 5b       	subi	r22, 0xB8	; 184
   14024:	7f 4f       	sbci	r23, 0xFF	; 255
   14026:	8b ec       	ldi	r24, 0xCB	; 203
   14028:	9f e0       	ldi	r25, 0x0F	; 15
   1402a:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   1402e:	6c eb       	ldi	r22, 0xBC	; 188
   14030:	71 e8       	ldi	r23, 0x81	; 129
   14032:	c5 01       	movw	r24, r10
   14034:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
  strcat(str1, device.nazev);
   14038:	6b ec       	ldi	r22, 0xCB	; 203
   1403a:	7d e0       	ldi	r23, 0x0D	; 13
   1403c:	c5 01       	movw	r24, r10
   1403e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
  strcat(str1, "/network/set/");
   14042:	61 e9       	ldi	r22, 0x91	; 145
   14044:	75 e0       	ldi	r23, 0x05	; 5
   14046:	c5 01       	movw	r24, r10
   14048:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2586
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1404c:	f5 01       	movw	r30, r10
   1404e:	01 90       	ld	r0, Z+
   14050:	00 20       	and	r0, r0
   14052:	e9 f7       	brne	.-6      	; 0x1404e <mqtt_callback(char*, unsigned char*, unsigned int)+0x16e2>
   14054:	31 97       	sbiw	r30, 0x01	; 1
   14056:	af 01       	movw	r20, r30
   14058:	4a 19       	sub	r20, r10
   1405a:	5b 09       	sbc	r21, r11
   1405c:	b4 01       	movw	r22, r8
   1405e:	c5 01       	movw	r24, r10
   14060:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   14064:	89 2b       	or	r24, r25
   14066:	09 f0       	breq	.+2      	; 0x1406a <mqtt_callback(char*, unsigned char*, unsigned int)+0x16fe>
   14068:	04 c1       	rjmp	.+520    	; 0x14272 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2588
  {
    mqtt_process_message++;
   1406a:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   1406e:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   14072:	01 96       	adiw	r24, 0x01	; 1
   14074:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   14078:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1407c:	f5 01       	movw	r30, r10
   1407e:	01 90       	ld	r0, Z+
   14080:	00 20       	and	r0, r0
   14082:	e9 f7       	brne	.-6      	; 0x1407e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1712>
   14084:	31 97       	sbiw	r30, 0x01	; 1
   14086:	ea 19       	sub	r30, r10
   14088:	fb 09       	sbc	r31, r11
   1408a:	9e 2f       	mov	r25, r30
   1408c:	4e 2f       	mov	r20, r30
   1408e:	84 2f       	mov	r24, r20
   14090:	89 1b       	sub	r24, r25
   14092:	24 2f       	mov	r18, r20
   14094:	30 e0       	ldi	r19, 0x00	; 0
   14096:	d4 01       	movw	r26, r8
   14098:	0d 90       	ld	r0, X+
   1409a:	00 20       	and	r0, r0
   1409c:	e9 f7       	brne	.-6      	; 0x14098 <mqtt_callback(char*, unsigned char*, unsigned int)+0x172c>
   1409e:	11 97       	sbiw	r26, 0x01	; 1
   140a0:	a8 19       	sub	r26, r8
   140a2:	b9 09       	sbc	r27, r9
   140a4:	2a 17       	cp	r18, r26
   140a6:	3b 07       	cpc	r19, r27
   140a8:	a0 f4       	brcc	.+40     	; 0x140d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2592
    {
      str1[cnt] = topic[f];
   140aa:	a8 ec       	ldi	r26, 0xC8	; 200
   140ac:	b0 e0       	ldi	r27, 0x00	; 0
   140ae:	ac 0f       	add	r26, r28
   140b0:	bd 1f       	adc	r27, r29
   140b2:	a8 0f       	add	r26, r24
   140b4:	b1 1d       	adc	r27, r1
   140b6:	28 0d       	add	r18, r8
   140b8:	39 1d       	adc	r19, r9
   140ba:	f9 01       	movw	r30, r18
   140bc:	80 81       	ld	r24, Z
   140be:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2593
      str1[cnt + 1] = 0;
   140c0:	11 96       	adiw	r26, 0x01	; 1
   140c2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   140c4:	4f 5f       	subi	r20, 0xFF	; 255
   140c6:	e3 cf       	rjmp	.-58     	; 0x1408e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1722>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2556
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "E");
   140c8:	81 ea       	ldi	r24, 0xA1	; 161
   140ca:	93 e0       	ldi	r25, 0x03	; 3
   140cc:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
   140d0:	61 ce       	rjmp	.-830    	; 0x13d94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
   140d2:	6f e4       	ldi	r22, 0x4F	; 79
   140d4:	75 e0       	ldi	r23, 0x05	; 5
   140d6:	ce 01       	movw	r24, r28
   140d8:	88 53       	subi	r24, 0x38	; 56
   140da:	9f 4f       	sbci	r25, 0xFF	; 255
   140dc:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   140e0:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
   140e2:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
   140e4:	e1 14       	cp	r14, r1
   140e6:	f1 04       	cpc	r15, r1
   140e8:	09 f4       	brne	.+2      	; 0x140ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1780>
   140ea:	b7 c0       	rjmp	.+366    	; 0x1425a <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ee>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
   140ec:	6f e9       	ldi	r22, 0x9F	; 159
   140ee:	75 e0       	ldi	r23, 0x05	; 5
   140f0:	c7 01       	movw	r24, r14
   140f2:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   140f6:	89 2b       	or	r24, r25
   140f8:	51 f4       	brne	.+20     	; 0x1410e <mqtt_callback(char*, unsigned char*, unsigned int)+0x17a2>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
   140fa:	26 e0       	ldi	r18, 0x06	; 6
   140fc:	30 e0       	ldi	r19, 0x00	; 0
   140fe:	45 eb       	ldi	r20, 0xB5	; 181
   14100:	5d e0       	ldi	r21, 0x0D	; 13
   14102:	6a e3       	ldi	r22, 0x3A	; 58
   14104:	86 ea       	ldi	r24, 0xA6	; 166
   14106:	98 e0       	ldi	r25, 0x08	; 8
   14108:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
   1410c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
   1410e:	63 ea       	ldi	r22, 0xA3	; 163
   14110:	75 e0       	ldi	r23, 0x05	; 5
   14112:	c7 01       	movw	r24, r14
   14114:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14118:	89 2b       	or	r24, r25
   1411a:	51 f4       	brne	.+20     	; 0x14130 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17c4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
   1411c:	24 e0       	ldi	r18, 0x04	; 4
   1411e:	30 e0       	ldi	r19, 0x00	; 0
   14120:	4b eb       	ldi	r20, 0xBB	; 187
   14122:	5d e0       	ldi	r21, 0x0D	; 13
   14124:	6e e2       	ldi	r22, 0x2E	; 46
   14126:	86 ea       	ldi	r24, 0xA6	; 166
   14128:	98 e0       	ldi	r25, 0x08	; 8
   1412a:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
   1412e:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
   14130:	66 ea       	ldi	r22, 0xA6	; 166
   14132:	75 e0       	ldi	r23, 0x05	; 5
   14134:	c7 01       	movw	r24, r14
   14136:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1413a:	89 2b       	or	r24, r25
   1413c:	51 f4       	brne	.+20     	; 0x14152 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
   1413e:	24 e0       	ldi	r18, 0x04	; 4
   14140:	30 e0       	ldi	r19, 0x00	; 0
   14142:	4f eb       	ldi	r20, 0xBF	; 191
   14144:	5d e0       	ldi	r21, 0x0D	; 13
   14146:	6e e2       	ldi	r22, 0x2E	; 46
   14148:	86 ea       	ldi	r24, 0xA6	; 166
   1414a:	98 e0       	ldi	r25, 0x08	; 8
   1414c:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
   14150:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
   14152:	6e ea       	ldi	r22, 0xAE	; 174
   14154:	75 e0       	ldi	r23, 0x05	; 5
   14156:	c7 01       	movw	r24, r14
   14158:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1415c:	89 2b       	or	r24, r25
   1415e:	51 f4       	brne	.+20     	; 0x14174 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1808>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
   14160:	24 e0       	ldi	r18, 0x04	; 4
   14162:	30 e0       	ldi	r19, 0x00	; 0
   14164:	47 ec       	ldi	r20, 0xC7	; 199
   14166:	5d e0       	ldi	r21, 0x0D	; 13
   14168:	6e e2       	ldi	r22, 0x2E	; 46
   1416a:	86 ea       	ldi	r24, 0xA6	; 166
   1416c:	98 e0       	ldi	r25, 0x08	; 8
   1416e:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
   14172:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
   14174:	61 eb       	ldi	r22, 0xB1	; 177
   14176:	75 e0       	ldi	r23, 0x05	; 5
   14178:	c7 01       	movw	r24, r14
   1417a:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1417e:	89 2b       	or	r24, r25
   14180:	51 f4       	brne	.+20     	; 0x14196 <mqtt_callback(char*, unsigned char*, unsigned int)+0x182a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
   14182:	24 e0       	ldi	r18, 0x04	; 4
   14184:	30 e0       	ldi	r19, 0x00	; 0
   14186:	43 ec       	ldi	r20, 0xC3	; 195
   14188:	5d e0       	ldi	r21, 0x0D	; 13
   1418a:	6e e2       	ldi	r22, 0x2E	; 46
   1418c:	86 ea       	ldi	r24, 0xA6	; 166
   1418e:	98 e0       	ldi	r25, 0x08	; 8
   14190:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
   14194:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
   14196:	65 eb       	ldi	r22, 0xB5	; 181
   14198:	75 e0       	ldi	r23, 0x05	; 5
   1419a:	c7 01       	movw	r24, r14
   1419c:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   141a0:	89 2b       	or	r24, r25
   141a2:	51 f4       	brne	.+20     	; 0x141b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x184c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.',device.ntp_server, 4, 10);
   141a4:	24 e0       	ldi	r18, 0x04	; 4
   141a6:	30 e0       	ldi	r19, 0x00	; 0
   141a8:	43 e0       	ldi	r20, 0x03	; 3
   141aa:	5e e0       	ldi	r21, 0x0E	; 14
   141ac:	6e e2       	ldi	r22, 0x2E	; 46
   141ae:	86 ea       	ldi	r24, 0xA6	; 166
   141b0:	98 e0       	ldi	r25, 0x08	; 8
   141b2:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
   141b6:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
   141b8:	69 eb       	ldi	r22, 0xB9	; 185
   141ba:	75 e0       	ldi	r23, 0x05	; 5
   141bc:	c7 01       	movw	r24, r14
   141be:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   141c2:	89 2b       	or	r24, r25
   141c4:	51 f4       	brne	.+20     	; 0x141da <mqtt_callback(char*, unsigned char*, unsigned int)+0x186e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
   141c6:	24 e0       	ldi	r18, 0x04	; 4
   141c8:	30 e0       	ldi	r19, 0x00	; 0
   141ca:	45 ed       	ldi	r20, 0xD5	; 213
   141cc:	5d e0       	ldi	r21, 0x0D	; 13
   141ce:	6e e2       	ldi	r22, 0x2E	; 46
   141d0:	86 ea       	ldi	r24, 0xA6	; 166
   141d2:	98 e0       	ldi	r25, 0x08	; 8
   141d4:	0e 94 a4 bc 	call	0x17948	; 0x17948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
   141d8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
   141da:	63 ec       	ldi	r22, 0xC3	; 195
   141dc:	75 e0       	ldi	r23, 0x05	; 5
   141de:	c7 01       	movw	r24, r14
   141e0:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   141e4:	89 2b       	or	r24, r25
   141e6:	49 f4       	brne	.+18     	; 0x141fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x188e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
   141e8:	86 ea       	ldi	r24, 0xA6	; 166
   141ea:	98 e0       	ldi	r25, 0x08	; 8
   141ec:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   141f0:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <device+0x25>
   141f4:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
   141f8:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
   141fa:	6d ec       	ldi	r22, 0xCD	; 205
   141fc:	75 e0       	ldi	r23, 0x05	; 5
   141fe:	c7 01       	movw	r24, r14
   14200:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14204:	89 2b       	or	r24, r25
   14206:	39 f4       	brne	.+14     	; 0x14216 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18aa>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
   14208:	66 ea       	ldi	r22, 0xA6	; 166
   1420a:	78 e0       	ldi	r23, 0x08	; 8
   1420c:	8b ed       	ldi	r24, 0xDB	; 219
   1420e:	9d e0       	ldi	r25, 0x0D	; 13
   14210:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
   14214:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
   14216:	67 ed       	ldi	r22, 0xD7	; 215
   14218:	75 e0       	ldi	r23, 0x05	; 5
   1421a:	c7 01       	movw	r24, r14
   1421c:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14220:	89 2b       	or	r24, r25
   14222:	39 f4       	brne	.+14     	; 0x14232 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
   14224:	66 ea       	ldi	r22, 0xA6	; 166
   14226:	78 e0       	ldi	r23, 0x08	; 8
   14228:	8f ee       	ldi	r24, 0xEF	; 239
   1422a:	9d e0       	ldi	r25, 0x0D	; 13
   1422c:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
   14230:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
   14232:	60 e0       	ldi	r22, 0x00	; 0
   14234:	74 e0       	ldi	r23, 0x04	; 4
   14236:	c7 01       	movw	r24, r14
   14238:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1423c:	89 2b       	or	r24, r25
   1423e:	29 f4       	brne	.+10     	; 0x1424a <mqtt_callback(char*, unsigned char*, unsigned int)+0x18de>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
   14240:	86 ea       	ldi	r24, 0xA6	; 166
   14242:	98 e0       	ldi	r25, 0x08	; 8
   14244:	0e 94 f6 6e 	call	0xddec	; 0xddec <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
   14248:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
   1424a:	6f e4       	ldi	r22, 0x4F	; 79
   1424c:	75 e0       	ldi	r23, 0x05	; 5
   1424e:	90 e0       	ldi	r25, 0x00	; 0
   14250:	80 e0       	ldi	r24, 0x00	; 0
   14252:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   14256:	7c 01       	movw	r14, r24
   14258:	45 cf       	rjmp	.-374    	; 0x140e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1778>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2597
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
   1425a:	11 30       	cpi	r17, 0x01	; 1
   1425c:	41 f4       	brne	.+16     	; 0x1426e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1902>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
    {
      save_setup_network();
   1425e:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   14262:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   14266:	80 68       	ori	r24, 0x80	; 128
   14268:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
   1426c:	02 c0       	rjmp	.+4      	; 0x14272 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2602
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   1426e:	12 30       	cpi	r17, 0x02	; 2
   14270:	c1 f3       	breq	.-16     	; 0x14262 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   14272:	6c eb       	ldi	r22, 0xBC	; 188
   14274:	71 e8       	ldi	r23, 0x81	; 129
   14276:	c5 01       	movw	r24, r10
   14278:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2610
  strcat(str1, device.nazev);
   1427c:	6b ec       	ldi	r22, 0xCB	; 203
   1427e:	7d e0       	ldi	r23, 0x0D	; 13
   14280:	c5 01       	movw	r24, r10
   14282:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
  strcat(str1, "/light/set/");
   14286:	61 ee       	ldi	r22, 0xE1	; 225
   14288:	75 e0       	ldi	r23, 0x05	; 5
   1428a:	c5 01       	movw	r24, r10
   1428c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2612
  if (strncmp(str1, topic, strlen(str1)) == 0)
   14290:	f5 01       	movw	r30, r10
   14292:	01 90       	ld	r0, Z+
   14294:	00 20       	and	r0, r0
   14296:	e9 f7       	brne	.-6      	; 0x14292 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1926>
   14298:	31 97       	sbiw	r30, 0x01	; 1
   1429a:	af 01       	movw	r20, r30
   1429c:	4a 19       	sub	r20, r10
   1429e:	5b 09       	sbc	r21, r11
   142a0:	b4 01       	movw	r22, r8
   142a2:	c5 01       	movw	r24, r10
   142a4:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   142a8:	89 2b       	or	r24, r25
   142aa:	09 f0       	breq	.+2      	; 0x142ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1942>
   142ac:	46 c0       	rjmp	.+140    	; 0x1433a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
  {
    mqtt_process_message++;
   142ae:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   142b2:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   142b6:	01 96       	adiw	r24, 0x01	; 1
   142b8:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   142bc:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   142c0:	f5 01       	movw	r30, r10
   142c2:	01 90       	ld	r0, Z+
   142c4:	00 20       	and	r0, r0
   142c6:	e9 f7       	brne	.-6      	; 0x142c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1956>
   142c8:	31 97       	sbiw	r30, 0x01	; 1
   142ca:	ea 19       	sub	r30, r10
   142cc:	fb 09       	sbc	r31, r11
   142ce:	9e 2f       	mov	r25, r30
   142d0:	4e 2f       	mov	r20, r30
   142d2:	84 2f       	mov	r24, r20
   142d4:	89 1b       	sub	r24, r25
   142d6:	24 2f       	mov	r18, r20
   142d8:	30 e0       	ldi	r19, 0x00	; 0
   142da:	d4 01       	movw	r26, r8
   142dc:	0d 90       	ld	r0, X+
   142de:	00 20       	and	r0, r0
   142e0:	e9 f7       	brne	.-6      	; 0x142dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1970>
   142e2:	11 97       	sbiw	r26, 0x01	; 1
   142e4:	a8 19       	sub	r26, r8
   142e6:	b9 09       	sbc	r27, r9
   142e8:	2a 17       	cp	r18, r26
   142ea:	3b 07       	cpc	r19, r27
   142ec:	78 f4       	brcc	.+30     	; 0x1430c <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2619
    {
      str1[cnt] = topic[f];
   142ee:	a8 ec       	ldi	r26, 0xC8	; 200
   142f0:	b0 e0       	ldi	r27, 0x00	; 0
   142f2:	ac 0f       	add	r26, r28
   142f4:	bd 1f       	adc	r27, r29
   142f6:	a8 0f       	add	r26, r24
   142f8:	b1 1d       	adc	r27, r1
   142fa:	28 0d       	add	r18, r8
   142fc:	39 1d       	adc	r19, r9
   142fe:	f9 01       	movw	r30, r18
   14300:	80 81       	ld	r24, Z
   14302:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
      str1[cnt + 1] = 0;
   14304:	11 96       	adiw	r26, 0x01	; 1
   14306:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   14308:	4f 5f       	subi	r20, 0xFF	; 255
   1430a:	e3 cf       	rjmp	.-58     	; 0x142d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1966>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   1430c:	6f e4       	ldi	r22, 0x4F	; 79
   1430e:	75 e0       	ldi	r23, 0x05	; 5
   14310:	ce 01       	movw	r24, r28
   14312:	88 53       	subi	r24, 0x38	; 56
   14314:	9f 4f       	sbci	r25, 0xFF	; 255
   14316:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2623
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1431a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2625
    pch = strtok (str1, "/");
    while (pch != NULL)
   1431c:	00 97       	sbiw	r24, 0x00	; 0
   1431e:	69 f0       	breq	.+26     	; 0x1433a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
    {
      if (cnt == 0) id = atoi(pch);
   14320:	11 11       	cpse	r17, r1
   14322:	03 c0       	rjmp	.+6      	; 0x1432a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19be>
   14324:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   14328:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2630
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   1432a:	6f e4       	ldi	r22, 0x4F	; 79
   1432c:	75 e0       	ldi	r23, 0x05	; 5
   1432e:	90 e0       	ldi	r25, 0x00	; 0
   14330:	80 e0       	ldi	r24, 0x00	; 0
   14332:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2631
      cnt++;
   14336:	1f 5f       	subi	r17, 0xFF	; 255
   14338:	f1 cf       	rjmp	.-30     	; 0x1431c <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2636
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   1433a:	60 e7       	ldi	r22, 0x70	; 112
   1433c:	71 e8       	ldi	r23, 0x81	; 129
   1433e:	c5 01       	movw	r24, r10
   14340:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  strcat(str1, "output/");
   14344:	6f e8       	ldi	r22, 0x8F	; 143
   14346:	73 e0       	ldi	r23, 0x03	; 3
   14348:	c5 01       	movw	r24, r10
   1434a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2638
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1434e:	f5 01       	movw	r30, r10
   14350:	01 90       	ld	r0, Z+
   14352:	00 20       	and	r0, r0
   14354:	e9 f7       	brne	.-6      	; 0x14350 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e4>
   14356:	31 97       	sbiw	r30, 0x01	; 1
   14358:	af 01       	movw	r20, r30
   1435a:	4a 19       	sub	r20, r10
   1435c:	5b 09       	sbc	r21, r11
   1435e:	b4 01       	movw	r22, r8
   14360:	c5 01       	movw	r24, r10
   14362:	0e 94 39 fe 	call	0x1fc72	; 0x1fc72 <strncmp>
   14366:	89 2b       	or	r24, r25
   14368:	09 f0       	breq	.+2      	; 0x1436c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a00>
   1436a:	78 c0       	rjmp	.+240    	; 0x1445c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2640
  {
    mqtt_process_message++;
   1436c:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   14370:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   14374:	01 96       	adiw	r24, 0x01	; 1
   14376:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   1437a:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1437e:	f5 01       	movw	r30, r10
   14380:	01 90       	ld	r0, Z+
   14382:	00 20       	and	r0, r0
   14384:	e9 f7       	brne	.-6      	; 0x14380 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a14>
   14386:	31 97       	sbiw	r30, 0x01	; 1
   14388:	ea 19       	sub	r30, r10
   1438a:	fb 09       	sbc	r31, r11
   1438c:	9e 2f       	mov	r25, r30
   1438e:	4e 2f       	mov	r20, r30
   14390:	84 2f       	mov	r24, r20
   14392:	89 1b       	sub	r24, r25
   14394:	24 2f       	mov	r18, r20
   14396:	30 e0       	ldi	r19, 0x00	; 0
   14398:	d4 01       	movw	r26, r8
   1439a:	0d 90       	ld	r0, X+
   1439c:	00 20       	and	r0, r0
   1439e:	e9 f7       	brne	.-6      	; 0x1439a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2e>
   143a0:	11 97       	sbiw	r26, 0x01	; 1
   143a2:	a8 19       	sub	r26, r8
   143a4:	b9 09       	sbc	r27, r9
   143a6:	2a 17       	cp	r18, r26
   143a8:	3b 07       	cpc	r19, r27
   143aa:	78 f4       	brcc	.+30     	; 0x143ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2644
    {
      str1[cnt] = topic[f];
   143ac:	a8 ec       	ldi	r26, 0xC8	; 200
   143ae:	b0 e0       	ldi	r27, 0x00	; 0
   143b0:	ac 0f       	add	r26, r28
   143b2:	bd 1f       	adc	r27, r29
   143b4:	a8 0f       	add	r26, r24
   143b6:	b1 1d       	adc	r27, r1
   143b8:	28 0d       	add	r18, r8
   143ba:	39 1d       	adc	r19, r9
   143bc:	f9 01       	movw	r30, r18
   143be:	80 81       	ld	r24, Z
   143c0:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
      str1[cnt + 1] = 0;
   143c2:	11 96       	adiw	r26, 0x01	; 1
   143c4:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   143c6:	4f 5f       	subi	r20, 0xFF	; 255
   143c8:	e3 cf       	rjmp	.-58     	; 0x14390 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   143ca:	6f e4       	ldi	r22, 0x4F	; 79
   143cc:	75 e0       	ldi	r23, 0x05	; 5
   143ce:	ce 01       	movw	r24, r28
   143d0:	88 53       	subi	r24, 0x38	; 56
   143d2:	9f 4f       	sbci	r25, 0xFF	; 255
   143d4:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   143d8:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2648
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   143da:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    pch = strtok (str1, "/");
    while (pch != NULL)
   143dc:	01 15       	cp	r16, r1
   143de:	11 05       	cpc	r17, r1
   143e0:	e9 f1       	breq	.+122    	; 0x1445c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
    {
      if (cnt == 0) id = atoi(pch);
   143e2:	f1 10       	cpse	r15, r1
   143e4:	0d c0       	rjmp	.+26     	; 0x14400 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a94>
   143e6:	c8 01       	movw	r24, r16
   143e8:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   143ec:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   143ee:	6f e4       	ldi	r22, 0x4F	; 79
   143f0:	75 e0       	ldi	r23, 0x05	; 5
   143f2:	90 e0       	ldi	r25, 0x00	; 0
   143f4:	80 e0       	ldi	r24, 0x00	; 0
   143f6:	0e 94 8c f1 	call	0x1e318	; 0x1e318 <strtok>
   143fa:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
      cnt++;
   143fc:	f3 94       	inc	r15
   143fe:	ee cf       	rjmp	.-36     	; 0x143dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   14400:	f1 e0       	ldi	r31, 0x01	; 1
   14402:	ff 12       	cpse	r15, r31
   14404:	f4 cf       	rjmp	.-24     	; 0x143ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   14406:	8f e5       	ldi	r24, 0x5F	; 95
   14408:	c8 2e       	mov	r12, r24
   1440a:	dd 24       	eor	r13, r13
   1440c:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1440e:	c6 01       	movw	r24, r12
   14410:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   14414:	78 12       	cpse	r7, r24
   14416:	19 c0       	rjmp	.+50     	; 0x1444a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ade>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2658
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   14418:	6d e5       	ldi	r22, 0x5D	; 93
   1441a:	78 e0       	ldi	r23, 0x08	; 8
   1441c:	c8 01       	movw	r24, r16
   1441e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14422:	89 2b       	or	r24, r25
   14424:	29 f0       	breq	.+10     	; 0x14430 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac4>
   14426:	e7 2d       	mov	r30, r7
   14428:	f0 e0       	ldi	r31, 0x00	; 0
   1442a:	ec 5d       	subi	r30, 0xDC	; 220
   1442c:	f4 4f       	sbci	r31, 0xF4	; 244
   1442e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   14430:	68 e9       	ldi	r22, 0x98	; 152
   14432:	73 e0       	ldi	r23, 0x03	; 3
   14434:	c8 01       	movw	r24, r16
   14436:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   1443a:	89 2b       	or	r24, r25
   1443c:	c1 f2       	breq	.-80     	; 0x143ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   1443e:	e7 2d       	mov	r30, r7
   14440:	f0 e0       	ldi	r31, 0x00	; 0
   14442:	ec 5d       	subi	r30, 0xDC	; 220
   14444:	f4 4f       	sbci	r31, 0xF4	; 244
   14446:	10 82       	st	Z, r1
   14448:	d2 cf       	rjmp	.-92     	; 0x143ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   1444a:	21 e2       	ldi	r18, 0x21	; 33
   1444c:	c2 0e       	add	r12, r18
   1444e:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14450:	84 e0       	ldi	r24, 0x04	; 4
   14452:	c8 16       	cp	r12, r24
   14454:	82 e0       	ldi	r24, 0x02	; 2
   14456:	d8 06       	cpc	r13, r24
   14458:	d1 f6       	brne	.-76     	; 0x1440e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa2>
   1445a:	c9 cf       	rjmp	.-110    	; 0x143ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
   1445c:	6c eb       	ldi	r22, 0xBC	; 188
   1445e:	71 e8       	ldi	r23, 0x81	; 129
   14460:	c5 01       	movw	r24, r10
   14462:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
  strcat(str1, device.nazev);
   14466:	6b ec       	ldi	r22, 0xCB	; 203
   14468:	7d e0       	ldi	r23, 0x0D	; 13
   1446a:	c5 01       	movw	r24, r10
   1446c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
  strcat(str1, "/brightness");
   14470:	6d ee       	ldi	r22, 0xED	; 237
   14472:	75 e0       	ldi	r23, 0x05	; 5
   14474:	c5 01       	movw	r24, r10
   14476:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
  if (strcmp(str1, topic) == 0)
   1447a:	b4 01       	movw	r22, r8
   1447c:	c5 01       	movw	r24, r10
   1447e:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14482:	89 2b       	or	r24, r25
   14484:	79 f4       	brne	.+30     	; 0x144a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2674
  {
    mqtt_process_message++;
   14486:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   1448a:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   1448e:	01 96       	adiw	r24, 0x01	; 1
   14490:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   14494:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
    my_touch.TP_SetBacklight(atoi(my_payload));
   14498:	86 ea       	ldi	r24, 0xA6	; 166
   1449a:	98 e0       	ldi	r25, 0x08	; 8
   1449c:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   144a0:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   144a4:	6c eb       	ldi	r22, 0xBC	; 188
   144a6:	71 e8       	ldi	r23, 0x81	; 129
   144a8:	c5 01       	movw	r24, r10
   144aa:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
  strcat(str1, device.nazev);
   144ae:	6b ec       	ldi	r22, 0xCB	; 203
   144b0:	7d e0       	ldi	r23, 0x0D	; 13
   144b2:	c5 01       	movw	r24, r10
   144b4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
  strcat(str1, "/reload");
   144b8:	69 ef       	ldi	r22, 0xF9	; 249
   144ba:	75 e0       	ldi	r23, 0x05	; 5
   144bc:	c5 01       	movw	r24, r10
   144be:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
  if (strcmp(str1, topic) == 0)
   144c2:	b4 01       	movw	r22, r8
   144c4:	c5 01       	movw	r24, r10
   144c6:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   144ca:	8c 01       	movw	r16, r24
   144cc:	89 2b       	or	r24, r25
   144ce:	79 f4       	brne	.+30     	; 0x144ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
  {
    mqtt_process_message++;
   144d0:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   144d4:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   144d8:	01 96       	adiw	r24, 0x01	; 1
   144da:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   144de:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2685
    log_error(&mqtt_client, "reload..");
   144e2:	81 e0       	ldi	r24, 0x01	; 1
   144e4:	96 e0       	ldi	r25, 0x06	; 6
   144e6:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
    resetFunc();
   144ea:	f8 01       	movw	r30, r16
   144ec:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2690
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   144ee:	6c eb       	ldi	r22, 0xBC	; 188
   144f0:	71 e8       	ldi	r23, 0x81	; 129
   144f2:	c5 01       	movw	r24, r10
   144f4:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2691
  strcat(str1, device.nazev);
   144f8:	6b ec       	ldi	r22, 0xCB	; 203
   144fa:	7d e0       	ldi	r23, 0x0D	; 13
   144fc:	c5 01       	movw	r24, r10
   144fe:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
  strcat(str1, "/bootloader");
   14502:	6a e0       	ldi	r22, 0x0A	; 10
   14504:	76 e0       	ldi	r23, 0x06	; 6
   14506:	c5 01       	movw	r24, r10
   14508:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
  if (strcmp(str1, topic) == 0)
   1450c:	b4 01       	movw	r22, r8
   1450e:	c5 01       	movw	r24, r10
   14510:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14514:	89 2b       	or	r24, r25
   14516:	e9 f4       	brne	.+58     	; 0x14552 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  {
    mqtt_process_message++;
   14518:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   1451c:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   14520:	01 96       	adiw	r24, 0x01	; 1
   14522:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   14526:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2696
    log_error(&mqtt_client, "bootloader..");
   1452a:	86 e1       	ldi	r24, 0x16	; 22
   1452c:	96 e0       	ldi	r25, 0x06	; 6
   1452e:	0e 94 2a d3 	call	0x1a654	; 0x1a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
    EEPROM.write(bootloader_tag, 255);
   14532:	6f ef       	ldi	r22, 0xFF	; 255
   14534:	90 e0       	ldi	r25, 0x00	; 0
   14536:	80 e0       	ldi	r24, 0x00	; 0
   14538:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   1453c:	88 e1       	ldi	r24, 0x18	; 24
   1453e:	9e e0       	ldi	r25, 0x0E	; 14
   14540:	0f b6       	in	r0, 0x3f	; 63
   14542:	f8 94       	cli
   14544:	a8 95       	wdr
   14546:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   1454a:	0f be       	out	0x3f, r0	; 63
   1454c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   14550:	ff cf       	rjmp	.-2      	; 0x14550 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be4>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   14552:	6c eb       	ldi	r22, 0xBC	; 188
   14554:	71 e8       	ldi	r23, 0x81	; 129
   14556:	c5 01       	movw	r24, r10
   14558:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2704
  strcat(str1, device.nazev);
   1455c:	6b ec       	ldi	r22, 0xCB	; 203
   1455e:	7d e0       	ldi	r23, 0x0D	; 13
   14560:	c5 01       	movw	r24, r10
   14562:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
  strcat(str1, "/default");
   14566:	6d e3       	ldi	r22, 0x3D	; 61
   14568:	75 e0       	ldi	r23, 0x05	; 5
   1456a:	c5 01       	movw	r24, r10
   1456c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
  if (strcmp(str1, topic) == 0)
   14570:	b4 01       	movw	r22, r8
   14572:	c5 01       	movw	r24, r10
   14574:	0e 94 29 fe 	call	0x1fc52	; 0x1fc52 <strcmp>
   14578:	89 2b       	or	r24, r25
   1457a:	91 f4       	brne	.+36     	; 0x145a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2708
  {
    mqtt_process_message++;
   1457c:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   14580:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   14584:	01 96       	adiw	r24, 0x01	; 1
   14586:	90 93 17 0b 	sts	0x0B17, r25	; 0x800b17 <mqtt_process_message+0x1>
   1458a:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   1458e:	86 ea       	ldi	r24, 0xA6	; 166
   14590:	98 e0       	ldi	r25, 0x08	; 8
   14592:	0e 94 53 f1 	call	0x1e2a6	; 0x1e2a6 <atoi>
   14596:	68 2f       	mov	r22, r24
   14598:	8a e5       	ldi	r24, 0x5A	; 90
   1459a:	90 e0       	ldi	r25, 0x00	; 0
   1459c:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2713
  }

}
   145a0:	ca 5b       	subi	r28, 0xBA	; 186
   145a2:	de 4f       	sbci	r29, 0xFE	; 254
   145a4:	0f b6       	in	r0, 0x3f	; 63
   145a6:	f8 94       	cli
   145a8:	de bf       	out	0x3e, r29	; 62
   145aa:	0f be       	out	0x3f, r0	; 63
   145ac:	cd bf       	out	0x3d, r28	; 61
   145ae:	df 91       	pop	r29
   145b0:	cf 91       	pop	r28
   145b2:	1f 91       	pop	r17
   145b4:	0f 91       	pop	r16
   145b6:	ff 90       	pop	r15
   145b8:	ef 90       	pop	r14
   145ba:	df 90       	pop	r13
   145bc:	cf 90       	pop	r12
   145be:	bf 90       	pop	r11
   145c0:	af 90       	pop	r10
   145c2:	9f 90       	pop	r9
   145c4:	8f 90       	pop	r8
   145c6:	7f 90       	pop	r7
   145c8:	6f 90       	pop	r6
   145ca:	5f 90       	pop	r5
   145cc:	4f 90       	pop	r4
   145ce:	3f 90       	pop	r3
   145d0:	2f 90       	pop	r2
   145d2:	08 95       	ret

000145d4 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2717
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
   145d4:	0f 93       	push	r16
   145d6:	1f 93       	push	r17
   145d8:	cf 93       	push	r28
   145da:	df 93       	push	r29
   145dc:	cd b7       	in	r28, 0x3d	; 61
   145de:	de b7       	in	r29, 0x3e	; 62
   145e0:	a5 97       	sbiw	r28, 0x25	; 37
   145e2:	0f b6       	in	r0, 0x3f	; 63
   145e4:	f8 94       	cli
   145e6:	de bf       	out	0x3e, r29	; 62
   145e8:	0f be       	out	0x3f, r0	; 63
   145ea:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  long mil;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  if (!mqtt_client.connected())
   145ec:	8b ec       	ldi	r24, 0xCB	; 203
   145ee:	9f e0       	ldi	r25, 0x0F	; 15
   145f0:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   145f4:	81 11       	cpse	r24, r1
   145f6:	b7 c0       	rjmp	.+366    	; 0x14766 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
  {
    device_get_name(nazev);
   145f8:	ce 01       	movw	r24, r28
   145fa:	4b 96       	adiw	r24, 0x1b	; 27
   145fc:	0e 94 04 94 	call	0x12808	; 0x12808 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
    mil = millis();
   14600:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
    if (mil > lastmqttconnect)
   14604:	00 91 26 09 	lds	r16, 0x0926	; 0x800926 <lastmqttconnect>
   14608:	10 91 27 09 	lds	r17, 0x0927	; 0x800927 <lastmqttconnect+0x1>
   1460c:	20 91 28 09 	lds	r18, 0x0928	; 0x800928 <lastmqttconnect+0x2>
   14610:	30 91 29 09 	lds	r19, 0x0929	; 0x800929 <lastmqttconnect+0x3>
   14614:	06 17       	cp	r16, r22
   14616:	17 07       	cpc	r17, r23
   14618:	28 07       	cpc	r18, r24
   1461a:	39 07       	cpc	r19, r25
   1461c:	0c f0       	brlt	.+2      	; 0x14620 <mqtt_reconnect()+0x4c>
   1461e:	a3 c0       	rjmp	.+326    	; 0x14766 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
    {
      lastmqttconnect = mil + 5000;
   14620:	68 57       	subi	r22, 0x78	; 120
   14622:	7c 4e       	sbci	r23, 0xEC	; 236
   14624:	8f 4f       	sbci	r24, 0xFF	; 255
   14626:	9f 4f       	sbci	r25, 0xFF	; 255
   14628:	60 93 26 09 	sts	0x0926, r22	; 0x800926 <lastmqttconnect>
   1462c:	70 93 27 09 	sts	0x0927, r23	; 0x800927 <lastmqttconnect+0x1>
   14630:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <lastmqttconnect+0x2>
   14634:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <lastmqttconnect+0x3>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
   14638:	8b ec       	ldi	r24, 0xCB	; 203
   1463a:	9f e0       	ldi	r25, 0x0F	; 15
   1463c:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   14640:	81 11       	cpse	r24, r1
   14642:	d0 c0       	rjmp	.+416    	; 0x147e4 <mqtt_reconnect()+0x210>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
   14644:	60 91 e0 11 	lds	r22, 0x11E0	; 0x8011e0 <mqtt_client+0x215>
   14648:	70 91 e1 11 	lds	r23, 0x11E1	; 0x8011e1 <mqtt_client+0x216>
   1464c:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   14650:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   14654:	dc 01       	movw	r26, r24
   14656:	ed 91       	ld	r30, X+
   14658:	fc 91       	ld	r31, X
   1465a:	40 91 e2 11 	lds	r20, 0x11E2	; 0x8011e2 <mqtt_client+0x217>
   1465e:	50 91 e3 11 	lds	r21, 0x11E3	; 0x8011e3 <mqtt_client+0x218>
   14662:	61 15       	cp	r22, r1
   14664:	71 05       	cpc	r23, r1
   14666:	09 f4       	brne	.+2      	; 0x1466a <mqtt_reconnect()+0x96>
   14668:	8b c0       	rjmp	.+278    	; 0x14780 <mqtt_reconnect()+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
   1466a:	00 88       	ldd	r0, Z+16	; 0x10
   1466c:	f1 89       	ldd	r31, Z+17	; 0x11
   1466e:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
   14670:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
   14672:	81 30       	cpi	r24, 0x01	; 1
   14674:	91 05       	cpc	r25, r1
   14676:	09 f0       	breq	.+2      	; 0x1467a <mqtt_reconnect()+0xa6>
   14678:	12 c1       	rjmp	.+548    	; 0x1489e <mqtt_reconnect()+0x2ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
   1467a:	90 93 ce 11 	sts	0x11CE, r25	; 0x8011ce <mqtt_client+0x203>
   1467e:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   14682:	87 e0       	ldi	r24, 0x07	; 7
   14684:	e8 e1       	ldi	r30, 0x18	; 24
   14686:	f2 e0       	ldi	r31, 0x02	; 2
   14688:	de 01       	movw	r26, r28
   1468a:	11 96       	adiw	r26, 0x01	; 1
   1468c:	01 90       	ld	r0, Z+
   1468e:	0d 92       	st	X+, r0
   14690:	8a 95       	dec	r24
   14692:	e1 f7       	brne	.-8      	; 0x1468c <mqtt_reconnect()+0xb8>
   14694:	fe 01       	movw	r30, r28
   14696:	31 96       	adiw	r30, 0x01	; 1
   14698:	a2 ed       	ldi	r26, 0xD2	; 210
   1469a:	bf e0       	ldi	r27, 0x0F	; 15
   1469c:	ce 01       	movw	r24, r28
   1469e:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
   146a0:	21 91       	ld	r18, Z+
   146a2:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   146a4:	8e 17       	cp	r24, r30
   146a6:	9f 07       	cpc	r25, r31
   146a8:	d9 f7       	brne	.-10     	; 0x146a0 <mqtt_reconnect()+0xcc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
   146aa:	82 e0       	ldi	r24, 0x02	; 2
   146ac:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   146b0:	10 92 da 0f 	sts	0x0FDA, r1	; 0x800fda <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   146b4:	8f e0       	ldi	r24, 0x0F	; 15
   146b6:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
   146ba:	4f e0       	ldi	r20, 0x0F	; 15
   146bc:	50 e0       	ldi	r21, 0x00	; 0
   146be:	6d ec       	ldi	r22, 0xCD	; 205
   146c0:	7f e0       	ldi	r23, 0x0F	; 15
   146c2:	ce 01       	movw	r24, r28
   146c4:	4b 96       	adiw	r24, 0x1b	; 27
   146c6:	0e 94 70 ba 	call	0x174e0	; 0x174e0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
   146ca:	9c 01       	movw	r18, r24
   146cc:	25 50       	subi	r18, 0x05	; 5
   146ce:	31 09       	sbc	r19, r1
   146d0:	4d ec       	ldi	r20, 0xCD	; 205
   146d2:	5f e0       	ldi	r21, 0x0F	; 15
   146d4:	60 e1       	ldi	r22, 0x10	; 16
   146d6:	8b ec       	ldi	r24, 0xCB	; 203
   146d8:	9f e0       	ldi	r25, 0x0F	; 15
   146da:	0e 94 97 6a 	call	0xd52e	; 0xd52e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
   146de:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   146e2:	60 93 cf 11 	sts	0x11CF, r22	; 0x8011cf <mqtt_client+0x204>
   146e6:	70 93 d0 11 	sts	0x11D0, r23	; 0x8011d0 <mqtt_client+0x205>
   146ea:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <mqtt_client+0x206>
   146ee:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <mqtt_client+0x207>
   146f2:	60 93 d3 11 	sts	0x11D3, r22	; 0x8011d3 <mqtt_client+0x208>
   146f6:	70 93 d4 11 	sts	0x11D4, r23	; 0x8011d4 <mqtt_client+0x209>
   146fa:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <mqtt_client+0x20a>
   146fe:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
   14702:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   14706:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   1470a:	dc 01       	movw	r26, r24
   1470c:	ed 91       	ld	r30, X+
   1470e:	fc 91       	ld	r31, X
   14710:	00 84       	ldd	r0, Z+8	; 0x08
   14712:	f1 85       	ldd	r31, Z+9	; 0x09
   14714:	e0 2d       	mov	r30, r0
   14716:	19 95       	eicall
   14718:	89 2b       	or	r24, r25
   1471a:	09 f0       	breq	.+2      	; 0x1471e <mqtt_reconnect()+0x14a>
   1471c:	48 c0       	rjmp	.+144    	; 0x147ae <mqtt_reconnect()+0x1da>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
   1471e:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*10)) {
   14722:	00 91 d3 11 	lds	r16, 0x11D3	; 0x8011d3 <mqtt_client+0x208>
   14726:	10 91 d4 11 	lds	r17, 0x11D4	; 0x8011d4 <mqtt_client+0x209>
   1472a:	20 91 d5 11 	lds	r18, 0x11D5	; 0x8011d5 <mqtt_client+0x20a>
   1472e:	30 91 d6 11 	lds	r19, 0x11D6	; 0x8011d6 <mqtt_client+0x20b>
   14732:	60 1b       	sub	r22, r16
   14734:	71 0b       	sbc	r23, r17
   14736:	82 0b       	sbc	r24, r18
   14738:	93 0b       	sbc	r25, r19
   1473a:	62 33       	cpi	r22, 0x32	; 50
   1473c:	71 05       	cpc	r23, r1
   1473e:	81 05       	cpc	r24, r1
   14740:	91 05       	cpc	r25, r1
   14742:	f8 f2       	brcs	.-66     	; 0x14702 <mqtt_reconnect()+0x12e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
   14744:	8c ef       	ldi	r24, 0xFC	; 252
   14746:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   14748:	90 93 e7 11 	sts	0x11E7, r25	; 0x8011e7 <mqtt_client+0x21c>
   1474c:	80 93 e6 11 	sts	0x11E6, r24	; 0x8011e6 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
   14750:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   14754:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   14758:	dc 01       	movw	r26, r24
   1475a:	ed 91       	ld	r30, X+
   1475c:	fc 91       	ld	r31, X
   1475e:	04 88       	ldd	r0, Z+20	; 0x14
   14760:	f5 89       	ldd	r31, Z+21	; 0x15
   14762:	e0 2d       	mov	r30, r0
   14764:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2761
      }
    }
  }
  ret = mqtt_client.state();
  return ret;
}
   14766:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <mqtt_client+0x21b>
   1476a:	a5 96       	adiw	r28, 0x25	; 37
   1476c:	0f b6       	in	r0, 0x3f	; 63
   1476e:	f8 94       	cli
   14770:	de bf       	out	0x3e, r29	; 62
   14772:	0f be       	out	0x3f, r0	; 63
   14774:	cd bf       	out	0x3d, r28	; 61
   14776:	df 91       	pop	r29
   14778:	cf 91       	pop	r28
   1477a:	1f 91       	pop	r17
   1477c:	0f 91       	pop	r16
   1477e:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
   14780:	06 84       	ldd	r0, Z+14	; 0x0e
   14782:	f7 85       	ldd	r31, Z+15	; 0x0f
   14784:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   14786:	22 ef       	ldi	r18, 0xF2	; 242
   14788:	32 e0       	ldi	r19, 0x02	; 2
   1478a:	3a 83       	std	Y+2, r19	; 0x02
   1478c:	29 83       	std	Y+1, r18	; 0x01
   1478e:	00 91 dc 11 	lds	r16, 0x11DC	; 0x8011dc <mqtt_client+0x211>
   14792:	10 91 dd 11 	lds	r17, 0x11DD	; 0x8011dd <mqtt_client+0x212>
   14796:	20 91 de 11 	lds	r18, 0x11DE	; 0x8011de <mqtt_client+0x213>
   1479a:	30 91 df 11 	lds	r19, 0x11DF	; 0x8011df <mqtt_client+0x214>
   1479e:	0b 83       	std	Y+3, r16	; 0x03
   147a0:	1c 83       	std	Y+4, r17	; 0x04
   147a2:	2d 83       	std	Y+5, r18	; 0x05
   147a4:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
   147a6:	be 01       	movw	r22, r28
   147a8:	6f 5f       	subi	r22, 0xFF	; 255
   147aa:	7f 4f       	sbci	r23, 0xFF	; 255
   147ac:	61 cf       	rjmp	.-318    	; 0x14670 <mqtt_reconnect()+0x9c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   147ae:	ce 01       	movw	r24, r28
   147b0:	85 96       	adiw	r24, 0x25	; 37
   147b2:	0e 94 8c bd 	call	0x17b18	; 0x17b18 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
   147b6:	04 97       	sbiw	r24, 0x04	; 4
   147b8:	59 f6       	brne	.-106    	; 0x14750 <mqtt_reconnect()+0x17c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
   147ba:	80 91 d0 0f 	lds	r24, 0x0FD0	; 0x800fd0 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   147be:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
   147c0:	81 11       	cpse	r24, r1
   147c2:	c2 cf       	rjmp	.-124    	; 0x14748 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
   147c4:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   147c8:	60 93 d3 11 	sts	0x11D3, r22	; 0x8011d3 <mqtt_client+0x208>
   147cc:	70 93 d4 11 	sts	0x11D4, r23	; 0x8011d4 <mqtt_client+0x209>
   147d0:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <mqtt_client+0x20a>
   147d4:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
   147d8:	10 92 d7 11 	sts	0x11D7, r1	; 0x8011d7 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
   147dc:	10 92 e7 11 	sts	0x11E7, r1	; 0x8011e7 <mqtt_client+0x21c>
   147e0:	10 92 e6 11 	sts	0x11E6, r1	; 0x8011e6 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
    if (mil > lastmqttconnect)
    {
      lastmqttconnect = mil + 5000;
      if (mqtt_client.connect(nazev))
      {
        strcpy_P(topic, thermctl_header_in);
   147e4:	6c eb       	ldi	r22, 0xBC	; 188
   147e6:	71 e8       	ldi	r23, 0x81	; 129
   147e8:	ce 01       	movw	r24, r28
   147ea:	01 96       	adiw	r24, 0x01	; 1
   147ec:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
        strcat(topic, nazev);
   147f0:	be 01       	movw	r22, r28
   147f2:	65 5e       	subi	r22, 0xE5	; 229
   147f4:	7f 4f       	sbci	r23, 0xFF	; 255
   147f6:	ce 01       	movw	r24, r28
   147f8:	01 96       	adiw	r24, 0x01	; 1
   147fa:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
        strcat(topic, "/#");
   147fe:	63 e8       	ldi	r22, 0x83	; 131
   14800:	76 e0       	ldi	r23, 0x06	; 6
   14802:	ce 01       	movw	r24, r28
   14804:	01 96       	adiw	r24, 0x01	; 1
   14806:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
        mqtt_client.subscribe(topic);
   1480a:	ce 01       	movw	r24, r28
   1480c:	01 96       	adiw	r24, 0x01	; 1
   1480e:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2737
        strcpy_P(topic, thermctl_header_in);
   14812:	6c eb       	ldi	r22, 0xBC	; 188
   14814:	71 e8       	ldi	r23, 0x81	; 129
   14816:	ce 01       	movw	r24, r28
   14818:	01 96       	adiw	r24, 0x01	; 1
   1481a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
        strcat(topic, "global/#");
   1481e:	6d e7       	ldi	r22, 0x7D	; 125
   14820:	76 e0       	ldi	r23, 0x06	; 6
   14822:	ce 01       	movw	r24, r28
   14824:	01 96       	adiw	r24, 0x01	; 1
   14826:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
        mqtt_client.subscribe(topic);
   1482a:	ce 01       	movw	r24, r28
   1482c:	01 96       	adiw	r24, 0x01	; 1
   1482e:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14832:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742
          remote_tds_subscibe_topic(idx);
   14834:	81 2f       	mov	r24, r17
   14836:	0e 94 6d 80 	call	0x100da	; 0x100da <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
        mqtt_client.subscribe(topic);
        strcpy_P(topic, thermctl_header_in);
        strcat(topic, "global/#");
        mqtt_client.subscribe(topic);
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1483a:	1f 5f       	subi	r17, 0xFF	; 255
   1483c:	1a 30       	cpi	r17, 0x0A	; 10
   1483e:	d1 f7       	brne	.-12     	; 0x14834 <mqtt_reconnect()+0x260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
          remote_tds_subscibe_topic(idx);
        //// svetelny controller
        strcpy_P(topic, lightctl_header_out);
   14840:	6d ea       	ldi	r22, 0xAD	; 173
   14842:	71 e8       	ldi	r23, 0x81	; 129
   14844:	ce 01       	movw	r24, r28
   14846:	01 96       	adiw	r24, 0x01	; 1
   14848:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
        strcat(topic, "/#");
   1484c:	63 e8       	ldi	r22, 0x83	; 131
   1484e:	76 e0       	ldi	r23, 0x06	; 6
   14850:	ce 01       	movw	r24, r28
   14852:	01 96       	adiw	r24, 0x01	; 1
   14854:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
        mqtt_client.subscribe(topic);
   14858:	ce 01       	movw	r24, r28
   1485a:	01 96       	adiw	r24, 0x01	; 1
   1485c:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
        /// zpetna vazba od ostatnich room controleru
        strcpy_P(topic, thermctl_subscribe);
   14860:	65 e9       	ldi	r22, 0x95	; 149
   14862:	71 e8       	ldi	r23, 0x81	; 129
   14864:	ce 01       	movw	r24, r28
   14866:	01 96       	adiw	r24, 0x01	; 1
   14868:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
        mqtt_client.subscribe(topic);
   1486c:	ce 01       	movw	r24, r28
   1486e:	01 96       	adiw	r24, 0x01	; 1
   14870:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
        /// zpetna vazba od ostatnich term controlleru
        strcpy_P(topic, termbig_subscribe);
   14874:	6e e7       	ldi	r22, 0x7E	; 126
   14876:	71 e8       	ldi	r23, 0x81	; 129
   14878:	ce 01       	movw	r24, r28
   1487a:	01 96       	adiw	r24, 0x01	; 1
   1487c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
        mqtt_client.subscribe(topic);
   14880:	ce 01       	movw	r24, r28
   14882:	01 96       	adiw	r24, 0x01	; 1
   14884:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
        /// zpetna vazba od vystupu
        strcpy_P(topic, termbig_header_out);
   14888:	60 e7       	ldi	r22, 0x70	; 112
   1488a:	71 e8       	ldi	r23, 0x81	; 129
   1488c:	ce 01       	movw	r24, r28
   1488e:	01 96       	adiw	r24, 0x01	; 1
   14890:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2755
        mqtt_client.subscribe(topic);
   14894:	ce 01       	movw	r24, r28
   14896:	01 96       	adiw	r24, 0x01	; 1
   14898:	0e 94 47 bd 	call	0x17a8e	; 0x17a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>
   1489c:	64 cf       	rjmp	.-312    	; 0x14766 <mqtt_reconnect()+0x192>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
   1489e:	8e ef       	ldi	r24, 0xFE	; 254
   148a0:	9f ef       	ldi	r25, 0xFF	; 255
   148a2:	90 93 e7 11 	sts	0x11E7, r25	; 0x8011e7 <mqtt_client+0x21c>
   148a6:	80 93 e6 11 	sts	0x11E6, r24	; 0x8011e6 <mqtt_client+0x21b>
   148aa:	5d cf       	rjmp	.-326    	; 0x14766 <mqtt_reconnect()+0x192>

000148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4574
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
   148ac:	ef 92       	push	r14
   148ae:	ff 92       	push	r15
   148b0:	0f 93       	push	r16
   148b2:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   148b4:	80 17       	cp	r24, r16
   148b6:	91 07       	cpc	r25, r17
   148b8:	74 f4       	brge	.+28     	; 0x148d6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   148ba:	84 0f       	add	r24, r20
   148bc:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   148be:	08 17       	cp	r16, r24
   148c0:	19 07       	cpc	r17, r25
   148c2:	4c f4       	brge	.+18     	; 0x148d6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
   148c4:	6e 15       	cp	r22, r14
   148c6:	7f 05       	cpc	r23, r15
   148c8:	34 f4       	brge	.+12     	; 0x148d6 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4576
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   148ca:	62 0f       	add	r22, r18
   148cc:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   148ce:	81 e0       	ldi	r24, 0x01	; 1
   148d0:	e6 16       	cp	r14, r22
   148d2:	f7 06       	cpc	r15, r23
   148d4:	0c f0       	brlt	.+2      	; 0x148d8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4575
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
   148d6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
   148d8:	1f 91       	pop	r17
   148da:	0f 91       	pop	r16
   148dc:	ff 90       	pop	r15
   148de:	ef 90       	pop	r14
   148e0:	08 95       	ret

000148e2 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4558
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
   148e2:	2f 92       	push	r2
   148e4:	3f 92       	push	r3
   148e6:	4f 92       	push	r4
   148e8:	5f 92       	push	r5
   148ea:	6f 92       	push	r6
   148ec:	7f 92       	push	r7
   148ee:	9f 92       	push	r9
   148f0:	af 92       	push	r10
   148f2:	bf 92       	push	r11
   148f4:	cf 92       	push	r12
   148f6:	df 92       	push	r13
   148f8:	ef 92       	push	r14
   148fa:	ff 92       	push	r15
   148fc:	0f 93       	push	r16
   148fe:	1f 93       	push	r17
   14900:	cf 93       	push	r28
   14902:	df 93       	push	r29
   14904:	00 d0       	rcall	.+0      	; 0x14906 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
   14906:	1f 92       	push	r1
   14908:	1f 92       	push	r1
   1490a:	cd b7       	in	r28, 0x3d	; 61
   1490c:	de b7       	in	r29, 0x3e	; 62
   1490e:	6c 01       	movw	r12, r24
   14910:	5b 01       	movw	r10, r22
   14912:	1a 01       	movw	r2, r20
   14914:	29 01       	movw	r4, r18
   14916:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14918:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   1491c:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
   14920:	10 e0       	ldi	r17, 0x00	; 0
   14922:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4563
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   14924:	3b 01       	movw	r6, r22
   14926:	62 0e       	add	r6, r18
   14928:	73 1e       	adc	r7, r19
   1492a:	84 0f       	add	r24, r20
   1492c:	95 1f       	adc	r25, r21
   1492e:	9d 83       	std	Y+5, r25	; 0x05
   14930:	8c 83       	std	Y+4, r24	; 0x04
   14932:	93 01       	movw	r18, r6
   14934:	20 1b       	sub	r18, r16
   14936:	31 0b       	sbc	r19, r17
   14938:	4c 81       	ldd	r20, Y+4	; 0x04
   1493a:	5d 81       	ldd	r21, Y+5	; 0x05
   1493c:	40 1b       	sub	r20, r16
   1493e:	51 0b       	sbc	r21, r17
   14940:	b5 01       	movw	r22, r10
   14942:	60 0f       	add	r22, r16
   14944:	71 1f       	adc	r23, r17
   14946:	c6 01       	movw	r24, r12
   14948:	80 0f       	add	r24, r16
   1494a:	91 1f       	adc	r25, r17
   1494c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   14950:	0f 5f       	subi	r16, 0xFF	; 255
   14952:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4562
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   14954:	03 30       	cpi	r16, 0x03	; 3
   14956:	11 05       	cpc	r17, r1
   14958:	61 f7       	brne	.-40     	; 0x14932 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4564
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
   1495a:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4565
  str1[1] = 0;
   1495c:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4567
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
   1495e:	ce 01       	movw	r24, r28
   14960:	01 96       	adiw	r24, 0x01	; 1
   14962:	fc 01       	movw	r30, r24
   14964:	01 90       	ld	r0, Z+
   14966:	00 20       	and	r0, r0
   14968:	e9 f7       	brne	.-6      	; 0x14964 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
   1496a:	31 97       	sbiw	r30, 0x01	; 1
   1496c:	e8 1b       	sub	r30, r24
   1496e:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14970:	29 2d       	mov	r18, r9
   14972:	22 0f       	add	r18, r18
   14974:	29 0d       	add	r18, r9
   14976:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4569
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   14978:	a2 01       	movw	r20, r4
   1497a:	42 1b       	sub	r20, r18
   1497c:	51 09       	sbc	r21, r1
   1497e:	56 95       	lsr	r21
   14980:	47 95       	ror	r20
   14982:	56 95       	lsr	r21
   14984:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4570
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   14986:	4a 0d       	add	r20, r10
   14988:	5b 2d       	mov	r21, r11
   1498a:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   1498c:	26 e0       	ldi	r18, 0x06	; 6
   1498e:	e2 9f       	mul	r30, r18
   14990:	f0 01       	movw	r30, r0
   14992:	11 24       	eor	r1, r1
   14994:	9e 9e       	mul	r9, r30
   14996:	90 01       	movw	r18, r0
   14998:	9f 9e       	mul	r9, r31
   1499a:	30 0d       	add	r19, r0
   1499c:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4568
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
   1499e:	33 27       	eor	r19, r19
   149a0:	b1 01       	movw	r22, r2
   149a2:	62 1b       	sub	r22, r18
   149a4:	73 0b       	sbc	r23, r19
   149a6:	76 95       	lsr	r23
   149a8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4570
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   149aa:	6c 0d       	add	r22, r12
   149ac:	7d 2d       	mov	r23, r13
   149ae:	71 1d       	adc	r23, r1
   149b0:	ee 24       	eor	r14, r14
   149b2:	ea 94       	dec	r14
   149b4:	fe 2c       	mov	r15, r14
   149b6:	10 e0       	ldi	r17, 0x00	; 0
   149b8:	00 e0       	ldi	r16, 0x00	; 0
   149ba:	29 2d       	mov	r18, r9
   149bc:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4571
}
   149c0:	0f 90       	pop	r0
   149c2:	0f 90       	pop	r0
   149c4:	0f 90       	pop	r0
   149c6:	0f 90       	pop	r0
   149c8:	0f 90       	pop	r0
   149ca:	df 91       	pop	r29
   149cc:	cf 91       	pop	r28
   149ce:	1f 91       	pop	r17
   149d0:	0f 91       	pop	r16
   149d2:	ff 90       	pop	r15
   149d4:	ef 90       	pop	r14
   149d6:	df 90       	pop	r13
   149d8:	cf 90       	pop	r12
   149da:	bf 90       	pop	r11
   149dc:	af 90       	pop	r10
   149de:	9f 90       	pop	r9
   149e0:	7f 90       	pop	r7
   149e2:	6f 90       	pop	r6
   149e4:	5f 90       	pop	r5
   149e6:	4f 90       	pop	r4
   149e8:	3f 90       	pop	r3
   149ea:	2f 90       	pop	r2
   149ec:	08 95       	ret

000149ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
   149ee:	2f 92       	push	r2
   149f0:	3f 92       	push	r3
   149f2:	4f 92       	push	r4
   149f4:	5f 92       	push	r5
   149f6:	6f 92       	push	r6
   149f8:	7f 92       	push	r7
   149fa:	8f 92       	push	r8
   149fc:	9f 92       	push	r9
   149fe:	af 92       	push	r10
   14a00:	bf 92       	push	r11
   14a02:	cf 92       	push	r12
   14a04:	df 92       	push	r13
   14a06:	ef 92       	push	r14
   14a08:	ff 92       	push	r15
   14a0a:	0f 93       	push	r16
   14a0c:	1f 93       	push	r17
   14a0e:	cf 93       	push	r28
   14a10:	df 93       	push	r29
   14a12:	00 d0       	rcall	.+0      	; 0x14a14 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
   14a14:	1f 92       	push	r1
   14a16:	cd b7       	in	r28, 0x3d	; 61
   14a18:	de b7       	in	r29, 0x3e	; 62
   14a1a:	2c 01       	movw	r4, r24
   14a1c:	3b 01       	movw	r6, r22
   14a1e:	0a 83       	std	Y+2, r16	; 0x02
   14a20:	eb 82       	std	Y+3, r14	; 0x03
   14a22:	3c 2c       	mov	r3, r12
   14a24:	2d 2c       	mov	r2, r13
   14a26:	98 2d       	mov	r25, r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
  if (state == 0)
   14a28:	88 20       	and	r8, r8
   14a2a:	51 f0       	breq	.+20     	; 0x14a40 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4498
    back_color = color_inactive;
  if (state == 1)
   14a2c:	91 30       	cpi	r25, 0x01	; 1
   14a2e:	51 f0       	breq	.+20     	; 0x14a44 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4500
    back_color = color_active;
  if (state == 2)
   14a30:	92 30       	cpi	r25, 0x02	; 2
   14a32:	09 f4       	brne	.+2      	; 0x14a36 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x48>
   14a34:	cf c0       	rjmp	.+414    	; 0x14bd4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
   14a36:	a8 e1       	ldi	r26, 0x18	; 24
   14a38:	3a 2e       	mov	r3, r26
   14a3a:	b6 ec       	ldi	r27, 0xC6	; 198
   14a3c:	2b 2e       	mov	r2, r27
   14a3e:	02 c0       	rjmp	.+4      	; 0x14a44 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
  if (state == 0)
    back_color = color_inactive;
   14a40:	3a 2c       	mov	r3, r10
   14a42:	2b 2c       	mov	r2, r11
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14a44:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   14a48:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
   14a4c:	10 e0       	ldi	r17, 0x00	; 0
   14a4e:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4506
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   14a50:	a2 2e       	mov	r10, r18
   14a52:	b1 2c       	mov	r11, r1
   14a54:	84 2e       	mov	r8, r20
   14a56:	91 2c       	mov	r9, r1
   14a58:	65 01       	movw	r12, r10
   14a5a:	c6 0c       	add	r12, r6
   14a5c:	d7 1c       	adc	r13, r7
   14a5e:	74 01       	movw	r14, r8
   14a60:	e4 0c       	add	r14, r4
   14a62:	f5 1c       	adc	r15, r5
   14a64:	96 01       	movw	r18, r12
   14a66:	20 1b       	sub	r18, r16
   14a68:	31 0b       	sbc	r19, r17
   14a6a:	a7 01       	movw	r20, r14
   14a6c:	40 1b       	sub	r20, r16
   14a6e:	51 0b       	sbc	r21, r17
   14a70:	b8 01       	movw	r22, r16
   14a72:	66 0d       	add	r22, r6
   14a74:	77 1d       	adc	r23, r7
   14a76:	c8 01       	movw	r24, r16
   14a78:	84 0d       	add	r24, r4
   14a7a:	95 1d       	adc	r25, r5
   14a7c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   14a80:	0f 5f       	subi	r16, 0xFF	; 255
   14a82:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
  if (state == 2)
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   14a84:	03 30       	cpi	r16, 0x03	; 3
   14a86:	11 05       	cpc	r17, r1
   14a88:	69 f7       	brne	.-38     	; 0x14a64 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14a8a:	30 92 5f 0f 	sts	0x0F5F, r3	; 0x800f5f <my_lcd+0xa>
   14a8e:	20 92 60 0f 	sts	0x0F60, r2	; 0x800f60 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   14a92:	93 01       	movw	r18, r6
   14a94:	23 50       	subi	r18, 0x03	; 3
   14a96:	31 09       	sbc	r19, r1
   14a98:	2a 0d       	add	r18, r10
   14a9a:	3b 1d       	adc	r19, r11
   14a9c:	a2 01       	movw	r20, r4
   14a9e:	43 50       	subi	r20, 0x03	; 3
   14aa0:	51 09       	sbc	r21, r1
   14aa2:	48 0d       	add	r20, r8
   14aa4:	59 1d       	adc	r21, r9
   14aa6:	b3 01       	movw	r22, r6
   14aa8:	6d 5f       	subi	r22, 0xFD	; 253
   14aaa:	7f 4f       	sbci	r23, 0xFF	; 255
   14aac:	c2 01       	movw	r24, r4
   14aae:	03 96       	adiw	r24, 0x03	; 3
   14ab0:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4509
  if (strlen(line1) > 0)
   14ab4:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14ab6:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14ab8:	80 81       	ld	r24, Z
   14aba:	88 23       	and	r24, r24
   14abc:	09 f4       	brne	.+2      	; 0x14ac0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd2>
   14abe:	a1 c0       	rjmp	.+322    	; 0x14c02 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
  {
    prvni = 1;
   14ac0:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4512
    num_lines_const = 2;
   14ac2:	f2 e0       	ldi	r31, 0x02	; 2
   14ac4:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
  }
  if (strlen(line2) > 0)
   14ac6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   14ac8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   14aca:	90 81       	ld	r25, Z
   14acc:	99 23       	and	r25, r25
   14ace:	09 f4       	brne	.+2      	; 0x14ad2 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe4>
   14ad0:	9b c0       	rjmp	.+310    	; 0x14c08 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x21a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4517
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
   14ad2:	f9 81       	ldd	r31, Y+1	; 0x01
   14ad4:	fe 5f       	subi	r31, 0xFE	; 254
   14ad6:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4516
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
   14ad8:	21 e0       	ldi	r18, 0x01	; 1
   14ada:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4487
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   14adc:	d1 2c       	mov	r13, r1
   14ade:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4519
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
   14ae0:	81 30       	cpi	r24, 0x01	; 1
   14ae2:	d1 f5       	brne	.+116    	; 0x14b58 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x16a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4521
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   14ae4:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14ae6:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14ae8:	01 90       	ld	r0, Z+
   14aea:	00 20       	and	r0, r0
   14aec:	e9 f7       	brne	.-6      	; 0x14ae8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xfa>
   14aee:	9f 01       	movw	r18, r30
   14af0:	21 50       	subi	r18, 0x01	; 1
   14af2:	31 09       	sbc	r19, r1
   14af4:	4a 8d       	ldd	r20, Y+26	; 0x1a
   14af6:	5b 8d       	ldd	r21, Y+27	; 0x1b
   14af8:	24 1b       	sub	r18, r20
   14afa:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14afc:	8a 81       	ldd	r24, Y+2	; 0x02
   14afe:	88 0f       	add	r24, r24
   14b00:	5a 81       	ldd	r21, Y+2	; 0x02
   14b02:	85 0f       	add	r24, r21
   14b04:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4523
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   14b06:	f5 01       	movw	r30, r10
   14b08:	e8 1b       	sub	r30, r24
   14b0a:	f1 09       	sbc	r31, r1
   14b0c:	cf 01       	movw	r24, r30
   14b0e:	f9 81       	ldd	r31, Y+1	; 0x01
   14b10:	6f 2f       	mov	r22, r31
   14b12:	70 e0       	ldi	r23, 0x00	; 0
   14b14:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   14b18:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   14b1a:	a3 01       	movw	r20, r6
   14b1c:	41 50       	subi	r20, 0x01	; 1
   14b1e:	51 09       	sbc	r21, r1
   14b20:	46 0f       	add	r20, r22
   14b22:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14b24:	66 e0       	ldi	r22, 0x06	; 6
   14b26:	26 9f       	mul	r18, r22
   14b28:	90 01       	movw	r18, r0
   14b2a:	11 24       	eor	r1, r1
   14b2c:	ea 81       	ldd	r30, Y+2	; 0x02
   14b2e:	e2 9f       	mul	r30, r18
   14b30:	c0 01       	movw	r24, r0
   14b32:	e3 9f       	mul	r30, r19
   14b34:	90 0d       	add	r25, r0
   14b36:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4522
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   14b38:	b4 01       	movw	r22, r8
   14b3a:	68 1b       	sub	r22, r24
   14b3c:	79 0b       	sbc	r23, r25
   14b3e:	76 95       	lsr	r23
   14b40:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   14b42:	64 0d       	add	r22, r4
   14b44:	75 1d       	adc	r23, r5
   14b46:	e3 2c       	mov	r14, r3
   14b48:	f2 2c       	mov	r15, r2
   14b4a:	10 e0       	ldi	r17, 0x00	; 0
   14b4c:	00 e0       	ldi	r16, 0x00	; 0
   14b4e:	2e 2f       	mov	r18, r30
   14b50:	8a 8d       	ldd	r24, Y+26	; 0x1a
   14b52:	9b 8d       	ldd	r25, Y+27	; 0x1b
   14b54:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4526
  }
  if (druhy == 1)
   14b58:	fc 81       	ldd	r31, Y+4	; 0x04
   14b5a:	f1 30       	cpi	r31, 0x01	; 1
   14b5c:	d9 f5       	brne	.+118    	; 0x14bd4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4528
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   14b5e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   14b60:	fd 8d       	ldd	r31, Y+29	; 0x1d
   14b62:	01 90       	ld	r0, Z+
   14b64:	00 20       	and	r0, r0
   14b66:	e9 f7       	brne	.-6      	; 0x14b62 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x174>
   14b68:	31 97       	sbiw	r30, 0x01	; 1
   14b6a:	2c 8d       	ldd	r18, Y+28	; 0x1c
   14b6c:	3d 8d       	ldd	r19, Y+29	; 0x1d
   14b6e:	e2 1b       	sub	r30, r18
   14b70:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14b72:	8b 81       	ldd	r24, Y+3	; 0x03
   14b74:	88 0f       	add	r24, r24
   14b76:	3b 81       	ldd	r19, Y+3	; 0x03
   14b78:	83 0f       	add	r24, r19
   14b7a:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
   14b7c:	a5 01       	movw	r20, r10
   14b7e:	48 1b       	sub	r20, r24
   14b80:	51 09       	sbc	r21, r1
   14b82:	ca 01       	movw	r24, r20
   14b84:	88 0f       	add	r24, r24
   14b86:	99 1f       	adc	r25, r25
   14b88:	59 81       	ldd	r21, Y+1	; 0x01
   14b8a:	65 2f       	mov	r22, r21
   14b8c:	70 e0       	ldi	r23, 0x00	; 0
   14b8e:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   14b92:	81 e0       	ldi	r24, 0x01	; 1
   14b94:	68 1a       	sub	r6, r24
   14b96:	71 08       	sbc	r7, r1
   14b98:	66 0e       	add	r6, r22
   14b9a:	77 1e       	adc	r7, r23
   14b9c:	a3 01       	movw	r20, r6
   14b9e:	4c 0d       	add	r20, r12
   14ba0:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14ba2:	96 e0       	ldi	r25, 0x06	; 6
   14ba4:	e9 9f       	mul	r30, r25
   14ba6:	f0 01       	movw	r30, r0
   14ba8:	11 24       	eor	r1, r1
   14baa:	3e 9f       	mul	r19, r30
   14bac:	c0 01       	movw	r24, r0
   14bae:	3f 9f       	mul	r19, r31
   14bb0:	90 0d       	add	r25, r0
   14bb2:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4529
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   14bb4:	b4 01       	movw	r22, r8
   14bb6:	68 1b       	sub	r22, r24
   14bb8:	79 0b       	sbc	r23, r25
   14bba:	76 95       	lsr	r23
   14bbc:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   14bbe:	64 0d       	add	r22, r4
   14bc0:	75 1d       	adc	r23, r5
   14bc2:	e3 2c       	mov	r14, r3
   14bc4:	f2 2c       	mov	r15, r2
   14bc6:	10 e0       	ldi	r17, 0x00	; 0
   14bc8:	00 e0       	ldi	r16, 0x00	; 0
   14bca:	23 2f       	mov	r18, r19
   14bcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   14bce:	9d 8d       	ldd	r25, Y+29	; 0x1d
   14bd0:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4535
  }
button_click_2_end:
  state = 0;
}
   14bd4:	0f 90       	pop	r0
   14bd6:	0f 90       	pop	r0
   14bd8:	0f 90       	pop	r0
   14bda:	0f 90       	pop	r0
   14bdc:	df 91       	pop	r29
   14bde:	cf 91       	pop	r28
   14be0:	1f 91       	pop	r17
   14be2:	0f 91       	pop	r16
   14be4:	ff 90       	pop	r15
   14be6:	ef 90       	pop	r14
   14be8:	df 90       	pop	r13
   14bea:	cf 90       	pop	r12
   14bec:	bf 90       	pop	r11
   14bee:	af 90       	pop	r10
   14bf0:	9f 90       	pop	r9
   14bf2:	8f 90       	pop	r8
   14bf4:	7f 90       	pop	r7
   14bf6:	6f 90       	pop	r6
   14bf8:	5f 90       	pop	r5
   14bfa:	4f 90       	pop	r4
   14bfc:	3f 90       	pop	r3
   14bfe:	2f 90       	pop	r2
   14c00:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
   14c02:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   14c04:	19 82       	std	Y+1, r1	; 0x01
   14c06:	5f cf       	rjmp	.-322    	; 0x14ac6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4494
  uint8_t prvni = 0;
  uint8_t druhy = 0;
   14c08:	1c 82       	std	Y+4, r1	; 0x04
   14c0a:	68 cf       	rjmp	.-304    	; 0x14adc <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xee>

00014c0c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4447
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
   14c0c:	2f 92       	push	r2
   14c0e:	3f 92       	push	r3
   14c10:	4f 92       	push	r4
   14c12:	5f 92       	push	r5
   14c14:	6f 92       	push	r6
   14c16:	7f 92       	push	r7
   14c18:	8f 92       	push	r8
   14c1a:	9f 92       	push	r9
   14c1c:	af 92       	push	r10
   14c1e:	bf 92       	push	r11
   14c20:	cf 92       	push	r12
   14c22:	df 92       	push	r13
   14c24:	ef 92       	push	r14
   14c26:	ff 92       	push	r15
   14c28:	0f 93       	push	r16
   14c2a:	1f 93       	push	r17
   14c2c:	cf 93       	push	r28
   14c2e:	df 93       	push	r29
   14c30:	00 d0       	rcall	.+0      	; 0x14c32 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
   14c32:	1f 92       	push	r1
   14c34:	1f 92       	push	r1
   14c36:	cd b7       	in	r28, 0x3d	; 61
   14c38:	de b7       	in	r29, 0x3e	; 62
   14c3a:	2c 01       	movw	r4, r24
   14c3c:	3b 01       	movw	r6, r22
   14c3e:	5a 83       	std	Y+2, r21	; 0x02
   14c40:	49 83       	std	Y+1, r20	; 0x01
   14c42:	19 01       	movw	r2, r18
   14c44:	90 2e       	mov	r9, r16
   14c46:	eb 82       	std	Y+3, r14	; 0x03
   14c48:	dd 82       	std	Y+5, r13	; 0x05
   14c4a:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14c4c:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   14c50:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
   14c54:	10 e0       	ldi	r17, 0x00	; 0
   14c56:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   14c58:	6b 01       	movw	r12, r22
   14c5a:	c2 0e       	add	r12, r18
   14c5c:	d3 1e       	adc	r13, r19
   14c5e:	7a 01       	movw	r14, r20
   14c60:	e8 0e       	add	r14, r24
   14c62:	f9 1e       	adc	r15, r25
   14c64:	96 01       	movw	r18, r12
   14c66:	20 1b       	sub	r18, r16
   14c68:	31 0b       	sbc	r19, r17
   14c6a:	a7 01       	movw	r20, r14
   14c6c:	40 1b       	sub	r20, r16
   14c6e:	51 0b       	sbc	r21, r17
   14c70:	b8 01       	movw	r22, r16
   14c72:	66 0d       	add	r22, r6
   14c74:	77 1d       	adc	r23, r7
   14c76:	c8 01       	movw	r24, r16
   14c78:	84 0d       	add	r24, r4
   14c7a:	95 1d       	adc	r25, r5
   14c7c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   14c80:	0f 5f       	subi	r16, 0xFF	; 255
   14c82:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   14c84:	03 30       	cpi	r16, 0x03	; 3
   14c86:	11 05       	cpc	r17, r1
   14c88:	69 f7       	brne	.-38     	; 0x14c64 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
   14c8a:	91 01       	movw	r18, r2
   14c8c:	23 50       	subi	r18, 0x03	; 3
   14c8e:	31 09       	sbc	r19, r1
   14c90:	49 81       	ldd	r20, Y+1	; 0x01
   14c92:	5a 81       	ldd	r21, Y+2	; 0x02
   14c94:	43 50       	subi	r20, 0x03	; 3
   14c96:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
   14c98:	61 e0       	ldi	r22, 0x01	; 1
   14c9a:	86 12       	cpse	r8, r22
   14c9c:	11 c0       	rjmp	.+34     	; 0x14cc0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14c9e:	8f ef       	ldi	r24, 0xFF	; 255
   14ca0:	9f ef       	ldi	r25, 0xFF	; 255
   14ca2:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
   14ca6:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   14caa:	26 0d       	add	r18, r6
   14cac:	37 1d       	adc	r19, r7
   14cae:	44 0d       	add	r20, r4
   14cb0:	55 1d       	adc	r21, r5
   14cb2:	b3 01       	movw	r22, r6
   14cb4:	6d 5f       	subi	r22, 0xFD	; 253
   14cb6:	7f 4f       	sbci	r23, 0xFF	; 255
   14cb8:	c2 01       	movw	r24, r4
   14cba:	03 96       	adiw	r24, 0x03	; 3
   14cbc:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
  }
  if (strlen(line1) > 0)
   14cc0:	ec 81       	ldd	r30, Y+4	; 0x04
   14cc2:	fd 81       	ldd	r31, Y+5	; 0x05
   14cc4:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   14cc6:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4449
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   14cc8:	d1 2c       	mov	r13, r1
   14cca:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4463
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
   14ccc:	88 23       	and	r24, r24
   14cce:	91 f1       	breq	.+100    	; 0x14d34 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   14cd0:	01 90       	ld	r0, Z+
   14cd2:	00 20       	and	r0, r0
   14cd4:	e9 f7       	brne	.-6      	; 0x14cd0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
   14cd6:	31 97       	sbiw	r30, 0x01	; 1
   14cd8:	4c 81       	ldd	r20, Y+4	; 0x04
   14cda:	5d 81       	ldd	r21, Y+5	; 0x05
   14cdc:	e4 1b       	sub	r30, r20
   14cde:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14ce0:	89 2d       	mov	r24, r9
   14ce2:	88 0f       	add	r24, r24
   14ce4:	89 0d       	add	r24, r9
   14ce6:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   14ce8:	61 01       	movw	r12, r2
   14cea:	c8 1a       	sub	r12, r24
   14cec:	d1 08       	sbc	r13, r1
   14cee:	d6 94       	lsr	r13
   14cf0:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   14cf2:	a3 01       	movw	r20, r6
   14cf4:	41 50       	subi	r20, 0x01	; 1
   14cf6:	51 09       	sbc	r21, r1
   14cf8:	4c 0d       	add	r20, r12
   14cfa:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14cfc:	66 e0       	ldi	r22, 0x06	; 6
   14cfe:	e6 9f       	mul	r30, r22
   14d00:	f0 01       	movw	r30, r0
   14d02:	11 24       	eor	r1, r1
   14d04:	9e 9e       	mul	r9, r30
   14d06:	c0 01       	movw	r24, r0
   14d08:	9f 9e       	mul	r9, r31
   14d0a:	90 0d       	add	r25, r0
   14d0c:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4467
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   14d0e:	69 81       	ldd	r22, Y+1	; 0x01
   14d10:	7a 81       	ldd	r23, Y+2	; 0x02
   14d12:	68 1b       	sub	r22, r24
   14d14:	79 0b       	sbc	r23, r25
   14d16:	76 95       	lsr	r23
   14d18:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4469
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   14d1a:	64 0d       	add	r22, r4
   14d1c:	75 1d       	adc	r23, r5
   14d1e:	ee 24       	eor	r14, r14
   14d20:	ea 94       	dec	r14
   14d22:	fe 2c       	mov	r15, r14
   14d24:	10 e0       	ldi	r17, 0x00	; 0
   14d26:	00 e0       	ldi	r16, 0x00	; 0
   14d28:	29 2d       	mov	r18, r9
   14d2a:	8c 81       	ldd	r24, Y+4	; 0x04
   14d2c:	9d 81       	ldd	r25, Y+5	; 0x05
   14d2e:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
   14d32:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
   14d34:	f5 01       	movw	r30, r10
   14d36:	80 81       	ld	r24, Z
   14d38:	88 23       	and	r24, r24
   14d3a:	b9 f1       	breq	.+110    	; 0x14daa <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   14d3c:	01 90       	ld	r0, Z+
   14d3e:	00 20       	and	r0, r0
   14d40:	e9 f7       	brne	.-6      	; 0x14d3c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
   14d42:	9f 01       	movw	r18, r30
   14d44:	21 50       	subi	r18, 0x01	; 1
   14d46:	31 09       	sbc	r19, r1
   14d48:	2a 19       	sub	r18, r10
   14d4a:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14d4c:	8b 81       	ldd	r24, Y+3	; 0x03
   14d4e:	88 0f       	add	r24, r24
   14d50:	fb 81       	ldd	r31, Y+3	; 0x03
   14d52:	8f 0f       	add	r24, r31
   14d54:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   14d56:	a1 01       	movw	r20, r2
   14d58:	48 1b       	sub	r20, r24
   14d5a:	51 09       	sbc	r21, r1
   14d5c:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4473
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
   14d5e:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   14d60:	70 e0       	ldi	r23, 0x00	; 0
   14d62:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4477
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   14d66:	51 e0       	ldi	r21, 0x01	; 1
   14d68:	65 1a       	sub	r6, r21
   14d6a:	71 08       	sbc	r7, r1
   14d6c:	c6 0c       	add	r12, r6
   14d6e:	d7 1c       	adc	r13, r7
   14d70:	ab 01       	movw	r20, r22
   14d72:	4c 0d       	add	r20, r12
   14d74:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14d76:	66 e0       	ldi	r22, 0x06	; 6
   14d78:	26 9f       	mul	r18, r22
   14d7a:	90 01       	movw	r18, r0
   14d7c:	11 24       	eor	r1, r1
   14d7e:	f2 9f       	mul	r31, r18
   14d80:	c0 01       	movw	r24, r0
   14d82:	f3 9f       	mul	r31, r19
   14d84:	90 0d       	add	r25, r0
   14d86:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4475
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   14d88:	69 81       	ldd	r22, Y+1	; 0x01
   14d8a:	7a 81       	ldd	r23, Y+2	; 0x02
   14d8c:	68 1b       	sub	r22, r24
   14d8e:	79 0b       	sbc	r23, r25
   14d90:	76 95       	lsr	r23
   14d92:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4477
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   14d94:	64 0d       	add	r22, r4
   14d96:	75 1d       	adc	r23, r5
   14d98:	ee 24       	eor	r14, r14
   14d9a:	ea 94       	dec	r14
   14d9c:	fe 2c       	mov	r15, r14
   14d9e:	10 e0       	ldi	r17, 0x00	; 0
   14da0:	00 e0       	ldi	r16, 0x00	; 0
   14da2:	2f 2f       	mov	r18, r31
   14da4:	c5 01       	movw	r24, r10
   14da6:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
  }
}
   14daa:	0f 90       	pop	r0
   14dac:	0f 90       	pop	r0
   14dae:	0f 90       	pop	r0
   14db0:	0f 90       	pop	r0
   14db2:	0f 90       	pop	r0
   14db4:	df 91       	pop	r29
   14db6:	cf 91       	pop	r28
   14db8:	1f 91       	pop	r17
   14dba:	0f 91       	pop	r16
   14dbc:	ff 90       	pop	r15
   14dbe:	ef 90       	pop	r14
   14dc0:	df 90       	pop	r13
   14dc2:	cf 90       	pop	r12
   14dc4:	bf 90       	pop	r11
   14dc6:	af 90       	pop	r10
   14dc8:	9f 90       	pop	r9
   14dca:	8f 90       	pop	r8
   14dcc:	7f 90       	pop	r7
   14dce:	6f 90       	pop	r6
   14dd0:	5f 90       	pop	r5
   14dd2:	4f 90       	pop	r4
   14dd4:	3f 90       	pop	r3
   14dd6:	2f 90       	pop	r2
   14dd8:	08 95       	ret

00014dda <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
    display_update_slider = 1;
  }
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
   14dda:	cf 93       	push	r28
   14ddc:	df 93       	push	r29
   14dde:	fc 01       	movw	r30, r24
   14de0:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
  if (max_element > 0)
   14de2:	22 23       	and	r18, r18
   14de4:	09 f1       	breq	.+66     	; 0x14e28 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4426
  {
    menu_slider_data_max = *stop;
   14de6:	98 81       	ld	r25, Y
   14de8:	90 93 53 09 	sts	0x0953, r25	; 0x800953 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    menu_slider_data_min = *start;
   14dec:	80 81       	ld	r24, Z
   14dee:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
    menu_slider_data_max_element = max_element;
   14df2:	20 93 51 09 	sts	0x0951, r18	; 0x800951 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
    ///
    *start = menu_slider_data_current[args];
   14df6:	a4 2f       	mov	r26, r20
   14df8:	b0 e0       	ldi	r27, 0x00	; 0
   14dfa:	a5 5b       	subi	r26, 0xB5	; 181
   14dfc:	b6 4f       	sbci	r27, 0xF6	; 246
   14dfe:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   14e00:	62 2f       	mov	r22, r18
   14e02:	70 e0       	ldi	r23, 0x00	; 0
   14e04:	49 2f       	mov	r20, r25
   14e06:	50 e0       	ldi	r21, 0x00	; 0
   14e08:	db 01       	movw	r26, r22
   14e0a:	a3 0f       	add	r26, r19
   14e0c:	b1 1d       	adc	r27, r1
   14e0e:	4a 17       	cp	r20, r26
   14e10:	5b 07       	cpc	r21, r27
   14e12:	6c f0       	brlt	.+26     	; 0x14e2e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
   14e14:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
   14e16:	80 81       	ld	r24, Z
   14e18:	98 17       	cp	r25, r24
   14e1a:	08 f4       	brcc	.+2      	; 0x14e1e <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4434
      *start = menu_slider_data_max;
   14e1c:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
   14e1e:	29 17       	cp	r18, r25
   14e20:	78 f4       	brcc	.+30     	; 0x14e40 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
   14e22:	80 81       	ld	r24, Z
   14e24:	28 0f       	add	r18, r24
   14e26:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4440
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
   14e28:	df 91       	pop	r29
   14e2a:	cf 91       	pop	r28
   14e2c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   14e2e:	48 1b       	sub	r20, r24
   14e30:	51 09       	sbc	r21, r1
   14e32:	64 17       	cp	r22, r20
   14e34:	75 07       	cpc	r23, r21
   14e36:	74 f7       	brge	.-36     	; 0x14e14 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4432
      *start = menu_slider_data_max - max_element;
   14e38:	89 2f       	mov	r24, r25
   14e3a:	82 1b       	sub	r24, r18
   14e3c:	80 83       	st	Z, r24
   14e3e:	eb cf       	rjmp	.-42     	; 0x14e16 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
   14e40:	98 83       	st	Y, r25
   14e42:	f2 cf       	rjmp	.-28     	; 0x14e28 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

00014e44 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1207
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
   14e44:	ff 92       	push	r15
   14e46:	0f 93       	push	r16
   14e48:	1f 93       	push	r17
   14e4a:	cf 93       	push	r28
   14e4c:	df 93       	push	r29
   14e4e:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14e50:	20 91 b5 0c 	lds	r18, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   14e54:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   14e56:	80 e0       	ldi	r24, 0x00	; 0
   14e58:	62 e4       	ldi	r22, 0x42	; 66
   14e5a:	7a e0       	ldi	r23, 0x0A	; 10
   14e5c:	c3 ef       	ldi	r28, 0xF3	; 243
   14e5e:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14e60:	89 01       	movw	r16, r18
   14e62:	05 55       	subi	r16, 0x55	; 85
   14e64:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   14e66:	fb 01       	movw	r30, r22
   14e68:	94 91       	lpm	r25, Z
   14e6a:	89 17       	cp	r24, r25
   14e6c:	e8 f4       	brcc	.+58     	; 0x14ea8 <MenuHistoryGetMenu(unsigned char*)+0x64>
   14e6e:	8c 9f       	mul	r24, r28
   14e70:	a0 01       	movw	r20, r0
   14e72:	8d 9f       	mul	r24, r29
   14e74:	50 0d       	add	r21, r0
   14e76:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1212
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14e78:	fa 01       	movw	r30, r20
   14e7a:	ee 5d       	subi	r30, 0xDE	; 222
   14e7c:	f2 4f       	sbci	r31, 0xF2	; 242
   14e7e:	f4 90       	lpm	r15, Z
   14e80:	f8 01       	movw	r30, r16
   14e82:	90 81       	ld	r25, Z
   14e84:	9f 11       	cpse	r25, r15
   14e86:	0e c0       	rjmp	.+28     	; 0x14ea4 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1211
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
   14e88:	4a 5b       	subi	r20, 0xBA	; 186
   14e8a:	55 4f       	sbci	r21, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1243
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
   14e8c:	2f 55       	subi	r18, 0x5F	; 95
   14e8e:	33 4f       	sbci	r19, 0xF3	; 243
   14e90:	f9 01       	movw	r30, r18
   14e92:	20 81       	ld	r18, Z
   14e94:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1247
      return menus;
    }
  }
}
   14e96:	ca 01       	movw	r24, r20
   14e98:	df 91       	pop	r29
   14e9a:	cf 91       	pop	r28
   14e9c:	1f 91       	pop	r17
   14e9e:	0f 91       	pop	r16
   14ea0:	ff 90       	pop	r15
   14ea2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   14ea4:	8f 5f       	subi	r24, 0xFF	; 255
   14ea6:	df cf       	rjmp	.-66     	; 0x14e66 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   14ea8:	80 e0       	ldi	r24, 0x00	; 0
   14eaa:	63 e4       	ldi	r22, 0x43	; 67
   14eac:	7a e0       	ldi	r23, 0x0A	; 10
   14eae:	c3 ef       	ldi	r28, 0xF3	; 243
   14eb0:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14eb2:	89 01       	movw	r16, r18
   14eb4:	05 55       	subi	r16, 0x55	; 85
   14eb6:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   14eb8:	fb 01       	movw	r30, r22
   14eba:	94 91       	lpm	r25, Z
   14ebc:	89 17       	cp	r24, r25
   14ebe:	90 f4       	brcc	.+36     	; 0x14ee4 <MenuHistoryGetMenu(unsigned char*)+0xa0>
   14ec0:	8c 9f       	mul	r24, r28
   14ec2:	a0 01       	movw	r20, r0
   14ec4:	8d 9f       	mul	r24, r29
   14ec6:	50 0d       	add	r21, r0
   14ec8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1221
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14eca:	fa 01       	movw	r30, r20
   14ecc:	e0 56       	subi	r30, 0x60	; 96
   14ece:	f5 4d       	sbci	r31, 0xD5	; 213
   14ed0:	f4 90       	lpm	r15, Z
   14ed2:	f8 01       	movw	r30, r16
   14ed4:	90 81       	ld	r25, Z
   14ed6:	9f 11       	cpse	r25, r15
   14ed8:	03 c0       	rjmp	.+6      	; 0x14ee0 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1220
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
   14eda:	4c 53       	subi	r20, 0x3C	; 60
   14edc:	58 4d       	sbci	r21, 0xD8	; 216
   14ede:	d6 cf       	rjmp	.-84     	; 0x14e8c <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   14ee0:	8f 5f       	subi	r24, 0xFF	; 255
   14ee2:	ea cf       	rjmp	.-44     	; 0x14eb8 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14ee4:	80 e0       	ldi	r24, 0x00	; 0
   14ee6:	64 e4       	ldi	r22, 0x44	; 68
   14ee8:	7a e0       	ldi	r23, 0x0A	; 10
   14eea:	c3 ef       	ldi	r28, 0xF3	; 243
   14eec:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14eee:	89 01       	movw	r16, r18
   14ef0:	05 55       	subi	r16, 0x55	; 85
   14ef2:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14ef4:	fb 01       	movw	r30, r22
   14ef6:	94 91       	lpm	r25, Z
   14ef8:	89 17       	cp	r24, r25
   14efa:	90 f4       	brcc	.+36     	; 0x14f20 <MenuHistoryGetMenu(unsigned char*)+0xdc>
   14efc:	8c 9f       	mul	r24, r28
   14efe:	a0 01       	movw	r20, r0
   14f00:	8d 9f       	mul	r24, r29
   14f02:	50 0d       	add	r21, r0
   14f04:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1231
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14f06:	fa 01       	movw	r30, r20
   14f08:	e2 5e       	subi	r30, 0xE2	; 226
   14f0a:	f7 4b       	sbci	r31, 0xB7	; 183
   14f0c:	f4 90       	lpm	r15, Z
   14f0e:	f8 01       	movw	r30, r16
   14f10:	90 81       	ld	r25, Z
   14f12:	9f 11       	cpse	r25, r15
   14f14:	03 c0       	rjmp	.+6      	; 0x14f1c <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1230
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
   14f16:	4e 5b       	subi	r20, 0xBE	; 190
   14f18:	5a 4b       	sbci	r21, 0xBA	; 186
   14f1a:	b8 cf       	rjmp	.-144    	; 0x14e8c <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14f1c:	8f 5f       	subi	r24, 0xFF	; 255
   14f1e:	ea cf       	rjmp	.-44     	; 0x14ef4 <MenuHistoryGetMenu(unsigned char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   14f20:	90 e0       	ldi	r25, 0x00	; 0
   14f22:	65 e4       	ldi	r22, 0x45	; 69
   14f24:	7a e0       	ldi	r23, 0x0A	; 10
   14f26:	c3 ef       	ldi	r28, 0xF3	; 243
   14f28:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1241
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14f2a:	89 01       	movw	r16, r18
   14f2c:	05 55       	subi	r16, 0x55	; 85
   14f2e:	13 4f       	sbci	r17, 0xF3	; 243
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   14f30:	fb 01       	movw	r30, r22
   14f32:	84 91       	lpm	r24, Z
   14f34:	98 17       	cp	r25, r24
   14f36:	08 f0       	brcs	.+2      	; 0x14f3a <MenuHistoryGetMenu(unsigned char*)+0xf6>
   14f38:	ae cf       	rjmp	.-164    	; 0x14e96 <MenuHistoryGetMenu(unsigned char*)+0x52>
   14f3a:	9c 9f       	mul	r25, r28
   14f3c:	a0 01       	movw	r20, r0
   14f3e:	9d 9f       	mul	r25, r29
   14f40:	50 0d       	add	r21, r0
   14f42:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1241
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14f44:	fa 01       	movw	r30, r20
   14f46:	e4 56       	subi	r30, 0x64	; 100
   14f48:	fa 49       	sbci	r31, 0x9A	; 154
   14f4a:	f4 90       	lpm	r15, Z
   14f4c:	f8 01       	movw	r30, r16
   14f4e:	80 81       	ld	r24, Z
   14f50:	8f 11       	cpse	r24, r15
   14f52:	03 c0       	rjmp	.+6      	; 0x14f5a <MenuHistoryGetMenu(unsigned char*)+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
   14f54:	40 54       	subi	r20, 0x40	; 64
   14f56:	5d 49       	sbci	r21, 0x9D	; 157
   14f58:	99 cf       	rjmp	.-206    	; 0x14e8c <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   14f5a:	9f 5f       	subi	r25, 0xFF	; 255
   14f5c:	e9 cf       	rjmp	.-46     	; 0x14f30 <MenuHistoryGetMenu(unsigned char*)+0xec>

00014f5e <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1125



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
   14f5e:	4f 92       	push	r4
   14f60:	5f 92       	push	r5
   14f62:	6f 92       	push	r6
   14f64:	7f 92       	push	r7
   14f66:	8f 92       	push	r8
   14f68:	9f 92       	push	r9
   14f6a:	af 92       	push	r10
   14f6c:	bf 92       	push	r11
   14f6e:	cf 92       	push	r12
   14f70:	df 92       	push	r13
   14f72:	ef 92       	push	r14
   14f74:	ff 92       	push	r15
   14f76:	0f 93       	push	r16
   14f78:	1f 93       	push	r17
   14f7a:	cf 93       	push	r28
   14f7c:	df 93       	push	r29
   14f7e:	1f 92       	push	r1
   14f80:	cd b7       	in	r28, 0x3d	; 61
   14f82:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1136
  uint16_t color_background;
  uint8_t args1;
  const Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
   14f84:	ce 01       	movw	r24, r28
   14f86:	01 96       	adiw	r24, 0x01	; 1
   14f88:	0e 94 22 a7 	call	0x14e44	; 0x14e44 <MenuHistoryGetMenu(unsigned char*)>
   14f8c:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
  attr = pgm_read_byte(&current->atributes);
   14f8e:	fc 01       	movw	r30, r24
   14f90:	eb 51       	subi	r30, 0x1B	; 27
   14f92:	fd 4f       	sbci	r31, 0xFD	; 253
   14f94:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
  x = pgm_read_word(&current->x);
   14f96:	38 97       	sbiw	r30, 0x08	; 8
   14f98:	c5 90       	lpm	r12, Z+
   14f9a:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1139
  y = pgm_read_word(&current->y);
   14f9c:	fc 01       	movw	r30, r24
   14f9e:	e1 52       	subi	r30, 0x21	; 33
   14fa0:	fd 4f       	sbci	r31, 0xFD	; 253
   14fa2:	e5 90       	lpm	r14, Z+
   14fa4:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1140
  size_x = pgm_read_word(&current->size_x);
   14fa6:	fc 01       	movw	r30, r24
   14fa8:	ef 51       	subi	r30, 0x1F	; 31
   14faa:	fd 4f       	sbci	r31, 0xFD	; 253
   14fac:	a5 90       	lpm	r10, Z+
   14fae:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141
  size_y = pgm_read_word(&current->size_y);
   14fb0:	fc 01       	movw	r30, r24
   14fb2:	ed 51       	subi	r30, 0x1D	; 29
   14fb4:	fd 4f       	sbci	r31, 0xFD	; 253
   14fb6:	65 90       	lpm	r6, Z+
   14fb8:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1142
  color_background = pgm_read_word(&current->color_background);
   14fba:	fc 01       	movw	r30, r24
   14fbc:	ea 51       	subi	r30, 0x1A	; 26
   14fbe:	fd 4f       	sbci	r31, 0xFD	; 253
   14fc0:	85 90       	lpm	r8, Z+
   14fc2:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1144

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
   14fc4:	50 fe       	sbrs	r5, 0
   14fc6:	03 c0       	rjmp	.+6      	; 0x14fce <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1253

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
   14fc8:	c4 01       	movw	r24, r8
   14fca:	0e 94 4a bb 	call	0x17694	; 0x17694 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
   14fce:	51 fe       	sbrs	r5, 1
   14fd0:	0e c0       	rjmp	.+28     	; 0x14fee <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14fd2:	90 92 60 0f 	sts	0x0F60, r9	; 0x800f60 <my_lcd+0xb>
   14fd6:	80 92 5f 0f 	sts	0x0F5F, r8	; 0x800f5f <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1152
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
   14fda:	97 01       	movw	r18, r14
   14fdc:	26 0d       	add	r18, r6
   14fde:	37 1d       	adc	r19, r7
   14fe0:	a6 01       	movw	r20, r12
   14fe2:	4a 0d       	add	r20, r10
   14fe4:	5b 1d       	adc	r21, r11
   14fe6:	b7 01       	movw	r22, r14
   14fe8:	c6 01       	movw	r24, r12
   14fea:	0e 94 2d b9 	call	0x1725a	; 0x1725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1155
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
   14fee:	52 fe       	sbrs	r5, 2
   14ff0:	2a c0       	rjmp	.+84     	; 0x15046 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14ff2:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   14ff6:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
   14ffa:	91 2c       	mov	r9, r1
   14ffc:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1160
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
   14ffe:	6e 0c       	add	r6, r14
   15000:	7f 1c       	adc	r7, r15
   15002:	26 01       	movw	r4, r12
   15004:	4a 0c       	add	r4, r10
   15006:	5b 1c       	adc	r5, r11
   15008:	93 01       	movw	r18, r6
   1500a:	28 19       	sub	r18, r8
   1500c:	39 09       	sbc	r19, r9
   1500e:	a2 01       	movw	r20, r4
   15010:	48 19       	sub	r20, r8
   15012:	59 09       	sbc	r21, r9
   15014:	b7 01       	movw	r22, r14
   15016:	c6 01       	movw	r24, r12
   15018:	88 0d       	add	r24, r8
   1501a:	99 1d       	adc	r25, r9
   1501c:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
   15020:	a5 01       	movw	r20, r10
   15022:	48 19       	sub	r20, r8
   15024:	59 09       	sbc	r21, r9
   15026:	b7 01       	movw	r22, r14
   15028:	69 5e       	subi	r22, 0xE9	; 233
   1502a:	7f 4f       	sbci	r23, 0xFF	; 255
   1502c:	c6 01       	movw	r24, r12
   1502e:	0e 94 5d b9 	call	0x172ba	; 0x172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
   15032:	8f ef       	ldi	r24, 0xFF	; 255
   15034:	88 1a       	sub	r8, r24
   15036:	98 0a       	sbc	r9, r24
   15038:	ef ef       	ldi	r30, 0xFF	; 255
   1503a:	ee 1a       	sub	r14, r30
   1503c:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
   1503e:	f4 e0       	ldi	r31, 0x04	; 4
   15040:	8f 16       	cp	r8, r31
   15042:	91 04       	cpc	r9, r1
   15044:	09 f7       	brne	.-62     	; 0x15008 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt = (ret_fptr*)pgm_read_word(&current->preload_function);
   15046:	f8 01       	movw	r30, r16
   15048:	ef 50       	subi	r30, 0x0F	; 15
   1504a:	fd 4f       	sbci	r31, 0xFD	; 253
   1504c:	25 91       	lpm	r18, Z+
   1504e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), args1, -1);
   15050:	f8 01       	movw	r30, r16
   15052:	e4 52       	subi	r30, 0x24	; 36
   15054:	fd 4f       	sbci	r31, 0xFD	; 253
   15056:	e4 91       	lpm	r30, Z
   15058:	69 81       	ldd	r22, Y+1	; 0x01
   1505a:	70 e0       	ldi	r23, 0x00	; 0
   1505c:	4f ef       	ldi	r20, 0xFF	; 255
   1505e:	8e 2f       	mov	r24, r30
   15060:	90 e0       	ldi	r25, 0x00	; 0
   15062:	f9 01       	movw	r30, r18
   15064:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1167

  display_redraw_once = 0;
   15066:	10 92 52 0c 	sts	0x0C52, r1	; 0x800c52 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1168
}
   1506a:	0f 90       	pop	r0
   1506c:	df 91       	pop	r29
   1506e:	cf 91       	pop	r28
   15070:	1f 91       	pop	r17
   15072:	0f 91       	pop	r16
   15074:	ff 90       	pop	r15
   15076:	ef 90       	pop	r14
   15078:	df 90       	pop	r13
   1507a:	cf 90       	pop	r12
   1507c:	bf 90       	pop	r11
   1507e:	af 90       	pop	r10
   15080:	9f 90       	pop	r9
   15082:	8f 90       	pop	r8
   15084:	7f 90       	pop	r7
   15086:	6f 90       	pop	r6
   15088:	5f 90       	pop	r5
   1508a:	4f 90       	pop	r4
   1508c:	08 95       	ret

0001508e <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3428
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   1508e:	2f 92       	push	r2
   15090:	3f 92       	push	r3
   15092:	4f 92       	push	r4
   15094:	5f 92       	push	r5
   15096:	6f 92       	push	r6
   15098:	7f 92       	push	r7
   1509a:	8f 92       	push	r8
   1509c:	9f 92       	push	r9
   1509e:	af 92       	push	r10
   150a0:	bf 92       	push	r11
   150a2:	cf 92       	push	r12
   150a4:	df 92       	push	r13
   150a6:	ef 92       	push	r14
   150a8:	ff 92       	push	r15
   150aa:	0f 93       	push	r16
   150ac:	1f 93       	push	r17
   150ae:	cf 93       	push	r28
   150b0:	df 93       	push	r29
   150b2:	cd b7       	in	r28, 0x3d	; 61
   150b4:	de b7       	in	r29, 0x3e	; 62
   150b6:	c0 54       	subi	r28, 0x40	; 64
   150b8:	d1 40       	sbci	r29, 0x01	; 1
   150ba:	0f b6       	in	r0, 0x3f	; 63
   150bc:	f8 94       	cli
   150be:	de bf       	out	0x3e, r29	; 62
   150c0:	0f be       	out	0x3f, r0	; 63
   150c2:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   150c4:	1b 82       	std	Y+3, r1	; 0x03
   150c6:	86 ed       	ldi	r24, 0xD6	; 214
   150c8:	93 e0       	ldi	r25, 0x03	; 3
   150ca:	9d 83       	std	Y+5, r25	; 0x05
   150cc:	8c 83       	std	Y+4, r24	; 0x04
   150ce:	89 e3       	ldi	r24, 0x39	; 57
   150d0:	95 e0       	ldi	r25, 0x05	; 5
   150d2:	9f 83       	std	Y+7, r25	; 0x07
   150d4:	8e 83       	std	Y+6, r24	; 0x06
   150d6:	18 86       	std	Y+8, r1	; 0x08
   150d8:	19 86       	std	Y+9, r1	; 0x09
   150da:	1a 86       	std	Y+10, r1	; 0x0a
   150dc:	1b 86       	std	Y+11, r1	; 0x0b
   150de:	80 e6       	ldi	r24, 0x60	; 96
   150e0:	9a ee       	ldi	r25, 0xEA	; 234
   150e2:	a0 e0       	ldi	r26, 0x00	; 0
   150e4:	b0 e0       	ldi	r27, 0x00	; 0
   150e6:	8c 87       	std	Y+12, r24	; 0x0c
   150e8:	9d 87       	std	Y+13, r25	; 0x0d
   150ea:	ae 87       	std	Y+14, r26	; 0x0e
   150ec:	bf 87       	std	Y+15, r27	; 0x0f
   150ee:	18 8a       	std	Y+16, r1	; 0x10
   150f0:	19 8a       	std	Y+17, r1	; 0x11
   150f2:	1a 8a       	std	Y+18, r1	; 0x12
   150f4:	1b 8a       	std	Y+19, r1	; 0x13
   150f6:	1c 8a       	std	Y+20, r1	; 0x14
   150f8:	1d 8a       	std	Y+21, r1	; 0x15
   150fa:	1e 8a       	std	Y+22, r1	; 0x16
   150fc:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   150fe:	88 ee       	ldi	r24, 0xE8	; 232
   15100:	91 e1       	ldi	r25, 0x11	; 17
   15102:	9a 83       	std	Y+2, r25	; 0x02
   15104:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
   15106:	61 e0       	ldi	r22, 0x01	; 1
   15108:	86 e0       	ldi	r24, 0x06	; 6
   1510a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  pinMode(ETH_CS, OUTPUT);
   1510e:	61 e0       	ldi	r22, 0x01	; 1
   15110:	8f e0       	ldi	r24, 0x0F	; 15
   15112:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
  pinMode(LED, OUTPUT);
   15116:	61 e0       	ldi	r22, 0x01	; 1
   15118:	88 e0       	ldi	r24, 0x08	; 8
   1511a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
  pinMode(PIEZO, OUTPUT);
   1511e:	61 e0       	ldi	r22, 0x01	; 1
   15120:	8c e0       	ldi	r24, 0x0C	; 12
   15122:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
  pinMode(STORAGE_RAM_CS, OUTPUT);
   15126:	61 e0       	ldi	r22, 0x01	; 1
   15128:	86 e1       	ldi	r24, 0x16	; 22
   1512a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
   1512e:	61 e0       	ldi	r22, 0x01	; 1
   15130:	87 e1       	ldi	r24, 0x17	; 23
   15132:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
  pinMode(JUMPER, INPUT_PULLUP);
   15136:	62 e0       	ldi	r22, 0x02	; 2
   15138:	8e e0       	ldi	r24, 0x0E	; 14
   1513a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220

  digitalWrite(PIEZO, LOW);
   1513e:	60 e0       	ldi	r22, 0x00	; 0
   15140:	8c e0       	ldi	r24, 0x0C	; 12
   15142:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3221
  delay(1000);
   15146:	68 ee       	ldi	r22, 0xE8	; 232
   15148:	73 e0       	ldi	r23, 0x03	; 3
   1514a:	80 e0       	ldi	r24, 0x00	; 0
   1514c:	90 e0       	ldi	r25, 0x00	; 0
   1514e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3222
  digitalWrite(PIEZO, HIGH);
   15152:	61 e0       	ldi	r22, 0x01	; 1
   15154:	8c e0       	ldi	r24, 0x0C	; 12
   15156:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
   1515a:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
  SPI.begin();
   1515c:	0e 94 09 8d 	call	0x11a12	; 0x11a12 <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3446
  Wire.begin();
   15160:	0e 94 ee d9 	call	0x1b3dc	; 0x1b3dc <TwoWire::begin() [clone .constprop.54]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
   15164:	0e 94 ee d9 	call	0x1b3dc	; 0x1b3dc <TwoWire::begin() [clone .constprop.54]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:461
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
   15168:	8b ec       	ldi	r24, 0xCB	; 203
   1516a:	9f e0       	ldi	r25, 0x0F	; 15
   1516c:	90 93 d2 09 	sts	0x09D2, r25	; 0x8009d2 <pub_mqtt_client+0x1>
   15170:	80 93 d1 09 	sts	0x09D1, r24	; 0x8009d1 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3450
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
   15174:	70 e0       	ldi	r23, 0x00	; 0
   15176:	60 e0       	ldi	r22, 0x00	; 0
   15178:	8f e7       	ldi	r24, 0x7F	; 127
   1517a:	94 e9       	ldi	r25, 0x94	; 148
   1517c:	0e 94 ef f1 	call	0x1e3de	; 0x1e3de <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
   15180:	70 e0       	ldi	r23, 0x00	; 0
   15182:	60 e0       	ldi	r22, 0x00	; 0
   15184:	85 e6       	ldi	r24, 0x65	; 101
   15186:	93 e6       	ldi	r25, 0x63	; 99
   15188:	0e 94 ef f1 	call	0x1e3de	; 0x1e3de <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3453
  printf_begin();

  swSPI.begin();
   1518c:	87 e1       	ldi	r24, 0x17	; 23
   1518e:	92 e1       	ldi	r25, 0x12	; 18
   15190:	0e 94 3b 64 	call	0xc876	; 0xc876 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1203
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
   15194:	e0 91 b5 0c 	lds	r30, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   15198:	f0 e0       	ldi	r31, 0x00	; 0
   1519a:	e5 55       	subi	r30, 0x55	; 85
   1519c:	f3 4f       	sbci	r31, 0xF3	; 243
   1519e:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
   151a0:	0e 94 f9 d8 	call	0x1b1f2	; 0x1b1f2 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   151a4:	80 91 6f 0f 	lds	r24, 0x0F6F	; 0x800f6f <my_lcd+0x1a>
   151a8:	90 91 70 0f 	lds	r25, 0x0F70	; 0x800f70 <my_lcd+0x1b>
   151ac:	01 96       	adiw	r24, 0x01	; 1
   151ae:	09 f0       	breq	.+2      	; 0x151b2 <setup+0x124>
   151b0:	4c c0       	rjmp	.+152    	; 0x1524a <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
   151b2:	60 e0       	ldi	r22, 0x00	; 0
   151b4:	84 e0       	ldi	r24, 0x04	; 4
   151b6:	90 e0       	ldi	r25, 0x00	; 0
   151b8:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   151bc:	89 2b       	or	r24, r25
   151be:	39 f5       	brne	.+78     	; 0x1520e <setup+0x180>
   151c0:	61 e0       	ldi	r22, 0x01	; 1
   151c2:	84 e0       	ldi	r24, 0x04	; 4
   151c4:	90 e0       	ldi	r25, 0x00	; 0
   151c6:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   151ca:	81 15       	cp	r24, r1
   151cc:	90 48       	sbci	r25, 0x80	; 128
   151ce:	f9 f4       	brne	.+62     	; 0x1520e <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
   151d0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__malloc_margin+0x9>
   151d4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__malloc_margin+0xa>
   151d8:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__malloc_margin+0xb>
   151dc:	2b 96       	adiw	r28, 0x0b	; 11
   151de:	8d af       	std	Y+61, r24	; 0x3d
   151e0:	9e af       	std	Y+62, r25	; 0x3e
   151e2:	af af       	std	Y+63, r26	; 0x3f
   151e4:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
   151e6:	23 e0       	ldi	r18, 0x03	; 3
   151e8:	ae 01       	movw	r20, r28
   151ea:	48 5b       	subi	r20, 0xB8	; 184
   151ec:	5f 4f       	sbci	r21, 0xFF	; 255
   151ee:	69 eb       	ldi	r22, 0xB9	; 185
   151f0:	70 e0       	ldi	r23, 0x00	; 0
   151f2:	85 e5       	ldi	r24, 0x55	; 85
   151f4:	9f e0       	ldi	r25, 0x0F	; 15
   151f6:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
   151fa:	60 e0       	ldi	r22, 0x00	; 0
   151fc:	80 ed       	ldi	r24, 0xD0	; 208
   151fe:	90 e0       	ldi	r25, 0x00	; 0
   15200:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   15204:	61 e0       	ldi	r22, 0x01	; 1
   15206:	80 ed       	ldi	r24, 0xD0	; 208
   15208:	90 e0       	ldi	r25, 0x00	; 0
   1520a:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
   1520e:	61 e0       	ldi	r22, 0x01	; 1
   15210:	83 ed       	ldi	r24, 0xD3	; 211
   15212:	90 e0       	ldi	r25, 0x00	; 0
   15214:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
   15218:	81 34       	cpi	r24, 0x41	; 65
   1521a:	b3 e9       	ldi	r27, 0x93	; 147
   1521c:	9b 07       	cpc	r25, r27
   1521e:	89 f0       	breq	.+34     	; 0x15242 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
   15220:	86 38       	cpi	r24, 0x86	; 134
   15222:	e4 e9       	ldi	r30, 0x94	; 148
   15224:	9e 07       	cpc	r25, r30
   15226:	69 f0       	breq	.+26     	; 0x15242 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
   15228:	88 38       	cpi	r24, 0x88	; 136
   1522a:	f4 e9       	ldi	r31, 0x94	; 148
   1522c:	9f 07       	cpc	r25, r31
   1522e:	49 f0       	breq	.+18     	; 0x15242 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
   15230:	86 39       	cpi	r24, 0x96	; 150
   15232:	27 e7       	ldi	r18, 0x77	; 119
   15234:	92 07       	cpc	r25, r18
   15236:	29 f0       	breq	.+10     	; 0x15242 <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
   15238:	60 e0       	ldi	r22, 0x00	; 0
   1523a:	90 e0       	ldi	r25, 0x00	; 0
   1523c:	80 e0       	ldi	r24, 0x00	; 0
   1523e:	0e 94 6a d9 	call	0x1b2d4	; 0x1b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
   15242:	90 93 70 0f 	sts	0x0F70, r25	; 0x800f70 <my_lcd+0x1b>
   15246:	80 93 6f 0f 	sts	0x0F6F, r24	; 0x800f6f <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   1524a:	00 91 6f 0f 	lds	r16, 0x0F6F	; 0x800f6f <my_lcd+0x1a>
   1524e:	10 91 70 0f 	lds	r17, 0x0F70	; 0x800f70 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
   15252:	0e 94 f9 d8 	call	0x1b1f2	; 0x1b1f2 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   15256:	68 ec       	ldi	r22, 0xC8	; 200
   15258:	70 e0       	ldi	r23, 0x00	; 0
   1525a:	80 e0       	ldi	r24, 0x00	; 0
   1525c:	90 e0       	ldi	r25, 0x00	; 0
   1525e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   15262:	06 39       	cpi	r16, 0x96	; 150
   15264:	17 47       	sbci	r17, 0x77	; 119
   15266:	09 f0       	breq	.+2      	; 0x1526a <setup+0x1dc>
   15268:	c7 c2       	rjmp	.+1422   	; 0x157f8 <setup+0x76a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   1526a:	89 e0       	ldi	r24, 0x09	; 9
   1526c:	90 e0       	ldi	r25, 0x00	; 0
   1526e:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <my_lcd+0x19>
   15272:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   15276:	8a e2       	ldi	r24, 0x2A	; 42
   15278:	90 e0       	ldi	r25, 0x00	; 0
   1527a:	90 93 72 0f 	sts	0x0F72, r25	; 0x800f72 <my_lcd+0x1d>
   1527e:	80 93 71 0f 	sts	0x0F71, r24	; 0x800f71 <my_lcd+0x1c>
   15282:	8b e2       	ldi	r24, 0x2B	; 43
   15284:	90 e0       	ldi	r25, 0x00	; 0
   15286:	90 93 74 0f 	sts	0x0F74, r25	; 0x800f74 <my_lcd+0x1f>
   1528a:	80 93 73 0f 	sts	0x0F73, r24	; 0x800f73 <my_lcd+0x1e>
   1528e:	8c e2       	ldi	r24, 0x2C	; 44
   15290:	90 e0       	ldi	r25, 0x00	; 0
   15292:	90 93 76 0f 	sts	0x0F76, r25	; 0x800f76 <my_lcd+0x21>
   15296:	80 93 75 0f 	sts	0x0F75, r24	; 0x800f75 <my_lcd+0x20>
   1529a:	8e e2       	ldi	r24, 0x2E	; 46
   1529c:	90 e0       	ldi	r25, 0x00	; 0
   1529e:	90 93 78 0f 	sts	0x0F78, r25	; 0x800f78 <my_lcd+0x23>
   152a2:	80 93 77 0f 	sts	0x0F77, r24	; 0x800f77 <my_lcd+0x22>
   152a6:	83 e3       	ldi	r24, 0x33	; 51
   152a8:	90 e0       	ldi	r25, 0x00	; 0
   152aa:	90 93 7a 0f 	sts	0x0F7A, r25	; 0x800f7a <my_lcd+0x25>
   152ae:	80 93 79 0f 	sts	0x0F79, r24	; 0x800f79 <my_lcd+0x24>
   152b2:	87 e3       	ldi	r24, 0x37	; 55
   152b4:	90 e0       	ldi	r25, 0x00	; 0
   152b6:	90 93 7c 0f 	sts	0x0F7C, r25	; 0x800f7c <my_lcd+0x27>
   152ba:	80 93 7b 0f 	sts	0x0F7B, r24	; 0x800f7b <my_lcd+0x26>
   152be:	86 e3       	ldi	r24, 0x36	; 54
   152c0:	90 e0       	ldi	r25, 0x00	; 0
   152c2:	90 93 7e 0f 	sts	0x0F7E, r25	; 0x800f7e <my_lcd+0x29>
   152c6:	80 93 7d 0f 	sts	0x0F7D, r24	; 0x800f7d <my_lcd+0x28>
   152ca:	10 92 80 0f 	sts	0x0F80, r1	; 0x800f80 <my_lcd+0x2b>
   152ce:	10 92 7f 0f 	sts	0x0F7F, r1	; 0x800f7f <my_lcd+0x2a>
   152d2:	10 92 82 0f 	sts	0x0F82, r1	; 0x800f82 <my_lcd+0x2d>
   152d6:	10 92 81 0f 	sts	0x0F81, r1	; 0x800f81 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
   152da:	0a ec       	ldi	r16, 0xCA	; 202
   152dc:	11 e8       	ldi	r17, 0x81	; 129
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   152de:	3c e6       	ldi	r19, 0x6C	; 108
   152e0:	e3 2e       	mov	r14, r19
   152e2:	f1 2c       	mov	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
   152e4:	f8 01       	movw	r30, r16
   152e6:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
   152e8:	31 96       	adiw	r30, 0x01	; 1
   152ea:	d4 90       	lpm	r13, Z
   152ec:	0e 5f       	subi	r16, 0xFE	; 254
   152ee:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
   152f0:	6f 37       	cpi	r22, 0x7F	; 127
   152f2:	89 f0       	breq	.+34     	; 0x15316 <setup+0x288>
   152f4:	de 01       	movw	r26, r28
   152f6:	a8 5b       	subi	r26, 0xB8	; 184
   152f8:	bf 4f       	sbci	r27, 0xFF	; 255
   152fa:	30 e0       	ldi	r19, 0x00	; 0
   152fc:	20 e0       	ldi	r18, 0x00	; 0
   152fe:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
   15300:	2d 15       	cp	r18, r13
   15302:	08 f0       	brcs	.+2      	; 0x15306 <setup+0x278>
   15304:	70 c2       	rjmp	.+1248   	; 0x157e6 <setup+0x758>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
   15306:	f8 01       	movw	r30, r16
   15308:	e2 0f       	add	r30, r18
   1530a:	f3 1f       	adc	r31, r19
   1530c:	e4 91       	lpm	r30, Z
   1530e:	ed 93       	st	X+, r30
   15310:	2f 5f       	subi	r18, 0xFF	; 255
   15312:	3f 4f       	sbci	r19, 0xFF	; 255
   15314:	f5 cf       	rjmp	.-22     	; 0x15300 <setup+0x272>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
   15316:	6d 2d       	mov	r22, r13
   15318:	70 e0       	ldi	r23, 0x00	; 0
   1531a:	90 e0       	ldi	r25, 0x00	; 0
   1531c:	80 e0       	ldi	r24, 0x00	; 0
   1531e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
   15322:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
   15324:	6d 2d       	mov	r22, r13
   15326:	70 e0       	ldi	r23, 0x00	; 0
   15328:	6e 5f       	subi	r22, 0xFE	; 254
   1532a:	7f 4f       	sbci	r23, 0xFF	; 255
   1532c:	e6 1a       	sub	r14, r22
   1532e:	f7 0a       	sbc	r15, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
   15330:	1e 14       	cp	r1, r14
   15332:	1f 04       	cpc	r1, r15
   15334:	bc f2       	brlt	.-82     	; 0x152e4 <setup+0x256>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   15336:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <my_lcd+0x16>
   1533a:	0e 94 58 d6 	call	0x1acb0	; 0x1acb0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
   1533e:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   15342:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   15346:	80 81       	ld	r24, Z
   15348:	90 91 8f 0f 	lds	r25, 0x0F8F	; 0x800f8f <my_lcd+0x3a>
   1534c:	89 23       	and	r24, r25
   1534e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
   15350:	20 91 7f 0f 	lds	r18, 0x0F7F	; 0x800f7f <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
   15354:	40 91 6d 0f 	lds	r20, 0x0F6D	; 0x800f6d <my_lcd+0x18>
   15358:	50 91 6e 0f 	lds	r21, 0x0F6E	; 0x800f6e <my_lcd+0x19>
   1535c:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   15360:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   15364:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <my_lcd+0x3b>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   15368:	80 81       	ld	r24, Z
   1536a:	89 23       	and	r24, r25
   1536c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
   1536e:	41 15       	cp	r20, r1
   15370:	51 05       	cpc	r21, r1
   15372:	09 f0       	breq	.+2      	; 0x15376 <setup+0x2e8>
   15374:	48 c2       	rjmp	.+1168   	; 0x15806 <setup+0x778>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   15376:	81 e6       	ldi	r24, 0x61	; 97
   15378:	82 b9       	out	0x02, r24	; 2
   1537a:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1537e:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   15382:	80 81       	ld	r24, Z
   15384:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   15388:	89 23       	and	r24, r25
   1538a:	80 83       	st	Z, r24
   1538c:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   15390:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   15394:	80 81       	ld	r24, Z
   15396:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1539a:	89 2b       	or	r24, r25
   1539c:	80 83       	st	Z, r24
   1539e:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   153a2:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   153a6:	80 81       	ld	r24, Z
   153a8:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   153ac:	89 2b       	or	r24, r25
   153ae:	80 83       	st	Z, r24
   153b0:	22 b9       	out	0x02, r18	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
   153b2:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   153b6:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   153ba:	80 81       	ld	r24, Z
   153bc:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   153c0:	89 23       	and	r24, r25
   153c2:	80 83       	st	Z, r24
   153c4:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   153c8:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   153cc:	80 81       	ld	r24, Z
   153ce:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   153d2:	89 2b       	or	r24, r25
   153d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
   153d6:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   153da:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   153de:	80 81       	ld	r24, Z
   153e0:	90 91 8b 0f 	lds	r25, 0x0F8B	; 0x800f8b <my_lcd+0x36>
   153e4:	89 2b       	or	r24, r25
   153e6:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
   153e8:	83 e0       	ldi	r24, 0x03	; 3
   153ea:	0e 94 58 d6 	call	0x1acb0	; 0x1acb0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
  my_lcd.Fill_Screen(WHITE);
   153ee:	8f ef       	ldi	r24, 0xFF	; 255
   153f0:	9f ef       	ldi	r25, 0xFF	; 255
   153f2:	0e 94 4a bb 	call	0x17694	; 0x17694 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   153f6:	8f e1       	ldi	r24, 0x1F	; 31
   153f8:	90 e0       	ldi	r25, 0x00	; 0
   153fa:	90 93 60 0f 	sts	0x0F60, r25	; 0x800f60 <my_lcd+0xb>
   153fe:	80 93 5f 0f 	sts	0x0F5F, r24	; 0x800f5f <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
   15402:	66 e4       	ldi	r22, 0x46	; 70
   15404:	73 e8       	ldi	r23, 0x83	; 131
   15406:	ce 01       	movw	r24, r28
   15408:	88 5b       	subi	r24, 0xB8	; 184
   1540a:	9f 4f       	sbci	r25, 0xFF	; 255
   1540c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   15410:	ee 24       	eor	r14, r14
   15412:	ea 94       	dec	r14
   15414:	fe 2c       	mov	r15, r14
   15416:	0f e1       	ldi	r16, 0x1F	; 31
   15418:	10 e0       	ldi	r17, 0x00	; 0
   1541a:	22 e0       	ldi	r18, 0x02	; 2
   1541c:	4a e0       	ldi	r20, 0x0A	; 10
   1541e:	50 e0       	ldi	r21, 0x00	; 0
   15420:	6e e1       	ldi	r22, 0x1E	; 30
   15422:	70 e0       	ldi	r23, 0x00	; 0
   15424:	ce 01       	movw	r24, r28
   15426:	88 5b       	subi	r24, 0xB8	; 184
   15428:	9f 4f       	sbci	r25, 0xFF	; 255
   1542a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   1542e:	8e e1       	ldi	r24, 0x1E	; 30
   15430:	90 e0       	ldi	r25, 0x00	; 0
   15432:	c7 5c       	subi	r28, 0xC7	; 199
   15434:	de 4f       	sbci	r29, 0xFE	; 254
   15436:	99 83       	std	Y+1, r25	; 0x01
   15438:	88 83       	st	Y, r24
   1543a:	c9 53       	subi	r28, 0x39	; 57
   1543c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
  ///
  for (uint8_t init = 0;  init < 16; init++)
   1543e:	c8 5c       	subi	r28, 0xC8	; 200
   15440:	de 4f       	sbci	r29, 0xFE	; 254
   15442:	18 82       	st	Y, r1
   15444:	c8 53       	subi	r28, 0x38	; 56
   15446:	d1 40       	sbci	r29, 0x01	; 1
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:423

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   15448:	3e 01       	movw	r6, r28
   1544a:	9e ed       	ldi	r25, 0xDE	; 222
   1544c:	69 0e       	add	r6, r25
   1544e:	71 1c       	adc	r7, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3566
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   15450:	a8 ec       	ldi	r26, 0xC8	; 200
   15452:	b0 e0       	ldi	r27, 0x00	; 0
   15454:	ac 0f       	add	r26, r28
   15456:	bd 1f       	adc	r27, r29
   15458:	1c 96       	adiw	r26, 0x0c	; 12
   1545a:	c1 5c       	subi	r28, 0xC1	; 193
   1545c:	de 4f       	sbci	r29, 0xFE	; 254
   1545e:	b9 83       	std	Y+1, r27	; 0x01
   15460:	a8 83       	st	Y, r26
   15462:	cf 53       	subi	r28, 0x3F	; 63
   15464:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3466
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   15466:	ee 24       	eor	r14, r14
   15468:	ea 94       	dec	r14
   1546a:	fe 2c       	mov	r15, r14
   1546c:	00 e0       	ldi	r16, 0x00	; 0
   1546e:	18 ef       	ldi	r17, 0xF8	; 248
   15470:	21 e0       	ldi	r18, 0x01	; 1
   15472:	4e e1       	ldi	r20, 0x1E	; 30
   15474:	50 e0       	ldi	r21, 0x00	; 0
   15476:	c7 5c       	subi	r28, 0xC7	; 199
   15478:	de 4f       	sbci	r29, 0xFE	; 254
   1547a:	68 81       	ld	r22, Y
   1547c:	79 81       	ldd	r23, Y+1	; 0x01
   1547e:	c9 53       	subi	r28, 0x39	; 57
   15480:	d1 40       	sbci	r29, 0x01	; 1
   15482:	86 e8       	ldi	r24, 0x86	; 134
   15484:	96 e0       	ldi	r25, 0x06	; 6
   15486:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3468
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
   1548a:	c8 5c       	subi	r28, 0xC8	; 200
   1548c:	de 4f       	sbci	r29, 0xFE	; 254
   1548e:	b8 81       	ld	r27, Y
   15490:	c8 53       	subi	r28, 0x38	; 56
   15492:	d1 40       	sbci	r29, 0x01	; 1
   15494:	b1 11       	cpse	r27, r1
   15496:	fc c1       	rjmp	.+1016   	; 0x15890 <setup+0x802>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   15498:	66 e3       	ldi	r22, 0x36	; 54
   1549a:	73 e8       	ldi	r23, 0x83	; 131
   1549c:	ce 01       	movw	r24, r28
   1549e:	88 5b       	subi	r24, 0xB8	; 184
   154a0:	9f 4f       	sbci	r25, 0xFF	; 255
   154a2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471
      strcat(str1, ":1");
   154a6:	68 e8       	ldi	r22, 0x88	; 136
   154a8:	76 e0       	ldi	r23, 0x06	; 6
   154aa:	ce 01       	movw	r24, r28
   154ac:	88 5b       	subi	r24, 0xB8	; 184
   154ae:	9f 4f       	sbci	r25, 0xFF	; 255
   154b0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   154b4:	00 ee       	ldi	r16, 0xE0	; 224
   154b6:	17 e0       	ldi	r17, 0x07	; 7
   154b8:	21 e0       	ldi	r18, 0x01	; 1
   154ba:	42 e3       	ldi	r20, 0x32	; 50
   154bc:	50 e0       	ldi	r21, 0x00	; 0
   154be:	6e e1       	ldi	r22, 0x1E	; 30
   154c0:	70 e0       	ldi	r23, 0x00	; 0
   154c2:	ce 01       	movw	r24, r28
   154c4:	88 5b       	subi	r24, 0xB8	; 184
   154c6:	9f 4f       	sbci	r25, 0xFF	; 255
   154c8:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474

      tritri = 0;
   154cc:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <tritri+0x1>
   154d0:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3475
      petnula = 0;
   154d4:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <petnula+0x1>
   154d8:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3476
      dvanact = 0;
   154dc:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <dvanact+0x1>
   154e0:	10 92 1c 0b 	sts	0x0B1C, r1	; 0x800b1c <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
      dvanact = 0;
      light_curr = 0;
   154e4:	10 92 40 0c 	sts	0x0C40, r1	; 0x800c40 <light_curr+0x1>
   154e8:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
   154ec:	88 ef       	ldi	r24, 0xF8	; 248
   154ee:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
   154f2:	83 e0       	ldi	r24, 0x03	; 3
   154f4:	80 93 f9 0a 	sts	0x0AF9, r24	; 0x800af9 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
   154f8:	10 92 20 0c 	sts	0x0C20, r1	; 0x800c20 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
   154fc:	10 92 fa 0a 	sts	0x0AFA, r1	; 0x800afa <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
   15500:	8e e8       	ldi	r24, 0x8E	; 142
   15502:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
   15506:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
   1550a:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <a2d_reference>
   1550e:	e0 e4       	ldi	r30, 0x40	; 64
   15510:	8e 9f       	mul	r24, r30
   15512:	c0 01       	movw	r24, r0
   15514:	11 24       	eor	r1, r1
   15516:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
   1551a:	87 ee       	ldi	r24, 0xE7	; 231
   1551c:	90 e5       	ldi	r25, 0x50	; 80
   1551e:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <a2d_interupt_func+0x1>
   15522:	80 93 fb 0a 	sts	0x0AFB, r24	; 0x800afb <a2d_interupt_func>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   15526:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3485
      a2d_start_first(A_PROUD);
   1552a:	83 e0       	ldi	r24, 0x03	; 3
   1552c:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3486
      milis = millis();
   15530:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   15534:	6b 01       	movw	r12, r22
   15536:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3487
      while (a2d_run_now == 0 && millis() - milis < 10);
   15538:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1553c:	6c 19       	sub	r22, r12
   1553e:	7d 09       	sbc	r23, r13
   15540:	8e 09       	sbc	r24, r14
   15542:	9f 09       	sbc	r25, r15
   15544:	6a 30       	cpi	r22, 0x0A	; 10
   15546:	71 05       	cpc	r23, r1
   15548:	81 05       	cpc	r24, r1
   1554a:	91 05       	cpc	r25, r1
   1554c:	a8 f3       	brcs	.-22     	; 0x15538 <setup+0x4aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3490
      /// regulator 3.3V
      a2d_run_now = 0;
      a2d_start_first(A_TRIV);
   1554e:	86 e0       	ldi	r24, 0x06	; 6
   15550:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3491
      milis = millis();
   15554:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   15558:	6b 01       	movw	r12, r22
   1555a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3492
      while (a2d_run_now == 0 && millis() - milis < 10);
   1555c:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   15560:	6c 19       	sub	r22, r12
   15562:	7d 09       	sbc	r23, r13
   15564:	8e 09       	sbc	r24, r14
   15566:	9f 09       	sbc	r25, r15
   15568:	6a 30       	cpi	r22, 0x0A	; 10
   1556a:	71 05       	cpc	r23, r1
   1556c:	81 05       	cpc	r24, r1
   1556e:	91 05       	cpc	r25, r1
   15570:	a8 f3       	brcs	.-22     	; 0x1555c <setup+0x4ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
      /// regulator 5.0V
      a2d_run_now = 0;
      a2d_start_first(A_PETV);
   15572:	85 e0       	ldi	r24, 0x05	; 5
   15574:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3496
      milis = millis();
   15578:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1557c:	6b 01       	movw	r12, r22
   1557e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3497
      while (a2d_run_now == 0 && millis() - milis < 10);
   15580:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   15584:	6c 19       	sub	r22, r12
   15586:	7d 09       	sbc	r23, r13
   15588:	8e 09       	sbc	r24, r14
   1558a:	9f 09       	sbc	r25, r15
   1558c:	6a 30       	cpi	r22, 0x0A	; 10
   1558e:	71 05       	cpc	r23, r1
   15590:	81 05       	cpc	r24, r1
   15592:	91 05       	cpc	r25, r1
   15594:	a8 f3       	brcs	.-22     	; 0x15580 <setup+0x4f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
      /// vstupni napeti 12V
      a2d_run_now = 0;
      a2d_start_first(A_DVANACTV);
   15596:	84 e0       	ldi	r24, 0x04	; 4
   15598:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3501
      milis = millis();
   1559c:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   155a0:	6b 01       	movw	r12, r22
   155a2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
      while (a2d_run_now == 0 && millis() - milis < 10);
   155a4:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   155a8:	6c 19       	sub	r22, r12
   155aa:	7d 09       	sbc	r23, r13
   155ac:	8e 09       	sbc	r24, r14
   155ae:	9f 09       	sbc	r25, r15
   155b0:	6a 30       	cpi	r22, 0x0A	; 10
   155b2:	71 05       	cpc	r23, r1
   155b4:	81 05       	cpc	r24, r1
   155b6:	91 05       	cpc	r25, r1
   155b8:	a8 f3       	brcs	.-22     	; 0x155a4 <setup+0x516>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3505
      /// aktualni intenzita svetla
      a2d_run_now = 0;
      a2d_start_first(A_LIGHT);
   155ba:	87 e0       	ldi	r24, 0x07	; 7
   155bc:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3506
      milis = millis();
   155c0:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   155c4:	6b 01       	movw	r12, r22
   155c6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3507
      while (a2d_run_now == 0 && millis() - milis < 10);
   155c8:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   155cc:	6c 19       	sub	r22, r12
   155ce:	7d 09       	sbc	r23, r13
   155d0:	8e 09       	sbc	r24, r14
   155d2:	9f 09       	sbc	r25, r15
   155d4:	6a 30       	cpi	r22, 0x0A	; 10
   155d6:	71 05       	cpc	r23, r1
   155d8:	81 05       	cpc	r24, r1
   155da:	91 05       	cpc	r25, r1
   155dc:	a8 f3       	brcs	.-22     	; 0x155c8 <setup+0x53a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   155de:	7e 01       	movw	r14, r28
   155e0:	fa ef       	ldi	r31, 0xFA	; 250
   155e2:	ef 1a       	sub	r14, r31
   155e4:	fe ef       	ldi	r31, 0xFE	; 254
   155e6:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   155e8:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <tritri>
   155ec:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <tritri+0x1>
   155f0:	25 e0       	ldi	r18, 0x05	; 5
   155f2:	28 9f       	mul	r18, r24
   155f4:	b0 01       	movw	r22, r0
   155f6:	29 9f       	mul	r18, r25
   155f8:	70 0d       	add	r23, r0
   155fa:	11 24       	eor	r1, r1
   155fc:	90 e0       	ldi	r25, 0x00	; 0
   155fe:	80 e0       	ldi	r24, 0x00	; 0
   15600:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   15604:	20 e0       	ldi	r18, 0x00	; 0
   15606:	30 e0       	ldi	r19, 0x00	; 0
   15608:	4a e7       	ldi	r20, 0x7A	; 122
   1560a:	54 e4       	ldi	r21, 0x44	; 68
   1560c:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   15610:	87 01       	movw	r16, r14
   15612:	22 e0       	ldi	r18, 0x02	; 2
   15614:	44 e0       	ldi	r20, 0x04	; 4
   15616:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   1561a:	6e 01       	movw	r12, r28
   1561c:	22 ef       	ldi	r18, 0xF2	; 242
   1561e:	c2 1a       	sub	r12, r18
   15620:	2e ef       	ldi	r18, 0xFE	; 254
   15622:	d2 0a       	sbc	r13, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   15624:	60 91 1e 0b 	lds	r22, 0x0B1E	; 0x800b1e <petnula>
   15628:	70 91 1f 0b 	lds	r23, 0x0B1F	; 0x800b1f <petnula+0x1>
   1562c:	03 e0       	ldi	r16, 0x03	; 3
   1562e:	66 0f       	add	r22, r22
   15630:	77 1f       	adc	r23, r23
   15632:	0a 95       	dec	r16
   15634:	e1 f7       	brne	.-8      	; 0x1562e <setup+0x5a0>
   15636:	90 e0       	ldi	r25, 0x00	; 0
   15638:	80 e0       	ldi	r24, 0x00	; 0
   1563a:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1563e:	20 e0       	ldi	r18, 0x00	; 0
   15640:	30 e0       	ldi	r19, 0x00	; 0
   15642:	4a e7       	ldi	r20, 0x7A	; 122
   15644:	54 e4       	ldi	r21, 0x44	; 68
   15646:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   1564a:	86 01       	movw	r16, r12
   1564c:	22 e0       	ldi	r18, 0x02	; 2
   1564e:	44 e0       	ldi	r20, 0x04	; 4
   15650:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   15654:	5e 01       	movw	r10, r28
   15656:	8a ee       	ldi	r24, 0xEA	; 234
   15658:	a8 1a       	sub	r10, r24
   1565a:	8e ef       	ldi	r24, 0xFE	; 254
   1565c:	b8 0a       	sbc	r11, r24
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1565e:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <dvanact>
   15662:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <dvanact+0x1>
   15666:	29 e3       	ldi	r18, 0x39	; 57
   15668:	28 9f       	mul	r18, r24
   1566a:	b0 01       	movw	r22, r0
   1566c:	29 9f       	mul	r18, r25
   1566e:	70 0d       	add	r23, r0
   15670:	11 24       	eor	r1, r1
   15672:	90 e0       	ldi	r25, 0x00	; 0
   15674:	80 e0       	ldi	r24, 0x00	; 0
   15676:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1567a:	20 e0       	ldi	r18, 0x00	; 0
   1567c:	30 e0       	ldi	r19, 0x00	; 0
   1567e:	4a e7       	ldi	r20, 0x7A	; 122
   15680:	54 e4       	ldi	r21, 0x44	; 68
   15682:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   15686:	85 01       	movw	r16, r10
   15688:	22 e0       	ldi	r18, 0x02	; 2
   1568a:	44 e0       	ldi	r20, 0x04	; 4
   1568c:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   15690:	4e 01       	movw	r8, r28
   15692:	92 ee       	ldi	r25, 0xE2	; 226
   15694:	89 1a       	sub	r8, r25
   15696:	9e ef       	ldi	r25, 0xFE	; 254
   15698:	99 0a       	sbc	r9, r25
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1569a:	60 91 1a 0b 	lds	r22, 0x0B1A	; 0x800b1a <proud>
   1569e:	70 91 1b 0b 	lds	r23, 0x0B1B	; 0x800b1b <proud+0x1>
   156a2:	90 e0       	ldi	r25, 0x00	; 0
   156a4:	80 e0       	ldi	r24, 0x00	; 0
   156a6:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3514
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   156aa:	84 01       	movw	r16, r8
   156ac:	22 e0       	ldi	r18, 0x02	; 2
   156ae:	44 e0       	ldi	r20, 0x04	; 4
   156b0:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3515
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   156b4:	9f 92       	push	r9
   156b6:	8f 92       	push	r8
   156b8:	bf 92       	push	r11
   156ba:	af 92       	push	r10
   156bc:	df 92       	push	r13
   156be:	cf 92       	push	r12
   156c0:	ff 92       	push	r15
   156c2:	ef 92       	push	r14
   156c4:	8b e8       	ldi	r24, 0x8B	; 139
   156c6:	96 e0       	ldi	r25, 0x06	; 6
   156c8:	9f 93       	push	r25
   156ca:	8f 93       	push	r24
   156cc:	6e 01       	movw	r12, r28
   156ce:	a8 e8       	ldi	r26, 0x88	; 136
   156d0:	ca 0e       	add	r12, r26
   156d2:	d1 1c       	adc	r13, r1
   156d4:	df 92       	push	r13
   156d6:	cf 92       	push	r12
   156d8:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3516
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   156dc:	ee 24       	eor	r14, r14
   156de:	ea 94       	dec	r14
   156e0:	fe 2c       	mov	r15, r14
   156e2:	00 ee       	ldi	r16, 0xE0	; 224
   156e4:	17 e0       	ldi	r17, 0x07	; 7
   156e6:	21 e0       	ldi	r18, 0x01	; 1
   156e8:	42 e3       	ldi	r20, 0x32	; 50
   156ea:	50 e0       	ldi	r21, 0x00	; 0
   156ec:	60 ea       	ldi	r22, 0xA0	; 160
   156ee:	70 e0       	ldi	r23, 0x00	; 0
   156f0:	c6 01       	movw	r24, r12
   156f2:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   156f6:	0f b6       	in	r0, 0x3f	; 63
   156f8:	f8 94       	cli
   156fa:	de bf       	out	0x3e, r29	; 62
   156fc:	0f be       	out	0x3f, r0	; 63
   156fe:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      default_show_temp = get_default_show_temp();
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
   15700:	c8 5c       	subi	r28, 0xC8	; 200
   15702:	de 4f       	sbci	r29, 0xFE	; 254
   15704:	28 81       	ld	r18, Y
   15706:	c8 53       	subi	r28, 0x38	; 56
   15708:	d1 40       	sbci	r29, 0x01	; 1
   1570a:	2e 30       	cpi	r18, 0x0E	; 14
   1570c:	11 f0       	breq	.+4      	; 0x15712 <setup+0x684>
   1570e:	0c 94 2a b4 	jmp	0x16854	; 0x16854 <setup+0x17c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
    {
      strcpy_P(str1, text_ntp_cas);
   15712:	69 e4       	ldi	r22, 0x49	; 73
   15714:	72 e8       	ldi	r23, 0x82	; 130
   15716:	ce 01       	movw	r24, r28
   15718:	88 5b       	subi	r24, 0xB8	; 184
   1571a:	9f 4f       	sbci	r25, 0xFF	; 255
   1571c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15720:	ee 24       	eor	r14, r14
   15722:	ea 94       	dec	r14
   15724:	fe 2c       	mov	r15, r14
   15726:	00 ee       	ldi	r16, 0xE0	; 224
   15728:	17 e0       	ldi	r17, 0x07	; 7
   1572a:	21 e0       	ldi	r18, 0x01	; 1
   1572c:	4e eb       	ldi	r20, 0xBE	; 190
   1572e:	50 e0       	ldi	r21, 0x00	; 0
   15730:	6e e1       	ldi	r22, 0x1E	; 30
   15732:	70 e0       	ldi	r23, 0x00	; 0
   15734:	ce 01       	movw	r24, r28
   15736:	88 5b       	subi	r24, 0xB8	; 184
   15738:	9f 4f       	sbci	r25, 0xFF	; 255
   1573a:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:423
   1573e:	d3 01       	movw	r26, r6
   15740:	1c 92       	st	X, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:424
  createString(tmp1, '.', device.ntp_server, 4, 10);
   15742:	0a e0       	ldi	r16, 0x0A	; 10
   15744:	24 e0       	ldi	r18, 0x04	; 4
   15746:	43 e0       	ldi	r20, 0x03	; 3
   15748:	5e e0       	ldi	r21, 0x0E	; 14
   1574a:	6e e2       	ldi	r22, 0x2E	; 46
   1574c:	c3 01       	movw	r24, r6
   1574e:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   15752:	89 e3       	ldi	r24, 0x39	; 57
   15754:	95 e0       	ldi	r25, 0x05	; 5
   15756:	9f 83       	std	Y+7, r25	; 0x07
   15758:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   1575a:	89 81       	ldd	r24, Y+1	; 0x01
   1575c:	9a 81       	ldd	r25, Y+2	; 0x02
   1575e:	dc 01       	movw	r26, r24
   15760:	ed 91       	ld	r30, X+
   15762:	fc 91       	ld	r31, X
   15764:	06 84       	ldd	r0, Z+14	; 0x0e
   15766:	f7 85       	ldd	r31, Z+15	; 0x0f
   15768:	e0 2d       	mov	r30, r0
   1576a:	69 e3       	ldi	r22, 0x39	; 57
   1576c:	75 e0       	ldi	r23, 0x05	; 5
   1576e:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   15770:	81 e0       	ldi	r24, 0x01	; 1
   15772:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   15774:	80 e1       	ldi	r24, 0x10	; 16
   15776:	9e e0       	ldi	r25, 0x0E	; 14
   15778:	a0 e0       	ldi	r26, 0x00	; 0
   1577a:	b0 e0       	ldi	r27, 0x00	; 0
   1577c:	88 87       	std	Y+8, r24	; 0x08
   1577e:	99 87       	std	Y+9, r25	; 0x09
   15780:	aa 87       	std	Y+10, r26	; 0x0a
   15782:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   15784:	7d 82       	std	Y+5, r7	; 0x05
   15786:	6c 82       	std	Y+4, r6	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   15788:	81 e0       	ldi	r24, 0x01	; 1
   1578a:	90 e0       	ldi	r25, 0x00	; 0
   1578c:	a0 e0       	ldi	r26, 0x00	; 0
   1578e:	b0 e0       	ldi	r27, 0x00	; 0
   15790:	8c 87       	std	Y+12, r24	; 0x0c
   15792:	9d 87       	std	Y+13, r25	; 0x0d
   15794:	ae 87       	std	Y+14, r26	; 0x0e
   15796:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:429
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
   15798:	ce 01       	movw	r24, r28
   1579a:	01 96       	adiw	r24, 0x01	; 1
   1579c:	0e 94 82 65 	call	0xcb04	; 0xcb04 <NTPClient::update()>
   157a0:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   157a2:	89 81       	ldd	r24, Y+1	; 0x01
   157a4:	9a 81       	ldd	r25, Y+2	; 0x02
   157a6:	dc 01       	movw	r26, r24
   157a8:	ed 91       	ld	r30, X+
   157aa:	fc 91       	ld	r31, X
   157ac:	02 88       	ldd	r0, Z+18	; 0x12
   157ae:	f3 89       	ldd	r31, Z+19	; 0x13
   157b0:	e0 2d       	mov	r30, r0
   157b2:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   157b4:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
      if (ntp_check(&timeClient) == 0)
   157b6:	11 11       	cpse	r17, r1
   157b8:	0c 94 10 b4 	jmp	0x16820	; 0x16820 <setup+0x1792>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3845
      {
        strcpy_P(str1, text_err);
   157bc:	62 e2       	ldi	r22, 0x22	; 34
   157be:	74 e8       	ldi	r23, 0x84	; 132
   157c0:	ce 01       	movw	r24, r28
   157c2:	88 5b       	subi	r24, 0xB8	; 184
   157c4:	9f 4f       	sbci	r25, 0xFF	; 255
   157c6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3846
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   157ca:	00 e0       	ldi	r16, 0x00	; 0
   157cc:	18 ef       	ldi	r17, 0xF8	; 248
   157ce:	21 e0       	ldi	r18, 0x01	; 1
   157d0:	4e eb       	ldi	r20, 0xBE	; 190
   157d2:	50 e0       	ldi	r21, 0x00	; 0
   157d4:	60 ea       	ldi	r22, 0xA0	; 160
   157d6:	70 e0       	ldi	r23, 0x00	; 0
   157d8:	ce 01       	movw	r24, r28
   157da:	88 5b       	subi	r24, 0xB8	; 184
   157dc:	9f 4f       	sbci	r25, 0xFF	; 255
   157de:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3847
        selftest_set_0(SELFTEST_ERR_NTP);
   157e2:	81 e0       	ldi	r24, 0x01	; 1
   157e4:	5a c5       	rjmp	.+2740   	; 0x1629a <setup+0x120c>
   157e6:	0d 0d       	add	r16, r13
   157e8:	11 1d       	adc	r17, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
   157ea:	70 e0       	ldi	r23, 0x00	; 0
   157ec:	2d 2d       	mov	r18, r13
   157ee:	85 e5       	ldi	r24, 0x55	; 85
   157f0:	9f e0       	ldi	r25, 0x0F	; 15
   157f2:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   157f6:	96 cd       	rjmp	.-1236   	; 0x15324 <setup+0x296>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   157f8:	8f ef       	ldi	r24, 0xFF	; 255
   157fa:	90 e0       	ldi	r25, 0x00	; 0
   157fc:	90 93 6e 0f 	sts	0x0F6E, r25	; 0x800f6e <my_lcd+0x19>
   15800:	80 93 6d 0f 	sts	0x0F6D, r24	; 0x800f6d <my_lcd+0x18>
   15804:	98 cd       	rjmp	.-1232   	; 0x15336 <setup+0x2a8>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
   15806:	41 30       	cpi	r20, 0x01	; 1
   15808:	51 05       	cpc	r21, r1
   1580a:	19 f5       	brne	.+70     	; 0x15852 <setup+0x7c4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
   1580c:	81 e0       	ldi	r24, 0x01	; 1
   1580e:	82 b9       	out	0x02, r24	; 2
   15810:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   15814:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   15818:	80 81       	ld	r24, Z
   1581a:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1581e:	89 23       	and	r24, r25
   15820:	80 83       	st	Z, r24
   15822:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   15826:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1582a:	80 81       	ld	r24, Z
   1582c:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   15830:	89 2b       	or	r24, r25
   15832:	80 83       	st	Z, r24
   15834:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   15838:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1583c:	80 81       	ld	r24, Z
   1583e:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   15842:	89 2b       	or	r24, r25
   15844:	80 83       	st	Z, r24
setup():
   15846:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
   15848:	21 11       	cpse	r18, r1
   1584a:	01 c0       	rjmp	.+2      	; 0x1584e <setup+0x7c0>
setup():
   1584c:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
   1584e:	82 b9       	out	0x02, r24	; 2
   15850:	b0 cd       	rjmp	.-1184   	; 0x153b2 <setup+0x324>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   15852:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
   15854:	21 11       	cpse	r18, r1
   15856:	01 c0       	rjmp	.+2      	; 0x1585a <setup+0x7cc>
setup():
   15858:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
   1585a:	82 b9       	out	0x02, r24	; 2
   1585c:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   15860:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   15864:	80 81       	ld	r24, Z
   15866:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1586a:	89 23       	and	r24, r25
   1586c:	80 83       	st	Z, r24
   1586e:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   15872:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   15876:	80 81       	ld	r24, Z
   15878:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1587c:	89 2b       	or	r24, r25
   1587e:	80 83       	st	Z, r24
   15880:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   15884:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   15888:	80 81       	ld	r24, Z
   1588a:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1588e:	a1 cd       	rjmp	.-1214   	; 0x153d2 <setup+0x344>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
   15890:	c8 5c       	subi	r28, 0xC8	; 200
   15892:	de 4f       	sbci	r29, 0xFE	; 254
   15894:	f8 81       	ld	r31, Y
   15896:	c8 53       	subi	r28, 0x38	; 56
   15898:	d1 40       	sbci	r29, 0x01	; 1
   1589a:	f1 30       	cpi	r31, 0x01	; 1
   1589c:	09 f0       	breq	.+2      	; 0x158a0 <setup+0x812>
   1589e:	4b c0       	rjmp	.+150    	; 0x15936 <setup+0x8a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   158a0:	66 e3       	ldi	r22, 0x36	; 54
   158a2:	73 e8       	ldi	r23, 0x83	; 131
   158a4:	ce 01       	movw	r24, r28
   158a6:	88 5b       	subi	r24, 0xB8	; 184
   158a8:	9f 4f       	sbci	r25, 0xFF	; 255
   158aa:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
      strcat(str1, ":2");
   158ae:	69 ea       	ldi	r22, 0xA9	; 169
   158b0:	76 e0       	ldi	r23, 0x06	; 6
   158b2:	ce 01       	movw	r24, r28
   158b4:	88 5b       	subi	r24, 0xB8	; 184
   158b6:	9f 4f       	sbci	r25, 0xFF	; 255
   158b8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   158bc:	ee 24       	eor	r14, r14
   158be:	ea 94       	dec	r14
   158c0:	fe 2c       	mov	r15, r14
   158c2:	00 ee       	ldi	r16, 0xE0	; 224
   158c4:	17 e0       	ldi	r17, 0x07	; 7
   158c6:	21 e0       	ldi	r18, 0x01	; 1
   158c8:	4c e3       	ldi	r20, 0x3C	; 60
   158ca:	50 e0       	ldi	r21, 0x00	; 0
   158cc:	6e e1       	ldi	r22, 0x1E	; 30
   158ce:	70 e0       	ldi	r23, 0x00	; 0
   158d0:	ce 01       	movw	r24, r28
   158d2:	88 5b       	subi	r24, 0xB8	; 184
   158d4:	9f 4f       	sbci	r25, 0xFF	; 255
   158d6:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   158da:	0e 94 de ba 	call	0x175bc	; 0x175bc <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]>
   158de:	7e 01       	movw	r14, r28
   158e0:	22 ee       	ldi	r18, 0xE2	; 226
   158e2:	e2 1a       	sub	r14, r18
   158e4:	2e ef       	ldi	r18, 0xFE	; 254
   158e6:	f2 0a       	sbc	r15, r18
   158e8:	87 01       	movw	r16, r14
   158ea:	22 e0       	ldi	r18, 0x02	; 2
   158ec:	44 e0       	ldi	r20, 0x04	; 4
   158ee:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3526
      sprintf(str2, "iT=%sC", s_current);
   158f2:	ff 92       	push	r15
   158f4:	ef 92       	push	r14
   158f6:	8c ea       	ldi	r24, 0xAC	; 172
   158f8:	96 e0       	ldi	r25, 0x06	; 6
   158fa:	9f 93       	push	r25
   158fc:	8f 93       	push	r24
   158fe:	6e 01       	movw	r12, r28
   15900:	88 e8       	ldi	r24, 0x88	; 136
   15902:	c8 0e       	add	r12, r24
   15904:	d1 1c       	adc	r13, r1
   15906:	df 92       	push	r13
   15908:	cf 92       	push	r12
   1590a:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3527
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1590e:	ee 24       	eor	r14, r14
   15910:	ea 94       	dec	r14
   15912:	fe 2c       	mov	r15, r14
   15914:	00 ee       	ldi	r16, 0xE0	; 224
   15916:	17 e0       	ldi	r17, 0x07	; 7
   15918:	21 e0       	ldi	r18, 0x01	; 1
   1591a:	4c e3       	ldi	r20, 0x3C	; 60
   1591c:	50 e0       	ldi	r21, 0x00	; 0
   1591e:	60 ea       	ldi	r22, 0xA0	; 160
   15920:	70 e0       	ldi	r23, 0x00	; 0
   15922:	c6 01       	movw	r24, r12
   15924:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15928:	0f 90       	pop	r0
   1592a:	0f 90       	pop	r0
   1592c:	0f 90       	pop	r0
   1592e:	0f 90       	pop	r0
   15930:	0f 90       	pop	r0
   15932:	0f 90       	pop	r0
   15934:	e5 ce       	rjmp	.-566    	; 0x15700 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3531
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
   15936:	c8 5c       	subi	r28, 0xC8	; 200
   15938:	de 4f       	sbci	r29, 0xFE	; 254
   1593a:	98 81       	ld	r25, Y
   1593c:	c8 53       	subi	r28, 0x38	; 56
   1593e:	d1 40       	sbci	r29, 0x01	; 1
   15940:	92 30       	cpi	r25, 0x02	; 2
   15942:	09 f0       	breq	.+2      	; 0x15946 <setup+0x8b8>
   15944:	87 c1       	rjmp	.+782    	; 0x15c54 <setup+0xbc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
    {
      if (EEPROM.read(set_default_values) == 255)
   15946:	8a e5       	ldi	r24, 0x5A	; 90
   15948:	90 e0       	ldi	r25, 0x00	; 0
   1594a:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1594e:	8f 3f       	cpi	r24, 0xFF	; 255
   15950:	09 f0       	breq	.+2      	; 0x15954 <setup+0x8c6>
   15952:	6e c1       	rjmp	.+732    	; 0x15c30 <setup+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3535
      {
        EEPROM.write(set_default_values, 0);
   15954:	60 e0       	ldi	r22, 0x00	; 0
   15956:	8a e5       	ldi	r24, 0x5A	; 90
   15958:	90 e0       	ldi	r25, 0x00	; 0
   1595a:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3536
        strcpy_P(str1, text_vychozi_nastaveni);
   1595e:	64 e2       	ldi	r22, 0x24	; 36
   15960:	73 e8       	ldi	r23, 0x83	; 131
   15962:	ce 01       	movw	r24, r28
   15964:	88 5b       	subi	r24, 0xB8	; 184
   15966:	9f 4f       	sbci	r25, 0xFF	; 255
   15968:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3537
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   1596c:	ee 24       	eor	r14, r14
   1596e:	ea 94       	dec	r14
   15970:	fe 2c       	mov	r15, r14
   15972:	00 e0       	ldi	r16, 0x00	; 0
   15974:	18 ef       	ldi	r17, 0xF8	; 248
   15976:	21 e0       	ldi	r18, 0x01	; 1
   15978:	46 e4       	ldi	r20, 0x46	; 70
   1597a:	50 e0       	ldi	r21, 0x00	; 0
   1597c:	6e e1       	ldi	r22, 0x1E	; 30
   1597e:	70 e0       	ldi	r23, 0x00	; 0
   15980:	ce 01       	movw	r24, r28
   15982:	88 5b       	subi	r24, 0xB8	; 184
   15984:	9f 4f       	sbci	r25, 0xFF	; 255
   15986:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
   1598a:	6f ef       	ldi	r22, 0xFF	; 255
   1598c:	8d e5       	ldi	r24, 0x5D	; 93
   1598e:	90 e0       	ldi	r25, 0x00	; 0
   15990:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   15994:	80 e0       	ldi	r24, 0x00	; 0
   15996:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
   1599a:	81 e0       	ldi	r24, 0x01	; 1
   1599c:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
   159a0:	82 e0       	ldi	r24, 0x02	; 2
   159a2:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
   159a6:	83 e0       	ldi	r24, 0x03	; 3
   159a8:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
   159ac:	84 e0       	ldi	r24, 0x04	; 4
   159ae:	0e 94 d2 6d 	call	0xdba4	; 0xdba4 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   159b2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3546
        {
          strcpy(tmp1, "");
   159b4:	62 e0       	ldi	r22, 0x02	; 2
   159b6:	73 e0       	ldi	r23, 0x03	; 3
   159b8:	ce 01       	movw	r24, r28
   159ba:	8e 50       	subi	r24, 0x0E	; 14
   159bc:	9f 4f       	sbci	r25, 0xFF	; 255
   159be:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3547
          remote_tds_clear(idx);
   159c2:	81 2f       	mov	r24, r17
   159c4:	0e 94 de 71 	call	0xe3bc	; 0xe3bc <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   159c8:	1f 5f       	subi	r17, 0xFF	; 255
   159ca:	1a 30       	cpi	r17, 0x0A	; 10
   159cc:	99 f7       	brne	.-26     	; 0x159b4 <setup+0x926>
   159ce:	f1 ef       	ldi	r31, 0xF1	; 241
   159d0:	af 2e       	mov	r10, r31
   159d2:	bb 24       	eor	r11, r11
   159d4:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   159d6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
        {
          strcpy_P(str2, text_prog);
   159d8:	6f e1       	ldi	r22, 0x1F	; 31
   159da:	73 e8       	ldi	r23, 0x83	; 131
   159dc:	ce 01       	movw	r24, r28
   159de:	88 57       	subi	r24, 0x78	; 120
   159e0:	9f 4f       	sbci	r25, 0xFF	; 255
   159e2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
          thermostat_program_set_name(idx, str2);
   159e6:	be 01       	movw	r22, r28
   159e8:	68 57       	subi	r22, 0x78	; 120
   159ea:	7f 4f       	sbci	r23, 0xFF	; 255
   159ec:	81 2f       	mov	r24, r17
   159ee:	0e 94 48 6c 	call	0xd890	; 0xd890 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   159f2:	6f ef       	ldi	r22, 0xFF	; 255
   159f4:	c5 01       	movw	r24, r10
   159f6:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   159fa:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3557
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   159fc:	c1 2c       	mov	r12, r1
   159fe:	e1 2c       	mov	r14, r1
   15a00:	00 e0       	ldi	r16, 0x00	; 0
   15a02:	20 e0       	ldi	r18, 0x00	; 0
   15a04:	40 e0       	ldi	r20, 0x00	; 0
   15a06:	6f 2d       	mov	r22, r15
   15a08:	81 2f       	mov	r24, r17
   15a0a:	0e 94 0c 6c 	call	0xd818	; 0xd818 <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3558
            thermostat_program_set_threshold(idx, interval_id, 220);
   15a0e:	4c ed       	ldi	r20, 0xDC	; 220
   15a10:	50 e0       	ldi	r21, 0x00	; 0
   15a12:	6f 2d       	mov	r22, r15
   15a14:	81 2f       	mov	r24, r17
   15a16:	0e 94 f0 6b 	call	0xd7e0	; 0xd7e0 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3559
            thermostat_program_set_week(idx, interval_id, 0);
   15a1a:	40 e0       	ldi	r20, 0x00	; 0
   15a1c:	6f 2d       	mov	r22, r15
   15a1e:	81 2f       	mov	r24, r17
   15a20:	0e 94 e2 6b 	call	0xd7c4	; 0xd7c4 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   15a24:	f3 94       	inc	r15
   15a26:	ab e0       	ldi	r26, 0x0B	; 11
   15a28:	fa 12       	cpse	r15, r26
   15a2a:	e8 cf       	rjmp	.-48     	; 0x159fc <setup+0x96e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   15a2c:	1f 5f       	subi	r17, 0xFF	; 255
   15a2e:	bd e4       	ldi	r27, 0x4D	; 77
   15a30:	ab 0e       	add	r10, r27
   15a32:	b1 1c       	adc	r11, r1
   15a34:	18 30       	cpi	r17, 0x08	; 8
   15a36:	81 f6       	brne	.-96     	; 0x159d8 <setup+0x94a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   15a38:	ea e0       	ldi	r30, 0x0A	; 10
   15a3a:	fe 2e       	mov	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3571
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   15a3c:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   15a3e:	be 01       	movw	r22, r28
   15a40:	68 53       	subi	r22, 0x38	; 56
   15a42:	7f 4f       	sbci	r23, 0xFF	; 255
   15a44:	80 2f       	mov	r24, r16
   15a46:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3566
          strcpy(tds.name, "FREE");
   15a4a:	6e e9       	ldi	r22, 0x9E	; 158
   15a4c:	73 e0       	ldi	r23, 0x03	; 3
   15a4e:	c1 5c       	subi	r28, 0xC1	; 193
   15a50:	de 4f       	sbci	r29, 0xFE	; 254
   15a52:	88 81       	ld	r24, Y
   15a54:	99 81       	ldd	r25, Y+1	; 0x01
   15a56:	cf 53       	subi	r28, 0x3F	; 63
   15a58:	d1 40       	sbci	r29, 0x01	; 1
   15a5a:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
          tds.used = 0;
   15a5e:	c8 53       	subi	r28, 0x38	; 56
   15a60:	df 4f       	sbci	r29, 0xFF	; 255
   15a62:	18 82       	st	Y, r1
   15a64:	c8 5c       	subi	r28, 0xC8	; 200
   15a66:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
          tds.offset = 0;
   15a68:	ce 52       	subi	r28, 0x2E	; 46
   15a6a:	df 4f       	sbci	r29, 0xFF	; 255
   15a6c:	19 82       	std	Y+1, r1	; 0x01
   15a6e:	18 82       	st	Y, r1
   15a70:	c2 5d       	subi	r28, 0xD2	; 210
   15a72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
          tds.assigned_ds2482 = 0;
   15a74:	cf 52       	subi	r28, 0x2F	; 47
   15a76:	df 4f       	sbci	r29, 0xFF	; 255
   15a78:	18 82       	st	Y, r1
   15a7a:	c1 5d       	subi	r28, 0xD1	; 209
   15a7c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3570
          tds.period = 10;
   15a7e:	c4 52       	subi	r28, 0x24	; 36
   15a80:	df 4f       	sbci	r29, 0xFF	; 255
   15a82:	f8 82       	st	Y, r15
   15a84:	cc 5d       	subi	r28, 0xDC	; 220
   15a86:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3571
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   15a88:	c7 53       	subi	r28, 0x37	; 55
   15a8a:	df 4f       	sbci	r29, 0xFF	; 255
   15a8c:	18 83       	st	Y, r17
   15a8e:	c9 5c       	subi	r28, 0xC9	; 201
   15a90:	d0 40       	sbci	r29, 0x00	; 0
   15a92:	c6 53       	subi	r28, 0x36	; 54
   15a94:	df 4f       	sbci	r29, 0xFF	; 255
   15a96:	18 83       	st	Y, r17
   15a98:	ca 5c       	subi	r28, 0xCA	; 202
   15a9a:	d0 40       	sbci	r29, 0x00	; 0
   15a9c:	c5 53       	subi	r28, 0x35	; 53
   15a9e:	df 4f       	sbci	r29, 0xFF	; 255
   15aa0:	18 83       	st	Y, r17
   15aa2:	cb 5c       	subi	r28, 0xCB	; 203
   15aa4:	d0 40       	sbci	r29, 0x00	; 0
   15aa6:	c4 53       	subi	r28, 0x34	; 52
   15aa8:	df 4f       	sbci	r29, 0xFF	; 255
   15aaa:	18 83       	st	Y, r17
   15aac:	cc 5c       	subi	r28, 0xCC	; 204
   15aae:	d0 40       	sbci	r29, 0x00	; 0
   15ab0:	c3 53       	subi	r28, 0x33	; 51
   15ab2:	df 4f       	sbci	r29, 0xFF	; 255
   15ab4:	18 83       	st	Y, r17
   15ab6:	cd 5c       	subi	r28, 0xCD	; 205
   15ab8:	d0 40       	sbci	r29, 0x00	; 0
   15aba:	c2 53       	subi	r28, 0x32	; 50
   15abc:	df 4f       	sbci	r29, 0xFF	; 255
   15abe:	18 83       	st	Y, r17
   15ac0:	ce 5c       	subi	r28, 0xCE	; 206
   15ac2:	d0 40       	sbci	r29, 0x00	; 0
   15ac4:	c1 53       	subi	r28, 0x31	; 49
   15ac6:	df 4f       	sbci	r29, 0xFF	; 255
   15ac8:	18 83       	st	Y, r17
   15aca:	cf 5c       	subi	r28, 0xCF	; 207
   15acc:	d0 40       	sbci	r29, 0x00	; 0
   15ace:	c0 53       	subi	r28, 0x30	; 48
   15ad0:	df 4f       	sbci	r29, 0xFF	; 255
   15ad2:	18 83       	st	Y, r17
   15ad4:	c0 5d       	subi	r28, 0xD0	; 208
   15ad6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
          set_tds18s20(idx, &tds);
   15ad8:	be 01       	movw	r22, r28
   15ada:	68 53       	subi	r22, 0x38	; 56
   15adc:	7f 4f       	sbci	r23, 0xFF	; 255
   15ade:	80 2f       	mov	r24, r16
   15ae0:	0e 94 95 6e 	call	0xdd2a	; 0xdd2a <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   15ae4:	0f 5f       	subi	r16, 0xFF	; 255
   15ae6:	06 30       	cpi	r16, 0x06	; 6
   15ae8:	09 f0       	breq	.+2      	; 0x15aec <setup+0xa5e>
   15aea:	a9 cf       	rjmp	.-174    	; 0x15a3e <setup+0x9b0>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   15aec:	84 e1       	ldi	r24, 0x14	; 20
   15aee:	f3 01       	movw	r30, r6
   15af0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   15af2:	8c e0       	ldi	r24, 0x0C	; 12
   15af4:	81 83       	std	Z+1, r24	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   15af6:	8e e0       	ldi	r24, 0x0E	; 14
   15af8:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   15afa:	91 e1       	ldi	r25, 0x11	; 17
   15afc:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   15afe:	84 83       	std	Z+4, r24	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   15b00:	15 82       	std	Z+5, r1	; 0x05
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3575
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   15b02:	c3 01       	movw	r24, r6
   15b04:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3205
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   15b08:	61 e0       	ldi	r22, 0x01	; 1
   15b0a:	81 e0       	ldi	r24, 0x01	; 1
   15b0c:	90 e0       	ldi	r25, 0x00	; 0
   15b0e:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3578
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   15b12:	22 e0       	ldi	r18, 0x02	; 2
   15b14:	20 93 b5 0d 	sts	0x0DB5, r18	; 0x800db5 <device>
   15b18:	31 e0       	ldi	r19, 0x01	; 1
   15b1a:	30 93 b6 0d 	sts	0x0DB6, r19	; 0x800db6 <device+0x1>
   15b1e:	20 93 b7 0d 	sts	0x0DB7, r18	; 0x800db7 <device+0x2>
   15b22:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <dvanact>
   15b26:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <dvanact+0x1>
   15b2a:	96 95       	lsr	r25
   15b2c:	87 95       	ror	r24
   15b2e:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <device+0x3>
   15b32:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <light_curr>
   15b36:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <light_curr+0x1>
   15b3a:	96 95       	lsr	r25
   15b3c:	87 95       	ror	r24
   15b3e:	80 93 b9 0d 	sts	0x0DB9, r24	; 0x800db9 <device+0x4>
   15b42:	80 91 1a 0b 	lds	r24, 0x0B1A	; 0x800b1a <proud>
   15b46:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <proud+0x1>
   15b4a:	96 95       	lsr	r25
   15b4c:	87 95       	ror	r24
   15b4e:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3579
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
   15b52:	90 ec       	ldi	r25, 0xC0	; 192
   15b54:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <device+0x6>
   15b58:	88 ea       	ldi	r24, 0xA8	; 168
   15b5a:	80 93 bc 0d 	sts	0x0DBC, r24	; 0x800dbc <device+0x7>
   15b5e:	20 93 bd 0d 	sts	0x0DBD, r18	; 0x800dbd <device+0x8>
   15b62:	4f e6       	ldi	r20, 0x6F	; 111
   15b64:	40 93 be 0d 	sts	0x0DBE, r20	; 0x800dbe <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   15b68:	10 93 bf 0d 	sts	0x0DBF, r17	; 0x800dbf <device+0xa>
   15b6c:	10 93 c0 0d 	sts	0x0DC0, r17	; 0x800dc0 <device+0xb>
   15b70:	10 93 c1 0d 	sts	0x0DC1, r17	; 0x800dc1 <device+0xc>
   15b74:	10 92 c2 0d 	sts	0x0DC2, r1	; 0x800dc2 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3582

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   15b78:	90 93 c7 0d 	sts	0x0DC7, r25	; 0x800dc7 <device+0x12>
   15b7c:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <device+0x13>
   15b80:	20 93 c9 0d 	sts	0x0DC9, r18	; 0x800dc9 <device+0x14>
   15b84:	30 93 ca 0d 	sts	0x0DCA, r19	; 0x800dca <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   15b88:	90 93 c3 0d 	sts	0x0DC3, r25	; 0x800dc3 <device+0xe>
   15b8c:	80 93 c4 0d 	sts	0x0DC4, r24	; 0x800dc4 <device+0xf>
   15b90:	20 93 c5 0d 	sts	0x0DC5, r18	; 0x800dc5 <device+0x10>
   15b94:	30 93 c6 0d 	sts	0x0DC6, r19	; 0x800dc6 <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   15b98:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <device+0x20>
   15b9c:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <device+0x21>
   15ba0:	20 93 d7 0d 	sts	0x0DD7, r18	; 0x800dd7 <device+0x22>
   15ba4:	30 93 d8 0d 	sts	0x0DD8, r19	; 0x800dd8 <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   15ba8:	90 93 03 0e 	sts	0x0E03, r25	; 0x800e03 <device+0x4e>
   15bac:	80 93 04 0e 	sts	0x0E04, r24	; 0x800e04 <device+0x4f>
   15bb0:	20 93 05 0e 	sts	0x0E05, r18	; 0x800e05 <device+0x50>
   15bb4:	30 93 06 0e 	sts	0x0E06, r19	; 0x800e06 <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
        device.mqtt_port = 1883;
   15bb8:	8b e5       	ldi	r24, 0x5B	; 91
   15bba:	97 e0       	ldi	r25, 0x07	; 7
   15bbc:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <device+0x25>
   15bc0:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
        strcpy(device.mqtt_user, "saric");
   15bc4:	63 eb       	ldi	r22, 0xB3	; 179
   15bc6:	76 e0       	ldi	r23, 0x06	; 6
   15bc8:	8b ed       	ldi	r24, 0xDB	; 219
   15bca:	9d e0       	ldi	r25, 0x0D	; 13
   15bcc:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
        strcpy(device.mqtt_key, "no");
   15bd0:	69 eb       	ldi	r22, 0xB9	; 185
   15bd2:	76 e0       	ldi	r23, 0x06	; 6
   15bd4:	8f ee       	ldi	r24, 0xEF	; 239
   15bd6:	9d e0       	ldi	r25, 0x0D	; 13
   15bd8:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589
        save_setup_network();
   15bdc:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3590
        strcpy(str1, "TERM D2");
   15be0:	6c eb       	ldi	r22, 0xBC	; 188
   15be2:	76 e0       	ldi	r23, 0x06	; 6
   15be4:	ce 01       	movw	r24, r28
   15be6:	88 5b       	subi	r24, 0xB8	; 184
   15be8:	9f 4f       	sbci	r25, 0xFF	; 255
   15bea:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
        device_set_name(str1);
   15bee:	ce 01       	movw	r24, r28
   15bf0:	88 5b       	subi	r24, 0xB8	; 184
   15bf2:	9f 4f       	sbci	r25, 0xFF	; 255
   15bf4:	0e 94 f6 6e 	call	0xddec	; 0xddec <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
        char hostname[10];
        device_get_name(hostname);
   15bf8:	c3 01       	movw	r24, r6
   15bfa:	0e 94 04 94 	call	0x12808	; 0x12808 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
        default_ring = NO_DEFAULT_RING;
   15bfe:	10 93 22 0b 	sts	0x0B22, r17	; 0x800b22 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3595
        last_default_ring = NO_DEFAULT_RING;
   15c02:	10 93 56 09 	sts	0x0956, r17	; 0x800956 <last_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1994
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   15c06:	6f ef       	ldi	r22, 0xFF	; 255
   15c08:	8c e5       	ldi	r24, 0x5C	; 92
   15c0a:	90 e0       	ldi	r25, 0x00	; 0
   15c0c:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3597
        char hostname[10];
        device_get_name(hostname);
        default_ring = NO_DEFAULT_RING;
        last_default_ring = NO_DEFAULT_RING;
        set_default_ring(default_ring);
        EEPROM.write(my_brightness_values, 50);
   15c10:	62 e3       	ldi	r22, 0x32	; 50
   15c12:	8e e5       	ldi	r24, 0x5E	; 94
   15c14:	90 e0       	ldi	r25, 0x00	; 0
   15c16:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3598
        EEPROM.write(my_brightness_mode, 0);
   15c1a:	60 e0       	ldi	r22, 0x00	; 0
   15c1c:	8f e5       	ldi	r24, 0x5F	; 95
   15c1e:	90 e0       	ldi	r25, 0x00	; 0
   15c20:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3599
        EEPROM.write(my_display_auto_shutdown, 60);
   15c24:	6c e3       	ldi	r22, 0x3C	; 60
   15c26:	80 e6       	ldi	r24, 0x60	; 96
   15c28:	90 e0       	ldi	r25, 0x00	; 0
   15c2a:	0e 94 b0 6b 	call	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   15c2e:	68 cd       	rjmp	.-1328   	; 0x15700 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3603
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   15c30:	63 e1       	ldi	r22, 0x13	; 19
   15c32:	73 e8       	ldi	r23, 0x83	; 131
   15c34:	ce 01       	movw	r24, r28
   15c36:	88 5b       	subi	r24, 0xB8	; 184
   15c38:	9f 4f       	sbci	r25, 0xFF	; 255
   15c3a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15c3e:	ee 24       	eor	r14, r14
   15c40:	ea 94       	dec	r14
   15c42:	fe 2c       	mov	r15, r14
   15c44:	00 ee       	ldi	r16, 0xE0	; 224
   15c46:	17 e0       	ldi	r17, 0x07	; 7
   15c48:	21 e0       	ldi	r18, 0x01	; 1
   15c4a:	46 e4       	ldi	r20, 0x46	; 70
   15c4c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   15c4e:	6e e1       	ldi	r22, 0x1E	; 30
   15c50:	70 e0       	ldi	r23, 0x00	; 0
   15c52:	66 c0       	rjmp	.+204    	; 0x15d20 <setup+0xc92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
   15c54:	c8 5c       	subi	r28, 0xC8	; 200
   15c56:	de 4f       	sbci	r29, 0xFE	; 254
   15c58:	f8 81       	ld	r31, Y
   15c5a:	c8 53       	subi	r28, 0x38	; 56
   15c5c:	d1 40       	sbci	r29, 0x01	; 1
   15c5e:	f3 30       	cpi	r31, 0x03	; 3
   15c60:	09 f0       	breq	.+2      	; 0x15c64 <setup+0xbd6>
   15c62:	79 c0       	rjmp	.+242    	; 0x15d56 <setup+0xcc8>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   15c64:	61 e0       	ldi	r22, 0x01	; 1
   15c66:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   15c6a:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   15c6e:	61 e0       	ldi	r22, 0x01	; 1
   15c70:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   15c74:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   15c78:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   15c7c:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   15c80:	0e 94 3b 64 	call	0xc876	; 0xc876 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15c84:	60 e0       	ldi	r22, 0x00	; 0
   15c86:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   15c8a:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   15c8e:	61 e0       	ldi	r22, 0x01	; 1
   15c90:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   15c94:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   15c98:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   15c9c:	60 e4       	ldi	r22, 0x40	; 64
   15c9e:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   15ca2:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   15ca6:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   15caa:	61 e0       	ldi	r22, 0x01	; 1
   15cac:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   15cb0:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
   15cb4:	4b ea       	ldi	r20, 0xAB	; 171
   15cb6:	60 e0       	ldi	r22, 0x00	; 0
   15cb8:	70 e0       	ldi	r23, 0x00	; 0
   15cba:	cb 01       	movw	r24, r22
   15cbc:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
      if (SRAM.readByte(0) == 0xAB)
   15cc0:	60 e0       	ldi	r22, 0x00	; 0
   15cc2:	70 e0       	ldi	r23, 0x00	; 0
   15cc4:	cb 01       	movw	r24, r22
   15cc6:	0e 94 38 ba 	call	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
      {
        strcpy_P(str1, text_test_ram);
   15cca:	66 e0       	ldi	r22, 0x06	; 6
   15ccc:	73 e8       	ldi	r23, 0x83	; 131
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   15cce:	8b 3a       	cpi	r24, 0xAB	; 171
   15cd0:	69 f5       	brne	.+90     	; 0x15d2c <setup+0xc9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3615
      {
        strcpy_P(str1, text_test_ram);
   15cd2:	ce 01       	movw	r24, r28
   15cd4:	88 5b       	subi	r24, 0xB8	; 184
   15cd6:	9f 4f       	sbci	r25, 0xFF	; 255
   15cd8:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
        strcat(str1, " init ...");
   15cdc:	64 ec       	ldi	r22, 0xC4	; 196
   15cde:	76 e0       	ldi	r23, 0x06	; 6
   15ce0:	ce 01       	movw	r24, r28
   15ce2:	88 5b       	subi	r24, 0xB8	; 184
   15ce4:	9f 4f       	sbci	r25, 0xFF	; 255
   15ce6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3617
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15cea:	ee 24       	eor	r14, r14
   15cec:	ea 94       	dec	r14
   15cee:	fe 2c       	mov	r15, r14
   15cf0:	00 ee       	ldi	r16, 0xE0	; 224
   15cf2:	17 e0       	ldi	r17, 0x07	; 7
   15cf4:	21 e0       	ldi	r18, 0x01	; 1
   15cf6:	40 e5       	ldi	r20, 0x50	; 80
   15cf8:	50 e0       	ldi	r21, 0x00	; 0
   15cfa:	6e e1       	ldi	r22, 0x1E	; 30
   15cfc:	70 e0       	ldi	r23, 0x00	; 0
   15cfe:	ce 01       	movw	r24, r28
   15d00:	88 5b       	subi	r24, 0xB8	; 184
   15d02:	9f 4f       	sbci	r25, 0xFF	; 255
   15d04:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3630
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   15d08:	63 e0       	ldi	r22, 0x03	; 3
   15d0a:	73 e8       	ldi	r23, 0x83	; 131
   15d0c:	ce 01       	movw	r24, r28
   15d0e:	88 5b       	subi	r24, 0xB8	; 184
   15d10:	9f 4f       	sbci	r25, 0xFF	; 255
   15d12:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15d16:	21 e0       	ldi	r18, 0x01	; 1
   15d18:	40 e5       	ldi	r20, 0x50	; 80
   15d1a:	50 e0       	ldi	r21, 0x00	; 0
   15d1c:	62 ed       	ldi	r22, 0xD2	; 210
   15d1e:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   15d20:	ce 01       	movw	r24, r28
   15d22:	88 5b       	subi	r24, 0xB8	; 184
   15d24:	9f 4f       	sbci	r25, 0xFF	; 255
   15d26:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15d2a:	ea cc       	rjmp	.-1580   	; 0x15700 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   15d2c:	ce 01       	movw	r24, r28
   15d2e:	88 5b       	subi	r24, 0xB8	; 184
   15d30:	9f 4f       	sbci	r25, 0xFF	; 255
   15d32:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
        strcat_P(str1, text_err);
   15d36:	62 e2       	ldi	r22, 0x22	; 34
   15d38:	74 e8       	ldi	r23, 0x84	; 132
   15d3a:	ce 01       	movw	r24, r28
   15d3c:	88 5b       	subi	r24, 0xB8	; 184
   15d3e:	9f 4f       	sbci	r25, 0xFF	; 255
   15d40:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   15d44:	ee 24       	eor	r14, r14
   15d46:	ea 94       	dec	r14
   15d48:	fe 2c       	mov	r15, r14
   15d4a:	00 e0       	ldi	r16, 0x00	; 0
   15d4c:	18 ef       	ldi	r17, 0xF8	; 248
   15d4e:	21 e0       	ldi	r18, 0x01	; 1
   15d50:	40 e5       	ldi	r20, 0x50	; 80
   15d52:	50 e0       	ldi	r21, 0x00	; 0
   15d54:	7c cf       	rjmp	.-264    	; 0x15c4e <setup+0xbc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3642
      }
    }
    ///
    /// init EEPROMKY
    if (init == 4)
   15d56:	c8 5c       	subi	r28, 0xC8	; 200
   15d58:	de 4f       	sbci	r29, 0xFE	; 254
   15d5a:	28 81       	ld	r18, Y
   15d5c:	c8 53       	subi	r28, 0x38	; 56
   15d5e:	d1 40       	sbci	r29, 0x01	; 1
   15d60:	24 30       	cpi	r18, 0x04	; 4
   15d62:	09 f0       	breq	.+2      	; 0x15d66 <setup+0xcd8>
   15d64:	c6 c5       	rjmp	.+2956   	; 0x168f2 <setup+0x1864>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   15d66:	61 e0       	ldi	r22, 0x01	; 1
   15d68:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <SROM+0xa>
   15d6c:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
   15d70:	61 e0       	ldi	r22, 0x01	; 1
   15d72:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <SROM+0xa>
   15d76:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
   15d7a:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   15d7e:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   15d82:	0e 94 3b 64 	call	0xc876	; 0xc876 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
   15d86:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <SROM+0x4>
   15d8a:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <SROM+0x5>
   15d8e:	a0 91 0d 0e 	lds	r26, 0x0E0D	; 0x800e0d <SROM+0x6>
   15d92:	b0 91 0e 0e 	lds	r27, 0x0E0E	; 0x800e0e <SROM+0x7>
   15d96:	89 2b       	or	r24, r25
   15d98:	8a 2b       	or	r24, r26
   15d9a:	8b 2b       	or	r24, r27
   15d9c:	a9 f0       	breq	.+42     	; 0x15dc8 <setup+0xd3a>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   15d9e:	0e 94 47 d6 	call	0x1ac8e	; 0x1ac8e <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   15da2:	80 fd       	sbrc	r24, 0
   15da4:	fc cf       	rjmp	.-8      	; 0x15d9e <setup+0xd10>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
   15da6:	86 e0       	ldi	r24, 0x06	; 6
   15da8:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
   15dac:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   15db0:	82 e0       	ldi	r24, 0x02	; 2
   15db2:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   15db6:	6a eb       	ldi	r22, 0xBA	; 186
   15db8:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   15dbc:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   15dc0:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   15dc4:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   15dc8:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <SROM+0x4>
   15dcc:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <SROM+0x5>
   15dd0:	a0 91 0d 0e 	lds	r26, 0x0E0D	; 0x800e0d <SROM+0x6>
   15dd4:	b0 91 0e 0e 	lds	r27, 0x0E0E	; 0x800e0e <SROM+0x7>
   15dd8:	89 2b       	or	r24, r25
   15dda:	8a 2b       	or	r24, r26
   15ddc:	8b 2b       	or	r24, r27
   15dde:	61 f1       	breq	.+88     	; 0x15e38 <setup+0xdaa>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   15de0:	0e 94 47 d6 	call	0x1ac8e	; 0x1ac8e <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   15de4:	80 fd       	sbrc	r24, 0
   15de6:	fc cf       	rjmp	.-8      	; 0x15de0 <setup+0xd52>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15de8:	83 e0       	ldi	r24, 0x03	; 3
   15dea:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   15dee:	6f ef       	ldi	r22, 0xFF	; 255
   15df0:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   15df4:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   15df8:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
   15dfc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   15dfe:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   15e02:	1a 3b       	cpi	r17, 0xBA	; 186
   15e04:	c9 f4       	brne	.+50     	; 0x15e38 <setup+0xdaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
      {
        strcpy_P(str1, text_test_eeprom);
   15e06:	63 ef       	ldi	r22, 0xF3	; 243
   15e08:	72 e8       	ldi	r23, 0x82	; 130
   15e0a:	ce 01       	movw	r24, r28
   15e0c:	88 5b       	subi	r24, 0xB8	; 184
   15e0e:	9f 4f       	sbci	r25, 0xFF	; 255
   15e10:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3649
        strcat_P(str1, text_ok);
   15e14:	63 e0       	ldi	r22, 0x03	; 3
   15e16:	73 e8       	ldi	r23, 0x83	; 131
   15e18:	ce 01       	movw	r24, r28
   15e1a:	88 5b       	subi	r24, 0xB8	; 184
   15e1c:	9f 4f       	sbci	r25, 0xFF	; 255
   15e1e:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15e22:	ee 24       	eor	r14, r14
   15e24:	ea 94       	dec	r14
   15e26:	fe 2c       	mov	r15, r14
   15e28:	00 ee       	ldi	r16, 0xE0	; 224
   15e2a:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   15e2c:	21 e0       	ldi	r18, 0x01	; 1
   15e2e:	4a e5       	ldi	r20, 0x5A	; 90
   15e30:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15e32:	6e e1       	ldi	r22, 0x1E	; 30
   15e34:	70 e0       	ldi	r23, 0x00	; 0
   15e36:	75 c2       	rjmp	.+1258   	; 0x16322 <setup+0x1294>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   15e38:	63 ef       	ldi	r22, 0xF3	; 243
   15e3a:	72 e8       	ldi	r23, 0x82	; 130
   15e3c:	ce 01       	movw	r24, r28
   15e3e:	88 5b       	subi	r24, 0xB8	; 184
   15e40:	9f 4f       	sbci	r25, 0xFF	; 255
   15e42:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3655
        strcat_P(str1, text_err);
   15e46:	62 e2       	ldi	r22, 0x22	; 34
   15e48:	74 e8       	ldi	r23, 0x84	; 132
   15e4a:	ce 01       	movw	r24, r28
   15e4c:	88 5b       	subi	r24, 0xB8	; 184
   15e4e:	9f 4f       	sbci	r25, 0xFF	; 255
   15e50:	0e 94 7a f1 	call	0x1e2f4	; 0x1e2f4 <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   15e54:	ee 24       	eor	r14, r14
   15e56:	ea 94       	dec	r14
   15e58:	fe 2c       	mov	r15, r14
   15e5a:	00 e0       	ldi	r16, 0x00	; 0
   15e5c:	18 ef       	ldi	r17, 0xF8	; 248
   15e5e:	e6 cf       	rjmp	.-52     	; 0x15e2c <setup+0xd9e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3663
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   15e60:	61 ee       	ldi	r22, 0xE1	; 225
   15e62:	72 e8       	ldi	r23, 0x82	; 130
   15e64:	ce 01       	movw	r24, r28
   15e66:	88 5b       	subi	r24, 0xB8	; 184
   15e68:	9f 4f       	sbci	r25, 0xFF	; 255
   15e6a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3664
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15e6e:	ee 24       	eor	r14, r14
   15e70:	ea 94       	dec	r14
   15e72:	fe 2c       	mov	r15, r14
   15e74:	00 ee       	ldi	r16, 0xE0	; 224
   15e76:	17 e0       	ldi	r17, 0x07	; 7
   15e78:	21 e0       	ldi	r18, 0x01	; 1
   15e7a:	44 e6       	ldi	r20, 0x64	; 100
   15e7c:	50 e0       	ldi	r21, 0x00	; 0
   15e7e:	6e e1       	ldi	r22, 0x1E	; 30
   15e80:	70 e0       	ldi	r23, 0x00	; 0
   15e82:	ce 01       	movw	r24, r28
   15e84:	88 5b       	subi	r24, 0xB8	; 184
   15e86:	9f 4f       	sbci	r25, 0xFF	; 255
   15e88:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15e8c:	05 eb       	ldi	r16, 0xB5	; 181
   15e8e:	e0 2e       	mov	r14, r16
   15e90:	0d e0       	ldi	r16, 0x0D	; 13
   15e92:	f0 2e       	mov	r15, r16
   15e94:	0e e6       	ldi	r16, 0x6E	; 110
   15e96:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
   15e98:	c8 01       	movw	r24, r16
   15e9a:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15e9e:	d7 01       	movw	r26, r14
   15ea0:	8d 93       	st	X+, r24
   15ea2:	7d 01       	movw	r14, r26
   15ea4:	0f 5f       	subi	r16, 0xFF	; 255
   15ea6:	1f 4f       	sbci	r17, 0xFF	; 255
   15ea8:	04 37       	cpi	r16, 0x74	; 116
   15eaa:	11 05       	cpc	r17, r1
   15eac:	a9 f7       	brne	.-22     	; 0x15e98 <setup+0xe0a>
   15eae:	bb eb       	ldi	r27, 0xBB	; 187
   15eb0:	eb 2e       	mov	r14, r27
   15eb2:	bd e0       	ldi	r27, 0x0D	; 13
   15eb4:	fb 2e       	mov	r15, r27
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
   15eb6:	c8 01       	movw	r24, r16
   15eb8:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15ebc:	f7 01       	movw	r30, r14
   15ebe:	81 93       	st	Z+, r24
   15ec0:	7f 01       	movw	r14, r30
   15ec2:	0f 5f       	subi	r16, 0xFF	; 255
   15ec4:	1f 4f       	sbci	r17, 0xFF	; 255
   15ec6:	08 37       	cpi	r16, 0x78	; 120
   15ec8:	11 05       	cpc	r17, r1
   15eca:	a9 f7       	brne	.-22     	; 0x15eb6 <setup+0xe28>
   15ecc:	af eb       	ldi	r26, 0xBF	; 191
   15ece:	ea 2e       	mov	r14, r26
   15ed0:	ad e0       	ldi	r26, 0x0D	; 13
   15ed2:	fa 2e       	mov	r15, r26
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
   15ed4:	c8 01       	movw	r24, r16
   15ed6:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15eda:	d7 01       	movw	r26, r14
   15edc:	8d 93       	st	X+, r24
   15ede:	7d 01       	movw	r14, r26
   15ee0:	0f 5f       	subi	r16, 0xFF	; 255
   15ee2:	1f 4f       	sbci	r17, 0xFF	; 255
   15ee4:	0c 37       	cpi	r16, 0x7C	; 124
   15ee6:	11 05       	cpc	r17, r1
   15ee8:	a9 f7       	brne	.-22     	; 0x15ed4 <setup+0xe46>
   15eea:	e7 ec       	ldi	r30, 0xC7	; 199
   15eec:	ce 2e       	mov	r12, r30
   15eee:	ed e0       	ldi	r30, 0x0D	; 13
   15ef0:	de 2e       	mov	r13, r30
   15ef2:	f0 e8       	ldi	r31, 0x80	; 128
   15ef4:	ef 2e       	mov	r14, r31
   15ef6:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
   15ef8:	c7 01       	movw	r24, r14
   15efa:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15efe:	f6 01       	movw	r30, r12
   15f00:	81 93       	st	Z+, r24
   15f02:	6f 01       	movw	r12, r30
   15f04:	ff ef       	ldi	r31, 0xFF	; 255
   15f06:	ef 1a       	sub	r14, r31
   15f08:	ff 0a       	sbc	r15, r31
   15f0a:	24 e8       	ldi	r18, 0x84	; 132
   15f0c:	e2 16       	cp	r14, r18
   15f0e:	f1 04       	cpc	r15, r1
   15f10:	99 f7       	brne	.-26     	; 0x15ef8 <setup+0xe6a>
   15f12:	73 ec       	ldi	r23, 0xC3	; 195
   15f14:	c7 2e       	mov	r12, r23
   15f16:	7d e0       	ldi	r23, 0x0D	; 13
   15f18:	d7 2e       	mov	r13, r23
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
   15f1a:	c8 01       	movw	r24, r16
   15f1c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15f20:	d6 01       	movw	r26, r12
   15f22:	8d 93       	st	X+, r24
   15f24:	6d 01       	movw	r12, r26
   15f26:	0f 5f       	subi	r16, 0xFF	; 255
   15f28:	1f 4f       	sbci	r17, 0xFF	; 255
   15f2a:	00 38       	cpi	r16, 0x80	; 128
   15f2c:	11 05       	cpc	r17, r1
   15f2e:	a9 f7       	brne	.-22     	; 0x15f1a <setup+0xe8c>
   15f30:	6b ec       	ldi	r22, 0xCB	; 203
   15f32:	c6 2e       	mov	r12, r22
   15f34:	6d e0       	ldi	r22, 0x0D	; 13
   15f36:	d6 2e       	mov	r13, r22
   15f38:	04 e6       	ldi	r16, 0x64	; 100
   15f3a:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
   15f3c:	c8 01       	movw	r24, r16
   15f3e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15f42:	f6 01       	movw	r30, r12
   15f44:	81 93       	st	Z+, r24
   15f46:	6f 01       	movw	r12, r30
   15f48:	0f 5f       	subi	r16, 0xFF	; 255
   15f4a:	1f 4f       	sbci	r17, 0xFF	; 255
   15f4c:	0d 36       	cpi	r16, 0x6D	; 109
   15f4e:	11 05       	cpc	r17, r1
   15f50:	a9 f7       	brne	.-22     	; 0x15f3c <setup+0xeae>
   15f52:	05 ed       	ldi	r16, 0xD5	; 213
   15f54:	1d e0       	ldi	r17, 0x0D	; 13
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
   15f56:	c7 01       	movw	r24, r14
   15f58:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15f5c:	d8 01       	movw	r26, r16
   15f5e:	8d 93       	st	X+, r24
   15f60:	8d 01       	movw	r16, r26
   15f62:	bf ef       	ldi	r27, 0xFF	; 255
   15f64:	eb 1a       	sub	r14, r27
   15f66:	fb 0a       	sbc	r15, r27
   15f68:	e8 e8       	ldi	r30, 0x88	; 136
   15f6a:	ee 16       	cp	r14, r30
   15f6c:	f1 04       	cpc	r15, r1
   15f6e:	99 f7       	brne	.-26     	; 0x15f56 <setup+0xec8>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
   15f70:	88 e8       	ldi	r24, 0x88	; 136
   15f72:	90 e0       	ldi	r25, 0x00	; 0
   15f74:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15f78:	18 2f       	mov	r17, r24
   15f7a:	89 e8       	ldi	r24, 0x89	; 137
   15f7c:	90 e0       	ldi	r25, 0x00	; 0
   15f7e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15f82:	21 2f       	mov	r18, r17
   15f84:	30 e0       	ldi	r19, 0x00	; 0
   15f86:	32 2f       	mov	r19, r18
   15f88:	22 27       	eor	r18, r18
   15f8a:	82 0f       	add	r24, r18
   15f8c:	93 2f       	mov	r25, r19
   15f8e:	91 1d       	adc	r25, r1
   15f90:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <device+0x25>
   15f94:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <device+0x24>
   15f98:	5b ed       	ldi	r21, 0xDB	; 219
   15f9a:	e5 2e       	mov	r14, r21
   15f9c:	5d e0       	ldi	r21, 0x0D	; 13
   15f9e:	f5 2e       	mov	r15, r21
   15fa0:	0a e8       	ldi	r16, 0x8A	; 138
   15fa2:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
   15fa4:	c8 01       	movw	r24, r16
   15fa6:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15faa:	d7 01       	movw	r26, r14
   15fac:	8d 93       	st	X+, r24
   15fae:	7d 01       	movw	r14, r26
   15fb0:	0f 5f       	subi	r16, 0xFF	; 255
   15fb2:	1f 4f       	sbci	r17, 0xFF	; 255
   15fb4:	0e 39       	cpi	r16, 0x9E	; 158
   15fb6:	11 05       	cpc	r17, r1
   15fb8:	a9 f7       	brne	.-22     	; 0x15fa4 <setup+0xf16>
   15fba:	9f ee       	ldi	r25, 0xEF	; 239
   15fbc:	e9 2e       	mov	r14, r25
   15fbe:	9d e0       	ldi	r25, 0x0D	; 13
   15fc0:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
   15fc2:	c8 01       	movw	r24, r16
   15fc4:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15fc8:	f7 01       	movw	r30, r14
   15fca:	81 93       	st	Z+, r24
   15fcc:	7f 01       	movw	r14, r30
   15fce:	0f 5f       	subi	r16, 0xFF	; 255
   15fd0:	1f 4f       	sbci	r17, 0xFF	; 255
   15fd2:	02 3b       	cpi	r16, 0xB2	; 178
   15fd4:	11 05       	cpc	r17, r1
   15fd6:	a9 f7       	brne	.-22     	; 0x15fc2 <setup+0xf34>
   15fd8:	83 e0       	ldi	r24, 0x03	; 3
   15fda:	e8 2e       	mov	r14, r24
   15fdc:	8e e0       	ldi	r24, 0x0E	; 14
   15fde:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
   15fe0:	c8 01       	movw	r24, r16
   15fe2:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15fe6:	d7 01       	movw	r26, r14
   15fe8:	8d 93       	st	X+, r24
   15fea:	7d 01       	movw	r14, r26
   15fec:	0f 5f       	subi	r16, 0xFF	; 255
   15fee:	1f 4f       	sbci	r17, 0xFF	; 255
   15ff0:	06 3b       	cpi	r16, 0xB6	; 182
   15ff2:	11 05       	cpc	r17, r1
   15ff4:	a9 f7       	brne	.-22     	; 0x15fe0 <setup+0xf52>
   15ff6:	4a e6       	ldi	r20, 0x6A	; 106
   15ff8:	5b e0       	ldi	r21, 0x0B	; 11
   15ffa:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   15ffc:	60 e2       	ldi	r22, 0x20	; 32
   15ffe:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
   16000:	90 e0       	ldi	r25, 0x00	; 0
   16002:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
   16004:	fc 01       	movw	r30, r24
   16006:	ee 0f       	add	r30, r30
   16008:	ff 1f       	adc	r31, r31
   1600a:	e4 0f       	add	r30, r20
   1600c:	f5 1f       	adc	r31, r21
   1600e:	70 87       	std	Z+8, r23	; 0x08
   16010:	67 83       	std	Z+7, r22	; 0x07
   16012:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3669
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   16014:	8a 30       	cpi	r24, 0x0A	; 10
   16016:	91 05       	cpc	r25, r1
   16018:	a9 f7       	brne	.-22     	; 0x16004 <setup+0xf76>
   1601a:	21 50       	subi	r18, 0x01	; 1
   1601c:	42 5e       	subi	r20, 0xE2	; 226
   1601e:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3668
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   16020:	21 11       	cpse	r18, r1
   16022:	ee cf       	rjmp	.-36     	; 0x16000 <setup+0xf72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3673
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   16024:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <last_output_update>
   16028:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <last_output_update+0x1>
   1602c:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <last_output_update+0x2>
   16030:	10 92 27 0b 	sts	0x0B27, r1	; 0x800b27 <last_output_update+0x3>
   16034:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <last_output_update+0x4>
   16038:	b7 e6       	ldi	r27, 0x67	; 103
   1603a:	cb 2e       	mov	r12, r27
   1603c:	d1 2c       	mov	r13, r1
   1603e:	e1 2c       	mov	r14, r1
   16040:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   16042:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3677
      {
        remote_tds_set_data(idx, 0);
   16044:	70 e0       	ldi	r23, 0x00	; 0
   16046:	60 e0       	ldi	r22, 0x00	; 0
   16048:	81 2f       	mov	r24, r17
   1604a:	0e 94 89 53 	call	0xa712	; 0xa712 <remote_tds_set_data(unsigned char, int)>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1915
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   1604e:	4f ef       	ldi	r20, 0xFF	; 255
   16050:	c7 01       	movw	r24, r14
   16052:	b6 01       	movw	r22, r12
   16054:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_set_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1960
}
uint8_t remote_tds_set_last_update(uint8_t idx, uint8_t value)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), value);
   16058:	c7 01       	movw	r24, r14
   1605a:	b6 01       	movw	r22, r12
   1605c:	61 50       	subi	r22, 0x01	; 1
   1605e:	71 09       	sbc	r23, r1
   16060:	81 09       	sbc	r24, r1
   16062:	91 09       	sbc	r25, r1
   16064:	4f ef       	ldi	r20, 0xFF	; 255
   16066:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3675
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1606a:	1f 5f       	subi	r17, 0xFF	; 255
   1606c:	b4 e0       	ldi	r27, 0x04	; 4
   1606e:	cb 0e       	add	r12, r27
   16070:	d1 1c       	adc	r13, r1
   16072:	e1 1c       	adc	r14, r1
   16074:	f1 1c       	adc	r15, r1
   16076:	1a 30       	cpi	r17, 0x0A	; 10
   16078:	29 f7       	brne	.-54     	; 0x16044 <setup+0xfb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3464
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
   1607a:	c8 5c       	subi	r28, 0xC8	; 200
   1607c:	de 4f       	sbci	r29, 0xFE	; 254
   1607e:	e8 81       	ld	r30, Y
   16080:	c8 53       	subi	r28, 0x38	; 56
   16082:	d1 40       	sbci	r29, 0x01	; 1
   16084:	ef 5f       	subi	r30, 0xFF	; 255
   16086:	c8 5c       	subi	r28, 0xC8	; 200
   16088:	de 4f       	sbci	r29, 0xFE	; 254
   1608a:	e8 83       	st	Y, r30
   1608c:	c8 53       	subi	r28, 0x38	; 56
   1608e:	d1 40       	sbci	r29, 0x01	; 1
   16090:	c7 5c       	subi	r28, 0xC7	; 199
   16092:	de 4f       	sbci	r29, 0xFE	; 254
   16094:	88 81       	ld	r24, Y
   16096:	99 81       	ldd	r25, Y+1	; 0x01
   16098:	c9 53       	subi	r28, 0x39	; 57
   1609a:	d1 40       	sbci	r29, 0x01	; 1
   1609c:	0f 96       	adiw	r24, 0x0f	; 15
   1609e:	c7 5c       	subi	r28, 0xC7	; 199
   160a0:	de 4f       	sbci	r29, 0xFE	; 254
   160a2:	99 83       	std	Y+1, r25	; 0x01
   160a4:	88 83       	st	Y, r24
   160a6:	c9 53       	subi	r28, 0x39	; 57
   160a8:	d1 40       	sbci	r29, 0x01	; 1
   160aa:	e0 31       	cpi	r30, 0x10	; 16
   160ac:	09 f0       	breq	.+2      	; 0x160b0 <setup+0x1022>
   160ae:	db c9       	rjmp	.-3146   	; 0x15466 <setup+0x3d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   160b0:	64 ef       	ldi	r22, 0xF4	; 244
   160b2:	71 e0       	ldi	r23, 0x01	; 1
   160b4:	80 e0       	ldi	r24, 0x00	; 0
   160b6:	90 e0       	ldi	r25, 0x00	; 0
   160b8:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
  MenuPrepareStyle();
   160bc:	0e 94 af a7 	call	0x14f5e	; 0x14f5e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
  draw_menu(true, 0, 0, 0);
   160c0:	50 e0       	ldi	r21, 0x00	; 0
   160c2:	40 e0       	ldi	r20, 0x00	; 0
   160c4:	70 e0       	ldi	r23, 0x00	; 0
   160c6:	60 e0       	ldi	r22, 0x00	; 0
   160c8:	81 e0       	ldi	r24, 0x01	; 1
   160ca:	0e 94 df c0 	call	0x181be	; 0x181be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
  a2d_run_now = 1;
   160ce:	81 e0       	ldi	r24, 0x01	; 1
   160d0:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882

  milis_10s = millis();
   160d4:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   160d8:	60 93 47 0c 	sts	0x0C47, r22	; 0x800c47 <milis_10s>
   160dc:	70 93 48 0c 	sts	0x0C48, r23	; 0x800c48 <milis_10s+0x1>
   160e0:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <milis_10s+0x2>
   160e4:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3883
  milis_1s = millis();
   160e8:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   160ec:	60 93 38 0c 	sts	0x0C38, r22	; 0x800c38 <milis_1s>
   160f0:	70 93 39 0c 	sts	0x0C39, r23	; 0x800c39 <milis_1s+0x1>
   160f4:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <milis_1s+0x2>
   160f8:	90 93 3b 0c 	sts	0x0C3B, r25	; 0x800c3b <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
  milis_05s = millis();
   160fc:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   16100:	60 93 2e 0c 	sts	0x0C2E, r22	; 0x800c2e <milis_05s>
   16104:	70 93 2f 0c 	sts	0x0C2F, r23	; 0x800c2f <milis_05s+0x1>
   16108:	80 93 30 0c 	sts	0x0C30, r24	; 0x800c30 <milis_05s+0x2>
   1610c:	90 93 31 0c 	sts	0x0C31, r25	; 0x800c31 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3885
  milis_005s = millis();
   16110:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   16114:	60 93 28 0c 	sts	0x0C28, r22	; 0x800c28 <milis_005s>
   16118:	70 93 29 0c 	sts	0x0C29, r23	; 0x800c29 <milis_005s+0x1>
   1611c:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <milis_005s+0x2>
   16120:	90 93 2b 0c 	sts	0x0C2B, r25	; 0x800c2b <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3887

}
   16124:	c0 5c       	subi	r28, 0xC0	; 192
   16126:	de 4f       	sbci	r29, 0xFE	; 254
   16128:	0f b6       	in	r0, 0x3f	; 63
   1612a:	f8 94       	cli
   1612c:	de bf       	out	0x3e, r29	; 62
   1612e:	0f be       	out	0x3f, r0	; 63
   16130:	cd bf       	out	0x3d, r28	; 61
   16132:	df 91       	pop	r29
   16134:	cf 91       	pop	r28
   16136:	1f 91       	pop	r17
   16138:	0f 91       	pop	r16
   1613a:	ff 90       	pop	r15
   1613c:	ef 90       	pop	r14
   1613e:	df 90       	pop	r13
   16140:	cf 90       	pop	r12
   16142:	bf 90       	pop	r11
   16144:	af 90       	pop	r10
   16146:	9f 90       	pop	r9
   16148:	8f 90       	pop	r8
   1614a:	7f 90       	pop	r7
   1614c:	6f 90       	pop	r6
   1614e:	5f 90       	pop	r5
   16150:	4f 90       	pop	r4
   16152:	3f 90       	pop	r3
   16154:	2f 90       	pop	r2
   16156:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3686
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   16158:	65 ed       	ldi	r22, 0xD5	; 213
   1615a:	72 e8       	ldi	r23, 0x82	; 130
   1615c:	ce 01       	movw	r24, r28
   1615e:	88 5b       	subi	r24, 0xB8	; 184
   16160:	9f 4f       	sbci	r25, 0xFF	; 255
   16162:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16166:	ee 24       	eor	r14, r14
   16168:	ea 94       	dec	r14
   1616a:	fe 2c       	mov	r15, r14
   1616c:	00 ee       	ldi	r16, 0xE0	; 224
   1616e:	17 e0       	ldi	r17, 0x07	; 7
   16170:	21 e0       	ldi	r18, 0x01	; 1
   16172:	4e e6       	ldi	r20, 0x6E	; 110
   16174:	50 e0       	ldi	r21, 0x00	; 0
   16176:	6e e1       	ldi	r22, 0x1E	; 30
   16178:	70 e0       	ldi	r23, 0x00	; 0
   1617a:	ce 01       	movw	r24, r28
   1617c:	88 5b       	subi	r24, 0xB8	; 184
   1617e:	9f 4f       	sbci	r25, 0xFF	; 255
   16180:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   16184:	20 91 69 0f 	lds	r18, 0x0F69	; 0x800f69 <my_lcd+0x14>
   16188:	30 91 6a 0f 	lds	r19, 0x0F6A	; 0x800f6a <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   1618c:	40 91 67 0f 	lds	r20, 0x0F67	; 0x800f67 <my_lcd+0x12>
   16190:	50 91 68 0f 	lds	r21, 0x0F68	; 0x800f68 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   16194:	90 91 6b 0f 	lds	r25, 0x0F6B	; 0x800f6b <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
  return onoff_mode;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   16198:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <my_touch+0x17>
   1619c:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <my_touch+0x18>
   161a0:	80 81       	ld	r24, Z
   161a2:	60 91 52 0f 	lds	r22, 0x0F52	; 0x800f52 <my_touch+0x20>
   161a6:	86 2b       	or	r24, r22
   161a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:94
	TCLK_HIGH; 
   161aa:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   161ae:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   161b2:	80 81       	ld	r24, Z
   161b4:	60 91 50 0f 	lds	r22, 0x0F50	; 0x800f50 <my_touch+0x1e>
   161b8:	86 2b       	or	r24, r22
   161ba:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	TCS_HIGH;
   161bc:	e0 91 43 0f 	lds	r30, 0x0F43	; 0x800f43 <my_touch+0x11>
   161c0:	f0 91 44 0f 	lds	r31, 0x0F44	; 0x800f44 <my_touch+0x12>
   161c4:	80 81       	ld	r24, Z
   161c6:	60 91 4f 0f 	lds	r22, 0x0F4F	; 0x800f4f <my_touch+0x1d>
   161ca:	86 2b       	or	r24, r22
   161cc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	SDCS_HIGH;
   161ce:	e0 91 4d 0f 	lds	r30, 0x0F4D	; 0x800f4d <my_touch+0x1b>
   161d2:	f0 91 4e 0f 	lds	r31, 0x0F4E	; 0x800f4e <my_touch+0x1c>
   161d6:	80 81       	ld	r24, Z
   161d8:	60 91 54 0f 	lds	r22, 0x0F54	; 0x800f54 <my_touch+0x22>
   161dc:	86 2b       	or	r24, r22
   161de:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	wid = w;
   161e0:	50 93 3b 0f 	sts	0x0F3B, r21	; 0x800f3b <my_touch+0x9>
   161e4:	40 93 3a 0f 	sts	0x0F3A, r20	; 0x800f3a <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	heig = h;	
   161e8:	30 93 3d 0f 	sts	0x0F3D, r19	; 0x800f3d <my_touch+0xb>
   161ec:	20 93 3c 0f 	sts	0x0F3C, r18	; 0x800f3c <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:420
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   161f0:	90 93 40 0f 	sts	0x0F40, r25	; 0x800f40 <my_touch+0xe>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	TCS_HIGH;
	SDCS_HIGH;
	wid = w;
	heig = h;	
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
   161f4:	8a e0       	ldi	r24, 0x0A	; 10
   161f6:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:410
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
   161fa:	83 e0       	ldi	r24, 0x03	; 3
   161fc:	80 93 3f 0f 	sts	0x0F3F, r24	; 0x800f3f <my_touch+0xd>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
   16200:	81 e0       	ldi	r24, 0x01	; 1
   16202:	0e 94 ca d5 	call	0x1ab94	; 0x1ab94 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   16206:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
   16208:	60 e0       	ldi	r22, 0x00	; 0
   1620a:	88 e0       	ldi	r24, 0x08	; 8
   1620c:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
        my_touch.TP_SetBacklight(i * 11);
   16210:	81 2f       	mov	r24, r17
   16212:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
        delay(100);
   16216:	64 e6       	ldi	r22, 0x64	; 100
   16218:	70 e0       	ldi	r23, 0x00	; 0
   1621a:	80 e0       	ldi	r24, 0x00	; 0
   1621c:	90 e0       	ldi	r25, 0x00	; 0
   1621e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
        digitalWrite(LED, HIGH);
   16222:	61 e0       	ldi	r22, 0x01	; 1
   16224:	88 e0       	ldi	r24, 0x08	; 8
   16226:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
        delay(100);
   1622a:	64 e6       	ldi	r22, 0x64	; 100
   1622c:	70 e0       	ldi	r23, 0x00	; 0
   1622e:	80 e0       	ldi	r24, 0x00	; 0
   16230:	90 e0       	ldi	r25, 0x00	; 0
   16232:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
   16236:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
      for (uint8_t i = 1; i < 8; i++)
   16238:	18 35       	cpi	r17, 0x58	; 88
   1623a:	31 f7       	brne	.-52     	; 0x16208 <setup+0x117a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      display_auto_shutdown = EEPROM.read(my_display_auto_shutdown);
   1623c:	80 e6       	ldi	r24, 0x60	; 96
   1623e:	90 e0       	ldi	r25, 0x00	; 0
   16240:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   16244:	80 93 33 0c 	sts	0x0C33, r24	; 0x800c33 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      brigthness_display_values = EEPROM.read(my_brightness_values);
   16248:	8e e5       	ldi	r24, 0x5E	; 94
   1624a:	90 e0       	ldi	r25, 0x00	; 0
   1624c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   16250:	18 2f       	mov	r17, r24
   16252:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3701
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
   16256:	8f e5       	ldi	r24, 0x5F	; 95
   16258:	90 e0       	ldi	r25, 0x00	; 0
   1625a:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1625e:	80 93 41 0c 	sts	0x0C41, r24	; 0x800c41 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
   16262:	81 2f       	mov	r24, r17
   16264:	88 0f       	add	r24, r24
   16266:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
   1626a:	07 cf       	rjmp	.-498    	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3727
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   1626c:	62 e2       	ldi	r22, 0x22	; 34
   1626e:	74 e8       	ldi	r23, 0x84	; 132
   16270:	ce 01       	movw	r24, r28
   16272:	88 5b       	subi	r24, 0xB8	; 184
   16274:	9f 4f       	sbci	r25, 0xFF	; 255
   16276:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3728
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1627a:	ee 24       	eor	r14, r14
   1627c:	ea 94       	dec	r14
   1627e:	fe 2c       	mov	r15, r14
   16280:	00 e0       	ldi	r16, 0x00	; 0
   16282:	18 ef       	ldi	r17, 0xF8	; 248
   16284:	21 e0       	ldi	r18, 0x01	; 1
   16286:	48 e7       	ldi	r20, 0x78	; 120
   16288:	50 e0       	ldi	r21, 0x00	; 0
   1628a:	60 ea       	ldi	r22, 0xA0	; 160
   1628c:	70 e0       	ldi	r23, 0x00	; 0
   1628e:	ce 01       	movw	r24, r28
   16290:	88 5b       	subi	r24, 0xB8	; 184
   16292:	9f 4f       	sbci	r25, 0xFF	; 255
   16294:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3729
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
   16298:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
   1629a:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
   1629e:	ed ce       	rjmp	.-550    	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   162a0:	c8 5c       	subi	r28, 0xC8	; 200
   162a2:	de 4f       	sbci	r29, 0xFE	; 254
   162a4:	e8 81       	ld	r30, Y
   162a6:	c8 53       	subi	r28, 0x38	; 56
   162a8:	d1 40       	sbci	r29, 0x01	; 1
   162aa:	e8 30       	cpi	r30, 0x08	; 8
   162ac:	09 f0       	breq	.+2      	; 0x162b0 <setup+0x1222>
   162ae:	3f c0       	rjmp	.+126    	; 0x1632e <setup+0x12a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
    {
      strcpy_P(str1, text_onewire_hledam);
   162b0:	69 eb       	ldi	r22, 0xB9	; 185
   162b2:	72 e8       	ldi	r23, 0x82	; 130
   162b4:	ce 01       	movw	r24, r28
   162b6:	88 5b       	subi	r24, 0xB8	; 184
   162b8:	9f 4f       	sbci	r25, 0xFF	; 255
   162ba:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   162be:	ee 24       	eor	r14, r14
   162c0:	ea 94       	dec	r14
   162c2:	fe 2c       	mov	r15, r14
   162c4:	00 ee       	ldi	r16, 0xE0	; 224
   162c6:	17 e0       	ldi	r17, 0x07	; 7
   162c8:	21 e0       	ldi	r18, 0x01	; 1
   162ca:	42 e8       	ldi	r20, 0x82	; 130
   162cc:	50 e0       	ldi	r21, 0x00	; 0
   162ce:	6e e1       	ldi	r22, 0x1E	; 30
   162d0:	70 e0       	ldi	r23, 0x00	; 0
   162d2:	ce 01       	movw	r24, r28
   162d4:	88 5b       	subi	r24, 0xB8	; 184
   162d6:	9f 4f       	sbci	r25, 0xFF	; 255
   162d8:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
      Global_HWwirenum = 0;
   162dc:	10 92 9c 0c 	sts	0x0C9C, r1	; 0x800c9c <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      one_hw_search_device(0);
   162e0:	0e 94 38 bc 	call	0x17870	; 0x17870 <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
      tds_update_associate();
   162e4:	0e 94 7f 76 	call	0xecfe	; 0xecfe <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      strcpy (str1, "Nalezeno: ");
   162e8:	6e ec       	ldi	r22, 0xCE	; 206
   162ea:	76 e0       	ldi	r23, 0x06	; 6
   162ec:	ce 01       	movw	r24, r28
   162ee:	88 5b       	subi	r24, 0xB8	; 184
   162f0:	9f 4f       	sbci	r25, 0xFF	; 255
   162f2:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
      itoa(Global_HWwirenum, str2, 10);
   162f6:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   162fa:	4a e0       	ldi	r20, 0x0A	; 10
   162fc:	be 01       	movw	r22, r28
   162fe:	68 57       	subi	r22, 0x78	; 120
   16300:	7f 4f       	sbci	r23, 0xFF	; 255
   16302:	90 e0       	ldi	r25, 0x00	; 0
   16304:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3743
      strcat(str1, str2);
   16308:	be 01       	movw	r22, r28
   1630a:	68 57       	subi	r22, 0x78	; 120
   1630c:	7f 4f       	sbci	r23, 0xFF	; 255
   1630e:	ce 01       	movw	r24, r28
   16310:	88 5b       	subi	r24, 0xB8	; 184
   16312:	9f 4f       	sbci	r25, 0xFF	; 255
   16314:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16318:	21 e0       	ldi	r18, 0x01	; 1
   1631a:	42 e8       	ldi	r20, 0x82	; 130
   1631c:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1631e:	60 ea       	ldi	r22, 0xA0	; 160
   16320:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16322:	ce 01       	movw	r24, r28
   16324:	88 5b       	subi	r24, 0xB8	; 184
   16326:	9f 4f       	sbci	r25, 0xFF	; 255
   16328:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   1632c:	a6 ce       	rjmp	.-692    	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   1632e:	c8 5c       	subi	r28, 0xC8	; 200
   16330:	de 4f       	sbci	r29, 0xFE	; 254
   16332:	f8 81       	ld	r31, Y
   16334:	c8 53       	subi	r28, 0x38	; 56
   16336:	d1 40       	sbci	r29, 0x01	; 1
   16338:	f9 30       	cpi	r31, 0x09	; 9
   1633a:	09 f0       	breq	.+2      	; 0x1633e <setup+0x12b0>
   1633c:	37 c3       	rjmp	.+1646   	; 0x169ac <setup+0x191e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
    {
      digitalWrite(ETH_RST, HIGH);
   1633e:	61 e0       	ldi	r22, 0x01	; 1
   16340:	86 e0       	ldi	r24, 0x06	; 6
   16342:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
      delay(10);
   16346:	6a e0       	ldi	r22, 0x0A	; 10
   16348:	70 e0       	ldi	r23, 0x00	; 0
   1634a:	80 e0       	ldi	r24, 0x00	; 0
   1634c:	90 e0       	ldi	r25, 0x00	; 0
   1634e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
      digitalWrite(ETH_RST, LOW);
   16352:	60 e0       	ldi	r22, 0x00	; 0
   16354:	86 e0       	ldi	r24, 0x06	; 6
   16356:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
      delay(10);
   1635a:	6a e0       	ldi	r22, 0x0A	; 10
   1635c:	70 e0       	ldi	r23, 0x00	; 0
   1635e:	80 e0       	ldi	r24, 0x00	; 0
   16360:	90 e0       	ldi	r25, 0x00	; 0
   16362:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
      digitalWrite(ETH_RST, HIGH);
   16366:	61 e0       	ldi	r22, 0x01	; 1
   16368:	86 e0       	ldi	r24, 0x06	; 6
   1636a:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3755
      delay(100);
   1636e:	64 e6       	ldi	r22, 0x64	; 100
   16370:	70 e0       	ldi	r23, 0x00	; 0
   16372:	80 e0       	ldi	r24, 0x00	; 0
   16374:	90 e0       	ldi	r25, 0x00	; 0
   16376:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   1637a:	8f e0       	ldi	r24, 0x0F	; 15
   1637c:	80 93 ac 0d 	sts	0x0DAC, r24	; 0x800dac <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   16380:	6f eb       	ldi	r22, 0xBF	; 191
   16382:	7d e0       	ldi	r23, 0x0D	; 13
   16384:	ce 01       	movw	r24, r28
   16386:	8e 5c       	subi	r24, 0xCE	; 206
   16388:	9e 4f       	sbci	r25, 0xFE	; 254
   1638a:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   1638e:	67 ec       	ldi	r22, 0xC7	; 199
   16390:	7d e0       	ldi	r23, 0x0D	; 13
   16392:	ce 01       	movw	r24, r28
   16394:	84 5d       	subi	r24, 0xD4	; 212
   16396:	9e 4f       	sbci	r25, 0xFE	; 254
   16398:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   1639c:	63 ec       	ldi	r22, 0xC3	; 195
   1639e:	7d e0       	ldi	r23, 0x0D	; 13
   163a0:	ce 01       	movw	r24, r28
   163a2:	8a 5d       	subi	r24, 0xDA	; 218
   163a4:	9e 4f       	sbci	r25, 0xFE	; 254
   163a6:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   163aa:	6b eb       	ldi	r22, 0xBB	; 187
   163ac:	7d e0       	ldi	r23, 0x0D	; 13
   163ae:	c3 01       	movw	r24, r6
   163b0:	0e 94 84 56 	call	0xad08	; 0xad08 <IPAddress::IPAddress(unsigned char const*)>
   163b4:	9e 01       	movw	r18, r28
   163b6:	2e 5c       	subi	r18, 0xCE	; 206
   163b8:	3e 4f       	sbci	r19, 0xFE	; 254
   163ba:	ae 01       	movw	r20, r28
   163bc:	44 5d       	subi	r20, 0xD4	; 212
   163be:	5e 4f       	sbci	r21, 0xFE	; 254
   163c0:	be 01       	movw	r22, r28
   163c2:	6a 5d       	subi	r22, 0xDA	; 218
   163c4:	7e 4f       	sbci	r23, 0xFE	; 254
   163c6:	c3 01       	movw	r24, r6
   163c8:	0e 94 47 d5 	call	0x1aa8e	; 0x1aa8e <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>
writeRCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   163cc:	42 e0       	ldi	r20, 0x02	; 2
   163ce:	64 e0       	ldi	r22, 0x04	; 4
   163d0:	8b e1       	ldi	r24, 0x1B	; 27
   163d2:	90 e0       	ldi	r25, 0x00	; 0
   163d4:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
writeRTR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   163d8:	42 e0       	ldi	r20, 0x02	; 2
   163da:	64 e0       	ldi	r22, 0x04	; 4
   163dc:	89 e1       	ldi	r24, 0x19	; 25
   163de:	90 e0       	ldi	r25, 0x00	; 0
   163e0:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   163e4:	48 e5       	ldi	r20, 0x58	; 88
   163e6:	64 e0       	ldi	r22, 0x04	; 4
   163e8:	8a e1       	ldi	r24, 0x1A	; 26
   163ea:	90 e0       	ldi	r25, 0x00	; 0
   163ec:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   163f0:	67 ea       	ldi	r22, 0xA7	; 167
   163f2:	72 e8       	ldi	r23, 0x82	; 130
   163f4:	ce 01       	movw	r24, r28
   163f6:	88 5b       	subi	r24, 0xB8	; 184
   163f8:	9f 4f       	sbci	r25, 0xFF	; 255
   163fa:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   163fe:	ee 24       	eor	r14, r14
   16400:	ea 94       	dec	r14
   16402:	fe 2c       	mov	r15, r14
   16404:	00 ee       	ldi	r16, 0xE0	; 224
   16406:	17 e0       	ldi	r17, 0x07	; 7
   16408:	21 e0       	ldi	r18, 0x01	; 1
   1640a:	4c e8       	ldi	r20, 0x8C	; 140
   1640c:	50 e0       	ldi	r21, 0x00	; 0
   1640e:	6e e1       	ldi	r22, 0x1E	; 30
   16410:	70 e0       	ldi	r23, 0x00	; 0
   16412:	ce 01       	movw	r24, r28
   16414:	88 5b       	subi	r24, 0xB8	; 184
   16416:	9f 4f       	sbci	r25, 0xFF	; 255
   16418:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
      delay(100);
   1641c:	64 e6       	ldi	r22, 0x64	; 100
   1641e:	70 e0       	ldi	r23, 0x00	; 0
   16420:	80 e0       	ldi	r24, 0x00	; 0
   16422:	90 e0       	ldi	r25, 0x00	; 0
   16424:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
      http_server.begin();
   16428:	85 ec       	ldi	r24, 0xC5	; 197
   1642a:	9f e0       	ldi	r25, 0x0F	; 15
   1642c:	0e 94 3a 8b 	call	0x11674	; 0x11674 <EthernetServer::begin()>
   16430:	24 ce       	rjmp	.-952    	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3786
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   16432:	85 e0       	ldi	r24, 0x05	; 5
   16434:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
   16438:	03 c3       	rjmp	.+1542   	; 0x16a40 <setup+0x19b2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3796
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   1643a:	63 e0       	ldi	r22, 0x03	; 3
   1643c:	73 e8       	ldi	r23, 0x83	; 131
   1643e:	ce 01       	movw	r24, r28
   16440:	88 5b       	subi	r24, 0xB8	; 184
   16442:	9f 4f       	sbci	r25, 0xFF	; 255
   16444:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16448:	ee 24       	eor	r14, r14
   1644a:	ea 94       	dec	r14
   1644c:	fe 2c       	mov	r15, r14
   1644e:	00 ee       	ldi	r16, 0xE0	; 224
   16450:	17 e0       	ldi	r17, 0x07	; 7
   16452:	2c c3       	rjmp	.+1624   	; 0x16aac <setup+0x1a1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
      }
    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   16454:	c8 5c       	subi	r28, 0xC8	; 200
   16456:	de 4f       	sbci	r29, 0xFE	; 254
   16458:	88 81       	ld	r24, Y
   1645a:	c8 53       	subi	r28, 0x38	; 56
   1645c:	d1 40       	sbci	r29, 0x01	; 1
   1645e:	8b 30       	cpi	r24, 0x0B	; 11
   16460:	81 f4       	brne	.+32     	; 0x16482 <setup+0x13f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3804
    {
      strcpy_P(str1, text_rest_rozhrani);
   16462:	68 e7       	ldi	r22, 0x78	; 120
   16464:	72 e8       	ldi	r23, 0x82	; 130
   16466:	ce 01       	movw	r24, r28
   16468:	88 5b       	subi	r24, 0xB8	; 184
   1646a:	9f 4f       	sbci	r25, 0xFF	; 255
   1646c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3805
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16470:	ee 24       	eor	r14, r14
   16472:	ea 94       	dec	r14
   16474:	fe 2c       	mov	r15, r14
   16476:	00 ee       	ldi	r16, 0xE0	; 224
   16478:	17 e0       	ldi	r17, 0x07	; 7
   1647a:	21 e0       	ldi	r18, 0x01	; 1
   1647c:	40 ea       	ldi	r20, 0xA0	; 160
   1647e:	50 e0       	ldi	r21, 0x00	; 0
   16480:	d8 cc       	rjmp	.-1616   	; 0x15e32 <setup+0xda4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
    }
    ///
    /// inicializace nrf
    if (init == 12)
   16482:	c8 5c       	subi	r28, 0xC8	; 200
   16484:	de 4f       	sbci	r29, 0xFE	; 254
   16486:	98 81       	ld	r25, Y
   16488:	c8 53       	subi	r28, 0x38	; 56
   1648a:	d1 40       	sbci	r29, 0x01	; 1
   1648c:	9c 30       	cpi	r25, 0x0C	; 12
   1648e:	09 f0       	breq	.+2      	; 0x16492 <setup+0x1404>
   16490:	11 c3       	rjmp	.+1570   	; 0x16ab4 <setup+0x1a26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3811
    {
      strcpy_P(str1, text_nrf_rozhrani);
   16492:	6b e6       	ldi	r22, 0x6B	; 107
   16494:	72 e8       	ldi	r23, 0x82	; 130
   16496:	ce 01       	movw	r24, r28
   16498:	88 5b       	subi	r24, 0xB8	; 184
   1649a:	9f 4f       	sbci	r25, 0xFF	; 255
   1649c:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3812
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   164a0:	ee 24       	eor	r14, r14
   164a2:	ea 94       	dec	r14
   164a4:	fe 2c       	mov	r15, r14
   164a6:	00 ee       	ldi	r16, 0xE0	; 224
   164a8:	17 e0       	ldi	r17, 0x07	; 7
   164aa:	21 e0       	ldi	r18, 0x01	; 1
   164ac:	4a ea       	ldi	r20, 0xAA	; 170
   164ae:	50 e0       	ldi	r21, 0x00	; 0
   164b0:	6e e1       	ldi	r22, 0x1E	; 30
   164b2:	70 e0       	ldi	r23, 0x00	; 0
   164b4:	ce 01       	movw	r24, r28
   164b6:	88 5b       	subi	r24, 0xB8	; 184
   164b8:	9f 4f       	sbci	r25, 0xFF	; 255
   164ba:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3813
      scan_rf_net_enable = 2;
   164be:	82 e0       	ldi	r24, 0x02	; 2
   164c0:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <scan_rf_net_enable>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:631
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
   164c4:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <radio>
   164c8:	90 91 ae 0f 	lds	r25, 0x0FAE	; 0x800fae <radio+0x1>
   164cc:	20 91 af 0f 	lds	r18, 0x0FAF	; 0x800faf <radio+0x2>
   164d0:	30 91 b0 0f 	lds	r19, 0x0FB0	; 0x800fb0 <radio+0x3>
   164d4:	82 17       	cp	r24, r18
   164d6:	93 07       	cpc	r25, r19
   164d8:	19 f0       	breq	.+6      	; 0x164e0 <setup+0x1452>
   164da:	61 e0       	ldi	r22, 0x01	; 1
   164dc:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:634
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
   164e0:	80 91 af 0f 	lds	r24, 0x0FAF	; 0x800faf <radio+0x2>
   164e4:	90 91 b0 0f 	lds	r25, 0x0FB0	; 0x800fb0 <radio+0x3>
   164e8:	20 91 ad 0f 	lds	r18, 0x0FAD	; 0x800fad <radio>
   164ec:	30 91 ae 0f 	lds	r19, 0x0FAE	; 0x800fae <radio+0x1>
   164f0:	28 17       	cp	r18, r24
   164f2:	39 07       	cpc	r19, r25
   164f4:	19 f0       	breq	.+6      	; 0x164fc <setup+0x146e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:636
    #endif
        pinMode(csn_pin,OUTPUT);
   164f6:	61 e0       	ldi	r22, 0x01	; 1
   164f8:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:638
    
    _SPI.begin();
   164fc:	0e 94 09 8d 	call	0x11a12	; 0x11a12 <SPIClass::begin()>
ce():
/home/saric/Arduino/libraries/RF24/RF24.cpp:80
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
   16500:	80 91 ad 0f 	lds	r24, 0x0FAD	; 0x800fad <radio>
   16504:	90 91 ae 0f 	lds	r25, 0x0FAE	; 0x800fae <radio+0x1>
   16508:	20 91 af 0f 	lds	r18, 0x0FAF	; 0x800faf <radio+0x2>
   1650c:	30 91 b0 0f 	lds	r19, 0x0FB0	; 0x800fb0 <radio+0x3>
   16510:	82 17       	cp	r24, r18
   16512:	93 07       	cpc	r25, r19
   16514:	19 f0       	breq	.+6      	; 0x1651c <setup+0x148e>
   16516:	60 e0       	ldi	r22, 0x00	; 0
   16518:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:640
    #endif
        pinMode(csn_pin,OUTPUT);
    
    _SPI.begin();
    ce(LOW);
  	csn(HIGH);
   1651c:	81 e0       	ldi	r24, 0x01	; 1
   1651e:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:652
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
   16522:	65 e0       	ldi	r22, 0x05	; 5
   16524:	70 e0       	ldi	r23, 0x00	; 0
   16526:	80 e0       	ldi	r24, 0x00	; 0
   16528:	90 e0       	ldi	r25, 0x00	; 0
   1652a:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/RF24/RF24.cpp:655

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
   1652e:	6c e0       	ldi	r22, 0x0C	; 12
   16530:	80 e0       	ldi	r24, 0x00	; 0
   16532:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setRetries():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1588
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
   16536:	6f e5       	ldi	r22, 0x5F	; 95
   16538:	84 e0       	ldi	r24, 0x04	; 4
   1653a:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1437
/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
   1653e:	86 e0       	ldi	r24, 0x06	; 6
   16540:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   16544:	88 7f       	andi	r24, 0xF8	; 248
/home/saric/Arduino/libraries/RF24/RF24.cpp:1446
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
   16546:	68 2f       	mov	r22, r24
   16548:	61 60       	ori	r22, 0x01	; 1
   1654a:	86 e0       	ldi	r24, 0x06	; 6
   1654c:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   16550:	86 e0       	ldi	r24, 0x06	; 6
   16552:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   16556:	87 7d       	andi	r24, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1476
  #endif
  if( speed == RF24_250KBPS )
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
   16558:	18 2f       	mov	r17, r24
   1655a:	10 62       	ori	r17, 0x20	; 32
/home/saric/Arduino/libraries/RF24/RF24.cpp:1480
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=450;
  #else //16Mhz Arduino
	txDelay=155;
   1655c:	8b e9       	ldi	r24, 0x9B	; 155
   1655e:	90 e0       	ldi	r25, 0x00	; 0
   16560:	a0 e0       	ldi	r26, 0x00	; 0
   16562:	b0 e0       	ldi	r27, 0x00	; 0
   16564:	80 93 bd 0f 	sts	0x0FBD, r24	; 0x800fbd <radio+0x10>
   16568:	90 93 be 0f 	sts	0x0FBE, r25	; 0x800fbe <radio+0x11>
   1656c:	a0 93 bf 0f 	sts	0x0FBF, r26	; 0x800fbf <radio+0x12>
   16570:	b0 93 c0 0f 	sts	0x0FC0, r27	; 0x800fc0 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   16574:	61 2f       	mov	r22, r17
   16576:	86 e0       	ldi	r24, 0x06	; 6
   16578:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   1657c:	86 e0       	ldi	r24, 0x06	; 6
   1657e:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   16582:	18 13       	cpse	r17, r24
   16584:	03 c0       	rjmp	.+6      	; 0x1658c <setup+0x14fe>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:669

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
  {
    p_variant = true ;
   16586:	81 e0       	ldi	r24, 0x01	; 1
   16588:	80 93 b3 0f 	sts	0x0FB3, r24	; 0x800fb3 <radio+0x6>
/home/saric/Arduino/libraries/RF24/RF24.cpp:671
  }
  setup = read_register(RF_SETUP);
   1658c:	86 e0       	ldi	r24, 0x06	; 6
   1658e:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   16592:	86 e0       	ldi	r24, 0x06	; 6
   16594:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1470
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
   16598:	45 e5       	ldi	r20, 0x55	; 85
   1659a:	50 e0       	ldi	r21, 0x00	; 0
   1659c:	60 e0       	ldi	r22, 0x00	; 0
   1659e:	70 e0       	ldi	r23, 0x00	; 0
   165a0:	40 93 bd 0f 	sts	0x0FBD, r20	; 0x800fbd <radio+0x10>
   165a4:	50 93 be 0f 	sts	0x0FBE, r21	; 0x800fbe <radio+0x11>
   165a8:	60 93 bf 0f 	sts	0x0FBF, r22	; 0x800fbf <radio+0x12>
   165ac:	70 93 c0 0f 	sts	0x0FC0, r23	; 0x800fc0 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   165b0:	68 2f       	mov	r22, r24
   165b2:	67 7d       	andi	r22, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   165b4:	86 e0       	ldi	r24, 0x06	; 6
   165b6:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   165ba:	86 e0       	ldi	r24, 0x06	; 6
   165bc:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   165c0:	80 e0       	ldi	r24, 0x00	; 0
   165c2:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
toggle_features():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1263
/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
	_SPI.transfer( ACTIVATE );
   165c6:	80 e5       	ldi	r24, 0x50	; 80
   165c8:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1264
    _SPI.transfer( 0x73 );
   165cc:	83 e7       	ldi	r24, 0x73	; 115
   165ce:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   165d2:	81 e0       	ldi	r24, 0x01	; 1
   165d4:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:686
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
   165d8:	60 e0       	ldi	r22, 0x00	; 0
   165da:	8d e1       	ldi	r24, 0x1D	; 29
   165dc:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:687
  write_register(DYNPD,0);
   165e0:	60 e0       	ldi	r22, 0x00	; 0
   165e2:	8c e1       	ldi	r24, 0x1C	; 28
   165e4:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:688
  dynamic_payloads_enabled = false;
   165e8:	10 92 b5 0f 	sts	0x0FB5, r1	; 0x800fb5 <radio+0x8>
/home/saric/Arduino/libraries/RF24/RF24.cpp:692

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   165ec:	60 e7       	ldi	r22, 0x70	; 112
   165ee:	87 e0       	ldi	r24, 0x07	; 7
   165f0:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setChannel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:458
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
   165f4:	6c e4       	ldi	r22, 0x4C	; 76
   165f6:	85 e0       	ldi	r24, 0x05	; 5
   165f8:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
flush_rx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:338

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
   165fc:	82 ee       	ldi	r24, 0xE2	; 226
   165fe:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
flush_tx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:345

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
   16602:	81 ee       	ldi	r24, 0xE1	; 225
   16604:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
powerUp():
/home/saric/Arduino/libraries/RF24/RF24.cpp:798
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
   16608:	80 e0       	ldi	r24, 0x00	; 0
   1660a:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:801

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
   1660e:	81 fd       	sbrc	r24, 1
   16610:	0b c0       	rjmp	.+22     	; 0x16628 <setup+0x159a>
/home/saric/Arduino/libraries/RF24/RF24.cpp:802
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
   16612:	68 2f       	mov	r22, r24
   16614:	62 60       	ori	r22, 0x02	; 2
   16616:	80 e0       	ldi	r24, 0x00	; 0
   16618:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:807

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
   1661c:	65 e0       	ldi	r22, 0x05	; 5
   1661e:	70 e0       	ldi	r23, 0x00	; 0
   16620:	80 e0       	ldi	r24, 0x00	; 0
   16622:	90 e0       	ldi	r25, 0x00	; 0
   16624:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:707

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
   16628:	80 e0       	ldi	r24, 0x00	; 0
   1662a:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   1662e:	68 2f       	mov	r22, r24
   16630:	6e 7f       	andi	r22, 0xFE	; 254
   16632:	80 e0       	ldi	r24, 0x00	; 0
   16634:	0e 94 67 d3 	call	0x1a6ce	; 0x1a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:708
  delay(100);
   16638:	64 e6       	ldi	r22, 0x64	; 100
   1663a:	70 e0       	ldi	r23, 0x00	; 0
   1663c:	80 e0       	ldi	r24, 0x00	; 0
   1663e:	90 e0       	ldi	r25, 0x00	; 0
   16640:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
   16644:	1a cd       	rjmp	.-1484   	; 0x1607a <setup+0xfec>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   16646:	f8 01       	movw	r30, r16
   16648:	22 a8       	ldd	r2, Z+50	; 0x32
   1664a:	33 a8       	ldd	r3, Z+51	; 0x33
   1664c:	44 a8       	ldd	r4, Z+52	; 0x34
   1664e:	55 a8       	ldd	r5, Z+53	; 0x35
   16650:	a2 01       	movw	r20, r4
   16652:	91 01       	movw	r18, r2
   16654:	c5 01       	movw	r24, r10
   16656:	b4 01       	movw	r22, r8
   16658:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
   1665c:	87 fd       	sbrc	r24, 7
   1665e:	64 c3       	rjmp	.+1736   	; 0x16d28 <setup+0x1c9a>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   16660:	21 e0       	ldi	r18, 0x01	; 1
   16662:	f8 01       	movw	r30, r16
   16664:	22 af       	std	Z+58, r18	; 0x3a
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   16666:	12 aa       	std	Z+50, r1	; 0x32
   16668:	13 aa       	std	Z+51, r1	; 0x33
   1666a:	14 aa       	std	Z+52, r1	; 0x34
   1666c:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   1666e:	80 e0       	ldi	r24, 0x00	; 0
   16670:	90 e0       	ldi	r25, 0x00	; 0
   16672:	af e7       	ldi	r26, 0x7F	; 127
   16674:	b3 e4       	ldi	r27, 0x43	; 67
   16676:	86 ab       	std	Z+54, r24	; 0x36
   16678:	97 ab       	std	Z+55, r25	; 0x37
   1667a:	a0 af       	std	Z+56, r26	; 0x38
   1667c:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   1667e:	46 8c       	ldd	r4, Z+30	; 0x1e
   16680:	57 8c       	ldd	r5, Z+31	; 0x1f
   16682:	d2 01       	movw	r26, r4
   16684:	8d 90       	ld	r8, X+
   16686:	9d 90       	ld	r9, X+
   16688:	ad 90       	ld	r10, X+
   1668a:	bc 90       	ld	r11, X
   1668c:	20 e0       	ldi	r18, 0x00	; 0
   1668e:	30 e0       	ldi	r19, 0x00	; 0
   16690:	4f e7       	ldi	r20, 0x7F	; 127
   16692:	53 e4       	ldi	r21, 0x43	; 67
   16694:	c5 01       	movw	r24, r10
   16696:	b4 01       	movw	r22, r8
   16698:	0e 94 0b fd 	call	0x1fa16	; 0x1fa16 <__gesf2>
   1669c:	18 16       	cp	r1, r24
   1669e:	14 f5       	brge	.+68     	; 0x166e4 <setup+0x1656>
   166a0:	80 e0       	ldi	r24, 0x00	; 0
   166a2:	90 e0       	ldi	r25, 0x00	; 0
   166a4:	af e7       	ldi	r26, 0x7F	; 127
   166a6:	b3 e4       	ldi	r27, 0x43	; 67
   166a8:	f2 01       	movw	r30, r4
   166aa:	80 83       	st	Z, r24
   166ac:	91 83       	std	Z+1, r25	; 0x01
   166ae:	a2 83       	std	Z+2, r26	; 0x02
   166b0:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   166b2:	f8 01       	movw	r30, r16
   166b4:	26 a0       	ldd	r2, Z+38	; 0x26
   166b6:	37 a0       	ldd	r3, Z+39	; 0x27
   166b8:	40 a4       	ldd	r4, Z+40	; 0x28
   166ba:	51 a4       	ldd	r5, Z+41	; 0x29
   166bc:	86 a8       	ldd	r8, Z+54	; 0x36
   166be:	97 a8       	ldd	r9, Z+55	; 0x37
   166c0:	a0 ac       	ldd	r10, Z+56	; 0x38
   166c2:	b1 ac       	ldd	r11, Z+57	; 0x39
   166c4:	a5 01       	movw	r20, r10
   166c6:	94 01       	movw	r18, r8
   166c8:	c2 01       	movw	r24, r4
   166ca:	b1 01       	movw	r22, r2
   166cc:	0e 94 0b fd 	call	0x1fa16	; 0x1fa16 <__gesf2>
   166d0:	18 16       	cp	r1, r24
   166d2:	c4 f4       	brge	.+48     	; 0x16704 <setup+0x1676>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   166d4:	d8 01       	movw	r26, r16
   166d6:	96 96       	adiw	r26, 0x26	; 38
   166d8:	8d 92       	st	X+, r8
   166da:	9d 92       	st	X+, r9
   166dc:	ad 92       	st	X+, r10
   166de:	bc 92       	st	X, r11
   166e0:	99 97       	sbiw	r26, 0x29	; 41
   166e2:	1d c0       	rjmp	.+58     	; 0x1671e <setup+0x1690>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   166e4:	20 e0       	ldi	r18, 0x00	; 0
   166e6:	30 e0       	ldi	r19, 0x00	; 0
   166e8:	a9 01       	movw	r20, r18
   166ea:	c5 01       	movw	r24, r10
   166ec:	b4 01       	movw	r22, r8
   166ee:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
   166f2:	87 ff       	sbrs	r24, 7
   166f4:	de cf       	rjmp	.-68     	; 0x166b2 <setup+0x1624>
   166f6:	d2 01       	movw	r26, r4
   166f8:	1d 92       	st	X+, r1
   166fa:	1d 92       	st	X+, r1
   166fc:	1d 92       	st	X+, r1
   166fe:	1c 92       	st	X, r1
   16700:	13 97       	sbiw	r26, 0x03	; 3
   16702:	d7 cf       	rjmp	.-82     	; 0x166b2 <setup+0x1624>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   16704:	f8 01       	movw	r30, r16
   16706:	82 a8       	ldd	r8, Z+50	; 0x32
   16708:	93 a8       	ldd	r9, Z+51	; 0x33
   1670a:	a4 a8       	ldd	r10, Z+52	; 0x34
   1670c:	b5 a8       	ldd	r11, Z+53	; 0x35
   1670e:	a5 01       	movw	r20, r10
   16710:	94 01       	movw	r18, r8
   16712:	c2 01       	movw	r24, r4
   16714:	b1 01       	movw	r22, r2
   16716:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
   1671a:	87 fd       	sbrc	r24, 7
   1671c:	db cf       	rjmp	.-74     	; 0x166d4 <setup+0x1646>
   1671e:	c3 5c       	subi	r28, 0xC3	; 195
   16720:	de 4f       	sbci	r29, 0xFE	; 254
   16722:	e8 81       	ld	r30, Y
   16724:	f9 81       	ldd	r31, Y+1	; 0x01
   16726:	cd 53       	subi	r28, 0x3D	; 61
   16728:	d1 40       	sbci	r29, 0x01	; 1
   1672a:	34 96       	adiw	r30, 0x04	; 4
   1672c:	c3 5c       	subi	r28, 0xC3	; 195
   1672e:	de 4f       	sbci	r29, 0xFE	; 254
   16730:	f9 83       	std	Y+1, r31	; 0x01
   16732:	e8 83       	st	Y, r30
   16734:	cd 53       	subi	r28, 0x3D	; 61
   16736:	d1 40       	sbci	r29, 0x01	; 1
   16738:	c5 5c       	subi	r28, 0xC5	; 197
   1673a:	de 4f       	sbci	r29, 0xFE	; 254
   1673c:	88 81       	ld	r24, Y
   1673e:	99 81       	ldd	r25, Y+1	; 0x01
   16740:	cb 53       	subi	r28, 0x3B	; 59
   16742:	d1 40       	sbci	r29, 0x01	; 1
   16744:	04 96       	adiw	r24, 0x04	; 4
   16746:	c5 5c       	subi	r28, 0xC5	; 197
   16748:	de 4f       	sbci	r29, 0xFE	; 254
   1674a:	99 83       	std	Y+1, r25	; 0x01
   1674c:	88 83       	st	Y, r24
   1674e:	cb 53       	subi	r28, 0x3B	; 59
   16750:	d1 40       	sbci	r29, 0x01	; 1
   16752:	94 e0       	ldi	r25, 0x04	; 4
   16754:	c9 0e       	add	r12, r25
   16756:	d1 1c       	adc	r13, r1
   16758:	a2 e0       	ldi	r26, 0x02	; 2
   1675a:	ea 0e       	add	r14, r26
   1675c:	f1 1c       	adc	r15, r1
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   1675e:	ba e0       	ldi	r27, 0x0A	; 10
   16760:	eb 16       	cp	r14, r27
   16762:	f1 04       	cpc	r15, r1
   16764:	09 f0       	breq	.+2      	; 0x16768 <setup+0x16da>
   16766:	db c1       	rjmp	.+950    	; 0x16b1e <setup+0x1a90>
   16768:	49 e2       	ldi	r20, 0x29	; 41
   1676a:	24 2e       	mov	r2, r20
   1676c:	4b e0       	ldi	r20, 0x0B	; 11
   1676e:	34 2e       	mov	r3, r20
   16770:	54 e5       	ldi	r21, 0x54	; 84
   16772:	85 2e       	mov	r8, r21
   16774:	5a e0       	ldi	r21, 0x0A	; 10
   16776:	95 2e       	mov	r9, r21
   16778:	68 e6       	ldi	r22, 0x68	; 104
   1677a:	a6 2e       	mov	r10, r22
   1677c:	6a e0       	ldi	r22, 0x0A	; 10
   1677e:	b6 2e       	mov	r11, r22
   16780:	7c e7       	ldi	r23, 0x7C	; 124
   16782:	c7 2e       	mov	r12, r23
   16784:	7a e0       	ldi	r23, 0x0A	; 10
   16786:	d7 2e       	mov	r13, r23
   16788:	e0 e9       	ldi	r30, 0x90	; 144
   1678a:	ee 2e       	mov	r14, r30
   1678c:	ea e0       	ldi	r30, 0x0A	; 10
   1678e:	fe 2e       	mov	r15, r30
   16790:	00 e6       	ldi	r16, 0x60	; 96
   16792:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   16794:	51 2c       	mov	r5, r1
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   16796:	f1 01       	movw	r30, r2
   16798:	11 92       	st	Z+, r1
   1679a:	1f 01       	movw	r2, r30
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   1679c:	c8 01       	movw	r24, r16
   1679e:	0e 94 05 72 	call	0xe40a	; 0xe40a <EEPROMreadFloat(unsigned int)>
   167a2:	d4 01       	movw	r26, r8
   167a4:	6d 93       	st	X+, r22
   167a6:	7d 93       	st	X+, r23
   167a8:	8d 93       	st	X+, r24
   167aa:	9d 93       	st	X+, r25
   167ac:	4d 01       	movw	r8, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   167ae:	c8 01       	movw	r24, r16
   167b0:	04 96       	adiw	r24, 0x04	; 4
   167b2:	0e 94 05 72 	call	0xe40a	; 0xe40a <EEPROMreadFloat(unsigned int)>
   167b6:	f5 01       	movw	r30, r10
   167b8:	61 93       	st	Z+, r22
   167ba:	71 93       	st	Z+, r23
   167bc:	81 93       	st	Z+, r24
   167be:	91 93       	st	Z+, r25
   167c0:	5f 01       	movw	r10, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   167c2:	c8 01       	movw	r24, r16
   167c4:	08 96       	adiw	r24, 0x08	; 8
   167c6:	0e 94 05 72 	call	0xe40a	; 0xe40a <EEPROMreadFloat(unsigned int)>
   167ca:	d6 01       	movw	r26, r12
   167cc:	6d 93       	st	X+, r22
   167ce:	7d 93       	st	X+, r23
   167d0:	8d 93       	st	X+, r24
   167d2:	9d 93       	st	X+, r25
   167d4:	6d 01       	movw	r12, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   167d6:	c8 01       	movw	r24, r16
   167d8:	0c 96       	adiw	r24, 0x0c	; 12
   167da:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   167de:	f7 01       	movw	r30, r14
   167e0:	81 93       	st	Z+, r24
   167e2:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3829
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   167e4:	85 2d       	mov	r24, r5
   167e6:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3824
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   167ea:	53 94       	inc	r5
   167ec:	0f 5d       	subi	r16, 0xDF	; 223
   167ee:	1f 4f       	sbci	r17, 0xFF	; 255
   167f0:	f5 e0       	ldi	r31, 0x05	; 5
   167f2:	5f 12       	cpse	r5, r31
   167f4:	d0 cf       	rjmp	.-96     	; 0x16796 <setup+0x1708>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   167f6:	8c e5       	ldi	r24, 0x5C	; 92
   167f8:	90 e0       	ldi	r25, 0x00	; 0
   167fa:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   167fe:	18 2f       	mov	r17, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
   16800:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3833
      last_default_ring = default_ring;
   16804:	80 93 56 09 	sts	0x0956, r24	; 0x800956 <last_default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2018
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   16808:	8d e5       	ldi	r24, 0x5D	; 93
   1680a:	90 e0       	ldi	r25, 0x00	; 0
   1680c:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3834
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
      last_default_ring = default_ring;
      default_show_temp = get_default_show_temp();
   16810:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <default_show_temp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3835
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   16814:	81 2f       	mov	r24, r17
   16816:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
   1681a:	80 93 5b 09 	sts	0x095B, r24	; 0x80095b <thermostat_mode_default_ring_last_state>
   1681e:	2d cc       	rjmp	.-1958   	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3851
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   16820:	63 e0       	ldi	r22, 0x03	; 3
   16822:	73 e8       	ldi	r23, 0x83	; 131
   16824:	ce 01       	movw	r24, r28
   16826:	88 5b       	subi	r24, 0xB8	; 184
   16828:	9f 4f       	sbci	r25, 0xFF	; 255
   1682a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3852
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1682e:	ee 24       	eor	r14, r14
   16830:	ea 94       	dec	r14
   16832:	fe 2c       	mov	r15, r14
   16834:	00 ee       	ldi	r16, 0xE0	; 224
   16836:	17 e0       	ldi	r17, 0x07	; 7
   16838:	21 e0       	ldi	r18, 0x01	; 1
   1683a:	4e eb       	ldi	r20, 0xBE	; 190
   1683c:	50 e0       	ldi	r21, 0x00	; 0
   1683e:	60 ea       	ldi	r22, 0xA0	; 160
   16840:	70 e0       	ldi	r23, 0x00	; 0
   16842:	ce 01       	movw	r24, r28
   16844:	88 5b       	subi	r24, 0xB8	; 184
   16846:	9f 4f       	sbci	r25, 0xFF	; 255
   16848:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1684c:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   16850:	8d 7f       	andi	r24, 0xFD	; 253
   16852:	a9 c0       	rjmp	.+338    	; 0x169a6 <setup+0x1918>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   16854:	c8 5c       	subi	r28, 0xC8	; 200
   16856:	de 4f       	sbci	r29, 0xFE	; 254
   16858:	b8 81       	ld	r27, Y
   1685a:	c8 53       	subi	r28, 0x38	; 56
   1685c:	d1 40       	sbci	r29, 0x01	; 1
   1685e:	bf 30       	cpi	r27, 0x0F	; 15
   16860:	09 f0       	breq	.+2      	; 0x16864 <setup+0x17d6>
   16862:	0b cc       	rjmp	.-2026   	; 0x1607a <setup+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3860
    {
      strcpy_P(str1, text_rtc_cas);
   16864:	66 e3       	ldi	r22, 0x36	; 54
   16866:	72 e8       	ldi	r23, 0x82	; 130
   16868:	ce 01       	movw	r24, r28
   1686a:	88 5b       	subi	r24, 0xB8	; 184
   1686c:	9f 4f       	sbci	r25, 0xFF	; 255
   1686e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16872:	ee 24       	eor	r14, r14
   16874:	ea 94       	dec	r14
   16876:	fe 2c       	mov	r15, r14
   16878:	00 ee       	ldi	r16, 0xE0	; 224
   1687a:	17 e0       	ldi	r17, 0x07	; 7
   1687c:	21 e0       	ldi	r18, 0x01	; 1
   1687e:	48 ec       	ldi	r20, 0xC8	; 200
   16880:	50 e0       	ldi	r21, 0x00	; 0
   16882:	6e e1       	ldi	r22, 0x1E	; 30
   16884:	70 e0       	ldi	r23, 0x00	; 0
   16886:	ce 01       	movw	r24, r28
   16888:	88 5b       	subi	r24, 0xB8	; 184
   1688a:	9f 4f       	sbci	r25, 0xFF	; 255
   1688c:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3862
      if (rtc.isrunning())
   16890:	0e 94 9e bf 	call	0x17f3c	; 0x17f3c <RTC_DS1307::isrunning() [clone .constprop.149]>
   16894:	88 23       	and	r24, r24
   16896:	a9 f0       	breq	.+42     	; 0x168c2 <setup+0x1834>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3864
      {
        strcpy_P(str1, text_ok);
   16898:	63 e0       	ldi	r22, 0x03	; 3
   1689a:	73 e8       	ldi	r23, 0x83	; 131
   1689c:	ce 01       	movw	r24, r28
   1689e:	88 5b       	subi	r24, 0xB8	; 184
   168a0:	9f 4f       	sbci	r25, 0xFF	; 255
   168a2:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3865
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   168a6:	21 e0       	ldi	r18, 0x01	; 1
   168a8:	48 ec       	ldi	r20, 0xC8	; 200
   168aa:	50 e0       	ldi	r21, 0x00	; 0
   168ac:	60 ea       	ldi	r22, 0xA0	; 160
   168ae:	70 e0       	ldi	r23, 0x00	; 0
   168b0:	ce 01       	movw	r24, r28
   168b2:	88 5b       	subi	r24, 0xB8	; 184
   168b4:	9f 4f       	sbci	r25, 0xFF	; 255
   168b6:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   168ba:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   168be:	8e 7f       	andi	r24, 0xFE	; 254
   168c0:	72 c0       	rjmp	.+228    	; 0x169a6 <setup+0x1918>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   168c2:	62 e2       	ldi	r22, 0x22	; 34
   168c4:	74 e8       	ldi	r23, 0x84	; 132
   168c6:	ce 01       	movw	r24, r28
   168c8:	88 5b       	subi	r24, 0xB8	; 184
   168ca:	9f 4f       	sbci	r25, 0xFF	; 255
   168cc:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3871
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   168d0:	ee 24       	eor	r14, r14
   168d2:	ea 94       	dec	r14
   168d4:	fe 2c       	mov	r15, r14
   168d6:	00 e0       	ldi	r16, 0x00	; 0
   168d8:	18 ef       	ldi	r17, 0xF8	; 248
   168da:	21 e0       	ldi	r18, 0x01	; 1
   168dc:	48 ec       	ldi	r20, 0xC8	; 200
   168de:	50 e0       	ldi	r21, 0x00	; 0
   168e0:	60 ea       	ldi	r22, 0xA0	; 160
   168e2:	70 e0       	ldi	r23, 0x00	; 0
   168e4:	ce 01       	movw	r24, r28
   168e6:	88 5b       	subi	r24, 0xB8	; 184
   168e8:	9f 4f       	sbci	r25, 0xFF	; 255
   168ea:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
        selftest_set_0(SELFTEST_ERR_RTC);
   168ee:	80 e0       	ldi	r24, 0x00	; 0
   168f0:	d4 cc       	rjmp	.-1624   	; 0x1629a <setup+0x120c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
   168f2:	c8 5c       	subi	r28, 0xC8	; 200
   168f4:	de 4f       	sbci	r29, 0xFE	; 254
   168f6:	98 81       	ld	r25, Y
   168f8:	c8 53       	subi	r28, 0x38	; 56
   168fa:	d1 40       	sbci	r29, 0x01	; 1
   168fc:	95 30       	cpi	r25, 0x05	; 5
   168fe:	09 f4       	brne	.+2      	; 0x16902 <setup+0x1874>
   16900:	af ca       	rjmp	.-2722   	; 0x15e60 <setup+0xdd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
        remote_tds_set_last_update(idx, 255);
      }
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   16902:	96 30       	cpi	r25, 0x06	; 6
   16904:	09 f4       	brne	.+2      	; 0x16908 <setup+0x187a>
   16906:	28 cc       	rjmp	.-1968   	; 0x16158 <setup+0x10ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3706
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   16908:	97 30       	cpi	r25, 0x07	; 7
   1690a:	09 f0       	breq	.+2      	; 0x1690e <setup+0x1880>
   1690c:	c9 cc       	rjmp	.-1646   	; 0x162a0 <setup+0x1212>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
    {
      strcpy_P(str1, text_onewire_rozhrani);
   1690e:	66 ec       	ldi	r22, 0xC6	; 198
   16910:	72 e8       	ldi	r23, 0x82	; 130
   16912:	ce 01       	movw	r24, r28
   16914:	88 5b       	subi	r24, 0xB8	; 184
   16916:	9f 4f       	sbci	r25, 0xFF	; 255
   16918:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3709
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1691c:	ee 24       	eor	r14, r14
   1691e:	ea 94       	dec	r14
   16920:	fe 2c       	mov	r15, r14
   16922:	00 ee       	ldi	r16, 0xE0	; 224
   16924:	17 e0       	ldi	r17, 0x07	; 7
   16926:	21 e0       	ldi	r18, 0x01	; 1
   16928:	48 e7       	ldi	r20, 0x78	; 120
   1692a:	50 e0       	ldi	r21, 0x00	; 0
   1692c:	6e e1       	ldi	r22, 0x1E	; 30
   1692e:	70 e0       	ldi	r23, 0x00	; 0
   16930:	ce 01       	movw	r24, r28
   16932:	88 5b       	subi	r24, 0xB8	; 184
   16934:	9f 4f       	sbci	r25, 0xFF	; 255
   16936:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
      ds2482_address[0].i2c_addr = 0b0011000;
   1693a:	88 e1       	ldi	r24, 0x18	; 24
   1693c:	80 93 9d 0c 	sts	0x0C9D, r24	; 0x800c9d <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3711
      ds2482_address[0].HWwirenum = 0;
   16940:	10 92 9e 0c 	sts	0x0C9E, r1	; 0x800c9e <ds2482_address+0x1>
   16944:	ea e6       	ldi	r30, 0x6A	; 106
   16946:	fb e0       	ldi	r31, 0x0B	; 11
   16948:	8e e1       	ldi	r24, 0x1E	; 30
   1694a:	9c e0       	ldi	r25, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3715
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   1694c:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
        status_tds18s20[idx].period_now = 0;
   1694e:	14 8e       	std	Z+28, r1	; 0x1c
   16950:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   16952:	8e 17       	cp	r24, r30
   16954:	9f 07       	cpc	r25, r31
   16956:	d1 f7       	brne	.-12     	; 0x1694c <setup+0x18be>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   16958:	4a e0       	ldi	r20, 0x0A	; 10
   1695a:	be 01       	movw	r22, r28
   1695c:	6e 50       	subi	r22, 0x0E	; 14
   1695e:	7f 4f       	sbci	r23, 0xFF	; 255
   16960:	88 e1       	ldi	r24, 0x18	; 24
   16962:	90 e0       	ldi	r25, 0x00	; 0
   16964:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   16968:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <ds2482_address>
   1696c:	0e 94 ce 67 	call	0xcf9c	; 0xcf9c <ds2482reset(unsigned char)>
   16970:	81 11       	cpse	r24, r1
   16972:	7c cc       	rjmp	.-1800   	; 0x1626c <setup+0x11de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3721
      {
        strcpy_P(str1, text_ok);
   16974:	63 e0       	ldi	r22, 0x03	; 3
   16976:	73 e8       	ldi	r23, 0x83	; 131
   16978:	ce 01       	movw	r24, r28
   1697a:	88 5b       	subi	r24, 0xB8	; 184
   1697c:	9f 4f       	sbci	r25, 0xFF	; 255
   1697e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3722
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16982:	ee 24       	eor	r14, r14
   16984:	ea 94       	dec	r14
   16986:	fe 2c       	mov	r15, r14
   16988:	00 ee       	ldi	r16, 0xE0	; 224
   1698a:	17 e0       	ldi	r17, 0x07	; 7
   1698c:	21 e0       	ldi	r18, 0x01	; 1
   1698e:	48 e7       	ldi	r20, 0x78	; 120
   16990:	50 e0       	ldi	r21, 0x00	; 0
   16992:	60 ea       	ldi	r22, 0xA0	; 160
   16994:	70 e0       	ldi	r23, 0x00	; 0
   16996:	ce 01       	movw	r24, r28
   16998:	88 5b       	subi	r24, 0xB8	; 184
   1699a:	9f 4f       	sbci	r25, 0xFF	; 255
   1699c:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   169a0:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   169a4:	8b 7f       	andi	r24, 0xFB	; 251
   169a6:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
   169aa:	67 cb       	rjmp	.-2354   	; 0x1607a <setup+0xfec>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   169ac:	c8 5c       	subi	r28, 0xC8	; 200
   169ae:	de 4f       	sbci	r29, 0xFE	; 254
   169b0:	a8 81       	ld	r26, Y
   169b2:	c8 53       	subi	r28, 0x38	; 56
   169b4:	d1 40       	sbci	r29, 0x01	; 1
   169b6:	aa 30       	cpi	r26, 0x0A	; 10
   169b8:	09 f0       	breq	.+2      	; 0x169bc <setup+0x192e>
   169ba:	4c cd       	rjmp	.-1384   	; 0x16454 <setup+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   169bc:	69 e9       	ldi	r22, 0x99	; 153
   169be:	72 e8       	ldi	r23, 0x82	; 130
   169c0:	ce 01       	movw	r24, r28
   169c2:	88 5b       	subi	r24, 0xB8	; 184
   169c4:	9f 4f       	sbci	r25, 0xFF	; 255
   169c6:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3770
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   169ca:	ee 24       	eor	r14, r14
   169cc:	ea 94       	dec	r14
   169ce:	fe 2c       	mov	r15, r14
   169d0:	00 ee       	ldi	r16, 0xE0	; 224
   169d2:	17 e0       	ldi	r17, 0x07	; 7
   169d4:	21 e0       	ldi	r18, 0x01	; 1
   169d6:	46 e9       	ldi	r20, 0x96	; 150
   169d8:	50 e0       	ldi	r21, 0x00	; 0
   169da:	6e e1       	ldi	r22, 0x1E	; 30
   169dc:	70 e0       	ldi	r23, 0x00	; 0
   169de:	ce 01       	movw	r24, r28
   169e0:	88 5b       	subi	r24, 0xB8	; 184
   169e2:	9f 4f       	sbci	r25, 0xFF	; 255
   169e4:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   169e8:	80 91 d9 0d 	lds	r24, 0x0DD9	; 0x800dd9 <device+0x24>
   169ec:	90 91 da 0d 	lds	r25, 0x0DDA	; 0x800dda <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   169f0:	20 91 d8 0d 	lds	r18, 0x0DD8	; 0x800dd8 <device+0x23>
   169f4:	30 91 d7 0d 	lds	r19, 0x0DD7	; 0x800dd7 <device+0x22>
   169f8:	40 91 d6 0d 	lds	r20, 0x0DD6	; 0x800dd6 <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   169fc:	50 91 d5 0d 	lds	r21, 0x0DD5	; 0x800dd5 <device+0x20>
   16a00:	50 93 dc 11 	sts	0x11DC, r21	; 0x8011dc <mqtt_client+0x211>
   16a04:	40 93 dd 11 	sts	0x11DD, r20	; 0x8011dd <mqtt_client+0x212>
   16a08:	30 93 de 11 	sts	0x11DE, r19	; 0x8011de <mqtt_client+0x213>
   16a0c:	20 93 df 11 	sts	0x11DF, r18	; 0x8011df <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   16a10:	90 93 e3 11 	sts	0x11E3, r25	; 0x8011e3 <mqtt_client+0x218>
   16a14:	80 93 e2 11 	sts	0x11E2, r24	; 0x8011e2 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   16a18:	10 92 e1 11 	sts	0x11E1, r1	; 0x8011e1 <mqtt_client+0x216>
   16a1c:	10 92 e0 11 	sts	0x11E0, r1	; 0x8011e0 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   16a20:	86 eb       	ldi	r24, 0xB6	; 182
   16a22:	94 e9       	ldi	r25, 0x94	; 148
   16a24:	90 93 d9 11 	sts	0x11D9, r25	; 0x8011d9 <mqtt_client+0x20e>
   16a28:	80 93 d8 11 	sts	0x11D8, r24	; 0x8011d8 <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(const char* header)
{
  header_out = header;
   16a2c:	8a e8       	ldi	r24, 0x8A	; 138
   16a2e:	92 e8       	ldi	r25, 0x82	; 130
   16a30:	90 93 55 0c 	sts	0x0C55, r25	; 0x800c55 <header_out+0x1>
   16a34:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   16a38:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   16a3c:	6b 01       	movw	r12, r22
   16a3e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
      while ((millis() - milis) < 3000 )
   16a40:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   16a44:	6c 19       	sub	r22, r12
   16a46:	7d 09       	sbc	r23, r13
   16a48:	8e 09       	sbc	r24, r14
   16a4a:	9f 09       	sbc	r25, r15
   16a4c:	68 3b       	cpi	r22, 0xB8	; 184
   16a4e:	7b 40       	sbci	r23, 0x0B	; 11
   16a50:	81 05       	cpc	r24, r1
   16a52:	91 05       	cpc	r25, r1
   16a54:	98 f4       	brcc	.+38     	; 0x16a7c <setup+0x19ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3778
      {
        lastmqttconnect = 0;
   16a56:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <lastmqttconnect>
   16a5a:	10 92 27 09 	sts	0x0927, r1	; 0x800927 <lastmqttconnect+0x1>
   16a5e:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <lastmqttconnect+0x2>
   16a62:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3779
        mqtt_client.loop();
   16a66:	0e 94 9f d3 	call	0x1a73e	; 0x1a73e <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3780
        if (mqtt_reconnect() == 0)
   16a6a:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <mqtt_reconnect()>
   16a6e:	81 11       	cpse	r24, r1
   16a70:	e0 cc       	rjmp	.-1600   	; 0x16432 <setup+0x13a4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   16a72:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   16a76:	8f 7d       	andi	r24, 0xDF	; 223
   16a78:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   16a7c:	10 92 26 09 	sts	0x0926, r1	; 0x800926 <lastmqttconnect>
   16a80:	10 92 27 09 	sts	0x0927, r1	; 0x800927 <lastmqttconnect+0x1>
   16a84:	10 92 28 09 	sts	0x0928, r1	; 0x800928 <lastmqttconnect+0x2>
   16a88:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <lastmqttconnect+0x3>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   16a8c:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3789
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   16a90:	85 ff       	sbrs	r24, 5
   16a92:	d3 cc       	rjmp	.-1626   	; 0x1643a <setup+0x13ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3791
      {
        strcpy_P(str1, text_err);
   16a94:	62 e2       	ldi	r22, 0x22	; 34
   16a96:	74 e8       	ldi	r23, 0x84	; 132
   16a98:	ce 01       	movw	r24, r28
   16a9a:	88 5b       	subi	r24, 0xB8	; 184
   16a9c:	9f 4f       	sbci	r25, 0xFF	; 255
   16a9e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3792
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   16aa2:	ee 24       	eor	r14, r14
   16aa4:	ea 94       	dec	r14
   16aa6:	fe 2c       	mov	r15, r14
   16aa8:	00 e0       	ldi	r16, 0x00	; 0
   16aaa:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3797
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16aac:	21 e0       	ldi	r18, 0x01	; 1
   16aae:	46 e9       	ldi	r20, 0x96	; 150
   16ab0:	50 e0       	ldi	r21, 0x00	; 0
   16ab2:	35 cc       	rjmp	.-1942   	; 0x1631e <setup+0x1290>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   16ab4:	c8 5c       	subi	r28, 0xC8	; 200
   16ab6:	de 4f       	sbci	r29, 0xFE	; 254
   16ab8:	b8 81       	ld	r27, Y
   16aba:	c8 53       	subi	r28, 0x38	; 56
   16abc:	d1 40       	sbci	r29, 0x01	; 1
   16abe:	bd 30       	cpi	r27, 0x0D	; 13
   16ac0:	11 f0       	breq	.+4      	; 0x16ac6 <setup+0x1a38>
   16ac2:	0c 94 80 ab 	jmp	0x15700	; 0x15700 <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3820
    {
      strcpy_P(str1, text_pid_regulator);
   16ac6:	6d e5       	ldi	r22, 0x5D	; 93
   16ac8:	72 e8       	ldi	r23, 0x82	; 130
   16aca:	ce 01       	movw	r24, r28
   16acc:	88 5b       	subi	r24, 0xB8	; 184
   16ace:	9f 4f       	sbci	r25, 0xFF	; 255
   16ad0:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16ad4:	ee 24       	eor	r14, r14
   16ad6:	ea 94       	dec	r14
   16ad8:	fe 2c       	mov	r15, r14
   16ada:	00 ee       	ldi	r16, 0xE0	; 224
   16adc:	17 e0       	ldi	r17, 0x07	; 7
   16ade:	21 e0       	ldi	r18, 0x01	; 1
   16ae0:	44 eb       	ldi	r20, 0xB4	; 180
   16ae2:	50 e0       	ldi	r21, 0x00	; 0
   16ae4:	6e e1       	ldi	r22, 0x1E	; 30
   16ae6:	70 e0       	ldi	r23, 0x00	; 0
   16ae8:	ce 01       	movw	r24, r28
   16aea:	88 5b       	subi	r24, 0xB8	; 184
   16aec:	9f 4f       	sbci	r25, 0xFF	; 255
   16aee:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   16af2:	a6 e5       	ldi	r26, 0x56	; 86
   16af4:	bb e0       	ldi	r27, 0x0B	; 11
   16af6:	c3 5c       	subi	r28, 0xC3	; 195
   16af8:	de 4f       	sbci	r29, 0xFE	; 254
   16afa:	b9 83       	std	Y+1, r27	; 0x01
   16afc:	a8 83       	st	Y, r26
   16afe:	cd 53       	subi	r28, 0x3D	; 61
   16b00:	d1 40       	sbci	r29, 0x01	; 1
   16b02:	ee e2       	ldi	r30, 0x2E	; 46
   16b04:	fb e0       	ldi	r31, 0x0B	; 11
   16b06:	c5 5c       	subi	r28, 0xC5	; 197
   16b08:	de 4f       	sbci	r29, 0xFE	; 254
   16b0a:	f9 83       	std	Y+1, r31	; 0x01
   16b0c:	e8 83       	st	Y, r30
   16b0e:	cb 53       	subi	r28, 0x3B	; 59
   16b10:	d1 40       	sbci	r29, 0x01	; 1
   16b12:	a2 e4       	ldi	r26, 0x42	; 66
   16b14:	ca 2e       	mov	r12, r26
   16b16:	ab e0       	ldi	r26, 0x0B	; 11
   16b18:	da 2e       	mov	r13, r26
   16b1a:	f1 2c       	mov	r15, r1
   16b1c:	e1 2c       	mov	r14, r1
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   16b1e:	8c e3       	ldi	r24, 0x3C	; 60
   16b20:	90 e0       	ldi	r25, 0x00	; 0
   16b22:	0e 94 f8 f5 	call	0x1ebf0	; 0x1ebf0 <malloc>
   16b26:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   16b28:	c3 5c       	subi	r28, 0xC3	; 195
   16b2a:	de 4f       	sbci	r29, 0xFE	; 254
   16b2c:	e8 81       	ld	r30, Y
   16b2e:	f9 81       	ldd	r31, Y+1	; 0x01
   16b30:	cd 53       	subi	r28, 0x3D	; 61
   16b32:	d1 40       	sbci	r29, 0x01	; 1
   16b34:	dc 01       	movw	r26, r24
   16b36:	5f 96       	adiw	r26, 0x1f	; 31
   16b38:	fc 93       	st	X, r31
   16b3a:	ee 93       	st	-X, r30
   16b3c:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   16b3e:	c5 5c       	subi	r28, 0xC5	; 197
   16b40:	de 4f       	sbci	r29, 0xFE	; 254
   16b42:	88 81       	ld	r24, Y
   16b44:	99 81       	ldd	r25, Y+1	; 0x01
   16b46:	cb 53       	subi	r28, 0x3B	; 59
   16b48:	d1 40       	sbci	r29, 0x01	; 1
   16b4a:	5d 96       	adiw	r26, 0x1d	; 29
   16b4c:	9c 93       	st	X, r25
   16b4e:	8e 93       	st	-X, r24
   16b50:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   16b52:	91 96       	adiw	r26, 0x21	; 33
   16b54:	dc 92       	st	X, r13
   16b56:	ce 92       	st	-X, r12
   16b58:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   16b5a:	da 96       	adiw	r26, 0x3a	; 58
   16b5c:	1c 92       	st	X, r1
   16b5e:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   16b60:	d2 96       	adiw	r26, 0x32	; 50
   16b62:	1d 92       	st	X+, r1
   16b64:	1d 92       	st	X+, r1
   16b66:	1d 92       	st	X+, r1
   16b68:	1c 92       	st	X, r1
   16b6a:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   16b6c:	80 e0       	ldi	r24, 0x00	; 0
   16b6e:	90 e0       	ldi	r25, 0x00	; 0
   16b70:	af e7       	ldi	r26, 0x7F	; 127
   16b72:	b3 e4       	ldi	r27, 0x43	; 67
   16b74:	f8 01       	movw	r30, r16
   16b76:	86 ab       	std	Z+54, r24	; 0x36
   16b78:	97 ab       	std	Z+55, r25	; 0x37
   16b7a:	a0 af       	std	Z+56, r26	; 0x38
   16b7c:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   16b7e:	84 e6       	ldi	r24, 0x64	; 100
   16b80:	90 e0       	ldi	r25, 0x00	; 0
   16b82:	a0 e0       	ldi	r26, 0x00	; 0
   16b84:	b0 e0       	ldi	r27, 0x00	; 0
   16b86:	86 a7       	std	Z+46, r24	; 0x2e
   16b88:	97 a7       	std	Z+47, r25	; 0x2f
   16b8a:	a0 ab       	std	Z+48, r26	; 0x30
   16b8c:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   16b8e:	70 e0       	ldi	r23, 0x00	; 0
   16b90:	60 e0       	ldi	r22, 0x00	; 0
   16b92:	c8 01       	movw	r24, r16
   16b94:	0e 94 df 48 	call	0x91be	; 0x91be <PID::SetControllerDirection(int)>
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   16b98:	e1 e0       	ldi	r30, 0x01	; 1
   16b9a:	f0 e0       	ldi	r31, 0x00	; 0
   16b9c:	d8 01       	movw	r26, r16
   16b9e:	5b 96       	adiw	r26, 0x1b	; 27
   16ba0:	fc 93       	st	X, r31
   16ba2:	ee 93       	st	-X, r30
   16ba4:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   16ba6:	f1 e0       	ldi	r31, 0x01	; 1
   16ba8:	db 96       	adiw	r26, 0x3b	; 59
   16baa:	fc 93       	st	X, r31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   16bac:	80 e0       	ldi	r24, 0x00	; 0
   16bae:	90 e0       	ldi	r25, 0x00	; 0
   16bb0:	a0 e0       	ldi	r26, 0x00	; 0
   16bb2:	b0 e4       	ldi	r27, 0x40	; 64
   16bb4:	f8 01       	movw	r30, r16
   16bb6:	80 83       	st	Z, r24
   16bb8:	91 83       	std	Z+1, r25	; 0x01
   16bba:	a2 83       	std	Z+2, r26	; 0x02
   16bbc:	b3 83       	std	Z+3, r27	; 0x03
   16bbe:	80 e0       	ldi	r24, 0x00	; 0
   16bc0:	90 e0       	ldi	r25, 0x00	; 0
   16bc2:	a0 ea       	ldi	r26, 0xA0	; 160
   16bc4:	b0 e4       	ldi	r27, 0x40	; 64
   16bc6:	84 83       	std	Z+4, r24	; 0x04
   16bc8:	95 83       	std	Z+5, r25	; 0x05
   16bca:	a6 83       	std	Z+6, r26	; 0x06
   16bcc:	b7 83       	std	Z+7, r27	; 0x07
   16bce:	80 e0       	ldi	r24, 0x00	; 0
   16bd0:	90 e0       	ldi	r25, 0x00	; 0
   16bd2:	a0 e8       	ldi	r26, 0x80	; 128
   16bd4:	bf e3       	ldi	r27, 0x3F	; 63
   16bd6:	80 87       	std	Z+8, r24	; 0x08
   16bd8:	91 87       	std	Z+9, r25	; 0x09
   16bda:	a2 87       	std	Z+10, r26	; 0x0a
   16bdc:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   16bde:	66 a5       	ldd	r22, Z+46	; 0x2e
   16be0:	77 a5       	ldd	r23, Z+47	; 0x2f
   16be2:	80 a9       	ldd	r24, Z+48	; 0x30
   16be4:	91 a9       	ldd	r25, Z+49	; 0x31
   16be6:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   16bea:	20 e0       	ldi	r18, 0x00	; 0
   16bec:	30 e0       	ldi	r19, 0x00	; 0
   16bee:	4a e7       	ldi	r20, 0x7A	; 122
   16bf0:	54 e4       	ldi	r21, 0x44	; 68
   16bf2:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
   16bf6:	4b 01       	movw	r8, r22
   16bf8:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   16bfa:	80 e0       	ldi	r24, 0x00	; 0
   16bfc:	90 e0       	ldi	r25, 0x00	; 0
   16bfe:	a0 e0       	ldi	r26, 0x00	; 0
   16c00:	b0 e4       	ldi	r27, 0x40	; 64
   16c02:	f8 01       	movw	r30, r16
   16c04:	84 87       	std	Z+12, r24	; 0x0c
   16c06:	95 87       	std	Z+13, r25	; 0x0d
   16c08:	a6 87       	std	Z+14, r26	; 0x0e
   16c0a:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   16c0c:	20 e0       	ldi	r18, 0x00	; 0
   16c0e:	30 e0       	ldi	r19, 0x00	; 0
   16c10:	40 ea       	ldi	r20, 0xA0	; 160
   16c12:	50 e4       	ldi	r21, 0x40	; 64
   16c14:	c5 01       	movw	r24, r10
   16c16:	b4 01       	movw	r22, r8
   16c18:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
   16c1c:	1b 01       	movw	r2, r22
   16c1e:	2c 01       	movw	r4, r24
   16c20:	d8 01       	movw	r26, r16
   16c22:	50 96       	adiw	r26, 0x10	; 16
   16c24:	2d 92       	st	X+, r2
   16c26:	3d 92       	st	X+, r3
   16c28:	4d 92       	st	X+, r4
   16c2a:	5c 92       	st	X, r5
   16c2c:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   16c2e:	a5 01       	movw	r20, r10
   16c30:	94 01       	movw	r18, r8
   16c32:	60 e0       	ldi	r22, 0x00	; 0
   16c34:	70 e0       	ldi	r23, 0x00	; 0
   16c36:	80 e8       	ldi	r24, 0x80	; 128
   16c38:	9f e3       	ldi	r25, 0x3F	; 63
   16c3a:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
   16c3e:	4b 01       	movw	r8, r22
   16c40:	5c 01       	movw	r10, r24
   16c42:	f8 01       	movw	r30, r16
   16c44:	84 8a       	std	Z+20, r8	; 0x14
   16c46:	95 8a       	std	Z+21, r9	; 0x15
   16c48:	a6 8a       	std	Z+22, r10	; 0x16
   16c4a:	b7 8a       	std	Z+23, r11	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   16c4c:	80 8d       	ldd	r24, Z+24	; 0x18
   16c4e:	91 8d       	ldd	r25, Z+25	; 0x19
   16c50:	01 97       	sbiw	r24, 0x01	; 1
   16c52:	11 f5       	brne	.+68     	; 0x16c98 <setup+0x1c0a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   16c54:	80 e0       	ldi	r24, 0x00	; 0
   16c56:	90 e0       	ldi	r25, 0x00	; 0
   16c58:	a0 e0       	ldi	r26, 0x00	; 0
   16c5a:	b0 ec       	ldi	r27, 0xC0	; 192
   16c5c:	84 87       	std	Z+12, r24	; 0x0c
   16c5e:	95 87       	std	Z+13, r25	; 0x0d
   16c60:	a6 87       	std	Z+14, r26	; 0x0e
   16c62:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   16c64:	a2 01       	movw	r20, r4
   16c66:	91 01       	movw	r18, r2
   16c68:	60 e0       	ldi	r22, 0x00	; 0
   16c6a:	70 e0       	ldi	r23, 0x00	; 0
   16c6c:	cb 01       	movw	r24, r22
   16c6e:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
   16c72:	d8 01       	movw	r26, r16
   16c74:	50 96       	adiw	r26, 0x10	; 16
   16c76:	6d 93       	st	X+, r22
   16c78:	7d 93       	st	X+, r23
   16c7a:	8d 93       	st	X+, r24
   16c7c:	9c 93       	st	X, r25
   16c7e:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   16c80:	a5 01       	movw	r20, r10
   16c82:	94 01       	movw	r18, r8
   16c84:	60 e0       	ldi	r22, 0x00	; 0
   16c86:	70 e0       	ldi	r23, 0x00	; 0
   16c88:	cb 01       	movw	r24, r22
   16c8a:	0e 94 f6 fb 	call	0x1f7ec	; 0x1f7ec <__subsf3>
   16c8e:	f8 01       	movw	r30, r16
   16c90:	64 8b       	std	Z+20, r22	; 0x14
   16c92:	75 8b       	std	Z+21, r23	; 0x15
   16c94:	86 8b       	std	Z+22, r24	; 0x16
   16c96:	97 8b       	std	Z+23, r25	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   16c98:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   16c9c:	28 ee       	ldi	r18, 0xE8	; 232
   16c9e:	33 e0       	ldi	r19, 0x03	; 3
   16ca0:	40 e0       	ldi	r20, 0x00	; 0
   16ca2:	50 e0       	ldi	r21, 0x00	; 0
   16ca4:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   16ca8:	f8 01       	movw	r30, r16
   16caa:	86 a5       	ldd	r24, Z+46	; 0x2e
   16cac:	97 a5       	ldd	r25, Z+47	; 0x2f
   16cae:	a0 a9       	ldd	r26, Z+48	; 0x30
   16cb0:	b1 a9       	ldd	r27, Z+49	; 0x31
   16cb2:	28 1b       	sub	r18, r24
   16cb4:	39 0b       	sbc	r19, r25
   16cb6:	4a 0b       	sbc	r20, r26
   16cb8:	5b 0b       	sbc	r21, r27
   16cba:	d8 01       	movw	r26, r16
   16cbc:	22 a3       	std	Z+34, r18	; 0x22
   16cbe:	33 a3       	std	Z+35, r19	; 0x23
   16cc0:	44 a3       	std	Z+36, r20	; 0x24
   16cc2:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   16cc4:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <array_pids>
   16cc8:	f0 91 b4 0d 	lds	r31, 0x0DB4	; 0x800db4 <array_pids+0x1>
   16ccc:	ee 0d       	add	r30, r14
   16cce:	ff 1d       	adc	r31, r15
   16cd0:	11 83       	std	Z+1, r17	; 0x01
   16cd2:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   16cd4:	da 96       	adiw	r26, 0x3a	; 58
   16cd6:	8c 91       	ld	r24, X
   16cd8:	da 97       	sbiw	r26, 0x3a	; 58
   16cda:	81 11       	cpse	r24, r1
   16cdc:	c1 cc       	rjmp	.-1662   	; 0x16660 <setup+0x15d2>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   16cde:	5e 96       	adiw	r26, 0x1e	; 30
   16ce0:	ed 91       	ld	r30, X+
   16ce2:	fc 91       	ld	r31, X
   16ce4:	80 80       	ld	r8, Z
   16ce6:	91 80       	ldd	r9, Z+1	; 0x01
   16ce8:	a2 80       	ldd	r10, Z+2	; 0x02
   16cea:	b3 80       	ldd	r11, Z+3	; 0x03
   16cec:	f8 01       	movw	r30, r16
   16cee:	86 a2       	std	Z+38, r8	; 0x26
   16cf0:	97 a2       	std	Z+39, r9	; 0x27
   16cf2:	a0 a6       	std	Z+40, r10	; 0x28
   16cf4:	b1 a6       	std	Z+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   16cf6:	04 8c       	ldd	r0, Z+28	; 0x1c
   16cf8:	f5 8d       	ldd	r31, Z+29	; 0x1d
   16cfa:	e0 2d       	mov	r30, r0
   16cfc:	80 81       	ld	r24, Z
   16cfe:	91 81       	ldd	r25, Z+1	; 0x01
   16d00:	a2 81       	ldd	r26, Z+2	; 0x02
   16d02:	b3 81       	ldd	r27, Z+3	; 0x03
   16d04:	f8 01       	movw	r30, r16
   16d06:	82 a7       	std	Z+42, r24	; 0x2a
   16d08:	93 a7       	std	Z+43, r25	; 0x2b
   16d0a:	a4 a7       	std	Z+44, r26	; 0x2c
   16d0c:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   16d0e:	26 a8       	ldd	r2, Z+54	; 0x36
   16d10:	37 a8       	ldd	r3, Z+55	; 0x37
   16d12:	40 ac       	ldd	r4, Z+56	; 0x38
   16d14:	51 ac       	ldd	r5, Z+57	; 0x39
   16d16:	a2 01       	movw	r20, r4
   16d18:	91 01       	movw	r18, r2
   16d1a:	c5 01       	movw	r24, r10
   16d1c:	b4 01       	movw	r22, r8
   16d1e:	0e 94 0b fd 	call	0x1fa16	; 0x1fa16 <__gesf2>
   16d22:	18 16       	cp	r1, r24
   16d24:	0c f0       	brlt	.+2      	; 0x16d28 <setup+0x1c9a>
   16d26:	8f cc       	rjmp	.-1762   	; 0x16646 <setup+0x15b8>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   16d28:	d8 01       	movw	r26, r16
   16d2a:	96 96       	adiw	r26, 0x26	; 38
   16d2c:	2d 92       	st	X+, r2
   16d2e:	3d 92       	st	X+, r3
   16d30:	4d 92       	st	X+, r4
   16d32:	5c 92       	st	X, r5
   16d34:	99 97       	sbiw	r26, 0x29	; 41
   16d36:	94 cc       	rjmp	.-1752   	; 0x16660 <setup+0x15d2>

00016d38 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
  }
}
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   16d38:	20 91 b5 0c 	lds	r18, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   16d3c:	2a 30       	cpi	r18, 0x0A	; 10
   16d3e:	70 f4       	brcc	.+28     	; 0x16d5c <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
  {
    MenuHistoryIndex++;
   16d40:	2f 5f       	subi	r18, 0xFF	; 255
   16d42:	20 93 b5 0c 	sts	0x0CB5, r18	; 0x800cb5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
    MenuHistory[MenuHistoryIndex] = id;
   16d46:	30 e0       	ldi	r19, 0x00	; 0
   16d48:	f9 01       	movw	r30, r18
   16d4a:	e5 55       	subi	r30, 0x55	; 85
   16d4c:	f3 4f       	sbci	r31, 0xF3	; 243
   16d4e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
    Global_menu_args1[MenuHistoryIndex] = args1;
   16d50:	2f 55       	subi	r18, 0x5F	; 95
   16d52:	33 4f       	sbci	r19, 0xF3	; 243
   16d54:	f9 01       	movw	r30, r18
   16d56:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1192
    MenuPrepareStyle();
   16d58:	0c 94 af a7 	jmp	0x14f5e	; 0x14f5e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
  }
}
   16d5c:	08 95       	ret

00016d5e <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   16d5e:	80 91 b5 0c 	lds	r24, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   16d62:	88 23       	and	r24, r24
   16d64:	29 f0       	breq	.+10     	; 0x16d70 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
  {
    MenuHistoryIndex--;
   16d66:	81 50       	subi	r24, 0x01	; 1
   16d68:	80 93 b5 0c 	sts	0x0CB5, r24	; 0x800cb5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1181
    MenuPrepareStyle();
   16d6c:	0c 94 af a7 	jmp	0x14f5e	; 0x14f5e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1183
  }
}
   16d70:	08 95       	ret

00016d72 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:616




bool enable_redraw(uint8_t mask, uint8_t data)
{
   16d72:	30 e0       	ldi	r19, 0x00	; 0
   16d74:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:620
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
   16d76:	e1 e0       	ldi	r30, 0x01	; 1
   16d78:	f0 e0       	ldi	r31, 0x00	; 0
   16d7a:	af 01       	movw	r20, r30
   16d7c:	02 2e       	mov	r0, r18
   16d7e:	01 c0       	rjmp	.+2      	; 0x16d82 <enable_redraw(unsigned char, unsigned char)+0x10>
   16d80:	44 0f       	add	r20, r20
   16d82:	0a 94       	dec	r0
   16d84:	ea f7       	brpl	.-6      	; 0x16d80 <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:621
    if ( (mask & v) != 0 )
   16d86:	98 2f       	mov	r25, r24
   16d88:	94 23       	and	r25, r20
   16d8a:	11 f0       	breq	.+4      	; 0x16d90 <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:622
      if ( (data & v) != 0)
   16d8c:	46 23       	and	r20, r22
   16d8e:	39 f4       	brne	.+14     	; 0x16d9e <enable_redraw(unsigned char, unsigned char)+0x2c>
   16d90:	2f 5f       	subi	r18, 0xFF	; 255
   16d92:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:618


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
   16d94:	28 30       	cpi	r18, 0x08	; 8
   16d96:	31 05       	cpc	r19, r1
   16d98:	81 f7       	brne	.-32     	; 0x16d7a <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:617



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
   16d9a:	80 e0       	ldi	r24, 0x00	; 0
   16d9c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:624
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
   16d9e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:629
        break;
      }
  }
  return ret;
}
   16da0:	08 95       	ret

00016da2 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   16da2:	fc 01       	movw	r30, r24
   16da4:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   16da6:	44 8d       	ldd	r20, Z+28	; 0x1c
   16da8:	25 2f       	mov	r18, r21
   16daa:	30 e0       	ldi	r19, 0x00	; 0
   16dac:	84 2f       	mov	r24, r20
   16dae:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   16db0:	82 1b       	sub	r24, r18
   16db2:	93 0b       	sbc	r25, r19
   16db4:	54 17       	cp	r21, r20
   16db6:	10 f0       	brcs	.+4      	; 0x16dbc <HardwareSerial::availableForWrite()+0x1a>
   16db8:	cf 96       	adiw	r24, 0x3f	; 63
   16dba:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   16dbc:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   16dbe:	08 95       	ret

00016dc0 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   16dc0:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   16dc2:	91 8d       	ldd	r25, Z+25	; 0x19
   16dc4:	82 8d       	ldd	r24, Z+26	; 0x1a
   16dc6:	98 17       	cp	r25, r24
   16dc8:	61 f0       	breq	.+24     	; 0x16de2 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   16dca:	a2 8d       	ldd	r26, Z+26	; 0x1a
   16dcc:	ae 0f       	add	r26, r30
   16dce:	bf 2f       	mov	r27, r31
   16dd0:	b1 1d       	adc	r27, r1
   16dd2:	5d 96       	adiw	r26, 0x1d	; 29
   16dd4:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   16dd6:	92 8d       	ldd	r25, Z+26	; 0x1a
   16dd8:	9f 5f       	subi	r25, 0xFF	; 255
   16dda:	9f 73       	andi	r25, 0x3F	; 63
   16ddc:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   16dde:	90 e0       	ldi	r25, 0x00	; 0
   16de0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   16de2:	8f ef       	ldi	r24, 0xFF	; 255
   16de4:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   16de6:	08 95       	ret

00016de8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   16de8:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   16dea:	91 8d       	ldd	r25, Z+25	; 0x19
   16dec:	82 8d       	ldd	r24, Z+26	; 0x1a
   16dee:	98 17       	cp	r25, r24
   16df0:	31 f0       	breq	.+12     	; 0x16dfe <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   16df2:	82 8d       	ldd	r24, Z+26	; 0x1a
   16df4:	e8 0f       	add	r30, r24
   16df6:	f1 1d       	adc	r31, r1
   16df8:	85 8d       	ldd	r24, Z+29	; 0x1d
   16dfa:	90 e0       	ldi	r25, 0x00	; 0
   16dfc:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   16dfe:	8f ef       	ldi	r24, 0xFF	; 255
   16e00:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   16e02:	08 95       	ret

00016e04 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   16e04:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   16e06:	91 8d       	ldd	r25, Z+25	; 0x19
   16e08:	22 8d       	ldd	r18, Z+26	; 0x1a
   16e0a:	89 2f       	mov	r24, r25
   16e0c:	90 e0       	ldi	r25, 0x00	; 0
   16e0e:	80 5c       	subi	r24, 0xC0	; 192
   16e10:	9f 4f       	sbci	r25, 0xFF	; 255
   16e12:	82 1b       	sub	r24, r18
   16e14:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   16e16:	8f 73       	andi	r24, 0x3F	; 63
   16e18:	99 27       	eor	r25, r25
   16e1a:	08 95       	ret

00016e1c <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   16e1c:	80 e9       	ldi	r24, 0x90	; 144
   16e1e:	96 e5       	ldi	r25, 0x56	; 86
   16e20:	89 2b       	or	r24, r25
   16e22:	49 f0       	breq	.+18     	; 0x16e36 <serialEventRun()+0x1a>
   16e24:	80 e0       	ldi	r24, 0x00	; 0
   16e26:	90 e0       	ldi	r25, 0x00	; 0
   16e28:	89 2b       	or	r24, r25
   16e2a:	29 f0       	breq	.+10     	; 0x16e36 <serialEventRun()+0x1a>
   16e2c:	0e 94 90 56 	call	0xad20	; 0xad20 <Serial0_available()>
   16e30:	81 11       	cpse	r24, r1
   16e32:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   16e36:	80 e0       	ldi	r24, 0x00	; 0
   16e38:	90 e0       	ldi	r25, 0x00	; 0
   16e3a:	89 2b       	or	r24, r25
   16e3c:	49 f0       	breq	.+18     	; 0x16e50 <serialEventRun()+0x34>
   16e3e:	80 e0       	ldi	r24, 0x00	; 0
   16e40:	90 e0       	ldi	r25, 0x00	; 0
   16e42:	89 2b       	or	r24, r25
   16e44:	29 f0       	breq	.+10     	; 0x16e50 <serialEventRun()+0x34>
   16e46:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   16e4a:	81 11       	cpse	r24, r1
   16e4c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   16e50:	08 95       	ret

00016e52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh.constprop.231():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:104
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
}


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
   16e52:	0f 93       	push	r16
   16e54:	1f 93       	push	r17
   16e56:	cf 93       	push	r28
   16e58:	df 93       	push	r29
   16e5a:	10 e0       	ldi	r17, 0x00	; 0
   16e5c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   16e5e:	c8 2f       	mov	r28, r24
   16e60:	d0 e0       	ldi	r29, 0x00	; 0
   16e62:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <my_touch+0x17>
   16e66:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <my_touch+0x18>
   16e6a:	90 91 52 0f 	lds	r25, 0x0F52	; 0x800f52 <my_touch+0x20>
   16e6e:	9e 01       	movw	r18, r28
   16e70:	00 2e       	mov	r0, r16
   16e72:	02 c0       	rjmp	.+4      	; 0x16e78 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x26>
   16e74:	35 95       	asr	r19
   16e76:	27 95       	ror	r18
   16e78:	0a 94       	dec	r0
   16e7a:	e2 f7       	brpl	.-8      	; 0x16e74 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x22>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   16e7c:	80 81       	ld	r24, Z
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   16e7e:	20 ff       	sbrs	r18, 0
   16e80:	31 c0       	rjmp	.+98     	; 0x16ee4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x92>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   16e82:	98 2b       	or	r25, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                }
                else
                {
                        TDIN_LOW;
   16e84:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:118
                }

		delay_hus(80);
   16e86:	60 e5       	ldi	r22, 0x50	; 80
   16e88:	70 e0       	ldi	r23, 0x00	; 0
   16e8a:	80 e0       	ldi	r24, 0x00	; 0
   16e8c:	90 e0       	ldi	r25, 0x00	; 0
   16e8e:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:119
                TCLK_LOW;
   16e92:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   16e96:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   16e9a:	80 81       	ld	r24, Z
   16e9c:	90 91 50 0f 	lds	r25, 0x0F50	; 0x800f50 <my_touch+0x1e>
   16ea0:	90 95       	com	r25
   16ea2:	98 23       	and	r25, r24
   16ea4:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
                delay_hus(120);
   16ea6:	68 e7       	ldi	r22, 0x78	; 120
   16ea8:	70 e0       	ldi	r23, 0x00	; 0
   16eaa:	80 e0       	ldi	r24, 0x00	; 0
   16eac:	90 e0       	ldi	r25, 0x00	; 0
   16eae:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:121
                TCLK_HIGH;
   16eb2:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   16eb6:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   16eba:	80 81       	ld	r24, Z
   16ebc:	90 91 50 0f 	lds	r25, 0x0F50	; 0x800f50 <my_touch+0x1e>
   16ec0:	89 2b       	or	r24, r25
   16ec2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
                delay_hus(120);
   16ec4:	68 e7       	ldi	r22, 0x78	; 120
   16ec6:	70 e0       	ldi	r23, 0x00	; 0
   16ec8:	80 e0       	ldi	r24, 0x00	; 0
   16eca:	90 e0       	ldi	r25, 0x00	; 0
   16ecc:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
   16ed0:	0f 5f       	subi	r16, 0xFF	; 255
   16ed2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
   16ed4:	08 30       	cpi	r16, 0x08	; 8
   16ed6:	11 05       	cpc	r17, r1
   16ed8:	21 f6       	brne	.-120    	; 0x16e62 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x10>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:125
                delay_hus(120);
                TCLK_HIGH;
                delay_hus(120);
                val++;
        }
}
   16eda:	df 91       	pop	r29
   16edc:	cf 91       	pop	r28
   16ede:	1f 91       	pop	r17
   16ee0:	0f 91       	pop	r16
   16ee2:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                {
                        TDIN_HIGH;
                }
                else
                {
                        TDIN_LOW;
   16ee4:	90 95       	com	r25
   16ee6:	98 23       	and	r25, r24
   16ee8:	cd cf       	rjmp	.-102    	; 0x16e84 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x32>

00016eea <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   16eea:	2f 92       	push	r2
   16eec:	3f 92       	push	r3
   16eee:	4f 92       	push	r4
   16ef0:	5f 92       	push	r5
   16ef2:	6f 92       	push	r6
   16ef4:	7f 92       	push	r7
   16ef6:	8f 92       	push	r8
   16ef8:	9f 92       	push	r9
   16efa:	af 92       	push	r10
   16efc:	bf 92       	push	r11
   16efe:	cf 92       	push	r12
   16f00:	df 92       	push	r13
   16f02:	ef 92       	push	r14
   16f04:	ff 92       	push	r15
   16f06:	0f 93       	push	r16
   16f08:	1f 93       	push	r17
   16f0a:	cf 93       	push	r28
   16f0c:	df 93       	push	r29
   16f0e:	cd b7       	in	r28, 0x3d	; 61
   16f10:	de b7       	in	r29, 0x3e	; 62
   16f12:	2d 97       	sbiw	r28, 0x0d	; 13
   16f14:	0f b6       	in	r0, 0x3f	; 63
   16f16:	f8 94       	cli
   16f18:	de bf       	out	0x3e, r29	; 62
   16f1a:	0f be       	out	0x3f, r0	; 63
   16f1c:	cd bf       	out	0x3d, r28	; 61
   16f1e:	fc 01       	movw	r30, r24
   16f20:	a0 81       	ld	r26, Z
   16f22:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   16f24:	cb 01       	movw	r24, r22
   16f26:	8e 50       	subi	r24, 0x0E	; 14
   16f28:	97 42       	sbci	r25, 0x27	; 39
   16f2a:	02 97       	sbiw	r24, 0x02	; 2
   16f2c:	20 f5       	brcc	.+72     	; 0x16f76 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   16f2e:	fd 01       	movw	r30, r26
   16f30:	01 90       	ld	r0, Z+
   16f32:	00 20       	and	r0, r0
   16f34:	e9 f7       	brne	.-6      	; 0x16f30 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x46>
   16f36:	31 97       	sbiw	r30, 0x01	; 1
   16f38:	ea 1b       	sub	r30, r26
   16f3a:	fb 0b       	sbc	r31, r27
   16f3c:	80 91 61 0f 	lds	r24, 0x0F61	; 0x800f61 <my_lcd+0xc>
   16f40:	26 e0       	ldi	r18, 0x06	; 6
   16f42:	82 9f       	mul	r24, r18
   16f44:	c0 01       	movw	r24, r0
   16f46:	11 24       	eor	r1, r1
   16f48:	8e 9f       	mul	r24, r30
   16f4a:	90 01       	movw	r18, r0
   16f4c:	8f 9f       	mul	r24, r31
   16f4e:	30 0d       	add	r19, r0
   16f50:	9e 9f       	mul	r25, r30
   16f52:	30 0d       	add	r19, r0
   16f54:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   16f56:	80 91 67 0f 	lds	r24, 0x0F67	; 0x800f67 <my_lcd+0x12>
   16f5a:	90 91 68 0f 	lds	r25, 0x0F68	; 0x800f68 <my_lcd+0x13>
   16f5e:	82 1b       	sub	r24, r18
   16f60:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   16f62:	6e 30       	cpi	r22, 0x0E	; 14
   16f64:	77 42       	sbci	r23, 0x27	; 39
   16f66:	89 f5       	brne	.+98     	; 0x16fca <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   16f68:	bc 01       	movw	r22, r24
   16f6a:	97 ff       	sbrs	r25, 7
   16f6c:	02 c0       	rjmp	.+4      	; 0x16f72 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x88>
   16f6e:	6f 5f       	subi	r22, 0xFF	; 255
   16f70:	7f 4f       	sbci	r23, 0xFF	; 255
   16f72:	75 95       	asr	r23
   16f74:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   16f76:	70 93 58 0f 	sts	0x0F58, r23	; 0x800f58 <my_lcd+0x3>
   16f7a:	60 93 57 0f 	sts	0x0F57, r22	; 0x800f57 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   16f7e:	50 93 5a 0f 	sts	0x0F5A, r21	; 0x800f5a <my_lcd+0x5>
   16f82:	40 93 59 0f 	sts	0x0F59, r20	; 0x800f59 <my_lcd+0x4>
   16f86:	be 83       	std	Y+6, r27	; 0x06
   16f88:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   16f8a:	ed 81       	ldd	r30, Y+5	; 0x05
   16f8c:	fe 81       	ldd	r31, Y+6	; 0x06
   16f8e:	91 91       	ld	r25, Z+
   16f90:	fe 83       	std	Y+6, r31	; 0x06
   16f92:	ed 83       	std	Y+5, r30	; 0x05
   16f94:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   16f96:	99 23       	and	r25, r25
   16f98:	09 f4       	brne	.+2      	; 0x16f9c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xb2>
   16f9a:	dd c0       	rjmp	.+442    	; 0x17156 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   16f9c:	9a 30       	cpi	r25, 0x0A	; 10
   16f9e:	c9 f4       	brne	.+50     	; 0x16fd2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   16fa0:	80 91 61 0f 	lds	r24, 0x0F61	; 0x800f61 <my_lcd+0xc>
   16fa4:	f8 e0       	ldi	r31, 0x08	; 8
   16fa6:	8f 9f       	mul	r24, r31
   16fa8:	c0 01       	movw	r24, r0
   16faa:	11 24       	eor	r1, r1
   16fac:	20 91 59 0f 	lds	r18, 0x0F59	; 0x800f59 <my_lcd+0x4>
   16fb0:	30 91 5a 0f 	lds	r19, 0x0F5A	; 0x800f5a <my_lcd+0x5>
   16fb4:	82 0f       	add	r24, r18
   16fb6:	93 1f       	adc	r25, r19
   16fb8:	90 93 5a 0f 	sts	0x0F5A, r25	; 0x800f5a <my_lcd+0x5>
   16fbc:	80 93 59 0f 	sts	0x0F59, r24	; 0x800f59 <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   16fc0:	10 92 58 0f 	sts	0x0F58, r1	; 0x800f58 <my_lcd+0x3>
   16fc4:	10 92 57 0f 	sts	0x0F57, r1	; 0x800f57 <my_lcd+0x2>
   16fc8:	e0 cf       	rjmp	.-64     	; 0x16f8a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   16fca:	bc 01       	movw	r22, r24
   16fcc:	61 50       	subi	r22, 0x01	; 1
   16fce:	71 09       	sbc	r23, r1
   16fd0:	d2 cf       	rjmp	.-92     	; 0x16f76 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   16fd2:	9d 30       	cpi	r25, 0x0D	; 13
   16fd4:	d1 f2       	breq	.-76     	; 0x16f8a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16fd6:	20 91 57 0f 	lds	r18, 0x0F57	; 0x800f57 <my_lcd+0x2>
   16fda:	30 91 58 0f 	lds	r19, 0x0F58	; 0x800f58 <my_lcd+0x3>
   16fde:	39 87       	std	Y+9, r19	; 0x09
   16fe0:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   16fe2:	20 91 67 0f 	lds	r18, 0x0F67	; 0x800f67 <my_lcd+0x12>
   16fe6:	30 91 68 0f 	lds	r19, 0x0F68	; 0x800f68 <my_lcd+0x13>
   16fea:	48 85       	ldd	r20, Y+8	; 0x08
   16fec:	59 85       	ldd	r21, Y+9	; 0x09
   16fee:	42 17       	cp	r20, r18
   16ff0:	53 07       	cpc	r21, r19
   16ff2:	0c f0       	brlt	.+2      	; 0x16ff6 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x10c>
   16ff4:	88 c0       	rjmp	.+272    	; 0x17106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16ff6:	60 90 59 0f 	lds	r6, 0x0F59	; 0x800f59 <my_lcd+0x4>
   16ffa:	70 90 5a 0f 	lds	r7, 0x0F5A	; 0x800f5a <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   16ffe:	20 91 69 0f 	lds	r18, 0x0F69	; 0x800f69 <my_lcd+0x14>
   17002:	30 91 6a 0f 	lds	r19, 0x0F6A	; 0x800f6a <my_lcd+0x15>
   17006:	62 16       	cp	r6, r18
   17008:	73 06       	cpc	r7, r19
   1700a:	0c f0       	brlt	.+2      	; 0x1700e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x124>
   1700c:	7c c0       	rjmp	.+248    	; 0x17106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1700e:	50 91 61 0f 	lds	r21, 0x0F61	; 0x800f61 <my_lcd+0xc>
   17012:	5a 83       	std	Y+2, r21	; 0x02
   17014:	c5 2e       	mov	r12, r21
   17016:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   17018:	28 85       	ldd	r18, Y+8	; 0x08
   1701a:	39 85       	ldd	r19, Y+9	; 0x09
   1701c:	e6 e0       	ldi	r30, 0x06	; 6
   1701e:	5e 9f       	mul	r21, r30
   17020:	20 0d       	add	r18, r0
   17022:	31 1d       	adc	r19, r1
   17024:	11 24       	eor	r1, r1
   17026:	12 16       	cp	r1, r18
   17028:	13 06       	cpc	r1, r19
   1702a:	0c f0       	brlt	.+2      	; 0x1702e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x144>
   1702c:	6c c0       	rjmp	.+216    	; 0x17106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   1702e:	96 01       	movw	r18, r12
   17030:	93 e0       	ldi	r25, 0x03	; 3
   17032:	22 0f       	add	r18, r18
   17034:	33 1f       	adc	r19, r19
   17036:	9a 95       	dec	r25
   17038:	e1 f7       	brne	.-8      	; 0x17032 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x148>
   1703a:	26 0d       	add	r18, r6
   1703c:	37 1d       	adc	r19, r7
   1703e:	12 16       	cp	r1, r18
   17040:	13 06       	cpc	r1, r19
   17042:	0c f0       	brlt	.+2      	; 0x17046 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x15c>
   17044:	60 c0       	rjmp	.+192    	; 0x17106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   17046:	80 3b       	cpi	r24, 0xB0	; 176
   17048:	08 f0       	brcs	.+2      	; 0x1704c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   1704a:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1704c:	f0 91 62 0f 	lds	r31, 0x0F62	; 0x800f62 <my_lcd+0xd>
   17050:	ff 83       	std	Y+7, r31	; 0x07
   17052:	20 90 5d 0f 	lds	r2, 0x0F5D	; 0x800f5d <my_lcd+0x8>
   17056:	30 90 5e 0f 	lds	r3, 0x0F5E	; 0x800f5e <my_lcd+0x9>
   1705a:	20 91 5b 0f 	lds	r18, 0x0F5B	; 0x800f5b <my_lcd+0x6>
   1705e:	30 91 5c 0f 	lds	r19, 0x0F5C	; 0x800f5c <my_lcd+0x7>
   17062:	3c 83       	std	Y+4, r19	; 0x04
   17064:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   17066:	48 85       	ldd	r20, Y+8	; 0x08
   17068:	59 85       	ldd	r21, Y+9	; 0x09
   1706a:	5d 87       	std	Y+13, r21	; 0x0d
   1706c:	4c 87       	std	Y+12, r20	; 0x0c
   1706e:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   17070:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   17072:	28 ec       	ldi	r18, 0xC8	; 200
   17074:	38 e8       	ldi	r19, 0x88	; 136
   17076:	24 1b       	sub	r18, r20
   17078:	35 0b       	sbc	r19, r21
   1707a:	f9 01       	movw	r30, r18
   1707c:	45 e0       	ldi	r20, 0x05	; 5
   1707e:	84 9f       	mul	r24, r20
   17080:	e0 0d       	add	r30, r0
   17082:	f1 1d       	adc	r31, r1
   17084:	11 24       	eor	r1, r1
   17086:	fb 87       	std	Y+11, r31	; 0x0b
   17088:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   1708a:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   1708c:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   1708e:	55 30       	cpi	r21, 0x05	; 5
   17090:	29 f0       	breq	.+10     	; 0x1709c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   17092:	ea 85       	ldd	r30, Y+10	; 0x0a
   17094:	fb 85       	ldd	r31, Y+11	; 0x0b
   17096:	ea 0d       	add	r30, r10
   17098:	fb 1d       	adc	r31, r11
   1709a:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   1709c:	23 01       	movw	r4, r6
   1709e:	91 2c       	mov	r9, r1
   170a0:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   170a2:	8e 2f       	mov	r24, r30
   170a4:	90 e0       	ldi	r25, 0x00	; 0
   170a6:	99 87       	std	Y+9, r25	; 0x09
   170a8:	88 87       	std	Y+8, r24	; 0x08
   170aa:	e0 ff       	sbrs	r30, 0
   170ac:	3c c0       	rjmp	.+120    	; 0x17126 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   170ae:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   170b0:	2b 81       	ldd	r18, Y+3	; 0x03
   170b2:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   170b4:	eb 80       	ldd	r14, Y+3	; 0x03
   170b6:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   170b8:	91 30       	cpi	r25, 0x01	; 1
   170ba:	09 f0       	breq	.+2      	; 0x170be <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
   170bc:	42 c0       	rjmp	.+132    	; 0x17142 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   170be:	a3 01       	movw	r20, r6
   170c0:	48 0d       	add	r20, r8
   170c2:	59 1d       	adc	r21, r9
   170c4:	b5 01       	movw	r22, r10
   170c6:	85 e5       	ldi	r24, 0x55	; 85
   170c8:	9f e0       	ldi	r25, 0x0F	; 15
   170ca:	0e 94 6d 4b 	call	0x96da	; 0x96da <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   170ce:	e8 85       	ldd	r30, Y+8	; 0x08
   170d0:	f9 85       	ldd	r31, Y+9	; 0x09
   170d2:	f5 95       	asr	r31
   170d4:	e7 95       	ror	r30
   170d6:	3f ef       	ldi	r19, 0xFF	; 255
   170d8:	83 1a       	sub	r8, r19
   170da:	93 0a       	sbc	r9, r19
   170dc:	4c 0c       	add	r4, r12
   170de:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   170e0:	48 e0       	ldi	r20, 0x08	; 8
   170e2:	84 16       	cp	r8, r20
   170e4:	91 04       	cpc	r9, r1
   170e6:	e9 f6       	brne	.-70     	; 0x170a2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b8>
   170e8:	5f ef       	ldi	r21, 0xFF	; 255
   170ea:	a5 1a       	sub	r10, r21
   170ec:	b5 0a       	sbc	r11, r21
   170ee:	8c 85       	ldd	r24, Y+12	; 0x0c
   170f0:	9d 85       	ldd	r25, Y+13	; 0x0d
   170f2:	8c 0d       	add	r24, r12
   170f4:	9d 1d       	adc	r25, r13
   170f6:	9d 87       	std	Y+13, r25	; 0x0d
   170f8:	8c 87       	std	Y+12, r24	; 0x0c
   170fa:	99 81       	ldd	r25, Y+1	; 0x01
   170fc:	9f 5f       	subi	r25, 0xFF	; 255
   170fe:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   17100:	96 30       	cpi	r25, 0x06	; 6
   17102:	09 f0       	breq	.+2      	; 0x17106 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   17104:	c2 cf       	rjmp	.-124    	; 0x1708a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   17106:	20 91 61 0f 	lds	r18, 0x0F61	; 0x800f61 <my_lcd+0xc>
   1710a:	80 91 57 0f 	lds	r24, 0x0F57	; 0x800f57 <my_lcd+0x2>
   1710e:	90 91 58 0f 	lds	r25, 0x0F58	; 0x800f58 <my_lcd+0x3>
   17112:	e6 e0       	ldi	r30, 0x06	; 6
   17114:	2e 9f       	mul	r18, r30
   17116:	80 0d       	add	r24, r0
   17118:	91 1d       	adc	r25, r1
   1711a:	11 24       	eor	r1, r1
   1711c:	90 93 58 0f 	sts	0x0F58, r25	; 0x800f58 <my_lcd+0x3>
   17120:	80 93 57 0f 	sts	0x0F57, r24	; 0x800f57 <my_lcd+0x2>
   17124:	32 cf       	rjmp	.-412    	; 0x16f8a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   17126:	eb 81       	ldd	r30, Y+3	; 0x03
   17128:	fc 81       	ldd	r31, Y+4	; 0x04
   1712a:	2e 16       	cp	r2, r30
   1712c:	3f 06       	cpc	r3, r31
   1712e:	79 f2       	breq	.-98     	; 0x170ce <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   17130:	ff 81       	ldd	r31, Y+7	; 0x07
   17132:	f1 11       	cpse	r31, r1
   17134:	cc cf       	rjmp	.-104    	; 0x170ce <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   17136:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   17138:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   1713a:	21 30       	cpi	r18, 0x01	; 1
   1713c:	11 f4       	brne	.+4      	; 0x17142 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   1713e:	91 01       	movw	r18, r2
   17140:	be cf       	rjmp	.-132    	; 0x170be <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   17142:	86 01       	movw	r16, r12
   17144:	96 01       	movw	r18, r12
   17146:	a2 01       	movw	r20, r4
   17148:	6c 85       	ldd	r22, Y+12	; 0x0c
   1714a:	7d 85       	ldd	r23, Y+13	; 0x0d
   1714c:	85 e5       	ldi	r24, 0x55	; 85
   1714e:	9f e0       	ldi	r25, 0x0F	; 15
   17150:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   17154:	bc cf       	rjmp	.-136    	; 0x170ce <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   17156:	2d 96       	adiw	r28, 0x0d	; 13
   17158:	0f b6       	in	r0, 0x3f	; 63
   1715a:	f8 94       	cli
   1715c:	de bf       	out	0x3e, r29	; 62
   1715e:	0f be       	out	0x3f, r0	; 63
   17160:	cd bf       	out	0x3d, r28	; 61
   17162:	df 91       	pop	r29
   17164:	cf 91       	pop	r28
   17166:	1f 91       	pop	r17
   17168:	0f 91       	pop	r16
   1716a:	ff 90       	pop	r15
   1716c:	ef 90       	pop	r14
   1716e:	df 90       	pop	r13
   17170:	cf 90       	pop	r12
   17172:	bf 90       	pop	r11
   17174:	af 90       	pop	r10
   17176:	9f 90       	pop	r9
   17178:	8f 90       	pop	r8
   1717a:	7f 90       	pop	r7
   1717c:	6f 90       	pop	r6
   1717e:	5f 90       	pop	r5
   17180:	4f 90       	pop	r4
   17182:	3f 90       	pop	r3
   17184:	2f 90       	pop	r2
   17186:	08 95       	ret

00017188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>:
_ZN12PubSubClient8readByteEPh.constprop.160():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   17188:	cf 92       	push	r12
   1718a:	df 92       	push	r13
   1718c:	ef 92       	push	r14
   1718e:	ff 92       	push	r15
   17190:	cf 93       	push	r28
   17192:	df 93       	push	r29
   17194:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   17196:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1719a:	6b 01       	movw	r12, r22
   1719c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   1719e:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   171a2:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   171a6:	dc 01       	movw	r26, r24
   171a8:	ed 91       	ld	r30, X+
   171aa:	fc 91       	ld	r31, X
   171ac:	00 84       	ldd	r0, Z+8	; 0x08
   171ae:	f1 85       	ldd	r31, Z+9	; 0x09
   171b0:	e0 2d       	mov	r30, r0
   171b2:	19 95       	eicall
   171b4:	89 2b       	or	r24, r25
   171b6:	69 f4       	brne	.+26     	; 0x171d2 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   171b8:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 10)){
   171bc:	6c 19       	sub	r22, r12
   171be:	7d 09       	sbc	r23, r13
   171c0:	8e 09       	sbc	r24, r14
   171c2:	9f 09       	sbc	r25, r15
   171c4:	62 33       	cpi	r22, 0x32	; 50
   171c6:	71 05       	cpc	r23, r1
   171c8:	81 05       	cpc	r24, r1
   171ca:	91 05       	cpc	r25, r1
   171cc:	40 f3       	brcs	.-48     	; 0x1719e <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   171ce:	80 e0       	ldi	r24, 0x00	; 0
   171d0:	0d c0       	rjmp	.+26     	; 0x171ec <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   171d2:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   171d6:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   171da:	dc 01       	movw	r26, r24
   171dc:	ed 91       	ld	r30, X+
   171de:	fc 91       	ld	r31, X
   171e0:	02 84       	ldd	r0, Z+10	; 0x0a
   171e2:	f3 85       	ldd	r31, Z+11	; 0x0b
   171e4:	e0 2d       	mov	r30, r0
   171e6:	19 95       	eicall
   171e8:	88 83       	st	Y, r24
   171ea:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   171ec:	df 91       	pop	r29
   171ee:	cf 91       	pop	r28
   171f0:	ff 90       	pop	r15
   171f2:	ef 90       	pop	r14
   171f4:	df 90       	pop	r13
   171f6:	cf 90       	pop	r12
   171f8:	08 95       	ret

000171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh.constprop.230():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	y0=0;
	x=0xffff;
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_SetBacklight(uint8_t ibacklight)
   171fa:	1f 93       	push	r17
   171fc:	cf 93       	push	r28
   171fe:	df 93       	push	r29
   17200:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:59
{
backlight = ibacklight;
   17202:	c2 e3       	ldi	r28, 0x32	; 50
   17204:	df e0       	ldi	r29, 0x0F	; 15
   17206:	8f 87       	std	Y+15, r24	; 0x0f
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:60
TCS_LOW;
   17208:	e9 89       	ldd	r30, Y+17	; 0x11
   1720a:	fa 89       	ldd	r31, Y+18	; 0x12
   1720c:	90 81       	ld	r25, Z
   1720e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   17210:	80 95       	com	r24
   17212:	89 23       	and	r24, r25
   17214:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:61
SDCS_LOW;
   17216:	eb 8d       	ldd	r30, Y+27	; 0x1b
   17218:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1721a:	90 81       	ld	r25, Z
   1721c:	8a a1       	ldd	r24, Y+34	; 0x22
   1721e:	80 95       	com	r24
   17220:	89 23       	and	r24, r25
   17222:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:62
delay_hus(200);
   17224:	68 ec       	ldi	r22, 0xC8	; 200
   17226:	70 e0       	ldi	r23, 0x00	; 0
   17228:	80 e0       	ldi	r24, 0x00	; 0
   1722a:	90 e0       	ldi	r25, 0x00	; 0
   1722c:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
TCS_HIGH;
   17230:	e9 89       	ldd	r30, Y+17	; 0x11
   17232:	fa 89       	ldd	r31, Y+18	; 0x12
   17234:	80 81       	ld	r24, Z
   17236:	9d 8d       	ldd	r25, Y+29	; 0x1d
   17238:	89 2b       	or	r24, r25
   1723a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
SDCS_HIGH;
   1723c:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1723e:	fc 8d       	ldd	r31, Y+28	; 0x1c
   17240:	80 81       	ld	r24, Z
   17242:	9a a1       	ldd	r25, Y+34	; 0x22
   17244:	89 2b       	or	r24, r25
   17246:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:65
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
   17248:	85 e5       	ldi	r24, 0x55	; 85
   1724a:	0e 94 29 b7 	call	0x16e52	; 0x16e52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
TP_Write_Byte_LowSpeed(ibacklight);
   1724e:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:67
}
   17250:	df 91       	pop	r29
   17252:	cf 91       	pop	r28
   17254:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
TP_Write_Byte_LowSpeed(ibacklight);
   17256:	0c 94 29 b7 	jmp	0x16e52	; 0x16e52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

0001725a <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.229():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1725a:	ef 92       	push	r14
   1725c:	ff 92       	push	r15
   1725e:	0f 93       	push	r16
   17260:	1f 93       	push	r17
   17262:	cf 93       	push	r28
   17264:	df 93       	push	r29
   17266:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   17268:	ea 01       	movw	r28, r20
   1726a:	c8 1b       	sub	r28, r24
   1726c:	d9 0b       	sbc	r29, r25
   1726e:	9e 01       	movw	r18, r28
   17270:	2f 5f       	subi	r18, 0xFF	; 255
   17272:	3f 4f       	sbci	r19, 0xFF	; 255
   17274:	df 01       	movw	r26, r30
   17276:	a6 1b       	sub	r26, r22
   17278:	b7 0b       	sbc	r27, r23
   1727a:	8d 01       	movw	r16, r26
   1727c:	0f 5f       	subi	r16, 0xFF	; 255
   1727e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   17280:	37 ff       	sbrs	r19, 7
   17282:	04 c0       	rjmp	.+8      	; 0x1728c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   17284:	9e 01       	movw	r18, r28
   17286:	20 95       	com	r18
   17288:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   1728a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   1728c:	17 ff       	sbrs	r17, 7
   1728e:	04 c0       	rjmp	.+8      	; 0x17298 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   17290:	8d 01       	movw	r16, r26
   17292:	00 95       	com	r16
   17294:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   17296:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   17298:	e0 90 5f 0f 	lds	r14, 0x0F5F	; 0x800f5f <my_lcd+0xa>
   1729c:	f0 90 60 0f 	lds	r15, 0x0F60	; 0x800f60 <my_lcd+0xb>
   172a0:	ab 01       	movw	r20, r22
   172a2:	bc 01       	movw	r22, r24
   172a4:	85 e5       	ldi	r24, 0x55	; 85
   172a6:	9f e0       	ldi	r25, 0x0F	; 15
   172a8:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   172ac:	df 91       	pop	r29
   172ae:	cf 91       	pop	r28
   172b0:	1f 91       	pop	r17
   172b2:	0f 91       	pop	r16
   172b4:	ff 90       	pop	r15
   172b6:	ef 90       	pop	r14
   172b8:	08 95       	ret

000172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.226():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   172ba:	ef 92       	push	r14
   172bc:	ff 92       	push	r15
   172be:	0f 93       	push	r16
   172c0:	1f 93       	push	r17
   172c2:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   172c4:	e0 90 5f 0f 	lds	r14, 0x0F5F	; 0x800f5f <my_lcd+0xa>
   172c8:	f0 90 60 0f 	lds	r15, 0x0F60	; 0x800f60 <my_lcd+0xb>
   172cc:	01 e0       	ldi	r16, 0x01	; 1
   172ce:	10 e0       	ldi	r17, 0x00	; 0
   172d0:	ab 01       	movw	r20, r22
   172d2:	bc 01       	movw	r22, r24
   172d4:	85 e5       	ldi	r24, 0x55	; 85
   172d6:	9f e0       	ldi	r25, 0x0F	; 15
   172d8:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   172dc:	1f 91       	pop	r17
   172de:	0f 91       	pop	r16
   172e0:	ff 90       	pop	r15
   172e2:	ef 90       	pop	r14
   172e4:	08 95       	ret

000172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.225():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   172e6:	8f 92       	push	r8
   172e8:	9f 92       	push	r9
   172ea:	af 92       	push	r10
   172ec:	bf 92       	push	r11
   172ee:	cf 92       	push	r12
   172f0:	df 92       	push	r13
   172f2:	ef 92       	push	r14
   172f4:	ff 92       	push	r15
   172f6:	0f 93       	push	r16
   172f8:	1f 93       	push	r17
   172fa:	cf 93       	push	r28
   172fc:	df 93       	push	r29
   172fe:	6c 01       	movw	r12, r24
   17300:	eb 01       	movw	r28, r22
   17302:	4a 01       	movw	r8, r20
   17304:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   17306:	9a 01       	movw	r18, r20
   17308:	28 1b       	sub	r18, r24
   1730a:	39 0b       	sbc	r19, r25
   1730c:	89 01       	movw	r16, r18
   1730e:	0f 5f       	subi	r16, 0xFF	; 255
   17310:	1f 4f       	sbci	r17, 0xFF	; 255
   17312:	c7 01       	movw	r24, r14
   17314:	86 1b       	sub	r24, r22
   17316:	97 0b       	sbc	r25, r23
   17318:	5c 01       	movw	r10, r24
   1731a:	4f ef       	ldi	r20, 0xFF	; 255
   1731c:	a4 1a       	sub	r10, r20
   1731e:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   17320:	17 ff       	sbrs	r17, 7
   17322:	04 c0       	rjmp	.+8      	; 0x1732c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   17324:	89 01       	movw	r16, r18
   17326:	00 95       	com	r16
   17328:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   1732a:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   1732c:	b7 fe       	sbrs	r11, 7
   1732e:	04 c0       	rjmp	.+8      	; 0x17338 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   17330:	5c 01       	movw	r10, r24
   17332:	a0 94       	com	r10
   17334:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   17336:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   17338:	a8 01       	movw	r20, r16
   1733a:	be 01       	movw	r22, r28
   1733c:	c6 01       	movw	r24, r12
   1733e:	0e 94 5d b9 	call	0x172ba	; 0x172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   17342:	a8 01       	movw	r20, r16
   17344:	b7 01       	movw	r22, r14
   17346:	c6 01       	movw	r24, r12
   17348:	0e 94 5d b9 	call	0x172ba	; 0x172ba <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   1734c:	e0 90 5f 0f 	lds	r14, 0x0F5F	; 0x800f5f <my_lcd+0xa>
   17350:	f0 90 60 0f 	lds	r15, 0x0F60	; 0x800f60 <my_lcd+0xb>
   17354:	85 01       	movw	r16, r10
   17356:	21 e0       	ldi	r18, 0x01	; 1
   17358:	30 e0       	ldi	r19, 0x00	; 0
   1735a:	ae 01       	movw	r20, r28
   1735c:	b6 01       	movw	r22, r12
   1735e:	85 e5       	ldi	r24, 0x55	; 85
   17360:	9f e0       	ldi	r25, 0x0F	; 15
   17362:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   17366:	e0 90 5f 0f 	lds	r14, 0x0F5F	; 0x800f5f <my_lcd+0xa>
   1736a:	f0 90 60 0f 	lds	r15, 0x0F60	; 0x800f60 <my_lcd+0xb>
   1736e:	21 e0       	ldi	r18, 0x01	; 1
   17370:	30 e0       	ldi	r19, 0x00	; 0
   17372:	ae 01       	movw	r20, r28
   17374:	b4 01       	movw	r22, r8
   17376:	85 e5       	ldi	r24, 0x55	; 85
   17378:	9f e0       	ldi	r25, 0x0F	; 15
   1737a:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.225():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   1737e:	df 91       	pop	r29
   17380:	cf 91       	pop	r28
   17382:	1f 91       	pop	r17
   17384:	0f 91       	pop	r16
   17386:	ff 90       	pop	r15
   17388:	ef 90       	pop	r14
   1738a:	df 90       	pop	r13
   1738c:	cf 90       	pop	r12
   1738e:	bf 90       	pop	r11
   17390:	af 90       	pop	r10
   17392:	9f 90       	pop	r9
   17394:	8f 90       	pop	r8
   17396:	08 95       	ret

00017398 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.222():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   17398:	cf 92       	push	r12
   1739a:	df 92       	push	r13
   1739c:	ef 92       	push	r14
   1739e:	ff 92       	push	r15
   173a0:	6b 01       	movw	r12, r22
   173a2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   173a4:	80 91 1a 0e 	lds	r24, 0x0E1A	; 0x800e1a <SRAM+0x4>
   173a8:	90 91 1b 0e 	lds	r25, 0x0E1B	; 0x800e1b <SRAM+0x5>
   173ac:	a0 91 1c 0e 	lds	r26, 0x0E1C	; 0x800e1c <SRAM+0x6>
   173b0:	b0 91 1d 0e 	lds	r27, 0x0E1D	; 0x800e1d <SRAM+0x7>
   173b4:	01 97       	sbiw	r24, 0x01	; 1
   173b6:	a1 40       	sbci	r26, 0x01	; 1
   173b8:	b1 05       	cpc	r27, r1
   173ba:	48 f0       	brcs	.+18     	; 0x173ce <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   173bc:	b7 01       	movw	r22, r14
   173be:	88 27       	eor	r24, r24
   173c0:	99 27       	eor	r25, r25
   173c2:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   173c6:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   173ca:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   173ce:	99 27       	eor	r25, r25
   173d0:	8f 2d       	mov	r24, r15
   173d2:	7e 2d       	mov	r23, r14
   173d4:	6d 2d       	mov	r22, r13
   173d6:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   173da:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   173de:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   173e2:	6c 2d       	mov	r22, r12
   173e4:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   173e8:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   173ec:	ff 90       	pop	r15
   173ee:	ef 90       	pop	r14
   173f0:	df 90       	pop	r13
   173f2:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   173f4:	0c 94 3f 8d 	jmp	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>

000173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   173f8:	cf 92       	push	r12
   173fa:	df 92       	push	r13
   173fc:	ef 92       	push	r14
   173fe:	ff 92       	push	r15
   17400:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   17402:	c0 90 1a 0e 	lds	r12, 0x0E1A	; 0x800e1a <SRAM+0x4>
   17406:	d0 90 1b 0e 	lds	r13, 0x0E1B	; 0x800e1b <SRAM+0x5>
   1740a:	e0 90 1c 0e 	lds	r14, 0x0E1C	; 0x800e1c <SRAM+0x6>
   1740e:	f0 90 1d 0e 	lds	r15, 0x0E1D	; 0x800e1d <SRAM+0x7>
   17412:	6c 15       	cp	r22, r12
   17414:	7d 05       	cpc	r23, r13
   17416:	8e 05       	cpc	r24, r14
   17418:	9f 05       	cpc	r25, r15
   1741a:	38 f5       	brcc	.+78     	; 0x1746a <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x72>
   1741c:	c4 2f       	mov	r28, r20
   1741e:	6b 01       	movw	r12, r22
   17420:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   17422:	60 e0       	ldi	r22, 0x00	; 0
   17424:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   17428:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1742c:	62 e0       	ldi	r22, 0x02	; 2
   1742e:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   17432:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   17436:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1743a:	c7 01       	movw	r24, r14
   1743c:	b6 01       	movw	r22, r12
   1743e:	0e 94 cc b9 	call	0x17398	; 0x17398 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   17442:	6c 2f       	mov	r22, r28
   17444:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   17448:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   1744c:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   17450:	61 e0       	ldi	r22, 0x01	; 1
   17452:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   17456:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
   1745a:	81 e0       	ldi	r24, 0x01	; 1
   1745c:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   1745e:	cf 91       	pop	r28
   17460:	ff 90       	pop	r15
   17462:	ef 90       	pop	r14
   17464:	df 90       	pop	r13
   17466:	cf 90       	pop	r12
   17468:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   1746a:	90 e0       	ldi	r25, 0x00	; 0
   1746c:	80 e0       	ldi	r24, 0x00	; 0
   1746e:	f7 cf       	rjmp	.-18     	; 0x1745e <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x66>

00017470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>:
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   17470:	cf 92       	push	r12
   17472:	df 92       	push	r13
   17474:	ef 92       	push	r14
   17476:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   17478:	c0 90 1a 0e 	lds	r12, 0x0E1A	; 0x800e1a <SRAM+0x4>
   1747c:	d0 90 1b 0e 	lds	r13, 0x0E1B	; 0x800e1b <SRAM+0x5>
   17480:	e0 90 1c 0e 	lds	r14, 0x0E1C	; 0x800e1c <SRAM+0x6>
   17484:	f0 90 1d 0e 	lds	r15, 0x0E1D	; 0x800e1d <SRAM+0x7>
   17488:	6c 15       	cp	r22, r12
   1748a:	7d 05       	cpc	r23, r13
   1748c:	8e 05       	cpc	r24, r14
   1748e:	9f 05       	cpc	r25, r15
   17490:	28 f5       	brcc	.+74     	; 0x174dc <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x6c>
   17492:	6b 01       	movw	r12, r22
   17494:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   17496:	60 e0       	ldi	r22, 0x00	; 0
   17498:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   1749c:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   174a0:	63 e0       	ldi	r22, 0x03	; 3
   174a2:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   174a6:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   174aa:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   174ae:	c7 01       	movw	r24, r14
   174b0:	b6 01       	movw	r22, r12
   174b2:	0e 94 cc b9 	call	0x17398	; 0x17398 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   174b6:	6f ef       	ldi	r22, 0xFF	; 255
   174b8:	80 91 16 0e 	lds	r24, 0x0E16	; 0x800e16 <SRAM>
   174bc:	90 91 17 0e 	lds	r25, 0x0E17	; 0x800e17 <SRAM+0x1>
   174c0:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
   174c4:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   174c6:	61 e0       	ldi	r22, 0x01	; 1
   174c8:	80 91 1e 0e 	lds	r24, 0x0E1E	; 0x800e1e <SRAM+0x8>
   174cc:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   174d0:	8f 2d       	mov	r24, r15
   174d2:	ff 90       	pop	r15
   174d4:	ef 90       	pop	r14
   174d6:	df 90       	pop	r13
   174d8:	cf 90       	pop	r12
   174da:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   174dc:	f1 2c       	mov	r15, r1
   174de:	f8 cf       	rjmp	.-16     	; 0x174d0 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x60>

000174e0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.214():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   174e0:	cf 93       	push	r28
   174e2:	df 93       	push	r29
   174e4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   174e6:	fa 01       	movw	r30, r20
   174e8:	32 96       	adiw	r30, 0x02	; 2
   174ea:	e6 0f       	add	r30, r22
   174ec:	f7 1f       	adc	r31, r23
   174ee:	dc 01       	movw	r26, r24
   174f0:	9d 01       	movw	r18, r26
   174f2:	2c 1b       	sub	r18, r28
   174f4:	3d 0b       	sbc	r19, r29
   174f6:	cf 01       	movw	r24, r30
   174f8:	86 1b       	sub	r24, r22
   174fa:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   174fc:	4d 91       	ld	r20, X+
   174fe:	44 23       	and	r20, r20
   17500:	11 f0       	breq	.+4      	; 0x17506 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   17502:	41 93       	st	Z+, r20
   17504:	f5 cf       	rjmp	.-22     	; 0x174f0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   17506:	ac 01       	movw	r20, r24
   17508:	42 1b       	sub	r20, r18
   1750a:	53 0b       	sbc	r21, r19
   1750c:	64 0f       	add	r22, r20
   1750e:	75 1f       	adc	r23, r21
   17510:	fb 01       	movw	r30, r22
   17512:	32 97       	sbiw	r30, 0x02	; 2
   17514:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   17516:	61 50       	subi	r22, 0x01	; 1
   17518:	71 09       	sbc	r23, r1
   1751a:	fb 01       	movw	r30, r22
   1751c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   1751e:	df 91       	pop	r29
   17520:	cf 91       	pop	r28
   17522:	08 95       	ret

00017524 <twi_readFrom.part.0.constprop.201>:
twi_readFrom.part.0.constprop.201():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   17524:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <twi_state.lto_priv.272>
   17528:	91 11       	cpse	r25, r1
   1752a:	fc cf       	rjmp	.-8      	; 0x17524 <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   1752c:	91 e0       	ldi	r25, 0x01	; 1
   1752e:	90 93 00 0d 	sts	0x0D00, r25	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   17532:	90 93 ff 0c 	sts	0x0CFF, r25	; 0x800cff <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   17536:	2f ef       	ldi	r18, 0xFF	; 255
   17538:	20 93 fe 0c 	sts	0x0CFE, r18	; 0x800cfe <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   1753c:	10 92 fd 0c 	sts	0x0CFD, r1	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   17540:	26 0f       	add	r18, r22
   17542:	20 93 fc 0c 	sts	0x0CFC, r18	; 0x800cfc <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   17546:	90 93 fb 0c 	sts	0x0CFB, r25	; 0x800cfb <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   1754a:	90 91 fb 0c 	lds	r25, 0x0CFB	; 0x800cfb <twi_slarw.lto_priv.266>
   1754e:	88 0f       	add	r24, r24
   17550:	89 2b       	or	r24, r25
   17552:	80 93 fb 0c 	sts	0x0CFB, r24	; 0x800cfb <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   17556:	80 91 fa 0c 	lds	r24, 0x0CFA	; 0x800cfa <twi_inRepStart.lto_priv.271>
   1755a:	81 30       	cpi	r24, 0x01	; 1
   1755c:	f9 f4       	brne	.+62     	; 0x1759c <twi_readFrom.part.0.constprop.201+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   1755e:	10 92 fa 0c 	sts	0x0CFA, r1	; 0x800cfa <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   17562:	80 91 fb 0c 	lds	r24, 0x0CFB	; 0x800cfb <twi_slarw.lto_priv.266>
   17566:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   1756a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1756e:	83 fd       	sbrc	r24, 3
   17570:	f8 cf       	rjmp	.-16     	; 0x17562 <twi_readFrom.part.0.constprop.201+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   17572:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   17574:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   17578:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <twi_state.lto_priv.272>
   1757c:	81 30       	cpi	r24, 0x01	; 1
   1757e:	e1 f3       	breq	.-8      	; 0x17578 <twi_readFrom.part.0.constprop.201+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   17580:	80 91 fd 0c 	lds	r24, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
   17584:	86 17       	cp	r24, r22
   17586:	10 f4       	brcc	.+4      	; 0x1758c <twi_readFrom.part.0.constprop.201+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   17588:	60 91 fd 0c 	lds	r22, 0x0CFD	; 0x800cfd <twi_masterBufferIndex.lto_priv.267>
   1758c:	aa ed       	ldi	r26, 0xDA	; 218
   1758e:	bc e0       	ldi	r27, 0x0C	; 12
   17590:	ea eb       	ldi	r30, 0xBA	; 186
   17592:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   17594:	80 e0       	ldi	r24, 0x00	; 0
   17596:	86 13       	cpse	r24, r22
   17598:	03 c0       	rjmp	.+6      	; 0x175a0 <twi_readFrom.part.0.constprop.201+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   1759a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   1759c:	85 ee       	ldi	r24, 0xE5	; 229
   1759e:	ea cf       	rjmp	.-44     	; 0x17574 <twi_readFrom.part.0.constprop.201+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   175a0:	9d 91       	ld	r25, X+
   175a2:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   175a4:	8f 5f       	subi	r24, 0xFF	; 255
   175a6:	f7 cf       	rjmp	.-18     	; 0x17596 <twi_readFrom.part.0.constprop.201+0x72>

000175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>:
_ZN7TwoWire17beginTransmissionEh.constprop.199():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   175a8:	91 e0       	ldi	r25, 0x01	; 1
   175aa:	90 93 b9 0c 	sts	0x0CB9, r25	; 0x800cb9 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   175ae:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   175b2:	10 92 b7 0c 	sts	0x0CB7, r1	; 0x800cb7 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   175b6:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:150
}
   175ba:	08 95       	ret

000175bc <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]>:
_ZN24Temperature_LM75_Derived16readTemperatureCEv.constprop.195():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:82

  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
   175bc:	cf 93       	push	r28
   175be:	df 93       	push	r29
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   175c0:	e0 91 ab 0f 	lds	r30, 0x0FAB	; 0x800fab <lm75_temp+0xb>
   175c4:	f0 91 ac 0f 	lds	r31, 0x0FAC	; 0x800fac <lm75_temp+0xc>
   175c8:	04 80       	ldd	r0, Z+4	; 0x04
   175ca:	f5 81       	ldd	r31, Z+5	; 0x05
   175cc:	e0 2d       	mov	r30, r0
   175ce:	c0 81       	ld	r28, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   175d0:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <lm75_temp+0x2>
   175d4:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   175d8:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   175dc:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   175e0:	dc 01       	movw	r26, r24
   175e2:	ed 91       	ld	r30, X+
   175e4:	fc 91       	ld	r31, X
   175e6:	01 90       	ld	r0, Z+
   175e8:	f0 81       	ld	r31, Z
   175ea:	e0 2d       	mov	r30, r0
   175ec:	6c 2f       	mov	r22, r28
   175ee:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   175f0:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   175f4:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   175f8:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   175fc:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   17600:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   17604:	20 91 a3 0f 	lds	r18, 0x0FA3	; 0x800fa3 <lm75_temp+0x3>
_ZN24Temperature_LM75_Derived16readTemperatureCEv.constprop.195():
   17608:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
   1760a:	29 30       	cpi	r18, 0x09	; 9
   1760c:	08 f4       	brcc	.+2      	; 0x17610 <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]+0x54>
_ZN24Temperature_LM75_Derived16readTemperatureCEv.constprop.195():
   1760e:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
   17610:	60 91 a2 0f 	lds	r22, 0x0FA2	; 0x800fa2 <lm75_temp+0x2>
   17614:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   17618:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   1761c:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   17620:	dc 01       	movw	r26, r24
   17622:	ed 91       	ld	r30, X+
   17624:	fc 91       	ld	r31, X
   17626:	02 84       	ldd	r0, Z+10	; 0x0a
   17628:	f3 85       	ldd	r31, Z+11	; 0x0b
   1762a:	e0 2d       	mov	r30, r0
   1762c:	19 95       	eicall
   1762e:	d8 2f       	mov	r29, r24
   17630:	b0 e0       	ldi	r27, 0x00	; 0
   17632:	cb 2f       	mov	r28, r27
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   17634:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <lm75_temp+0x3>
   17638:	89 30       	cpi	r24, 0x09	; 9
   1763a:	68 f0       	brcs	.+26     	; 0x17656 <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]+0x9a>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   1763c:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   17640:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   17644:	dc 01       	movw	r26, r24
   17646:	ed 91       	ld	r30, X+
   17648:	fc 91       	ld	r31, X
   1764a:	02 84       	ldd	r0, Z+10	; 0x0a
   1764c:	f3 85       	ldd	r31, Z+11	; 0x0b
   1764e:	e0 2d       	mov	r30, r0
   17650:	19 95       	eicall
   17652:	c8 2b       	or	r28, r24
   17654:	d9 2b       	or	r29, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   17656:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <lm75_temp>
   1765a:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <lm75_temp+0x1>
   1765e:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   17662:	60 91 a4 0f 	lds	r22, 0x0FA4	; 0x800fa4 <lm75_temp+0x4>
   17666:	70 91 a5 0f 	lds	r23, 0x0FA5	; 0x800fa5 <lm75_temp+0x5>
   1766a:	6c 23       	and	r22, r28
   1766c:	7d 23       	and	r23, r29
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   1766e:	07 2e       	mov	r0, r23
   17670:	00 0c       	add	r0, r0
   17672:	88 0b       	sbc	r24, r24
   17674:	99 0b       	sbc	r25, r25
   17676:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1767a:	20 91 a7 0f 	lds	r18, 0x0FA7	; 0x800fa7 <lm75_temp+0x7>
   1767e:	30 91 a8 0f 	lds	r19, 0x0FA8	; 0x800fa8 <lm75_temp+0x8>
   17682:	40 91 a9 0f 	lds	r20, 0x0FA9	; 0x800fa9 <lm75_temp+0x9>
   17686:	50 91 aa 0f 	lds	r21, 0x0FAA	; 0x800faa <lm75_temp+0xa>
   1768a:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
_ZN24Temperature_LM75_Derived16readTemperatureCEv.constprop.195():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:84
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
  }
   1768e:	df 91       	pop	r29
   17690:	cf 91       	pop	r28
   17692:	08 95       	ret

00017694 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   17694:	ef 92       	push	r14
   17696:	ff 92       	push	r15
   17698:	0f 93       	push	r16
   1769a:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1769c:	e5 e5       	ldi	r30, 0x55	; 85
   1769e:	ff e0       	ldi	r31, 0x0F	; 15
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   176a0:	04 89       	ldd	r16, Z+20	; 0x14
   176a2:	15 89       	ldd	r17, Z+21	; 0x15
   176a4:	22 89       	ldd	r18, Z+18	; 0x12
   176a6:	33 89       	ldd	r19, Z+19	; 0x13
   176a8:	7c 01       	movw	r14, r24
   176aa:	50 e0       	ldi	r21, 0x00	; 0
   176ac:	40 e0       	ldi	r20, 0x00	; 0
   176ae:	70 e0       	ldi	r23, 0x00	; 0
   176b0:	60 e0       	ldi	r22, 0x00	; 0
   176b2:	cf 01       	movw	r24, r30
   176b4:	0e 94 ba 49 	call	0x9374	; 0x9374 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   176b8:	1f 91       	pop	r17
   176ba:	0f 91       	pop	r16
   176bc:	ff 90       	pop	r15
   176be:	ef 90       	pop	r14
   176c0:	08 95       	ret

000176c2 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>:
_Z19MenuHistoryPrevMenujjh.constprop.192():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   176c2:	80 91 b5 0c 	lds	r24, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   176c6:	88 23       	and	r24, r24
   176c8:	29 f0       	breq	.+10     	; 0x176d4 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
  {
    MenuHistoryIndex--;
   176ca:	81 50       	subi	r24, 0x01	; 1
   176cc:	80 93 b5 0c 	sts	0x0CB5, r24	; 0x800cb5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1181
    MenuPrepareStyle();
   176d0:	0c 94 af a7 	jmp	0x14f5e	; 0x14f5e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1183
  }
}
   176d4:	08 95       	ret

000176d6 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>:
_Z19MenuHistoryNextMenujjh.constprop.191():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   176d6:	20 91 b5 0c 	lds	r18, 0x0CB5	; 0x800cb5 <MenuHistoryIndex>
   176da:	2a 30       	cpi	r18, 0x0A	; 10
   176dc:	70 f4       	brcc	.+28     	; 0x176fa <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
  {
    MenuHistoryIndex++;
   176de:	2f 5f       	subi	r18, 0xFF	; 255
   176e0:	20 93 b5 0c 	sts	0x0CB5, r18	; 0x800cb5 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1190
    MenuHistory[MenuHistoryIndex] = id;
   176e4:	30 e0       	ldi	r19, 0x00	; 0
   176e6:	f9 01       	movw	r30, r18
   176e8:	e5 55       	subi	r30, 0x55	; 85
   176ea:	f3 4f       	sbci	r31, 0xF3	; 243
   176ec:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
    Global_menu_args1[MenuHistoryIndex] = args1;
   176ee:	2f 55       	subi	r18, 0x5F	; 95
   176f0:	33 4f       	sbci	r19, 0xF3	; 243
   176f2:	f9 01       	movw	r30, r18
   176f4:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1192
    MenuPrepareStyle();
   176f6:	0c 94 af a7 	jmp	0x14f5e	; 0x14f5e <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1194
  }
}
   176fa:	08 95       	ret

000176fc <TwoWire::read() [clone .constprop.190]>:
_ZN7TwoWire4readEv.constprop.190():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   176fc:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
   17700:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   17704:	2f ef       	ldi	r18, 0xFF	; 255
   17706:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   17708:	98 17       	cp	r25, r24
   1770a:	48 f4       	brcc	.+18     	; 0x1771e <TwoWire::read() [clone .constprop.190]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   1770c:	e9 2f       	mov	r30, r25
   1770e:	f0 e0       	ldi	r31, 0x00	; 0
   17710:	e6 54       	subi	r30, 0x46	; 70
   17712:	f3 4f       	sbci	r31, 0xF3	; 243
   17714:	20 81       	ld	r18, Z
   17716:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   17718:	9f 5f       	subi	r25, 0xFF	; 255
   1771a:	90 93 a0 0c 	sts	0x0CA0, r25	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   1771e:	c9 01       	movw	r24, r18
   17720:	08 95       	ret

00017722 <TwoWire::write(int) [clone .constprop.189]>:
_ZN7TwoWire5writeEi.constprop.189():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   17722:	68 2f       	mov	r22, r24
   17724:	84 e9       	ldi	r24, 0x94	; 148
   17726:	9f e0       	ldi	r25, 0x0F	; 15
   17728:	0c 94 b0 48 	jmp	0x9160	; 0x9160 <TwoWire::write(unsigned char)>

0001772c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>:
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   1772c:	df 92       	push	r13
   1772e:	ef 92       	push	r14
   17730:	ff 92       	push	r15
   17732:	0f 93       	push	r16
   17734:	1f 93       	push	r17
   17736:	cf 93       	push	r28
   17738:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   1773a:	90 91 29 12 	lds	r25, 0x1229	; 0x801229 <lastDevice>
   1773e:	99 23       	and	r25, r25
   17740:	51 f0       	breq	.+20     	; 0x17756 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   17742:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   17744:	8d 2f       	mov	r24, r29
   17746:	df 91       	pop	r29
   17748:	cf 91       	pop	r28
   1774a:	1f 91       	pop	r17
   1774c:	0f 91       	pop	r16
   1774e:	ff 90       	pop	r15
   17750:	ef 90       	pop	r14
   17752:	df 90       	pop	r13
   17754:	08 95       	ret
   17756:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   17758:	0e 94 98 68 	call	0xd130	; 0xd130 <ds2482owReset(unsigned char)>
   1775c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1775e:	81 11       	cpse	r24, r1
   17760:	f1 cf       	rjmp	.-30     	; 0x17744 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   17762:	60 ef       	ldi	r22, 0xF0	; 240
   17764:	8f 2d       	mov	r24, r15
   17766:	0e 94 40 68 	call	0xd080	; 0xd080 <ds2482owWriteByte(unsigned char, unsigned char)>
   1776a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1776c:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1776e:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   17770:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   17772:	81 11       	cpse	r24, r1
   17774:	e7 cf       	rjmp	.-50     	; 0x17744 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   17776:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <lastDiscrepancy>
   1777a:	08 17       	cp	r16, r24
   1777c:	50 f4       	brcc	.+20     	; 0x17792 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1777e:	ee 2d       	mov	r30, r14
   17780:	f0 e0       	ldi	r31, 0x00	; 0
   17782:	ef 5d       	subi	r30, 0xDF	; 223
   17784:	fd 4e       	sbci	r31, 0xED	; 237
   17786:	80 81       	ld	r24, Z
   17788:	81 23       	and	r24, r17
   1778a:	c1 e0       	ldi	r28, 0x01	; 1
   1778c:	29 f4       	brne	.+10     	; 0x17798 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1778e:	c0 e0       	ldi	r28, 0x00	; 0
   17790:	03 c0       	rjmp	.+6      	; 0x17798 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
   17792:	c1 e0       	ldi	r28, 0x01	; 1
   17794:	80 13       	cpse	r24, r16
   17796:	fb cf       	rjmp	.-10     	; 0x1778e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   17798:	8f 2d       	mov	r24, r15
   1779a:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1779e:	88 e7       	ldi	r24, 0x78	; 120
   177a0:	90 e0       	ldi	r25, 0x00	; 0
   177a2:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   177a6:	90 e0       	ldi	r25, 0x00	; 0
   177a8:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   177aa:	cc 23       	and	r28, r28
   177ac:	11 f0       	breq	.+4      	; 0x177b2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x86>
_Z11owMatchNexthPh.constprop.187():
   177ae:	80 e8       	ldi	r24, 0x80	; 128
   177b0:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   177b2:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   177b6:	84 e9       	ldi	r24, 0x94	; 148
   177b8:	9f e0       	ldi	r25, 0x0F	; 15
   177ba:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
   177be:	81 11       	cpse	r24, r1
   177c0:	53 c0       	rjmp	.+166    	; 0x17868 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x13c>
   177c2:	6e ef       	ldi	r22, 0xFE	; 254
   177c4:	d6 2e       	mov	r13, r22
   177c6:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   177c8:	dd 20       	and	r13, r13
   177ca:	09 f4       	brne	.+2      	; 0x177ce <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xa2>
   177cc:	4f c0       	rjmp	.+158    	; 0x1786c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   177ce:	41 e0       	ldi	r20, 0x01	; 1
   177d0:	6f 2d       	mov	r22, r15
   177d2:	84 e9       	ldi	r24, 0x94	; 148
   177d4:	9f e0       	ldi	r25, 0x0F	; 15
   177d6:	0e 94 db 67 	call	0xcfb6	; 0xcfb6 <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   177da:	80 91 9f 0c 	lds	r24, 0x0C9F	; 0x800c9f <TwoWire::rxBufferLength>
   177de:	90 91 a0 0c 	lds	r25, 0x0CA0	; 0x800ca0 <TwoWire::rxBufferIndex>
   177e2:	89 1b       	sub	r24, r25
   177e4:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   177e6:	18 16       	cp	r1, r24
   177e8:	19 06       	cpc	r1, r25
   177ea:	1c f4       	brge	.+6      	; 0x177f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   177ec:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
   177f0:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   177f2:	c0 fd       	sbrc	r28, 0
   177f4:	e8 cf       	rjmp	.-48     	; 0x177c6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x9a>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   177f6:	2c 2f       	mov	r18, r28
   177f8:	30 e0       	ldi	r19, 0x00	; 0
   177fa:	c9 01       	movw	r24, r18
   177fc:	45 e0       	ldi	r20, 0x05	; 5
   177fe:	95 95       	asr	r25
   17800:	87 95       	ror	r24
   17802:	4a 95       	dec	r20
   17804:	e1 f7       	brne	.-8      	; 0x177fe <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xd2>
   17806:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   17808:	22 0f       	add	r18, r18
   1780a:	23 2f       	mov	r18, r19
   1780c:	22 1f       	adc	r18, r18
   1780e:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   17810:	83 30       	cpi	r24, 0x03	; 3
   17812:	99 f0       	breq	.+38     	; 0x1783a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x10e>
   17814:	ee 2d       	mov	r30, r14
   17816:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   17818:	81 11       	cpse	r24, r1
   1781a:	1b c0       	rjmp	.+54     	; 0x17852 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1781c:	22 23       	and	r18, r18
   1781e:	11 f1       	breq	.+68     	; 0x17864 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   17820:	ef 5d       	subi	r30, 0xDF	; 223
   17822:	fd 4e       	sbci	r31, 0xED	; 237
   17824:	80 81       	ld	r24, Z
   17826:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   17828:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   1782a:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1782c:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1782e:	11 f4       	brne	.+4      	; 0x17834 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   17830:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   17832:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   17834:	88 e0       	ldi	r24, 0x08	; 8
   17836:	e8 12       	cpse	r14, r24
   17838:	9e cf       	rjmp	.-196    	; 0x17776 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   1783a:	01 34       	cpi	r16, 0x41	; 65
   1783c:	08 f4       	brcc	.+2      	; 0x17840 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x114>
   1783e:	81 cf       	rjmp	.-254    	; 0x17742 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   17840:	d0 93 20 12 	sts	0x1220, r29	; 0x801220 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   17844:	81 e0       	ldi	r24, 0x01	; 1
   17846:	d1 11       	cpse	r29, r1
   17848:	80 e0       	ldi	r24, 0x00	; 0
   1784a:	80 93 29 12 	sts	0x1229, r24	; 0x801229 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1784e:	d0 e0       	ldi	r29, 0x00	; 0
   17850:	79 cf       	rjmp	.-270    	; 0x17744 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   17852:	21 11       	cpse	r18, r1
   17854:	e5 cf       	rjmp	.-54     	; 0x17820 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   17856:	ef 5d       	subi	r30, 0xDF	; 223
   17858:	fd 4e       	sbci	r31, 0xED	; 237
   1785a:	80 81       	ld	r24, Z
   1785c:	91 2f       	mov	r25, r17
   1785e:	90 95       	com	r25
   17860:	89 23       	and	r24, r25
   17862:	e2 cf       	rjmp	.-60     	; 0x17828 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   17864:	d0 2f       	mov	r29, r16
   17866:	f7 cf       	rjmp	.-18     	; 0x17856 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   17868:	d3 e0       	ldi	r29, 0x03	; 3
   1786a:	6c cf       	rjmp	.-296    	; 0x17744 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1786c:	d4 e0       	ldi	r29, 0x04	; 4
   1786e:	6a cf       	rjmp	.-300    	; 0x17744 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>

00017870 <one_hw_search_device(unsigned char) [clone .constprop.184]>:
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:231
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
   17870:	ff 92       	push	r15
   17872:	0f 93       	push	r16
   17874:	1f 93       	push	r17
   17876:	cf 93       	push	r28
   17878:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   1787a:	10 92 9e 0c 	sts	0x0C9E, r1	; 0x800c9e <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   1787e:	c0 91 9d 0c 	lds	r28, 0x0C9D	; 0x800c9d <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   17882:	8c 2f       	mov	r24, r28
   17884:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   17888:	84 e9       	ldi	r24, 0x94	; 148
   1788a:	9f e0       	ldi	r25, 0x0F	; 15
   1788c:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
   17890:	81 11       	cpse	r24, r1
   17892:	10 c0       	rjmp	.+32     	; 0x178b4 <one_hw_search_device(unsigned char) [clone .constprop.184]+0x44>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   17894:	8c 2f       	mov	r24, r28
   17896:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   1789a:	82 ed       	ldi	r24, 0xD2	; 210
   1789c:	90 e0       	ldi	r25, 0x00	; 0
   1789e:	0e 94 91 bb 	call	0x17722	; 0x17722 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   178a2:	60 e0       	ldi	r22, 0x00	; 0
   178a4:	84 e9       	ldi	r24, 0x94	; 148
   178a6:	9f e0       	ldi	r25, 0x0F	; 15
   178a8:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   178ac:	84 e9       	ldi	r24, 0x94	; 148
   178ae:	9f e0       	ldi	r25, 0x0F	; 15
   178b0:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   178b4:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <ds2482_address>
   178b8:	0e 94 ce 67 	call	0xcf9c	; 0xcf9c <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   178bc:	80 91 9d 0c 	lds	r24, 0x0C9D	; 0x800c9d <ds2482_address>
   178c0:	0e 94 98 68 	call	0xd130	; 0xd130 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   178c4:	10 91 9d 0c 	lds	r17, 0x0C9D	; 0x800c9d <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   178c8:	10 92 29 12 	sts	0x1229, r1	; 0x801229 <lastDevice>
   178cc:	10 92 20 12 	sts	0x1220, r1	; 0x801220 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   178d0:	81 2f       	mov	r24, r17
   178d2:	0e 94 96 bb 	call	0x1772c	; 0x1772c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   178d6:	81 11       	cpse	r24, r1
   178d8:	31 c0       	rjmp	.+98     	; 0x1793c <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
   178da:	0b e0       	ldi	r16, 0x0B	; 11
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   178dc:	ff 24       	eor	r15, r15
   178de:	f3 94       	inc	r15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   178e0:	d0 91 9e 0c 	lds	r29, 0x0C9E	; 0x800c9e <ds2482_address+0x1>
   178e4:	d6 30       	cpi	r29, 0x06	; 6
   178e6:	50 f5       	brcc	.+84     	; 0x1793c <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   178e8:	c0 91 9c 0c 	lds	r28, 0x0C9C	; 0x800c9c <Global_HWwirenum>
   178ec:	2c 2f       	mov	r18, r28
   178ee:	30 e0       	ldi	r19, 0x00	; 0
   178f0:	a1 e2       	ldi	r26, 0x21	; 33
   178f2:	b2 e1       	ldi	r27, 0x12	; 18
   178f4:	c0 9f       	mul	r28, r16
   178f6:	b0 01       	movw	r22, r0
   178f8:	11 24       	eor	r1, r1
   178fa:	90 e0       	ldi	r25, 0x00	; 0
   178fc:	80 e0       	ldi	r24, 0x00	; 0
   178fe:	4d 91       	ld	r20, X+
   17900:	fc 01       	movw	r30, r24
   17902:	e6 0f       	add	r30, r22
   17904:	f7 1f       	adc	r31, r23
   17906:	e6 5a       	subi	r30, 0xA6	; 166
   17908:	f3 4f       	sbci	r31, 0xF3	; 243
   1790a:	40 83       	st	Z, r20
   1790c:	01 96       	adiw	r24, 0x01	; 1
   1790e:	88 30       	cpi	r24, 0x08	; 8
   17910:	91 05       	cpc	r25, r1
   17912:	a9 f7       	brne	.-22     	; 0x178fe <one_hw_search_device(unsigned char) [clone .constprop.184]+0x8e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   17914:	02 9f       	mul	r16, r18
   17916:	f0 01       	movw	r30, r0
   17918:	03 9f       	mul	r16, r19
   1791a:	f0 0d       	add	r31, r0
   1791c:	11 24       	eor	r1, r1
   1791e:	e6 5a       	subi	r30, 0xA6	; 166
   17920:	f3 4f       	sbci	r31, 0xF3	; 243
   17922:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   17924:	f1 86       	std	Z+9, r15	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   17926:	81 2f       	mov	r24, r17
   17928:	0e 94 96 bb 	call	0x1772c	; 0x1772c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   1792c:	df 5f       	subi	r29, 0xFF	; 255
   1792e:	d0 93 9e 0c 	sts	0x0C9E, r29	; 0x800c9e <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   17932:	cf 5f       	subi	r28, 0xFF	; 255
   17934:	c0 93 9c 0c 	sts	0x0C9C, r28	; 0x800c9c <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   17938:	85 30       	cpi	r24, 0x05	; 5
   1793a:	91 f6       	brne	.-92     	; 0x178e0 <one_hw_search_device(unsigned char) [clone .constprop.184]+0x70>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   1793c:	df 91       	pop	r29
   1793e:	cf 91       	pop	r28
   17940:	1f 91       	pop	r17
   17942:	0f 91       	pop	r16
   17944:	ff 90       	pop	r15
   17946:	08 95       	ret

00017948 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>:
_Z10parseBytesPKccPhii.constprop.183():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
{
 return x;
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
   17948:	cf 92       	push	r12
   1794a:	df 92       	push	r13
   1794c:	ef 92       	push	r14
   1794e:	ff 92       	push	r15
   17950:	0f 93       	push	r16
   17952:	1f 93       	push	r17
   17954:	cf 93       	push	r28
   17956:	df 93       	push	r29
   17958:	ec 01       	movw	r28, r24
   1795a:	8a 01       	movw	r16, r20
   1795c:	7a 01       	movw	r14, r20
   1795e:	e2 0e       	add	r14, r18
   17960:	f3 1e       	adc	r15, r19
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   17962:	c6 2e       	mov	r12, r22
   17964:	66 0f       	add	r22, r22
   17966:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   17968:	4a e0       	ldi	r20, 0x0A	; 10
   1796a:	50 e0       	ldi	r21, 0x00	; 0
   1796c:	70 e0       	ldi	r23, 0x00	; 0
   1796e:	60 e0       	ldi	r22, 0x00	; 0
   17970:	ce 01       	movw	r24, r28
   17972:	0e 94 4c f0 	call	0x1e098	; 0x1e098 <strtoul>
   17976:	f8 01       	movw	r30, r16
   17978:	61 93       	st	Z+, r22
   1797a:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   1797c:	b6 01       	movw	r22, r12
   1797e:	ce 01       	movw	r24, r28
   17980:	0e 94 1e fe 	call	0x1fc3c	; 0x1fc3c <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   17984:	00 97       	sbiw	r24, 0x00	; 0
   17986:	49 f0       	breq	.+18     	; 0x1799a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
   17988:	fc 01       	movw	r30, r24
   1798a:	20 81       	ld	r18, Z
   1798c:	22 23       	and	r18, r18
   1798e:	29 f0       	breq	.+10     	; 0x1799a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
   17990:	ec 01       	movw	r28, r24
   17992:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   17994:	0e 15       	cp	r16, r14
   17996:	1f 05       	cpc	r17, r15
   17998:	39 f7       	brne	.-50     	; 0x17968 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x20>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
  }
}
   1799a:	df 91       	pop	r29
   1799c:	cf 91       	pop	r28
   1799e:	1f 91       	pop	r17
   179a0:	0f 91       	pop	r16
   179a2:	ff 90       	pop	r15
   179a4:	ef 90       	pop	r14
   179a6:	df 90       	pop	r13
   179a8:	cf 90       	pop	r12
   179aa:	08 95       	ret

000179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>:
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   179ac:	8f 92       	push	r8
   179ae:	9f 92       	push	r9
   179b0:	af 92       	push	r10
   179b2:	bf 92       	push	r11
   179b4:	cf 92       	push	r12
   179b6:	df 92       	push	r13
   179b8:	ef 92       	push	r14
   179ba:	ff 92       	push	r15
   179bc:	0f 93       	push	r16
   179be:	1f 93       	push	r17
   179c0:	cf 93       	push	r28
   179c2:	df 93       	push	r29
   179c4:	00 d0       	rcall	.+0      	; 0x179c6 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1a>
   179c6:	00 d0       	rcall	.+0      	; 0x179c8 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1c>
   179c8:	cd b7       	in	r28, 0x3d	; 61
   179ca:	de b7       	in	r29, 0x3e	; 62
   179cc:	6c 01       	movw	r12, r24
   179ce:	5b 01       	movw	r10, r22
   179d0:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   179d2:	10 92 62 0f 	sts	0x0F62, r1	; 0x800f62 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   179d6:	20 93 61 0f 	sts	0x0F61, r18	; 0x800f61 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   179da:	10 93 5c 0f 	sts	0x0F5C, r17	; 0x800f5c <my_lcd+0x7>
   179de:	00 93 5b 0f 	sts	0x0F5B, r16	; 0x800f5b <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   179e2:	f0 92 5e 0f 	sts	0x0F5E, r15	; 0x800f5e <my_lcd+0x9>
   179e6:	e0 92 5d 0f 	sts	0x0F5D, r14	; 0x800f5d <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   179ea:	1a 82       	std	Y+2, r1	; 0x02
   179ec:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   179ee:	1c 82       	std	Y+4, r1	; 0x04
   179f0:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   179f2:	1e 82       	std	Y+6, r1	; 0x06
   179f4:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   179f6:	00 97       	sbiw	r24, 0x00	; 0
   179f8:	69 f1       	breq	.+90     	; 0x17a54 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
   179fa:	fc 01       	movw	r30, r24
   179fc:	01 90       	ld	r0, Z+
   179fe:	00 20       	and	r0, r0
   17a00:	e9 f7       	brne	.-6      	; 0x179fc <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x50>
   17a02:	31 97       	sbiw	r30, 0x01	; 1
   17a04:	8f 01       	movw	r16, r30
   17a06:	08 1b       	sub	r16, r24
   17a08:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   17a0a:	b8 01       	movw	r22, r16
   17a0c:	6f 5f       	subi	r22, 0xFF	; 255
   17a0e:	7f 4f       	sbci	r23, 0xFF	; 255
   17a10:	90 e0       	ldi	r25, 0x00	; 0
   17a12:	80 e0       	ldi	r24, 0x00	; 0
   17a14:	0e 94 24 fd 	call	0x1fa48	; 0x1fa48 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   17a18:	00 97       	sbiw	r24, 0x00	; 0
   17a1a:	81 f0       	breq	.+32     	; 0x17a3c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   17a1c:	9a 83       	std	Y+2, r25	; 0x02
   17a1e:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   17a20:	1c 83       	std	Y+4, r17	; 0x04
   17a22:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   17a24:	2d 81       	ldd	r18, Y+5	; 0x05
   17a26:	3e 81       	ldd	r19, Y+6	; 0x06
   17a28:	23 2b       	or	r18, r19
   17a2a:	11 f4       	brne	.+4      	; 0x17a30 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x84>
   17a2c:	fc 01       	movw	r30, r24
   17a2e:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   17a30:	1e 83       	std	Y+6, r17	; 0x06
   17a32:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   17a34:	b6 01       	movw	r22, r12
   17a36:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
   17a3a:	0c c0       	rjmp	.+24     	; 0x17a54 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   17a3c:	89 81       	ldd	r24, Y+1	; 0x01
   17a3e:	9a 81       	ldd	r25, Y+2	; 0x02
   17a40:	00 97       	sbiw	r24, 0x00	; 0
   17a42:	11 f0       	breq	.+4      	; 0x17a48 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x9c>
   17a44:	0e 94 94 f6 	call	0x1ed28	; 0x1ed28 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   17a48:	1a 82       	std	Y+2, r1	; 0x02
   17a4a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   17a4c:	1e 82       	std	Y+6, r1	; 0x06
   17a4e:	1d 82       	std	Y+5, r1	; 0x05
   17a50:	1c 82       	std	Y+4, r1	; 0x04
   17a52:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1728
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   17a54:	a4 01       	movw	r20, r8
   17a56:	b5 01       	movw	r22, r10
   17a58:	ce 01       	movw	r24, r28
   17a5a:	01 96       	adiw	r24, 0x01	; 1
   17a5c:	0e 94 75 b7 	call	0x16eea	; 0x16eea <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   17a60:	89 81       	ldd	r24, Y+1	; 0x01
   17a62:	9a 81       	ldd	r25, Y+2	; 0x02
   17a64:	0e 94 94 f6 	call	0x1ed28	; 0x1ed28 <free>
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
}
   17a68:	26 96       	adiw	r28, 0x06	; 6
   17a6a:	0f b6       	in	r0, 0x3f	; 63
   17a6c:	f8 94       	cli
   17a6e:	de bf       	out	0x3e, r29	; 62
   17a70:	0f be       	out	0x3f, r0	; 63
   17a72:	cd bf       	out	0x3d, r28	; 61
   17a74:	df 91       	pop	r29
   17a76:	cf 91       	pop	r28
   17a78:	1f 91       	pop	r17
   17a7a:	0f 91       	pop	r16
   17a7c:	ff 90       	pop	r15
   17a7e:	ef 90       	pop	r14
   17a80:	df 90       	pop	r13
   17a82:	cf 90       	pop	r12
   17a84:	bf 90       	pop	r11
   17a86:	af 90       	pop	r10
   17a88:	9f 90       	pop	r9
   17a8a:	8f 90       	pop	r8
   17a8c:	08 95       	ret

00017a8e <PubSubClient::subscribe(char const*) [clone .constprop.166]>:
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468
    lastOutActivity = millis();
    return (rc == 1+llen+length);
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
   17a8e:	cf 93       	push	r28
   17a90:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   17a92:	fc 01       	movw	r30, r24
   17a94:	01 90       	ld	r0, Z+
   17a96:	00 20       	and	r0, r0
   17a98:	e9 f7       	brne	.-6      	; 0x17a94 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x6>
   17a9a:	9f 01       	movw	r18, r30
   17a9c:	28 1b       	sub	r18, r24
   17a9e:	39 0b       	sbc	r19, r25
   17aa0:	28 5f       	subi	r18, 0xF8	; 248
   17aa2:	3f 4f       	sbci	r19, 0xFF	; 255
   17aa4:	21 30       	cpi	r18, 0x01	; 1
   17aa6:	32 40       	sbci	r19, 0x02	; 2
   17aa8:	98 f5       	brcc	.+102    	; 0x17b10 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
   17aaa:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   17aac:	8b ec       	ldi	r24, 0xCB	; 203
   17aae:	9f e0       	ldi	r25, 0x0F	; 15
   17ab0:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   17ab4:	88 23       	and	r24, r24
   17ab6:	61 f1       	breq	.+88     	; 0x17b10 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   17ab8:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <mqtt_client+0x202>
   17abc:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <mqtt_client+0x203>
   17ac0:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   17ac2:	19 f1       	breq	.+70     	; 0x17b0a <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   17ac4:	90 93 ce 11 	sts	0x11CE, r25	; 0x8011ce <mqtt_client+0x203>
   17ac8:	80 93 cd 11 	sts	0x11CD, r24	; 0x8011cd <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   17acc:	80 91 cd 11 	lds	r24, 0x11CD	; 0x8011cd <mqtt_client+0x202>
   17ad0:	90 91 ce 11 	lds	r25, 0x11CE	; 0x8011ce <mqtt_client+0x203>
   17ad4:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   17ad8:	80 93 d3 0f 	sts	0x0FD3, r24	; 0x800fd3 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   17adc:	47 e0       	ldi	r20, 0x07	; 7
   17ade:	50 e0       	ldi	r21, 0x00	; 0
   17ae0:	6d ec       	ldi	r22, 0xCD	; 205
   17ae2:	7f e0       	ldi	r23, 0x0F	; 15
   17ae4:	ce 01       	movw	r24, r28
   17ae6:	0e 94 70 ba 	call	0x174e0	; 0x174e0 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   17aea:	fc 01       	movw	r30, r24
   17aec:	e5 53       	subi	r30, 0x35	; 53
   17aee:	f0 4f       	sbci	r31, 0xF0	; 240
   17af0:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   17af2:	9c 01       	movw	r18, r24
   17af4:	24 50       	subi	r18, 0x04	; 4
   17af6:	31 09       	sbc	r19, r1
   17af8:	4d ec       	ldi	r20, 0xCD	; 205
   17afa:	5f e0       	ldi	r21, 0x0F	; 15
   17afc:	62 e8       	ldi	r22, 0x82	; 130
   17afe:	8b ec       	ldi	r24, 0xCB	; 203
   17b00:	9f e0       	ldi	r25, 0x0F	; 15
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   17b02:	df 91       	pop	r29
   17b04:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   17b06:	0c 94 97 6a 	jmp	0xd52e	; 0xd52e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   17b0a:	81 e0       	ldi	r24, 0x01	; 1
   17b0c:	90 e0       	ldi	r25, 0x00	; 0
   17b0e:	da cf       	rjmp	.-76     	; 0x17ac4 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   17b10:	80 e0       	ldi	r24, 0x00	; 0
   17b12:	df 91       	pop	r29
   17b14:	cf 91       	pop	r28
   17b16:	08 95       	ret

00017b18 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>:
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   17b18:	3f 92       	push	r3
   17b1a:	4f 92       	push	r4
   17b1c:	5f 92       	push	r5
   17b1e:	6f 92       	push	r6
   17b20:	7f 92       	push	r7
   17b22:	8f 92       	push	r8
   17b24:	9f 92       	push	r9
   17b26:	af 92       	push	r10
   17b28:	bf 92       	push	r11
   17b2a:	cf 92       	push	r12
   17b2c:	df 92       	push	r13
   17b2e:	ef 92       	push	r14
   17b30:	ff 92       	push	r15
   17b32:	0f 93       	push	r16
   17b34:	1f 93       	push	r17
   17b36:	cf 93       	push	r28
   17b38:	df 93       	push	r29
   17b3a:	1f 92       	push	r1
   17b3c:	cd b7       	in	r28, 0x3d	; 61
   17b3e:	de b7       	in	r29, 0x3e	; 62
   17b40:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17b42:	8d ec       	ldi	r24, 0xCD	; 205
   17b44:	9f e0       	ldi	r25, 0x0F	; 15
   17b46:	0e 94 c4 b8 	call	0x17188	; 0x17188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17b4a:	81 11       	cpse	r24, r1
   17b4c:	16 c0       	rjmp	.+44     	; 0x17b7a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   17b4e:	10 e0       	ldi	r17, 0x00	; 0
   17b50:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   17b52:	c8 01       	movw	r24, r16
   17b54:	0f 90       	pop	r0
   17b56:	df 91       	pop	r29
   17b58:	cf 91       	pop	r28
   17b5a:	1f 91       	pop	r17
   17b5c:	0f 91       	pop	r16
   17b5e:	ff 90       	pop	r15
   17b60:	ef 90       	pop	r14
   17b62:	df 90       	pop	r13
   17b64:	cf 90       	pop	r12
   17b66:	bf 90       	pop	r11
   17b68:	af 90       	pop	r10
   17b6a:	9f 90       	pop	r9
   17b6c:	8f 90       	pop	r8
   17b6e:	7f 90       	pop	r7
   17b70:	6f 90       	pop	r6
   17b72:	5f 90       	pop	r5
   17b74:	4f 90       	pop	r4
   17b76:	3f 90       	pop	r3
   17b78:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   17b7a:	30 90 cd 0f 	lds	r3, 0x0FCD	; 0x800fcd <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   17b7e:	19 82       	std	Y+1, r1	; 0x01
   17b80:	3e ec       	ldi	r19, 0xCE	; 206
   17b82:	83 2e       	mov	r8, r19
   17b84:	3f e0       	ldi	r19, 0x0F	; 15
   17b86:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   17b88:	ee 24       	eor	r14, r14
   17b8a:	e3 94       	inc	r14
   17b8c:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   17b8e:	d1 2c       	mov	r13, r1
   17b90:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   17b92:	41 2c       	mov	r4, r1
   17b94:	51 2c       	mov	r5, r1
   17b96:	32 01       	movw	r6, r4
   17b98:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   17b9a:	ce 01       	movw	r24, r28
   17b9c:	01 96       	adiw	r24, 0x01	; 1
   17b9e:	0e 94 c4 b8 	call	0x17188	; 0x17188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17ba2:	88 23       	and	r24, r24
   17ba4:	a1 f2       	breq	.-88     	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   17ba6:	87 01       	movw	r16, r14
   17ba8:	0f 5f       	subi	r16, 0xFF	; 255
   17baa:	1f 4f       	sbci	r17, 0xFF	; 255
   17bac:	89 81       	ldd	r24, Y+1	; 0x01
   17bae:	d4 01       	movw	r26, r8
   17bb0:	8d 93       	st	X+, r24
   17bb2:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   17bb4:	28 2f       	mov	r18, r24
   17bb6:	2f 77       	andi	r18, 0x7F	; 127
   17bb8:	30 e0       	ldi	r19, 0x00	; 0
   17bba:	24 9d       	mul	r18, r4
   17bbc:	a0 01       	movw	r20, r0
   17bbe:	25 9d       	mul	r18, r5
   17bc0:	50 0d       	add	r21, r0
   17bc2:	34 9d       	mul	r19, r4
   17bc4:	50 0d       	add	r21, r0
   17bc6:	11 24       	eor	r1, r1
   17bc8:	c4 0e       	add	r12, r20
   17bca:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   17bcc:	27 e0       	ldi	r18, 0x07	; 7
   17bce:	44 0c       	add	r4, r4
   17bd0:	55 1c       	adc	r5, r5
   17bd2:	66 1c       	adc	r6, r6
   17bd4:	77 1c       	adc	r7, r7
   17bd6:	2a 95       	dec	r18
   17bd8:	d1 f7       	brne	.-12     	; 0x17bce <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   17bda:	87 fd       	sbrc	r24, 7
   17bdc:	31 c0       	rjmp	.+98     	; 0x17c40 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x128>
   17bde:	b3 2d       	mov	r27, r3
   17be0:	b0 7f       	andi	r27, 0xF0	; 240
   17be2:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   17be4:	8f ef       	ldi	r24, 0xFF	; 255
   17be6:	80 0f       	add	r24, r16
   17be8:	f5 01       	movw	r30, r10
   17bea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   17bec:	f0 e3       	ldi	r31, 0x30	; 48
   17bee:	bf 13       	cpse	r27, r31
   17bf0:	29 c0       	rjmp	.+82     	; 0x17c44 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17bf2:	c8 01       	movw	r24, r16
   17bf4:	83 53       	subi	r24, 0x33	; 51
   17bf6:	90 4f       	sbci	r25, 0xF0	; 240
   17bf8:	0e 94 c4 b8 	call	0x17188	; 0x17188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17bfc:	88 23       	and	r24, r24
   17bfe:	09 f4       	brne	.+2      	; 0x17c02 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xea>
   17c00:	a6 cf       	rjmp	.-180    	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   17c02:	c7 01       	movw	r24, r14
   17c04:	81 53       	subi	r24, 0x31	; 49
   17c06:	90 4f       	sbci	r25, 0xF0	; 240
   17c08:	0e 94 c4 b8 	call	0x17188	; 0x17188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17c0c:	88 23       	and	r24, r24
   17c0e:	09 f4       	brne	.+2      	; 0x17c12 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xfa>
   17c10:	9e cf       	rjmp	.-196    	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   17c12:	0e 5f       	subi	r16, 0xFE	; 254
   17c14:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   17c16:	d5 01       	movw	r26, r10
   17c18:	ec 91       	ld	r30, X
   17c1a:	f0 e0       	ldi	r31, 0x00	; 0
   17c1c:	e5 53       	subi	r30, 0x35	; 53
   17c1e:	f0 4f       	sbci	r31, 0xF0	; 240
   17c20:	e3 80       	ldd	r14, Z+3	; 0x03
   17c22:	f1 2c       	mov	r15, r1
   17c24:	fe 2c       	mov	r15, r14
   17c26:	ee 24       	eor	r14, r14
   17c28:	84 81       	ldd	r24, Z+4	; 0x04
   17c2a:	e8 0e       	add	r14, r24
   17c2c:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   17c2e:	80 91 cd 0f 	lds	r24, 0x0FCD	; 0x800fcd <mqtt_client+0x2>
   17c32:	81 ff       	sbrs	r24, 1
   17c34:	03 c0       	rjmp	.+6      	; 0x17c3c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   17c36:	b2 e0       	ldi	r27, 0x02	; 2
   17c38:	eb 0e       	add	r14, r27
   17c3a:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   17c3c:	92 e0       	ldi	r25, 0x02	; 2
   17c3e:	05 c0       	rjmp	.+10     	; 0x17c4a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   17c40:	78 01       	movw	r14, r16
   17c42:	ab cf       	rjmp	.-170    	; 0x17b9a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   17c44:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   17c46:	f1 2c       	mov	r15, r1
   17c48:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   17c4a:	69 2e       	mov	r6, r25
   17c4c:	71 2c       	mov	r7, r1
   17c4e:	60 1a       	sub	r6, r16
   17c50:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   17c52:	8e ef       	ldi	r24, 0xFE	; 254
   17c54:	88 2e       	mov	r8, r24
   17c56:	99 24       	eor	r9, r9
   17c58:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   17c5a:	c3 01       	movw	r24, r6
   17c5c:	80 0f       	add	r24, r16
   17c5e:	91 1f       	adc	r25, r17
   17c60:	8c 15       	cp	r24, r12
   17c62:	9d 05       	cpc	r25, r13
   17c64:	78 f5       	brcc	.+94     	; 0x17cc4 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   17c66:	ce 01       	movw	r24, r28
   17c68:	01 96       	adiw	r24, 0x01	; 1
   17c6a:	0e 94 c4 b8 	call	0x17188	; 0x17188 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17c6e:	88 23       	and	r24, r24
   17c70:	09 f4       	brne	.+2      	; 0x17c74 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x15c>
   17c72:	6d cf       	rjmp	.-294    	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   17c74:	80 91 e4 11 	lds	r24, 0x11E4	; 0x8011e4 <mqtt_client+0x219>
   17c78:	90 91 e5 11 	lds	r25, 0x11E5	; 0x8011e5 <mqtt_client+0x21a>
   17c7c:	00 97       	sbiw	r24, 0x00	; 0
   17c7e:	b1 f0       	breq	.+44     	; 0x17cac <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   17c80:	e0 e3       	ldi	r30, 0x30	; 48
   17c82:	3e 12       	cpse	r3, r30
   17c84:	13 c0       	rjmp	.+38     	; 0x17cac <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
   17c86:	d5 01       	movw	r26, r10
   17c88:	2c 91       	ld	r18, X
   17c8a:	f4 01       	movw	r30, r8
   17c8c:	e2 1b       	sub	r30, r18
   17c8e:	f1 09       	sbc	r31, r1
   17c90:	9f 01       	movw	r18, r30
   17c92:	20 0f       	add	r18, r16
   17c94:	31 1f       	adc	r19, r17
   17c96:	e2 16       	cp	r14, r18
   17c98:	f3 06       	cpc	r15, r19
   17c9a:	40 f4       	brcc	.+16     	; 0x17cac <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   17c9c:	dc 01       	movw	r26, r24
   17c9e:	ed 91       	ld	r30, X+
   17ca0:	fc 91       	ld	r31, X
   17ca2:	01 90       	ld	r0, Z+
   17ca4:	f0 81       	ld	r31, Z
   17ca6:	e0 2d       	mov	r30, r0
   17ca8:	69 81       	ldd	r22, Y+1	; 0x01
   17caa:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   17cac:	01 15       	cp	r16, r1
   17cae:	b2 e0       	ldi	r27, 0x02	; 2
   17cb0:	1b 07       	cpc	r17, r27
   17cb2:	28 f4       	brcc	.+10     	; 0x17cbe <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   17cb4:	89 81       	ldd	r24, Y+1	; 0x01
   17cb6:	f8 01       	movw	r30, r16
   17cb8:	e5 53       	subi	r30, 0x35	; 53
   17cba:	f0 4f       	sbci	r31, 0xF0	; 240
   17cbc:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   17cbe:	0f 5f       	subi	r16, 0xFF	; 255
   17cc0:	1f 4f       	sbci	r17, 0xFF	; 255
   17cc2:	cb cf       	rjmp	.-106    	; 0x17c5a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   17cc4:	80 91 e4 11 	lds	r24, 0x11E4	; 0x8011e4 <mqtt_client+0x219>
   17cc8:	90 91 e5 11 	lds	r25, 0x11E5	; 0x8011e5 <mqtt_client+0x21a>
   17ccc:	89 2b       	or	r24, r25
   17cce:	09 f0       	breq	.+2      	; 0x17cd2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ba>
   17cd0:	40 cf       	rjmp	.-384    	; 0x17b52 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>
   17cd2:	01 30       	cpi	r16, 0x01	; 1
   17cd4:	e2 e0       	ldi	r30, 0x02	; 2
   17cd6:	1e 07       	cpc	r17, r30
   17cd8:	08 f0       	brcs	.+2      	; 0x17cdc <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1c4>
   17cda:	39 cf       	rjmp	.-398    	; 0x17b4e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   17cdc:	3a cf       	rjmp	.-396    	; 0x17b52 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>

00017cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:165
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   17cde:	af 92       	push	r10
   17ce0:	bf 92       	push	r11
   17ce2:	df 92       	push	r13
   17ce4:	ef 92       	push	r14
   17ce6:	ff 92       	push	r15
   17ce8:	0f 93       	push	r16
   17cea:	1f 93       	push	r17
   17cec:	cf 93       	push	r28
   17cee:	df 93       	push	r29
   17cf0:	cd b7       	in	r28, 0x3d	; 61
   17cf2:	de b7       	in	r29, 0x3e	; 62
   17cf4:	c6 55       	subi	r28, 0x56	; 86
   17cf6:	d1 09       	sbc	r29, r1
   17cf8:	0f b6       	in	r0, 0x3f	; 63
   17cfa:	f8 94       	cli
   17cfc:	de bf       	out	0x3e, r29	; 62
   17cfe:	0f be       	out	0x3f, r0	; 63
   17d00:	cd bf       	out	0x3d, r28	; 61
   17d02:	5c 01       	movw	r10, r24
   17d04:	d6 2e       	mov	r13, r22
   17d06:	7a 01       	movw	r14, r20
   17d08:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   17d0a:	8b ec       	ldi	r24, 0xCB	; 203
   17d0c:	9f e0       	ldi	r25, 0x0F	; 15
   17d0e:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   17d12:	88 23       	and	r24, r24
   17d14:	09 f4       	brne	.+2      	; 0x17d18 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0x3a>
   17d16:	52 c0       	rjmp	.+164    	; 0x17dbc <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xde>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   17d18:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <mqtt_send_message>
   17d1c:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <mqtt_send_message+0x1>
   17d20:	01 96       	adiw	r24, 0x01	; 1
   17d22:	90 93 57 0c 	sts	0x0C57, r25	; 0x800c57 <mqtt_send_message+0x1>
   17d26:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   17d2a:	ce 01       	movw	r24, r28
   17d2c:	83 5b       	subi	r24, 0xB3	; 179
   17d2e:	9f 4f       	sbci	r25, 0xFF	; 255
   17d30:	0e 94 04 94 	call	0x12808	; 0x12808 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   17d34:	60 91 54 0c 	lds	r22, 0x0C54	; 0x800c54 <header_out>
   17d38:	70 91 55 0c 	lds	r23, 0x0C55	; 0x800c55 <header_out+0x1>
   17d3c:	ce 01       	movw	r24, r28
   17d3e:	01 96       	adiw	r24, 0x01	; 1
   17d40:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   17d44:	be 01       	movw	r22, r28
   17d46:	63 5b       	subi	r22, 0xB3	; 179
   17d48:	7f 4f       	sbci	r23, 0xFF	; 255
   17d4a:	ce 01       	movw	r24, r28
   17d4c:	01 96       	adiw	r24, 0x01	; 1
   17d4e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   17d52:	6f e4       	ldi	r22, 0x4F	; 79
   17d54:	75 e0       	ldi	r23, 0x05	; 5
   17d56:	ce 01       	movw	r24, r28
   17d58:	01 96       	adiw	r24, 0x01	; 1
   17d5a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   17d5e:	b5 01       	movw	r22, r10
   17d60:	ce 01       	movw	r24, r28
   17d62:	01 96       	adiw	r24, 0x01	; 1
   17d64:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   17d68:	6f e4       	ldi	r22, 0x4F	; 79
   17d6a:	75 e0       	ldi	r23, 0x05	; 5
   17d6c:	ce 01       	movw	r24, r28
   17d6e:	01 96       	adiw	r24, 0x01	; 1
   17d70:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17d74:	4a e0       	ldi	r20, 0x0A	; 10
   17d76:	be 01       	movw	r22, r28
   17d78:	6f 5b       	subi	r22, 0xBF	; 191
   17d7a:	7f 4f       	sbci	r23, 0xFF	; 255
   17d7c:	8d 2d       	mov	r24, r13
   17d7e:	90 e0       	ldi	r25, 0x00	; 0
   17d80:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   17d84:	be 01       	movw	r22, r28
   17d86:	6f 5b       	subi	r22, 0xBF	; 191
   17d88:	7f 4f       	sbci	r23, 0xFF	; 255
   17d8a:	ce 01       	movw	r24, r28
   17d8c:	01 96       	adiw	r24, 0x01	; 1
   17d8e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   17d92:	6f e4       	ldi	r22, 0x4F	; 79
   17d94:	75 e0       	ldi	r23, 0x05	; 5
   17d96:	ce 01       	movw	r24, r28
   17d98:	01 96       	adiw	r24, 0x01	; 1
   17d9a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   17d9e:	b7 01       	movw	r22, r14
   17da0:	ce 01       	movw	r24, r28
   17da2:	01 96       	adiw	r24, 0x01	; 1
   17da4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   17da8:	a8 01       	movw	r20, r16
   17daa:	be 01       	movw	r22, r28
   17dac:	6f 5f       	subi	r22, 0xFF	; 255
   17dae:	7f 4f       	sbci	r23, 0xFF	; 255
   17db0:	8b ec       	ldi	r24, 0xCB	; 203
   17db2:	9f e0       	ldi	r25, 0x0F	; 15
   17db4:	0e 94 05 6b 	call	0xd60a	; 0xd60a <PubSubClient::publish(char const*, char const*)>
   17db8:	81 11       	cpse	r24, r1
   17dba:	09 c0       	rjmp	.+18     	; 0x17dce <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xf0>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   17dbc:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <mqtt_error>
   17dc0:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <mqtt_error+0x1>
   17dc4:	01 96       	adiw	r24, 0x01	; 1
   17dc6:	90 93 59 0c 	sts	0x0C59, r25	; 0x800c59 <mqtt_error+0x1>
   17dca:	80 93 58 0c 	sts	0x0C58, r24	; 0x800c58 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:187
}
   17dce:	ca 5a       	subi	r28, 0xAA	; 170
   17dd0:	df 4f       	sbci	r29, 0xFF	; 255
   17dd2:	0f b6       	in	r0, 0x3f	; 63
   17dd4:	f8 94       	cli
   17dd6:	de bf       	out	0x3e, r29	; 62
   17dd8:	0f be       	out	0x3f, r0	; 63
   17dda:	cd bf       	out	0x3d, r28	; 61
   17ddc:	df 91       	pop	r29
   17dde:	cf 91       	pop	r28
   17de0:	1f 91       	pop	r17
   17de2:	0f 91       	pop	r16
   17de4:	ff 90       	pop	r15
   17de6:	ef 90       	pop	r14
   17de8:	df 90       	pop	r13
   17dea:	bf 90       	pop	r11
   17dec:	af 90       	pop	r10
   17dee:	08 95       	ret

00017df0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:189
///
void send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, uint8_t idx, char *topic, char *payload)
   17df0:	cf 92       	push	r12
   17df2:	df 92       	push	r13
   17df4:	ef 92       	push	r14
   17df6:	ff 92       	push	r15
   17df8:	0f 93       	push	r16
   17dfa:	1f 93       	push	r17
   17dfc:	cf 93       	push	r28
   17dfe:	df 93       	push	r29
   17e00:	cd b7       	in	r28, 0x3d	; 61
   17e02:	de b7       	in	r29, 0x3e	; 62
   17e04:	c6 55       	subi	r28, 0x56	; 86
   17e06:	d1 09       	sbc	r29, r1
   17e08:	0f b6       	in	r0, 0x3f	; 63
   17e0a:	f8 94       	cli
   17e0c:	de bf       	out	0x3e, r29	; 62
   17e0e:	0f be       	out	0x3f, r0	; 63
   17e10:	cd bf       	out	0x3d, r28	; 61
   17e12:	c8 2e       	mov	r12, r24
   17e14:	d6 2e       	mov	r13, r22
   17e16:	7a 01       	movw	r14, r20
   17e18:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:194
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   17e1a:	8b ec       	ldi	r24, 0xCB	; 203
   17e1c:	9f e0       	ldi	r25, 0x0F	; 15
   17e1e:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   17e22:	88 23       	and	r24, r24
   17e24:	09 f4       	brne	.+2      	; 0x17e28 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x38>
   17e26:	68 c0       	rjmp	.+208    	; 0x17ef8 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x108>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:196
  {
    mqtt_send_message++;
   17e28:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <mqtt_send_message>
   17e2c:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <mqtt_send_message+0x1>
   17e30:	01 96       	adiw	r24, 0x01	; 1
   17e32:	90 93 57 0c 	sts	0x0C57, r25	; 0x800c57 <mqtt_send_message+0x1>
   17e36:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:197
    device_get_name(hostname);
   17e3a:	ce 01       	movw	r24, r28
   17e3c:	83 5b       	subi	r24, 0xB3	; 179
   17e3e:	9f 4f       	sbci	r25, 0xFF	; 255
   17e40:	0e 94 04 94 	call	0x12808	; 0x12808 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:198
    strcpy_P(str_topic, header_out);
   17e44:	60 91 54 0c 	lds	r22, 0x0C54	; 0x800c54 <header_out>
   17e48:	70 91 55 0c 	lds	r23, 0x0C55	; 0x800c55 <header_out+0x1>
   17e4c:	ce 01       	movw	r24, r28
   17e4e:	01 96       	adiw	r24, 0x01	; 1
   17e50:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:199
    strcat(str_topic, hostname);
   17e54:	be 01       	movw	r22, r28
   17e56:	63 5b       	subi	r22, 0xB3	; 179
   17e58:	7f 4f       	sbci	r23, 0xFF	; 255
   17e5a:	ce 01       	movw	r24, r28
   17e5c:	01 96       	adiw	r24, 0x01	; 1
   17e5e:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:200
    strcat(str_topic, "/");
   17e62:	6f e4       	ldi	r22, 0x4F	; 79
   17e64:	75 e0       	ldi	r23, 0x05	; 5
   17e66:	ce 01       	movw	r24, r28
   17e68:	01 96       	adiw	r24, 0x01	; 1
   17e6a:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:201
    strcat(str_topic, prefix);
   17e6e:	6c e6       	ldi	r22, 0x6C	; 108
   17e70:	78 e0       	ldi	r23, 0x08	; 8
   17e72:	ce 01       	movw	r24, r28
   17e74:	01 96       	adiw	r24, 0x01	; 1
   17e76:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:202
    strcat(str_topic, "/");
   17e7a:	6f e4       	ldi	r22, 0x4F	; 79
   17e7c:	75 e0       	ldi	r23, 0x05	; 5
   17e7e:	ce 01       	movw	r24, r28
   17e80:	01 96       	adiw	r24, 0x01	; 1
   17e82:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17e86:	4a e0       	ldi	r20, 0x0A	; 10
   17e88:	be 01       	movw	r22, r28
   17e8a:	6f 5b       	subi	r22, 0xBF	; 191
   17e8c:	7f 4f       	sbci	r23, 0xFF	; 255
   17e8e:	8c 2d       	mov	r24, r12
   17e90:	90 e0       	ldi	r25, 0x00	; 0
   17e92:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:204
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   17e96:	be 01       	movw	r22, r28
   17e98:	6f 5b       	subi	r22, 0xBF	; 191
   17e9a:	7f 4f       	sbci	r23, 0xFF	; 255
   17e9c:	ce 01       	movw	r24, r28
   17e9e:	01 96       	adiw	r24, 0x01	; 1
   17ea0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:205
    strcat(str_topic, "/");
   17ea4:	6f e4       	ldi	r22, 0x4F	; 79
   17ea6:	75 e0       	ldi	r23, 0x05	; 5
   17ea8:	ce 01       	movw	r24, r28
   17eaa:	01 96       	adiw	r24, 0x01	; 1
   17eac:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   17eb0:	4a e0       	ldi	r20, 0x0A	; 10
   17eb2:	be 01       	movw	r22, r28
   17eb4:	6f 5b       	subi	r22, 0xBF	; 191
   17eb6:	7f 4f       	sbci	r23, 0xFF	; 255
   17eb8:	8d 2d       	mov	r24, r13
   17eba:	90 e0       	ldi	r25, 0x00	; 0
   17ebc:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:207
    itoa(idx, tmp1, 10);
    strcat(str_topic, tmp1);
   17ec0:	be 01       	movw	r22, r28
   17ec2:	6f 5b       	subi	r22, 0xBF	; 191
   17ec4:	7f 4f       	sbci	r23, 0xFF	; 255
   17ec6:	ce 01       	movw	r24, r28
   17ec8:	01 96       	adiw	r24, 0x01	; 1
   17eca:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:208
    strcat(str_topic, "/");
   17ece:	6f e4       	ldi	r22, 0x4F	; 79
   17ed0:	75 e0       	ldi	r23, 0x05	; 5
   17ed2:	ce 01       	movw	r24, r28
   17ed4:	01 96       	adiw	r24, 0x01	; 1
   17ed6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:209
    strcat(str_topic, topic);
   17eda:	b7 01       	movw	r22, r14
   17edc:	ce 01       	movw	r24, r28
   17ede:	01 96       	adiw	r24, 0x01	; 1
   17ee0:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:210
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   17ee4:	a8 01       	movw	r20, r16
   17ee6:	be 01       	movw	r22, r28
   17ee8:	6f 5f       	subi	r22, 0xFF	; 255
   17eea:	7f 4f       	sbci	r23, 0xFF	; 255
   17eec:	8b ec       	ldi	r24, 0xCB	; 203
   17eee:	9f e0       	ldi	r25, 0x0F	; 15
   17ef0:	0e 94 05 6b 	call	0xd60a	; 0xd60a <PubSubClient::publish(char const*, char const*)>
   17ef4:	81 11       	cpse	r24, r1
   17ef6:	09 c0       	rjmp	.+18     	; 0x17f0a <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x11a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:213
  }
  else
    mqtt_error++;
   17ef8:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <mqtt_error>
   17efc:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <mqtt_error+0x1>
   17f00:	01 96       	adiw	r24, 0x01	; 1
   17f02:	90 93 59 0c 	sts	0x0C59, r25	; 0x800c59 <mqtt_error+0x1>
   17f06:	80 93 58 0c 	sts	0x0C58, r24	; 0x800c58 <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:214
}
   17f0a:	ca 5a       	subi	r28, 0xAA	; 170
   17f0c:	df 4f       	sbci	r29, 0xFF	; 255
   17f0e:	0f b6       	in	r0, 0x3f	; 63
   17f10:	f8 94       	cli
   17f12:	de bf       	out	0x3e, r29	; 62
   17f14:	0f be       	out	0x3f, r0	; 63
   17f16:	cd bf       	out	0x3d, r28	; 61
   17f18:	df 91       	pop	r29
   17f1a:	cf 91       	pop	r28
   17f1c:	1f 91       	pop	r17
   17f1e:	0f 91       	pop	r16
   17f20:	ff 90       	pop	r15
   17f22:	ef 90       	pop	r14
   17f24:	df 90       	pop	r13
   17f26:	cf 90       	pop	r12
   17f28:	08 95       	ret

00017f2a <TwoWire::requestFrom(int, int) [clone .constprop.150]>:
_ZN7TwoWire11requestFromEii.constprop.150():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   17f2a:	68 2f       	mov	r22, r24
   17f2c:	88 e6       	ldi	r24, 0x68	; 104
   17f2e:	0e 94 92 ba 	call	0x17524	; 0x17524 <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   17f32:	10 92 a0 0c 	sts	0x0CA0, r1	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   17f36:	80 93 9f 0c 	sts	0x0C9F, r24	; 0x800c9f <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   17f3a:	08 95       	ret

00017f3c <RTC_DS1307::isrunning() [clone .constprop.149]>:
_ZN10RTC_DS13079isrunningEv.constprop.149():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   17f3c:	88 e6       	ldi	r24, 0x68	; 104
   17f3e:	0e 94 d4 ba 	call	0x175a8	; 0x175a8 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   17f42:	60 e0       	ldi	r22, 0x00	; 0
   17f44:	84 e9       	ldi	r24, 0x94	; 148
   17f46:	9f e0       	ldi	r25, 0x0F	; 15
   17f48:	0e 94 b0 48 	call	0x9160	; 0x9160 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   17f4c:	84 e9       	ldi	r24, 0x94	; 148
   17f4e:	9f e0       	ldi	r25, 0x0F	; 15
   17f50:	0e 94 71 67 	call	0xcee2	; 0xcee2 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   17f54:	81 e0       	ldi	r24, 0x01	; 1
   17f56:	90 e0       	ldi	r25, 0x00	; 0
   17f58:	0e 94 95 bf 	call	0x17f2a	; 0x17f2a <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   17f5c:	0e 94 7e bb 	call	0x176fc	; 0x176fc <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   17f60:	80 58       	subi	r24, 0x80	; 128
   17f62:	87 fb       	bst	r24, 7
   17f64:	88 27       	eor	r24, r24
   17f66:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   17f68:	08 95       	ret

00017f6a <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:399
  }
}


//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
   17f6a:	3f 92       	push	r3
   17f6c:	4f 92       	push	r4
   17f6e:	5f 92       	push	r5
   17f70:	6f 92       	push	r6
   17f72:	7f 92       	push	r7
   17f74:	8f 92       	push	r8
   17f76:	9f 92       	push	r9
   17f78:	af 92       	push	r10
   17f7a:	bf 92       	push	r11
   17f7c:	cf 92       	push	r12
   17f7e:	df 92       	push	r13
   17f80:	ef 92       	push	r14
   17f82:	ff 92       	push	r15
   17f84:	0f 93       	push	r16
   17f86:	1f 93       	push	r17
   17f88:	cf 93       	push	r28
   17f8a:	df 93       	push	r29
   17f8c:	cd b7       	in	r28, 0x3d	; 61
   17f8e:	de b7       	in	r29, 0x3e	; 62
   17f90:	6b 97       	sbiw	r28, 0x1b	; 27
   17f92:	0f b6       	in	r0, 0x3f	; 63
   17f94:	f8 94       	cli
   17f96:	de bf       	out	0x3e, r29	; 62
   17f98:	0f be       	out	0x3f, r0	; 63
   17f9a:	cd bf       	out	0x3d, r28	; 61
   17f9c:	7c 01       	movw	r14, r24
   17f9e:	16 2f       	mov	r17, r22
   17fa0:	6a 01       	movw	r12, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:403
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   17fa2:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:404
  createString(tmp1, '.', device.ntp_server, 4, 10);
   17fa4:	0a e0       	ldi	r16, 0x0A	; 10
   17fa6:	24 e0       	ldi	r18, 0x04	; 4
   17fa8:	43 e0       	ldi	r20, 0x03	; 3
   17faa:	5e e0       	ldi	r21, 0x0E	; 14
   17fac:	6e e2       	ldi	r22, 0x2E	; 46
   17fae:	ce 01       	movw	r24, r28
   17fb0:	01 96       	adiw	r24, 0x01	; 1
   17fb2:	5c 01       	movw	r10, r24
   17fb4:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:405
  timeClient->begin();
   17fb8:	c7 01       	movw	r24, r14
   17fba:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <NTPClient::begin()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:406
  timeClient->setTimeOffset(3600 * offset);
   17fbe:	20 e1       	ldi	r18, 0x10	; 16
   17fc0:	3e e0       	ldi	r19, 0x0E	; 14
   17fc2:	12 9f       	mul	r17, r18
   17fc4:	c0 01       	movw	r24, r0
   17fc6:	13 9f       	mul	r17, r19
   17fc8:	90 0d       	add	r25, r0
   17fca:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   17fcc:	09 2e       	mov	r0, r25
   17fce:	00 0c       	add	r0, r0
   17fd0:	aa 0b       	sbc	r26, r26
   17fd2:	bb 0b       	sbc	r27, r27
   17fd4:	f7 01       	movw	r30, r14
   17fd6:	87 83       	std	Z+7, r24	; 0x07
   17fd8:	90 87       	std	Z+8, r25	; 0x08
   17fda:	a1 87       	std	Z+9, r26	; 0x09
   17fdc:	b2 87       	std	Z+10, r27	; 0x0a
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   17fde:	b4 82       	std	Z+4, r11	; 0x04
   17fe0:	a3 82       	std	Z+3, r10	; 0x03
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   17fe2:	c7 01       	movw	r24, r14
   17fe4:	0e 94 82 65 	call	0xcb04	; 0xcb04 <NTPClient::update()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:402

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
{
  char tmp1[20];
  uint8_t ret = 0;
   17fe8:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   17fea:	88 23       	and	r24, r24
   17fec:	09 f4       	brne	.+2      	; 0x17ff0 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x86>
   17fee:	7c c0       	rjmp	.+248    	; 0x180e8 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x17e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
  {
    printf("rok %d\n", timeClient->getYear());
   17ff0:	c7 01       	movw	r24, r14
   17ff2:	0e 94 4f 65 	call	0xca9e	; 0xca9e <NTPClient::getYear() const>
   17ff6:	9f 93       	push	r25
   17ff8:	8f 93       	push	r24
   17ffa:	8a e7       	ldi	r24, 0x7A	; 122
   17ffc:	98 e0       	ldi	r25, 0x08	; 8
   17ffe:	9f 93       	push	r25
   18000:	8f 93       	push	r24
   18002:	0e 94 56 fe 	call	0x1fcac	; 0x1fcac <printf>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
   18006:	c7 01       	movw	r24, r14
   18008:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
   1800c:	2c e3       	ldi	r18, 0x3C	; 60
   1800e:	82 2e       	mov	r8, r18
   18010:	91 2c       	mov	r9, r1
   18012:	a1 2c       	mov	r10, r1
   18014:	b1 2c       	mov	r11, r1
   18016:	a5 01       	movw	r20, r10
   18018:	94 01       	movw	r18, r8
   1801a:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1801e:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
   18020:	c7 01       	movw	r24, r14
   18022:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
   18026:	30 e1       	ldi	r19, 0x10	; 16
   18028:	43 2e       	mov	r4, r19
   1802a:	3e e0       	ldi	r19, 0x0E	; 14
   1802c:	53 2e       	mov	r5, r19
   1802e:	61 2c       	mov	r6, r1
   18030:	71 2c       	mov	r7, r1
   18032:	a3 01       	movw	r20, r6
   18034:	92 01       	movw	r18, r4
   18036:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1803a:	0f 90       	pop	r0
   1803c:	0f 90       	pop	r0
   1803e:	0f 90       	pop	r0
   18040:	0f 90       	pop	r0
   18042:	a5 01       	movw	r20, r10
   18044:	94 01       	movw	r18, r8
   18046:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1804a:	a2 2e       	mov	r10, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
   1804c:	c7 01       	movw	r24, r14
   1804e:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
   18052:	20 e8       	ldi	r18, 0x80	; 128
   18054:	31 e5       	ldi	r19, 0x51	; 81
   18056:	41 e0       	ldi	r20, 0x01	; 1
   18058:	50 e0       	ldi	r21, 0x00	; 0
   1805a:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1805e:	a3 01       	movw	r20, r6
   18060:	92 01       	movw	r18, r4
   18062:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   18066:	72 2e       	mov	r7, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
   18068:	c7 01       	movw	r24, r14
   1806a:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
   1806e:	6d 8b       	std	Y+21, r22	; 0x15
   18070:	7e 8b       	std	Y+22, r23	; 0x16
   18072:	8f 8b       	std	Y+23, r24	; 0x17
   18074:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
   18076:	ce 01       	movw	r24, r28
   18078:	45 96       	adiw	r24, 0x15	; 21
   1807a:	0e 94 6d dd 	call	0x1bada	; 0x1bada <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
   1807e:	dc 01       	movw	r26, r24
   18080:	13 96       	adiw	r26, 0x03	; 3
   18082:	6c 90       	ld	r6, X
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
   18084:	c7 01       	movw	r24, r14
   18086:	0e 94 1b 65 	call	0xca36	; 0xca36 <NTPClient::getEpochTime() const>
   1808a:	6d 8b       	std	Y+21, r22	; 0x15
   1808c:	7e 8b       	std	Y+22, r23	; 0x16
   1808e:	8f 8b       	std	Y+23, r24	; 0x17
   18090:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
   18092:	ce 01       	movw	r24, r28
   18094:	45 96       	adiw	r24, 0x15	; 21
   18096:	0e 94 6d dd 	call	0x1bada	; 0x1bada <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
   1809a:	fc 01       	movw	r30, r24
   1809c:	05 81       	ldd	r16, Z+5	; 0x05
   1809e:	00 2e       	mov	r0, r16
   180a0:	00 0c       	add	r0, r0
   180a2:	11 0b       	sbc	r17, r17
   180a4:	0f 5f       	subi	r16, 0xFF	; 255
   180a6:	1f 4f       	sbci	r17, 0xFF	; 255
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:411
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
   180a8:	c7 01       	movw	r24, r14
   180aa:	0e 94 4f 65 	call	0xca9e	; 0xca9e <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   180ae:	80 3d       	cpi	r24, 0xD0	; 208
   180b0:	f7 e0       	ldi	r31, 0x07	; 7
   180b2:	9f 07       	cpc	r25, r31
   180b4:	10 f0       	brcs	.+4      	; 0x180ba <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x150>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   180b6:	80 5d       	subi	r24, 0xD0	; 208
   180b8:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
   180ba:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   180bc:	0e 8b       	std	Y+22, r16	; 0x16
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   180be:	6f 8a       	std	Y+23, r6	; 0x17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   180c0:	78 8e       	std	Y+24, r7	; 0x18
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   180c2:	a9 8e       	std	Y+25, r10	; 0x19
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   180c4:	3a 8e       	std	Y+26, r3	; 0x1a
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:411
   180c6:	ce 01       	movw	r24, r28
   180c8:	45 96       	adiw	r24, 0x15	; 21
   180ca:	0e 94 5d 69 	call	0xd2ba	; 0xd2ba <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:412
    *now = rtc->now();
   180ce:	ce 01       	movw	r24, r28
   180d0:	45 96       	adiw	r24, 0x15	; 21
   180d2:	0e 94 ce 68 	call	0xd19c	; 0xd19c <RTC_DS1307::now()>
   180d6:	87 e0       	ldi	r24, 0x07	; 7
   180d8:	fe 01       	movw	r30, r28
   180da:	75 96       	adiw	r30, 0x15	; 21
   180dc:	d6 01       	movw	r26, r12
   180de:	01 90       	ld	r0, Z+
   180e0:	0d 92       	st	X+, r0
   180e2:	8a 95       	dec	r24
   180e4:	e1 f7       	brne	.-8      	; 0x180de <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x174>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:413
    ret = 1;
   180e6:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   180e8:	d7 01       	movw	r26, r14
   180ea:	8d 91       	ld	r24, X+
   180ec:	9c 91       	ld	r25, X
   180ee:	dc 01       	movw	r26, r24
   180f0:	ed 91       	ld	r30, X+
   180f2:	fc 91       	ld	r31, X
   180f4:	02 88       	ldd	r0, Z+18	; 0x12
   180f6:	f3 89       	ldd	r31, Z+19	; 0x13
   180f8:	e0 2d       	mov	r30, r0
   180fa:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   180fc:	f7 01       	movw	r30, r14
   180fe:	12 82       	std	Z+2, r1	; 0x02
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:417
  }
  timeClient->end();
  return ret;
}
   18100:	81 2f       	mov	r24, r17
   18102:	6b 96       	adiw	r28, 0x1b	; 27
   18104:	0f b6       	in	r0, 0x3f	; 63
   18106:	f8 94       	cli
   18108:	de bf       	out	0x3e, r29	; 62
   1810a:	0f be       	out	0x3f, r0	; 63
   1810c:	cd bf       	out	0x3d, r28	; 61
   1810e:	df 91       	pop	r29
   18110:	cf 91       	pop	r28
   18112:	1f 91       	pop	r17
   18114:	0f 91       	pop	r16
   18116:	ff 90       	pop	r15
   18118:	ef 90       	pop	r14
   1811a:	df 90       	pop	r13
   1811c:	cf 90       	pop	r12
   1811e:	bf 90       	pop	r11
   18120:	af 90       	pop	r10
   18122:	9f 90       	pop	r9
   18124:	8f 90       	pop	r8
   18126:	7f 90       	pop	r7
   18128:	6f 90       	pop	r6
   1812a:	5f 90       	pop	r5
   1812c:	4f 90       	pop	r4
   1812e:	3f 90       	pop	r3
   18130:	08 95       	ret

00018132 <DateTime::DateTime(unsigned long) [clone .constprop.146]>:
_ZN8DateTimeC2Em.constprop.146():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:74

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   18132:	dc 01       	movw	r26, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:77
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   18134:	80 e1       	ldi	r24, 0x10	; 16
   18136:	15 96       	adiw	r26, 0x05	; 5
   18138:	8c 93       	st	X, r24
   1813a:	15 97       	sbiw	r26, 0x05	; 5
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:79
    t /= 60;
    mm = t % 60;
   1813c:	8c e1       	ldi	r24, 0x1C	; 28
   1813e:	14 96       	adiw	r26, 0x04	; 4
   18140:	8c 93       	st	X, r24
   18142:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:81
    t /= 60;
    hh = t % 24;
   18144:	86 e0       	ldi	r24, 0x06	; 6
   18146:	13 96       	adiw	r26, 0x03	; 3
   18148:	8c 93       	st	X, r24
   1814a:	13 97       	sbiw	r26, 0x03	; 3
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   1814c:	1c 92       	st	X, r1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:82
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   1814e:	81 e6       	ldi	r24, 0x61	; 97
   18150:	97 e9       	ldi	r25, 0x97	; 151
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   18152:	63 e9       	ldi	r22, 0x93	; 147
   18154:	7e ef       	ldi	r23, 0xFE	; 254
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:85
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
   18156:	4c 91       	ld	r20, X
   18158:	54 2f       	mov	r21, r20
   1815a:	53 70       	andi	r21, 0x03	; 3
   1815c:	21 e0       	ldi	r18, 0x01	; 1
   1815e:	09 f0       	breq	.+2      	; 0x18162 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x30>
   18160:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:86
        if (days < 365 + leap)
   18162:	30 e0       	ldi	r19, 0x00	; 0
   18164:	f9 01       	movw	r30, r18
   18166:	e3 59       	subi	r30, 0x93	; 147
   18168:	fe 4f       	sbci	r31, 0xFE	; 254
   1816a:	8e 17       	cp	r24, r30
   1816c:	9f 07       	cpc	r25, r31
   1816e:	40 f0       	brcs	.+16     	; 0x18180 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x4e>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
            break;
        days -= 365 + leap;
   18170:	fb 01       	movw	r30, r22
   18172:	e2 1b       	sub	r30, r18
   18174:	f3 0b       	sbc	r31, r19
   18176:	8e 0f       	add	r24, r30
   18178:	9f 1f       	adc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   1817a:	4f 5f       	subi	r20, 0xFF	; 255
   1817c:	4c 93       	st	X, r20
   1817e:	eb cf       	rjmp	.-42     	; 0x18156 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x24>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   18180:	21 e0       	ldi	r18, 0x01	; 1
   18182:	11 96       	adiw	r26, 0x01	; 1
   18184:	2c 93       	st	X, r18
   18186:	11 97       	sbiw	r26, 0x01	; 1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:91
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   18188:	11 96       	adiw	r26, 0x01	; 1
   1818a:	2c 91       	ld	r18, X
   1818c:	11 97       	sbiw	r26, 0x01	; 1
   1818e:	62 2f       	mov	r22, r18
   18190:	61 50       	subi	r22, 0x01	; 1
   18192:	77 0b       	sbc	r23, r23
   18194:	fb 01       	movw	r30, r22
   18196:	e4 54       	subi	r30, 0x44	; 68
   18198:	f7 47       	sbci	r31, 0x77	; 119
   1819a:	e4 91       	lpm	r30, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:92
        if (leap && m == 2)
   1819c:	51 11       	cpse	r21, r1
   1819e:	03 c0       	rjmp	.+6      	; 0x181a6 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
   181a0:	22 30       	cpi	r18, 0x02	; 2
   181a2:	09 f4       	brne	.+2      	; 0x181a6 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:93
            ++daysPerMonth;
   181a4:	ef 5f       	subi	r30, 0xFF	; 255
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:94
        if (days < daysPerMonth)
   181a6:	f0 e0       	ldi	r31, 0x00	; 0
   181a8:	8e 17       	cp	r24, r30
   181aa:	9f 07       	cpc	r25, r31
   181ac:	20 f0       	brcs	.+8      	; 0x181b6 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x84>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:96
            break;
        days -= daysPerMonth;
   181ae:	8e 1b       	sub	r24, r30
   181b0:	9f 0b       	sbc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   181b2:	2f 5f       	subi	r18, 0xFF	; 255
   181b4:	e6 cf       	rjmp	.-52     	; 0x18182 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x50>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:98
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   181b6:	8f 5f       	subi	r24, 0xFF	; 255
   181b8:	12 96       	adiw	r26, 0x02	; 2
   181ba:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:99
}
   181bc:	08 95       	ret

000181be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>:
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:635





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   181be:	2f 92       	push	r2
   181c0:	3f 92       	push	r3
   181c2:	4f 92       	push	r4
   181c4:	5f 92       	push	r5
   181c6:	6f 92       	push	r6
   181c8:	7f 92       	push	r7
   181ca:	8f 92       	push	r8
   181cc:	9f 92       	push	r9
   181ce:	af 92       	push	r10
   181d0:	bf 92       	push	r11
   181d2:	cf 92       	push	r12
   181d4:	df 92       	push	r13
   181d6:	ef 92       	push	r14
   181d8:	ff 92       	push	r15
   181da:	0f 93       	push	r16
   181dc:	1f 93       	push	r17
   181de:	cf 93       	push	r28
   181e0:	df 93       	push	r29
   181e2:	cd b7       	in	r28, 0x3d	; 61
   181e4:	de b7       	in	r29, 0x3e	; 62
   181e6:	c3 5e       	subi	r28, 0xE3	; 227
   181e8:	d1 09       	sbc	r29, r1
   181ea:	0f b6       	in	r0, 0x3f	; 63
   181ec:	f8 94       	cli
   181ee:	de bf       	out	0x3e, r29	; 62
   181f0:	0f be       	out	0x3f, r0	; 63
   181f2:	cd bf       	out	0x3d, r28	; 61
   181f4:	a8 2e       	mov	r10, r24
   181f6:	c9 53       	subi	r28, 0x39	; 57
   181f8:	df 4f       	sbci	r29, 0xFF	; 255
   181fa:	79 83       	std	Y+1, r23	; 0x01
   181fc:	68 83       	st	Y, r22
   181fe:	c7 5c       	subi	r28, 0xC7	; 199
   18200:	d0 40       	sbci	r29, 0x00	; 0
   18202:	c7 53       	subi	r28, 0x37	; 55
   18204:	df 4f       	sbci	r29, 0xFF	; 255
   18206:	59 83       	std	Y+1, r21	; 0x01
   18208:	48 83       	st	Y, r20
   1820a:	c9 5c       	subi	r28, 0xC9	; 201
   1820c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:668
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
   1820e:	ce 01       	movw	r24, r28
   18210:	8f 54       	subi	r24, 0x4F	; 79
   18212:	9f 4f       	sbci	r25, 0xFF	; 255
   18214:	0e 94 22 a7 	call	0x14e44	; 0x14e44 <MenuHistoryGetMenu(unsigned char*)>
   18218:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:670

  global_x = pgm_read_word(&current->x);
   1821a:	8c 01       	movw	r16, r24
   1821c:	03 52       	subi	r16, 0x23	; 35
   1821e:	1d 4f       	sbci	r17, 0xFD	; 253
   18220:	f8 01       	movw	r30, r16
   18222:	25 91       	lpm	r18, Z+
   18224:	34 91       	lpm	r19, Z
   18226:	c8 54       	subi	r28, 0x48	; 72
   18228:	df 4f       	sbci	r29, 0xFF	; 255
   1822a:	39 83       	std	Y+1, r19	; 0x01
   1822c:	28 83       	st	Y, r18
   1822e:	c8 5b       	subi	r28, 0xB8	; 184
   18230:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:671
  global_y = pgm_read_word(&current->y);
   18232:	7c 01       	movw	r14, r24
   18234:	31 e2       	ldi	r19, 0x21	; 33
   18236:	e3 1a       	sub	r14, r19
   18238:	3d ef       	ldi	r19, 0xFD	; 253
   1823a:	f3 0a       	sbc	r15, r19
   1823c:	f7 01       	movw	r30, r14
   1823e:	45 91       	lpm	r20, Z+
   18240:	54 91       	lpm	r21, Z
   18242:	c6 54       	subi	r28, 0x46	; 70
   18244:	df 4f       	sbci	r29, 0xFF	; 255
   18246:	59 83       	std	Y+1, r21	; 0x01
   18248:	48 83       	st	Y, r20
   1824a:	ca 5b       	subi	r28, 0xBA	; 186
   1824c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:674


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
   1824e:	fc 01       	movw	r30, r24
   18250:	e7 51       	subi	r30, 0x17	; 23
   18252:	fd 4f       	sbci	r31, 0xFD	; 253
   18254:	25 91       	lpm	r18, Z+
   18256:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:675
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   18258:	6c 01       	movw	r12, r24
   1825a:	54 e2       	ldi	r21, 0x24	; 36
   1825c:	c5 1a       	sub	r12, r21
   1825e:	5d ef       	ldi	r21, 0xFD	; 253
   18260:	d5 0a       	sbc	r13, r21
   18262:	f6 01       	movw	r30, r12
   18264:	84 91       	lpm	r24, Z
   18266:	cf 54       	subi	r28, 0x4F	; 79
   18268:	df 4f       	sbci	r29, 0xFF	; 255
   1826a:	68 81       	ld	r22, Y
   1826c:	c1 5b       	subi	r28, 0xB1	; 177
   1826e:	d0 40       	sbci	r29, 0x00	; 0
   18270:	70 e0       	ldi	r23, 0x00	; 0
   18272:	4f ef       	ldi	r20, 0xFF	; 255
   18274:	90 e0       	ldi	r25, 0x00	; 0
   18276:	f9 01       	movw	r30, r18
   18278:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:677
  if (rdr == 0)
    cbi(redraw_class, 0);
   1827a:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:676
  global_y = pgm_read_word(&current->y);


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
   1827c:	88 23       	and	r24, r24
   1827e:	11 f0       	breq	.+4      	; 0x18284 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:679
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
   18280:	bb 24       	eor	r11, r11
   18282:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:681
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
   18284:	f3 01       	movw	r30, r6
   18286:	e5 51       	subi	r30, 0x15	; 21
   18288:	fd 4f       	sbci	r31, 0xFD	; 253
   1828a:	25 91       	lpm	r18, Z+
   1828c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:682
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   1828e:	f6 01       	movw	r30, r12
   18290:	84 91       	lpm	r24, Z
   18292:	cf 54       	subi	r28, 0x4F	; 79
   18294:	df 4f       	sbci	r29, 0xFF	; 255
   18296:	68 81       	ld	r22, Y
   18298:	c1 5b       	subi	r28, 0xB1	; 177
   1829a:	d0 40       	sbci	r29, 0x00	; 0
   1829c:	70 e0       	ldi	r23, 0x00	; 0
   1829e:	4f ef       	ldi	r20, 0xFF	; 255
   182a0:	90 e0       	ldi	r25, 0x00	; 0
   182a2:	f9 01       	movw	r30, r18
   182a4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:683
  if (rdr == 0)
   182a6:	81 11       	cpse	r24, r1
   182a8:	62 c1       	rjmp	.+708    	; 0x1856e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:684
    cbi(redraw_class, 1);
   182aa:	e8 94       	clt
   182ac:	b1 f8       	bld	r11, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:688
  else
    sbi(redraw_class, 1);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
   182ae:	f3 01       	movw	r30, r6
   182b0:	e3 51       	subi	r30, 0x13	; 19
   182b2:	fd 4f       	sbci	r31, 0xFD	; 253
   182b4:	25 91       	lpm	r18, Z+
   182b6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:689
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   182b8:	f6 01       	movw	r30, r12
   182ba:	84 91       	lpm	r24, Z
   182bc:	cf 54       	subi	r28, 0x4F	; 79
   182be:	df 4f       	sbci	r29, 0xFF	; 255
   182c0:	68 81       	ld	r22, Y
   182c2:	c1 5b       	subi	r28, 0xB1	; 177
   182c4:	d0 40       	sbci	r29, 0x00	; 0
   182c6:	70 e0       	ldi	r23, 0x00	; 0
   182c8:	4f ef       	ldi	r20, 0xFF	; 255
   182ca:	90 e0       	ldi	r25, 0x00	; 0
   182cc:	f9 01       	movw	r30, r18
   182ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:690
  if (rdr == 0)
   182d0:	81 11       	cpse	r24, r1
   182d2:	50 c1       	rjmp	.+672    	; 0x18574 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:691
    cbi(redraw_class, 2);
   182d4:	e8 94       	clt
   182d6:	b2 f8       	bld	r11, 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:695
  else
    sbi(redraw_class, 2);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
   182d8:	f3 01       	movw	r30, r6
   182da:	e1 51       	subi	r30, 0x11	; 17
   182dc:	fd 4f       	sbci	r31, 0xFD	; 253
   182de:	25 91       	lpm	r18, Z+
   182e0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:696
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   182e2:	f6 01       	movw	r30, r12
   182e4:	84 91       	lpm	r24, Z
   182e6:	cf 54       	subi	r28, 0x4F	; 79
   182e8:	df 4f       	sbci	r29, 0xFF	; 255
   182ea:	68 81       	ld	r22, Y
   182ec:	c1 5b       	subi	r28, 0xB1	; 177
   182ee:	d0 40       	sbci	r29, 0x00	; 0
   182f0:	70 e0       	ldi	r23, 0x00	; 0
   182f2:	4f ef       	ldi	r20, 0xFF	; 255
   182f4:	90 e0       	ldi	r25, 0x00	; 0
   182f6:	f9 01       	movw	r30, r18
   182f8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:697
  if (rdr == 0)
   182fa:	81 11       	cpse	r24, r1
   182fc:	3e c1       	rjmp	.+636    	; 0x1857a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:698
    cbi(redraw_class, 3);
   182fe:	8b 2d       	mov	r24, r11
   18300:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:702
  else
    sbi(redraw_class, 3);
  ///
  if (redraw == false)
   18302:	a1 10       	cpse	r10, r1
   18304:	3d c1       	rjmp	.+634    	; 0x18580 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:703
    cbi(redraw_class, 4);
   18306:	8f 7e       	andi	r24, 0xEF	; 239
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:707
  else
    sbi(redraw_class, 4);
  /////
  if (display_redraw_once == 0)
   18308:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <display_redraw_once>
   1830c:	91 11       	cpse	r25, r1
   1830e:	3a c1       	rjmp	.+628    	; 0x18584 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:709
  {
    display_redraw_once = 1;
   18310:	91 e0       	ldi	r25, 0x01	; 1
   18312:	90 93 52 0c 	sts	0x0C52, r25	; 0x800c52 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:710
    sbi(redraw_class, 5);
   18316:	80 62       	ori	r24, 0x20	; 32
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:714
  }
  else
  {
    cbi(redraw_class, 5);
   18318:	c1 53       	subi	r28, 0x31	; 49
   1831a:	df 4f       	sbci	r29, 0xFF	; 255
   1831c:	88 83       	st	Y, r24
   1831e:	cf 5c       	subi	r28, 0xCF	; 207
   18320:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:717
  }
  /////
  rdr = pgm_read_byte(&current->redraw_class);
   18322:	f3 01       	movw	r30, r6
   18324:	e8 51       	subi	r30, 0x18	; 24
   18326:	fd 4f       	sbci	r31, 0xFD	; 253
   18328:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:718
  if (enable_redraw(rdr, redraw_class) == true)
   1832a:	c1 53       	subi	r28, 0x31	; 49
   1832c:	df 4f       	sbci	r29, 0xFF	; 255
   1832e:	68 81       	ld	r22, Y
   18330:	cf 5c       	subi	r28, 0xCF	; 207
   18332:	d0 40       	sbci	r29, 0x00	; 0
   18334:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   18338:	88 23       	and	r24, r24
   1833a:	d9 f0       	breq	.+54     	; 0x18372 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:720
  {
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
   1833c:	f3 01       	movw	r30, r6
   1833e:	65 91       	lpm	r22, Z+
   18340:	74 91       	lpm	r23, Z
   18342:	ce 01       	movw	r24, r28
   18344:	01 96       	adiw	r24, 0x01	; 1
   18346:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:721
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
   1834a:	f7 01       	movw	r30, r14
   1834c:	45 91       	lpm	r20, Z+
   1834e:	54 91       	lpm	r21, Z
   18350:	f8 01       	movw	r30, r16
   18352:	65 91       	lpm	r22, Z+
   18354:	74 91       	lpm	r23, Z
   18356:	4b 5f       	subi	r20, 0xFB	; 251
   18358:	5f 4f       	sbci	r21, 0xFF	; 255
   1835a:	6b 5f       	subi	r22, 0xFB	; 251
   1835c:	7f 4f       	sbci	r23, 0xFF	; 255
   1835e:	ee 24       	eor	r14, r14
   18360:	ea 94       	dec	r14
   18362:	fe 2c       	mov	r15, r14
   18364:	10 e0       	ldi	r17, 0x00	; 0
   18366:	00 e0       	ldi	r16, 0x00	; 0
   18368:	22 e0       	ldi	r18, 0x02	; 2
   1836a:	ce 01       	movw	r24, r28
   1836c:	01 96       	adiw	r24, 0x01	; 1
   1836e:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:635





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   18372:	51 2c       	mov	r5, r1
   18374:	ca 53       	subi	r28, 0x3A	; 58
   18376:	df 4f       	sbci	r29, 0xFF	; 255
   18378:	18 82       	st	Y, r1
   1837a:	c6 5c       	subi	r28, 0xC6	; 198
   1837c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:725
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  ///
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   1837e:	13 01       	movw	r2, r6
   18380:	fa e2       	ldi	r31, 0x2A	; 42
   18382:	2f 1a       	sub	r2, r31
   18384:	fd ef       	ldi	r31, 0xFD	; 253
   18386:	3f 0a       	sbc	r3, r31
   18388:	b3 e1       	ldi	r27, 0x13	; 19
   1838a:	4b 2e       	mov	r4, r27
   1838c:	f1 01       	movw	r30, r2
   1838e:	84 91       	lpm	r24, Z
   18390:	58 16       	cp	r5, r24
   18392:	08 f0       	brcs	.+2      	; 0x18396 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d8>
   18394:	f9 c0       	rjmp	.+498    	; 0x18588 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ca>
   18396:	54 9c       	mul	r5, r4
   18398:	50 01       	movw	r10, r0
   1839a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:728
  {
    function_1 = &current->function_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&function_1->enable_show);
   1839c:	f5 01       	movw	r30, r10
   1839e:	e2 5d       	subi	r30, 0xD2	; 210
   183a0:	fe 4f       	sbci	r31, 0xFE	; 254
   183a2:	e6 0d       	add	r30, r6
   183a4:	f7 1d       	adc	r31, r7
   183a6:	25 91       	lpm	r18, Z+
   183a8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:729
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
   183aa:	45 01       	movw	r8, r10
   183ac:	fd ed       	ldi	r31, 0xDD	; 221
   183ae:	8f 1a       	sub	r8, r31
   183b0:	fe ef       	ldi	r31, 0xFE	; 254
   183b2:	9f 0a       	sbc	r9, r31
   183b4:	86 0c       	add	r8, r6
   183b6:	97 1c       	adc	r9, r7
   183b8:	f4 01       	movw	r30, r8
   183ba:	84 91       	lpm	r24, Z
   183bc:	cf 54       	subi	r28, 0x4F	; 79
   183be:	df 4f       	sbci	r29, 0xFF	; 255
   183c0:	68 81       	ld	r22, Y
   183c2:	c1 5b       	subi	r28, 0xB1	; 177
   183c4:	d0 40       	sbci	r29, 0x00	; 0
   183c6:	70 e0       	ldi	r23, 0x00	; 0
   183c8:	45 2d       	mov	r20, r5
   183ca:	90 e0       	ldi	r25, 0x00	; 0
   183cc:	f9 01       	movw	r30, r18
   183ce:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:730
    if (active == 0) continue;
   183d0:	88 23       	and	r24, r24
   183d2:	09 f4       	brne	.+2      	; 0x183d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x218>
   183d4:	ca c0       	rjmp	.+404    	; 0x1856a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:731
    rdr = pgm_read_byte(&function_1->redraw_class);
   183d6:	f5 01       	movw	r30, r10
   183d8:	e5 5d       	subi	r30, 0xD5	; 213
   183da:	fe 4f       	sbci	r31, 0xFE	; 254
   183dc:	e6 0d       	add	r30, r6
   183de:	f7 1d       	adc	r31, r7
   183e0:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:732
    if (enable_redraw(rdr, redraw_class) == true)
   183e2:	c1 53       	subi	r28, 0x31	; 49
   183e4:	df 4f       	sbci	r29, 0xFF	; 255
   183e6:	68 81       	ld	r22, Y
   183e8:	cf 5c       	subi	r28, 0xCF	; 207
   183ea:	d0 40       	sbci	r29, 0x00	; 0
   183ec:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   183f0:	88 23       	and	r24, r24
   183f2:	09 f4       	brne	.+2      	; 0x183f6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x238>
   183f4:	4b c0       	rjmp	.+150    	; 0x1848c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:734
    {
      strcpy_P(str1, (char*)pgm_read_word(&function_1->name));
   183f6:	f5 01       	movw	r30, r10
   183f8:	e0 5d       	subi	r30, 0xD0	; 208
   183fa:	fe 4f       	sbci	r31, 0xFE	; 254
   183fc:	e6 0d       	add	r30, r6
   183fe:	f7 1d       	adc	r31, r7
   18400:	65 91       	lpm	r22, Z+
   18402:	74 91       	lpm	r23, Z
   18404:	ce 01       	movw	r24, r28
   18406:	01 96       	adiw	r24, 0x01	; 1
   18408:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:735
      fnt_coordinate_xy =  (fptr_coordinate_xy*)pgm_read_word(&function_1->fnt_coordinate_xy);
   1840c:	f5 01       	movw	r30, r10
   1840e:	eb 5d       	subi	r30, 0xDB	; 219
   18410:	fe 4f       	sbci	r31, 0xFE	; 254
   18412:	e6 0d       	add	r30, r6
   18414:	f7 1d       	adc	r31, r7
   18416:	a5 91       	lpm	r26, Z+
   18418:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:736
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1, str1);
   1841a:	f4 01       	movw	r30, r8
   1841c:	05 91       	lpm	r16, Z+
   1841e:	14 91       	lpm	r17, Z
   18420:	f5 01       	movw	r30, r10
   18422:	e7 5d       	subi	r30, 0xD7	; 215
   18424:	fe 4f       	sbci	r31, 0xFE	; 254
   18426:	e6 0d       	add	r30, r6
   18428:	f7 1d       	adc	r31, r7
   1842a:	25 91       	lpm	r18, Z+
   1842c:	34 91       	lpm	r19, Z
   1842e:	f5 01       	movw	r30, r10
   18430:	e9 5d       	subi	r30, 0xD9	; 217
   18432:	fe 4f       	sbci	r31, 0xFE	; 254
   18434:	e6 0d       	add	r30, r6
   18436:	f7 1d       	adc	r31, r7
   18438:	45 91       	lpm	r20, Z+
   1843a:	54 91       	lpm	r21, Z
   1843c:	f5 01       	movw	r30, r10
   1843e:	ef 5d       	subi	r30, 0xDF	; 223
   18440:	fe 4f       	sbci	r31, 0xFE	; 254
   18442:	e6 0d       	add	r30, r6
   18444:	f7 1d       	adc	r31, r7
   18446:	65 91       	lpm	r22, Z+
   18448:	74 91       	lpm	r23, Z
   1844a:	f5 01       	movw	r30, r10
   1844c:	e1 5e       	subi	r30, 0xE1	; 225
   1844e:	fe 4f       	sbci	r31, 0xFE	; 254
   18450:	e6 0d       	add	r30, r6
   18452:	f7 1d       	adc	r31, r7
   18454:	85 91       	lpm	r24, Z+
   18456:	94 91       	lpm	r25, Z
   18458:	c6 54       	subi	r28, 0x46	; 70
   1845a:	df 4f       	sbci	r29, 0xFF	; 255
   1845c:	e8 81       	ld	r30, Y
   1845e:	f9 81       	ldd	r31, Y+1	; 0x01
   18460:	ca 5b       	subi	r28, 0xBA	; 186
   18462:	d0 40       	sbci	r29, 0x00	; 0
   18464:	6e 0f       	add	r22, r30
   18466:	7f 1f       	adc	r23, r31
   18468:	fe 01       	movw	r30, r28
   1846a:	31 96       	adiw	r30, 0x01	; 1
   1846c:	6f 01       	movw	r12, r30
   1846e:	cf 54       	subi	r28, 0x4F	; 79
   18470:	df 4f       	sbci	r29, 0xFF	; 255
   18472:	e8 80       	ld	r14, Y
   18474:	c1 5b       	subi	r28, 0xB1	; 177
   18476:	d0 40       	sbci	r29, 0x00	; 0
   18478:	c8 54       	subi	r28, 0x48	; 72
   1847a:	df 4f       	sbci	r29, 0xFF	; 255
   1847c:	e8 81       	ld	r30, Y
   1847e:	f9 81       	ldd	r31, Y+1	; 0x01
   18480:	c8 5b       	subi	r28, 0xB8	; 184
   18482:	d0 40       	sbci	r29, 0x00	; 0
   18484:	8e 0f       	add	r24, r30
   18486:	9f 1f       	adc	r25, r31
   18488:	fd 01       	movw	r30, r26
   1848a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:738
    }
    if (click_x > 0 && click_y > 0)
   1848c:	c9 53       	subi	r28, 0x39	; 57
   1848e:	df 4f       	sbci	r29, 0xFF	; 255
   18490:	28 81       	ld	r18, Y
   18492:	39 81       	ldd	r19, Y+1	; 0x01
   18494:	c7 5c       	subi	r28, 0xC7	; 199
   18496:	d0 40       	sbci	r29, 0x00	; 0
   18498:	23 2b       	or	r18, r19
   1849a:	09 f4       	brne	.+2      	; 0x1849e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2e0>
   1849c:	66 c0       	rjmp	.+204    	; 0x1856a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ac>
   1849e:	c7 53       	subi	r28, 0x37	; 55
   184a0:	df 4f       	sbci	r29, 0xFF	; 255
   184a2:	48 81       	ld	r20, Y
   184a4:	59 81       	ldd	r21, Y+1	; 0x01
   184a6:	c9 5c       	subi	r28, 0xC9	; 201
   184a8:	d0 40       	sbci	r29, 0x00	; 0
   184aa:	45 2b       	or	r20, r21
   184ac:	09 f4       	brne	.+2      	; 0x184b0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2f2>
   184ae:	5d c0       	rjmp	.+186    	; 0x1856a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:739
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
   184b0:	f5 01       	movw	r30, r10
   184b2:	e7 5d       	subi	r30, 0xD7	; 215
   184b4:	fe 4f       	sbci	r31, 0xFE	; 254
   184b6:	e6 0d       	add	r30, r6
   184b8:	f7 1d       	adc	r31, r7
   184ba:	25 91       	lpm	r18, Z+
   184bc:	34 91       	lpm	r19, Z
   184be:	f5 01       	movw	r30, r10
   184c0:	e9 5d       	subi	r30, 0xD9	; 217
   184c2:	fe 4f       	sbci	r31, 0xFE	; 254
   184c4:	e6 0d       	add	r30, r6
   184c6:	f7 1d       	adc	r31, r7
   184c8:	45 91       	lpm	r20, Z+
   184ca:	54 91       	lpm	r21, Z
   184cc:	f5 01       	movw	r30, r10
   184ce:	ef 5d       	subi	r30, 0xDF	; 223
   184d0:	fe 4f       	sbci	r31, 0xFE	; 254
   184d2:	e6 0d       	add	r30, r6
   184d4:	f7 1d       	adc	r31, r7
   184d6:	65 91       	lpm	r22, Z+
   184d8:	74 91       	lpm	r23, Z
   184da:	f5 01       	movw	r30, r10
   184dc:	e1 5e       	subi	r30, 0xE1	; 225
   184de:	fe 4f       	sbci	r31, 0xFE	; 254
   184e0:	e6 0d       	add	r30, r6
   184e2:	f7 1d       	adc	r31, r7
   184e4:	85 91       	lpm	r24, Z+
   184e6:	94 91       	lpm	r25, Z
   184e8:	c6 54       	subi	r28, 0x46	; 70
   184ea:	df 4f       	sbci	r29, 0xFF	; 255
   184ec:	e8 81       	ld	r30, Y
   184ee:	f9 81       	ldd	r31, Y+1	; 0x01
   184f0:	ca 5b       	subi	r28, 0xBA	; 186
   184f2:	d0 40       	sbci	r29, 0x00	; 0
   184f4:	6e 0f       	add	r22, r30
   184f6:	7f 1f       	adc	r23, r31
   184f8:	c7 53       	subi	r28, 0x37	; 55
   184fa:	df 4f       	sbci	r29, 0xFF	; 255
   184fc:	e8 80       	ld	r14, Y
   184fe:	f9 80       	ldd	r15, Y+1	; 0x01
   18500:	c9 5c       	subi	r28, 0xC9	; 201
   18502:	d0 40       	sbci	r29, 0x00	; 0
   18504:	c9 53       	subi	r28, 0x39	; 57
   18506:	df 4f       	sbci	r29, 0xFF	; 255
   18508:	08 81       	ld	r16, Y
   1850a:	19 81       	ldd	r17, Y+1	; 0x01
   1850c:	c7 5c       	subi	r28, 0xC7	; 199
   1850e:	d0 40       	sbci	r29, 0x00	; 0
   18510:	c8 54       	subi	r28, 0x48	; 72
   18512:	df 4f       	sbci	r29, 0xFF	; 255
   18514:	e8 81       	ld	r30, Y
   18516:	f9 81       	ldd	r31, Y+1	; 0x01
   18518:	c8 5b       	subi	r28, 0xB8	; 184
   1851a:	d0 40       	sbci	r29, 0x00	; 0
   1851c:	8e 0f       	add	r24, r30
   1851e:	9f 1f       	adc	r25, r31
   18520:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18524:	18 2f       	mov	r17, r24
   18526:	88 23       	and	r24, r24
   18528:	01 f1       	breq	.+64     	; 0x1856a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:741
      {
        fntargs =  (fptr_args*)pgm_read_word(&function_1->onclick);
   1852a:	f5 01       	movw	r30, r10
   1852c:	e4 5d       	subi	r30, 0xD4	; 212
   1852e:	fe 4f       	sbci	r31, 0xFE	; 254
   18530:	e6 0d       	add	r30, r6
   18532:	f7 1d       	adc	r31, r7
   18534:	25 91       	lpm	r18, Z+
   18536:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:742
        if ((fptr_args)fntargs != nullfce)
   18538:	f0 e5       	ldi	r31, 0x50	; 80
   1853a:	22 31       	cpi	r18, 0x12	; 18
   1853c:	3f 07       	cpc	r19, r31
   1853e:	a9 f0       	breq	.+42     	; 0x1856a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:744
        {
          ((fptr_args)fntargs)(pgm_read_word(&function_1->args), menu_args1, idx);
   18540:	f4 01       	movw	r30, r8
   18542:	85 91       	lpm	r24, Z+
   18544:	94 91       	lpm	r25, Z
   18546:	cf 54       	subi	r28, 0x4F	; 79
   18548:	df 4f       	sbci	r29, 0xFF	; 255
   1854a:	68 81       	ld	r22, Y
   1854c:	c1 5b       	subi	r28, 0xB1	; 177
   1854e:	d0 40       	sbci	r29, 0x00	; 0
   18550:	70 e0       	ldi	r23, 0x00	; 0
   18552:	45 2d       	mov	r20, r5
   18554:	f9 01       	movw	r30, r18
   18556:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:746
          ret = true;
          printf("mrdka funkce\n");
   18558:	82 e8       	ldi	r24, 0x82	; 130
   1855a:	98 e0       	ldi	r25, 0x08	; 8
   1855c:	0e 94 6a fe 	call	0x1fcd4	; 0x1fcd4 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:745
      {
        fntargs =  (fptr_args*)pgm_read_word(&function_1->onclick);
        if ((fptr_args)fntargs != nullfce)
        {
          ((fptr_args)fntargs)(pgm_read_word(&function_1->args), menu_args1, idx);
          ret = true;
   18560:	ca 53       	subi	r28, 0x3A	; 58
   18562:	df 4f       	sbci	r29, 0xFF	; 255
   18564:	18 83       	st	Y, r17
   18566:	c6 5c       	subi	r28, 0xC6	; 198
   18568:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:725
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  ///
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   1856a:	53 94       	inc	r5
   1856c:	0f cf       	rjmp	.-482    	; 0x1838c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:686
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
   1856e:	68 94       	set
   18570:	b1 f8       	bld	r11, 1
   18572:	9d ce       	rjmp	.-710    	; 0x182ae <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:693
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
   18574:	68 94       	set
   18576:	b2 f8       	bld	r11, 2
   18578:	af ce       	rjmp	.-674    	; 0x182d8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:700
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
   1857a:	8b 2d       	mov	r24, r11
   1857c:	88 60       	ori	r24, 0x08	; 8
   1857e:	c1 ce       	rjmp	.-638    	; 0x18302 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:705
  ///
  if (redraw == false)
    cbi(redraw_class, 4);
  else
    sbi(redraw_class, 4);
   18580:	80 61       	ori	r24, 0x10	; 16
   18582:	c2 ce       	rjmp	.-636    	; 0x18308 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:714
    display_redraw_once = 1;
    sbi(redraw_class, 5);
  }
  else
  {
    cbi(redraw_class, 5);
   18584:	8f 7d       	andi	r24, 0xDF	; 223
   18586:	c8 ce       	rjmp	.-624    	; 0x18318 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x15a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:750
          ret = true;
          printf("mrdka funkce\n");
        }
      }
  }
  if (ret == true)  goto draw_menu_end;
   18588:	ca 53       	subi	r28, 0x3A	; 58
   1858a:	df 4f       	sbci	r29, 0xFF	; 255
   1858c:	f8 81       	ld	r31, Y
   1858e:	c6 5c       	subi	r28, 0xC6	; 198
   18590:	d0 40       	sbci	r29, 0x00	; 0
   18592:	f1 11       	cpse	r31, r1
   18594:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:754
  ///
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   18598:	91 2c       	mov	r9, r1
   1859a:	93 01       	movw	r18, r6
   1859c:	2c 52       	subi	r18, 0x2C	; 44
   1859e:	3d 4f       	sbci	r19, 0xFD	; 253
   185a0:	ca 54       	subi	r28, 0x4A	; 74
   185a2:	df 4f       	sbci	r29, 0xFF	; 255
   185a4:	39 83       	std	Y+1, r19	; 0x01
   185a6:	28 83       	st	Y, r18
   185a8:	c6 5b       	subi	r28, 0xB6	; 182
   185aa:	d0 40       	sbci	r29, 0x00	; 0
   185ac:	ca 54       	subi	r28, 0x4A	; 74
   185ae:	df 4f       	sbci	r29, 0xFF	; 255
   185b0:	e8 81       	ld	r30, Y
   185b2:	f9 81       	ldd	r31, Y+1	; 0x01
   185b4:	c6 5b       	subi	r28, 0xB6	; 182
   185b6:	d0 40       	sbci	r29, 0x00	; 0
   185b8:	84 91       	lpm	r24, Z
   185ba:	98 16       	cp	r9, r24
   185bc:	08 f0       	brcs	.+2      	; 0x185c0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x402>
   185be:	d9 c0       	rjmp	.+434    	; 0x18772 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5b4>
   185c0:	89 2d       	mov	r24, r9
   185c2:	90 e0       	ldi	r25, 0x00	; 0
   185c4:	01 96       	adiw	r24, 0x01	; 1
   185c6:	f1 e1       	ldi	r31, 0x11	; 17
   185c8:	f8 9f       	mul	r31, r24
   185ca:	20 01       	movw	r4, r0
   185cc:	f9 9f       	mul	r31, r25
   185ce:	50 0c       	add	r5, r0
   185d0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:757
  {
    button_1 = &current->button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_1->enable_show);
   185d2:	f3 01       	movw	r30, r6
   185d4:	e4 0d       	add	r30, r4
   185d6:	f5 1d       	adc	r31, r5
   185d8:	25 91       	lpm	r18, Z+
   185da:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:758
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, idx);
   185dc:	12 01       	movw	r2, r4
   185de:	44 e0       	ldi	r20, 0x04	; 4
   185e0:	24 1a       	sub	r2, r20
   185e2:	31 08       	sbc	r3, r1
   185e4:	26 0c       	add	r2, r6
   185e6:	37 1c       	adc	r3, r7
   185e8:	f1 01       	movw	r30, r2
   185ea:	84 91       	lpm	r24, Z
   185ec:	cf 54       	subi	r28, 0x4F	; 79
   185ee:	df 4f       	sbci	r29, 0xFF	; 255
   185f0:	68 81       	ld	r22, Y
   185f2:	c1 5b       	subi	r28, 0xB1	; 177
   185f4:	d0 40       	sbci	r29, 0x00	; 0
   185f6:	70 e0       	ldi	r23, 0x00	; 0
   185f8:	49 2d       	mov	r20, r9
   185fa:	90 e0       	ldi	r25, 0x00	; 0
   185fc:	f9 01       	movw	r30, r18
   185fe:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:759
    if (active == 0) continue;
   18600:	88 23       	and	r24, r24
   18602:	09 f4       	brne	.+2      	; 0x18606 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x448>
   18604:	b4 c0       	rjmp	.+360    	; 0x1876e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:760
    rdr = pgm_read_byte(&button_1->redraw_class);
   18606:	f2 01       	movw	r30, r4
   18608:	31 97       	sbiw	r30, 0x01	; 1
   1860a:	e6 0d       	add	r30, r6
   1860c:	f7 1d       	adc	r31, r7
   1860e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:761
    if (enable_redraw(rdr, redraw_class) == true)
   18610:	c1 53       	subi	r28, 0x31	; 49
   18612:	df 4f       	sbci	r29, 0xFF	; 255
   18614:	68 81       	ld	r22, Y
   18616:	cf 5c       	subi	r28, 0xCF	; 207
   18618:	d0 40       	sbci	r29, 0x00	; 0
   1861a:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   1861e:	88 23       	and	r24, r24
   18620:	09 f4       	brne	.+2      	; 0x18624 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x466>
   18622:	43 c0       	rjmp	.+134    	; 0x186aa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:763
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_1->name));
   18624:	f2 01       	movw	r30, r4
   18626:	3f 97       	sbiw	r30, 0x0f	; 15
   18628:	e6 0d       	add	r30, r6
   1862a:	f7 1d       	adc	r31, r7
   1862c:	65 91       	lpm	r22, Z+
   1862e:	74 91       	lpm	r23, Z
   18630:	ce 01       	movw	r24, r28
   18632:	8f 57       	subi	r24, 0x7F	; 127
   18634:	9f 4f       	sbci	r25, 0xFF	; 255
   18636:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:764
      str1[0] = 0;
   1863a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:765
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
   1863c:	f2 01       	movw	r30, r4
   1863e:	35 97       	sbiw	r30, 0x05	; 5
   18640:	e6 0d       	add	r30, r6
   18642:	f7 1d       	adc	r31, r7
   18644:	e4 90       	lpm	r14, Z
   18646:	04 91       	lpm	r16, Z
   18648:	f2 01       	movw	r30, r4
   1864a:	37 97       	sbiw	r30, 0x07	; 7
   1864c:	e6 0d       	add	r30, r6
   1864e:	f7 1d       	adc	r31, r7
   18650:	25 91       	lpm	r18, Z+
   18652:	34 91       	lpm	r19, Z
   18654:	f2 01       	movw	r30, r4
   18656:	39 97       	sbiw	r30, 0x09	; 9
   18658:	e6 0d       	add	r30, r6
   1865a:	f7 1d       	adc	r31, r7
   1865c:	45 91       	lpm	r20, Z+
   1865e:	54 91       	lpm	r21, Z
   18660:	f2 01       	movw	r30, r4
   18662:	3b 97       	sbiw	r30, 0x0b	; 11
   18664:	e6 0d       	add	r30, r6
   18666:	f7 1d       	adc	r31, r7
   18668:	65 91       	lpm	r22, Z+
   1866a:	74 91       	lpm	r23, Z
   1866c:	f2 01       	movw	r30, r4
   1866e:	3d 97       	sbiw	r30, 0x0d	; 13
   18670:	e6 0d       	add	r30, r6
   18672:	f7 1d       	adc	r31, r7
   18674:	85 91       	lpm	r24, Z+
   18676:	94 91       	lpm	r25, Z
   18678:	c6 54       	subi	r28, 0x46	; 70
   1867a:	df 4f       	sbci	r29, 0xFF	; 255
   1867c:	e8 81       	ld	r30, Y
   1867e:	f9 81       	ldd	r31, Y+1	; 0x01
   18680:	ca 5b       	subi	r28, 0xBA	; 186
   18682:	d0 40       	sbci	r29, 0x00	; 0
   18684:	6e 0f       	add	r22, r30
   18686:	7f 1f       	adc	r23, r31
   18688:	81 2c       	mov	r8, r1
   1868a:	fe 01       	movw	r30, r28
   1868c:	31 96       	adiw	r30, 0x01	; 1
   1868e:	5f 01       	movw	r10, r30
   18690:	e0 58       	subi	r30, 0x80	; 128
   18692:	ff 4f       	sbci	r31, 0xFF	; 255
   18694:	6f 01       	movw	r12, r30
   18696:	c8 54       	subi	r28, 0x48	; 72
   18698:	df 4f       	sbci	r29, 0xFF	; 255
   1869a:	e8 81       	ld	r30, Y
   1869c:	f9 81       	ldd	r31, Y+1	; 0x01
   1869e:	c8 5b       	subi	r28, 0xB8	; 184
   186a0:	d0 40       	sbci	r29, 0x00	; 0
   186a2:	8e 0f       	add	r24, r30
   186a4:	9f 1f       	adc	r25, r31
   186a6:	0e 94 06 a6 	call	0x14c0c	; 0x14c0c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:767
    }
    if (click_x > 0 && click_y > 0)
   186aa:	c9 53       	subi	r28, 0x39	; 57
   186ac:	df 4f       	sbci	r29, 0xFF	; 255
   186ae:	28 81       	ld	r18, Y
   186b0:	39 81       	ldd	r19, Y+1	; 0x01
   186b2:	c7 5c       	subi	r28, 0xC7	; 199
   186b4:	d0 40       	sbci	r29, 0x00	; 0
   186b6:	23 2b       	or	r18, r19
   186b8:	09 f4       	brne	.+2      	; 0x186bc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4fe>
   186ba:	59 c0       	rjmp	.+178    	; 0x1876e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5b0>
   186bc:	c7 53       	subi	r28, 0x37	; 55
   186be:	df 4f       	sbci	r29, 0xFF	; 255
   186c0:	48 81       	ld	r20, Y
   186c2:	59 81       	ldd	r21, Y+1	; 0x01
   186c4:	c9 5c       	subi	r28, 0xC9	; 201
   186c6:	d0 40       	sbci	r29, 0x00	; 0
   186c8:	45 2b       	or	r20, r21
   186ca:	09 f4       	brne	.+2      	; 0x186ce <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x510>
   186cc:	50 c0       	rjmp	.+160    	; 0x1876e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:768
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
   186ce:	f2 01       	movw	r30, r4
   186d0:	37 97       	sbiw	r30, 0x07	; 7
   186d2:	e6 0d       	add	r30, r6
   186d4:	f7 1d       	adc	r31, r7
   186d6:	25 91       	lpm	r18, Z+
   186d8:	34 91       	lpm	r19, Z
   186da:	f2 01       	movw	r30, r4
   186dc:	39 97       	sbiw	r30, 0x09	; 9
   186de:	e6 0d       	add	r30, r6
   186e0:	f7 1d       	adc	r31, r7
   186e2:	45 91       	lpm	r20, Z+
   186e4:	54 91       	lpm	r21, Z
   186e6:	f2 01       	movw	r30, r4
   186e8:	3b 97       	sbiw	r30, 0x0b	; 11
   186ea:	e6 0d       	add	r30, r6
   186ec:	f7 1d       	adc	r31, r7
   186ee:	65 91       	lpm	r22, Z+
   186f0:	74 91       	lpm	r23, Z
   186f2:	f2 01       	movw	r30, r4
   186f4:	3d 97       	sbiw	r30, 0x0d	; 13
   186f6:	e6 0d       	add	r30, r6
   186f8:	f7 1d       	adc	r31, r7
   186fa:	85 91       	lpm	r24, Z+
   186fc:	94 91       	lpm	r25, Z
   186fe:	c6 54       	subi	r28, 0x46	; 70
   18700:	df 4f       	sbci	r29, 0xFF	; 255
   18702:	e8 81       	ld	r30, Y
   18704:	f9 81       	ldd	r31, Y+1	; 0x01
   18706:	ca 5b       	subi	r28, 0xBA	; 186
   18708:	d0 40       	sbci	r29, 0x00	; 0
   1870a:	6e 0f       	add	r22, r30
   1870c:	7f 1f       	adc	r23, r31
   1870e:	c7 53       	subi	r28, 0x37	; 55
   18710:	df 4f       	sbci	r29, 0xFF	; 255
   18712:	e8 80       	ld	r14, Y
   18714:	f9 80       	ldd	r15, Y+1	; 0x01
   18716:	c9 5c       	subi	r28, 0xC9	; 201
   18718:	d0 40       	sbci	r29, 0x00	; 0
   1871a:	c9 53       	subi	r28, 0x39	; 57
   1871c:	df 4f       	sbci	r29, 0xFF	; 255
   1871e:	08 81       	ld	r16, Y
   18720:	19 81       	ldd	r17, Y+1	; 0x01
   18722:	c7 5c       	subi	r28, 0xC7	; 199
   18724:	d0 40       	sbci	r29, 0x00	; 0
   18726:	c8 54       	subi	r28, 0x48	; 72
   18728:	df 4f       	sbci	r29, 0xFF	; 255
   1872a:	e8 81       	ld	r30, Y
   1872c:	f9 81       	ldd	r31, Y+1	; 0x01
   1872e:	c8 5b       	subi	r28, 0xB8	; 184
   18730:	d0 40       	sbci	r29, 0x00	; 0
   18732:	8e 0f       	add	r24, r30
   18734:	9f 1f       	adc	r25, r31
   18736:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1873a:	18 2f       	mov	r17, r24
   1873c:	88 23       	and	r24, r24
   1873e:	b9 f0       	breq	.+46     	; 0x1876e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:770
      {
        fntargs = (fptr_args*)pgm_read_word(&button_1->onclick);
   18740:	f2 01       	movw	r30, r4
   18742:	33 97       	sbiw	r30, 0x03	; 3
   18744:	e6 0d       	add	r30, r6
   18746:	f7 1d       	adc	r31, r7
   18748:	25 91       	lpm	r18, Z+
   1874a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:771
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
   1874c:	f1 01       	movw	r30, r2
   1874e:	84 91       	lpm	r24, Z
   18750:	cf 54       	subi	r28, 0x4F	; 79
   18752:	df 4f       	sbci	r29, 0xFF	; 255
   18754:	68 81       	ld	r22, Y
   18756:	c1 5b       	subi	r28, 0xB1	; 177
   18758:	d0 40       	sbci	r29, 0x00	; 0
   1875a:	70 e0       	ldi	r23, 0x00	; 0
   1875c:	49 2d       	mov	r20, r9
   1875e:	90 e0       	ldi	r25, 0x00	; 0
   18760:	f9 01       	movw	r30, r18
   18762:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:772
        ret = true;
   18764:	ca 53       	subi	r28, 0x3A	; 58
   18766:	df 4f       	sbci	r29, 0xFF	; 255
   18768:	18 83       	st	Y, r17
   1876a:	c6 5c       	subi	r28, 0xC6	; 198
   1876c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:754
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   1876e:	93 94       	inc	r9
   18770:	1d cf       	rjmp	.-454    	; 0x185ac <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:775
        fntargs = (fptr_args*)pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   18772:	ca 53       	subi	r28, 0x3A	; 58
   18774:	df 4f       	sbci	r29, 0xFF	; 255
   18776:	f8 81       	ld	r31, Y
   18778:	c6 5c       	subi	r28, 0xC6	; 198
   1877a:	d0 40       	sbci	r29, 0x00	; 0
   1877c:	f1 11       	cpse	r31, r1
   1877e:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   18782:	91 2c       	mov	r9, r1
   18784:	93 01       	movw	r18, r6
   18786:	2b 52       	subi	r18, 0x2B	; 43
   18788:	3d 4f       	sbci	r19, 0xFD	; 253
   1878a:	c4 54       	subi	r28, 0x44	; 68
   1878c:	df 4f       	sbci	r29, 0xFF	; 255
   1878e:	39 83       	std	Y+1, r19	; 0x01
   18790:	28 83       	st	Y, r18
   18792:	cc 5b       	subi	r28, 0xBC	; 188
   18794:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:787
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   18796:	1e 01       	movw	r2, r28
   18798:	31 e8       	ldi	r19, 0x81	; 129
   1879a:	23 0e       	add	r2, r19
   1879c:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
      }
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   1879e:	c4 54       	subi	r28, 0x44	; 68
   187a0:	df 4f       	sbci	r29, 0xFF	; 255
   187a2:	e8 81       	ld	r30, Y
   187a4:	f9 81       	ldd	r31, Y+1	; 0x01
   187a6:	cc 5b       	subi	r28, 0xBC	; 188
   187a8:	d0 40       	sbci	r29, 0x00	; 0
   187aa:	84 91       	lpm	r24, Z
   187ac:	98 16       	cp	r9, r24
   187ae:	08 f0       	brcs	.+2      	; 0x187b2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5f4>
   187b0:	26 c1       	rjmp	.+588    	; 0x189fe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x840>
   187b2:	f7 e1       	ldi	r31, 0x17	; 23
   187b4:	9f 9e       	mul	r9, r31
   187b6:	20 01       	movw	r4, r0
   187b8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:781
  {
    button_2 = &current->button_2[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_2->enable_show);
   187ba:	f2 01       	movw	r30, r4
   187bc:	ef 53       	subi	r30, 0x3F	; 63
   187be:	ff 4f       	sbci	r31, 0xFF	; 255
   187c0:	e6 0d       	add	r30, r6
   187c2:	f7 1d       	adc	r31, r7
   187c4:	25 91       	lpm	r18, Z+
   187c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:782
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
   187c8:	c2 01       	movw	r24, r4
   187ca:	85 54       	subi	r24, 0x45	; 69
   187cc:	9f 4f       	sbci	r25, 0xFF	; 255
   187ce:	a3 01       	movw	r20, r6
   187d0:	48 0f       	add	r20, r24
   187d2:	59 1f       	adc	r21, r25
   187d4:	ca 54       	subi	r28, 0x4A	; 74
   187d6:	df 4f       	sbci	r29, 0xFF	; 255
   187d8:	59 83       	std	Y+1, r21	; 0x01
   187da:	48 83       	st	Y, r20
   187dc:	c6 5b       	subi	r28, 0xB6	; 182
   187de:	d0 40       	sbci	r29, 0x00	; 0
   187e0:	fa 01       	movw	r30, r20
   187e2:	84 91       	lpm	r24, Z
   187e4:	cf 54       	subi	r28, 0x4F	; 79
   187e6:	df 4f       	sbci	r29, 0xFF	; 255
   187e8:	68 81       	ld	r22, Y
   187ea:	c1 5b       	subi	r28, 0xB1	; 177
   187ec:	d0 40       	sbci	r29, 0x00	; 0
   187ee:	70 e0       	ldi	r23, 0x00	; 0
   187f0:	49 2d       	mov	r20, r9
   187f2:	90 e0       	ldi	r25, 0x00	; 0
   187f4:	f9 01       	movw	r30, r18
   187f6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:783
    if (active == 0) continue;
   187f8:	88 23       	and	r24, r24
   187fa:	09 f4       	brne	.+2      	; 0x187fe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x640>
   187fc:	fe c0       	rjmp	.+508    	; 0x189fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x83c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:784
    rdr = pgm_read_byte(&button_2->redraw_class);
   187fe:	f2 01       	movw	r30, r4
   18800:	e0 54       	subi	r30, 0x40	; 64
   18802:	ff 4f       	sbci	r31, 0xFF	; 255
   18804:	e6 0d       	add	r30, r6
   18806:	f7 1d       	adc	r31, r7
   18808:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:785
    if (enable_redraw(rdr, redraw_class) == true)
   1880a:	c1 53       	subi	r28, 0x31	; 49
   1880c:	df 4f       	sbci	r29, 0xFF	; 255
   1880e:	68 81       	ld	r22, Y
   18810:	cf 5c       	subi	r28, 0xCF	; 207
   18812:	d0 40       	sbci	r29, 0x00	; 0
   18814:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   18818:	88 23       	and	r24, r24
   1881a:	09 f4       	brne	.+2      	; 0x1881e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x660>
   1881c:	82 c0       	rjmp	.+260    	; 0x18922 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x764>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:787
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   1881e:	f2 01       	movw	r30, r4
   18820:	e4 55       	subi	r30, 0x54	; 84
   18822:	ff 4f       	sbci	r31, 0xFF	; 255
   18824:	e6 0d       	add	r30, r6
   18826:	f7 1d       	adc	r31, r7
   18828:	65 91       	lpm	r22, Z+
   1882a:	74 91       	lpm	r23, Z
   1882c:	c1 01       	movw	r24, r2
   1882e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:788
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
   18832:	f2 01       	movw	r30, r4
   18834:	e2 54       	subi	r30, 0x42	; 66
   18836:	ff 4f       	sbci	r31, 0xFF	; 255
   18838:	e6 0d       	add	r30, r6
   1883a:	f7 1d       	adc	r31, r7
   1883c:	25 91       	lpm	r18, Z+
   1883e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:789
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
   18840:	ca 54       	subi	r28, 0x4A	; 74
   18842:	df 4f       	sbci	r29, 0xFF	; 255
   18844:	e8 81       	ld	r30, Y
   18846:	f9 81       	ldd	r31, Y+1	; 0x01
   18848:	c6 5b       	subi	r28, 0xB6	; 182
   1884a:	d0 40       	sbci	r29, 0x00	; 0
   1884c:	84 91       	lpm	r24, Z
   1884e:	cf 54       	subi	r28, 0x4F	; 79
   18850:	df 4f       	sbci	r29, 0xFF	; 255
   18852:	68 81       	ld	r22, Y
   18854:	c1 5b       	subi	r28, 0xB1	; 177
   18856:	d0 40       	sbci	r29, 0x00	; 0
   18858:	70 e0       	ldi	r23, 0x00	; 0
   1885a:	49 2d       	mov	r20, r9
   1885c:	90 e0       	ldi	r25, 0x00	; 0
   1885e:	f9 01       	movw	r30, r18
   18860:	19 95       	eicall
   18862:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:791
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   18864:	60 e2       	ldi	r22, 0x20	; 32
   18866:	c1 53       	subi	r28, 0x31	; 49
   18868:	df 4f       	sbci	r29, 0xFF	; 255
   1886a:	88 81       	ld	r24, Y
   1886c:	cf 5c       	subi	r28, 0xCF	; 207
   1886e:	d0 40       	sbci	r29, 0x00	; 0
   18870:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   18874:	88 23       	and	r24, r24
   18876:	21 f0       	breq	.+8      	; 0x18880 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x6c2>
   18878:	f2 e0       	ldi	r31, 0x02	; 2
   1887a:	8f 12       	cpse	r8, r31
   1887c:	01 c0       	rjmp	.+2      	; 0x18880 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x6c2>
   1887e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:792
      str1[0] = 0;
   18880:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:797
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
   18882:	f2 01       	movw	r30, r4
   18884:	e7 54       	subi	r30, 0x47	; 71
   18886:	ff 4f       	sbci	r31, 0xFF	; 255
   18888:	e6 0d       	add	r30, r6
   1888a:	f7 1d       	adc	r31, r7
   1888c:	a5 90       	lpm	r10, Z+
   1888e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:796
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
   18890:	f2 01       	movw	r30, r4
   18892:	e9 54       	subi	r30, 0x49	; 73
   18894:	ff 4f       	sbci	r31, 0xFF	; 255
   18896:	e6 0d       	add	r30, r6
   18898:	f7 1d       	adc	r31, r7
   1889a:	c5 90       	lpm	r12, Z+
   1889c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:795
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
   1889e:	82 01       	movw	r16, r4
   188a0:	0a 54       	subi	r16, 0x4A	; 74
   188a2:	1f 4f       	sbci	r17, 0xFF	; 255
   188a4:	06 0d       	add	r16, r6
   188a6:	17 1d       	adc	r17, r7
   188a8:	f8 01       	movw	r30, r16
   188aa:	04 91       	lpm	r16, Z
   188ac:	f2 01       	movw	r30, r4
   188ae:	ec 54       	subi	r30, 0x4C	; 76
   188b0:	ff 4f       	sbci	r31, 0xFF	; 255
   188b2:	e6 0d       	add	r30, r6
   188b4:	f7 1d       	adc	r31, r7
   188b6:	25 91       	lpm	r18, Z+
   188b8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:794
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
   188ba:	f2 01       	movw	r30, r4
   188bc:	ee 54       	subi	r30, 0x4E	; 78
   188be:	ff 4f       	sbci	r31, 0xFF	; 255
   188c0:	e6 0d       	add	r30, r6
   188c2:	f7 1d       	adc	r31, r7
   188c4:	45 91       	lpm	r20, Z+
   188c6:	54 91       	lpm	r21, Z
   188c8:	f2 01       	movw	r30, r4
   188ca:	e0 55       	subi	r30, 0x50	; 80
   188cc:	ff 4f       	sbci	r31, 0xFF	; 255
   188ce:	e6 0d       	add	r30, r6
   188d0:	f7 1d       	adc	r31, r7
   188d2:	65 91       	lpm	r22, Z+
   188d4:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:793
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
   188d6:	f2 01       	movw	r30, r4
   188d8:	e2 55       	subi	r30, 0x52	; 82
   188da:	ff 4f       	sbci	r31, 0xFF	; 255
   188dc:	e6 0d       	add	r30, r6
   188de:	f7 1d       	adc	r31, r7
   188e0:	85 91       	lpm	r24, Z+
   188e2:	94 91       	lpm	r25, Z
   188e4:	c6 54       	subi	r28, 0x46	; 70
   188e6:	df 4f       	sbci	r29, 0xFF	; 255
   188e8:	e8 81       	ld	r30, Y
   188ea:	f9 81       	ldd	r31, Y+1	; 0x01
   188ec:	ca 5b       	subi	r28, 0xBA	; 186
   188ee:	d0 40       	sbci	r29, 0x00	; 0
   188f0:	6e 0f       	add	r22, r30
   188f2:	7f 1f       	adc	r23, r31
   188f4:	e1 e0       	ldi	r30, 0x01	; 1
   188f6:	f0 e0       	ldi	r31, 0x00	; 0
   188f8:	ec 0f       	add	r30, r28
   188fa:	fd 1f       	adc	r31, r29
   188fc:	ff 93       	push	r31
   188fe:	ef 93       	push	r30
   18900:	3f 92       	push	r3
   18902:	2f 92       	push	r2
   18904:	e1 2c       	mov	r14, r1
   18906:	c8 54       	subi	r28, 0x48	; 72
   18908:	df 4f       	sbci	r29, 0xFF	; 255
   1890a:	e8 81       	ld	r30, Y
   1890c:	f9 81       	ldd	r31, Y+1	; 0x01
   1890e:	c8 5b       	subi	r28, 0xB8	; 184
   18910:	d0 40       	sbci	r29, 0x00	; 0
   18912:	8e 0f       	add	r24, r30
   18914:	9f 1f       	adc	r25, r31
   18916:	0e 94 f7 a4 	call	0x149ee	; 0x149ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
   1891a:	0f 90       	pop	r0
   1891c:	0f 90       	pop	r0
   1891e:	0f 90       	pop	r0
   18920:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:799
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
   18922:	c9 53       	subi	r28, 0x39	; 57
   18924:	df 4f       	sbci	r29, 0xFF	; 255
   18926:	28 81       	ld	r18, Y
   18928:	39 81       	ldd	r19, Y+1	; 0x01
   1892a:	c7 5c       	subi	r28, 0xC7	; 199
   1892c:	d0 40       	sbci	r29, 0x00	; 0
   1892e:	23 2b       	or	r18, r19
   18930:	09 f4       	brne	.+2      	; 0x18934 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x776>
   18932:	63 c0       	rjmp	.+198    	; 0x189fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x83c>
   18934:	c7 53       	subi	r28, 0x37	; 55
   18936:	df 4f       	sbci	r29, 0xFF	; 255
   18938:	48 81       	ld	r20, Y
   1893a:	59 81       	ldd	r21, Y+1	; 0x01
   1893c:	c9 5c       	subi	r28, 0xC9	; 201
   1893e:	d0 40       	sbci	r29, 0x00	; 0
   18940:	45 2b       	or	r20, r21
   18942:	09 f4       	brne	.+2      	; 0x18946 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x788>
   18944:	5a c0       	rjmp	.+180    	; 0x189fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x83c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:800
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
   18946:	f2 01       	movw	r30, r4
   18948:	ec 54       	subi	r30, 0x4C	; 76
   1894a:	ff 4f       	sbci	r31, 0xFF	; 255
   1894c:	e6 0d       	add	r30, r6
   1894e:	f7 1d       	adc	r31, r7
   18950:	25 91       	lpm	r18, Z+
   18952:	34 91       	lpm	r19, Z
   18954:	f2 01       	movw	r30, r4
   18956:	ee 54       	subi	r30, 0x4E	; 78
   18958:	ff 4f       	sbci	r31, 0xFF	; 255
   1895a:	e6 0d       	add	r30, r6
   1895c:	f7 1d       	adc	r31, r7
   1895e:	45 91       	lpm	r20, Z+
   18960:	54 91       	lpm	r21, Z
   18962:	f2 01       	movw	r30, r4
   18964:	e0 55       	subi	r30, 0x50	; 80
   18966:	ff 4f       	sbci	r31, 0xFF	; 255
   18968:	e6 0d       	add	r30, r6
   1896a:	f7 1d       	adc	r31, r7
   1896c:	65 91       	lpm	r22, Z+
   1896e:	74 91       	lpm	r23, Z
   18970:	f2 01       	movw	r30, r4
   18972:	e2 55       	subi	r30, 0x52	; 82
   18974:	ff 4f       	sbci	r31, 0xFF	; 255
   18976:	e6 0d       	add	r30, r6
   18978:	f7 1d       	adc	r31, r7
   1897a:	85 91       	lpm	r24, Z+
   1897c:	94 91       	lpm	r25, Z
   1897e:	c6 54       	subi	r28, 0x46	; 70
   18980:	df 4f       	sbci	r29, 0xFF	; 255
   18982:	e8 81       	ld	r30, Y
   18984:	f9 81       	ldd	r31, Y+1	; 0x01
   18986:	ca 5b       	subi	r28, 0xBA	; 186
   18988:	d0 40       	sbci	r29, 0x00	; 0
   1898a:	6e 0f       	add	r22, r30
   1898c:	7f 1f       	adc	r23, r31
   1898e:	c7 53       	subi	r28, 0x37	; 55
   18990:	df 4f       	sbci	r29, 0xFF	; 255
   18992:	e8 80       	ld	r14, Y
   18994:	f9 80       	ldd	r15, Y+1	; 0x01
   18996:	c9 5c       	subi	r28, 0xC9	; 201
   18998:	d0 40       	sbci	r29, 0x00	; 0
   1899a:	c9 53       	subi	r28, 0x39	; 57
   1899c:	df 4f       	sbci	r29, 0xFF	; 255
   1899e:	08 81       	ld	r16, Y
   189a0:	19 81       	ldd	r17, Y+1	; 0x01
   189a2:	c7 5c       	subi	r28, 0xC7	; 199
   189a4:	d0 40       	sbci	r29, 0x00	; 0
   189a6:	c8 54       	subi	r28, 0x48	; 72
   189a8:	df 4f       	sbci	r29, 0xFF	; 255
   189aa:	e8 81       	ld	r30, Y
   189ac:	f9 81       	ldd	r31, Y+1	; 0x01
   189ae:	c8 5b       	subi	r28, 0xB8	; 184
   189b0:	d0 40       	sbci	r29, 0x00	; 0
   189b2:	8e 0f       	add	r24, r30
   189b4:	9f 1f       	adc	r25, r31
   189b6:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   189ba:	18 2f       	mov	r17, r24
   189bc:	88 23       	and	r24, r24
   189be:	e9 f0       	breq	.+58     	; 0x189fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x83c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:802
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
   189c0:	f2 01       	movw	r30, r4
   189c2:	e4 54       	subi	r30, 0x44	; 68
   189c4:	ff 4f       	sbci	r31, 0xFF	; 255
   189c6:	e6 0d       	add	r30, r6
   189c8:	f7 1d       	adc	r31, r7
   189ca:	25 91       	lpm	r18, Z+
   189cc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:803
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
   189ce:	ca 54       	subi	r28, 0x4A	; 74
   189d0:	df 4f       	sbci	r29, 0xFF	; 255
   189d2:	e8 81       	ld	r30, Y
   189d4:	f9 81       	ldd	r31, Y+1	; 0x01
   189d6:	c6 5b       	subi	r28, 0xB6	; 182
   189d8:	d0 40       	sbci	r29, 0x00	; 0
   189da:	84 91       	lpm	r24, Z
   189dc:	cf 54       	subi	r28, 0x4F	; 79
   189de:	df 4f       	sbci	r29, 0xFF	; 255
   189e0:	68 81       	ld	r22, Y
   189e2:	c1 5b       	subi	r28, 0xB1	; 177
   189e4:	d0 40       	sbci	r29, 0x00	; 0
   189e6:	70 e0       	ldi	r23, 0x00	; 0
   189e8:	49 2d       	mov	r20, r9
   189ea:	90 e0       	ldi	r25, 0x00	; 0
   189ec:	f9 01       	movw	r30, r18
   189ee:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:804
        ret = true;
   189f0:	ca 53       	subi	r28, 0x3A	; 58
   189f2:	df 4f       	sbci	r29, 0xFF	; 255
   189f4:	18 83       	st	Y, r17
   189f6:	c6 5c       	subi	r28, 0xC6	; 198
   189f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
      }
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   189fa:	93 94       	inc	r9
   189fc:	d0 ce       	rjmp	.-608    	; 0x1879e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5e0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:807
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   189fe:	ca 53       	subi	r28, 0x3A	; 58
   18a00:	df 4f       	sbci	r29, 0xFF	; 255
   18a02:	f8 81       	ld	r31, Y
   18a04:	c6 5c       	subi	r28, 0xC6	; 198
   18a06:	d0 40       	sbci	r29, 0x00	; 0
   18a08:	f1 11       	cpse	r31, r1
   18a0a:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:810
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   18a0e:	ca 54       	subi	r28, 0x4A	; 74
   18a10:	df 4f       	sbci	r29, 0xFF	; 255
   18a12:	18 82       	st	Y, r1
   18a14:	c6 5b       	subi	r28, 0xB6	; 182
   18a16:	d0 40       	sbci	r29, 0x00	; 0
   18a18:	93 01       	movw	r18, r6
   18a1a:	29 52       	subi	r18, 0x29	; 41
   18a1c:	3d 4f       	sbci	r19, 0xFD	; 253
   18a1e:	cc 53       	subi	r28, 0x3C	; 60
   18a20:	df 4f       	sbci	r29, 0xFF	; 255
   18a22:	39 83       	std	Y+1, r19	; 0x01
   18a24:	28 83       	st	Y, r18
   18a26:	c4 5c       	subi	r28, 0xC4	; 196
   18a28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:816
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   18a2a:	2e 01       	movw	r4, r28
   18a2c:	31 e8       	ldi	r19, 0x81	; 129
   18a2e:	43 0e       	add	r4, r19
   18a30:	51 1c       	adc	r5, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:821
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   18a32:	ae 01       	movw	r20, r28
   18a34:	4f 5f       	subi	r20, 0xFF	; 255
   18a36:	5f 4f       	sbci	r21, 0xFF	; 255
   18a38:	cc 54       	subi	r28, 0x4C	; 76
   18a3a:	df 4f       	sbci	r29, 0xFF	; 255
   18a3c:	59 83       	std	Y+1, r21	; 0x01
   18a3e:	48 83       	st	Y, r20
   18a40:	c4 5b       	subi	r28, 0xB4	; 180
   18a42:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:810
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   18a44:	cc 53       	subi	r28, 0x3C	; 60
   18a46:	df 4f       	sbci	r29, 0xFF	; 255
   18a48:	e8 81       	ld	r30, Y
   18a4a:	f9 81       	ldd	r31, Y+1	; 0x01
   18a4c:	c4 5c       	subi	r28, 0xC4	; 196
   18a4e:	d0 40       	sbci	r29, 0x00	; 0
   18a50:	84 91       	lpm	r24, Z
   18a52:	ca 54       	subi	r28, 0x4A	; 74
   18a54:	df 4f       	sbci	r29, 0xFF	; 255
   18a56:	f8 81       	ld	r31, Y
   18a58:	c6 5b       	subi	r28, 0xB6	; 182
   18a5a:	d0 40       	sbci	r29, 0x00	; 0
   18a5c:	f8 17       	cp	r31, r24
   18a5e:	08 f0       	brcs	.+2      	; 0x18a62 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x8a4>
   18a60:	d0 c1       	rjmp	.+928    	; 0x18e02 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc44>
   18a62:	27 e1       	ldi	r18, 0x17	; 23
   18a64:	f2 9f       	mul	r31, r18
   18a66:	50 01       	movw	r10, r0
   18a68:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:813
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
   18a6a:	f5 01       	movw	r30, r10
   18a6c:	ec 56       	subi	r30, 0x6C	; 108
   18a6e:	fe 4f       	sbci	r31, 0xFE	; 254
   18a70:	e6 0d       	add	r30, r6
   18a72:	f7 1d       	adc	r31, r7
   18a74:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:814
    if (enable_redraw(rdr, redraw_class) == true)
   18a76:	c1 53       	subi	r28, 0x31	; 49
   18a78:	df 4f       	sbci	r29, 0xFF	; 255
   18a7a:	68 81       	ld	r22, Y
   18a7c:	cf 5c       	subi	r28, 0xCF	; 207
   18a7e:	d0 40       	sbci	r29, 0x00	; 0
   18a80:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   18a84:	88 23       	and	r24, r24
   18a86:	09 f4       	brne	.+2      	; 0x18a8a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x8cc>
   18a88:	41 c1       	rjmp	.+642    	; 0x18d0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:816
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   18a8a:	f5 01       	movw	r30, r10
   18a8c:	e2 58       	subi	r30, 0x82	; 130
   18a8e:	fe 4f       	sbci	r31, 0xFE	; 254
   18a90:	e6 0d       	add	r30, r6
   18a92:	f7 1d       	adc	r31, r7
   18a94:	65 91       	lpm	r22, Z+
   18a96:	74 91       	lpm	r23, Z
   18a98:	c2 01       	movw	r24, r4
   18a9a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:817
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
   18a9e:	f5 01       	movw	r30, r10
   18aa0:	e0 57       	subi	r30, 0x70	; 112
   18aa2:	fe 4f       	sbci	r31, 0xFE	; 254
   18aa4:	e6 0d       	add	r30, r6
   18aa6:	f7 1d       	adc	r31, r7
   18aa8:	25 91       	lpm	r18, Z+
   18aaa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:818
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
   18aac:	f5 01       	movw	r30, r10
   18aae:	ee 56       	subi	r30, 0x6E	; 110
   18ab0:	fe 4f       	sbci	r31, 0xFE	; 254
   18ab2:	e6 0d       	add	r30, r6
   18ab4:	f7 1d       	adc	r31, r7
   18ab6:	e5 90       	lpm	r14, Z+
   18ab8:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:819
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   18aba:	85 01       	movw	r16, r10
   18abc:	03 57       	subi	r16, 0x73	; 115
   18abe:	1e 4f       	sbci	r17, 0xFE	; 254
   18ac0:	06 0d       	add	r16, r6
   18ac2:	17 1d       	adc	r17, r7
   18ac4:	f8 01       	movw	r30, r16
   18ac6:	84 91       	lpm	r24, Z
   18ac8:	cf 54       	subi	r28, 0x4F	; 79
   18aca:	df 4f       	sbci	r29, 0xFF	; 255
   18acc:	68 81       	ld	r22, Y
   18ace:	c1 5b       	subi	r28, 0xB1	; 177
   18ad0:	d0 40       	sbci	r29, 0x00	; 0
   18ad2:	70 e0       	ldi	r23, 0x00	; 0
   18ad4:	ca 54       	subi	r28, 0x4A	; 74
   18ad6:	df 4f       	sbci	r29, 0xFF	; 255
   18ad8:	48 81       	ld	r20, Y
   18ada:	c6 5b       	subi	r28, 0xB6	; 182
   18adc:	d0 40       	sbci	r29, 0x00	; 0
   18ade:	90 e0       	ldi	r25, 0x00	; 0
   18ae0:	f9 01       	movw	r30, r18
   18ae2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:820
      str3[0] = 0;
   18ae4:	cf 55       	subi	r28, 0x5F	; 95
   18ae6:	df 4f       	sbci	r29, 0xFF	; 255
   18ae8:	18 82       	st	Y, r1
   18aea:	c1 5a       	subi	r28, 0xA1	; 161
   18aec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:821
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   18aee:	f8 01       	movw	r30, r16
   18af0:	44 91       	lpm	r20, Z
   18af2:	84 91       	lpm	r24, Z
   18af4:	8e 01       	movw	r16, r28
   18af6:	0f 55       	subi	r16, 0x5F	; 95
   18af8:	1f 4f       	sbci	r17, 0xFF	; 255
   18afa:	9e 01       	movw	r18, r28
   18afc:	2f 5f       	subi	r18, 0xFF	; 255
   18afe:	3f 4f       	sbci	r19, 0xFF	; 255
   18b00:	cf 54       	subi	r28, 0x4F	; 79
   18b02:	df 4f       	sbci	r29, 0xFF	; 255
   18b04:	68 81       	ld	r22, Y
   18b06:	c1 5b       	subi	r28, 0xB1	; 177
   18b08:	d0 40       	sbci	r29, 0x00	; 0
   18b0a:	f7 01       	movw	r30, r14
   18b0c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:826
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
   18b0e:	f5 01       	movw	r30, r10
   18b10:	e8 57       	subi	r30, 0x78	; 120
   18b12:	fe 4f       	sbci	r31, 0xFE	; 254
   18b14:	e6 0d       	add	r30, r6
   18b16:	f7 1d       	adc	r31, r7
   18b18:	25 91       	lpm	r18, Z+
   18b1a:	34 91       	lpm	r19, Z
   18b1c:	c4 54       	subi	r28, 0x44	; 68
   18b1e:	df 4f       	sbci	r29, 0xFF	; 255
   18b20:	39 83       	std	Y+1, r19	; 0x01
   18b22:	28 83       	st	Y, r18
   18b24:	cc 5b       	subi	r28, 0xBC	; 188
   18b26:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:825
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
   18b28:	f5 01       	movw	r30, r10
   18b2a:	ea 57       	subi	r30, 0x7A	; 122
   18b2c:	fe 4f       	sbci	r31, 0xFE	; 254
   18b2e:	e6 0d       	add	r30, r6
   18b30:	f7 1d       	adc	r31, r7
   18b32:	c5 90       	lpm	r12, Z+
   18b34:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:824
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
   18b36:	f5 01       	movw	r30, r10
   18b38:	ec 57       	subi	r30, 0x7C	; 124
   18b3a:	fe 4f       	sbci	r31, 0xFE	; 254
   18b3c:	e6 0d       	add	r30, r6
   18b3e:	f7 1d       	adc	r31, r7
   18b40:	85 91       	lpm	r24, Z+
   18b42:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:823
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
   18b44:	f5 01       	movw	r30, r10
   18b46:	ee 57       	subi	r30, 0x7E	; 126
   18b48:	fe 4f       	sbci	r31, 0xFE	; 254
   18b4a:	e6 0d       	add	r30, r6
   18b4c:	f7 1d       	adc	r31, r7
   18b4e:	25 90       	lpm	r2, Z+
   18b50:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:822
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
   18b52:	c6 54       	subi	r28, 0x46	; 70
   18b54:	df 4f       	sbci	r29, 0xFF	; 255
   18b56:	48 81       	ld	r20, Y
   18b58:	59 81       	ldd	r21, Y+1	; 0x01
   18b5a:	ca 5b       	subi	r28, 0xBA	; 186
   18b5c:	d0 40       	sbci	r29, 0x00	; 0
   18b5e:	24 0e       	add	r2, r20
   18b60:	35 1e       	adc	r3, r21
   18b62:	f5 01       	movw	r30, r10
   18b64:	e0 58       	subi	r30, 0x80	; 128
   18b66:	fe 4f       	sbci	r31, 0xFE	; 254
   18b68:	e6 0d       	add	r30, r6
   18b6a:	f7 1d       	adc	r31, r7
   18b6c:	85 90       	lpm	r8, Z+
   18b6e:	94 90       	lpm	r9, Z
   18b70:	c8 54       	subi	r28, 0x48	; 72
   18b72:	df 4f       	sbci	r29, 0xFF	; 255
   18b74:	68 81       	ld	r22, Y
   18b76:	79 81       	ldd	r23, Y+1	; 0x01
   18b78:	c8 5b       	subi	r28, 0xB8	; 184
   18b7a:	d0 40       	sbci	r29, 0x00	; 0
   18b7c:	86 0e       	add	r8, r22
   18b7e:	97 1e       	adc	r9, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
   18b80:	10 92 60 0f 	sts	0x0F60, r1	; 0x800f60 <my_lcd+0xb>
   18b84:	10 92 5f 0f 	sts	0x0F5F, r1	; 0x800f5f <my_lcd+0xa>
   18b88:	10 e0       	ldi	r17, 0x00	; 0
   18b8a:	00 e0       	ldi	r16, 0x00	; 0
   18b8c:	dd 24       	eor	r13, r13
   18b8e:	fc 01       	movw	r30, r24
   18b90:	ff 27       	eor	r31, r31
   18b92:	ce 53       	subi	r28, 0x3E	; 62
   18b94:	df 4f       	sbci	r29, 0xFF	; 255
   18b96:	f9 83       	std	Y+1, r31	; 0x01
   18b98:	e8 83       	st	Y, r30
   18b9a:	c2 5c       	subi	r28, 0xC2	; 194
   18b9c:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4543
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   18b9e:	71 01       	movw	r14, r2
   18ba0:	ec 0c       	add	r14, r12
   18ba2:	fd 1c       	adc	r15, r13
   18ba4:	e8 0d       	add	r30, r8
   18ba6:	f9 1d       	adc	r31, r9
   18ba8:	c5 53       	subi	r28, 0x35	; 53
   18baa:	df 4f       	sbci	r29, 0xFF	; 255
   18bac:	f9 83       	std	Y+1, r31	; 0x01
   18bae:	e8 83       	st	Y, r30
   18bb0:	cb 5c       	subi	r28, 0xCB	; 203
   18bb2:	d0 40       	sbci	r29, 0x00	; 0
   18bb4:	97 01       	movw	r18, r14
   18bb6:	20 1b       	sub	r18, r16
   18bb8:	31 0b       	sbc	r19, r17
   18bba:	c5 53       	subi	r28, 0x35	; 53
   18bbc:	df 4f       	sbci	r29, 0xFF	; 255
   18bbe:	48 81       	ld	r20, Y
   18bc0:	59 81       	ldd	r21, Y+1	; 0x01
   18bc2:	cb 5c       	subi	r28, 0xCB	; 203
   18bc4:	d0 40       	sbci	r29, 0x00	; 0
   18bc6:	40 1b       	sub	r20, r16
   18bc8:	51 0b       	sbc	r21, r17
   18bca:	b1 01       	movw	r22, r2
   18bcc:	60 0f       	add	r22, r16
   18bce:	71 1f       	adc	r23, r17
   18bd0:	c4 01       	movw	r24, r8
   18bd2:	80 0f       	add	r24, r16
   18bd4:	91 1f       	adc	r25, r17
   18bd6:	0e 94 73 b9 	call	0x172e6	; 0x172e6 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   18bda:	0f 5f       	subi	r16, 0xFF	; 255
   18bdc:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4542
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   18bde:	03 30       	cpi	r16, 0x03	; 3
   18be0:	11 05       	cpc	r17, r1
   18be2:	41 f7       	brne	.-48     	; 0x18bb4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x9f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
   18be4:	f2 01       	movw	r30, r4
   18be6:	01 90       	ld	r0, Z+
   18be8:	00 20       	and	r0, r0
   18bea:	e9 f7       	brne	.-6      	; 0x18be6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa28>
   18bec:	31 97       	sbiw	r30, 0x01	; 1
   18bee:	e4 19       	sub	r30, r4
   18bf0:	f5 09       	sbc	r31, r5
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1738
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   18bf2:	c4 54       	subi	r28, 0x44	; 68
   18bf4:	df 4f       	sbci	r29, 0xFF	; 255
   18bf6:	88 81       	ld	r24, Y
   18bf8:	cc 5b       	subi	r28, 0xBC	; 188
   18bfa:	d0 40       	sbci	r29, 0x00	; 0
   18bfc:	88 0f       	add	r24, r24
   18bfe:	c4 54       	subi	r28, 0x44	; 68
   18c00:	df 4f       	sbci	r29, 0xFF	; 255
   18c02:	28 81       	ld	r18, Y
   18c04:	cc 5b       	subi	r28, 0xBC	; 188
   18c06:	d0 40       	sbci	r29, 0x00	; 0
   18c08:	82 0f       	add	r24, r18
   18c0a:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4547
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   18c0c:	a6 01       	movw	r20, r12
   18c0e:	48 1b       	sub	r20, r24
   18c10:	51 09       	sbc	r21, r1
   18c12:	57 ff       	sbrs	r21, 7
   18c14:	02 c0       	rjmp	.+4      	; 0x18c1a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa5c>
   18c16:	4d 5f       	subi	r20, 0xFD	; 253
   18c18:	5f 4f       	sbci	r21, 0xFF	; 255
   18c1a:	55 95       	asr	r21
   18c1c:	47 95       	ror	r20
   18c1e:	55 95       	asr	r21
   18c20:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   18c22:	42 0d       	add	r20, r2
   18c24:	53 2d       	mov	r21, r3
   18c26:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   18c28:	36 e0       	ldi	r19, 0x06	; 6
   18c2a:	e3 9f       	mul	r30, r19
   18c2c:	f0 01       	movw	r30, r0
   18c2e:	11 24       	eor	r1, r1
   18c30:	c4 54       	subi	r28, 0x44	; 68
   18c32:	df 4f       	sbci	r29, 0xFF	; 255
   18c34:	68 81       	ld	r22, Y
   18c36:	cc 5b       	subi	r28, 0xBC	; 188
   18c38:	d0 40       	sbci	r29, 0x00	; 0
   18c3a:	6e 9f       	mul	r22, r30
   18c3c:	c0 01       	movw	r24, r0
   18c3e:	6f 9f       	mul	r22, r31
   18c40:	90 0d       	add	r25, r0
   18c42:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4546
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
   18c44:	99 27       	eor	r25, r25
   18c46:	ce 53       	subi	r28, 0x3E	; 62
   18c48:	df 4f       	sbci	r29, 0xFF	; 255
   18c4a:	68 81       	ld	r22, Y
   18c4c:	79 81       	ldd	r23, Y+1	; 0x01
   18c4e:	c2 5c       	subi	r28, 0xC2	; 194
   18c50:	d0 40       	sbci	r29, 0x00	; 0
   18c52:	68 1b       	sub	r22, r24
   18c54:	79 0b       	sbc	r23, r25
   18c56:	77 ff       	sbrs	r23, 7
   18c58:	02 c0       	rjmp	.+4      	; 0x18c5e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xaa0>
   18c5a:	6f 5f       	subi	r22, 0xFF	; 255
   18c5c:	7f 4f       	sbci	r23, 0xFF	; 255
   18c5e:	75 95       	asr	r23
   18c60:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   18c62:	68 0d       	add	r22, r8
   18c64:	79 2d       	mov	r23, r9
   18c66:	71 1d       	adc	r23, r1
   18c68:	ee 24       	eor	r14, r14
   18c6a:	ea 94       	dec	r14
   18c6c:	fe 2c       	mov	r15, r14
   18c6e:	10 e0       	ldi	r17, 0x00	; 0
   18c70:	00 e0       	ldi	r16, 0x00	; 0
   18c72:	c4 54       	subi	r28, 0x44	; 68
   18c74:	df 4f       	sbci	r29, 0xFF	; 255
   18c76:	28 81       	ld	r18, Y
   18c78:	cc 5b       	subi	r28, 0xBC	; 188
   18c7a:	d0 40       	sbci	r29, 0x00	; 0
   18c7c:	c2 01       	movw	r24, r4
   18c7e:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4550
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
   18c82:	cc 54       	subi	r28, 0x4C	; 76
   18c84:	df 4f       	sbci	r29, 0xFF	; 255
   18c86:	e8 81       	ld	r30, Y
   18c88:	f9 81       	ldd	r31, Y+1	; 0x01
   18c8a:	c4 5b       	subi	r28, 0xB4	; 180
   18c8c:	d0 40       	sbci	r29, 0x00	; 0
   18c8e:	01 90       	ld	r0, Z+
   18c90:	00 20       	and	r0, r0
   18c92:	e9 f7       	brne	.-6      	; 0x18c8e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xad0>
   18c94:	31 97       	sbiw	r30, 0x01	; 1
   18c96:	cc 54       	subi	r28, 0x4C	; 76
   18c98:	df 4f       	sbci	r29, 0xFF	; 255
   18c9a:	88 81       	ld	r24, Y
   18c9c:	99 81       	ldd	r25, Y+1	; 0x01
   18c9e:	c4 5b       	subi	r28, 0xB4	; 180
   18ca0:	d0 40       	sbci	r29, 0x00	; 0
   18ca2:	e8 1b       	sub	r30, r24
   18ca4:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4552
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   18ca6:	a6 01       	movw	r20, r12
   18ca8:	46 50       	subi	r20, 0x06	; 6
   18caa:	51 09       	sbc	r21, r1
   18cac:	57 ff       	sbrs	r21, 7
   18cae:	02 c0       	rjmp	.+4      	; 0x18cb4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xaf6>
   18cb0:	4d 5f       	subi	r20, 0xFD	; 253
   18cb2:	5f 4f       	sbci	r21, 0xFF	; 255
   18cb4:	55 95       	asr	r21
   18cb6:	47 95       	ror	r20
   18cb8:	55 95       	asr	r21
   18cba:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   18cbc:	55 27       	eor	r21, r21
   18cbe:	ca 01       	movw	r24, r20
   18cc0:	88 0f       	add	r24, r24
   18cc2:	99 1f       	adc	r25, r25
   18cc4:	48 0f       	add	r20, r24
   18cc6:	59 1f       	adc	r21, r25
   18cc8:	42 0d       	add	r20, r2
   18cca:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   18ccc:	96 e0       	ldi	r25, 0x06	; 6
   18cce:	e9 9f       	mul	r30, r25
   18cd0:	f0 01       	movw	r30, r0
   18cd2:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4551
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
   18cd4:	ff 27       	eor	r31, r31
   18cd6:	ce 53       	subi	r28, 0x3E	; 62
   18cd8:	df 4f       	sbci	r29, 0xFF	; 255
   18cda:	68 81       	ld	r22, Y
   18cdc:	79 81       	ldd	r23, Y+1	; 0x01
   18cde:	c2 5c       	subi	r28, 0xC2	; 194
   18ce0:	d0 40       	sbci	r29, 0x00	; 0
   18ce2:	6e 1b       	sub	r22, r30
   18ce4:	7f 0b       	sbc	r23, r31
   18ce6:	77 ff       	sbrs	r23, 7
   18ce8:	02 c0       	rjmp	.+4      	; 0x18cee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb30>
   18cea:	6f 5f       	subi	r22, 0xFF	; 255
   18cec:	7f 4f       	sbci	r23, 0xFF	; 255
   18cee:	75 95       	asr	r23
   18cf0:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   18cf2:	68 0d       	add	r22, r8
   18cf4:	79 2d       	mov	r23, r9
   18cf6:	71 1d       	adc	r23, r1
   18cf8:	ee 24       	eor	r14, r14
   18cfa:	ea 94       	dec	r14
   18cfc:	fe 2c       	mov	r15, r14
   18cfe:	10 e0       	ldi	r17, 0x00	; 0
   18d00:	00 e0       	ldi	r16, 0x00	; 0
   18d02:	21 e0       	ldi	r18, 0x01	; 1
   18d04:	ce 01       	movw	r24, r28
   18d06:	01 96       	adiw	r24, 0x01	; 1
   18d08:	0e 94 d6 bc 	call	0x179ac	; 0x179ac <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:829
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
   18d0c:	c9 53       	subi	r28, 0x39	; 57
   18d0e:	df 4f       	sbci	r29, 0xFF	; 255
   18d10:	e8 81       	ld	r30, Y
   18d12:	f9 81       	ldd	r31, Y+1	; 0x01
   18d14:	c7 5c       	subi	r28, 0xC7	; 199
   18d16:	d0 40       	sbci	r29, 0x00	; 0
   18d18:	ef 2b       	or	r30, r31
   18d1a:	09 f4       	brne	.+2      	; 0x18d1e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb60>
   18d1c:	66 c0       	rjmp	.+204    	; 0x18dea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc2c>
   18d1e:	c7 53       	subi	r28, 0x37	; 55
   18d20:	df 4f       	sbci	r29, 0xFF	; 255
   18d22:	28 81       	ld	r18, Y
   18d24:	39 81       	ldd	r19, Y+1	; 0x01
   18d26:	c9 5c       	subi	r28, 0xC9	; 201
   18d28:	d0 40       	sbci	r29, 0x00	; 0
   18d2a:	23 2b       	or	r18, r19
   18d2c:	09 f4       	brne	.+2      	; 0x18d30 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb72>
   18d2e:	5d c0       	rjmp	.+186    	; 0x18dea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:830
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
   18d30:	f5 01       	movw	r30, r10
   18d32:	ea 57       	subi	r30, 0x7A	; 122
   18d34:	fe 4f       	sbci	r31, 0xFE	; 254
   18d36:	e6 0d       	add	r30, r6
   18d38:	f7 1d       	adc	r31, r7
   18d3a:	25 91       	lpm	r18, Z+
   18d3c:	34 91       	lpm	r19, Z
   18d3e:	f5 01       	movw	r30, r10
   18d40:	ec 57       	subi	r30, 0x7C	; 124
   18d42:	fe 4f       	sbci	r31, 0xFE	; 254
   18d44:	e6 0d       	add	r30, r6
   18d46:	f7 1d       	adc	r31, r7
   18d48:	45 91       	lpm	r20, Z+
   18d4a:	54 91       	lpm	r21, Z
   18d4c:	f5 01       	movw	r30, r10
   18d4e:	ee 57       	subi	r30, 0x7E	; 126
   18d50:	fe 4f       	sbci	r31, 0xFE	; 254
   18d52:	e6 0d       	add	r30, r6
   18d54:	f7 1d       	adc	r31, r7
   18d56:	65 91       	lpm	r22, Z+
   18d58:	74 91       	lpm	r23, Z
   18d5a:	f5 01       	movw	r30, r10
   18d5c:	e0 58       	subi	r30, 0x80	; 128
   18d5e:	fe 4f       	sbci	r31, 0xFE	; 254
   18d60:	e6 0d       	add	r30, r6
   18d62:	f7 1d       	adc	r31, r7
   18d64:	85 91       	lpm	r24, Z+
   18d66:	94 91       	lpm	r25, Z
   18d68:	c6 54       	subi	r28, 0x46	; 70
   18d6a:	df 4f       	sbci	r29, 0xFF	; 255
   18d6c:	e8 81       	ld	r30, Y
   18d6e:	f9 81       	ldd	r31, Y+1	; 0x01
   18d70:	ca 5b       	subi	r28, 0xBA	; 186
   18d72:	d0 40       	sbci	r29, 0x00	; 0
   18d74:	6e 0f       	add	r22, r30
   18d76:	7f 1f       	adc	r23, r31
   18d78:	c7 53       	subi	r28, 0x37	; 55
   18d7a:	df 4f       	sbci	r29, 0xFF	; 255
   18d7c:	e8 80       	ld	r14, Y
   18d7e:	f9 80       	ldd	r15, Y+1	; 0x01
   18d80:	c9 5c       	subi	r28, 0xC9	; 201
   18d82:	d0 40       	sbci	r29, 0x00	; 0
   18d84:	c9 53       	subi	r28, 0x39	; 57
   18d86:	df 4f       	sbci	r29, 0xFF	; 255
   18d88:	08 81       	ld	r16, Y
   18d8a:	19 81       	ldd	r17, Y+1	; 0x01
   18d8c:	c7 5c       	subi	r28, 0xC7	; 199
   18d8e:	d0 40       	sbci	r29, 0x00	; 0
   18d90:	c8 54       	subi	r28, 0x48	; 72
   18d92:	df 4f       	sbci	r29, 0xFF	; 255
   18d94:	e8 81       	ld	r30, Y
   18d96:	f9 81       	ldd	r31, Y+1	; 0x01
   18d98:	c8 5b       	subi	r28, 0xB8	; 184
   18d9a:	d0 40       	sbci	r29, 0x00	; 0
   18d9c:	8e 0f       	add	r24, r30
   18d9e:	9f 1f       	adc	r25, r31
   18da0:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18da4:	18 2f       	mov	r17, r24
   18da6:	88 23       	and	r24, r24
   18da8:	01 f1       	breq	.+64     	; 0x18dea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:832
      {
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
   18daa:	f5 01       	movw	r30, r10
   18dac:	e2 57       	subi	r30, 0x72	; 114
   18dae:	fe 4f       	sbci	r31, 0xFE	; 254
   18db0:	e6 0d       	add	r30, r6
   18db2:	f7 1d       	adc	r31, r7
   18db4:	25 91       	lpm	r18, Z+
   18db6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:833
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   18db8:	f5 01       	movw	r30, r10
   18dba:	e3 57       	subi	r30, 0x73	; 115
   18dbc:	fe 4f       	sbci	r31, 0xFE	; 254
   18dbe:	e6 0d       	add	r30, r6
   18dc0:	f7 1d       	adc	r31, r7
   18dc2:	84 91       	lpm	r24, Z
   18dc4:	cf 54       	subi	r28, 0x4F	; 79
   18dc6:	df 4f       	sbci	r29, 0xFF	; 255
   18dc8:	68 81       	ld	r22, Y
   18dca:	c1 5b       	subi	r28, 0xB1	; 177
   18dcc:	d0 40       	sbci	r29, 0x00	; 0
   18dce:	70 e0       	ldi	r23, 0x00	; 0
   18dd0:	ca 54       	subi	r28, 0x4A	; 74
   18dd2:	df 4f       	sbci	r29, 0xFF	; 255
   18dd4:	48 81       	ld	r20, Y
   18dd6:	c6 5b       	subi	r28, 0xB6	; 182
   18dd8:	d0 40       	sbci	r29, 0x00	; 0
   18dda:	90 e0       	ldi	r25, 0x00	; 0
   18ddc:	f9 01       	movw	r30, r18
   18dde:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
        ret = true;
   18de0:	ca 53       	subi	r28, 0x3A	; 58
   18de2:	df 4f       	sbci	r29, 0xFF	; 255
   18de4:	18 83       	st	Y, r17
   18de6:	c6 5c       	subi	r28, 0xC6	; 198
   18de8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:810
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   18dea:	ca 54       	subi	r28, 0x4A	; 74
   18dec:	df 4f       	sbci	r29, 0xFF	; 255
   18dee:	f8 81       	ld	r31, Y
   18df0:	c6 5b       	subi	r28, 0xB6	; 182
   18df2:	d0 40       	sbci	r29, 0x00	; 0
   18df4:	ff 5f       	subi	r31, 0xFF	; 255
   18df6:	ca 54       	subi	r28, 0x4A	; 74
   18df8:	df 4f       	sbci	r29, 0xFF	; 255
   18dfa:	f8 83       	st	Y, r31
   18dfc:	c6 5b       	subi	r28, 0xB6	; 182
   18dfe:	d0 40       	sbci	r29, 0x00	; 0
   18e00:	21 ce       	rjmp	.-958    	; 0x18a44 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x886>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:837
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   18e02:	ca 53       	subi	r28, 0x3A	; 58
   18e04:	df 4f       	sbci	r29, 0xFF	; 255
   18e06:	28 81       	ld	r18, Y
   18e08:	c6 5c       	subi	r28, 0xC6	; 198
   18e0a:	d0 40       	sbci	r29, 0x00	; 0
   18e0c:	21 11       	cpse	r18, r1
   18e0e:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:840
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   18e12:	51 2c       	mov	r5, r1
   18e14:	43 01       	movw	r8, r6
   18e16:	37 e2       	ldi	r19, 0x27	; 39
   18e18:	83 1a       	sub	r8, r19
   18e1a:	3d ef       	ldi	r19, 0xFD	; 253
   18e1c:	93 0a       	sbc	r9, r19
   18e1e:	f4 01       	movw	r30, r8
   18e20:	84 91       	lpm	r24, Z
   18e22:	58 16       	cp	r5, r24
   18e24:	08 f0       	brcs	.+2      	; 0x18e28 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc6a>
   18e26:	d6 c0       	rjmp	.+428    	; 0x18fd4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe16>
   18e28:	f0 e1       	ldi	r31, 0x10	; 16
   18e2a:	5f 9e       	mul	r5, r31
   18e2c:	60 01       	movw	r12, r0
   18e2e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:843
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&symbol_button_1->enable_show);
   18e30:	f6 01       	movw	r30, r12
   18e32:	e1 50       	subi	r30, 0x01	; 1
   18e34:	fe 4f       	sbci	r31, 0xFE	; 254
   18e36:	e6 0d       	add	r30, r6
   18e38:	f7 1d       	adc	r31, r7
   18e3a:	25 91       	lpm	r18, Z+
   18e3c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:844
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   18e3e:	56 01       	movw	r10, r12
   18e40:	45 e0       	ldi	r20, 0x05	; 5
   18e42:	a4 1a       	sub	r10, r20
   18e44:	4e ef       	ldi	r20, 0xFE	; 254
   18e46:	b4 0a       	sbc	r11, r20
   18e48:	a6 0c       	add	r10, r6
   18e4a:	b7 1c       	adc	r11, r7
   18e4c:	f5 01       	movw	r30, r10
   18e4e:	84 91       	lpm	r24, Z
   18e50:	cf 54       	subi	r28, 0x4F	; 79
   18e52:	df 4f       	sbci	r29, 0xFF	; 255
   18e54:	68 81       	ld	r22, Y
   18e56:	c1 5b       	subi	r28, 0xB1	; 177
   18e58:	d0 40       	sbci	r29, 0x00	; 0
   18e5a:	70 e0       	ldi	r23, 0x00	; 0
   18e5c:	45 2d       	mov	r20, r5
   18e5e:	90 e0       	ldi	r25, 0x00	; 0
   18e60:	f9 01       	movw	r30, r18
   18e62:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:845
    if (active == 0) continue;
   18e64:	88 23       	and	r24, r24
   18e66:	09 f4       	brne	.+2      	; 0x18e6a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xcac>
   18e68:	b3 c0       	rjmp	.+358    	; 0x18fd0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:846
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
   18e6a:	f6 01       	movw	r30, r12
   18e6c:	e2 50       	subi	r30, 0x02	; 2
   18e6e:	fe 4f       	sbci	r31, 0xFE	; 254
   18e70:	e6 0d       	add	r30, r6
   18e72:	f7 1d       	adc	r31, r7
   18e74:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:847
    if (enable_redraw(rdr, redraw_class) == true)
   18e76:	c1 53       	subi	r28, 0x31	; 49
   18e78:	df 4f       	sbci	r29, 0xFF	; 255
   18e7a:	68 81       	ld	r22, Y
   18e7c:	cf 5c       	subi	r28, 0xCF	; 207
   18e7e:	d0 40       	sbci	r29, 0x00	; 0
   18e80:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   18e84:	88 23       	and	r24, r24
   18e86:	09 f4       	brne	.+2      	; 0x18e8a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xccc>
   18e88:	3c c0       	rjmp	.+120    	; 0x18f02 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:851
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
   18e8a:	f6 01       	movw	r30, r12
   18e8c:	ef 50       	subi	r30, 0x0F	; 15
   18e8e:	fe 4f       	sbci	r31, 0xFE	; 254
   18e90:	e6 0d       	add	r30, r6
   18e92:	f7 1d       	adc	r31, r7
   18e94:	e5 90       	lpm	r14, Z+
   18e96:	f4 90       	lpm	r15, Z
   18e98:	f6 01       	movw	r30, r12
   18e9a:	e6 50       	subi	r30, 0x06	; 6
   18e9c:	fe 4f       	sbci	r31, 0xFE	; 254
   18e9e:	e6 0d       	add	r30, r6
   18ea0:	f7 1d       	adc	r31, r7
   18ea2:	05 91       	lpm	r16, Z+
   18ea4:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:850
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
   18ea6:	f6 01       	movw	r30, r12
   18ea8:	e8 50       	subi	r30, 0x08	; 8
   18eaa:	fe 4f       	sbci	r31, 0xFE	; 254
   18eac:	e6 0d       	add	r30, r6
   18eae:	f7 1d       	adc	r31, r7
   18eb0:	25 91       	lpm	r18, Z+
   18eb2:	34 91       	lpm	r19, Z
   18eb4:	f6 01       	movw	r30, r12
   18eb6:	ea 50       	subi	r30, 0x0A	; 10
   18eb8:	fe 4f       	sbci	r31, 0xFE	; 254
   18eba:	e6 0d       	add	r30, r6
   18ebc:	f7 1d       	adc	r31, r7
   18ebe:	45 91       	lpm	r20, Z+
   18ec0:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:849
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
   18ec2:	f6 01       	movw	r30, r12
   18ec4:	ec 50       	subi	r30, 0x0C	; 12
   18ec6:	fe 4f       	sbci	r31, 0xFE	; 254
   18ec8:	e6 0d       	add	r30, r6
   18eca:	f7 1d       	adc	r31, r7
   18ecc:	65 91       	lpm	r22, Z+
   18ece:	74 91       	lpm	r23, Z
   18ed0:	f6 01       	movw	r30, r12
   18ed2:	ee 50       	subi	r30, 0x0E	; 14
   18ed4:	fe 4f       	sbci	r31, 0xFE	; 254
   18ed6:	e6 0d       	add	r30, r6
   18ed8:	f7 1d       	adc	r31, r7
   18eda:	85 91       	lpm	r24, Z+
   18edc:	94 91       	lpm	r25, Z
   18ede:	c6 54       	subi	r28, 0x46	; 70
   18ee0:	df 4f       	sbci	r29, 0xFF	; 255
   18ee2:	e8 81       	ld	r30, Y
   18ee4:	f9 81       	ldd	r31, Y+1	; 0x01
   18ee6:	ca 5b       	subi	r28, 0xBA	; 186
   18ee8:	d0 40       	sbci	r29, 0x00	; 0
   18eea:	6e 0f       	add	r22, r30
   18eec:	7f 1f       	adc	r23, r31
   18eee:	c8 54       	subi	r28, 0x48	; 72
   18ef0:	df 4f       	sbci	r29, 0xFF	; 255
   18ef2:	e8 81       	ld	r30, Y
   18ef4:	f9 81       	ldd	r31, Y+1	; 0x01
   18ef6:	c8 5b       	subi	r28, 0xB8	; 184
   18ef8:	d0 40       	sbci	r29, 0x00	; 0
   18efa:	8e 0f       	add	r24, r30
   18efc:	9f 1f       	adc	r25, r31
   18efe:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:853
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
   18f02:	c9 53       	subi	r28, 0x39	; 57
   18f04:	df 4f       	sbci	r29, 0xFF	; 255
   18f06:	28 81       	ld	r18, Y
   18f08:	39 81       	ldd	r19, Y+1	; 0x01
   18f0a:	c7 5c       	subi	r28, 0xC7	; 199
   18f0c:	d0 40       	sbci	r29, 0x00	; 0
   18f0e:	23 2b       	or	r18, r19
   18f10:	09 f4       	brne	.+2      	; 0x18f14 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd56>
   18f12:	5e c0       	rjmp	.+188    	; 0x18fd0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe12>
   18f14:	c7 53       	subi	r28, 0x37	; 55
   18f16:	df 4f       	sbci	r29, 0xFF	; 255
   18f18:	48 81       	ld	r20, Y
   18f1a:	59 81       	ldd	r21, Y+1	; 0x01
   18f1c:	c9 5c       	subi	r28, 0xC9	; 201
   18f1e:	d0 40       	sbci	r29, 0x00	; 0
   18f20:	45 2b       	or	r20, r21
   18f22:	09 f4       	brne	.+2      	; 0x18f26 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd68>
   18f24:	55 c0       	rjmp	.+170    	; 0x18fd0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:854
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
   18f26:	f6 01       	movw	r30, r12
   18f28:	e8 50       	subi	r30, 0x08	; 8
   18f2a:	fe 4f       	sbci	r31, 0xFE	; 254
   18f2c:	e6 0d       	add	r30, r6
   18f2e:	f7 1d       	adc	r31, r7
   18f30:	25 91       	lpm	r18, Z+
   18f32:	34 91       	lpm	r19, Z
   18f34:	f6 01       	movw	r30, r12
   18f36:	ea 50       	subi	r30, 0x0A	; 10
   18f38:	fe 4f       	sbci	r31, 0xFE	; 254
   18f3a:	e6 0d       	add	r30, r6
   18f3c:	f7 1d       	adc	r31, r7
   18f3e:	45 91       	lpm	r20, Z+
   18f40:	54 91       	lpm	r21, Z
   18f42:	f6 01       	movw	r30, r12
   18f44:	ec 50       	subi	r30, 0x0C	; 12
   18f46:	fe 4f       	sbci	r31, 0xFE	; 254
   18f48:	e6 0d       	add	r30, r6
   18f4a:	f7 1d       	adc	r31, r7
   18f4c:	65 91       	lpm	r22, Z+
   18f4e:	74 91       	lpm	r23, Z
   18f50:	f6 01       	movw	r30, r12
   18f52:	ee 50       	subi	r30, 0x0E	; 14
   18f54:	fe 4f       	sbci	r31, 0xFE	; 254
   18f56:	e6 0d       	add	r30, r6
   18f58:	f7 1d       	adc	r31, r7
   18f5a:	85 91       	lpm	r24, Z+
   18f5c:	94 91       	lpm	r25, Z
   18f5e:	c6 54       	subi	r28, 0x46	; 70
   18f60:	df 4f       	sbci	r29, 0xFF	; 255
   18f62:	e8 81       	ld	r30, Y
   18f64:	f9 81       	ldd	r31, Y+1	; 0x01
   18f66:	ca 5b       	subi	r28, 0xBA	; 186
   18f68:	d0 40       	sbci	r29, 0x00	; 0
   18f6a:	6e 0f       	add	r22, r30
   18f6c:	7f 1f       	adc	r23, r31
   18f6e:	c7 53       	subi	r28, 0x37	; 55
   18f70:	df 4f       	sbci	r29, 0xFF	; 255
   18f72:	e8 80       	ld	r14, Y
   18f74:	f9 80       	ldd	r15, Y+1	; 0x01
   18f76:	c9 5c       	subi	r28, 0xC9	; 201
   18f78:	d0 40       	sbci	r29, 0x00	; 0
   18f7a:	c9 53       	subi	r28, 0x39	; 57
   18f7c:	df 4f       	sbci	r29, 0xFF	; 255
   18f7e:	08 81       	ld	r16, Y
   18f80:	19 81       	ldd	r17, Y+1	; 0x01
   18f82:	c7 5c       	subi	r28, 0xC7	; 199
   18f84:	d0 40       	sbci	r29, 0x00	; 0
   18f86:	c8 54       	subi	r28, 0x48	; 72
   18f88:	df 4f       	sbci	r29, 0xFF	; 255
   18f8a:	e8 81       	ld	r30, Y
   18f8c:	f9 81       	ldd	r31, Y+1	; 0x01
   18f8e:	c8 5b       	subi	r28, 0xB8	; 184
   18f90:	d0 40       	sbci	r29, 0x00	; 0
   18f92:	8e 0f       	add	r24, r30
   18f94:	9f 1f       	adc	r25, r31
   18f96:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18f9a:	18 2f       	mov	r17, r24
   18f9c:	88 23       	and	r24, r24
   18f9e:	c1 f0       	breq	.+48     	; 0x18fd0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:856
      {
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
   18fa0:	f6 01       	movw	r30, r12
   18fa2:	e4 50       	subi	r30, 0x04	; 4
   18fa4:	fe 4f       	sbci	r31, 0xFE	; 254
   18fa6:	e6 0d       	add	r30, r6
   18fa8:	f7 1d       	adc	r31, r7
   18faa:	25 91       	lpm	r18, Z+
   18fac:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:857
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   18fae:	f5 01       	movw	r30, r10
   18fb0:	84 91       	lpm	r24, Z
   18fb2:	cf 54       	subi	r28, 0x4F	; 79
   18fb4:	df 4f       	sbci	r29, 0xFF	; 255
   18fb6:	68 81       	ld	r22, Y
   18fb8:	c1 5b       	subi	r28, 0xB1	; 177
   18fba:	d0 40       	sbci	r29, 0x00	; 0
   18fbc:	70 e0       	ldi	r23, 0x00	; 0
   18fbe:	45 2d       	mov	r20, r5
   18fc0:	90 e0       	ldi	r25, 0x00	; 0
   18fc2:	f9 01       	movw	r30, r18
   18fc4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:858
        ret = true;
   18fc6:	ca 53       	subi	r28, 0x3A	; 58
   18fc8:	df 4f       	sbci	r29, 0xFF	; 255
   18fca:	18 83       	st	Y, r17
   18fcc:	c6 5c       	subi	r28, 0xC6	; 198
   18fce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:840
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   18fd0:	53 94       	inc	r5
   18fd2:	25 cf       	rjmp	.-438    	; 0x18e1e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:861
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   18fd4:	ca 53       	subi	r28, 0x3A	; 58
   18fd6:	df 4f       	sbci	r29, 0xFF	; 255
   18fd8:	f8 81       	ld	r31, Y
   18fda:	c6 5c       	subi	r28, 0xC6	; 198
   18fdc:	d0 40       	sbci	r29, 0x00	; 0
   18fde:	f1 11       	cpse	r31, r1
   18fe0:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:864
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   18fe4:	51 2c       	mov	r5, r1
   18fe6:	93 01       	movw	r18, r6
   18fe8:	26 52       	subi	r18, 0x26	; 38
   18fea:	3d 4f       	sbci	r19, 0xFD	; 253
   18fec:	cc 52       	subi	r28, 0x2C	; 44
   18fee:	df 4f       	sbci	r29, 0xFF	; 255
   18ff0:	39 83       	std	Y+1, r19	; 0x01
   18ff2:	28 83       	st	Y, r18
   18ff4:	c4 5d       	subi	r28, 0xD4	; 212
   18ff6:	d0 40       	sbci	r29, 0x00	; 0
   18ff8:	cc 52       	subi	r28, 0x2C	; 44
   18ffa:	df 4f       	sbci	r29, 0xFF	; 255
   18ffc:	e8 81       	ld	r30, Y
   18ffe:	f9 81       	ldd	r31, Y+1	; 0x01
   19000:	c4 5d       	subi	r28, 0xD4	; 212
   19002:	d0 40       	sbci	r29, 0x00	; 0
   19004:	84 91       	lpm	r24, Z
   19006:	58 16       	cp	r5, r24
   19008:	08 f0       	brcs	.+2      	; 0x1900c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe4e>
   1900a:	60 c3       	rjmp	.+1728   	; 0x196cc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x150e>
   1900c:	f7 e1       	ldi	r31, 0x17	; 23
   1900e:	5f 9e       	mul	r5, r31
   19010:	60 01       	movw	r12, r0
   19012:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:867
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
   19014:	f6 01       	movw	r30, r12
   19016:	e9 57       	subi	r30, 0x79	; 121
   19018:	fd 4f       	sbci	r31, 0xFD	; 253
   1901a:	e6 0d       	add	r30, r6
   1901c:	f7 1d       	adc	r31, r7
   1901e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:868
    if (enable_redraw(rdr, redraw_class) == true)
   19020:	c1 53       	subi	r28, 0x31	; 49
   19022:	df 4f       	sbci	r29, 0xFF	; 255
   19024:	68 81       	ld	r22, Y
   19026:	cf 5c       	subi	r28, 0xCF	; 207
   19028:	d0 40       	sbci	r29, 0x00	; 0
   1902a:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   1902e:	88 23       	and	r24, r24
   19030:	09 f4       	brne	.+2      	; 0x19034 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe76>
   19032:	98 c1       	rjmp	.+816    	; 0x19364 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:870
    {
      loop_i = 0;
   19034:	ce 54       	subi	r28, 0x4E	; 78
   19036:	df 4f       	sbci	r29, 0xFF	; 255
   19038:	18 82       	st	Y, r1
   1903a:	c2 5b       	subi	r28, 0xB2	; 178
   1903c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:873
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   1903e:	f6 01       	movw	r30, r12
   19040:	eb 57       	subi	r30, 0x7B	; 123
   19042:	fd 4f       	sbci	r31, 0xFD	; 253
   19044:	e6 0d       	add	r30, r6
   19046:	f7 1d       	adc	r31, r7
   19048:	25 91       	lpm	r18, Z+
   1904a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:874
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   1904c:	c6 01       	movw	r24, r12
   1904e:	80 58       	subi	r24, 0x80	; 128
   19050:	9d 4f       	sbci	r25, 0xFD	; 253
   19052:	a3 01       	movw	r20, r6
   19054:	48 0f       	add	r20, r24
   19056:	59 1f       	adc	r21, r25
   19058:	ca 54       	subi	r28, 0x4A	; 74
   1905a:	df 4f       	sbci	r29, 0xFF	; 255
   1905c:	59 83       	std	Y+1, r21	; 0x01
   1905e:	48 83       	st	Y, r20
   19060:	c6 5b       	subi	r28, 0xB6	; 182
   19062:	d0 40       	sbci	r29, 0x00	; 0
   19064:	fa 01       	movw	r30, r20
   19066:	84 91       	lpm	r24, Z
   19068:	cf 54       	subi	r28, 0x4F	; 79
   1906a:	df 4f       	sbci	r29, 0xFF	; 255
   1906c:	68 81       	ld	r22, Y
   1906e:	c1 5b       	subi	r28, 0xB1	; 177
   19070:	d0 40       	sbci	r29, 0x00	; 0
   19072:	70 e0       	ldi	r23, 0x00	; 0
   19074:	40 e0       	ldi	r20, 0x00	; 0
   19076:	90 e0       	ldi	r25, 0x00	; 0
   19078:	f9 01       	movw	r30, r18
   1907a:	19 95       	eicall
   1907c:	cd 54       	subi	r28, 0x4D	; 77
   1907e:	df 4f       	sbci	r29, 0xFF	; 255
   19080:	88 83       	st	Y, r24
   19082:	c3 5b       	subi	r28, 0xB3	; 179
   19084:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
   19086:	f6 01       	movw	r30, r12
   19088:	ef 57       	subi	r30, 0x7F	; 127
   1908a:	fd 4f       	sbci	r31, 0xFD	; 253
   1908c:	e6 0d       	add	r30, r6
   1908e:	f7 1d       	adc	r31, r7
   19090:	25 91       	lpm	r18, Z+
   19092:	34 91       	lpm	r19, Z
   19094:	ce 52       	subi	r28, 0x2E	; 46
   19096:	df 4f       	sbci	r29, 0xFF	; 255
   19098:	39 83       	std	Y+1, r19	; 0x01
   1909a:	28 83       	st	Y, r18
   1909c:	c2 5d       	subi	r28, 0xD2	; 210
   1909e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:878
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   190a0:	46 01       	movw	r8, r12
   190a2:	3f e8       	ldi	r19, 0x8F	; 143
   190a4:	83 1a       	sub	r8, r19
   190a6:	3d ef       	ldi	r19, 0xFD	; 253
   190a8:	93 0a       	sbc	r9, r19
   190aa:	86 0c       	add	r8, r6
   190ac:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   190ae:	56 01       	movw	r10, r12
   190b0:	4d e8       	ldi	r20, 0x8D	; 141
   190b2:	a4 1a       	sub	r10, r20
   190b4:	4d ef       	ldi	r20, 0xFD	; 253
   190b6:	b4 0a       	sbc	r11, r20
   190b8:	a6 0c       	add	r10, r6
   190ba:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:880
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   190bc:	16 01       	movw	r2, r12
   190be:	54 e8       	ldi	r21, 0x84	; 132
   190c0:	25 1a       	sub	r2, r21
   190c2:	5d ef       	ldi	r21, 0xFD	; 253
   190c4:	35 0a       	sbc	r3, r21
   190c6:	26 0c       	add	r2, r6
   190c8:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:882
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   190ca:	c6 01       	movw	r24, r12
   190cc:	85 58       	subi	r24, 0x85	; 133
   190ce:	9d 4f       	sbci	r25, 0xFD	; 253
   190d0:	b3 01       	movw	r22, r6
   190d2:	68 0f       	add	r22, r24
   190d4:	79 1f       	adc	r23, r25
   190d6:	c4 54       	subi	r28, 0x44	; 68
   190d8:	df 4f       	sbci	r29, 0xFF	; 255
   190da:	79 83       	std	Y+1, r23	; 0x01
   190dc:	68 83       	st	Y, r22
   190de:	cc 5b       	subi	r28, 0xBC	; 188
   190e0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:887
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   190e2:	01 97       	sbiw	r24, 0x01	; 1
   190e4:	f3 01       	movw	r30, r6
   190e6:	e8 0f       	add	r30, r24
   190e8:	f9 1f       	adc	r31, r25
   190ea:	ce 53       	subi	r28, 0x3E	; 62
   190ec:	df 4f       	sbci	r29, 0xFF	; 255
   190ee:	f9 83       	std	Y+1, r31	; 0x01
   190f0:	e8 83       	st	Y, r30
   190f2:	c2 5c       	subi	r28, 0xC2	; 194
   190f4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   190f6:	03 96       	adiw	r24, 0x03	; 3
   190f8:	93 01       	movw	r18, r6
   190fa:	28 0f       	add	r18, r24
   190fc:	39 1f       	adc	r19, r25
   190fe:	cc 53       	subi	r28, 0x3C	; 60
   19100:	df 4f       	sbci	r29, 0xFF	; 255
   19102:	39 83       	std	Y+1, r19	; 0x01
   19104:	28 83       	st	Y, r18
   19106:	c4 5c       	subi	r28, 0xC4	; 196
   19108:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:903
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   1910a:	04 97       	sbiw	r24, 0x04	; 4
   1910c:	a3 01       	movw	r20, r6
   1910e:	48 0f       	add	r20, r24
   19110:	59 1f       	adc	r21, r25
   19112:	c5 53       	subi	r28, 0x35	; 53
   19114:	df 4f       	sbci	r29, 0xFF	; 255
   19116:	59 83       	std	Y+1, r21	; 0x01
   19118:	48 83       	st	Y, r20
   1911a:	cb 5c       	subi	r28, 0xCB	; 203
   1911c:	d0 40       	sbci	r29, 0x00	; 0
   1911e:	02 97       	sbiw	r24, 0x02	; 2
   19120:	b3 01       	movw	r22, r6
   19122:	68 0f       	add	r22, r24
   19124:	79 1f       	adc	r23, r25
   19126:	c3 53       	subi	r28, 0x33	; 51
   19128:	df 4f       	sbci	r29, 0xFF	; 255
   1912a:	79 83       	std	Y+1, r23	; 0x01
   1912c:	68 83       	st	Y, r22
   1912e:	cd 5c       	subi	r28, 0xCD	; 205
   19130:	d0 40       	sbci	r29, 0x00	; 0
   19132:	02 97       	sbiw	r24, 0x02	; 2
   19134:	f3 01       	movw	r30, r6
   19136:	e8 0f       	add	r30, r24
   19138:	f9 1f       	adc	r31, r25
   1913a:	c0 53       	subi	r28, 0x30	; 48
   1913c:	df 4f       	sbci	r29, 0xFF	; 255
   1913e:	f9 83       	std	Y+1, r31	; 0x01
   19140:	e8 83       	st	Y, r30
   19142:	c0 5d       	subi	r28, 0xD0	; 208
   19144:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:872
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   19146:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:871
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
   19148:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:876
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
   1914a:	ce 54       	subi	r28, 0x4E	; 78
   1914c:	df 4f       	sbci	r29, 0xFF	; 255
   1914e:	88 81       	ld	r24, Y
   19150:	c2 5b       	subi	r28, 0xB2	; 178
   19152:	d0 40       	sbci	r29, 0x00	; 0
   19154:	cd 54       	subi	r28, 0x4D	; 77
   19156:	df 4f       	sbci	r29, 0xFF	; 255
   19158:	98 81       	ld	r25, Y
   1915a:	c3 5b       	subi	r28, 0xB3	; 179
   1915c:	d0 40       	sbci	r29, 0x00	; 0
   1915e:	89 17       	cp	r24, r25
   19160:	08 f0       	brcs	.+2      	; 0x19164 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfa6>
   19162:	00 c1       	rjmp	.+512    	; 0x19364 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:878
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   19164:	f4 01       	movw	r30, r8
   19166:	45 91       	lpm	r20, Z+
   19168:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   1916a:	f5 01       	movw	r30, r10
   1916c:	25 91       	lpm	r18, Z+
   1916e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:880
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   19170:	f1 01       	movw	r30, r2
   19172:	94 91       	lpm	r25, Z
   19174:	99 23       	and	r25, r25
   19176:	09 f4       	brne	.+2      	; 0x1917a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfbc>
   19178:	b7 c0       	rjmp	.+366    	; 0x192e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x112a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   1917a:	c6 54       	subi	r28, 0x46	; 70
   1917c:	df 4f       	sbci	r29, 0xFF	; 255
   1917e:	68 81       	ld	r22, Y
   19180:	79 81       	ldd	r23, Y+1	; 0x01
   19182:	ca 5b       	subi	r28, 0xBA	; 186
   19184:	d0 40       	sbci	r29, 0x00	; 0
   19186:	62 0f       	add	r22, r18
   19188:	73 1f       	adc	r23, r19
   1918a:	c0 54       	subi	r28, 0x40	; 64
   1918c:	df 4f       	sbci	r29, 0xFF	; 255
   1918e:	79 83       	std	Y+1, r23	; 0x01
   19190:	68 83       	st	Y, r22
   19192:	c0 5c       	subi	r28, 0xC0	; 192
   19194:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:885
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   19196:	f1 01       	movw	r30, r2
   19198:	94 91       	lpm	r25, Z
   1919a:	91 30       	cpi	r25, 0x01	; 1
   1919c:	09 f4       	brne	.+2      	; 0x191a0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfe2>
   1919e:	c3 c0       	rjmp	.+390    	; 0x19326 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1168>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:878
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   191a0:	c8 54       	subi	r28, 0x48	; 72
   191a2:	df 4f       	sbci	r29, 0xFF	; 255
   191a4:	28 81       	ld	r18, Y
   191a6:	39 81       	ldd	r19, Y+1	; 0x01
   191a8:	c8 5b       	subi	r28, 0xB8	; 184
   191aa:	d0 40       	sbci	r29, 0x00	; 0
   191ac:	24 0f       	add	r18, r20
   191ae:	35 1f       	adc	r19, r21
   191b0:	c2 54       	subi	r28, 0x42	; 66
   191b2:	df 4f       	sbci	r29, 0xFF	; 255
   191b4:	39 83       	std	Y+1, r19	; 0x01
   191b6:	28 83       	st	Y, r18
   191b8:	ce 5b       	subi	r28, 0xBE	; 190
   191ba:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:890
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   191bc:	f1 01       	movw	r30, r2
   191be:	94 91       	lpm	r25, Z
   191c0:	92 30       	cpi	r25, 0x02	; 2
   191c2:	09 f0       	breq	.+2      	; 0x191c6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1008>
   191c4:	46 c0       	rjmp	.+140    	; 0x19252 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1094>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:892
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   191c6:	f4 01       	movw	r30, r8
   191c8:	25 91       	lpm	r18, Z+
   191ca:	34 91       	lpm	r19, Z
   191cc:	ce 53       	subi	r28, 0x3E	; 62
   191ce:	df 4f       	sbci	r29, 0xFF	; 255
   191d0:	e8 81       	ld	r30, Y
   191d2:	f9 81       	ldd	r31, Y+1	; 0x01
   191d4:	c2 5c       	subi	r28, 0xC2	; 194
   191d6:	d0 40       	sbci	r29, 0x00	; 0
   191d8:	94 91       	lpm	r25, Z
   191da:	c8 54       	subi	r28, 0x48	; 72
   191dc:	df 4f       	sbci	r29, 0xFF	; 255
   191de:	48 81       	ld	r20, Y
   191e0:	59 81       	ldd	r21, Y+1	; 0x01
   191e2:	c8 5b       	subi	r28, 0xB8	; 184
   191e4:	d0 40       	sbci	r29, 0x00	; 0
   191e6:	24 0f       	add	r18, r20
   191e8:	35 1f       	adc	r19, r21
   191ea:	b9 01       	movw	r22, r18
   191ec:	9f 9d       	mul	r25, r15
   191ee:	60 0d       	add	r22, r0
   191f0:	71 1d       	adc	r23, r1
   191f2:	11 24       	eor	r1, r1
   191f4:	c2 54       	subi	r28, 0x42	; 66
   191f6:	df 4f       	sbci	r29, 0xFF	; 255
   191f8:	79 83       	std	Y+1, r23	; 0x01
   191fa:	68 83       	st	Y, r22
   191fc:	ce 5b       	subi	r28, 0xBE	; 190
   191fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:893
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   19200:	f5 01       	movw	r30, r10
   19202:	25 91       	lpm	r18, Z+
   19204:	34 91       	lpm	r19, Z
   19206:	c4 54       	subi	r28, 0x44	; 68
   19208:	df 4f       	sbci	r29, 0xFF	; 255
   1920a:	e8 81       	ld	r30, Y
   1920c:	f9 81       	ldd	r31, Y+1	; 0x01
   1920e:	cc 5b       	subi	r28, 0xBC	; 188
   19210:	d0 40       	sbci	r29, 0x00	; 0
   19212:	94 91       	lpm	r25, Z
   19214:	c6 54       	subi	r28, 0x46	; 70
   19216:	df 4f       	sbci	r29, 0xFF	; 255
   19218:	48 81       	ld	r20, Y
   1921a:	59 81       	ldd	r21, Y+1	; 0x01
   1921c:	ca 5b       	subi	r28, 0xBA	; 186
   1921e:	d0 40       	sbci	r29, 0x00	; 0
   19220:	24 0f       	add	r18, r20
   19222:	35 1f       	adc	r19, r21
   19224:	b9 01       	movw	r22, r18
   19226:	94 9d       	mul	r25, r4
   19228:	60 0d       	add	r22, r0
   1922a:	71 1d       	adc	r23, r1
   1922c:	11 24       	eor	r1, r1
   1922e:	c0 54       	subi	r28, 0x40	; 64
   19230:	df 4f       	sbci	r29, 0xFF	; 255
   19232:	79 83       	std	Y+1, r23	; 0x01
   19234:	68 83       	st	Y, r22
   19236:	c0 5c       	subi	r28, 0xC0	; 192
   19238:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:894
          loop_t++;
   1923a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   1923c:	cc 53       	subi	r28, 0x3C	; 60
   1923e:	df 4f       	sbci	r29, 0xFF	; 255
   19240:	e8 81       	ld	r30, Y
   19242:	f9 81       	ldd	r31, Y+1	; 0x01
   19244:	c4 5c       	subi	r28, 0xC4	; 196
   19246:	d0 40       	sbci	r29, 0x00	; 0
   19248:	94 91       	lpm	r25, Z
   1924a:	f9 16       	cp	r15, r25
   1924c:	10 f0       	brcs	.+4      	; 0x19252 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1094>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:898
          {
            loop_t = 0;
            loop_r++;
   1924e:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:897
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   19250:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:901
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
   19252:	ca 54       	subi	r28, 0x4A	; 74
   19254:	df 4f       	sbci	r29, 0xFF	; 255
   19256:	e8 81       	ld	r30, Y
   19258:	f9 81       	ldd	r31, Y+1	; 0x01
   1925a:	c6 5b       	subi	r28, 0xB6	; 182
   1925c:	d0 40       	sbci	r29, 0x00	; 0
   1925e:	44 91       	lpm	r20, Z
   19260:	8e 01       	movw	r16, r28
   19262:	0f 57       	subi	r16, 0x7F	; 127
   19264:	1f 4f       	sbci	r17, 0xFF	; 255
   19266:	9e 01       	movw	r18, r28
   19268:	2f 5f       	subi	r18, 0xFF	; 255
   1926a:	3f 4f       	sbci	r19, 0xFF	; 255
   1926c:	cf 54       	subi	r28, 0x4F	; 79
   1926e:	df 4f       	sbci	r29, 0xFF	; 255
   19270:	68 81       	ld	r22, Y
   19272:	c1 5b       	subi	r28, 0xB1	; 177
   19274:	d0 40       	sbci	r29, 0x00	; 0
   19276:	ce 52       	subi	r28, 0x2E	; 46
   19278:	df 4f       	sbci	r29, 0xFF	; 255
   1927a:	e8 81       	ld	r30, Y
   1927c:	f9 81       	ldd	r31, Y+1	; 0x01
   1927e:	c2 5d       	subi	r28, 0xD2	; 210
   19280:	d0 40       	sbci	r29, 0x00	; 0
   19282:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:903
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   19284:	c5 53       	subi	r28, 0x35	; 53
   19286:	df 4f       	sbci	r29, 0xFF	; 255
   19288:	e8 81       	ld	r30, Y
   1928a:	f9 81       	ldd	r31, Y+1	; 0x01
   1928c:	cb 5c       	subi	r28, 0xCB	; 203
   1928e:	d0 40       	sbci	r29, 0x00	; 0
   19290:	04 91       	lpm	r16, Z
   19292:	c3 53       	subi	r28, 0x33	; 51
   19294:	df 4f       	sbci	r29, 0xFF	; 255
   19296:	e8 81       	ld	r30, Y
   19298:	f9 81       	ldd	r31, Y+1	; 0x01
   1929a:	cd 5c       	subi	r28, 0xCD	; 205
   1929c:	d0 40       	sbci	r29, 0x00	; 0
   1929e:	25 91       	lpm	r18, Z+
   192a0:	34 91       	lpm	r19, Z
   192a2:	c0 53       	subi	r28, 0x30	; 48
   192a4:	df 4f       	sbci	r29, 0xFF	; 255
   192a6:	e8 81       	ld	r30, Y
   192a8:	f9 81       	ldd	r31, Y+1	; 0x01
   192aa:	c0 5d       	subi	r28, 0xD0	; 208
   192ac:	d0 40       	sbci	r29, 0x00	; 0
   192ae:	45 91       	lpm	r20, Z+
   192b0:	54 91       	lpm	r21, Z
   192b2:	e9 80       	ldd	r14, Y+1	; 0x01
   192b4:	c0 54       	subi	r28, 0x40	; 64
   192b6:	df 4f       	sbci	r29, 0xFF	; 255
   192b8:	68 81       	ld	r22, Y
   192ba:	79 81       	ldd	r23, Y+1	; 0x01
   192bc:	c0 5c       	subi	r28, 0xC0	; 192
   192be:	d0 40       	sbci	r29, 0x00	; 0
   192c0:	c2 54       	subi	r28, 0x42	; 66
   192c2:	df 4f       	sbci	r29, 0xFF	; 255
   192c4:	88 81       	ld	r24, Y
   192c6:	99 81       	ldd	r25, Y+1	; 0x01
   192c8:	ce 5b       	subi	r28, 0xBE	; 190
   192ca:	d0 40       	sbci	r29, 0x00	; 0
   192cc:	0e 94 71 a4 	call	0x148e2	; 0x148e2 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:904
        loop_i++;
   192d0:	ce 54       	subi	r28, 0x4E	; 78
   192d2:	df 4f       	sbci	r29, 0xFF	; 255
   192d4:	88 81       	ld	r24, Y
   192d6:	c2 5b       	subi	r28, 0xB2	; 178
   192d8:	d0 40       	sbci	r29, 0x00	; 0
   192da:	8f 5f       	subi	r24, 0xFF	; 255
   192dc:	ce 54       	subi	r28, 0x4E	; 78
   192de:	df 4f       	sbci	r29, 0xFF	; 255
   192e0:	88 83       	st	Y, r24
   192e2:	c2 5b       	subi	r28, 0xB2	; 178
   192e4:	d0 40       	sbci	r29, 0x00	; 0
   192e6:	31 cf       	rjmp	.-414    	; 0x1914a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:882
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   192e8:	f5 01       	movw	r30, r10
   192ea:	25 91       	lpm	r18, Z+
   192ec:	34 91       	lpm	r19, Z
   192ee:	c4 54       	subi	r28, 0x44	; 68
   192f0:	df 4f       	sbci	r29, 0xFF	; 255
   192f2:	e8 81       	ld	r30, Y
   192f4:	f9 81       	ldd	r31, Y+1	; 0x01
   192f6:	cc 5b       	subi	r28, 0xBC	; 188
   192f8:	d0 40       	sbci	r29, 0x00	; 0
   192fa:	94 91       	lpm	r25, Z
   192fc:	c6 54       	subi	r28, 0x46	; 70
   192fe:	df 4f       	sbci	r29, 0xFF	; 255
   19300:	68 81       	ld	r22, Y
   19302:	79 81       	ldd	r23, Y+1	; 0x01
   19304:	ca 5b       	subi	r28, 0xBA	; 186
   19306:	d0 40       	sbci	r29, 0x00	; 0
   19308:	26 0f       	add	r18, r22
   1930a:	37 1f       	adc	r19, r23
   1930c:	f9 01       	movw	r30, r18
   1930e:	9f 9d       	mul	r25, r15
   19310:	e0 0d       	add	r30, r0
   19312:	f1 1d       	adc	r31, r1
   19314:	11 24       	eor	r1, r1
   19316:	c0 54       	subi	r28, 0x40	; 64
   19318:	df 4f       	sbci	r29, 0xFF	; 255
   1931a:	f9 83       	std	Y+1, r31	; 0x01
   1931c:	e8 83       	st	Y, r30
   1931e:	c0 5c       	subi	r28, 0xC0	; 192
   19320:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:883
          loop_t++;
   19322:	f3 94       	inc	r15
   19324:	38 cf       	rjmp	.-400    	; 0x19196 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:887
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   19326:	f4 01       	movw	r30, r8
   19328:	25 91       	lpm	r18, Z+
   1932a:	34 91       	lpm	r19, Z
   1932c:	ce 53       	subi	r28, 0x3E	; 62
   1932e:	df 4f       	sbci	r29, 0xFF	; 255
   19330:	e8 81       	ld	r30, Y
   19332:	f9 81       	ldd	r31, Y+1	; 0x01
   19334:	c2 5c       	subi	r28, 0xC2	; 194
   19336:	d0 40       	sbci	r29, 0x00	; 0
   19338:	94 91       	lpm	r25, Z
   1933a:	c8 54       	subi	r28, 0x48	; 72
   1933c:	df 4f       	sbci	r29, 0xFF	; 255
   1933e:	48 81       	ld	r20, Y
   19340:	59 81       	ldd	r21, Y+1	; 0x01
   19342:	c8 5b       	subi	r28, 0xB8	; 184
   19344:	d0 40       	sbci	r29, 0x00	; 0
   19346:	24 0f       	add	r18, r20
   19348:	35 1f       	adc	r19, r21
   1934a:	b9 01       	movw	r22, r18
   1934c:	9f 9d       	mul	r25, r15
   1934e:	60 0d       	add	r22, r0
   19350:	71 1d       	adc	r23, r1
   19352:	11 24       	eor	r1, r1
   19354:	c2 54       	subi	r28, 0x42	; 66
   19356:	df 4f       	sbci	r29, 0xFF	; 255
   19358:	79 83       	std	Y+1, r23	; 0x01
   1935a:	68 83       	st	Y, r22
   1935c:	ce 5b       	subi	r28, 0xBE	; 190
   1935e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:888
          loop_t++;
   19360:	f3 94       	inc	r15
   19362:	2c cf       	rjmp	.-424    	; 0x191bc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xffe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:907
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   19364:	c9 53       	subi	r28, 0x39	; 57
   19366:	df 4f       	sbci	r29, 0xFF	; 255
   19368:	28 81       	ld	r18, Y
   1936a:	39 81       	ldd	r19, Y+1	; 0x01
   1936c:	c7 5c       	subi	r28, 0xC7	; 199
   1936e:	d0 40       	sbci	r29, 0x00	; 0
   19370:	23 2b       	or	r18, r19
   19372:	09 f4       	brne	.+2      	; 0x19376 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11b8>
   19374:	69 c1       	rjmp	.+722    	; 0x19648 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x148a>
   19376:	c7 53       	subi	r28, 0x37	; 55
   19378:	df 4f       	sbci	r29, 0xFF	; 255
   1937a:	48 81       	ld	r20, Y
   1937c:	59 81       	ldd	r21, Y+1	; 0x01
   1937e:	c9 5c       	subi	r28, 0xC9	; 201
   19380:	d0 40       	sbci	r29, 0x00	; 0
   19382:	45 2b       	or	r20, r21
   19384:	09 f4       	brne	.+2      	; 0x19388 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11ca>
   19386:	60 c1       	rjmp	.+704    	; 0x19648 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x148a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:909
    {
      loop_i = 0;
   19388:	ce 54       	subi	r28, 0x4E	; 78
   1938a:	df 4f       	sbci	r29, 0xFF	; 255
   1938c:	18 82       	st	Y, r1
   1938e:	c2 5b       	subi	r28, 0xB2	; 178
   19390:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:912
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   19392:	f6 01       	movw	r30, r12
   19394:	eb 57       	subi	r30, 0x7B	; 123
   19396:	fd 4f       	sbci	r31, 0xFD	; 253
   19398:	e6 0d       	add	r30, r6
   1939a:	f7 1d       	adc	r31, r7
   1939c:	25 91       	lpm	r18, Z+
   1939e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:913
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   193a0:	c6 01       	movw	r24, r12
   193a2:	80 58       	subi	r24, 0x80	; 128
   193a4:	9d 4f       	sbci	r25, 0xFD	; 253
   193a6:	b3 01       	movw	r22, r6
   193a8:	68 0f       	add	r22, r24
   193aa:	79 1f       	adc	r23, r25
   193ac:	c4 54       	subi	r28, 0x44	; 68
   193ae:	df 4f       	sbci	r29, 0xFF	; 255
   193b0:	79 83       	std	Y+1, r23	; 0x01
   193b2:	68 83       	st	Y, r22
   193b4:	cc 5b       	subi	r28, 0xBC	; 188
   193b6:	d0 40       	sbci	r29, 0x00	; 0
   193b8:	fb 01       	movw	r30, r22
   193ba:	84 91       	lpm	r24, Z
   193bc:	cf 54       	subi	r28, 0x4F	; 79
   193be:	df 4f       	sbci	r29, 0xFF	; 255
   193c0:	68 81       	ld	r22, Y
   193c2:	c1 5b       	subi	r28, 0xB1	; 177
   193c4:	d0 40       	sbci	r29, 0x00	; 0
   193c6:	70 e0       	ldi	r23, 0x00	; 0
   193c8:	40 e0       	ldi	r20, 0x00	; 0
   193ca:	90 e0       	ldi	r25, 0x00	; 0
   193cc:	f9 01       	movw	r30, r18
   193ce:	19 95       	eicall
   193d0:	ce 53       	subi	r28, 0x3E	; 62
   193d2:	df 4f       	sbci	r29, 0xFF	; 255
   193d4:	88 83       	st	Y, r24
   193d6:	c2 5c       	subi	r28, 0xC2	; 194
   193d8:	d0 40       	sbci	r29, 0x00	; 0
   193da:	cd 54       	subi	r28, 0x4D	; 77
   193dc:	df 4f       	sbci	r29, 0xFF	; 255
   193de:	88 83       	st	Y, r24
   193e0:	c3 5b       	subi	r28, 0xB3	; 179
   193e2:	d0 40       	sbci	r29, 0x00	; 0
   193e4:	ce 54       	subi	r28, 0x4E	; 78
   193e6:	df 4f       	sbci	r29, 0xFF	; 255
   193e8:	a8 80       	ld	r10, Y
   193ea:	c2 5b       	subi	r28, 0xB2	; 178
   193ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:916
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   193ee:	16 01       	movw	r2, r12
   193f0:	ff e8       	ldi	r31, 0x8F	; 143
   193f2:	2f 1a       	sub	r2, r31
   193f4:	fd ef       	ldi	r31, 0xFD	; 253
   193f6:	3f 0a       	sbc	r3, r31
   193f8:	26 0c       	add	r2, r6
   193fa:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   193fc:	46 01       	movw	r8, r12
   193fe:	2d e8       	ldi	r18, 0x8D	; 141
   19400:	82 1a       	sub	r8, r18
   19402:	2d ef       	ldi	r18, 0xFD	; 253
   19404:	92 0a       	sbc	r9, r18
   19406:	86 0c       	add	r8, r6
   19408:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:918
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   1940a:	c6 01       	movw	r24, r12
   1940c:	84 58       	subi	r24, 0x84	; 132
   1940e:	9d 4f       	sbci	r25, 0xFD	; 253
   19410:	a3 01       	movw	r20, r6
   19412:	48 0f       	add	r20, r24
   19414:	59 1f       	adc	r21, r25
   19416:	ca 54       	subi	r28, 0x4A	; 74
   19418:	df 4f       	sbci	r29, 0xFF	; 255
   1941a:	59 83       	std	Y+1, r21	; 0x01
   1941c:	48 83       	st	Y, r20
   1941e:	c6 5b       	subi	r28, 0xB6	; 182
   19420:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:920
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   19422:	01 97       	sbiw	r24, 0x01	; 1
   19424:	b3 01       	movw	r22, r6
   19426:	68 0f       	add	r22, r24
   19428:	79 1f       	adc	r23, r25
   1942a:	cc 53       	subi	r28, 0x3C	; 60
   1942c:	df 4f       	sbci	r29, 0xFF	; 255
   1942e:	79 83       	std	Y+1, r23	; 0x01
   19430:	68 83       	st	Y, r22
   19432:	c4 5c       	subi	r28, 0xC4	; 196
   19434:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:925
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   19436:	01 97       	sbiw	r24, 0x01	; 1
   19438:	f3 01       	movw	r30, r6
   1943a:	e8 0f       	add	r30, r24
   1943c:	f9 1f       	adc	r31, r25
   1943e:	c5 53       	subi	r28, 0x35	; 53
   19440:	df 4f       	sbci	r29, 0xFF	; 255
   19442:	f9 83       	std	Y+1, r31	; 0x01
   19444:	e8 83       	st	Y, r30
   19446:	cb 5c       	subi	r28, 0xCB	; 203
   19448:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:933
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   1944a:	03 96       	adiw	r24, 0x03	; 3
   1944c:	93 01       	movw	r18, r6
   1944e:	28 0f       	add	r18, r24
   19450:	39 1f       	adc	r19, r25
   19452:	c3 53       	subi	r28, 0x33	; 51
   19454:	df 4f       	sbci	r29, 0xFF	; 255
   19456:	39 83       	std	Y+1, r19	; 0x01
   19458:	28 83       	st	Y, r18
   1945a:	cd 5c       	subi	r28, 0xCD	; 205
   1945c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:939
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   1945e:	06 97       	sbiw	r24, 0x06	; 6
   19460:	a3 01       	movw	r20, r6
   19462:	48 0f       	add	r20, r24
   19464:	59 1f       	adc	r21, r25
   19466:	c0 53       	subi	r28, 0x30	; 48
   19468:	df 4f       	sbci	r29, 0xFF	; 255
   1946a:	59 83       	std	Y+1, r21	; 0x01
   1946c:	48 83       	st	Y, r20
   1946e:	c0 5d       	subi	r28, 0xD0	; 208
   19470:	d0 40       	sbci	r29, 0x00	; 0
   19472:	02 97       	sbiw	r24, 0x02	; 2
   19474:	b3 01       	movw	r22, r6
   19476:	68 0f       	add	r22, r24
   19478:	79 1f       	adc	r23, r25
   1947a:	ce 52       	subi	r28, 0x2E	; 46
   1947c:	df 4f       	sbci	r29, 0xFF	; 255
   1947e:	79 83       	std	Y+1, r23	; 0x01
   19480:	68 83       	st	Y, r22
   19482:	c2 5d       	subi	r28, 0xD2	; 210
   19484:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:911
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   19486:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:910
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
   19488:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
   1948a:	ce 53       	subi	r28, 0x3E	; 62
   1948c:	df 4f       	sbci	r29, 0xFF	; 255
   1948e:	78 81       	ld	r23, Y
   19490:	c2 5c       	subi	r28, 0xC2	; 194
   19492:	d0 40       	sbci	r29, 0x00	; 0
   19494:	a7 16       	cp	r10, r23
   19496:	08 f0       	brcs	.+2      	; 0x1949a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12dc>
   19498:	d7 c0       	rjmp	.+430    	; 0x19648 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x148a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:916
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   1949a:	f1 01       	movw	r30, r2
   1949c:	25 91       	lpm	r18, Z+
   1949e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   194a0:	f4 01       	movw	r30, r8
   194a2:	85 91       	lpm	r24, Z+
   194a4:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:918
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   194a6:	ca 54       	subi	r28, 0x4A	; 74
   194a8:	df 4f       	sbci	r29, 0xFF	; 255
   194aa:	e8 81       	ld	r30, Y
   194ac:	f9 81       	ldd	r31, Y+1	; 0x01
   194ae:	c6 5b       	subi	r28, 0xB6	; 182
   194b0:	d0 40       	sbci	r29, 0x00	; 0
   194b2:	44 91       	lpm	r20, Z
   194b4:	44 23       	and	r20, r20
   194b6:	09 f4       	brne	.+2      	; 0x194ba <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12fc>
   194b8:	cb c0       	rjmp	.+406    	; 0x19650 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1492>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   194ba:	c6 54       	subi	r28, 0x46	; 70
   194bc:	df 4f       	sbci	r29, 0xFF	; 255
   194be:	48 81       	ld	r20, Y
   194c0:	59 81       	ldd	r21, Y+1	; 0x01
   194c2:	ca 5b       	subi	r28, 0xBA	; 186
   194c4:	d0 40       	sbci	r29, 0x00	; 0
   194c6:	48 0f       	add	r20, r24
   194c8:	59 1f       	adc	r21, r25
   194ca:	c0 54       	subi	r28, 0x40	; 64
   194cc:	df 4f       	sbci	r29, 0xFF	; 255
   194ce:	59 83       	std	Y+1, r21	; 0x01
   194d0:	48 83       	st	Y, r20
   194d2:	c0 5c       	subi	r28, 0xC0	; 192
   194d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:923
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   194d6:	ca 54       	subi	r28, 0x4A	; 74
   194d8:	df 4f       	sbci	r29, 0xFF	; 255
   194da:	e8 81       	ld	r30, Y
   194dc:	f9 81       	ldd	r31, Y+1	; 0x01
   194de:	c6 5b       	subi	r28, 0xB6	; 182
   194e0:	d0 40       	sbci	r29, 0x00	; 0
   194e2:	84 91       	lpm	r24, Z
   194e4:	81 30       	cpi	r24, 0x01	; 1
   194e6:	09 f4       	brne	.+2      	; 0x194ea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x132c>
   194e8:	d2 c0       	rjmp	.+420    	; 0x1968e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:916
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   194ea:	c8 54       	subi	r28, 0x48	; 72
   194ec:	df 4f       	sbci	r29, 0xFF	; 255
   194ee:	48 81       	ld	r20, Y
   194f0:	59 81       	ldd	r21, Y+1	; 0x01
   194f2:	c8 5b       	subi	r28, 0xB8	; 184
   194f4:	d0 40       	sbci	r29, 0x00	; 0
   194f6:	42 0f       	add	r20, r18
   194f8:	53 1f       	adc	r21, r19
   194fa:	c2 54       	subi	r28, 0x42	; 66
   194fc:	df 4f       	sbci	r29, 0xFF	; 255
   194fe:	59 83       	std	Y+1, r21	; 0x01
   19500:	48 83       	st	Y, r20
   19502:	ce 5b       	subi	r28, 0xBE	; 190
   19504:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:928
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   19506:	ca 54       	subi	r28, 0x4A	; 74
   19508:	df 4f       	sbci	r29, 0xFF	; 255
   1950a:	e8 81       	ld	r30, Y
   1950c:	f9 81       	ldd	r31, Y+1	; 0x01
   1950e:	c6 5b       	subi	r28, 0xB6	; 182
   19510:	d0 40       	sbci	r29, 0x00	; 0
   19512:	84 91       	lpm	r24, Z
   19514:	82 30       	cpi	r24, 0x02	; 2
   19516:	09 f0       	breq	.+2      	; 0x1951a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x135c>
   19518:	46 c0       	rjmp	.+140    	; 0x195a6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x13e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:930
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   1951a:	f1 01       	movw	r30, r2
   1951c:	85 91       	lpm	r24, Z+
   1951e:	94 91       	lpm	r25, Z
   19520:	c5 53       	subi	r28, 0x35	; 53
   19522:	df 4f       	sbci	r29, 0xFF	; 255
   19524:	e8 81       	ld	r30, Y
   19526:	f9 81       	ldd	r31, Y+1	; 0x01
   19528:	cb 5c       	subi	r28, 0xCB	; 203
   1952a:	d0 40       	sbci	r29, 0x00	; 0
   1952c:	24 91       	lpm	r18, Z
   1952e:	c8 54       	subi	r28, 0x48	; 72
   19530:	df 4f       	sbci	r29, 0xFF	; 255
   19532:	48 81       	ld	r20, Y
   19534:	59 81       	ldd	r21, Y+1	; 0x01
   19536:	c8 5b       	subi	r28, 0xB8	; 184
   19538:	d0 40       	sbci	r29, 0x00	; 0
   1953a:	84 0f       	add	r24, r20
   1953c:	95 1f       	adc	r25, r21
   1953e:	bc 01       	movw	r22, r24
   19540:	2b 9d       	mul	r18, r11
   19542:	60 0d       	add	r22, r0
   19544:	71 1d       	adc	r23, r1
   19546:	11 24       	eor	r1, r1
   19548:	c2 54       	subi	r28, 0x42	; 66
   1954a:	df 4f       	sbci	r29, 0xFF	; 255
   1954c:	79 83       	std	Y+1, r23	; 0x01
   1954e:	68 83       	st	Y, r22
   19550:	ce 5b       	subi	r28, 0xBE	; 190
   19552:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:931
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   19554:	f4 01       	movw	r30, r8
   19556:	85 91       	lpm	r24, Z+
   19558:	94 91       	lpm	r25, Z
   1955a:	cc 53       	subi	r28, 0x3C	; 60
   1955c:	df 4f       	sbci	r29, 0xFF	; 255
   1955e:	e8 81       	ld	r30, Y
   19560:	f9 81       	ldd	r31, Y+1	; 0x01
   19562:	c4 5c       	subi	r28, 0xC4	; 196
   19564:	d0 40       	sbci	r29, 0x00	; 0
   19566:	24 91       	lpm	r18, Z
   19568:	c6 54       	subi	r28, 0x46	; 70
   1956a:	df 4f       	sbci	r29, 0xFF	; 255
   1956c:	48 81       	ld	r20, Y
   1956e:	59 81       	ldd	r21, Y+1	; 0x01
   19570:	ca 5b       	subi	r28, 0xBA	; 186
   19572:	d0 40       	sbci	r29, 0x00	; 0
   19574:	84 0f       	add	r24, r20
   19576:	95 1f       	adc	r25, r21
   19578:	bc 01       	movw	r22, r24
   1957a:	24 9d       	mul	r18, r4
   1957c:	60 0d       	add	r22, r0
   1957e:	71 1d       	adc	r23, r1
   19580:	11 24       	eor	r1, r1
   19582:	c0 54       	subi	r28, 0x40	; 64
   19584:	df 4f       	sbci	r29, 0xFF	; 255
   19586:	79 83       	std	Y+1, r23	; 0x01
   19588:	68 83       	st	Y, r22
   1958a:	c0 5c       	subi	r28, 0xC0	; 192
   1958c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:932
          loop_t++;
   1958e:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:933
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   19590:	c3 53       	subi	r28, 0x33	; 51
   19592:	df 4f       	sbci	r29, 0xFF	; 255
   19594:	e8 81       	ld	r30, Y
   19596:	f9 81       	ldd	r31, Y+1	; 0x01
   19598:	cd 5c       	subi	r28, 0xCD	; 205
   1959a:	d0 40       	sbci	r29, 0x00	; 0
   1959c:	84 91       	lpm	r24, Z
   1959e:	b8 16       	cp	r11, r24
   195a0:	10 f0       	brcs	.+4      	; 0x195a6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x13e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
          {
            loop_t = 0;
            loop_r++;
   195a2:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:935
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   195a4:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:939
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   195a6:	c0 53       	subi	r28, 0x30	; 48
   195a8:	df 4f       	sbci	r29, 0xFF	; 255
   195aa:	e8 81       	ld	r30, Y
   195ac:	f9 81       	ldd	r31, Y+1	; 0x01
   195ae:	c0 5d       	subi	r28, 0xD0	; 208
   195b0:	d0 40       	sbci	r29, 0x00	; 0
   195b2:	25 91       	lpm	r18, Z+
   195b4:	34 91       	lpm	r19, Z
   195b6:	ce 52       	subi	r28, 0x2E	; 46
   195b8:	df 4f       	sbci	r29, 0xFF	; 255
   195ba:	e8 81       	ld	r30, Y
   195bc:	f9 81       	ldd	r31, Y+1	; 0x01
   195be:	c2 5d       	subi	r28, 0xD2	; 210
   195c0:	d0 40       	sbci	r29, 0x00	; 0
   195c2:	45 91       	lpm	r20, Z+
   195c4:	54 91       	lpm	r21, Z
   195c6:	c7 53       	subi	r28, 0x37	; 55
   195c8:	df 4f       	sbci	r29, 0xFF	; 255
   195ca:	e8 80       	ld	r14, Y
   195cc:	f9 80       	ldd	r15, Y+1	; 0x01
   195ce:	c9 5c       	subi	r28, 0xC9	; 201
   195d0:	d0 40       	sbci	r29, 0x00	; 0
   195d2:	c9 53       	subi	r28, 0x39	; 57
   195d4:	df 4f       	sbci	r29, 0xFF	; 255
   195d6:	08 81       	ld	r16, Y
   195d8:	19 81       	ldd	r17, Y+1	; 0x01
   195da:	c7 5c       	subi	r28, 0xC7	; 199
   195dc:	d0 40       	sbci	r29, 0x00	; 0
   195de:	c0 54       	subi	r28, 0x40	; 64
   195e0:	df 4f       	sbci	r29, 0xFF	; 255
   195e2:	68 81       	ld	r22, Y
   195e4:	79 81       	ldd	r23, Y+1	; 0x01
   195e6:	c0 5c       	subi	r28, 0xC0	; 192
   195e8:	d0 40       	sbci	r29, 0x00	; 0
   195ea:	c2 54       	subi	r28, 0x42	; 66
   195ec:	df 4f       	sbci	r29, 0xFF	; 255
   195ee:	88 81       	ld	r24, Y
   195f0:	99 81       	ldd	r25, Y+1	; 0x01
   195f2:	ce 5b       	subi	r28, 0xBE	; 190
   195f4:	d0 40       	sbci	r29, 0x00	; 0
   195f6:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   195fa:	18 2f       	mov	r17, r24
   195fc:	81 e0       	ldi	r24, 0x01	; 1
   195fe:	8a 0d       	add	r24, r10
   19600:	11 23       	and	r17, r17
   19602:	21 f1       	breq	.+72     	; 0x1964c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x148e>
   19604:	ce 54       	subi	r28, 0x4E	; 78
   19606:	df 4f       	sbci	r29, 0xFF	; 255
   19608:	a8 82       	st	Y, r10
   1960a:	c2 5b       	subi	r28, 0xB2	; 178
   1960c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:941
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
   1960e:	f6 01       	movw	r30, r12
   19610:	ed 57       	subi	r30, 0x7D	; 125
   19612:	fd 4f       	sbci	r31, 0xFD	; 253
   19614:	e6 0d       	add	r30, r6
   19616:	f7 1d       	adc	r31, r7
   19618:	25 91       	lpm	r18, Z+
   1961a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:942
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   1961c:	c4 54       	subi	r28, 0x44	; 68
   1961e:	df 4f       	sbci	r29, 0xFF	; 255
   19620:	e8 81       	ld	r30, Y
   19622:	f9 81       	ldd	r31, Y+1	; 0x01
   19624:	cc 5b       	subi	r28, 0xBC	; 188
   19626:	d0 40       	sbci	r29, 0x00	; 0
   19628:	84 91       	lpm	r24, Z
   1962a:	cf 54       	subi	r28, 0x4F	; 79
   1962c:	df 4f       	sbci	r29, 0xFF	; 255
   1962e:	68 81       	ld	r22, Y
   19630:	c1 5b       	subi	r28, 0xB1	; 177
   19632:	d0 40       	sbci	r29, 0x00	; 0
   19634:	70 e0       	ldi	r23, 0x00	; 0
   19636:	4a 2d       	mov	r20, r10
   19638:	90 e0       	ldi	r25, 0x00	; 0
   1963a:	f9 01       	movw	r30, r18
   1963c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:943
          ret = true;
   1963e:	ca 53       	subi	r28, 0x3A	; 58
   19640:	df 4f       	sbci	r29, 0xFF	; 255
   19642:	18 83       	st	Y, r17
   19644:	c6 5c       	subi	r28, 0xC6	; 198
   19646:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:864
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   19648:	53 94       	inc	r5
   1964a:	d6 cc       	rjmp	.-1620   	; 0x18ff8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:939
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   1964c:	a8 2e       	mov	r10, r24
   1964e:	1d cf       	rjmp	.-454    	; 0x1948a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:920
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   19650:	f4 01       	movw	r30, r8
   19652:	85 91       	lpm	r24, Z+
   19654:	94 91       	lpm	r25, Z
   19656:	cc 53       	subi	r28, 0x3C	; 60
   19658:	df 4f       	sbci	r29, 0xFF	; 255
   1965a:	e8 81       	ld	r30, Y
   1965c:	f9 81       	ldd	r31, Y+1	; 0x01
   1965e:	c4 5c       	subi	r28, 0xC4	; 196
   19660:	d0 40       	sbci	r29, 0x00	; 0
   19662:	44 91       	lpm	r20, Z
   19664:	c6 54       	subi	r28, 0x46	; 70
   19666:	df 4f       	sbci	r29, 0xFF	; 255
   19668:	68 81       	ld	r22, Y
   1966a:	79 81       	ldd	r23, Y+1	; 0x01
   1966c:	ca 5b       	subi	r28, 0xBA	; 186
   1966e:	d0 40       	sbci	r29, 0x00	; 0
   19670:	86 0f       	add	r24, r22
   19672:	97 1f       	adc	r25, r23
   19674:	fc 01       	movw	r30, r24
   19676:	4b 9d       	mul	r20, r11
   19678:	e0 0d       	add	r30, r0
   1967a:	f1 1d       	adc	r31, r1
   1967c:	11 24       	eor	r1, r1
   1967e:	c0 54       	subi	r28, 0x40	; 64
   19680:	df 4f       	sbci	r29, 0xFF	; 255
   19682:	f9 83       	std	Y+1, r31	; 0x01
   19684:	e8 83       	st	Y, r30
   19686:	c0 5c       	subi	r28, 0xC0	; 192
   19688:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:921
          loop_t++;
   1968a:	b3 94       	inc	r11
   1968c:	24 cf       	rjmp	.-440    	; 0x194d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1318>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:925
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   1968e:	f1 01       	movw	r30, r2
   19690:	85 91       	lpm	r24, Z+
   19692:	94 91       	lpm	r25, Z
   19694:	c5 53       	subi	r28, 0x35	; 53
   19696:	df 4f       	sbci	r29, 0xFF	; 255
   19698:	e8 81       	ld	r30, Y
   1969a:	f9 81       	ldd	r31, Y+1	; 0x01
   1969c:	cb 5c       	subi	r28, 0xCB	; 203
   1969e:	d0 40       	sbci	r29, 0x00	; 0
   196a0:	24 91       	lpm	r18, Z
   196a2:	c8 54       	subi	r28, 0x48	; 72
   196a4:	df 4f       	sbci	r29, 0xFF	; 255
   196a6:	48 81       	ld	r20, Y
   196a8:	59 81       	ldd	r21, Y+1	; 0x01
   196aa:	c8 5b       	subi	r28, 0xB8	; 184
   196ac:	d0 40       	sbci	r29, 0x00	; 0
   196ae:	84 0f       	add	r24, r20
   196b0:	95 1f       	adc	r25, r21
   196b2:	bc 01       	movw	r22, r24
   196b4:	2b 9d       	mul	r18, r11
   196b6:	60 0d       	add	r22, r0
   196b8:	71 1d       	adc	r23, r1
   196ba:	11 24       	eor	r1, r1
   196bc:	c2 54       	subi	r28, 0x42	; 66
   196be:	df 4f       	sbci	r29, 0xFF	; 255
   196c0:	79 83       	std	Y+1, r23	; 0x01
   196c2:	68 83       	st	Y, r22
   196c4:	ce 5b       	subi	r28, 0xBE	; 190
   196c6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:926
          loop_t++;
   196c8:	b3 94       	inc	r11
   196ca:	1d cf       	rjmp	.-454    	; 0x19506 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1348>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   196cc:	ca 53       	subi	r28, 0x3A	; 58
   196ce:	df 4f       	sbci	r29, 0xFF	; 255
   196d0:	f8 81       	ld	r31, Y
   196d2:	c6 5c       	subi	r28, 0xC6	; 198
   196d4:	d0 40       	sbci	r29, 0x00	; 0
   196d6:	f1 11       	cpse	r31, r1
   196d8:	0c 94 05 d3 	jmp	0x1a60a	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   196dc:	91 2c       	mov	r9, r1
   196de:	93 01       	movw	r18, r6
   196e0:	28 52       	subi	r18, 0x28	; 40
   196e2:	3d 4f       	sbci	r19, 0xFD	; 253
   196e4:	cc 52       	subi	r28, 0x2C	; 44
   196e6:	df 4f       	sbci	r29, 0xFF	; 255
   196e8:	39 83       	std	Y+1, r19	; 0x01
   196ea:	28 83       	st	Y, r18
   196ec:	c4 5d       	subi	r28, 0xD4	; 212
   196ee:	d0 40       	sbci	r29, 0x00	; 0
   196f0:	cc 52       	subi	r28, 0x2C	; 44
   196f2:	df 4f       	sbci	r29, 0xFF	; 255
   196f4:	e8 81       	ld	r30, Y
   196f6:	f9 81       	ldd	r31, Y+1	; 0x01
   196f8:	c4 5d       	subi	r28, 0xD4	; 212
   196fa:	d0 40       	sbci	r29, 0x00	; 0
   196fc:	84 91       	lpm	r24, Z
   196fe:	98 16       	cp	r9, r24
   19700:	08 f0       	brcs	.+2      	; 0x19704 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1546>
   19702:	1a c3       	rjmp	.+1588   	; 0x19d38 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b7a>
   19704:	f7 e1       	ldi	r31, 0x17	; 23
   19706:	9f 9e       	mul	r9, r31
   19708:	20 01       	movw	r4, r0
   1970a:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:956
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
   1970c:	f2 01       	movw	r30, r4
   1970e:	e7 52       	subi	r30, 0x27	; 39
   19710:	fe 4f       	sbci	r31, 0xFE	; 254
   19712:	e6 0d       	add	r30, r6
   19714:	f7 1d       	adc	r31, r7
   19716:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:957
    if (enable_redraw(rdr, redraw_class) == true)
   19718:	c1 53       	subi	r28, 0x31	; 49
   1971a:	df 4f       	sbci	r29, 0xFF	; 255
   1971c:	68 81       	ld	r22, Y
   1971e:	cf 5c       	subi	r28, 0xCF	; 207
   19720:	d0 40       	sbci	r29, 0x00	; 0
   19722:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   19726:	88 23       	and	r24, r24
   19728:	09 f4       	brne	.+2      	; 0x1972c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x156e>
   1972a:	83 c1       	rjmp	.+774    	; 0x19a32 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1874>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:959
    {
      loop_i = 0;
   1972c:	ce 54       	subi	r28, 0x4E	; 78
   1972e:	df 4f       	sbci	r29, 0xFF	; 255
   19730:	18 82       	st	Y, r1
   19732:	c2 5b       	subi	r28, 0xB2	; 178
   19734:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:961
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   19736:	f2 01       	movw	r30, r4
   19738:	e9 52       	subi	r30, 0x29	; 41
   1973a:	fe 4f       	sbci	r31, 0xFE	; 254
   1973c:	e6 0d       	add	r30, r6
   1973e:	f7 1d       	adc	r31, r7
   19740:	25 91       	lpm	r18, Z+
   19742:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:962
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   19744:	c2 01       	movw	r24, r4
   19746:	8e 52       	subi	r24, 0x2E	; 46
   19748:	9e 4f       	sbci	r25, 0xFE	; 254
   1974a:	a3 01       	movw	r20, r6
   1974c:	48 0f       	add	r20, r24
   1974e:	59 1f       	adc	r21, r25
   19750:	ca 54       	subi	r28, 0x4A	; 74
   19752:	df 4f       	sbci	r29, 0xFF	; 255
   19754:	59 83       	std	Y+1, r21	; 0x01
   19756:	48 83       	st	Y, r20
   19758:	c6 5b       	subi	r28, 0xB6	; 182
   1975a:	d0 40       	sbci	r29, 0x00	; 0
   1975c:	fa 01       	movw	r30, r20
   1975e:	84 91       	lpm	r24, Z
   19760:	cf 54       	subi	r28, 0x4F	; 79
   19762:	df 4f       	sbci	r29, 0xFF	; 255
   19764:	68 81       	ld	r22, Y
   19766:	c1 5b       	subi	r28, 0xB1	; 177
   19768:	d0 40       	sbci	r29, 0x00	; 0
   1976a:	70 e0       	ldi	r23, 0x00	; 0
   1976c:	40 e0       	ldi	r20, 0x00	; 0
   1976e:	90 e0       	ldi	r25, 0x00	; 0
   19770:	f9 01       	movw	r30, r18
   19772:	19 95       	eicall
   19774:	cd 54       	subi	r28, 0x4D	; 77
   19776:	df 4f       	sbci	r29, 0xFF	; 255
   19778:	88 83       	st	Y, r24
   1977a:	c3 5b       	subi	r28, 0xB3	; 179
   1977c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:963
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);
   1977e:	f2 01       	movw	r30, r4
   19780:	ed 52       	subi	r30, 0x2D	; 45
   19782:	fe 4f       	sbci	r31, 0xFE	; 254
   19784:	e6 0d       	add	r30, r6
   19786:	f7 1d       	adc	r31, r7
   19788:	25 91       	lpm	r18, Z+
   1978a:	34 91       	lpm	r19, Z
   1978c:	ca 52       	subi	r28, 0x2A	; 42
   1978e:	df 4f       	sbci	r29, 0xFF	; 255
   19790:	39 83       	std	Y+1, r19	; 0x01
   19792:	28 83       	st	Y, r18
   19794:	c6 5d       	subi	r28, 0xD6	; 214
   19796:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:965

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   19798:	f2 01       	movw	r30, r4
   1979a:	ef 52       	subi	r30, 0x2F	; 47
   1979c:	fe 4f       	sbci	r31, 0xFE	; 254
   1979e:	e6 0d       	add	r30, r6
   197a0:	f7 1d       	adc	r31, r7
   197a2:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:966
      if (slider_active != MENU_SLIDER_OFF)
   197a4:	4f 3f       	cpi	r20, 0xFF	; 255
   197a6:	b9 f0       	breq	.+46     	; 0x197d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1618>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:967
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   197a8:	f2 01       	movw	r30, r4
   197aa:	e1 53       	subi	r30, 0x31	; 49
   197ac:	fe 4f       	sbci	r31, 0xFE	; 254
   197ae:	e6 0d       	add	r30, r6
   197b0:	f7 1d       	adc	r31, r7
   197b2:	24 91       	lpm	r18, Z
   197b4:	f2 01       	movw	r30, r4
   197b6:	e0 53       	subi	r30, 0x30	; 48
   197b8:	fe 4f       	sbci	r31, 0xFE	; 254
   197ba:	e6 0d       	add	r30, r6
   197bc:	f7 1d       	adc	r31, r7
   197be:	e4 91       	lpm	r30, Z
   197c0:	2e 9f       	mul	r18, r30
   197c2:	20 2d       	mov	r18, r0
   197c4:	11 24       	eor	r1, r1
   197c6:	be 01       	movw	r22, r28
   197c8:	6d 54       	subi	r22, 0x4D	; 77
   197ca:	7f 4f       	sbci	r23, 0xFF	; 255
   197cc:	ce 01       	movw	r24, r28
   197ce:	8e 54       	subi	r24, 0x4E	; 78
   197d0:	9f 4f       	sbci	r25, 0xFF	; 255
   197d2:	0e 94 ed a6 	call	0x14dda	; 0x14dda <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:970
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   197d6:	c2 01       	movw	r24, r4
   197d8:	8d 53       	subi	r24, 0x3D	; 61
   197da:	9e 4f       	sbci	r25, 0xFE	; 254
   197dc:	a3 01       	movw	r20, r6
   197de:	48 0f       	add	r20, r24
   197e0:	59 1f       	adc	r21, r25
   197e2:	c4 54       	subi	r28, 0x44	; 68
   197e4:	df 4f       	sbci	r29, 0xFF	; 255
   197e6:	59 83       	std	Y+1, r21	; 0x01
   197e8:	48 83       	st	Y, r20
   197ea:	cc 5b       	subi	r28, 0xBC	; 188
   197ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   197ee:	12 01       	movw	r2, r4
   197f0:	5b e3       	ldi	r21, 0x3B	; 59
   197f2:	25 1a       	sub	r2, r21
   197f4:	5e ef       	ldi	r21, 0xFE	; 254
   197f6:	35 0a       	sbc	r3, r21
   197f8:	26 0c       	add	r2, r6
   197fa:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   197fc:	0b 96       	adiw	r24, 0x0b	; 11
   197fe:	b3 01       	movw	r22, r6
   19800:	68 0f       	add	r22, r24
   19802:	79 1f       	adc	r23, r25
   19804:	ce 53       	subi	r28, 0x3E	; 62
   19806:	df 4f       	sbci	r29, 0xFF	; 255
   19808:	79 83       	std	Y+1, r23	; 0x01
   1980a:	68 83       	st	Y, r22
   1980c:	c2 5c       	subi	r28, 0xC2	; 194
   1980e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:973
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   19810:	01 97       	sbiw	r24, 0x01	; 1
   19812:	f3 01       	movw	r30, r6
   19814:	e8 0f       	add	r30, r24
   19816:	f9 1f       	adc	r31, r25
   19818:	c5 53       	subi	r28, 0x35	; 53
   1981a:	df 4f       	sbci	r29, 0xFF	; 255
   1981c:	f9 83       	std	Y+1, r31	; 0x01
   1981e:	e8 83       	st	Y, r30
   19820:	cb 5c       	subi	r28, 0xCB	; 203
   19822:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   19824:	01 97       	sbiw	r24, 0x01	; 1
   19826:	93 01       	movw	r18, r6
   19828:	28 0f       	add	r18, r24
   1982a:	39 1f       	adc	r19, r25
   1982c:	c3 53       	subi	r28, 0x33	; 51
   1982e:	df 4f       	sbci	r29, 0xFF	; 255
   19830:	39 83       	std	Y+1, r19	; 0x01
   19832:	28 83       	st	Y, r18
   19834:	cd 5c       	subi	r28, 0xCD	; 205
   19836:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:977
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   19838:	01 97       	sbiw	r24, 0x01	; 1
   1983a:	a3 01       	movw	r20, r6
   1983c:	48 0f       	add	r20, r24
   1983e:	59 1f       	adc	r21, r25
   19840:	cc 53       	subi	r28, 0x3C	; 60
   19842:	df 4f       	sbci	r29, 0xFF	; 255
   19844:	59 83       	std	Y+1, r21	; 0x01
   19846:	48 83       	st	Y, r20
   19848:	c4 5c       	subi	r28, 0xC4	; 196
   1984a:	d0 40       	sbci	r29, 0x00	; 0
   1984c:	02 97       	sbiw	r24, 0x02	; 2
   1984e:	b3 01       	movw	r22, r6
   19850:	68 0f       	add	r22, r24
   19852:	79 1f       	adc	r23, r25
   19854:	c0 53       	subi	r28, 0x30	; 48
   19856:	df 4f       	sbci	r29, 0xFF	; 255
   19858:	79 83       	std	Y+1, r23	; 0x01
   1985a:	68 83       	st	Y, r22
   1985c:	c0 5d       	subi	r28, 0xD0	; 208
   1985e:	d0 40       	sbci	r29, 0x00	; 0
   19860:	02 97       	sbiw	r24, 0x02	; 2
   19862:	f3 01       	movw	r30, r6
   19864:	e8 0f       	add	r30, r24
   19866:	f9 1f       	adc	r31, r25
   19868:	ce 52       	subi	r28, 0x2E	; 46
   1986a:	df 4f       	sbci	r29, 0xFF	; 255
   1986c:	f9 83       	std	Y+1, r31	; 0x01
   1986e:	e8 83       	st	Y, r30
   19870:	c2 5d       	subi	r28, 0xD2	; 210
   19872:	d0 40       	sbci	r29, 0x00	; 0
   19874:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:968
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   19876:	ce 54       	subi	r28, 0x4E	; 78
   19878:	df 4f       	sbci	r29, 0xFF	; 255
   1987a:	88 81       	ld	r24, Y
   1987c:	c2 5b       	subi	r28, 0xB2	; 178
   1987e:	d0 40       	sbci	r29, 0x00	; 0
   19880:	cd 54       	subi	r28, 0x4D	; 77
   19882:	df 4f       	sbci	r29, 0xFF	; 255
   19884:	98 81       	ld	r25, Y
   19886:	c3 5b       	subi	r28, 0xB3	; 179
   19888:	d0 40       	sbci	r29, 0x00	; 0
   1988a:	89 17       	cp	r24, r25
   1988c:	08 f0       	brcs	.+2      	; 0x19890 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16d2>
   1988e:	d1 c0       	rjmp	.+418    	; 0x19a32 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1874>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:970
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19890:	c4 54       	subi	r28, 0x44	; 68
   19892:	df 4f       	sbci	r29, 0xFF	; 255
   19894:	e8 81       	ld	r30, Y
   19896:	f9 81       	ldd	r31, Y+1	; 0x01
   19898:	cc 5b       	subi	r28, 0xBC	; 188
   1989a:	d0 40       	sbci	r29, 0x00	; 0
   1989c:	45 91       	lpm	r20, Z+
   1989e:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   198a0:	f1 01       	movw	r30, r2
   198a2:	25 91       	lpm	r18, Z+
   198a4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   198a6:	ce 53       	subi	r28, 0x3E	; 62
   198a8:	df 4f       	sbci	r29, 0xFF	; 255
   198aa:	e8 81       	ld	r30, Y
   198ac:	f9 81       	ldd	r31, Y+1	; 0x01
   198ae:	c2 5c       	subi	r28, 0xC2	; 194
   198b0:	d0 40       	sbci	r29, 0x00	; 0
   198b2:	94 91       	lpm	r25, Z
   198b4:	99 23       	and	r25, r25
   198b6:	09 f4       	brne	.+2      	; 0x198ba <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16fc>
   198b8:	7b c0       	rjmp	.+246    	; 0x199b0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x17f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   198ba:	c6 54       	subi	r28, 0x46	; 70
   198bc:	df 4f       	sbci	r29, 0xFF	; 255
   198be:	68 81       	ld	r22, Y
   198c0:	79 81       	ldd	r23, Y+1	; 0x01
   198c2:	ca 5b       	subi	r28, 0xBA	; 186
   198c4:	d0 40       	sbci	r29, 0x00	; 0
   198c6:	62 0f       	add	r22, r18
   198c8:	73 1f       	adc	r23, r19
   198ca:	c0 54       	subi	r28, 0x40	; 64
   198cc:	df 4f       	sbci	r29, 0xFF	; 255
   198ce:	79 83       	std	Y+1, r23	; 0x01
   198d0:	68 83       	st	Y, r22
   198d2:	c0 5c       	subi	r28, 0xC0	; 192
   198d4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:974
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   198d6:	ce 53       	subi	r28, 0x3E	; 62
   198d8:	df 4f       	sbci	r29, 0xFF	; 255
   198da:	e8 81       	ld	r30, Y
   198dc:	f9 81       	ldd	r31, Y+1	; 0x01
   198de:	c2 5c       	subi	r28, 0xC2	; 194
   198e0:	d0 40       	sbci	r29, 0x00	; 0
   198e2:	94 91       	lpm	r25, Z
   198e4:	91 30       	cpi	r25, 0x01	; 1
   198e6:	09 f4       	brne	.+2      	; 0x198ea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x172c>
   198e8:	81 c0       	rjmp	.+258    	; 0x199ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x182e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:970
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   198ea:	c8 54       	subi	r28, 0x48	; 72
   198ec:	df 4f       	sbci	r29, 0xFF	; 255
   198ee:	28 81       	ld	r18, Y
   198f0:	39 81       	ldd	r19, Y+1	; 0x01
   198f2:	c8 5b       	subi	r28, 0xB8	; 184
   198f4:	d0 40       	sbci	r29, 0x00	; 0
   198f6:	24 0f       	add	r18, r20
   198f8:	35 1f       	adc	r19, r21
   198fa:	c2 54       	subi	r28, 0x42	; 66
   198fc:	df 4f       	sbci	r29, 0xFF	; 255
   198fe:	39 83       	std	Y+1, r19	; 0x01
   19900:	28 83       	st	Y, r18
   19902:	ce 5b       	subi	r28, 0xBE	; 190
   19904:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:976
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
   19906:	ca 54       	subi	r28, 0x4A	; 74
   19908:	df 4f       	sbci	r29, 0xFF	; 255
   1990a:	e8 81       	ld	r30, Y
   1990c:	f9 81       	ldd	r31, Y+1	; 0x01
   1990e:	c6 5b       	subi	r28, 0xB6	; 182
   19910:	d0 40       	sbci	r29, 0x00	; 0
   19912:	44 91       	lpm	r20, Z
   19914:	8e 01       	movw	r16, r28
   19916:	0f 57       	subi	r16, 0x7F	; 127
   19918:	1f 4f       	sbci	r17, 0xFF	; 255
   1991a:	9e 01       	movw	r18, r28
   1991c:	2f 5f       	subi	r18, 0xFF	; 255
   1991e:	3f 4f       	sbci	r19, 0xFF	; 255
   19920:	cf 54       	subi	r28, 0x4F	; 79
   19922:	df 4f       	sbci	r29, 0xFF	; 255
   19924:	68 81       	ld	r22, Y
   19926:	c1 5b       	subi	r28, 0xB1	; 177
   19928:	d0 40       	sbci	r29, 0x00	; 0
   1992a:	ca 52       	subi	r28, 0x2A	; 42
   1992c:	df 4f       	sbci	r29, 0xFF	; 255
   1992e:	e8 81       	ld	r30, Y
   19930:	f9 81       	ldd	r31, Y+1	; 0x01
   19932:	c6 5d       	subi	r28, 0xD6	; 214
   19934:	d0 40       	sbci	r29, 0x00	; 0
   19936:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:977
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   19938:	cc 53       	subi	r28, 0x3C	; 60
   1993a:	df 4f       	sbci	r29, 0xFF	; 255
   1993c:	e8 81       	ld	r30, Y
   1993e:	f9 81       	ldd	r31, Y+1	; 0x01
   19940:	c4 5c       	subi	r28, 0xC4	; 196
   19942:	d0 40       	sbci	r29, 0x00	; 0
   19944:	e4 90       	lpm	r14, Z
   19946:	04 91       	lpm	r16, Z
   19948:	c0 53       	subi	r28, 0x30	; 48
   1994a:	df 4f       	sbci	r29, 0xFF	; 255
   1994c:	e8 81       	ld	r30, Y
   1994e:	f9 81       	ldd	r31, Y+1	; 0x01
   19950:	c0 5d       	subi	r28, 0xD0	; 208
   19952:	d0 40       	sbci	r29, 0x00	; 0
   19954:	25 91       	lpm	r18, Z+
   19956:	34 91       	lpm	r19, Z
   19958:	ce 52       	subi	r28, 0x2E	; 46
   1995a:	df 4f       	sbci	r29, 0xFF	; 255
   1995c:	e8 81       	ld	r30, Y
   1995e:	f9 81       	ldd	r31, Y+1	; 0x01
   19960:	c2 5d       	subi	r28, 0xD2	; 210
   19962:	d0 40       	sbci	r29, 0x00	; 0
   19964:	45 91       	lpm	r20, Z+
   19966:	54 91       	lpm	r21, Z
   19968:	88 24       	eor	r8, r8
   1996a:	83 94       	inc	r8
   1996c:	be 01       	movw	r22, r28
   1996e:	6f 57       	subi	r22, 0x7F	; 127
   19970:	7f 4f       	sbci	r23, 0xFF	; 255
   19972:	5b 01       	movw	r10, r22
   19974:	ce 01       	movw	r24, r28
   19976:	01 96       	adiw	r24, 0x01	; 1
   19978:	6c 01       	movw	r12, r24
   1997a:	c0 54       	subi	r28, 0x40	; 64
   1997c:	df 4f       	sbci	r29, 0xFF	; 255
   1997e:	68 81       	ld	r22, Y
   19980:	79 81       	ldd	r23, Y+1	; 0x01
   19982:	c0 5c       	subi	r28, 0xC0	; 192
   19984:	d0 40       	sbci	r29, 0x00	; 0
   19986:	c2 54       	subi	r28, 0x42	; 66
   19988:	df 4f       	sbci	r29, 0xFF	; 255
   1998a:	88 81       	ld	r24, Y
   1998c:	99 81       	ldd	r25, Y+1	; 0x01
   1998e:	ce 5b       	subi	r28, 0xBE	; 190
   19990:	d0 40       	sbci	r29, 0x00	; 0
   19992:	0e 94 06 a6 	call	0x14c0c	; 0x14c0c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:978
        loop_t++;
   19996:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:979
        loop_i++;
   19998:	ce 54       	subi	r28, 0x4E	; 78
   1999a:	df 4f       	sbci	r29, 0xFF	; 255
   1999c:	88 81       	ld	r24, Y
   1999e:	c2 5b       	subi	r28, 0xB2	; 178
   199a0:	d0 40       	sbci	r29, 0x00	; 0
   199a2:	8f 5f       	subi	r24, 0xFF	; 255
   199a4:	ce 54       	subi	r28, 0x4E	; 78
   199a6:	df 4f       	sbci	r29, 0xFF	; 255
   199a8:	88 83       	st	Y, r24
   199aa:	c2 5b       	subi	r28, 0xB2	; 178
   199ac:	d0 40       	sbci	r29, 0x00	; 0
   199ae:	63 cf       	rjmp	.-314    	; 0x19876 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:973
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   199b0:	f1 01       	movw	r30, r2
   199b2:	25 91       	lpm	r18, Z+
   199b4:	34 91       	lpm	r19, Z
   199b6:	c5 53       	subi	r28, 0x35	; 53
   199b8:	df 4f       	sbci	r29, 0xFF	; 255
   199ba:	e8 81       	ld	r30, Y
   199bc:	f9 81       	ldd	r31, Y+1	; 0x01
   199be:	cb 5c       	subi	r28, 0xCB	; 203
   199c0:	d0 40       	sbci	r29, 0x00	; 0
   199c2:	94 91       	lpm	r25, Z
   199c4:	c6 54       	subi	r28, 0x46	; 70
   199c6:	df 4f       	sbci	r29, 0xFF	; 255
   199c8:	68 81       	ld	r22, Y
   199ca:	79 81       	ldd	r23, Y+1	; 0x01
   199cc:	ca 5b       	subi	r28, 0xBA	; 186
   199ce:	d0 40       	sbci	r29, 0x00	; 0
   199d0:	26 0f       	add	r18, r22
   199d2:	37 1f       	adc	r19, r23
   199d4:	f9 01       	movw	r30, r18
   199d6:	9f 9d       	mul	r25, r15
   199d8:	e0 0d       	add	r30, r0
   199da:	f1 1d       	adc	r31, r1
   199dc:	11 24       	eor	r1, r1
   199de:	c0 54       	subi	r28, 0x40	; 64
   199e0:	df 4f       	sbci	r29, 0xFF	; 255
   199e2:	f9 83       	std	Y+1, r31	; 0x01
   199e4:	e8 83       	st	Y, r30
   199e6:	c0 5c       	subi	r28, 0xC0	; 192
   199e8:	d0 40       	sbci	r29, 0x00	; 0
   199ea:	75 cf       	rjmp	.-278    	; 0x198d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1718>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   199ec:	c4 54       	subi	r28, 0x44	; 68
   199ee:	df 4f       	sbci	r29, 0xFF	; 255
   199f0:	e8 81       	ld	r30, Y
   199f2:	f9 81       	ldd	r31, Y+1	; 0x01
   199f4:	cc 5b       	subi	r28, 0xBC	; 188
   199f6:	d0 40       	sbci	r29, 0x00	; 0
   199f8:	25 91       	lpm	r18, Z+
   199fa:	34 91       	lpm	r19, Z
   199fc:	c3 53       	subi	r28, 0x33	; 51
   199fe:	df 4f       	sbci	r29, 0xFF	; 255
   19a00:	e8 81       	ld	r30, Y
   19a02:	f9 81       	ldd	r31, Y+1	; 0x01
   19a04:	cd 5c       	subi	r28, 0xCD	; 205
   19a06:	d0 40       	sbci	r29, 0x00	; 0
   19a08:	94 91       	lpm	r25, Z
   19a0a:	c8 54       	subi	r28, 0x48	; 72
   19a0c:	df 4f       	sbci	r29, 0xFF	; 255
   19a0e:	48 81       	ld	r20, Y
   19a10:	59 81       	ldd	r21, Y+1	; 0x01
   19a12:	c8 5b       	subi	r28, 0xB8	; 184
   19a14:	d0 40       	sbci	r29, 0x00	; 0
   19a16:	24 0f       	add	r18, r20
   19a18:	35 1f       	adc	r19, r21
   19a1a:	b9 01       	movw	r22, r18
   19a1c:	9f 9d       	mul	r25, r15
   19a1e:	60 0d       	add	r22, r0
   19a20:	71 1d       	adc	r23, r1
   19a22:	11 24       	eor	r1, r1
   19a24:	c2 54       	subi	r28, 0x42	; 66
   19a26:	df 4f       	sbci	r29, 0xFF	; 255
   19a28:	79 83       	std	Y+1, r23	; 0x01
   19a2a:	68 83       	st	Y, r22
   19a2c:	ce 5b       	subi	r28, 0xBE	; 190
   19a2e:	d0 40       	sbci	r29, 0x00	; 0
   19a30:	6a cf       	rjmp	.-300    	; 0x19906 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:982
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   19a32:	c9 53       	subi	r28, 0x39	; 57
   19a34:	df 4f       	sbci	r29, 0xFF	; 255
   19a36:	e8 81       	ld	r30, Y
   19a38:	f9 81       	ldd	r31, Y+1	; 0x01
   19a3a:	c7 5c       	subi	r28, 0xC7	; 199
   19a3c:	d0 40       	sbci	r29, 0x00	; 0
   19a3e:	ef 2b       	or	r30, r31
   19a40:	09 f4       	brne	.+2      	; 0x19a44 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1886>
   19a42:	57 c1       	rjmp	.+686    	; 0x19cf2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b34>
   19a44:	c7 53       	subi	r28, 0x37	; 55
   19a46:	df 4f       	sbci	r29, 0xFF	; 255
   19a48:	28 81       	ld	r18, Y
   19a4a:	39 81       	ldd	r19, Y+1	; 0x01
   19a4c:	c9 5c       	subi	r28, 0xC9	; 201
   19a4e:	d0 40       	sbci	r29, 0x00	; 0
   19a50:	23 2b       	or	r18, r19
   19a52:	09 f4       	brne	.+2      	; 0x19a56 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1898>
   19a54:	4e c1       	rjmp	.+668    	; 0x19cf2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:984
    {
      loop_i = 0;
   19a56:	ce 54       	subi	r28, 0x4E	; 78
   19a58:	df 4f       	sbci	r29, 0xFF	; 255
   19a5a:	18 82       	st	Y, r1
   19a5c:	c2 5b       	subi	r28, 0xB2	; 178
   19a5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:986
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   19a60:	f2 01       	movw	r30, r4
   19a62:	e9 52       	subi	r30, 0x29	; 41
   19a64:	fe 4f       	sbci	r31, 0xFE	; 254
   19a66:	e6 0d       	add	r30, r6
   19a68:	f7 1d       	adc	r31, r7
   19a6a:	25 91       	lpm	r18, Z+
   19a6c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:987
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   19a6e:	c2 01       	movw	r24, r4
   19a70:	8e 52       	subi	r24, 0x2E	; 46
   19a72:	9e 4f       	sbci	r25, 0xFE	; 254
   19a74:	a3 01       	movw	r20, r6
   19a76:	48 0f       	add	r20, r24
   19a78:	59 1f       	adc	r21, r25
   19a7a:	ca 54       	subi	r28, 0x4A	; 74
   19a7c:	df 4f       	sbci	r29, 0xFF	; 255
   19a7e:	59 83       	std	Y+1, r21	; 0x01
   19a80:	48 83       	st	Y, r20
   19a82:	c6 5b       	subi	r28, 0xB6	; 182
   19a84:	d0 40       	sbci	r29, 0x00	; 0
   19a86:	fa 01       	movw	r30, r20
   19a88:	84 91       	lpm	r24, Z
   19a8a:	cf 54       	subi	r28, 0x4F	; 79
   19a8c:	df 4f       	sbci	r29, 0xFF	; 255
   19a8e:	68 81       	ld	r22, Y
   19a90:	c1 5b       	subi	r28, 0xB1	; 177
   19a92:	d0 40       	sbci	r29, 0x00	; 0
   19a94:	70 e0       	ldi	r23, 0x00	; 0
   19a96:	40 e0       	ldi	r20, 0x00	; 0
   19a98:	90 e0       	ldi	r25, 0x00	; 0
   19a9a:	f9 01       	movw	r30, r18
   19a9c:	19 95       	eicall
   19a9e:	cd 54       	subi	r28, 0x4D	; 77
   19aa0:	df 4f       	sbci	r29, 0xFF	; 255
   19aa2:	88 83       	st	Y, r24
   19aa4:	c3 5b       	subi	r28, 0xB3	; 179
   19aa6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   19aa8:	f2 01       	movw	r30, r4
   19aaa:	ef 52       	subi	r30, 0x2F	; 47
   19aac:	fe 4f       	sbci	r31, 0xFE	; 254
   19aae:	e6 0d       	add	r30, r6
   19ab0:	f7 1d       	adc	r31, r7
   19ab2:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:990
      if (slider_active != MENU_SLIDER_OFF)
   19ab4:	4f 3f       	cpi	r20, 0xFF	; 255
   19ab6:	b9 f0       	breq	.+46     	; 0x19ae6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1928>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:991
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   19ab8:	f2 01       	movw	r30, r4
   19aba:	e1 53       	subi	r30, 0x31	; 49
   19abc:	fe 4f       	sbci	r31, 0xFE	; 254
   19abe:	e6 0d       	add	r30, r6
   19ac0:	f7 1d       	adc	r31, r7
   19ac2:	24 91       	lpm	r18, Z
   19ac4:	f2 01       	movw	r30, r4
   19ac6:	e0 53       	subi	r30, 0x30	; 48
   19ac8:	fe 4f       	sbci	r31, 0xFE	; 254
   19aca:	e6 0d       	add	r30, r6
   19acc:	f7 1d       	adc	r31, r7
   19ace:	e4 91       	lpm	r30, Z
   19ad0:	2e 9f       	mul	r18, r30
   19ad2:	20 2d       	mov	r18, r0
   19ad4:	11 24       	eor	r1, r1
   19ad6:	be 01       	movw	r22, r28
   19ad8:	6d 54       	subi	r22, 0x4D	; 77
   19ada:	7f 4f       	sbci	r23, 0xFF	; 255
   19adc:	ce 01       	movw	r24, r28
   19ade:	8e 54       	subi	r24, 0x4E	; 78
   19ae0:	9f 4f       	sbci	r25, 0xFF	; 255
   19ae2:	0e 94 ed a6 	call	0x14dda	; 0x14dda <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   19ae6:	ce 54       	subi	r28, 0x4E	; 78
   19ae8:	df 4f       	sbci	r29, 0xFF	; 255
   19aea:	f8 81       	ld	r31, Y
   19aec:	c2 5b       	subi	r28, 0xB2	; 178
   19aee:	d0 40       	sbci	r29, 0x00	; 0
   19af0:	ce 52       	subi	r28, 0x2E	; 46
   19af2:	df 4f       	sbci	r29, 0xFF	; 255
   19af4:	f8 83       	st	Y, r31
   19af6:	c2 5d       	subi	r28, 0xD2	; 210
   19af8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
      while (loop_i < loop_cnt)
   19afa:	cd 54       	subi	r28, 0x4D	; 77
   19afc:	df 4f       	sbci	r29, 0xFF	; 255
   19afe:	28 81       	ld	r18, Y
   19b00:	c3 5b       	subi	r28, 0xB3	; 179
   19b02:	d0 40       	sbci	r29, 0x00	; 0
   19b04:	ce 53       	subi	r28, 0x3E	; 62
   19b06:	df 4f       	sbci	r29, 0xFF	; 255
   19b08:	28 83       	st	Y, r18
   19b0a:	c2 5c       	subi	r28, 0xC2	; 194
   19b0c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19b0e:	12 01       	movw	r2, r4
   19b10:	3d e3       	ldi	r19, 0x3D	; 61
   19b12:	23 1a       	sub	r2, r19
   19b14:	3e ef       	ldi	r19, 0xFE	; 254
   19b16:	33 0a       	sbc	r3, r19
   19b18:	26 0c       	add	r2, r6
   19b1a:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   19b1c:	52 01       	movw	r10, r4
   19b1e:	4b e3       	ldi	r20, 0x3B	; 59
   19b20:	a4 1a       	sub	r10, r20
   19b22:	4e ef       	ldi	r20, 0xFE	; 254
   19b24:	b4 0a       	sbc	r11, r20
   19b26:	a6 0c       	add	r10, r6
   19b28:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   19b2a:	c2 01       	movw	r24, r4
   19b2c:	82 53       	subi	r24, 0x32	; 50
   19b2e:	9e 4f       	sbci	r25, 0xFE	; 254
   19b30:	b3 01       	movw	r22, r6
   19b32:	68 0f       	add	r22, r24
   19b34:	79 1f       	adc	r23, r25
   19b36:	c4 54       	subi	r28, 0x44	; 68
   19b38:	df 4f       	sbci	r29, 0xFF	; 255
   19b3a:	79 83       	std	Y+1, r23	; 0x01
   19b3c:	68 83       	st	Y, r22
   19b3e:	cc 5b       	subi	r28, 0xBC	; 188
   19b40:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   19b42:	01 97       	sbiw	r24, 0x01	; 1
   19b44:	f3 01       	movw	r30, r6
   19b46:	e8 0f       	add	r30, r24
   19b48:	f9 1f       	adc	r31, r25
   19b4a:	cc 53       	subi	r28, 0x3C	; 60
   19b4c:	df 4f       	sbci	r29, 0xFF	; 255
   19b4e:	f9 83       	std	Y+1, r31	; 0x01
   19b50:	e8 83       	st	Y, r30
   19b52:	c4 5c       	subi	r28, 0xC4	; 196
   19b54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:999
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   19b56:	01 97       	sbiw	r24, 0x01	; 1
   19b58:	93 01       	movw	r18, r6
   19b5a:	28 0f       	add	r18, r24
   19b5c:	39 1f       	adc	r19, r25
   19b5e:	c5 53       	subi	r28, 0x35	; 53
   19b60:	df 4f       	sbci	r29, 0xFF	; 255
   19b62:	39 83       	std	Y+1, r19	; 0x01
   19b64:	28 83       	st	Y, r18
   19b66:	cb 5c       	subi	r28, 0xCB	; 203
   19b68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   19b6a:	03 97       	sbiw	r24, 0x03	; 3
   19b6c:	a3 01       	movw	r20, r6
   19b6e:	48 0f       	add	r20, r24
   19b70:	59 1f       	adc	r21, r25
   19b72:	c3 53       	subi	r28, 0x33	; 51
   19b74:	df 4f       	sbci	r29, 0xFF	; 255
   19b76:	59 83       	std	Y+1, r21	; 0x01
   19b78:	48 83       	st	Y, r20
   19b7a:	cd 5c       	subi	r28, 0xCD	; 205
   19b7c:	d0 40       	sbci	r29, 0x00	; 0
   19b7e:	02 97       	sbiw	r24, 0x02	; 2
   19b80:	b3 01       	movw	r22, r6
   19b82:	68 0f       	add	r22, r24
   19b84:	79 1f       	adc	r23, r25
   19b86:	c0 53       	subi	r28, 0x30	; 48
   19b88:	df 4f       	sbci	r29, 0xFF	; 255
   19b8a:	79 83       	std	Y+1, r23	; 0x01
   19b8c:	68 83       	st	Y, r22
   19b8e:	c0 5d       	subi	r28, 0xD0	; 208
   19b90:	d0 40       	sbci	r29, 0x00	; 0
   19b92:	d1 2c       	mov	r13, r1
   19b94:	c1 2c       	mov	r12, r1
   19b96:	ce 52       	subi	r28, 0x2E	; 46
   19b98:	df 4f       	sbci	r29, 0xFF	; 255
   19b9a:	88 80       	ld	r8, Y
   19b9c:	c2 5d       	subi	r28, 0xD2	; 210
   19b9e:	d0 40       	sbci	r29, 0x00	; 0
   19ba0:	8c 0c       	add	r8, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   19ba2:	ce 53       	subi	r28, 0x3E	; 62
   19ba4:	df 4f       	sbci	r29, 0xFF	; 255
   19ba6:	78 81       	ld	r23, Y
   19ba8:	c2 5c       	subi	r28, 0xC2	; 194
   19baa:	d0 40       	sbci	r29, 0x00	; 0
   19bac:	87 16       	cp	r8, r23
   19bae:	08 f0       	brcs	.+2      	; 0x19bb2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19f4>
   19bb0:	a0 c0       	rjmp	.+320    	; 0x19cf2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19bb2:	f1 01       	movw	r30, r2
   19bb4:	25 91       	lpm	r18, Z+
   19bb6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   19bb8:	f5 01       	movw	r30, r10
   19bba:	85 91       	lpm	r24, Z+
   19bbc:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   19bbe:	c4 54       	subi	r28, 0x44	; 68
   19bc0:	df 4f       	sbci	r29, 0xFF	; 255
   19bc2:	e8 81       	ld	r30, Y
   19bc4:	f9 81       	ldd	r31, Y+1	; 0x01
   19bc6:	cc 5b       	subi	r28, 0xBC	; 188
   19bc8:	d0 40       	sbci	r29, 0x00	; 0
   19bca:	44 91       	lpm	r20, Z
   19bcc:	44 23       	and	r20, r20
   19bce:	09 f4       	brne	.+2      	; 0x19bd2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a14>
   19bd0:	92 c0       	rjmp	.+292    	; 0x19cf6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   19bd2:	c6 54       	subi	r28, 0x46	; 70
   19bd4:	df 4f       	sbci	r29, 0xFF	; 255
   19bd6:	48 81       	ld	r20, Y
   19bd8:	59 81       	ldd	r21, Y+1	; 0x01
   19bda:	ca 5b       	subi	r28, 0xBA	; 186
   19bdc:	d0 40       	sbci	r29, 0x00	; 0
   19bde:	48 0f       	add	r20, r24
   19be0:	59 1f       	adc	r21, r25
   19be2:	c0 54       	subi	r28, 0x40	; 64
   19be4:	df 4f       	sbci	r29, 0xFF	; 255
   19be6:	59 83       	std	Y+1, r21	; 0x01
   19be8:	48 83       	st	Y, r20
   19bea:	c0 5c       	subi	r28, 0xC0	; 192
   19bec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:998
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   19bee:	c4 54       	subi	r28, 0x44	; 68
   19bf0:	df 4f       	sbci	r29, 0xFF	; 255
   19bf2:	e8 81       	ld	r30, Y
   19bf4:	f9 81       	ldd	r31, Y+1	; 0x01
   19bf6:	cc 5b       	subi	r28, 0xBC	; 188
   19bf8:	d0 40       	sbci	r29, 0x00	; 0
   19bfa:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19bfc:	c8 54       	subi	r28, 0x48	; 72
   19bfe:	df 4f       	sbci	r29, 0xFF	; 255
   19c00:	48 81       	ld	r20, Y
   19c02:	59 81       	ldd	r21, Y+1	; 0x01
   19c04:	c8 5b       	subi	r28, 0xB8	; 184
   19c06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:998
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   19c08:	81 30       	cpi	r24, 0x01	; 1
   19c0a:	c1 f4       	brne	.+48     	; 0x19c3c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a7e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:999
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   19c0c:	f1 01       	movw	r30, r2
   19c0e:	85 91       	lpm	r24, Z+
   19c10:	94 91       	lpm	r25, Z
   19c12:	c5 53       	subi	r28, 0x35	; 53
   19c14:	df 4f       	sbci	r29, 0xFF	; 255
   19c16:	e8 81       	ld	r30, Y
   19c18:	f9 81       	ldd	r31, Y+1	; 0x01
   19c1a:	cb 5c       	subi	r28, 0xCB	; 203
   19c1c:	d0 40       	sbci	r29, 0x00	; 0
   19c1e:	44 91       	lpm	r20, Z
   19c20:	c8 54       	subi	r28, 0x48	; 72
   19c22:	df 4f       	sbci	r29, 0xFF	; 255
   19c24:	28 81       	ld	r18, Y
   19c26:	39 81       	ldd	r19, Y+1	; 0x01
   19c28:	c8 5b       	subi	r28, 0xB8	; 184
   19c2a:	d0 40       	sbci	r29, 0x00	; 0
   19c2c:	82 0f       	add	r24, r18
   19c2e:	93 1f       	adc	r25, r19
   19c30:	4c 9d       	mul	r20, r12
   19c32:	90 01       	movw	r18, r0
   19c34:	4d 9d       	mul	r20, r13
   19c36:	30 0d       	add	r19, r0
   19c38:	11 24       	eor	r1, r1
   19c3a:	ac 01       	movw	r20, r24
   19c3c:	42 0f       	add	r20, r18
   19c3e:	53 1f       	adc	r21, r19
   19c40:	c2 54       	subi	r28, 0x42	; 66
   19c42:	df 4f       	sbci	r29, 0xFF	; 255
   19c44:	59 83       	std	Y+1, r21	; 0x01
   19c46:	48 83       	st	Y, r20
   19c48:	ce 5b       	subi	r28, 0xBE	; 190
   19c4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   19c4c:	c3 53       	subi	r28, 0x33	; 51
   19c4e:	df 4f       	sbci	r29, 0xFF	; 255
   19c50:	e8 81       	ld	r30, Y
   19c52:	f9 81       	ldd	r31, Y+1	; 0x01
   19c54:	cd 5c       	subi	r28, 0xCD	; 205
   19c56:	d0 40       	sbci	r29, 0x00	; 0
   19c58:	25 91       	lpm	r18, Z+
   19c5a:	34 91       	lpm	r19, Z
   19c5c:	c0 53       	subi	r28, 0x30	; 48
   19c5e:	df 4f       	sbci	r29, 0xFF	; 255
   19c60:	e8 81       	ld	r30, Y
   19c62:	f9 81       	ldd	r31, Y+1	; 0x01
   19c64:	c0 5d       	subi	r28, 0xD0	; 208
   19c66:	d0 40       	sbci	r29, 0x00	; 0
   19c68:	45 91       	lpm	r20, Z+
   19c6a:	54 91       	lpm	r21, Z
   19c6c:	c7 53       	subi	r28, 0x37	; 55
   19c6e:	df 4f       	sbci	r29, 0xFF	; 255
   19c70:	e8 80       	ld	r14, Y
   19c72:	f9 80       	ldd	r15, Y+1	; 0x01
   19c74:	c9 5c       	subi	r28, 0xC9	; 201
   19c76:	d0 40       	sbci	r29, 0x00	; 0
   19c78:	c9 53       	subi	r28, 0x39	; 57
   19c7a:	df 4f       	sbci	r29, 0xFF	; 255
   19c7c:	08 81       	ld	r16, Y
   19c7e:	19 81       	ldd	r17, Y+1	; 0x01
   19c80:	c7 5c       	subi	r28, 0xC7	; 199
   19c82:	d0 40       	sbci	r29, 0x00	; 0
   19c84:	c0 54       	subi	r28, 0x40	; 64
   19c86:	df 4f       	sbci	r29, 0xFF	; 255
   19c88:	68 81       	ld	r22, Y
   19c8a:	79 81       	ldd	r23, Y+1	; 0x01
   19c8c:	c0 5c       	subi	r28, 0xC0	; 192
   19c8e:	d0 40       	sbci	r29, 0x00	; 0
   19c90:	c2 54       	subi	r28, 0x42	; 66
   19c92:	df 4f       	sbci	r29, 0xFF	; 255
   19c94:	88 81       	ld	r24, Y
   19c96:	99 81       	ldd	r25, Y+1	; 0x01
   19c98:	ce 5b       	subi	r28, 0xBE	; 190
   19c9a:	d0 40       	sbci	r29, 0x00	; 0
   19c9c:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19ca0:	18 2f       	mov	r17, r24
   19ca2:	5f ef       	ldi	r21, 0xFF	; 255
   19ca4:	c5 1a       	sub	r12, r21
   19ca6:	d5 0a       	sbc	r13, r21
   19ca8:	88 23       	and	r24, r24
   19caa:	09 f4       	brne	.+2      	; 0x19cae <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1af0>
   19cac:	74 cf       	rjmp	.-280    	; 0x19b96 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19d8>
   19cae:	ce 54       	subi	r28, 0x4E	; 78
   19cb0:	df 4f       	sbci	r29, 0xFF	; 255
   19cb2:	88 82       	st	Y, r8
   19cb4:	c2 5b       	subi	r28, 0xB2	; 178
   19cb6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1002
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_button_1->dyn_button_onclick);
   19cb8:	f2 01       	movw	r30, r4
   19cba:	eb 52       	subi	r30, 0x2B	; 43
   19cbc:	fe 4f       	sbci	r31, 0xFE	; 254
   19cbe:	e6 0d       	add	r30, r6
   19cc0:	f7 1d       	adc	r31, r7
   19cc2:	25 91       	lpm	r18, Z+
   19cc4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1003
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   19cc6:	ca 54       	subi	r28, 0x4A	; 74
   19cc8:	df 4f       	sbci	r29, 0xFF	; 255
   19cca:	e8 81       	ld	r30, Y
   19ccc:	f9 81       	ldd	r31, Y+1	; 0x01
   19cce:	c6 5b       	subi	r28, 0xB6	; 182
   19cd0:	d0 40       	sbci	r29, 0x00	; 0
   19cd2:	84 91       	lpm	r24, Z
   19cd4:	cf 54       	subi	r28, 0x4F	; 79
   19cd6:	df 4f       	sbci	r29, 0xFF	; 255
   19cd8:	68 81       	ld	r22, Y
   19cda:	c1 5b       	subi	r28, 0xB1	; 177
   19cdc:	d0 40       	sbci	r29, 0x00	; 0
   19cde:	70 e0       	ldi	r23, 0x00	; 0
   19ce0:	48 2d       	mov	r20, r8
   19ce2:	90 e0       	ldi	r25, 0x00	; 0
   19ce4:	f9 01       	movw	r30, r18
   19ce6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1004
          ret = true;
   19ce8:	ca 53       	subi	r28, 0x3A	; 58
   19cea:	df 4f       	sbci	r29, 0xFF	; 255
   19cec:	18 83       	st	Y, r17
   19cee:	c6 5c       	subi	r28, 0xC6	; 198
   19cf0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   19cf2:	93 94       	inc	r9
   19cf4:	fd cc       	rjmp	.-1542   	; 0x196f0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1532>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   19cf6:	f5 01       	movw	r30, r10
   19cf8:	85 91       	lpm	r24, Z+
   19cfa:	94 91       	lpm	r25, Z
   19cfc:	cc 53       	subi	r28, 0x3C	; 60
   19cfe:	df 4f       	sbci	r29, 0xFF	; 255
   19d00:	e8 81       	ld	r30, Y
   19d02:	f9 81       	ldd	r31, Y+1	; 0x01
   19d04:	c4 5c       	subi	r28, 0xC4	; 196
   19d06:	d0 40       	sbci	r29, 0x00	; 0
   19d08:	64 91       	lpm	r22, Z
   19d0a:	c6 54       	subi	r28, 0x46	; 70
   19d0c:	df 4f       	sbci	r29, 0xFF	; 255
   19d0e:	48 81       	ld	r20, Y
   19d10:	59 81       	ldd	r21, Y+1	; 0x01
   19d12:	ca 5b       	subi	r28, 0xBA	; 186
   19d14:	d0 40       	sbci	r29, 0x00	; 0
   19d16:	84 0f       	add	r24, r20
   19d18:	95 1f       	adc	r25, r21
   19d1a:	6c 9d       	mul	r22, r12
   19d1c:	a0 01       	movw	r20, r0
   19d1e:	6d 9d       	mul	r22, r13
   19d20:	50 0d       	add	r21, r0
   19d22:	11 24       	eor	r1, r1
   19d24:	bc 01       	movw	r22, r24
   19d26:	64 0f       	add	r22, r20
   19d28:	75 1f       	adc	r23, r21
   19d2a:	c0 54       	subi	r28, 0x40	; 64
   19d2c:	df 4f       	sbci	r29, 0xFF	; 255
   19d2e:	79 83       	std	Y+1, r23	; 0x01
   19d30:	68 83       	st	Y, r22
   19d32:	c0 5c       	subi	r28, 0xC0	; 192
   19d34:	d0 40       	sbci	r29, 0x00	; 0
   19d36:	5b cf       	rjmp	.-330    	; 0x19bee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1012
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   19d38:	ca 53       	subi	r28, 0x3A	; 58
   19d3a:	df 4f       	sbci	r29, 0xFF	; 255
   19d3c:	f8 81       	ld	r31, Y
   19d3e:	c6 5c       	subi	r28, 0xC6	; 198
   19d40:	d0 40       	sbci	r29, 0x00	; 0
   19d42:	f1 11       	cpse	r31, r1
   19d44:	62 c4       	rjmp	.+2244   	; 0x1a60a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x244c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1014
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   19d46:	ca 54       	subi	r28, 0x4A	; 74
   19d48:	df 4f       	sbci	r29, 0xFF	; 255
   19d4a:	18 82       	st	Y, r1
   19d4c:	c6 5b       	subi	r28, 0xB6	; 182
   19d4e:	d0 40       	sbci	r29, 0x00	; 0
   19d50:	93 01       	movw	r18, r6
   19d52:	25 52       	subi	r18, 0x25	; 37
   19d54:	3d 4f       	sbci	r19, 0xFD	; 253
   19d56:	c0 52       	subi	r28, 0x20	; 32
   19d58:	df 4f       	sbci	r29, 0xFF	; 255
   19d5a:	39 83       	std	Y+1, r19	; 0x01
   19d5c:	28 83       	st	Y, r18
   19d5e:	c0 5e       	subi	r28, 0xE0	; 224
   19d60:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1054
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   19d62:	ae 01       	movw	r20, r28
   19d64:	4f 57       	subi	r20, 0x7F	; 127
   19d66:	5f 4f       	sbci	r21, 0xFF	; 255
   19d68:	cc 54       	subi	r28, 0x4C	; 76
   19d6a:	df 4f       	sbci	r29, 0xFF	; 255
   19d6c:	59 83       	std	Y+1, r21	; 0x01
   19d6e:	48 83       	st	Y, r20
   19d70:	c4 5b       	subi	r28, 0xB4	; 180
   19d72:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1014
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   19d74:	c0 52       	subi	r28, 0x20	; 32
   19d76:	df 4f       	sbci	r29, 0xFF	; 255
   19d78:	e8 81       	ld	r30, Y
   19d7a:	f9 81       	ldd	r31, Y+1	; 0x01
   19d7c:	c0 5e       	subi	r28, 0xE0	; 224
   19d7e:	d0 40       	sbci	r29, 0x00	; 0
   19d80:	84 91       	lpm	r24, Z
   19d82:	ca 54       	subi	r28, 0x4A	; 74
   19d84:	df 4f       	sbci	r29, 0xFF	; 255
   19d86:	f8 81       	ld	r31, Y
   19d88:	c6 5b       	subi	r28, 0xB6	; 182
   19d8a:	d0 40       	sbci	r29, 0x00	; 0
   19d8c:	f8 17       	cp	r31, r24
   19d8e:	08 f0       	brcs	.+2      	; 0x19d92 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1bd4>
   19d90:	42 c4       	rjmp	.+2180   	; 0x1a616 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2458>
   19d92:	2e e1       	ldi	r18, 0x1E	; 30
   19d94:	f2 9f       	mul	r31, r18
   19d96:	20 01       	movw	r4, r0
   19d98:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1017
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
   19d9a:	f2 01       	movw	r30, r4
   19d9c:	ed 52       	subi	r30, 0x2D	; 45
   19d9e:	fd 4f       	sbci	r31, 0xFD	; 253
   19da0:	e6 0d       	add	r30, r6
   19da2:	f7 1d       	adc	r31, r7
   19da4:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1018
    if (enable_redraw(rdr, redraw_class) == true)
   19da6:	c1 53       	subi	r28, 0x31	; 49
   19da8:	df 4f       	sbci	r29, 0xFF	; 255
   19daa:	68 81       	ld	r22, Y
   19dac:	cf 5c       	subi	r28, 0xCF	; 207
   19dae:	d0 40       	sbci	r29, 0x00	; 0
   19db0:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   19db4:	88 23       	and	r24, r24
   19db6:	09 f4       	brne	.+2      	; 0x19dba <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1bfc>
   19db8:	56 c2       	rjmp	.+1196   	; 0x1a266 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x20a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1020
    {
      loop_i = 0;
   19dba:	ce 54       	subi	r28, 0x4E	; 78
   19dbc:	df 4f       	sbci	r29, 0xFF	; 255
   19dbe:	18 82       	st	Y, r1
   19dc0:	c2 5b       	subi	r28, 0xB2	; 178
   19dc2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   19dc4:	f2 01       	movw	r30, r4
   19dc6:	e1 53       	subi	r30, 0x31	; 49
   19dc8:	fd 4f       	sbci	r31, 0xFD	; 253
   19dca:	e6 0d       	add	r30, r6
   19dcc:	f7 1d       	adc	r31, r7
   19dce:	25 91       	lpm	r18, Z+
   19dd0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1024
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   19dd2:	c2 01       	movw	r24, r4
   19dd4:	86 53       	subi	r24, 0x36	; 54
   19dd6:	9d 4f       	sbci	r25, 0xFD	; 253
   19dd8:	a3 01       	movw	r20, r6
   19dda:	48 0f       	add	r20, r24
   19ddc:	59 1f       	adc	r21, r25
   19dde:	c4 54       	subi	r28, 0x44	; 68
   19de0:	df 4f       	sbci	r29, 0xFF	; 255
   19de2:	59 83       	std	Y+1, r21	; 0x01
   19de4:	48 83       	st	Y, r20
   19de6:	cc 5b       	subi	r28, 0xBC	; 188
   19de8:	d0 40       	sbci	r29, 0x00	; 0
   19dea:	fa 01       	movw	r30, r20
   19dec:	84 91       	lpm	r24, Z
   19dee:	cf 54       	subi	r28, 0x4F	; 79
   19df0:	df 4f       	sbci	r29, 0xFF	; 255
   19df2:	68 81       	ld	r22, Y
   19df4:	c1 5b       	subi	r28, 0xB1	; 177
   19df6:	d0 40       	sbci	r29, 0x00	; 0
   19df8:	70 e0       	ldi	r23, 0x00	; 0
   19dfa:	40 e0       	ldi	r20, 0x00	; 0
   19dfc:	90 e0       	ldi	r25, 0x00	; 0
   19dfe:	f9 01       	movw	r30, r18
   19e00:	19 95       	eicall
   19e02:	cd 54       	subi	r28, 0x4D	; 77
   19e04:	df 4f       	sbci	r29, 0xFF	; 255
   19e06:	88 83       	st	Y, r24
   19e08:	c3 5b       	subi	r28, 0xB3	; 179
   19e0a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1025
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
   19e0c:	f2 01       	movw	r30, r4
   19e0e:	e5 53       	subi	r30, 0x35	; 53
   19e10:	fd 4f       	sbci	r31, 0xFD	; 253
   19e12:	e6 0d       	add	r30, r6
   19e14:	f7 1d       	adc	r31, r7
   19e16:	25 91       	lpm	r18, Z+
   19e18:	34 91       	lpm	r19, Z
   19e1a:	ce 51       	subi	r28, 0x1E	; 30
   19e1c:	df 4f       	sbci	r29, 0xFF	; 255
   19e1e:	39 83       	std	Y+1, r19	; 0x01
   19e20:	28 83       	st	Y, r18
   19e22:	c2 5e       	subi	r28, 0xE2	; 226
   19e24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1026
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   19e26:	f2 01       	movw	r30, r4
   19e28:	e7 53       	subi	r30, 0x37	; 55
   19e2a:	fd 4f       	sbci	r31, 0xFD	; 253
   19e2c:	e6 0d       	add	r30, r6
   19e2e:	f7 1d       	adc	r31, r7
   19e30:	44 91       	lpm	r20, Z
   19e32:	c2 01       	movw	r24, r4
   19e34:	89 53       	subi	r24, 0x39	; 57
   19e36:	9d 4f       	sbci	r25, 0xFD	; 253
   19e38:	b3 01       	movw	r22, r6
   19e3a:	68 0f       	add	r22, r24
   19e3c:	79 1f       	adc	r23, r25
   19e3e:	c0 53       	subi	r28, 0x30	; 48
   19e40:	df 4f       	sbci	r29, 0xFF	; 255
   19e42:	79 83       	std	Y+1, r23	; 0x01
   19e44:	68 83       	st	Y, r22
   19e46:	c0 5d       	subi	r28, 0xD0	; 208
   19e48:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1027
      if (slider_active != MENU_SLIDER_OFF)
   19e4a:	4f 3f       	cpi	r20, 0xFF	; 255
   19e4c:	99 f0       	breq	.+38     	; 0x19e74 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1cb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1028
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   19e4e:	fb 01       	movw	r30, r22
   19e50:	24 91       	lpm	r18, Z
   19e52:	f2 01       	movw	r30, r4
   19e54:	e8 53       	subi	r30, 0x38	; 56
   19e56:	fd 4f       	sbci	r31, 0xFD	; 253
   19e58:	e6 0d       	add	r30, r6
   19e5a:	f7 1d       	adc	r31, r7
   19e5c:	e4 91       	lpm	r30, Z
   19e5e:	2e 9f       	mul	r18, r30
   19e60:	20 2d       	mov	r18, r0
   19e62:	11 24       	eor	r1, r1
   19e64:	be 01       	movw	r22, r28
   19e66:	6d 54       	subi	r22, 0x4D	; 77
   19e68:	7f 4f       	sbci	r23, 0xFF	; 255
   19e6a:	ce 01       	movw	r24, r28
   19e6c:	8e 54       	subi	r24, 0x4E	; 78
   19e6e:	9f 4f       	sbci	r25, 0xFF	; 255
   19e70:	0e 94 ed a6 	call	0x14dda	; 0x14dda <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   19e74:	c2 01       	movw	r24, r4
   19e76:	8a 53       	subi	r24, 0x3A	; 58
   19e78:	9d 4f       	sbci	r25, 0xFD	; 253
   19e7a:	93 01       	movw	r18, r6
   19e7c:	28 0f       	add	r18, r24
   19e7e:	39 1f       	adc	r19, r25
   19e80:	ce 53       	subi	r28, 0x3E	; 62
   19e82:	df 4f       	sbci	r29, 0xFF	; 255
   19e84:	39 83       	std	Y+1, r19	; 0x01
   19e86:	28 83       	st	Y, r18
   19e88:	c2 5c       	subi	r28, 0xC2	; 194
   19e8a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1033
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19e8c:	40 97       	sbiw	r24, 0x10	; 16
   19e8e:	a3 01       	movw	r20, r6
   19e90:	48 0f       	add	r20, r24
   19e92:	59 1f       	adc	r21, r25
   19e94:	cc 53       	subi	r28, 0x3C	; 60
   19e96:	df 4f       	sbci	r29, 0xFF	; 255
   19e98:	59 83       	std	Y+1, r21	; 0x01
   19e9a:	48 83       	st	Y, r20
   19e9c:	c4 5c       	subi	r28, 0xC4	; 196
   19e9e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1034
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   19ea0:	12 01       	movw	r2, r4
   19ea2:	58 e4       	ldi	r21, 0x48	; 72
   19ea4:	25 1a       	sub	r2, r21
   19ea6:	5d ef       	ldi	r21, 0xFD	; 253
   19ea8:	35 0a       	sbc	r3, r21
   19eaa:	26 0c       	add	r2, r6
   19eac:	37 1c       	adc	r3, r7
   19eae:	0f 96       	adiw	r24, 0x0f	; 15
   19eb0:	b3 01       	movw	r22, r6
   19eb2:	68 0f       	add	r22, r24
   19eb4:	79 1f       	adc	r23, r25
   19eb6:	c5 53       	subi	r28, 0x35	; 53
   19eb8:	df 4f       	sbci	r29, 0xFF	; 255
   19eba:	79 83       	std	Y+1, r23	; 0x01
   19ebc:	68 83       	st	Y, r22
   19ebe:	cb 5c       	subi	r28, 0xCB	; 203
   19ec0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19ec2:	01 97       	sbiw	r24, 0x01	; 1
   19ec4:	f3 01       	movw	r30, r6
   19ec6:	e8 0f       	add	r30, r24
   19ec8:	f9 1f       	adc	r31, r25
   19eca:	c3 53       	subi	r28, 0x33	; 51
   19ecc:	df 4f       	sbci	r29, 0xFF	; 255
   19ece:	f9 83       	std	Y+1, r31	; 0x01
   19ed0:	e8 83       	st	Y, r30
   19ed2:	cd 5c       	subi	r28, 0xCD	; 205
   19ed4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   19ed6:	0d 96       	adiw	r24, 0x0d	; 13
   19ed8:	93 01       	movw	r18, r6
   19eda:	28 0f       	add	r18, r24
   19edc:	39 1f       	adc	r19, r25
   19ede:	ce 52       	subi	r28, 0x2E	; 46
   19ee0:	df 4f       	sbci	r29, 0xFF	; 255
   19ee2:	39 83       	std	Y+1, r19	; 0x01
   19ee4:	28 83       	st	Y, r18
   19ee6:	c2 5d       	subi	r28, 0xD2	; 210
   19ee8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1062
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   19eea:	0f 97       	sbiw	r24, 0x0f	; 15
   19eec:	a3 01       	movw	r20, r6
   19eee:	48 0f       	add	r20, r24
   19ef0:	59 1f       	adc	r21, r25
   19ef2:	cc 52       	subi	r28, 0x2C	; 44
   19ef4:	df 4f       	sbci	r29, 0xFF	; 255
   19ef6:	59 83       	std	Y+1, r21	; 0x01
   19ef8:	48 83       	st	Y, r20
   19efa:	c4 5d       	subi	r28, 0xD4	; 212
   19efc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1061
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   19efe:	02 97       	sbiw	r24, 0x02	; 2
   19f00:	b3 01       	movw	r22, r6
   19f02:	68 0f       	add	r22, r24
   19f04:	79 1f       	adc	r23, r25
   19f06:	ca 52       	subi	r28, 0x2A	; 42
   19f08:	df 4f       	sbci	r29, 0xFF	; 255
   19f0a:	79 83       	std	Y+1, r23	; 0x01
   19f0c:	68 83       	st	Y, r22
   19f0e:	c6 5d       	subi	r28, 0xD6	; 214
   19f10:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   19f12:	01 97       	sbiw	r24, 0x01	; 1
   19f14:	f3 01       	movw	r30, r6
   19f16:	e8 0f       	add	r30, r24
   19f18:	f9 1f       	adc	r31, r25
   19f1a:	c8 52       	subi	r28, 0x28	; 40
   19f1c:	df 4f       	sbci	r29, 0xFF	; 255
   19f1e:	f9 83       	std	Y+1, r31	; 0x01
   19f20:	e8 83       	st	Y, r30
   19f22:	c8 5d       	subi	r28, 0xD8	; 216
   19f24:	d0 40       	sbci	r29, 0x00	; 0
   19f26:	01 97       	sbiw	r24, 0x01	; 1
   19f28:	93 01       	movw	r18, r6
   19f2a:	28 0f       	add	r18, r24
   19f2c:	39 1f       	adc	r19, r25
   19f2e:	c6 52       	subi	r28, 0x26	; 38
   19f30:	df 4f       	sbci	r29, 0xFF	; 255
   19f32:	39 83       	std	Y+1, r19	; 0x01
   19f34:	28 83       	st	Y, r18
   19f36:	ca 5d       	subi	r28, 0xDA	; 218
   19f38:	d0 40       	sbci	r29, 0x00	; 0
   19f3a:	02 97       	sbiw	r24, 0x02	; 2
   19f3c:	a3 01       	movw	r20, r6
   19f3e:	48 0f       	add	r20, r24
   19f40:	59 1f       	adc	r21, r25
   19f42:	c4 52       	subi	r28, 0x24	; 36
   19f44:	df 4f       	sbci	r29, 0xFF	; 255
   19f46:	59 83       	std	Y+1, r21	; 0x01
   19f48:	48 83       	st	Y, r20
   19f4a:	cc 5d       	subi	r28, 0xDC	; 220
   19f4c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   19f4e:	02 97       	sbiw	r24, 0x02	; 2
   19f50:	b3 01       	movw	r22, r6
   19f52:	68 0f       	add	r22, r24
   19f54:	79 1f       	adc	r23, r25
   19f56:	c2 52       	subi	r28, 0x22	; 34
   19f58:	df 4f       	sbci	r29, 0xFF	; 255
   19f5a:	79 83       	std	Y+1, r23	; 0x01
   19f5c:	68 83       	st	Y, r22
   19f5e:	ce 5d       	subi	r28, 0xDE	; 222
   19f60:	d0 40       	sbci	r29, 0x00	; 0
   19f62:	91 2c       	mov	r9, r1
   19f64:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1029
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   19f66:	ce 54       	subi	r28, 0x4E	; 78
   19f68:	df 4f       	sbci	r29, 0xFF	; 255
   19f6a:	88 81       	ld	r24, Y
   19f6c:	c2 5b       	subi	r28, 0xB2	; 178
   19f6e:	d0 40       	sbci	r29, 0x00	; 0
   19f70:	cd 54       	subi	r28, 0x4D	; 77
   19f72:	df 4f       	sbci	r29, 0xFF	; 255
   19f74:	98 81       	ld	r25, Y
   19f76:	c3 5b       	subi	r28, 0xB3	; 179
   19f78:	d0 40       	sbci	r29, 0x00	; 0
   19f7a:	89 17       	cp	r24, r25
   19f7c:	08 f0       	brcs	.+2      	; 0x19f80 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1dc2>
   19f7e:	73 c1       	rjmp	.+742    	; 0x1a266 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x20a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   19f80:	ce 53       	subi	r28, 0x3E	; 62
   19f82:	df 4f       	sbci	r29, 0xFF	; 255
   19f84:	e8 81       	ld	r30, Y
   19f86:	f9 81       	ldd	r31, Y+1	; 0x01
   19f88:	c2 5c       	subi	r28, 0xC2	; 194
   19f8a:	d0 40       	sbci	r29, 0x00	; 0
   19f8c:	94 91       	lpm	r25, Z
   19f8e:	91 11       	cpse	r25, r1
   19f90:	34 c0       	rjmp	.+104    	; 0x19ffa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1033
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19f92:	cc 53       	subi	r28, 0x3C	; 60
   19f94:	df 4f       	sbci	r29, 0xFF	; 255
   19f96:	e8 81       	ld	r30, Y
   19f98:	f9 81       	ldd	r31, Y+1	; 0x01
   19f9a:	c4 5c       	subi	r28, 0xC4	; 196
   19f9c:	d0 40       	sbci	r29, 0x00	; 0
   19f9e:	25 91       	lpm	r18, Z+
   19fa0:	34 91       	lpm	r19, Z
   19fa2:	c8 54       	subi	r28, 0x48	; 72
   19fa4:	df 4f       	sbci	r29, 0xFF	; 255
   19fa6:	48 81       	ld	r20, Y
   19fa8:	59 81       	ldd	r21, Y+1	; 0x01
   19faa:	c8 5b       	subi	r28, 0xB8	; 184
   19fac:	d0 40       	sbci	r29, 0x00	; 0
   19fae:	42 0f       	add	r20, r18
   19fb0:	53 1f       	adc	r21, r19
   19fb2:	c2 54       	subi	r28, 0x42	; 66
   19fb4:	df 4f       	sbci	r29, 0xFF	; 255
   19fb6:	59 83       	std	Y+1, r21	; 0x01
   19fb8:	48 83       	st	Y, r20
   19fba:	ce 5b       	subi	r28, 0xBE	; 190
   19fbc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1034
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   19fbe:	f1 01       	movw	r30, r2
   19fc0:	25 91       	lpm	r18, Z+
   19fc2:	34 91       	lpm	r19, Z
   19fc4:	c5 53       	subi	r28, 0x35	; 53
   19fc6:	df 4f       	sbci	r29, 0xFF	; 255
   19fc8:	e8 81       	ld	r30, Y
   19fca:	f9 81       	ldd	r31, Y+1	; 0x01
   19fcc:	cb 5c       	subi	r28, 0xCB	; 203
   19fce:	d0 40       	sbci	r29, 0x00	; 0
   19fd0:	94 91       	lpm	r25, Z
   19fd2:	c6 54       	subi	r28, 0x46	; 70
   19fd4:	df 4f       	sbci	r29, 0xFF	; 255
   19fd6:	48 81       	ld	r20, Y
   19fd8:	59 81       	ldd	r21, Y+1	; 0x01
   19fda:	ca 5b       	subi	r28, 0xBA	; 186
   19fdc:	d0 40       	sbci	r29, 0x00	; 0
   19fde:	24 0f       	add	r18, r20
   19fe0:	35 1f       	adc	r19, r21
   19fe2:	b9 01       	movw	r22, r18
   19fe4:	9f 9d       	mul	r25, r15
   19fe6:	60 0d       	add	r22, r0
   19fe8:	71 1d       	adc	r23, r1
   19fea:	11 24       	eor	r1, r1
   19fec:	c0 54       	subi	r28, 0x40	; 64
   19fee:	df 4f       	sbci	r29, 0xFF	; 255
   19ff0:	79 83       	std	Y+1, r23	; 0x01
   19ff2:	68 83       	st	Y, r22
   19ff4:	c0 5c       	subi	r28, 0xC0	; 192
   19ff6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1035
          loop_t++;
   19ff8:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   19ffa:	ce 53       	subi	r28, 0x3E	; 62
   19ffc:	df 4f       	sbci	r29, 0xFF	; 255
   19ffe:	e8 81       	ld	r30, Y
   1a000:	f9 81       	ldd	r31, Y+1	; 0x01
   1a002:	c2 5c       	subi	r28, 0xC2	; 194
   1a004:	d0 40       	sbci	r29, 0x00	; 0
   1a006:	94 91       	lpm	r25, Z
   1a008:	91 30       	cpi	r25, 0x01	; 1
   1a00a:	09 f0       	breq	.+2      	; 0x1a00e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e50>
   1a00c:	34 c0       	rjmp	.+104    	; 0x1a076 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1eb8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1039
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   1a00e:	f1 01       	movw	r30, r2
   1a010:	25 91       	lpm	r18, Z+
   1a012:	34 91       	lpm	r19, Z
   1a014:	c6 54       	subi	r28, 0x46	; 70
   1a016:	df 4f       	sbci	r29, 0xFF	; 255
   1a018:	48 81       	ld	r20, Y
   1a01a:	59 81       	ldd	r21, Y+1	; 0x01
   1a01c:	ca 5b       	subi	r28, 0xBA	; 186
   1a01e:	d0 40       	sbci	r29, 0x00	; 0
   1a020:	42 0f       	add	r20, r18
   1a022:	53 1f       	adc	r21, r19
   1a024:	c0 54       	subi	r28, 0x40	; 64
   1a026:	df 4f       	sbci	r29, 0xFF	; 255
   1a028:	59 83       	std	Y+1, r21	; 0x01
   1a02a:	48 83       	st	Y, r20
   1a02c:	c0 5c       	subi	r28, 0xC0	; 192
   1a02e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   1a030:	cc 53       	subi	r28, 0x3C	; 60
   1a032:	df 4f       	sbci	r29, 0xFF	; 255
   1a034:	e8 81       	ld	r30, Y
   1a036:	f9 81       	ldd	r31, Y+1	; 0x01
   1a038:	c4 5c       	subi	r28, 0xC4	; 196
   1a03a:	d0 40       	sbci	r29, 0x00	; 0
   1a03c:	25 91       	lpm	r18, Z+
   1a03e:	34 91       	lpm	r19, Z
   1a040:	c3 53       	subi	r28, 0x33	; 51
   1a042:	df 4f       	sbci	r29, 0xFF	; 255
   1a044:	e8 81       	ld	r30, Y
   1a046:	f9 81       	ldd	r31, Y+1	; 0x01
   1a048:	cd 5c       	subi	r28, 0xCD	; 205
   1a04a:	d0 40       	sbci	r29, 0x00	; 0
   1a04c:	94 91       	lpm	r25, Z
   1a04e:	c8 54       	subi	r28, 0x48	; 72
   1a050:	df 4f       	sbci	r29, 0xFF	; 255
   1a052:	48 81       	ld	r20, Y
   1a054:	59 81       	ldd	r21, Y+1	; 0x01
   1a056:	c8 5b       	subi	r28, 0xB8	; 184
   1a058:	d0 40       	sbci	r29, 0x00	; 0
   1a05a:	24 0f       	add	r18, r20
   1a05c:	35 1f       	adc	r19, r21
   1a05e:	b9 01       	movw	r22, r18
   1a060:	9f 9d       	mul	r25, r15
   1a062:	60 0d       	add	r22, r0
   1a064:	71 1d       	adc	r23, r1
   1a066:	11 24       	eor	r1, r1
   1a068:	c2 54       	subi	r28, 0x42	; 66
   1a06a:	df 4f       	sbci	r29, 0xFF	; 255
   1a06c:	79 83       	std	Y+1, r23	; 0x01
   1a06e:	68 83       	st	Y, r22
   1a070:	ce 5b       	subi	r28, 0xBE	; 190
   1a072:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1041
          loop_t++;
   1a074:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   1a076:	ce 53       	subi	r28, 0x3E	; 62
   1a078:	df 4f       	sbci	r29, 0xFF	; 255
   1a07a:	e8 81       	ld	r30, Y
   1a07c:	f9 81       	ldd	r31, Y+1	; 0x01
   1a07e:	c2 5c       	subi	r28, 0xC2	; 194
   1a080:	d0 40       	sbci	r29, 0x00	; 0
   1a082:	94 91       	lpm	r25, Z
   1a084:	92 30       	cpi	r25, 0x02	; 2
   1a086:	09 f0       	breq	.+2      	; 0x1a08a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ecc>
   1a088:	4b c0       	rjmp	.+150    	; 0x1a120 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1045
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   1a08a:	cc 53       	subi	r28, 0x3C	; 60
   1a08c:	df 4f       	sbci	r29, 0xFF	; 255
   1a08e:	e8 81       	ld	r30, Y
   1a090:	f9 81       	ldd	r31, Y+1	; 0x01
   1a092:	c4 5c       	subi	r28, 0xC4	; 196
   1a094:	d0 40       	sbci	r29, 0x00	; 0
   1a096:	25 91       	lpm	r18, Z+
   1a098:	34 91       	lpm	r19, Z
   1a09a:	c3 53       	subi	r28, 0x33	; 51
   1a09c:	df 4f       	sbci	r29, 0xFF	; 255
   1a09e:	e8 81       	ld	r30, Y
   1a0a0:	f9 81       	ldd	r31, Y+1	; 0x01
   1a0a2:	cd 5c       	subi	r28, 0xCD	; 205
   1a0a4:	d0 40       	sbci	r29, 0x00	; 0
   1a0a6:	94 91       	lpm	r25, Z
   1a0a8:	c8 54       	subi	r28, 0x48	; 72
   1a0aa:	df 4f       	sbci	r29, 0xFF	; 255
   1a0ac:	48 81       	ld	r20, Y
   1a0ae:	59 81       	ldd	r21, Y+1	; 0x01
   1a0b0:	c8 5b       	subi	r28, 0xB8	; 184
   1a0b2:	d0 40       	sbci	r29, 0x00	; 0
   1a0b4:	24 0f       	add	r18, r20
   1a0b6:	35 1f       	adc	r19, r21
   1a0b8:	b9 01       	movw	r22, r18
   1a0ba:	9f 9d       	mul	r25, r15
   1a0bc:	60 0d       	add	r22, r0
   1a0be:	71 1d       	adc	r23, r1
   1a0c0:	11 24       	eor	r1, r1
   1a0c2:	c2 54       	subi	r28, 0x42	; 66
   1a0c4:	df 4f       	sbci	r29, 0xFF	; 255
   1a0c6:	79 83       	std	Y+1, r23	; 0x01
   1a0c8:	68 83       	st	Y, r22
   1a0ca:	ce 5b       	subi	r28, 0xBE	; 190
   1a0cc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1046
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   1a0ce:	f1 01       	movw	r30, r2
   1a0d0:	25 91       	lpm	r18, Z+
   1a0d2:	34 91       	lpm	r19, Z
   1a0d4:	c5 53       	subi	r28, 0x35	; 53
   1a0d6:	df 4f       	sbci	r29, 0xFF	; 255
   1a0d8:	e8 81       	ld	r30, Y
   1a0da:	f9 81       	ldd	r31, Y+1	; 0x01
   1a0dc:	cb 5c       	subi	r28, 0xCB	; 203
   1a0de:	d0 40       	sbci	r29, 0x00	; 0
   1a0e0:	94 91       	lpm	r25, Z
   1a0e2:	c6 54       	subi	r28, 0x46	; 70
   1a0e4:	df 4f       	sbci	r29, 0xFF	; 255
   1a0e6:	48 81       	ld	r20, Y
   1a0e8:	59 81       	ldd	r21, Y+1	; 0x01
   1a0ea:	ca 5b       	subi	r28, 0xBA	; 186
   1a0ec:	d0 40       	sbci	r29, 0x00	; 0
   1a0ee:	24 0f       	add	r18, r20
   1a0f0:	35 1f       	adc	r19, r21
   1a0f2:	b9 01       	movw	r22, r18
   1a0f4:	99 9d       	mul	r25, r9
   1a0f6:	60 0d       	add	r22, r0
   1a0f8:	71 1d       	adc	r23, r1
   1a0fa:	11 24       	eor	r1, r1
   1a0fc:	c0 54       	subi	r28, 0x40	; 64
   1a0fe:	df 4f       	sbci	r29, 0xFF	; 255
   1a100:	79 83       	std	Y+1, r23	; 0x01
   1a102:	68 83       	st	Y, r22
   1a104:	c0 5c       	subi	r28, 0xC0	; 192
   1a106:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1047
          loop_t++;
   1a108:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1048
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
   1a10a:	c0 53       	subi	r28, 0x30	; 48
   1a10c:	df 4f       	sbci	r29, 0xFF	; 255
   1a10e:	e8 81       	ld	r30, Y
   1a110:	f9 81       	ldd	r31, Y+1	; 0x01
   1a112:	c0 5d       	subi	r28, 0xD0	; 208
   1a114:	d0 40       	sbci	r29, 0x00	; 0
   1a116:	94 91       	lpm	r25, Z
   1a118:	f9 16       	cp	r15, r25
   1a11a:	10 f0       	brcs	.+4      	; 0x1a120 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1051
          {
            loop_t = 0;
            loop_r++;
   1a11c:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1050
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
   1a11e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1054
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   1a120:	c4 54       	subi	r28, 0x44	; 68
   1a122:	df 4f       	sbci	r29, 0xFF	; 255
   1a124:	e8 81       	ld	r30, Y
   1a126:	f9 81       	ldd	r31, Y+1	; 0x01
   1a128:	cc 5b       	subi	r28, 0xBC	; 188
   1a12a:	d0 40       	sbci	r29, 0x00	; 0
   1a12c:	44 91       	lpm	r20, Z
   1a12e:	8e 01       	movw	r16, r28
   1a130:	0f 57       	subi	r16, 0x7F	; 127
   1a132:	1f 4f       	sbci	r17, 0xFF	; 255
   1a134:	9e 01       	movw	r18, r28
   1a136:	2f 5f       	subi	r18, 0xFF	; 255
   1a138:	3f 4f       	sbci	r19, 0xFF	; 255
   1a13a:	cf 54       	subi	r28, 0x4F	; 79
   1a13c:	df 4f       	sbci	r29, 0xFF	; 255
   1a13e:	68 81       	ld	r22, Y
   1a140:	c1 5b       	subi	r28, 0xB1	; 177
   1a142:	d0 40       	sbci	r29, 0x00	; 0
   1a144:	ce 51       	subi	r28, 0x1E	; 30
   1a146:	df 4f       	sbci	r29, 0xFF	; 255
   1a148:	e8 81       	ld	r30, Y
   1a14a:	f9 81       	ldd	r31, Y+1	; 0x01
   1a14c:	c2 5e       	subi	r28, 0xE2	; 226
   1a14e:	d0 40       	sbci	r29, 0x00	; 0
   1a150:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   1a152:	ce 52       	subi	r28, 0x2E	; 46
   1a154:	df 4f       	sbci	r29, 0xFF	; 255
   1a156:	e8 81       	ld	r30, Y
   1a158:	f9 81       	ldd	r31, Y+1	; 0x01
   1a15a:	c2 5d       	subi	r28, 0xD2	; 210
   1a15c:	d0 40       	sbci	r29, 0x00	; 0
   1a15e:	25 91       	lpm	r18, Z+
   1a160:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   1a162:	c4 54       	subi	r28, 0x44	; 68
   1a164:	df 4f       	sbci	r29, 0xFF	; 255
   1a166:	e8 81       	ld	r30, Y
   1a168:	f9 81       	ldd	r31, Y+1	; 0x01
   1a16a:	cc 5b       	subi	r28, 0xBC	; 188
   1a16c:	d0 40       	sbci	r29, 0x00	; 0
   1a16e:	84 91       	lpm	r24, Z
   1a170:	cf 54       	subi	r28, 0x4F	; 79
   1a172:	df 4f       	sbci	r29, 0xFF	; 255
   1a174:	68 81       	ld	r22, Y
   1a176:	c1 5b       	subi	r28, 0xB1	; 177
   1a178:	d0 40       	sbci	r29, 0x00	; 0
   1a17a:	70 e0       	ldi	r23, 0x00	; 0
   1a17c:	ce 54       	subi	r28, 0x4E	; 78
   1a17e:	df 4f       	sbci	r29, 0xFF	; 255
   1a180:	48 81       	ld	r20, Y
   1a182:	c2 5b       	subi	r28, 0xB2	; 178
   1a184:	d0 40       	sbci	r29, 0x00	; 0
   1a186:	90 e0       	ldi	r25, 0x00	; 0
   1a188:	f9 01       	movw	r30, r18
   1a18a:	19 95       	eicall
   1a18c:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1058
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   1a18e:	60 e2       	ldi	r22, 0x20	; 32
   1a190:	c1 53       	subi	r28, 0x31	; 49
   1a192:	df 4f       	sbci	r29, 0xFF	; 255
   1a194:	88 81       	ld	r24, Y
   1a196:	cf 5c       	subi	r28, 0xCF	; 207
   1a198:	d0 40       	sbci	r29, 0x00	; 0
   1a19a:	0e 94 b9 b6 	call	0x16d72	; 0x16d72 <enable_redraw(unsigned char, unsigned char)>
   1a19e:	88 23       	and	r24, r24
   1a1a0:	21 f0       	breq	.+8      	; 0x1a1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1fec>
   1a1a2:	f2 e0       	ldi	r31, 0x02	; 2
   1a1a4:	8f 12       	cpse	r8, r31
   1a1a6:	01 c0       	rjmp	.+2      	; 0x1a1aa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1fec>
   1a1a8:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1062
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   1a1aa:	cc 52       	subi	r28, 0x2C	; 44
   1a1ac:	df 4f       	sbci	r29, 0xFF	; 255
   1a1ae:	e8 81       	ld	r30, Y
   1a1b0:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1b2:	c4 5d       	subi	r28, 0xD4	; 212
   1a1b4:	d0 40       	sbci	r29, 0x00	; 0
   1a1b6:	a5 90       	lpm	r10, Z+
   1a1b8:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1061
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   1a1ba:	ca 52       	subi	r28, 0x2A	; 42
   1a1bc:	df 4f       	sbci	r29, 0xFF	; 255
   1a1be:	e8 81       	ld	r30, Y
   1a1c0:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1c2:	c6 5d       	subi	r28, 0xD6	; 214
   1a1c4:	d0 40       	sbci	r29, 0x00	; 0
   1a1c6:	c5 90       	lpm	r12, Z+
   1a1c8:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   1a1ca:	c8 52       	subi	r28, 0x28	; 40
   1a1cc:	df 4f       	sbci	r29, 0xFF	; 255
   1a1ce:	e8 81       	ld	r30, Y
   1a1d0:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1d2:	c8 5d       	subi	r28, 0xD8	; 216
   1a1d4:	d0 40       	sbci	r29, 0x00	; 0
   1a1d6:	e4 90       	lpm	r14, Z
   1a1d8:	c6 52       	subi	r28, 0x26	; 38
   1a1da:	df 4f       	sbci	r29, 0xFF	; 255
   1a1dc:	e8 81       	ld	r30, Y
   1a1de:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1e0:	ca 5d       	subi	r28, 0xDA	; 218
   1a1e2:	d0 40       	sbci	r29, 0x00	; 0
   1a1e4:	04 91       	lpm	r16, Z
   1a1e6:	c4 52       	subi	r28, 0x24	; 36
   1a1e8:	df 4f       	sbci	r29, 0xFF	; 255
   1a1ea:	e8 81       	ld	r30, Y
   1a1ec:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1ee:	cc 5d       	subi	r28, 0xDC	; 220
   1a1f0:	d0 40       	sbci	r29, 0x00	; 0
   1a1f2:	25 91       	lpm	r18, Z+
   1a1f4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   1a1f6:	c2 52       	subi	r28, 0x22	; 34
   1a1f8:	df 4f       	sbci	r29, 0xFF	; 255
   1a1fa:	e8 81       	ld	r30, Y
   1a1fc:	f9 81       	ldd	r31, Y+1	; 0x01
   1a1fe:	ce 5d       	subi	r28, 0xDE	; 222
   1a200:	d0 40       	sbci	r29, 0x00	; 0
   1a202:	45 91       	lpm	r20, Z+
   1a204:	54 91       	lpm	r21, Z
   1a206:	cb 54       	subi	r28, 0x4B	; 75
   1a208:	df 4f       	sbci	r29, 0xFF	; 255
   1a20a:	f8 81       	ld	r31, Y
   1a20c:	c5 5b       	subi	r28, 0xB5	; 181
   1a20e:	d0 40       	sbci	r29, 0x00	; 0
   1a210:	ff 93       	push	r31
   1a212:	cc 54       	subi	r28, 0x4C	; 76
   1a214:	df 4f       	sbci	r29, 0xFF	; 255
   1a216:	68 81       	ld	r22, Y
   1a218:	c4 5b       	subi	r28, 0xB4	; 180
   1a21a:	d0 40       	sbci	r29, 0x00	; 0
   1a21c:	6f 93       	push	r22
   1a21e:	81 e0       	ldi	r24, 0x01	; 1
   1a220:	90 e0       	ldi	r25, 0x00	; 0
   1a222:	8c 0f       	add	r24, r28
   1a224:	9d 1f       	adc	r25, r29
   1a226:	9f 93       	push	r25
   1a228:	8f 93       	push	r24
   1a22a:	c0 54       	subi	r28, 0x40	; 64
   1a22c:	df 4f       	sbci	r29, 0xFF	; 255
   1a22e:	68 81       	ld	r22, Y
   1a230:	79 81       	ldd	r23, Y+1	; 0x01
   1a232:	c0 5c       	subi	r28, 0xC0	; 192
   1a234:	d0 40       	sbci	r29, 0x00	; 0
   1a236:	c2 54       	subi	r28, 0x42	; 66
   1a238:	df 4f       	sbci	r29, 0xFF	; 255
   1a23a:	88 81       	ld	r24, Y
   1a23c:	99 81       	ldd	r25, Y+1	; 0x01
   1a23e:	ce 5b       	subi	r28, 0xBE	; 190
   1a240:	d0 40       	sbci	r29, 0x00	; 0
   1a242:	0e 94 f7 a4 	call	0x149ee	; 0x149ee <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
   1a246:	ce 54       	subi	r28, 0x4E	; 78
   1a248:	df 4f       	sbci	r29, 0xFF	; 255
   1a24a:	88 81       	ld	r24, Y
   1a24c:	c2 5b       	subi	r28, 0xB2	; 178
   1a24e:	d0 40       	sbci	r29, 0x00	; 0
   1a250:	8f 5f       	subi	r24, 0xFF	; 255
   1a252:	ce 54       	subi	r28, 0x4E	; 78
   1a254:	df 4f       	sbci	r29, 0xFF	; 255
   1a256:	88 83       	st	Y, r24
   1a258:	c2 5b       	subi	r28, 0xB2	; 178
   1a25a:	d0 40       	sbci	r29, 0x00	; 0
   1a25c:	0f 90       	pop	r0
   1a25e:	0f 90       	pop	r0
   1a260:	0f 90       	pop	r0
   1a262:	0f 90       	pop	r0
   1a264:	80 ce       	rjmp	.-768    	; 0x19f66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1da8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1066
      }
    }
    if (click_x > 0 && click_y > 0)
   1a266:	c9 53       	subi	r28, 0x39	; 57
   1a268:	df 4f       	sbci	r29, 0xFF	; 255
   1a26a:	e8 81       	ld	r30, Y
   1a26c:	f9 81       	ldd	r31, Y+1	; 0x01
   1a26e:	c7 5c       	subi	r28, 0xC7	; 199
   1a270:	d0 40       	sbci	r29, 0x00	; 0
   1a272:	ef 2b       	or	r30, r31
   1a274:	09 f4       	brne	.+2      	; 0x1a278 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x20ba>
   1a276:	bb c1       	rjmp	.+886    	; 0x1a5ee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2430>
   1a278:	c7 53       	subi	r28, 0x37	; 55
   1a27a:	df 4f       	sbci	r29, 0xFF	; 255
   1a27c:	28 81       	ld	r18, Y
   1a27e:	39 81       	ldd	r19, Y+1	; 0x01
   1a280:	c9 5c       	subi	r28, 0xC9	; 201
   1a282:	d0 40       	sbci	r29, 0x00	; 0
   1a284:	23 2b       	or	r18, r19
   1a286:	09 f4       	brne	.+2      	; 0x1a28a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x20cc>
   1a288:	b2 c1       	rjmp	.+868    	; 0x1a5ee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2430>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
    {
      loop_i = 0;
   1a28a:	ce 54       	subi	r28, 0x4E	; 78
   1a28c:	df 4f       	sbci	r29, 0xFF	; 255
   1a28e:	18 82       	st	Y, r1
   1a290:	c2 5b       	subi	r28, 0xB2	; 178
   1a292:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   1a294:	f2 01       	movw	r30, r4
   1a296:	e1 53       	subi	r30, 0x31	; 49
   1a298:	fd 4f       	sbci	r31, 0xFD	; 253
   1a29a:	e6 0d       	add	r30, r6
   1a29c:	f7 1d       	adc	r31, r7
   1a29e:	25 91       	lpm	r18, Z+
   1a2a0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1072
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   1a2a2:	c2 01       	movw	r24, r4
   1a2a4:	86 53       	subi	r24, 0x36	; 54
   1a2a6:	9d 4f       	sbci	r25, 0xFD	; 253
   1a2a8:	a3 01       	movw	r20, r6
   1a2aa:	48 0f       	add	r20, r24
   1a2ac:	59 1f       	adc	r21, r25
   1a2ae:	ce 53       	subi	r28, 0x3E	; 62
   1a2b0:	df 4f       	sbci	r29, 0xFF	; 255
   1a2b2:	59 83       	std	Y+1, r21	; 0x01
   1a2b4:	48 83       	st	Y, r20
   1a2b6:	c2 5c       	subi	r28, 0xC2	; 194
   1a2b8:	d0 40       	sbci	r29, 0x00	; 0
   1a2ba:	fa 01       	movw	r30, r20
   1a2bc:	84 91       	lpm	r24, Z
   1a2be:	cf 54       	subi	r28, 0x4F	; 79
   1a2c0:	df 4f       	sbci	r29, 0xFF	; 255
   1a2c2:	68 81       	ld	r22, Y
   1a2c4:	c1 5b       	subi	r28, 0xB1	; 177
   1a2c6:	d0 40       	sbci	r29, 0x00	; 0
   1a2c8:	70 e0       	ldi	r23, 0x00	; 0
   1a2ca:	40 e0       	ldi	r20, 0x00	; 0
   1a2cc:	90 e0       	ldi	r25, 0x00	; 0
   1a2ce:	f9 01       	movw	r30, r18
   1a2d0:	19 95       	eicall
   1a2d2:	cd 54       	subi	r28, 0x4D	; 77
   1a2d4:	df 4f       	sbci	r29, 0xFF	; 255
   1a2d6:	88 83       	st	Y, r24
   1a2d8:	c3 5b       	subi	r28, 0xB3	; 179
   1a2da:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   1a2dc:	f2 01       	movw	r30, r4
   1a2de:	e7 53       	subi	r30, 0x37	; 55
   1a2e0:	fd 4f       	sbci	r31, 0xFD	; 253
   1a2e2:	e6 0d       	add	r30, r6
   1a2e4:	f7 1d       	adc	r31, r7
   1a2e6:	44 91       	lpm	r20, Z
   1a2e8:	c2 01       	movw	r24, r4
   1a2ea:	89 53       	subi	r24, 0x39	; 57
   1a2ec:	9d 4f       	sbci	r25, 0xFD	; 253
   1a2ee:	93 01       	movw	r18, r6
   1a2f0:	28 0f       	add	r18, r24
   1a2f2:	39 1f       	adc	r19, r25
   1a2f4:	c3 53       	subi	r28, 0x33	; 51
   1a2f6:	df 4f       	sbci	r29, 0xFF	; 255
   1a2f8:	39 83       	std	Y+1, r19	; 0x01
   1a2fa:	28 83       	st	Y, r18
   1a2fc:	cd 5c       	subi	r28, 0xCD	; 205
   1a2fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1074
      if (slider_active != MENU_SLIDER_OFF)
   1a300:	4f 3f       	cpi	r20, 0xFF	; 255
   1a302:	99 f0       	breq	.+38     	; 0x1a32a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x216c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   1a304:	f9 01       	movw	r30, r18
   1a306:	24 91       	lpm	r18, Z
   1a308:	f2 01       	movw	r30, r4
   1a30a:	e8 53       	subi	r30, 0x38	; 56
   1a30c:	fd 4f       	sbci	r31, 0xFD	; 253
   1a30e:	e6 0d       	add	r30, r6
   1a310:	f7 1d       	adc	r31, r7
   1a312:	e4 91       	lpm	r30, Z
   1a314:	2e 9f       	mul	r18, r30
   1a316:	20 2d       	mov	r18, r0
   1a318:	11 24       	eor	r1, r1
   1a31a:	be 01       	movw	r22, r28
   1a31c:	6d 54       	subi	r22, 0x4D	; 77
   1a31e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a320:	ce 01       	movw	r24, r28
   1a322:	8e 54       	subi	r24, 0x4E	; 78
   1a324:	9f 4f       	sbci	r25, 0xFF	; 255
   1a326:	0e 94 ed a6 	call	0x14dda	; 0x14dda <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   1a32a:	ce 54       	subi	r28, 0x4E	; 78
   1a32c:	df 4f       	sbci	r29, 0xFF	; 255
   1a32e:	88 80       	ld	r8, Y
   1a330:	c2 5b       	subi	r28, 0xB2	; 178
   1a332:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1076
      while (loop_i < loop_cnt)
   1a334:	cd 54       	subi	r28, 0x4D	; 77
   1a336:	df 4f       	sbci	r29, 0xFF	; 255
   1a338:	28 80       	ld	r2, Y
   1a33a:	c3 5b       	subi	r28, 0xB3	; 179
   1a33c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   1a33e:	c2 01       	movw	r24, r4
   1a340:	8a 53       	subi	r24, 0x3A	; 58
   1a342:	9d 4f       	sbci	r25, 0xFD	; 253
   1a344:	93 01       	movw	r18, r6
   1a346:	28 0f       	add	r18, r24
   1a348:	39 1f       	adc	r19, r25
   1a34a:	c4 54       	subi	r28, 0x44	; 68
   1a34c:	df 4f       	sbci	r29, 0xFF	; 255
   1a34e:	39 83       	std	Y+1, r19	; 0x01
   1a350:	28 83       	st	Y, r18
   1a352:	cc 5b       	subi	r28, 0xBC	; 188
   1a354:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1080
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   1a356:	62 01       	movw	r12, r4
   1a358:	3a e4       	ldi	r19, 0x4A	; 74
   1a35a:	c3 1a       	sub	r12, r19
   1a35c:	3d ef       	ldi	r19, 0xFD	; 253
   1a35e:	d3 0a       	sbc	r13, r19
   1a360:	c6 0c       	add	r12, r6
   1a362:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   1a364:	52 01       	movw	r10, r4
   1a366:	48 e4       	ldi	r20, 0x48	; 72
   1a368:	a4 1a       	sub	r10, r20
   1a36a:	4d ef       	ldi	r20, 0xFD	; 253
   1a36c:	b4 0a       	sbc	r11, r20
   1a36e:	a6 0c       	add	r10, r6
   1a370:	b7 1c       	adc	r11, r7
   1a372:	01 97       	sbiw	r24, 0x01	; 1
   1a374:	b3 01       	movw	r22, r6
   1a376:	68 0f       	add	r22, r24
   1a378:	79 1f       	adc	r23, r25
   1a37a:	cc 53       	subi	r28, 0x3C	; 60
   1a37c:	df 4f       	sbci	r29, 0xFF	; 255
   1a37e:	79 83       	std	Y+1, r23	; 0x01
   1a380:	68 83       	st	Y, r22
   1a382:	c4 5c       	subi	r28, 0xC4	; 196
   1a384:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   1a386:	01 97       	sbiw	r24, 0x01	; 1
   1a388:	f3 01       	movw	r30, r6
   1a38a:	e8 0f       	add	r30, r24
   1a38c:	f9 1f       	adc	r31, r25
   1a38e:	c5 53       	subi	r28, 0x35	; 53
   1a390:	df 4f       	sbci	r29, 0xFF	; 255
   1a392:	f9 83       	std	Y+1, r31	; 0x01
   1a394:	e8 83       	st	Y, r30
   1a396:	cb 5c       	subi	r28, 0xCB	; 203
   1a398:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   1a39a:	08 97       	sbiw	r24, 0x08	; 8
   1a39c:	93 01       	movw	r18, r6
   1a39e:	28 0f       	add	r18, r24
   1a3a0:	39 1f       	adc	r19, r25
   1a3a2:	c0 53       	subi	r28, 0x30	; 48
   1a3a4:	df 4f       	sbci	r29, 0xFF	; 255
   1a3a6:	39 83       	std	Y+1, r19	; 0x01
   1a3a8:	28 83       	st	Y, r18
   1a3aa:	c0 5d       	subi	r28, 0xD0	; 208
   1a3ac:	d0 40       	sbci	r29, 0x00	; 0
   1a3ae:	02 97       	sbiw	r24, 0x02	; 2
   1a3b0:	a3 01       	movw	r20, r6
   1a3b2:	48 0f       	add	r20, r24
   1a3b4:	59 1f       	adc	r21, r25
   1a3b6:	ce 52       	subi	r28, 0x2E	; 46
   1a3b8:	df 4f       	sbci	r29, 0xFF	; 255
   1a3ba:	59 83       	std	Y+1, r21	; 0x01
   1a3bc:	48 83       	st	Y, r20
   1a3be:	c2 5d       	subi	r28, 0xD2	; 210
   1a3c0:	d0 40       	sbci	r29, 0x00	; 0
   1a3c2:	31 2c       	mov	r3, r1
   1a3c4:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1076
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   1a3c6:	82 14       	cp	r8, r2
   1a3c8:	08 f0       	brcs	.+2      	; 0x1a3cc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x220e>
   1a3ca:	11 c1       	rjmp	.+546    	; 0x1a5ee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2430>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   1a3cc:	c4 54       	subi	r28, 0x44	; 68
   1a3ce:	df 4f       	sbci	r29, 0xFF	; 255
   1a3d0:	e8 81       	ld	r30, Y
   1a3d2:	f9 81       	ldd	r31, Y+1	; 0x01
   1a3d4:	cc 5b       	subi	r28, 0xBC	; 188
   1a3d6:	d0 40       	sbci	r29, 0x00	; 0
   1a3d8:	84 91       	lpm	r24, Z
   1a3da:	81 11       	cpse	r24, r1
   1a3dc:	2f c0       	rjmp	.+94     	; 0x1a43c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x227e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1080
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   1a3de:	f6 01       	movw	r30, r12
   1a3e0:	85 91       	lpm	r24, Z+
   1a3e2:	94 91       	lpm	r25, Z
   1a3e4:	c8 54       	subi	r28, 0x48	; 72
   1a3e6:	df 4f       	sbci	r29, 0xFF	; 255
   1a3e8:	28 81       	ld	r18, Y
   1a3ea:	39 81       	ldd	r19, Y+1	; 0x01
   1a3ec:	c8 5b       	subi	r28, 0xB8	; 184
   1a3ee:	d0 40       	sbci	r29, 0x00	; 0
   1a3f0:	28 0f       	add	r18, r24
   1a3f2:	39 1f       	adc	r19, r25
   1a3f4:	c2 54       	subi	r28, 0x42	; 66
   1a3f6:	df 4f       	sbci	r29, 0xFF	; 255
   1a3f8:	39 83       	std	Y+1, r19	; 0x01
   1a3fa:	28 83       	st	Y, r18
   1a3fc:	ce 5b       	subi	r28, 0xBE	; 190
   1a3fe:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   1a400:	f5 01       	movw	r30, r10
   1a402:	85 91       	lpm	r24, Z+
   1a404:	94 91       	lpm	r25, Z
   1a406:	cc 53       	subi	r28, 0x3C	; 60
   1a408:	df 4f       	sbci	r29, 0xFF	; 255
   1a40a:	e8 81       	ld	r30, Y
   1a40c:	f9 81       	ldd	r31, Y+1	; 0x01
   1a40e:	c4 5c       	subi	r28, 0xC4	; 196
   1a410:	d0 40       	sbci	r29, 0x00	; 0
   1a412:	24 91       	lpm	r18, Z
   1a414:	c6 54       	subi	r28, 0x46	; 70
   1a416:	df 4f       	sbci	r29, 0xFF	; 255
   1a418:	48 81       	ld	r20, Y
   1a41a:	59 81       	ldd	r21, Y+1	; 0x01
   1a41c:	ca 5b       	subi	r28, 0xBA	; 186
   1a41e:	d0 40       	sbci	r29, 0x00	; 0
   1a420:	84 0f       	add	r24, r20
   1a422:	95 1f       	adc	r25, r21
   1a424:	bc 01       	movw	r22, r24
   1a426:	29 9d       	mul	r18, r9
   1a428:	60 0d       	add	r22, r0
   1a42a:	71 1d       	adc	r23, r1
   1a42c:	11 24       	eor	r1, r1
   1a42e:	c0 54       	subi	r28, 0x40	; 64
   1a430:	df 4f       	sbci	r29, 0xFF	; 255
   1a432:	79 83       	std	Y+1, r23	; 0x01
   1a434:	68 83       	st	Y, r22
   1a436:	c0 5c       	subi	r28, 0xC0	; 192
   1a438:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1082
          loop_t++;
   1a43a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   1a43c:	c4 54       	subi	r28, 0x44	; 68
   1a43e:	df 4f       	sbci	r29, 0xFF	; 255
   1a440:	e8 81       	ld	r30, Y
   1a442:	f9 81       	ldd	r31, Y+1	; 0x01
   1a444:	cc 5b       	subi	r28, 0xBC	; 188
   1a446:	d0 40       	sbci	r29, 0x00	; 0
   1a448:	84 91       	lpm	r24, Z
   1a44a:	81 30       	cpi	r24, 0x01	; 1
   1a44c:	79 f5       	brne	.+94     	; 0x1a4ac <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x22ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1086
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   1a44e:	f5 01       	movw	r30, r10
   1a450:	85 91       	lpm	r24, Z+
   1a452:	94 91       	lpm	r25, Z
   1a454:	c6 54       	subi	r28, 0x46	; 70
   1a456:	df 4f       	sbci	r29, 0xFF	; 255
   1a458:	28 81       	ld	r18, Y
   1a45a:	39 81       	ldd	r19, Y+1	; 0x01
   1a45c:	ca 5b       	subi	r28, 0xBA	; 186
   1a45e:	d0 40       	sbci	r29, 0x00	; 0
   1a460:	28 0f       	add	r18, r24
   1a462:	39 1f       	adc	r19, r25
   1a464:	c0 54       	subi	r28, 0x40	; 64
   1a466:	df 4f       	sbci	r29, 0xFF	; 255
   1a468:	39 83       	std	Y+1, r19	; 0x01
   1a46a:	28 83       	st	Y, r18
   1a46c:	c0 5c       	subi	r28, 0xC0	; 192
   1a46e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   1a470:	f6 01       	movw	r30, r12
   1a472:	85 91       	lpm	r24, Z+
   1a474:	94 91       	lpm	r25, Z
   1a476:	c5 53       	subi	r28, 0x35	; 53
   1a478:	df 4f       	sbci	r29, 0xFF	; 255
   1a47a:	e8 81       	ld	r30, Y
   1a47c:	f9 81       	ldd	r31, Y+1	; 0x01
   1a47e:	cb 5c       	subi	r28, 0xCB	; 203
   1a480:	d0 40       	sbci	r29, 0x00	; 0
   1a482:	24 91       	lpm	r18, Z
   1a484:	c8 54       	subi	r28, 0x48	; 72
   1a486:	df 4f       	sbci	r29, 0xFF	; 255
   1a488:	48 81       	ld	r20, Y
   1a48a:	59 81       	ldd	r21, Y+1	; 0x01
   1a48c:	c8 5b       	subi	r28, 0xB8	; 184
   1a48e:	d0 40       	sbci	r29, 0x00	; 0
   1a490:	84 0f       	add	r24, r20
   1a492:	95 1f       	adc	r25, r21
   1a494:	bc 01       	movw	r22, r24
   1a496:	29 9d       	mul	r18, r9
   1a498:	60 0d       	add	r22, r0
   1a49a:	71 1d       	adc	r23, r1
   1a49c:	11 24       	eor	r1, r1
   1a49e:	c2 54       	subi	r28, 0x42	; 66
   1a4a0:	df 4f       	sbci	r29, 0xFF	; 255
   1a4a2:	79 83       	std	Y+1, r23	; 0x01
   1a4a4:	68 83       	st	Y, r22
   1a4a6:	ce 5b       	subi	r28, 0xBE	; 190
   1a4a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1088
          loop_t++;
   1a4aa:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   1a4ac:	c4 54       	subi	r28, 0x44	; 68
   1a4ae:	df 4f       	sbci	r29, 0xFF	; 255
   1a4b0:	e8 81       	ld	r30, Y
   1a4b2:	f9 81       	ldd	r31, Y+1	; 0x01
   1a4b4:	cc 5b       	subi	r28, 0xBC	; 188
   1a4b6:	d0 40       	sbci	r29, 0x00	; 0
   1a4b8:	84 91       	lpm	r24, Z
   1a4ba:	82 30       	cpi	r24, 0x02	; 2
   1a4bc:	09 f0       	breq	.+2      	; 0x1a4c0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2302>
   1a4be:	46 c0       	rjmp	.+140    	; 0x1a54c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x238e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1092
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   1a4c0:	f6 01       	movw	r30, r12
   1a4c2:	85 91       	lpm	r24, Z+
   1a4c4:	94 91       	lpm	r25, Z
   1a4c6:	c5 53       	subi	r28, 0x35	; 53
   1a4c8:	df 4f       	sbci	r29, 0xFF	; 255
   1a4ca:	e8 81       	ld	r30, Y
   1a4cc:	f9 81       	ldd	r31, Y+1	; 0x01
   1a4ce:	cb 5c       	subi	r28, 0xCB	; 203
   1a4d0:	d0 40       	sbci	r29, 0x00	; 0
   1a4d2:	24 91       	lpm	r18, Z
   1a4d4:	c8 54       	subi	r28, 0x48	; 72
   1a4d6:	df 4f       	sbci	r29, 0xFF	; 255
   1a4d8:	48 81       	ld	r20, Y
   1a4da:	59 81       	ldd	r21, Y+1	; 0x01
   1a4dc:	c8 5b       	subi	r28, 0xB8	; 184
   1a4de:	d0 40       	sbci	r29, 0x00	; 0
   1a4e0:	84 0f       	add	r24, r20
   1a4e2:	95 1f       	adc	r25, r21
   1a4e4:	bc 01       	movw	r22, r24
   1a4e6:	29 9d       	mul	r18, r9
   1a4e8:	60 0d       	add	r22, r0
   1a4ea:	71 1d       	adc	r23, r1
   1a4ec:	11 24       	eor	r1, r1
   1a4ee:	c2 54       	subi	r28, 0x42	; 66
   1a4f0:	df 4f       	sbci	r29, 0xFF	; 255
   1a4f2:	79 83       	std	Y+1, r23	; 0x01
   1a4f4:	68 83       	st	Y, r22
   1a4f6:	ce 5b       	subi	r28, 0xBE	; 190
   1a4f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1093
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   1a4fa:	f5 01       	movw	r30, r10
   1a4fc:	85 91       	lpm	r24, Z+
   1a4fe:	94 91       	lpm	r25, Z
   1a500:	cc 53       	subi	r28, 0x3C	; 60
   1a502:	df 4f       	sbci	r29, 0xFF	; 255
   1a504:	e8 81       	ld	r30, Y
   1a506:	f9 81       	ldd	r31, Y+1	; 0x01
   1a508:	c4 5c       	subi	r28, 0xC4	; 196
   1a50a:	d0 40       	sbci	r29, 0x00	; 0
   1a50c:	24 91       	lpm	r18, Z
   1a50e:	c6 54       	subi	r28, 0x46	; 70
   1a510:	df 4f       	sbci	r29, 0xFF	; 255
   1a512:	48 81       	ld	r20, Y
   1a514:	59 81       	ldd	r21, Y+1	; 0x01
   1a516:	ca 5b       	subi	r28, 0xBA	; 186
   1a518:	d0 40       	sbci	r29, 0x00	; 0
   1a51a:	84 0f       	add	r24, r20
   1a51c:	95 1f       	adc	r25, r21
   1a51e:	bc 01       	movw	r22, r24
   1a520:	23 9d       	mul	r18, r3
   1a522:	60 0d       	add	r22, r0
   1a524:	71 1d       	adc	r23, r1
   1a526:	11 24       	eor	r1, r1
   1a528:	c0 54       	subi	r28, 0x40	; 64
   1a52a:	df 4f       	sbci	r29, 0xFF	; 255
   1a52c:	79 83       	std	Y+1, r23	; 0x01
   1a52e:	68 83       	st	Y, r22
   1a530:	c0 5c       	subi	r28, 0xC0	; 192
   1a532:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1094
          loop_t++;
   1a534:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
   1a536:	c3 53       	subi	r28, 0x33	; 51
   1a538:	df 4f       	sbci	r29, 0xFF	; 255
   1a53a:	e8 81       	ld	r30, Y
   1a53c:	f9 81       	ldd	r31, Y+1	; 0x01
   1a53e:	cd 5c       	subi	r28, 0xCD	; 205
   1a540:	d0 40       	sbci	r29, 0x00	; 0
   1a542:	84 91       	lpm	r24, Z
   1a544:	98 16       	cp	r9, r24
   1a546:	10 f0       	brcs	.+4      	; 0x1a54c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x238e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1098
          {
            loop_t = 0;
            loop_r++;
   1a548:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1097
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
   1a54a:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   1a54c:	c0 53       	subi	r28, 0x30	; 48
   1a54e:	df 4f       	sbci	r29, 0xFF	; 255
   1a550:	e8 81       	ld	r30, Y
   1a552:	f9 81       	ldd	r31, Y+1	; 0x01
   1a554:	c0 5d       	subi	r28, 0xD0	; 208
   1a556:	d0 40       	sbci	r29, 0x00	; 0
   1a558:	25 91       	lpm	r18, Z+
   1a55a:	34 91       	lpm	r19, Z
   1a55c:	ce 52       	subi	r28, 0x2E	; 46
   1a55e:	df 4f       	sbci	r29, 0xFF	; 255
   1a560:	e8 81       	ld	r30, Y
   1a562:	f9 81       	ldd	r31, Y+1	; 0x01
   1a564:	c2 5d       	subi	r28, 0xD2	; 210
   1a566:	d0 40       	sbci	r29, 0x00	; 0
   1a568:	45 91       	lpm	r20, Z+
   1a56a:	54 91       	lpm	r21, Z
   1a56c:	c7 53       	subi	r28, 0x37	; 55
   1a56e:	df 4f       	sbci	r29, 0xFF	; 255
   1a570:	e8 80       	ld	r14, Y
   1a572:	f9 80       	ldd	r15, Y+1	; 0x01
   1a574:	c9 5c       	subi	r28, 0xC9	; 201
   1a576:	d0 40       	sbci	r29, 0x00	; 0
   1a578:	c9 53       	subi	r28, 0x39	; 57
   1a57a:	df 4f       	sbci	r29, 0xFF	; 255
   1a57c:	08 81       	ld	r16, Y
   1a57e:	19 81       	ldd	r17, Y+1	; 0x01
   1a580:	c7 5c       	subi	r28, 0xC7	; 199
   1a582:	d0 40       	sbci	r29, 0x00	; 0
   1a584:	c0 54       	subi	r28, 0x40	; 64
   1a586:	df 4f       	sbci	r29, 0xFF	; 255
   1a588:	68 81       	ld	r22, Y
   1a58a:	79 81       	ldd	r23, Y+1	; 0x01
   1a58c:	c0 5c       	subi	r28, 0xC0	; 192
   1a58e:	d0 40       	sbci	r29, 0x00	; 0
   1a590:	c2 54       	subi	r28, 0x42	; 66
   1a592:	df 4f       	sbci	r29, 0xFF	; 255
   1a594:	88 81       	ld	r24, Y
   1a596:	99 81       	ldd	r25, Y+1	; 0x01
   1a598:	ce 5b       	subi	r28, 0xBE	; 190
   1a59a:	d0 40       	sbci	r29, 0x00	; 0
   1a59c:	0e 94 56 a4 	call	0x148ac	; 0x148ac <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1a5a0:	18 2f       	mov	r17, r24
   1a5a2:	81 e0       	ldi	r24, 0x01	; 1
   1a5a4:	88 0d       	add	r24, r8
   1a5a6:	11 23       	and	r17, r17
   1a5a8:	71 f1       	breq	.+92     	; 0x1a606 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2448>
   1a5aa:	ce 54       	subi	r28, 0x4E	; 78
   1a5ac:	df 4f       	sbci	r29, 0xFF	; 255
   1a5ae:	88 82       	st	Y, r8
   1a5b0:	c2 5b       	subi	r28, 0xB2	; 178
   1a5b2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1103
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
   1a5b4:	f2 01       	movw	r30, r4
   1a5b6:	e3 53       	subi	r30, 0x33	; 51
   1a5b8:	fd 4f       	sbci	r31, 0xFD	; 253
   1a5ba:	e6 0d       	add	r30, r6
   1a5bc:	f7 1d       	adc	r31, r7
   1a5be:	25 91       	lpm	r18, Z+
   1a5c0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1104
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   1a5c2:	ce 53       	subi	r28, 0x3E	; 62
   1a5c4:	df 4f       	sbci	r29, 0xFF	; 255
   1a5c6:	e8 81       	ld	r30, Y
   1a5c8:	f9 81       	ldd	r31, Y+1	; 0x01
   1a5ca:	c2 5c       	subi	r28, 0xC2	; 194
   1a5cc:	d0 40       	sbci	r29, 0x00	; 0
   1a5ce:	84 91       	lpm	r24, Z
   1a5d0:	cf 54       	subi	r28, 0x4F	; 79
   1a5d2:	df 4f       	sbci	r29, 0xFF	; 255
   1a5d4:	68 81       	ld	r22, Y
   1a5d6:	c1 5b       	subi	r28, 0xB1	; 177
   1a5d8:	d0 40       	sbci	r29, 0x00	; 0
   1a5da:	70 e0       	ldi	r23, 0x00	; 0
   1a5dc:	48 2d       	mov	r20, r8
   1a5de:	90 e0       	ldi	r25, 0x00	; 0
   1a5e0:	f9 01       	movw	r30, r18
   1a5e2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
          ret = true;
   1a5e4:	ca 53       	subi	r28, 0x3A	; 58
   1a5e6:	df 4f       	sbci	r29, 0xFF	; 255
   1a5e8:	18 83       	st	Y, r17
   1a5ea:	c6 5c       	subi	r28, 0xC6	; 198
   1a5ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1014
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   1a5ee:	ca 54       	subi	r28, 0x4A	; 74
   1a5f0:	df 4f       	sbci	r29, 0xFF	; 255
   1a5f2:	f8 81       	ld	r31, Y
   1a5f4:	c6 5b       	subi	r28, 0xB6	; 182
   1a5f6:	d0 40       	sbci	r29, 0x00	; 0
   1a5f8:	ff 5f       	subi	r31, 0xFF	; 255
   1a5fa:	ca 54       	subi	r28, 0x4A	; 74
   1a5fc:	df 4f       	sbci	r29, 0xFF	; 255
   1a5fe:	f8 83       	st	Y, r31
   1a600:	c6 5b       	subi	r28, 0xB6	; 182
   1a602:	d0 40       	sbci	r29, 0x00	; 0
   1a604:	b7 cb       	rjmp	.-2194   	; 0x19d74 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1bb6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   1a606:	88 2e       	mov	r8, r24
   1a608:	de ce       	rjmp	.-580    	; 0x1a3c6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2208>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1105
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
   1a60a:	21 e0       	ldi	r18, 0x01	; 1
   1a60c:	ca 53       	subi	r28, 0x3A	; 58
   1a60e:	df 4f       	sbci	r29, 0xFF	; 255
   1a610:	28 83       	st	Y, r18
   1a612:	c6 5c       	subi	r28, 0xC6	; 198
   1a614:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1116
  }


draw_menu_end:
  return ret;
}
   1a616:	ca 53       	subi	r28, 0x3A	; 58
   1a618:	df 4f       	sbci	r29, 0xFF	; 255
   1a61a:	88 81       	ld	r24, Y
   1a61c:	c6 5c       	subi	r28, 0xC6	; 198
   1a61e:	d0 40       	sbci	r29, 0x00	; 0
   1a620:	cd 51       	subi	r28, 0x1D	; 29
   1a622:	df 4f       	sbci	r29, 0xFF	; 255
   1a624:	0f b6       	in	r0, 0x3f	; 63
   1a626:	f8 94       	cli
   1a628:	de bf       	out	0x3e, r29	; 62
   1a62a:	0f be       	out	0x3f, r0	; 63
   1a62c:	cd bf       	out	0x3d, r28	; 61
   1a62e:	df 91       	pop	r29
   1a630:	cf 91       	pop	r28
   1a632:	1f 91       	pop	r17
   1a634:	0f 91       	pop	r16
   1a636:	ff 90       	pop	r15
   1a638:	ef 90       	pop	r14
   1a63a:	df 90       	pop	r13
   1a63c:	cf 90       	pop	r12
   1a63e:	bf 90       	pop	r11
   1a640:	af 90       	pop	r10
   1a642:	9f 90       	pop	r9
   1a644:	8f 90       	pop	r8
   1a646:	7f 90       	pop	r7
   1a648:	6f 90       	pop	r6
   1a64a:	5f 90       	pop	r5
   1a64c:	4f 90       	pop	r4
   1a64e:	3f 90       	pop	r3
   1a650:	2f 90       	pop	r2
   1a652:	08 95       	ret

0001a654 <log_error(PubSubClient*, char*) [clone .constprop.125]>:
_Z9log_errorP12PubSubClientPc.constprop.125():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:452
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   1a654:	0f 93       	push	r16
   1a656:	1f 93       	push	r17
   1a658:	cf 93       	push	r28
   1a65a:	df 93       	push	r29
   1a65c:	00 d0       	rcall	.+0      	; 0x1a65e <log_error(PubSubClient*, char*) [clone .constprop.125]+0xa>
   1a65e:	00 d0       	rcall	.+0      	; 0x1a660 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xc>
   1a660:	00 d0       	rcall	.+0      	; 0x1a662 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xe>
   1a662:	cd b7       	in	r28, 0x3d	; 61
   1a664:	de b7       	in	r29, 0x3e	; 62
   1a666:	8c 01       	movw	r16, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:455
{
  char topic[9];
  strcpy(topic, "log-app");
   1a668:	6f e8       	ldi	r22, 0x8F	; 143
   1a66a:	78 e0       	ldi	r23, 0x08	; 8
   1a66c:	ce 01       	movw	r24, r28
   1a66e:	01 96       	adiw	r24, 0x01	; 1
   1a670:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:456
  send_mqtt_general_payload(mqtt_client, topic, log);
   1a674:	a8 01       	movw	r20, r16
   1a676:	be 01       	movw	r22, r28
   1a678:	6f 5f       	subi	r22, 0xFF	; 255
   1a67a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a67c:	8b ec       	ldi	r24, 0xCB	; 203
   1a67e:	9f e0       	ldi	r25, 0x0F	; 15
   1a680:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:457
}
   1a684:	29 96       	adiw	r28, 0x09	; 9
   1a686:	0f b6       	in	r0, 0x3f	; 63
   1a688:	f8 94       	cli
   1a68a:	de bf       	out	0x3e, r29	; 62
   1a68c:	0f be       	out	0x3f, r0	; 63
   1a68e:	cd bf       	out	0x3d, r28	; 61
   1a690:	df 91       	pop	r29
   1a692:	cf 91       	pop	r28
   1a694:	1f 91       	pop	r17
   1a696:	0f 91       	pop	r16
   1a698:	08 95       	ret

0001a69a <RF24::csn(bool) [clone .constprop.111]>:
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:15
#include "RF24_config.h"
#include "RF24.h"

/****************************************************************************/

void RF24::csn(bool mode)
   1a69a:	cf 93       	push	r28
   1a69c:	df 93       	push	r29
setBitOrder():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:296

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
   1a69e:	9c b5       	in	r25, 0x2c	; 44
   1a6a0:	9f 7d       	andi	r25, 0xDF	; 223
   1a6a2:	9c bd       	out	0x2c, r25	; 44
setDataMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:301
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
   1a6a4:	9c b5       	in	r25, 0x2c	; 44
   1a6a6:	93 7f       	andi	r25, 0xF3	; 243
   1a6a8:	9c bd       	out	0x2c, r25	; 44
setClockDivider():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:306
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
   1a6aa:	9c b5       	in	r25, 0x2c	; 44
   1a6ac:	9c 7f       	andi	r25, 0xFC	; 252
   1a6ae:	9c bd       	out	0x2c, r25	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:307
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
   1a6b0:	9d b5       	in	r25, 0x2d	; 45
   1a6b2:	91 60       	ori	r25, 0x01	; 1
   1a6b4:	9d bd       	out	0x2d, r25	; 45
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:69
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
   1a6b6:	cd ea       	ldi	r28, 0xAD	; 173
   1a6b8:	df e0       	ldi	r29, 0x0F	; 15
   1a6ba:	68 2f       	mov	r22, r24
   1a6bc:	8a 81       	ldd	r24, Y+2	; 0x02
   1a6be:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	delayMicroseconds(csDelay);
   1a6c2:	8c 89       	ldd	r24, Y+20	; 0x14
   1a6c4:	9d 89       	ldd	r25, Y+21	; 0x15
/home/saric/Arduino/libraries/RF24/RF24.cpp:73
#endif

}
   1a6c6:	df 91       	pop	r29
   1a6c8:	cf 91       	pop	r28
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
	delayMicroseconds(csDelay);
   1a6ca:	0c 94 4c 64 	jmp	0xc898	; 0xc898 <delayMicroseconds>

0001a6ce <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>:
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:204
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
   1a6ce:	cf 93       	push	r28
   1a6d0:	df 93       	push	r29
   1a6d2:	c8 2f       	mov	r28, r24
   1a6d4:	d6 2f       	mov	r29, r22
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a6d6:	80 e0       	ldi	r24, 0x00	; 0
   1a6d8:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:223
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
   1a6dc:	8c 2f       	mov	r24, r28
   1a6de:	80 62       	ori	r24, 0x20	; 32
   1a6e0:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1a6e4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:224
  _SPI.transfer(value);
   1a6e6:	8d 2f       	mov	r24, r29
   1a6e8:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a6ec:	81 e0       	ldi	r24, 0x01	; 1
   1a6ee:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:230
  endTransaction();

  #endif

  return status;
}
   1a6f2:	8c 2f       	mov	r24, r28
   1a6f4:	df 91       	pop	r29
   1a6f6:	cf 91       	pop	r28
   1a6f8:	08 95       	ret

0001a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>:
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:141
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
   1a6fa:	cf 93       	push	r28
   1a6fc:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a6fe:	80 e0       	ldi	r24, 0x00	; 0
   1a700:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:161
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   1a704:	8c 2f       	mov	r24, r28
   1a706:	8f 71       	andi	r24, 0x1F	; 31
   1a708:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:162
  result = _SPI.transfer(0xff);
   1a70c:	8f ef       	ldi	r24, 0xFF	; 255
   1a70e:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1a712:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a714:	81 e0       	ldi	r24, 0x01	; 1
   1a716:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:168
  endTransaction();

  #endif

  return result;
}
   1a71a:	8c 2f       	mov	r24, r28
   1a71c:	cf 91       	pop	r28
   1a71e:	08 95       	ret

0001a720 <RF24::spiTrans(unsigned char) [clone .constprop.105]>:
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:350
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
   1a720:	cf 93       	push	r28
   1a722:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a724:	80 e0       	ldi	r24, 0x00	; 0
   1a726:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:355
uint8_t RF24::spiTrans(uint8_t cmd){

  uint8_t status;
  
  beginTransaction();
  status = _SPI.transfer( cmd );
   1a72a:	8c 2f       	mov	r24, r28
   1a72c:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1a730:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a732:	81 e0       	ldi	r24, 0x01	; 1
   1a734:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:359
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
   1a738:	8c 2f       	mov	r24, r28
   1a73a:	cf 91       	pop	r28
   1a73c:	08 95       	ret

0001a73e <PubSubClient::loop() [clone .constprop.95]>:
_ZN12PubSubClient4loopEv.constprop.95():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   1a73e:	3f 92       	push	r3
   1a740:	4f 92       	push	r4
   1a742:	5f 92       	push	r5
   1a744:	6f 92       	push	r6
   1a746:	7f 92       	push	r7
   1a748:	8f 92       	push	r8
   1a74a:	9f 92       	push	r9
   1a74c:	af 92       	push	r10
   1a74e:	bf 92       	push	r11
   1a750:	cf 92       	push	r12
   1a752:	df 92       	push	r13
   1a754:	ef 92       	push	r14
   1a756:	ff 92       	push	r15
   1a758:	0f 93       	push	r16
   1a75a:	1f 93       	push	r17
   1a75c:	cf 93       	push	r28
   1a75e:	df 93       	push	r29
   1a760:	1f 92       	push	r1
   1a762:	cd b7       	in	r28, 0x3d	; 61
   1a764:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1a766:	4d b6       	in	r4, 0x3d	; 61
   1a768:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   1a76a:	8b ec       	ldi	r24, 0xCB	; 203
   1a76c:	9f e0       	ldi	r25, 0x0F	; 15
   1a76e:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   1a772:	98 2e       	mov	r9, r24
   1a774:	88 23       	and	r24, r24
   1a776:	09 f4       	brne	.+2      	; 0x1a77a <PubSubClient::loop() [clone .constprop.95]+0x3c>
   1a778:	45 c0       	rjmp	.+138    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   1a77a:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1a77e:	6b 01       	movw	r12, r22
   1a780:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   1a782:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <mqtt_client+0x208>
   1a786:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <mqtt_client+0x209>
   1a78a:	a0 91 d5 11 	lds	r26, 0x11D5	; 0x8011d5 <mqtt_client+0x20a>
   1a78e:	b0 91 d6 11 	lds	r27, 0x11D6	; 0x8011d6 <mqtt_client+0x20b>
   1a792:	a7 01       	movw	r20, r14
   1a794:	96 01       	movw	r18, r12
   1a796:	28 1b       	sub	r18, r24
   1a798:	39 0b       	sbc	r19, r25
   1a79a:	4a 0b       	sbc	r20, r26
   1a79c:	5b 0b       	sbc	r21, r27
   1a79e:	da 01       	movw	r26, r20
   1a7a0:	c9 01       	movw	r24, r18
   1a7a2:	89 39       	cpi	r24, 0x99	; 153
   1a7a4:	9a 43       	sbci	r25, 0x3A	; 58
   1a7a6:	a1 05       	cpc	r26, r1
   1a7a8:	b1 05       	cpc	r27, r1
   1a7aa:	b0 f4       	brcc	.+44     	; 0x1a7d8 <PubSubClient::loop() [clone .constprop.95]+0x9a>
   1a7ac:	80 91 cf 11 	lds	r24, 0x11CF	; 0x8011cf <mqtt_client+0x204>
   1a7b0:	90 91 d0 11 	lds	r25, 0x11D0	; 0x8011d0 <mqtt_client+0x205>
   1a7b4:	a0 91 d1 11 	lds	r26, 0x11D1	; 0x8011d1 <mqtt_client+0x206>
   1a7b8:	b0 91 d2 11 	lds	r27, 0x11D2	; 0x8011d2 <mqtt_client+0x207>
   1a7bc:	a7 01       	movw	r20, r14
   1a7be:	96 01       	movw	r18, r12
   1a7c0:	28 1b       	sub	r18, r24
   1a7c2:	39 0b       	sbc	r19, r25
   1a7c4:	4a 0b       	sbc	r20, r26
   1a7c6:	5b 0b       	sbc	r21, r27
   1a7c8:	da 01       	movw	r26, r20
   1a7ca:	c9 01       	movw	r24, r18
   1a7cc:	89 39       	cpi	r24, 0x99	; 153
   1a7ce:	9a 43       	sbci	r25, 0x3A	; 58
   1a7d0:	a1 05       	cpc	r26, r1
   1a7d2:	b1 05       	cpc	r27, r1
   1a7d4:	08 f4       	brcc	.+2      	; 0x1a7d8 <PubSubClient::loop() [clone .constprop.95]+0x9a>
   1a7d6:	52 c0       	rjmp	.+164    	; 0x1a87c <PubSubClient::loop() [clone .constprop.95]+0x13e>
   1a7d8:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   1a7dc:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   1a7e0:	20 91 d7 11 	lds	r18, 0x11D7	; 0x8011d7 <mqtt_client+0x20c>
   1a7e4:	22 23       	and	r18, r18
   1a7e6:	39 f1       	breq	.+78     	; 0x1a836 <PubSubClient::loop() [clone .constprop.95]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1a7e8:	2c ef       	ldi	r18, 0xFC	; 252
   1a7ea:	3f ef       	ldi	r19, 0xFF	; 255
   1a7ec:	30 93 e7 11 	sts	0x11E7, r19	; 0x8011e7 <mqtt_client+0x21c>
   1a7f0:	20 93 e6 11 	sts	0x11E6, r18	; 0x8011e6 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1a7f4:	dc 01       	movw	r26, r24
   1a7f6:	ed 91       	ld	r30, X+
   1a7f8:	fc 91       	ld	r31, X
   1a7fa:	04 88       	ldd	r0, Z+20	; 0x14
   1a7fc:	f5 89       	ldd	r31, Z+21	; 0x15
   1a7fe:	e0 2d       	mov	r30, r0
   1a800:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   1a802:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1a804:	89 2d       	mov	r24, r9
   1a806:	0f b6       	in	r0, 0x3f	; 63
   1a808:	f8 94       	cli
   1a80a:	5e be       	out	0x3e, r5	; 62
   1a80c:	0f be       	out	0x3f, r0	; 63
   1a80e:	4d be       	out	0x3d, r4	; 61
   1a810:	0f 90       	pop	r0
   1a812:	df 91       	pop	r29
   1a814:	cf 91       	pop	r28
   1a816:	1f 91       	pop	r17
   1a818:	0f 91       	pop	r16
   1a81a:	ff 90       	pop	r15
   1a81c:	ef 90       	pop	r14
   1a81e:	df 90       	pop	r13
   1a820:	cf 90       	pop	r12
   1a822:	bf 90       	pop	r11
   1a824:	af 90       	pop	r10
   1a826:	9f 90       	pop	r9
   1a828:	8f 90       	pop	r8
   1a82a:	7f 90       	pop	r7
   1a82c:	6f 90       	pop	r6
   1a82e:	5f 90       	pop	r5
   1a830:	4f 90       	pop	r4
   1a832:	3f 90       	pop	r3
   1a834:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1a836:	20 ec       	ldi	r18, 0xC0	; 192
   1a838:	20 93 cd 0f 	sts	0x0FCD, r18	; 0x800fcd <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   1a83c:	10 92 ce 0f 	sts	0x0FCE, r1	; 0x800fce <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   1a840:	dc 01       	movw	r26, r24
   1a842:	ed 91       	ld	r30, X+
   1a844:	fc 91       	ld	r31, X
   1a846:	02 80       	ldd	r0, Z+2	; 0x02
   1a848:	f3 81       	ldd	r31, Z+3	; 0x03
   1a84a:	e0 2d       	mov	r30, r0
   1a84c:	42 e0       	ldi	r20, 0x02	; 2
   1a84e:	50 e0       	ldi	r21, 0x00	; 0
   1a850:	6d ec       	ldi	r22, 0xCD	; 205
   1a852:	7f e0       	ldi	r23, 0x0F	; 15
   1a854:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1a856:	c0 92 cf 11 	sts	0x11CF, r12	; 0x8011cf <mqtt_client+0x204>
   1a85a:	d0 92 d0 11 	sts	0x11D0, r13	; 0x8011d0 <mqtt_client+0x205>
   1a85e:	e0 92 d1 11 	sts	0x11D1, r14	; 0x8011d1 <mqtt_client+0x206>
   1a862:	f0 92 d2 11 	sts	0x11D2, r15	; 0x8011d2 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1a866:	c0 92 d3 11 	sts	0x11D3, r12	; 0x8011d3 <mqtt_client+0x208>
   1a86a:	d0 92 d4 11 	sts	0x11D4, r13	; 0x8011d4 <mqtt_client+0x209>
   1a86e:	e0 92 d5 11 	sts	0x11D5, r14	; 0x8011d5 <mqtt_client+0x20a>
   1a872:	f0 92 d6 11 	sts	0x11D6, r15	; 0x8011d6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1a876:	81 e0       	ldi	r24, 0x01	; 1
   1a878:	80 93 d7 11 	sts	0x11D7, r24	; 0x8011d7 <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   1a87c:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   1a880:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   1a884:	dc 01       	movw	r26, r24
   1a886:	ed 91       	ld	r30, X+
   1a888:	fc 91       	ld	r31, X
   1a88a:	00 84       	ldd	r0, Z+8	; 0x08
   1a88c:	f1 85       	ldd	r31, Z+9	; 0x09
   1a88e:	e0 2d       	mov	r30, r0
   1a890:	19 95       	eicall
   1a892:	89 2b       	or	r24, r25
   1a894:	09 f4       	brne	.+2      	; 0x1a898 <PubSubClient::loop() [clone .constprop.95]+0x15a>
   1a896:	b6 cf       	rjmp	.-148    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   1a898:	ce 01       	movw	r24, r28
   1a89a:	01 96       	adiw	r24, 0x01	; 1
   1a89c:	0e 94 8c bd 	call	0x17b18	; 0x17b18 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
   1a8a0:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   1a8a2:	89 2b       	or	r24, r25
   1a8a4:	09 f4       	brne	.+2      	; 0x1a8a8 <PubSubClient::loop() [clone .constprop.95]+0x16a>
   1a8a6:	ae cf       	rjmp	.-164    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   1a8a8:	c0 92 d3 11 	sts	0x11D3, r12	; 0x8011d3 <mqtt_client+0x208>
   1a8ac:	d0 92 d4 11 	sts	0x11D4, r13	; 0x8011d4 <mqtt_client+0x209>
   1a8b0:	e0 92 d5 11 	sts	0x11D5, r14	; 0x8011d5 <mqtt_client+0x20a>
   1a8b4:	f0 92 d6 11 	sts	0x11D6, r15	; 0x8011d6 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   1a8b8:	80 90 cd 0f 	lds	r8, 0x0FCD	; 0x800fcd <mqtt_client+0x2>
   1a8bc:	88 2d       	mov	r24, r8
   1a8be:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   1a8c0:	80 33       	cpi	r24, 0x30	; 48
   1a8c2:	09 f0       	breq	.+2      	; 0x1a8c6 <PubSubClient::loop() [clone .constprop.95]+0x188>
   1a8c4:	83 c0       	rjmp	.+262    	; 0x1a9cc <PubSubClient::loop() [clone .constprop.95]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   1a8c6:	a0 90 d8 11 	lds	r10, 0x11D8	; 0x8011d8 <mqtt_client+0x20d>
   1a8ca:	b0 90 d9 11 	lds	r11, 0x11D9	; 0x8011d9 <mqtt_client+0x20e>
   1a8ce:	a1 14       	cp	r10, r1
   1a8d0:	b1 04       	cpc	r11, r1
   1a8d2:	09 f4       	brne	.+2      	; 0x1a8d6 <PubSubClient::loop() [clone .constprop.95]+0x198>
   1a8d4:	97 cf       	rjmp	.-210    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   1a8d6:	6d b6       	in	r6, 0x3d	; 61
   1a8d8:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   1a8da:	69 81       	ldd	r22, Y+1	; 0x01
   1a8dc:	70 e0       	ldi	r23, 0x00	; 0
   1a8de:	fb 01       	movw	r30, r22
   1a8e0:	e5 53       	subi	r30, 0x35	; 53
   1a8e2:	f0 4f       	sbci	r31, 0xF0	; 240
   1a8e4:	23 81       	ldd	r18, Z+3	; 0x03
   1a8e6:	30 e0       	ldi	r19, 0x00	; 0
   1a8e8:	32 2f       	mov	r19, r18
   1a8ea:	22 27       	eor	r18, r18
   1a8ec:	84 81       	ldd	r24, Z+4	; 0x04
   1a8ee:	28 0f       	add	r18, r24
   1a8f0:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   1a8f2:	c9 01       	movw	r24, r18
   1a8f4:	01 96       	adiw	r24, 0x01	; 1
   1a8f6:	ed b7       	in	r30, 0x3d	; 61
   1a8f8:	fe b7       	in	r31, 0x3e	; 62
   1a8fa:	e8 1b       	sub	r30, r24
   1a8fc:	f9 0b       	sbc	r31, r25
   1a8fe:	0f b6       	in	r0, 0x3f	; 63
   1a900:	f8 94       	cli
   1a902:	fe bf       	out	0x3e, r31	; 62
   1a904:	0f be       	out	0x3f, r0	; 63
   1a906:	ed bf       	out	0x3d, r30	; 61
   1a908:	8d b7       	in	r24, 0x3d	; 61
   1a90a:	9e b7       	in	r25, 0x3e	; 62
   1a90c:	01 96       	adiw	r24, 0x01	; 1
   1a90e:	db 01       	movw	r26, r22
   1a910:	a0 53       	subi	r26, 0x30	; 48
   1a912:	b0 4f       	sbci	r27, 0xF0	; 240
   1a914:	fc 01       	movw	r30, r24
   1a916:	8c 01       	movw	r16, r24
   1a918:	02 0f       	add	r16, r18
   1a91a:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   1a91c:	e0 17       	cp	r30, r16
   1a91e:	f1 07       	cpc	r31, r17
   1a920:	19 f0       	breq	.+6      	; 0x1a928 <PubSubClient::loop() [clone .constprop.95]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   1a922:	3d 90       	ld	r3, X+
   1a924:	31 92       	st	Z+, r3
   1a926:	fa cf       	rjmp	.-12     	; 0x1a91c <PubSubClient::loop() [clone .constprop.95]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   1a928:	10 82       	st	Z, r1
   1a92a:	da 01       	movw	r26, r20
   1a92c:	a6 1b       	sub	r26, r22
   1a92e:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   1a930:	f8 2d       	mov	r31, r8
   1a932:	f6 70       	andi	r31, 0x06	; 6
   1a934:	8f 2e       	mov	r8, r31
   1a936:	42 e0       	ldi	r20, 0x02	; 2
   1a938:	f4 13       	cpse	r31, r20
   1a93a:	3c c0       	rjmp	.+120    	; 0x1a9b4 <PubSubClient::loop() [clone .constprop.95]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   1a93c:	62 0f       	add	r22, r18
   1a93e:	73 1f       	adc	r23, r19
   1a940:	fb 01       	movw	r30, r22
   1a942:	e5 53       	subi	r30, 0x35	; 53
   1a944:	f0 4f       	sbci	r31, 0xF0	; 240
   1a946:	45 81       	ldd	r20, Z+5	; 0x05
   1a948:	50 e0       	ldi	r21, 0x00	; 0
   1a94a:	54 2f       	mov	r21, r20
   1a94c:	44 27       	eor	r20, r20
   1a94e:	06 81       	ldd	r16, Z+6	; 0x06
   1a950:	04 0f       	add	r16, r20
   1a952:	15 2f       	mov	r17, r21
   1a954:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1a956:	ad 01       	movw	r20, r26
   1a958:	42 1b       	sub	r20, r18
   1a95a:	53 0b       	sbc	r21, r19
   1a95c:	45 50       	subi	r20, 0x05	; 5
   1a95e:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   1a960:	6e 52       	subi	r22, 0x2E	; 46
   1a962:	70 4f       	sbci	r23, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1a964:	f5 01       	movw	r30, r10
   1a966:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   1a968:	80 e4       	ldi	r24, 0x40	; 64
   1a96a:	80 93 cd 0f 	sts	0x0FCD, r24	; 0x800fcd <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   1a96e:	80 92 ce 0f 	sts	0x0FCE, r8	; 0x800fce <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   1a972:	10 93 cf 0f 	sts	0x0FCF, r17	; 0x800fcf <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1a976:	00 93 d0 0f 	sts	0x0FD0, r16	; 0x800fd0 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   1a97a:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   1a97e:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   1a982:	dc 01       	movw	r26, r24
   1a984:	ed 91       	ld	r30, X+
   1a986:	fc 91       	ld	r31, X
   1a988:	02 80       	ldd	r0, Z+2	; 0x02
   1a98a:	f3 81       	ldd	r31, Z+3	; 0x03
   1a98c:	e0 2d       	mov	r30, r0
   1a98e:	44 e0       	ldi	r20, 0x04	; 4
   1a990:	50 e0       	ldi	r21, 0x00	; 0
   1a992:	6d ec       	ldi	r22, 0xCD	; 205
   1a994:	7f e0       	ldi	r23, 0x0F	; 15
   1a996:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   1a998:	c0 92 cf 11 	sts	0x11CF, r12	; 0x8011cf <mqtt_client+0x204>
   1a99c:	d0 92 d0 11 	sts	0x11D0, r13	; 0x8011d0 <mqtt_client+0x205>
   1a9a0:	e0 92 d1 11 	sts	0x11D1, r14	; 0x8011d1 <mqtt_client+0x206>
   1a9a4:	f0 92 d2 11 	sts	0x11D2, r15	; 0x8011d2 <mqtt_client+0x207>
   1a9a8:	0f b6       	in	r0, 0x3f	; 63
   1a9aa:	f8 94       	cli
   1a9ac:	7e be       	out	0x3e, r7	; 62
   1a9ae:	0f be       	out	0x3f, r0	; 63
   1a9b0:	6d be       	out	0x3d, r6	; 61
   1a9b2:	28 cf       	rjmp	.-432    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   1a9b4:	ad 01       	movw	r20, r26
   1a9b6:	42 1b       	sub	r20, r18
   1a9b8:	53 0b       	sbc	r21, r19
   1a9ba:	43 50       	subi	r20, 0x03	; 3
   1a9bc:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   1a9be:	62 0f       	add	r22, r18
   1a9c0:	73 1f       	adc	r23, r19
   1a9c2:	60 53       	subi	r22, 0x30	; 48
   1a9c4:	70 4f       	sbci	r23, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   1a9c6:	f5 01       	movw	r30, r10
   1a9c8:	19 95       	eicall
   1a9ca:	ee cf       	rjmp	.-36     	; 0x1a9a8 <PubSubClient::loop() [clone .constprop.95]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   1a9cc:	80 3c       	cpi	r24, 0xC0	; 192
   1a9ce:	a9 f4       	brne	.+42     	; 0x1a9fa <PubSubClient::loop() [clone .constprop.95]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   1a9d0:	80 ed       	ldi	r24, 0xD0	; 208
   1a9d2:	80 93 cd 0f 	sts	0x0FCD, r24	; 0x800fcd <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   1a9d6:	10 92 ce 0f 	sts	0x0FCE, r1	; 0x800fce <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   1a9da:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <mqtt_client>
   1a9de:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <mqtt_client+0x1>
   1a9e2:	dc 01       	movw	r26, r24
   1a9e4:	ed 91       	ld	r30, X+
   1a9e6:	fc 91       	ld	r31, X
   1a9e8:	02 80       	ldd	r0, Z+2	; 0x02
   1a9ea:	f3 81       	ldd	r31, Z+3	; 0x03
   1a9ec:	e0 2d       	mov	r30, r0
   1a9ee:	42 e0       	ldi	r20, 0x02	; 2
   1a9f0:	50 e0       	ldi	r21, 0x00	; 0
   1a9f2:	6d ec       	ldi	r22, 0xCD	; 205
   1a9f4:	7f e0       	ldi	r23, 0x0F	; 15
   1a9f6:	19 95       	eicall
   1a9f8:	05 cf       	rjmp	.-502    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   1a9fa:	80 3d       	cpi	r24, 0xD0	; 208
   1a9fc:	09 f0       	breq	.+2      	; 0x1aa00 <PubSubClient::loop() [clone .constprop.95]+0x2c2>
   1a9fe:	02 cf       	rjmp	.-508    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   1aa00:	10 92 d7 11 	sts	0x11D7, r1	; 0x8011d7 <mqtt_client+0x20c>
   1aa04:	ff ce       	rjmp	.-514    	; 0x1a804 <PubSubClient::loop() [clone .constprop.95]+0xc6>

0001aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   1aa06:	cf 93       	push	r28
   1aa08:	c8 2f       	mov	r28, r24
   1aa0a:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   1aa0c:	61 e0       	ldi	r22, 0x01	; 1
   1aa0e:	70 e0       	ldi	r23, 0x00	; 0
   1aa10:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   1aa14:	61 e0       	ldi	r22, 0x01	; 1
   1aa16:	70 e0       	ldi	r23, 0x00	; 0
   1aa18:	8c 2f       	mov	r24, r28
   1aa1a:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   1aa1e:	81 11       	cpse	r24, r1
   1aa20:	f9 cf       	rjmp	.-14     	; 0x1aa14 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   1aa22:	cf 91       	pop	r28
   1aa24:	08 95       	ret

0001aa26 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>:
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   1aa26:	0f 93       	push	r16
   1aa28:	1f 93       	push	r17
   1aa2a:	cf 93       	push	r28
   1aa2c:	df 93       	push	r29
   1aa2e:	c8 2f       	mov	r28, r24
   1aa30:	d6 2f       	mov	r29, r22
   1aa32:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   1aa34:	0e 94 c0 84 	call	0x10980	; 0x10980 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   1aa38:	4d 2f       	mov	r20, r29
   1aa3a:	70 e0       	ldi	r23, 0x00	; 0
   1aa3c:	60 e0       	ldi	r22, 0x00	; 0
   1aa3e:	8c 2f       	mov	r24, r28
   1aa40:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   1aa44:	01 15       	cp	r16, r1
   1aa46:	11 05       	cpc	r17, r1
   1aa48:	b9 f0       	breq	.+46     	; 0x1aa78 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   1aa4a:	41 2f       	mov	r20, r17
   1aa4c:	64 e0       	ldi	r22, 0x04	; 4
   1aa4e:	70 e0       	ldi	r23, 0x00	; 0
   1aa50:	8c 2f       	mov	r24, r28
   1aa52:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1aa56:	40 2f       	mov	r20, r16
   1aa58:	65 e0       	ldi	r22, 0x05	; 5
   1aa5a:	70 e0       	ldi	r23, 0x00	; 0
   1aa5c:	8c 2f       	mov	r24, r28
   1aa5e:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   1aa62:	61 e0       	ldi	r22, 0x01	; 1
   1aa64:	70 e0       	ldi	r23, 0x00	; 0
   1aa66:	8c 2f       	mov	r24, r28
   1aa68:	0e 94 03 d5 	call	0x1aa06	; 0x1aa06 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   1aa6c:	81 e0       	ldi	r24, 0x01	; 1
   1aa6e:	df 91       	pop	r29
   1aa70:	cf 91       	pop	r28
   1aa72:	1f 91       	pop	r17
   1aa74:	0f 91       	pop	r16
   1aa76:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   1aa78:	00 91 1e 12 	lds	r16, 0x121E	; 0x80121e <local_port>
   1aa7c:	10 91 1f 12 	lds	r17, 0x121F	; 0x80121f <local_port+0x1>
   1aa80:	0f 5f       	subi	r16, 0xFF	; 255
   1aa82:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa84:	10 93 1f 12 	sts	0x121F, r17	; 0x80121f <local_port+0x1>
   1aa88:	00 93 1e 12 	sts	0x121E, r16	; 0x80121e <local_port>
   1aa8c:	de cf       	rjmp	.-68     	; 0x1aa4a <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x24>

0001aa8e <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   1aa8e:	8f 92       	push	r8
   1aa90:	9f 92       	push	r9
   1aa92:	af 92       	push	r10
   1aa94:	bf 92       	push	r11
   1aa96:	cf 92       	push	r12
   1aa98:	df 92       	push	r13
   1aa9a:	ef 92       	push	r14
   1aa9c:	ff 92       	push	r15
   1aa9e:	0f 93       	push	r16
   1aaa0:	1f 93       	push	r17
   1aaa2:	cf 93       	push	r28
   1aaa4:	5c 01       	movw	r10, r24
   1aaa6:	6b 01       	movw	r12, r22
   1aaa8:	7a 01       	movw	r14, r20
   1aaaa:	89 01       	movw	r16, r18
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   1aaac:	80 91 ac 0d 	lds	r24, 0x0DAC	; 0x800dac <Ethernet+0xc>
   1aab0:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   1aab4:	68 ee       	ldi	r22, 0xE8	; 232
   1aab6:	73 e0       	ldi	r23, 0x03	; 3
   1aab8:	80 e0       	ldi	r24, 0x00	; 0
   1aaba:	90 e0       	ldi	r25, 0x00	; 0
   1aabc:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   1aac0:	61 e0       	ldi	r22, 0x01	; 1
   1aac2:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <SPI_CS>
   1aac6:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   1aaca:	0e 94 09 8d 	call	0x11a12	; 0x11a12 <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1aace:	60 e0       	ldi	r22, 0x00	; 0
   1aad0:	90 e0       	ldi	r25, 0x00	; 0
   1aad2:	80 e0       	ldi	r24, 0x00	; 0
   1aad4:	0e 94 45 84 	call	0x1088a	; 0x1088a <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   1aad8:	48 2f       	mov	r20, r24
   1aada:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1aadc:	64 e0       	ldi	r22, 0x04	; 4
   1aade:	90 e0       	ldi	r25, 0x00	; 0
   1aae0:	80 e0       	ldi	r24, 0x00	; 0
   1aae2:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1aae6:	cc e0       	ldi	r28, 0x0C	; 12
   1aae8:	88 e0       	ldi	r24, 0x08	; 8
   1aaea:	88 2e       	mov	r8, r24
   1aaec:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1aaee:	42 e0       	ldi	r20, 0x02	; 2
   1aaf0:	6c 2f       	mov	r22, r28
   1aaf2:	8e e1       	ldi	r24, 0x1E	; 30
   1aaf4:	90 e0       	ldi	r25, 0x00	; 0
   1aaf6:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   1aafa:	42 e0       	ldi	r20, 0x02	; 2
   1aafc:	6c 2f       	mov	r22, r28
   1aafe:	8f e1       	ldi	r24, 0x1F	; 31
   1ab00:	90 e0       	ldi	r25, 0x00	; 0
   1ab02:	0e 94 96 84 	call	0x1092c	; 0x1092c <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1ab06:	81 e0       	ldi	r24, 0x01	; 1
   1ab08:	88 1a       	sub	r8, r24
   1ab0a:	91 08       	sbc	r9, r1
   1ab0c:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   1ab0e:	81 14       	cp	r8, r1
   1ab10:	91 04       	cpc	r9, r1
   1ab12:	69 f7       	brne	.-38     	; 0x1aaee <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]+0x60>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   1ab14:	26 e0       	ldi	r18, 0x06	; 6
   1ab16:	30 e0       	ldi	r19, 0x00	; 0
   1ab18:	45 eb       	ldi	r20, 0xB5	; 181
   1ab1a:	5d e0       	ldi	r21, 0x0D	; 13
   1ab1c:	64 e0       	ldi	r22, 0x04	; 4
   1ab1e:	89 e0       	ldi	r24, 0x09	; 9
   1ab20:	90 e0       	ldi	r25, 0x00	; 0
   1ab22:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1ab26:	a5 01       	movw	r20, r10
   1ab28:	4e 5f       	subi	r20, 0xFE	; 254
   1ab2a:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   1ab2c:	24 e0       	ldi	r18, 0x04	; 4
   1ab2e:	30 e0       	ldi	r19, 0x00	; 0
   1ab30:	64 e0       	ldi	r22, 0x04	; 4
   1ab32:	8f e0       	ldi	r24, 0x0F	; 15
   1ab34:	90 e0       	ldi	r25, 0x00	; 0
   1ab36:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   1ab3a:	a7 01       	movw	r20, r14
   1ab3c:	4e 5f       	subi	r20, 0xFE	; 254
   1ab3e:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   1ab40:	24 e0       	ldi	r18, 0x04	; 4
   1ab42:	30 e0       	ldi	r19, 0x00	; 0
   1ab44:	64 e0       	ldi	r22, 0x04	; 4
   1ab46:	81 e0       	ldi	r24, 0x01	; 1
   1ab48:	90 e0       	ldi	r25, 0x00	; 0
   1ab4a:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   1ab4e:	a8 01       	movw	r20, r16
   1ab50:	4e 5f       	subi	r20, 0xFE	; 254
   1ab52:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   1ab54:	24 e0       	ldi	r18, 0x04	; 4
   1ab56:	30 e0       	ldi	r19, 0x00	; 0
   1ab58:	64 e0       	ldi	r22, 0x04	; 4
   1ab5a:	85 e0       	ldi	r24, 0x05	; 5
   1ab5c:	90 e0       	ldi	r25, 0x00	; 0
   1ab5e:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1ab62:	f6 01       	movw	r30, r12
   1ab64:	82 81       	ldd	r24, Z+2	; 0x02
   1ab66:	93 81       	ldd	r25, Z+3	; 0x03
   1ab68:	a4 81       	ldd	r26, Z+4	; 0x04
   1ab6a:	b5 81       	ldd	r27, Z+5	; 0x05
   1ab6c:	80 93 a2 0d 	sts	0x0DA2, r24	; 0x800da2 <Ethernet+0x2>
   1ab70:	90 93 a3 0d 	sts	0x0DA3, r25	; 0x800da3 <Ethernet+0x3>
   1ab74:	a0 93 a4 0d 	sts	0x0DA4, r26	; 0x800da4 <Ethernet+0x4>
   1ab78:	b0 93 a5 0d 	sts	0x0DA5, r27	; 0x800da5 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   1ab7c:	cf 91       	pop	r28
   1ab7e:	1f 91       	pop	r17
   1ab80:	0f 91       	pop	r16
   1ab82:	ff 90       	pop	r15
   1ab84:	ef 90       	pop	r14
   1ab86:	df 90       	pop	r13
   1ab88:	cf 90       	pop	r12
   1ab8a:	bf 90       	pop	r11
   1ab8c:	af 90       	pop	r10
   1ab8e:	9f 90       	pop	r9
   1ab90:	8f 90       	pop	r8
   1ab92:	08 95       	ret

0001ab94 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>:
_ZN13LCDWIKI_TOUCH11TP_SetOnOffEh.constprop.85():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
uint8_t LCDWIKI_TOUCH::TP_GetBacklight(void)
{
return backlight;
}

void LCDWIKI_TOUCH::TP_SetOnOff(uint8_t mode)
   1ab94:	1f 93       	push	r17
   1ab96:	cf 93       	push	r28
   1ab98:	df 93       	push	r29
   1ab9a:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
{
onoff_mode = mode;
   1ab9c:	c2 e3       	ldi	r28, 0x32	; 50
   1ab9e:	df e0       	ldi	r29, 0x0F	; 15
   1aba0:	88 8b       	std	Y+16, r24	; 0x10
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:77
TCS_LOW;
   1aba2:	e9 89       	ldd	r30, Y+17	; 0x11
   1aba4:	fa 89       	ldd	r31, Y+18	; 0x12
   1aba6:	90 81       	ld	r25, Z
   1aba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1abaa:	80 95       	com	r24
   1abac:	89 23       	and	r24, r25
   1abae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:78
SDCS_LOW;
   1abb0:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1abb2:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1abb4:	90 81       	ld	r25, Z
   1abb6:	8a a1       	ldd	r24, Y+34	; 0x22
   1abb8:	80 95       	com	r24
   1abba:	89 23       	and	r24, r25
   1abbc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:79
delay_hus(200);
   1abbe:	68 ec       	ldi	r22, 0xC8	; 200
   1abc0:	70 e0       	ldi	r23, 0x00	; 0
   1abc2:	80 e0       	ldi	r24, 0x00	; 0
   1abc4:	90 e0       	ldi	r25, 0x00	; 0
   1abc6:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:80
TCS_HIGH;
   1abca:	e9 89       	ldd	r30, Y+17	; 0x11
   1abcc:	fa 89       	ldd	r31, Y+18	; 0x12
   1abce:	80 81       	ld	r24, Z
   1abd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1abd2:	89 2b       	or	r24, r25
   1abd4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:81
SDCS_HIGH;
   1abd6:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1abd8:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1abda:	80 81       	ld	r24, Z
   1abdc:	9a a1       	ldd	r25, Y+34	; 0x22
   1abde:	89 2b       	or	r24, r25
   1abe0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
TP_Write_Byte_LowSpeed(SET_ON_OFF);
   1abe2:	86 e5       	ldi	r24, 0x56	; 86
   1abe4:	0e 94 29 b7 	call	0x16e52	; 0x16e52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
TP_Write_Byte_LowSpeed(mode);
   1abe8:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84
}
   1abea:	df 91       	pop	r29
   1abec:	cf 91       	pop	r28
   1abee:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_ON_OFF);
TP_Write_Byte_LowSpeed(mode);
   1abf0:	0c 94 29 b7 	jmp	0x16e52	; 0x16e52 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

0001abf4 <EEPROM_CAT25::endCommand() [clone .constprop.80]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.80():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1abf4:	61 e0       	ldi	r22, 0x01	; 1
   1abf6:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <SROM+0xa>
   1abfa:	0c 94 d1 63 	jmp	0xc7a2	; 0xc7a2 <digitalWrite>

0001abfe <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   1abfe:	cf 93       	push	r28
   1ac00:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   1ac02:	60 e0       	ldi	r22, 0x00	; 0
   1ac04:	80 91 11 0e 	lds	r24, 0x0E11	; 0x800e11 <SROM+0xa>
   1ac08:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   1ac0c:	6c 2f       	mov	r22, r28
   1ac0e:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   1ac12:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   1ac16:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   1ac1a:	c2 50       	subi	r28, 0x02	; 2
   1ac1c:	c2 30       	cpi	r28, 0x02	; 2
   1ac1e:	a8 f5       	brcc	.+106    	; 0x1ac8a <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   1ac20:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <SROM+0x4>
   1ac24:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <SROM+0x5>
   1ac28:	a0 91 0d 0e 	lds	r26, 0x0E0D	; 0x800e0d <SROM+0x6>
   1ac2c:	b0 91 0e 0e 	lds	r27, 0x0E0E	; 0x800e0e <SROM+0x7>
   1ac30:	01 97       	sbiw	r24, 0x01	; 1
   1ac32:	a1 40       	sbci	r26, 0x01	; 1
   1ac34:	b1 05       	cpc	r27, r1
   1ac36:	38 f0       	brcs	.+14     	; 0x1ac46 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1ac38:	60 e0       	ldi	r22, 0x00	; 0
   1ac3a:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   1ac3e:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   1ac42:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1ac46:	80 91 0b 0e 	lds	r24, 0x0E0B	; 0x800e0b <SROM+0x4>
   1ac4a:	90 91 0c 0e 	lds	r25, 0x0E0C	; 0x800e0c <SROM+0x5>
   1ac4e:	a0 91 0d 0e 	lds	r26, 0x0E0D	; 0x800e0d <SROM+0x6>
   1ac52:	b0 91 0e 0e 	lds	r27, 0x0E0E	; 0x800e0e <SROM+0x7>
   1ac56:	81 30       	cpi	r24, 0x01	; 1
   1ac58:	91 40       	sbci	r25, 0x01	; 1
   1ac5a:	a1 05       	cpc	r26, r1
   1ac5c:	b1 05       	cpc	r27, r1
   1ac5e:	68 f0       	brcs	.+26     	; 0x1ac7a <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
   1ac60:	80 91 09 0e 	lds	r24, 0x0E09	; 0x800e09 <SROM+0x2>
   1ac64:	90 91 0a 0e 	lds	r25, 0x0E0A	; 0x800e0a <SROM+0x3>
   1ac68:	0b 97       	sbiw	r24, 0x0b	; 11
   1ac6a:	39 f0       	breq	.+14     	; 0x1ac7a <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   1ac6c:	60 e0       	ldi	r22, 0x00	; 0
   1ac6e:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   1ac72:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   1ac76:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1ac7a:	60 e0       	ldi	r22, 0x00	; 0
   1ac7c:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   1ac80:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1ac84:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1ac86:	0c 94 3f 8d 	jmp	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1ac8a:	cf 91       	pop	r28
   1ac8c:	08 95       	ret

0001ac8e <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.77():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   1ac8e:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   1ac90:	85 e0       	ldi	r24, 0x05	; 5
   1ac92:	0e 94 ff d5 	call	0x1abfe	; 0x1abfe <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1ac96:	6f ef       	ldi	r22, 0xFF	; 255
   1ac98:	80 91 07 0e 	lds	r24, 0x0E07	; 0x800e07 <SROM>
   1ac9c:	90 91 08 0e 	lds	r25, 0x0E08	; 0x800e08 <SROM+0x1>
   1aca0:	0e 94 3f 8d 	call	0x11a7e	; 0x11a7e <SoftSPIB::transfer(unsigned char)>
   1aca4:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   1aca6:	0e 94 fa d5 	call	0x1abf4	; 0x1abf4 <EEPROM_CAT25::endCommand() [clone .constprop.80]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   1acaa:	8c 2f       	mov	r24, r28
   1acac:	cf 91       	pop	r28
   1acae:	08 95       	ret

0001acb0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   1acb0:	0f 93       	push	r16
   1acb2:	1f 93       	push	r17
   1acb4:	cf 93       	push	r28
   1acb6:	df 93       	push	r29
   1acb8:	00 d0       	rcall	.+0      	; 0x1acba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xa>
   1acba:	00 d0       	rcall	.+0      	; 0x1acbc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xc>
   1acbc:	cd b7       	in	r28, 0x3d	; 61
   1acbe:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   1acc0:	48 2f       	mov	r20, r24
   1acc2:	43 70       	andi	r20, 0x03	; 3
   1acc4:	50 e0       	ldi	r21, 0x00	; 0
   1acc6:	50 93 6c 0f 	sts	0x0F6C, r21	; 0x800f6c <my_lcd+0x17>
   1acca:	40 93 6b 0f 	sts	0x0F6B, r20	; 0x800f6b <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   1acce:	28 2f       	mov	r18, r24
   1acd0:	21 70       	andi	r18, 0x01	; 1
   1acd2:	80 ff       	sbrs	r24, 0
   1acd4:	3d c1       	rjmp	.+634    	; 0x1af50 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2a0>
   1acd6:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <my_lcd+0x10>
   1acda:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <my_lcd+0x11>
   1acde:	90 93 68 0f 	sts	0x0F68, r25	; 0x800f68 <my_lcd+0x13>
   1ace2:	80 93 67 0f 	sts	0x0F67, r24	; 0x800f67 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   1ace6:	80 91 63 0f 	lds	r24, 0x0F63	; 0x800f63 <my_lcd+0xe>
   1acea:	90 91 64 0f 	lds	r25, 0x0F64	; 0x800f64 <my_lcd+0xf>
   1acee:	21 11       	cpse	r18, r1
   1acf0:	04 c0       	rjmp	.+8      	; 0x1acfa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4a>
   1acf2:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <my_lcd+0x10>
   1acf6:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <my_lcd+0x11>
   1acfa:	90 93 6a 0f 	sts	0x0F6A, r25	; 0x800f6a <my_lcd+0x15>
   1acfe:	80 93 69 0f 	sts	0x0F69, r24	; 0x800f69 <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   1ad02:	a0 91 83 0f 	lds	r26, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1ad06:	b0 91 84 0f 	lds	r27, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1ad0a:	8c 91       	ld	r24, X
   1ad0c:	90 91 8f 0f 	lds	r25, 0x0F8F	; 0x800f8f <my_lcd+0x3a>
   1ad10:	89 23       	and	r24, r25
   1ad12:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   1ad14:	40 91 6d 0f 	lds	r20, 0x0F6D	; 0x800f6d <my_lcd+0x18>
   1ad18:	50 91 6e 0f 	lds	r21, 0x0F6E	; 0x800f6e <my_lcd+0x19>
   1ad1c:	80 91 6b 0f 	lds	r24, 0x0F6B	; 0x800f6b <my_lcd+0x16>
   1ad20:	90 91 6c 0f 	lds	r25, 0x0F6C	; 0x800f6c <my_lcd+0x17>
   1ad24:	a0 91 85 0f 	lds	r26, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1ad28:	b0 91 86 0f 	lds	r27, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1ad2c:	20 91 90 0f 	lds	r18, 0x0F90	; 0x800f90 <my_lcd+0x3b>
   1ad30:	41 15       	cp	r20, r1
   1ad32:	51 05       	cpc	r21, r1
   1ad34:	09 f0       	breq	.+2      	; 0x1ad38 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x88>
   1ad36:	13 c1       	rjmp	.+550    	; 0x1af5e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2ae>
   1ad38:	01 97       	sbiw	r24, 0x01	; 1
   1ad3a:	83 30       	cpi	r24, 0x03	; 3
   1ad3c:	91 05       	cpc	r25, r1
   1ad3e:	08 f0       	brcs	.+2      	; 0x1ad42 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x92>
   1ad40:	0c c1       	rjmp	.+536    	; 0x1af5a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2aa>
   1ad42:	88 0f       	add	r24, r24
   1ad44:	99 1f       	adc	r25, r25
   1ad46:	fc 01       	movw	r30, r24
   1ad48:	ee 5a       	subi	r30, 0xAE	; 174
   1ad4a:	fd 4f       	sbci	r31, 0xFD	; 253
   1ad4c:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   1ad4e:	30 91 7d 0f 	lds	r19, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1ad52:	40 91 7e 0f 	lds	r20, 0x0F7E	; 0x800f7e <my_lcd+0x29>
   1ad56:	8c 91       	ld	r24, X
   1ad58:	28 23       	and	r18, r24
   1ad5a:	2c 93       	st	X, r18
   1ad5c:	42 b9       	out	0x02, r20	; 2
   1ad5e:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ad62:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ad66:	80 81       	ld	r24, Z
   1ad68:	20 91 91 0f 	lds	r18, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1ad6c:	82 23       	and	r24, r18
   1ad6e:	80 83       	st	Z, r24
   1ad70:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ad74:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ad78:	80 81       	ld	r24, Z
   1ad7a:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1ad7e:	82 2b       	or	r24, r18
   1ad80:	80 83       	st	Z, r24
   1ad82:	32 b9       	out	0x02, r19	; 2
   1ad84:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ad88:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ad8c:	80 81       	ld	r24, Z
   1ad8e:	20 91 91 0f 	lds	r18, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1ad92:	82 23       	and	r24, r18
   1ad94:	80 83       	st	Z, r24
   1ad96:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ad9a:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ad9e:	80 81       	ld	r24, Z
   1ada0:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1ada4:	82 2b       	or	r24, r18
   1ada6:	80 83       	st	Z, r24
   1ada8:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1adac:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1adb0:	80 81       	ld	r24, Z
   1adb2:	20 91 8c 0f 	lds	r18, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1adb6:	82 2b       	or	r24, r18
   1adb8:	80 83       	st	Z, r24
   1adba:	80 e1       	ldi	r24, 0x10	; 16
   1adbc:	82 b9       	out	0x02, r24	; 2
   1adbe:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1adc2:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1adc6:	80 81       	ld	r24, Z
   1adc8:	20 91 91 0f 	lds	r18, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1adcc:	82 23       	and	r24, r18
   1adce:	80 83       	st	Z, r24
   1add0:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1add4:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1add8:	80 81       	ld	r24, Z
   1adda:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1adde:	82 2b       	or	r24, r18
   1ade0:	80 83       	st	Z, r24
   1ade2:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1ade4:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ade8:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1adec:	80 81       	ld	r24, Z
   1adee:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1adf2:	89 23       	and	r24, r25
   1adf4:	80 83       	st	Z, r24
   1adf6:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1adfa:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1adfe:	80 81       	ld	r24, Z
   1ae00:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1ae04:	89 2b       	or	r24, r25
   1ae06:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   1ae08:	00 91 69 0f 	lds	r16, 0x0F69	; 0x800f69 <my_lcd+0x14>
   1ae0c:	10 91 6a 0f 	lds	r17, 0x0F6A	; 0x800f6a <my_lcd+0x15>
   1ae10:	01 50       	subi	r16, 0x01	; 1
   1ae12:	11 09       	sbc	r17, r1
   1ae14:	20 91 67 0f 	lds	r18, 0x0F67	; 0x800f67 <my_lcd+0x12>
   1ae18:	30 91 68 0f 	lds	r19, 0x0F68	; 0x800f68 <my_lcd+0x13>
   1ae1c:	21 50       	subi	r18, 0x01	; 1
   1ae1e:	31 09       	sbc	r19, r1
   1ae20:	50 e0       	ldi	r21, 0x00	; 0
   1ae22:	40 e0       	ldi	r20, 0x00	; 0
   1ae24:	70 e0       	ldi	r23, 0x00	; 0
   1ae26:	60 e0       	ldi	r22, 0x00	; 0
   1ae28:	85 e5       	ldi	r24, 0x55	; 85
   1ae2a:	9f e0       	ldi	r25, 0x0F	; 15
   1ae2c:	0e 94 97 8e 	call	0x11d2e	; 0x11d2e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   1ae30:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <my_lcd+0x18>
   1ae34:	90 91 6e 0f 	lds	r25, 0x0F6E	; 0x800f6e <my_lcd+0x19>
   1ae38:	89 2b       	or	r24, r25
   1ae3a:	09 f0       	breq	.+2      	; 0x1ae3e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x18e>
   1ae3c:	9e c1       	rjmp	.+828    	; 0x1b17a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   1ae3e:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1ae42:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1ae46:	80 81       	ld	r24, Z
   1ae48:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <my_lcd+0x3b>
   1ae4c:	89 23       	and	r24, r25
   1ae4e:	80 83       	st	Z, r24
   1ae50:	80 91 79 0f 	lds	r24, 0x0F79	; 0x800f79 <my_lcd+0x24>
   1ae54:	82 b9       	out	0x02, r24	; 2
   1ae56:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ae5a:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ae5e:	80 81       	ld	r24, Z
   1ae60:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1ae64:	89 23       	and	r24, r25
   1ae66:	80 83       	st	Z, r24
   1ae68:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ae6c:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ae70:	80 81       	ld	r24, Z
   1ae72:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1ae76:	89 2b       	or	r24, r25
   1ae78:	80 83       	st	Z, r24
   1ae7a:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1ae7e:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1ae82:	80 81       	ld	r24, Z
   1ae84:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1ae88:	89 2b       	or	r24, r25
   1ae8a:	80 83       	st	Z, r24
   1ae8c:	83 e0       	ldi	r24, 0x03	; 3
   1ae8e:	82 b9       	out	0x02, r24	; 2
   1ae90:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1ae94:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1ae98:	80 81       	ld	r24, Z
   1ae9a:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1ae9e:	89 23       	and	r24, r25
   1aea0:	80 83       	st	Z, r24
   1aea2:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1aea6:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1aeaa:	80 81       	ld	r24, Z
   1aeac:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1aeb0:	89 2b       	or	r24, r25
   1aeb2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   1aeb4:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1aeb8:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1aebc:	80 81       	ld	r24, Z
   1aebe:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <my_lcd+0x3b>
   1aec2:	89 23       	and	r24, r25
   1aec4:	80 83       	st	Z, r24
   1aec6:	80 91 7b 0f 	lds	r24, 0x0F7B	; 0x800f7b <my_lcd+0x26>
   1aeca:	82 b9       	out	0x02, r24	; 2
   1aecc:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1aed0:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1aed4:	80 81       	ld	r24, Z
   1aed6:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1aeda:	89 23       	and	r24, r25
   1aedc:	80 83       	st	Z, r24
   1aede:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1aee2:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1aee6:	80 81       	ld	r24, Z
   1aee8:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1aeec:	89 2b       	or	r24, r25
   1aeee:	80 83       	st	Z, r24
   1aef0:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1aef4:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1aef8:	80 81       	ld	r24, Z
   1aefa:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1aefe:	89 2b       	or	r24, r25
   1af00:	80 83       	st	Z, r24
   1af02:	12 b8       	out	0x02, r1	; 2
   1af04:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1af08:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1af0c:	80 81       	ld	r24, Z
   1af0e:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1af12:	89 23       	and	r24, r25
   1af14:	80 83       	st	Z, r24
   1af16:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1af1a:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1af1e:	80 81       	ld	r24, Z
   1af20:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1af24:	89 2b       	or	r24, r25
   1af26:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   1af28:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1af2c:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1af30:	80 81       	ld	r24, Z
   1af32:	90 91 8b 0f 	lds	r25, 0x0F8B	; 0x800f8b <my_lcd+0x36>
   1af36:	89 2b       	or	r24, r25
   1af38:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   1af3a:	26 96       	adiw	r28, 0x06	; 6
   1af3c:	0f b6       	in	r0, 0x3f	; 63
   1af3e:	f8 94       	cli
   1af40:	de bf       	out	0x3e, r29	; 62
   1af42:	0f be       	out	0x3f, r0	; 63
   1af44:	cd bf       	out	0x3d, r28	; 61
   1af46:	df 91       	pop	r29
   1af48:	cf 91       	pop	r28
   1af4a:	1f 91       	pop	r17
   1af4c:	0f 91       	pop	r16
   1af4e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   1af50:	80 91 63 0f 	lds	r24, 0x0F63	; 0x800f63 <my_lcd+0xe>
   1af54:	90 91 64 0f 	lds	r25, 0x0F64	; 0x800f64 <my_lcd+0xf>
   1af58:	c2 ce       	rjmp	.-636    	; 0x1acde <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   1af5a:	90 e3       	ldi	r25, 0x30	; 48
   1af5c:	f8 ce       	rjmp	.-528    	; 0x1ad4e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   1af5e:	46 30       	cpi	r20, 0x06	; 6
   1af60:	51 05       	cpc	r21, r1
   1af62:	99 f5       	brne	.+102    	; 0x1afca <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   1af64:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1af66:	81 30       	cpi	r24, 0x01	; 1
   1af68:	91 05       	cpc	r25, r1
   1af6a:	51 f0       	breq	.+20     	; 0x1af80 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   1af6c:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1af6e:	81 30       	cpi	r24, 0x01	; 1
   1af70:	91 05       	cpc	r25, r1
   1af72:	30 f0       	brcs	.+12     	; 0x1af80 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   1af74:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1af76:	82 30       	cpi	r24, 0x02	; 2
   1af78:	91 05       	cpc	r25, r1
   1af7a:	11 f0       	breq	.+4      	; 0x1af80 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
   1af7c:	03 97       	sbiw	r24, 0x03	; 3
   1af7e:	19 f1       	breq	.+70     	; 0x1afc6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   1af80:	8c 91       	ld	r24, X
   1af82:	28 23       	and	r18, r24
   1af84:	2c 93       	st	X, r18
   1af86:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1af8a:	82 b9       	out	0x02, r24	; 2
   1af8c:	a0 91 87 0f 	lds	r26, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1af90:	b0 91 88 0f 	lds	r27, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1af94:	8c 91       	ld	r24, X
   1af96:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1af9a:	89 23       	and	r24, r25
   1af9c:	8c 93       	st	X, r24
   1af9e:	a0 91 87 0f 	lds	r26, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1afa2:	b0 91 88 0f 	lds	r27, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1afa6:	8c 91       	ld	r24, X
   1afa8:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1afac:	89 2b       	or	r24, r25
   1afae:	8c 93       	st	X, r24
   1afb0:	a0 91 85 0f 	lds	r26, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1afb4:	b0 91 86 0f 	lds	r27, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1afb8:	8c 91       	ld	r24, X
   1afba:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1afbe:	89 2b       	or	r24, r25
   1afc0:	8c 93       	st	X, r24
   1afc2:	f2 b9       	out	0x02, r31	; 2
   1afc4:	0f cf       	rjmp	.-482    	; 0x1ade4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   1afc6:	f0 e6       	ldi	r31, 0x60	; 96
   1afc8:	db cf       	rjmp	.-74     	; 0x1af80 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   1afca:	48 30       	cpi	r20, 0x08	; 8
   1afcc:	51 05       	cpc	r21, r1
   1afce:	99 f5       	brne	.+102    	; 0x1b036 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   1afd0:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1afd2:	81 30       	cpi	r24, 0x01	; 1
   1afd4:	91 05       	cpc	r25, r1
   1afd6:	51 f0       	breq	.+20     	; 0x1afec <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   1afd8:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1afda:	81 30       	cpi	r24, 0x01	; 1
   1afdc:	91 05       	cpc	r25, r1
   1afde:	30 f0       	brcs	.+12     	; 0x1afec <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   1afe0:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1afe2:	82 30       	cpi	r24, 0x02	; 2
   1afe4:	91 05       	cpc	r25, r1
   1afe6:	11 f0       	breq	.+4      	; 0x1afec <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
   1afe8:	03 97       	sbiw	r24, 0x03	; 3
   1afea:	19 f1       	breq	.+70     	; 0x1b032 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1afec:	8c 91       	ld	r24, X
   1afee:	28 23       	and	r18, r24
   1aff0:	2c 93       	st	X, r18
   1aff2:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1aff6:	82 b9       	out	0x02, r24	; 2
   1aff8:	a0 91 87 0f 	lds	r26, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1affc:	b0 91 88 0f 	lds	r27, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b000:	8c 91       	ld	r24, X
   1b002:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b006:	89 23       	and	r24, r25
   1b008:	8c 93       	st	X, r24
   1b00a:	a0 91 87 0f 	lds	r26, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b00e:	b0 91 88 0f 	lds	r27, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b012:	8c 91       	ld	r24, X
   1b014:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b018:	89 2b       	or	r24, r25
   1b01a:	8c 93       	st	X, r24
   1b01c:	a0 91 85 0f 	lds	r26, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b020:	b0 91 86 0f 	lds	r27, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b024:	8c 91       	ld	r24, X
   1b026:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1b02a:	89 2b       	or	r24, r25
   1b02c:	8c 93       	st	X, r24
   1b02e:	e2 b9       	out	0x02, r30	; 2
   1b030:	d9 ce       	rjmp	.-590    	; 0x1ade4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   1b032:	e8 e2       	ldi	r30, 0x28	; 40
   1b034:	db cf       	rjmp	.-74     	; 0x1afec <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   1b036:	45 30       	cpi	r20, 0x05	; 5
   1b038:	51 05       	cpc	r21, r1
   1b03a:	a1 f5       	brne	.+104    	; 0x1b0a4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   1b03c:	81 30       	cpi	r24, 0x01	; 1
   1b03e:	91 05       	cpc	r25, r1
   1b040:	49 f1       	breq	.+82     	; 0x1b094 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e4>
   1b042:	70 f1       	brcs	.+92     	; 0x1b0a0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f0>
   1b044:	82 30       	cpi	r24, 0x02	; 2
   1b046:	91 05       	cpc	r25, r1
   1b048:	39 f1       	breq	.+78     	; 0x1b098 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e8>
   1b04a:	03 97       	sbiw	r24, 0x03	; 3
   1b04c:	39 f1       	breq	.+78     	; 0x1b09c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1b04e:	8c 91       	ld	r24, X
   1b050:	28 23       	and	r18, r24
   1b052:	2c 93       	st	X, r18
   1b054:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1b058:	82 b9       	out	0x02, r24	; 2
   1b05a:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b05e:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b062:	80 81       	ld	r24, Z
   1b064:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b068:	89 23       	and	r24, r25
   1b06a:	80 83       	st	Z, r24
   1b06c:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b070:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b074:	80 81       	ld	r24, Z
   1b076:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b07a:	89 2b       	or	r24, r25
   1b07c:	80 83       	st	Z, r24
   1b07e:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b082:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b086:	80 81       	ld	r24, Z
   1b088:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1b08c:	89 2b       	or	r24, r25
   1b08e:	80 83       	st	Z, r24
   1b090:	72 b9       	out	0x02, r23	; 2
   1b092:	a8 ce       	rjmp	.-688    	; 0x1ade4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   1b094:	78 e7       	ldi	r23, 0x78	; 120
   1b096:	db cf       	rjmp	.-74     	; 0x1b04e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   1b098:	78 ec       	ldi	r23, 0xC8	; 200
   1b09a:	d9 cf       	rjmp	.-78     	; 0x1b04e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1b09c:	78 ea       	ldi	r23, 0xA8	; 168
   1b09e:	d7 cf       	rjmp	.-82     	; 0x1b04e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   1b0a0:	78 e0       	ldi	r23, 0x08	; 8
   1b0a2:	d5 cf       	rjmp	.-86     	; 0x1b04e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   1b0a4:	47 30       	cpi	r20, 0x07	; 7
   1b0a6:	51 05       	cpc	r21, r1
   1b0a8:	a1 f5       	brne	.+104    	; 0x1b112 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   1b0aa:	81 30       	cpi	r24, 0x01	; 1
   1b0ac:	91 05       	cpc	r25, r1
   1b0ae:	49 f1       	breq	.+82     	; 0x1b102 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x452>
   1b0b0:	70 f1       	brcs	.+92     	; 0x1b10e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45e>
   1b0b2:	82 30       	cpi	r24, 0x02	; 2
   1b0b4:	91 05       	cpc	r25, r1
   1b0b6:	39 f1       	breq	.+78     	; 0x1b106 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x456>
   1b0b8:	03 97       	sbiw	r24, 0x03	; 3
   1b0ba:	39 f1       	breq	.+78     	; 0x1b10a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1b0bc:	8c 91       	ld	r24, X
   1b0be:	28 23       	and	r18, r24
   1b0c0:	2c 93       	st	X, r18
   1b0c2:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1b0c6:	82 b9       	out	0x02, r24	; 2
   1b0c8:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b0cc:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b0d0:	80 81       	ld	r24, Z
   1b0d2:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b0d6:	89 23       	and	r24, r25
   1b0d8:	80 83       	st	Z, r24
   1b0da:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b0de:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b0e2:	80 81       	ld	r24, Z
   1b0e4:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b0e8:	89 2b       	or	r24, r25
   1b0ea:	80 83       	st	Z, r24
   1b0ec:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b0f0:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b0f4:	80 81       	ld	r24, Z
   1b0f6:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1b0fa:	89 2b       	or	r24, r25
   1b0fc:	80 83       	st	Z, r24
   1b0fe:	62 b9       	out	0x02, r22	; 2
   1b100:	71 ce       	rjmp	.-798    	; 0x1ade4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   1b102:	68 ea       	ldi	r22, 0xA8	; 168
   1b104:	db cf       	rjmp	.-74     	; 0x1b0bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   1b106:	68 e1       	ldi	r22, 0x18	; 24
   1b108:	d9 cf       	rjmp	.-78     	; 0x1b0bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1b10a:	68 e7       	ldi	r22, 0x78	; 120
   1b10c:	d7 cf       	rjmp	.-82     	; 0x1b0bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   1b10e:	68 ec       	ldi	r22, 0xC8	; 200
   1b110:	d5 cf       	rjmp	.-86     	; 0x1b0bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   1b112:	81 30       	cpi	r24, 0x01	; 1
   1b114:	91 05       	cpc	r25, r1
   1b116:	49 f1       	breq	.+82     	; 0x1b16a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ba>
   1b118:	70 f1       	brcs	.+92     	; 0x1b176 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c6>
   1b11a:	82 30       	cpi	r24, 0x02	; 2
   1b11c:	91 05       	cpc	r25, r1
   1b11e:	39 f1       	breq	.+78     	; 0x1b16e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4be>
   1b120:	03 97       	sbiw	r24, 0x03	; 3
   1b122:	39 f1       	breq	.+78     	; 0x1b172 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1b124:	8c 91       	ld	r24, X
   1b126:	28 23       	and	r18, r24
   1b128:	2c 93       	st	X, r18
   1b12a:	80 91 7d 0f 	lds	r24, 0x0F7D	; 0x800f7d <my_lcd+0x28>
   1b12e:	82 b9       	out	0x02, r24	; 2
   1b130:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b134:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b138:	80 81       	ld	r24, Z
   1b13a:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b13e:	89 23       	and	r24, r25
   1b140:	80 83       	st	Z, r24
   1b142:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b146:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b14a:	80 81       	ld	r24, Z
   1b14c:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b150:	89 2b       	or	r24, r25
   1b152:	80 83       	st	Z, r24
   1b154:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b158:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b15c:	80 81       	ld	r24, Z
   1b15e:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1b162:	89 2b       	or	r24, r25
   1b164:	80 83       	st	Z, r24
   1b166:	32 b9       	out	0x02, r19	; 2
   1b168:	3d ce       	rjmp	.-902    	; 0x1ade4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   1b16a:	38 e2       	ldi	r19, 0x28	; 40
   1b16c:	db cf       	rjmp	.-74     	; 0x1b124 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   1b16e:	38 e9       	ldi	r19, 0x98	; 152
   1b170:	d9 cf       	rjmp	.-78     	; 0x1b124 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1b172:	38 ef       	ldi	r19, 0xF8	; 248
   1b174:	d7 cf       	rjmp	.-82     	; 0x1b124 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   1b176:	38 e4       	ldi	r19, 0x48	; 72
   1b178:	d5 cf       	rjmp	.-86     	; 0x1b124 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   1b17a:	80 91 65 0f 	lds	r24, 0x0F65	; 0x800f65 <my_lcd+0x10>
   1b17e:	90 91 66 0f 	lds	r25, 0x0F66	; 0x800f66 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   1b182:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   1b184:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   1b186:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   1b188:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   1b18a:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   1b18c:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   1b18e:	60 91 79 0f 	lds	r22, 0x0F79	; 0x800f79 <my_lcd+0x24>
   1b192:	70 91 7a 0f 	lds	r23, 0x0F7A	; 0x800f7a <my_lcd+0x25>
   1b196:	26 e0       	ldi	r18, 0x06	; 6
   1b198:	ae 01       	movw	r20, r28
   1b19a:	4f 5f       	subi	r20, 0xFF	; 255
   1b19c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b19e:	85 e5       	ldi	r24, 0x55	; 85
   1b1a0:	9f e0       	ldi	r25, 0x0F	; 15
   1b1a2:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   1b1a6:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   1b1a8:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   1b1aa:	60 91 7b 0f 	lds	r22, 0x0F7B	; 0x800f7b <my_lcd+0x26>
   1b1ae:	70 91 7c 0f 	lds	r23, 0x0F7C	; 0x800f7c <my_lcd+0x27>
   1b1b2:	22 e0       	ldi	r18, 0x02	; 2
   1b1b4:	ae 01       	movw	r20, r28
   1b1b6:	4f 5f       	subi	r20, 0xFF	; 255
   1b1b8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1ba:	85 e5       	ldi	r24, 0x55	; 85
   1b1bc:	9f e0       	ldi	r25, 0x0F	; 15
   1b1be:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   1b1c2:	80 91 6d 0f 	lds	r24, 0x0F6D	; 0x800f6d <my_lcd+0x18>
   1b1c6:	90 91 6e 0f 	lds	r25, 0x0F6E	; 0x800f6e <my_lcd+0x19>
   1b1ca:	01 97       	sbiw	r24, 0x01	; 1
   1b1cc:	61 f4       	brne	.+24     	; 0x1b1e6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   1b1ce:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   1b1d0:	21 e0       	ldi	r18, 0x01	; 1
   1b1d2:	ae 01       	movw	r20, r28
   1b1d4:	4f 5f       	subi	r20, 0xFF	; 255
   1b1d6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1d8:	61 e0       	ldi	r22, 0x01	; 1
   1b1da:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   1b1dc:	85 e5       	ldi	r24, 0x55	; 85
   1b1de:	9f e0       	ldi	r25, 0x0F	; 15
   1b1e0:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1b1e4:	a1 ce       	rjmp	.-702    	; 0x1af28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x278>
   1b1e6:	20 e0       	ldi	r18, 0x00	; 0
   1b1e8:	50 e0       	ldi	r21, 0x00	; 0
   1b1ea:	40 e0       	ldi	r20, 0x00	; 0
   1b1ec:	63 e1       	ldi	r22, 0x13	; 19
   1b1ee:	70 e0       	ldi	r23, 0x00	; 0
   1b1f0:	f5 cf       	rjmp	.-22     	; 0x1b1dc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x52c>

0001b1f2 <LCDWIKI_KBV::reset() [clone .constprop.62]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.62():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   1b1f2:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1b1f6:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1b1fa:	80 81       	ld	r24, Z
   1b1fc:	90 91 8b 0f 	lds	r25, 0x0F8B	; 0x800f8b <my_lcd+0x36>
   1b200:	89 2b       	or	r24, r25
   1b202:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   1b204:	e0 91 89 0f 	lds	r30, 0x0F89	; 0x800f89 <my_lcd+0x34>
   1b208:	f0 91 8a 0f 	lds	r31, 0x0F8A	; 0x800f8a <my_lcd+0x35>
   1b20c:	80 81       	ld	r24, Z
   1b20e:	90 91 8e 0f 	lds	r25, 0x0F8E	; 0x800f8e <my_lcd+0x39>
   1b212:	89 2b       	or	r24, r25
   1b214:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   1b216:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b21a:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b21e:	80 81       	ld	r24, Z
   1b220:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b224:	89 2b       	or	r24, r25
   1b226:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   1b228:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <my_lcd+0x3e>
   1b22c:	88 23       	and	r24, r24
   1b22e:	71 f0       	breq	.+28     	; 0x1b24c <LCDWIKI_KBV::reset() [clone .constprop.62]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1b230:	60 e0       	ldi	r22, 0x00	; 0
   1b232:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   1b236:	62 e0       	ldi	r22, 0x02	; 2
   1b238:	70 e0       	ldi	r23, 0x00	; 0
   1b23a:	80 e0       	ldi	r24, 0x00	; 0
   1b23c:	90 e0       	ldi	r25, 0x00	; 0
   1b23e:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   1b242:	61 e0       	ldi	r22, 0x01	; 1
   1b244:	80 91 93 0f 	lds	r24, 0x0F93	; 0x800f93 <my_lcd+0x3e>
   1b248:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1b24c:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1b250:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1b254:	80 81       	ld	r24, Z
   1b256:	90 91 8f 0f 	lds	r25, 0x0F8F	; 0x800f8f <my_lcd+0x3a>
   1b25a:	89 23       	and	r24, r25
   1b25c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1b25e:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b262:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b266:	80 81       	ld	r24, Z
   1b268:	90 91 90 0f 	lds	r25, 0x0F90	; 0x800f90 <my_lcd+0x3b>
   1b26c:	89 23       	and	r24, r25
   1b26e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1b270:	12 b8       	out	0x02, r1	; 2
   1b272:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b276:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b27a:	80 81       	ld	r24, Z
   1b27c:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b280:	89 23       	and	r24, r25
   1b282:	80 83       	st	Z, r24
   1b284:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b288:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b28c:	80 81       	ld	r24, Z
   1b28e:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b292:	89 2b       	or	r24, r25
   1b294:	80 83       	st	Z, r24
   1b296:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   1b298:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b29c:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b2a0:	90 81       	ld	r25, Z
   1b2a2:	20 91 91 0f 	lds	r18, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b2a6:	92 23       	and	r25, r18
   1b2a8:	90 83       	st	Z, r25
   1b2aa:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b2ae:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b2b2:	90 81       	ld	r25, Z
   1b2b4:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b2b8:	92 2b       	or	r25, r18
   1b2ba:	90 83       	st	Z, r25
   1b2bc:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   1b2be:	61 f7       	brne	.-40     	; 0x1b298 <LCDWIKI_KBV::reset() [clone .constprop.62]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   1b2c0:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1b2c4:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1b2c8:	80 81       	ld	r24, Z
   1b2ca:	90 91 8b 0f 	lds	r25, 0x0F8B	; 0x800f8b <my_lcd+0x36>
   1b2ce:	89 2b       	or	r24, r25
   1b2d0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   1b2d2:	08 95       	ret

0001b2d4 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.60():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   1b2d4:	cf 93       	push	r28
   1b2d6:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   1b2d8:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1b2dc:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1b2e0:	90 81       	ld	r25, Z
   1b2e2:	20 91 8f 0f 	lds	r18, 0x0F8F	; 0x800f8f <my_lcd+0x3a>
   1b2e6:	92 23       	and	r25, r18
   1b2e8:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   1b2ea:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b2ee:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b2f2:	90 81       	ld	r25, Z
   1b2f4:	20 91 90 0f 	lds	r18, 0x0F90	; 0x800f90 <my_lcd+0x3b>
   1b2f8:	92 23       	and	r25, r18
   1b2fa:	90 83       	st	Z, r25
   1b2fc:	12 b8       	out	0x02, r1	; 2
   1b2fe:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b302:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b306:	90 81       	ld	r25, Z
   1b308:	20 91 91 0f 	lds	r18, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b30c:	92 23       	and	r25, r18
   1b30e:	90 83       	st	Z, r25
   1b310:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b314:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b318:	90 81       	ld	r25, Z
   1b31a:	20 91 8d 0f 	lds	r18, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b31e:	92 2b       	or	r25, r18
   1b320:	90 83       	st	Z, r25
   1b322:	82 b9       	out	0x02, r24	; 2
   1b324:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b328:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b32c:	80 81       	ld	r24, Z
   1b32e:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <my_lcd+0x3c>
   1b332:	89 23       	and	r24, r25
   1b334:	80 83       	st	Z, r24
   1b336:	e0 91 87 0f 	lds	r30, 0x0F87	; 0x800f87 <my_lcd+0x32>
   1b33a:	f0 91 88 0f 	lds	r31, 0x0F88	; 0x800f88 <my_lcd+0x33>
   1b33e:	80 81       	ld	r24, Z
   1b340:	90 91 8d 0f 	lds	r25, 0x0F8D	; 0x800f8d <my_lcd+0x38>
   1b344:	89 2b       	or	r24, r25
   1b346:	80 83       	st	Z, r24
   1b348:	e0 91 85 0f 	lds	r30, 0x0F85	; 0x800f85 <my_lcd+0x30>
   1b34c:	f0 91 86 0f 	lds	r31, 0x0F86	; 0x800f86 <my_lcd+0x31>
   1b350:	80 81       	ld	r24, Z
   1b352:	90 91 8c 0f 	lds	r25, 0x0F8C	; 0x800f8c <my_lcd+0x37>
   1b356:	89 2b       	or	r24, r25
   1b358:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   1b35a:	81 b1       	in	r24, 0x01	; 1
   1b35c:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1b35e:	61 e0       	ldi	r22, 0x01	; 1
   1b360:	70 e0       	ldi	r23, 0x00	; 0
   1b362:	80 e0       	ldi	r24, 0x00	; 0
   1b364:	90 e0       	ldi	r25, 0x00	; 0
   1b366:	0e 94 57 64 	call	0xc8ae	; 0xc8ae <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   1b36a:	e0 91 89 0f 	lds	r30, 0x0F89	; 0x800f89 <my_lcd+0x34>
   1b36e:	f0 91 8a 0f 	lds	r31, 0x0F8A	; 0x800f8a <my_lcd+0x35>
   1b372:	80 81       	ld	r24, Z
   1b374:	90 91 92 0f 	lds	r25, 0x0F92	; 0x800f92 <my_lcd+0x3d>
   1b378:	89 23       	and	r24, r25
   1b37a:	80 83       	st	Z, r24
   1b37c:	20 b1       	in	r18, 0x00	; 0
   1b37e:	e0 91 89 0f 	lds	r30, 0x0F89	; 0x800f89 <my_lcd+0x34>
   1b382:	f0 91 8a 0f 	lds	r31, 0x0F8A	; 0x800f8a <my_lcd+0x35>
   1b386:	90 81       	ld	r25, Z
   1b388:	80 91 8e 0f 	lds	r24, 0x0F8E	; 0x800f8e <my_lcd+0x39>
   1b38c:	98 2b       	or	r25, r24
   1b38e:	90 83       	st	Z, r25
   1b390:	e0 91 89 0f 	lds	r30, 0x0F89	; 0x800f89 <my_lcd+0x34>
   1b394:	f0 91 8a 0f 	lds	r31, 0x0F8A	; 0x800f8a <my_lcd+0x35>
   1b398:	90 81       	ld	r25, Z
   1b39a:	80 91 92 0f 	lds	r24, 0x0F92	; 0x800f92 <my_lcd+0x3d>
   1b39e:	98 23       	and	r25, r24
   1b3a0:	90 83       	st	Z, r25
   1b3a2:	80 b1       	in	r24, 0x00	; 0
   1b3a4:	e0 91 89 0f 	lds	r30, 0x0F89	; 0x800f89 <my_lcd+0x34>
   1b3a8:	f0 91 8a 0f 	lds	r31, 0x0F8A	; 0x800f8a <my_lcd+0x35>
   1b3ac:	90 81       	ld	r25, Z
   1b3ae:	30 91 8e 0f 	lds	r19, 0x0F8E	; 0x800f8e <my_lcd+0x39>
   1b3b2:	93 2b       	or	r25, r19
   1b3b4:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   1b3b6:	c1 30       	cpi	r28, 0x01	; 1
   1b3b8:	79 f0       	breq	.+30     	; 0x1b3d8 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   1b3ba:	e0 91 83 0f 	lds	r30, 0x0F83	; 0x800f83 <my_lcd+0x2e>
   1b3be:	f0 91 84 0f 	lds	r31, 0x0F84	; 0x800f84 <my_lcd+0x2f>
   1b3c2:	90 81       	ld	r25, Z
   1b3c4:	30 91 8b 0f 	lds	r19, 0x0F8B	; 0x800f8b <my_lcd+0x36>
   1b3c8:	93 2b       	or	r25, r19
   1b3ca:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   1b3cc:	91 b1       	in	r25, 0x01	; 1
   1b3ce:	9f ef       	ldi	r25, 0xFF	; 255
   1b3d0:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   1b3d2:	92 2f       	mov	r25, r18
   1b3d4:	cf 91       	pop	r28
   1b3d6:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   1b3d8:	c0 e0       	ldi	r28, 0x00	; 0
   1b3da:	c7 cf       	rjmp	.-114    	; 0x1b36a <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x96>

0001b3dc <TwoWire::begin() [clone .constprop.54]>:
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   1b3dc:	10 92 a0 0c 	sts	0x0CA0, r1	; 0x800ca0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1b3e0:	10 92 9f 0c 	sts	0x0C9F, r1	; 0x800c9f <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   1b3e4:	10 92 b7 0c 	sts	0x0CB7, r1	; 0x800cb7 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   1b3e8:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   1b3ec:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1b3f0:	81 e0       	ldi	r24, 0x01	; 1
   1b3f2:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   1b3f6:	10 92 fa 0c 	sts	0x0CFA, r1	; 0x800cfa <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   1b3fa:	61 e0       	ldi	r22, 0x01	; 1
   1b3fc:	83 e1       	ldi	r24, 0x13	; 19
   1b3fe:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   1b402:	61 e0       	ldi	r22, 0x01	; 1
   1b404:	82 e1       	ldi	r24, 0x12	; 18
   1b406:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   1b40a:	e9 eb       	ldi	r30, 0xB9	; 185
   1b40c:	f0 e0       	ldi	r31, 0x00	; 0
   1b40e:	80 81       	ld	r24, Z
   1b410:	8e 7f       	andi	r24, 0xFE	; 254
   1b412:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   1b414:	80 81       	ld	r24, Z
   1b416:	8d 7f       	andi	r24, 0xFD	; 253
   1b418:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   1b41a:	88 e4       	ldi	r24, 0x48	; 72
   1b41c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   1b420:	85 e4       	ldi	r24, 0x45	; 69
   1b422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   1b426:	8e e5       	ldi	r24, 0x5E	; 94
   1b428:	98 e4       	ldi	r25, 0x48	; 72
   1b42a:	90 93 4f 0c 	sts	0x0C4F, r25	; 0x800c4f <twi_onSlaveTransmit.lto_priv.275+0x1>
   1b42e:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <twi_onSlaveTransmit.lto_priv.275>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   1b432:	8f e5       	ldi	r24, 0x5F	; 95
   1b434:	98 e4       	ldi	r25, 0x48	; 72
   1b436:	90 93 4d 0c 	sts	0x0C4D, r25	; 0x800c4d <twi_onSlaveReceive.lto_priv.274+0x1>
   1b43a:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <twi_onSlaveReceive.lto_priv.274>
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   1b43e:	08 95       	ret

0001b440 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:183
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   1b440:	bf 92       	push	r11
   1b442:	cf 92       	push	r12
   1b444:	df 92       	push	r13
   1b446:	ef 92       	push	r14
   1b448:	ff 92       	push	r15
   1b44a:	0f 93       	push	r16
   1b44c:	1f 93       	push	r17
   1b44e:	cf 93       	push	r28
   1b450:	df 93       	push	r29
   1b452:	00 d0       	rcall	.+0      	; 0x1b454 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x14>
   1b454:	00 d0       	rcall	.+0      	; 0x1b456 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x16>
   1b456:	00 d0       	rcall	.+0      	; 0x1b458 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x18>
   1b458:	1f 92       	push	r1
   1b45a:	cd b7       	in	r28, 0x3d	; 61
   1b45c:	de b7       	in	r29, 0x3e	; 62
   1b45e:	b8 2e       	mov	r11, r24
   1b460:	8e 01       	movw	r16, r28
   1b462:	0f 5f       	subi	r16, 0xFF	; 255
   1b464:	1f 4f       	sbci	r17, 0xFF	; 255
   1b466:	7e 01       	movw	r14, r28
   1b468:	8b e0       	ldi	r24, 0x0B	; 11
   1b46a:	e8 0e       	add	r14, r24
   1b46c:	f1 1c       	adc	r15, r1
   1b46e:	68 01       	movw	r12, r16
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:153

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   1b470:	e0 91 43 0f 	lds	r30, 0x0F43	; 0x800f43 <my_touch+0x11>
   1b474:	f0 91 44 0f 	lds	r31, 0x0F44	; 0x800f44 <my_touch+0x12>
   1b478:	90 81       	ld	r25, Z
   1b47a:	80 91 4f 0f 	lds	r24, 0x0F4F	; 0x800f4f <my_touch+0x1d>
   1b47e:	80 95       	com	r24
   1b480:	89 23       	and	r24, r25
   1b482:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:154
	TCLK_LOW;           
   1b484:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b488:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b48c:	90 81       	ld	r25, Z
   1b48e:	80 91 50 0f 	lds	r24, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b492:	80 95       	com	r24
   1b494:	89 23       	and	r24, r25
   1b496:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:155
	TDIN_LOW;
   1b498:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <my_touch+0x17>
   1b49c:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <my_touch+0x18>
   1b4a0:	90 81       	ld	r25, Z
   1b4a2:	80 91 52 0f 	lds	r24, 0x0F52	; 0x800f52 <my_touch+0x20>
   1b4a6:	80 95       	com	r24
   1b4a8:	89 23       	and	r24, r25
   1b4aa:	80 83       	st	Z, r24
   1b4ac:	28 e0       	ldi	r18, 0x08	; 8
   1b4ae:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:130
}


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   1b4b0:	90 e8       	ldi	r25, 0x80	; 128
   1b4b2:	e0 91 49 0f 	lds	r30, 0x0F49	; 0x800f49 <my_touch+0x17>
   1b4b6:	f0 91 4a 0f 	lds	r31, 0x0F4A	; 0x800f4a <my_touch+0x18>
   1b4ba:	80 91 52 0f 	lds	r24, 0x0F52	; 0x800f52 <my_touch+0x20>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:133
	while(val)
	{
		if(data&val)
   1b4be:	4b 2d       	mov	r20, r11
   1b4c0:	49 23       	and	r20, r25
   1b4c2:	09 f4       	brne	.+2      	; 0x1b4c6 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x86>
   1b4c4:	af c0       	rjmp	.+350    	; 0x1b624 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:135
		{
			TDIN_HIGH; 
   1b4c6:	40 81       	ld	r20, Z
   1b4c8:	84 2b       	or	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		}
		else
		{
			TDIN_LOW;
   1b4ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:141
		}
		TCLK_LOW;
   1b4cc:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b4d0:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b4d4:	40 81       	ld	r20, Z
   1b4d6:	80 91 50 0f 	lds	r24, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b4da:	80 95       	com	r24
   1b4dc:	84 23       	and	r24, r20
   1b4de:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:143
		//delay_hus(30);
		TCLK_HIGH;
   1b4e0:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b4e4:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b4e8:	80 81       	ld	r24, Z
   1b4ea:	40 91 50 0f 	lds	r20, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b4ee:	84 2b       	or	r24, r20
   1b4f0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:145
		//delay_hus(30);
		val >>= 1;
   1b4f2:	96 95       	lsr	r25
   1b4f4:	21 50       	subi	r18, 0x01	; 1
   1b4f6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   1b4f8:	e1 f6       	brne	.-72     	; 0x1b4b2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x72>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:158
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_hus(6);              
	TCLK_LOW; 
   1b4fa:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b4fe:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b502:	90 81       	ld	r25, Z
   1b504:	80 91 50 0f 	lds	r24, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b508:	80 95       	com	r24
   1b50a:	89 23       	and	r24, r25
   1b50c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:159
	delay_hus(1); 
   1b50e:	61 e0       	ldi	r22, 0x01	; 1
   1b510:	70 e0       	ldi	r23, 0x00	; 0
   1b512:	80 e0       	ldi	r24, 0x00	; 0
   1b514:	90 e0       	ldi	r25, 0x00	; 0
   1b516:	0e 94 08 8e 	call	0x11c10	; 0x11c10 <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:160
	TCLK_HIGH;
   1b51a:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b51e:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b522:	80 81       	ld	r24, Z
   1b524:	90 91 50 0f 	lds	r25, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b528:	89 2b       	or	r24, r25
   1b52a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:161
	TCLK_LOW;
   1b52c:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b530:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b534:	90 81       	ld	r25, Z
   1b536:	80 91 50 0f 	lds	r24, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b53a:	80 95       	com	r24
   1b53c:	89 23       	and	r24, r25
   1b53e:	80 83       	st	Z, r24
   1b540:	30 e1       	ldi	r19, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1b542:	90 e0       	ldi	r25, 0x00	; 0
   1b544:	80 e0       	ldi	r24, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:164
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   1b546:	88 0f       	add	r24, r24
   1b548:	99 1f       	adc	r25, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:165
	    TCLK_LOW;	    
   1b54a:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b54e:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b552:	40 81       	ld	r20, Z
   1b554:	20 91 50 0f 	lds	r18, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b558:	20 95       	com	r18
   1b55a:	24 23       	and	r18, r20
   1b55c:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:166
	    TCLK_HIGH;
   1b55e:	e0 91 45 0f 	lds	r30, 0x0F45	; 0x800f45 <my_touch+0x13>
   1b562:	f0 91 46 0f 	lds	r31, 0x0F46	; 0x800f46 <my_touch+0x14>
   1b566:	20 81       	ld	r18, Z
   1b568:	40 91 50 0f 	lds	r20, 0x0F50	; 0x800f50 <my_touch+0x1e>
   1b56c:	24 2b       	or	r18, r20
   1b56e:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:167
	    if(TDOUT_STATE)
   1b570:	e0 91 47 0f 	lds	r30, 0x0F47	; 0x800f47 <my_touch+0x15>
   1b574:	f0 91 48 0f 	lds	r31, 0x0F48	; 0x800f48 <my_touch+0x16>
   1b578:	20 81       	ld	r18, Z
   1b57a:	40 91 51 0f 	lds	r20, 0x0F51	; 0x800f51 <my_touch+0x1f>
   1b57e:	24 23       	and	r18, r20
   1b580:	09 f0       	breq	.+2      	; 0x1b584 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x144>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:169
	    {
	         num += 1;                  
   1b582:	01 96       	adiw	r24, 0x01	; 1
   1b584:	31 50       	subi	r19, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:162
	//delay_hus(6);              
	TCLK_LOW; 
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   1b586:	f9 f6       	brne	.-66     	; 0x1b546 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x106>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:177
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
       TCS_HIGH;   
   1b588:	e0 91 43 0f 	lds	r30, 0x0F43	; 0x800f43 <my_touch+0x11>
   1b58c:	f0 91 44 0f 	lds	r31, 0x0F44	; 0x800f44 <my_touch+0x12>
   1b590:	20 81       	ld	r18, Z
   1b592:	30 91 4f 0f 	lds	r19, 0x0F4F	; 0x800f4f <my_touch+0x1d>
   1b596:	23 2b       	or	r18, r19
   1b598:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:176
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   1b59a:	24 e0       	ldi	r18, 0x04	; 4
   1b59c:	96 95       	lsr	r25
   1b59e:	87 95       	ror	r24
   1b5a0:	2a 95       	dec	r18
   1b5a2:	e1 f7       	brne	.-8      	; 0x1b59c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x15c>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:191
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   1b5a4:	d6 01       	movw	r26, r12
   1b5a6:	8d 93       	st	X+, r24
   1b5a8:	9d 93       	st	X+, r25
   1b5aa:	6d 01       	movw	r12, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:189
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   1b5ac:	ae 15       	cp	r26, r14
   1b5ae:	bf 05       	cpc	r27, r15
   1b5b0:	09 f0       	breq	.+2      	; 0x1b5b4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x174>
   1b5b2:	5e cf       	rjmp	.-324    	; 0x1b470 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x30>
   1b5b4:	c8 01       	movw	r24, r16
   1b5b6:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1b5b8:	f8 01       	movw	r30, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:197
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   1b5ba:	d8 01       	movw	r26, r16
   1b5bc:	2d 91       	ld	r18, X+
   1b5be:	3c 91       	ld	r19, X
   1b5c0:	11 97       	sbiw	r26, 0x01	; 1
   1b5c2:	42 81       	ldd	r20, Z+2	; 0x02
   1b5c4:	53 81       	ldd	r21, Z+3	; 0x03
   1b5c6:	42 17       	cp	r20, r18
   1b5c8:	53 07       	cpc	r21, r19
   1b5ca:	20 f4       	brcc	.+8      	; 0x1b5d4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x194>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:200
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   1b5cc:	4d 93       	st	X+, r20
   1b5ce:	5c 93       	st	X, r21
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
             	buf[j]=temp;
   1b5d0:	33 83       	std	Z+3, r19	; 0x03
   1b5d2:	22 83       	std	Z+2, r18	; 0x02
   1b5d4:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:195
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   1b5d6:	8e 17       	cp	r24, r30
   1b5d8:	9f 07       	cpc	r25, r31
   1b5da:	79 f7       	brne	.-34     	; 0x1b5ba <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x17a>
   1b5dc:	0e 5f       	subi	r16, 0xFE	; 254
   1b5de:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:193
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   1b5e0:	08 17       	cp	r16, r24
   1b5e2:	19 07       	cpc	r17, r25
   1b5e4:	49 f7       	brne	.-46     	; 0x1b5b8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x178>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:207
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   1b5e6:	8b 81       	ldd	r24, Y+3	; 0x03
   1b5e8:	9c 81       	ldd	r25, Y+4	; 0x04
   1b5ea:	2d 81       	ldd	r18, Y+5	; 0x05
   1b5ec:	3e 81       	ldd	r19, Y+6	; 0x06
   1b5ee:	82 0f       	add	r24, r18
   1b5f0:	93 1f       	adc	r25, r19
   1b5f2:	2f 81       	ldd	r18, Y+7	; 0x07
   1b5f4:	38 85       	ldd	r19, Y+8	; 0x08
   1b5f6:	82 0f       	add	r24, r18
   1b5f8:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:209
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   1b5fa:	63 e0       	ldi	r22, 0x03	; 3
   1b5fc:	70 e0       	ldi	r23, 0x00	; 0
   1b5fe:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <__udivmodhi4>
   1b602:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:211
	return temp;   
} 
   1b604:	2a 96       	adiw	r28, 0x0a	; 10
   1b606:	0f b6       	in	r0, 0x3f	; 63
   1b608:	f8 94       	cli
   1b60a:	de bf       	out	0x3e, r29	; 62
   1b60c:	0f be       	out	0x3f, r0	; 63
   1b60e:	cd bf       	out	0x3d, r28	; 61
   1b610:	df 91       	pop	r29
   1b612:	cf 91       	pop	r28
   1b614:	1f 91       	pop	r17
   1b616:	0f 91       	pop	r16
   1b618:	ff 90       	pop	r15
   1b61a:	ef 90       	pop	r14
   1b61c:	df 90       	pop	r13
   1b61e:	cf 90       	pop	r12
   1b620:	bf 90       	pop	r11
   1b622:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   1b624:	40 81       	ld	r20, Z
   1b626:	80 95       	com	r24
   1b628:	84 23       	and	r24, r20
   1b62a:	4f cf       	rjmp	.-354    	; 0x1b4ca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x8a>

0001b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>:
_ZN4RF2419print_byte_registerEPKchh.constprop.38():
/home/saric/Arduino/libraries/RF24/RF24.cpp:395
          );
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
   1b62c:	ff 92       	push	r15
   1b62e:	0f 93       	push	r16
   1b630:	1f 93       	push	r17
   1b632:	cf 93       	push	r28
   1b634:	df 93       	push	r29
   1b636:	c6 2f       	mov	r28, r22
   1b638:	d4 2f       	mov	r29, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:402
  //char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  //printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   1b63a:	9f 93       	push	r25
   1b63c:	8f 93       	push	r24
   1b63e:	86 eb       	ldi	r24, 0xB6	; 182
   1b640:	98 e8       	ldi	r25, 0x88	; 136
   1b642:	9f 93       	push	r25
   1b644:	8f 93       	push	r24
   1b646:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b64a:	dc 0f       	add	r29, r28
   1b64c:	0f 90       	pop	r0
   1b64e:	0f 90       	pop	r0
   1b650:	0f 90       	pop	r0
   1b652:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
  #endif
  while (qty--)
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   1b654:	0e ea       	ldi	r16, 0xAE	; 174
   1b656:	18 e8       	ldi	r17, 0x88	; 136
/home/saric/Arduino/libraries/RF24/RF24.cpp:404
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1b658:	cd 17       	cp	r28, r29
   1b65a:	91 f0       	breq	.+36     	; 0x1b680 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x54>
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   1b65c:	ff 24       	eor	r15, r15
   1b65e:	f3 94       	inc	r15
   1b660:	fc 0e       	add	r15, r28
   1b662:	8c 2f       	mov	r24, r28
   1b664:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   1b668:	1f 92       	push	r1
   1b66a:	8f 93       	push	r24
   1b66c:	1f 93       	push	r17
   1b66e:	0f 93       	push	r16
   1b670:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b674:	0f 90       	pop	r0
   1b676:	0f 90       	pop	r0
   1b678:	0f 90       	pop	r0
   1b67a:	0f 90       	pop	r0
   1b67c:	cf 2d       	mov	r28, r15
   1b67e:	ec cf       	rjmp	.-40     	; 0x1b658 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x2c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:406
  printf_P(PSTR("\r\n"));
   1b680:	8b ea       	ldi	r24, 0xAB	; 171
   1b682:	98 e8       	ldi	r25, 0x88	; 136
   1b684:	9f 93       	push	r25
   1b686:	8f 93       	push	r24
   1b688:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b68c:	0f 90       	pop	r0
   1b68e:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:407
}
   1b690:	df 91       	pop	r29
   1b692:	cf 91       	pop	r28
   1b694:	1f 91       	pop	r17
   1b696:	0f 91       	pop	r16
   1b698:	ff 90       	pop	r15
   1b69a:	08 95       	ret

0001b69c <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>:
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:411

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
   1b69c:	2f 92       	push	r2
   1b69e:	3f 92       	push	r3
   1b6a0:	4f 92       	push	r4
   1b6a2:	5f 92       	push	r5
   1b6a4:	6f 92       	push	r6
   1b6a6:	7f 92       	push	r7
   1b6a8:	8f 92       	push	r8
   1b6aa:	9f 92       	push	r9
   1b6ac:	af 92       	push	r10
   1b6ae:	bf 92       	push	r11
   1b6b0:	cf 92       	push	r12
   1b6b2:	df 92       	push	r13
   1b6b4:	ef 92       	push	r14
   1b6b6:	ff 92       	push	r15
   1b6b8:	0f 93       	push	r16
   1b6ba:	1f 93       	push	r17
   1b6bc:	cf 93       	push	r28
   1b6be:	df 93       	push	r29
   1b6c0:	1f 92       	push	r1
   1b6c2:	cd b7       	in	r28, 0x3d	; 61
   1b6c4:	de b7       	in	r29, 0x3e	; 62
   1b6c6:	96 2e       	mov	r9, r22
   1b6c8:	34 2e       	mov	r3, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
}
   1b6ca:	4d b6       	in	r4, 0x3d	; 61
   1b6cc:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:417
{

  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   1b6ce:	9f 93       	push	r25
   1b6d0:	8f 93       	push	r24
   1b6d2:	85 ea       	ldi	r24, 0xA5	; 165
   1b6d4:	98 e8       	ldi	r25, 0x88	; 136
   1b6d6:	9f 93       	push	r25
   1b6d8:	8f 93       	push	r24
   1b6da:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b6de:	39 0c       	add	r3, r9
   1b6e0:	0f 90       	pop	r0
   1b6e2:	0f 90       	pop	r0
   1b6e4:	0f 90       	pop	r0
   1b6e6:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1b6e8:	81 ea       	ldi	r24, 0xA1	; 161
   1b6ea:	c8 2e       	mov	r12, r24
   1b6ec:	88 e8       	ldi	r24, 0x88	; 136
   1b6ee:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
   1b6f0:	9c e9       	ldi	r25, 0x9C	; 156
   1b6f2:	a9 2e       	mov	r10, r25
   1b6f4:	98 e8       	ldi	r25, 0x88	; 136
   1b6f6:	b9 2e       	mov	r11, r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:419
  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1b6f8:	93 14       	cp	r9, r3
   1b6fa:	09 f4       	brne	.+2      	; 0x1b6fe <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x62>
   1b6fc:	4c c0       	rjmp	.+152    	; 0x1b796 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xfa>
/home/saric/Arduino/libraries/RF24/RF24.cpp:428

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }
   1b6fe:	6d b6       	in	r6, 0x3d	; 61
   1b700:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:421
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
   1b702:	20 90 bb 0f 	lds	r2, 0x0FBB	; 0x800fbb <radio+0xe>
   1b706:	02 2d       	mov	r16, r2
   1b708:	10 e0       	ldi	r17, 0x00	; 0
   1b70a:	8d b7       	in	r24, 0x3d	; 61
   1b70c:	9e b7       	in	r25, 0x3e	; 62
   1b70e:	80 1b       	sub	r24, r16
   1b710:	91 0b       	sbc	r25, r17
   1b712:	0f b6       	in	r0, 0x3f	; 63
   1b714:	f8 94       	cli
   1b716:	9e bf       	out	0x3e, r25	; 62
   1b718:	0f be       	out	0x3f, r0	; 63
   1b71a:	8d bf       	out	0x3d, r24	; 61
   1b71c:	ed b7       	in	r30, 0x3d	; 61
   1b71e:	fe b7       	in	r31, 0x3e	; 62
   1b720:	31 96       	adiw	r30, 0x01	; 1
   1b722:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    read_register(reg++,buffer,sizeof buffer);
   1b724:	f1 e0       	ldi	r31, 0x01	; 1
   1b726:	f9 0d       	add	r31, r9
   1b728:	f9 83       	std	Y+1, r31	; 0x01
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1b72a:	80 e0       	ldi	r24, 0x00	; 0
   1b72c:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
read_register():
/home/saric/Arduino/libraries/RF24/RF24.cpp:128
  endTransaction(); //unlocks mutex and setting csn high

#else

  beginTransaction();
  status = _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   1b730:	89 2d       	mov	r24, r9
   1b732:	8f 71       	andi	r24, 0x1F	; 31
   1b734:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1b738:	47 01       	movw	r8, r14
/home/saric/Arduino/libraries/RF24/RF24.cpp:129
  while ( len-- ){
   1b73a:	2a 94       	dec	r2
   1b73c:	8f ef       	ldi	r24, 0xFF	; 255
   1b73e:	28 16       	cp	r2, r24
   1b740:	31 f0       	breq	.+12     	; 0x1b74e <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xb2>
/home/saric/Arduino/libraries/RF24/RF24.cpp:130
    *buf++ = _SPI.transfer(0xff);
   1b742:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1b746:	f4 01       	movw	r30, r8
   1b748:	81 93       	st	Z+, r24
   1b74a:	4f 01       	movw	r8, r30
   1b74c:	f6 cf       	rjmp	.-20     	; 0x1b73a <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x9e>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1b74e:	81 e0       	ldi	r24, 0x01	; 1
   1b750:	0e 94 4d d3 	call	0x1a69a	; 0x1a69a <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1b754:	df 92       	push	r13
   1b756:	cf 92       	push	r12
   1b758:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:425
    uint8_t* bufptr = buffer + sizeof buffer;
   1b75c:	0e 0d       	add	r16, r14
   1b75e:	1f 1d       	adc	r17, r15
   1b760:	0f 90       	pop	r0
   1b762:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:426
    while( --bufptr >= buffer )
   1b764:	01 50       	subi	r16, 0x01	; 1
   1b766:	11 09       	sbc	r17, r1
   1b768:	0e 15       	cp	r16, r14
   1b76a:	1f 05       	cpc	r17, r15
   1b76c:	68 f0       	brcs	.+26     	; 0x1b788 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xec>
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
      printf_P(PSTR("%02x"),*bufptr);
   1b76e:	f8 01       	movw	r30, r16
   1b770:	80 81       	ld	r24, Z
   1b772:	1f 92       	push	r1
   1b774:	8f 93       	push	r24
   1b776:	bf 92       	push	r11
   1b778:	af 92       	push	r10
   1b77a:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b77e:	0f 90       	pop	r0
   1b780:	0f 90       	pop	r0
   1b782:	0f 90       	pop	r0
   1b784:	0f 90       	pop	r0
   1b786:	ee cf       	rjmp	.-36     	; 0x1b764 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xc8>
   1b788:	0f b6       	in	r0, 0x3f	; 63
   1b78a:	f8 94       	cli
   1b78c:	7e be       	out	0x3e, r7	; 62
   1b78e:	0f be       	out	0x3f, r0	; 63
   1b790:	6d be       	out	0x3d, r6	; 61
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);
   1b792:	99 80       	ldd	r9, Y+1	; 0x01
   1b794:	b1 cf       	rjmp	.-158    	; 0x1b6f8 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x5c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:430
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
   1b796:	89 e9       	ldi	r24, 0x99	; 153
   1b798:	98 e8       	ldi	r25, 0x88	; 136
   1b79a:	9f 93       	push	r25
   1b79c:	8f 93       	push	r24
   1b79e:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1b7a2:	0f 90       	pop	r0
   1b7a4:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
}
   1b7a6:	0f b6       	in	r0, 0x3f	; 63
   1b7a8:	f8 94       	cli
   1b7aa:	5e be       	out	0x3e, r5	; 62
   1b7ac:	0f be       	out	0x3f, r0	; 63
   1b7ae:	4d be       	out	0x3d, r4	; 61
   1b7b0:	0f 90       	pop	r0
   1b7b2:	df 91       	pop	r29
   1b7b4:	cf 91       	pop	r28
   1b7b6:	1f 91       	pop	r17
   1b7b8:	0f 91       	pop	r16
   1b7ba:	ff 90       	pop	r15
   1b7bc:	ef 90       	pop	r14
   1b7be:	df 90       	pop	r13
   1b7c0:	cf 90       	pop	r12
   1b7c2:	bf 90       	pop	r11
   1b7c4:	af 90       	pop	r10
   1b7c6:	9f 90       	pop	r9
   1b7c8:	8f 90       	pop	r8
   1b7ca:	7f 90       	pop	r7
   1b7cc:	6f 90       	pop	r6
   1b7ce:	5f 90       	pop	r5
   1b7d0:	4f 90       	pop	r4
   1b7d2:	3f 90       	pop	r3
   1b7d4:	2f 90       	pop	r2
   1b7d6:	08 95       	ret

0001b7d8 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   1b7d8:	af 92       	push	r10
   1b7da:	bf 92       	push	r11
   1b7dc:	cf 92       	push	r12
   1b7de:	df 92       	push	r13
   1b7e0:	ef 92       	push	r14
   1b7e2:	ff 92       	push	r15
   1b7e4:	0f 93       	push	r16
   1b7e6:	1f 93       	push	r17
   1b7e8:	cf 93       	push	r28
   1b7ea:	df 93       	push	r29
   1b7ec:	f8 2e       	mov	r15, r24
   1b7ee:	5b 01       	movw	r10, r22
   1b7f0:	6a 01       	movw	r12, r20
   1b7f2:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   1b7f4:	68 e2       	ldi	r22, 0x28	; 40
   1b7f6:	70 e0       	ldi	r23, 0x00	; 0
   1b7f8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   1b7fc:	08 2f       	mov	r16, r24
   1b7fe:	10 e0       	ldi	r17, 0x00	; 0
   1b800:	10 2f       	mov	r17, r16
   1b802:	00 27       	eor	r16, r16
   1b804:	69 e2       	ldi	r22, 0x29	; 41
   1b806:	70 e0       	ldi	r23, 0x00	; 0
   1b808:	8f 2d       	mov	r24, r15
   1b80a:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   1b80e:	e8 01       	movw	r28, r16
   1b810:	c8 0f       	add	r28, r24
   1b812:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   1b814:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <wiznet_SPI_settings>
   1b818:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <wiznet_SPI_settings+0x1>
   1b81c:	0e 94 42 84 	call	0x10884	; 0x10884 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1b820:	0e 94 35 84 	call	0x1086a	; 0x1086a <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   1b824:	8d 2f       	mov	r24, r29
   1b826:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   1b82a:	8c 2f       	mov	r24, r28
   1b82c:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1b830:	8f 2d       	mov	r24, r15
   1b832:	82 95       	swap	r24
   1b834:	88 0f       	add	r24, r24
   1b836:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   1b838:	88 5e       	subi	r24, 0xE8	; 232
   1b83a:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1b83e:	85 01       	movw	r16, r10
   1b840:	ac 0c       	add	r10, r12
   1b842:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   1b844:	80 e0       	ldi	r24, 0x00	; 0
   1b846:	0e 94 3b 84 	call	0x10876	; 0x10876 <SPIClass::transfer(unsigned char)>
   1b84a:	f8 01       	movw	r30, r16
   1b84c:	81 93       	st	Z+, r24
   1b84e:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   1b850:	ea 15       	cp	r30, r10
   1b852:	fb 05       	cpc	r31, r11
   1b854:	b9 f7       	brne	.-18     	; 0x1b844 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   1b856:	0e 94 30 84 	call	0x10860	; 0x10860 <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:158
    SPI.endTransaction();
   1b85a:	0e 94 3a 84 	call	0x10874	; 0x10874 <SPIClass::endTransaction()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   1b85e:	e1 10       	cpse	r14, r1
   1b860:	18 c0       	rjmp	.+48     	; 0x1b892 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0xba>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   1b862:	cc 0d       	add	r28, r12
   1b864:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1b866:	4d 2f       	mov	r20, r29
   1b868:	68 e2       	ldi	r22, 0x28	; 40
   1b86a:	70 e0       	ldi	r23, 0x00	; 0
   1b86c:	8f 2d       	mov	r24, r15
   1b86e:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1b872:	4c 2f       	mov	r20, r28
   1b874:	69 e2       	ldi	r22, 0x29	; 41
   1b876:	70 e0       	ldi	r23, 0x00	; 0
   1b878:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   1b87a:	df 91       	pop	r29
   1b87c:	cf 91       	pop	r28
   1b87e:	1f 91       	pop	r17
   1b880:	0f 91       	pop	r16
   1b882:	ff 90       	pop	r15
   1b884:	ef 90       	pop	r14
   1b886:	df 90       	pop	r13
   1b888:	cf 90       	pop	r12
   1b88a:	bf 90       	pop	r11
   1b88c:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1b88e:	0c 94 b7 84 	jmp	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   1b892:	df 91       	pop	r29
   1b894:	cf 91       	pop	r28
   1b896:	1f 91       	pop	r17
   1b898:	0f 91       	pop	r16
   1b89a:	ff 90       	pop	r15
   1b89c:	ef 90       	pop	r14
   1b89e:	df 90       	pop	r13
   1b8a0:	cf 90       	pop	r12
   1b8a2:	bf 90       	pop	r11
   1b8a4:	af 90       	pop	r10
   1b8a6:	08 95       	ret

0001b8a8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.30():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   1b8a8:	ff 92       	push	r15
   1b8aa:	0f 93       	push	r16
   1b8ac:	1f 93       	push	r17
   1b8ae:	cf 93       	push	r28
   1b8b0:	df 93       	push	r29
   1b8b2:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   1b8b4:	10 e0       	ldi	r17, 0x00	; 0
   1b8b6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   1b8b8:	8f 2d       	mov	r24, r15
   1b8ba:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <W5500Class::readSnRX_RSR(unsigned char)>
   1b8be:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1b8c0:	89 2b       	or	r24, r25
   1b8c2:	21 f0       	breq	.+8      	; 0x1b8cc <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   1b8c4:	8f 2d       	mov	r24, r15
   1b8c6:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <W5500Class::readSnRX_RSR(unsigned char)>
   1b8ca:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   1b8cc:	c0 17       	cp	r28, r16
   1b8ce:	d1 07       	cpc	r29, r17
   1b8d0:	99 f7       	brne	.-26     	; 0x1b8b8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   1b8d2:	ce 01       	movw	r24, r28
   1b8d4:	df 91       	pop	r29
   1b8d6:	cf 91       	pop	r28
   1b8d8:	1f 91       	pop	r17
   1b8da:	0f 91       	pop	r16
   1b8dc:	ff 90       	pop	r15
   1b8de:	08 95       	ret

0001b8e0 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   1b8e0:	bf 92       	push	r11
   1b8e2:	cf 92       	push	r12
   1b8e4:	df 92       	push	r13
   1b8e6:	ef 92       	push	r14
   1b8e8:	ff 92       	push	r15
   1b8ea:	0f 93       	push	r16
   1b8ec:	1f 93       	push	r17
   1b8ee:	cf 93       	push	r28
   1b8f0:	df 93       	push	r29
   1b8f2:	b8 2e       	mov	r11, r24
   1b8f4:	6b 01       	movw	r12, r22
   1b8f6:	7a 01       	movw	r14, r20
   1b8f8:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   1b8fa:	64 e2       	ldi	r22, 0x24	; 36
   1b8fc:	70 e0       	ldi	r23, 0x00	; 0
   1b8fe:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   1b902:	c8 2f       	mov	r28, r24
   1b904:	65 e2       	ldi	r22, 0x25	; 37
   1b906:	70 e0       	ldi	r23, 0x00	; 0
   1b908:	8b 2d       	mov	r24, r11
   1b90a:	0e 94 21 85 	call	0x10a42	; 0x10a42 <W5500Class::readSn(unsigned char, unsigned int)>
   1b90e:	d0 e0       	ldi	r29, 0x00	; 0
   1b910:	dc 2f       	mov	r29, r28
   1b912:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   1b914:	8c 0d       	add	r24, r12
   1b916:	9d 2d       	mov	r25, r13
   1b918:	91 1d       	adc	r25, r1
   1b91a:	c8 0f       	add	r28, r24
   1b91c:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   1b91e:	6b 2d       	mov	r22, r11
   1b920:	62 95       	swap	r22
   1b922:	66 0f       	add	r22, r22
   1b924:	60 7e       	andi	r22, 0xE0	; 224
   1b926:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   1b928:	98 01       	movw	r18, r16
   1b92a:	a7 01       	movw	r20, r14
   1b92c:	ce 01       	movw	r24, r28
   1b92e:	0e 94 64 84 	call	0x108c8	; 0x108c8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   1b932:	c0 0f       	add	r28, r16
   1b934:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1b936:	4d 2f       	mov	r20, r29
   1b938:	64 e2       	ldi	r22, 0x24	; 36
   1b93a:	70 e0       	ldi	r23, 0x00	; 0
   1b93c:	8b 2d       	mov	r24, r11
   1b93e:	0e 94 b7 84 	call	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1b942:	4c 2f       	mov	r20, r28
   1b944:	65 e2       	ldi	r22, 0x25	; 37
   1b946:	70 e0       	ldi	r23, 0x00	; 0
   1b948:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   1b94a:	df 91       	pop	r29
   1b94c:	cf 91       	pop	r28
   1b94e:	1f 91       	pop	r17
   1b950:	0f 91       	pop	r16
   1b952:	ff 90       	pop	r15
   1b954:	ef 90       	pop	r14
   1b956:	df 90       	pop	r13
   1b958:	cf 90       	pop	r12
   1b95a:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1b95c:	0c 94 b7 84 	jmp	0x1096e	; 0x1096e <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001b960 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1b960:	ff 92       	push	r15
   1b962:	0f 93       	push	r16
   1b964:	1f 93       	push	r17
   1b966:	cf 93       	push	r28
   1b968:	df 93       	push	r29
   1b96a:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   1b96c:	10 e0       	ldi	r17, 0x00	; 0
   1b96e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1b970:	8f 2d       	mov	r24, r15
   1b972:	0e 94 42 85 	call	0x10a84	; 0x10a84 <W5500Class::readSnTX_FSR(unsigned char)>
   1b976:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   1b978:	89 2b       	or	r24, r25
   1b97a:	21 f0       	breq	.+8      	; 0x1b984 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   1b97c:	8f 2d       	mov	r24, r15
   1b97e:	0e 94 42 85 	call	0x10a84	; 0x10a84 <W5500Class::readSnTX_FSR(unsigned char)>
   1b982:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1b984:	c0 17       	cp	r28, r16
   1b986:	d1 07       	cpc	r29, r17
   1b988:	99 f7       	brne	.-26     	; 0x1b970 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   1b98a:	ce 01       	movw	r24, r28
   1b98c:	df 91       	pop	r29
   1b98e:	cf 91       	pop	r28
   1b990:	1f 91       	pop	r17
   1b992:	0f 91       	pop	r16
   1b994:	ff 90       	pop	r15
   1b996:	08 95       	ret

0001b998 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1b998:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1b99a:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1b99c:	a8 0f       	add	r26, r24
   1b99e:	b9 2f       	mov	r27, r25
   1b9a0:	b1 1d       	adc	r27, r1
   1b9a2:	a3 5a       	subi	r26, 0xA3	; 163
   1b9a4:	bf 4f       	sbci	r27, 0xFF	; 255
   1b9a6:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1b9a8:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b9aa:	90 e0       	ldi	r25, 0x00	; 0
   1b9ac:	01 96       	adiw	r24, 0x01	; 1
   1b9ae:	8f 73       	andi	r24, 0x3F	; 63
   1b9b0:	99 27       	eor	r25, r25
   1b9b2:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1b9b4:	a6 89       	ldd	r26, Z+22	; 0x16
   1b9b6:	b7 89       	ldd	r27, Z+23	; 0x17
   1b9b8:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1b9ba:	a0 89       	ldd	r26, Z+16	; 0x10
   1b9bc:	b1 89       	ldd	r27, Z+17	; 0x11
   1b9be:	8c 91       	ld	r24, X
   1b9c0:	80 64       	ori	r24, 0x40	; 64
   1b9c2:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1b9c4:	93 8d       	ldd	r25, Z+27	; 0x1b
   1b9c6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b9c8:	98 13       	cpse	r25, r24
   1b9ca:	06 c0       	rjmp	.+12     	; 0x1b9d8 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1b9cc:	02 88       	ldd	r0, Z+18	; 0x12
   1b9ce:	f3 89       	ldd	r31, Z+19	; 0x13
   1b9d0:	e0 2d       	mov	r30, r0
   1b9d2:	80 81       	ld	r24, Z
   1b9d4:	8f 7d       	andi	r24, 0xDF	; 223
   1b9d6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1b9d8:	08 95       	ret

0001b9da <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   1b9da:	ef 92       	push	r14
   1b9dc:	ff 92       	push	r15
   1b9de:	0f 93       	push	r16
   1b9e0:	1f 93       	push	r17
   1b9e2:	cf 93       	push	r28
   1b9e4:	df 93       	push	r29
   1b9e6:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1b9e8:	81 e0       	ldi	r24, 0x01	; 1
   1b9ea:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1b9ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1b9ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1b9f0:	98 13       	cpse	r25, r24
   1b9f2:	16 c0       	rjmp	.+44     	; 0x1ba20 <HardwareSerial::write(unsigned char)+0x46>
   1b9f4:	e8 89       	ldd	r30, Y+16	; 0x10
   1b9f6:	f9 89       	ldd	r31, Y+17	; 0x11
   1b9f8:	80 81       	ld	r24, Z
   1b9fa:	85 ff       	sbrs	r24, 5
   1b9fc:	11 c0       	rjmp	.+34     	; 0x1ba20 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1b9fe:	ee 89       	ldd	r30, Y+22	; 0x16
   1ba00:	ff 89       	ldd	r31, Y+23	; 0x17
   1ba02:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1ba04:	e8 89       	ldd	r30, Y+16	; 0x10
   1ba06:	f9 89       	ldd	r31, Y+17	; 0x11
   1ba08:	80 81       	ld	r24, Z
   1ba0a:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1ba0c:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1ba0e:	81 e0       	ldi	r24, 0x01	; 1
   1ba10:	90 e0       	ldi	r25, 0x00	; 0
   1ba12:	df 91       	pop	r29
   1ba14:	cf 91       	pop	r28
   1ba16:	1f 91       	pop	r17
   1ba18:	0f 91       	pop	r16
   1ba1a:	ff 90       	pop	r15
   1ba1c:	ef 90       	pop	r14
   1ba1e:	08 95       	ret
   1ba20:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1ba22:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1ba24:	10 e0       	ldi	r17, 0x00	; 0
   1ba26:	0f 5f       	subi	r16, 0xFF	; 255
   1ba28:	1f 4f       	sbci	r17, 0xFF	; 255
   1ba2a:	0f 73       	andi	r16, 0x3F	; 63
   1ba2c:	11 27       	eor	r17, r17
   1ba2e:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1ba30:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1ba32:	8e 11       	cpse	r24, r14
   1ba34:	0c c0       	rjmp	.+24     	; 0x1ba4e <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1ba36:	0f b6       	in	r0, 0x3f	; 63
   1ba38:	07 fc       	sbrc	r0, 7
   1ba3a:	fa cf       	rjmp	.-12     	; 0x1ba30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1ba3c:	e8 89       	ldd	r30, Y+16	; 0x10
   1ba3e:	f9 89       	ldd	r31, Y+17	; 0x11
   1ba40:	80 81       	ld	r24, Z
   1ba42:	85 ff       	sbrs	r24, 5
   1ba44:	f5 cf       	rjmp	.-22     	; 0x1ba30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1ba46:	ce 01       	movw	r24, r28
   1ba48:	0e 94 cc dc 	call	0x1b998	; 0x1b998 <HardwareSerial::_tx_udr_empty_irq()>
   1ba4c:	f1 cf       	rjmp	.-30     	; 0x1ba30 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1ba4e:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1ba50:	ec 0f       	add	r30, r28
   1ba52:	fd 2f       	mov	r31, r29
   1ba54:	f1 1d       	adc	r31, r1
   1ba56:	e3 5a       	subi	r30, 0xA3	; 163
   1ba58:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba5a:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1ba5c:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1ba5e:	ea 89       	ldd	r30, Y+18	; 0x12
   1ba60:	fb 89       	ldd	r31, Y+19	; 0x13
   1ba62:	80 81       	ld	r24, Z
   1ba64:	80 62       	ori	r24, 0x20	; 32
   1ba66:	d2 cf       	rjmp	.-92     	; 0x1ba0c <HardwareSerial::write(unsigned char)+0x32>

0001ba68 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1ba68:	cf 93       	push	r28
   1ba6a:	df 93       	push	r29
   1ba6c:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1ba6e:	88 8d       	ldd	r24, Y+24	; 0x18
   1ba70:	88 23       	and	r24, r24
   1ba72:	b9 f0       	breq	.+46     	; 0x1baa2 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1ba74:	aa 89       	ldd	r26, Y+18	; 0x12
   1ba76:	bb 89       	ldd	r27, Y+19	; 0x13
   1ba78:	e8 89       	ldd	r30, Y+16	; 0x10
   1ba7a:	f9 89       	ldd	r31, Y+17	; 0x11
   1ba7c:	8c 91       	ld	r24, X
   1ba7e:	85 fd       	sbrc	r24, 5
   1ba80:	03 c0       	rjmp	.+6      	; 0x1ba88 <HardwareSerial::flush()+0x20>
   1ba82:	80 81       	ld	r24, Z
   1ba84:	86 fd       	sbrc	r24, 6
   1ba86:	0d c0       	rjmp	.+26     	; 0x1baa2 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1ba88:	0f b6       	in	r0, 0x3f	; 63
   1ba8a:	07 fc       	sbrc	r0, 7
   1ba8c:	f7 cf       	rjmp	.-18     	; 0x1ba7c <HardwareSerial::flush()+0x14>
   1ba8e:	8c 91       	ld	r24, X
   1ba90:	85 ff       	sbrs	r24, 5
   1ba92:	f2 cf       	rjmp	.-28     	; 0x1ba78 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1ba94:	80 81       	ld	r24, Z
   1ba96:	85 ff       	sbrs	r24, 5
   1ba98:	ed cf       	rjmp	.-38     	; 0x1ba74 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1ba9a:	ce 01       	movw	r24, r28
   1ba9c:	0e 94 cc dc 	call	0x1b998	; 0x1b998 <HardwareSerial::_tx_udr_empty_irq()>
   1baa0:	e9 cf       	rjmp	.-46     	; 0x1ba74 <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1baa2:	df 91       	pop	r29
   1baa4:	cf 91       	pop	r28
   1baa6:	08 95       	ret

0001baa8 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>:
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   1baa8:	1f 93       	push	r17
   1baaa:	cf 93       	push	r28
   1baac:	df 93       	push	r29
   1baae:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1bab0:	91 e2       	ldi	r25, 0x21	; 33
   1bab2:	89 9f       	mul	r24, r25
   1bab4:	e0 01       	movw	r28, r0
   1bab6:	11 24       	eor	r1, r1
   1bab8:	c8 5a       	subi	r28, 0xA8	; 168
   1baba:	de 4f       	sbci	r29, 0xFE	; 254
   1babc:	ce 01       	movw	r24, r28
   1babe:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1bac2:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   1bac4:	11 11       	cpse	r17, r1
   1bac6:	07 c0       	rjmp	.+14     	; 0x1bad6 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x2e>
   1bac8:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1baca:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   1bacc:	df 91       	pop	r29
   1bace:	cf 91       	pop	r28
   1bad0:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1bad2:	0c 94 b0 6b 	jmp	0xd760	; 0xd760 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   1bad6:	61 60       	ori	r22, 0x01	; 1
   1bad8:	f8 cf       	rjmp	.-16     	; 0x1baca <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x22>

0001bada <localtime>:
localtime():
   1bada:	6b e0       	ldi	r22, 0x0B	; 11
   1badc:	74 e1       	ldi	r23, 0x14	; 20
   1bade:	0e 94 74 dd 	call	0x1bae8	; 0x1bae8 <localtime_r>
   1bae2:	8b e0       	ldi	r24, 0x0B	; 11
   1bae4:	94 e1       	ldi	r25, 0x14	; 20
   1bae6:	08 95       	ret

0001bae8 <localtime_r>:
localtime_r():
   1bae8:	cf 92       	push	r12
   1baea:	df 92       	push	r13
   1baec:	ef 92       	push	r14
   1baee:	ff 92       	push	r15
   1baf0:	0f 93       	push	r16
   1baf2:	1f 93       	push	r17
   1baf4:	cf 93       	push	r28
   1baf6:	df 93       	push	r29
   1baf8:	00 d0       	rcall	.+0      	; 0x1bafa <localtime_r+0x12>
   1bafa:	1f 92       	push	r1
   1bafc:	cd b7       	in	r28, 0x3d	; 61
   1bafe:	de b7       	in	r29, 0x3e	; 62
   1bb00:	6c 01       	movw	r12, r24
   1bb02:	7b 01       	movw	r14, r22
   1bb04:	e0 91 21 14 	lds	r30, 0x1421	; 0x801421 <__dst_ptr>
   1bb08:	f0 91 22 14 	lds	r31, 0x1422	; 0x801422 <__dst_ptr+0x1>
   1bb0c:	0f ef       	ldi	r16, 0xFF	; 255
   1bb0e:	1f ef       	ldi	r17, 0xFF	; 255
   1bb10:	30 97       	sbiw	r30, 0x00	; 0
   1bb12:	21 f0       	breq	.+8      	; 0x1bb1c <localtime_r+0x34>
   1bb14:	67 e1       	ldi	r22, 0x17	; 23
   1bb16:	74 e1       	ldi	r23, 0x14	; 20
   1bb18:	19 95       	eicall
   1bb1a:	8c 01       	movw	r16, r24
   1bb1c:	f6 01       	movw	r30, r12
   1bb1e:	80 81       	ld	r24, Z
   1bb20:	91 81       	ldd	r25, Z+1	; 0x01
   1bb22:	a2 81       	ldd	r26, Z+2	; 0x02
   1bb24:	b3 81       	ldd	r27, Z+3	; 0x03
   1bb26:	40 91 17 14 	lds	r20, 0x1417	; 0x801417 <__utc_offset>
   1bb2a:	50 91 18 14 	lds	r21, 0x1418	; 0x801418 <__utc_offset+0x1>
   1bb2e:	60 91 19 14 	lds	r22, 0x1419	; 0x801419 <__utc_offset+0x2>
   1bb32:	70 91 1a 14 	lds	r23, 0x141A	; 0x80141a <__utc_offset+0x3>
   1bb36:	84 0f       	add	r24, r20
   1bb38:	95 1f       	adc	r25, r21
   1bb3a:	a6 1f       	adc	r26, r22
   1bb3c:	b7 1f       	adc	r27, r23
   1bb3e:	10 16       	cp	r1, r16
   1bb40:	11 06       	cpc	r1, r17
   1bb42:	cc f0       	brlt	.+50     	; 0x1bb76 <localtime_r+0x8e>
   1bb44:	89 83       	std	Y+1, r24	; 0x01
   1bb46:	9a 83       	std	Y+2, r25	; 0x02
   1bb48:	ab 83       	std	Y+3, r26	; 0x03
   1bb4a:	bc 83       	std	Y+4, r27	; 0x04
   1bb4c:	b7 01       	movw	r22, r14
   1bb4e:	ce 01       	movw	r24, r28
   1bb50:	01 96       	adiw	r24, 0x01	; 1
   1bb52:	0e 94 c5 dd 	call	0x1bb8a	; 0x1bb8a <gmtime_r>
   1bb56:	f7 01       	movw	r30, r14
   1bb58:	13 87       	std	Z+11, r17	; 0x0b
   1bb5a:	02 87       	std	Z+10, r16	; 0x0a
   1bb5c:	0f 90       	pop	r0
   1bb5e:	0f 90       	pop	r0
   1bb60:	0f 90       	pop	r0
   1bb62:	0f 90       	pop	r0
   1bb64:	df 91       	pop	r29
   1bb66:	cf 91       	pop	r28
   1bb68:	1f 91       	pop	r17
   1bb6a:	0f 91       	pop	r16
   1bb6c:	ff 90       	pop	r15
   1bb6e:	ef 90       	pop	r14
   1bb70:	df 90       	pop	r13
   1bb72:	cf 90       	pop	r12
   1bb74:	08 95       	ret
   1bb76:	a8 01       	movw	r20, r16
   1bb78:	01 2e       	mov	r0, r17
   1bb7a:	00 0c       	add	r0, r0
   1bb7c:	66 0b       	sbc	r22, r22
   1bb7e:	77 0b       	sbc	r23, r23
   1bb80:	84 0f       	add	r24, r20
   1bb82:	95 1f       	adc	r25, r21
   1bb84:	a6 1f       	adc	r26, r22
   1bb86:	b7 1f       	adc	r27, r23
   1bb88:	dd cf       	rjmp	.-70     	; 0x1bb44 <localtime_r+0x5c>

0001bb8a <gmtime_r>:
gmtime_r():
   1bb8a:	cf 92       	push	r12
   1bb8c:	df 92       	push	r13
   1bb8e:	ef 92       	push	r14
   1bb90:	ff 92       	push	r15
   1bb92:	0f 93       	push	r16
   1bb94:	1f 93       	push	r17
   1bb96:	cf 93       	push	r28
   1bb98:	df 93       	push	r29
   1bb9a:	00 d0       	rcall	.+0      	; 0x1bb9c <gmtime_r+0x12>
   1bb9c:	00 d0       	rcall	.+0      	; 0x1bb9e <gmtime_r+0x14>
   1bb9e:	1f 92       	push	r1
   1bba0:	1f 92       	push	r1
   1bba2:	cd b7       	in	r28, 0x3d	; 61
   1bba4:	de b7       	in	r29, 0x3e	; 62
   1bba6:	8b 01       	movw	r16, r22
   1bba8:	fc 01       	movw	r30, r24
   1bbaa:	60 81       	ld	r22, Z
   1bbac:	71 81       	ldd	r23, Z+1	; 0x01
   1bbae:	82 81       	ldd	r24, Z+2	; 0x02
   1bbb0:	93 81       	ldd	r25, Z+3	; 0x03
   1bbb2:	20 e8       	ldi	r18, 0x80	; 128
   1bbb4:	31 e5       	ldi	r19, 0x51	; 81
   1bbb6:	41 e0       	ldi	r20, 0x01	; 1
   1bbb8:	50 e0       	ldi	r21, 0x00	; 0
   1bbba:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1bbbe:	69 01       	movw	r12, r18
   1bbc0:	7a 01       	movw	r14, r20
   1bbc2:	2c e3       	ldi	r18, 0x3C	; 60
   1bbc4:	30 e0       	ldi	r19, 0x00	; 0
   1bbc6:	40 e0       	ldi	r20, 0x00	; 0
   1bbc8:	50 e0       	ldi	r21, 0x00	; 0
   1bbca:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1bbce:	29 83       	std	Y+1, r18	; 0x01
   1bbd0:	3a 83       	std	Y+2, r19	; 0x02
   1bbd2:	4b 83       	std	Y+3, r20	; 0x03
   1bbd4:	5c 83       	std	Y+4, r21	; 0x04
   1bbd6:	89 81       	ldd	r24, Y+1	; 0x01
   1bbd8:	9a 81       	ldd	r25, Y+2	; 0x02
   1bbda:	ab 81       	ldd	r26, Y+3	; 0x03
   1bbdc:	bc 81       	ldd	r27, Y+4	; 0x04
   1bbde:	f8 01       	movw	r30, r16
   1bbe0:	60 83       	st	Z, r22
   1bbe2:	6c e3       	ldi	r22, 0x3C	; 60
   1bbe4:	70 e0       	ldi	r23, 0x00	; 0
   1bbe6:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bbea:	dc 01       	movw	r26, r24
   1bbec:	f8 01       	movw	r30, r16
   1bbee:	a1 83       	std	Z+1, r26	; 0x01
   1bbf0:	62 83       	std	Z+2, r22	; 0x02
   1bbf2:	c6 01       	movw	r24, r12
   1bbf4:	06 96       	adiw	r24, 0x06	; 6
   1bbf6:	67 e0       	ldi	r22, 0x07	; 7
   1bbf8:	70 e0       	ldi	r23, 0x00	; 0
   1bbfa:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <__udivmodhi4>
   1bbfe:	84 83       	std	Z+4, r24	; 0x04
   1bc00:	2d ea       	ldi	r18, 0xAD	; 173
   1bc02:	3e e8       	ldi	r19, 0x8E	; 142
   1bc04:	40 e0       	ldi	r20, 0x00	; 0
   1bc06:	50 e0       	ldi	r21, 0x00	; 0
   1bc08:	c7 01       	movw	r24, r14
   1bc0a:	b6 01       	movw	r22, r12
   1bc0c:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1bc10:	29 83       	std	Y+1, r18	; 0x01
   1bc12:	3a 83       	std	Y+2, r19	; 0x02
   1bc14:	6d 83       	std	Y+5, r22	; 0x05
   1bc16:	7e 83       	std	Y+6, r23	; 0x06
   1bc18:	8f 83       	std	Y+7, r24	; 0x07
   1bc1a:	98 87       	std	Y+8, r25	; 0x08
   1bc1c:	89 81       	ldd	r24, Y+1	; 0x01
   1bc1e:	9a 81       	ldd	r25, Y+2	; 0x02
   1bc20:	24 e6       	ldi	r18, 0x64	; 100
   1bc22:	28 9f       	mul	r18, r24
   1bc24:	60 01       	movw	r12, r0
   1bc26:	29 9f       	mul	r18, r25
   1bc28:	d0 0c       	add	r13, r0
   1bc2a:	11 24       	eor	r1, r1
   1bc2c:	6d 81       	ldd	r22, Y+5	; 0x05
   1bc2e:	7e 81       	ldd	r23, Y+6	; 0x06
   1bc30:	8f 81       	ldd	r24, Y+7	; 0x07
   1bc32:	98 85       	ldd	r25, Y+8	; 0x08
   1bc34:	25 eb       	ldi	r18, 0xB5	; 181
   1bc36:	35 e0       	ldi	r19, 0x05	; 5
   1bc38:	40 e0       	ldi	r20, 0x00	; 0
   1bc3a:	50 e0       	ldi	r21, 0x00	; 0
   1bc3c:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1bc40:	29 83       	std	Y+1, r18	; 0x01
   1bc42:	3a 83       	std	Y+2, r19	; 0x02
   1bc44:	6d 83       	std	Y+5, r22	; 0x05
   1bc46:	7e 83       	std	Y+6, r23	; 0x06
   1bc48:	e9 80       	ldd	r14, Y+1	; 0x01
   1bc4a:	fa 80       	ldd	r15, Y+2	; 0x02
   1bc4c:	ee 0c       	add	r14, r14
   1bc4e:	ff 1c       	adc	r15, r15
   1bc50:	ee 0c       	add	r14, r14
   1bc52:	ff 1c       	adc	r15, r15
   1bc54:	ec 0c       	add	r14, r12
   1bc56:	fd 1c       	adc	r15, r13
   1bc58:	8d 81       	ldd	r24, Y+5	; 0x05
   1bc5a:	9e 81       	ldd	r25, Y+6	; 0x06
   1bc5c:	f5 e6       	ldi	r31, 0x65	; 101
   1bc5e:	ef 16       	cp	r14, r31
   1bc60:	f1 04       	cpc	r15, r1
   1bc62:	08 f4       	brcc	.+2      	; 0x1bc66 <gmtime_r+0xdc>
   1bc64:	3f c0       	rjmp	.+126    	; 0x1bce4 <gmtime_r+0x15a>
   1bc66:	01 96       	adiw	r24, 0x01	; 1
   1bc68:	21 e0       	ldi	r18, 0x01	; 1
   1bc6a:	30 e0       	ldi	r19, 0x00	; 0
   1bc6c:	a9 01       	movw	r20, r18
   1bc6e:	44 59       	subi	r20, 0x94	; 148
   1bc70:	5e 4f       	sbci	r21, 0xFE	; 254
   1bc72:	48 17       	cp	r20, r24
   1bc74:	59 07       	cpc	r21, r25
   1bc76:	60 f4       	brcc	.+24     	; 0x1bc90 <gmtime_r+0x106>
   1bc78:	6d e6       	ldi	r22, 0x6D	; 109
   1bc7a:	71 e0       	ldi	r23, 0x01	; 1
   1bc7c:	82 1b       	sub	r24, r18
   1bc7e:	93 0b       	sbc	r25, r19
   1bc80:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bc84:	dc 01       	movw	r26, r24
   1bc86:	e6 0e       	add	r14, r22
   1bc88:	f7 1e       	adc	r15, r23
   1bc8a:	cd 01       	movw	r24, r26
   1bc8c:	30 e0       	ldi	r19, 0x00	; 0
   1bc8e:	20 e0       	ldi	r18, 0x00	; 0
   1bc90:	44 e6       	ldi	r20, 0x64	; 100
   1bc92:	e4 0e       	add	r14, r20
   1bc94:	f1 1c       	adc	r15, r1
   1bc96:	f8 01       	movw	r30, r16
   1bc98:	f7 82       	std	Z+7, r15	; 0x07
   1bc9a:	e6 82       	std	Z+6, r14	; 0x06
   1bc9c:	91 87       	std	Z+9, r25	; 0x09
   1bc9e:	80 87       	std	Z+8, r24	; 0x08
   1bca0:	25 5c       	subi	r18, 0xC5	; 197
   1bca2:	3f 4f       	sbci	r19, 0xFF	; 255
   1bca4:	82 17       	cp	r24, r18
   1bca6:	93 07       	cpc	r25, r19
   1bca8:	38 f5       	brcc	.+78     	; 0x1bcf8 <gmtime_r+0x16e>
   1bcaa:	6f e1       	ldi	r22, 0x1F	; 31
   1bcac:	70 e0       	ldi	r23, 0x00	; 0
   1bcae:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bcb2:	dc 01       	movw	r26, r24
   1bcb4:	f8 01       	movw	r30, r16
   1bcb6:	65 83       	std	Z+5, r22	; 0x05
   1bcb8:	a3 83       	std	Z+3, r26	; 0x03
   1bcba:	f8 01       	movw	r30, r16
   1bcbc:	13 86       	std	Z+11, r1	; 0x0b
   1bcbe:	12 86       	std	Z+10, r1	; 0x0a
   1bcc0:	83 81       	ldd	r24, Z+3	; 0x03
   1bcc2:	8f 5f       	subi	r24, 0xFF	; 255
   1bcc4:	83 83       	std	Z+3, r24	; 0x03
   1bcc6:	28 96       	adiw	r28, 0x08	; 8
   1bcc8:	0f b6       	in	r0, 0x3f	; 63
   1bcca:	f8 94       	cli
   1bccc:	de bf       	out	0x3e, r29	; 62
   1bcce:	0f be       	out	0x3f, r0	; 63
   1bcd0:	cd bf       	out	0x3d, r28	; 61
   1bcd2:	df 91       	pop	r29
   1bcd4:	cf 91       	pop	r28
   1bcd6:	1f 91       	pop	r17
   1bcd8:	0f 91       	pop	r16
   1bcda:	ff 90       	pop	r15
   1bcdc:	ef 90       	pop	r14
   1bcde:	df 90       	pop	r13
   1bce0:	cf 90       	pop	r12
   1bce2:	08 95       	ret
   1bce4:	51 e0       	ldi	r21, 0x01	; 1
   1bce6:	40 e0       	ldi	r20, 0x00	; 0
   1bce8:	24 e6       	ldi	r18, 0x64	; 100
   1bcea:	e2 16       	cp	r14, r18
   1bcec:	f1 04       	cpc	r15, r1
   1bcee:	09 f4       	brne	.+2      	; 0x1bcf2 <gmtime_r+0x168>
   1bcf0:	50 e0       	ldi	r21, 0x00	; 0
   1bcf2:	25 2f       	mov	r18, r21
   1bcf4:	34 2f       	mov	r19, r20
   1bcf6:	ba cf       	rjmp	.-140    	; 0x1bc6c <gmtime_r+0xe2>
   1bcf8:	69 e9       	ldi	r22, 0x99	; 153
   1bcfa:	70 e0       	ldi	r23, 0x00	; 0
   1bcfc:	82 1b       	sub	r24, r18
   1bcfe:	93 0b       	sbc	r25, r19
   1bd00:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bd04:	dc 01       	movw	r26, r24
   1bd06:	26 2f       	mov	r18, r22
   1bd08:	22 0f       	add	r18, r18
   1bd0a:	22 0f       	add	r18, r18
   1bd0c:	f2 2e       	mov	r15, r18
   1bd0e:	f6 0e       	add	r15, r22
   1bd10:	6d e3       	ldi	r22, 0x3D	; 61
   1bd12:	70 e0       	ldi	r23, 0x00	; 0
   1bd14:	cd 01       	movw	r24, r26
   1bd16:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bd1a:	dc 01       	movw	r26, r24
   1bd1c:	e6 2e       	mov	r14, r22
   1bd1e:	ee 0c       	add	r14, r14
   1bd20:	6f e1       	ldi	r22, 0x1F	; 31
   1bd22:	70 e0       	ldi	r23, 0x00	; 0
   1bd24:	cd 01       	movw	r24, r26
   1bd26:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1bd2a:	dc 01       	movw	r26, r24
   1bd2c:	22 e0       	ldi	r18, 0x02	; 2
   1bd2e:	26 0f       	add	r18, r22
   1bd30:	2f 0d       	add	r18, r15
   1bd32:	2e 0d       	add	r18, r14
   1bd34:	f8 01       	movw	r30, r16
   1bd36:	25 83       	std	Z+5, r18	; 0x05
   1bd38:	bf cf       	rjmp	.-130    	; 0x1bcb8 <gmtime_r+0x12e>

0001bd3a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1bd3a:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1bd3c:	80 81       	ld	r24, Z
   1bd3e:	91 81       	ldd	r25, Z+1	; 0x01
   1bd40:	87 30       	cpi	r24, 0x07	; 7
   1bd42:	91 05       	cpc	r25, r1
   1bd44:	38 f4       	brcc	.+14     	; 0x1bd54 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   1bd46:	85 30       	cpi	r24, 0x05	; 5
   1bd48:	91 05       	cpc	r25, r1
   1bd4a:	88 f4       	brcc	.+34     	; 0x1bd6e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1bd4c:	03 97       	sbiw	r24, 0x03	; 3
   1bd4e:	a0 f4       	brcc	.+40     	; 0x1bd78 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1bd50:	80 e0       	ldi	r24, 0x00	; 0
   1bd52:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1bd54:	87 30       	cpi	r24, 0x07	; 7
   1bd56:	91 05       	cpc	r25, r1
   1bd58:	61 f0       	breq	.+24     	; 0x1bd72 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   1bd5a:	0a 97       	sbiw	r24, 0x0a	; 10
   1bd5c:	c9 f7       	brne	.-14     	; 0x1bd50 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1bd5e:	62 81       	ldd	r22, Z+2	; 0x02
   1bd60:	73 81       	ldd	r23, Z+3	; 0x03
   1bd62:	84 81       	ldd	r24, Z+4	; 0x04
   1bd64:	95 81       	ldd	r25, Z+5	; 0x05
   1bd66:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
   1bd6a:	86 2f       	mov	r24, r22
   1bd6c:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   1bd6e:	82 81       	ldd	r24, Z+2	; 0x02
   1bd70:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   1bd72:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1bd74:	81 95       	neg	r24
   1bd76:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1bd78:	02 80       	ldd	r0, Z+2	; 0x02
   1bd7a:	f3 81       	ldd	r31, Z+3	; 0x03
   1bd7c:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1bd7e:	30 97       	sbiw	r30, 0x00	; 0
   1bd80:	39 f3       	breq	.-50     	; 0x1bd50 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1bd82:	80 81       	ld	r24, Z
   1bd84:	84 37       	cpi	r24, 0x74	; 116
   1bd86:	c9 f0       	breq	.+50     	; 0x1bdba <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1bd88:	8b 32       	cpi	r24, 0x2B	; 43
   1bd8a:	89 f0       	breq	.+34     	; 0x1bdae <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   1bd8c:	8d 32       	cpi	r24, 0x2D	; 45
   1bd8e:	81 f4       	brne	.+32     	; 0x1bdb0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   1bd90:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   1bd92:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   1bd94:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1bd96:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1bd98:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1bd9a:	30 ed       	ldi	r19, 0xD0	; 208
   1bd9c:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   1bd9e:	3a 30       	cpi	r19, 0x0A	; 10
   1bda0:	48 f4       	brcc	.+18     	; 0x1bdb4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   1bda2:	82 9f       	mul	r24, r18
   1bda4:	60 0d       	add	r22, r0
   1bda6:	11 24       	eor	r1, r1
   1bda8:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   1bdaa:	80 53       	subi	r24, 0x30	; 48
   1bdac:	f5 cf       	rjmp	.-22     	; 0x1bd98 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   1bdae:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   1bdb0:	90 e0       	ldi	r25, 0x00	; 0
   1bdb2:	f0 cf       	rjmp	.-32     	; 0x1bd94 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1bdb4:	91 11       	cpse	r25, r1
   1bdb6:	de cf       	rjmp	.-68     	; 0x1bd74 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   1bdb8:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   1bdba:	81 e0       	ldi	r24, 0x01	; 1
   1bdbc:	fd cf       	rjmp	.-6      	; 0x1bdb8 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0001bdbe <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1bdbe:	cf 93       	push	r28
   1bdc0:	df 93       	push	r29
   1bdc2:	cd b7       	in	r28, 0x3d	; 61
   1bdc4:	de b7       	in	r29, 0x3e	; 62
   1bdc6:	cc 5b       	subi	r28, 0xBC	; 188
   1bdc8:	d1 09       	sbc	r29, r1
   1bdca:	0f b6       	in	r0, 0x3f	; 63
   1bdcc:	f8 94       	cli
   1bdce:	de bf       	out	0x3e, r29	; 62
   1bdd0:	0f be       	out	0x3f, r0	; 63
   1bdd2:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1bdd4:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1bdd6:	84 b5       	in	r24, 0x24	; 36
   1bdd8:	83 60       	ori	r24, 0x03	; 3
   1bdda:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1bddc:	85 b5       	in	r24, 0x25	; 37
   1bdde:	83 60       	ori	r24, 0x03	; 3
   1bde0:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1bde2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   1bde6:	81 60       	ori	r24, 0x01	; 1
   1bde8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1bdec:	82 e0       	ldi	r24, 0x02	; 2
   1bdee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1bdf2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   1bdf6:	81 60       	ori	r24, 0x01	; 1
   1bdf8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1bdfc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1be00:	81 60       	ori	r24, 0x01	; 1
   1be02:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1be06:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   1be0a:	84 60       	ori	r24, 0x04	; 4
   1be0c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1be10:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1be14:	81 60       	ori	r24, 0x01	; 1
   1be16:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1be1a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1be1e:	83 60       	ori	r24, 0x03	; 3
   1be20:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1be24:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1be28:	81 60       	ori	r24, 0x01	; 1
   1be2a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1be2e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   1be32:	83 60       	ori	r24, 0x03	; 3
   1be34:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1be38:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1be3c:	81 60       	ori	r24, 0x01	; 1
   1be3e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1be42:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   1be46:	83 60       	ori	r24, 0x03	; 3
   1be48:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1be4c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1be50:	81 60       	ori	r24, 0x01	; 1
   1be52:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1be56:	87 e8       	ldi	r24, 0x87	; 135
   1be58:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1be5c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1be60:	0e 94 47 a8 	call	0x1508e	; 0x1508e <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

        strcpy(payload, tds.name);
   1be64:	21 e4       	ldi	r18, 0x41	; 65
   1be66:	30 e0       	ldi	r19, 0x00	; 0
   1be68:	2c 0f       	add	r18, r28
   1be6a:	3d 1f       	adc	r19, r29
   1be6c:	24 5f       	subi	r18, 0xF4	; 244
   1be6e:	3f 4f       	sbci	r19, 0xFF	; 255
   1be70:	c5 54       	subi	r28, 0x45	; 69
   1be72:	df 4f       	sbci	r29, 0xFF	; 255
   1be74:	39 83       	std	Y+1, r19	; 0x01
   1be76:	28 83       	st	Y, r18
   1be78:	cb 5b       	subi	r28, 0xBB	; 187
   1be7a:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3903
  long mil;
  uint16_t click_x, click_y;



  load_now = millis();
   1be7c:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1be80:	cb 54       	subi	r28, 0x4B	; 75
   1be82:	df 4f       	sbci	r29, 0xFF	; 255
   1be84:	68 83       	st	Y, r22
   1be86:	79 83       	std	Y+1, r23	; 0x01
   1be88:	8a 83       	std	Y+2, r24	; 0x02
   1be8a:	9b 83       	std	Y+3, r25	; 0x03
   1be8c:	c5 5b       	subi	r28, 0xB5	; 181
   1be8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3904
  if (mqtt_reconnect() == 0)
   1be90:	0e 94 ea a2 	call	0x145d4	; 0x145d4 <mqtt_reconnect()>
   1be94:	81 11       	cpse	r24, r1
   1be96:	8a c0       	rjmp	.+276    	; 0x1bfac <main+0x1ee>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3143
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1be98:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
   1be9c:	8f 7d       	andi	r24, 0xDF	; 223
   1be9e:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1bea2:	0e 94 9f d3 	call	0x1a73e	; 0x1a73e <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3912


  if (ethClient1.connected())
   1bea6:	83 e0       	ldi	r24, 0x03	; 3
   1bea8:	92 e1       	ldi	r25, 0x12	; 18
   1beaa:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <EthernetClient::connected()>
   1beae:	88 23       	and	r24, r24
   1beb0:	21 f0       	breq	.+8      	; 0x1beba <main+0xfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3913
    ethClient1.stop();
   1beb2:	83 e0       	ldi	r24, 0x03	; 3
   1beb4:	92 e1       	ldi	r25, 0x12	; 18
   1beb6:	0e 94 87 85 	call	0x10b0e	; 0x10b0e <EthernetClient::stop()>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  }
}

EthernetClient EthernetServer::available()
{
  accept();
   1beba:	85 ec       	ldi	r24, 0xC5	; 197
   1bebc:	9f e0       	ldi	r25, 0x0F	; 15
   1bebe:	0e 94 c9 85 	call	0x10b92	; 0x10b92 <EthernetServer::accept()>
   1bec2:	16 e0       	ldi	r17, 0x06	; 6
   1bec4:	a1 2e       	mov	r10, r17
   1bec6:	1b e0       	ldi	r17, 0x0B	; 11
   1bec8:	b1 2e       	mov	r11, r17
   1beca:	10 e0       	ldi	r17, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1becc:	08 ee       	ldi	r16, 0xE8	; 232
   1bece:	40 2e       	mov	r4, r16
   1bed0:	03 e0       	ldi	r16, 0x03	; 3
   1bed2:	50 2e       	mov	r5, r16
   1bed4:	61 2c       	mov	r6, r1
   1bed6:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   1bed8:	80 ed       	ldi	r24, 0xD0	; 208
   1beda:	88 2e       	mov	r8, r24
   1bedc:	82 e0       	ldi	r24, 0x02	; 2
   1bede:	98 2e       	mov	r9, r24
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1bee0:	1c 82       	std	Y+4, r1	; 0x04
   1bee2:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1bee4:	4d 82       	std	Y+5, r4	; 0x05
   1bee6:	5e 82       	std	Y+6, r5	; 0x06
   1bee8:	6f 82       	std	Y+7, r6	; 0x07
   1beea:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1beec:	9a 82       	std	Y+2, r9	; 0x02
   1beee:	89 82       	std	Y+1, r8	; 0x01
   1bef0:	1d 87       	std	Y+13, r17	; 0x0d
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1bef2:	f5 01       	movw	r30, r10
   1bef4:	21 91       	ld	r18, Z+
   1bef6:	31 91       	ld	r19, Z+
   1bef8:	5f 01       	movw	r10, r30
   1befa:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <http_server+0x4>
   1befe:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <http_server+0x5>
   1bf02:	28 17       	cp	r18, r24
   1bf04:	39 07       	cpc	r19, r25
   1bf06:	09 f0       	breq	.+2      	; 0x1bf0a <main+0x14c>
   1bf08:	5c c0       	rjmp	.+184    	; 0x1bfc2 <main+0x204>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
        (client.status() == SnSR::ESTABLISHED ||
   1bf0a:	ce 01       	movw	r24, r28
   1bf0c:	01 96       	adiw	r24, 0x01	; 1
   1bf0e:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1bf12:	87 31       	cpi	r24, 0x17	; 23
   1bf14:	09 f0       	breq	.+2      	; 0x1bf18 <main+0x15a>
   1bf16:	4e c0       	rjmp	.+156    	; 0x1bfb4 <main+0x1f6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   1bf18:	ce 01       	movw	r24, r28
   1bf1a:	01 96       	adiw	r24, 0x01	; 1
   1bf1c:	0e 94 db 56 	call	0xadb6	; 0xadb6 <EthernetClient::available()>
   1bf20:	89 2b       	or	r24, r25
   1bf22:	09 f4       	brne	.+2      	; 0x1bf26 <main+0x168>
   1bf24:	4e c0       	rjmp	.+156    	; 0x1bfc2 <main+0x204>
_ZN5PrintC2EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   1bf26:	8b 81       	ldd	r24, Y+3	; 0x03
   1bf28:	9c 81       	ldd	r25, Y+4	; 0x04
   1bf2a:	c7 56       	subi	r28, 0x67	; 103
   1bf2c:	df 4f       	sbci	r29, 0xFF	; 255
   1bf2e:	99 83       	std	Y+1, r25	; 0x01
   1bf30:	88 83       	st	Y, r24
   1bf32:	c9 59       	subi	r28, 0x99	; 153
   1bf34:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   1bf36:	8d 81       	ldd	r24, Y+5	; 0x05
   1bf38:	9e 81       	ldd	r25, Y+6	; 0x06
   1bf3a:	af 81       	ldd	r26, Y+7	; 0x07
   1bf3c:	b8 85       	ldd	r27, Y+8	; 0x08
   1bf3e:	c5 56       	subi	r28, 0x65	; 101
   1bf40:	df 4f       	sbci	r29, 0xFF	; 255
   1bf42:	88 83       	st	Y, r24
   1bf44:	99 83       	std	Y+1, r25	; 0x01
   1bf46:	aa 83       	std	Y+2, r26	; 0x02
   1bf48:	bb 83       	std	Y+3, r27	; 0x03
   1bf4a:	cb 59       	subi	r28, 0x9B	; 155
   1bf4c:	d0 40       	sbci	r29, 0x00	; 0
   1bf4e:	89 85       	ldd	r24, Y+9	; 0x09
   1bf50:	9a 85       	ldd	r25, Y+10	; 0x0a
   1bf52:	ab 85       	ldd	r26, Y+11	; 0x0b
   1bf54:	bc 85       	ldd	r27, Y+12	; 0x0c
   1bf56:	c1 56       	subi	r28, 0x61	; 97
   1bf58:	df 4f       	sbci	r29, 0xFF	; 255
   1bf5a:	88 83       	st	Y, r24
   1bf5c:	99 83       	std	Y+1, r25	; 0x01
   1bf5e:	aa 83       	std	Y+2, r26	; 0x02
   1bf60:	bb 83       	std	Y+3, r27	; 0x03
   1bf62:	cf 59       	subi	r28, 0x9F	; 159
   1bf64:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   1bf66:	80 ed       	ldi	r24, 0xD0	; 208
   1bf68:	92 e0       	ldi	r25, 0x02	; 2
   1bf6a:	c9 56       	subi	r28, 0x69	; 105
   1bf6c:	df 4f       	sbci	r29, 0xFF	; 255
   1bf6e:	99 83       	std	Y+1, r25	; 0x01
   1bf70:	88 83       	st	Y, r24
   1bf72:	c7 59       	subi	r28, 0x97	; 151
   1bf74:	d0 40       	sbci	r29, 0x00	; 0
   1bf76:	8d 85       	ldd	r24, Y+13	; 0x0d
   1bf78:	cd 55       	subi	r28, 0x5D	; 93
   1bf7a:	df 4f       	sbci	r29, 0xFF	; 255
   1bf7c:	88 83       	st	Y, r24
   1bf7e:	c3 5a       	subi	r28, 0xA3	; 163
   1bf80:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917


  EthernetClient http_client = http_server.available();
  if (http_client.connected())
   1bf82:	ce 01       	movw	r24, r28
   1bf84:	89 56       	subi	r24, 0x69	; 105
   1bf86:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf88:	0e 94 64 85 	call	0x10ac8	; 0x10ac8 <EthernetClient::connected()>
   1bf8c:	88 23       	and	r24, r24
   1bf8e:	09 f4       	brne	.+2      	; 0x1bf92 <main+0x1d4>
   1bf90:	45 c0       	rjmp	.+138    	; 0x1c01c <main+0x25e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3919
  {
    while (http_client.available())
   1bf92:	ce 01       	movw	r24, r28
   1bf94:	89 56       	subi	r24, 0x69	; 105
   1bf96:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf98:	0e 94 db 56 	call	0xadb6	; 0xadb6 <EthernetClient::available()>
   1bf9c:	89 2b       	or	r24, r25
   1bf9e:	a9 f1       	breq	.+106    	; 0x1c00a <main+0x24c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3920
      http_client.read();
   1bfa0:	ce 01       	movw	r24, r28
   1bfa2:	89 56       	subi	r24, 0x69	; 105
   1bfa4:	9f 4f       	sbci	r25, 0xFF	; 255
   1bfa6:	0e 94 1d 87 	call	0x10e3a	; 0x10e3a <EthernetClient::read()>
   1bfaa:	f3 cf       	rjmp	.-26     	; 0x1bf92 <main+0x1d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3907

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   1bfac:	85 e0       	ldi	r24, 0x05	; 5
   1bfae:	0e 94 0d 51 	call	0xa21a	; 0xa21a <selftest_set_0(unsigned char)>
   1bfb2:	77 cf       	rjmp	.-274    	; 0x1bea2 <main+0xe4>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   1bfb4:	ce 01       	movw	r24, r28
   1bfb6:	01 96       	adiw	r24, 0x01	; 1
   1bfb8:	0e 94 5a 85 	call	0x10ab4	; 0x10ab4 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   1bfbc:	8c 31       	cpi	r24, 0x1C	; 28
   1bfbe:	09 f4       	brne	.+2      	; 0x1bfc2 <main+0x204>
   1bfc0:	ab cf       	rjmp	.-170    	; 0x1bf18 <main+0x15a>
   1bfc2:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1bfc4:	18 30       	cpi	r17, 0x08	; 8
   1bfc6:	09 f0       	breq	.+2      	; 0x1bfca <main+0x20c>
   1bfc8:	8b cf       	rjmp	.-234    	; 0x1bee0 <main+0x122>
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1bfca:	c7 56       	subi	r28, 0x67	; 103
   1bfcc:	df 4f       	sbci	r29, 0xFF	; 255
   1bfce:	19 82       	std	Y+1, r1	; 0x01
   1bfd0:	18 82       	st	Y, r1
   1bfd2:	c9 59       	subi	r28, 0x99	; 153
   1bfd4:	d0 40       	sbci	r29, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1bfd6:	88 ee       	ldi	r24, 0xE8	; 232
   1bfd8:	93 e0       	ldi	r25, 0x03	; 3
   1bfda:	a0 e0       	ldi	r26, 0x00	; 0
   1bfdc:	b0 e0       	ldi	r27, 0x00	; 0
   1bfde:	c5 56       	subi	r28, 0x65	; 101
   1bfe0:	df 4f       	sbci	r29, 0xFF	; 255
   1bfe2:	88 83       	st	Y, r24
   1bfe4:	99 83       	std	Y+1, r25	; 0x01
   1bfe6:	aa 83       	std	Y+2, r26	; 0x02
   1bfe8:	bb 83       	std	Y+3, r27	; 0x03
   1bfea:	cb 59       	subi	r28, 0x9B	; 155
   1bfec:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1bfee:	80 ed       	ldi	r24, 0xD0	; 208
   1bff0:	92 e0       	ldi	r25, 0x02	; 2
   1bff2:	c9 56       	subi	r28, 0x69	; 105
   1bff4:	df 4f       	sbci	r29, 0xFF	; 255
   1bff6:	99 83       	std	Y+1, r25	; 0x01
   1bff8:	88 83       	st	Y, r24
   1bffa:	c7 59       	subi	r28, 0x97	; 151
   1bffc:	d0 40       	sbci	r29, 0x00	; 0
   1bffe:	cd 55       	subi	r28, 0x5D	; 93
   1c000:	df 4f       	sbci	r29, 0xFF	; 255
   1c002:	18 83       	st	Y, r17
   1c004:	c3 5a       	subi	r28, 0xA3	; 163
   1c006:	d0 40       	sbci	r29, 0x00	; 0
   1c008:	bc cf       	rjmp	.-136    	; 0x1bf82 <main+0x1c4>
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   1c00a:	44 e0       	ldi	r20, 0x04	; 4
   1c00c:	50 e0       	ldi	r21, 0x00	; 0
   1c00e:	69 ed       	ldi	r22, 0xD9	; 217
   1c010:	76 e0       	ldi	r23, 0x06	; 6
   1c012:	ce 01       	movw	r24, r28
   1c014:	89 56       	subi	r24, 0x69	; 105
   1c016:	9f 4f       	sbci	r25, 0xFF	; 255
   1c018:	0e 94 a1 8b 	call	0x11742	; 0x11742 <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3929





  if (scan_rf_net_enable == 2)
   1c01c:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <scan_rf_net_enable>
   1c020:	82 30       	cpi	r24, 0x02	; 2
   1c022:	09 f0       	breq	.+2      	; 0x1c026 <main+0x268>
   1c024:	da c0       	rjmp	.+436    	; 0x1c1da <main+0x41c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3931
  {
    scan_rf_net_enable = 0;
   1c026:	10 92 4b 0c 	sts	0x0C4B, r1	; 0x800c4b <scan_rf_net_enable>
get_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:365

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(RF24_NOP);
   1c02a:	8f ef       	ldi	r24, 0xFF	; 255
   1c02c:	0e 94 90 d3 	call	0x1a720	; 0x1a720 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
print_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1c030:	28 2f       	mov	r18, r24
   1c032:	30 e0       	ldi	r19, 0x00	; 0
   1c034:	98 2f       	mov	r25, r24
   1c036:	91 70       	andi	r25, 0x01	; 1
   1c038:	1f 92       	push	r1
   1c03a:	9f 93       	push	r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:377
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0x07),
   1c03c:	a9 01       	movw	r20, r18
   1c03e:	55 95       	asr	r21
   1c040:	47 95       	ror	r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1c042:	47 70       	andi	r20, 0x07	; 7
   1c044:	55 27       	eor	r21, r21
   1c046:	5f 93       	push	r21
   1c048:	4f 93       	push	r20
   1c04a:	84 fb       	bst	r24, 4
   1c04c:	99 27       	eor	r25, r25
   1c04e:	90 f9       	bld	r25, 0
   1c050:	1f 92       	push	r1
   1c052:	9f 93       	push	r25
   1c054:	85 fb       	bst	r24, 5
   1c056:	99 27       	eor	r25, r25
   1c058:	90 f9       	bld	r25, 0
   1c05a:	1f 92       	push	r1
   1c05c:	9f 93       	push	r25
   1c05e:	86 fb       	bst	r24, 6
   1c060:	22 27       	eor	r18, r18
   1c062:	20 f9       	bld	r18, 0
   1c064:	1f 92       	push	r1
   1c066:	2f 93       	push	r18
   1c068:	1f 92       	push	r1
   1c06a:	8f 93       	push	r24
   1c06c:	8a e1       	ldi	r24, 0x1A	; 26
   1c06e:	97 e8       	ldi	r25, 0x87	; 135
   1c070:	9f 93       	push	r25
   1c072:	8f 93       	push	r24
   1c074:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:567
 
#endif //Linux

  print_status(get_status());

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   1c078:	42 e0       	ldi	r20, 0x02	; 2
   1c07a:	6a e0       	ldi	r22, 0x0A	; 10
   1c07c:	85 e1       	ldi	r24, 0x15	; 21
   1c07e:	98 e8       	ldi	r25, 0x88	; 136
   1c080:	0e 94 4e db 	call	0x1b69c	; 0x1b69c <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   1c084:	44 e0       	ldi	r20, 0x04	; 4
   1c086:	6c e0       	ldi	r22, 0x0C	; 12
   1c088:	88 e0       	ldi	r24, 0x08	; 8
   1c08a:	98 e8       	ldi	r25, 0x88	; 136
   1c08c:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   1c090:	41 e0       	ldi	r20, 0x01	; 1
   1c092:	60 e1       	ldi	r22, 0x10	; 16
   1c094:	8f ef       	ldi	r24, 0xFF	; 255
   1c096:	97 e8       	ldi	r25, 0x87	; 135
   1c098:	0e 94 4e db 	call	0x1b69c	; 0x1b69c <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   1c09c:	46 e0       	ldi	r20, 0x06	; 6
   1c09e:	61 e1       	ldi	r22, 0x11	; 17
   1c0a0:	84 ef       	ldi	r24, 0xF4	; 244
   1c0a2:	97 e8       	ldi	r25, 0x87	; 135
   1c0a4:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   1c0a8:	41 e0       	ldi	r20, 0x01	; 1
   1c0aa:	61 e0       	ldi	r22, 0x01	; 1
   1c0ac:	8d ee       	ldi	r24, 0xED	; 237
   1c0ae:	97 e8       	ldi	r25, 0x87	; 135
   1c0b0:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   1c0b4:	41 e0       	ldi	r20, 0x01	; 1
   1c0b6:	62 e0       	ldi	r22, 0x02	; 2
   1c0b8:	83 ee       	ldi	r24, 0xE3	; 227
   1c0ba:	97 e8       	ldi	r25, 0x87	; 135
   1c0bc:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   1c0c0:	41 e0       	ldi	r20, 0x01	; 1
   1c0c2:	65 e0       	ldi	r22, 0x05	; 5
   1c0c4:	8c ed       	ldi	r24, 0xDC	; 220
   1c0c6:	97 e8       	ldi	r25, 0x87	; 135
   1c0c8:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   1c0cc:	41 e0       	ldi	r20, 0x01	; 1
   1c0ce:	66 e0       	ldi	r22, 0x06	; 6
   1c0d0:	83 ed       	ldi	r24, 0xD3	; 211
   1c0d2:	97 e8       	ldi	r25, 0x87	; 135
   1c0d4:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   1c0d8:	41 e0       	ldi	r20, 0x01	; 1
   1c0da:	60 e0       	ldi	r22, 0x00	; 0
   1c0dc:	8b ec       	ldi	r24, 0xCB	; 203
   1c0de:	97 e8       	ldi	r25, 0x87	; 135
   1c0e0:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   1c0e4:	42 e0       	ldi	r20, 0x02	; 2
   1c0e6:	6c e1       	ldi	r22, 0x1C	; 28
   1c0e8:	8d eb       	ldi	r24, 0xBD	; 189
   1c0ea:	97 e8       	ldi	r25, 0x87	; 135
   1c0ec:	0e 94 16 db 	call	0x1b62c	; 0x1b62c <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1512
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
   1c0f0:	86 e0       	ldi	r24, 0x06	; 6
   1c0f2:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   1c0f6:	88 72       	andi	r24, 0x28	; 40
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1c0f8:	0f b6       	in	r0, 0x3f	; 63
   1c0fa:	f8 94       	cli
   1c0fc:	de bf       	out	0x3e, r29	; 62
   1c0fe:	0f be       	out	0x3f, r0	; 63
   1c100:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1c102:	e2 e0       	ldi	r30, 0x02	; 2
   1c104:	f0 e0       	ldi	r31, 0x00	; 0
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1c106:	80 32       	cpi	r24, 0x20	; 32
   1c108:	39 f0       	breq	.+14     	; 0x1c118 <main+0x35a>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1521
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
   1c10a:	21 e0       	ldi	r18, 0x01	; 1
   1c10c:	90 e0       	ldi	r25, 0x00	; 0
   1c10e:	88 30       	cpi	r24, 0x08	; 8
   1c110:	09 f0       	breq	.+2      	; 0x1c114 <main+0x356>
   1c112:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1c114:	e2 2f       	mov	r30, r18
   1c116:	f9 2f       	mov	r31, r25
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:579
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   1c118:	ee 0f       	add	r30, r30
   1c11a:	ff 1f       	adc	r31, r31
   1c11c:	e9 54       	subi	r30, 0x49	; 73
   1c11e:	f8 47       	sbci	r31, 0x78	; 120
   1c120:	85 91       	lpm	r24, Z+
   1c122:	94 91       	lpm	r25, Z
   1c124:	9f 93       	push	r25
   1c126:	8f 93       	push	r24
   1c128:	85 ea       	ldi	r24, 0xA5	; 165
   1c12a:	97 e8       	ldi	r25, 0x87	; 135
   1c12c:	9f 93       	push	r25
   1c12e:	8f 93       	push	r24
   1c130:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   1c134:	e0 91 b3 0f 	lds	r30, 0x0FB3	; 0x800fb3 <radio+0x6>
   1c138:	f0 e0       	ldi	r31, 0x00	; 0
   1c13a:	ee 0f       	add	r30, r30
   1c13c:	ff 1f       	adc	r31, r31
   1c13e:	ef 55       	subi	r30, 0x5F	; 95
   1c140:	f8 47       	sbci	r31, 0x78	; 120
   1c142:	85 91       	lpm	r24, Z+
   1c144:	94 91       	lpm	r25, Z
   1c146:	9f 93       	push	r25
   1c148:	8f 93       	push	r24
   1c14a:	82 e9       	ldi	r24, 0x92	; 146
   1c14c:	97 e8       	ldi	r25, 0x87	; 135
   1c14e:	9f 93       	push	r25
   1c150:	8f 93       	push	r24
   1c152:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   1c156:	80 e0       	ldi	r24, 0x00	; 0
   1c158:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   1c15c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   1c15e:	81 e0       	ldi	r24, 0x01	; 1
   1c160:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   1c164:	0f b6       	in	r0, 0x3f	; 63
   1c166:	f8 94       	cli
   1c168:	de bf       	out	0x3e, r29	; 62
   1c16a:	0f be       	out	0x3f, r0	; 63
   1c16c:	cd bf       	out	0x3d, r28	; 61
   1c16e:	13 fd       	sbrc	r17, 3
   1c170:	04 c0       	rjmp	.+8      	; 0x1c17a <main+0x3bc>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   1c172:	f0 e0       	ldi	r31, 0x00	; 0
   1c174:	e0 e0       	ldi	r30, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
   1c176:	88 23       	and	r24, r24
   1c178:	31 f0       	breq	.+12     	; 0x1c186 <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
   1c17a:	e2 e0       	ldi	r30, 0x02	; 2
   1c17c:	f0 e0       	ldi	r31, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   1c17e:	12 fd       	sbrc	r17, 2
   1c180:	02 c0       	rjmp	.+4      	; 0x1c186 <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   1c182:	e1 e0       	ldi	r30, 0x01	; 1
   1c184:	f0 e0       	ldi	r31, 0x00	; 0
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   1c186:	ee 0f       	add	r30, r30
   1c188:	ff 1f       	adc	r31, r31
   1c18a:	e4 57       	subi	r30, 0x74	; 116
   1c18c:	f8 47       	sbci	r31, 0x78	; 120
   1c18e:	85 91       	lpm	r24, Z+
   1c190:	94 91       	lpm	r25, Z
   1c192:	9f 93       	push	r25
   1c194:	8f 93       	push	r24
   1c196:	89 e7       	ldi	r24, 0x79	; 121
   1c198:	97 e8       	ldi	r25, 0x87	; 135
   1c19a:	9f 93       	push	r25
   1c19c:	8f 93       	push	r24
   1c19e:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
getPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1454
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
   1c1a2:	86 e0       	ldi	r24, 0x06	; 6
   1c1a4:	0e 94 7d d3 	call	0x1a6fa	; 0x1a6fa <RF24::read_register(unsigned char) [clone .constprop.107]>
   1c1a8:	e8 2f       	mov	r30, r24
   1c1aa:	f0 e0       	ldi	r31, 0x00	; 0
   1c1ac:	f5 95       	asr	r31
   1c1ae:	e7 95       	ror	r30
   1c1b0:	e3 70       	andi	r30, 0x03	; 3
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   1c1b2:	f0 e0       	ldi	r31, 0x00	; 0
   1c1b4:	ee 0f       	add	r30, r30
   1c1b6:	ff 1f       	adc	r31, r31
   1c1b8:	ef 58       	subi	r30, 0x8F	; 143
   1c1ba:	f8 47       	sbci	r31, 0x78	; 120
   1c1bc:	85 91       	lpm	r24, Z+
   1c1be:	94 91       	lpm	r25, Z
   1c1c0:	9f 93       	push	r25
   1c1c2:	8f 93       	push	r24
   1c1c4:	80 e6       	ldi	r24, 0x60	; 96
   1c1c6:	97 e8       	ldi	r25, 0x87	; 135
   1c1c8:	9f 93       	push	r25
   1c1ca:	8f 93       	push	r24
   1c1cc:	0e 94 3a f2 	call	0x1e474	; 0x1e474 <printf_P>
   1c1d0:	0f b6       	in	r0, 0x3f	; 63
   1c1d2:	f8 94       	cli
   1c1d4:	de bf       	out	0x3e, r29	; 62
   1c1d6:	0f be       	out	0x3f, r0	; 63
   1c1d8:	cd bf       	out	0x3d, r28	; 61
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   1c1da:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1c1de:	00 91 47 0c 	lds	r16, 0x0C47	; 0x800c47 <milis_10s>
   1c1e2:	10 91 48 0c 	lds	r17, 0x0C48	; 0x800c48 <milis_10s+0x1>
   1c1e6:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <milis_10s+0x2>
   1c1ea:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <milis_10s+0x3>
   1c1ee:	ab 01       	movw	r20, r22
   1c1f0:	bc 01       	movw	r22, r24
   1c1f2:	40 1b       	sub	r20, r16
   1c1f4:	51 0b       	sbc	r21, r17
   1c1f6:	62 0b       	sbc	r22, r18
   1c1f8:	73 0b       	sbc	r23, r19
   1c1fa:	40 31       	cpi	r20, 0x10	; 16
   1c1fc:	57 42       	sbci	r21, 0x27	; 39
   1c1fe:	61 05       	cpc	r22, r1
   1c200:	71 05       	cpc	r23, r1
   1c202:	08 f4       	brcc	.+2      	; 0x1c206 <main+0x448>
   1c204:	25 c7       	rjmp	.+3658   	; 0x1d050 <main+0x1292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
  {
    milis_10s += 10000;
   1c206:	d9 01       	movw	r26, r18
   1c208:	c8 01       	movw	r24, r16
   1c20a:	80 5f       	subi	r24, 0xF0	; 240
   1c20c:	98 4d       	sbci	r25, 0xD8	; 216
   1c20e:	af 4f       	sbci	r26, 0xFF	; 255
   1c210:	bf 4f       	sbci	r27, 0xFF	; 255
   1c212:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <milis_10s>
   1c216:	90 93 48 0c 	sts	0x0C48, r25	; 0x800c48 <milis_10s+0x1>
   1c21a:	a0 93 49 0c 	sts	0x0C49, r26	; 0x800c49 <milis_10s+0x2>
   1c21e:	b0 93 4a 0c 	sts	0x0C4A, r27	; 0x800c4a <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
    menu_redraw10s = 1;
   1c222:	81 e0       	ldi	r24, 0x01	; 1
   1c224:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2775
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   1c228:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c22c:	4a e0       	ldi	r20, 0x0A	; 10
   1c22e:	fe 01       	movw	r30, r28
   1c230:	31 96       	adiw	r30, 0x01	; 1
   1c232:	5f 01       	movw	r10, r30
   1c234:	bf 01       	movw	r22, r30
   1c236:	90 e0       	ldi	r25, 0x00	; 0
   1c238:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   1c23c:	a5 01       	movw	r20, r10
   1c23e:	6e ed       	ldi	r22, 0xDE	; 222
   1c240:	76 e0       	ldi	r23, 0x06	; 6
   1c242:	8b ec       	ldi	r24, 0xCB	; 203
   1c244:	9f e0       	ldi	r25, 0x0F	; 15
   1c246:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1c24a:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1c24c:	3b e0       	ldi	r19, 0x0B	; 11
   1c24e:	f3 2e       	mov	r15, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1c250:	80 91 9c 0c 	lds	r24, 0x0C9C	; 0x800c9c <Global_HWwirenum>
   1c254:	18 17       	cp	r17, r24
   1c256:	b0 f5       	brcc	.+108    	; 0x1c2c4 <main+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1c258:	1f 9d       	mul	r17, r15
   1c25a:	c0 01       	movw	r24, r0
   1c25c:	11 24       	eor	r1, r1
   1c25e:	9c 01       	movw	r18, r24
   1c260:	26 5a       	subi	r18, 0xA6	; 166
   1c262:	33 4f       	sbci	r19, 0xF3	; 243
   1c264:	49 01       	movw	r8, r18
   1c266:	00 e1       	ldi	r16, 0x10	; 16
   1c268:	28 e0       	ldi	r18, 0x08	; 8
   1c26a:	a4 01       	movw	r20, r8
   1c26c:	6a e3       	ldi	r22, 0x3A	; 58
   1c26e:	c5 01       	movw	r24, r10
   1c270:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   1c274:	95 01       	movw	r18, r10
   1c276:	4a ee       	ldi	r20, 0xEA	; 234
   1c278:	56 e0       	ldi	r21, 0x06	; 6
   1c27a:	61 2f       	mov	r22, r17
   1c27c:	8e ee       	ldi	r24, 0xEE	; 238
   1c27e:	96 e0       	ldi	r25, 0x06	; 6
   1c280:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   1c284:	f4 01       	movw	r30, r8
   1c286:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c288:	4a e0       	ldi	r20, 0x0A	; 10
   1c28a:	b5 01       	movw	r22, r10
   1c28c:	90 e0       	ldi	r25, 0x00	; 0
   1c28e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   1c292:	95 01       	movw	r18, r10
   1c294:	44 ef       	ldi	r20, 0xF4	; 244
   1c296:	56 e0       	ldi	r21, 0x06	; 6
   1c298:	61 2f       	mov	r22, r17
   1c29a:	8e ee       	ldi	r24, 0xEE	; 238
   1c29c:	96 e0       	ldi	r25, 0x06	; 6
   1c29e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2785
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   1c2a2:	f4 01       	movw	r30, r8
   1c2a4:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c2a6:	4a e0       	ldi	r20, 0x0A	; 10
   1c2a8:	b5 01       	movw	r22, r10
   1c2aa:	90 e0       	ldi	r25, 0x00	; 0
   1c2ac:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2786
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   1c2b0:	95 01       	movw	r18, r10
   1c2b2:	4d ef       	ldi	r20, 0xFD	; 253
   1c2b4:	56 e0       	ldi	r21, 0x06	; 6
   1c2b6:	61 2f       	mov	r22, r17
   1c2b8:	8e ee       	ldi	r24, 0xEE	; 238
   1c2ba:	96 e0       	ldi	r25, 0x06	; 6
   1c2bc:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1c2c0:	1f 5f       	subi	r17, 0xFF	; 255
   1c2c2:	c6 cf       	rjmp	.-116    	; 0x1c250 <main+0x492>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:319
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1c2c4:	8b ec       	ldi	r24, 0xCB	; 203
   1c2c6:	9f e0       	ldi	r25, 0x0F	; 15
   1c2c8:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   1c2cc:	88 23       	and	r24, r24
   1c2ce:	09 f4       	brne	.+2      	; 0x1c2d2 <main+0x514>
   1c2d0:	95 c0       	rjmp	.+298    	; 0x1c3fc <main+0x63e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:321
  {
    strcpy_P(str_topic, status_mqtt_send);
   1c2d2:	6b e7       	ldi	r22, 0x7B	; 123
   1c2d4:	78 e8       	ldi	r23, 0x88	; 136
   1c2d6:	ce 01       	movw	r24, r28
   1c2d8:	8f 5b       	subi	r24, 0xBF	; 191
   1c2da:	9f 4f       	sbci	r25, 0xFF	; 255
   1c2dc:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c2e0:	4a e0       	ldi	r20, 0x0A	; 10
   1c2e2:	b5 01       	movw	r22, r10
   1c2e4:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <mqtt_send_message>
   1c2e8:	90 91 57 0c 	lds	r25, 0x0C57	; 0x800c57 <mqtt_send_message+0x1>
   1c2ec:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:323
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1c2f0:	10 92 57 0c 	sts	0x0C57, r1	; 0x800c57 <mqtt_send_message+0x1>
   1c2f4:	10 92 56 0c 	sts	0x0C56, r1	; 0x800c56 <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:324
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c2f8:	a5 01       	movw	r20, r10
   1c2fa:	be 01       	movw	r22, r28
   1c2fc:	6f 5b       	subi	r22, 0xBF	; 191
   1c2fe:	7f 4f       	sbci	r23, 0xFF	; 255
   1c300:	8b ec       	ldi	r24, 0xCB	; 203
   1c302:	9f e0       	ldi	r25, 0x0F	; 15
   1c304:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:326
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1c308:	69 e6       	ldi	r22, 0x69	; 105
   1c30a:	78 e8       	ldi	r23, 0x88	; 136
   1c30c:	ce 01       	movw	r24, r28
   1c30e:	8f 5b       	subi	r24, 0xBF	; 191
   1c310:	9f 4f       	sbci	r25, 0xFF	; 255
   1c312:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c316:	4a e0       	ldi	r20, 0x0A	; 10
   1c318:	b5 01       	movw	r22, r10
   1c31a:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <mqtt_error>
   1c31e:	90 91 59 0c 	lds	r25, 0x0C59	; 0x800c59 <mqtt_error+0x1>
   1c322:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:328
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c326:	a5 01       	movw	r20, r10
   1c328:	be 01       	movw	r22, r28
   1c32a:	6f 5b       	subi	r22, 0xBF	; 191
   1c32c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c32e:	8b ec       	ldi	r24, 0xCB	; 203
   1c330:	9f e0       	ldi	r25, 0x0F	; 15
   1c332:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:330
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   1c336:	65 e5       	ldi	r22, 0x55	; 85
   1c338:	78 e8       	ldi	r23, 0x88	; 136
   1c33a:	ce 01       	movw	r24, r28
   1c33c:	8f 5b       	subi	r24, 0xBF	; 191
   1c33e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c340:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c344:	4a e0       	ldi	r20, 0x0A	; 10
   1c346:	b5 01       	movw	r22, r10
   1c348:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <mqtt_receive_message>
   1c34c:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <mqtt_receive_message+0x1>
   1c350:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:332
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   1c354:	10 92 19 0b 	sts	0x0B19, r1	; 0x800b19 <mqtt_receive_message+0x1>
   1c358:	10 92 18 0b 	sts	0x0B18, r1	; 0x800b18 <mqtt_receive_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:333
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c35c:	a5 01       	movw	r20, r10
   1c35e:	be 01       	movw	r22, r28
   1c360:	6f 5b       	subi	r22, 0xBF	; 191
   1c362:	7f 4f       	sbci	r23, 0xFF	; 255
   1c364:	8b ec       	ldi	r24, 0xCB	; 203
   1c366:	9f e0       	ldi	r25, 0x0F	; 15
   1c368:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:335
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1c36c:	61 e4       	ldi	r22, 0x41	; 65
   1c36e:	78 e8       	ldi	r23, 0x88	; 136
   1c370:	ce 01       	movw	r24, r28
   1c372:	8f 5b       	subi	r24, 0xBF	; 191
   1c374:	9f 4f       	sbci	r25, 0xFF	; 255
   1c376:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c37a:	4a e0       	ldi	r20, 0x0A	; 10
   1c37c:	b5 01       	movw	r22, r10
   1c37e:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <mqtt_process_message>
   1c382:	90 91 17 0b 	lds	r25, 0x0B17	; 0x800b17 <mqtt_process_message+0x1>
   1c386:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:337
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   1c38a:	10 92 17 0b 	sts	0x0B17, r1	; 0x800b17 <mqtt_process_message+0x1>
   1c38e:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <mqtt_process_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:338
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c392:	a5 01       	movw	r20, r10
   1c394:	be 01       	movw	r22, r28
   1c396:	6f 5b       	subi	r22, 0xBF	; 191
   1c398:	7f 4f       	sbci	r23, 0xFF	; 255
   1c39a:	8b ec       	ldi	r24, 0xCB	; 203
   1c39c:	9f e0       	ldi	r25, 0x0F	; 15
   1c39e:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:340

    payload[0] = 0;
   1c3a2:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:341
    createString(payload, '.', device.myIP, 4, 10);
   1c3a4:	0a e0       	ldi	r16, 0x0A	; 10
   1c3a6:	24 e0       	ldi	r18, 0x04	; 4
   1c3a8:	4b eb       	ldi	r20, 0xBB	; 187
   1c3aa:	5d e0       	ldi	r21, 0x0D	; 13
   1c3ac:	6e e2       	ldi	r22, 0x2E	; 46
   1c3ae:	c5 01       	movw	r24, r10
   1c3b0:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:342
    strcpy_P(str_topic, network_ip);
   1c3b4:	66 e3       	ldi	r22, 0x36	; 54
   1c3b6:	78 e8       	ldi	r23, 0x88	; 136
   1c3b8:	ce 01       	movw	r24, r28
   1c3ba:	8f 5b       	subi	r24, 0xBF	; 191
   1c3bc:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3be:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:343
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c3c2:	a5 01       	movw	r20, r10
   1c3c4:	be 01       	movw	r22, r28
   1c3c6:	6f 5b       	subi	r22, 0xBF	; 191
   1c3c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3ca:	8b ec       	ldi	r24, 0xCB	; 203
   1c3cc:	9f e0       	ldi	r25, 0x0F	; 15
   1c3ce:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:345

    strcpy_P(str_topic, status_know_devices);
   1c3d2:	62 e2       	ldi	r22, 0x22	; 34
   1c3d4:	78 e8       	ldi	r23, 0x88	; 136
   1c3d6:	ce 01       	movw	r24, r28
   1c3d8:	8f 5b       	subi	r24, 0xBF	; 191
   1c3da:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3dc:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c3e0:	4a e0       	ldi	r20, 0x0A	; 10
   1c3e2:	b5 01       	movw	r22, r10
   1c3e4:	90 e0       	ldi	r25, 0x00	; 0
   1c3e6:	80 e0       	ldi	r24, 0x00	; 0
   1c3e8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:347
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1c3ec:	a5 01       	movw	r20, r10
   1c3ee:	be 01       	movw	r22, r28
   1c3f0:	6f 5b       	subi	r22, 0xBF	; 191
   1c3f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3f4:	8b ec       	ldi	r24, 0xCB	; 203
   1c3f6:	9f e0       	ldi	r25, 0x0F	; 15
   1c3f8:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:349
  }
  mqtt_error = 0;
   1c3fc:	10 92 59 0c 	sts	0x0C59, r1	; 0x800c59 <mqtt_error+0x1>
   1c400:	10 92 58 0c 	sts	0x0C58, r1	; 0x800c58 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1c404:	8b ec       	ldi	r24, 0xCB	; 203
   1c406:	9f e0       	ldi	r25, 0x0F	; 15
   1c408:	0e 94 61 6a 	call	0xd4c2	; 0xd4c2 <PubSubClient::connected()>
   1c40c:	88 23       	and	r24, r24
   1c40e:	09 f4       	brne	.+2      	; 0x1c412 <main+0x654>
   1c410:	70 c1       	rjmp	.+736    	; 0x1c6f2 <main+0x934>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
  {
    strcpy(str_topic, "status/uptime");
   1c412:	65 e0       	ldi	r22, 0x05	; 5
   1c414:	77 e0       	ldi	r23, 0x07	; 7
   1c416:	ce 01       	movw	r24, r28
   1c418:	8f 5b       	subi	r24, 0xBF	; 191
   1c41a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c41c:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
    sprintf(payload, "%ld", uptime);
   1c420:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <uptime+0x3>
   1c424:	8f 93       	push	r24
   1c426:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <uptime+0x2>
   1c42a:	8f 93       	push	r24
   1c42c:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <uptime+0x1>
   1c430:	8f 93       	push	r24
   1c432:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <uptime>
   1c436:	8f 93       	push	r24
   1c438:	83 e1       	ldi	r24, 0x13	; 19
   1c43a:	97 e0       	ldi	r25, 0x07	; 7
   1c43c:	9f 93       	push	r25
   1c43e:	8f 93       	push	r24
   1c440:	bf 92       	push	r11
   1c442:	af 92       	push	r10
   1c444:	0e 94 95 fe 	call	0x1fd2a	; 0x1fd2a <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c448:	a5 01       	movw	r20, r10
   1c44a:	be 01       	movw	r22, r28
   1c44c:	6f 5b       	subi	r22, 0xBF	; 191
   1c44e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c450:	8b ec       	ldi	r24, 0xCB	; 203
   1c452:	9f e0       	ldi	r25, 0x0F	; 15
   1c454:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2801
    ///
    strcpy(str_topic, "status/brigthness");
   1c458:	67 e1       	ldi	r22, 0x17	; 23
   1c45a:	77 e0       	ldi	r23, 0x07	; 7
   1c45c:	ce 01       	movw	r24, r28
   1c45e:	8f 5b       	subi	r24, 0xBF	; 191
   1c460:	9f 4f       	sbci	r25, 0xFF	; 255
   1c462:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
    itoa(brigthness_display_values, payload, 10);
   1c466:	80 91 23 0b 	lds	r24, 0x0B23	; 0x800b23 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c46a:	4a e0       	ldi	r20, 0x0A	; 10
   1c46c:	b5 01       	movw	r22, r10
   1c46e:	90 e0       	ldi	r25, 0x00	; 0
   1c470:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c474:	a5 01       	movw	r20, r10
   1c476:	be 01       	movw	r22, r28
   1c478:	6f 5b       	subi	r22, 0xBF	; 191
   1c47a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c47c:	8b ec       	ldi	r24, 0xCB	; 203
   1c47e:	9f e0       	ldi	r25, 0x0F	; 15
   1c480:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2805
    ///
    strcpy(str_topic, "status/light");
   1c484:	69 e2       	ldi	r22, 0x29	; 41
   1c486:	77 e0       	ldi	r23, 0x07	; 7
   1c488:	ce 01       	movw	r24, r28
   1c48a:	8f 5b       	subi	r24, 0xBF	; 191
   1c48c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c48e:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c492:	4a e0       	ldi	r20, 0x0A	; 10
   1c494:	b5 01       	movw	r22, r10
   1c496:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <light_curr>
   1c49a:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <light_curr+0x1>
   1c49e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c4a2:	a5 01       	movw	r20, r10
   1c4a4:	be 01       	movw	r22, r28
   1c4a6:	6f 5b       	subi	r22, 0xBF	; 191
   1c4a8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4aa:	8b ec       	ldi	r24, 0xCB	; 203
   1c4ac:	9f e0       	ldi	r25, 0x0F	; 15
   1c4ae:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
    ///
    strcpy(str_topic, "status/auto_brigthness");
   1c4b2:	66 e3       	ldi	r22, 0x36	; 54
   1c4b4:	77 e0       	ldi	r23, 0x07	; 7
   1c4b6:	ce 01       	movw	r24, r28
   1c4b8:	8f 5b       	subi	r24, 0xBF	; 191
   1c4ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4bc:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
    itoa(brigthness_display_auto_values, payload, 10);
   1c4c0:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <brigthness_display_auto_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c4c4:	4a e0       	ldi	r20, 0x0A	; 10
   1c4c6:	b5 01       	movw	r22, r10
   1c4c8:	90 e0       	ldi	r25, 0x00	; 0
   1c4ca:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2811
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c4ce:	a5 01       	movw	r20, r10
   1c4d0:	be 01       	movw	r22, r28
   1c4d2:	6f 5b       	subi	r22, 0xBF	; 191
   1c4d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4d6:	8b ec       	ldi	r24, 0xCB	; 203
   1c4d8:	9f e0       	ldi	r25, 0x0F	; 15
   1c4da:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2813
    ///
    strcpy(str_topic, "status/load_min");
   1c4de:	6d e4       	ldi	r22, 0x4D	; 77
   1c4e0:	77 e0       	ldi	r23, 0x07	; 7
   1c4e2:	ce 01       	movw	r24, r28
   1c4e4:	8f 5b       	subi	r24, 0xBF	; 191
   1c4e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4e8:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c4ec:	4a e0       	ldi	r20, 0x0A	; 10
   1c4ee:	b5 01       	movw	r22, r10
   1c4f0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <load_min>
   1c4f4:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <load_min+0x1>
   1c4f8:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2815
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c4fc:	a5 01       	movw	r20, r10
   1c4fe:	be 01       	movw	r22, r28
   1c500:	6f 5b       	subi	r22, 0xBF	; 191
   1c502:	7f 4f       	sbci	r23, 0xFF	; 255
   1c504:	8b ec       	ldi	r24, 0xCB	; 203
   1c506:	9f e0       	ldi	r25, 0x0F	; 15
   1c508:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2817
    ///
    strcpy(str_topic, "status/load_max");
   1c50c:	6d e5       	ldi	r22, 0x5D	; 93
   1c50e:	77 e0       	ldi	r23, 0x07	; 7
   1c510:	ce 01       	movw	r24, r28
   1c512:	8f 5b       	subi	r24, 0xBF	; 191
   1c514:	9f 4f       	sbci	r25, 0xFF	; 255
   1c516:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c51a:	4a e0       	ldi	r20, 0x0A	; 10
   1c51c:	b5 01       	movw	r22, r10
   1c51e:	80 91 21 0c 	lds	r24, 0x0C21	; 0x800c21 <load_max>
   1c522:	90 91 22 0c 	lds	r25, 0x0C22	; 0x800c22 <load_max+0x1>
   1c526:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c52a:	a5 01       	movw	r20, r10
   1c52c:	be 01       	movw	r22, r28
   1c52e:	6f 5b       	subi	r22, 0xBF	; 191
   1c530:	7f 4f       	sbci	r23, 0xFF	; 255
   1c532:	8b ec       	ldi	r24, 0xCB	; 203
   1c534:	9f e0       	ldi	r25, 0x0F	; 15
   1c536:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
    ///
    load_max = 0;
   1c53a:	10 92 21 0c 	sts	0x0C21, r1	; 0x800c21 <load_max>
   1c53e:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <load_max+0x1>
   1c542:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <load_max+0x2>
   1c546:	10 92 24 0c 	sts	0x0C24, r1	; 0x800c24 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
    load_min = 0xffffffff;
   1c54a:	8f ef       	ldi	r24, 0xFF	; 255
   1c54c:	9f ef       	ldi	r25, 0xFF	; 255
   1c54e:	dc 01       	movw	r26, r24
   1c550:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1c554:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1c558:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1c55c:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2824
    ///
    strcpy(str_topic, "status/default_ring");
   1c560:	6d e6       	ldi	r22, 0x6D	; 109
   1c562:	77 e0       	ldi	r23, 0x07	; 7
   1c564:	ce 01       	movw	r24, r28
   1c566:	8f 5b       	subi	r24, 0xBF	; 191
   1c568:	9f 4f       	sbci	r25, 0xFF	; 255
   1c56a:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
    itoa(default_ring, payload, 10);
   1c56e:	80 91 22 0b 	lds	r24, 0x0B22	; 0x800b22 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c572:	4a e0       	ldi	r20, 0x0A	; 10
   1c574:	b5 01       	movw	r22, r10
   1c576:	90 e0       	ldi	r25, 0x00	; 0
   1c578:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c57c:	a5 01       	movw	r20, r10
   1c57e:	be 01       	movw	r22, r28
   1c580:	6f 5b       	subi	r22, 0xBF	; 191
   1c582:	7f 4f       	sbci	r23, 0xFF	; 255
   1c584:	8b ec       	ldi	r24, 0xCB	; 203
   1c586:	9f e0       	ldi	r25, 0x0F	; 15
   1c588:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
    ///
    strcpy(str_topic, "status/selftest");
   1c58c:	61 e8       	ldi	r22, 0x81	; 129
   1c58e:	77 e0       	ldi	r23, 0x07	; 7
   1c590:	ce 01       	movw	r24, r28
   1c592:	8f 5b       	subi	r24, 0xBF	; 191
   1c594:	9f 4f       	sbci	r25, 0xFF	; 255
   1c596:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829
    itoa(selftest_data, payload, 10);
   1c59a:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c59e:	4a e0       	ldi	r20, 0x0A	; 10
   1c5a0:	b5 01       	movw	r22, r10
   1c5a2:	90 e0       	ldi	r25, 0x00	; 0
   1c5a4:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c5a8:	a5 01       	movw	r20, r10
   1c5aa:	be 01       	movw	r22, r28
   1c5ac:	6f 5b       	subi	r22, 0xBF	; 191
   1c5ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5b0:	8b ec       	ldi	r24, 0xCB	; 203
   1c5b2:	9f e0       	ldi	r25, 0x0F	; 15
   1c5b4:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2832

    strcpy(str_topic, "status/rtds/count");
   1c5b8:	61 e9       	ldi	r22, 0x91	; 145
   1c5ba:	77 e0       	ldi	r23, 0x07	; 7
   1c5bc:	ce 01       	movw	r24, r28
   1c5be:	8f 5b       	subi	r24, 0xBF	; 191
   1c5c0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5c2:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2833
    itoa(use_rtds, payload, 10);
   1c5c6:	80 91 2d 0c 	lds	r24, 0x0C2D	; 0x800c2d <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c5ca:	4a e0       	ldi	r20, 0x0A	; 10
   1c5cc:	b5 01       	movw	r22, r10
   1c5ce:	90 e0       	ldi	r25, 0x00	; 0
   1c5d0:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2834
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1c5d4:	a5 01       	movw	r20, r10
   1c5d6:	be 01       	movw	r22, r28
   1c5d8:	6f 5b       	subi	r22, 0xBF	; 191
   1c5da:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5dc:	8b ec       	ldi	r24, 0xCB	; 203
   1c5de:	9f e0       	ldi	r25, 0x0F	; 15
   1c5e0:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3200
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   1c5e4:	81 e0       	ldi	r24, 0x01	; 1
   1c5e6:	90 e0       	ldi	r25, 0x00	; 0
   1c5e8:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c5ec:	4a e0       	ldi	r20, 0x0A	; 10
   1c5ee:	b5 01       	movw	r22, r10
   1c5f0:	08 2e       	mov	r0, r24
   1c5f2:	00 0c       	add	r0, r0
   1c5f4:	99 0b       	sbc	r25, r25
   1c5f6:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1c5fa:	a5 01       	movw	r20, r10
   1c5fc:	63 ea       	ldi	r22, 0xA3	; 163
   1c5fe:	77 e0       	ldi	r23, 0x07	; 7
   1c600:	8b ec       	ldi	r24, 0xCB	; 203
   1c602:	9f e0       	ldi	r25, 0x0F	; 15
   1c604:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1c608:	80 91 20 0b 	lds	r24, 0x0B20	; 0x800b20 <tritri>
   1c60c:	90 91 21 0b 	lds	r25, 0x0B21	; 0x800b21 <tritri+0x1>
   1c610:	25 e0       	ldi	r18, 0x05	; 5
   1c612:	28 9f       	mul	r18, r24
   1c614:	b0 01       	movw	r22, r0
   1c616:	29 9f       	mul	r18, r25
   1c618:	70 0d       	add	r23, r0
   1c61a:	11 24       	eor	r1, r1
   1c61c:	90 e0       	ldi	r25, 0x00	; 0
   1c61e:	80 e0       	ldi	r24, 0x00	; 0
   1c620:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1c624:	20 e0       	ldi	r18, 0x00	; 0
   1c626:	30 e0       	ldi	r19, 0x00	; 0
   1c628:	4a e7       	ldi	r20, 0x7A	; 122
   1c62a:	54 e4       	ldi	r21, 0x44	; 68
   1c62c:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2843
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   1c630:	85 01       	movw	r16, r10
   1c632:	22 e0       	ldi	r18, 0x02	; 2
   1c634:	44 e0       	ldi	r20, 0x04	; 4
   1c636:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   1c63a:	a5 01       	movw	r20, r10
   1c63c:	63 eb       	ldi	r22, 0xB3	; 179
   1c63e:	77 e0       	ldi	r23, 0x07	; 7
   1c640:	8b ec       	ldi	r24, 0xCB	; 203
   1c642:	9f e0       	ldi	r25, 0x0F	; 15
   1c644:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1c648:	60 91 1e 0b 	lds	r22, 0x0B1E	; 0x800b1e <petnula>
   1c64c:	70 91 1f 0b 	lds	r23, 0x0B1F	; 0x800b1f <petnula+0x1>
   1c650:	23 e0       	ldi	r18, 0x03	; 3
   1c652:	66 0f       	add	r22, r22
   1c654:	77 1f       	adc	r23, r23
   1c656:	2a 95       	dec	r18
   1c658:	e1 f7       	brne	.-8      	; 0x1c652 <main+0x894>
   1c65a:	90 e0       	ldi	r25, 0x00	; 0
   1c65c:	80 e0       	ldi	r24, 0x00	; 0
   1c65e:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1c662:	20 e0       	ldi	r18, 0x00	; 0
   1c664:	30 e0       	ldi	r19, 0x00	; 0
   1c666:	4a e7       	ldi	r20, 0x7A	; 122
   1c668:	54 e4       	ldi	r21, 0x44	; 68
   1c66a:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   1c66e:	22 e0       	ldi	r18, 0x02	; 2
   1c670:	44 e0       	ldi	r20, 0x04	; 4
   1c672:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   1c676:	a5 01       	movw	r20, r10
   1c678:	66 ec       	ldi	r22, 0xC6	; 198
   1c67a:	77 e0       	ldi	r23, 0x07	; 7
   1c67c:	8b ec       	ldi	r24, 0xCB	; 203
   1c67e:	9f e0       	ldi	r25, 0x0F	; 15
   1c680:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1c684:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <dvanact>
   1c688:	90 91 1d 0b 	lds	r25, 0x0B1D	; 0x800b1d <dvanact+0x1>
   1c68c:	29 e3       	ldi	r18, 0x39	; 57
   1c68e:	28 9f       	mul	r18, r24
   1c690:	b0 01       	movw	r22, r0
   1c692:	29 9f       	mul	r18, r25
   1c694:	70 0d       	add	r23, r0
   1c696:	11 24       	eor	r1, r1
   1c698:	90 e0       	ldi	r25, 0x00	; 0
   1c69a:	80 e0       	ldi	r24, 0x00	; 0
   1c69c:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1c6a0:	20 e0       	ldi	r18, 0x00	; 0
   1c6a2:	30 e0       	ldi	r19, 0x00	; 0
   1c6a4:	4a e7       	ldi	r20, 0x7A	; 122
   1c6a6:	54 e4       	ldi	r21, 0x44	; 68
   1c6a8:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   1c6ac:	22 e0       	ldi	r18, 0x02	; 2
   1c6ae:	44 e0       	ldi	r20, 0x04	; 4
   1c6b0:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1c6b4:	a5 01       	movw	r20, r10
   1c6b6:	69 ed       	ldi	r22, 0xD9	; 217
   1c6b8:	77 e0       	ldi	r23, 0x07	; 7
   1c6ba:	8b ec       	ldi	r24, 0xCB	; 203
   1c6bc:	9f e0       	ldi	r25, 0x0F	; 15
   1c6be:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1c6c2:	60 91 1a 0b 	lds	r22, 0x0B1A	; 0x800b1a <proud>
   1c6c6:	70 91 1b 0b 	lds	r23, 0x0B1B	; 0x800b1b <proud+0x1>
   1c6ca:	90 e0       	ldi	r25, 0x00	; 0
   1c6cc:	80 e0       	ldi	r24, 0x00	; 0
   1c6ce:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2852
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1c6d2:	22 e0       	ldi	r18, 0x02	; 2
   1c6d4:	44 e0       	ldi	r20, 0x04	; 4
   1c6d6:	0e 94 2e f0 	call	0x1e05c	; 0x1e05c <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2853
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   1c6da:	a5 01       	movw	r20, r10
   1c6dc:	6c ee       	ldi	r22, 0xEC	; 236
   1c6de:	77 e0       	ldi	r23, 0x07	; 7
   1c6e0:	8b ec       	ldi	r24, 0xCB	; 203
   1c6e2:	9f e0       	ldi	r25, 0x0F	; 15
   1c6e4:	0e 94 1d 94 	call	0x1283a	; 0x1283a <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1c6e8:	0f b6       	in	r0, 0x3f	; 63
   1c6ea:	f8 94       	cli
   1c6ec:	de bf       	out	0x3e, r29	; 62
   1c6ee:	0f be       	out	0x3f, r0	; 63
   1c6f0:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1c6f2:	9c e5       	ldi	r25, 0x5C	; 92
   1c6f4:	89 2e       	mov	r8, r25
   1c6f6:	99 24       	eor	r9, r9
   1c6f8:	93 94       	inc	r9
   1c6fa:	10 e0       	ldi	r17, 0x00	; 0
   1c6fc:	00 e0       	ldi	r16, 0x00	; 0
   1c6fe:	70 2e       	mov	r7, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   1c700:	80 2f       	mov	r24, r16
   1c702:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
   1c706:	8f 3f       	cpi	r24, 0xFF	; 255
   1c708:	09 f4       	brne	.+2      	; 0x1c70c <main+0x94e>
   1c70a:	c6 c0       	rjmp	.+396    	; 0x1c898 <main+0xada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
    {
      thermostat_ring_get_name(idx, payload);
   1c70c:	b5 01       	movw	r22, r10
   1c70e:	80 2f       	mov	r24, r16
   1c710:	0e 94 05 74 	call	0xe80a	; 0xe80a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2876
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   1c714:	95 01       	movw	r18, r10
   1c716:	40 e0       	ldi	r20, 0x00	; 0
   1c718:	54 e0       	ldi	r21, 0x04	; 4
   1c71a:	60 2f       	mov	r22, r16
   1c71c:	8c e7       	ldi	r24, 0x7C	; 124
   1c71e:	97 e0       	ldi	r25, 0x07	; 7
   1c720:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
      itoa(thermostat_ring_get_active(idx), payload, 10);
   1c724:	80 2f       	mov	r24, r16
   1c726:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c72a:	4a e0       	ldi	r20, 0x0A	; 10
   1c72c:	b5 01       	movw	r22, r10
   1c72e:	90 e0       	ldi	r25, 0x00	; 0
   1c730:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   1c734:	95 01       	movw	r18, r10
   1c736:	4a e0       	ldi	r20, 0x0A	; 10
   1c738:	54 e0       	ldi	r21, 0x04	; 4
   1c73a:	60 2f       	mov	r22, r16
   1c73c:	8c e7       	ldi	r24, 0x7C	; 124
   1c73e:	97 e0       	ldi	r25, 0x07	; 7
   1c740:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1c744:	c4 01       	movw	r24, r8
   1c746:	01 97       	sbiw	r24, 0x01	; 1
   1c748:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c74c:	4a e0       	ldi	r20, 0x0A	; 10
   1c74e:	b5 01       	movw	r22, r10
   1c750:	90 e0       	ldi	r25, 0x00	; 0
   1c752:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   1c756:	95 01       	movw	r18, r10
   1c758:	44 e3       	ldi	r20, 0x34	; 52
   1c75a:	56 e0       	ldi	r21, 0x06	; 6
   1c75c:	60 2f       	mov	r22, r16
   1c75e:	8c e7       	ldi	r24, 0x7C	; 124
   1c760:	97 e0       	ldi	r25, 0x07	; 7
   1c762:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   1c766:	80 2f       	mov	r24, r16
   1c768:	0e 94 b4 72 	call	0xe568	; 0xe568 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c76c:	4a e0       	ldi	r20, 0x0A	; 10
   1c76e:	b5 01       	movw	r22, r10
   1c770:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1c774:	95 01       	movw	r18, r10
   1c776:	4a e2       	ldi	r20, 0x2A	; 42
   1c778:	56 e0       	ldi	r21, 0x06	; 6
   1c77a:	60 2f       	mov	r22, r16
   1c77c:	8c e7       	ldi	r24, 0x7C	; 124
   1c77e:	97 e0       	ldi	r25, 0x07	; 7
   1c780:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   1c784:	80 2f       	mov	r24, r16
   1c786:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c78a:	4a e0       	ldi	r20, 0x0A	; 10
   1c78c:	b5 01       	movw	r22, r10
   1c78e:	90 e0       	ldi	r25, 0x00	; 0
   1c790:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1c794:	95 01       	movw	r18, r10
   1c796:	4d e4       	ldi	r20, 0x4D	; 77
   1c798:	56 e0       	ldi	r21, 0x06	; 6
   1c79a:	60 2f       	mov	r22, r16
   1c79c:	8c e7       	ldi	r24, 0x7C	; 124
   1c79e:	97 e0       	ldi	r25, 0x07	; 7
   1c7a0:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1c7a4:	80 2f       	mov	r24, r16
   1c7a6:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   1c7aa:	63 e0       	ldi	r22, 0x03	; 3
   1c7ac:	78 e0       	ldi	r23, 0x08	; 8
   1c7ae:	88 23       	and	r24, r24
   1c7b0:	a1 f0       	breq	.+40     	; 0x1c7da <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1c7b2:	62 e6       	ldi	r22, 0x62	; 98
   1c7b4:	78 e0       	ldi	r23, 0x08	; 8
   1c7b6:	81 30       	cpi	r24, 0x01	; 1
   1c7b8:	81 f0       	breq	.+32     	; 0x1c7da <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   1c7ba:	6c e5       	ldi	r22, 0x5C	; 92
   1c7bc:	75 e0       	ldi	r23, 0x05	; 5
   1c7be:	83 30       	cpi	r24, 0x03	; 3
   1c7c0:	61 f0       	breq	.+24     	; 0x1c7da <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3247
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1c7c2:	63 e6       	ldi	r22, 0x63	; 99
   1c7c4:	75 e0       	ldi	r23, 0x05	; 5
   1c7c6:	82 30       	cpi	r24, 0x02	; 2
   1c7c8:	41 f0       	breq	.+16     	; 0x1c7da <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3248
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   1c7ca:	62 e5       	ldi	r22, 0x52	; 82
   1c7cc:	78 e0       	ldi	r23, 0x08	; 8
   1c7ce:	84 30       	cpi	r24, 0x04	; 4
   1c7d0:	21 f0       	breq	.+8      	; 0x1c7da <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3249
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1c7d2:	86 30       	cpi	r24, 0x06	; 6
   1c7d4:	29 f4       	brne	.+10     	; 0x1c7e0 <main+0xa22>
   1c7d6:	68 e6       	ldi	r22, 0x68	; 104
   1c7d8:	75 e0       	ldi	r23, 0x05	; 5
   1c7da:	c5 01       	movw	r24, r10
   1c7dc:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2886
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1c7e0:	95 01       	movw	r18, r10
   1c7e2:	48 e4       	ldi	r20, 0x48	; 72
   1c7e4:	56 e0       	ldi	r21, 0x06	; 6
   1c7e6:	67 2d       	mov	r22, r7
   1c7e8:	8c e7       	ldi	r24, 0x7C	; 124
   1c7ea:	97 e0       	ldi	r25, 0x07	; 7
   1c7ec:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1c7f0:	f8 01       	movw	r30, r16
   1c7f2:	e7 5d       	subi	r30, 0xD7	; 215
   1c7f4:	f4 4f       	sbci	r31, 0xF4	; 244
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2887
      itoa(thermostat_ring_get_state(idx), payload, 10);
   1c7f6:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c7f8:	4a e0       	ldi	r20, 0x0A	; 10
   1c7fa:	b5 01       	movw	r22, r10
   1c7fc:	90 e0       	ldi	r25, 0x00	; 0
   1c7fe:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2888
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   1c802:	95 01       	movw	r18, r10
   1c804:	47 e0       	ldi	r20, 0x07	; 7
   1c806:	58 e0       	ldi	r21, 0x08	; 8
   1c808:	67 2d       	mov	r22, r7
   1c80a:	8c e7       	ldi	r24, 0x7C	; 124
   1c80c:	97 e0       	ldi	r25, 0x07	; 7
   1c80e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1c812:	c4 01       	movw	r24, r8
   1c814:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c818:	4a e0       	ldi	r20, 0x0A	; 10
   1c81a:	b5 01       	movw	r22, r10
   1c81c:	90 e0       	ldi	r25, 0x00	; 0
   1c81e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   1c822:	95 01       	movw	r18, r10
   1c824:	42 e5       	ldi	r20, 0x52	; 82
   1c826:	56 e0       	ldi	r21, 0x06	; 6
   1c828:	67 2d       	mov	r22, r7
   1c82a:	8c e7       	ldi	r24, 0x7C	; 124
   1c82c:	97 e0       	ldi	r25, 0x07	; 7
   1c82e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1c832:	c4 01       	movw	r24, r8
   1c834:	03 96       	adiw	r24, 0x03	; 3
   1c836:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c83a:	4a e0       	ldi	r20, 0x0A	; 10
   1c83c:	b5 01       	movw	r22, r10
   1c83e:	90 e0       	ldi	r25, 0x00	; 0
   1c840:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   1c844:	95 01       	movw	r18, r10
   1c846:	48 e5       	ldi	r20, 0x58	; 88
   1c848:	56 e0       	ldi	r21, 0x06	; 6
   1c84a:	67 2d       	mov	r22, r7
   1c84c:	8c e7       	ldi	r24, 0x7C	; 124
   1c84e:	97 e0       	ldi	r25, 0x07	; 7
   1c850:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1c854:	c4 01       	movw	r24, r8
   1c856:	04 97       	sbiw	r24, 0x04	; 4
   1c858:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c85c:	4a e0       	ldi	r20, 0x0A	; 10
   1c85e:	b5 01       	movw	r22, r10
   1c860:	90 e0       	ldi	r25, 0x00	; 0
   1c862:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   1c866:	95 01       	movw	r18, r10
   1c868:	4e e0       	ldi	r20, 0x0E	; 14
   1c86a:	58 e0       	ldi	r21, 0x08	; 8
   1c86c:	67 2d       	mov	r22, r7
   1c86e:	8c e7       	ldi	r24, 0x7C	; 124
   1c870:	97 e0       	ldi	r25, 0x07	; 7
   1c872:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2897

      itoa(last_output_update[idx], payload, 10);
   1c876:	f8 01       	movw	r30, r16
   1c878:	ec 5d       	subi	r30, 0xDC	; 220
   1c87a:	f4 4f       	sbci	r31, 0xF4	; 244
   1c87c:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c87e:	4a e0       	ldi	r20, 0x0A	; 10
   1c880:	b5 01       	movw	r22, r10
   1c882:	90 e0       	ldi	r25, 0x00	; 0
   1c884:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2898
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   1c888:	95 01       	movw	r18, r10
   1c88a:	4b e1       	ldi	r20, 0x1B	; 27
   1c88c:	58 e0       	ldi	r21, 0x08	; 8
   1c88e:	67 2d       	mov	r22, r7
   1c890:	8c e7       	ldi	r24, 0x7C	; 124
   1c892:	97 e0       	ldi	r25, 0x07	; 7
   1c894:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1c898:	0f 5f       	subi	r16, 0xFF	; 255
   1c89a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c89c:	31 e2       	ldi	r19, 0x21	; 33
   1c89e:	83 0e       	add	r8, r19
   1c8a0:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2871
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1c8a2:	41 e0       	ldi	r20, 0x01	; 1
   1c8a4:	84 16       	cp	r8, r20
   1c8a6:	42 e0       	ldi	r20, 0x02	; 2
   1c8a8:	94 06       	cpc	r9, r20
   1c8aa:	09 f0       	breq	.+2      	; 0x1c8ae <main+0xaf0>
   1c8ac:	28 cf       	rjmp	.-432    	; 0x1c6fe <main+0x940>
   1c8ae:	ba e6       	ldi	r27, 0x6A	; 106
   1c8b0:	6b 2e       	mov	r6, r27
   1c8b2:	bb e0       	ldi	r27, 0x0B	; 11
   1c8b4:	7b 2e       	mov	r7, r27
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1c8b6:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1 && status_tds18s20[id].online == True)
      {
        tt = status_tds18s20[id].temp / 10;
   1c8b8:	0a e0       	ldi	r16, 0x0A	; 10
   1c8ba:	80 2e       	mov	r8, r16
   1c8bc:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
        tt = status_tds18s20[id].online;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
        payload[0] = 0;
        createString(payload, ':', tds.rom, 8, 16);
   1c8be:	81 e4       	ldi	r24, 0x41	; 65
   1c8c0:	48 2e       	mov	r4, r24
   1c8c2:	51 2c       	mov	r5, r1
   1c8c4:	4c 0e       	add	r4, r28
   1c8c6:	5d 1e       	adc	r5, r29
   1c8c8:	5f ef       	ldi	r21, 0xFF	; 255
   1c8ca:	45 1a       	sub	r4, r21
   1c8cc:	55 0a       	sbc	r5, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   1c8ce:	be 01       	movw	r22, r28
   1c8d0:	6f 5b       	subi	r22, 0xBF	; 191
   1c8d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8d4:	81 2f       	mov	r24, r17
   1c8d6:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1c8da:	81 30       	cpi	r24, 0x01	; 1
   1c8dc:	09 f0       	breq	.+2      	; 0x1c8e0 <main+0xb22>
   1c8de:	ab c0       	rjmp	.+342    	; 0x1ca36 <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2919
      if (tds.used == 1 && status_tds18s20[id].online == True)
   1c8e0:	22 96       	adiw	r28, 0x02	; 2
   1c8e2:	8f ad       	ldd	r24, Y+63	; 0x3f
   1c8e4:	22 97       	sbiw	r28, 0x02	; 2
   1c8e6:	81 30       	cpi	r24, 0x01	; 1
   1c8e8:	09 f0       	breq	.+2      	; 0x1c8ec <main+0xb2e>
   1c8ea:	a5 c0       	rjmp	.+330    	; 0x1ca36 <main+0xc78>
   1c8ec:	f3 01       	movw	r30, r6
   1c8ee:	83 8d       	ldd	r24, Z+27	; 0x1b
   1c8f0:	81 30       	cpi	r24, 0x01	; 1
   1c8f2:	09 f0       	breq	.+2      	; 0x1c8f6 <main+0xb38>
   1c8f4:	a0 c0       	rjmp	.+320    	; 0x1ca36 <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
      {
        tt = status_tds18s20[id].temp / 10;
   1c8f6:	85 81       	ldd	r24, Z+5	; 0x05
   1c8f8:	96 81       	ldd	r25, Z+6	; 0x06
   1c8fa:	b4 01       	movw	r22, r8
   1c8fc:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1c900:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c902:	4a e0       	ldi	r20, 0x0A	; 10
   1c904:	b5 01       	movw	r22, r10
   1c906:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2923
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   1c90a:	95 01       	movw	r18, r10
   1c90c:	49 e2       	ldi	r20, 0x29	; 41
   1c90e:	58 e0       	ldi	r21, 0x08	; 8
   1c910:	61 2f       	mov	r22, r17
   1c912:	86 e0       	ldi	r24, 0x06	; 6
   1c914:	94 e0       	ldi	r25, 0x04	; 4
   1c916:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1c91a:	30 e0       	ldi	r19, 0x00	; 0
   1c91c:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
        avg = 0;
   1c91e:	60 e0       	ldi	r22, 0x00	; 0
   1c920:	70 e0       	ldi	r23, 0x00	; 0
   1c922:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
        for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   1c924:	f9 01       	movw	r30, r18
   1c926:	ee 0f       	add	r30, r30
   1c928:	ff 1f       	adc	r31, r31
   1c92a:	e6 0d       	add	r30, r6
   1c92c:	f7 1d       	adc	r31, r7
   1c92e:	c7 80       	ldd	r12, Z+7	; 0x07
   1c930:	d0 84       	ldd	r13, Z+8	; 0x08
   1c932:	0d 2c       	mov	r0, r13
   1c934:	00 0c       	add	r0, r0
   1c936:	ee 08       	sbc	r14, r14
   1c938:	ff 08       	sbc	r15, r15
   1c93a:	6c 0d       	add	r22, r12
   1c93c:	7d 1d       	adc	r23, r13
   1c93e:	8e 1d       	adc	r24, r14
   1c940:	9f 1d       	adc	r25, r15
   1c942:	2f 5f       	subi	r18, 0xFF	; 255
   1c944:	3f 4f       	sbci	r19, 0xFF	; 255
   1c946:	2a 30       	cpi	r18, 0x0A	; 10
   1c948:	31 05       	cpc	r19, r1
   1c94a:	61 f7       	brne	.-40     	; 0x1c924 <main+0xb66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2927
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
   1c94c:	24 e6       	ldi	r18, 0x64	; 100
   1c94e:	30 e0       	ldi	r19, 0x00	; 0
   1c950:	40 e0       	ldi	r20, 0x00	; 0
   1c952:	50 e0       	ldi	r21, 0x00	; 0
   1c954:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1c958:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c95a:	4a e0       	ldi	r20, 0x0A	; 10
   1c95c:	b5 01       	movw	r22, r10
   1c95e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   1c962:	95 01       	movw	r18, r10
   1c964:	4e e2       	ldi	r20, 0x2E	; 46
   1c966:	58 e0       	ldi	r21, 0x08	; 8
   1c968:	61 2f       	mov	r22, r17
   1c96a:	86 e0       	ldi	r24, 0x06	; 6
   1c96c:	94 e0       	ldi	r25, 0x04	; 4
   1c96e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931

        strcpy(payload, tds.name);
   1c972:	c5 54       	subi	r28, 0x45	; 69
   1c974:	df 4f       	sbci	r29, 0xFF	; 255
   1c976:	68 81       	ld	r22, Y
   1c978:	79 81       	ldd	r23, Y+1	; 0x01
   1c97a:	cb 5b       	subi	r28, 0xBB	; 187
   1c97c:	d0 40       	sbci	r29, 0x00	; 0
   1c97e:	c5 01       	movw	r24, r10
   1c980:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1c984:	95 01       	movw	r18, r10
   1c986:	40 e0       	ldi	r20, 0x00	; 0
   1c988:	54 e0       	ldi	r21, 0x04	; 4
   1c98a:	61 2f       	mov	r22, r17
   1c98c:	86 e0       	ldi	r24, 0x06	; 6
   1c98e:	94 e0       	ldi	r25, 0x04	; 4
   1c990:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c994:	4a e0       	ldi	r20, 0x0A	; 10
   1c996:	b5 01       	movw	r22, r10
   1c998:	2d 96       	adiw	r28, 0x0d	; 13
   1c99a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1c99c:	9f ad       	ldd	r25, Y+63	; 0x3f
   1c99e:	2d 97       	sbiw	r28, 0x0d	; 13
   1c9a0:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
        tt = tds.offset;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   1c9a4:	95 01       	movw	r18, r10
   1c9a6:	4c ea       	ldi	r20, 0xAC	; 172
   1c9a8:	57 e0       	ldi	r21, 0x07	; 7
   1c9aa:	61 2f       	mov	r22, r17
   1c9ac:	86 e0       	ldi	r24, 0x06	; 6
   1c9ae:	94 e0       	ldi	r25, 0x04	; 4
   1c9b0:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
        tt = status_tds18s20[id].online;
   1c9b4:	f3 01       	movw	r30, r6
   1c9b6:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c9b8:	4a e0       	ldi	r20, 0x0A	; 10
   1c9ba:	b5 01       	movw	r22, r10
   1c9bc:	90 e0       	ldi	r25, 0x00	; 0
   1c9be:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   1c9c2:	95 01       	movw	r18, r10
   1c9c4:	47 e3       	ldi	r20, 0x37	; 55
   1c9c6:	58 e0       	ldi	r21, 0x08	; 8
   1c9c8:	61 2f       	mov	r22, r17
   1c9ca:	86 e0       	ldi	r24, 0x06	; 6
   1c9cc:	94 e0       	ldi	r25, 0x04	; 4
   1c9ce:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
        payload[0] = 0;
   1c9d2:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2940
        createString(payload, ':', tds.rom, 8, 16);
   1c9d4:	00 e1       	ldi	r16, 0x10	; 16
   1c9d6:	28 e0       	ldi	r18, 0x08	; 8
   1c9d8:	a2 01       	movw	r20, r4
   1c9da:	6a e3       	ldi	r22, 0x3A	; 58
   1c9dc:	c5 01       	movw	r24, r10
   1c9de:	0e 94 15 81 	call	0x1022a	; 0x1022a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2941
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   1c9e2:	95 01       	movw	r18, r10
   1c9e4:	4a ee       	ldi	r20, 0xEA	; 234
   1c9e6:	56 e0       	ldi	r21, 0x06	; 6
   1c9e8:	61 2f       	mov	r22, r17
   1c9ea:	86 e0       	ldi	r24, 0x06	; 6
   1c9ec:	94 e0       	ldi	r25, 0x04	; 4
   1c9ee:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2942
        tt = tds.period;
   1c9f2:	66 96       	adiw	r28, 0x16	; 22
   1c9f4:	8f ad       	ldd	r24, Y+63	; 0x3f
   1c9f6:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c9f8:	4a e0       	ldi	r20, 0x0A	; 10
   1c9fa:	b5 01       	movw	r22, r10
   1c9fc:	90 e0       	ldi	r25, 0x00	; 0
   1c9fe:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   1ca02:	95 01       	movw	r18, r10
   1ca04:	43 e2       	ldi	r20, 0x23	; 35
   1ca06:	56 e0       	ldi	r21, 0x06	; 6
   1ca08:	61 2f       	mov	r22, r17
   1ca0a:	86 e0       	ldi	r24, 0x06	; 6
   1ca0c:	94 e0       	ldi	r25, 0x04	; 4
   1ca0e:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2946

        tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   1ca12:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <uptime>
   1ca16:	f3 01       	movw	r30, r6
   1ca18:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1ca1a:	4a e0       	ldi	r20, 0x0A	; 10
   1ca1c:	b5 01       	movw	r22, r10
   1ca1e:	89 1b       	sub	r24, r25
   1ca20:	99 0b       	sbc	r25, r25
   1ca22:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2948
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   1ca26:	95 01       	movw	r18, r10
   1ca28:	4e e3       	ldi	r20, 0x3E	; 62
   1ca2a:	58 e0       	ldi	r21, 0x08	; 8
   1ca2c:	61 2f       	mov	r22, r17
   1ca2e:	86 e0       	ldi	r24, 0x06	; 6
   1ca30:	94 e0       	ldi	r25, 0x04	; 4
   1ca32:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2917
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1ca36:	1f 5f       	subi	r17, 0xFF	; 255
   1ca38:	fe e1       	ldi	r31, 0x1E	; 30
   1ca3a:	6f 0e       	add	r6, r31
   1ca3c:	71 1c       	adc	r7, r1
   1ca3e:	16 30       	cpi	r17, 0x06	; 6
   1ca40:	09 f0       	breq	.+2      	; 0x1ca44 <main+0xc86>
   1ca42:	45 cf       	rjmp	.-374    	; 0x1c8ce <main+0xb10>
   1ca44:	51 2c       	mov	r5, r1
   1ca46:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1ca48:	91 2c       	mov	r9, r1
   1ca4a:	9e 01       	movw	r18, r28
   1ca4c:	2f 5f       	subi	r18, 0xFF	; 255
   1ca4e:	3f 4f       	sbci	r19, 0xFF	; 255
   1ca50:	19 01       	movw	r2, r18
   1ca52:	ae 01       	movw	r20, r28
   1ca54:	45 5f       	subi	r20, 0xF5	; 245
   1ca56:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca58:	c1 55       	subi	r28, 0x51	; 81
   1ca5a:	df 4f       	sbci	r29, 0xFF	; 255
   1ca5c:	59 83       	std	Y+1, r21	; 0x01
   1ca5e:	48 83       	st	Y, r20
   1ca60:	cf 5a       	subi	r28, 0xAF	; 175
   1ca62:	d0 40       	sbci	r29, 0x00	; 0
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1ca64:	f6 e0       	ldi	r31, 0x06	; 6
   1ca66:	8f 2e       	mov	r8, r31
thermostat_program_get_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   1ca68:	c2 01       	movw	r24, r4
   1ca6a:	8f 50       	subi	r24, 0x0F	; 15
   1ca6c:	9e 4f       	sbci	r25, 0xFE	; 254
   1ca6e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1ca72:	f8 2e       	mov	r15, r24
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2968
  {
    act = thermostat_program_get_active(idx);
    if ( act != PROG_FREE)
   1ca74:	5f ef       	ldi	r21, 0xFF	; 255
   1ca76:	85 17       	cp	r24, r21
   1ca78:	09 f4       	brne	.+2      	; 0x1ca7c <main+0xcbe>
   1ca7a:	0a c1       	rjmp	.+532    	; 0x1cc90 <main+0xed2>
   1ca7c:	81 01       	movw	r16, r2
thermostat_program_get_name():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   1ca7e:	32 01       	movw	r6, r4
   1ca80:	62 18       	sub	r6, r2
   1ca82:	73 08       	sbc	r7, r3
   1ca84:	6c ec       	ldi	r22, 0xCC	; 204
   1ca86:	66 1a       	sub	r6, r22
   1ca88:	6d ef       	ldi	r22, 0xFD	; 253
   1ca8a:	76 0a       	sbc	r7, r22
   1ca8c:	c3 01       	movw	r24, r6
   1ca8e:	80 0f       	add	r24, r16
   1ca90:	91 1f       	adc	r25, r17
   1ca92:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   1ca96:	f8 01       	movw	r30, r16
   1ca98:	81 93       	st	Z+, r24
   1ca9a:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   1ca9c:	88 23       	and	r24, r24
   1ca9e:	49 f0       	breq	.+18     	; 0x1cab2 <main+0xcf4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   1caa0:	c1 55       	subi	r28, 0x51	; 81
   1caa2:	df 4f       	sbci	r29, 0xFF	; 255
   1caa4:	28 81       	ld	r18, Y
   1caa6:	39 81       	ldd	r19, Y+1	; 0x01
   1caa8:	cf 5a       	subi	r28, 0xAF	; 175
   1caaa:	d0 40       	sbci	r29, 0x00	; 0
   1caac:	2e 17       	cp	r18, r30
   1caae:	3f 07       	cpc	r19, r31
   1cab0:	69 f7       	brne	.-38     	; 0x1ca8c <main+0xcce>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
   1cab2:	95 01       	movw	r18, r10
   1cab4:	40 e0       	ldi	r20, 0x00	; 0
   1cab6:	54 e0       	ldi	r21, 0x04	; 4
   1cab8:	69 2d       	mov	r22, r9
   1caba:	87 e4       	ldi	r24, 0x47	; 71
   1cabc:	98 e0       	ldi	r25, 0x08	; 8
   1cabe:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cac2:	4a e0       	ldi	r20, 0x0A	; 10
   1cac4:	b5 01       	movw	r22, r10
   1cac6:	8f 2d       	mov	r24, r15
   1cac8:	90 e0       	ldi	r25, 0x00	; 0
   1caca:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2973
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
   1cace:	95 01       	movw	r18, r10
   1cad0:	4a e0       	ldi	r20, 0x0A	; 10
   1cad2:	54 e0       	ldi	r21, 0x04	; 4
   1cad4:	69 2d       	mov	r22, r9
   1cad6:	87 e4       	ldi	r24, 0x47	; 71
   1cad8:	98 e0       	ldi	r25, 0x08	; 8
   1cada:	0e 94 6f be 	call	0x17cde	; 0x17cde <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1cade:	71 2c       	mov	r7, r1
   1cae0:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1cae2:	a2 01       	movw	r20, r4
   1cae4:	4e 50       	subi	r20, 0x0E	; 14
   1cae6:	5e 4f       	sbci	r21, 0xFE	; 254
   1cae8:	cd 54       	subi	r28, 0x4D	; 77
   1caea:	df 4f       	sbci	r29, 0xFF	; 255
   1caec:	59 83       	std	Y+1, r21	; 0x01
   1caee:	48 83       	st	Y, r20
   1caf0:	c3 5b       	subi	r28, 0xB3	; 179
   1caf2:	d0 40       	sbci	r29, 0x00	; 0
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
      {
        thermostat_program_get_time(idx, progid, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1caf4:	be 01       	movw	r22, r28
   1caf6:	6f 57       	subi	r22, 0x7F	; 127
   1caf8:	7f 4f       	sbci	r23, 0xFF	; 255
   1cafa:	6b 01       	movw	r12, r22
   1cafc:	ce 01       	movw	r24, r28
   1cafe:	8c 55       	subi	r24, 0x5C	; 92
   1cb00:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb02:	7c 01       	movw	r14, r24
   1cb04:	8e 01       	movw	r16, r28
   1cb06:	04 55       	subi	r16, 0x54	; 84
   1cb08:	1f 4f       	sbci	r17, 0xFF	; 255
   1cb0a:	9e 01       	movw	r18, r28
   1cb0c:	23 55       	subi	r18, 0x53	; 83
   1cb0e:	3f 4f       	sbci	r19, 0xFF	; 255
   1cb10:	ae 01       	movw	r20, r28
   1cb12:	42 55       	subi	r20, 0x52	; 82
   1cb14:	5f 4f       	sbci	r21, 0xFF	; 255
   1cb16:	66 2d       	mov	r22, r6
   1cb18:	89 2d       	mov	r24, r9
   1cb1a:	0e 94 59 72 	call	0xe4b2	; 0xe4b2 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
        if (active == 1)
   1cb1e:	cf 57       	subi	r28, 0x7F	; 127
   1cb20:	df 4f       	sbci	r29, 0xFF	; 255
   1cb22:	88 81       	ld	r24, Y
   1cb24:	c1 58       	subi	r28, 0x81	; 129
   1cb26:	d0 40       	sbci	r29, 0x00	; 0
   1cb28:	81 30       	cpi	r24, 0x01	; 1
   1cb2a:	09 f0       	breq	.+2      	; 0x1cb2e <main+0xd70>
   1cb2c:	a9 c0       	rjmp	.+338    	; 0x1cc80 <main+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
        {
          itoa(start_hour, tmp1, 10);
   1cb2e:	c2 55       	subi	r28, 0x52	; 82
   1cb30:	df 4f       	sbci	r29, 0xFF	; 255
   1cb32:	88 81       	ld	r24, Y
   1cb34:	ce 5a       	subi	r28, 0xAE	; 174
   1cb36:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cb38:	4a e0       	ldi	r20, 0x0A	; 10
   1cb3a:	be 01       	movw	r22, r28
   1cb3c:	6f 5b       	subi	r22, 0xBF	; 191
   1cb3e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb40:	90 e0       	ldi	r25, 0x00	; 0
   1cb42:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
          strcpy(payload, tmp1);
   1cb46:	be 01       	movw	r22, r28
   1cb48:	6f 5b       	subi	r22, 0xBF	; 191
   1cb4a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb4c:	c5 01       	movw	r24, r10
   1cb4e:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
          strcat(payload, ",");
   1cb52:	66 e3       	ldi	r22, 0x36	; 54
   1cb54:	75 e0       	ldi	r23, 0x05	; 5
   1cb56:	c5 01       	movw	r24, r10
   1cb58:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
          itoa(start_min, tmp1, 10);
   1cb5c:	c3 55       	subi	r28, 0x53	; 83
   1cb5e:	df 4f       	sbci	r29, 0xFF	; 255
   1cb60:	88 81       	ld	r24, Y
   1cb62:	cd 5a       	subi	r28, 0xAD	; 173
   1cb64:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cb66:	4a e0       	ldi	r20, 0x0A	; 10
   1cb68:	be 01       	movw	r22, r28
   1cb6a:	6f 5b       	subi	r22, 0xBF	; 191
   1cb6c:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb6e:	90 e0       	ldi	r25, 0x00	; 0
   1cb70:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
          strcat(payload, tmp1);
   1cb74:	be 01       	movw	r22, r28
   1cb76:	6f 5b       	subi	r22, 0xBF	; 191
   1cb78:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb7a:	c5 01       	movw	r24, r10
   1cb7c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
          strcat(payload, ",");
   1cb80:	66 e3       	ldi	r22, 0x36	; 54
   1cb82:	75 e0       	ldi	r23, 0x05	; 5
   1cb84:	c5 01       	movw	r24, r10
   1cb86:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
          itoa(stop_hour, tmp1, 10);
   1cb8a:	c4 55       	subi	r28, 0x54	; 84
   1cb8c:	df 4f       	sbci	r29, 0xFF	; 255
   1cb8e:	88 81       	ld	r24, Y
   1cb90:	cc 5a       	subi	r28, 0xAC	; 172
   1cb92:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cb94:	4a e0       	ldi	r20, 0x0A	; 10
   1cb96:	be 01       	movw	r22, r28
   1cb98:	6f 5b       	subi	r22, 0xBF	; 191
   1cb9a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb9c:	90 e0       	ldi	r25, 0x00	; 0
   1cb9e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
          strcat(payload, tmp1);
   1cba2:	be 01       	movw	r22, r28
   1cba4:	6f 5b       	subi	r22, 0xBF	; 191
   1cba6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cba8:	c5 01       	movw	r24, r10
   1cbaa:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
          strcat(payload, ",");
   1cbae:	66 e3       	ldi	r22, 0x36	; 54
   1cbb0:	75 e0       	ldi	r23, 0x05	; 5
   1cbb2:	c5 01       	movw	r24, r10
   1cbb4:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
          itoa(stop_min, tmp1, 10);
   1cbb8:	cc 55       	subi	r28, 0x5C	; 92
   1cbba:	df 4f       	sbci	r29, 0xFF	; 255
   1cbbc:	88 81       	ld	r24, Y
   1cbbe:	c4 5a       	subi	r28, 0xA4	; 164
   1cbc0:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cbc2:	4a e0       	ldi	r20, 0x0A	; 10
   1cbc4:	be 01       	movw	r22, r28
   1cbc6:	6f 5b       	subi	r22, 0xBF	; 191
   1cbc8:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbca:	90 e0       	ldi	r25, 0x00	; 0
   1cbcc:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
          strcat(payload, tmp1);
   1cbd0:	be 01       	movw	r22, r28
   1cbd2:	6f 5b       	subi	r22, 0xBF	; 191
   1cbd4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbd6:	c5 01       	movw	r24, r10
   1cbd8:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "time", payload);
   1cbdc:	95 01       	movw	r18, r10
   1cbde:	48 e7       	ldi	r20, 0x78	; 120
   1cbe0:	56 e0       	ldi	r21, 0x06	; 6
   1cbe2:	66 2d       	mov	r22, r6
   1cbe4:	89 2d       	mov	r24, r9
   1cbe6:	0e 94 f8 be 	call	0x17df0	; 0x17df0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
          itoa(active, tmp1, 10);
   1cbea:	cf 57       	subi	r28, 0x7F	; 127
   1cbec:	df 4f       	sbci	r29, 0xFF	; 255
   1cbee:	88 81       	ld	r24, Y
   1cbf0:	c1 58       	subi	r28, 0x81	; 129
   1cbf2:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cbf4:	4a e0       	ldi	r20, 0x0A	; 10
   1cbf6:	be 01       	movw	r22, r28
   1cbf8:	6f 5b       	subi	r22, 0xBF	; 191
   1cbfa:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbfc:	90 e0       	ldi	r25, 0x00	; 0
   1cbfe:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
          strcpy(payload, tmp1);
   1cc02:	be 01       	movw	r22, r28
   1cc04:	6f 5b       	subi	r22, 0xBF	; 191
   1cc06:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc08:	c5 01       	movw	r24, r10
   1cc0a:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "active", payload);
   1cc0e:	95 01       	movw	r18, r10
   1cc10:	4a e0       	ldi	r20, 0x0A	; 10
   1cc12:	54 e0       	ldi	r21, 0x04	; 4
   1cc14:	66 2d       	mov	r22, r6
   1cc16:	89 2d       	mov	r24, r9
   1cc18:	0e 94 f8 be 	call	0x17df0	; 0x17df0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2994
          itoa(thermostat_program_get_threshold(idx, progid), tmp1, 10);
   1cc1c:	66 2d       	mov	r22, r6
   1cc1e:	89 2d       	mov	r24, r9
   1cc20:	0e 94 37 72 	call	0xe46e	; 0xe46e <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cc24:	4a e0       	ldi	r20, 0x0A	; 10
   1cc26:	be 01       	movw	r22, r28
   1cc28:	6f 5b       	subi	r22, 0xBF	; 191
   1cc2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc2c:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
          strcpy(payload, tmp1);
   1cc30:	be 01       	movw	r22, r28
   1cc32:	6f 5b       	subi	r22, 0xBF	; 191
   1cc34:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc36:	c5 01       	movw	r24, r10
   1cc38:	0e 94 32 fe 	call	0x1fc64	; 0x1fc64 <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2996
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "threshold", payload);
   1cc3c:	95 01       	movw	r18, r10
   1cc3e:	4a e2       	ldi	r20, 0x2A	; 42
   1cc40:	56 e0       	ldi	r21, 0x06	; 6
   1cc42:	66 2d       	mov	r22, r6
   1cc44:	89 2d       	mov	r24, r9
   1cc46:	0e 94 f8 be 	call	0x17df0	; 0x17df0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
   1cc4a:	86 9c       	mul	r8, r6
   1cc4c:	c0 01       	movw	r24, r0
   1cc4e:	87 9c       	mul	r8, r7
   1cc50:	90 0d       	add	r25, r0
   1cc52:	11 24       	eor	r1, r1
   1cc54:	cd 54       	subi	r28, 0x4D	; 77
   1cc56:	df 4f       	sbci	r29, 0xFF	; 255
   1cc58:	e8 81       	ld	r30, Y
   1cc5a:	f9 81       	ldd	r31, Y+1	; 0x01
   1cc5c:	c3 5b       	subi	r28, 0xB3	; 179
   1cc5e:	d0 40       	sbci	r29, 0x00	; 0
   1cc60:	8e 0f       	add	r24, r30
   1cc62:	9f 1f       	adc	r25, r31
   1cc64:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1cc68:	4a e0       	ldi	r20, 0x0A	; 10
   1cc6a:	b5 01       	movw	r22, r10
   1cc6c:	90 e0       	ldi	r25, 0x00	; 0
   1cc6e:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
          itoa(thermostat_program_get_week(idx, progid), payload, 10);
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "week", payload);
   1cc72:	95 01       	movw	r18, r10
   1cc74:	4c e4       	ldi	r20, 0x4C	; 76
   1cc76:	58 e0       	ldi	r21, 0x08	; 8
   1cc78:	66 2d       	mov	r22, r6
   1cc7a:	89 2d       	mov	r24, r9
   1cc7c:	0e 94 f8 be 	call	0x17df0	; 0x17df0 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
   1cc80:	ff ef       	ldi	r31, 0xFF	; 255
   1cc82:	6f 1a       	sub	r6, r31
   1cc84:	7f 0a       	sbc	r7, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   1cc86:	2b e0       	ldi	r18, 0x0B	; 11
   1cc88:	62 16       	cp	r6, r18
   1cc8a:	71 04       	cpc	r7, r1
   1cc8c:	09 f0       	breq	.+2      	; 0x1cc90 <main+0xed2>
   1cc8e:	32 cf       	rjmp	.-412    	; 0x1caf4 <main+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1cc90:	93 94       	inc	r9
   1cc92:	3d e4       	ldi	r19, 0x4D	; 77
   1cc94:	43 0e       	add	r4, r19
   1cc96:	51 1c       	adc	r5, r1
   1cc98:	48 e0       	ldi	r20, 0x08	; 8
   1cc9a:	94 12       	cpse	r9, r20
   1cc9c:	e5 ce       	rjmp	.-566    	; 0x1ca68 <main+0xcaa>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3279
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
  uint8_t te = 0;
  uint8_t prg = 0;
  uint8_t act;
  uint8_t active = 0;
   1cc9e:	c2 55       	subi	r28, 0x52	; 82
   1cca0:	df 4f       	sbci	r29, 0xFF	; 255
   1cca2:	18 82       	st	Y, r1
   1cca4:	ce 5a       	subi	r28, 0xAE	; 174
   1cca6:	d0 40       	sbci	r29, 0x00	; 0
   1cca8:	7c e5       	ldi	r23, 0x5C	; 92
   1ccaa:	27 2e       	mov	r2, r23
   1ccac:	33 24       	eor	r3, r3
   1ccae:	33 94       	inc	r3
   1ccb0:	51 2c       	mov	r5, r1
   1ccb2:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3275
{
  uint8_t tdsid = 0;
  uint8_t tmode = 0;
  uint8_t tout = 0;
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
   1ccb4:	e8 ec       	ldi	r30, 0xC8	; 200
   1ccb6:	9e 2e       	mov	r9, r30
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1ccb8:	c1 01       	movw	r24, r2
   1ccba:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1ccbe:	a8 2e       	mov	r10, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
  {
    tdsid = thermostat_ring_get_asociate_tds(tix);
    tmode = thermostat_ring_get_mode(tix);
   1ccc0:	84 2d       	mov	r24, r4
   1ccc2:	0e 94 ac 72 	call	0xe558	; 0xe558 <thermostat_ring_get_mode(unsigned char)>
   1ccc6:	78 2e       	mov	r7, r24
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1ccc8:	c1 01       	movw	r24, r2
   1ccca:	03 96       	adiw	r24, 0x03	; 3
   1cccc:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1ccd0:	b8 2e       	mov	r11, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3288
    tout = thermostat_ring_get_output(tix);
    thresh = thermostat_ring_get_mezni(tix);
   1ccd2:	84 2d       	mov	r24, r4
   1ccd4:	0e 94 b4 72 	call	0xe568	; 0xe568 <thermostat_ring_get_mezni(unsigned char)>
   1ccd8:	cd 54       	subi	r28, 0x4D	; 77
   1ccda:	df 4f       	sbci	r29, 0xFF	; 255
   1ccdc:	99 83       	std	Y+1, r25	; 0x01
   1ccde:	88 83       	st	Y, r24
   1cce0:	c3 5b       	subi	r28, 0xB3	; 179
   1cce2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3289
    if (tmode == TERM_MODE_PROG)
   1cce4:	52 e0       	ldi	r21, 0x02	; 2
   1cce6:	75 12       	cpse	r7, r21
   1cce8:	02 c5       	rjmp	.+2564   	; 0x1d6ee <main+0x1930>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1ccea:	c1 01       	movw	r24, r2
   1ccec:	01 97       	sbiw	r24, 0x01	; 1
   1ccee:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1ccf2:	88 2e       	mov	r8, r24
dayOfTheWeek():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:178
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
   1ccf4:	90 91 11 12 	lds	r25, 0x1211	; 0x801211 <now+0x1>
   1ccf8:	ec eb       	ldi	r30, 0xBC	; 188
   1ccfa:	f8 e8       	ldi	r31, 0x88	; 136
main():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1ccfc:	81 e0       	ldi	r24, 0x01	; 1
date2days():
   1ccfe:	89 17       	cp	r24, r25
   1cd00:	20 f4       	brcc	.+8      	; 0x1cd0a <main+0xf4c>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:60
        days += pgm_read_byte(daysInMonth + i - 1);
   1cd02:	24 91       	lpm	r18, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1cd04:	8f 5f       	subi	r24, 0xFF	; 255
   1cd06:	31 96       	adiw	r30, 0x01	; 1
   1cd08:	fa cf       	rjmp	.-12     	; 0x1ccfe <main+0xf40>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
{
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   1cd0a:	6f ef       	ldi	r22, 0xFF	; 255
   1cd0c:	86 16       	cp	r8, r22
   1cd0e:	09 f4       	brne	.+2      	; 0x1cd12 <main+0xf54>
   1cd10:	7f c0       	rjmp	.+254    	; 0x1ce10 <main+0x1052>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1cd12:	7d e4       	ldi	r23, 0x4D	; 77
   1cd14:	87 9e       	mul	r8, r23
   1cd16:	c0 01       	movw	r24, r0
   1cd18:	11 24       	eor	r1, r1
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   1cd1a:	40 91 13 12 	lds	r20, 0x1213	; 0x801213 <now+0x3>
   1cd1e:	20 91 14 12 	lds	r18, 0x1214	; 0x801214 <now+0x4>
   1cd22:	30 e0       	ldi	r19, 0x00	; 0
   1cd24:	f9 01       	movw	r30, r18
   1cd26:	5c e3       	ldi	r21, 0x3C	; 60
   1cd28:	45 9f       	mul	r20, r21
   1cd2a:	e0 0d       	add	r30, r0
   1cd2c:	f1 1d       	adc	r31, r1
   1cd2e:	11 24       	eor	r1, r1
   1cd30:	cf 54       	subi	r28, 0x4F	; 79
   1cd32:	df 4f       	sbci	r29, 0xFF	; 255
   1cd34:	f9 83       	std	Y+1, r31	; 0x01
   1cd36:	e8 83       	st	Y, r30
   1cd38:	c1 5b       	subi	r28, 0xB1	; 177
   1cd3a:	d0 40       	sbci	r29, 0x00	; 0
   1cd3c:	71 2c       	mov	r7, r1
   1cd3e:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1cd40:	bc 01       	movw	r22, r24
   1cd42:	6e 50       	subi	r22, 0x0E	; 14
   1cd44:	7e 4f       	sbci	r23, 0xFE	; 254
   1cd46:	c7 54       	subi	r28, 0x47	; 71
   1cd48:	df 4f       	sbci	r29, 0xFF	; 255
   1cd4a:	79 83       	std	Y+1, r23	; 0x01
   1cd4c:	68 83       	st	Y, r22
   1cd4e:	c9 5b       	subi	r28, 0xB9	; 185
   1cd50:	d0 40       	sbci	r29, 0x00	; 0
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1cd52:	ce 01       	movw	r24, r28
   1cd54:	01 96       	adiw	r24, 0x01	; 1
   1cd56:	6c 01       	movw	r12, r24
   1cd58:	fe 01       	movw	r30, r28
   1cd5a:	ef 5b       	subi	r30, 0xBF	; 191
   1cd5c:	ff 4f       	sbci	r31, 0xFF	; 255
   1cd5e:	7f 01       	movw	r14, r30
   1cd60:	8e 01       	movw	r16, r28
   1cd62:	0c 55       	subi	r16, 0x5C	; 92
   1cd64:	1f 4f       	sbci	r17, 0xFF	; 255
   1cd66:	9e 01       	movw	r18, r28
   1cd68:	24 55       	subi	r18, 0x54	; 84
   1cd6a:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd6c:	ae 01       	movw	r20, r28
   1cd6e:	43 55       	subi	r20, 0x53	; 83
   1cd70:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd72:	66 2d       	mov	r22, r6
   1cd74:	88 2d       	mov	r24, r8
   1cd76:	0e 94 59 72 	call	0xe4b2	; 0xe4b2 <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   1cd7a:	89 81       	ldd	r24, Y+1	; 0x01
   1cd7c:	81 30       	cpi	r24, 0x01	; 1
   1cd7e:	09 f0       	breq	.+2      	; 0x1cd82 <main+0xfc4>
   1cd80:	ad c4       	rjmp	.+2394   	; 0x1d6dc <main+0x191e>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1cd82:	f6 e0       	ldi	r31, 0x06	; 6
   1cd84:	f6 9d       	mul	r31, r6
   1cd86:	c0 01       	movw	r24, r0
   1cd88:	f7 9d       	mul	r31, r7
   1cd8a:	90 0d       	add	r25, r0
   1cd8c:	11 24       	eor	r1, r1
   1cd8e:	c7 54       	subi	r28, 0x47	; 71
   1cd90:	df 4f       	sbci	r29, 0xFF	; 255
   1cd92:	28 81       	ld	r18, Y
   1cd94:	39 81       	ldd	r19, Y+1	; 0x01
   1cd96:	c9 5b       	subi	r28, 0xB9	; 185
   1cd98:	d0 40       	sbci	r29, 0x00	; 0
   1cd9a:	82 0f       	add	r24, r18
   1cd9c:	93 1f       	adc	r25, r19
   1cd9e:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   1cda2:	c3 55       	subi	r28, 0x53	; 83
   1cda4:	df 4f       	sbci	r29, 0xFF	; 255
   1cda6:	98 81       	ld	r25, Y
   1cda8:	cd 5a       	subi	r28, 0xAD	; 173
   1cdaa:	d0 40       	sbci	r29, 0x00	; 0
   1cdac:	c4 55       	subi	r28, 0x54	; 84
   1cdae:	df 4f       	sbci	r29, 0xFF	; 255
   1cdb0:	28 81       	ld	r18, Y
   1cdb2:	cc 5a       	subi	r28, 0xAC	; 172
   1cdb4:	d0 40       	sbci	r29, 0x00	; 0
   1cdb6:	30 e0       	ldi	r19, 0x00	; 0
   1cdb8:	4c e3       	ldi	r20, 0x3C	; 60
   1cdba:	94 9f       	mul	r25, r20
   1cdbc:	20 0d       	add	r18, r0
   1cdbe:	31 1d       	adc	r19, r1
   1cdc0:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1cdc2:	cf 54       	subi	r28, 0x4F	; 79
   1cdc4:	df 4f       	sbci	r29, 0xFF	; 255
   1cdc6:	68 81       	ld	r22, Y
   1cdc8:	79 81       	ldd	r23, Y+1	; 0x01
   1cdca:	c1 5b       	subi	r28, 0xB1	; 177
   1cdcc:	d0 40       	sbci	r29, 0x00	; 0
   1cdce:	62 17       	cp	r22, r18
   1cdd0:	73 07       	cpc	r23, r19
   1cdd2:	0c f4       	brge	.+2      	; 0x1cdd6 <main+0x1018>
   1cdd4:	83 c4       	rjmp	.+2310   	; 0x1d6dc <main+0x191e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   1cdd6:	cc 55       	subi	r28, 0x5C	; 92
   1cdd8:	df 4f       	sbci	r29, 0xFF	; 255
   1cdda:	98 81       	ld	r25, Y
   1cddc:	c4 5a       	subi	r28, 0xA4	; 164
   1cdde:	d0 40       	sbci	r29, 0x00	; 0
   1cde0:	22 96       	adiw	r28, 0x02	; 2
   1cde2:	2f ad       	ldd	r18, Y+63	; 0x3f
   1cde4:	22 97       	sbiw	r28, 0x02	; 2
   1cde6:	30 e0       	ldi	r19, 0x00	; 0
   1cde8:	94 9f       	mul	r25, r20
   1cdea:	20 0d       	add	r18, r0
   1cdec:	31 1d       	adc	r19, r1
   1cdee:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1cdf0:	62 17       	cp	r22, r18
   1cdf2:	73 07       	cpc	r23, r19
   1cdf4:	0c f0       	brlt	.+2      	; 0x1cdf8 <main+0x103a>
   1cdf6:	72 c4       	rjmp	.+2276   	; 0x1d6dc <main+0x191e>
   1cdf8:	80 ff       	sbrs	r24, 0
   1cdfa:	70 c4       	rjmp	.+2272   	; 0x1d6dc <main+0x191e>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1cdfc:	66 2d       	mov	r22, r6
   1cdfe:	88 2d       	mov	r24, r8
   1ce00:	0e 94 37 72 	call	0xe46e	; 0xe46e <thermostat_program_get_threshold(unsigned char, unsigned char)>
   1ce04:	cd 54       	subi	r28, 0x4D	; 77
   1ce06:	df 4f       	sbci	r29, 0xFF	; 255
   1ce08:	99 83       	std	Y+1, r25	; 0x01
   1ce0a:	88 83       	st	Y, r24
   1ce0c:	c3 5b       	subi	r28, 0xB3	; 179
   1ce0e:	d0 40       	sbci	r29, 0x00	; 0
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   1ce10:	f2 01       	movw	r30, r4
   1ce12:	e7 5d       	subi	r30, 0xD7	; 215
   1ce14:	f4 4f       	sbci	r31, 0xF4	; 244
   1ce16:	10 82       	st	Z, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
            thermostat_ring_set_state(tix, TERM_STAV_STOP);
            thermostat_ring_set_power(tix, 0);
          }
        case PROG_NO_INTERVAL:
          {
            tmode = TERM_MODE_OFF;
   1ce18:	71 2c       	mov	r7, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342

      thermostat_pid_setdirection_reverse(tix);
    }


    if (tdsid < HW_ONEWIRE_MAXROMS )
   1ce1a:	f5 e0       	ldi	r31, 0x05	; 5
   1ce1c:	fa 15       	cp	r31, r10
   1ce1e:	08 f4       	brcc	.+2      	; 0x1ce22 <main+0x1064>
   1ce20:	56 c0       	rjmp	.+172    	; 0x1cece <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
    {
      if (get_tds18s20(tdsid, &tds) == 1)
   1ce22:	be 01       	movw	r22, r28
   1ce24:	6f 57       	subi	r22, 0x7F	; 127
   1ce26:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce28:	8a 2d       	mov	r24, r10
   1ce2a:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1ce2e:	81 30       	cpi	r24, 0x01	; 1
   1ce30:	09 f0       	breq	.+2      	; 0x1ce34 <main+0x1076>
   1ce32:	4d c0       	rjmp	.+154    	; 0x1cece <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
        if (tds.used == 1 && status_tds18s20[tdsid].online == True)
   1ce34:	cf 57       	subi	r28, 0x7F	; 127
   1ce36:	df 4f       	sbci	r29, 0xFF	; 255
   1ce38:	88 81       	ld	r24, Y
   1ce3a:	c1 58       	subi	r28, 0x81	; 129
   1ce3c:	d0 40       	sbci	r29, 0x00	; 0
   1ce3e:	81 30       	cpi	r24, 0x01	; 1
   1ce40:	09 f0       	breq	.+2      	; 0x1ce44 <main+0x1086>
   1ce42:	77 c4       	rjmp	.+2286   	; 0x1d732 <main+0x1974>
   1ce44:	2e e1       	ldi	r18, 0x1E	; 30
   1ce46:	a2 9e       	mul	r10, r18
   1ce48:	f0 01       	movw	r30, r0
   1ce4a:	11 24       	eor	r1, r1
   1ce4c:	e6 59       	subi	r30, 0x96	; 150
   1ce4e:	f4 4f       	sbci	r31, 0xF4	; 244
   1ce50:	83 8d       	ldd	r24, Z+27	; 0x1b
   1ce52:	81 30       	cpi	r24, 0x01	; 1
   1ce54:	09 f0       	breq	.+2      	; 0x1ce58 <main+0x109a>
   1ce56:	6d c4       	rjmp	.+2266   	; 0x1d732 <main+0x1974>
   1ce58:	82 01       	movw	r16, r4
   1ce5a:	00 0f       	add	r16, r16
   1ce5c:	11 1f       	adc	r17, r17
   1ce5e:	00 0f       	add	r16, r16
   1ce60:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1ce62:	a8 01       	movw	r20, r16
   1ce64:	42 5d       	subi	r20, 0xD2	; 210
   1ce66:	54 4f       	sbci	r21, 0xF4	; 244
   1ce68:	4a 01       	movw	r8, r20
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
        {
          thermostat_pid_input(tix, status_tds18s20[tdsid].temp / 100.0);
   1ce6a:	65 81       	ldd	r22, Z+5	; 0x05
   1ce6c:	76 81       	ldd	r23, Z+6	; 0x06
   1ce6e:	07 2e       	mov	r0, r23
   1ce70:	00 0c       	add	r0, r0
   1ce72:	88 0b       	sbc	r24, r24
   1ce74:	99 0b       	sbc	r25, r25
   1ce76:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1ce7a:	20 e0       	ldi	r18, 0x00	; 0
   1ce7c:	30 e0       	ldi	r19, 0x00	; 0
   1ce7e:	48 ec       	ldi	r20, 0xC8	; 200
   1ce80:	52 e4       	ldi	r21, 0x42	; 66
   1ce82:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1ce86:	f4 01       	movw	r30, r8
   1ce88:	60 83       	st	Z, r22
   1ce8a:	71 83       	std	Z+1, r23	; 0x01
   1ce8c:	82 83       	std	Z+2, r24	; 0x02
   1ce8e:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1ce90:	98 01       	movw	r18, r16
   1ce92:	2e 5b       	subi	r18, 0xBE	; 190
   1ce94:	34 4f       	sbci	r19, 0xF4	; 244
   1ce96:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3348
          thermostat_pid_setpoint(tix, thresh);
   1ce98:	cd 54       	subi	r28, 0x4D	; 77
   1ce9a:	df 4f       	sbci	r29, 0xFF	; 255
   1ce9c:	48 81       	ld	r20, Y
   1ce9e:	59 81       	ldd	r21, Y+1	; 0x01
   1cea0:	c3 5b       	subi	r28, 0xB3	; 179
   1cea2:	d0 40       	sbci	r29, 0x00	; 0
   1cea4:	ba 01       	movw	r22, r20
   1cea6:	55 0f       	add	r21, r21
   1cea8:	88 0b       	sbc	r24, r24
   1ceaa:	99 0b       	sbc	r25, r25
   1ceac:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1ceb0:	f4 01       	movw	r30, r8
   1ceb2:	60 83       	st	Z, r22
   1ceb4:	71 83       	std	Z+1, r23	; 0x01
   1ceb6:	82 83       	std	Z+2, r24	; 0x02
   1ceb8:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1ceba:	f8 01       	movw	r30, r16
   1cebc:	ea 5a       	subi	r30, 0xAA	; 170
   1cebe:	f4 4f       	sbci	r31, 0xF4	; 244
   1cec0:	60 81       	ld	r22, Z
   1cec2:	71 81       	ldd	r23, Z+1	; 0x01
   1cec4:	82 81       	ldd	r24, Z+2	; 0x02
   1cec6:	93 81       	ldd	r25, Z+3	; 0x03
   1cec8:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
   1cecc:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
          thermostat_ring_set_power(tix, pwm);
        }
    }


    if (tdsid >= HW_ONEWIRE_MAXROMS && tdsid < HW_ONEWIRE_MAXROMS + MAX_RTDS)
   1cece:	1a ef       	ldi	r17, 0xFA	; 250
   1ced0:	1a 0d       	add	r17, r10
   1ced2:	1a 30       	cpi	r17, 0x0A	; 10
   1ced4:	08 f0       	brcs	.+2      	; 0x1ced8 <main+0x111a>
   1ced6:	56 c0       	rjmp	.+172    	; 0x1cf84 <main+0x11c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3364
    {
      act = tdsid - HW_ONEWIRE_MAXROMS;
      remote_tds_get_active(act , &active);
   1ced8:	be 01       	movw	r22, r28
   1ceda:	62 55       	subi	r22, 0x52	; 82
   1cedc:	7f 4f       	sbci	r23, 0xFF	; 255
   1cede:	81 2f       	mov	r24, r17
   1cee0:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366

      if (active == 1 && remote_tds_get_last_update(act) < 180 && remote_tds_get_type(act) == RTDS_REMOTE_TYPE_TEMP)
   1cee4:	c2 55       	subi	r28, 0x52	; 82
   1cee6:	df 4f       	sbci	r29, 0xFF	; 255
   1cee8:	88 81       	ld	r24, Y
   1ceea:	ce 5a       	subi	r28, 0xAE	; 174
   1ceec:	d0 40       	sbci	r29, 0x00	; 0
   1ceee:	81 30       	cpi	r24, 0x01	; 1
   1cef0:	09 f0       	breq	.+2      	; 0x1cef4 <main+0x1136>
   1cef2:	3f c5       	rjmp	.+2686   	; 0x1d972 <main+0x1bb4>
   1cef4:	81 2f       	mov	r24, r17
   1cef6:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <remote_tds_get_last_update(unsigned char)>
   1cefa:	84 3b       	cpi	r24, 0xB4	; 180
   1cefc:	08 f0       	brcs	.+2      	; 0x1cf00 <main+0x1142>
   1cefe:	39 c5       	rjmp	.+2674   	; 0x1d972 <main+0x1bb4>
   1cf00:	81 2f       	mov	r24, r17
   1cf02:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <remote_tds_get_type(unsigned char)>
   1cf06:	81 30       	cpi	r24, 0x01	; 1
   1cf08:	09 f0       	breq	.+2      	; 0x1cf0c <main+0x114e>
   1cf0a:	33 c5       	rjmp	.+2662   	; 0x1d972 <main+0x1bb4>
remote_tds_get_data():
   1cf0c:	81 2f       	mov	r24, r17
   1cf0e:	0e 94 43 53 	call	0xa686	; 0xa686 <remote_tds_get_data(unsigned char) [clone .part.31]>
   1cf12:	82 01       	movw	r16, r4
   1cf14:	00 0f       	add	r16, r16
   1cf16:	11 1f       	adc	r17, r17
   1cf18:	00 0f       	add	r16, r16
   1cf1a:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1cf1c:	98 01       	movw	r18, r16
   1cf1e:	22 5d       	subi	r18, 0xD2	; 210
   1cf20:	34 4f       	sbci	r19, 0xF4	; 244
   1cf22:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
      {
        thermostat_pid_input(tix, remote_tds_get_data(act) / 1000.0);
   1cf24:	bc 01       	movw	r22, r24
   1cf26:	99 0f       	add	r25, r25
   1cf28:	88 0b       	sbc	r24, r24
   1cf2a:	99 0b       	sbc	r25, r25
   1cf2c:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1cf30:	20 e0       	ldi	r18, 0x00	; 0
   1cf32:	30 e0       	ldi	r19, 0x00	; 0
   1cf34:	4a e7       	ldi	r20, 0x7A	; 122
   1cf36:	54 e4       	ldi	r21, 0x44	; 68
   1cf38:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1cf3c:	f4 01       	movw	r30, r8
   1cf3e:	60 83       	st	Z, r22
   1cf40:	71 83       	std	Z+1, r23	; 0x01
   1cf42:	82 83       	std	Z+2, r24	; 0x02
   1cf44:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1cf46:	98 01       	movw	r18, r16
   1cf48:	2e 5b       	subi	r18, 0xBE	; 190
   1cf4a:	34 4f       	sbci	r19, 0xF4	; 244
   1cf4c:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
        thermostat_pid_setpoint(tix, thresh);
   1cf4e:	cd 54       	subi	r28, 0x4D	; 77
   1cf50:	df 4f       	sbci	r29, 0xFF	; 255
   1cf52:	48 81       	ld	r20, Y
   1cf54:	59 81       	ldd	r21, Y+1	; 0x01
   1cf56:	c3 5b       	subi	r28, 0xB3	; 179
   1cf58:	d0 40       	sbci	r29, 0x00	; 0
   1cf5a:	ba 01       	movw	r22, r20
   1cf5c:	55 0f       	add	r21, r21
   1cf5e:	88 0b       	sbc	r24, r24
   1cf60:	99 0b       	sbc	r25, r25
   1cf62:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1cf66:	f4 01       	movw	r30, r8
   1cf68:	60 83       	st	Z, r22
   1cf6a:	71 83       	std	Z+1, r23	; 0x01
   1cf6c:	82 83       	std	Z+2, r24	; 0x02
   1cf6e:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1cf70:	f8 01       	movw	r30, r16
   1cf72:	ea 5a       	subi	r30, 0xAA	; 170
   1cf74:	f4 4f       	sbci	r31, 0xF4	; 244
   1cf76:	60 81       	ld	r22, Z
   1cf78:	71 81       	ldd	r23, Z+1	; 0x01
   1cf7a:	82 81       	ldd	r24, Z+2	; 0x02
   1cf7c:	93 81       	ldd	r25, Z+3	; 0x03
   1cf7e:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
   1cf82:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3402
        else
        blink_led_off(LED_DOWN_I);
      */
    }

    if (tmode == TERM_MODE_OFF)
   1cf84:	71 10       	cpse	r7, r1
   1cf86:	d9 c3       	rjmp	.+1970   	; 0x1d73a <main+0x197c>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1cf88:	ff ef       	ldi	r31, 0xFF	; 255
   1cf8a:	6e ef       	ldi	r22, 0xFE	; 254
   1cf8c:	bf 12       	cpse	r11, r31
   1cf8e:	dd c3       	rjmp	.+1978   	; 0x1d74a <main+0x198c>
   1cf90:	8f ef       	ldi	r24, 0xFF	; 255
   1cf92:	48 1a       	sub	r4, r24
   1cf94:	58 0a       	sbc	r5, r24
   1cf96:	91 e2       	ldi	r25, 0x21	; 33
   1cf98:	29 0e       	add	r2, r25
   1cf9a:	31 1c       	adc	r3, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3283
  uint8_t act;
  uint8_t active = 0;
  struct_DDS18s20 tds;


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   1cf9c:	e5 e0       	ldi	r30, 0x05	; 5
   1cf9e:	4e 16       	cp	r4, r30
   1cfa0:	51 04       	cpc	r5, r1
   1cfa2:	09 f0       	breq	.+2      	; 0x1cfa6 <main+0x11e8>
   1cfa4:	89 ce       	rjmp	.-750    	; 0x1ccb8 <main+0xefa>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1cfa6:	10 e0       	ldi	r17, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3951
      if (thermostat_ring_get_active(idx) != RING_FREE)
   1cfa8:	81 2f       	mov	r24, r17
   1cfaa:	0e 94 0e 73 	call	0xe61c	; 0xe61c <thermostat_ring_get_active(unsigned char)>
   1cfae:	8f 3f       	cpi	r24, 0xFF	; 255
   1cfb0:	19 f0       	breq	.+6      	; 0x1cfb8 <main+0x11fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3952
        mqtt_send_pid_variable(idx);
   1cfb2:	81 2f       	mov	r24, r17
   1cfb4:	0e 94 21 55 	call	0xaa42	; 0xaa42 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1cfb8:	1f 5f       	subi	r17, 0xFF	; 255
   1cfba:	15 30       	cpi	r17, 0x05	; 5
   1cfbc:	a9 f7       	brne	.-22     	; 0x1cfa8 <main+0x11ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   1cfbe:	0e 94 77 7f 	call	0xfeee	; 0xfeee <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3959
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   1cfc2:	0e 94 de ba 	call	0x175bc	; 0x175bc <Temperature_LM75_Derived::readTemperatureC() [clone .constprop.195]>
   1cfc6:	60 93 42 0c 	sts	0x0C42, r22	; 0x800c42 <internal_temp>
   1cfca:	70 93 43 0c 	sts	0x0C43, r23	; 0x800c43 <internal_temp+0x1>
   1cfce:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <internal_temp+0x2>
   1cfd2:	90 93 45 0c 	sts	0x0C45, r25	; 0x800c45 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   1cfd6:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
   1cfda:	87 ff       	sbrs	r24, 7
   1cfdc:	39 c0       	rjmp	.+114    	; 0x1d050 <main+0x1292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1cfde:	00 91 3d 0c 	lds	r16, 0x0C3D	; 0x800c3d <light_max>
   1cfe2:	10 91 3e 0c 	lds	r17, 0x0C3E	; 0x800c3e <light_max+0x1>
   1cfe6:	60 91 3f 0c 	lds	r22, 0x0C3F	; 0x800c3f <light_curr>
   1cfea:	70 91 40 0c 	lds	r23, 0x0C40	; 0x800c40 <light_curr+0x1>
   1cfee:	60 1b       	sub	r22, r16
   1cff0:	71 0b       	sbc	r23, r17
   1cff2:	90 e0       	ldi	r25, 0x00	; 0
   1cff4:	80 e0       	ldi	r24, 0x00	; 0
   1cff6:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1cffa:	4b 01       	movw	r8, r22
   1cffc:	5c 01       	movw	r10, r24
   1cffe:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <light_min>
   1d002:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <light_min+0x1>
   1d006:	08 1b       	sub	r16, r24
   1d008:	19 0b       	sbc	r17, r25
   1d00a:	b8 01       	movw	r22, r16
   1d00c:	90 e0       	ldi	r25, 0x00	; 0
   1d00e:	80 e0       	ldi	r24, 0x00	; 0
   1d010:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1d014:	9b 01       	movw	r18, r22
   1d016:	ac 01       	movw	r20, r24
   1d018:	c5 01       	movw	r24, r10
   1d01a:	b4 01       	movw	r22, r8
   1d01c:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
   1d020:	20 e0       	ldi	r18, 0x00	; 0
   1d022:	30 e0       	ldi	r19, 0x00	; 0
   1d024:	48 e4       	ldi	r20, 0x48	; 72
   1d026:	53 e4       	ldi	r21, 0x43	; 67
   1d028:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
   1d02c:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
      if (brigthness_display_auto_values > 200)
   1d030:	69 3c       	cpi	r22, 0xC9	; 201
   1d032:	08 f0       	brcs	.+2      	; 0x1d036 <main+0x1278>
   1d034:	c8 c3       	rjmp	.+1936   	; 0x1d7c6 <main+0x1a08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1d036:	60 93 3c 0c 	sts	0x0C3C, r22	; 0x800c3c <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3966
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   1d03a:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <brigthness_display_auto_values>
   1d03e:	85 30       	cpi	r24, 0x05	; 5
   1d040:	18 f4       	brcc	.+6      	; 0x1d048 <main+0x128a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3967
        brigthness_display_auto_values = 5;
   1d042:	85 e0       	ldi	r24, 0x05	; 5
   1d044:	80 93 3c 0c 	sts	0x0C3C, r24	; 0x800c3c <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3968
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   1d048:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <brigthness_display_auto_values>
   1d04c:	0e 94 fd b8 	call	0x171fa	; 0x171fa <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1d050:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1d054:	00 91 38 0c 	lds	r16, 0x0C38	; 0x800c38 <milis_1s>
   1d058:	10 91 39 0c 	lds	r17, 0x0C39	; 0x800c39 <milis_1s+0x1>
   1d05c:	20 91 3a 0c 	lds	r18, 0x0C3A	; 0x800c3a <milis_1s+0x2>
   1d060:	30 91 3b 0c 	lds	r19, 0x0C3B	; 0x800c3b <milis_1s+0x3>
   1d064:	ab 01       	movw	r20, r22
   1d066:	bc 01       	movw	r22, r24
   1d068:	40 1b       	sub	r20, r16
   1d06a:	51 0b       	sbc	r21, r17
   1d06c:	62 0b       	sbc	r22, r18
   1d06e:	73 0b       	sbc	r23, r19
   1d070:	48 3e       	cpi	r20, 0xE8	; 232
   1d072:	53 40       	sbci	r21, 0x03	; 3
   1d074:	61 05       	cpc	r22, r1
   1d076:	71 05       	cpc	r23, r1
   1d078:	08 f4       	brcc	.+2      	; 0x1d07c <main+0x12be>
   1d07a:	65 c1       	rjmp	.+714    	; 0x1d346 <main+0x1588>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
  {
    milis_1s += 1000;
   1d07c:	d9 01       	movw	r26, r18
   1d07e:	c8 01       	movw	r24, r16
   1d080:	88 51       	subi	r24, 0x18	; 24
   1d082:	9c 4f       	sbci	r25, 0xFC	; 252
   1d084:	af 4f       	sbci	r26, 0xFF	; 255
   1d086:	bf 4f       	sbci	r27, 0xFF	; 255
   1d088:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <milis_1s>
   1d08c:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <milis_1s+0x1>
   1d090:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <milis_1s+0x2>
   1d094:	b0 93 3b 0c 	sts	0x0C3B, r27	; 0x800c3b <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
    uptime++;
   1d098:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <uptime>
   1d09c:	90 91 35 0c 	lds	r25, 0x0C35	; 0x800c35 <uptime+0x1>
   1d0a0:	a0 91 36 0c 	lds	r26, 0x0C36	; 0x800c36 <uptime+0x2>
   1d0a4:	b0 91 37 0c 	lds	r27, 0x0C37	; 0x800c37 <uptime+0x3>
   1d0a8:	01 96       	adiw	r24, 0x01	; 1
   1d0aa:	a1 1d       	adc	r26, r1
   1d0ac:	b1 1d       	adc	r27, r1
   1d0ae:	80 93 34 0c 	sts	0x0C34, r24	; 0x800c34 <uptime>
   1d0b2:	90 93 35 0c 	sts	0x0C35, r25	; 0x800c35 <uptime+0x1>
   1d0b6:	a0 93 36 0c 	sts	0x0C36, r26	; 0x800c36 <uptime+0x2>
   1d0ba:	b0 93 37 0c 	sts	0x0C37, r27	; 0x800c37 <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   1d0be:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
   1d0c2:	86 ff       	sbrs	r24, 6
   1d0c4:	0a c0       	rjmp	.+20     	; 0x1d0da <main+0x131c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3979
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
   1d0c6:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <display_auto_shutdown_now>
   1d0ca:	90 91 33 0c 	lds	r25, 0x0C33	; 0x800c33 <display_auto_shutdown>
   1d0ce:	89 17       	cp	r24, r25
   1d0d0:	08 f0       	brcs	.+2      	; 0x1d0d4 <main+0x1316>
   1d0d2:	7d c3       	rjmp	.+1786   	; 0x1d7ce <main+0x1a10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3980
        display_auto_shutdown_now++;
   1d0d4:	8f 5f       	subi	r24, 0xFF	; 255
   1d0d6:	80 93 32 0c 	sts	0x0C32, r24	; 0x800c32 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3985
      else
        my_touch.TP_SetOnOff(LED_OFF);
    }

    mereni_hwwire(uptime);
   1d0da:	80 90 34 0c 	lds	r8, 0x0C34	; 0x800c34 <uptime>
   1d0de:	90 90 35 0c 	lds	r9, 0x0C35	; 0x800c35 <uptime+0x1>
   1d0e2:	ba e6       	ldi	r27, 0x6A	; 106
   1d0e4:	ab 2e       	mov	r10, r27
   1d0e6:	bb e0       	ldi	r27, 0x0B	; 11
   1d0e8:	bb 2e       	mov	r11, r27
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1d0ea:	71 2c       	mov	r7, r1
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1d0ec:	99 24       	eor	r9, r9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1d0ee:	1e e1       	ldi	r17, 0x1E	; 30
   1d0f0:	41 2e       	mov	r4, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   1d0f2:	be 01       	movw	r22, r28
   1d0f4:	6f 5f       	subi	r22, 0xFF	; 255
   1d0f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0f8:	87 2d       	mov	r24, r7
   1d0fa:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1d0fe:	19 81       	ldd	r17, Y+1	; 0x01
   1d100:	11 30       	cpi	r17, 0x01	; 1
   1d102:	09 f0       	breq	.+2      	; 0x1d106 <main+0x1348>
   1d104:	e8 c0       	rjmp	.+464    	; 0x1d2d6 <main+0x1518>
   1d106:	f5 01       	movw	r30, r10
   1d108:	84 8d       	ldd	r24, Z+28	; 0x1c
   1d10a:	9d 89       	ldd	r25, Y+21	; 0x15
   1d10c:	94 01       	movw	r18, r8
   1d10e:	28 1b       	sub	r18, r24
   1d110:	31 09       	sbc	r19, r1
   1d112:	92 17       	cp	r25, r18
   1d114:	13 06       	cpc	r1, r19
   1d116:	11 f0       	breq	.+4      	; 0x1d11c <main+0x135e>
   1d118:	08 f0       	brcs	.+2      	; 0x1d11c <main+0x135e>
   1d11a:	dd c0       	rjmp	.+442    	; 0x1d2d6 <main+0x1518>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   1d11c:	89 0f       	add	r24, r25
   1d11e:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   1d120:	85 8d       	ldd	r24, Z+29	; 0x1d
   1d122:	81 11       	cpse	r24, r1
   1d124:	0f c0       	rjmp	.+30     	; 0x1d144 <main+0x1386>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   1d126:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d128:	0e 94 98 68 	call	0xd130	; 0xd130 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1d12c:	be 01       	movw	r22, r28
   1d12e:	6e 5f       	subi	r22, 0xFE	; 254
   1d130:	7f 4f       	sbci	r23, 0xFF	; 255
   1d132:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d134:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   1d138:	64 e4       	ldi	r22, 0x44	; 68
   1d13a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d13c:	0e 94 40 68 	call	0xd080	; 0xd080 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   1d140:	f5 01       	movw	r30, r10
   1d142:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   1d144:	f5 01       	movw	r30, r10
   1d146:	55 8c       	ldd	r5, Z+29	; 0x1d
   1d148:	f1 e0       	ldi	r31, 0x01	; 1
   1d14a:	5f 12       	cpse	r5, r31
   1d14c:	c4 c0       	rjmp	.+392    	; 0x1d2d6 <main+0x1518>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   1d14e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d150:	0e 94 98 68 	call	0xd130	; 0xd130 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1d154:	be 01       	movw	r22, r28
   1d156:	6e 5f       	subi	r22, 0xFE	; 254
   1d158:	7f 4f       	sbci	r23, 0xFF	; 255
   1d15a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d15c:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   1d160:	be 01       	movw	r22, r28
   1d162:	6f 57       	subi	r22, 0x7F	; 127
   1d164:	7f 4f       	sbci	r23, 0xFF	; 255
   1d166:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d168:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   1d16c:	cf 57       	subi	r28, 0x7F	; 127
   1d16e:	df 4f       	sbci	r29, 0xFF	; 255
   1d170:	88 81       	ld	r24, Y
   1d172:	c1 58       	subi	r28, 0x81	; 129
   1d174:	d0 40       	sbci	r29, 0x00	; 0
   1d176:	88 23       	and	r24, r24
   1d178:	09 f4       	brne	.+2      	; 0x1d17c <main+0x13be>
   1d17a:	ad c0       	rjmp	.+346    	; 0x1d2d6 <main+0x1518>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   1d17c:	f5 01       	movw	r30, r10
   1d17e:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   1d180:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d182:	0e 94 98 68 	call	0xd130	; 0xd130 <ds2482owReset(unsigned char)>
   1d186:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   1d188:	be 01       	movw	r22, r28
   1d18a:	6e 5f       	subi	r22, 0xFE	; 254
   1d18c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d18e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d190:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <owMatchRom(unsigned char, unsigned char*)>
   1d194:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   1d196:	6e eb       	ldi	r22, 0xBE	; 190
   1d198:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d19a:	0e 94 40 68 	call	0xd080	; 0xd080 <ds2482owWriteByte(unsigned char, unsigned char)>
   1d19e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   1d1a0:	be 01       	movw	r22, r28
   1d1a2:	6f 5b       	subi	r22, 0xBF	; 191
   1d1a4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1a6:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d1a8:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d1ac:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   1d1ae:	22 96       	adiw	r28, 0x02	; 2
   1d1b0:	6f ac       	ldd	r6, Y+63	; 0x3f
   1d1b2:	22 97       	sbiw	r28, 0x02	; 2
   1d1b4:	f5 01       	movw	r30, r10
   1d1b6:	60 82       	st	Z, r6
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   1d1b8:	be 01       	movw	r22, r28
   1d1ba:	6f 5b       	subi	r22, 0xBF	; 191
   1d1bc:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1be:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d1c0:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d1c4:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   1d1c6:	22 96       	adiw	r28, 0x02	; 2
   1d1c8:	0f ad       	ldd	r16, Y+63	; 0x3f
   1d1ca:	22 97       	sbiw	r28, 0x02	; 2
   1d1cc:	f5 01       	movw	r30, r10
   1d1ce:	01 83       	std	Z+1, r16	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   1d1d0:	be 01       	movw	r22, r28
   1d1d2:	6f 5b       	subi	r22, 0xBF	; 191
   1d1d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1d6:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d1d8:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d1dc:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   1d1de:	be 01       	movw	r22, r28
   1d1e0:	6f 5b       	subi	r22, 0xBF	; 191
   1d1e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1e4:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d1e6:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d1ea:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   1d1ec:	be 01       	movw	r22, r28
   1d1ee:	6f 5b       	subi	r22, 0xBF	; 191
   1d1f0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1f2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d1f4:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d1f8:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   1d1fa:	be 01       	movw	r22, r28
   1d1fc:	6f 5b       	subi	r22, 0xBF	; 191
   1d1fe:	7f 4f       	sbci	r23, 0xFF	; 255
   1d200:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d202:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d206:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   1d208:	be 01       	movw	r22, r28
   1d20a:	6f 5b       	subi	r22, 0xBF	; 191
   1d20c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d20e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d210:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d214:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   1d216:	22 96       	adiw	r28, 0x02	; 2
   1d218:	8f ad       	ldd	r24, Y+63	; 0x3f
   1d21a:	22 97       	sbiw	r28, 0x02	; 2
   1d21c:	f5 01       	movw	r30, r10
   1d21e:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1d220:	be 01       	movw	r22, r28
   1d222:	6f 5b       	subi	r22, 0xBF	; 191
   1d224:	7f 4f       	sbci	r23, 0xFF	; 255
   1d226:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d228:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
   1d22c:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   1d22e:	22 96       	adiw	r28, 0x02	; 2
   1d230:	3f ac       	ldd	r3, Y+63	; 0x3f
   1d232:	22 97       	sbiw	r28, 0x02	; 2
   1d234:	f5 01       	movw	r30, r10
   1d236:	33 82       	std	Z+3, r3	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1d238:	be 01       	movw	r22, r28
   1d23a:	6f 5b       	subi	r22, 0xBF	; 191
   1d23c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d23e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1d240:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   1d244:	22 96       	adiw	r28, 0x02	; 2
   1d246:	9f ad       	ldd	r25, Y+63	; 0x3f
   1d248:	22 97       	sbiw	r28, 0x02	; 2
   1d24a:	f5 01       	movw	r30, r10
   1d24c:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1d24e:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   1d250:	09 f0       	breq	.+2      	; 0x1d254 <main+0x1496>
   1d252:	c1 c2       	rjmp	.+1410   	; 0x1d7d6 <main+0x1a18>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1d254:	63 2d       	mov	r22, r3
   1d256:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   1d258:	10 e0       	ldi	r17, 0x00	; 0
   1d25a:	10 2f       	mov	r17, r16
   1d25c:	00 27       	eor	r16, r16
   1d25e:	11 0f       	add	r17, r17
   1d260:	11 0f       	add	r17, r17
   1d262:	11 0f       	add	r17, r17
   1d264:	f8 e0       	ldi	r31, 0x08	; 8
   1d266:	6f 9e       	mul	r6, r31
   1d268:	c0 01       	movw	r24, r0
   1d26a:	11 24       	eor	r1, r1
   1d26c:	08 2b       	or	r16, r24
   1d26e:	19 2b       	or	r17, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1d270:	f3 e0       	ldi	r31, 0x03	; 3
   1d272:	00 0f       	add	r16, r16
   1d274:	11 1f       	adc	r17, r17
   1d276:	fa 95       	dec	r31
   1d278:	e1 f7       	brne	.-8      	; 0x1d272 <main+0x14b4>
   1d27a:	00 78       	andi	r16, 0x80	; 128
   1d27c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1d27e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1d280:	40 97       	sbiw	r24, 0x10	; 16
   1d282:	08 0f       	add	r16, r24
   1d284:	19 1f       	adc	r17, r25
   1d286:	cf 57       	subi	r28, 0x7F	; 127
   1d288:	df 4f       	sbci	r29, 0xFF	; 255
   1d28a:	e8 81       	ld	r30, Y
   1d28c:	c1 58       	subi	r28, 0x81	; 129
   1d28e:	d0 40       	sbci	r29, 0x00	; 0
   1d290:	4e 9e       	mul	r4, r30
   1d292:	f0 01       	movw	r30, r0
   1d294:	11 24       	eor	r1, r1
   1d296:	e6 59       	subi	r30, 0x96	; 150
   1d298:	f4 4f       	sbci	r31, 0xF4	; 244
   1d29a:	82 81       	ldd	r24, Z+2	; 0x02
   1d29c:	9b 01       	movw	r18, r22
   1d29e:	28 1b       	sub	r18, r24
   1d2a0:	31 09       	sbc	r19, r1
   1d2a2:	c9 01       	movw	r24, r18
   1d2a4:	96 95       	lsr	r25
   1d2a6:	98 2f       	mov	r25, r24
   1d2a8:	88 27       	eor	r24, r24
   1d2aa:	97 95       	ror	r25
   1d2ac:	87 95       	ror	r24
   1d2ae:	0e 94 87 fb 	call	0x1f70e	; 0x1f70e <__divmodhi4>
   1d2b2:	06 0f       	add	r16, r22
   1d2b4:	17 1f       	adc	r17, r23
   1d2b6:	f5 01       	movw	r30, r10
   1d2b8:	16 83       	std	Z+6, r17	; 0x06
   1d2ba:	05 83       	std	Z+5, r16	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   1d2bc:	53 8e       	std	Z+27, r5	; 0x1b
   1d2be:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1d2c0:	27 89       	ldd	r18, Z+23	; 0x17
   1d2c2:	30 8d       	ldd	r19, Z+24	; 0x18
   1d2c4:	32 8f       	std	Z+26, r19	; 0x1a
   1d2c6:	21 8f       	std	Z+25, r18	; 0x19
   1d2c8:	81 50       	subi	r24, 0x01	; 1
   1d2ca:	32 97       	sbiw	r30, 0x02	; 2
   1d2cc:	81 11       	cpse	r24, r1
   1d2ce:	f8 cf       	rjmp	.-16     	; 0x1d2c0 <main+0x1502>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1d2d0:	f5 01       	movw	r30, r10
   1d2d2:	10 87       	std	Z+8, r17	; 0x08
   1d2d4:	07 83       	std	Z+7, r16	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1d2d6:	73 94       	inc	r7
   1d2d8:	fe e1       	ldi	r31, 0x1E	; 30
   1d2da:	af 0e       	add	r10, r31
   1d2dc:	b1 1c       	adc	r11, r1
   1d2de:	26 e0       	ldi	r18, 0x06	; 6
   1d2e0:	72 12       	cpse	r7, r18
   1d2e2:	07 cf       	rjmp	.-498    	; 0x1d0f2 <main+0x1334>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1d2e4:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2033
    if (get_tds18s20(id, &tds) == 1)
   1d2e6:	be 01       	movw	r22, r28
   1d2e8:	6f 5f       	subi	r22, 0xFF	; 255
   1d2ea:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2ec:	81 2f       	mov	r24, r17
   1d2ee:	0e 94 1a 76 	call	0xec34	; 0xec34 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1d2f2:	1f 5f       	subi	r17, 0xFF	; 255
   1d2f4:	16 30       	cpi	r17, 0x06	; 6
   1d2f6:	b9 f7       	brne	.-18     	; 0x1d2e6 <main+0x1528>
   1d2f8:	56 e6       	ldi	r21, 0x66	; 102
   1d2fa:	85 2e       	mov	r8, r21
   1d2fc:	91 2c       	mov	r9, r1
   1d2fe:	a1 2c       	mov	r10, r1
   1d300:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1d302:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1980
  {
    remote_tds_get_active(idx, &active);
   1d304:	be 01       	movw	r22, r28
   1d306:	6f 5f       	subi	r22, 0xFF	; 255
   1d308:	7f 4f       	sbci	r23, 0xFF	; 255
   1d30a:	81 2f       	mov	r24, r17
   1d30c:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
    if (active == 1)
   1d310:	89 81       	ldd	r24, Y+1	; 0x01
   1d312:	81 30       	cpi	r24, 0x01	; 1
   1d314:	61 f4       	brne	.+24     	; 0x1d32e <main+0x1570>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1968
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   1d316:	c5 01       	movw	r24, r10
   1d318:	b4 01       	movw	r22, r8
   1d31a:	0e 94 38 ba 	call	0x17470	; 0x17470 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1969
    if (last < 250)
   1d31e:	8a 3f       	cpi	r24, 0xFA	; 250
   1d320:	08 f4       	brcc	.+2      	; 0x1d324 <main+0x1566>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
      last++;
   1d322:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1971
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   1d324:	48 2f       	mov	r20, r24
   1d326:	c5 01       	movw	r24, r10
   1d328:	b4 01       	movw	r22, r8
   1d32a:	0e 94 fc b9 	call	0x173f8	; 0x173f8 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1d32e:	1f 5f       	subi	r17, 0xFF	; 255
   1d330:	34 e0       	ldi	r19, 0x04	; 4
   1d332:	83 0e       	add	r8, r19
   1d334:	91 1c       	adc	r9, r1
   1d336:	a1 1c       	adc	r10, r1
   1d338:	b1 1c       	adc	r11, r1
   1d33a:	4e e8       	ldi	r20, 0x8E	; 142
   1d33c:	84 16       	cp	r8, r20
   1d33e:	91 04       	cpc	r9, r1
   1d340:	a1 04       	cpc	r10, r1
   1d342:	b1 04       	cpc	r11, r1
   1d344:	f9 f6       	brne	.-66     	; 0x1d304 <main+0x1546>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   1d346:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1d34a:	00 91 2e 0c 	lds	r16, 0x0C2E	; 0x800c2e <milis_05s>
   1d34e:	10 91 2f 0c 	lds	r17, 0x0C2F	; 0x800c2f <milis_05s+0x1>
   1d352:	20 91 30 0c 	lds	r18, 0x0C30	; 0x800c30 <milis_05s+0x2>
   1d356:	30 91 31 0c 	lds	r19, 0x0C31	; 0x800c31 <milis_05s+0x3>
   1d35a:	ab 01       	movw	r20, r22
   1d35c:	bc 01       	movw	r22, r24
   1d35e:	40 1b       	sub	r20, r16
   1d360:	51 0b       	sbc	r21, r17
   1d362:	62 0b       	sbc	r22, r18
   1d364:	73 0b       	sbc	r23, r19
   1d366:	44 3f       	cpi	r20, 0xF4	; 244
   1d368:	51 40       	sbci	r21, 0x01	; 1
   1d36a:	61 05       	cpc	r22, r1
   1d36c:	71 05       	cpc	r23, r1
   1d36e:	08 f4       	brcc	.+2      	; 0x1d372 <main+0x15b4>
   1d370:	47 c0       	rjmp	.+142    	; 0x1d400 <main+0x1642>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3993
  {
    milis_05s += 500;
   1d372:	d9 01       	movw	r26, r18
   1d374:	c8 01       	movw	r24, r16
   1d376:	8c 50       	subi	r24, 0x0C	; 12
   1d378:	9e 4f       	sbci	r25, 0xFE	; 254
   1d37a:	af 4f       	sbci	r26, 0xFF	; 255
   1d37c:	bf 4f       	sbci	r27, 0xFF	; 255
   1d37e:	80 93 2e 0c 	sts	0x0C2E, r24	; 0x800c2e <milis_05s>
   1d382:	90 93 2f 0c 	sts	0x0C2F, r25	; 0x800c2f <milis_05s+0x1>
   1d386:	a0 93 30 0c 	sts	0x0C30, r26	; 0x800c30 <milis_05s+0x2>
   1d38a:	b0 93 31 0c 	sts	0x0C31, r27	; 0x800c31 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3994
    now = rtc.now();
   1d38e:	ce 01       	movw	r24, r28
   1d390:	01 96       	adiw	r24, 0x01	; 1
   1d392:	0e 94 ce 68 	call	0xd19c	; 0xd19c <RTC_DS1307::now()>
   1d396:	87 e0       	ldi	r24, 0x07	; 7
   1d398:	fe 01       	movw	r30, r28
   1d39a:	31 96       	adiw	r30, 0x01	; 1
   1d39c:	a0 e1       	ldi	r26, 0x10	; 16
   1d39e:	b2 e1       	ldi	r27, 0x12	; 18
   1d3a0:	01 90       	ld	r0, Z+
   1d3a2:	0d 92       	st	X+, r0
   1d3a4:	8a 95       	dec	r24
   1d3a6:	e1 f7       	brne	.-8      	; 0x1d3a0 <main+0x15e2>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3162
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   1d3a8:	0e 94 9e bf 	call	0x17f3c	; 0x17f3c <RTC_DS1307::isrunning() [clone .constprop.149]>
   1d3ac:	90 91 1e 0c 	lds	r25, 0x0C1E	; 0x800c1e <selftest_data>
   1d3b0:	81 11       	cpse	r24, r1
   1d3b2:	13 c2       	rjmp	.+1062   	; 0x1d7da <main+0x1a1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3163
    sbi(selftest_data, SELFTEST_ERR_RTC);
   1d3b4:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1d3b6:	90 93 1e 0c 	sts	0x0C1E, r25	; 0x800c1e <selftest_data>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   1d3ba:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4733
//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   1d3bc:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1d3be:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737
  {
    remote_tds_get_active(idx, &active);
   1d3c0:	be 01       	movw	r22, r28
   1d3c2:	6f 5f       	subi	r22, 0xFF	; 255
   1d3c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3c6:	81 2f       	mov	r24, r17
   1d3c8:	0e 94 b0 7a 	call	0xf560	; 0xf560 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4738
    if (active == 1) cnt++;
   1d3cc:	89 81       	ldd	r24, Y+1	; 0x01
   1d3ce:	81 30       	cpi	r24, 0x01	; 1
   1d3d0:	09 f4       	brne	.+2      	; 0x1d3d4 <main+0x1616>
   1d3d2:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1d3d4:	1f 5f       	subi	r17, 0xFF	; 255
   1d3d6:	1a 30       	cpi	r17, 0x0A	; 10
   1d3d8:	99 f7       	brne	.-26     	; 0x1d3c0 <main+0x1602>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3998
    milis_05s += 500;
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;

    use_rtds = count_use_rtds();
   1d3da:	00 93 2d 0c 	sts	0x0C2D, r16	; 0x800c2d <use_rtds>
   1d3de:	08 ec       	ldi	r16, 0xC8	; 200
   1d3e0:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   1d3e2:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   1d3e4:	c8 01       	movw	r24, r16
   1d3e6:	0e 94 03 72 	call	0xe406	; 0xe406 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1d3ea:	81 30       	cpi	r24, 0x01	; 1
   1d3ec:	09 f4       	brne	.+2      	; 0x1d3f0 <main+0x1632>
   1d3ee:	b3 94       	inc	r11
   1d3f0:	0a 5e       	subi	r16, 0xEA	; 234
   1d3f2:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   1d3f4:	0c 34       	cpi	r16, 0x4C	; 76
   1d3f6:	91 e0       	ldi	r25, 0x01	; 1
   1d3f8:	19 07       	cpc	r17, r25
   1d3fa:	a1 f7       	brne	.-24     	; 0x1d3e4 <main+0x1626>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3999
    use_tds = count_use_tds();
   1d3fc:	b0 92 2c 0c 	sts	0x0C2C, r11	; 0x800c2c <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
  }


  /// kazdych 100ms
  if ((millis() - milis_005s) >= 50 )
   1d400:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1d404:	00 91 28 0c 	lds	r16, 0x0C28	; 0x800c28 <milis_005s>
   1d408:	10 91 29 0c 	lds	r17, 0x0C29	; 0x800c29 <milis_005s+0x1>
   1d40c:	20 91 2a 0c 	lds	r18, 0x0C2A	; 0x800c2a <milis_005s+0x2>
   1d410:	30 91 2b 0c 	lds	r19, 0x0C2B	; 0x800c2b <milis_005s+0x3>
   1d414:	ab 01       	movw	r20, r22
   1d416:	bc 01       	movw	r22, r24
   1d418:	40 1b       	sub	r20, r16
   1d41a:	51 0b       	sbc	r21, r17
   1d41c:	62 0b       	sbc	r22, r18
   1d41e:	73 0b       	sbc	r23, r19
   1d420:	42 33       	cpi	r20, 0x32	; 50
   1d422:	51 05       	cpc	r21, r1
   1d424:	61 05       	cpc	r22, r1
   1d426:	71 05       	cpc	r23, r1
   1d428:	a8 f1       	brcs	.+106    	; 0x1d494 <main+0x16d6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4006
  {
    milis_005s += 50;
   1d42a:	d9 01       	movw	r26, r18
   1d42c:	c8 01       	movw	r24, r16
   1d42e:	c2 96       	adiw	r24, 0x32	; 50
   1d430:	a1 1d       	adc	r26, r1
   1d432:	b1 1d       	adc	r27, r1
   1d434:	80 93 28 0c 	sts	0x0C28, r24	; 0x800c28 <milis_005s>
   1d438:	90 93 29 0c 	sts	0x0C29, r25	; 0x800c29 <milis_005s+0x1>
   1d43c:	a0 93 2a 0c 	sts	0x0C2A, r26	; 0x800c2a <milis_005s+0x2>
   1d440:	b0 93 2b 0c 	sts	0x0C2B, r27	; 0x800c2b <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4009

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1d444:	80 91 27 0c 	lds	r24, 0x0C27	; 0x800c27 <a2d_run_now>
   1d448:	81 30       	cpi	r24, 0x01	; 1
   1d44a:	21 f5       	brne	.+72     	; 0x1d494 <main+0x16d6>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1d44c:	30 91 1f 0c 	lds	r19, 0x0C1F	; 0x800c1f <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1d450:	20 91 20 0c 	lds	r18, 0x0C20	; 0x800c20 <a2d_index>
   1d454:	90 e0       	ldi	r25, 0x00	; 0
   1d456:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1d458:	61 e0       	ldi	r22, 0x01	; 1
   1d45a:	70 e0       	ldi	r23, 0x00	; 0
   1d45c:	ab 01       	movw	r20, r22
   1d45e:	08 2e       	mov	r0, r24
   1d460:	01 c0       	rjmp	.+2      	; 0x1d464 <main+0x16a6>
   1d462:	44 0f       	add	r20, r20
   1d464:	0a 94       	dec	r0
   1d466:	ea f7       	brpl	.-6      	; 0x1d462 <main+0x16a4>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1d468:	e3 2f       	mov	r30, r19
   1d46a:	e4 23       	and	r30, r20
   1d46c:	09 f4       	brne	.+2      	; 0x1d470 <main+0x16b2>
   1d46e:	b7 c1       	rjmp	.+878    	; 0x1d7de <main+0x1a20>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1d470:	e2 2f       	mov	r30, r18
   1d472:	e4 23       	and	r30, r20
   1d474:	09 f0       	breq	.+2      	; 0x1d478 <main+0x16ba>
   1d476:	b3 c1       	rjmp	.+870    	; 0x1d7de <main+0x1a20>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1d478:	24 2b       	or	r18, r20
   1d47a:	20 93 20 0c 	sts	0x0C20, r18	; 0x800c20 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1d47e:	0e 94 15 48 	call	0x902a	; 0x902a <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
    {
      a2d_start_process();
      a2d_run_now = 0;
   1d482:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4013
      if (a2d_done() == 0) a2d_run_now = 1;
   1d486:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <a2d_index>
   1d48a:	81 11       	cpse	r24, r1
   1d48c:	03 c0       	rjmp	.+6      	; 0x1d494 <main+0x16d6>
   1d48e:	81 e0       	ldi	r24, 0x01	; 1
   1d490:	80 93 27 0c 	sts	0x0C27, r24	; 0x800c27 <a2d_run_now>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:255
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
   1d494:	e0 91 4b 0f 	lds	r30, 0x0F4B	; 0x800f4b <my_touch+0x19>
   1d498:	f0 91 4c 0f 	lds	r31, 0x0F4C	; 0x800f4c <my_touch+0x1a>
   1d49c:	80 81       	ld	r24, Z
   1d49e:	90 91 53 0f 	lds	r25, 0x0F53	; 0x800f53 <my_touch+0x21>
   1d4a2:	89 23       	and	r24, r25
   1d4a4:	09 f0       	breq	.+2      	; 0x1d4a8 <main+0x16ea>
   1d4a6:	1e c2       	rjmp	.+1084   	; 0x1d8e4 <main+0x1b26>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1d4a8:	80 ed       	ldi	r24, 0xD0	; 208
   1d4aa:	0e 94 20 da 	call	0x1b440	; 0x1b440 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1d4ae:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1d4b0:	80 e9       	ldi	r24, 0x90	; 144
   1d4b2:	0e 94 20 da 	call	0x1b440	; 0x1b440 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1d4b6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1d4b8:	80 ed       	ldi	r24, 0xD0	; 208
   1d4ba:	0e 94 20 da 	call	0x1b440	; 0x1b440 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1d4be:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1d4c0:	80 e9       	ldi	r24, 0x90	; 144
   1d4c2:	0e 94 20 da 	call	0x1b440	; 0x1b440 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1d4c6:	4c 01       	movw	r8, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:240
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
   1d4c8:	60 16       	cp	r6, r16
   1d4ca:	71 06       	cpc	r7, r17
   1d4cc:	48 f0       	brcs	.+18     	; 0x1d4e0 <main+0x1722>
   1d4ce:	c8 01       	movw	r24, r16
   1d4d0:	c2 96       	adiw	r24, 0x32	; 50
   1d4d2:	68 16       	cp	r6, r24
   1d4d4:	79 06       	cpc	r7, r25
   1d4d6:	50 f0       	brcs	.+20     	; 0x1d4ec <main+0x172e>
   1d4d8:	06 15       	cp	r16, r6
   1d4da:	17 05       	cpc	r17, r7
   1d4dc:	08 f4       	brcc	.+2      	; 0x1d4e0 <main+0x1722>
   1d4de:	51 c0       	rjmp	.+162    	; 0x1d582 <main+0x17c4>
   1d4e0:	c3 01       	movw	r24, r6
   1d4e2:	c2 96       	adiw	r24, 0x32	; 50
   1d4e4:	08 17       	cp	r16, r24
   1d4e6:	19 07       	cpc	r17, r25
   1d4e8:	08 f0       	brcs	.+2      	; 0x1d4ec <main+0x172e>
   1d4ea:	4b c0       	rjmp	.+150    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:241
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
   1d4ec:	a8 14       	cp	r10, r8
   1d4ee:	b9 04       	cpc	r11, r9
   1d4f0:	48 f0       	brcs	.+18     	; 0x1d504 <main+0x1746>
   1d4f2:	c4 01       	movw	r24, r8
   1d4f4:	c2 96       	adiw	r24, 0x32	; 50
   1d4f6:	a8 16       	cp	r10, r24
   1d4f8:	b9 06       	cpc	r11, r25
   1d4fa:	48 f0       	brcs	.+18     	; 0x1d50e <main+0x1750>
   1d4fc:	8a 14       	cp	r8, r10
   1d4fe:	9b 04       	cpc	r9, r11
   1d500:	08 f4       	brcc	.+2      	; 0x1d504 <main+0x1746>
   1d502:	3f c0       	rjmp	.+126    	; 0x1d582 <main+0x17c4>
   1d504:	c5 01       	movw	r24, r10
   1d506:	c2 96       	adiw	r24, 0x32	; 50
   1d508:	88 16       	cp	r8, r24
   1d50a:	99 06       	cpc	r9, r25
   1d50c:	d0 f5       	brcc	.+116    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:243
    {
        *x=(x1+x2)/2;
   1d50e:	60 0e       	add	r6, r16
   1d510:	71 1e       	adc	r7, r17
   1d512:	93 01       	movw	r18, r6
   1d514:	36 95       	lsr	r19
   1d516:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
   1d518:	a4 e5       	ldi	r26, 0x54	; 84
   1d51a:	b3 e0       	ldi	r27, 0x03	; 3
   1d51c:	0e 94 e7 fb 	call	0x1f7ce	; 0x1f7ce <__umulhisi3>
   1d520:	20 e1       	ldi	r18, 0x10	; 16
   1d522:	42 2e       	mov	r4, r18
   1d524:	27 e2       	ldi	r18, 0x27	; 39
   1d526:	52 2e       	mov	r5, r18
   1d528:	61 2c       	mov	r6, r1
   1d52a:	71 2c       	mov	r7, r1
   1d52c:	a3 01       	movw	r20, r6
   1d52e:	92 01       	movw	r18, r4
   1d530:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1d534:	89 01       	movw	r16, r18
   1d536:	0e 50       	subi	r16, 0x0E	; 14
   1d538:	11 09       	sbc	r17, r1
   1d53a:	10 93 37 0f 	sts	0x0F37, r17	; 0x800f37 <my_touch+0x5>
   1d53e:	00 93 36 0f 	sts	0x0F36, r16	; 0x800f36 <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
   1d542:	a8 0c       	add	r10, r8
   1d544:	b9 1c       	adc	r11, r9
   1d546:	95 01       	movw	r18, r10
   1d548:	36 95       	lsr	r19
   1d54a:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:271
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
   1d54c:	a4 e0       	ldi	r26, 0x04	; 4
   1d54e:	b5 e0       	ldi	r27, 0x05	; 5
   1d550:	0e 94 e7 fb 	call	0x1f7ce	; 0x1f7ce <__umulhisi3>
   1d554:	a3 01       	movw	r20, r6
   1d556:	92 01       	movw	r18, r4
   1d558:	0e 94 bd fb 	call	0x1f77a	; 0x1f77a <__divmodsi4>
   1d55c:	2e 51       	subi	r18, 0x1E	; 30
   1d55e:	31 09       	sbc	r19, r1
   1d560:	30 93 39 0f 	sts	0x0F39, r19	; 0x800f39 <my_touch+0x7>
   1d564:	20 93 38 0f 	sts	0x0F38, r18	; 0x800f38 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:272
			switch(touch_rotation)
   1d568:	80 91 3f 0f 	lds	r24, 0x0F3F	; 0x800f3f <my_touch+0xd>
   1d56c:	81 30       	cpi	r24, 0x01	; 1
   1d56e:	09 f4       	brne	.+2      	; 0x1d572 <main+0x17b4>
   1d570:	6f c1       	rjmp	.+734    	; 0x1d850 <main+0x1a92>
   1d572:	08 f4       	brcc	.+2      	; 0x1d576 <main+0x17b8>
   1d574:	3c c1       	rjmp	.+632    	; 0x1d7ee <main+0x1a30>
   1d576:	82 30       	cpi	r24, 0x02	; 2
   1d578:	09 f4       	brne	.+2      	; 0x1d57c <main+0x17be>
   1d57a:	9b c1       	rjmp	.+822    	; 0x1d8b2 <main+0x1af4>
   1d57c:	83 30       	cpi	r24, 0x03	; 3
   1d57e:	09 f4       	brne	.+2      	; 0x1d582 <main+0x17c4>
   1d580:	a4 c1       	rjmp	.+840    	; 0x1d8ca <main+0x1b0c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:384
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
   1d582:	80 91 3e 0f 	lds	r24, 0x0F3E	; 0x800f3e <my_touch+0xc>
   1d586:	87 fd       	sbrc	r24, 7
   1d588:	13 c0       	rjmp	.+38     	; 0x1d5b0 <main+0x17f2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:386
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
   1d58a:	80 ec       	ldi	r24, 0xC0	; 192
   1d58c:	80 93 3e 0f 	sts	0x0F3E, r24	; 0x800f3e <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:387
			x0=x;
   1d590:	80 91 36 0f 	lds	r24, 0x0F36	; 0x800f36 <my_touch+0x4>
   1d594:	90 91 37 0f 	lds	r25, 0x0F37	; 0x800f37 <my_touch+0x5>
   1d598:	90 93 33 0f 	sts	0x0F33, r25	; 0x800f33 <my_touch+0x1>
   1d59c:	80 93 32 0f 	sts	0x0F32, r24	; 0x800f32 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:388
			y0=y;  	   			 
   1d5a0:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <my_touch+0x6>
   1d5a4:	90 91 39 0f 	lds	r25, 0x0F39	; 0x800f39 <my_touch+0x7>
   1d5a8:	90 93 35 0f 	sts	0x0F35, r25	; 0x800f35 <my_touch+0x3>
   1d5ac:	80 93 34 0f 	sts	0x0F34, r24	; 0x800f34 <my_touch+0x2>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
    }
  }

  ///display_touch_click
  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State() & TP_PRES_DOWN)
   1d5b0:	80 91 3e 0f 	lds	r24, 0x0F3E	; 0x800f3e <my_touch+0xc>
   1d5b4:	87 ff       	sbrs	r24, 7
   1d5b6:	b1 c1       	rjmp	.+866    	; 0x1d91a <main+0x1b5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
  {
    click_x = my_touch.x;
   1d5b8:	00 91 36 0f 	lds	r16, 0x0F36	; 0x800f36 <my_touch+0x4>
   1d5bc:	10 91 37 0f 	lds	r17, 0x0F37	; 0x800f37 <my_touch+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4022
    click_y = my_touch.y;
   1d5c0:	e0 90 38 0f 	lds	r14, 0x0F38	; 0x800f38 <my_touch+0x6>
   1d5c4:	f0 90 39 0f 	lds	r15, 0x0F39	; 0x800f39 <my_touch+0x7>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4023
    click_on_display = 1;
   1d5c8:	81 e0       	ldi	r24, 0x01	; 1
   1d5ca:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <click_on_display>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
    click_y = 0;
    click_on_display = 0;
  }


  if (click_on_display == 1 && click_on_display_last == 0)
   1d5ce:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <click_on_display>
   1d5d2:	81 30       	cpi	r24, 0x01	; 1
   1d5d4:	99 f4       	brne	.+38     	; 0x1d5fc <main+0x183e>
   1d5d6:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <click_on_display_last>
   1d5da:	81 11       	cpse	r24, r1
   1d5dc:	0f c0       	rjmp	.+30     	; 0x1d5fc <main+0x183e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  {
    click_time = millis();
   1d5de:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
    display_auto_shutdown_now = 0;
   1d5e2:	10 92 32 0c 	sts	0x0C32, r1	; 0x800c32 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4037
    if (((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0) && my_touch.TP_GetOnOff() == 0)
   1d5e6:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <brigthness_display_mode>
   1d5ea:	86 ff       	sbrs	r24, 6
   1d5ec:	07 c0       	rjmp	.+14     	; 0x1d5fc <main+0x183e>
   1d5ee:	80 91 42 0f 	lds	r24, 0x0F42	; 0x800f42 <my_touch+0x10>
   1d5f2:	81 11       	cpse	r24, r1
   1d5f4:	03 c0       	rjmp	.+6      	; 0x1d5fc <main+0x183e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4039
    {
      my_touch.TP_SetOnOff(LED_ON);
   1d5f6:	81 e0       	ldi	r24, 0x01	; 1
   1d5f8:	0e 94 ca d5 	call	0x1ab94	; 0x1ab94 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4048
  if (click_on_display == 1 && click_on_display_last == 1)
  {

  }

  click_on_display_last = click_on_display;
   1d5fc:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <click_on_display>
   1d600:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <click_on_display_last>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051


  if (draw_menu(false, 0, click_x, click_y) == true)
   1d604:	a7 01       	movw	r20, r14
   1d606:	b8 01       	movw	r22, r16
   1d608:	80 e0       	ldi	r24, 0x00	; 0
   1d60a:	0e 94 df c0 	call	0x181be	; 0x181be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
   1d60e:	88 23       	and	r24, r24
   1d610:	39 f0       	breq	.+14     	; 0x1d620 <main+0x1862>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053
  {
    draw_menu(true, 0, 0, 0);
   1d612:	50 e0       	ldi	r21, 0x00	; 0
   1d614:	40 e0       	ldi	r20, 0x00	; 0
   1d616:	70 e0       	ldi	r23, 0x00	; 0
   1d618:	60 e0       	ldi	r22, 0x00	; 0
   1d61a:	81 e0       	ldi	r24, 0x01	; 1
   1d61c:	0e 94 df c0 	call	0x181be	; 0x181be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
      draw_menu(true);
    }
    }
  */

  load = millis() - load_now;
   1d620:	0e 94 8a 64 	call	0xc914	; 0xc914 <millis>
   1d624:	dc 01       	movw	r26, r24
   1d626:	cb 01       	movw	r24, r22
   1d628:	cb 54       	subi	r28, 0x4B	; 75
   1d62a:	df 4f       	sbci	r29, 0xFF	; 255
   1d62c:	28 81       	ld	r18, Y
   1d62e:	39 81       	ldd	r19, Y+1	; 0x01
   1d630:	4a 81       	ldd	r20, Y+2	; 0x02
   1d632:	5b 81       	ldd	r21, Y+3	; 0x03
   1d634:	c5 5b       	subi	r28, 0xB5	; 181
   1d636:	d0 40       	sbci	r29, 0x00	; 0
   1d638:	82 1b       	sub	r24, r18
   1d63a:	93 0b       	sbc	r25, r19
   1d63c:	a4 0b       	sbc	r26, r20
   1d63e:	b5 0b       	sbc	r27, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4071
  if (load < load_min) load_min = load;
   1d640:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <load_min>
   1d644:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <load_min+0x1>
   1d648:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <load_min+0x2>
   1d64c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <load_min+0x3>
   1d650:	80 17       	cp	r24, r16
   1d652:	91 07       	cpc	r25, r17
   1d654:	a2 07       	cpc	r26, r18
   1d656:	b3 07       	cpc	r27, r19
   1d658:	44 f4       	brge	.+16     	; 0x1d66a <main+0x18ac>
   1d65a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1d65e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1d662:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1d666:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4072
  if (load > load_max) load_max = load;
   1d66a:	00 91 21 0c 	lds	r16, 0x0C21	; 0x800c21 <load_max>
   1d66e:	10 91 22 0c 	lds	r17, 0x0C22	; 0x800c22 <load_max+0x1>
   1d672:	20 91 23 0c 	lds	r18, 0x0C23	; 0x800c23 <load_max+0x2>
   1d676:	30 91 24 0c 	lds	r19, 0x0C24	; 0x800c24 <load_max+0x3>
   1d67a:	08 17       	cp	r16, r24
   1d67c:	19 07       	cpc	r17, r25
   1d67e:	2a 07       	cpc	r18, r26
   1d680:	3b 07       	cpc	r19, r27
   1d682:	44 f4       	brge	.+16     	; 0x1d694 <main+0x18d6>
   1d684:	80 93 21 0c 	sts	0x0C21, r24	; 0x800c21 <load_max>
   1d688:	90 93 22 0c 	sts	0x0C22, r25	; 0x800c22 <load_max+0x1>
   1d68c:	a0 93 23 0c 	sts	0x0C23, r26	; 0x800c23 <load_max+0x2>
   1d690:	b0 93 24 0c 	sts	0x0C24, r27	; 0x800c24 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4075

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   1d694:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <light_curr>
   1d698:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <light_curr+0x1>
   1d69c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <light_min>
   1d6a0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <light_min+0x1>
   1d6a4:	82 17       	cp	r24, r18
   1d6a6:	93 07       	cpc	r25, r19
   1d6a8:	20 f4       	brcc	.+8      	; 0x1d6b2 <main+0x18f4>
   1d6aa:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <light_min+0x1>
   1d6ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4076
  if (light_curr > light_max) light_max = light_curr;
   1d6b2:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <light_max>
   1d6b6:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <light_max+0x1>
   1d6ba:	28 17       	cp	r18, r24
   1d6bc:	39 07       	cpc	r19, r25
   1d6be:	20 f4       	brcc	.+8      	; 0x1d6c8 <main+0x190a>
   1d6c0:	90 93 3e 0c 	sts	0x0C3E, r25	; 0x800c3e <light_max+0x1>
   1d6c4:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1d6c8:	8e e0       	ldi	r24, 0x0E	; 14
   1d6ca:	97 eb       	ldi	r25, 0xB7	; 183
   1d6cc:	89 2b       	or	r24, r25
   1d6ce:	11 f4       	brne	.+4      	; 0x1d6d4 <main+0x1916>
   1d6d0:	0c 94 3e df 	jmp	0x1be7c	; 0x1be7c <main+0xbe>
   1d6d4:	0e 94 0e b7 	call	0x16e1c	; 0x16e1c <serialEventRun()>
   1d6d8:	0c 94 3e df 	jmp	0x1be7c	; 0x1be7c <main+0xbe>
   1d6dc:	7f ef       	ldi	r23, 0xFF	; 255
   1d6de:	67 1a       	sub	r6, r23
   1d6e0:	77 0a       	sbc	r7, r23
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1d6e2:	8b e0       	ldi	r24, 0x0B	; 11
   1d6e4:	68 16       	cp	r6, r24
   1d6e6:	71 04       	cpc	r7, r1
   1d6e8:	09 f0       	breq	.+2      	; 0x1d6ec <main+0x192e>
   1d6ea:	33 cb       	rjmp	.-2458   	; 0x1cd52 <main+0xf94>
   1d6ec:	91 cb       	rjmp	.-2270   	; 0x1ce10 <main+0x1052>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3329
            break;
          }
        default: break;
      }
    }
    if (tmode == TERM_MODE_MAN_HEAT)
   1d6ee:	93 e0       	ldi	r25, 0x03	; 3
   1d6f0:	79 12       	cpse	r7, r25
   1d6f2:	10 c0       	rjmp	.+32     	; 0x1d714 <main+0x1956>
thermostat_pid_setdirection_direct():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:50
  }
}

void thermostat_pid_setdirection_direct(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(DIRECT);
   1d6f4:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <array_pids>
   1d6f8:	f0 91 b4 0d 	lds	r31, 0x0DB4	; 0x800db4 <array_pids+0x1>
   1d6fc:	c2 01       	movw	r24, r4
   1d6fe:	88 0f       	add	r24, r24
   1d700:	99 1f       	adc	r25, r25
   1d702:	e8 0f       	add	r30, r24
   1d704:	f9 1f       	adc	r31, r25
   1d706:	70 e0       	ldi	r23, 0x00	; 0
   1d708:	60 e0       	ldi	r22, 0x00	; 0
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
}

void thermostat_pid_setdirection_reverse(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(REVERSE);
   1d70a:	80 81       	ld	r24, Z
   1d70c:	91 81       	ldd	r25, Z+1	; 0x01
   1d70e:	0e 94 df 48 	call	0x91be	; 0x91be <PID::SetControllerDirection(int)>
   1d712:	83 cb       	rjmp	.-2298   	; 0x1ce1a <main+0x105c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
    {

      thermostat_pid_setdirection_direct(tix);
    }

    if (tmode == TERM_MODE_MAN_COOL)
   1d714:	e5 e0       	ldi	r30, 0x05	; 5
   1d716:	7e 12       	cpse	r7, r30
   1d718:	80 cb       	rjmp	.-2304   	; 0x1ce1a <main+0x105c>
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
   1d71a:	e0 91 b3 0d 	lds	r30, 0x0DB3	; 0x800db3 <array_pids>
   1d71e:	f0 91 b4 0d 	lds	r31, 0x0DB4	; 0x800db4 <array_pids+0x1>
   1d722:	c2 01       	movw	r24, r4
   1d724:	88 0f       	add	r24, r24
   1d726:	99 1f       	adc	r25, r25
   1d728:	e8 0f       	add	r30, r24
   1d72a:	f9 1f       	adc	r31, r25
   1d72c:	61 e0       	ldi	r22, 0x01	; 1
   1d72e:	70 e0       	ldi	r23, 0x00	; 0
   1d730:	ec cf       	rjmp	.-40     	; 0x1d70a <main+0x194c>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3355
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
          pwm = 0;
   1d732:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3354
          pwm = thermostat_pid_output(tix);
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
   1d734:	3e ef       	ldi	r19, 0xFE	; 254
   1d736:	73 2e       	mov	r7, r19
   1d738:	ca cb       	rjmp	.-2156   	; 0x1cece <main+0x1110>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3407
    if (tmode == TERM_MODE_OFF)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_OFF);
      thermostat_ring_set_power(tix, 0);
    }
    if (tmode == TERM_MODE_MAX)
   1d73a:	21 e0       	ldi	r18, 0x01	; 1
   1d73c:	72 12       	cpse	r7, r18
   1d73e:	09 c0       	rjmp	.+18     	; 0x1d752 <main+0x1994>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d740:	3f ef       	ldi	r19, 0xFF	; 255
   1d742:	6a e0       	ldi	r22, 0x0A	; 10
   1d744:	b3 16       	cp	r11, r19
   1d746:	09 f4       	brne	.+2      	; 0x1d74a <main+0x198c>
   1d748:	23 cc       	rjmp	.-1978   	; 0x1cf90 <main+0x11d2>
   1d74a:	8b 2d       	mov	r24, r11
   1d74c:	0e 94 62 6b 	call	0xd6c4	; 0xd6c4 <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>
   1d750:	1f cc       	rjmp	.-1986   	; 0x1cf90 <main+0x11d2>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3412
    if (tmode == TERM_MODE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_HEAT_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_CLIMATE_MAX)
   1d752:	44 e0       	ldi	r20, 0x04	; 4
   1d754:	74 12       	cpse	r7, r20
   1d756:	06 c0       	rjmp	.+12     	; 0x1d764 <main+0x19a6>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d758:	5f ef       	ldi	r21, 0xFF	; 255
   1d75a:	b5 16       	cp	r11, r21
   1d75c:	09 f4       	brne	.+2      	; 0x1d760 <main+0x19a2>
   1d75e:	18 cc       	rjmp	.-2000   	; 0x1cf90 <main+0x11d2>
   1d760:	6b e0       	ldi	r22, 0x0B	; 11
   1d762:	f3 cf       	rjmp	.-26     	; 0x1d74a <main+0x198c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3417
    if (tmode == TERM_MODE_CLIMATE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_COOL_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_MAN_HEAT || tmode == TERM_MODE_MAN_COOL || tmode == TERM_MODE_FAN || tmode == TERM_MODE_ERR)
   1d764:	63 e0       	ldi	r22, 0x03	; 3
   1d766:	76 16       	cp	r7, r22
   1d768:	09 f4       	brne	.+2      	; 0x1d76c <main+0x19ae>
   1d76a:	de c0       	rjmp	.+444    	; 0x1d928 <main+0x1b6a>
   1d76c:	8b ef       	ldi	r24, 0xFB	; 251
   1d76e:	87 0d       	add	r24, r7
   1d770:	82 30       	cpi	r24, 0x02	; 2
   1d772:	08 f4       	brcc	.+2      	; 0x1d776 <main+0x19b8>
   1d774:	00 c1       	rjmp	.+512    	; 0x1d976 <main+0x1bb8>
   1d776:	7e ef       	ldi	r23, 0xFE	; 254
   1d778:	77 12       	cpse	r7, r23
   1d77a:	0a cc       	rjmp	.-2028   	; 0x1cf90 <main+0x11d2>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d77c:	4f ef       	ldi	r20, 0xFF	; 255
   1d77e:	b4 16       	cp	r11, r20
   1d780:	09 f4       	brne	.+2      	; 0x1d784 <main+0x19c6>
   1d782:	06 cc       	rjmp	.-2036   	; 0x1cf90 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  {
    strcpy_P(str_topic, termbig_header_in);
   1d784:	6c e8       	ldi	r22, 0x8C	; 140
   1d786:	78 e8       	ldi	r23, 0x88	; 136
   1d788:	ce 01       	movw	r24, r28
   1d78a:	8f 5b       	subi	r24, 0xBF	; 191
   1d78c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d78e:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    strcat(str_topic, "power-output/");
   1d792:	69 e8       	ldi	r22, 0x89	; 137
   1d794:	73 e0       	ldi	r23, 0x03	; 3
   1d796:	ce 01       	movw	r24, r28
   1d798:	8f 5b       	subi	r24, 0xBF	; 191
   1d79a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d79c:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d7a0:	4a e0       	ldi	r20, 0x0A	; 10
   1d7a2:	be 01       	movw	r22, r28
   1d7a4:	6c 55       	subi	r22, 0x5C	; 92
   1d7a6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d7a8:	8b 2d       	mov	r24, r11
   1d7aa:	90 e0       	ldi	r25, 0x00	; 0
   1d7ac:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d7b0:	be 01       	movw	r22, r28
   1d7b2:	6c 55       	subi	r22, 0x5C	; 92
   1d7b4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d7b6:	ce 01       	movw	r24, r28
   1d7b8:	8f 5b       	subi	r24, 0xBF	; 191
   1d7ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1d7bc:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
    if (mode == TERM_MODE_MAN_COOL)
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
   1d7c0:	67 e6       	ldi	r22, 0x67	; 103
   1d7c2:	78 e0       	ldi	r23, 0x08	; 8
   1d7c4:	01 c1       	rjmp	.+514    	; 0x1d9c8 <main+0x1c0a>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   1d7c6:	88 ec       	ldi	r24, 0xC8	; 200
   1d7c8:	80 93 3c 0c 	sts	0x0C3C, r24	; 0x800c3c <brigthness_display_auto_values>
   1d7cc:	36 cc       	rjmp	.-1940   	; 0x1d03a <main+0x127c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
        display_auto_shutdown_now++;
      else
        my_touch.TP_SetOnOff(LED_OFF);
   1d7ce:	80 e0       	ldi	r24, 0x00	; 0
   1d7d0:	0e 94 ca d5 	call	0x1ab94	; 0x1ab94 <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   1d7d4:	82 cc       	rjmp	.-1788   	; 0x1d0da <main+0x131c>
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   1d7d6:	13 8e       	std	Z+27, r1	; 0x1b
   1d7d8:	7e cd       	rjmp	.-1284   	; 0x1d2d6 <main+0x1518>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1d7da:	9e 7f       	andi	r25, 0xFE	; 254
   1d7dc:	ec cd       	rjmp	.-1064   	; 0x1d3b6 <main+0x15f8>
   1d7de:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1d7e0:	88 30       	cpi	r24, 0x08	; 8
   1d7e2:	91 05       	cpc	r25, r1
   1d7e4:	09 f0       	breq	.+2      	; 0x1d7e8 <main+0x1a2a>
   1d7e6:	3a ce       	rjmp	.-908    	; 0x1d45c <main+0x169e>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1d7e8:	10 92 20 0c 	sts	0x0C20, r1	; 0x800c20 <a2d_index>
   1d7ec:	4a ce       	rjmp	.-876    	; 0x1d482 <main+0x16c4>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:275
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
   1d7ee:	80 91 40 0f 	lds	r24, 0x0F40	; 0x800f40 <my_touch+0xe>
   1d7f2:	88 23       	and	r24, r24
   1d7f4:	09 f4       	brne	.+2      	; 0x1d7f8 <main+0x1a3a>
   1d7f6:	c5 ce       	rjmp	.-630    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:279
					{
						break;
					}
					else if(lcd_rotation == 1)
   1d7f8:	81 30       	cpi	r24, 0x01	; 1
   1d7fa:	59 f4       	brne	.+22     	; 0x1d812 <main+0x1a54>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:349
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1d7fc:	30 93 37 0f 	sts	0x0F37, r19	; 0x800f37 <my_touch+0x5>
   1d800:	20 93 36 0f 	sts	0x0F36, r18	; 0x800f36 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1d804:	80 91 3c 0f 	lds	r24, 0x0F3C	; 0x800f3c <my_touch+0xa>
   1d808:	90 91 3d 0f 	lds	r25, 0x0F3D	; 0x800f3d <my_touch+0xb>
   1d80c:	80 1b       	sub	r24, r16
   1d80e:	91 0b       	sbc	r25, r17
   1d810:	3d c0       	rjmp	.+122    	; 0x1d88c <main+0x1ace>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:287
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1d812:	82 30       	cpi	r24, 0x02	; 2
   1d814:	59 f4       	brne	.+22     	; 0x1d82c <main+0x1a6e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
   1d816:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <my_touch+0x8>
   1d81a:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <my_touch+0x9>
   1d81e:	80 1b       	sub	r24, r16
   1d820:	91 0b       	sbc	r25, r17
   1d822:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <my_touch+0x5>
   1d826:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <my_touch+0x4>
   1d82a:	2a c0       	rjmp	.+84     	; 0x1d880 <main+0x1ac2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:292
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1d82c:	83 30       	cpi	r24, 0x03	; 3
   1d82e:	09 f0       	breq	.+2      	; 0x1d832 <main+0x1a74>
   1d830:	a8 ce       	rjmp	.-688    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:338
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
   1d832:	10 93 39 0f 	sts	0x0F39, r17	; 0x800f39 <my_touch+0x7>
   1d836:	00 93 38 0f 	sts	0x0F38, r16	; 0x800f38 <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:339
						x = wid-x;
   1d83a:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <my_touch+0x8>
   1d83e:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <my_touch+0x9>
   1d842:	82 1b       	sub	r24, r18
   1d844:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1d846:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <my_touch+0x5>
   1d84a:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <my_touch+0x4>
   1d84e:	99 ce       	rjmp	.-718    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:302
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
   1d850:	80 91 40 0f 	lds	r24, 0x0F40	; 0x800f40 <my_touch+0xe>
   1d854:	81 11       	cpse	r24, r1
   1d856:	07 c0       	rjmp	.+14     	; 0x1d866 <main+0x1aa8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1d858:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <my_touch+0x8>
   1d85c:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <my_touch+0x9>
   1d860:	80 1b       	sub	r24, r16
   1d862:	91 0b       	sbc	r25, r17
   1d864:	f0 cf       	rjmp	.-32     	; 0x1d846 <main+0x1a88>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:306
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
   1d866:	81 30       	cpi	r24, 0x01	; 1
   1d868:	49 f4       	brne	.+18     	; 0x1d87c <main+0x1abe>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:376
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1d86a:	30 93 37 0f 	sts	0x0F37, r19	; 0x800f37 <my_touch+0x5>
   1d86e:	20 93 36 0f 	sts	0x0F36, r18	; 0x800f36 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:377
						y=tmp;
   1d872:	10 93 39 0f 	sts	0x0F39, r17	; 0x800f39 <my_touch+0x7>
   1d876:	00 93 38 0f 	sts	0x0F38, r16	; 0x800f38 <my_touch+0x6>
   1d87a:	83 ce       	rjmp	.-762    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:313
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
   1d87c:	82 30       	cpi	r24, 0x02	; 2
   1d87e:	59 f4       	brne	.+22     	; 0x1d896 <main+0x1ad8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:357
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
   1d880:	80 91 3c 0f 	lds	r24, 0x0F3C	; 0x800f3c <my_touch+0xa>
   1d884:	90 91 3d 0f 	lds	r25, 0x0F3D	; 0x800f3d <my_touch+0xb>
   1d888:	82 1b       	sub	r24, r18
   1d88a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1d88c:	90 93 39 0f 	sts	0x0F39, r25	; 0x800f39 <my_touch+0x7>
   1d890:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <my_touch+0x6>
   1d894:	76 ce       	rjmp	.-788    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1d896:	83 30       	cpi	r24, 0x03	; 3
   1d898:	09 f0       	breq	.+2      	; 0x1d89c <main+0x1ade>
   1d89a:	73 ce       	rjmp	.-794    	; 0x1d582 <main+0x17c4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:365
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
   1d89c:	80 91 3a 0f 	lds	r24, 0x0F3A	; 0x800f3a <my_touch+0x8>
   1d8a0:	90 91 3b 0f 	lds	r25, 0x0F3B	; 0x800f3b <my_touch+0x9>
   1d8a4:	82 1b       	sub	r24, r18
   1d8a6:	93 0b       	sbc	r25, r19
   1d8a8:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <my_touch+0x5>
   1d8ac:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <my_touch+0x4>
   1d8b0:	a9 cf       	rjmp	.-174    	; 0x1d804 <main+0x1a46>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:328
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
   1d8b2:	80 91 40 0f 	lds	r24, 0x0F40	; 0x800f40 <my_touch+0xe>
   1d8b6:	88 23       	and	r24, r24
   1d8b8:	09 f4       	brne	.+2      	; 0x1d8bc <main+0x1afe>
   1d8ba:	ad cf       	rjmp	.-166    	; 0x1d816 <main+0x1a58>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1d8bc:	81 30       	cpi	r24, 0x01	; 1
   1d8be:	09 f4       	brne	.+2      	; 0x1d8c2 <main+0x1b04>
   1d8c0:	b8 cf       	rjmp	.-144    	; 0x1d832 <main+0x1a74>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:345
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
   1d8c2:	83 30       	cpi	r24, 0x03	; 3
   1d8c4:	09 f0       	breq	.+2      	; 0x1d8c8 <main+0x1b0a>
   1d8c6:	5d ce       	rjmp	.-838    	; 0x1d582 <main+0x17c4>
   1d8c8:	99 cf       	rjmp	.-206    	; 0x1d7fc <main+0x1a3e>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:355
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
   1d8ca:	80 91 40 0f 	lds	r24, 0x0F40	; 0x800f40 <my_touch+0xe>
   1d8ce:	88 23       	and	r24, r24
   1d8d0:	b9 f2       	breq	.-82     	; 0x1d880 <main+0x1ac2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:359
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1d8d2:	81 30       	cpi	r24, 0x01	; 1
   1d8d4:	19 f3       	breq	.-58     	; 0x1d89c <main+0x1ade>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:368
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1d8d6:	82 30       	cpi	r24, 0x02	; 2
   1d8d8:	09 f4       	brne	.+2      	; 0x1d8dc <main+0x1b1e>
   1d8da:	be cf       	rjmp	.-132    	; 0x1d858 <main+0x1a9a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:372
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
   1d8dc:	83 30       	cpi	r24, 0x03	; 3
   1d8de:	09 f0       	breq	.+2      	; 0x1d8e2 <main+0x1b24>
   1d8e0:	50 ce       	rjmp	.-864    	; 0x1d582 <main+0x17c4>
   1d8e2:	c3 cf       	rjmp	.-122    	; 0x1d86a <main+0x1aac>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:393
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
   1d8e4:	80 91 3e 0f 	lds	r24, 0x0F3E	; 0x800f3e <my_touch+0xc>
   1d8e8:	87 ff       	sbrs	r24, 7
   1d8ea:	04 c0       	rjmp	.+8      	; 0x1d8f4 <main+0x1b36>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:395
		{
			touch_statue&=~(1<<7);
   1d8ec:	8f 77       	andi	r24, 0x7F	; 127
   1d8ee:	80 93 3e 0f 	sts	0x0F3E, r24	; 0x800f3e <my_touch+0xc>
   1d8f2:	5e ce       	rjmp	.-836    	; 0x1d5b0 <main+0x17f2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:399
		}
		else
		{
			x0=0;
   1d8f4:	10 92 33 0f 	sts	0x0F33, r1	; 0x800f33 <my_touch+0x1>
   1d8f8:	10 92 32 0f 	sts	0x0F32, r1	; 0x800f32 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:400
			y0=0;
   1d8fc:	10 92 35 0f 	sts	0x0F35, r1	; 0x800f35 <my_touch+0x3>
   1d900:	10 92 34 0f 	sts	0x0F34, r1	; 0x800f34 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:401
			x=0xffff;
   1d904:	8f ef       	ldi	r24, 0xFF	; 255
   1d906:	9f ef       	ldi	r25, 0xFF	; 255
   1d908:	90 93 37 0f 	sts	0x0F37, r25	; 0x800f37 <my_touch+0x5>
   1d90c:	80 93 36 0f 	sts	0x0F36, r24	; 0x800f36 <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:402
			y=0xffff;
   1d910:	90 93 39 0f 	sts	0x0F39, r25	; 0x800f39 <my_touch+0x7>
   1d914:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <my_touch+0x6>
   1d918:	4b ce       	rjmp	.-874    	; 0x1d5b0 <main+0x17f2>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4029
  }
  else
  {
    click_x = 0;
    click_y = 0;
    click_on_display = 0;
   1d91a:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <click_on_display>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4028
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
    click_y = 0;
   1d91e:	f1 2c       	mov	r15, r1
   1d920:	e1 2c       	mov	r14, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1d922:	10 e0       	ldi	r17, 0x00	; 0
   1d924:	00 e0       	ldi	r16, 0x00	; 0
   1d926:	53 ce       	rjmp	.-858    	; 0x1d5ce <main+0x1810>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d928:	3f ef       	ldi	r19, 0xFF	; 255
   1d92a:	b3 16       	cp	r11, r19
   1d92c:	09 f4       	brne	.+2      	; 0x1d930 <main+0x1b72>
   1d92e:	30 cb       	rjmp	.-2464   	; 0x1cf90 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  {
    strcpy_P(str_topic, termbig_header_in);
   1d930:	6c e8       	ldi	r22, 0x8C	; 140
   1d932:	78 e8       	ldi	r23, 0x88	; 136
   1d934:	ce 01       	movw	r24, r28
   1d936:	8f 5b       	subi	r24, 0xBF	; 191
   1d938:	9f 4f       	sbci	r25, 0xFF	; 255
   1d93a:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    strcat(str_topic, "power-output/");
   1d93e:	69 e8       	ldi	r22, 0x89	; 137
   1d940:	73 e0       	ldi	r23, 0x03	; 3
   1d942:	ce 01       	movw	r24, r28
   1d944:	8f 5b       	subi	r24, 0xBF	; 191
   1d946:	9f 4f       	sbci	r25, 0xFF	; 255
   1d948:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d94c:	4a e0       	ldi	r20, 0x0A	; 10
   1d94e:	be 01       	movw	r22, r28
   1d950:	6c 55       	subi	r22, 0x5C	; 92
   1d952:	7f 4f       	sbci	r23, 0xFF	; 255
   1d954:	8b 2d       	mov	r24, r11
   1d956:	90 e0       	ldi	r25, 0x00	; 0
   1d958:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d95c:	be 01       	movw	r22, r28
   1d95e:	6c 55       	subi	r22, 0x5C	; 92
   1d960:	7f 4f       	sbci	r23, 0xFF	; 255
   1d962:	ce 01       	movw	r24, r28
   1d964:	8f 5b       	subi	r24, 0xBF	; 191
   1d966:	9f 4f       	sbci	r25, 0xFF	; 255
   1d968:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3101
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
   1d96c:	61 e6       	ldi	r22, 0x61	; 97
   1d96e:	78 e0       	ldi	r23, 0x08	; 8
   1d970:	2b c0       	rjmp	.+86     	; 0x1d9c8 <main+0x1c0a>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1d972:	91 2c       	mov	r9, r1
   1d974:	03 cf       	rjmp	.-506    	; 0x1d77c <main+0x19be>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d976:	6f ef       	ldi	r22, 0xFF	; 255
   1d978:	b6 16       	cp	r11, r22
   1d97a:	09 f4       	brne	.+2      	; 0x1d97e <main+0x1bc0>
   1d97c:	09 cb       	rjmp	.-2542   	; 0x1cf90 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  {
    strcpy_P(str_topic, termbig_header_in);
   1d97e:	6c e8       	ldi	r22, 0x8C	; 140
   1d980:	78 e8       	ldi	r23, 0x88	; 136
   1d982:	ce 01       	movw	r24, r28
   1d984:	8f 5b       	subi	r24, 0xBF	; 191
   1d986:	9f 4f       	sbci	r25, 0xFF	; 255
   1d988:	0e 94 85 f1 	call	0x1e30a	; 0x1e30a <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3097
    strcat(str_topic, "power-output/");
   1d98c:	69 e8       	ldi	r22, 0x89	; 137
   1d98e:	73 e0       	ldi	r23, 0x03	; 3
   1d990:	ce 01       	movw	r24, r28
   1d992:	8f 5b       	subi	r24, 0xBF	; 191
   1d994:	9f 4f       	sbci	r25, 0xFF	; 255
   1d996:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d99a:	4a e0       	ldi	r20, 0x0A	; 10
   1d99c:	be 01       	movw	r22, r28
   1d99e:	6c 55       	subi	r22, 0x5C	; 92
   1d9a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9a2:	8b 2d       	mov	r24, r11
   1d9a4:	90 e0       	ldi	r25, 0x00	; 0
   1d9a6:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d9aa:	be 01       	movw	r22, r28
   1d9ac:	6c 55       	subi	r22, 0x5C	; 92
   1d9ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9b0:	ce 01       	movw	r24, r28
   1d9b2:	8f 5b       	subi	r24, 0xBF	; 191
   1d9b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d9b6:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1d9ba:	55 e0       	ldi	r21, 0x05	; 5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3105
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1d9bc:	67 e5       	ldi	r22, 0x57	; 87
   1d9be:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
    strcat(str_topic, "power-output/");
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1d9c0:	75 12       	cpse	r7, r21
   1d9c2:	02 c0       	rjmp	.+4      	; 0x1d9c8 <main+0x1c0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3103
      strcat(str_topic, "/cool");
   1d9c4:	61 e5       	ldi	r22, 0x51	; 81
   1d9c6:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3105
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1d9c8:	ce 01       	movw	r24, r28
   1d9ca:	8f 5b       	subi	r24, 0xBF	; 191
   1d9cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1d9ce:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
    strcat(str_topic, "/pwm");
   1d9d2:	6c e5       	ldi	r22, 0x5C	; 92
   1d9d4:	78 e0       	ldi	r23, 0x08	; 8
   1d9d6:	ce 01       	movw	r24, r28
   1d9d8:	8f 5b       	subi	r24, 0xBF	; 191
   1d9da:	9f 4f       	sbci	r25, 0xFF	; 255
   1d9dc:	0e 94 13 fe 	call	0x1fc26	; 0x1fc26 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d9e0:	4a e0       	ldi	r20, 0x0A	; 10
   1d9e2:	be 01       	movw	r22, r28
   1d9e4:	6f 5f       	subi	r22, 0xFF	; 255
   1d9e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9e8:	89 2d       	mov	r24, r9
   1d9ea:	90 e0       	ldi	r25, 0x00	; 0
   1d9ec:	0e 94 c2 f1 	call	0x1e384	; 0x1e384 <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3110
    itoa(pwm, payload, 10);
    mqtt_client.publish(str_topic, payload);
   1d9f0:	ae 01       	movw	r20, r28
   1d9f2:	4f 5f       	subi	r20, 0xFF	; 255
   1d9f4:	5f 4f       	sbci	r21, 0xFF	; 255
   1d9f6:	be 01       	movw	r22, r28
   1d9f8:	6f 5b       	subi	r22, 0xBF	; 191
   1d9fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9fc:	8b ec       	ldi	r24, 0xCB	; 203
   1d9fe:	9f e0       	ldi	r25, 0x0F	; 15
   1da00:	0e 94 05 6b 	call	0xd60a	; 0xd60a <PubSubClient::publish(char const*, char const*)>
   1da04:	c5 ca       	rjmp	.-2678   	; 0x1cf90 <main+0x11d2>

0001da06 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7448():
   1da06:	4f 92       	push	r4
   1da08:	5f 92       	push	r5
   1da0a:	6f 92       	push	r6
   1da0c:	7f 92       	push	r7
   1da0e:	af 92       	push	r10
   1da10:	bf 92       	push	r11
   1da12:	cf 92       	push	r12
   1da14:	df 92       	push	r13
   1da16:	ef 92       	push	r14
   1da18:	ff 92       	push	r15
   1da1a:	0f 93       	push	r16
   1da1c:	1f 93       	push	r17
   1da1e:	cf 93       	push	r28
   1da20:	df 93       	push	r29
   1da22:	e1 e0       	ldi	r30, 0x01	; 1
   1da24:	fd e0       	ldi	r31, 0x0D	; 13
   1da26:	13 82       	std	Z+3, r1	; 0x03
   1da28:	12 82       	std	Z+2, r1	; 0x02
   1da2a:	88 ee       	ldi	r24, 0xE8	; 232
   1da2c:	48 2e       	mov	r4, r24
   1da2e:	83 e0       	ldi	r24, 0x03	; 3
   1da30:	58 2e       	mov	r5, r24
   1da32:	61 2c       	mov	r6, r1
   1da34:	71 2c       	mov	r7, r1
   1da36:	44 82       	std	Z+4, r4	; 0x04
   1da38:	55 82       	std	Z+5, r5	; 0x05
   1da3a:	66 82       	std	Z+6, r6	; 0x06
   1da3c:	77 82       	std	Z+7, r7	; 0x07
   1da3e:	8c e5       	ldi	r24, 0x5C	; 92
   1da40:	92 e0       	ldi	r25, 0x02	; 2
   1da42:	91 83       	std	Z+1, r25	; 0x01
   1da44:	80 83       	st	Z, r24
   1da46:	85 ec       	ldi	r24, 0xC5	; 197
   1da48:	90 e0       	ldi	r25, 0x00	; 0
   1da4a:	95 87       	std	Z+13, r25	; 0x0d
   1da4c:	84 87       	std	Z+12, r24	; 0x0c
   1da4e:	84 ec       	ldi	r24, 0xC4	; 196
   1da50:	90 e0       	ldi	r25, 0x00	; 0
   1da52:	97 87       	std	Z+15, r25	; 0x0f
   1da54:	86 87       	std	Z+14, r24	; 0x0e
   1da56:	80 ec       	ldi	r24, 0xC0	; 192
   1da58:	90 e0       	ldi	r25, 0x00	; 0
   1da5a:	91 8b       	std	Z+17, r25	; 0x11
   1da5c:	80 8b       	std	Z+16, r24	; 0x10
   1da5e:	81 ec       	ldi	r24, 0xC1	; 193
   1da60:	90 e0       	ldi	r25, 0x00	; 0
   1da62:	93 8b       	std	Z+19, r25	; 0x13
   1da64:	82 8b       	std	Z+18, r24	; 0x12
   1da66:	82 ec       	ldi	r24, 0xC2	; 194
   1da68:	90 e0       	ldi	r25, 0x00	; 0
   1da6a:	95 8b       	std	Z+21, r25	; 0x15
   1da6c:	84 8b       	std	Z+20, r24	; 0x14
   1da6e:	86 ec       	ldi	r24, 0xC6	; 198
   1da70:	90 e0       	ldi	r25, 0x00	; 0
   1da72:	97 8b       	std	Z+23, r25	; 0x17
   1da74:	86 8b       	std	Z+22, r24	; 0x16
   1da76:	11 8e       	std	Z+25, r1	; 0x19
   1da78:	12 8e       	std	Z+26, r1	; 0x1a
   1da7a:	13 8e       	std	Z+27, r1	; 0x1b
   1da7c:	14 8e       	std	Z+28, r1	; 0x1c
   1da7e:	ea e2       	ldi	r30, 0x2A	; 42
   1da80:	f2 e1       	ldi	r31, 0x12	; 18
   1da82:	c2 ef       	ldi	r28, 0xF2	; 242
   1da84:	d2 e0       	ldi	r29, 0x02	; 2
   1da86:	d1 83       	std	Z+1, r29	; 0x01
   1da88:	c0 83       	st	Z, r28
   1da8a:	12 82       	std	Z+2, r1	; 0x02
   1da8c:	13 82       	std	Z+3, r1	; 0x03
   1da8e:	14 82       	std	Z+4, r1	; 0x04
   1da90:	15 82       	std	Z+5, r1	; 0x05
   1da92:	94 e9       	ldi	r25, 0x94	; 148
   1da94:	e9 2e       	mov	r14, r25
   1da96:	9f e0       	ldi	r25, 0x0F	; 15
   1da98:	f9 2e       	mov	r15, r25
   1da9a:	f7 01       	movw	r30, r14
   1da9c:	13 82       	std	Z+3, r1	; 0x03
   1da9e:	12 82       	std	Z+2, r1	; 0x02
   1daa0:	44 82       	std	Z+4, r4	; 0x04
   1daa2:	55 82       	std	Z+5, r5	; 0x05
   1daa4:	66 82       	std	Z+6, r6	; 0x06
   1daa6:	77 82       	std	Z+7, r7	; 0x07
   1daa8:	8e e6       	ldi	r24, 0x6E	; 110
   1daaa:	92 e0       	ldi	r25, 0x02	; 2
   1daac:	91 83       	std	Z+1, r25	; 0x01
   1daae:	80 83       	st	Z, r24
   1dab0:	e0 e3       	ldi	r30, 0x30	; 48
   1dab2:	f2 e1       	ldi	r31, 0x12	; 18
   1dab4:	d1 83       	std	Z+1, r29	; 0x01
   1dab6:	c0 83       	st	Z, r28
   1dab8:	12 82       	std	Z+2, r1	; 0x02
   1daba:	13 82       	std	Z+3, r1	; 0x03
   1dabc:	14 82       	std	Z+4, r1	; 0x04
   1dabe:	15 82       	std	Z+5, r1	; 0x05
   1dac0:	ee e9       	ldi	r30, 0x9E	; 158
   1dac2:	fd e0       	ldi	r31, 0x0D	; 13
   1dac4:	80 e5       	ldi	r24, 0x50	; 80
   1dac6:	80 83       	st	Z, r24
   1dac8:	aa 24       	eor	r10, r10
   1daca:	a3 94       	inc	r10
   1dacc:	a1 82       	std	Z+1, r10	; 0x01
   1dace:	e6 e3       	ldi	r30, 0x36	; 54
   1dad0:	f2 e1       	ldi	r31, 0x12	; 18
   1dad2:	d1 83       	std	Z+1, r29	; 0x01
   1dad4:	c0 83       	st	Z, r28
   1dad6:	12 82       	std	Z+2, r1	; 0x02
   1dad8:	13 82       	std	Z+3, r1	; 0x03
   1dada:	14 82       	std	Z+4, r1	; 0x04
   1dadc:	15 82       	std	Z+5, r1	; 0x05
   1dade:	ec e3       	ldi	r30, 0x3C	; 60
   1dae0:	f2 e1       	ldi	r31, 0x12	; 18
   1dae2:	d1 83       	std	Z+1, r29	; 0x01
   1dae4:	c0 83       	st	Z, r28
   1dae6:	12 82       	std	Z+2, r1	; 0x02
   1dae8:	13 82       	std	Z+3, r1	; 0x03
   1daea:	14 82       	std	Z+4, r1	; 0x04
   1daec:	15 82       	std	Z+5, r1	; 0x05
   1daee:	e2 e4       	ldi	r30, 0x42	; 66
   1daf0:	f2 e1       	ldi	r31, 0x12	; 18
   1daf2:	d1 83       	std	Z+1, r29	; 0x01
   1daf4:	c0 83       	st	Z, r28
   1daf6:	12 82       	std	Z+2, r1	; 0x02
   1daf8:	13 82       	std	Z+3, r1	; 0x03
   1dafa:	14 82       	std	Z+4, r1	; 0x04
   1dafc:	15 82       	std	Z+5, r1	; 0x05
   1dafe:	e8 e4       	ldi	r30, 0x48	; 72
   1db00:	f2 e1       	ldi	r31, 0x12	; 18
   1db02:	d1 83       	std	Z+1, r29	; 0x01
   1db04:	c0 83       	st	Z, r28
   1db06:	12 82       	std	Z+2, r1	; 0x02
   1db08:	13 82       	std	Z+3, r1	; 0x03
   1db0a:	14 82       	std	Z+4, r1	; 0x04
   1db0c:	15 82       	std	Z+5, r1	; 0x05
   1db0e:	ee e4       	ldi	r30, 0x4E	; 78
   1db10:	f2 e1       	ldi	r31, 0x12	; 18
   1db12:	d1 83       	std	Z+1, r29	; 0x01
   1db14:	c0 83       	st	Z, r28
   1db16:	12 82       	std	Z+2, r1	; 0x02
   1db18:	13 82       	std	Z+3, r1	; 0x03
   1db1a:	14 82       	std	Z+4, r1	; 0x04
   1db1c:	15 82       	std	Z+5, r1	; 0x05
   1db1e:	e0 ea       	ldi	r30, 0xA0	; 160
   1db20:	fd e0       	ldi	r31, 0x0D	; 13
   1db22:	d1 83       	std	Z+1, r29	; 0x01
   1db24:	c0 83       	st	Z, r28
   1db26:	12 82       	std	Z+2, r1	; 0x02
   1db28:	13 82       	std	Z+3, r1	; 0x03
   1db2a:	14 82       	std	Z+4, r1	; 0x04
   1db2c:	15 82       	std	Z+5, r1	; 0x05
   1db2e:	13 86       	std	Z+11, r1	; 0x0b
   1db30:	12 86       	std	Z+10, r1	; 0x0a
   1db32:	2a e0       	ldi	r18, 0x0A	; 10
   1db34:	b2 2e       	mov	r11, r18
   1db36:	b4 86       	std	Z+12, r11	; 0x0c
   1db38:	ed ea       	ldi	r30, 0xAD	; 173
   1db3a:	fd e0       	ldi	r31, 0x0D	; 13
   1db3c:	d1 83       	std	Z+1, r29	; 0x01
   1db3e:	c0 83       	st	Z, r28
   1db40:	12 82       	std	Z+2, r1	; 0x02
   1db42:	13 82       	std	Z+3, r1	; 0x03
   1db44:	14 82       	std	Z+4, r1	; 0x04
   1db46:	15 82       	std	Z+5, r1	; 0x05
   1db48:	e4 e5       	ldi	r30, 0x54	; 84
   1db4a:	f2 e1       	ldi	r31, 0x12	; 18
   1db4c:	d1 83       	std	Z+1, r29	; 0x01
   1db4e:	c0 83       	st	Z, r28
   1db50:	12 82       	std	Z+2, r1	; 0x02
   1db52:	13 82       	std	Z+3, r1	; 0x03
   1db54:	14 82       	std	Z+4, r1	; 0x04
   1db56:	15 82       	std	Z+5, r1	; 0x05
   1db58:	8a e0       	ldi	r24, 0x0A	; 10
   1db5a:	90 e0       	ldi	r25, 0x00	; 0
   1db5c:	0e 94 f8 f5 	call	0x1ebf0	; 0x1ebf0 <malloc>
   1db60:	90 93 b4 0d 	sts	0x0DB4, r25	; 0x800db4 <array_pids+0x1>
   1db64:	80 93 b3 0d 	sts	0x0DB3, r24	; 0x800db3 <array_pids>
   1db68:	ea e5       	ldi	r30, 0x5A	; 90
   1db6a:	f2 e1       	ldi	r31, 0x12	; 18
   1db6c:	d1 83       	std	Z+1, r29	; 0x01
   1db6e:	c0 83       	st	Z, r28
   1db70:	12 82       	std	Z+2, r1	; 0x02
   1db72:	13 82       	std	Z+3, r1	; 0x03
   1db74:	14 82       	std	Z+4, r1	; 0x04
   1db76:	15 82       	std	Z+5, r1	; 0x05
   1db78:	e0 e6       	ldi	r30, 0x60	; 96
   1db7a:	f2 e1       	ldi	r31, 0x12	; 18
   1db7c:	d1 83       	std	Z+1, r29	; 0x01
   1db7e:	c0 83       	st	Z, r28
   1db80:	12 82       	std	Z+2, r1	; 0x02
   1db82:	13 82       	std	Z+3, r1	; 0x03
   1db84:	14 82       	std	Z+4, r1	; 0x04
   1db86:	15 82       	std	Z+5, r1	; 0x05
   1db88:	8b e5       	ldi	r24, 0x5B	; 91
   1db8a:	97 e0       	ldi	r25, 0x07	; 7
   1db8c:	90 93 da 0d 	sts	0x0DDA, r25	; 0x800dda <device+0x25>
   1db90:	80 93 d9 0d 	sts	0x0DD9, r24	; 0x800dd9 <device+0x24>
   1db94:	ed ef       	ldi	r30, 0xFD	; 253
   1db96:	f3 e1       	ldi	r31, 0x13	; 19
   1db98:	d1 83       	std	Z+1, r29	; 0x01
   1db9a:	c0 83       	st	Z, r28
   1db9c:	12 82       	std	Z+2, r1	; 0x02
   1db9e:	13 82       	std	Z+3, r1	; 0x03
   1dba0:	14 82       	std	Z+4, r1	; 0x04
   1dba2:	15 82       	std	Z+5, r1	; 0x05
   1dba4:	07 e1       	ldi	r16, 0x17	; 23
   1dba6:	12 e1       	ldi	r17, 0x12	; 18
   1dba8:	88 e1       	ldi	r24, 0x18	; 24
   1dbaa:	f8 01       	movw	r30, r16
   1dbac:	84 83       	std	Z+4, r24	; 0x04
   1dbae:	8a e1       	ldi	r24, 0x1A	; 26
   1dbb0:	83 83       	std	Z+3, r24	; 0x03
   1dbb2:	89 e1       	ldi	r24, 0x19	; 25
   1dbb4:	85 83       	std	Z+5, r24	; 0x05
   1dbb6:	82 e0       	ldi	r24, 0x02	; 2
   1dbb8:	82 83       	std	Z+2, r24	; 0x02
   1dbba:	10 82       	st	Z, r1
   1dbbc:	11 82       	std	Z+1, r1	; 0x01
   1dbbe:	16 82       	std	Z+6, r1	; 0x06
   1dbc0:	60 e0       	ldi	r22, 0x00	; 0
   1dbc2:	89 e1       	ldi	r24, 0x19	; 25
   1dbc4:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
   1dbc8:	80 e1       	ldi	r24, 0x10	; 16
   1dbca:	92 e1       	ldi	r25, 0x12	; 18
   1dbcc:	0e 94 99 c0 	call	0x18132	; 0x18132 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   1dbd0:	a0 ef       	ldi	r26, 0xF0	; 240
   1dbd2:	b3 e1       	ldi	r27, 0x13	; 19
   1dbd4:	13 96       	adiw	r26, 0x03	; 3
   1dbd6:	1c 92       	st	X, r1
   1dbd8:	1e 92       	st	-X, r1
   1dbda:	12 97       	sbiw	r26, 0x02	; 2
   1dbdc:	14 96       	adiw	r26, 0x04	; 4
   1dbde:	4d 92       	st	X+, r4
   1dbe0:	5d 92       	st	X+, r5
   1dbe2:	6d 92       	st	X+, r6
   1dbe4:	7c 92       	st	X, r7
   1dbe6:	17 97       	sbiw	r26, 0x07	; 7
   1dbe8:	20 ed       	ldi	r18, 0xD0	; 208
   1dbea:	32 e0       	ldi	r19, 0x02	; 2
   1dbec:	11 96       	adiw	r26, 0x01	; 1
   1dbee:	3c 93       	st	X, r19
   1dbf0:	2e 93       	st	-X, r18
   1dbf2:	88 e0       	ldi	r24, 0x08	; 8
   1dbf4:	1c 96       	adiw	r26, 0x0c	; 12
   1dbf6:	8c 93       	st	X, r24
   1dbf8:	1c 97       	sbiw	r26, 0x0c	; 12
   1dbfa:	e3 e0       	ldi	r30, 0x03	; 3
   1dbfc:	f2 e1       	ldi	r31, 0x12	; 18
   1dbfe:	13 82       	std	Z+3, r1	; 0x03
   1dc00:	12 82       	std	Z+2, r1	; 0x02
   1dc02:	44 82       	std	Z+4, r4	; 0x04
   1dc04:	55 82       	std	Z+5, r5	; 0x05
   1dc06:	66 82       	std	Z+6, r6	; 0x06
   1dc08:	77 82       	std	Z+7, r7	; 0x07
   1dc0a:	31 83       	std	Z+1, r19	; 0x01
   1dc0c:	20 83       	st	Z, r18
   1dc0e:	84 87       	std	Z+12, r24	; 0x0c
   1dc10:	e8 ee       	ldi	r30, 0xE8	; 232
   1dc12:	f1 e1       	ldi	r31, 0x11	; 17
   1dc14:	13 82       	std	Z+3, r1	; 0x03
   1dc16:	12 82       	std	Z+2, r1	; 0x02
   1dc18:	44 82       	std	Z+4, r4	; 0x04
   1dc1a:	55 82       	std	Z+5, r5	; 0x05
   1dc1c:	66 82       	std	Z+6, r6	; 0x06
   1dc1e:	77 82       	std	Z+7, r7	; 0x07
   1dc20:	28 ea       	ldi	r18, 0xA8	; 168
   1dc22:	32 e0       	ldi	r19, 0x02	; 2
   1dc24:	31 83       	std	Z+1, r19	; 0x01
   1dc26:	20 83       	st	Z, r18
   1dc28:	84 87       	std	Z+12, r24	; 0x0c
   1dc2a:	d0 8b       	std	Z+16, r29	; 0x10
   1dc2c:	c7 87       	std	Z+15, r28	; 0x0f
   1dc2e:	11 8a       	std	Z+17, r1	; 0x11
   1dc30:	12 8a       	std	Z+18, r1	; 0x12
   1dc32:	13 8a       	std	Z+19, r1	; 0x13
   1dc34:	14 8a       	std	Z+20, r1	; 0x14
   1dc36:	d0 93 db 11 	sts	0x11DB, r29	; 0x8011db <mqtt_client+0x210>
   1dc3a:	c0 93 da 11 	sts	0x11DA, r28	; 0x8011da <mqtt_client+0x20f>
   1dc3e:	10 92 dc 11 	sts	0x11DC, r1	; 0x8011dc <mqtt_client+0x211>
   1dc42:	10 92 dd 11 	sts	0x11DD, r1	; 0x8011dd <mqtt_client+0x212>
   1dc46:	10 92 de 11 	sts	0x11DE, r1	; 0x8011de <mqtt_client+0x213>
   1dc4a:	10 92 df 11 	sts	0x11DF, r1	; 0x8011df <mqtt_client+0x214>
   1dc4e:	cc 24       	eor	r12, r12
   1dc50:	ca 94       	dec	r12
   1dc52:	dc 2c       	mov	r13, r12
   1dc54:	d0 92 e7 11 	sts	0x11E7, r13	; 0x8011e7 <mqtt_client+0x21c>
   1dc58:	c0 92 e6 11 	sts	0x11E6, r12	; 0x8011e6 <mqtt_client+0x21b>
   1dc5c:	b0 93 cc 0f 	sts	0x0FCC, r27	; 0x800fcc <mqtt_client+0x1>
   1dc60:	a0 93 cb 0f 	sts	0x0FCB, r26	; 0x800fcb <mqtt_client>
   1dc64:	10 92 e5 11 	sts	0x11E5, r1	; 0x8011e5 <mqtt_client+0x21a>
   1dc68:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <mqtt_client+0x219>
   1dc6c:	e5 ec       	ldi	r30, 0xC5	; 197
   1dc6e:	ff e0       	ldi	r31, 0x0F	; 15
   1dc70:	13 82       	std	Z+3, r1	; 0x03
   1dc72:	12 82       	std	Z+2, r1	; 0x02
   1dc74:	8a e9       	ldi	r24, 0x9A	; 154
   1dc76:	92 e0       	ldi	r25, 0x02	; 2
   1dc78:	91 83       	std	Z+1, r25	; 0x01
   1dc7a:	80 83       	st	Z, r24
   1dc7c:	80 e5       	ldi	r24, 0x50	; 80
   1dc7e:	90 e0       	ldi	r25, 0x00	; 0
   1dc80:	95 83       	std	Z+5, r25	; 0x05
   1dc82:	84 83       	std	Z+4, r24	; 0x04
   1dc84:	ed ea       	ldi	r30, 0xAD	; 173
   1dc86:	ff e0       	ldi	r31, 0x0F	; 15
   1dc88:	83 e0       	ldi	r24, 0x03	; 3
   1dc8a:	90 e0       	ldi	r25, 0x00	; 0
   1dc8c:	91 83       	std	Z+1, r25	; 0x01
   1dc8e:	80 83       	st	Z, r24
   1dc90:	82 e0       	ldi	r24, 0x02	; 2
   1dc92:	90 e0       	ldi	r25, 0x00	; 0
   1dc94:	93 83       	std	Z+3, r25	; 0x03
   1dc96:	82 83       	std	Z+2, r24	; 0x02
   1dc98:	16 82       	std	Z+6, r1	; 0x06
   1dc9a:	80 e2       	ldi	r24, 0x20	; 32
   1dc9c:	87 83       	std	Z+7, r24	; 0x07
   1dc9e:	10 86       	std	Z+8, r1	; 0x08
   1dca0:	85 e0       	ldi	r24, 0x05	; 5
   1dca2:	86 87       	std	Z+14, r24	; 0x0e
   1dca4:	85 e0       	ldi	r24, 0x05	; 5
   1dca6:	90 e0       	ldi	r25, 0x00	; 0
   1dca8:	a0 e0       	ldi	r26, 0x00	; 0
   1dcaa:	b0 e0       	ldi	r27, 0x00	; 0
   1dcac:	84 8b       	std	Z+20, r24	; 0x14
   1dcae:	95 8b       	std	Z+21, r25	; 0x15
   1dcb0:	a6 8b       	std	Z+22, r26	; 0x16
   1dcb2:	b7 8b       	std	Z+23, r27	; 0x17
   1dcb4:	11 86       	std	Z+9, r1	; 0x09
   1dcb6:	ae e7       	ldi	r26, 0x7E	; 126
   1dcb8:	b2 e1       	ldi	r27, 0x12	; 18
   1dcba:	d0 96       	adiw	r26, 0x30	; 48
   1dcbc:	fc 93       	st	X, r31
   1dcbe:	ee 93       	st	-X, r30
   1dcc0:	9f 97       	sbiw	r26, 0x2f	; 47
   1dcc2:	83 eb       	ldi	r24, 0xB3	; 179
   1dcc4:	92 e1       	ldi	r25, 0x12	; 18
   1dcc6:	90 93 4e 13 	sts	0x134E, r25	; 0x80134e <network+0xd0>
   1dcca:	80 93 4d 13 	sts	0x134D, r24	; 0x80134d <network+0xcf>
   1dcce:	8b e5       	ldi	r24, 0x5B	; 91
   1dcd0:	93 e1       	ldi	r25, 0x13	; 19
   1dcd2:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <network+0xdc>
   1dcd6:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <network+0xdb>
   1dcda:	8f e4       	ldi	r24, 0x4F	; 79
   1dcdc:	93 e1       	ldi	r25, 0x13	; 19
   1dcde:	98 96       	adiw	r26, 0x28	; 40
   1dce0:	9c 93       	st	X, r25
   1dce2:	8e 93       	st	-X, r24
   1dce4:	97 97       	sbiw	r26, 0x27	; 39
   1dce6:	9b 96       	adiw	r26, 0x2b	; 43
   1dce8:	1d 92       	st	X+, r1
   1dcea:	1d 92       	st	X+, r1
   1dcec:	1d 92       	st	X+, r1
   1dcee:	1c 92       	st	X, r1
   1dcf0:	9e 97       	sbiw	r26, 0x2e	; 46
   1dcf2:	9a 96       	adiw	r26, 0x2a	; 42
   1dcf4:	1c 92       	st	X, r1
   1dcf6:	9a 97       	sbiw	r26, 0x2a	; 42
   1dcf8:	99 96       	adiw	r26, 0x29	; 41
   1dcfa:	1c 92       	st	X, r1
   1dcfc:	99 97       	sbiw	r26, 0x29	; 41
   1dcfe:	1c 92       	st	X, r1
   1dd00:	c6 e6       	ldi	r28, 0x66	; 102
   1dd02:	d2 e1       	ldi	r29, 0x12	; 18
   1dd04:	ff 83       	std	Y+7, r31	; 0x07
   1dd06:	ee 83       	std	Y+6, r30	; 0x06
   1dd08:	b9 87       	std	Y+9, r27	; 0x09
   1dd0a:	a8 87       	std	Y+8, r26	; 0x08
   1dd0c:	c0 ea       	ldi	r28, 0xA0	; 160
   1dd0e:	df e0       	ldi	r29, 0x0F	; 15
   1dd10:	f9 82       	std	Y+1, r15	; 0x01
   1dd12:	e8 82       	st	Y, r14
   1dd14:	88 e4       	ldi	r24, 0x48	; 72
   1dd16:	8a 83       	std	Y+2, r24	; 0x02
   1dd18:	ec e0       	ldi	r30, 0x0C	; 12
   1dd1a:	f2 e0       	ldi	r31, 0x02	; 2
   1dd1c:	fc 87       	std	Y+12, r31	; 0x0c
   1dd1e:	eb 87       	std	Y+11, r30	; 0x0b
   1dd20:	91 81       	ldd	r25, Z+1	; 0x01
   1dd22:	9b 83       	std	Y+3, r25	; 0x03
   1dd24:	80 81       	ld	r24, Z
   1dd26:	89 1b       	sub	r24, r25
   1dd28:	99 0b       	sbc	r25, r25
   1dd2a:	ee 24       	eor	r14, r14
   1dd2c:	e3 94       	inc	r14
   1dd2e:	f1 2c       	mov	r15, r1
   1dd30:	97 01       	movw	r18, r14
   1dd32:	02 c0       	rjmp	.+4      	; 0x1dd38 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448+0x332>
   1dd34:	22 0f       	add	r18, r18
   1dd36:	33 1f       	adc	r19, r19
   1dd38:	8a 95       	dec	r24
   1dd3a:	e2 f7       	brpl	.-8      	; 0x1dd34 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448+0x32e>
   1dd3c:	c9 01       	movw	r24, r18
   1dd3e:	91 95       	neg	r25
   1dd40:	81 95       	neg	r24
   1dd42:	91 09       	sbc	r25, r1
   1dd44:	9d 83       	std	Y+5, r25	; 0x05
   1dd46:	8c 83       	std	Y+4, r24	; 0x04
   1dd48:	82 81       	ldd	r24, Z+2	; 0x02
   1dd4a:	8e 83       	std	Y+6, r24	; 0x06
   1dd4c:	b7 01       	movw	r22, r14
   1dd4e:	02 c0       	rjmp	.+4      	; 0x1dd54 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448+0x34e>
   1dd50:	66 0f       	add	r22, r22
   1dd52:	77 1f       	adc	r23, r23
   1dd54:	8a 95       	dec	r24
   1dd56:	e2 f7       	brpl	.-8      	; 0x1dd50 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7448+0x34a>
   1dd58:	07 2e       	mov	r0, r23
   1dd5a:	00 0c       	add	r0, r0
   1dd5c:	88 0b       	sbc	r24, r24
   1dd5e:	99 0b       	sbc	r25, r25
   1dd60:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <__floatsisf>
   1dd64:	9b 01       	movw	r18, r22
   1dd66:	ac 01       	movw	r20, r24
   1dd68:	60 e0       	ldi	r22, 0x00	; 0
   1dd6a:	70 e0       	ldi	r23, 0x00	; 0
   1dd6c:	80 e8       	ldi	r24, 0x80	; 128
   1dd6e:	9f e3       	ldi	r25, 0x3F	; 63
   1dd70:	0e 94 63 fc 	call	0x1f8c6	; 0x1f8c6 <__divsf3>
   1dd74:	6f 83       	std	Y+7, r22	; 0x07
   1dd76:	78 87       	std	Y+8, r23	; 0x08
   1dd78:	89 87       	std	Y+9, r24	; 0x09
   1dd7a:	9a 87       	std	Y+10, r25	; 0x0a
   1dd7c:	c5 e5       	ldi	r28, 0x55	; 85
   1dd7e:	df e0       	ldi	r29, 0x0F	; 15
   1dd80:	80 e0       	ldi	r24, 0x00	; 0
   1dd82:	98 ef       	ldi	r25, 0xF8	; 248
   1dd84:	99 87       	std	Y+9, r25	; 0x09
   1dd86:	88 87       	std	Y+8, r24	; 0x08
   1dd88:	20 ee       	ldi	r18, 0xE0	; 224
   1dd8a:	37 e0       	ldi	r19, 0x07	; 7
   1dd8c:	3f 83       	std	Y+7, r19	; 0x07
   1dd8e:	2e 83       	std	Y+6, r18	; 0x06
   1dd90:	9b 87       	std	Y+11, r25	; 0x0b
   1dd92:	8a 87       	std	Y+10, r24	; 0x0a
   1dd94:	ac 86       	std	Y+12, r10	; 0x0c
   1dd96:	1d 86       	std	Y+13, r1	; 0x0d
   1dd98:	86 e8       	ldi	r24, 0x86	; 134
   1dd9a:	92 e0       	ldi	r25, 0x02	; 2
   1dd9c:	99 83       	std	Y+1, r25	; 0x01
   1dd9e:	88 83       	st	Y, r24
   1dda0:	82 e2       	ldi	r24, 0x22	; 34
   1dda2:	8e af       	std	Y+62, r24	; 0x3e
   1dda4:	ea e3       	ldi	r30, 0x3A	; 58
   1dda6:	fe e8       	ldi	r31, 0x8E	; 142
   1dda8:	e4 91       	lpm	r30, Z
   1ddaa:	f0 e0       	ldi	r31, 0x00	; 0
   1ddac:	ee 0f       	add	r30, r30
   1ddae:	ff 1f       	adc	r31, r31
   1ddb0:	e7 5f       	subi	r30, 0xF7	; 247
   1ddb2:	f1 47       	sbci	r31, 0x71	; 113
   1ddb4:	a5 91       	lpm	r26, Z+
   1ddb6:	b4 91       	lpm	r27, Z
   1ddb8:	bf a7       	std	Y+47, r27	; 0x2f
   1ddba:	ae a7       	std	Y+46, r26	; 0x2e
   1ddbc:	ec e3       	ldi	r30, 0x3C	; 60
   1ddbe:	fe e8       	ldi	r31, 0x8E	; 142
   1ddc0:	e4 91       	lpm	r30, Z
   1ddc2:	f0 e0       	ldi	r31, 0x00	; 0
   1ddc4:	ee 0f       	add	r30, r30
   1ddc6:	ff 1f       	adc	r31, r31
   1ddc8:	e7 5f       	subi	r30, 0xF7	; 247
   1ddca:	f1 47       	sbci	r31, 0x71	; 113
   1ddcc:	85 91       	lpm	r24, Z+
   1ddce:	94 91       	lpm	r25, Z
   1ddd0:	99 ab       	std	Y+49, r25	; 0x31
   1ddd2:	88 ab       	std	Y+48, r24	; 0x30
   1ddd4:	ed e3       	ldi	r30, 0x3D	; 61
   1ddd6:	fe e8       	ldi	r31, 0x8E	; 142
   1ddd8:	e4 91       	lpm	r30, Z
   1ddda:	f0 e0       	ldi	r31, 0x00	; 0
   1dddc:	ee 0f       	add	r30, r30
   1ddde:	ff 1f       	adc	r31, r31
   1dde0:	e7 5f       	subi	r30, 0xF7	; 247
   1dde2:	f1 47       	sbci	r31, 0x71	; 113
   1dde4:	85 91       	lpm	r24, Z+
   1dde6:	94 91       	lpm	r25, Z
   1dde8:	9b ab       	std	Y+51, r25	; 0x33
   1ddea:	8a ab       	std	Y+50, r24	; 0x32
   1ddec:	e9 e3       	ldi	r30, 0x39	; 57
   1ddee:	fe e8       	ldi	r31, 0x8E	; 142
   1ddf0:	e4 91       	lpm	r30, Z
   1ddf2:	f0 e0       	ldi	r31, 0x00	; 0
   1ddf4:	ee 0f       	add	r30, r30
   1ddf6:	ff 1f       	adc	r31, r31
   1ddf8:	e7 5f       	subi	r30, 0xF7	; 247
   1ddfa:	f1 47       	sbci	r31, 0x71	; 113
   1ddfc:	85 91       	lpm	r24, Z+
   1ddfe:	94 91       	lpm	r25, Z
   1de00:	9d ab       	std	Y+53, r25	; 0x35
   1de02:	8c ab       	std	Y+52, r24	; 0x34
   1de04:	e4 ef       	ldi	r30, 0xF4	; 244
   1de06:	fd e8       	ldi	r31, 0x8D	; 141
   1de08:	84 91       	lpm	r24, Z
   1de0a:	8e ab       	std	Y+54, r24	; 0x36
   1de0c:	e6 ef       	ldi	r30, 0xF6	; 246
   1de0e:	fd e8       	ldi	r31, 0x8D	; 141
   1de10:	24 91       	lpm	r18, Z
   1de12:	2f ab       	std	Y+55, r18	; 0x37
   1de14:	e7 ef       	ldi	r30, 0xF7	; 247
   1de16:	fd e8       	ldi	r31, 0x8D	; 141
   1de18:	94 91       	lpm	r25, Z
   1de1a:	98 af       	std	Y+56, r25	; 0x38
   1de1c:	e3 ef       	ldi	r30, 0xF3	; 243
   1de1e:	fd e8       	ldi	r31, 0x8D	; 141
   1de20:	e4 91       	lpm	r30, Z
   1de22:	e9 af       	std	Y+57, r30	; 0x39
   1de24:	38 2f       	mov	r19, r24
   1de26:	30 95       	com	r19
   1de28:	3a af       	std	Y+58, r19	; 0x3a
   1de2a:	20 95       	com	r18
   1de2c:	2b af       	std	Y+59, r18	; 0x3b
   1de2e:	90 95       	com	r25
   1de30:	9c af       	std	Y+60, r25	; 0x3c
   1de32:	e0 95       	com	r30
   1de34:	ed af       	std	Y+61, r30	; 0x3d
   1de36:	ec 91       	ld	r30, X
   1de38:	e8 2b       	or	r30, r24
   1de3a:	ec 93       	st	X, r30
   1de3c:	e8 a9       	ldd	r30, Y+48	; 0x30
   1de3e:	f9 a9       	ldd	r31, Y+49	; 0x31
   1de40:	80 81       	ld	r24, Z
   1de42:	9f a9       	ldd	r25, Y+55	; 0x37
   1de44:	89 2b       	or	r24, r25
   1de46:	80 83       	st	Z, r24
   1de48:	ea a9       	ldd	r30, Y+50	; 0x32
   1de4a:	fb a9       	ldd	r31, Y+51	; 0x33
   1de4c:	80 81       	ld	r24, Z
   1de4e:	98 ad       	ldd	r25, Y+56	; 0x38
   1de50:	89 2b       	or	r24, r25
   1de52:	80 83       	st	Z, r24
   1de54:	ec a9       	ldd	r30, Y+52	; 0x34
   1de56:	fd a9       	ldd	r31, Y+53	; 0x35
   1de58:	80 81       	ld	r24, Z
   1de5a:	99 ad       	ldd	r25, Y+57	; 0x39
   1de5c:	89 2b       	or	r24, r25
   1de5e:	80 83       	st	Z, r24
   1de60:	61 e0       	ldi	r22, 0x01	; 1
   1de62:	81 e2       	ldi	r24, 0x21	; 33
   1de64:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1de68:	61 e0       	ldi	r22, 0x01	; 1
   1de6a:	83 e2       	ldi	r24, 0x23	; 35
   1de6c:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1de70:	61 e0       	ldi	r22, 0x01	; 1
   1de72:	84 e2       	ldi	r24, 0x24	; 36
   1de74:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1de78:	61 e0       	ldi	r22, 0x01	; 1
   1de7a:	80 e2       	ldi	r24, 0x20	; 32
   1de7c:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1de80:	61 e0       	ldi	r22, 0x01	; 1
   1de82:	82 e2       	ldi	r24, 0x22	; 34
   1de84:	0e 94 d1 63 	call	0xc7a2	; 0xc7a2 <digitalWrite>
   1de88:	61 e0       	ldi	r22, 0x01	; 1
   1de8a:	82 e2       	ldi	r24, 0x22	; 34
   1de8c:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1de90:	1f 8a       	std	Y+23, r1	; 0x17
   1de92:	1e 8a       	std	Y+22, r1	; 0x16
   1de94:	86 e9       	ldi	r24, 0x96	; 150
   1de96:	97 e7       	ldi	r25, 0x77	; 119
   1de98:	9b 8f       	std	Y+27, r25	; 0x1b
   1de9a:	8a 8f       	std	Y+26, r24	; 0x1a
   1de9c:	20 e4       	ldi	r18, 0x40	; 64
   1de9e:	31 e0       	ldi	r19, 0x01	; 1
   1dea0:	3f 87       	std	Y+15, r19	; 0x0f
   1dea2:	2e 87       	std	Y+14, r18	; 0x0e
   1dea4:	80 ee       	ldi	r24, 0xE0	; 224
   1dea6:	91 e0       	ldi	r25, 0x01	; 1
   1dea8:	99 8b       	std	Y+17, r25	; 0x11
   1deaa:	88 8b       	std	Y+16, r24	; 0x10
   1deac:	41 b1       	in	r20, 0x01	; 1
   1deae:	4f ef       	ldi	r20, 0xFF	; 255
   1deb0:	41 b9       	out	0x01, r20	; 1
   1deb2:	3b 8b       	std	Y+19, r19	; 0x13
   1deb4:	2a 8b       	std	Y+18, r18	; 0x12
   1deb6:	9d 8b       	std	Y+21, r25	; 0x15
   1deb8:	8c 8b       	std	Y+20, r24	; 0x14
   1deba:	e5 e3       	ldi	r30, 0x35	; 53
   1debc:	fe e8       	ldi	r31, 0x8E	; 142
   1debe:	e4 91       	lpm	r30, Z
   1dec0:	f0 e0       	ldi	r31, 0x00	; 0
   1dec2:	ee 0f       	add	r30, r30
   1dec4:	ff 1f       	adc	r31, r31
   1dec6:	e7 5f       	subi	r30, 0xF7	; 247
   1dec8:	f1 47       	sbci	r31, 0x71	; 113
   1deca:	85 91       	lpm	r24, Z+
   1decc:	94 91       	lpm	r25, Z
   1dece:	c2 e3       	ldi	r28, 0x32	; 50
   1ded0:	df e0       	ldi	r29, 0x0F	; 15
   1ded2:	9a 8b       	std	Y+18, r25	; 0x12
   1ded4:	89 8b       	std	Y+17, r24	; 0x11
   1ded6:	e4 e3       	ldi	r30, 0x34	; 52
   1ded8:	fe e8       	ldi	r31, 0x8E	; 142
   1deda:	e4 91       	lpm	r30, Z
   1dedc:	f0 e0       	ldi	r31, 0x00	; 0
   1dede:	ee 0f       	add	r30, r30
   1dee0:	ff 1f       	adc	r31, r31
   1dee2:	e7 5f       	subi	r30, 0xF7	; 247
   1dee4:	f1 47       	sbci	r31, 0x71	; 113
   1dee6:	85 91       	lpm	r24, Z+
   1dee8:	94 91       	lpm	r25, Z
   1deea:	9c 8b       	std	Y+20, r25	; 0x14
   1deec:	8b 8b       	std	Y+19, r24	; 0x13
   1deee:	e6 e3       	ldi	r30, 0x36	; 54
   1def0:	fe e8       	ldi	r31, 0x8E	; 142
   1def2:	e4 91       	lpm	r30, Z
   1def4:	f0 e0       	ldi	r31, 0x00	; 0
   1def6:	ee 0f       	add	r30, r30
   1def8:	ff 1f       	adc	r31, r31
   1defa:	ed 53       	subi	r30, 0x3D	; 61
   1defc:	f2 47       	sbci	r31, 0x72	; 114
   1defe:	85 91       	lpm	r24, Z+
   1df00:	94 91       	lpm	r25, Z
   1df02:	9e 8b       	std	Y+22, r25	; 0x16
   1df04:	8d 8b       	std	Y+21, r24	; 0x15
   1df06:	e7 e3       	ldi	r30, 0x37	; 55
   1df08:	fe e8       	ldi	r31, 0x8E	; 142
   1df0a:	e4 91       	lpm	r30, Z
   1df0c:	f0 e0       	ldi	r31, 0x00	; 0
   1df0e:	ee 0f       	add	r30, r30
   1df10:	ff 1f       	adc	r31, r31
   1df12:	e7 5f       	subi	r30, 0xF7	; 247
   1df14:	f1 47       	sbci	r31, 0x71	; 113
   1df16:	85 91       	lpm	r24, Z+
   1df18:	94 91       	lpm	r25, Z
   1df1a:	98 8f       	std	Y+24, r25	; 0x18
   1df1c:	8f 8b       	std	Y+23, r24	; 0x17
   1df1e:	e0 e2       	ldi	r30, 0x20	; 32
   1df20:	fe e8       	ldi	r31, 0x8E	; 142
   1df22:	e4 91       	lpm	r30, Z
   1df24:	f0 e0       	ldi	r31, 0x00	; 0
   1df26:	ee 0f       	add	r30, r30
   1df28:	ff 1f       	adc	r31, r31
   1df2a:	ed 53       	subi	r30, 0x3D	; 61
   1df2c:	f2 47       	sbci	r31, 0x72	; 114
   1df2e:	85 91       	lpm	r24, Z+
   1df30:	94 91       	lpm	r25, Z
   1df32:	9a 8f       	std	Y+26, r25	; 0x1a
   1df34:	89 8f       	std	Y+25, r24	; 0x19
   1df36:	e8 e3       	ldi	r30, 0x38	; 56
   1df38:	fe e8       	ldi	r31, 0x8E	; 142
   1df3a:	e4 91       	lpm	r30, Z
   1df3c:	f0 e0       	ldi	r31, 0x00	; 0
   1df3e:	ee 0f       	add	r30, r30
   1df40:	ff 1f       	adc	r31, r31
   1df42:	e7 5f       	subi	r30, 0xF7	; 247
   1df44:	f1 47       	sbci	r31, 0x71	; 113
   1df46:	85 91       	lpm	r24, Z+
   1df48:	94 91       	lpm	r25, Z
   1df4a:	9c 8f       	std	Y+28, r25	; 0x1c
   1df4c:	8b 8f       	std	Y+27, r24	; 0x1b
   1df4e:	ef ee       	ldi	r30, 0xEF	; 239
   1df50:	fd e8       	ldi	r31, 0x8D	; 141
   1df52:	e4 91       	lpm	r30, Z
   1df54:	ed 8f       	std	Y+29, r30	; 0x1d
   1df56:	ee ee       	ldi	r30, 0xEE	; 238
   1df58:	fd e8       	ldi	r31, 0x8D	; 141
   1df5a:	e4 91       	lpm	r30, Z
   1df5c:	ee 8f       	std	Y+30, r30	; 0x1e
   1df5e:	e0 ef       	ldi	r30, 0xF0	; 240
   1df60:	fd e8       	ldi	r31, 0x8D	; 141
   1df62:	e4 91       	lpm	r30, Z
   1df64:	ef 8f       	std	Y+31, r30	; 0x1f
   1df66:	e1 ef       	ldi	r30, 0xF1	; 241
   1df68:	fd e8       	ldi	r31, 0x8D	; 141
   1df6a:	e4 91       	lpm	r30, Z
   1df6c:	e8 a3       	std	Y+32, r30	; 0x20
   1df6e:	ea ed       	ldi	r30, 0xDA	; 218
   1df70:	fd e8       	ldi	r31, 0x8D	; 141
   1df72:	e4 91       	lpm	r30, Z
   1df74:	e9 a3       	std	Y+33, r30	; 0x21
   1df76:	e2 ef       	ldi	r30, 0xF2	; 242
   1df78:	fd e8       	ldi	r31, 0x8D	; 141
   1df7a:	e4 91       	lpm	r30, Z
   1df7c:	ea a3       	std	Y+34, r30	; 0x22
   1df7e:	61 e0       	ldi	r22, 0x01	; 1
   1df80:	8c e1       	ldi	r24, 0x1C	; 28
   1df82:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1df86:	61 e0       	ldi	r22, 0x01	; 1
   1df88:	8b e1       	ldi	r24, 0x1B	; 27
   1df8a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1df8e:	60 e0       	ldi	r22, 0x00	; 0
   1df90:	8d e1       	ldi	r24, 0x1D	; 29
   1df92:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1df96:	61 e0       	ldi	r22, 0x01	; 1
   1df98:	8e e1       	ldi	r24, 0x1E	; 30
   1df9a:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1df9e:	60 e0       	ldi	r22, 0x00	; 0
   1dfa0:	87 e0       	ldi	r24, 0x07	; 7
   1dfa2:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1dfa6:	61 e0       	ldi	r22, 0x01	; 1
   1dfa8:	8f e1       	ldi	r24, 0x1F	; 31
   1dfaa:	0e 94 ff 63 	call	0xc7fe	; 0xc7fe <pinMode>
   1dfae:	1c 86       	std	Y+12, r1	; 0x0c
   1dfb0:	1d 86       	std	Y+13, r1	; 0x0d
   1dfb2:	1e 86       	std	Y+14, r1	; 0x0e
   1dfb4:	1f 86       	std	Y+15, r1	; 0x0f
   1dfb6:	18 8a       	std	Y+16, r1	; 0x10
   1dfb8:	19 86       	std	Y+9, r1	; 0x09
   1dfba:	18 86       	std	Y+8, r1	; 0x08
   1dfbc:	1b 86       	std	Y+11, r1	; 0x0b
   1dfbe:	1a 86       	std	Y+10, r1	; 0x0a
   1dfc0:	19 82       	std	Y+1, r1	; 0x01
   1dfc2:	18 82       	st	Y, r1
   1dfc4:	1b 82       	std	Y+3, r1	; 0x03
   1dfc6:	1a 82       	std	Y+2, r1	; 0x02
   1dfc8:	dd 82       	std	Y+5, r13	; 0x05
   1dfca:	cc 82       	std	Y+4, r12	; 0x04
   1dfcc:	df 82       	std	Y+7, r13	; 0x07
   1dfce:	ce 82       	std	Y+6, r12	; 0x06
   1dfd0:	e3 e2       	ldi	r30, 0x23	; 35
   1dfd2:	fe e0       	ldi	r31, 0x0E	; 14
   1dfd4:	b0 82       	st	Z, r11
   1dfd6:	8c e2       	ldi	r24, 0x2C	; 44
   1dfd8:	9e e0       	ldi	r25, 0x0E	; 14
   1dfda:	94 83       	std	Z+4, r25	; 0x04
   1dfdc:	83 83       	std	Z+3, r24	; 0x03
   1dfde:	80 e0       	ldi	r24, 0x00	; 0
   1dfe0:	91 e0       	ldi	r25, 0x01	; 1
   1dfe2:	96 83       	std	Z+6, r25	; 0x06
   1dfe4:	85 83       	std	Z+5, r24	; 0x05
   1dfe6:	10 86       	std	Z+8, r1	; 0x08
   1dfe8:	17 82       	std	Z+7, r1	; 0x07
   1dfea:	20 e8       	ldi	r18, 0x80	; 128
   1dfec:	32 e0       	ldi	r19, 0x02	; 2
   1dfee:	32 83       	std	Z+2, r19	; 0x02
   1dff0:	21 83       	std	Z+1, r18	; 0x01
   1dff2:	10 92 2d 0f 	sts	0x0F2D, r1	; 0x800f2d <doc+0x10a>
   1dff6:	10 92 2c 0f 	sts	0x0F2C, r1	; 0x800f2c <doc+0x109>
   1dffa:	e6 e1       	ldi	r30, 0x16	; 22
   1dffc:	fe e0       	ldi	r31, 0x0E	; 14
   1dffe:	40 e0       	ldi	r20, 0x00	; 0
   1e000:	50 e0       	ldi	r21, 0x00	; 0
   1e002:	62 e0       	ldi	r22, 0x02	; 2
   1e004:	70 e0       	ldi	r23, 0x00	; 0
   1e006:	44 83       	std	Z+4, r20	; 0x04
   1e008:	55 83       	std	Z+5, r21	; 0x05
   1e00a:	66 83       	std	Z+6, r22	; 0x06
   1e00c:	77 83       	std	Z+7, r23	; 0x07
   1e00e:	f3 82       	std	Z+3, r15	; 0x03
   1e010:	e2 82       	std	Z+2, r14	; 0x02
   1e012:	11 83       	std	Z+1, r17	; 0x01
   1e014:	00 83       	st	Z, r16
   1e016:	26 e1       	ldi	r18, 0x16	; 22
   1e018:	20 87       	std	Z+8, r18	; 0x08
   1e01a:	e7 e0       	ldi	r30, 0x07	; 7
   1e01c:	fe e0       	ldi	r31, 0x0E	; 14
   1e01e:	40 e0       	ldi	r20, 0x00	; 0
   1e020:	50 e0       	ldi	r21, 0x00	; 0
   1e022:	64 e0       	ldi	r22, 0x04	; 4
   1e024:	70 e0       	ldi	r23, 0x00	; 0
   1e026:	44 83       	std	Z+4, r20	; 0x04
   1e028:	55 83       	std	Z+5, r21	; 0x05
   1e02a:	66 83       	std	Z+6, r22	; 0x06
   1e02c:	77 83       	std	Z+7, r23	; 0x07
   1e02e:	91 87       	std	Z+9, r25	; 0x09
   1e030:	80 87       	std	Z+8, r24	; 0x08
   1e032:	13 82       	std	Z+3, r1	; 0x03
   1e034:	12 82       	std	Z+2, r1	; 0x02
   1e036:	11 83       	std	Z+1, r17	; 0x01
   1e038:	00 83       	st	Z, r16
   1e03a:	87 e1       	ldi	r24, 0x17	; 23
   1e03c:	82 87       	std	Z+10, r24	; 0x0a
   1e03e:	df 91       	pop	r29
   1e040:	cf 91       	pop	r28
   1e042:	1f 91       	pop	r17
   1e044:	0f 91       	pop	r16
   1e046:	ff 90       	pop	r15
   1e048:	ef 90       	pop	r14
   1e04a:	df 90       	pop	r13
   1e04c:	cf 90       	pop	r12
   1e04e:	bf 90       	pop	r11
   1e050:	af 90       	pop	r10
   1e052:	7f 90       	pop	r7
   1e054:	6f 90       	pop	r6
   1e056:	5f 90       	pop	r5
   1e058:	4f 90       	pop	r4
   1e05a:	08 95       	ret

0001e05c <dtostrf>:
dtostrf():
   1e05c:	ef 92       	push	r14
   1e05e:	0f 93       	push	r16
   1e060:	1f 93       	push	r17
   1e062:	cf 93       	push	r28
   1e064:	df 93       	push	r29
   1e066:	e8 01       	movw	r28, r16
   1e068:	34 e0       	ldi	r19, 0x04	; 4
   1e06a:	47 fd       	sbrc	r20, 7
   1e06c:	34 e1       	ldi	r19, 0x14	; 20
   1e06e:	04 2e       	mov	r0, r20
   1e070:	00 0c       	add	r0, r0
   1e072:	55 0b       	sbc	r21, r21
   1e074:	57 ff       	sbrs	r21, 7
   1e076:	03 c0       	rjmp	.+6      	; 0x1e07e <dtostrf+0x22>
   1e078:	51 95       	neg	r21
   1e07a:	41 95       	neg	r20
   1e07c:	51 09       	sbc	r21, r1
   1e07e:	e3 2e       	mov	r14, r19
   1e080:	02 2f       	mov	r16, r18
   1e082:	24 2f       	mov	r18, r20
   1e084:	ae 01       	movw	r20, r28
   1e086:	0e 94 7f f4 	call	0x1e8fe	; 0x1e8fe <dtoa_prf>
   1e08a:	ce 01       	movw	r24, r28
   1e08c:	df 91       	pop	r29
   1e08e:	cf 91       	pop	r28
   1e090:	1f 91       	pop	r17
   1e092:	0f 91       	pop	r16
   1e094:	ef 90       	pop	r14
   1e096:	08 95       	ret

0001e098 <strtoul>:
strtoul():
   1e098:	3f 92       	push	r3
   1e09a:	4f 92       	push	r4
   1e09c:	5f 92       	push	r5
   1e09e:	6f 92       	push	r6
   1e0a0:	7f 92       	push	r7
   1e0a2:	8f 92       	push	r8
   1e0a4:	9f 92       	push	r9
   1e0a6:	af 92       	push	r10
   1e0a8:	bf 92       	push	r11
   1e0aa:	cf 92       	push	r12
   1e0ac:	df 92       	push	r13
   1e0ae:	ef 92       	push	r14
   1e0b0:	ff 92       	push	r15
   1e0b2:	0f 93       	push	r16
   1e0b4:	1f 93       	push	r17
   1e0b6:	cf 93       	push	r28
   1e0b8:	df 93       	push	r29
   1e0ba:	5c 01       	movw	r10, r24
   1e0bc:	6b 01       	movw	r12, r22
   1e0be:	7a 01       	movw	r14, r20
   1e0c0:	61 15       	cp	r22, r1
   1e0c2:	71 05       	cpc	r23, r1
   1e0c4:	19 f0       	breq	.+6      	; 0x1e0cc <strtoul+0x34>
   1e0c6:	fb 01       	movw	r30, r22
   1e0c8:	91 83       	std	Z+1, r25	; 0x01
   1e0ca:	80 83       	st	Z, r24
   1e0cc:	e1 14       	cp	r14, r1
   1e0ce:	f1 04       	cpc	r15, r1
   1e0d0:	49 f0       	breq	.+18     	; 0x1e0e4 <strtoul+0x4c>
   1e0d2:	c7 01       	movw	r24, r14
   1e0d4:	02 97       	sbiw	r24, 0x02	; 2
   1e0d6:	83 97       	sbiw	r24, 0x23	; 35
   1e0d8:	28 f0       	brcs	.+10     	; 0x1e0e4 <strtoul+0x4c>
   1e0da:	60 e0       	ldi	r22, 0x00	; 0
   1e0dc:	70 e0       	ldi	r23, 0x00	; 0
   1e0de:	cb 01       	movw	r24, r22
   1e0e0:	9b c0       	rjmp	.+310    	; 0x1e218 <strtoul+0x180>
   1e0e2:	5e 01       	movw	r10, r28
   1e0e4:	e5 01       	movw	r28, r10
   1e0e6:	21 96       	adiw	r28, 0x01	; 1
   1e0e8:	f5 01       	movw	r30, r10
   1e0ea:	10 81       	ld	r17, Z
   1e0ec:	81 2f       	mov	r24, r17
   1e0ee:	90 e0       	ldi	r25, 0x00	; 0
   1e0f0:	0e 94 71 f1 	call	0x1e2e2	; 0x1e2e2 <isspace>
   1e0f4:	89 2b       	or	r24, r25
   1e0f6:	a9 f7       	brne	.-22     	; 0x1e0e2 <strtoul+0x4a>
   1e0f8:	1d 32       	cpi	r17, 0x2D	; 45
   1e0fa:	09 f0       	breq	.+2      	; 0x1e0fe <strtoul+0x66>
   1e0fc:	5c c0       	rjmp	.+184    	; 0x1e1b6 <strtoul+0x11e>
   1e0fe:	21 96       	adiw	r28, 0x01	; 1
   1e100:	f5 01       	movw	r30, r10
   1e102:	11 81       	ldd	r17, Z+1	; 0x01
   1e104:	01 e0       	ldi	r16, 0x01	; 1
   1e106:	e1 14       	cp	r14, r1
   1e108:	f1 04       	cpc	r15, r1
   1e10a:	09 f4       	brne	.+2      	; 0x1e10e <strtoul+0x76>
   1e10c:	bb c0       	rjmp	.+374    	; 0x1e284 <strtoul+0x1ec>
   1e10e:	f0 e1       	ldi	r31, 0x10	; 16
   1e110:	ef 16       	cp	r14, r31
   1e112:	f1 04       	cpc	r15, r1
   1e114:	09 f0       	breq	.+2      	; 0x1e118 <strtoul+0x80>
   1e116:	9b c0       	rjmp	.+310    	; 0x1e24e <strtoul+0x1b6>
   1e118:	10 33       	cpi	r17, 0x30	; 48
   1e11a:	41 f4       	brne	.+16     	; 0x1e12c <strtoul+0x94>
   1e11c:	88 81       	ld	r24, Y
   1e11e:	8f 7d       	andi	r24, 0xDF	; 223
   1e120:	88 35       	cpi	r24, 0x58	; 88
   1e122:	09 f0       	breq	.+2      	; 0x1e126 <strtoul+0x8e>
   1e124:	8f c0       	rjmp	.+286    	; 0x1e244 <strtoul+0x1ac>
   1e126:	19 81       	ldd	r17, Y+1	; 0x01
   1e128:	22 96       	adiw	r28, 0x02	; 2
   1e12a:	02 60       	ori	r16, 0x02	; 2
   1e12c:	e0 e1       	ldi	r30, 0x10	; 16
   1e12e:	ee 2e       	mov	r14, r30
   1e130:	f1 2c       	mov	r15, r1
   1e132:	88 24       	eor	r8, r8
   1e134:	8a 94       	dec	r8
   1e136:	98 2c       	mov	r9, r8
   1e138:	a8 2c       	mov	r10, r8
   1e13a:	ff e0       	ldi	r31, 0x0F	; 15
   1e13c:	bf 2e       	mov	r11, r31
   1e13e:	20 e0       	ldi	r18, 0x00	; 0
   1e140:	60 e0       	ldi	r22, 0x00	; 0
   1e142:	70 e0       	ldi	r23, 0x00	; 0
   1e144:	cb 01       	movw	r24, r22
   1e146:	27 01       	movw	r4, r14
   1e148:	0f 2c       	mov	r0, r15
   1e14a:	00 0c       	add	r0, r0
   1e14c:	66 08       	sbc	r6, r6
   1e14e:	77 08       	sbc	r7, r7
   1e150:	fe 01       	movw	r30, r28
   1e152:	50 ed       	ldi	r21, 0xD0	; 208
   1e154:	35 2e       	mov	r3, r21
   1e156:	31 0e       	add	r3, r17
   1e158:	39 e0       	ldi	r19, 0x09	; 9
   1e15a:	33 15       	cp	r19, r3
   1e15c:	68 f4       	brcc	.+26     	; 0x1e178 <strtoul+0xe0>
   1e15e:	3f eb       	ldi	r19, 0xBF	; 191
   1e160:	31 0f       	add	r19, r17
   1e162:	49 ec       	ldi	r20, 0xC9	; 201
   1e164:	34 2e       	mov	r3, r20
   1e166:	3a 31       	cpi	r19, 0x1A	; 26
   1e168:	30 f0       	brcs	.+12     	; 0x1e176 <strtoul+0xde>
   1e16a:	3f e9       	ldi	r19, 0x9F	; 159
   1e16c:	31 0f       	add	r19, r17
   1e16e:	3a 31       	cpi	r19, 0x1A	; 26
   1e170:	b0 f5       	brcc	.+108    	; 0x1e1de <strtoul+0x146>
   1e172:	39 ea       	ldi	r19, 0xA9	; 169
   1e174:	33 2e       	mov	r3, r19
   1e176:	31 0e       	add	r3, r17
   1e178:	3e 14       	cp	r3, r14
   1e17a:	1f 04       	cpc	r1, r15
   1e17c:	84 f5       	brge	.+96     	; 0x1e1de <strtoul+0x146>
   1e17e:	2f 3f       	cpi	r18, 0xFF	; 255
   1e180:	b9 f0       	breq	.+46     	; 0x1e1b0 <strtoul+0x118>
   1e182:	86 16       	cp	r8, r22
   1e184:	97 06       	cpc	r9, r23
   1e186:	a8 06       	cpc	r10, r24
   1e188:	b9 06       	cpc	r11, r25
   1e18a:	38 f1       	brcs	.+78     	; 0x1e1da <strtoul+0x142>
   1e18c:	a3 01       	movw	r20, r6
   1e18e:	92 01       	movw	r18, r4
   1e190:	0e 94 63 fb 	call	0x1f6c6	; 0x1f6c6 <__mulsi3>
   1e194:	23 2d       	mov	r18, r3
   1e196:	30 e0       	ldi	r19, 0x00	; 0
   1e198:	50 e0       	ldi	r21, 0x00	; 0
   1e19a:	40 e0       	ldi	r20, 0x00	; 0
   1e19c:	62 0f       	add	r22, r18
   1e19e:	73 1f       	adc	r23, r19
   1e1a0:	84 1f       	adc	r24, r20
   1e1a2:	95 1f       	adc	r25, r21
   1e1a4:	62 17       	cp	r22, r18
   1e1a6:	73 07       	cpc	r23, r19
   1e1a8:	84 07       	cpc	r24, r20
   1e1aa:	95 07       	cpc	r25, r21
   1e1ac:	b0 f0       	brcs	.+44     	; 0x1e1da <strtoul+0x142>
   1e1ae:	21 e0       	ldi	r18, 0x01	; 1
   1e1b0:	21 96       	adiw	r28, 0x01	; 1
   1e1b2:	10 81       	ld	r17, Z
   1e1b4:	cd cf       	rjmp	.-102    	; 0x1e150 <strtoul+0xb8>
   1e1b6:	1b 32       	cpi	r17, 0x2B	; 43
   1e1b8:	21 f4       	brne	.+8      	; 0x1e1c2 <strtoul+0x12a>
   1e1ba:	e5 01       	movw	r28, r10
   1e1bc:	22 96       	adiw	r28, 0x02	; 2
   1e1be:	f5 01       	movw	r30, r10
   1e1c0:	11 81       	ldd	r17, Z+1	; 0x01
   1e1c2:	00 e0       	ldi	r16, 0x00	; 0
   1e1c4:	a0 cf       	rjmp	.-192    	; 0x1e106 <strtoul+0x6e>
   1e1c6:	78 e0       	ldi	r23, 0x08	; 8
   1e1c8:	e7 2e       	mov	r14, r23
   1e1ca:	f1 2c       	mov	r15, r1
   1e1cc:	88 24       	eor	r8, r8
   1e1ce:	8a 94       	dec	r8
   1e1d0:	98 2c       	mov	r9, r8
   1e1d2:	a8 2c       	mov	r10, r8
   1e1d4:	6f e1       	ldi	r22, 0x1F	; 31
   1e1d6:	b6 2e       	mov	r11, r22
   1e1d8:	b2 cf       	rjmp	.-156    	; 0x1e13e <strtoul+0xa6>
   1e1da:	2f ef       	ldi	r18, 0xFF	; 255
   1e1dc:	e9 cf       	rjmp	.-46     	; 0x1e1b0 <strtoul+0x118>
   1e1de:	c1 14       	cp	r12, r1
   1e1e0:	d1 04       	cpc	r13, r1
   1e1e2:	31 f0       	breq	.+12     	; 0x1e1f0 <strtoul+0x158>
   1e1e4:	22 23       	and	r18, r18
   1e1e6:	51 f1       	breq	.+84     	; 0x1e23c <strtoul+0x1a4>
   1e1e8:	21 97       	sbiw	r28, 0x01	; 1
   1e1ea:	f6 01       	movw	r30, r12
   1e1ec:	d1 83       	std	Z+1, r29	; 0x01
   1e1ee:	c0 83       	st	Z, r28
   1e1f0:	00 ff       	sbrs	r16, 0
   1e1f2:	07 c0       	rjmp	.+14     	; 0x1e202 <strtoul+0x16a>
   1e1f4:	90 95       	com	r25
   1e1f6:	80 95       	com	r24
   1e1f8:	70 95       	com	r23
   1e1fa:	61 95       	neg	r22
   1e1fc:	7f 4f       	sbci	r23, 0xFF	; 255
   1e1fe:	8f 4f       	sbci	r24, 0xFF	; 255
   1e200:	9f 4f       	sbci	r25, 0xFF	; 255
   1e202:	2f 3f       	cpi	r18, 0xFF	; 255
   1e204:	49 f4       	brne	.+18     	; 0x1e218 <strtoul+0x180>
   1e206:	82 e2       	ldi	r24, 0x22	; 34
   1e208:	90 e0       	ldi	r25, 0x00	; 0
   1e20a:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <errno+0x1>
   1e20e:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <errno>
   1e212:	6f ef       	ldi	r22, 0xFF	; 255
   1e214:	7f ef       	ldi	r23, 0xFF	; 255
   1e216:	cb 01       	movw	r24, r22
   1e218:	df 91       	pop	r29
   1e21a:	cf 91       	pop	r28
   1e21c:	1f 91       	pop	r17
   1e21e:	0f 91       	pop	r16
   1e220:	ff 90       	pop	r15
   1e222:	ef 90       	pop	r14
   1e224:	df 90       	pop	r13
   1e226:	cf 90       	pop	r12
   1e228:	bf 90       	pop	r11
   1e22a:	af 90       	pop	r10
   1e22c:	9f 90       	pop	r9
   1e22e:	8f 90       	pop	r8
   1e230:	7f 90       	pop	r7
   1e232:	6f 90       	pop	r6
   1e234:	5f 90       	pop	r5
   1e236:	4f 90       	pop	r4
   1e238:	3f 90       	pop	r3
   1e23a:	08 95       	ret
   1e23c:	01 ff       	sbrs	r16, 1
   1e23e:	d8 cf       	rjmp	.-80     	; 0x1e1f0 <strtoul+0x158>
   1e240:	22 97       	sbiw	r28, 0x02	; 2
   1e242:	d3 cf       	rjmp	.-90     	; 0x1e1ea <strtoul+0x152>
   1e244:	10 e3       	ldi	r17, 0x30	; 48
   1e246:	e1 14       	cp	r14, r1
   1e248:	f1 04       	cpc	r15, r1
   1e24a:	09 f4       	brne	.+2      	; 0x1e24e <strtoul+0x1b6>
   1e24c:	bc cf       	rjmp	.-136    	; 0x1e1c6 <strtoul+0x12e>
   1e24e:	3a e0       	ldi	r19, 0x0A	; 10
   1e250:	e3 16       	cp	r14, r19
   1e252:	f1 04       	cpc	r15, r1
   1e254:	e9 f0       	breq	.+58     	; 0x1e290 <strtoul+0x1f8>
   1e256:	80 e1       	ldi	r24, 0x10	; 16
   1e258:	e8 16       	cp	r14, r24
   1e25a:	f1 04       	cpc	r15, r1
   1e25c:	09 f4       	brne	.+2      	; 0x1e260 <strtoul+0x1c8>
   1e25e:	66 cf       	rjmp	.-308    	; 0x1e12c <strtoul+0x94>
   1e260:	e8 e0       	ldi	r30, 0x08	; 8
   1e262:	ee 16       	cp	r14, r30
   1e264:	f1 04       	cpc	r15, r1
   1e266:	09 f4       	brne	.+2      	; 0x1e26a <strtoul+0x1d2>
   1e268:	b1 cf       	rjmp	.-158    	; 0x1e1cc <strtoul+0x134>
   1e26a:	6f ef       	ldi	r22, 0xFF	; 255
   1e26c:	7f ef       	ldi	r23, 0xFF	; 255
   1e26e:	cb 01       	movw	r24, r22
   1e270:	97 01       	movw	r18, r14
   1e272:	0f 2c       	mov	r0, r15
   1e274:	00 0c       	add	r0, r0
   1e276:	44 0b       	sbc	r20, r20
   1e278:	55 0b       	sbc	r21, r21
   1e27a:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
   1e27e:	49 01       	movw	r8, r18
   1e280:	5a 01       	movw	r10, r20
   1e282:	5d cf       	rjmp	.-326    	; 0x1e13e <strtoul+0xa6>
   1e284:	10 33       	cpi	r17, 0x30	; 48
   1e286:	09 f4       	brne	.+2      	; 0x1e28a <strtoul+0x1f2>
   1e288:	49 cf       	rjmp	.-366    	; 0x1e11c <strtoul+0x84>
   1e28a:	9a e0       	ldi	r25, 0x0A	; 10
   1e28c:	e9 2e       	mov	r14, r25
   1e28e:	f1 2c       	mov	r15, r1
   1e290:	89 e9       	ldi	r24, 0x99	; 153
   1e292:	88 2e       	mov	r8, r24
   1e294:	98 2c       	mov	r9, r8
   1e296:	a8 2c       	mov	r10, r8
   1e298:	89 e1       	ldi	r24, 0x19	; 25
   1e29a:	b8 2e       	mov	r11, r24
   1e29c:	50 cf       	rjmp	.-352    	; 0x1e13e <strtoul+0xa6>

0001e29e <atof>:
atof():
   1e29e:	66 27       	eor	r22, r22
   1e2a0:	77 27       	eor	r23, r23
   1e2a2:	0c 94 1d f7 	jmp	0x1ee3a	; 0x1ee3a <strtod>

0001e2a6 <atoi>:
atoi():
   1e2a6:	fc 01       	movw	r30, r24
   1e2a8:	88 27       	eor	r24, r24
   1e2aa:	99 27       	eor	r25, r25
   1e2ac:	e8 94       	clt
   1e2ae:	21 91       	ld	r18, Z+
   1e2b0:	20 32       	cpi	r18, 0x20	; 32
   1e2b2:	e9 f3       	breq	.-6      	; 0x1e2ae <atoi+0x8>
   1e2b4:	29 30       	cpi	r18, 0x09	; 9
   1e2b6:	10 f0       	brcs	.+4      	; 0x1e2bc <atoi+0x16>
   1e2b8:	2e 30       	cpi	r18, 0x0E	; 14
   1e2ba:	c8 f3       	brcs	.-14     	; 0x1e2ae <atoi+0x8>
   1e2bc:	2b 32       	cpi	r18, 0x2B	; 43
   1e2be:	41 f0       	breq	.+16     	; 0x1e2d0 <atoi+0x2a>
   1e2c0:	2d 32       	cpi	r18, 0x2D	; 45
   1e2c2:	39 f4       	brne	.+14     	; 0x1e2d2 <atoi+0x2c>
   1e2c4:	68 94       	set
   1e2c6:	04 c0       	rjmp	.+8      	; 0x1e2d0 <atoi+0x2a>
   1e2c8:	0e 94 cd f1 	call	0x1e39a	; 0x1e39a <__mulhi_const_10>
   1e2cc:	82 0f       	add	r24, r18
   1e2ce:	91 1d       	adc	r25, r1
   1e2d0:	21 91       	ld	r18, Z+
   1e2d2:	20 53       	subi	r18, 0x30	; 48
   1e2d4:	2a 30       	cpi	r18, 0x0A	; 10
   1e2d6:	c0 f3       	brcs	.-16     	; 0x1e2c8 <atoi+0x22>
   1e2d8:	1e f4       	brtc	.+6      	; 0x1e2e0 <atoi+0x3a>
   1e2da:	90 95       	com	r25
   1e2dc:	81 95       	neg	r24
   1e2de:	9f 4f       	sbci	r25, 0xFF	; 255
   1e2e0:	08 95       	ret

0001e2e2 <isspace>:
isspace():
   1e2e2:	91 11       	cpse	r25, r1
   1e2e4:	0c 94 53 f9 	jmp	0x1f2a6	; 0x1f2a6 <__ctype_isfalse>
   1e2e8:	80 32       	cpi	r24, 0x20	; 32
   1e2ea:	19 f0       	breq	.+6      	; 0x1e2f2 <isspace+0x10>
   1e2ec:	89 50       	subi	r24, 0x09	; 9
   1e2ee:	85 50       	subi	r24, 0x05	; 5
   1e2f0:	c8 f7       	brcc	.-14     	; 0x1e2e4 <isspace+0x2>
   1e2f2:	08 95       	ret

0001e2f4 <strcat_P>:
strcat_P():
   1e2f4:	fb 01       	movw	r30, r22
   1e2f6:	dc 01       	movw	r26, r24
   1e2f8:	0d 90       	ld	r0, X+
   1e2fa:	00 20       	and	r0, r0
   1e2fc:	e9 f7       	brne	.-6      	; 0x1e2f8 <strcat_P+0x4>
   1e2fe:	11 97       	sbiw	r26, 0x01	; 1
   1e300:	05 90       	lpm	r0, Z+
   1e302:	0d 92       	st	X+, r0
   1e304:	00 20       	and	r0, r0
   1e306:	e1 f7       	brne	.-8      	; 0x1e300 <strcat_P+0xc>
   1e308:	08 95       	ret

0001e30a <strcpy_P>:
strcpy_P():
   1e30a:	fb 01       	movw	r30, r22
   1e30c:	dc 01       	movw	r26, r24
   1e30e:	05 90       	lpm	r0, Z+
   1e310:	0d 92       	st	X+, r0
   1e312:	00 20       	and	r0, r0
   1e314:	e1 f7       	brne	.-8      	; 0x1e30e <strcpy_P+0x4>
   1e316:	08 95       	ret

0001e318 <strtok>:
strtok():
   1e318:	43 e0       	ldi	r20, 0x03	; 3
   1e31a:	54 e1       	ldi	r21, 0x14	; 20
   1e31c:	0c 94 90 f1 	jmp	0x1e320	; 0x1e320 <strtok_r>

0001e320 <strtok_r>:
strtok_r():
   1e320:	fa 01       	movw	r30, r20
   1e322:	a1 91       	ld	r26, Z+
   1e324:	b0 81       	ld	r27, Z
   1e326:	00 97       	sbiw	r24, 0x00	; 0
   1e328:	19 f4       	brne	.+6      	; 0x1e330 <strtok_r+0x10>
   1e32a:	10 97       	sbiw	r26, 0x00	; 0
   1e32c:	e1 f0       	breq	.+56     	; 0x1e366 <strtok_r+0x46>
   1e32e:	cd 01       	movw	r24, r26
   1e330:	dc 01       	movw	r26, r24
   1e332:	cd 01       	movw	r24, r26
   1e334:	0d 90       	ld	r0, X+
   1e336:	00 20       	and	r0, r0
   1e338:	11 f4       	brne	.+4      	; 0x1e33e <strtok_r+0x1e>
   1e33a:	c0 01       	movw	r24, r0
   1e33c:	13 c0       	rjmp	.+38     	; 0x1e364 <strtok_r+0x44>
   1e33e:	fb 01       	movw	r30, r22
   1e340:	21 91       	ld	r18, Z+
   1e342:	22 23       	and	r18, r18
   1e344:	19 f0       	breq	.+6      	; 0x1e34c <strtok_r+0x2c>
   1e346:	20 15       	cp	r18, r0
   1e348:	d9 f7       	brne	.-10     	; 0x1e340 <strtok_r+0x20>
   1e34a:	f3 cf       	rjmp	.-26     	; 0x1e332 <strtok_r+0x12>
   1e34c:	fb 01       	movw	r30, r22
   1e34e:	21 91       	ld	r18, Z+
   1e350:	20 15       	cp	r18, r0
   1e352:	19 f4       	brne	.+6      	; 0x1e35a <strtok_r+0x3a>
   1e354:	1e 92       	st	-X, r1
   1e356:	11 96       	adiw	r26, 0x01	; 1
   1e358:	06 c0       	rjmp	.+12     	; 0x1e366 <strtok_r+0x46>
   1e35a:	22 23       	and	r18, r18
   1e35c:	c1 f7       	brne	.-16     	; 0x1e34e <strtok_r+0x2e>
   1e35e:	0d 90       	ld	r0, X+
   1e360:	00 20       	and	r0, r0
   1e362:	a1 f7       	brne	.-24     	; 0x1e34c <strtok_r+0x2c>
   1e364:	d0 01       	movw	r26, r0
   1e366:	fa 01       	movw	r30, r20
   1e368:	a1 93       	st	Z+, r26
   1e36a:	b0 83       	st	Z, r27
   1e36c:	08 95       	ret

0001e36e <itoa>:
itoa():
   1e36e:	45 32       	cpi	r20, 0x25	; 37
   1e370:	51 05       	cpc	r21, r1
   1e372:	20 f4       	brcc	.+8      	; 0x1e37c <itoa+0xe>
   1e374:	42 30       	cpi	r20, 0x02	; 2
   1e376:	10 f0       	brcs	.+4      	; 0x1e37c <itoa+0xe>
   1e378:	0c 94 c2 f1 	jmp	0x1e384	; 0x1e384 <__itoa_ncheck>
   1e37c:	fb 01       	movw	r30, r22
   1e37e:	10 82       	st	Z, r1
   1e380:	cb 01       	movw	r24, r22
   1e382:	08 95       	ret

0001e384 <__itoa_ncheck>:
__itoa_ncheck():
   1e384:	bb 27       	eor	r27, r27
   1e386:	4a 30       	cpi	r20, 0x0A	; 10
   1e388:	31 f4       	brne	.+12     	; 0x1e396 <__itoa_ncheck+0x12>
   1e38a:	99 23       	and	r25, r25
   1e38c:	22 f4       	brpl	.+8      	; 0x1e396 <__itoa_ncheck+0x12>
   1e38e:	bd e2       	ldi	r27, 0x2D	; 45
   1e390:	90 95       	com	r25
   1e392:	81 95       	neg	r24
   1e394:	9f 4f       	sbci	r25, 0xFF	; 255
   1e396:	0c 94 d6 f1 	jmp	0x1e3ac	; 0x1e3ac <__utoa_common>

0001e39a <__mulhi_const_10>:
__mulhi_const_10():
   1e39a:	7a e0       	ldi	r23, 0x0A	; 10
   1e39c:	97 9f       	mul	r25, r23
   1e39e:	90 2d       	mov	r25, r0
   1e3a0:	87 9f       	mul	r24, r23
   1e3a2:	80 2d       	mov	r24, r0
   1e3a4:	91 0d       	add	r25, r1
   1e3a6:	11 24       	eor	r1, r1
   1e3a8:	08 95       	ret

0001e3aa <__utoa_ncheck>:
__utoa_ncheck():
   1e3aa:	bb 27       	eor	r27, r27

0001e3ac <__utoa_common>:
   1e3ac:	fb 01       	movw	r30, r22
   1e3ae:	55 27       	eor	r21, r21
   1e3b0:	aa 27       	eor	r26, r26
   1e3b2:	88 0f       	add	r24, r24
   1e3b4:	99 1f       	adc	r25, r25
   1e3b6:	aa 1f       	adc	r26, r26
   1e3b8:	a4 17       	cp	r26, r20
   1e3ba:	10 f0       	brcs	.+4      	; 0x1e3c0 <__utoa_common+0x14>
   1e3bc:	a4 1b       	sub	r26, r20
   1e3be:	83 95       	inc	r24
   1e3c0:	50 51       	subi	r21, 0x10	; 16
   1e3c2:	b9 f7       	brne	.-18     	; 0x1e3b2 <__utoa_common+0x6>
   1e3c4:	a0 5d       	subi	r26, 0xD0	; 208
   1e3c6:	aa 33       	cpi	r26, 0x3A	; 58
   1e3c8:	08 f0       	brcs	.+2      	; 0x1e3cc <__utoa_common+0x20>
   1e3ca:	a9 5d       	subi	r26, 0xD9	; 217
   1e3cc:	a1 93       	st	Z+, r26
   1e3ce:	00 97       	sbiw	r24, 0x00	; 0
   1e3d0:	79 f7       	brne	.-34     	; 0x1e3b0 <__utoa_common+0x4>
   1e3d2:	b1 11       	cpse	r27, r1
   1e3d4:	b1 93       	st	Z+, r27
   1e3d6:	11 92       	st	Z+, r1
   1e3d8:	cb 01       	movw	r24, r22
   1e3da:	0c 94 8b f9 	jmp	0x1f316	; 0x1f316 <strrev>

0001e3de <fdevopen>:
fdevopen():
   1e3de:	0f 93       	push	r16
   1e3e0:	1f 93       	push	r17
   1e3e2:	cf 93       	push	r28
   1e3e4:	df 93       	push	r29
   1e3e6:	00 97       	sbiw	r24, 0x00	; 0
   1e3e8:	59 f4       	brne	.+22     	; 0x1e400 <fdevopen+0x22>
   1e3ea:	61 15       	cp	r22, r1
   1e3ec:	71 05       	cpc	r23, r1
   1e3ee:	41 f4       	brne	.+16     	; 0x1e400 <fdevopen+0x22>
   1e3f0:	f0 e0       	ldi	r31, 0x00	; 0
   1e3f2:	e0 e0       	ldi	r30, 0x00	; 0
   1e3f4:	cf 01       	movw	r24, r30
   1e3f6:	df 91       	pop	r29
   1e3f8:	cf 91       	pop	r28
   1e3fa:	1f 91       	pop	r17
   1e3fc:	0f 91       	pop	r16
   1e3fe:	08 95       	ret
   1e400:	8b 01       	movw	r16, r22
   1e402:	ec 01       	movw	r28, r24
   1e404:	6e e0       	ldi	r22, 0x0E	; 14
   1e406:	70 e0       	ldi	r23, 0x00	; 0
   1e408:	81 e0       	ldi	r24, 0x01	; 1
   1e40a:	90 e0       	ldi	r25, 0x00	; 0
   1e40c:	0e 94 63 f4 	call	0x1e8c6	; 0x1e8c6 <calloc>
   1e410:	fc 01       	movw	r30, r24
   1e412:	89 2b       	or	r24, r25
   1e414:	69 f3       	breq	.-38     	; 0x1e3f0 <fdevopen+0x12>
   1e416:	80 e8       	ldi	r24, 0x80	; 128
   1e418:	83 83       	std	Z+3, r24	; 0x03
   1e41a:	01 15       	cp	r16, r1
   1e41c:	11 05       	cpc	r17, r1
   1e41e:	71 f0       	breq	.+28     	; 0x1e43c <fdevopen+0x5e>
   1e420:	13 87       	std	Z+11, r17	; 0x0b
   1e422:	02 87       	std	Z+10, r16	; 0x0a
   1e424:	81 e8       	ldi	r24, 0x81	; 129
   1e426:	83 83       	std	Z+3, r24	; 0x03
   1e428:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <__iob>
   1e42c:	90 91 06 14 	lds	r25, 0x1406	; 0x801406 <__iob+0x1>
   1e430:	89 2b       	or	r24, r25
   1e432:	21 f4       	brne	.+8      	; 0x1e43c <fdevopen+0x5e>
   1e434:	f0 93 06 14 	sts	0x1406, r31	; 0x801406 <__iob+0x1>
   1e438:	e0 93 05 14 	sts	0x1405, r30	; 0x801405 <__iob>
   1e43c:	20 97       	sbiw	r28, 0x00	; 0
   1e43e:	d1 f2       	breq	.-76     	; 0x1e3f4 <fdevopen+0x16>
   1e440:	d1 87       	std	Z+9, r29	; 0x09
   1e442:	c0 87       	std	Z+8, r28	; 0x08
   1e444:	83 81       	ldd	r24, Z+3	; 0x03
   1e446:	82 60       	ori	r24, 0x02	; 2
   1e448:	83 83       	std	Z+3, r24	; 0x03
   1e44a:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <__iob+0x2>
   1e44e:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <__iob+0x3>
   1e452:	89 2b       	or	r24, r25
   1e454:	79 f6       	brne	.-98     	; 0x1e3f4 <fdevopen+0x16>
   1e456:	f0 93 08 14 	sts	0x1408, r31	; 0x801408 <__iob+0x3>
   1e45a:	e0 93 07 14 	sts	0x1407, r30	; 0x801407 <__iob+0x2>
   1e45e:	80 91 09 14 	lds	r24, 0x1409	; 0x801409 <__iob+0x4>
   1e462:	90 91 0a 14 	lds	r25, 0x140A	; 0x80140a <__iob+0x5>
   1e466:	89 2b       	or	r24, r25
   1e468:	29 f6       	brne	.-118    	; 0x1e3f4 <fdevopen+0x16>
   1e46a:	f0 93 0a 14 	sts	0x140A, r31	; 0x80140a <__iob+0x5>
   1e46e:	e0 93 09 14 	sts	0x1409, r30	; 0x801409 <__iob+0x4>
   1e472:	c0 cf       	rjmp	.-128    	; 0x1e3f4 <fdevopen+0x16>

0001e474 <printf_P>:
printf_P():
   1e474:	0f 93       	push	r16
   1e476:	1f 93       	push	r17
   1e478:	cf 93       	push	r28
   1e47a:	df 93       	push	r29
   1e47c:	cd b7       	in	r28, 0x3d	; 61
   1e47e:	de b7       	in	r29, 0x3e	; 62
   1e480:	ae 01       	movw	r20, r28
   1e482:	48 5f       	subi	r20, 0xF8	; 248
   1e484:	5f 4f       	sbci	r21, 0xFF	; 255
   1e486:	da 01       	movw	r26, r20
   1e488:	6d 91       	ld	r22, X+
   1e48a:	7d 91       	ld	r23, X+
   1e48c:	ad 01       	movw	r20, r26
   1e48e:	05 e0       	ldi	r16, 0x05	; 5
   1e490:	14 e1       	ldi	r17, 0x14	; 20
   1e492:	f8 01       	movw	r30, r16
   1e494:	82 81       	ldd	r24, Z+2	; 0x02
   1e496:	93 81       	ldd	r25, Z+3	; 0x03
   1e498:	dc 01       	movw	r26, r24
   1e49a:	13 96       	adiw	r26, 0x03	; 3
   1e49c:	2c 91       	ld	r18, X
   1e49e:	13 97       	sbiw	r26, 0x03	; 3
   1e4a0:	28 60       	ori	r18, 0x08	; 8
   1e4a2:	13 96       	adiw	r26, 0x03	; 3
   1e4a4:	2c 93       	st	X, r18
   1e4a6:	0e 94 61 f2 	call	0x1e4c2	; 0x1e4c2 <vfprintf>
   1e4aa:	d8 01       	movw	r26, r16
   1e4ac:	12 96       	adiw	r26, 0x02	; 2
   1e4ae:	ed 91       	ld	r30, X+
   1e4b0:	fc 91       	ld	r31, X
   1e4b2:	23 81       	ldd	r18, Z+3	; 0x03
   1e4b4:	27 7f       	andi	r18, 0xF7	; 247
   1e4b6:	23 83       	std	Z+3, r18	; 0x03
   1e4b8:	df 91       	pop	r29
   1e4ba:	cf 91       	pop	r28
   1e4bc:	1f 91       	pop	r17
   1e4be:	0f 91       	pop	r16
   1e4c0:	08 95       	ret

0001e4c2 <vfprintf>:
vfprintf():
   1e4c2:	2f 92       	push	r2
   1e4c4:	3f 92       	push	r3
   1e4c6:	4f 92       	push	r4
   1e4c8:	5f 92       	push	r5
   1e4ca:	6f 92       	push	r6
   1e4cc:	7f 92       	push	r7
   1e4ce:	8f 92       	push	r8
   1e4d0:	9f 92       	push	r9
   1e4d2:	af 92       	push	r10
   1e4d4:	bf 92       	push	r11
   1e4d6:	cf 92       	push	r12
   1e4d8:	df 92       	push	r13
   1e4da:	ef 92       	push	r14
   1e4dc:	ff 92       	push	r15
   1e4de:	0f 93       	push	r16
   1e4e0:	1f 93       	push	r17
   1e4e2:	cf 93       	push	r28
   1e4e4:	df 93       	push	r29
   1e4e6:	00 d0       	rcall	.+0      	; 0x1e4e8 <vfprintf+0x26>
   1e4e8:	00 d0       	rcall	.+0      	; 0x1e4ea <vfprintf+0x28>
   1e4ea:	00 d0       	rcall	.+0      	; 0x1e4ec <vfprintf+0x2a>
   1e4ec:	1f 92       	push	r1
   1e4ee:	1f 92       	push	r1
   1e4f0:	cd b7       	in	r28, 0x3d	; 61
   1e4f2:	de b7       	in	r29, 0x3e	; 62
   1e4f4:	7c 01       	movw	r14, r24
   1e4f6:	3b 01       	movw	r6, r22
   1e4f8:	8a 01       	movw	r16, r20
   1e4fa:	fc 01       	movw	r30, r24
   1e4fc:	17 82       	std	Z+7, r1	; 0x07
   1e4fe:	16 82       	std	Z+6, r1	; 0x06
   1e500:	83 81       	ldd	r24, Z+3	; 0x03
   1e502:	81 ff       	sbrs	r24, 1
   1e504:	dd c1       	rjmp	.+954    	; 0x1e8c0 <vfprintf+0x3fe>
   1e506:	ce 01       	movw	r24, r28
   1e508:	01 96       	adiw	r24, 0x01	; 1
   1e50a:	5c 01       	movw	r10, r24
   1e50c:	f7 01       	movw	r30, r14
   1e50e:	93 81       	ldd	r25, Z+3	; 0x03
   1e510:	f3 01       	movw	r30, r6
   1e512:	93 fd       	sbrc	r25, 3
   1e514:	85 91       	lpm	r24, Z+
   1e516:	93 ff       	sbrs	r25, 3
   1e518:	81 91       	ld	r24, Z+
   1e51a:	3f 01       	movw	r6, r30
   1e51c:	88 23       	and	r24, r24
   1e51e:	09 f4       	brne	.+2      	; 0x1e522 <vfprintf+0x60>
   1e520:	53 c1       	rjmp	.+678    	; 0x1e7c8 <vfprintf+0x306>
   1e522:	85 32       	cpi	r24, 0x25	; 37
   1e524:	39 f4       	brne	.+14     	; 0x1e534 <vfprintf+0x72>
   1e526:	93 fd       	sbrc	r25, 3
   1e528:	85 91       	lpm	r24, Z+
   1e52a:	93 ff       	sbrs	r25, 3
   1e52c:	81 91       	ld	r24, Z+
   1e52e:	3f 01       	movw	r6, r30
   1e530:	85 32       	cpi	r24, 0x25	; 37
   1e532:	29 f4       	brne	.+10     	; 0x1e53e <vfprintf+0x7c>
   1e534:	b7 01       	movw	r22, r14
   1e536:	90 e0       	ldi	r25, 0x00	; 0
   1e538:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e53c:	e7 cf       	rjmp	.-50     	; 0x1e50c <vfprintf+0x4a>
   1e53e:	91 2c       	mov	r9, r1
   1e540:	21 2c       	mov	r2, r1
   1e542:	31 2c       	mov	r3, r1
   1e544:	ff e1       	ldi	r31, 0x1F	; 31
   1e546:	f3 15       	cp	r31, r3
   1e548:	38 f0       	brcs	.+14     	; 0x1e558 <vfprintf+0x96>
   1e54a:	8b 32       	cpi	r24, 0x2B	; 43
   1e54c:	11 f1       	breq	.+68     	; 0x1e592 <vfprintf+0xd0>
   1e54e:	90 f4       	brcc	.+36     	; 0x1e574 <vfprintf+0xb2>
   1e550:	80 32       	cpi	r24, 0x20	; 32
   1e552:	09 f1       	breq	.+66     	; 0x1e596 <vfprintf+0xd4>
   1e554:	83 32       	cpi	r24, 0x23	; 35
   1e556:	29 f1       	breq	.+74     	; 0x1e5a2 <vfprintf+0xe0>
   1e558:	37 fc       	sbrc	r3, 7
   1e55a:	3c c0       	rjmp	.+120    	; 0x1e5d4 <vfprintf+0x112>
   1e55c:	20 ed       	ldi	r18, 0xD0	; 208
   1e55e:	28 0f       	add	r18, r24
   1e560:	2a 30       	cpi	r18, 0x0A	; 10
   1e562:	50 f5       	brcc	.+84     	; 0x1e5b8 <vfprintf+0xf6>
   1e564:	36 fe       	sbrs	r3, 6
   1e566:	20 c0       	rjmp	.+64     	; 0x1e5a8 <vfprintf+0xe6>
   1e568:	8a e0       	ldi	r24, 0x0A	; 10
   1e56a:	98 9e       	mul	r9, r24
   1e56c:	20 0d       	add	r18, r0
   1e56e:	11 24       	eor	r1, r1
   1e570:	92 2e       	mov	r9, r18
   1e572:	06 c0       	rjmp	.+12     	; 0x1e580 <vfprintf+0xbe>
   1e574:	8d 32       	cpi	r24, 0x2D	; 45
   1e576:	91 f0       	breq	.+36     	; 0x1e59c <vfprintf+0xda>
   1e578:	80 33       	cpi	r24, 0x30	; 48
   1e57a:	71 f7       	brne	.-36     	; 0x1e558 <vfprintf+0x96>
   1e57c:	68 94       	set
   1e57e:	30 f8       	bld	r3, 0
   1e580:	f3 01       	movw	r30, r6
   1e582:	93 fd       	sbrc	r25, 3
   1e584:	85 91       	lpm	r24, Z+
   1e586:	93 ff       	sbrs	r25, 3
   1e588:	81 91       	ld	r24, Z+
   1e58a:	3f 01       	movw	r6, r30
   1e58c:	81 11       	cpse	r24, r1
   1e58e:	da cf       	rjmp	.-76     	; 0x1e544 <vfprintf+0x82>
   1e590:	21 c0       	rjmp	.+66     	; 0x1e5d4 <vfprintf+0x112>
   1e592:	68 94       	set
   1e594:	31 f8       	bld	r3, 1
   1e596:	68 94       	set
   1e598:	32 f8       	bld	r3, 2
   1e59a:	f2 cf       	rjmp	.-28     	; 0x1e580 <vfprintf+0xbe>
   1e59c:	68 94       	set
   1e59e:	33 f8       	bld	r3, 3
   1e5a0:	ef cf       	rjmp	.-34     	; 0x1e580 <vfprintf+0xbe>
   1e5a2:	68 94       	set
   1e5a4:	34 f8       	bld	r3, 4
   1e5a6:	ec cf       	rjmp	.-40     	; 0x1e580 <vfprintf+0xbe>
   1e5a8:	ea e0       	ldi	r30, 0x0A	; 10
   1e5aa:	2e 9e       	mul	r2, r30
   1e5ac:	20 0d       	add	r18, r0
   1e5ae:	11 24       	eor	r1, r1
   1e5b0:	22 2e       	mov	r2, r18
   1e5b2:	68 94       	set
   1e5b4:	35 f8       	bld	r3, 5
   1e5b6:	e4 cf       	rjmp	.-56     	; 0x1e580 <vfprintf+0xbe>
   1e5b8:	8e 32       	cpi	r24, 0x2E	; 46
   1e5ba:	29 f4       	brne	.+10     	; 0x1e5c6 <vfprintf+0x104>
   1e5bc:	36 fc       	sbrc	r3, 6
   1e5be:	04 c1       	rjmp	.+520    	; 0x1e7c8 <vfprintf+0x306>
   1e5c0:	68 94       	set
   1e5c2:	36 f8       	bld	r3, 6
   1e5c4:	dd cf       	rjmp	.-70     	; 0x1e580 <vfprintf+0xbe>
   1e5c6:	8c 36       	cpi	r24, 0x6C	; 108
   1e5c8:	19 f4       	brne	.+6      	; 0x1e5d0 <vfprintf+0x10e>
   1e5ca:	68 94       	set
   1e5cc:	37 f8       	bld	r3, 7
   1e5ce:	d8 cf       	rjmp	.-80     	; 0x1e580 <vfprintf+0xbe>
   1e5d0:	88 36       	cpi	r24, 0x68	; 104
   1e5d2:	b1 f2       	breq	.-84     	; 0x1e580 <vfprintf+0xbe>
   1e5d4:	98 2f       	mov	r25, r24
   1e5d6:	9f 7d       	andi	r25, 0xDF	; 223
   1e5d8:	95 54       	subi	r25, 0x45	; 69
   1e5da:	93 30       	cpi	r25, 0x03	; 3
   1e5dc:	e0 f0       	brcs	.+56     	; 0x1e616 <vfprintf+0x154>
   1e5de:	83 36       	cpi	r24, 0x63	; 99
   1e5e0:	a1 f1       	breq	.+104    	; 0x1e64a <vfprintf+0x188>
   1e5e2:	83 37       	cpi	r24, 0x73	; 115
   1e5e4:	c1 f1       	breq	.+112    	; 0x1e656 <vfprintf+0x194>
   1e5e6:	83 35       	cpi	r24, 0x53	; 83
   1e5e8:	09 f0       	breq	.+2      	; 0x1e5ec <vfprintf+0x12a>
   1e5ea:	63 c0       	rjmp	.+198    	; 0x1e6b2 <vfprintf+0x1f0>
   1e5ec:	28 01       	movw	r4, r16
   1e5ee:	f2 e0       	ldi	r31, 0x02	; 2
   1e5f0:	4f 0e       	add	r4, r31
   1e5f2:	51 1c       	adc	r5, r1
   1e5f4:	f8 01       	movw	r30, r16
   1e5f6:	c0 80       	ld	r12, Z
   1e5f8:	d1 80       	ldd	r13, Z+1	; 0x01
   1e5fa:	69 2d       	mov	r22, r9
   1e5fc:	70 e0       	ldi	r23, 0x00	; 0
   1e5fe:	36 fc       	sbrc	r3, 6
   1e600:	02 c0       	rjmp	.+4      	; 0x1e606 <vfprintf+0x144>
   1e602:	6f ef       	ldi	r22, 0xFF	; 255
   1e604:	7f ef       	ldi	r23, 0xFF	; 255
   1e606:	c6 01       	movw	r24, r12
   1e608:	0e 94 6e f9 	call	0x1f2dc	; 0x1f2dc <strnlen_P>
   1e60c:	4c 01       	movw	r8, r24
   1e60e:	68 94       	set
   1e610:	37 f8       	bld	r3, 7
   1e612:	82 01       	movw	r16, r4
   1e614:	0a c0       	rjmp	.+20     	; 0x1e62a <vfprintf+0x168>
   1e616:	0c 5f       	subi	r16, 0xFC	; 252
   1e618:	1f 4f       	sbci	r17, 0xFF	; 255
   1e61a:	ff e3       	ldi	r31, 0x3F	; 63
   1e61c:	f9 83       	std	Y+1, r31	; 0x01
   1e61e:	88 24       	eor	r8, r8
   1e620:	83 94       	inc	r8
   1e622:	91 2c       	mov	r9, r1
   1e624:	65 01       	movw	r12, r10
   1e626:	e8 94       	clt
   1e628:	37 f8       	bld	r3, 7
   1e62a:	33 fe       	sbrs	r3, 3
   1e62c:	2d c0       	rjmp	.+90     	; 0x1e688 <vfprintf+0x1c6>
   1e62e:	52 2c       	mov	r5, r2
   1e630:	81 14       	cp	r8, r1
   1e632:	91 04       	cpc	r9, r1
   1e634:	71 f5       	brne	.+92     	; 0x1e692 <vfprintf+0x1d0>
   1e636:	55 20       	and	r5, r5
   1e638:	09 f4       	brne	.+2      	; 0x1e63c <vfprintf+0x17a>
   1e63a:	68 cf       	rjmp	.-304    	; 0x1e50c <vfprintf+0x4a>
   1e63c:	b7 01       	movw	r22, r14
   1e63e:	80 e2       	ldi	r24, 0x20	; 32
   1e640:	90 e0       	ldi	r25, 0x00	; 0
   1e642:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e646:	5a 94       	dec	r5
   1e648:	f6 cf       	rjmp	.-20     	; 0x1e636 <vfprintf+0x174>
   1e64a:	f8 01       	movw	r30, r16
   1e64c:	80 81       	ld	r24, Z
   1e64e:	89 83       	std	Y+1, r24	; 0x01
   1e650:	0e 5f       	subi	r16, 0xFE	; 254
   1e652:	1f 4f       	sbci	r17, 0xFF	; 255
   1e654:	e4 cf       	rjmp	.-56     	; 0x1e61e <vfprintf+0x15c>
   1e656:	28 01       	movw	r4, r16
   1e658:	f2 e0       	ldi	r31, 0x02	; 2
   1e65a:	4f 0e       	add	r4, r31
   1e65c:	51 1c       	adc	r5, r1
   1e65e:	f8 01       	movw	r30, r16
   1e660:	c0 80       	ld	r12, Z
   1e662:	d1 80       	ldd	r13, Z+1	; 0x01
   1e664:	69 2d       	mov	r22, r9
   1e666:	70 e0       	ldi	r23, 0x00	; 0
   1e668:	36 fc       	sbrc	r3, 6
   1e66a:	02 c0       	rjmp	.+4      	; 0x1e670 <vfprintf+0x1ae>
   1e66c:	6f ef       	ldi	r22, 0xFF	; 255
   1e66e:	7f ef       	ldi	r23, 0xFF	; 255
   1e670:	c6 01       	movw	r24, r12
   1e672:	0e 94 80 f9 	call	0x1f300	; 0x1f300 <strnlen>
   1e676:	4c 01       	movw	r8, r24
   1e678:	82 01       	movw	r16, r4
   1e67a:	d5 cf       	rjmp	.-86     	; 0x1e626 <vfprintf+0x164>
   1e67c:	b7 01       	movw	r22, r14
   1e67e:	80 e2       	ldi	r24, 0x20	; 32
   1e680:	90 e0       	ldi	r25, 0x00	; 0
   1e682:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e686:	2a 94       	dec	r2
   1e688:	28 14       	cp	r2, r8
   1e68a:	19 04       	cpc	r1, r9
   1e68c:	09 f0       	breq	.+2      	; 0x1e690 <vfprintf+0x1ce>
   1e68e:	b0 f7       	brcc	.-20     	; 0x1e67c <vfprintf+0x1ba>
   1e690:	ce cf       	rjmp	.-100    	; 0x1e62e <vfprintf+0x16c>
   1e692:	f6 01       	movw	r30, r12
   1e694:	37 fc       	sbrc	r3, 7
   1e696:	85 91       	lpm	r24, Z+
   1e698:	37 fe       	sbrs	r3, 7
   1e69a:	81 91       	ld	r24, Z+
   1e69c:	6f 01       	movw	r12, r30
   1e69e:	b7 01       	movw	r22, r14
   1e6a0:	90 e0       	ldi	r25, 0x00	; 0
   1e6a2:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e6a6:	51 10       	cpse	r5, r1
   1e6a8:	5a 94       	dec	r5
   1e6aa:	f1 e0       	ldi	r31, 0x01	; 1
   1e6ac:	8f 1a       	sub	r8, r31
   1e6ae:	91 08       	sbc	r9, r1
   1e6b0:	bf cf       	rjmp	.-130    	; 0x1e630 <vfprintf+0x16e>
   1e6b2:	84 36       	cpi	r24, 0x64	; 100
   1e6b4:	19 f0       	breq	.+6      	; 0x1e6bc <vfprintf+0x1fa>
   1e6b6:	89 36       	cpi	r24, 0x69	; 105
   1e6b8:	09 f0       	breq	.+2      	; 0x1e6bc <vfprintf+0x1fa>
   1e6ba:	77 c0       	rjmp	.+238    	; 0x1e7aa <vfprintf+0x2e8>
   1e6bc:	f8 01       	movw	r30, r16
   1e6be:	37 fe       	sbrs	r3, 7
   1e6c0:	6b c0       	rjmp	.+214    	; 0x1e798 <vfprintf+0x2d6>
   1e6c2:	60 81       	ld	r22, Z
   1e6c4:	71 81       	ldd	r23, Z+1	; 0x01
   1e6c6:	82 81       	ldd	r24, Z+2	; 0x02
   1e6c8:	93 81       	ldd	r25, Z+3	; 0x03
   1e6ca:	0c 5f       	subi	r16, 0xFC	; 252
   1e6cc:	1f 4f       	sbci	r17, 0xFF	; 255
   1e6ce:	f3 2d       	mov	r31, r3
   1e6d0:	ff 76       	andi	r31, 0x6F	; 111
   1e6d2:	3f 2e       	mov	r3, r31
   1e6d4:	97 ff       	sbrs	r25, 7
   1e6d6:	09 c0       	rjmp	.+18     	; 0x1e6ea <vfprintf+0x228>
   1e6d8:	90 95       	com	r25
   1e6da:	80 95       	com	r24
   1e6dc:	70 95       	com	r23
   1e6de:	61 95       	neg	r22
   1e6e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1e6e2:	8f 4f       	sbci	r24, 0xFF	; 255
   1e6e4:	9f 4f       	sbci	r25, 0xFF	; 255
   1e6e6:	68 94       	set
   1e6e8:	37 f8       	bld	r3, 7
   1e6ea:	2a e0       	ldi	r18, 0x0A	; 10
   1e6ec:	30 e0       	ldi	r19, 0x00	; 0
   1e6ee:	a5 01       	movw	r20, r10
   1e6f0:	0e 94 cb f9 	call	0x1f396	; 0x1f396 <__ultoa_invert>
   1e6f4:	c8 2e       	mov	r12, r24
   1e6f6:	ca 18       	sub	r12, r10
   1e6f8:	8c 2c       	mov	r8, r12
   1e6fa:	43 2c       	mov	r4, r3
   1e6fc:	36 fe       	sbrs	r3, 6
   1e6fe:	0c c0       	rjmp	.+24     	; 0x1e718 <vfprintf+0x256>
   1e700:	e8 94       	clt
   1e702:	40 f8       	bld	r4, 0
   1e704:	c9 14       	cp	r12, r9
   1e706:	40 f4       	brcc	.+16     	; 0x1e718 <vfprintf+0x256>
   1e708:	34 fe       	sbrs	r3, 4
   1e70a:	05 c0       	rjmp	.+10     	; 0x1e716 <vfprintf+0x254>
   1e70c:	32 fc       	sbrc	r3, 2
   1e70e:	03 c0       	rjmp	.+6      	; 0x1e716 <vfprintf+0x254>
   1e710:	f3 2d       	mov	r31, r3
   1e712:	fe 7e       	andi	r31, 0xEE	; 238
   1e714:	4f 2e       	mov	r4, r31
   1e716:	89 2c       	mov	r8, r9
   1e718:	44 fe       	sbrs	r4, 4
   1e71a:	aa c0       	rjmp	.+340    	; 0x1e870 <vfprintf+0x3ae>
   1e71c:	fe 01       	movw	r30, r28
   1e71e:	ec 0d       	add	r30, r12
   1e720:	f1 1d       	adc	r31, r1
   1e722:	80 81       	ld	r24, Z
   1e724:	80 33       	cpi	r24, 0x30	; 48
   1e726:	09 f0       	breq	.+2      	; 0x1e72a <vfprintf+0x268>
   1e728:	9c c0       	rjmp	.+312    	; 0x1e862 <vfprintf+0x3a0>
   1e72a:	24 2d       	mov	r18, r4
   1e72c:	29 7e       	andi	r18, 0xE9	; 233
   1e72e:	42 2e       	mov	r4, r18
   1e730:	84 2d       	mov	r24, r4
   1e732:	88 70       	andi	r24, 0x08	; 8
   1e734:	58 2e       	mov	r5, r24
   1e736:	43 fc       	sbrc	r4, 3
   1e738:	aa c0       	rjmp	.+340    	; 0x1e88e <vfprintf+0x3cc>
   1e73a:	40 fe       	sbrs	r4, 0
   1e73c:	a4 c0       	rjmp	.+328    	; 0x1e886 <vfprintf+0x3c4>
   1e73e:	9c 2c       	mov	r9, r12
   1e740:	82 14       	cp	r8, r2
   1e742:	18 f4       	brcc	.+6      	; 0x1e74a <vfprintf+0x288>
   1e744:	2c 0c       	add	r2, r12
   1e746:	92 2c       	mov	r9, r2
   1e748:	98 18       	sub	r9, r8
   1e74a:	44 fe       	sbrs	r4, 4
   1e74c:	a6 c0       	rjmp	.+332    	; 0x1e89a <vfprintf+0x3d8>
   1e74e:	b7 01       	movw	r22, r14
   1e750:	80 e3       	ldi	r24, 0x30	; 48
   1e752:	90 e0       	ldi	r25, 0x00	; 0
   1e754:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e758:	42 fe       	sbrs	r4, 2
   1e75a:	09 c0       	rjmp	.+18     	; 0x1e76e <vfprintf+0x2ac>
   1e75c:	88 e7       	ldi	r24, 0x78	; 120
   1e75e:	90 e0       	ldi	r25, 0x00	; 0
   1e760:	41 fe       	sbrs	r4, 1
   1e762:	02 c0       	rjmp	.+4      	; 0x1e768 <vfprintf+0x2a6>
   1e764:	88 e5       	ldi	r24, 0x58	; 88
   1e766:	90 e0       	ldi	r25, 0x00	; 0
   1e768:	b7 01       	movw	r22, r14
   1e76a:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e76e:	c9 14       	cp	r12, r9
   1e770:	08 f4       	brcc	.+2      	; 0x1e774 <vfprintf+0x2b2>
   1e772:	9f c0       	rjmp	.+318    	; 0x1e8b2 <vfprintf+0x3f0>
   1e774:	ca 94       	dec	r12
   1e776:	d1 2c       	mov	r13, r1
   1e778:	9f ef       	ldi	r25, 0xFF	; 255
   1e77a:	c9 1a       	sub	r12, r25
   1e77c:	d9 0a       	sbc	r13, r25
   1e77e:	ca 0c       	add	r12, r10
   1e780:	db 1c       	adc	r13, r11
   1e782:	f6 01       	movw	r30, r12
   1e784:	82 91       	ld	r24, -Z
   1e786:	6f 01       	movw	r12, r30
   1e788:	b7 01       	movw	r22, r14
   1e78a:	90 e0       	ldi	r25, 0x00	; 0
   1e78c:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e790:	ac 14       	cp	r10, r12
   1e792:	bd 04       	cpc	r11, r13
   1e794:	b1 f7       	brne	.-20     	; 0x1e782 <vfprintf+0x2c0>
   1e796:	4f cf       	rjmp	.-354    	; 0x1e636 <vfprintf+0x174>
   1e798:	60 81       	ld	r22, Z
   1e79a:	71 81       	ldd	r23, Z+1	; 0x01
   1e79c:	07 2e       	mov	r0, r23
   1e79e:	00 0c       	add	r0, r0
   1e7a0:	88 0b       	sbc	r24, r24
   1e7a2:	99 0b       	sbc	r25, r25
   1e7a4:	0e 5f       	subi	r16, 0xFE	; 254
   1e7a6:	1f 4f       	sbci	r17, 0xFF	; 255
   1e7a8:	92 cf       	rjmp	.-220    	; 0x1e6ce <vfprintf+0x20c>
   1e7aa:	d3 2c       	mov	r13, r3
   1e7ac:	e8 94       	clt
   1e7ae:	d4 f8       	bld	r13, 4
   1e7b0:	2a e0       	ldi	r18, 0x0A	; 10
   1e7b2:	30 e0       	ldi	r19, 0x00	; 0
   1e7b4:	85 37       	cpi	r24, 0x75	; 117
   1e7b6:	e1 f1       	breq	.+120    	; 0x1e830 <vfprintf+0x36e>
   1e7b8:	23 2d       	mov	r18, r3
   1e7ba:	29 7f       	andi	r18, 0xF9	; 249
   1e7bc:	d2 2e       	mov	r13, r18
   1e7be:	8f 36       	cpi	r24, 0x6F	; 111
   1e7c0:	a9 f1       	breq	.+106    	; 0x1e82c <vfprintf+0x36a>
   1e7c2:	f0 f4       	brcc	.+60     	; 0x1e800 <vfprintf+0x33e>
   1e7c4:	88 35       	cpi	r24, 0x58	; 88
   1e7c6:	51 f1       	breq	.+84     	; 0x1e81c <vfprintf+0x35a>
   1e7c8:	f7 01       	movw	r30, r14
   1e7ca:	86 81       	ldd	r24, Z+6	; 0x06
   1e7cc:	97 81       	ldd	r25, Z+7	; 0x07
   1e7ce:	2b 96       	adiw	r28, 0x0b	; 11
   1e7d0:	0f b6       	in	r0, 0x3f	; 63
   1e7d2:	f8 94       	cli
   1e7d4:	de bf       	out	0x3e, r29	; 62
   1e7d6:	0f be       	out	0x3f, r0	; 63
   1e7d8:	cd bf       	out	0x3d, r28	; 61
   1e7da:	df 91       	pop	r29
   1e7dc:	cf 91       	pop	r28
   1e7de:	1f 91       	pop	r17
   1e7e0:	0f 91       	pop	r16
   1e7e2:	ff 90       	pop	r15
   1e7e4:	ef 90       	pop	r14
   1e7e6:	df 90       	pop	r13
   1e7e8:	cf 90       	pop	r12
   1e7ea:	bf 90       	pop	r11
   1e7ec:	af 90       	pop	r10
   1e7ee:	9f 90       	pop	r9
   1e7f0:	8f 90       	pop	r8
   1e7f2:	7f 90       	pop	r7
   1e7f4:	6f 90       	pop	r6
   1e7f6:	5f 90       	pop	r5
   1e7f8:	4f 90       	pop	r4
   1e7fa:	3f 90       	pop	r3
   1e7fc:	2f 90       	pop	r2
   1e7fe:	08 95       	ret
   1e800:	80 37       	cpi	r24, 0x70	; 112
   1e802:	49 f0       	breq	.+18     	; 0x1e816 <vfprintf+0x354>
   1e804:	88 37       	cpi	r24, 0x78	; 120
   1e806:	01 f7       	brne	.-64     	; 0x1e7c8 <vfprintf+0x306>
   1e808:	d4 fe       	sbrs	r13, 4
   1e80a:	02 c0       	rjmp	.+4      	; 0x1e810 <vfprintf+0x34e>
   1e80c:	68 94       	set
   1e80e:	d2 f8       	bld	r13, 2
   1e810:	20 e1       	ldi	r18, 0x10	; 16
   1e812:	30 e0       	ldi	r19, 0x00	; 0
   1e814:	0d c0       	rjmp	.+26     	; 0x1e830 <vfprintf+0x36e>
   1e816:	68 94       	set
   1e818:	d4 f8       	bld	r13, 4
   1e81a:	f6 cf       	rjmp	.-20     	; 0x1e808 <vfprintf+0x346>
   1e81c:	34 fe       	sbrs	r3, 4
   1e81e:	03 c0       	rjmp	.+6      	; 0x1e826 <vfprintf+0x364>
   1e820:	82 2f       	mov	r24, r18
   1e822:	86 60       	ori	r24, 0x06	; 6
   1e824:	d8 2e       	mov	r13, r24
   1e826:	20 e1       	ldi	r18, 0x10	; 16
   1e828:	32 e0       	ldi	r19, 0x02	; 2
   1e82a:	02 c0       	rjmp	.+4      	; 0x1e830 <vfprintf+0x36e>
   1e82c:	28 e0       	ldi	r18, 0x08	; 8
   1e82e:	30 e0       	ldi	r19, 0x00	; 0
   1e830:	f8 01       	movw	r30, r16
   1e832:	d7 fe       	sbrs	r13, 7
   1e834:	0f c0       	rjmp	.+30     	; 0x1e854 <vfprintf+0x392>
   1e836:	60 81       	ld	r22, Z
   1e838:	71 81       	ldd	r23, Z+1	; 0x01
   1e83a:	82 81       	ldd	r24, Z+2	; 0x02
   1e83c:	93 81       	ldd	r25, Z+3	; 0x03
   1e83e:	0c 5f       	subi	r16, 0xFC	; 252
   1e840:	1f 4f       	sbci	r17, 0xFF	; 255
   1e842:	a5 01       	movw	r20, r10
   1e844:	0e 94 cb f9 	call	0x1f396	; 0x1f396 <__ultoa_invert>
   1e848:	c8 2e       	mov	r12, r24
   1e84a:	ca 18       	sub	r12, r10
   1e84c:	3d 2c       	mov	r3, r13
   1e84e:	e8 94       	clt
   1e850:	37 f8       	bld	r3, 7
   1e852:	52 cf       	rjmp	.-348    	; 0x1e6f8 <vfprintf+0x236>
   1e854:	60 81       	ld	r22, Z
   1e856:	71 81       	ldd	r23, Z+1	; 0x01
   1e858:	90 e0       	ldi	r25, 0x00	; 0
   1e85a:	80 e0       	ldi	r24, 0x00	; 0
   1e85c:	0e 5f       	subi	r16, 0xFE	; 254
   1e85e:	1f 4f       	sbci	r17, 0xFF	; 255
   1e860:	f0 cf       	rjmp	.-32     	; 0x1e842 <vfprintf+0x380>
   1e862:	42 fc       	sbrc	r4, 2
   1e864:	02 c0       	rjmp	.+4      	; 0x1e86a <vfprintf+0x3a8>
   1e866:	83 94       	inc	r8
   1e868:	63 cf       	rjmp	.-314    	; 0x1e730 <vfprintf+0x26e>
   1e86a:	83 94       	inc	r8
   1e86c:	83 94       	inc	r8
   1e86e:	60 cf       	rjmp	.-320    	; 0x1e730 <vfprintf+0x26e>
   1e870:	84 2d       	mov	r24, r4
   1e872:	86 78       	andi	r24, 0x86	; 134
   1e874:	09 f4       	brne	.+2      	; 0x1e878 <vfprintf+0x3b6>
   1e876:	5c cf       	rjmp	.-328    	; 0x1e730 <vfprintf+0x26e>
   1e878:	f6 cf       	rjmp	.-20     	; 0x1e866 <vfprintf+0x3a4>
   1e87a:	b7 01       	movw	r22, r14
   1e87c:	80 e2       	ldi	r24, 0x20	; 32
   1e87e:	90 e0       	ldi	r25, 0x00	; 0
   1e880:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e884:	83 94       	inc	r8
   1e886:	82 14       	cp	r8, r2
   1e888:	c0 f3       	brcs	.-16     	; 0x1e87a <vfprintf+0x3b8>
   1e88a:	51 2c       	mov	r5, r1
   1e88c:	5e cf       	rjmp	.-324    	; 0x1e74a <vfprintf+0x288>
   1e88e:	52 2c       	mov	r5, r2
   1e890:	58 18       	sub	r5, r8
   1e892:	82 14       	cp	r8, r2
   1e894:	08 f4       	brcc	.+2      	; 0x1e898 <vfprintf+0x3d6>
   1e896:	59 cf       	rjmp	.-334    	; 0x1e74a <vfprintf+0x288>
   1e898:	f8 cf       	rjmp	.-16     	; 0x1e88a <vfprintf+0x3c8>
   1e89a:	84 2d       	mov	r24, r4
   1e89c:	86 78       	andi	r24, 0x86	; 134
   1e89e:	09 f4       	brne	.+2      	; 0x1e8a2 <vfprintf+0x3e0>
   1e8a0:	66 cf       	rjmp	.-308    	; 0x1e76e <vfprintf+0x2ac>
   1e8a2:	8b e2       	ldi	r24, 0x2B	; 43
   1e8a4:	41 fe       	sbrs	r4, 1
   1e8a6:	80 e2       	ldi	r24, 0x20	; 32
   1e8a8:	47 fc       	sbrc	r4, 7
   1e8aa:	8d e2       	ldi	r24, 0x2D	; 45
   1e8ac:	b7 01       	movw	r22, r14
   1e8ae:	90 e0       	ldi	r25, 0x00	; 0
   1e8b0:	5c cf       	rjmp	.-328    	; 0x1e76a <vfprintf+0x2a8>
   1e8b2:	b7 01       	movw	r22, r14
   1e8b4:	80 e3       	ldi	r24, 0x30	; 48
   1e8b6:	90 e0       	ldi	r25, 0x00	; 0
   1e8b8:	0e 94 9b f9 	call	0x1f336	; 0x1f336 <fputc>
   1e8bc:	9a 94       	dec	r9
   1e8be:	57 cf       	rjmp	.-338    	; 0x1e76e <vfprintf+0x2ac>
   1e8c0:	8f ef       	ldi	r24, 0xFF	; 255
   1e8c2:	9f ef       	ldi	r25, 0xFF	; 255
   1e8c4:	84 cf       	rjmp	.-248    	; 0x1e7ce <vfprintf+0x30c>

0001e8c6 <calloc>:
calloc():
   1e8c6:	0f 93       	push	r16
   1e8c8:	1f 93       	push	r17
   1e8ca:	cf 93       	push	r28
   1e8cc:	df 93       	push	r29
   1e8ce:	86 9f       	mul	r24, r22
   1e8d0:	80 01       	movw	r16, r0
   1e8d2:	87 9f       	mul	r24, r23
   1e8d4:	10 0d       	add	r17, r0
   1e8d6:	96 9f       	mul	r25, r22
   1e8d8:	10 0d       	add	r17, r0
   1e8da:	11 24       	eor	r1, r1
   1e8dc:	c8 01       	movw	r24, r16
   1e8de:	0e 94 f8 f5 	call	0x1ebf0	; 0x1ebf0 <malloc>
   1e8e2:	ec 01       	movw	r28, r24
   1e8e4:	00 97       	sbiw	r24, 0x00	; 0
   1e8e6:	29 f0       	breq	.+10     	; 0x1e8f2 <calloc+0x2c>
   1e8e8:	a8 01       	movw	r20, r16
   1e8ea:	70 e0       	ldi	r23, 0x00	; 0
   1e8ec:	60 e0       	ldi	r22, 0x00	; 0
   1e8ee:	0e 94 79 f9 	call	0x1f2f2	; 0x1f2f2 <memset>
   1e8f2:	ce 01       	movw	r24, r28
   1e8f4:	df 91       	pop	r29
   1e8f6:	cf 91       	pop	r28
   1e8f8:	1f 91       	pop	r17
   1e8fa:	0f 91       	pop	r16
   1e8fc:	08 95       	ret

0001e8fe <dtoa_prf>:
dtoa_prf():
   1e8fe:	8f 92       	push	r8
   1e900:	9f 92       	push	r9
   1e902:	af 92       	push	r10
   1e904:	bf 92       	push	r11
   1e906:	cf 92       	push	r12
   1e908:	df 92       	push	r13
   1e90a:	ef 92       	push	r14
   1e90c:	ff 92       	push	r15
   1e90e:	0f 93       	push	r16
   1e910:	1f 93       	push	r17
   1e912:	cf 93       	push	r28
   1e914:	df 93       	push	r29
   1e916:	00 d0       	rcall	.+0      	; 0x1e918 <dtoa_prf+0x1a>
   1e918:	00 d0       	rcall	.+0      	; 0x1e91a <dtoa_prf+0x1c>
   1e91a:	00 d0       	rcall	.+0      	; 0x1e91c <dtoa_prf+0x1e>
   1e91c:	cd b7       	in	r28, 0x3d	; 61
   1e91e:	de b7       	in	r29, 0x3e	; 62
   1e920:	6a 01       	movw	r12, r20
   1e922:	f2 2e       	mov	r15, r18
   1e924:	b0 2e       	mov	r11, r16
   1e926:	10 2f       	mov	r17, r16
   1e928:	fb e3       	ldi	r31, 0x3B	; 59
   1e92a:	af 2e       	mov	r10, r31
   1e92c:	a0 16       	cp	r10, r16
   1e92e:	08 f4       	brcc	.+2      	; 0x1e932 <dtoa_prf+0x34>
   1e930:	1b e3       	ldi	r17, 0x3B	; 59
   1e932:	1f 5f       	subi	r17, 0xFF	; 255
   1e934:	01 2f       	mov	r16, r17
   1e936:	27 e0       	ldi	r18, 0x07	; 7
   1e938:	ae 01       	movw	r20, r28
   1e93a:	4f 5f       	subi	r20, 0xFF	; 255
   1e93c:	5f 4f       	sbci	r21, 0xFF	; 255
   1e93e:	0e 94 7b f8 	call	0x1f0f6	; 0x1f0f6 <__ftoa_engine>
   1e942:	bc 01       	movw	r22, r24
   1e944:	89 81       	ldd	r24, Y+1	; 0x01
   1e946:	98 2f       	mov	r25, r24
   1e948:	99 70       	andi	r25, 0x09	; 9
   1e94a:	91 30       	cpi	r25, 0x01	; 1
   1e94c:	09 f4       	brne	.+2      	; 0x1e950 <dtoa_prf+0x52>
   1e94e:	4e c0       	rjmp	.+156    	; 0x1e9ec <dtoa_prf+0xee>
   1e950:	9b e2       	ldi	r25, 0x2B	; 43
   1e952:	e1 fc       	sbrc	r14, 1
   1e954:	04 c0       	rjmp	.+8      	; 0x1e95e <dtoa_prf+0x60>
   1e956:	9e 2d       	mov	r25, r14
   1e958:	91 70       	andi	r25, 0x01	; 1
   1e95a:	e0 fc       	sbrc	r14, 0
   1e95c:	49 c0       	rjmp	.+146    	; 0x1e9f0 <dtoa_prf+0xf2>
   1e95e:	5e 2d       	mov	r21, r14
   1e960:	50 71       	andi	r21, 0x10	; 16
   1e962:	e8 2f       	mov	r30, r24
   1e964:	e8 70       	andi	r30, 0x08	; 8
   1e966:	83 ff       	sbrs	r24, 3
   1e968:	55 c0       	rjmp	.+170    	; 0x1ea14 <dtoa_prf+0x116>
   1e96a:	84 e0       	ldi	r24, 0x04	; 4
   1e96c:	91 11       	cpse	r25, r1
   1e96e:	01 c0       	rjmp	.+2      	; 0x1e972 <dtoa_prf+0x74>
   1e970:	83 e0       	ldi	r24, 0x03	; 3
   1e972:	ef 2d       	mov	r30, r15
   1e974:	e8 1b       	sub	r30, r24
   1e976:	8f 15       	cp	r24, r15
   1e978:	08 f0       	brcs	.+2      	; 0x1e97c <dtoa_prf+0x7e>
   1e97a:	e0 e0       	ldi	r30, 0x00	; 0
   1e97c:	d6 01       	movw	r26, r12
   1e97e:	8e 2f       	mov	r24, r30
   1e980:	20 e2       	ldi	r18, 0x20	; 32
   1e982:	55 23       	and	r21, r21
   1e984:	c9 f1       	breq	.+114    	; 0x1e9f8 <dtoa_prf+0xfa>
   1e986:	99 23       	and	r25, r25
   1e988:	29 f0       	breq	.+10     	; 0x1e994 <dtoa_prf+0x96>
   1e98a:	d6 01       	movw	r26, r12
   1e98c:	9c 93       	st	X, r25
   1e98e:	c6 01       	movw	r24, r12
   1e990:	01 96       	adiw	r24, 0x01	; 1
   1e992:	6c 01       	movw	r12, r24
   1e994:	96 01       	movw	r18, r12
   1e996:	2d 5f       	subi	r18, 0xFD	; 253
   1e998:	3f 4f       	sbci	r19, 0xFF	; 255
   1e99a:	e2 fe       	sbrs	r14, 2
   1e99c:	33 c0       	rjmp	.+102    	; 0x1ea04 <dtoa_prf+0x106>
   1e99e:	8e e4       	ldi	r24, 0x4E	; 78
   1e9a0:	d6 01       	movw	r26, r12
   1e9a2:	8c 93       	st	X, r24
   1e9a4:	91 e4       	ldi	r25, 0x41	; 65
   1e9a6:	11 96       	adiw	r26, 0x01	; 1
   1e9a8:	9c 93       	st	X, r25
   1e9aa:	11 97       	sbiw	r26, 0x01	; 1
   1e9ac:	12 96       	adiw	r26, 0x02	; 2
   1e9ae:	8c 93       	st	X, r24
   1e9b0:	d9 01       	movw	r26, r18
   1e9b2:	8e 2f       	mov	r24, r30
   1e9b4:	90 e2       	ldi	r25, 0x20	; 32
   1e9b6:	81 11       	cpse	r24, r1
   1e9b8:	2a c0       	rjmp	.+84     	; 0x1ea0e <dtoa_prf+0x110>
   1e9ba:	e2 0f       	add	r30, r18
   1e9bc:	f3 2f       	mov	r31, r19
   1e9be:	f1 1d       	adc	r31, r1
   1e9c0:	10 82       	st	Z, r1
   1e9c2:	8e ef       	ldi	r24, 0xFE	; 254
   1e9c4:	9f ef       	ldi	r25, 0xFF	; 255
   1e9c6:	29 96       	adiw	r28, 0x09	; 9
   1e9c8:	0f b6       	in	r0, 0x3f	; 63
   1e9ca:	f8 94       	cli
   1e9cc:	de bf       	out	0x3e, r29	; 62
   1e9ce:	0f be       	out	0x3f, r0	; 63
   1e9d0:	cd bf       	out	0x3d, r28	; 61
   1e9d2:	df 91       	pop	r29
   1e9d4:	cf 91       	pop	r28
   1e9d6:	1f 91       	pop	r17
   1e9d8:	0f 91       	pop	r16
   1e9da:	ff 90       	pop	r15
   1e9dc:	ef 90       	pop	r14
   1e9de:	df 90       	pop	r13
   1e9e0:	cf 90       	pop	r12
   1e9e2:	bf 90       	pop	r11
   1e9e4:	af 90       	pop	r10
   1e9e6:	9f 90       	pop	r9
   1e9e8:	8f 90       	pop	r8
   1e9ea:	08 95       	ret
   1e9ec:	9d e2       	ldi	r25, 0x2D	; 45
   1e9ee:	b7 cf       	rjmp	.-146    	; 0x1e95e <dtoa_prf+0x60>
   1e9f0:	90 e2       	ldi	r25, 0x20	; 32
   1e9f2:	b5 cf       	rjmp	.-150    	; 0x1e95e <dtoa_prf+0x60>
   1e9f4:	2d 93       	st	X+, r18
   1e9f6:	81 50       	subi	r24, 0x01	; 1
   1e9f8:	81 11       	cpse	r24, r1
   1e9fa:	fc cf       	rjmp	.-8      	; 0x1e9f4 <dtoa_prf+0xf6>
   1e9fc:	ce 0e       	add	r12, r30
   1e9fe:	d1 1c       	adc	r13, r1
   1ea00:	e0 e0       	ldi	r30, 0x00	; 0
   1ea02:	c1 cf       	rjmp	.-126    	; 0x1e986 <dtoa_prf+0x88>
   1ea04:	8e e6       	ldi	r24, 0x6E	; 110
   1ea06:	d6 01       	movw	r26, r12
   1ea08:	8c 93       	st	X, r24
   1ea0a:	91 e6       	ldi	r25, 0x61	; 97
   1ea0c:	cc cf       	rjmp	.-104    	; 0x1e9a6 <dtoa_prf+0xa8>
   1ea0e:	9d 93       	st	X+, r25
   1ea10:	81 50       	subi	r24, 0x01	; 1
   1ea12:	d1 cf       	rjmp	.-94     	; 0x1e9b6 <dtoa_prf+0xb8>
   1ea14:	48 2f       	mov	r20, r24
   1ea16:	44 70       	andi	r20, 0x04	; 4
   1ea18:	82 ff       	sbrs	r24, 2
   1ea1a:	3d c0       	rjmp	.+122    	; 0x1ea96 <dtoa_prf+0x198>
   1ea1c:	84 e0       	ldi	r24, 0x04	; 4
   1ea1e:	91 11       	cpse	r25, r1
   1ea20:	01 c0       	rjmp	.+2      	; 0x1ea24 <dtoa_prf+0x126>
   1ea22:	83 e0       	ldi	r24, 0x03	; 3
   1ea24:	8f 15       	cp	r24, r15
   1ea26:	10 f4       	brcc	.+4      	; 0x1ea2c <dtoa_prf+0x12e>
   1ea28:	ef 2d       	mov	r30, r15
   1ea2a:	e8 1b       	sub	r30, r24
   1ea2c:	d6 01       	movw	r26, r12
   1ea2e:	8e 2f       	mov	r24, r30
   1ea30:	20 e2       	ldi	r18, 0x20	; 32
   1ea32:	55 23       	and	r21, r21
   1ea34:	09 f1       	breq	.+66     	; 0x1ea78 <dtoa_prf+0x17a>
   1ea36:	99 23       	and	r25, r25
   1ea38:	29 f0       	breq	.+10     	; 0x1ea44 <dtoa_prf+0x146>
   1ea3a:	d6 01       	movw	r26, r12
   1ea3c:	9c 93       	st	X, r25
   1ea3e:	c6 01       	movw	r24, r12
   1ea40:	01 96       	adiw	r24, 0x01	; 1
   1ea42:	6c 01       	movw	r12, r24
   1ea44:	96 01       	movw	r18, r12
   1ea46:	2d 5f       	subi	r18, 0xFD	; 253
   1ea48:	3f 4f       	sbci	r19, 0xFF	; 255
   1ea4a:	e2 fe       	sbrs	r14, 2
   1ea4c:	1b c0       	rjmp	.+54     	; 0x1ea84 <dtoa_prf+0x186>
   1ea4e:	89 e4       	ldi	r24, 0x49	; 73
   1ea50:	d6 01       	movw	r26, r12
   1ea52:	8c 93       	st	X, r24
   1ea54:	8e e4       	ldi	r24, 0x4E	; 78
   1ea56:	11 96       	adiw	r26, 0x01	; 1
   1ea58:	8c 93       	st	X, r24
   1ea5a:	11 97       	sbiw	r26, 0x01	; 1
   1ea5c:	86 e4       	ldi	r24, 0x46	; 70
   1ea5e:	12 96       	adiw	r26, 0x02	; 2
   1ea60:	8c 93       	st	X, r24
   1ea62:	d9 01       	movw	r26, r18
   1ea64:	8e 2f       	mov	r24, r30
   1ea66:	90 e2       	ldi	r25, 0x20	; 32
   1ea68:	88 23       	and	r24, r24
   1ea6a:	09 f4       	brne	.+2      	; 0x1ea6e <dtoa_prf+0x170>
   1ea6c:	a6 cf       	rjmp	.-180    	; 0x1e9ba <dtoa_prf+0xbc>
   1ea6e:	9d 93       	st	X+, r25
   1ea70:	81 50       	subi	r24, 0x01	; 1
   1ea72:	fa cf       	rjmp	.-12     	; 0x1ea68 <dtoa_prf+0x16a>
   1ea74:	2d 93       	st	X+, r18
   1ea76:	81 50       	subi	r24, 0x01	; 1
   1ea78:	81 11       	cpse	r24, r1
   1ea7a:	fc cf       	rjmp	.-8      	; 0x1ea74 <dtoa_prf+0x176>
   1ea7c:	ce 0e       	add	r12, r30
   1ea7e:	d1 1c       	adc	r13, r1
   1ea80:	e0 e0       	ldi	r30, 0x00	; 0
   1ea82:	d9 cf       	rjmp	.-78     	; 0x1ea36 <dtoa_prf+0x138>
   1ea84:	89 e6       	ldi	r24, 0x69	; 105
   1ea86:	d6 01       	movw	r26, r12
   1ea88:	8c 93       	st	X, r24
   1ea8a:	8e e6       	ldi	r24, 0x6E	; 110
   1ea8c:	11 96       	adiw	r26, 0x01	; 1
   1ea8e:	8c 93       	st	X, r24
   1ea90:	11 97       	sbiw	r26, 0x01	; 1
   1ea92:	86 e6       	ldi	r24, 0x66	; 102
   1ea94:	e4 cf       	rjmp	.-56     	; 0x1ea5e <dtoa_prf+0x160>
   1ea96:	9b 01       	movw	r18, r22
   1ea98:	77 ff       	sbrs	r23, 7
   1ea9a:	02 c0       	rjmp	.+4      	; 0x1eaa0 <dtoa_prf+0x1a2>
   1ea9c:	30 e0       	ldi	r19, 0x00	; 0
   1ea9e:	20 e0       	ldi	r18, 0x00	; 0
   1eaa0:	a1 e0       	ldi	r26, 0x01	; 1
   1eaa2:	b0 e0       	ldi	r27, 0x00	; 0
   1eaa4:	91 11       	cpse	r25, r1
   1eaa6:	02 c0       	rjmp	.+4      	; 0x1eaac <dtoa_prf+0x1ae>
   1eaa8:	b0 e0       	ldi	r27, 0x00	; 0
   1eaaa:	a0 e0       	ldi	r26, 0x00	; 0
   1eaac:	f9 01       	movw	r30, r18
   1eaae:	31 96       	adiw	r30, 0x01	; 1
   1eab0:	ae 0f       	add	r26, r30
   1eab2:	bf 1f       	adc	r27, r31
   1eab4:	8b 2c       	mov	r8, r11
   1eab6:	91 2c       	mov	r9, r1
   1eab8:	bb 20       	and	r11, r11
   1eaba:	09 f4       	brne	.+2      	; 0x1eabe <dtoa_prf+0x1c0>
   1eabc:	61 c0       	rjmp	.+194    	; 0x1eb80 <dtoa_prf+0x282>
   1eabe:	54 01       	movw	r10, r8
   1eac0:	ef ef       	ldi	r30, 0xFF	; 255
   1eac2:	ae 1a       	sub	r10, r30
   1eac4:	be 0a       	sbc	r11, r30
   1eac6:	aa 0d       	add	r26, r10
   1eac8:	bb 1d       	adc	r27, r11
   1eaca:	fa 16       	cp	r15, r26
   1eacc:	1b 06       	cpc	r1, r27
   1eace:	19 f0       	breq	.+6      	; 0x1ead6 <dtoa_prf+0x1d8>
   1ead0:	14 f0       	brlt	.+4      	; 0x1ead6 <dtoa_prf+0x1d8>
   1ead2:	4f 2d       	mov	r20, r15
   1ead4:	4a 1b       	sub	r20, r26
   1ead6:	51 11       	cpse	r21, r1
   1ead8:	88 c0       	rjmp	.+272    	; 0x1ebea <dtoa_prf+0x2ec>
   1eada:	e3 fc       	sbrc	r14, 3
   1eadc:	59 c0       	rjmp	.+178    	; 0x1eb90 <dtoa_prf+0x292>
   1eade:	76 01       	movw	r14, r12
   1eae0:	a4 2f       	mov	r26, r20
   1eae2:	b0 e2       	ldi	r27, 0x20	; 32
   1eae4:	a1 11       	cpse	r26, r1
   1eae6:	4f c0       	rjmp	.+158    	; 0x1eb86 <dtoa_prf+0x288>
   1eae8:	c4 0e       	add	r12, r20
   1eaea:	d1 1c       	adc	r13, r1
   1eaec:	99 23       	and	r25, r25
   1eaee:	09 f4       	brne	.+2      	; 0x1eaf2 <dtoa_prf+0x1f4>
   1eaf0:	5b c0       	rjmp	.+182    	; 0x1eba8 <dtoa_prf+0x2aa>
   1eaf2:	40 e0       	ldi	r20, 0x00	; 0
   1eaf4:	d6 01       	movw	r26, r12
   1eaf6:	11 96       	adiw	r26, 0x01	; 1
   1eaf8:	f6 01       	movw	r30, r12
   1eafa:	90 83       	st	Z, r25
   1eafc:	6d 01       	movw	r12, r26
   1eafe:	55 23       	and	r21, r21
   1eb00:	09 f4       	brne	.+2      	; 0x1eb04 <dtoa_prf+0x206>
   1eb02:	48 c0       	rjmp	.+144    	; 0x1eb94 <dtoa_prf+0x296>
   1eb04:	01 2f       	mov	r16, r17
   1eb06:	06 0f       	add	r16, r22
   1eb08:	9a 81       	ldd	r25, Y+2	; 0x02
   1eb0a:	58 2f       	mov	r21, r24
   1eb0c:	50 71       	andi	r21, 0x10	; 16
   1eb0e:	84 ff       	sbrs	r24, 4
   1eb10:	03 c0       	rjmp	.+6      	; 0x1eb18 <dtoa_prf+0x21a>
   1eb12:	91 33       	cpi	r25, 0x31	; 49
   1eb14:	09 f4       	brne	.+2      	; 0x1eb18 <dtoa_prf+0x21a>
   1eb16:	01 50       	subi	r16, 0x01	; 1
   1eb18:	10 16       	cp	r1, r16
   1eb1a:	0c f0       	brlt	.+2      	; 0x1eb1e <dtoa_prf+0x220>
   1eb1c:	47 c0       	rjmp	.+142    	; 0x1ebac <dtoa_prf+0x2ae>
   1eb1e:	09 30       	cpi	r16, 0x09	; 9
   1eb20:	08 f0       	brcs	.+2      	; 0x1eb24 <dtoa_prf+0x226>
   1eb22:	08 e0       	ldi	r16, 0x08	; 8
   1eb24:	ee e2       	ldi	r30, 0x2E	; 46
   1eb26:	fe 2e       	mov	r15, r30
   1eb28:	5b 01       	movw	r10, r22
   1eb2a:	a0 1a       	sub	r10, r16
   1eb2c:	b1 08       	sbc	r11, r1
   1eb2e:	85 01       	movw	r16, r10
   1eb30:	91 94       	neg	r9
   1eb32:	81 94       	neg	r8
   1eb34:	91 08       	sbc	r9, r1
   1eb36:	2f 3f       	cpi	r18, 0xFF	; 255
   1eb38:	32 07       	cpc	r19, r18
   1eb3a:	29 f4       	brne	.+10     	; 0x1eb46 <dtoa_prf+0x248>
   1eb3c:	d6 01       	movw	r26, r12
   1eb3e:	fc 92       	st	X, r15
   1eb40:	f6 01       	movw	r30, r12
   1eb42:	31 96       	adiw	r30, 0x01	; 1
   1eb44:	6f 01       	movw	r12, r30
   1eb46:	62 17       	cp	r22, r18
   1eb48:	73 07       	cpc	r23, r19
   1eb4a:	94 f1       	brlt	.+100    	; 0x1ebb0 <dtoa_prf+0x2b2>
   1eb4c:	02 17       	cp	r16, r18
   1eb4e:	13 07       	cpc	r17, r19
   1eb50:	7c f5       	brge	.+94     	; 0x1ebb0 <dtoa_prf+0x2b2>
   1eb52:	db 01       	movw	r26, r22
   1eb54:	a2 1b       	sub	r26, r18
   1eb56:	b3 0b       	sbc	r27, r19
   1eb58:	aa 24       	eor	r10, r10
   1eb5a:	a3 94       	inc	r10
   1eb5c:	b1 2c       	mov	r11, r1
   1eb5e:	ac 0e       	add	r10, r28
   1eb60:	bd 1e       	adc	r11, r29
   1eb62:	aa 0d       	add	r26, r10
   1eb64:	bb 1d       	adc	r27, r11
   1eb66:	11 96       	adiw	r26, 0x01	; 1
   1eb68:	8c 91       	ld	r24, X
   1eb6a:	21 50       	subi	r18, 0x01	; 1
   1eb6c:	31 09       	sbc	r19, r1
   1eb6e:	d6 01       	movw	r26, r12
   1eb70:	11 96       	adiw	r26, 0x01	; 1
   1eb72:	28 15       	cp	r18, r8
   1eb74:	39 05       	cpc	r19, r9
   1eb76:	f4 f0       	brlt	.+60     	; 0x1ebb4 <dtoa_prf+0x2b6>
   1eb78:	f6 01       	movw	r30, r12
   1eb7a:	80 83       	st	Z, r24
   1eb7c:	6d 01       	movw	r12, r26
   1eb7e:	db cf       	rjmp	.-74     	; 0x1eb36 <dtoa_prf+0x238>
   1eb80:	b1 2c       	mov	r11, r1
   1eb82:	a1 2c       	mov	r10, r1
   1eb84:	a0 cf       	rjmp	.-192    	; 0x1eac6 <dtoa_prf+0x1c8>
   1eb86:	f7 01       	movw	r30, r14
   1eb88:	b1 93       	st	Z+, r27
   1eb8a:	7f 01       	movw	r14, r30
   1eb8c:	a1 50       	subi	r26, 0x01	; 1
   1eb8e:	aa cf       	rjmp	.-172    	; 0x1eae4 <dtoa_prf+0x1e6>
   1eb90:	91 11       	cpse	r25, r1
   1eb92:	b0 cf       	rjmp	.-160    	; 0x1eaf4 <dtoa_prf+0x1f6>
   1eb94:	d6 01       	movw	r26, r12
   1eb96:	94 2f       	mov	r25, r20
   1eb98:	50 e3       	ldi	r21, 0x30	; 48
   1eb9a:	02 c0       	rjmp	.+4      	; 0x1eba0 <dtoa_prf+0x2a2>
   1eb9c:	5d 93       	st	X+, r21
   1eb9e:	91 50       	subi	r25, 0x01	; 1
   1eba0:	91 11       	cpse	r25, r1
   1eba2:	fc cf       	rjmp	.-8      	; 0x1eb9c <dtoa_prf+0x29e>
   1eba4:	c4 0e       	add	r12, r20
   1eba6:	d1 1c       	adc	r13, r1
   1eba8:	40 e0       	ldi	r20, 0x00	; 0
   1ebaa:	ac cf       	rjmp	.-168    	; 0x1eb04 <dtoa_prf+0x206>
   1ebac:	01 e0       	ldi	r16, 0x01	; 1
   1ebae:	ba cf       	rjmp	.-140    	; 0x1eb24 <dtoa_prf+0x226>
   1ebb0:	80 e3       	ldi	r24, 0x30	; 48
   1ebb2:	db cf       	rjmp	.-74     	; 0x1eb6a <dtoa_prf+0x26c>
   1ebb4:	62 17       	cp	r22, r18
   1ebb6:	73 07       	cpc	r23, r19
   1ebb8:	31 f4       	brne	.+12     	; 0x1ebc6 <dtoa_prf+0x2c8>
   1ebba:	96 33       	cpi	r25, 0x36	; 54
   1ebbc:	88 f4       	brcc	.+34     	; 0x1ebe0 <dtoa_prf+0x2e2>
   1ebbe:	95 33       	cpi	r25, 0x35	; 53
   1ebc0:	11 f4       	brne	.+4      	; 0x1ebc6 <dtoa_prf+0x2c8>
   1ebc2:	55 23       	and	r21, r21
   1ebc4:	69 f0       	breq	.+26     	; 0x1ebe0 <dtoa_prf+0x2e2>
   1ebc6:	f6 01       	movw	r30, r12
   1ebc8:	80 83       	st	Z, r24
   1ebca:	fd 01       	movw	r30, r26
   1ebcc:	84 2f       	mov	r24, r20
   1ebce:	90 e2       	ldi	r25, 0x20	; 32
   1ebd0:	81 11       	cpse	r24, r1
   1ebd2:	08 c0       	rjmp	.+16     	; 0x1ebe4 <dtoa_prf+0x2e6>
   1ebd4:	a4 0f       	add	r26, r20
   1ebd6:	b1 1d       	adc	r27, r1
   1ebd8:	1c 92       	st	X, r1
   1ebda:	90 e0       	ldi	r25, 0x00	; 0
   1ebdc:	80 e0       	ldi	r24, 0x00	; 0
   1ebde:	f3 ce       	rjmp	.-538    	; 0x1e9c6 <dtoa_prf+0xc8>
   1ebe0:	81 e3       	ldi	r24, 0x31	; 49
   1ebe2:	f1 cf       	rjmp	.-30     	; 0x1ebc6 <dtoa_prf+0x2c8>
   1ebe4:	91 93       	st	Z+, r25
   1ebe6:	81 50       	subi	r24, 0x01	; 1
   1ebe8:	f3 cf       	rjmp	.-26     	; 0x1ebd0 <dtoa_prf+0x2d2>
   1ebea:	91 11       	cpse	r25, r1
   1ebec:	83 cf       	rjmp	.-250    	; 0x1eaf4 <dtoa_prf+0x1f6>
   1ebee:	8a cf       	rjmp	.-236    	; 0x1eb04 <dtoa_prf+0x206>

0001ebf0 <malloc>:
malloc():
   1ebf0:	0f 93       	push	r16
   1ebf2:	1f 93       	push	r17
   1ebf4:	cf 93       	push	r28
   1ebf6:	df 93       	push	r29
   1ebf8:	82 30       	cpi	r24, 0x02	; 2
   1ebfa:	91 05       	cpc	r25, r1
   1ebfc:	10 f4       	brcc	.+4      	; 0x1ec02 <malloc+0x12>
   1ebfe:	82 e0       	ldi	r24, 0x02	; 2
   1ec00:	90 e0       	ldi	r25, 0x00	; 0
   1ec02:	e0 91 1f 14 	lds	r30, 0x141F	; 0x80141f <__flp>
   1ec06:	f0 91 20 14 	lds	r31, 0x1420	; 0x801420 <__flp+0x1>
   1ec0a:	30 e0       	ldi	r19, 0x00	; 0
   1ec0c:	20 e0       	ldi	r18, 0x00	; 0
   1ec0e:	b0 e0       	ldi	r27, 0x00	; 0
   1ec10:	a0 e0       	ldi	r26, 0x00	; 0
   1ec12:	30 97       	sbiw	r30, 0x00	; 0
   1ec14:	99 f4       	brne	.+38     	; 0x1ec3c <malloc+0x4c>
   1ec16:	21 15       	cp	r18, r1
   1ec18:	31 05       	cpc	r19, r1
   1ec1a:	09 f4       	brne	.+2      	; 0x1ec1e <malloc+0x2e>
   1ec1c:	4a c0       	rjmp	.+148    	; 0x1ecb2 <malloc+0xc2>
   1ec1e:	28 1b       	sub	r18, r24
   1ec20:	39 0b       	sbc	r19, r25
   1ec22:	24 30       	cpi	r18, 0x04	; 4
   1ec24:	31 05       	cpc	r19, r1
   1ec26:	d8 f5       	brcc	.+118    	; 0x1ec9e <malloc+0xae>
   1ec28:	8a 81       	ldd	r24, Y+2	; 0x02
   1ec2a:	9b 81       	ldd	r25, Y+3	; 0x03
   1ec2c:	61 15       	cp	r22, r1
   1ec2e:	71 05       	cpc	r23, r1
   1ec30:	89 f1       	breq	.+98     	; 0x1ec94 <malloc+0xa4>
   1ec32:	fb 01       	movw	r30, r22
   1ec34:	93 83       	std	Z+3, r25	; 0x03
   1ec36:	82 83       	std	Z+2, r24	; 0x02
   1ec38:	fe 01       	movw	r30, r28
   1ec3a:	11 c0       	rjmp	.+34     	; 0x1ec5e <malloc+0x6e>
   1ec3c:	40 81       	ld	r20, Z
   1ec3e:	51 81       	ldd	r21, Z+1	; 0x01
   1ec40:	02 81       	ldd	r16, Z+2	; 0x02
   1ec42:	13 81       	ldd	r17, Z+3	; 0x03
   1ec44:	48 17       	cp	r20, r24
   1ec46:	59 07       	cpc	r21, r25
   1ec48:	e0 f0       	brcs	.+56     	; 0x1ec82 <malloc+0x92>
   1ec4a:	48 17       	cp	r20, r24
   1ec4c:	59 07       	cpc	r21, r25
   1ec4e:	99 f4       	brne	.+38     	; 0x1ec76 <malloc+0x86>
   1ec50:	10 97       	sbiw	r26, 0x00	; 0
   1ec52:	61 f0       	breq	.+24     	; 0x1ec6c <malloc+0x7c>
   1ec54:	12 96       	adiw	r26, 0x02	; 2
   1ec56:	0c 93       	st	X, r16
   1ec58:	12 97       	sbiw	r26, 0x02	; 2
   1ec5a:	13 96       	adiw	r26, 0x03	; 3
   1ec5c:	1c 93       	st	X, r17
   1ec5e:	32 96       	adiw	r30, 0x02	; 2
   1ec60:	cf 01       	movw	r24, r30
   1ec62:	df 91       	pop	r29
   1ec64:	cf 91       	pop	r28
   1ec66:	1f 91       	pop	r17
   1ec68:	0f 91       	pop	r16
   1ec6a:	08 95       	ret
   1ec6c:	00 93 1f 14 	sts	0x141F, r16	; 0x80141f <__flp>
   1ec70:	10 93 20 14 	sts	0x1420, r17	; 0x801420 <__flp+0x1>
   1ec74:	f4 cf       	rjmp	.-24     	; 0x1ec5e <malloc+0x6e>
   1ec76:	21 15       	cp	r18, r1
   1ec78:	31 05       	cpc	r19, r1
   1ec7a:	51 f0       	breq	.+20     	; 0x1ec90 <malloc+0xa0>
   1ec7c:	42 17       	cp	r20, r18
   1ec7e:	53 07       	cpc	r21, r19
   1ec80:	38 f0       	brcs	.+14     	; 0x1ec90 <malloc+0xa0>
   1ec82:	a9 01       	movw	r20, r18
   1ec84:	db 01       	movw	r26, r22
   1ec86:	9a 01       	movw	r18, r20
   1ec88:	bd 01       	movw	r22, r26
   1ec8a:	df 01       	movw	r26, r30
   1ec8c:	f8 01       	movw	r30, r16
   1ec8e:	c1 cf       	rjmp	.-126    	; 0x1ec12 <malloc+0x22>
   1ec90:	ef 01       	movw	r28, r30
   1ec92:	f9 cf       	rjmp	.-14     	; 0x1ec86 <malloc+0x96>
   1ec94:	90 93 20 14 	sts	0x1420, r25	; 0x801420 <__flp+0x1>
   1ec98:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <__flp>
   1ec9c:	cd cf       	rjmp	.-102    	; 0x1ec38 <malloc+0x48>
   1ec9e:	fe 01       	movw	r30, r28
   1eca0:	e2 0f       	add	r30, r18
   1eca2:	f3 1f       	adc	r31, r19
   1eca4:	81 93       	st	Z+, r24
   1eca6:	91 93       	st	Z+, r25
   1eca8:	22 50       	subi	r18, 0x02	; 2
   1ecaa:	31 09       	sbc	r19, r1
   1ecac:	39 83       	std	Y+1, r19	; 0x01
   1ecae:	28 83       	st	Y, r18
   1ecb0:	d7 cf       	rjmp	.-82     	; 0x1ec60 <malloc+0x70>
   1ecb2:	20 91 1d 14 	lds	r18, 0x141D	; 0x80141d <__brkval>
   1ecb6:	30 91 1e 14 	lds	r19, 0x141E	; 0x80141e <__brkval+0x1>
   1ecba:	23 2b       	or	r18, r19
   1ecbc:	41 f4       	brne	.+16     	; 0x1ecce <malloc+0xde>
   1ecbe:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__malloc_heap_start>
   1ecc2:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__malloc_heap_start+0x1>
   1ecc6:	30 93 1e 14 	sts	0x141E, r19	; 0x80141e <__brkval+0x1>
   1ecca:	20 93 1d 14 	sts	0x141D, r18	; 0x80141d <__brkval>
   1ecce:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_end>
   1ecd2:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1ecd6:	21 15       	cp	r18, r1
   1ecd8:	31 05       	cpc	r19, r1
   1ecda:	41 f4       	brne	.+16     	; 0x1ecec <malloc+0xfc>
   1ecdc:	2d b7       	in	r18, 0x3d	; 61
   1ecde:	3e b7       	in	r19, 0x3e	; 62
   1ece0:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1ece4:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1ece8:	24 1b       	sub	r18, r20
   1ecea:	35 0b       	sbc	r19, r21
   1ecec:	e0 91 1d 14 	lds	r30, 0x141D	; 0x80141d <__brkval>
   1ecf0:	f0 91 1e 14 	lds	r31, 0x141E	; 0x80141e <__brkval+0x1>
   1ecf4:	e2 17       	cp	r30, r18
   1ecf6:	f3 07       	cpc	r31, r19
   1ecf8:	a0 f4       	brcc	.+40     	; 0x1ed22 <malloc+0x132>
   1ecfa:	2e 1b       	sub	r18, r30
   1ecfc:	3f 0b       	sbc	r19, r31
   1ecfe:	28 17       	cp	r18, r24
   1ed00:	39 07       	cpc	r19, r25
   1ed02:	78 f0       	brcs	.+30     	; 0x1ed22 <malloc+0x132>
   1ed04:	ac 01       	movw	r20, r24
   1ed06:	4e 5f       	subi	r20, 0xFE	; 254
   1ed08:	5f 4f       	sbci	r21, 0xFF	; 255
   1ed0a:	24 17       	cp	r18, r20
   1ed0c:	35 07       	cpc	r19, r21
   1ed0e:	48 f0       	brcs	.+18     	; 0x1ed22 <malloc+0x132>
   1ed10:	4e 0f       	add	r20, r30
   1ed12:	5f 1f       	adc	r21, r31
   1ed14:	50 93 1e 14 	sts	0x141E, r21	; 0x80141e <__brkval+0x1>
   1ed18:	40 93 1d 14 	sts	0x141D, r20	; 0x80141d <__brkval>
   1ed1c:	81 93       	st	Z+, r24
   1ed1e:	91 93       	st	Z+, r25
   1ed20:	9f cf       	rjmp	.-194    	; 0x1ec60 <malloc+0x70>
   1ed22:	f0 e0       	ldi	r31, 0x00	; 0
   1ed24:	e0 e0       	ldi	r30, 0x00	; 0
   1ed26:	9c cf       	rjmp	.-200    	; 0x1ec60 <malloc+0x70>

0001ed28 <free>:
free():
   1ed28:	cf 93       	push	r28
   1ed2a:	df 93       	push	r29
   1ed2c:	00 97       	sbiw	r24, 0x00	; 0
   1ed2e:	e9 f0       	breq	.+58     	; 0x1ed6a <free+0x42>
   1ed30:	fc 01       	movw	r30, r24
   1ed32:	32 97       	sbiw	r30, 0x02	; 2
   1ed34:	13 82       	std	Z+3, r1	; 0x03
   1ed36:	12 82       	std	Z+2, r1	; 0x02
   1ed38:	a0 91 1f 14 	lds	r26, 0x141F	; 0x80141f <__flp>
   1ed3c:	b0 91 20 14 	lds	r27, 0x1420	; 0x801420 <__flp+0x1>
   1ed40:	ed 01       	movw	r28, r26
   1ed42:	30 e0       	ldi	r19, 0x00	; 0
   1ed44:	20 e0       	ldi	r18, 0x00	; 0
   1ed46:	10 97       	sbiw	r26, 0x00	; 0
   1ed48:	a1 f4       	brne	.+40     	; 0x1ed72 <free+0x4a>
   1ed4a:	20 81       	ld	r18, Z
   1ed4c:	31 81       	ldd	r19, Z+1	; 0x01
   1ed4e:	82 0f       	add	r24, r18
   1ed50:	93 1f       	adc	r25, r19
   1ed52:	20 91 1d 14 	lds	r18, 0x141D	; 0x80141d <__brkval>
   1ed56:	30 91 1e 14 	lds	r19, 0x141E	; 0x80141e <__brkval+0x1>
   1ed5a:	28 17       	cp	r18, r24
   1ed5c:	39 07       	cpc	r19, r25
   1ed5e:	09 f0       	breq	.+2      	; 0x1ed62 <free+0x3a>
   1ed60:	61 c0       	rjmp	.+194    	; 0x1ee24 <free+0xfc>
   1ed62:	f0 93 1e 14 	sts	0x141E, r31	; 0x80141e <__brkval+0x1>
   1ed66:	e0 93 1d 14 	sts	0x141D, r30	; 0x80141d <__brkval>
   1ed6a:	df 91       	pop	r29
   1ed6c:	cf 91       	pop	r28
   1ed6e:	08 95       	ret
   1ed70:	ea 01       	movw	r28, r20
   1ed72:	ce 17       	cp	r28, r30
   1ed74:	df 07       	cpc	r29, r31
   1ed76:	e8 f5       	brcc	.+122    	; 0x1edf2 <free+0xca>
   1ed78:	4a 81       	ldd	r20, Y+2	; 0x02
   1ed7a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ed7c:	9e 01       	movw	r18, r28
   1ed7e:	41 15       	cp	r20, r1
   1ed80:	51 05       	cpc	r21, r1
   1ed82:	b1 f7       	brne	.-20     	; 0x1ed70 <free+0x48>
   1ed84:	e9 01       	movw	r28, r18
   1ed86:	fb 83       	std	Y+3, r31	; 0x03
   1ed88:	ea 83       	std	Y+2, r30	; 0x02
   1ed8a:	49 91       	ld	r20, Y+
   1ed8c:	59 91       	ld	r21, Y+
   1ed8e:	c4 0f       	add	r28, r20
   1ed90:	d5 1f       	adc	r29, r21
   1ed92:	ec 17       	cp	r30, r28
   1ed94:	fd 07       	cpc	r31, r29
   1ed96:	61 f4       	brne	.+24     	; 0x1edb0 <free+0x88>
   1ed98:	80 81       	ld	r24, Z
   1ed9a:	91 81       	ldd	r25, Z+1	; 0x01
   1ed9c:	02 96       	adiw	r24, 0x02	; 2
   1ed9e:	84 0f       	add	r24, r20
   1eda0:	95 1f       	adc	r25, r21
   1eda2:	e9 01       	movw	r28, r18
   1eda4:	99 83       	std	Y+1, r25	; 0x01
   1eda6:	88 83       	st	Y, r24
   1eda8:	82 81       	ldd	r24, Z+2	; 0x02
   1edaa:	93 81       	ldd	r25, Z+3	; 0x03
   1edac:	9b 83       	std	Y+3, r25	; 0x03
   1edae:	8a 83       	std	Y+2, r24	; 0x02
   1edb0:	f0 e0       	ldi	r31, 0x00	; 0
   1edb2:	e0 e0       	ldi	r30, 0x00	; 0
   1edb4:	12 96       	adiw	r26, 0x02	; 2
   1edb6:	8d 91       	ld	r24, X+
   1edb8:	9c 91       	ld	r25, X
   1edba:	13 97       	sbiw	r26, 0x03	; 3
   1edbc:	00 97       	sbiw	r24, 0x00	; 0
   1edbe:	b9 f5       	brne	.+110    	; 0x1ee2e <free+0x106>
   1edc0:	2d 91       	ld	r18, X+
   1edc2:	3c 91       	ld	r19, X
   1edc4:	11 97       	sbiw	r26, 0x01	; 1
   1edc6:	cd 01       	movw	r24, r26
   1edc8:	02 96       	adiw	r24, 0x02	; 2
   1edca:	82 0f       	add	r24, r18
   1edcc:	93 1f       	adc	r25, r19
   1edce:	20 91 1d 14 	lds	r18, 0x141D	; 0x80141d <__brkval>
   1edd2:	30 91 1e 14 	lds	r19, 0x141E	; 0x80141e <__brkval+0x1>
   1edd6:	28 17       	cp	r18, r24
   1edd8:	39 07       	cpc	r19, r25
   1edda:	39 f6       	brne	.-114    	; 0x1ed6a <free+0x42>
   1eddc:	30 97       	sbiw	r30, 0x00	; 0
   1edde:	51 f5       	brne	.+84     	; 0x1ee34 <free+0x10c>
   1ede0:	10 92 20 14 	sts	0x1420, r1	; 0x801420 <__flp+0x1>
   1ede4:	10 92 1f 14 	sts	0x141F, r1	; 0x80141f <__flp>
   1ede8:	b0 93 1e 14 	sts	0x141E, r27	; 0x80141e <__brkval+0x1>
   1edec:	a0 93 1d 14 	sts	0x141D, r26	; 0x80141d <__brkval>
   1edf0:	bc cf       	rjmp	.-136    	; 0x1ed6a <free+0x42>
   1edf2:	d3 83       	std	Z+3, r29	; 0x03
   1edf4:	c2 83       	std	Z+2, r28	; 0x02
   1edf6:	40 81       	ld	r20, Z
   1edf8:	51 81       	ldd	r21, Z+1	; 0x01
   1edfa:	84 0f       	add	r24, r20
   1edfc:	95 1f       	adc	r25, r21
   1edfe:	c8 17       	cp	r28, r24
   1ee00:	d9 07       	cpc	r29, r25
   1ee02:	61 f4       	brne	.+24     	; 0x1ee1c <free+0xf4>
   1ee04:	4e 5f       	subi	r20, 0xFE	; 254
   1ee06:	5f 4f       	sbci	r21, 0xFF	; 255
   1ee08:	88 81       	ld	r24, Y
   1ee0a:	99 81       	ldd	r25, Y+1	; 0x01
   1ee0c:	48 0f       	add	r20, r24
   1ee0e:	59 1f       	adc	r21, r25
   1ee10:	51 83       	std	Z+1, r21	; 0x01
   1ee12:	40 83       	st	Z, r20
   1ee14:	8a 81       	ldd	r24, Y+2	; 0x02
   1ee16:	9b 81       	ldd	r25, Y+3	; 0x03
   1ee18:	93 83       	std	Z+3, r25	; 0x03
   1ee1a:	82 83       	std	Z+2, r24	; 0x02
   1ee1c:	21 15       	cp	r18, r1
   1ee1e:	31 05       	cpc	r19, r1
   1ee20:	09 f0       	breq	.+2      	; 0x1ee24 <free+0xfc>
   1ee22:	b0 cf       	rjmp	.-160    	; 0x1ed84 <free+0x5c>
   1ee24:	f0 93 20 14 	sts	0x1420, r31	; 0x801420 <__flp+0x1>
   1ee28:	e0 93 1f 14 	sts	0x141F, r30	; 0x80141f <__flp>
   1ee2c:	9e cf       	rjmp	.-196    	; 0x1ed6a <free+0x42>
   1ee2e:	fd 01       	movw	r30, r26
   1ee30:	dc 01       	movw	r26, r24
   1ee32:	c0 cf       	rjmp	.-128    	; 0x1edb4 <free+0x8c>
   1ee34:	13 82       	std	Z+3, r1	; 0x03
   1ee36:	12 82       	std	Z+2, r1	; 0x02
   1ee38:	d7 cf       	rjmp	.-82     	; 0x1ede8 <free+0xc0>

0001ee3a <strtod>:
strtod():
   1ee3a:	8f 92       	push	r8
   1ee3c:	9f 92       	push	r9
   1ee3e:	af 92       	push	r10
   1ee40:	bf 92       	push	r11
   1ee42:	cf 92       	push	r12
   1ee44:	df 92       	push	r13
   1ee46:	ef 92       	push	r14
   1ee48:	ff 92       	push	r15
   1ee4a:	0f 93       	push	r16
   1ee4c:	1f 93       	push	r17
   1ee4e:	cf 93       	push	r28
   1ee50:	df 93       	push	r29
   1ee52:	5c 01       	movw	r10, r24
   1ee54:	7b 01       	movw	r14, r22
   1ee56:	61 15       	cp	r22, r1
   1ee58:	71 05       	cpc	r23, r1
   1ee5a:	19 f0       	breq	.+6      	; 0x1ee62 <strtod+0x28>
   1ee5c:	db 01       	movw	r26, r22
   1ee5e:	8d 93       	st	X+, r24
   1ee60:	9c 93       	st	X, r25
   1ee62:	85 01       	movw	r16, r10
   1ee64:	0f 5f       	subi	r16, 0xFF	; 255
   1ee66:	1f 4f       	sbci	r17, 0xFF	; 255
   1ee68:	f5 01       	movw	r30, r10
   1ee6a:	d0 81       	ld	r29, Z
   1ee6c:	8d 2f       	mov	r24, r29
   1ee6e:	90 e0       	ldi	r25, 0x00	; 0
   1ee70:	0e 94 71 f1 	call	0x1e2e2	; 0x1e2e2 <isspace>
   1ee74:	6c 01       	movw	r12, r24
   1ee76:	89 2b       	or	r24, r25
   1ee78:	b9 f5       	brne	.+110    	; 0x1eee8 <strtod+0xae>
   1ee7a:	dd 32       	cpi	r29, 0x2D	; 45
   1ee7c:	b9 f5       	brne	.+110    	; 0x1eeec <strtod+0xb2>
   1ee7e:	0f 5f       	subi	r16, 0xFF	; 255
   1ee80:	1f 4f       	sbci	r17, 0xFF	; 255
   1ee82:	d5 01       	movw	r26, r10
   1ee84:	11 96       	adiw	r26, 0x01	; 1
   1ee86:	dc 91       	ld	r29, X
   1ee88:	c1 e0       	ldi	r28, 0x01	; 1
   1ee8a:	58 01       	movw	r10, r16
   1ee8c:	f1 e0       	ldi	r31, 0x01	; 1
   1ee8e:	af 1a       	sub	r10, r31
   1ee90:	b1 08       	sbc	r11, r1
   1ee92:	43 e0       	ldi	r20, 0x03	; 3
   1ee94:	50 e0       	ldi	r21, 0x00	; 0
   1ee96:	60 e9       	ldi	r22, 0x90	; 144
   1ee98:	74 e0       	ldi	r23, 0x04	; 4
   1ee9a:	c5 01       	movw	r24, r10
   1ee9c:	0e 94 56 f9 	call	0x1f2ac	; 0x1f2ac <strncasecmp_P>
   1eea0:	89 2b       	or	r24, r25
   1eea2:	69 f5       	brne	.+90     	; 0x1eefe <strtod+0xc4>
   1eea4:	68 01       	movw	r12, r16
   1eea6:	82 e0       	ldi	r24, 0x02	; 2
   1eea8:	c8 0e       	add	r12, r24
   1eeaa:	d1 1c       	adc	r13, r1
   1eeac:	45 e0       	ldi	r20, 0x05	; 5
   1eeae:	50 e0       	ldi	r21, 0x00	; 0
   1eeb0:	6b e8       	ldi	r22, 0x8B	; 139
   1eeb2:	74 e0       	ldi	r23, 0x04	; 4
   1eeb4:	c6 01       	movw	r24, r12
   1eeb6:	0e 94 56 f9 	call	0x1f2ac	; 0x1f2ac <strncasecmp_P>
   1eeba:	89 2b       	or	r24, r25
   1eebc:	21 f4       	brne	.+8      	; 0x1eec6 <strtod+0x8c>
   1eebe:	68 01       	movw	r12, r16
   1eec0:	97 e0       	ldi	r25, 0x07	; 7
   1eec2:	c9 0e       	add	r12, r25
   1eec4:	d1 1c       	adc	r13, r1
   1eec6:	e1 14       	cp	r14, r1
   1eec8:	f1 04       	cpc	r15, r1
   1eeca:	19 f0       	breq	.+6      	; 0x1eed2 <strtod+0x98>
   1eecc:	d7 01       	movw	r26, r14
   1eece:	cd 92       	st	X+, r12
   1eed0:	dc 92       	st	X, r13
   1eed2:	60 e0       	ldi	r22, 0x00	; 0
   1eed4:	70 e0       	ldi	r23, 0x00	; 0
   1eed6:	80 e8       	ldi	r24, 0x80	; 128
   1eed8:	9f ef       	ldi	r25, 0xFF	; 255
   1eeda:	c1 11       	cpse	r28, r1
   1eedc:	ff c0       	rjmp	.+510    	; 0x1f0dc <strtod+0x2a2>
   1eede:	60 e0       	ldi	r22, 0x00	; 0
   1eee0:	70 e0       	ldi	r23, 0x00	; 0
   1eee2:	80 e8       	ldi	r24, 0x80	; 128
   1eee4:	9f e7       	ldi	r25, 0x7F	; 127
   1eee6:	fa c0       	rjmp	.+500    	; 0x1f0dc <strtod+0x2a2>
   1eee8:	58 01       	movw	r10, r16
   1eeea:	bb cf       	rjmp	.-138    	; 0x1ee62 <strtod+0x28>
   1eeec:	db 32       	cpi	r29, 0x2B	; 43
   1eeee:	29 f4       	brne	.+10     	; 0x1eefa <strtod+0xc0>
   1eef0:	85 01       	movw	r16, r10
   1eef2:	0e 5f       	subi	r16, 0xFE	; 254
   1eef4:	1f 4f       	sbci	r17, 0xFF	; 255
   1eef6:	f5 01       	movw	r30, r10
   1eef8:	d1 81       	ldd	r29, Z+1	; 0x01
   1eefa:	c0 e0       	ldi	r28, 0x00	; 0
   1eefc:	c6 cf       	rjmp	.-116    	; 0x1ee8a <strtod+0x50>
   1eefe:	43 e0       	ldi	r20, 0x03	; 3
   1ef00:	50 e0       	ldi	r21, 0x00	; 0
   1ef02:	68 e8       	ldi	r22, 0x88	; 136
   1ef04:	74 e0       	ldi	r23, 0x04	; 4
   1ef06:	c5 01       	movw	r24, r10
   1ef08:	0e 94 56 f9 	call	0x1f2ac	; 0x1f2ac <strncasecmp_P>
   1ef0c:	89 2b       	or	r24, r25
   1ef0e:	e9 f0       	breq	.+58     	; 0x1ef4a <strtod+0x110>
   1ef10:	f8 01       	movw	r30, r16
   1ef12:	10 e0       	ldi	r17, 0x00	; 0
   1ef14:	00 e0       	ldi	r16, 0x00	; 0
   1ef16:	20 e0       	ldi	r18, 0x00	; 0
   1ef18:	30 e0       	ldi	r19, 0x00	; 0
   1ef1a:	a9 01       	movw	r20, r18
   1ef1c:	5f 01       	movw	r10, r30
   1ef1e:	b0 ed       	ldi	r27, 0xD0	; 208
   1ef20:	8b 2e       	mov	r8, r27
   1ef22:	8d 0e       	add	r8, r29
   1ef24:	89 e0       	ldi	r24, 0x09	; 9
   1ef26:	88 15       	cp	r24, r8
   1ef28:	c8 f1       	brcs	.+114    	; 0x1ef9c <strtod+0x162>
   1ef2a:	9c 2e       	mov	r9, r28
   1ef2c:	68 94       	set
   1ef2e:	91 f8       	bld	r9, 1
   1ef30:	8c 2f       	mov	r24, r28
   1ef32:	88 70       	andi	r24, 0x08	; 8
   1ef34:	c2 ff       	sbrs	r28, 2
   1ef36:	16 c0       	rjmp	.+44     	; 0x1ef64 <strtod+0x12a>
   1ef38:	81 11       	cpse	r24, r1
   1ef3a:	02 c0       	rjmp	.+4      	; 0x1ef40 <strtod+0x106>
   1ef3c:	0f 5f       	subi	r16, 0xFF	; 255
   1ef3e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ef40:	31 96       	adiw	r30, 0x01	; 1
   1ef42:	d5 01       	movw	r26, r10
   1ef44:	dc 91       	ld	r29, X
   1ef46:	c9 2d       	mov	r28, r9
   1ef48:	e9 cf       	rjmp	.-46     	; 0x1ef1c <strtod+0xe2>
   1ef4a:	e1 14       	cp	r14, r1
   1ef4c:	f1 04       	cpc	r15, r1
   1ef4e:	29 f0       	breq	.+10     	; 0x1ef5a <strtod+0x120>
   1ef50:	0e 5f       	subi	r16, 0xFE	; 254
   1ef52:	1f 4f       	sbci	r17, 0xFF	; 255
   1ef54:	f7 01       	movw	r30, r14
   1ef56:	11 83       	std	Z+1, r17	; 0x01
   1ef58:	00 83       	st	Z, r16
   1ef5a:	60 e0       	ldi	r22, 0x00	; 0
   1ef5c:	70 e0       	ldi	r23, 0x00	; 0
   1ef5e:	80 ec       	ldi	r24, 0xC0	; 192
   1ef60:	9f e7       	ldi	r25, 0x7F	; 127
   1ef62:	bc c0       	rjmp	.+376    	; 0x1f0dc <strtod+0x2a2>
   1ef64:	88 23       	and	r24, r24
   1ef66:	11 f0       	breq	.+4      	; 0x1ef6c <strtod+0x132>
   1ef68:	01 50       	subi	r16, 0x01	; 1
   1ef6a:	11 09       	sbc	r17, r1
   1ef6c:	a5 e0       	ldi	r26, 0x05	; 5
   1ef6e:	b0 e0       	ldi	r27, 0x00	; 0
   1ef70:	0e 94 dc fb 	call	0x1f7b8	; 0x1f7b8 <__muluhisi3>
   1ef74:	9b 01       	movw	r18, r22
   1ef76:	ac 01       	movw	r20, r24
   1ef78:	22 0f       	add	r18, r18
   1ef7a:	33 1f       	adc	r19, r19
   1ef7c:	44 1f       	adc	r20, r20
   1ef7e:	55 1f       	adc	r21, r21
   1ef80:	28 0d       	add	r18, r8
   1ef82:	31 1d       	adc	r19, r1
   1ef84:	41 1d       	adc	r20, r1
   1ef86:	51 1d       	adc	r21, r1
   1ef88:	28 39       	cpi	r18, 0x98	; 152
   1ef8a:	99 e9       	ldi	r25, 0x99	; 153
   1ef8c:	39 07       	cpc	r19, r25
   1ef8e:	49 07       	cpc	r20, r25
   1ef90:	99 e1       	ldi	r25, 0x19	; 25
   1ef92:	59 07       	cpc	r21, r25
   1ef94:	a8 f2       	brcs	.-86     	; 0x1ef40 <strtod+0x106>
   1ef96:	c6 60       	ori	r28, 0x06	; 6
   1ef98:	9c 2e       	mov	r9, r28
   1ef9a:	d2 cf       	rjmp	.-92     	; 0x1ef40 <strtod+0x106>
   1ef9c:	ae ef       	ldi	r26, 0xFE	; 254
   1ef9e:	8a 12       	cpse	r8, r26
   1efa0:	06 c0       	rjmp	.+12     	; 0x1efae <strtod+0x174>
   1efa2:	c3 fd       	sbrc	r28, 3
   1efa4:	3c c0       	rjmp	.+120    	; 0x1f01e <strtod+0x1e4>
   1efa6:	9c 2e       	mov	r9, r28
   1efa8:	68 94       	set
   1efaa:	93 f8       	bld	r9, 3
   1efac:	c9 cf       	rjmp	.-110    	; 0x1ef40 <strtod+0x106>
   1efae:	df 7d       	andi	r29, 0xDF	; 223
   1efb0:	d5 34       	cpi	r29, 0x45	; 69
   1efb2:	a9 f5       	brne	.+106    	; 0x1f01e <strtod+0x1e4>
   1efb4:	80 81       	ld	r24, Z
   1efb6:	8d 32       	cpi	r24, 0x2D	; 45
   1efb8:	39 f4       	brne	.+14     	; 0x1efc8 <strtod+0x18e>
   1efba:	c0 61       	ori	r28, 0x10	; 16
   1efbc:	df 01       	movw	r26, r30
   1efbe:	12 96       	adiw	r26, 0x02	; 2
   1efc0:	81 81       	ldd	r24, Z+1	; 0x01
   1efc2:	62 e0       	ldi	r22, 0x02	; 2
   1efc4:	70 e0       	ldi	r23, 0x00	; 0
   1efc6:	06 c0       	rjmp	.+12     	; 0x1efd4 <strtod+0x19a>
   1efc8:	df 01       	movw	r26, r30
   1efca:	8b 32       	cpi	r24, 0x2B	; 43
   1efcc:	c1 f3       	breq	.-16     	; 0x1efbe <strtod+0x184>
   1efce:	11 96       	adiw	r26, 0x01	; 1
   1efd0:	61 e0       	ldi	r22, 0x01	; 1
   1efd2:	70 e0       	ldi	r23, 0x00	; 0
   1efd4:	80 53       	subi	r24, 0x30	; 48
   1efd6:	5d 01       	movw	r10, r26
   1efd8:	a6 1a       	sub	r10, r22
   1efda:	b7 0a       	sbc	r11, r23
   1efdc:	8a 30       	cpi	r24, 0x0A	; 10
   1efde:	f8 f4       	brcc	.+62     	; 0x1f01e <strtod+0x1e4>
   1efe0:	e0 e8       	ldi	r30, 0x80	; 128
   1efe2:	ce 16       	cp	r12, r30
   1efe4:	ec e0       	ldi	r30, 0x0C	; 12
   1efe6:	de 06       	cpc	r13, r30
   1efe8:	5c f4       	brge	.+22     	; 0x1f000 <strtod+0x1c6>
   1efea:	b6 01       	movw	r22, r12
   1efec:	66 0f       	add	r22, r22
   1efee:	77 1f       	adc	r23, r23
   1eff0:	66 0f       	add	r22, r22
   1eff2:	77 1f       	adc	r23, r23
   1eff4:	c6 0e       	add	r12, r22
   1eff6:	d7 1e       	adc	r13, r23
   1eff8:	cc 0c       	add	r12, r12
   1effa:	dd 1c       	adc	r13, r13
   1effc:	c8 0e       	add	r12, r24
   1effe:	d1 1c       	adc	r13, r1
   1f000:	5d 01       	movw	r10, r26
   1f002:	ff ef       	ldi	r31, 0xFF	; 255
   1f004:	af 1a       	sub	r10, r31
   1f006:	bf 0a       	sbc	r11, r31
   1f008:	8c 91       	ld	r24, X
   1f00a:	80 53       	subi	r24, 0x30	; 48
   1f00c:	8a 30       	cpi	r24, 0x0A	; 10
   1f00e:	a8 f1       	brcs	.+106    	; 0x1f07a <strtod+0x240>
   1f010:	c4 ff       	sbrs	r28, 4
   1f012:	03 c0       	rjmp	.+6      	; 0x1f01a <strtod+0x1e0>
   1f014:	d1 94       	neg	r13
   1f016:	c1 94       	neg	r12
   1f018:	d1 08       	sbc	r13, r1
   1f01a:	0c 0d       	add	r16, r12
   1f01c:	1d 1d       	adc	r17, r13
   1f01e:	c1 ff       	sbrs	r28, 1
   1f020:	09 c0       	rjmp	.+18     	; 0x1f034 <strtod+0x1fa>
   1f022:	e1 14       	cp	r14, r1
   1f024:	f1 04       	cpc	r15, r1
   1f026:	31 f0       	breq	.+12     	; 0x1f034 <strtod+0x1fa>
   1f028:	81 e0       	ldi	r24, 0x01	; 1
   1f02a:	a8 1a       	sub	r10, r24
   1f02c:	b1 08       	sbc	r11, r1
   1f02e:	d7 01       	movw	r26, r14
   1f030:	ad 92       	st	X+, r10
   1f032:	bc 92       	st	X, r11
   1f034:	ca 01       	movw	r24, r20
   1f036:	b9 01       	movw	r22, r18
   1f038:	0e 94 2e fa 	call	0x1f45c	; 0x1f45c <__floatunsisf>
   1f03c:	c3 70       	andi	r28, 0x03	; 3
   1f03e:	c3 30       	cpi	r28, 0x03	; 3
   1f040:	09 f4       	brne	.+2      	; 0x1f044 <strtod+0x20a>
   1f042:	90 58       	subi	r25, 0x80	; 128
   1f044:	4b 01       	movw	r8, r22
   1f046:	5c 01       	movw	r10, r24
   1f048:	20 e0       	ldi	r18, 0x00	; 0
   1f04a:	30 e0       	ldi	r19, 0x00	; 0
   1f04c:	a9 01       	movw	r20, r18
   1f04e:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
   1f052:	88 23       	and	r24, r24
   1f054:	09 f4       	brne	.+2      	; 0x1f058 <strtod+0x21e>
   1f056:	40 c0       	rjmp	.+128    	; 0x1f0d8 <strtod+0x29e>
   1f058:	cf eb       	ldi	r28, 0xBF	; 191
   1f05a:	d4 e0       	ldi	r29, 0x04	; 4
   1f05c:	17 ff       	sbrs	r17, 7
   1f05e:	05 c0       	rjmp	.+10     	; 0x1f06a <strtod+0x230>
   1f060:	11 95       	neg	r17
   1f062:	01 95       	neg	r16
   1f064:	11 09       	sbc	r17, r1
   1f066:	c7 ea       	ldi	r28, 0xA7	; 167
   1f068:	d4 e0       	ldi	r29, 0x04	; 4
   1f06a:	6e 01       	movw	r12, r28
   1f06c:	b8 e1       	ldi	r27, 0x18	; 24
   1f06e:	cb 1a       	sub	r12, r27
   1f070:	d1 08       	sbc	r13, r1
   1f072:	80 e2       	ldi	r24, 0x20	; 32
   1f074:	e8 2e       	mov	r14, r24
   1f076:	f1 2c       	mov	r15, r1
   1f078:	0f c0       	rjmp	.+30     	; 0x1f098 <strtod+0x25e>
   1f07a:	d5 01       	movw	r26, r10
   1f07c:	b1 cf       	rjmp	.-158    	; 0x1efe0 <strtod+0x1a6>
   1f07e:	fe 01       	movw	r30, r28
   1f080:	25 91       	lpm	r18, Z+
   1f082:	35 91       	lpm	r19, Z+
   1f084:	45 91       	lpm	r20, Z+
   1f086:	54 91       	lpm	r21, Z
   1f088:	0e 19       	sub	r16, r14
   1f08a:	1f 09       	sbc	r17, r15
   1f08c:	c5 01       	movw	r24, r10
   1f08e:	b4 01       	movw	r22, r8
   1f090:	0e 94 8f fa 	call	0x1f51e	; 0x1f51e <__mulsf3>
   1f094:	4b 01       	movw	r8, r22
   1f096:	5c 01       	movw	r10, r24
   1f098:	d5 01       	movw	r26, r10
   1f09a:	c4 01       	movw	r24, r8
   1f09c:	0e 15       	cp	r16, r14
   1f09e:	1f 05       	cpc	r17, r15
   1f0a0:	74 f7       	brge	.-36     	; 0x1f07e <strtod+0x244>
   1f0a2:	24 97       	sbiw	r28, 0x04	; 4
   1f0a4:	f5 94       	asr	r15
   1f0a6:	e7 94       	ror	r14
   1f0a8:	cc 16       	cp	r12, r28
   1f0aa:	dd 06       	cpc	r13, r29
   1f0ac:	a9 f7       	brne	.-22     	; 0x1f098 <strtod+0x25e>
   1f0ae:	8a 2f       	mov	r24, r26
   1f0b0:	88 0f       	add	r24, r24
   1f0b2:	8b 2f       	mov	r24, r27
   1f0b4:	88 1f       	adc	r24, r24
   1f0b6:	8f 3f       	cpi	r24, 0xFF	; 255
   1f0b8:	49 f0       	breq	.+18     	; 0x1f0cc <strtod+0x292>
   1f0ba:	20 e0       	ldi	r18, 0x00	; 0
   1f0bc:	30 e0       	ldi	r19, 0x00	; 0
   1f0be:	a9 01       	movw	r20, r18
   1f0c0:	c5 01       	movw	r24, r10
   1f0c2:	b4 01       	movw	r22, r8
   1f0c4:	0e 94 29 fa 	call	0x1f452	; 0x1f452 <__cmpsf2>
   1f0c8:	81 11       	cpse	r24, r1
   1f0ca:	06 c0       	rjmp	.+12     	; 0x1f0d8 <strtod+0x29e>
   1f0cc:	82 e2       	ldi	r24, 0x22	; 34
   1f0ce:	90 e0       	ldi	r25, 0x00	; 0
   1f0d0:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <errno+0x1>
   1f0d4:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <errno>
   1f0d8:	c5 01       	movw	r24, r10
   1f0da:	b4 01       	movw	r22, r8
   1f0dc:	df 91       	pop	r29
   1f0de:	cf 91       	pop	r28
   1f0e0:	1f 91       	pop	r17
   1f0e2:	0f 91       	pop	r16
   1f0e4:	ff 90       	pop	r15
   1f0e6:	ef 90       	pop	r14
   1f0e8:	df 90       	pop	r13
   1f0ea:	cf 90       	pop	r12
   1f0ec:	bf 90       	pop	r11
   1f0ee:	af 90       	pop	r10
   1f0f0:	9f 90       	pop	r9
   1f0f2:	8f 90       	pop	r8
   1f0f4:	08 95       	ret

0001f0f6 <__ftoa_engine>:
__ftoa_engine():
   1f0f6:	28 30       	cpi	r18, 0x08	; 8
   1f0f8:	08 f0       	brcs	.+2      	; 0x1f0fc <__ftoa_engine+0x6>
   1f0fa:	27 e0       	ldi	r18, 0x07	; 7
   1f0fc:	33 27       	eor	r19, r19
   1f0fe:	da 01       	movw	r26, r20
   1f100:	99 0f       	add	r25, r25
   1f102:	31 1d       	adc	r19, r1
   1f104:	87 fd       	sbrc	r24, 7
   1f106:	91 60       	ori	r25, 0x01	; 1
   1f108:	00 96       	adiw	r24, 0x00	; 0
   1f10a:	61 05       	cpc	r22, r1
   1f10c:	71 05       	cpc	r23, r1
   1f10e:	39 f4       	brne	.+14     	; 0x1f11e <__ftoa_engine+0x28>
   1f110:	32 60       	ori	r19, 0x02	; 2
   1f112:	2e 5f       	subi	r18, 0xFE	; 254
   1f114:	3d 93       	st	X+, r19
   1f116:	30 e3       	ldi	r19, 0x30	; 48
   1f118:	2a 95       	dec	r18
   1f11a:	e1 f7       	brne	.-8      	; 0x1f114 <__ftoa_engine+0x1e>
   1f11c:	08 95       	ret
   1f11e:	9f 3f       	cpi	r25, 0xFF	; 255
   1f120:	30 f0       	brcs	.+12     	; 0x1f12e <__ftoa_engine+0x38>
   1f122:	80 38       	cpi	r24, 0x80	; 128
   1f124:	71 05       	cpc	r23, r1
   1f126:	61 05       	cpc	r22, r1
   1f128:	09 f0       	breq	.+2      	; 0x1f12c <__ftoa_engine+0x36>
   1f12a:	3c 5f       	subi	r19, 0xFC	; 252
   1f12c:	3c 5f       	subi	r19, 0xFC	; 252
   1f12e:	3d 93       	st	X+, r19
   1f130:	91 30       	cpi	r25, 0x01	; 1
   1f132:	08 f0       	brcs	.+2      	; 0x1f136 <__ftoa_engine+0x40>
   1f134:	80 68       	ori	r24, 0x80	; 128
   1f136:	91 1d       	adc	r25, r1
   1f138:	df 93       	push	r29
   1f13a:	cf 93       	push	r28
   1f13c:	1f 93       	push	r17
   1f13e:	0f 93       	push	r16
   1f140:	ff 92       	push	r15
   1f142:	ef 92       	push	r14
   1f144:	19 2f       	mov	r17, r25
   1f146:	98 7f       	andi	r25, 0xF8	; 248
   1f148:	96 95       	lsr	r25
   1f14a:	e9 2f       	mov	r30, r25
   1f14c:	96 95       	lsr	r25
   1f14e:	96 95       	lsr	r25
   1f150:	e9 0f       	add	r30, r25
   1f152:	ff 27       	eor	r31, r31
   1f154:	e3 5e       	subi	r30, 0xE3	; 227
   1f156:	fa 4f       	sbci	r31, 0xFA	; 250
   1f158:	99 27       	eor	r25, r25
   1f15a:	33 27       	eor	r19, r19
   1f15c:	ee 24       	eor	r14, r14
   1f15e:	ff 24       	eor	r15, r15
   1f160:	a7 01       	movw	r20, r14
   1f162:	e7 01       	movw	r28, r14
   1f164:	05 90       	lpm	r0, Z+
   1f166:	08 94       	sec
   1f168:	07 94       	ror	r0
   1f16a:	28 f4       	brcc	.+10     	; 0x1f176 <__ftoa_engine+0x80>
   1f16c:	36 0f       	add	r19, r22
   1f16e:	e7 1e       	adc	r14, r23
   1f170:	f8 1e       	adc	r15, r24
   1f172:	49 1f       	adc	r20, r25
   1f174:	51 1d       	adc	r21, r1
   1f176:	66 0f       	add	r22, r22
   1f178:	77 1f       	adc	r23, r23
   1f17a:	88 1f       	adc	r24, r24
   1f17c:	99 1f       	adc	r25, r25
   1f17e:	06 94       	lsr	r0
   1f180:	a1 f7       	brne	.-24     	; 0x1f16a <__ftoa_engine+0x74>
   1f182:	05 90       	lpm	r0, Z+
   1f184:	07 94       	ror	r0
   1f186:	28 f4       	brcc	.+10     	; 0x1f192 <__ftoa_engine+0x9c>
   1f188:	e7 0e       	add	r14, r23
   1f18a:	f8 1e       	adc	r15, r24
   1f18c:	49 1f       	adc	r20, r25
   1f18e:	56 1f       	adc	r21, r22
   1f190:	c1 1d       	adc	r28, r1
   1f192:	77 0f       	add	r23, r23
   1f194:	88 1f       	adc	r24, r24
   1f196:	99 1f       	adc	r25, r25
   1f198:	66 1f       	adc	r22, r22
   1f19a:	06 94       	lsr	r0
   1f19c:	a1 f7       	brne	.-24     	; 0x1f186 <__ftoa_engine+0x90>
   1f19e:	05 90       	lpm	r0, Z+
   1f1a0:	07 94       	ror	r0
   1f1a2:	28 f4       	brcc	.+10     	; 0x1f1ae <__ftoa_engine+0xb8>
   1f1a4:	f8 0e       	add	r15, r24
   1f1a6:	49 1f       	adc	r20, r25
   1f1a8:	56 1f       	adc	r21, r22
   1f1aa:	c7 1f       	adc	r28, r23
   1f1ac:	d1 1d       	adc	r29, r1
   1f1ae:	88 0f       	add	r24, r24
   1f1b0:	99 1f       	adc	r25, r25
   1f1b2:	66 1f       	adc	r22, r22
   1f1b4:	77 1f       	adc	r23, r23
   1f1b6:	06 94       	lsr	r0
   1f1b8:	a1 f7       	brne	.-24     	; 0x1f1a2 <__ftoa_engine+0xac>
   1f1ba:	05 90       	lpm	r0, Z+
   1f1bc:	07 94       	ror	r0
   1f1be:	20 f4       	brcc	.+8      	; 0x1f1c8 <__ftoa_engine+0xd2>
   1f1c0:	49 0f       	add	r20, r25
   1f1c2:	56 1f       	adc	r21, r22
   1f1c4:	c7 1f       	adc	r28, r23
   1f1c6:	d8 1f       	adc	r29, r24
   1f1c8:	99 0f       	add	r25, r25
   1f1ca:	66 1f       	adc	r22, r22
   1f1cc:	77 1f       	adc	r23, r23
   1f1ce:	88 1f       	adc	r24, r24
   1f1d0:	06 94       	lsr	r0
   1f1d2:	a9 f7       	brne	.-22     	; 0x1f1be <__ftoa_engine+0xc8>
   1f1d4:	84 91       	lpm	r24, Z
   1f1d6:	10 95       	com	r17
   1f1d8:	17 70       	andi	r17, 0x07	; 7
   1f1da:	41 f0       	breq	.+16     	; 0x1f1ec <__ftoa_engine+0xf6>
   1f1dc:	d6 95       	lsr	r29
   1f1de:	c7 95       	ror	r28
   1f1e0:	57 95       	ror	r21
   1f1e2:	47 95       	ror	r20
   1f1e4:	f7 94       	ror	r15
   1f1e6:	e7 94       	ror	r14
   1f1e8:	1a 95       	dec	r17
   1f1ea:	c1 f7       	brne	.-16     	; 0x1f1dc <__ftoa_engine+0xe6>
   1f1ec:	e3 ec       	ldi	r30, 0xC3	; 195
   1f1ee:	f4 e0       	ldi	r31, 0x04	; 4
   1f1f0:	68 94       	set
   1f1f2:	15 90       	lpm	r1, Z+
   1f1f4:	15 91       	lpm	r17, Z+
   1f1f6:	35 91       	lpm	r19, Z+
   1f1f8:	65 91       	lpm	r22, Z+
   1f1fa:	95 91       	lpm	r25, Z+
   1f1fc:	05 90       	lpm	r0, Z+
   1f1fe:	7f e2       	ldi	r23, 0x2F	; 47
   1f200:	73 95       	inc	r23
   1f202:	e1 18       	sub	r14, r1
   1f204:	f1 0a       	sbc	r15, r17
   1f206:	43 0b       	sbc	r20, r19
   1f208:	56 0b       	sbc	r21, r22
   1f20a:	c9 0b       	sbc	r28, r25
   1f20c:	d0 09       	sbc	r29, r0
   1f20e:	c0 f7       	brcc	.-16     	; 0x1f200 <__ftoa_engine+0x10a>
   1f210:	e1 0c       	add	r14, r1
   1f212:	f1 1e       	adc	r15, r17
   1f214:	43 1f       	adc	r20, r19
   1f216:	56 1f       	adc	r21, r22
   1f218:	c9 1f       	adc	r28, r25
   1f21a:	d0 1d       	adc	r29, r0
   1f21c:	7e f4       	brtc	.+30     	; 0x1f23c <__ftoa_engine+0x146>
   1f21e:	70 33       	cpi	r23, 0x30	; 48
   1f220:	11 f4       	brne	.+4      	; 0x1f226 <__ftoa_engine+0x130>
   1f222:	8a 95       	dec	r24
   1f224:	e6 cf       	rjmp	.-52     	; 0x1f1f2 <__ftoa_engine+0xfc>
   1f226:	e8 94       	clt
   1f228:	01 50       	subi	r16, 0x01	; 1
   1f22a:	30 f0       	brcs	.+12     	; 0x1f238 <__ftoa_engine+0x142>
   1f22c:	08 0f       	add	r16, r24
   1f22e:	0a f4       	brpl	.+2      	; 0x1f232 <__ftoa_engine+0x13c>
   1f230:	00 27       	eor	r16, r16
   1f232:	02 17       	cp	r16, r18
   1f234:	08 f4       	brcc	.+2      	; 0x1f238 <__ftoa_engine+0x142>
   1f236:	20 2f       	mov	r18, r16
   1f238:	23 95       	inc	r18
   1f23a:	02 2f       	mov	r16, r18
   1f23c:	7a 33       	cpi	r23, 0x3A	; 58
   1f23e:	28 f0       	brcs	.+10     	; 0x1f24a <__ftoa_engine+0x154>
   1f240:	79 e3       	ldi	r23, 0x39	; 57
   1f242:	7d 93       	st	X+, r23
   1f244:	2a 95       	dec	r18
   1f246:	e9 f7       	brne	.-6      	; 0x1f242 <__ftoa_engine+0x14c>
   1f248:	10 c0       	rjmp	.+32     	; 0x1f26a <__ftoa_engine+0x174>
   1f24a:	7d 93       	st	X+, r23
   1f24c:	2a 95       	dec	r18
   1f24e:	89 f6       	brne	.-94     	; 0x1f1f2 <__ftoa_engine+0xfc>
   1f250:	06 94       	lsr	r0
   1f252:	97 95       	ror	r25
   1f254:	67 95       	ror	r22
   1f256:	37 95       	ror	r19
   1f258:	17 95       	ror	r17
   1f25a:	17 94       	ror	r1
   1f25c:	e1 18       	sub	r14, r1
   1f25e:	f1 0a       	sbc	r15, r17
   1f260:	43 0b       	sbc	r20, r19
   1f262:	56 0b       	sbc	r21, r22
   1f264:	c9 0b       	sbc	r28, r25
   1f266:	d0 09       	sbc	r29, r0
   1f268:	98 f0       	brcs	.+38     	; 0x1f290 <__ftoa_engine+0x19a>
   1f26a:	23 95       	inc	r18
   1f26c:	7e 91       	ld	r23, -X
   1f26e:	73 95       	inc	r23
   1f270:	7a 33       	cpi	r23, 0x3A	; 58
   1f272:	08 f0       	brcs	.+2      	; 0x1f276 <__ftoa_engine+0x180>
   1f274:	70 e3       	ldi	r23, 0x30	; 48
   1f276:	7c 93       	st	X, r23
   1f278:	20 13       	cpse	r18, r16
   1f27a:	b8 f7       	brcc	.-18     	; 0x1f26a <__ftoa_engine+0x174>
   1f27c:	7e 91       	ld	r23, -X
   1f27e:	70 61       	ori	r23, 0x10	; 16
   1f280:	7d 93       	st	X+, r23
   1f282:	30 f0       	brcs	.+12     	; 0x1f290 <__ftoa_engine+0x19a>
   1f284:	83 95       	inc	r24
   1f286:	71 e3       	ldi	r23, 0x31	; 49
   1f288:	7d 93       	st	X+, r23
   1f28a:	70 e3       	ldi	r23, 0x30	; 48
   1f28c:	2a 95       	dec	r18
   1f28e:	e1 f7       	brne	.-8      	; 0x1f288 <__ftoa_engine+0x192>
   1f290:	11 24       	eor	r1, r1
   1f292:	ef 90       	pop	r14
   1f294:	ff 90       	pop	r15
   1f296:	0f 91       	pop	r16
   1f298:	1f 91       	pop	r17
   1f29a:	cf 91       	pop	r28
   1f29c:	df 91       	pop	r29
   1f29e:	99 27       	eor	r25, r25
   1f2a0:	87 fd       	sbrc	r24, 7
   1f2a2:	90 95       	com	r25
   1f2a4:	08 95       	ret

0001f2a6 <__ctype_isfalse>:
__ctype_isfalse():
   1f2a6:	99 27       	eor	r25, r25
   1f2a8:	88 27       	eor	r24, r24

0001f2aa <__ctype_istrue>:
__ctype_istrue():
   1f2aa:	08 95       	ret

0001f2ac <strncasecmp_P>:
strncasecmp_P():
   1f2ac:	fb 01       	movw	r30, r22
   1f2ae:	dc 01       	movw	r26, r24
   1f2b0:	41 50       	subi	r20, 0x01	; 1
   1f2b2:	50 40       	sbci	r21, 0x00	; 0
   1f2b4:	88 f0       	brcs	.+34     	; 0x1f2d8 <strncasecmp_P+0x2c>
   1f2b6:	8d 91       	ld	r24, X+
   1f2b8:	81 34       	cpi	r24, 0x41	; 65
   1f2ba:	1c f0       	brlt	.+6      	; 0x1f2c2 <strncasecmp_P+0x16>
   1f2bc:	8b 35       	cpi	r24, 0x5B	; 91
   1f2be:	0c f4       	brge	.+2      	; 0x1f2c2 <strncasecmp_P+0x16>
   1f2c0:	80 5e       	subi	r24, 0xE0	; 224
   1f2c2:	65 91       	lpm	r22, Z+
   1f2c4:	61 34       	cpi	r22, 0x41	; 65
   1f2c6:	1c f0       	brlt	.+6      	; 0x1f2ce <strncasecmp_P+0x22>
   1f2c8:	6b 35       	cpi	r22, 0x5B	; 91
   1f2ca:	0c f4       	brge	.+2      	; 0x1f2ce <strncasecmp_P+0x22>
   1f2cc:	60 5e       	subi	r22, 0xE0	; 224
   1f2ce:	86 1b       	sub	r24, r22
   1f2d0:	61 11       	cpse	r22, r1
   1f2d2:	71 f3       	breq	.-36     	; 0x1f2b0 <strncasecmp_P+0x4>
   1f2d4:	99 0b       	sbc	r25, r25
   1f2d6:	08 95       	ret
   1f2d8:	88 1b       	sub	r24, r24
   1f2da:	fc cf       	rjmp	.-8      	; 0x1f2d4 <strncasecmp_P+0x28>

0001f2dc <strnlen_P>:
strnlen_P():
   1f2dc:	fc 01       	movw	r30, r24
   1f2de:	05 90       	lpm	r0, Z+
   1f2e0:	61 50       	subi	r22, 0x01	; 1
   1f2e2:	70 40       	sbci	r23, 0x00	; 0
   1f2e4:	01 10       	cpse	r0, r1
   1f2e6:	d8 f7       	brcc	.-10     	; 0x1f2de <strnlen_P+0x2>
   1f2e8:	80 95       	com	r24
   1f2ea:	90 95       	com	r25
   1f2ec:	8e 0f       	add	r24, r30
   1f2ee:	9f 1f       	adc	r25, r31
   1f2f0:	08 95       	ret

0001f2f2 <memset>:
memset():
   1f2f2:	dc 01       	movw	r26, r24
   1f2f4:	01 c0       	rjmp	.+2      	; 0x1f2f8 <memset+0x6>
   1f2f6:	6d 93       	st	X+, r22
   1f2f8:	41 50       	subi	r20, 0x01	; 1
   1f2fa:	50 40       	sbci	r21, 0x00	; 0
   1f2fc:	e0 f7       	brcc	.-8      	; 0x1f2f6 <memset+0x4>
   1f2fe:	08 95       	ret

0001f300 <strnlen>:
strnlen():
   1f300:	fc 01       	movw	r30, r24
   1f302:	61 50       	subi	r22, 0x01	; 1
   1f304:	70 40       	sbci	r23, 0x00	; 0
   1f306:	01 90       	ld	r0, Z+
   1f308:	01 10       	cpse	r0, r1
   1f30a:	d8 f7       	brcc	.-10     	; 0x1f302 <strnlen+0x2>
   1f30c:	80 95       	com	r24
   1f30e:	90 95       	com	r25
   1f310:	8e 0f       	add	r24, r30
   1f312:	9f 1f       	adc	r25, r31
   1f314:	08 95       	ret

0001f316 <strrev>:
strrev():
   1f316:	dc 01       	movw	r26, r24
   1f318:	fc 01       	movw	r30, r24
   1f31a:	67 2f       	mov	r22, r23
   1f31c:	71 91       	ld	r23, Z+
   1f31e:	77 23       	and	r23, r23
   1f320:	e1 f7       	brne	.-8      	; 0x1f31a <strrev+0x4>
   1f322:	32 97       	sbiw	r30, 0x02	; 2
   1f324:	04 c0       	rjmp	.+8      	; 0x1f32e <strrev+0x18>
   1f326:	7c 91       	ld	r23, X
   1f328:	6d 93       	st	X+, r22
   1f32a:	70 83       	st	Z, r23
   1f32c:	62 91       	ld	r22, -Z
   1f32e:	ae 17       	cp	r26, r30
   1f330:	bf 07       	cpc	r27, r31
   1f332:	c8 f3       	brcs	.-14     	; 0x1f326 <strrev+0x10>
   1f334:	08 95       	ret

0001f336 <fputc>:
fputc():
   1f336:	0f 93       	push	r16
   1f338:	1f 93       	push	r17
   1f33a:	cf 93       	push	r28
   1f33c:	df 93       	push	r29
   1f33e:	18 2f       	mov	r17, r24
   1f340:	09 2f       	mov	r16, r25
   1f342:	eb 01       	movw	r28, r22
   1f344:	8b 81       	ldd	r24, Y+3	; 0x03
   1f346:	81 fd       	sbrc	r24, 1
   1f348:	09 c0       	rjmp	.+18     	; 0x1f35c <fputc+0x26>
   1f34a:	1f ef       	ldi	r17, 0xFF	; 255
   1f34c:	0f ef       	ldi	r16, 0xFF	; 255
   1f34e:	81 2f       	mov	r24, r17
   1f350:	90 2f       	mov	r25, r16
   1f352:	df 91       	pop	r29
   1f354:	cf 91       	pop	r28
   1f356:	1f 91       	pop	r17
   1f358:	0f 91       	pop	r16
   1f35a:	08 95       	ret
   1f35c:	82 ff       	sbrs	r24, 2
   1f35e:	14 c0       	rjmp	.+40     	; 0x1f388 <fputc+0x52>
   1f360:	2e 81       	ldd	r18, Y+6	; 0x06
   1f362:	3f 81       	ldd	r19, Y+7	; 0x07
   1f364:	8c 81       	ldd	r24, Y+4	; 0x04
   1f366:	9d 81       	ldd	r25, Y+5	; 0x05
   1f368:	28 17       	cp	r18, r24
   1f36a:	39 07       	cpc	r19, r25
   1f36c:	3c f4       	brge	.+14     	; 0x1f37c <fputc+0x46>
   1f36e:	e8 81       	ld	r30, Y
   1f370:	f9 81       	ldd	r31, Y+1	; 0x01
   1f372:	cf 01       	movw	r24, r30
   1f374:	01 96       	adiw	r24, 0x01	; 1
   1f376:	99 83       	std	Y+1, r25	; 0x01
   1f378:	88 83       	st	Y, r24
   1f37a:	10 83       	st	Z, r17
   1f37c:	8e 81       	ldd	r24, Y+6	; 0x06
   1f37e:	9f 81       	ldd	r25, Y+7	; 0x07
   1f380:	01 96       	adiw	r24, 0x01	; 1
   1f382:	9f 83       	std	Y+7, r25	; 0x07
   1f384:	8e 83       	std	Y+6, r24	; 0x06
   1f386:	e3 cf       	rjmp	.-58     	; 0x1f34e <fputc+0x18>
   1f388:	e8 85       	ldd	r30, Y+8	; 0x08
   1f38a:	f9 85       	ldd	r31, Y+9	; 0x09
   1f38c:	81 2f       	mov	r24, r17
   1f38e:	19 95       	eicall
   1f390:	89 2b       	or	r24, r25
   1f392:	a1 f3       	breq	.-24     	; 0x1f37c <fputc+0x46>
   1f394:	da cf       	rjmp	.-76     	; 0x1f34a <fputc+0x14>

0001f396 <__ultoa_invert>:
__ultoa_invert():
   1f396:	fa 01       	movw	r30, r20
   1f398:	aa 27       	eor	r26, r26
   1f39a:	28 30       	cpi	r18, 0x08	; 8
   1f39c:	51 f1       	breq	.+84     	; 0x1f3f2 <__ultoa_invert+0x5c>
   1f39e:	20 31       	cpi	r18, 0x10	; 16
   1f3a0:	81 f1       	breq	.+96     	; 0x1f402 <__ultoa_invert+0x6c>
   1f3a2:	e8 94       	clt
   1f3a4:	6f 93       	push	r22
   1f3a6:	6e 7f       	andi	r22, 0xFE	; 254
   1f3a8:	6e 5f       	subi	r22, 0xFE	; 254
   1f3aa:	7f 4f       	sbci	r23, 0xFF	; 255
   1f3ac:	8f 4f       	sbci	r24, 0xFF	; 255
   1f3ae:	9f 4f       	sbci	r25, 0xFF	; 255
   1f3b0:	af 4f       	sbci	r26, 0xFF	; 255
   1f3b2:	b1 e0       	ldi	r27, 0x01	; 1
   1f3b4:	3e d0       	rcall	.+124    	; 0x1f432 <__ultoa_invert+0x9c>
   1f3b6:	b4 e0       	ldi	r27, 0x04	; 4
   1f3b8:	3c d0       	rcall	.+120    	; 0x1f432 <__ultoa_invert+0x9c>
   1f3ba:	67 0f       	add	r22, r23
   1f3bc:	78 1f       	adc	r23, r24
   1f3be:	89 1f       	adc	r24, r25
   1f3c0:	9a 1f       	adc	r25, r26
   1f3c2:	a1 1d       	adc	r26, r1
   1f3c4:	68 0f       	add	r22, r24
   1f3c6:	79 1f       	adc	r23, r25
   1f3c8:	8a 1f       	adc	r24, r26
   1f3ca:	91 1d       	adc	r25, r1
   1f3cc:	a1 1d       	adc	r26, r1
   1f3ce:	6a 0f       	add	r22, r26
   1f3d0:	71 1d       	adc	r23, r1
   1f3d2:	81 1d       	adc	r24, r1
   1f3d4:	91 1d       	adc	r25, r1
   1f3d6:	a1 1d       	adc	r26, r1
   1f3d8:	20 d0       	rcall	.+64     	; 0x1f41a <__ultoa_invert+0x84>
   1f3da:	09 f4       	brne	.+2      	; 0x1f3de <__ultoa_invert+0x48>
   1f3dc:	68 94       	set
   1f3de:	3f 91       	pop	r19
   1f3e0:	2a e0       	ldi	r18, 0x0A	; 10
   1f3e2:	26 9f       	mul	r18, r22
   1f3e4:	11 24       	eor	r1, r1
   1f3e6:	30 19       	sub	r19, r0
   1f3e8:	30 5d       	subi	r19, 0xD0	; 208
   1f3ea:	31 93       	st	Z+, r19
   1f3ec:	de f6       	brtc	.-74     	; 0x1f3a4 <__ultoa_invert+0xe>
   1f3ee:	cf 01       	movw	r24, r30
   1f3f0:	08 95       	ret
   1f3f2:	46 2f       	mov	r20, r22
   1f3f4:	47 70       	andi	r20, 0x07	; 7
   1f3f6:	40 5d       	subi	r20, 0xD0	; 208
   1f3f8:	41 93       	st	Z+, r20
   1f3fa:	b3 e0       	ldi	r27, 0x03	; 3
   1f3fc:	0f d0       	rcall	.+30     	; 0x1f41c <__ultoa_invert+0x86>
   1f3fe:	c9 f7       	brne	.-14     	; 0x1f3f2 <__ultoa_invert+0x5c>
   1f400:	f6 cf       	rjmp	.-20     	; 0x1f3ee <__ultoa_invert+0x58>
   1f402:	46 2f       	mov	r20, r22
   1f404:	4f 70       	andi	r20, 0x0F	; 15
   1f406:	40 5d       	subi	r20, 0xD0	; 208
   1f408:	4a 33       	cpi	r20, 0x3A	; 58
   1f40a:	18 f0       	brcs	.+6      	; 0x1f412 <__ultoa_invert+0x7c>
   1f40c:	49 5d       	subi	r20, 0xD9	; 217
   1f40e:	31 fd       	sbrc	r19, 1
   1f410:	40 52       	subi	r20, 0x20	; 32
   1f412:	41 93       	st	Z+, r20
   1f414:	02 d0       	rcall	.+4      	; 0x1f41a <__ultoa_invert+0x84>
   1f416:	a9 f7       	brne	.-22     	; 0x1f402 <__ultoa_invert+0x6c>
   1f418:	ea cf       	rjmp	.-44     	; 0x1f3ee <__ultoa_invert+0x58>
   1f41a:	b4 e0       	ldi	r27, 0x04	; 4
   1f41c:	a6 95       	lsr	r26
   1f41e:	97 95       	ror	r25
   1f420:	87 95       	ror	r24
   1f422:	77 95       	ror	r23
   1f424:	67 95       	ror	r22
   1f426:	ba 95       	dec	r27
   1f428:	c9 f7       	brne	.-14     	; 0x1f41c <__ultoa_invert+0x86>
   1f42a:	00 97       	sbiw	r24, 0x00	; 0
   1f42c:	61 05       	cpc	r22, r1
   1f42e:	71 05       	cpc	r23, r1
   1f430:	08 95       	ret
   1f432:	9b 01       	movw	r18, r22
   1f434:	ac 01       	movw	r20, r24
   1f436:	0a 2e       	mov	r0, r26
   1f438:	06 94       	lsr	r0
   1f43a:	57 95       	ror	r21
   1f43c:	47 95       	ror	r20
   1f43e:	37 95       	ror	r19
   1f440:	27 95       	ror	r18
   1f442:	ba 95       	dec	r27
   1f444:	c9 f7       	brne	.-14     	; 0x1f438 <__ultoa_invert+0xa2>
   1f446:	62 0f       	add	r22, r18
   1f448:	73 1f       	adc	r23, r19
   1f44a:	84 1f       	adc	r24, r20
   1f44c:	95 1f       	adc	r25, r21
   1f44e:	a0 1d       	adc	r26, r0
   1f450:	08 95       	ret

0001f452 <__cmpsf2>:
__cmpsf2():
   1f452:	0e 94 6b fa 	call	0x1f4d6	; 0x1f4d6 <__fp_cmp>
   1f456:	08 f4       	brcc	.+2      	; 0x1f45a <__cmpsf2+0x8>
   1f458:	81 e0       	ldi	r24, 0x01	; 1
   1f45a:	08 95       	ret

0001f45c <__floatunsisf>:
__floatunsisf():
   1f45c:	e8 94       	clt
   1f45e:	09 c0       	rjmp	.+18     	; 0x1f472 <__floatsisf+0x12>

0001f460 <__floatsisf>:
   1f460:	97 fb       	bst	r25, 7
   1f462:	3e f4       	brtc	.+14     	; 0x1f472 <__floatsisf+0x12>
   1f464:	90 95       	com	r25
   1f466:	80 95       	com	r24
   1f468:	70 95       	com	r23
   1f46a:	61 95       	neg	r22
   1f46c:	7f 4f       	sbci	r23, 0xFF	; 255
   1f46e:	8f 4f       	sbci	r24, 0xFF	; 255
   1f470:	9f 4f       	sbci	r25, 0xFF	; 255
   1f472:	99 23       	and	r25, r25
   1f474:	a9 f0       	breq	.+42     	; 0x1f4a0 <__floatsisf+0x40>
   1f476:	f9 2f       	mov	r31, r25
   1f478:	96 e9       	ldi	r25, 0x96	; 150
   1f47a:	bb 27       	eor	r27, r27
   1f47c:	93 95       	inc	r25
   1f47e:	f6 95       	lsr	r31
   1f480:	87 95       	ror	r24
   1f482:	77 95       	ror	r23
   1f484:	67 95       	ror	r22
   1f486:	b7 95       	ror	r27
   1f488:	f1 11       	cpse	r31, r1
   1f48a:	f8 cf       	rjmp	.-16     	; 0x1f47c <__floatsisf+0x1c>
   1f48c:	fa f4       	brpl	.+62     	; 0x1f4cc <__floatsisf+0x6c>
   1f48e:	bb 0f       	add	r27, r27
   1f490:	11 f4       	brne	.+4      	; 0x1f496 <__floatsisf+0x36>
   1f492:	60 ff       	sbrs	r22, 0
   1f494:	1b c0       	rjmp	.+54     	; 0x1f4cc <__floatsisf+0x6c>
   1f496:	6f 5f       	subi	r22, 0xFF	; 255
   1f498:	7f 4f       	sbci	r23, 0xFF	; 255
   1f49a:	8f 4f       	sbci	r24, 0xFF	; 255
   1f49c:	9f 4f       	sbci	r25, 0xFF	; 255
   1f49e:	16 c0       	rjmp	.+44     	; 0x1f4cc <__floatsisf+0x6c>
   1f4a0:	88 23       	and	r24, r24
   1f4a2:	11 f0       	breq	.+4      	; 0x1f4a8 <__floatsisf+0x48>
   1f4a4:	96 e9       	ldi	r25, 0x96	; 150
   1f4a6:	11 c0       	rjmp	.+34     	; 0x1f4ca <__floatsisf+0x6a>
   1f4a8:	77 23       	and	r23, r23
   1f4aa:	21 f0       	breq	.+8      	; 0x1f4b4 <__floatsisf+0x54>
   1f4ac:	9e e8       	ldi	r25, 0x8E	; 142
   1f4ae:	87 2f       	mov	r24, r23
   1f4b0:	76 2f       	mov	r23, r22
   1f4b2:	05 c0       	rjmp	.+10     	; 0x1f4be <__floatsisf+0x5e>
   1f4b4:	66 23       	and	r22, r22
   1f4b6:	71 f0       	breq	.+28     	; 0x1f4d4 <__floatsisf+0x74>
   1f4b8:	96 e8       	ldi	r25, 0x86	; 134
   1f4ba:	86 2f       	mov	r24, r22
   1f4bc:	70 e0       	ldi	r23, 0x00	; 0
   1f4be:	60 e0       	ldi	r22, 0x00	; 0
   1f4c0:	2a f0       	brmi	.+10     	; 0x1f4cc <__floatsisf+0x6c>
   1f4c2:	9a 95       	dec	r25
   1f4c4:	66 0f       	add	r22, r22
   1f4c6:	77 1f       	adc	r23, r23
   1f4c8:	88 1f       	adc	r24, r24
   1f4ca:	da f7       	brpl	.-10     	; 0x1f4c2 <__floatsisf+0x62>
   1f4cc:	88 0f       	add	r24, r24
   1f4ce:	96 95       	lsr	r25
   1f4d0:	87 95       	ror	r24
   1f4d2:	97 f9       	bld	r25, 7
   1f4d4:	08 95       	ret

0001f4d6 <__fp_cmp>:
__fp_cmp():
   1f4d6:	99 0f       	add	r25, r25
   1f4d8:	00 08       	sbc	r0, r0
   1f4da:	55 0f       	add	r21, r21
   1f4dc:	aa 0b       	sbc	r26, r26
   1f4de:	e0 e8       	ldi	r30, 0x80	; 128
   1f4e0:	fe ef       	ldi	r31, 0xFE	; 254
   1f4e2:	16 16       	cp	r1, r22
   1f4e4:	17 06       	cpc	r1, r23
   1f4e6:	e8 07       	cpc	r30, r24
   1f4e8:	f9 07       	cpc	r31, r25
   1f4ea:	c0 f0       	brcs	.+48     	; 0x1f51c <__fp_cmp+0x46>
   1f4ec:	12 16       	cp	r1, r18
   1f4ee:	13 06       	cpc	r1, r19
   1f4f0:	e4 07       	cpc	r30, r20
   1f4f2:	f5 07       	cpc	r31, r21
   1f4f4:	98 f0       	brcs	.+38     	; 0x1f51c <__fp_cmp+0x46>
   1f4f6:	62 1b       	sub	r22, r18
   1f4f8:	73 0b       	sbc	r23, r19
   1f4fa:	84 0b       	sbc	r24, r20
   1f4fc:	95 0b       	sbc	r25, r21
   1f4fe:	39 f4       	brne	.+14     	; 0x1f50e <__fp_cmp+0x38>
   1f500:	0a 26       	eor	r0, r26
   1f502:	61 f0       	breq	.+24     	; 0x1f51c <__fp_cmp+0x46>
   1f504:	23 2b       	or	r18, r19
   1f506:	24 2b       	or	r18, r20
   1f508:	25 2b       	or	r18, r21
   1f50a:	21 f4       	brne	.+8      	; 0x1f514 <__fp_cmp+0x3e>
   1f50c:	08 95       	ret
   1f50e:	0a 26       	eor	r0, r26
   1f510:	09 f4       	brne	.+2      	; 0x1f514 <__fp_cmp+0x3e>
   1f512:	a1 40       	sbci	r26, 0x01	; 1
   1f514:	a6 95       	lsr	r26
   1f516:	8f ef       	ldi	r24, 0xFF	; 255
   1f518:	81 1d       	adc	r24, r1
   1f51a:	81 1d       	adc	r24, r1
   1f51c:	08 95       	ret

0001f51e <__mulsf3>:
__mulsf3():
   1f51e:	0e 94 a2 fa 	call	0x1f544	; 0x1f544 <__mulsf3x>
   1f522:	0c 94 13 fb 	jmp	0x1f626	; 0x1f626 <__fp_round>
   1f526:	0e 94 05 fb 	call	0x1f60a	; 0x1f60a <__fp_pscA>
   1f52a:	38 f0       	brcs	.+14     	; 0x1f53a <__mulsf3+0x1c>
   1f52c:	0e 94 0c fb 	call	0x1f618	; 0x1f618 <__fp_pscB>
   1f530:	20 f0       	brcs	.+8      	; 0x1f53a <__mulsf3+0x1c>
   1f532:	95 23       	and	r25, r21
   1f534:	11 f0       	breq	.+4      	; 0x1f53a <__mulsf3+0x1c>
   1f536:	0c 94 fc fa 	jmp	0x1f5f8	; 0x1f5f8 <__fp_inf>
   1f53a:	0c 94 02 fb 	jmp	0x1f604	; 0x1f604 <__fp_nan>
   1f53e:	11 24       	eor	r1, r1
   1f540:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <__fp_szero>

0001f544 <__mulsf3x>:
__mulsf3x():
   1f544:	0e 94 24 fb 	call	0x1f648	; 0x1f648 <__fp_split3>
   1f548:	70 f3       	brcs	.-36     	; 0x1f526 <__mulsf3+0x8>

0001f54a <__mulsf3_pse>:
   1f54a:	95 9f       	mul	r25, r21
   1f54c:	c1 f3       	breq	.-16     	; 0x1f53e <__mulsf3+0x20>
   1f54e:	95 0f       	add	r25, r21
   1f550:	50 e0       	ldi	r21, 0x00	; 0
   1f552:	55 1f       	adc	r21, r21
   1f554:	62 9f       	mul	r22, r18
   1f556:	f0 01       	movw	r30, r0
   1f558:	72 9f       	mul	r23, r18
   1f55a:	bb 27       	eor	r27, r27
   1f55c:	f0 0d       	add	r31, r0
   1f55e:	b1 1d       	adc	r27, r1
   1f560:	63 9f       	mul	r22, r19
   1f562:	aa 27       	eor	r26, r26
   1f564:	f0 0d       	add	r31, r0
   1f566:	b1 1d       	adc	r27, r1
   1f568:	aa 1f       	adc	r26, r26
   1f56a:	64 9f       	mul	r22, r20
   1f56c:	66 27       	eor	r22, r22
   1f56e:	b0 0d       	add	r27, r0
   1f570:	a1 1d       	adc	r26, r1
   1f572:	66 1f       	adc	r22, r22
   1f574:	82 9f       	mul	r24, r18
   1f576:	22 27       	eor	r18, r18
   1f578:	b0 0d       	add	r27, r0
   1f57a:	a1 1d       	adc	r26, r1
   1f57c:	62 1f       	adc	r22, r18
   1f57e:	73 9f       	mul	r23, r19
   1f580:	b0 0d       	add	r27, r0
   1f582:	a1 1d       	adc	r26, r1
   1f584:	62 1f       	adc	r22, r18
   1f586:	83 9f       	mul	r24, r19
   1f588:	a0 0d       	add	r26, r0
   1f58a:	61 1d       	adc	r22, r1
   1f58c:	22 1f       	adc	r18, r18
   1f58e:	74 9f       	mul	r23, r20
   1f590:	33 27       	eor	r19, r19
   1f592:	a0 0d       	add	r26, r0
   1f594:	61 1d       	adc	r22, r1
   1f596:	23 1f       	adc	r18, r19
   1f598:	84 9f       	mul	r24, r20
   1f59a:	60 0d       	add	r22, r0
   1f59c:	21 1d       	adc	r18, r1
   1f59e:	82 2f       	mov	r24, r18
   1f5a0:	76 2f       	mov	r23, r22
   1f5a2:	6a 2f       	mov	r22, r26
   1f5a4:	11 24       	eor	r1, r1
   1f5a6:	9f 57       	subi	r25, 0x7F	; 127
   1f5a8:	50 40       	sbci	r21, 0x00	; 0
   1f5aa:	9a f0       	brmi	.+38     	; 0x1f5d2 <__mulsf3_pse+0x88>
   1f5ac:	f1 f0       	breq	.+60     	; 0x1f5ea <__mulsf3_pse+0xa0>
   1f5ae:	88 23       	and	r24, r24
   1f5b0:	4a f0       	brmi	.+18     	; 0x1f5c4 <__mulsf3_pse+0x7a>
   1f5b2:	ee 0f       	add	r30, r30
   1f5b4:	ff 1f       	adc	r31, r31
   1f5b6:	bb 1f       	adc	r27, r27
   1f5b8:	66 1f       	adc	r22, r22
   1f5ba:	77 1f       	adc	r23, r23
   1f5bc:	88 1f       	adc	r24, r24
   1f5be:	91 50       	subi	r25, 0x01	; 1
   1f5c0:	50 40       	sbci	r21, 0x00	; 0
   1f5c2:	a9 f7       	brne	.-22     	; 0x1f5ae <__mulsf3_pse+0x64>
   1f5c4:	9e 3f       	cpi	r25, 0xFE	; 254
   1f5c6:	51 05       	cpc	r21, r1
   1f5c8:	80 f0       	brcs	.+32     	; 0x1f5ea <__mulsf3_pse+0xa0>
   1f5ca:	0c 94 fc fa 	jmp	0x1f5f8	; 0x1f5f8 <__fp_inf>
   1f5ce:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <__fp_szero>
   1f5d2:	5f 3f       	cpi	r21, 0xFF	; 255
   1f5d4:	e4 f3       	brlt	.-8      	; 0x1f5ce <__mulsf3_pse+0x84>
   1f5d6:	98 3e       	cpi	r25, 0xE8	; 232
   1f5d8:	d4 f3       	brlt	.-12     	; 0x1f5ce <__mulsf3_pse+0x84>
   1f5da:	86 95       	lsr	r24
   1f5dc:	77 95       	ror	r23
   1f5de:	67 95       	ror	r22
   1f5e0:	b7 95       	ror	r27
   1f5e2:	f7 95       	ror	r31
   1f5e4:	e7 95       	ror	r30
   1f5e6:	9f 5f       	subi	r25, 0xFF	; 255
   1f5e8:	c1 f7       	brne	.-16     	; 0x1f5da <__mulsf3_pse+0x90>
   1f5ea:	fe 2b       	or	r31, r30
   1f5ec:	88 0f       	add	r24, r24
   1f5ee:	91 1d       	adc	r25, r1
   1f5f0:	96 95       	lsr	r25
   1f5f2:	87 95       	ror	r24
   1f5f4:	97 f9       	bld	r25, 7
   1f5f6:	08 95       	ret

0001f5f8 <__fp_inf>:
   1f5f8:	97 f9       	bld	r25, 7
   1f5fa:	9f 67       	ori	r25, 0x7F	; 127
   1f5fc:	80 e8       	ldi	r24, 0x80	; 128
   1f5fe:	70 e0       	ldi	r23, 0x00	; 0
   1f600:	60 e0       	ldi	r22, 0x00	; 0
   1f602:	08 95       	ret

0001f604 <__fp_nan>:
   1f604:	9f ef       	ldi	r25, 0xFF	; 255
   1f606:	80 ec       	ldi	r24, 0xC0	; 192
   1f608:	08 95       	ret

0001f60a <__fp_pscA>:
   1f60a:	00 24       	eor	r0, r0
   1f60c:	0a 94       	dec	r0
   1f60e:	16 16       	cp	r1, r22
   1f610:	17 06       	cpc	r1, r23
   1f612:	18 06       	cpc	r1, r24
   1f614:	09 06       	cpc	r0, r25
__fp_pscA():
   1f616:	08 95       	ret

0001f618 <__fp_pscB>:
__fp_pscB():
   1f618:	00 24       	eor	r0, r0
   1f61a:	0a 94       	dec	r0
   1f61c:	12 16       	cp	r1, r18
   1f61e:	13 06       	cpc	r1, r19
   1f620:	14 06       	cpc	r1, r20
   1f622:	05 06       	cpc	r0, r21
   1f624:	08 95       	ret

0001f626 <__fp_round>:
__fp_round():
   1f626:	09 2e       	mov	r0, r25
   1f628:	03 94       	inc	r0
   1f62a:	00 0c       	add	r0, r0
   1f62c:	11 f4       	brne	.+4      	; 0x1f632 <__fp_round+0xc>
   1f62e:	88 23       	and	r24, r24
   1f630:	52 f0       	brmi	.+20     	; 0x1f646 <__fp_round+0x20>
   1f632:	bb 0f       	add	r27, r27
   1f634:	40 f4       	brcc	.+16     	; 0x1f646 <__fp_round+0x20>
   1f636:	bf 2b       	or	r27, r31
   1f638:	11 f4       	brne	.+4      	; 0x1f63e <__fp_round+0x18>
   1f63a:	60 ff       	sbrs	r22, 0
   1f63c:	04 c0       	rjmp	.+8      	; 0x1f646 <__fp_round+0x20>
   1f63e:	6f 5f       	subi	r22, 0xFF	; 255
   1f640:	7f 4f       	sbci	r23, 0xFF	; 255
   1f642:	8f 4f       	sbci	r24, 0xFF	; 255
   1f644:	9f 4f       	sbci	r25, 0xFF	; 255
   1f646:	08 95       	ret

0001f648 <__fp_split3>:
__fp_split3():
   1f648:	57 fd       	sbrc	r21, 7
   1f64a:	90 58       	subi	r25, 0x80	; 128
   1f64c:	44 0f       	add	r20, r20
   1f64e:	55 1f       	adc	r21, r21
   1f650:	59 f0       	breq	.+22     	; 0x1f668 <__fp_splitA+0x10>
   1f652:	5f 3f       	cpi	r21, 0xFF	; 255
   1f654:	71 f0       	breq	.+28     	; 0x1f672 <__fp_splitA+0x1a>
   1f656:	47 95       	ror	r20

0001f658 <__fp_splitA>:
   1f658:	88 0f       	add	r24, r24
   1f65a:	97 fb       	bst	r25, 7
   1f65c:	99 1f       	adc	r25, r25
   1f65e:	61 f0       	breq	.+24     	; 0x1f678 <__fp_splitA+0x20>
   1f660:	9f 3f       	cpi	r25, 0xFF	; 255
   1f662:	79 f0       	breq	.+30     	; 0x1f682 <__fp_splitA+0x2a>
   1f664:	87 95       	ror	r24
   1f666:	08 95       	ret
   1f668:	12 16       	cp	r1, r18
   1f66a:	13 06       	cpc	r1, r19
   1f66c:	14 06       	cpc	r1, r20
   1f66e:	55 1f       	adc	r21, r21
   1f670:	f2 cf       	rjmp	.-28     	; 0x1f656 <__fp_split3+0xe>
   1f672:	46 95       	lsr	r20
   1f674:	f1 df       	rcall	.-30     	; 0x1f658 <__fp_splitA>
   1f676:	08 c0       	rjmp	.+16     	; 0x1f688 <__fp_splitA+0x30>
   1f678:	16 16       	cp	r1, r22
   1f67a:	17 06       	cpc	r1, r23
   1f67c:	18 06       	cpc	r1, r24
   1f67e:	99 1f       	adc	r25, r25
   1f680:	f1 cf       	rjmp	.-30     	; 0x1f664 <__fp_splitA+0xc>
   1f682:	86 95       	lsr	r24
   1f684:	71 05       	cpc	r23, r1
   1f686:	61 05       	cpc	r22, r1
   1f688:	08 94       	sec
   1f68a:	08 95       	ret

0001f68c <__fp_zero>:
__fp_zero():
   1f68c:	e8 94       	clt

0001f68e <__fp_szero>:
   1f68e:	bb 27       	eor	r27, r27
   1f690:	66 27       	eor	r22, r22
   1f692:	77 27       	eor	r23, r23
   1f694:	cb 01       	movw	r24, r22
   1f696:	97 f9       	bld	r25, 7
   1f698:	08 95       	ret

0001f69a <eeprom_read_byte>:
eeprom_read_byte():
   1f69a:	f9 99       	sbic	0x1f, 1	; 31
   1f69c:	fe cf       	rjmp	.-4      	; 0x1f69a <eeprom_read_byte>
   1f69e:	92 bd       	out	0x22, r25	; 34
   1f6a0:	81 bd       	out	0x21, r24	; 33
   1f6a2:	f8 9a       	sbi	0x1f, 0	; 31
   1f6a4:	99 27       	eor	r25, r25
   1f6a6:	80 b5       	in	r24, 0x20	; 32
   1f6a8:	08 95       	ret

0001f6aa <eeprom_write_byte>:
eeprom_write_byte():
   1f6aa:	26 2f       	mov	r18, r22

0001f6ac <eeprom_write_r18>:
   1f6ac:	f9 99       	sbic	0x1f, 1	; 31
   1f6ae:	fe cf       	rjmp	.-4      	; 0x1f6ac <eeprom_write_r18>
   1f6b0:	1f ba       	out	0x1f, r1	; 31
   1f6b2:	92 bd       	out	0x22, r25	; 34
   1f6b4:	81 bd       	out	0x21, r24	; 33
   1f6b6:	20 bd       	out	0x20, r18	; 32
   1f6b8:	0f b6       	in	r0, 0x3f	; 63
   1f6ba:	f8 94       	cli
   1f6bc:	fa 9a       	sbi	0x1f, 2	; 31
   1f6be:	f9 9a       	sbi	0x1f, 1	; 31
   1f6c0:	0f be       	out	0x3f, r0	; 63
   1f6c2:	01 96       	adiw	r24, 0x01	; 1
   1f6c4:	08 95       	ret

0001f6c6 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1f6c6:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1f6c8:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1f6ca:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1f6cc:	0e 94 dc fb 	call	0x1f7b8	; 0x1f7b8 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1f6d0:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1f6d2:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1f6d4:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1f6d6:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1f6d8:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1f6da:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1f6dc:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1f6de:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1f6e0:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1f6e2:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1f6e4:	08 95       	ret

0001f6e6 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1f6e6:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1f6e8:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1f6ea:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1f6ec:	07 c0       	rjmp	.+14     	; 0x1f6fc <__udivmodhi4_ep>

0001f6ee <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1f6ee:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1f6f0:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1f6f2:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1f6f4:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1f6f6:	10 f0       	brcs	.+4      	; 0x1f6fc <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1f6f8:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1f6fa:	b7 0b       	sbc	r27, r23

0001f6fc <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1f6fc:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1f6fe:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1f700:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1f702:	a9 f7       	brne	.-22     	; 0x1f6ee <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1f704:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1f706:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1f708:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1f70a:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1f70c:	08 95       	ret

0001f70e <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1f70e:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1f710:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1f712:	16 f4       	brtc	.+4      	; 0x1f718 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1f714:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1f716:	07 d0       	rcall	.+14     	; 0x1f726 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1f718:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1f71a:	09 d0       	rcall	.+18     	; 0x1f72e <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1f71c:	0e 94 73 fb 	call	0x1f6e6	; 0x1f6e6 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1f720:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1f722:	05 d0       	rcall	.+10     	; 0x1f72e <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1f724:	3e f4       	brtc	.+14     	; 0x1f734 <__divmodhi4_exit>

0001f726 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1f726:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1f728:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1f72a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1f72c:	08 95       	ret

0001f72e <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1f72e:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1f730:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1f732:	7f 4f       	sbci	r23, 0xFF	; 255

0001f734 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1f734:	08 95       	ret

0001f736 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1f736:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1f738:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1f73a:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1f73c:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1f73e:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1f740:	0d c0       	rjmp	.+26     	; 0x1f75c <__udivmodsi4_ep>

0001f742 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1f742:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1f744:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1f746:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1f748:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1f74a:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1f74c:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1f74e:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1f750:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1f752:	20 f0       	brcs	.+8      	; 0x1f75c <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1f754:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1f756:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1f758:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1f75a:	f5 0b       	sbc	r31, r21

0001f75c <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1f75c:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1f75e:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1f760:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1f762:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1f764:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1f766:	69 f7       	brne	.-38     	; 0x1f742 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1f768:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1f76a:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1f76c:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1f76e:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1f770:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1f772:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1f774:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1f776:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1f778:	08 95       	ret

0001f77a <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1f77a:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1f77c:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1f77e:	1e f4       	brtc	.+6      	; 0x1f786 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1f780:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1f782:	0e 94 d4 fb 	call	0x1f7a8	; 0x1f7a8 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1f786:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1f788:	07 d0       	rcall	.+14     	; 0x1f798 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1f78a:	0e 94 9b fb 	call	0x1f736	; 0x1f736 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1f78e:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1f790:	03 d0       	rcall	.+6      	; 0x1f798 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1f792:	4e f4       	brtc	.+18     	; 0x1f7a6 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1f794:	0c 94 d4 fb 	jmp	0x1f7a8	; 0x1f7a8 <__negsi2>

0001f798 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1f798:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1f79a:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1f79c:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1f79e:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1f7a0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1f7a2:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1f7a4:	5f 4f       	sbci	r21, 0xFF	; 255

0001f7a6 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1f7a6:	08 95       	ret

0001f7a8 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1f7a8:	90 95       	com	r25
   1f7aa:	80 95       	com	r24
   1f7ac:	70 95       	com	r23
   1f7ae:	61 95       	neg	r22
   1f7b0:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7b2:	8f 4f       	sbci	r24, 0xFF	; 255
   1f7b4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1f7b6:	08 95       	ret

0001f7b8 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1f7b8:	0e 94 e7 fb 	call	0x1f7ce	; 0x1f7ce <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1f7bc:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1f7be:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1f7c0:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1f7c2:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1f7c4:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1f7c6:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1f7c8:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1f7ca:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1f7cc:	08 95       	ret

0001f7ce <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1f7ce:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1f7d0:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1f7d2:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1f7d4:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1f7d6:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1f7d8:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1f7da:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1f7dc:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1f7de:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1f7e0:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1f7e2:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1f7e4:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1f7e6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1f7e8:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1f7ea:	08 95       	ret

0001f7ec <__subsf3>:
__subsf3():
   1f7ec:	50 58       	subi	r21, 0x80	; 128

0001f7ee <__addsf3>:
   1f7ee:	bb 27       	eor	r27, r27
   1f7f0:	aa 27       	eor	r26, r26
   1f7f2:	0e 94 0e fc 	call	0x1f81c	; 0x1f81c <__addsf3x>
   1f7f6:	0c 94 13 fb 	jmp	0x1f626	; 0x1f626 <__fp_round>
__addsf3():
   1f7fa:	0e 94 05 fb 	call	0x1f60a	; 0x1f60a <__fp_pscA>
   1f7fe:	38 f0       	brcs	.+14     	; 0x1f80e <__addsf3+0x20>
   1f800:	0e 94 0c fb 	call	0x1f618	; 0x1f618 <__fp_pscB>
   1f804:	20 f0       	brcs	.+8      	; 0x1f80e <__addsf3+0x20>
   1f806:	39 f4       	brne	.+14     	; 0x1f816 <__addsf3+0x28>
   1f808:	9f 3f       	cpi	r25, 0xFF	; 255
   1f80a:	19 f4       	brne	.+6      	; 0x1f812 <__addsf3+0x24>
   1f80c:	26 f4       	brtc	.+8      	; 0x1f816 <__addsf3+0x28>
   1f80e:	0c 94 02 fb 	jmp	0x1f604	; 0x1f604 <__fp_nan>
   1f812:	0e f4       	brtc	.+2      	; 0x1f816 <__addsf3+0x28>
   1f814:	e0 95       	com	r30
   1f816:	e7 fb       	bst	r30, 7
   1f818:	0c 94 fc fa 	jmp	0x1f5f8	; 0x1f5f8 <__fp_inf>

0001f81c <__addsf3x>:
__addsf3x():
   1f81c:	e9 2f       	mov	r30, r25
   1f81e:	0e 94 24 fb 	call	0x1f648	; 0x1f648 <__fp_split3>
   1f822:	58 f3       	brcs	.-42     	; 0x1f7fa <__addsf3+0xc>
   1f824:	ba 17       	cp	r27, r26
   1f826:	62 07       	cpc	r22, r18
   1f828:	73 07       	cpc	r23, r19
   1f82a:	84 07       	cpc	r24, r20
   1f82c:	95 07       	cpc	r25, r21
   1f82e:	20 f0       	brcs	.+8      	; 0x1f838 <__addsf3x+0x1c>
   1f830:	79 f4       	brne	.+30     	; 0x1f850 <__addsf3x+0x34>
   1f832:	a6 f5       	brtc	.+104    	; 0x1f89c <__addsf3x+0x80>
   1f834:	0c 94 46 fb 	jmp	0x1f68c	; 0x1f68c <__fp_zero>
   1f838:	0e f4       	brtc	.+2      	; 0x1f83c <__addsf3x+0x20>
   1f83a:	e0 95       	com	r30
   1f83c:	0b 2e       	mov	r0, r27
   1f83e:	ba 2f       	mov	r27, r26
   1f840:	a0 2d       	mov	r26, r0
   1f842:	0b 01       	movw	r0, r22
   1f844:	b9 01       	movw	r22, r18
   1f846:	90 01       	movw	r18, r0
   1f848:	0c 01       	movw	r0, r24
   1f84a:	ca 01       	movw	r24, r20
   1f84c:	a0 01       	movw	r20, r0
   1f84e:	11 24       	eor	r1, r1
   1f850:	ff 27       	eor	r31, r31
   1f852:	59 1b       	sub	r21, r25
   1f854:	99 f0       	breq	.+38     	; 0x1f87c <__addsf3x+0x60>
   1f856:	59 3f       	cpi	r21, 0xF9	; 249
   1f858:	50 f4       	brcc	.+20     	; 0x1f86e <__addsf3x+0x52>
   1f85a:	50 3e       	cpi	r21, 0xE0	; 224
   1f85c:	68 f1       	brcs	.+90     	; 0x1f8b8 <__addsf3x+0x9c>
   1f85e:	1a 16       	cp	r1, r26
   1f860:	f0 40       	sbci	r31, 0x00	; 0
   1f862:	a2 2f       	mov	r26, r18
   1f864:	23 2f       	mov	r18, r19
   1f866:	34 2f       	mov	r19, r20
   1f868:	44 27       	eor	r20, r20
   1f86a:	58 5f       	subi	r21, 0xF8	; 248
   1f86c:	f3 cf       	rjmp	.-26     	; 0x1f854 <__addsf3x+0x38>
   1f86e:	46 95       	lsr	r20
   1f870:	37 95       	ror	r19
   1f872:	27 95       	ror	r18
   1f874:	a7 95       	ror	r26
   1f876:	f0 40       	sbci	r31, 0x00	; 0
   1f878:	53 95       	inc	r21
   1f87a:	c9 f7       	brne	.-14     	; 0x1f86e <__addsf3x+0x52>
   1f87c:	7e f4       	brtc	.+30     	; 0x1f89c <__addsf3x+0x80>
   1f87e:	1f 16       	cp	r1, r31
   1f880:	ba 0b       	sbc	r27, r26
   1f882:	62 0b       	sbc	r22, r18
   1f884:	73 0b       	sbc	r23, r19
   1f886:	84 0b       	sbc	r24, r20
   1f888:	ba f0       	brmi	.+46     	; 0x1f8b8 <__addsf3x+0x9c>
   1f88a:	91 50       	subi	r25, 0x01	; 1
   1f88c:	a1 f0       	breq	.+40     	; 0x1f8b6 <__addsf3x+0x9a>
   1f88e:	ff 0f       	add	r31, r31
   1f890:	bb 1f       	adc	r27, r27
   1f892:	66 1f       	adc	r22, r22
   1f894:	77 1f       	adc	r23, r23
   1f896:	88 1f       	adc	r24, r24
   1f898:	c2 f7       	brpl	.-16     	; 0x1f88a <__addsf3x+0x6e>
   1f89a:	0e c0       	rjmp	.+28     	; 0x1f8b8 <__addsf3x+0x9c>
   1f89c:	ba 0f       	add	r27, r26
   1f89e:	62 1f       	adc	r22, r18
   1f8a0:	73 1f       	adc	r23, r19
   1f8a2:	84 1f       	adc	r24, r20
   1f8a4:	48 f4       	brcc	.+18     	; 0x1f8b8 <__addsf3x+0x9c>
   1f8a6:	87 95       	ror	r24
   1f8a8:	77 95       	ror	r23
   1f8aa:	67 95       	ror	r22
   1f8ac:	b7 95       	ror	r27
   1f8ae:	f7 95       	ror	r31
   1f8b0:	9e 3f       	cpi	r25, 0xFE	; 254
   1f8b2:	08 f0       	brcs	.+2      	; 0x1f8b6 <__addsf3x+0x9a>
   1f8b4:	b0 cf       	rjmp	.-160    	; 0x1f816 <__addsf3+0x28>
   1f8b6:	93 95       	inc	r25
   1f8b8:	88 0f       	add	r24, r24
   1f8ba:	08 f0       	brcs	.+2      	; 0x1f8be <__addsf3x+0xa2>
   1f8bc:	99 27       	eor	r25, r25
   1f8be:	ee 0f       	add	r30, r30
   1f8c0:	97 95       	ror	r25
   1f8c2:	87 95       	ror	r24
   1f8c4:	08 95       	ret

0001f8c6 <__divsf3>:
   1f8c6:	0e 94 77 fc 	call	0x1f8ee	; 0x1f8ee <__divsf3x>
   1f8ca:	0c 94 13 fb 	jmp	0x1f626	; 0x1f626 <__fp_round>
   1f8ce:	0e 94 0c fb 	call	0x1f618	; 0x1f618 <__fp_pscB>
   1f8d2:	58 f0       	brcs	.+22     	; 0x1f8ea <__divsf3+0x24>
   1f8d4:	0e 94 05 fb 	call	0x1f60a	; 0x1f60a <__fp_pscA>
   1f8d8:	40 f0       	brcs	.+16     	; 0x1f8ea <__divsf3+0x24>
   1f8da:	29 f4       	brne	.+10     	; 0x1f8e6 <__divsf3+0x20>
   1f8dc:	5f 3f       	cpi	r21, 0xFF	; 255
   1f8de:	29 f0       	breq	.+10     	; 0x1f8ea <__divsf3+0x24>
   1f8e0:	0c 94 fc fa 	jmp	0x1f5f8	; 0x1f5f8 <__fp_inf>
   1f8e4:	51 11       	cpse	r21, r1
   1f8e6:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <__fp_szero>
__divsf3():
   1f8ea:	0c 94 02 fb 	jmp	0x1f604	; 0x1f604 <__fp_nan>

0001f8ee <__divsf3x>:
__divsf3x():
   1f8ee:	0e 94 24 fb 	call	0x1f648	; 0x1f648 <__fp_split3>
   1f8f2:	68 f3       	brcs	.-38     	; 0x1f8ce <__divsf3+0x8>

0001f8f4 <__divsf3_pse>:
   1f8f4:	99 23       	and	r25, r25
   1f8f6:	b1 f3       	breq	.-20     	; 0x1f8e4 <__divsf3+0x1e>
   1f8f8:	55 23       	and	r21, r21
   1f8fa:	91 f3       	breq	.-28     	; 0x1f8e0 <__divsf3+0x1a>
   1f8fc:	95 1b       	sub	r25, r21
   1f8fe:	55 0b       	sbc	r21, r21
   1f900:	bb 27       	eor	r27, r27
   1f902:	aa 27       	eor	r26, r26
   1f904:	62 17       	cp	r22, r18
   1f906:	73 07       	cpc	r23, r19
   1f908:	84 07       	cpc	r24, r20
   1f90a:	38 f0       	brcs	.+14     	; 0x1f91a <__divsf3_pse+0x26>
   1f90c:	9f 5f       	subi	r25, 0xFF	; 255
   1f90e:	5f 4f       	sbci	r21, 0xFF	; 255
   1f910:	22 0f       	add	r18, r18
   1f912:	33 1f       	adc	r19, r19
   1f914:	44 1f       	adc	r20, r20
   1f916:	aa 1f       	adc	r26, r26
   1f918:	a9 f3       	breq	.-22     	; 0x1f904 <__divsf3_pse+0x10>
   1f91a:	35 d0       	rcall	.+106    	; 0x1f986 <__divsf3_pse+0x92>
   1f91c:	0e 2e       	mov	r0, r30
   1f91e:	3a f0       	brmi	.+14     	; 0x1f92e <__divsf3_pse+0x3a>
   1f920:	e0 e8       	ldi	r30, 0x80	; 128
   1f922:	32 d0       	rcall	.+100    	; 0x1f988 <__divsf3_pse+0x94>
   1f924:	91 50       	subi	r25, 0x01	; 1
   1f926:	50 40       	sbci	r21, 0x00	; 0
   1f928:	e6 95       	lsr	r30
   1f92a:	00 1c       	adc	r0, r0
   1f92c:	ca f7       	brpl	.-14     	; 0x1f920 <__divsf3_pse+0x2c>
   1f92e:	2b d0       	rcall	.+86     	; 0x1f986 <__divsf3_pse+0x92>
   1f930:	fe 2f       	mov	r31, r30
   1f932:	29 d0       	rcall	.+82     	; 0x1f986 <__divsf3_pse+0x92>
   1f934:	66 0f       	add	r22, r22
   1f936:	77 1f       	adc	r23, r23
   1f938:	88 1f       	adc	r24, r24
   1f93a:	bb 1f       	adc	r27, r27
   1f93c:	26 17       	cp	r18, r22
   1f93e:	37 07       	cpc	r19, r23
   1f940:	48 07       	cpc	r20, r24
   1f942:	ab 07       	cpc	r26, r27
   1f944:	b0 e8       	ldi	r27, 0x80	; 128
   1f946:	09 f0       	breq	.+2      	; 0x1f94a <__divsf3_pse+0x56>
   1f948:	bb 0b       	sbc	r27, r27
   1f94a:	80 2d       	mov	r24, r0
   1f94c:	bf 01       	movw	r22, r30
   1f94e:	ff 27       	eor	r31, r31
   1f950:	93 58       	subi	r25, 0x83	; 131
   1f952:	5f 4f       	sbci	r21, 0xFF	; 255
   1f954:	3a f0       	brmi	.+14     	; 0x1f964 <__divsf3_pse+0x70>
   1f956:	9e 3f       	cpi	r25, 0xFE	; 254
   1f958:	51 05       	cpc	r21, r1
   1f95a:	78 f0       	brcs	.+30     	; 0x1f97a <__divsf3_pse+0x86>
   1f95c:	0c 94 fc fa 	jmp	0x1f5f8	; 0x1f5f8 <__fp_inf>
   1f960:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <__fp_szero>
   1f964:	5f 3f       	cpi	r21, 0xFF	; 255
   1f966:	e4 f3       	brlt	.-8      	; 0x1f960 <__divsf3_pse+0x6c>
   1f968:	98 3e       	cpi	r25, 0xE8	; 232
   1f96a:	d4 f3       	brlt	.-12     	; 0x1f960 <__divsf3_pse+0x6c>
   1f96c:	86 95       	lsr	r24
   1f96e:	77 95       	ror	r23
   1f970:	67 95       	ror	r22
   1f972:	b7 95       	ror	r27
   1f974:	f7 95       	ror	r31
   1f976:	9f 5f       	subi	r25, 0xFF	; 255
   1f978:	c9 f7       	brne	.-14     	; 0x1f96c <__divsf3_pse+0x78>
   1f97a:	88 0f       	add	r24, r24
   1f97c:	91 1d       	adc	r25, r1
   1f97e:	96 95       	lsr	r25
   1f980:	87 95       	ror	r24
   1f982:	97 f9       	bld	r25, 7
   1f984:	08 95       	ret
   1f986:	e1 e0       	ldi	r30, 0x01	; 1
   1f988:	66 0f       	add	r22, r22
   1f98a:	77 1f       	adc	r23, r23
   1f98c:	88 1f       	adc	r24, r24
   1f98e:	bb 1f       	adc	r27, r27
   1f990:	62 17       	cp	r22, r18
   1f992:	73 07       	cpc	r23, r19
   1f994:	84 07       	cpc	r24, r20
   1f996:	ba 07       	cpc	r27, r26
   1f998:	20 f0       	brcs	.+8      	; 0x1f9a2 <__divsf3_pse+0xae>
   1f99a:	62 1b       	sub	r22, r18
   1f99c:	73 0b       	sbc	r23, r19
   1f99e:	84 0b       	sbc	r24, r20
   1f9a0:	ba 0b       	sbc	r27, r26
   1f9a2:	ee 1f       	adc	r30, r30
   1f9a4:	88 f7       	brcc	.-30     	; 0x1f988 <__divsf3_pse+0x94>
   1f9a6:	e0 95       	com	r30
   1f9a8:	08 95       	ret

0001f9aa <__fixsfsi>:
   1f9aa:	0e 94 dc fc 	call	0x1f9b8	; 0x1f9b8 <__fixunssfsi>
   1f9ae:	68 94       	set
   1f9b0:	b1 11       	cpse	r27, r1
   1f9b2:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <__fp_szero>
   1f9b6:	08 95       	ret

0001f9b8 <__fixunssfsi>:
   1f9b8:	0e 94 2c fb 	call	0x1f658	; 0x1f658 <__fp_splitA>
   1f9bc:	88 f0       	brcs	.+34     	; 0x1f9e0 <__fixunssfsi+0x28>
   1f9be:	9f 57       	subi	r25, 0x7F	; 127
   1f9c0:	98 f0       	brcs	.+38     	; 0x1f9e8 <__fixunssfsi+0x30>
   1f9c2:	b9 2f       	mov	r27, r25
   1f9c4:	99 27       	eor	r25, r25
   1f9c6:	b7 51       	subi	r27, 0x17	; 23
   1f9c8:	b0 f0       	brcs	.+44     	; 0x1f9f6 <__fixunssfsi+0x3e>
__fixunssfsi():
   1f9ca:	e1 f0       	breq	.+56     	; 0x1fa04 <__fixunssfsi+0x4c>
   1f9cc:	66 0f       	add	r22, r22
   1f9ce:	77 1f       	adc	r23, r23
   1f9d0:	88 1f       	adc	r24, r24
   1f9d2:	99 1f       	adc	r25, r25
   1f9d4:	1a f0       	brmi	.+6      	; 0x1f9dc <__fixunssfsi+0x24>
   1f9d6:	ba 95       	dec	r27
   1f9d8:	c9 f7       	brne	.-14     	; 0x1f9cc <__fixunssfsi+0x14>
   1f9da:	14 c0       	rjmp	.+40     	; 0x1fa04 <__fixunssfsi+0x4c>
   1f9dc:	b1 30       	cpi	r27, 0x01	; 1
   1f9de:	91 f0       	breq	.+36     	; 0x1fa04 <__fixunssfsi+0x4c>
   1f9e0:	0e 94 46 fb 	call	0x1f68c	; 0x1f68c <__fp_zero>
   1f9e4:	b1 e0       	ldi	r27, 0x01	; 1
   1f9e6:	08 95       	ret
   1f9e8:	0c 94 46 fb 	jmp	0x1f68c	; 0x1f68c <__fp_zero>
   1f9ec:	67 2f       	mov	r22, r23
   1f9ee:	78 2f       	mov	r23, r24
   1f9f0:	88 27       	eor	r24, r24
   1f9f2:	b8 5f       	subi	r27, 0xF8	; 248
   1f9f4:	39 f0       	breq	.+14     	; 0x1fa04 <__fixunssfsi+0x4c>
   1f9f6:	b9 3f       	cpi	r27, 0xF9	; 249
   1f9f8:	cc f3       	brlt	.-14     	; 0x1f9ec <__fixunssfsi+0x34>
   1f9fa:	86 95       	lsr	r24
   1f9fc:	77 95       	ror	r23
   1f9fe:	67 95       	ror	r22
   1fa00:	b3 95       	inc	r27
   1fa02:	d9 f7       	brne	.-10     	; 0x1f9fa <__fixunssfsi+0x42>
   1fa04:	3e f4       	brtc	.+14     	; 0x1fa14 <__fixunssfsi+0x5c>
   1fa06:	90 95       	com	r25
   1fa08:	80 95       	com	r24
   1fa0a:	70 95       	com	r23
   1fa0c:	61 95       	neg	r22
   1fa0e:	7f 4f       	sbci	r23, 0xFF	; 255
   1fa10:	8f 4f       	sbci	r24, 0xFF	; 255
   1fa12:	9f 4f       	sbci	r25, 0xFF	; 255
   1fa14:	08 95       	ret

0001fa16 <__gesf2>:
__gesf2():
   1fa16:	0e 94 6b fa 	call	0x1f4d6	; 0x1f4d6 <__fp_cmp>
   1fa1a:	08 f4       	brcc	.+2      	; 0x1fa1e <__gesf2+0x8>
   1fa1c:	8f ef       	ldi	r24, 0xFF	; 255
   1fa1e:	08 95       	ret

0001fa20 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1fa20:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1fa22:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1fa24:	04 c0       	rjmp	.+8      	; 0x1fa2e <__udivmodqi4_ep>

0001fa26 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1fa26:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1fa28:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1fa2a:	08 f0       	brcs	.+2      	; 0x1fa2e <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1fa2c:	96 1b       	sub	r25, r22

0001fa2e <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1fa2e:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1fa30:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1fa32:	c9 f7       	brne	.-14     	; 0x1fa26 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1fa34:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1fa36:	08 95       	ret

0001fa38 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1fa38:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1fa3a:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1fa3c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1fa3e:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1fa40:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1fa42:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1fa44:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1fa46:	19 94       	eijmp

0001fa48 <realloc>:
realloc():
   1fa48:	4f 92       	push	r4
   1fa4a:	5f 92       	push	r5
   1fa4c:	6f 92       	push	r6
   1fa4e:	7f 92       	push	r7
   1fa50:	8f 92       	push	r8
   1fa52:	9f 92       	push	r9
   1fa54:	af 92       	push	r10
   1fa56:	bf 92       	push	r11
   1fa58:	cf 92       	push	r12
   1fa5a:	df 92       	push	r13
   1fa5c:	ef 92       	push	r14
   1fa5e:	ff 92       	push	r15
   1fa60:	0f 93       	push	r16
   1fa62:	1f 93       	push	r17
   1fa64:	cf 93       	push	r28
   1fa66:	df 93       	push	r29
   1fa68:	8c 01       	movw	r16, r24
   1fa6a:	00 97       	sbiw	r24, 0x00	; 0
   1fa6c:	99 f4       	brne	.+38     	; 0x1fa94 <realloc+0x4c>
   1fa6e:	cb 01       	movw	r24, r22
   1fa70:	df 91       	pop	r29
   1fa72:	cf 91       	pop	r28
   1fa74:	1f 91       	pop	r17
   1fa76:	0f 91       	pop	r16
   1fa78:	ff 90       	pop	r15
   1fa7a:	ef 90       	pop	r14
   1fa7c:	df 90       	pop	r13
   1fa7e:	cf 90       	pop	r12
   1fa80:	bf 90       	pop	r11
   1fa82:	af 90       	pop	r10
   1fa84:	9f 90       	pop	r9
   1fa86:	8f 90       	pop	r8
   1fa88:	7f 90       	pop	r7
   1fa8a:	6f 90       	pop	r6
   1fa8c:	5f 90       	pop	r5
   1fa8e:	4f 90       	pop	r4
   1fa90:	0c 94 f8 f5 	jmp	0x1ebf0	; 0x1ebf0 <malloc>
   1fa94:	fc 01       	movw	r30, r24
   1fa96:	e6 0f       	add	r30, r22
   1fa98:	f7 1f       	adc	r31, r23
   1fa9a:	9c 01       	movw	r18, r24
   1fa9c:	22 50       	subi	r18, 0x02	; 2
   1fa9e:	31 09       	sbc	r19, r1
   1faa0:	e2 17       	cp	r30, r18
   1faa2:	f3 07       	cpc	r31, r19
   1faa4:	08 f4       	brcc	.+2      	; 0x1faa8 <realloc+0x60>
   1faa6:	ae c0       	rjmp	.+348    	; 0x1fc04 <realloc+0x1bc>
   1faa8:	d9 01       	movw	r26, r18
   1faaa:	cd 91       	ld	r28, X+
   1faac:	dc 91       	ld	r29, X
   1faae:	11 97       	sbiw	r26, 0x01	; 1
   1fab0:	c6 17       	cp	r28, r22
   1fab2:	d7 07       	cpc	r29, r23
   1fab4:	20 f1       	brcs	.+72     	; 0x1fafe <realloc+0xb6>
   1fab6:	c5 30       	cpi	r28, 0x05	; 5
   1fab8:	d1 05       	cpc	r29, r1
   1faba:	78 f0       	brcs	.+30     	; 0x1fada <realloc+0x92>
   1fabc:	ce 01       	movw	r24, r28
   1fabe:	04 97       	sbiw	r24, 0x04	; 4
   1fac0:	86 17       	cp	r24, r22
   1fac2:	97 07       	cpc	r25, r23
   1fac4:	50 f0       	brcs	.+20     	; 0x1fada <realloc+0x92>
   1fac6:	c6 1b       	sub	r28, r22
   1fac8:	d7 0b       	sbc	r29, r23
   1faca:	22 97       	sbiw	r28, 0x02	; 2
   1facc:	c1 93       	st	Z+, r28
   1face:	d1 93       	st	Z+, r29
   1fad0:	6d 93       	st	X+, r22
   1fad2:	7c 93       	st	X, r23
   1fad4:	cf 01       	movw	r24, r30
   1fad6:	0e 94 94 f6 	call	0x1ed28	; 0x1ed28 <free>
   1fada:	c8 01       	movw	r24, r16
   1fadc:	df 91       	pop	r29
   1fade:	cf 91       	pop	r28
   1fae0:	1f 91       	pop	r17
   1fae2:	0f 91       	pop	r16
   1fae4:	ff 90       	pop	r15
   1fae6:	ef 90       	pop	r14
   1fae8:	df 90       	pop	r13
   1faea:	cf 90       	pop	r12
   1faec:	bf 90       	pop	r11
   1faee:	af 90       	pop	r10
   1faf0:	9f 90       	pop	r9
   1faf2:	8f 90       	pop	r8
   1faf4:	7f 90       	pop	r7
   1faf6:	6f 90       	pop	r6
   1faf8:	5f 90       	pop	r5
   1fafa:	4f 90       	pop	r4
   1fafc:	08 95       	ret
   1fafe:	5b 01       	movw	r10, r22
   1fb00:	ac 1a       	sub	r10, r28
   1fb02:	bd 0a       	sbc	r11, r29
   1fb04:	4c 01       	movw	r8, r24
   1fb06:	8c 0e       	add	r8, r28
   1fb08:	9d 1e       	adc	r9, r29
   1fb0a:	a0 91 1f 14 	lds	r26, 0x141F	; 0x80141f <__flp>
   1fb0e:	b0 91 20 14 	lds	r27, 0x1420	; 0x801420 <__flp+0x1>
   1fb12:	51 2c       	mov	r5, r1
   1fb14:	41 2c       	mov	r4, r1
   1fb16:	f1 2c       	mov	r15, r1
   1fb18:	e1 2c       	mov	r14, r1
   1fb1a:	10 97       	sbiw	r26, 0x00	; 0
   1fb1c:	31 f5       	brne	.+76     	; 0x1fb6a <realloc+0x122>
   1fb1e:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <__brkval>
   1fb22:	90 91 1e 14 	lds	r25, 0x141E	; 0x80141e <__brkval+0x1>
   1fb26:	88 15       	cp	r24, r8
   1fb28:	99 05       	cpc	r25, r9
   1fb2a:	09 f0       	breq	.+2      	; 0x1fb2e <realloc+0xe6>
   1fb2c:	5c c0       	rjmp	.+184    	; 0x1fbe6 <realloc+0x19e>
   1fb2e:	46 16       	cp	r4, r22
   1fb30:	57 06       	cpc	r5, r23
   1fb32:	08 f0       	brcs	.+2      	; 0x1fb36 <realloc+0xee>
   1fb34:	58 c0       	rjmp	.+176    	; 0x1fbe6 <realloc+0x19e>
   1fb36:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__malloc_heap_end>
   1fb3a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1fb3e:	00 97       	sbiw	r24, 0x00	; 0
   1fb40:	41 f4       	brne	.+16     	; 0x1fb52 <realloc+0x10a>
   1fb42:	8d b7       	in	r24, 0x3d	; 61
   1fb44:	9e b7       	in	r25, 0x3e	; 62
   1fb46:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1fb4a:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1fb4e:	84 1b       	sub	r24, r20
   1fb50:	95 0b       	sbc	r25, r21
   1fb52:	e8 17       	cp	r30, r24
   1fb54:	f9 07       	cpc	r31, r25
   1fb56:	08 f0       	brcs	.+2      	; 0x1fb5a <realloc+0x112>
   1fb58:	55 c0       	rjmp	.+170    	; 0x1fc04 <realloc+0x1bc>
   1fb5a:	f0 93 1e 14 	sts	0x141E, r31	; 0x80141e <__brkval+0x1>
   1fb5e:	e0 93 1d 14 	sts	0x141D, r30	; 0x80141d <__brkval>
   1fb62:	f9 01       	movw	r30, r18
   1fb64:	71 83       	std	Z+1, r23	; 0x01
   1fb66:	60 83       	st	Z, r22
   1fb68:	b8 cf       	rjmp	.-144    	; 0x1fada <realloc+0x92>
   1fb6a:	8d 91       	ld	r24, X+
   1fb6c:	9c 91       	ld	r25, X
   1fb6e:	11 97       	sbiw	r26, 0x01	; 1
   1fb70:	12 96       	adiw	r26, 0x02	; 2
   1fb72:	6c 90       	ld	r6, X
   1fb74:	12 97       	sbiw	r26, 0x02	; 2
   1fb76:	13 96       	adiw	r26, 0x03	; 3
   1fb78:	7c 90       	ld	r7, X
   1fb7a:	13 97       	sbiw	r26, 0x03	; 3
   1fb7c:	a8 15       	cp	r26, r8
   1fb7e:	b9 05       	cpc	r27, r9
   1fb80:	59 f5       	brne	.+86     	; 0x1fbd8 <realloc+0x190>
   1fb82:	6c 01       	movw	r12, r24
   1fb84:	42 e0       	ldi	r20, 0x02	; 2
   1fb86:	c4 0e       	add	r12, r20
   1fb88:	d1 1c       	adc	r13, r1
   1fb8a:	ca 14       	cp	r12, r10
   1fb8c:	db 04       	cpc	r13, r11
   1fb8e:	20 f1       	brcs	.+72     	; 0x1fbd8 <realloc+0x190>
   1fb90:	ac 01       	movw	r20, r24
   1fb92:	4a 19       	sub	r20, r10
   1fb94:	5b 09       	sbc	r21, r11
   1fb96:	da 01       	movw	r26, r20
   1fb98:	12 96       	adiw	r26, 0x02	; 2
   1fb9a:	15 97       	sbiw	r26, 0x05	; 5
   1fb9c:	80 f0       	brcs	.+32     	; 0x1fbbe <realloc+0x176>
   1fb9e:	62 82       	std	Z+2, r6	; 0x02
   1fba0:	73 82       	std	Z+3, r7	; 0x03
   1fba2:	51 83       	std	Z+1, r21	; 0x01
   1fba4:	40 83       	st	Z, r20
   1fba6:	d9 01       	movw	r26, r18
   1fba8:	6d 93       	st	X+, r22
   1fbaa:	7c 93       	st	X, r23
   1fbac:	e1 14       	cp	r14, r1
   1fbae:	f1 04       	cpc	r15, r1
   1fbb0:	71 f0       	breq	.+28     	; 0x1fbce <realloc+0x186>
   1fbb2:	d7 01       	movw	r26, r14
   1fbb4:	13 96       	adiw	r26, 0x03	; 3
   1fbb6:	fc 93       	st	X, r31
   1fbb8:	ee 93       	st	-X, r30
   1fbba:	12 97       	sbiw	r26, 0x02	; 2
   1fbbc:	8e cf       	rjmp	.-228    	; 0x1fada <realloc+0x92>
   1fbbe:	22 96       	adiw	r28, 0x02	; 2
   1fbc0:	8c 0f       	add	r24, r28
   1fbc2:	9d 1f       	adc	r25, r29
   1fbc4:	f9 01       	movw	r30, r18
   1fbc6:	91 83       	std	Z+1, r25	; 0x01
   1fbc8:	80 83       	st	Z, r24
   1fbca:	f3 01       	movw	r30, r6
   1fbcc:	ef cf       	rjmp	.-34     	; 0x1fbac <realloc+0x164>
   1fbce:	f0 93 20 14 	sts	0x1420, r31	; 0x801420 <__flp+0x1>
   1fbd2:	e0 93 1f 14 	sts	0x141F, r30	; 0x80141f <__flp>
   1fbd6:	81 cf       	rjmp	.-254    	; 0x1fada <realloc+0x92>
   1fbd8:	48 16       	cp	r4, r24
   1fbda:	59 06       	cpc	r5, r25
   1fbdc:	08 f4       	brcc	.+2      	; 0x1fbe0 <realloc+0x198>
   1fbde:	2c 01       	movw	r4, r24
   1fbe0:	7d 01       	movw	r14, r26
   1fbe2:	d3 01       	movw	r26, r6
   1fbe4:	9a cf       	rjmp	.-204    	; 0x1fb1a <realloc+0xd2>
   1fbe6:	cb 01       	movw	r24, r22
   1fbe8:	0e 94 f8 f5 	call	0x1ebf0	; 0x1ebf0 <malloc>
   1fbec:	7c 01       	movw	r14, r24
   1fbee:	00 97       	sbiw	r24, 0x00	; 0
   1fbf0:	49 f0       	breq	.+18     	; 0x1fc04 <realloc+0x1bc>
   1fbf2:	ae 01       	movw	r20, r28
   1fbf4:	b8 01       	movw	r22, r16
   1fbf6:	0e 94 0a fe 	call	0x1fc14	; 0x1fc14 <memcpy>
   1fbfa:	c8 01       	movw	r24, r16
   1fbfc:	0e 94 94 f6 	call	0x1ed28	; 0x1ed28 <free>
   1fc00:	87 01       	movw	r16, r14
   1fc02:	6b cf       	rjmp	.-298    	; 0x1fada <realloc+0x92>
   1fc04:	10 e0       	ldi	r17, 0x00	; 0
   1fc06:	00 e0       	ldi	r16, 0x00	; 0
   1fc08:	68 cf       	rjmp	.-304    	; 0x1fada <realloc+0x92>

0001fc0a <abort>:
abort():
   1fc0a:	81 e0       	ldi	r24, 0x01	; 1
   1fc0c:	90 e0       	ldi	r25, 0x00	; 0
   1fc0e:	f8 94       	cli
   1fc10:	0c 94 c5 fe 	jmp	0x1fd8a	; 0x1fd8a <_exit>

0001fc14 <memcpy>:
memcpy():
   1fc14:	fb 01       	movw	r30, r22
   1fc16:	dc 01       	movw	r26, r24
   1fc18:	02 c0       	rjmp	.+4      	; 0x1fc1e <memcpy+0xa>
   1fc1a:	01 90       	ld	r0, Z+
   1fc1c:	0d 92       	st	X+, r0
   1fc1e:	41 50       	subi	r20, 0x01	; 1
   1fc20:	50 40       	sbci	r21, 0x00	; 0
   1fc22:	d8 f7       	brcc	.-10     	; 0x1fc1a <memcpy+0x6>
   1fc24:	08 95       	ret

0001fc26 <strcat>:
strcat():
   1fc26:	fb 01       	movw	r30, r22
   1fc28:	dc 01       	movw	r26, r24
   1fc2a:	0d 90       	ld	r0, X+
   1fc2c:	00 20       	and	r0, r0
   1fc2e:	e9 f7       	brne	.-6      	; 0x1fc2a <strcat+0x4>
   1fc30:	11 97       	sbiw	r26, 0x01	; 1
   1fc32:	01 90       	ld	r0, Z+
   1fc34:	0d 92       	st	X+, r0
   1fc36:	00 20       	and	r0, r0
   1fc38:	e1 f7       	brne	.-8      	; 0x1fc32 <strcat+0xc>
   1fc3a:	08 95       	ret

0001fc3c <strchr>:
strchr():
   1fc3c:	fc 01       	movw	r30, r24
   1fc3e:	81 91       	ld	r24, Z+
   1fc40:	86 17       	cp	r24, r22
   1fc42:	21 f0       	breq	.+8      	; 0x1fc4c <strchr+0x10>
   1fc44:	88 23       	and	r24, r24
   1fc46:	d9 f7       	brne	.-10     	; 0x1fc3e <strchr+0x2>
   1fc48:	99 27       	eor	r25, r25
   1fc4a:	08 95       	ret
   1fc4c:	31 97       	sbiw	r30, 0x01	; 1
   1fc4e:	cf 01       	movw	r24, r30
   1fc50:	08 95       	ret

0001fc52 <strcmp>:
strcmp():
   1fc52:	fb 01       	movw	r30, r22
   1fc54:	dc 01       	movw	r26, r24
   1fc56:	8d 91       	ld	r24, X+
   1fc58:	01 90       	ld	r0, Z+
   1fc5a:	80 19       	sub	r24, r0
   1fc5c:	01 10       	cpse	r0, r1
   1fc5e:	d9 f3       	breq	.-10     	; 0x1fc56 <strcmp+0x4>
   1fc60:	99 0b       	sbc	r25, r25
   1fc62:	08 95       	ret

0001fc64 <strcpy>:
strcpy():
   1fc64:	fb 01       	movw	r30, r22
   1fc66:	dc 01       	movw	r26, r24
   1fc68:	01 90       	ld	r0, Z+
   1fc6a:	0d 92       	st	X+, r0
   1fc6c:	00 20       	and	r0, r0
   1fc6e:	e1 f7       	brne	.-8      	; 0x1fc68 <strcpy+0x4>
   1fc70:	08 95       	ret

0001fc72 <strncmp>:
strncmp():
   1fc72:	fb 01       	movw	r30, r22
   1fc74:	dc 01       	movw	r26, r24
   1fc76:	41 50       	subi	r20, 0x01	; 1
   1fc78:	50 40       	sbci	r21, 0x00	; 0
   1fc7a:	30 f0       	brcs	.+12     	; 0x1fc88 <strncmp+0x16>
   1fc7c:	8d 91       	ld	r24, X+
   1fc7e:	01 90       	ld	r0, Z+
   1fc80:	80 19       	sub	r24, r0
   1fc82:	19 f4       	brne	.+6      	; 0x1fc8a <strncmp+0x18>
   1fc84:	00 20       	and	r0, r0
   1fc86:	b9 f7       	brne	.-18     	; 0x1fc76 <strncmp+0x4>
   1fc88:	88 1b       	sub	r24, r24
   1fc8a:	99 0b       	sbc	r25, r25
   1fc8c:	08 95       	ret

0001fc8e <strncpy>:
strncpy():
   1fc8e:	fb 01       	movw	r30, r22
   1fc90:	dc 01       	movw	r26, r24
   1fc92:	41 50       	subi	r20, 0x01	; 1
   1fc94:	50 40       	sbci	r21, 0x00	; 0
   1fc96:	48 f0       	brcs	.+18     	; 0x1fcaa <strncpy+0x1c>
   1fc98:	01 90       	ld	r0, Z+
   1fc9a:	0d 92       	st	X+, r0
   1fc9c:	00 20       	and	r0, r0
   1fc9e:	c9 f7       	brne	.-14     	; 0x1fc92 <strncpy+0x4>
   1fca0:	01 c0       	rjmp	.+2      	; 0x1fca4 <strncpy+0x16>
   1fca2:	1d 92       	st	X+, r1
   1fca4:	41 50       	subi	r20, 0x01	; 1
   1fca6:	50 40       	sbci	r21, 0x00	; 0
   1fca8:	e0 f7       	brcc	.-8      	; 0x1fca2 <strncpy+0x14>
   1fcaa:	08 95       	ret

0001fcac <printf>:
printf():
   1fcac:	cf 93       	push	r28
   1fcae:	df 93       	push	r29
   1fcb0:	cd b7       	in	r28, 0x3d	; 61
   1fcb2:	de b7       	in	r29, 0x3e	; 62
   1fcb4:	ae 01       	movw	r20, r28
   1fcb6:	4a 5f       	subi	r20, 0xFA	; 250
   1fcb8:	5f 4f       	sbci	r21, 0xFF	; 255
   1fcba:	fa 01       	movw	r30, r20
   1fcbc:	61 91       	ld	r22, Z+
   1fcbe:	71 91       	ld	r23, Z+
   1fcc0:	af 01       	movw	r20, r30
   1fcc2:	80 91 07 14 	lds	r24, 0x1407	; 0x801407 <__iob+0x2>
   1fcc6:	90 91 08 14 	lds	r25, 0x1408	; 0x801408 <__iob+0x3>
   1fcca:	0e 94 61 f2 	call	0x1e4c2	; 0x1e4c2 <vfprintf>
   1fcce:	df 91       	pop	r29
   1fcd0:	cf 91       	pop	r28
   1fcd2:	08 95       	ret

0001fcd4 <puts>:
puts():
   1fcd4:	0f 93       	push	r16
   1fcd6:	1f 93       	push	r17
   1fcd8:	cf 93       	push	r28
   1fcda:	df 93       	push	r29
   1fcdc:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <__iob+0x2>
   1fce0:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <__iob+0x3>
   1fce4:	23 81       	ldd	r18, Z+3	; 0x03
   1fce6:	ec 01       	movw	r28, r24
   1fce8:	10 e0       	ldi	r17, 0x00	; 0
   1fcea:	00 e0       	ldi	r16, 0x00	; 0
   1fcec:	21 fd       	sbrc	r18, 1
   1fcee:	08 c0       	rjmp	.+16     	; 0x1fd00 <puts+0x2c>
   1fcf0:	0f ef       	ldi	r16, 0xFF	; 255
   1fcf2:	1f ef       	ldi	r17, 0xFF	; 255
   1fcf4:	14 c0       	rjmp	.+40     	; 0x1fd1e <puts+0x4a>
   1fcf6:	19 95       	eicall
   1fcf8:	89 2b       	or	r24, r25
   1fcfa:	11 f0       	breq	.+4      	; 0x1fd00 <puts+0x2c>
   1fcfc:	0f ef       	ldi	r16, 0xFF	; 255
   1fcfe:	1f ef       	ldi	r17, 0xFF	; 255
   1fd00:	89 91       	ld	r24, Y+
   1fd02:	60 91 07 14 	lds	r22, 0x1407	; 0x801407 <__iob+0x2>
   1fd06:	70 91 08 14 	lds	r23, 0x1408	; 0x801408 <__iob+0x3>
   1fd0a:	db 01       	movw	r26, r22
   1fd0c:	18 96       	adiw	r26, 0x08	; 8
   1fd0e:	ed 91       	ld	r30, X+
   1fd10:	fc 91       	ld	r31, X
   1fd12:	81 11       	cpse	r24, r1
   1fd14:	f0 cf       	rjmp	.-32     	; 0x1fcf6 <puts+0x22>
   1fd16:	8a e0       	ldi	r24, 0x0A	; 10
   1fd18:	19 95       	eicall
   1fd1a:	89 2b       	or	r24, r25
   1fd1c:	49 f7       	brne	.-46     	; 0x1fcf0 <puts+0x1c>
   1fd1e:	c8 01       	movw	r24, r16
   1fd20:	df 91       	pop	r29
   1fd22:	cf 91       	pop	r28
   1fd24:	1f 91       	pop	r17
   1fd26:	0f 91       	pop	r16
   1fd28:	08 95       	ret

0001fd2a <sprintf>:
sprintf():
   1fd2a:	0f 93       	push	r16
   1fd2c:	1f 93       	push	r17
   1fd2e:	cf 93       	push	r28
   1fd30:	df 93       	push	r29
   1fd32:	cd b7       	in	r28, 0x3d	; 61
   1fd34:	de b7       	in	r29, 0x3e	; 62
   1fd36:	2e 97       	sbiw	r28, 0x0e	; 14
   1fd38:	0f b6       	in	r0, 0x3f	; 63
   1fd3a:	f8 94       	cli
   1fd3c:	de bf       	out	0x3e, r29	; 62
   1fd3e:	0f be       	out	0x3f, r0	; 63
   1fd40:	cd bf       	out	0x3d, r28	; 61
   1fd42:	0e 89       	ldd	r16, Y+22	; 0x16
   1fd44:	1f 89       	ldd	r17, Y+23	; 0x17
   1fd46:	86 e0       	ldi	r24, 0x06	; 6
   1fd48:	8c 83       	std	Y+4, r24	; 0x04
   1fd4a:	1a 83       	std	Y+2, r17	; 0x02
   1fd4c:	09 83       	std	Y+1, r16	; 0x01
   1fd4e:	8f ef       	ldi	r24, 0xFF	; 255
   1fd50:	9f e7       	ldi	r25, 0x7F	; 127
   1fd52:	9e 83       	std	Y+6, r25	; 0x06
   1fd54:	8d 83       	std	Y+5, r24	; 0x05
   1fd56:	ae 01       	movw	r20, r28
   1fd58:	46 5e       	subi	r20, 0xE6	; 230
   1fd5a:	5f 4f       	sbci	r21, 0xFF	; 255
   1fd5c:	68 8d       	ldd	r22, Y+24	; 0x18
   1fd5e:	79 8d       	ldd	r23, Y+25	; 0x19
   1fd60:	ce 01       	movw	r24, r28
   1fd62:	01 96       	adiw	r24, 0x01	; 1
   1fd64:	0e 94 61 f2 	call	0x1e4c2	; 0x1e4c2 <vfprintf>
   1fd68:	2f 81       	ldd	r18, Y+7	; 0x07
   1fd6a:	38 85       	ldd	r19, Y+8	; 0x08
   1fd6c:	02 0f       	add	r16, r18
   1fd6e:	13 1f       	adc	r17, r19
   1fd70:	f8 01       	movw	r30, r16
   1fd72:	10 82       	st	Z, r1
   1fd74:	2e 96       	adiw	r28, 0x0e	; 14
   1fd76:	0f b6       	in	r0, 0x3f	; 63
   1fd78:	f8 94       	cli
   1fd7a:	de bf       	out	0x3e, r29	; 62
   1fd7c:	0f be       	out	0x3f, r0	; 63
   1fd7e:	cd bf       	out	0x3d, r28	; 61
   1fd80:	df 91       	pop	r29
   1fd82:	cf 91       	pop	r28
   1fd84:	1f 91       	pop	r17
   1fd86:	0f 91       	pop	r16
   1fd88:	08 95       	ret

0001fd8a <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1fd8a:	f8 94       	cli

0001fd8c <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1fd8c:	ff cf       	rjmp	.-2      	; 0x1fd8c <__stop_program>
