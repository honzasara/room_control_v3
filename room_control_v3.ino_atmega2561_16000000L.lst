
/tmp/arduino_build_41303/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 f7 46 	jmp	0x8dee	; 0x8dee <__ctors_end>
       4:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
       8:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
       c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      10:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      14:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      18:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      1c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      20:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      24:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      28:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      2c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      30:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      34:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      38:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      3c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      40:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      44:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      48:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      4c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      50:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      54:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      58:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      5c:	0c 94 1d 63 	jmp	0xc63a	; 0xc63a <__vector_23>
      60:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      64:	0c 94 22 62 	jmp	0xc444	; 0xc444 <__vector_25>
      68:	0c 94 f8 61 	jmp	0xc3f0	; 0xc3f0 <__vector_26>
      6c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      70:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      74:	0c 94 67 63 	jmp	0xc6ce	; 0xc6ce <__vector_29>
      78:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      7c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      80:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      84:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      88:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      8c:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      90:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      94:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      98:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      9c:	0c 94 b8 64 	jmp	0xc970	; 0xc970 <__vector_39>
      a0:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      a4:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      a8:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      ac:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      b0:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      b4:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      b8:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      bc:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      c0:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      c4:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>
      c8:	0c 94 28 47 	jmp	0x8e50	; 0x8e50 <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 3d 87 	jmp	0x10e7a	; 0x10e7a <EthernetUDP::beginPacket(char const*, unsigned int)>
      d0:	0c 94 6e 6e 	jmp	0xdcdc	; 0xdcdc <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>
      d4:	0c 94 a2 53 	jmp	0xa744	; 0xa744 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
      d8:	0c 94 df 6e 	jmp	0xddbe	; 0xddbe <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>
      dc:	0c 94 93 6e 	jmp	0xdd26	; 0xdd26 <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>
      e0:	0c 94 74 56 	jmp	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
      e4:	0c 94 2a 56 	jmp	0xac54	; 0xac54 <EthernetClient::peek()>
      e8:	0c 94 2a 47 	jmp	0x8e54	; 0x8e54 <Print::write(unsigned char const*, unsigned int)>
      ec:	0c 94 bb 47 	jmp	0x8f76	; 0x8f76 <turnOffPWM+0xc8>
      f0:	0c 94 e5 6c 	jmp	0xd9ca	; 0xd9ca <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
      f4:	0c 94 7c 61 	jmp	0xc2f8	; 0xc2f8 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
      f8:	0c 94 3c 5f 	jmp	0xbe78	; 0xbe78 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
      fc:	0c 94 fb 7d 	jmp	0xfbf6	; 0xfbf6 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>
     100:	0c 94 1e b4 	jmp	0x1683c	; 0x1683c <HardwareSerial::read()>
     104:	0c 94 2f da 	jmp	0x1b45e	; 0x1b45e <HardwareSerial::flush()>
     108:	0c 94 de 71 	jmp	0xe3bc	; 0xe3bc <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     10c:	0c 94 ee 6c 	jmp	0xd9dc	; 0xd9dc <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>
     110:	0c 94 0e 71 	jmp	0xe21c	; 0xe21c <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     114:	0c 94 c3 78 	jmp	0xf186	; 0xf186 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>
     118:	0c 94 42 5f 	jmp	0xbe84	; 0xbe84 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>
     11c:	0c 94 06 6c 	jmp	0xd80c	; 0xd80c <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>
     120:	0c 94 a8 71 	jmp	0xe350	; 0xe350 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     124:	0c 94 15 49 	jmp	0x922a	; 0x922a <EthernetUDP::remotePort()>
     128:	0c 94 5b 71 	jmp	0xe2b6	; 0xe2b6 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 68 50 	jmp	0xa0d0	; 0xa0d0 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     130:	0c 94 b7 47 	jmp	0x8f6e	; 0x8f6e <turnOffPWM+0xc0>
     134:	0c 94 42 49 	jmp	0x9284	; 0x9284 <EthernetClient::operator==(EthernetClient const&)>
     138:	0c 94 3b 5d 	jmp	0xba76	; 0xba76 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>
     13c:	0c 94 dc 91 	jmp	0x123b8	; 0x123b8 <mqtt_callback(char*, unsigned char*, unsigned int)>
     140:	0c 94 8c 72 	jmp	0xe518	; 0xe518 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     144:	0c 94 7d 6b 	jmp	0xd6fa	; 0xd6fa <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>
     148:	0c 94 11 60 	jmp	0xc022	; 0xc022 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     14c:	0c 94 10 51 	jmp	0xa220	; 0xa220 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>
     150:	0c 94 6e 61 	jmp	0xc2dc	; 0xc2dc <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     154:	0c 94 19 51 	jmp	0xa232	; 0xa232 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>
     158:	0c 94 3b 4b 	jmp	0x9676	; 0x9676 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     15c:	0c 94 4b 6e 	jmp	0xdc96	; 0xdc96 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>
     160:	0c 94 c4 5e 	jmp	0xbd88	; 0xbd88 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     164:	0c 94 f7 6c 	jmp	0xd9ee	; 0xd9ee <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     168:	0c 94 40 51 	jmp	0xa280	; 0xa280 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>
     16c:	0c 94 14 50 	jmp	0xa028	; 0xa028 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     170:	0c 94 db 4f 	jmp	0x9fb6	; 0x9fb6 <valid_ipv4_address_element_string()>
     174:	0c 94 7e 51 	jmp	0xa2fc	; 0xa2fc <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>
     178:	0c 94 2c 48 	jmp	0x9058	; 0x9058 <TwoWire::onRequestService()>
     17c:	0c 94 3f 84 	jmp	0x1087e	; 0x1087e <EthernetClient::read(unsigned char*, unsigned int)>
     180:	0c 94 76 49 	jmp	0x92ec	; 0x92ec <Print::availableForWrite()>
     184:	0c 94 5d 7d 	jmp	0xfaba	; 0xfaba <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     188:	0c 94 dc 79 	jmp	0xf3b8	; 0xf3b8 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>
     18c:	0c 94 2b 49 	jmp	0x9256	; 0x9256 <EthernetServer::write(unsigned char)>
     190:	0c 94 d4 50 	jmp	0xa1a8	; 0xa1a8 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>
     194:	0c 94 80 55 	jmp	0xab00	; 0xab00 <IPAddress::printTo(Print&) const>
     198:	0c 94 19 72 	jmp	0xe432	; 0xe432 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     19c:	0c 94 40 b4 	jmp	0x16880	; 0x16880 <HardwareSerial::available()>
     1a0:	0c 94 b8 5e 	jmp	0xbd70	; 0xbd70 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     1a4:	0c 94 80 49 	jmp	0x9300	; 0x9300 <LCDWIKI_KBV::Get_Height() const>
     1a8:	0c 94 06 73 	jmp	0xe60c	; 0xe60c <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>
     1ac:	0c 94 e4 5c 	jmp	0xb9c8	; 0xb9c8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     1b0:	0c 94 3e 54 	jmp	0xa87c	; 0xa87c <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     1b4:	0c 94 ca 5e 	jmp	0xbd94	; 0xbd94 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>
     1b8:	0c 94 2e 48 	jmp	0x905c	; 0x905c <TwoWire::flush()>
     1bc:	0c 94 e2 4f 	jmp	0x9fc4	; 0x9fc4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     1c0:	0c 94 66 77 	jmp	0xeecc	; 0xeecc <menu_tds_save_offset(unsigned int, float, unsigned char)>
     1c4:	0c 94 a9 47 	jmp	0x8f52	; 0x8f52 <turnOffPWM+0xa4>
     1c8:	0c 94 d9 4f 	jmp	0x9fb2	; 0x9fb2 <valid_true()>
     1cc:	0c 94 e9 48 	jmp	0x91d2	; 0x91d2 <EthernetUDP::flush()>
     1d0:	0c 94 8a 82 	jmp	0x10514	; 0x10514 <EthernetClient::connected()>
     1d4:	0c 94 ba 6b 	jmp	0xd774	; 0xd774 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>
     1d8:	0c 94 4f 50 	jmp	0xa09e	; 0xa09e <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>
     1dc:	0c 94 56 49 	jmp	0x92ac	; 0x92ac <EthernetClient::write(unsigned char)>
     1e0:	0c 94 32 b4 	jmp	0x16864	; 0x16864 <HardwareSerial::peek()>
     1e4:	0c 94 5b 50 	jmp	0xa0b6	; 0xa0b6 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
     1e8:	0c 94 c3 51 	jmp	0xa386	; 0xa386 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>
     1ec:	0c 94 66 5f 	jmp	0xbecc	; 0xbecc <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>
     1f0:	0c 94 8d 47 	jmp	0x8f1a	; 0x8f1a <turnOffPWM+0x6c>
     1f4:	0c 94 6b 56 	jmp	0xacd6	; 0xacd6 <EthernetClient::available()>
     1f8:	0c 94 be 7f 	jmp	0xff7c	; 0xff7c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     1fc:	0c 94 7e 48 	jmp	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
     200:	0c 94 dd 4f 	jmp	0x9fba	; 0x9fba <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>
     204:	0c 94 7b 71 	jmp	0xe2f6	; 0xe2f6 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     208:	0c 94 60 88 	jmp	0x110c0	; 0x110c0 <EthernetServer::begin()>
     20c:	0c 94 42 71 	jmp	0xe284	; 0xe284 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>
     210:	0c 94 ba 47 	jmp	0x8f74	; 0x8f74 <turnOffPWM+0xc6>
     214:	0c 94 7f 7b 	jmp	0xf6fe	; 0xf6fe <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     218:	0c 94 98 50 	jmp	0xa130	; 0xa130 <a2d_complete(unsigned char, unsigned int)>
     21c:	0c 94 0f b4 	jmp	0x1681e	; 0x1681e <HardwareSerial::availableForWrite()>
     220:	0c 94 8e 78 	jmp	0xf11c	; 0xf11c <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>
     224:	0c 94 f7 5e 	jmp	0xbdee	; 0xbdee <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     228:	0c 94 cf 5c 	jmp	0xb99e	; 0xb99e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     22c:	0c 94 1f 4d 	jmp	0x9a3e	; 0x9a3e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     230:	0c 94 c8 5d 	jmp	0xbb90	; 0xbb90 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     234:	0c 94 54 72 	jmp	0xe4a8	; 0xe4a8 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>
     238:	0c 94 ed b3 	jmp	0x167da	; 0x167da <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>
     23c:	0c 94 df 53 	jmp	0xa7be	; 0xa7be <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     240:	0c 94 84 49 	jmp	0x9308	; 0x9308 <LCDWIKI_KBV::Get_Width() const>
     244:	0c 94 e0 4f 	jmp	0x9fc0	; 0x9fc0 <nullfce(unsigned int, unsigned int, unsigned char)>
     248:	0c 94 bd 8b 	jmp	0x1177a	; 0x1177a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     24c:	0c 94 93 47 	jmp	0x8f26	; 0x8f26 <turnOffPWM+0x78>
     250:	0c 94 41 80 	jmp	0x10082	; 0x10082 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     254:	0c 94 6a 53 	jmp	0xa6d4	; 0xa6d4 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     258:	0c 94 5d 84 	jmp	0x108ba	; 0x108ba <EthernetUDP::endPacket()>
     25c:	0c 94 6c 54 	jmp	0xa8d8	; 0xa8d8 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>
     260:	0c 94 84 5f 	jmp	0xbf08	; 0xbf08 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>
     264:	0c 94 4c b4 	jmp	0x16898	; 0x16898 <serialEventRun()>
     268:	0c 94 ff 76 	jmp	0xedfe	; 0xedfe <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 cd 7d 	jmp	0xfb9a	; 0xfb9a <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>
     270:	0c 94 1a 50 	jmp	0xa034	; 0xa034 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>
     274:	0c 94 79 49 	jmp	0x92f2	; 0x92f2 <EthernetUDP::read(char*, unsigned int)>
     278:	0c 94 77 50 	jmp	0xa0ee	; 0xa0ee <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>
     27c:	0c 94 55 73 	jmp	0xe6aa	; 0xe6aa <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     280:	0c 94 29 49 	jmp	0x9252	; 0x9252 <UDP::beginMulticast(IPAddress, unsigned int)>
     284:	0c 94 a5 91 	jmp	0x1234a	; 0x1234a <printf_via_mqtt(char, __file*)>
     288:	0c 94 c7 88 	jmp	0x1118e	; 0x1118e <EthernetClient::write(unsigned char const*, unsigned int)>
     28c:	0c 94 fb 48 	jmp	0x91f6	; 0x91f6 <EthernetUDP::write(unsigned char)>
     290:	0c 94 08 52 	jmp	0xa410	; 0xa410 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>
     294:	0c 94 89 47 	jmp	0x8f12	; 0x8f12 <turnOffPWM+0x64>
     298:	0c 94 ef 55 	jmp	0xabde	; 0xabde <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>
     29c:	0c 94 dc 52 	jmp	0xa5b8	; 0xa5b8 <display_enable_show(unsigned int, unsigned int, unsigned char)>
     2a0:	0c 94 2f 48 	jmp	0x905e	; 0x905e <TwoWire::peek()>
     2a4:	0c 94 a1 7e 	jmp	0xfd42	; 0xfd42 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2a8:	0c 94 11 49 	jmp	0x9222	; 0x9222 <EthernetUDP::available()>
     2ac:	0c 94 0b 76 	jmp	0xec16	; 0xec16 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>
     2b0:	0c 94 cb 70 	jmp	0xe196	; 0xe196 <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>
     2b4:	0c 94 83 7a 	jmp	0xf506	; 0xf506 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2b8:	0c 94 f2 70 	jmp	0xe1e4	; 0xe1e4 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     2bc:	0c 94 35 68 	jmp	0xd06a	; 0xd06a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>
     2c0:	0c 94 ee 83 	jmp	0x107dc	; 0x107dc <EthernetUDP::parsePacket()>
     2c4:	0c 94 f3 81 	jmp	0x103e6	; 0x103e6 <EthernetUDP::stop()>
     2c8:	0c 94 c7 72 	jmp	0xe58e	; 0xe58e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>
     2cc:	0c 94 55 50 	jmp	0xa0aa	; 0xa0aa <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     2d0:	0c 94 05 5b 	jmp	0xb60a	; 0xb60a <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     2d4:	0c 94 99 68 	jmp	0xd132	; 0xd132 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>
     2d8:	0c 94 5e 6f 	jmp	0xdebc	; 0xdebc <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>
     2dc:	0c 94 c9 6c 	jmp	0xd992	; 0xd992 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>
     2e0:	0c 94 de 52 	jmp	0xa5bc	; 0xa5bc <returnnullfceargs(unsigned int, unsigned int, unsigned char)>
     2e4:	0c 94 fe 7d 	jmp	0xfbfc	; 0xfbfc <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 d9 6b 	jmp	0xd7b2	; 0xd7b2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>
     2ec:	0c 94 ca 55 	jmp	0xab94	; 0xab94 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>
     2f0:	0c 94 b3 6f 	jmp	0xdf66	; 0xdf66 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>
     2f4:	0c 94 28 6e 	jmp	0xdc50	; 0xdc50 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>
     2f8:	0c 94 08 82 	jmp	0x10410	; 0x10410 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     2fc:	0c 94 a0 76 	jmp	0xed40	; 0xed40 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>
     300:	0c 94 3d 79 	jmp	0xf27a	; 0xf27a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
     304:	0c 94 f5 6e 	jmp	0xddea	; 0xddea <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>
     308:	0c 94 be 5e 	jmp	0xbd7c	; 0xbd7c <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>
     30c:	0c 94 cb 50 	jmp	0xa196	; 0xa196 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>
     310:	0c 94 08 56 	jmp	0xac10	; 0xac10 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>
     314:	0c 94 ec 61 	jmp	0xc3d8	; 0xc3d8 <serial_putc(char, __file*)>
     318:	0c 94 88 49 	jmp	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     31c:	0c 94 c9 73 	jmp	0xe792	; 0xe792 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>
     320:	0c 94 97 60 	jmp	0xc12e	; 0xc12e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     324:	0c 94 a5 83 	jmp	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
     328:	0c 94 4c 76 	jmp	0xec98	; 0xec98 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>
     32c:	0c 94 3c 6f 	jmp	0xde78	; 0xde78 <helper_display_set_brightness(unsigned int, float, unsigned char)>
     330:	0c 94 97 47 	jmp	0x8f2e	; 0x8f2e <turnOffPWM+0x80>
     334:	0c 94 ca 50 	jmp	0xa194	; 0xa194 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     338:	0c 94 43 51 	jmp	0xa286	; 0xa286 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     33c:	0c 94 d1 5e 	jmp	0xbda2	; 0xbda2 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>
     340:	0c 94 f4 47 	jmp	0x8fe8	; 0x8fe8 <TwoWire::available()>
     344:	0c 94 19 49 	jmp	0x9232	; 0x9232 <EthernetUDP::remoteIP()>
     348:	0c 94 22 75 	jmp	0xea44	; 0xea44 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>
     34c:	0c 94 99 89 	jmp	0x11332	; 0x11332 <EthernetClient::connect(IPAddress, unsigned int)>
     350:	0c 94 a9 77 	jmp	0xef52	; 0xef52 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>
     354:	0c 94 7c 51 	jmp	0xa2f8	; 0xa2f8 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     358:	0c 94 ad 82 	jmp	0x1055a	; 0x1055a <EthernetClient::stop()>
     35c:	0c 94 ef 7a 	jmp	0xf5de	; 0xf5de <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     360:	0c 94 e8 d9 	jmp	0x1b3d0	; 0x1b3d0 <HardwareSerial::write(unsigned char)>
     364:	0c 94 30 77 	jmp	0xee60	; 0xee60 <menu_tds_save_period(unsigned int, float, unsigned char)>
     368:	0c 94 2d 48 	jmp	0x905a	; 0x905a <TwoWire::onReceiveService(unsigned char*, int)>
     36c:	0c 94 4a 51 	jmp	0xa294	; 0xa294 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     370:	0c 94 4d 49 	jmp	0x929a	; 0x929a <EthernetClient::operator bool()>
     374:	0c 94 7f 47 	jmp	0x8efe	; 0x8efe <turnOffPWM+0x50>
     378:	0c 94 9b 47 	jmp	0x8f36	; 0x8f36 <turnOffPWM+0x88>
     37c:	0c 94 41 49 	jmp	0x9282	; 0x9282 <Print::flush()>
     380:	0c 94 da b3 	jmp	0x167b4	; 0x167b4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>
     384:	0c 94 a3 6b 	jmp	0xd746	; 0xd746 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>
     388:	0c 94 51 48 	jmp	0x90a2	; 0x90a2 <TwoWire::write(unsigned char const*, unsigned int)>
     38c:	0c 94 3e 48 	jmp	0x907c	; 0x907c <TwoWire::read()>
     390:	0c 94 43 84 	jmp	0x10886	; 0x10886 <EthernetClient::read()>
     394:	0c 94 8c 6b 	jmp	0xd718	; 0xd718 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>
     398:	0c 94 20 56 	jmp	0xac40	; 0xac40 <Serial0_available()>
     39c:	0c 94 a1 47 	jmp	0x8f42	; 0x8f42 <turnOffPWM+0x94>
     3a0:	0c 94 a1 75 	jmp	0xeb42	; 0xeb42 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3a4:	0c 94 23 51 	jmp	0xa246	; 0xa246 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>
     3a8:	0c 94 91 5f 	jmp	0xbf22	; 0xbf22 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>
     3ac:	0c 94 e1 4f 	jmp	0x9fc2	; 0x9fc2 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>
     3b0:	0c 94 20 75 	jmp	0xea40	; 0xea40 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>
     3b4:	0c 94 1f 6b 	jmp	0xd63e	; 0xd63e <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>
     3b8:	0c 94 0d 4d 	jmp	0x9a1a	; 0x9a1a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     3bc:	0c 94 21 50 	jmp	0xa042	; 0xa042 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>
     3c0:	0c 94 c7 4b 	jmp	0x978e	; 0x978e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     3c4:	0c 94 18 ea 	jmp	0x1d430	; 0x1d430 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404>
     3c8:	0c 94 6c 49 	jmp	0x92d8	; 0x92d8 <EthernetClient::operator!=(EthernetClient const&)>
     3cc:	0c 94 dd 50 	jmp	0xa1ba	; 0xa1ba <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>
     3d0:	0c 94 c7 6c 	jmp	0xd98e	; 0xd98e <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>
     3d4:	0c 94 e6 50 	jmp	0xa1cc	; 0xa1cc <menu_redraw_date(unsigned int, unsigned int, unsigned char)>
     3d8:	0c 94 c4 83 	jmp	0x10788	; 0x10788 <EthernetUDP::read()>
     3dc:	0c 94 19 5e 	jmp	0xbc32	; 0xbc32 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>
     3e0:	0c 94 d4 70 	jmp	0xe1a8	; 0xe1a8 <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>
     3e4:	0c 94 59 5d 	jmp	0xbab2	; 0xbab2 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>
     3e8:	0c 94 2c 51 	jmp	0xa258	; 0xa258 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>
     3ec:	0c 94 a5 73 	jmp	0xe74a	; 0xe74a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     3f0:	0c 94 85 50 	jmp	0xa10a	; 0xa10a <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>
     3f4:	0c 94 86 70 	jmp	0xe10c	; 0xe10c <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     3f8:	0c 94 49 7b 	jmp	0xf692	; 0xf692 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>
     3fc:	0c 94 86 84 	jmp	0x1090c	; 0x1090c <EthernetUDP::begin(unsigned int)>
     400:	0c 94 83 47 	jmp	0x8f06	; 0x8f06 <turnOffPWM+0x58>
     404:	0c 94 e0 52 	jmp	0xa5c0	; 0xa5c0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     408:	0c 94 2e 89 	jmp	0x1125c	; 0x1125c <EthernetServer::write(unsigned char const*, unsigned int)>
     40c:	0c 94 23 88 	jmp	0x11046	; 0x11046 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>
     410:	0c 94 a5 47 	jmp	0x8f4a	; 0x8f4a <turnOffPWM+0x9c>
     414:	0c 94 b0 87 	jmp	0x10f60	; 0x10f60 <EthernetClient::connect(char const*, unsigned int)>
     418:	0c 94 6a 51 	jmp	0xa2d4	; 0xa2d4 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>
     41c:	0c 94 e7 6e 	jmp	0xddce	; 0xddce <helper_set_menu_time_offset(unsigned int, float, unsigned char)>
     420:	0c 94 50 56 	jmp	0xaca0	; 0xaca0 <EthernetUDP::peek()>
     424:	0c 94 dd 70 	jmp	0xe1ba	; 0xe1ba <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     428:	0c 94 77 5d 	jmp	0xbaee	; 0xbaee <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>
     42c:	0c 94 75 47 	jmp	0x8eea	; 0x8eea <turnOffPWM+0x3c>
     430:	0c 94 7b 47 	jmp	0x8ef6	; 0x8ef6 <turnOffPWM+0x48>
     434:	0c 94 e5 77 	jmp	0xefca	; 0xefca <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>
     438:	0c 94 55 49 	jmp	0x92aa	; 0x92aa <EthernetClient::flush()>
     43c:	0c 94 75 50 	jmp	0xa0ea	; 0xa0ea <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     440:	0c 94 65 5e 	jmp	0xbcca	; 0xbcca <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>
     444:	0c 94 b3 47 	jmp	0x8f66	; 0x8f66 <turnOffPWM+0xb8>
     448:	0c 94 48 6f 	jmp	0xde90	; 0xde90 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>
     44c:	0c 94 75 6f 	jmp	0xdeea	; 0xdeea <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>
     450:	0c 94 af 47 	jmp	0x8f5e	; 0x8f5e <turnOffPWM+0xb0>
     454:	0c 94 96 75 	jmp	0xeb2c	; 0xeb2c <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>

00000458 <__trampolines_end>:
__trampolines_end():
     458:	4e 41       	sbci	r20, 0x1E	; 30
     45a:	4e 49       	Address 0x000000000000045a is out of bounds.
.word	0xffff	; ????

0000045b <pstr_inity>:
     45b:	49 4e 49 54 59                                      INITY

00000460 <pstr_inf>:
     460:	49 4e 46                                            INF

00000463 <pwr_m10>:
     463:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     473:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000047b <pwr_p10>:
     47b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     48b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     49b:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     4ab:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     4bb:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4cb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     4db:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     4eb:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     4fb:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     50b:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     51b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     52b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     53b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     54b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     55b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     56b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     57b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     58b:	3d 27                                               ='

0000058d <new_text_switch_brightness_automode>:
     58d:	41 75 74 6f 6d 61 74 69 63 6b 79 20 6a 61 73 00     Automaticky jas.

0000059d <new_text_nastaveni_zobrazeni_full>:
     59d:	4e 61 73 74 61 76 65 6e 69 20 7a 6f 62 72 61 7a     Nastaveni zobraz
     5ad:	65 6e 69 00                                         eni.

000005b1 <new_nastaveni_nrf_input>:
     5b1:	4e 52 46 20 76 73 74 75 70 00                       NRF vstup.

000005bb <new_nastaveni_mqtt_topic>:
     5bb:	4d 51 54 54 20 74 6f 70 69 63 00                    MQTT topic.

000005c6 <new_text_nastaveni_periferii_full>:
     5c6:	4e 61 73 74 61 76 65 6e 69 20 70 65 72 69 66 65     Nastaveni perife
     5d6:	72 69 69 00                                         rii.

000005da <new_text_nastaveni_periferie>:
     5da:	4e 2e 20 70 65 72 69 66 65 72 69 69 00              N. periferii.

000005e7 <new_text_nastaveni_zobrazeni>:
     5e7:	4e 2e 20 7a 6f 62 72 61 7a 65 6e 69 00              N. zobrazeni.

000005f4 <new_text_nastaveni_regulatoru>:
     5f4:	4e 2e 20 72 65 67 75 6c 61 74 6f 72 75 00           N. regulatoru.

00000602 <new_text_nastaveni_system>:
     602:	4e 2e 20 73 79 73 74 65 6d 75 00                    N. systemu.

0000060d <new_text_nastaveni_reload>:
     60d:	52 65 73 74 61 72 74 20 7a 61 72 69 7a 65 6e 69     Restart zarizeni
	...

0000061e <new_text_o_zarizeni>:
     61e:	4f 20 7a 61 72 69 7a 65 6e 69 00                    O zarizeni.

00000629 <nastaveni_default>:
     629:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

00000639 <nastaveni_nrf>:
     639:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

00000647 <new_text_nastaveni_system_full>:
     647:	4e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     Nastaveni system
     657:	75 00                                               u.

00000659 <char_T>:
     659:	54 00                                               T.

0000065b <char_D>:
     65b:	44 00                                               D.

0000065d <char_I>:
     65d:	49 00                                               I.

0000065f <char_P>:
     65f:	50 00                                               P.

00000661 <text_set_default>:
     661:	56 79 63 68 6f 7a 69 20 68 6f 64 6e 6f 74 79 00     Vychozi hodnoty.

00000671 <text_button_mode_cool>:
     671:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

0000067a <text_button_mode_heat>:
     67a:	54 6f 70 65 6e 69 00                                Topeni.

00000681 <text_select_term_mode>:
     681:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     691:	61 74 6f 72 75 00                                   atoru.

00000697 <nastaveni_deassociate_sensor>:
     697:	55 76 6f 6c 6e 69 74 20 63 69 64 6c 6f 00           Uvolnit cidlo.

000006a5 <text_current_ring_mode>:
     6a5:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
     6b5:	75 6c 61 74 6f 72 75 00                             ulatoru.

000006bd <text_nastavit_pid>:
     6bd:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000006c7 <text_assocoivat_output>:
     6c7:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000006d7 <text_assocoivat>:
     6d7:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000006e6 <ring_text_setup>:
     6e6:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000006f0 <text_select_term_default_ring>:
     6f0:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     700:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

0000070b <new_text_set_time_program>:
     70b:	43 61 73 6f 76 65 20 70 72 6f 67 72 61 6d 79 00     Casove programy.

0000071b <new_text_nastaveni_regulatoru_full>:
     71b:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     72b:	74 6f 72 75 00                                      toru.

00000730 <text_rtds_novy>:
     730:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     740:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

0000074b <nastaveni_rtds_subscribe>:
     74b:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

0000075b <nastaveni_tds_offset>:
     75b:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000076b <nastaveni_name_sensor>:
     76b:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000077a <nastaveni_delete_sensor>:
     77a:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000788 <text_tds_sensors>:
     788:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     798:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000007a3 <new_text_ok>:
     7a3:	4f 4b 00                                            OK.

000007a6 <text_special_case>:
     7a6:	40 00                                               @.

000007a8 <text_lower_case>:
     7a8:	61 00                                               a.

000007aa <text_upper_case>:
     7aa:	41 00                                               A.

000007ac <text_delete_char>:
     7ac:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

000007b6 <text_klavesnice>:
     7b6:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

000007c1 <text_zrusit>:
     7c1:	5a 72 75 73 69 74 00                                Zrusit.

000007c8 <text_ulozit>:
     7c8:	55 6c 6f 7a 69 74 00                                Ulozit.

000007cf <text_no>:
     7cf:	4e 65 00                                            Ne.

000007d2 <text_yes>:
     7d2:	41 6e 6f 00                                         Ano.

000007d6 <text_upozorneni>:
     7d6:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

000007e1 <new_text_mqtt_check>:
     7e1:	4d 51 54 54 20 6f 76 65 72 69 74 20 73 70 6f 6a     MQTT overit spoj
     7f1:	65 6e 69 00                                         eni.

000007f5 <new_text_mqtt_pass>:
     7f5:	4d 51 54 54 20 68 65 73 6c 6f 00                    MQTT heslo.

00000800 <new_text_mqtt_user>:
     800:	4d 51 54 54 20 75 7a 69 76 61 74 65 6c 00           MQTT uzivatel.

0000080e <new_text_mqtt_broker>:
     80e:	4d 51 54 54 20 73 65 72 76 65 72 00                 MQTT server.

0000081a <new_text_nastaveni_mqtt_pripojeni>:
     81a:	4e 61 73 74 61 76 65 6e 69 20 4d 51 54 54 00        Nastaveni MQTT.

00000829 <text_select_default_temp>:
     829:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     839:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

00000843 <new_text_time_set_date_manualy>:
     843:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     853:	64 61 74 75 6d 75 00                                datumu.

0000085a <new_text_time_set_time_manualy>:
     85a:	52 75 63 6e 69 20 6e 61 73 74 61 76 65 6e 69 20     Rucni nastaveni 
     86a:	63 61 73 75 00                                      casu.

0000086f <new_text_time_set_offset>:
     86f:	4e 54 50 20 70 6f 73 75 6e 75 74 69 20 63 61 73     NTP posunuti cas
     87f:	75 00                                               u.

00000881 <new_text_ntp_set_server>:
     881:	4e 61 73 74 61 76 65 6e 69 20 4e 54 50 20 73 65     Nastaveni NTP se
     891:	72 76 65 72 75 00                                   rveru.

00000897 <text_ntp_sync_time>:
     897:	41 6b 74 75 61 6c 69 7a 61 63 65 20 63 61 73 75     Aktualizace casu
	...

000008a8 <new_text_nastaveni_casu>:
     8a8:	4e 61 73 74 61 76 65 6e 69 20 63 61 73 75 00        Nastaveni casu.

000008b7 <new_text_scan_onewire_bus>:
     8b7:	53 63 61 6e 20 73 62 65 72 6e 69 63 65 00           Scan sbernice.

000008c5 <new_text_set_network_test_connection>:
     8c5:	54 65 73 74 20 70 72 69 70 6f 6a 65 6e 69 00        Test pripojeni.

000008d4 <new_text_set_network_ip>:
     8d4:	4e 61 73 74 61 76 65 6e 69 20 49 50 00              Nastaveni IP.

000008e1 <new_text_set_network_mask>:
     8e1:	4e 61 73 74 61 76 65 6e 69 20 6d 61 73 6b 79 20     Nastaveni masky 
     8f1:	73 69 74 65 00                                      site.

000008f6 <new_text_set_network_gw>:
     8f6:	4e 61 73 74 61 76 65 6e 69 20 76 79 63 68 6f 7a     Nastaveni vychoz
     906:	69 20 62 72 61 6e 79 00                             i brany.

0000090e <new_text_set_network_name>:
     90e:	4e 61 73 74 61 76 65 6e 69 20 6e 61 7a 76 75 20     Nastaveni nazvu 
     91e:	7a 61 72 69 7a 65 6e 69 00                          zarizeni.

00000927 <new_text_set_network_dns>:
     927:	4e 61 73 74 61 76 65 6e 69 20 44 4e 53 20 73 65     Nastaveni DNS se
     937:	72 76 65 72 75 00                                   rveru.

0000093d <new_text_set_network_mac>:
     93d:	4e 61 73 74 61 76 65 6e 69 20 4d 41 43 20 61 64     Nastaveni MAC ad
     94d:	72 65 73 79 00                                      resy.

00000952 <button_zpet>:
     952:	5a 70 65 74 00                                      Zpet.

00000957 <nastaveni_site>:
     957:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000966 <char_NULL>:
	...

00000967 <nastaveni_text>:
     967:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000971 <funkce_text>:
     971:	46 75 6e 6b 63 65 00                                Funkce.

00000978 <regulator_text>:
     978:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000982 <rf24_pa_dbm_e_str_3>:
     982:	50 41 5f 4d 41 58 00                                PA_MAX.

00000989 <rf24_pa_dbm_e_str_2>:
     989:	50 41 5f 48 49 47 48 00                             PA_HIGH.

00000991 <rf24_pa_dbm_e_str_1>:
     991:	50 41 5f 4c 4f 57 00                                PA_LOW.

00000998 <rf24_pa_dbm_e_str_0>:
     998:	50 41 5f 4d 49 4e 00                                PA_MIN.

0000099f <rf24_crclength_e_str_2>:
     99f:	31 36 20 62 69 74 73 00                             16 bits.

000009a7 <rf24_crclength_e_str_1>:
     9a7:	38 20 62 69 74 73 00                                8 bits.

000009ae <rf24_crclength_e_str_0>:
     9ae:	44 69 73 61 62 6c 65 64 00                          Disabled.

000009b7 <rf24_model_e_str_1>:
     9b7:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000009c1 <rf24_model_e_str_0>:
     9c1:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000009ca <rf24_datarate_e_str_2>:
     9ca:	32 35 30 4b 42 50 53 00                             250KBPS.

000009d2 <rf24_datarate_e_str_1>:
     9d2:	32 4d 42 50 53 00                                   2MBPS.

000009d8 <rf24_datarate_e_str_0>:
     9d8:	31 4d 42 50 53 00                                   1MBPS.

000009de <Menu_All>:
     9de:	06 05 0a 07 e2 82 78 09 22 01 96 00 aa 00 28 00     ......x.".....(.
     9ee:	02 05 e0 4f 30 dc 52 71 09 22 01 5a 00 aa 00 28     ...O0.Rq.".Z...(
     9fe:	00 02 01 e0 4f 30 dc 52 67 09 22 01 1e 00 aa 00     ....O0.Rg.".....
     a0e:	28 00 02 02 da b3 30 dc 52 00 00 00 00 00 00 00     (.....0.R.......
	...
     a8e:	c2 84 0a 00 dc 00 52 00 3c 00 03 9a d6 ff ff 00     ......R.<.......
     a9e:	42 71 5b 71 22 dc 52 a8 84 64 00 dc 00 52 00 3c     Bq[q".R..d...R.<
     aae:	00 03 00 f8 ff ff 01 42 71 5b 71 22 dc 52 8e 84     .......Bq[q".R..
     abe:	be 00 dc 00 52 00 3c 00 03 1f 00 ff ff 07 42 71     ....R.<.......Bq
     ace:	5b 71 22 dc 52 72 84 18 01 dc 00 52 00 3c 00 03     [q".Rr.....R.<..
     ade:	e0 ff ff ff 02 42 71 5b 71 22 dc 52 5a 84 72 01     .....Bq[q".RZ.r.
     aee:	dc 00 52 00 3c 00 03 e0 07 ff ff 08 42 71 5b 71     ..R.<.......Bq[q
     afe:	22 dc 52 0a 00 82 00 00 00 83 7a 00 00 00 00 14     ".R.......z.....
     b0e:	e0 4f dc 52 66 09 18 01 22 01 00 00 7c 61 00 00     .O.Rf..."...|a..
     b1e:	00 00 18 e0 4f dc 52 66 09 0a 00 1e 00 00 00 e4     ....O.Rf........
     b2e:	5c 00 00 00 00 11 e0 4f dc 52 66 09 0a 00 1e 00     \......O.Rf.....
     b3e:	00 00 f7 5e 00 00 00 00 20 e0 4f dc 52 66 09 0a     ...^.... .O.Rf..
     b4e:	00 82 00 00 00 ef 7a 00 00 00 00 20 e0 4f dc 52     ......z.... .O.R
     b5e:	66 09 00 00 00 00 00 00 00 00 00 00 00 00 00 00     f...............
	...
     cb6:	03 05 05 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     cc6:	01 01 ff ff 20 2c 51 23 51 10 51 e6 50 de 52 57     .... ,Q#Q.Q.P.RW
     cd6:	09 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
     ce6:	dc 52 3d 09 18 01 dc 00 be 00 1e 00 01 00 e0 4f     .R=............O
     cf6:	10 dc 52 27 09 18 01 b4 00 be 00 1e 00 01 00 e0     ..R'............
     d06:	4f 10 dc 52 0e 09 18 01 8c 00 be 00 1e 00 01 00     O..R............
     d16:	e0 4f 10 dc 52 f6 08 18 01 64 00 be 00 1e 00 01     .O..R....d......
     d26:	00 e0 4f 10 dc 52 e1 08 18 01 3c 00 be 00 1e 00     ..O..R....<.....
     d36:	01 00 e0 4f 10 dc 52 d4 08 18 01 14 00 be 00 1e     ...O..R.........
     d46:	00 01 00 e0 4f 10 dc 52 c5 08 0a 00 aa 00 be 00     ....O..R........
     d56:	28 00 01 00 23 88 10 dc 52 00 00 00 00 00 00 00     (...#...R.......
	...
     df2:	00 00 0a 00 28 00 00 00 a1 7e c8 00 78 00 10 e0     ....(....~..x...
     e02:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
     fa6:	00 00 00 08 00 01 00 00 00 00 00 10 00 00 00 00     ................
     fb6:	e0 01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52     ..@......R.R.R.R
     fc6:	de 52 d3 83 52 09 0a 00 dc 00 be 00 28 00 02 00     .R..R.......(...
     fd6:	ed b3 10 dc 52 b7 08 0a 00 28 00 be 00 28 00 02     ....R....(...(..
     fe6:	00 22 75 10 dc 52 00 00 00 00 00 00 00 00 00 00     ."u..R..........
	...
    10e6:	00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f     ..."...|a......O
    10f6:	dc 52 66 09 9a 01 48 00 00 00 91 5f 28 00 7e 00     .Rf...H...._(.~.
    1106:	10 e0 4f dc 52 66 09 dc 00 14 00 00 00 3c 5f f0     ..O.Rf.......<_.
    1116:	00 f0 00 10 e0 4f dc 52 66 09 00 00 00 00 00 00     .....O.Rf.......
	...
    118a:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
    119a:	01 be 7f d1 5e 68 50 10 00 00 00 00 00 00 00 00     ....^hP.........
	...
    11b6:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 77 50     ...+....(.(...wP
    11c6:	10 dc 52 2d 9a 01 c8 00 28 00 28 00 02 00 85 50     ..R-....(.(....P
    11d6:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    129a:	00 00 02 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
    12aa:	01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52 de     .@......R.R.R.R.
    12ba:	52 a8 08 52 09 0a 00 dc 00 be 00 28 00 02 00 ed     R..R.......(....
    12ca:	b3 10 dc 52 97 08 0a 00 28 00 be 00 28 00 01 00     ...R....(...(...
    12da:	e5 77 10 dc 52 81 08 0a 00 64 00 be 00 28 00 01     .w..R....d...(..
    12ea:	00 65 5e 10 dc 52 6f 08 0a 00 a0 00 be 00 28 00     .e^..Ro.......(.
    12fa:	01 00 a9 77 10 dc 52 5a 08 18 01 28 00 be 00 28     ...w..RZ...(...(
    130a:	00 01 00 19 5e 10 dc 52 43 08 18 01 64 00 be 00     ....^..RC...d...
    131a:	28 00 01 00 c8 5d 10 dc 52 00 00 00 00 00 00 00     (....]..R.......
	...
    13da:	18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f dc     .."...|a......O.
    13ea:	52 66 09 00 00 00 00 00 00 00 00 00 00 00 00 00     Rf..............
	...
    158e:	00 06 00 01 00 00 00 00 00 99 00 00 00 00 e0 01     ................
    159e:	40 01 01 ff ff 20 de 52 de 52 de 52 de 52 de 52     @.... .R.R.R.R.R
    15ae:	29 08 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ).R.......(.....
    15be:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    16ca:	00 00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18     ....."...|a.....
    16da:	e0 4f dc 52 66 09 9a 01 48 00 02 00 91 5f 28 00     .O.Rf...H...._(.
    16ea:	56 00 10 e0 4f dc 52 66 09 05 00 1e 00 00 00 3c     V...O.Rf.......<
    16fa:	5f cc 01 b4 00 10 e0 4f dc 52 66 09 00 00 00 00     _......O.Rf.....
	...
    179e:	00 2b 9a 01 1e 00 28 00 28 00 02 02 77 50 10 dc     .+....(.(...wP..
    17ae:	52 2d 9a 01 a0 00 28 00 28 00 02 02 85 50 10 dc     R-....(.(....P..
    17be:	52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     R...............
	...
    1862:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    1872:	82 50 02 03 02 02 00 3d 79 75 6f 5b 50 55 50 10     .P.....=yuo[PUP.
    1882:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    1892:	01 01 ff ff 10 de 52 de 52 de 52 de 52 de 52 1a     ......R.R.R.R.R.
    18a2:	08 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
    18b2:	dc 52 0e 08 0a 00 28 00 be 00 28 00 01 00 77 5d     .R....(...(...w]
    18c2:	10 dc 52 00 08 0a 00 64 00 be 00 28 00 01 00 59     ..R....d...(...Y
    18d2:	5d 10 dc 52 f5 07 0a 00 a0 00 be 00 28 00 01 00     ]..R........(...
    18e2:	3b 5d 10 dc 52 e1 07 18 01 28 00 be 00 28 00 01     ;]..R....(...(..
    18f2:	00 e1 4f 10 dc 52 00 00 00 00 00 00 00 00 00 00     ..O..R..........
	...
    19be:	00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0     ...."...|a......
    19ce:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
    1b72:	00 00 00 06 00 01 00 00 00 00 00 9a 00 00 00 00     ................
    1b82:	e0 01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52     ..@......R.R.R.R
    1b92:	de 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .R..............
	...
    275e:	00 00 d6 07 d2 07 1e 00 3c 00 64 00 28 00 02 00     ........<.d.(...
    276e:	84 5f 10 dc 52 cf 07 fa 00 3c 00 64 00 28 00 02     ._..R....<.d.(..
    277e:	00 ed b3 10 dc 52 00 00 00 00 00 00 00 00 00 00     .....R..........
	...
    287e:	00 14 00 23 00 00 00 cf 5c 00 00 00 00 10 e0 4f     ...#....\......O
    288e:	dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00 00     .Rf.............
	...
    2a32:	00 00 02 00 01 00 00 00 00 00 64 32 00 32 00 7c     ..........d2.2.|
    2a42:	01 8c 00 06 e0 ff 10 de 52 de 52 de 52 de 52 de     ........R.R.R.R.
    2a52:	52 d6 07 c8 07 0a 00 c8 00 82 00 28 00 02 00 66     R..........(...f
    2a62:	5f 10 dc 52 c1 07 96 00 c8 00 82 00 28 00 02 00     _..R........(...
    2a72:	ed b3 10 dc 52 00 00 00 00 00 00 00 00 00 00 00     ....R...........
	...
    2b72:	64 00 2d 00 00 00 97 60 b4 00 28 00 10 e0 4f dc     d.-....`..(...O.
    2b82:	52 66 09 00 00 00 00 00 00 00 00 00 00 00 00 00     Rf..............
	...
    2c42:	00 00 2b 3c 00 2d 00 28 00 28 00 02 00 7e 51 10     ..+<.-.(.(...~Q.
    2c52:	dc 52 2d 18 01 2d 00 28 00 28 00 02 00 c3 51 10     .R-..-.(.(....Q.
    2c62:	dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .R..............
	...
    2d26:	00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc 01     .........f......
    2d36:	04 01 06 e0 ff 10 de 52 de 52 de 52 de 52 de 52     .......R.R.R.R.R
    2d46:	b6 07 c8 07 0a 00 c8 00 82 00 28 00 02 00 42 5f     ..........(...B_
    2d56:	10 dc 52 c1 07 96 00 c8 00 82 00 28 00 02 00 ed     ..R........(....
    2d66:	b3 10 dc 52 ac 07 2c 01 c8 00 82 00 28 00 02 00     ...R..,.....(...
    2d76:	ca 55 10 dc 52 aa 07 40 01 23 00 28 00 28 00 02     .U..R..@.#.(.(..
    2d86:	00 40 51 10 dc 52 a8 07 6d 01 23 00 28 00 28 00     .@Q..R..m.#.(.(.
    2d96:	02 01 40 51 10 dc 52 a6 07 9a 01 23 00 28 00 28     ..@Q..R....#.(.(
    2da6:	00 02 02 40 51 10 dc 52 00 00 00 00 00 00 00 00     ...@Q..R........
	...
    2e62:	00 00 00 0a 00 23 00 00 00 11 60 2c 01 28 00 10     .....#....`,.(..
    2e72:	e0 4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00     .O.Rf...........
	...
    2fb6:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    2fc6:	03 4a 51 ef 55 43 51 10 00 00 00 00 00 00 00 00     .JQ.UCQ.........
	...
    301a:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    302a:	01 06 e0 ff 10 de 52 de 52 de 52 de 52 de 52 d6     ......R.R.R.R.R.
    303a:	07 c8 07 0a 00 c8 00 82 00 28 00 02 00 42 5f 10     .........(...B_.
    304a:	dc 52 c1 07 96 00 c8 00 82 00 28 00 02 00 ed b3     .R........(.....
    305a:	10 dc 52 ac 07 2c 01 c8 00 82 00 28 00 02 00 ca     ..R..,.....(....
    306a:	55 10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00     U..R............
	...
    3156:	00 00 0a 00 23 00 00 00 11 60 2c 01 28 00 10 e0     ....#....`,.(...
    3166:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
    32aa:	0a 00 5a 00 23 00 23 00 02 2d 2d 02 0a 00 00 02     ..Z.#.#..--.....
    32ba:	6a 51 08 56 7c 51 10 00 00 00 00 00 00 00 00 00     jQ.V|Q..........
	...
    330a:	00 00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00     ...........e....
    331a:	cc 01 04 01 06 e0 ff 10 de 52 de 52 de 52 de 52     .........R.R.R.R
    332a:	de 52 d6 07 a3 07 fa 00 3c 00 64 00 28 00 02 00     .R......<.d.(...
    333a:	ed b3 10 dc 52 00 00 00 00 00 00 00 00 00 00 00     ....R...........
	...
    344a:	00 14 00 23 00 00 00 cf 5c 00 00 00 00 10 e0 4f     ...#....\......O
    345a:	dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00 00     .Rf.............
	...
    35fe:	00 00 01 00 01 00 00 00 00 00 68 32 00 32 00 7c     ..........h2.2.|
    360e:	01 8c 00 06 e0 ff 10 de 52 de 52 de 52 de 52 de     ........R.R.R.R.
    361e:	52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     R...............
	...
    44de:	88 07 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ..R.......(.....
    44ee:	10 dc 52 7a 07 18 01 be 00 be 00 28 00 02 00 96     ..Rz.......(....
    44fe:	75 10 dc 52 2e 83 18 01 8c 00 be 00 28 00 02 00     u..R........(...
    450e:	4c 76 10 dc 52 6b 07 18 01 5a 00 be 00 28 00 02     Lv..Rk...Z...(..
    451e:	00 0b 76 10 dc 52 5b 07 18 01 28 00 be 00 28 00     ..v..R[...(...(.
    452e:	02 00 a0 76 10 dc 52 00 00 00 00 00 00 00 00 00     ...v..R.........
	...
    45fa:	00 00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18     ....."...|a.....
    460a:	e0 4f dc 52 66 09 14 00 14 00 00 00 41 80 00 00     .O.Rf.......A...
    461a:	00 00 10 e0 4f dc 52 66 09 14 00 14 00 00 00 a1     ....O.Rf........
    462a:	75 00 00 00 00 14 e0 4f dc 52 66 09 00 00 00 00     u......O.Rf.....
	...
    47b2:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    47c2:	01 01 ff ff 10 de 52 de 52 de 52 de 52 de 52 c4     ......R.R.R.R.R.
    47d2:	83 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
    47e2:	dc 52 7a 07 18 01 5a 00 be 00 28 00 02 00 b3 6f     .Rz...Z...(....o
    47f2:	10 dc 52 6b 07 18 01 28 00 be 00 28 00 02 00 fe     ..Rk...(...(....
    4802:	7d 10 dc 52 4b 07 18 01 8c 00 be 00 28 00 02 00     }..RK.......(...
    4812:	fb 7d 10 dc 52 00 00 00 00 00 00 00 00 00 00 00     .}..R...........
	...
    48ee:	00 00 14 00 14 00 00 00 7f 7b 00 00 00 00 14 e0     .........{......
    48fe:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
    4aa2:	00 00 00 04 00 01 00 00 00 00 00 07 00 00 00 00     ................
    4ab2:	e0 01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52     ..@......R.R.R.R
    4ac2:	de 52 c4 83 52 09 0a 00 dc 00 be 00 28 00 02 00     .R..R.......(...
    4ad2:	ed b3 10 dc 52 30 07 0a 00 28 00 be 00 28 00 01     ....R0...(...(..
    4ae2:	00 c3 78 10 dc 52 00 00 00 00 00 00 00 00 00 00     ..x..R..........
	...
    4be2:	00 dc 00 14 00 00 00 3c 5f f0 00 f0 00 10 e0 4f     .......<_......O
    4bf2:	dc 52 66 09 18 01 22 01 00 00 7c 61 00 00 00 00     .Rf..."...|a....
    4c02:	18 e0 4f dc 52 66 09 9a 01 48 00 01 00 91 5f 28     ..O.Rf...H...._(
    4c12:	00 7e 00 10 e0 4f dc 52 66 09 00 00 00 00 00 00     .~...O.Rf.......
	...
    4c86:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 01     ...#...7..<<....
    4c96:	04 49 7b 8e 78 75 50 10 00 00 00 00 00 00 00 00     .I{.xuP.........
	...
    4cb2:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 01 77 50     ...+....(.(...wP
    4cc2:	10 dc 52 2d 9a 01 c8 00 28 00 28 00 02 01 85 50     ..R-....(.(....P
    4cd2:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    4d96:	00 00 02 00 03 00 01 02 00 00 06 00 00 00 00 e0     ................
    4da6:	01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52 de     .@......R.R.R.R.
    4db6:	52 1b 07 52 09 0a 00 dc 00 be 00 28 00 02 00 ed     R..R.......(....
    4dc6:	b3 10 dc 52 0b 07 0a 00 78 00 be 00 28 00 01 a0     ...R....x...(...
    4dd6:	da b3 20 dc 52 00 00 00 00 00 00 00 00 00 00 00     .. .R...........
	...
    4ed6:	18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f dc     .."...|a......O.
    4ee6:	52 66 09 9a 01 48 00 04 00 91 5f 28 00 7e 00 28     Rf...H...._(.~.(
    4ef6:	e0 4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00     .O.Rf...........
	...
    4f7a:	0a 00 28 00 be 00 37 00 01 01 01 00 01 01 00 01     ..(...7.........
    4f8a:	c7 72 ca 5e ca 50 20 e6 00 28 00 aa 00 37 00 01     .r.^.P ..(...7..
    4f9a:	3c 3c 00 03 01 04 05 8c 72 c4 5e ca 50 28 2b 9a     <<......r.^.P(+.
    4faa:	01 1e 00 28 00 28 00 02 04 77 50 20 dc 52 2d 9a     ...(.(...wP .R-.
    4fba:	01 c8 00 28 00 28 00 02 04 85 50 20 dc 52 00 00     ...(.(....P .R..
	...
    508a:	00 02 00 02 00 02 02 00 00 9e 00 00 00 00 e0 01     ................
    509a:	40 01 01 ff ff 20 de 52 de 52 de 52 dd 50 de 52     @.... .R.R.R.P.R
    50aa:	f0 06 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ..R.......(.....
    50ba:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    535e:	00 00 0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff     ....(.x.2.......
    536e:	82 3c 02 03 03 ff 05 06 73 7b 71 ca 50 a8 71 21     .<......s{q.P.q!
    537e:	01 00 00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c     ...............,
    538e:	01 06 e0 ff 20 d4 50 de 52 de 52 de 52 de 52 e6     .... .P.R.R.R.R.
    539e:	06 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
    53ae:	dc 52 6b 07 18 01 28 00 be 00 28 00 02 00 54 72     .Rk...(...(...Tr
    53be:	20 dc 52 2b 84 0a 00 28 00 be 00 28 00 01 00 19      .R+...(...(....
    53ce:	72 20 cb 70 3c 84 0a 00 28 00 be 00 28 00 01 00     r .p<...(...(...
    53de:	de 71 20 d4 70 d7 06 18 01 64 00 be 00 28 00 02     .q .p....d...(..
    53ee:	0b da b3 20 dc 52 c7 06 18 01 a0 00 be 00 28 00     ... .R........(.
    53fe:	01 00 e0 4f 20 dc 52 bd 06 18 01 dc 00 be 00 28     ...O .R........(
    540e:	00 02 0c da b3 20 dc 52 a5 06 0a 00 64 00 be 00     ..... .R....d...
    541e:	28 00 01 9f da b3 20 dc 52 00 00 00 00 00 00 00     (..... .R.......
	...
    54ba:	00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0     ...."...|a......
    54ca:	4f dc 52 66 09 8c 00 05 00 00 00 55 73 00 00 00     O.Rf.......Us...
    54da:	00 20 e0 4f dc 52 66 09 00 00 00 00 00 00 00 00     . .O.Rf.........
	...
    566e:	00 00 00 08 00 02 00 00 00 00 00 09 00 00 00 00     ................
    567e:	e0 01 40 01 01 ff ff 20 de 52 de 52 de 52 de 52     ..@.... .R.R.R.R
    568e:	de 52 d7 06 52 09 0a 00 dc 00 be 00 28 00 02 00     .R..R.......(...
    569e:	ed b3 10 dc 52 97 06 d2 00 dc 00 aa 00 28 00 02     ....R........(..
    56ae:	00 ee 6c 20 dc 52 00 00 00 00 00 00 00 00 00 00     ..l .R..........
	...
    57ae:	00 9a 01 52 00 03 00 91 5f 28 00 56 00 20 e0 4f     ...R...._(.V. .O
    57be:	dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00 00     .Rf.............
	...
    587e:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 03 77 50     ...+..(.(.(...wP
    588e:	20 dc 52 2d 9a 01 aa 00 28 00 28 00 02 03 85 50      .R-....(.(....P
    589e:	20 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00      .R.............
	...
    5946:	0a 00 28 00 78 00 32 00 01 01 e0 07 ff ff 82 3c     ..(.x.2........<
    5956:	02 03 03 03 01 dc 79 f7 6c 5b 50 c9 73 20 02 00     ......y.l[P.s ..
    5966:	01 00 00 02 00 01 0b 0a 00 0a 00 cc 01 2c 01 06     .............,..
    5976:	e0 ff 20 de 52 de 52 de 52 de 52 de 52 81 06 52     .. .R.R.R.R.R..R
    5986:	09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10 dc 52     .......(.......R
	...
    5a2e:	00 7a 06 0a 00 a0 00 5a 00 28 00 01 00 f8 ff ff     .z.....Z.(......
    5a3e:	03 f2 70 a5 73 26 dd 70 71 06 6e 00 a0 00 5a 00     ..p.s&.pq.n...Z.
    5a4e:	28 00 01 1f 00 ff ff 05 f2 70 a5 73 26 dd 70 00     (........p.s&.p.
	...
    5aa2:	0a 00 28 00 e0 ff 6e 61 be 00 a0 00 02 e0 4f dc     ..(...na......O.
    5ab2:	52 66 09 32 00 28 00 00 00 97 60 6e 00 28 00 23     Rf.2.(....`n.(.#
    5ac2:	e0 4f dd 70 66 09 00 00 00 00 00 00 00 00 00 00     .O.pf...........
	...
    5b72:	00 00 2b a0 00 28 00 28 00 28 00 02 00 7e 51 22     ..+..(.(.(...~Q"
    5b82:	dd 70 2d 0a 00 28 00 28 00 28 00 02 00 c3 51 22     .p-..(.(.(....Q"
    5b92:	dd 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .p..............
	...
    5c36:	00 00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff     .....(...(......
    5c46:	ff 01 32 00 05 01 ff 05 6a 53 d9 6b ca 50 0e 71     ..2.....jS.k.P.q
    5c56:	22 01 02 02 00 00 02 00 01 9f 0a 00 0a 00 cc 01     "...............
    5c66:	2c 01 06 e0 ff 20 cb 50 23 51 19 51 de 52 86 70     ,.... .P#Q.Q.R.p
    5c76:	f9 81 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ..R.......(.....
    5c86:	10 dc 52 61 06 0a 00 28 00 be 00 28 00 01 00 1f     ..Ra...(...(....
    5c96:	6b 10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00     k..R............
	...
    5d92:	00 00 00 0e 01 28 00 00 00 97 60 8c 00 28 00 10     .....(....`..(..
    5da2:	e0 4f dc 52 5f 06 0e 01 5a 00 01 00 97 60 8c 00     .O.R_...Z....`..
    5db2:	28 00 10 e0 4f dc 52 5d 06 0e 01 8c 00 02 00 97     (...O.R]........
    5dc2:	60 8c 00 28 00 10 e0 4f dc 52 5b 06 0e 01 be 00     `..(...O.R[.....
    5dd2:	03 00 97 60 8c 00 28 00 10 e0 4f dc 52 59 06 00     ...`..(...O.RY..
	...
    5e66:	00 2b 9a 01 28 00 28 00 28 00 02 00 7e 51 10 dc     .+..(.(.(...~Q..
    5e76:	52 2d e6 00 28 00 28 00 28 00 02 00 c3 51 10 dc     R-..(.(.(....Q..
    5e86:	52 2b 9a 01 5a 00 28 00 28 00 02 01 7e 51 10 dc     R+..Z.(.(...~Q..
    5e96:	52 2d e6 00 5a 00 28 00 28 00 02 01 c3 51 10 dc     R-..Z.(.(....Q..
    5ea6:	52 2b 9a 01 8c 00 28 00 28 00 02 02 7e 51 10 dc     R+....(.(...~Q..
    5eb6:	52 2d e6 00 8c 00 28 00 28 00 02 02 c3 51 10 dc     R-....(.(....Q..
    5ec6:	52 2b 9a 01 be 00 28 00 28 00 02 03 7e 51 10 dc     R+....(.(...~Q..
    5ed6:	52 2d e6 00 be 00 28 00 28 00 02 03 c3 51 10 dc     R-....(.(....Q..
    5ee6:	52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     R...............
	...
    5f4a:	02 00 04 00 00 08 00 00 0c 0a 00 0a 00 cc 01 2c     ...............,
    5f5a:	01 06 e0 ff 10 de 52 de 52 de 52 de 52 08 52 67     ......R.R.R.R.Rg
    5f6a:	09 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
    5f7a:	dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .R..............
	...
    6086:	00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0     ...."...|a......
    6096:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
    623a:	00 00 00 01 00 01 00 00 00 00 00 a0 00 00 00 00     ................
    624a:	e0 01 40 01 01 ff ff 20 de 52 de 52 de 52 de 52     ..@.... .R.R.R.R
    625a:	de 52 47 06 52 09 0a 00 dc 00 be 00 28 00 02 00     .RG.R.......(...
    626a:	ed b3 10 dc 52 57 09 0a 00 28 00 be 00 28 00 02     ....RW...(...(..
    627a:	10 da b3 10 dc 52 39 06 0a 00 64 00 be 00 28 00     .....R9...d...(.
    628a:	02 00 e0 4f 10 dc 52 29 06 18 01 a0 00 be 00 28     ...O..R).......(
    629a:	00 02 00 df 6e 10 dc 52 a8 08 18 01 28 00 be 00     ....n..R....(...
    62aa:	28 00 02 99 da b3 10 dc 52 1e 06 18 01 64 00 be     (.......R....d..
    62ba:	00 28 00 02 9c da b3 10 dc 52 1a 08 0a 00 a0 00     .(.......R......
    62ca:	be 00 28 00 02 9a da b3 10 dc 52 0d 06 18 01 dc     ..(.......R.....
    62da:	00 be 00 28 00 01 00 dd 4f 10 dc 52 00 00 00 00     ...(....O..R....
	...
    637a:	00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f     ..."...|a......O
    638a:	dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00 00     .Rf.............
	...
    652e:	00 00 08 00 01 00 00 00 00 00 96 00 00 00 00 e0     ................
    653e:	01 40 01 01 ff ff 10 de 52 de 52 de 52 de 52 de     .@......R.R.R.R.
    654e:	52 67 09 52 09 0a 00 dc 00 be 00 28 00 02 00 ed     Rg.R.......(....
    655e:	b3 10 dc 52 02 06 0a 00 28 00 be 00 28 00 02 96     ...R....(...(...
    656e:	da b3 20 dc 52 f4 05 18 01 28 00 be 00 28 00 02     .. .R....(...(..
    657e:	9e da b3 20 dc 52 e7 05 0a 00 a0 00 be 00 28 00     ... .R........(.
    658e:	02 98 da b3 20 dc 52 da 05 0a 00 64 00 be 00 28     .... .R....d...(
    659e:	00 02 97 da b3 20 dc 52 00 00 00 00 00 00 00 00     ..... .R........
	...
    666e:	18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f dc     .."...|a......O.
    667e:	52 66 09 00 00 00 00 00 00 00 00 00 00 00 00 00     Rf..............
	...
    6822:	00 05 00 01 00 00 00 00 00 02 00 00 00 00 e0 01     ................
    6832:	40 01 01 ff ff 20 de 52 de 52 de 52 de 52 de 52     @.... .R.R.R.R.R
    6842:	c6 05 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ..R.......(.....
    6852:	10 dc 52 d3 83 0a 00 28 00 be 00 28 00 02 03 da     ..R....(...(....
    6862:	b3 10 dc 52 bb 05 0a 00 64 00 be 00 28 00 02 06     ...R....d...(...
    6872:	da b3 10 dc 52 b1 05 0a 00 a0 00 be 00 28 00 02     ....R........(..
    6882:	00 e0 4f 10 dc 52 00 00 00 00 00 00 00 00 00 00     ..O..R..........
	...
    695e:	00 00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18     ....."...|a.....
    696e:	e0 4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00     .O.Rf...........
	...
    6b16:	04 00 01 00 00 00 00 00 97 00 00 00 00 e0 01 40     ...............@
    6b26:	01 01 ff ff 10 de 52 de 52 de 52 de 52 de 52 9d     ......R.R.R.R.R.
    6b36:	05 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10     .R.......(......
    6b46:	dc 52 29 08 0a 00 28 00 be 00 28 00 01 08 da b3     .R)...(...(.....
    6b56:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    6c52:	00 00 18 01 22 01 00 00 7c 61 00 00 00 00 18 e0     ...."...|a......
    6c62:	4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00 00     O.Rf............
	...
    6cf6:	00 00 0a 00 64 00 be 00 28 00 01 01 01 00 01 01     ....d...(.......
    6d06:	00 01 df 53 be 5e ca 50 10 00 00 00 00 00 00 00     ...S.^.P........
	...
    6dea:	00 0a 00 a0 00 be 00 28 00 01 01 e0 07 ff ff 01     .......(........
    6dfa:	32 00 01 01 ff 01 6c 54 b8 5e ca 50 14 50 10 02     2.....lT.^.P.P..
    6e0a:	00 01 00 01 00 00 01 98 00 00 00 00 e0 01 40 01     ..............@.
    6e1a:	01 ff ff 10 de 52 de 52 de 52 de 52 de 52 9d 05     .....R.R.R.R.R..
    6e2a:	52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3 10 dc     R.......(.......
    6e3a:	52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     R...............
	...
    6f46:	00 0e 01 28 00 00 00 97 60 8c 00 28 00 10 e0 4f     ...(....`..(...O
    6f56:	1a 50 66 09 00 00 00 00 00 00 00 00 00 00 00 00     .Pf.............
	...
    6fa6:	8d 05 0a 00 28 00 be 00 28 00 01 e0 07 ff ff 00     ....(...(.......
    6fb6:	48 6f 4f 50 a2 53 10 00 00 00 00 00 00 00 00 00     HoOP.S..........
	...
    7016:	00 00 00 2b 9a 01 28 00 28 00 28 00 02 00 7e 51     ...+..(.(.(...~Q
    7026:	10 1a 50 2d e6 00 28 00 28 00 28 00 02 00 c3 51     ..P-..(.(.(....Q
    7036:	10 1a 50 00 00 00 00 00 00 00 00 00 00 00 00 00     ..P.............
	...
    70fa:	00 00 01 00 01 01 00 02 00 00 9b 0a 00 0a 00 cc     ................
    710a:	01 18 01 06 e0 ff 10 de 52 de 52 de 52 de 52 21     ........R.R.R.R!
    711a:	50 1e 06 52 09 0a 00 dc 00 be 00 28 00 02 00 ed     P..R.......(....
    712a:	b3 10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00     ...R............
	...
    723a:	18 01 22 01 00 00 7c 61 00 00 00 00 18 e0 4f dc     .."...|a......O.
    724a:	52 66 09 0a 00 1e 00 00 00 05 5b 00 00 00 00 10     Rf........[.....
    725a:	e0 4f dc 52 66 09 00 00 00 00 00 00 00 00 00 00     .O.Rf...........
	...
    73ee:	00 01 00 02 00 00 00 00 00 9c 00 00 00 00 e0 01     ................
    73fe:	40 01 01 ff ff 10 de 52 de 52 de 52 de 52 de 52     @......R.R.R.R.R
    740e:	02 85 52 09 0a 00 dc 00 be 00 28 00 02 00 ed b3     ..R.......(.....
    741e:	10 dc 52 00 00 00 00 00 00 00 00 00 00 00 00 00     ..R.............
	...
    76c2:	00 00 0a 00 28 00 64 00 28 00 01 01 e0 07 ff ff     ....(.d.(.......
    76d2:	6e 32 02 04 02 ff 06 3e 54 f5 6e ca 50 e2 4f 10     n2.....>T.n.P.O.
    76e2:	01 00 00 01 00 00 00 01 9d 0a 00 0a 00 cc 01 18     ................
    76f2:	01 06 e0 ff 10 de 52 de 52 de 52 de 52 21 50 00     ......R.R.R.R!P.
	...

00007fda <keyboad_number_char_special>:
    7fda:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    7fea:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00007ff4 <keyboad_number_char_lower>:
    7ff4:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    8004:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

0000800e <keyboad_number_char_upper>:
    800e:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    801e:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00008028 <network_name>:
    8028:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00008035 <network_mqtt_key>:
    8035:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00008046 <network_mqtt_user>:
    8046:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    8056:	72 00                                               r.

00008058 <network_mqtt_port>:
    8058:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    8068:	74 00                                               t.

0000806a <network_mqtt_host>:
    806a:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    807a:	74 00                                               t.

0000807c <network_ntp>:
    807c:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

00008088 <network_dns>:
    8088:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

00008094 <network_gw>:
    8094:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

0000809f <network_netmask>:
    809f:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000080af <network_mac>:
    80af:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000080bb <new_text_slash_rtds_control_list>:
    80bb:	2f 72 74 64 73 2d 63 6f 6e 74 72 6f 6c 2f 6c 69     /rtds-control/li
    80cb:	73 74 00                                            st.

000080ce <new_text_slash_rtds_slash>:
    80ce:	2f 72 74 64 73 2f 00                                /rtds/.

000080d5 <global_time_offset>:
    80d5:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    80e5:	6f 66 66 73 65 74 00                                offset.

000080ec <global_time_ntp>:
    80ec:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

000080fc <global_time_set>:
    80fc:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

0000810c <termbig_header_out>:
    810c:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

0000811a <termbig_subscribe>:
    811a:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    812a:	73 63 72 69 62 65 00                                scribe.

00008131 <thermctl_subscribe>:
    8131:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    8141:	62 73 63 72 69 62 65 00                             bscribe.

00008149 <lightctl_header_out>:
    8149:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

00008158 <thermctl_header_in>:
    8158:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

00008166 <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    8166:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    8176:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    8186:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    8196:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    81a6:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    81b6:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    81c6:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

000081d2 <text_rtc_cas>:
    81d2:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    81e2:	6e 79 00                                            ny.

000081e5 <text_ntp_cas>:
    81e5:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    81f5:	63 61 73 00                                         cas.

000081f9 <text_pid_regulator>:
    81f9:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

00008207 <text_nrf_rozhrani>:
    8207:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00008214 <text_rest_rozhrani>:
    8214:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    8224:	69 00                                               i.

00008226 <thermctl_header_out>:
    8226:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00008235 <text_mqtt_rozhrani>:
    8235:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00008243 <text_ethernet_rozhrani>:
    8243:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    8253:	69 00                                               i.

00008255 <text_onewire_hledam>:
    8255:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00008262 <text_onewire_rozhrani>:
    8262:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00008271 <text_touchscreen>:
    8271:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

0000827d <text_nastaveni_systemu>:
    827d:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    828d:	75 00                                               u.

0000828f <text_test_eeprom>:
    828f:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

0000829f <text_ok>:
    829f:	4f 4b 00                                            OK.

000082a2 <text_test_ram>:
    82a2:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

000082af <text_bezny_start>:
    82af:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

000082bb <text_prog>:
    82bb:	50 52 4f 47 00                                      PROG.

000082c0 <text_vychozi_nastaveni>:
    82c0:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    82d0:	69 00                                               i.

000082d2 <text_vnitrni_ochrany>:
    82d2:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

000082e2 <term_title>:
    82e2:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    82f2:	6f 72 20 76 33 00                                   or v3.

000082f8 <new_text_regulator>:
    82f8:	52 65 67 75 6c 61 74 6f 72 3a 20 00                 Regulator: .

00008304 <current_time>:
    8304:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00008311 <current_temp>:
    8311:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    8321:	3a 00                                               :.

00008323 <new_text_date_error>:
    8323:	2d 2d 2e 2d 2d 2e 2d 2d 2d 2d 00                    --.--.----.

0000832e <nastaveni_tds_period>:
    832e:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

0000833d <temp_offset_short>:
    833d:	6f 66 66 73 65 74 3a 00                             offset:.

00008345 <text_online>:
    8345:	4f 6e 6c 69 6e 65 00                                Online.

0000834c <text_last_update>:
    834c:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    835c:	7a 61 63 65 3a 00                                   zace:.

00008362 <current_temp_short>:
    8362:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

0000836b <text_nazev>:
    836b:	4e 61 7a 65 76 3a 00                                Nazev:.

00008372 <new_text_rtds_type_temp>:
    8372:	54 79 70 3a 20 76 7a 64 61 6c 65 6e 61 20 74 65     Typ: vzdalena te
    8382:	70 6c 6f 74 61 00                                   plota.

00008388 <text_nastavit_tds>:
    8388:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    8398:	6c 6f 00                                            lo.

0000839b <text_not_used>:
    839b:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

000083a8 <text_associovat_tds>:
    83a8:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    83b8:	64 6c 6f 00                                         dlo.

000083bc <text_rtds_prefix>:
    83bc:	2f 00                                               /.

000083be <text_err>:
    83be:	45 72 72 6f 72 00                                   Error.

000083c4 <nastaveni_rtds>:
    83c4:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000083d3 <nastaveni_onewire>:
    83d3:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000083e1 <text_term_do_activate>:
    83e1:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    83f1:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

000083fb <text_term_deactive>:
    83fb:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

00008405 <text_term_active>:
    8405:	41 6b 74 69 76 6e 69 00                             Aktivni.

0000840d <text_change_default_ring>:
    840d:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    841d:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

00008427 <text_dashdash>:
    8427:	2d 2d 2d 00                                         ---.

0000842b <text_term_do_deactivate>:
    842b:	44 65 61 6b 74 69 76 6f 76 61 74 20 72 65 67 2e     Deaktivovat reg.
	...

0000843c <text_term_do_activate1>:
    843c:	41 6b 74 69 76 6f 76 61 74 20 72 65 67 2e 00        Aktivovat reg..

0000844b <text_button_term_man_comment>:
    844b:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

0000845a <text_button_term_man>:
    845a:	4d 41 4e 00                                         MAN.

0000845e <text_button_term_prog_comment>:
    845e:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    846e:	72 61 6d 00                                         ram.

00008472 <text_button_term_prog>:
    8472:	50 52 4f 47 00                                      PROG.

00008477 <text_button_term_min_comment>:
    8477:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    8487:	67 75 6c 61 63 65 00                                gulace.

0000848e <text_button_term_min>:
    848e:	4d 49 4e 00                                         MIN.

00008492 <text_button_term_max_comment>:
    8492:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    84a2:	75 6c 61 63 65 00                                   ulace.

000084a8 <text_button_term_max>:
    84a8:	4d 41 58 00                                         MAX.

000084ac <text_button_term_off_comment>:
    84ac:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    84bc:	79 20 6d 6f 64 00                                   y mod.

000084c2 <text_button_term_off>:
    84c2:	4f 46 46 00                                         OFF.

000084c6 <new_text_jas_display>:
    84c6:	4e 61 73 74 61 76 65 6e 69 20 6a 61 73 75 20 64     Nastaveni jasu d
    84d6:	69 73 70 6c 61 79 65 00                             isplaye.

000084de <new_text_jas_display_manual>:
    84de:	4d 61 6e 75 61 6c 6e 69 20 72 69 7a 65 6e 69 20     Manualni rizeni 
	...

000084ef <new_text_jas_display_automat>:
    84ef:	41 75 74 6f 6d 61 74 69 63 6b 65 20 72 69 7a 65     Automaticke rize
    84ff:	6e 69 00                                            ni.

00008502 <new_text_auto_display_shutdown>:
    8502:	41 75 74 6f 6d 61 74 69 63 6b 65 20 76 79 70 6e     Automaticke vypn
    8512:	75 74 69 20 64 69 73 70 6c 61 79 65 00              uti displaye.

0000851f <new_text_vypnuto>:
    851f:	56 79 70 6e 75 74 6f 00                             Vypnuto.

00008527 <new_text_device_dns>:
    8527:	44 4e 53 20 73 65 72 76 65 72 00                    DNS server.

00008532 <new_text_device_gw>:
    8532:	56 79 63 68 6f 7a 69 20 62 72 61 6e 61 00           Vychozi brana.

00008540 <new_text_device_mask>:
    8540:	49 50 20 6d 61 73 6b 61 00                          IP maska.

00008549 <new_text_device_ip>:
    8549:	49 50 20 61 64 72 65 73 61 00                       IP adresa.

00008553 <new_text_device_nazev>:
    8553:	4e 61 7a 65 76 20 7a 61 72 69 7a 65 6e 69 00        Nazev zarizeni.

00008562 <new_text_device_mac>:
    8562:	4d 41 43 20 61 64 72 65 73 61 00                    MAC adresa.

0000856d <new_text_error_ntp_time>:
    856d:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    857d:	45 52 52 4f 52 00                                   ERROR.

00008583 <new_text_ok_ntp_time>:
    8583:	41 6b 74 75 61 6c 69 7a 61 63 65 20 4e 54 50 20     Aktualizace NTP 
    8593:	4f 4b 00                                            OK.

00008596 <new_text_ok_connect_seznam>:
    8596:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 4f 4b 00        Konektivita OK.

000085a5 <new_text_err_connect_seznam>:
    85a5:	4b 6f 6e 65 6b 74 69 76 69 74 61 20 45 52 52 4f     Konektivita ERRO
    85b5:	52 00                                               R.

000085b7 <seznam_server>:
    85b7:	77 77 77 2e 73 65 7a 6e 61 6d 2e 63 7a 00           www.seznam.cz.

000085c5 <new_text_mqtt_error>:
    85c5:	4d 51 54 54 20 76 20 63 68 79 62 65 3a 20 00        MQTT v chybe: .

000085d4 <new_text_mqtt_processed>:
    85d4:	4d 51 54 54 20 7a 70 72 61 63 6f 76 61 6e 79 63     MQTT zpracovanyc
    85e4:	68 3a 20 00                                         h: .

000085e8 <new_text_mqtt_receive>:
    85e8:	4d 51 54 54 20 70 72 69 6a 61 74 79 63 68 3a 20     MQTT prijatych: 
	...

000085f9 <new_text_mqtt_send>:
    85f9:	4d 51 54 54 20 6f 64 65 73 6c 61 6e 79 63 68 3a     MQTT odeslanych:
    8609:	20 00                                                .

0000860b <new_text_selfcheck_test>:
    860b:	53 65 6c 66 63 68 65 63 6b 3a 20 00                 Selfcheck: .

00008617 <new_text_internal_temp>:
    8617:	49 6e 74 65 72 6e 69 20 74 65 70 6c 6f 74 61 3a     Interni teplota:
    8627:	20 00                                                .

00008629 <new_text_consume_ampere>:
    8629:	4f 64 62 65 72 20 70 72 6f 75 64 75 3a 20 00        Odber proudu: .

00008638 <new_text_tritri_volt>:
    8638:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 33     Interni napeti 3
    8648:	2e 33 20 00                                         .3 .

0000864c <new_text_pet_volt>:
    864c:	49 6e 74 65 72 6e 69 20 6e 61 70 65 74 69 20 35     Interni napeti 5
    865c:	2e 30 20 00                                         .0 .

00008660 <new_text_input_volt>:
    8660:	56 73 74 75 70 6e 69 20 6e 61 70 65 74 69 20 00     Vstupni napeti .

00008670 <port_to_mode_PGM>:
    8670:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

00008680 <digital_pin_to_timer_PGM>:
    8680:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    86b4:	00 03                                               ..

000086b6 <RF24::print_status(unsigned char)::__c>:
    86b6:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
    86c6:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
    86d6:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
    86e6:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
    86f6:	3d 25 78 0d 0a 00                                   =%x...

000086fc <_ZZN4RF2412printDetailsEvE3__c__12_>:
    86fc:	50 41 20 50 6f 77 65 72 09 20 3d 20 25 53 0d 0a     PA Power. = %S..
	...

0000870d <rf24_pa_dbm_e_str_P>:
    870d:	98 09 91 09 89 09 82 09                             ........

00008715 <_ZZN4RF2412printDetailsEvE3__c__11_>:
    8715:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
    8725:	0d 0a 00                                            ...

00008728 <rf24_crclength_e_str_P>:
    8728:	ae 09 a7 09 9f 09                                   ......

0000872e <_ZZN4RF2412printDetailsEvE3__c__10_>:
    872e:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

0000873d <rf24_model_e_str_P>:
    873d:	c1 09 b7 09                                         ....

00008741 <RF24::printDetails()::__c>:
    8741:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
    8751:	0a 00                                               ..

00008753 <rf24_datarate_e_str_P>:
    8753:	d8 09 d2 09 ca 09                                   ......

00008759 <RF24::printDetails()::__c>:
    8759:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

00008767 <RF24::printDetails()::__c>:
    8767:	43 4f 4e 46 49 47 09 00                             CONFIG..

0000876f <RF24::printDetails()::__c>:
    876f:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

00008778 <RF24::printDetails()::__c>:
    8778:	52 46 5f 43 48 09 00                                RF_CH..

0000877f <RF24::printDetails()::__c>:
    877f:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

00008789 <RF24::printDetails()::__c>:
    8789:	45 4e 5f 41 41 09 00                                EN_AA..

00008790 <RF24::printDetails()::__c>:
    8790:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

0000879b <RF24::printDetails()::__c>:
    879b:	54 58 5f 41 44 44 52 09 00                          TX_ADDR..

000087a4 <RF24::printDetails()::__c>:
    87a4:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

000087b1 <RF24::printDetails()::__c>:
    87b1:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

000087be <status_know_devices>:
    87be:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    87ce:	63 65 73 00                                         ces.

000087d2 <network_ip>:
    87d2:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

000087dd <status_mqtt_process>:
    87dd:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    87ed:	65 73 73 00                                         ess.

000087f1 <status_mqtt_receive>:
    87f1:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    8801:	69 76 65 00                                         ive.

00008805 <status_mqtt_error>:
    8805:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    8815:	72 00                                               r.

00008817 <status_mqtt_send>:
    8817:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

00008828 <termbig_header_in>:
    8828:	2f 74 65 72 6d 62 69 67 2d 69 6e 2f 00              /termbig-in/.

00008835 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8835:	0d 0a 00                                            ...

00008838 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8838:	25 30 32 78 00                                      %02x.

0000883d <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    883d:	20 30 78 00                                          0x.

00008841 <RF24::print_address_register(char const*, unsigned char, unsigned char)::__c>:
    8841:	25 53 09 20 3d 00                                   %S. =.

00008847 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    8847:	0d 0a 00                                            ...

0000884a <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    884a:	20 30 78 25 30 32 78 00                              0x%02x.

00008852 <RF24::print_byte_register(char const*, unsigned char, unsigned char)::__c>:
    8852:	25 53 09 20 3d 00                                   %S. =.

00008858 <_ZL11daysInMonth.lto_priv.265>:
    8858:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00008864 <lcd_font>:
    8864:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    8874:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    8884:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    8894:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    88a4:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    88b4:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    88c4:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    88d4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    88e4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    88f4:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    8904:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    8914:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    8924:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    8934:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    8944:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    8954:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    8964:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    8974:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    8984:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    8994:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    89a4:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    89b4:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    89c4:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    89d4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    89e4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    89f4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    8a04:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    8a14:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    8a24:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    8a34:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    8a44:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    8a54:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    8a64:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    8a74:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    8a84:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    8a94:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    8aa4:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    8ab4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    8ac4:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    8ad4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    8ae4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    8af4:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    8b04:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    8b14:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    8b24:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    8b34:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    8b44:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    8b54:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    8b64:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    8b74:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    8b84:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    8b94:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    8ba4:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    8bb4:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    8bc4:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    8bd4:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    8be4:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    8bf4:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    8c04:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    8c14:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    8c24:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    8c34:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    8c44:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    8c54:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    8c64:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    8c74:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    8c84:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    8c94:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    8ca4:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    8cb4:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    8cc4:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    8cd4:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    8ce4:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    8cf4:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    8d04:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    8d14:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    8d24:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    8d34:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    8d44:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    8d54:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00008d5f <port_to_input_PGM>:
    8d5f:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00008d6f <digital_pin_to_bit_mask_PGM>:
    8d6f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    8d7f:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    8d8f:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    8d9f:	08 10 20 40 80 20                                   .. @. 

00008da5 <port_to_output_PGM>:
    8da5:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00008db5 <digital_pin_to_port_PGM>:
    8db5:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    8dc5:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    8dd5:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    8de5:	06 06 06 06 06 07 00                                .......

00008dec <__ctors_start>:
__ctors_start():
    8dec:	18 ea       	ldi	r17, 0xA8	; 168

00008dee <__ctors_end>:
__dtors_end():
    8dee:	11 24       	eor	r1, r1
    8df0:	1f be       	out	0x3f, r1	; 63
    8df2:	cf ef       	ldi	r28, 0xFF	; 255
    8df4:	d1 e2       	ldi	r29, 0x21	; 33
    8df6:	de bf       	out	0x3e, r29	; 62
    8df8:	cd bf       	out	0x3d, r28	; 61
    8dfa:	00 e0       	ldi	r16, 0x00	; 0
    8dfc:	0c bf       	out	0x3c, r16	; 60

00008dfe <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    8dfe:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    8e00:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    8e02:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    8e04:	e0 e9       	ldi	r30, 0x90	; 144
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    8e06:	f7 ef       	ldi	r31, 0xF7	; 247
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    8e08:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    8e0a:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    8e0c:	02 c0       	rjmp	.+4      	; 0x8e12 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    8e0e:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    8e10:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    8e12:	ac 3f       	cpi	r26, 0xFC	; 252
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    8e14:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    8e16:	d9 f7       	brne	.-10     	; 0x8e0e <__do_copy_data+0x10>

00008e18 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    8e18:	24 e1       	ldi	r18, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    8e1a:	ac ef       	ldi	r26, 0xFC	; 252
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    8e1c:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    8e1e:	01 c0       	rjmp	.+2      	; 0x8e22 <.do_clear_bss_start>

00008e20 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    8e20:	1d 92       	st	X+, r1

00008e22 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    8e22:	a7 38       	cpi	r26, 0x87	; 135
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    8e24:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    8e26:	e1 f7       	brne	.-8      	; 0x8e20 <.do_clear_bss_loop>

00008e28 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    8e28:	16 e4       	ldi	r17, 0x46	; 70
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    8e2a:	c7 ef       	ldi	r28, 0xF7	; 247
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    8e2c:	d6 e4       	ldi	r29, 0x46	; 70
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    8e2e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    8e30:	06 c0       	rjmp	.+12     	; 0x8e3e <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    8e32:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    8e34:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    8e36:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    8e38:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    8e3a:	0e 94 31 fa 	call	0x1f462	; 0x1f462 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    8e3e:	c6 3f       	cpi	r28, 0xF6	; 246
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    8e40:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    8e42:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    8e44:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    8e46:	a9 f7       	brne	.-22     	; 0x8e32 <__do_global_ctors+0xa>
    8e48:	0e 94 da db 	call	0x1b7b4	; 0x1b7b4 <main>
    8e4c:	0c 94 c6 fb 	jmp	0x1f78c	; 0x1f78c <_exit>

00008e50 <__bad_interrupt>:
__vector_38():
    8e50:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008e54 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    8e54:	af 92       	push	r10
    8e56:	bf 92       	push	r11
    8e58:	cf 92       	push	r12
    8e5a:	df 92       	push	r13
    8e5c:	ef 92       	push	r14
    8e5e:	ff 92       	push	r15
    8e60:	0f 93       	push	r16
    8e62:	1f 93       	push	r17
    8e64:	cf 93       	push	r28
    8e66:	df 93       	push	r29
    8e68:	6c 01       	movw	r12, r24
    8e6a:	7b 01       	movw	r14, r22
    8e6c:	8b 01       	movw	r16, r22
    8e6e:	04 0f       	add	r16, r20
    8e70:	15 1f       	adc	r17, r21
    8e72:	eb 01       	movw	r28, r22
    8e74:	5e 01       	movw	r10, r28
    8e76:	ae 18       	sub	r10, r14
    8e78:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    8e7a:	c0 17       	cp	r28, r16
    8e7c:	d1 07       	cpc	r29, r17
    8e7e:	59 f0       	breq	.+22     	; 0x8e96 <Print::write(unsigned char const*, unsigned int)+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    8e80:	69 91       	ld	r22, Y+
    8e82:	d6 01       	movw	r26, r12
    8e84:	ed 91       	ld	r30, X+
    8e86:	fc 91       	ld	r31, X
    8e88:	01 90       	ld	r0, Z+
    8e8a:	f0 81       	ld	r31, Z
    8e8c:	e0 2d       	mov	r30, r0
    8e8e:	c6 01       	movw	r24, r12
    8e90:	19 95       	eicall
    8e92:	89 2b       	or	r24, r25
    8e94:	79 f7       	brne	.-34     	; 0x8e74 <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
    8e96:	c5 01       	movw	r24, r10
    8e98:	df 91       	pop	r29
    8e9a:	cf 91       	pop	r28
    8e9c:	1f 91       	pop	r17
    8e9e:	0f 91       	pop	r16
    8ea0:	ff 90       	pop	r15
    8ea2:	ef 90       	pop	r14
    8ea4:	df 90       	pop	r13
    8ea6:	cf 90       	pop	r12
    8ea8:	bf 90       	pop	r11
    8eaa:	af 90       	pop	r10
    8eac:	08 95       	ret

00008eae <turnOffPWM>:
turnOffPWM():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    8eae:	82 50       	subi	r24, 0x02	; 2
    8eb0:	82 31       	cpi	r24, 0x12	; 18
    8eb2:	08 f0       	brcs	.+2      	; 0x8eb6 <turnOffPWM+0x8>
    8eb4:	5f c0       	rjmp	.+190    	; 0x8f74 <turnOffPWM+0xc6>
    8eb6:	e8 2f       	mov	r30, r24
    8eb8:	f0 e0       	ldi	r31, 0x00	; 0
    8eba:	88 27       	eor	r24, r24
    8ebc:	ed 59       	subi	r30, 0x9D	; 157
    8ebe:	f8 4b       	sbci	r31, 0xB8	; 184
    8ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    8ec2:	0c 94 31 fa 	jmp	0x1f462	; 0x1f462 <__tablejump2__>
    8ec6:	b7 47       	sbci	r27, 0x77	; 119
    8ec8:	bb 47       	sbci	r27, 0x7B	; 123
    8eca:	75 47       	sbci	r23, 0x75	; 117
    8ecc:	7b 47       	sbci	r23, 0x7B	; 123
    8ece:	7f 47       	sbci	r23, 0x7F	; 127
    8ed0:	ba 47       	sbci	r27, 0x7A	; 122
    8ed2:	83 47       	sbci	r24, 0x73	; 115
    8ed4:	89 47       	sbci	r24, 0x79	; 121
    8ed6:	8d 47       	sbci	r24, 0x7D	; 125
    8ed8:	93 47       	sbci	r25, 0x73	; 115
    8eda:	97 47       	sbci	r25, 0x77	; 119
    8edc:	9b 47       	sbci	r25, 0x7B	; 123
    8ede:	a1 47       	sbci	r26, 0x71	; 113
    8ee0:	a5 47       	sbci	r26, 0x75	; 117
    8ee2:	ba 47       	sbci	r27, 0x7A	; 122
    8ee4:	a9 47       	sbci	r26, 0x79	; 121
    8ee6:	af 47       	sbci	r26, 0x7F	; 127
    8ee8:	b3 47       	sbci	r27, 0x73	; 115
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    8eea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8eee:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    8ef0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8ef4:	08 95       	ret
    8ef6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8efa:	8f 7d       	andi	r24, 0xDF	; 223
    8efc:	f9 cf       	rjmp	.-14     	; 0x8ef0 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    8efe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    8f02:	87 7f       	andi	r24, 0xF7	; 247
    8f04:	f5 cf       	rjmp	.-22     	; 0x8ef0 <turnOffPWM+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    8f06:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f0a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    8f0c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f10:	08 95       	ret
    8f12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    8f16:	8f 7d       	andi	r24, 0xDF	; 223
    8f18:	f9 cf       	rjmp	.-14     	; 0x8f0c <turnOffPWM+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    8f1a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f1e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    8f20:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f24:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    8f26:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f2a:	8f 7d       	andi	r24, 0xDF	; 223
    8f2c:	f9 cf       	rjmp	.-14     	; 0x8f20 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    8f2e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    8f32:	87 7f       	andi	r24, 0xF7	; 247
    8f34:	f5 cf       	rjmp	.-22     	; 0x8f20 <turnOffPWM+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    8f36:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8f3a:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    8f3c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8f40:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    8f42:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8f46:	8f 7d       	andi	r24, 0xDF	; 223
    8f48:	f9 cf       	rjmp	.-14     	; 0x8f3c <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    8f4a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    8f4e:	87 7f       	andi	r24, 0xF7	; 247
    8f50:	f5 cf       	rjmp	.-22     	; 0x8f3c <turnOffPWM+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    8f52:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8f56:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    8f58:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8f5c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    8f5e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8f62:	8f 7d       	andi	r24, 0xDF	; 223
    8f64:	f9 cf       	rjmp	.-14     	; 0x8f58 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    8f66:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    8f6a:	87 7f       	andi	r24, 0xF7	; 247
    8f6c:	f5 cf       	rjmp	.-22     	; 0x8f58 <turnOffPWM+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    8f6e:	84 b5       	in	r24, 0x24	; 36
    8f70:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    8f72:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    8f74:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    8f76:	84 b5       	in	r24, 0x24	; 36
    8f78:	8f 7d       	andi	r24, 0xDF	; 223
    8f7a:	fb cf       	rjmp	.-10     	; 0x8f72 <turnOffPWM+0xc4>

00008f7c <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    8f7c:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    8f7e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    8f80:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <timer0_overflow_count>
    8f84:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <timer0_overflow_count+0x1>
    8f88:	a0 91 68 0b 	lds	r26, 0x0B68	; 0x800b68 <timer0_overflow_count+0x2>
    8f8c:	b0 91 69 0b 	lds	r27, 0x0B69	; 0x800b69 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    8f90:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    8f92:	a8 9b       	sbis	0x15, 0	; 21
    8f94:	05 c0       	rjmp	.+10     	; 0x8fa0 <micros+0x24>
    8f96:	2f 3f       	cpi	r18, 0xFF	; 255
    8f98:	19 f0       	breq	.+6      	; 0x8fa0 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    8f9a:	01 96       	adiw	r24, 0x01	; 1
    8f9c:	a1 1d       	adc	r26, r1
    8f9e:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    8fa0:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    8fa2:	ba 2f       	mov	r27, r26
    8fa4:	a9 2f       	mov	r26, r25
    8fa6:	98 2f       	mov	r25, r24
    8fa8:	88 27       	eor	r24, r24
    8faa:	bc 01       	movw	r22, r24
    8fac:	cd 01       	movw	r24, r26
    8fae:	62 0f       	add	r22, r18
    8fb0:	71 1d       	adc	r23, r1
    8fb2:	81 1d       	adc	r24, r1
    8fb4:	91 1d       	adc	r25, r1
    8fb6:	42 e0       	ldi	r20, 0x02	; 2
    8fb8:	66 0f       	add	r22, r22
    8fba:	77 1f       	adc	r23, r23
    8fbc:	88 1f       	adc	r24, r24
    8fbe:	99 1f       	adc	r25, r25
    8fc0:	4a 95       	dec	r20
    8fc2:	d1 f7       	brne	.-12     	; 0x8fb8 <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    8fc4:	08 95       	ret

00008fc6 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
    8fc6:	20 91 5d 0b 	lds	r18, 0x0B5D	; 0x800b5d <a2d_reference>
    8fca:	90 e4       	ldi	r25, 0x40	; 64
    8fcc:	29 9f       	mul	r18, r25
    8fce:	90 01       	movw	r18, r0
    8fd0:	11 24       	eor	r1, r1
    8fd2:	28 0f       	add	r18, r24
    8fd4:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
    8fd8:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
    8fdc:	ea e7       	ldi	r30, 0x7A	; 122
    8fde:	f0 e0       	ldi	r31, 0x00	; 0
    8fe0:	80 81       	ld	r24, Z
    8fe2:	80 64       	ori	r24, 0x40	; 64
    8fe4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
    8fe6:	08 95       	ret

00008fe8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    8fe8:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    8fec:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:239
}
    8ff0:	89 1b       	sub	r24, r25
    8ff2:	99 0b       	sbc	r25, r25
    8ff4:	08 95       	ret

00008ff6 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    8ff6:	85 ed       	ldi	r24, 0xD5	; 213
    8ff8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    8ffc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    9000:	84 fd       	sbrc	r24, 4
    9002:	fc cf       	rjmp	.-8      	; 0x8ffc <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    9004:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:382
}
    9008:	08 95       	ret

0000900a <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    900a:	20 91 3a 0b 	lds	r18, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    900e:	26 0f       	add	r18, r22
    9010:	33 27       	eor	r19, r19
    9012:	33 1f       	adc	r19, r19
    9014:	21 32       	cpi	r18, 0x21	; 33
    9016:	31 05       	cpc	r19, r1
    9018:	ec f4       	brge	.+58     	; 0x9054 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    901a:	20 91 64 0d 	lds	r18, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    901e:	fc 01       	movw	r30, r24
    9020:	90 e0       	ldi	r25, 0x00	; 0
    9022:	80 e0       	ldi	r24, 0x00	; 0
    9024:	24 30       	cpi	r18, 0x04	; 4
    9026:	69 f0       	breq	.+26     	; 0x9042 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:313
    return 2;
    9028:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    902a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    902c:	a0 91 3a 0b 	lds	r26, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    9030:	21 91       	ld	r18, Z+
    9032:	ac 01       	movw	r20, r24
    9034:	46 5e       	subi	r20, 0xE6	; 230
    9036:	54 4f       	sbci	r21, 0xF4	; 244
    9038:	a4 0f       	add	r26, r20
    903a:	b5 2f       	mov	r27, r21
    903c:	b1 1d       	adc	r27, r1
    903e:	2c 93       	st	X, r18
    9040:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    9042:	86 17       	cp	r24, r22
    9044:	98 f3       	brcs	.-26     	; 0x902c <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    9046:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    904a:	68 0f       	add	r22, r24
    904c:	60 93 3a 0b 	sts	0x0B3A, r22	; 0x800b3a <twi_txBufferLength>
    9050:	80 e0       	ldi	r24, 0x00	; 0
    9052:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    9054:	81 e0       	ldi	r24, 0x01	; 1
    9056:	08 95       	ret

00009058 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    9058:	08 95       	ret

0000905a <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    905a:	08 95       	ret

0000905c <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
    905c:	08 95       	ret

0000905e <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
    905e:	e0 91 04 0d 	lds	r30, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    9062:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    9066:	e8 17       	cp	r30, r24
    9068:	30 f4       	brcc	.+12     	; 0x9076 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
    906a:	f0 e0       	ldi	r31, 0x00	; 0
    906c:	e2 5e       	subi	r30, 0xE2	; 226
    906e:	f2 4f       	sbci	r31, 0xF2	; 242
    9070:	80 81       	ld	r24, Z
    9072:	90 e0       	ldi	r25, 0x00	; 0
    9074:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
    9076:	8f ef       	ldi	r24, 0xFF	; 255
    9078:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
    907a:	08 95       	ret

0000907c <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    907c:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    9080:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    9084:	2f ef       	ldi	r18, 0xFF	; 255
    9086:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    9088:	98 17       	cp	r25, r24
    908a:	48 f4       	brcc	.+18     	; 0x909e <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    908c:	e9 2f       	mov	r30, r25
    908e:	f0 e0       	ldi	r31, 0x00	; 0
    9090:	e2 5e       	subi	r30, 0xE2	; 226
    9092:	f2 4f       	sbci	r31, 0xF2	; 242
    9094:	20 81       	ld	r18, Z
    9096:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    9098:	9f 5f       	subi	r25, 0xFF	; 255
    909a:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    909e:	c9 01       	movw	r24, r18
    90a0:	08 95       	ret

000090a2 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    90a2:	cf 92       	push	r12
    90a4:	df 92       	push	r13
    90a6:	ef 92       	push	r14
    90a8:	ff 92       	push	r15
    90aa:	0f 93       	push	r16
    90ac:	1f 93       	push	r17
    90ae:	cf 93       	push	r28
    90b0:	df 93       	push	r29
    90b2:	7c 01       	movw	r14, r24
    90b4:	cb 01       	movw	r24, r22
    90b6:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
    90b8:	20 91 1d 0d 	lds	r18, 0x0D1D	; 0x800d1d <TwoWire::transmitting>
    90bc:	22 23       	and	r18, r18
    90be:	89 f0       	breq	.+34     	; 0x90e2 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    90c0:	eb 01       	movw	r28, r22
    90c2:	6b 01       	movw	r12, r22
    90c4:	c4 0e       	add	r12, r20
    90c6:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
    90c8:	cc 15       	cp	r28, r12
    90ca:	dd 05       	cpc	r29, r13
    90cc:	69 f0       	breq	.+26     	; 0x90e8 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
    90ce:	69 91       	ld	r22, Y+
    90d0:	d7 01       	movw	r26, r14
    90d2:	ed 91       	ld	r30, X+
    90d4:	fc 91       	ld	r31, X
    90d6:	01 90       	ld	r0, Z+
    90d8:	f0 81       	ld	r31, Z
    90da:	e0 2d       	mov	r30, r0
    90dc:	c7 01       	movw	r24, r14
    90de:	19 95       	eicall
    90e0:	f3 cf       	rjmp	.-26     	; 0x90c8 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    90e2:	64 2f       	mov	r22, r20
    90e4:	0e 94 05 48 	call	0x900a	; 0x900a <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
    90e8:	c8 01       	movw	r24, r16
    90ea:	df 91       	pop	r29
    90ec:	cf 91       	pop	r28
    90ee:	1f 91       	pop	r17
    90f0:	0f 91       	pop	r16
    90f2:	ff 90       	pop	r15
    90f4:	ef 90       	pop	r14
    90f6:	df 90       	pop	r13
    90f8:	cf 90       	pop	r12
    90fa:	08 95       	ret

000090fc <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
    90fc:	cf 93       	push	r28
    90fe:	df 93       	push	r29
    9100:	1f 92       	push	r1
    9102:	cd b7       	in	r28, 0x3d	; 61
    9104:	de b7       	in	r29, 0x3e	; 62
    9106:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
    9108:	20 91 1d 0d 	lds	r18, 0x0D1D	; 0x800d1d <TwoWire::transmitting>
    910c:	22 23       	and	r18, r18
    910e:	f9 f0       	breq	.+62     	; 0x914e <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
    9110:	20 91 1a 0d 	lds	r18, 0x0D1A	; 0x800d1a <TwoWire::txBufferLength>
    9114:	20 32       	cpi	r18, 0x20	; 32
    9116:	58 f0       	brcs	.+22     	; 0x912e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    9118:	21 e0       	ldi	r18, 0x01	; 1
    911a:	30 e0       	ldi	r19, 0x00	; 0
    911c:	fc 01       	movw	r30, r24
    911e:	33 83       	std	Z+3, r19	; 0x03
    9120:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
    9122:	90 e0       	ldi	r25, 0x00	; 0
    9124:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    9126:	0f 90       	pop	r0
    9128:	df 91       	pop	r29
    912a:	cf 91       	pop	r28
    912c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    912e:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <TwoWire::txBufferIndex>
    9132:	e8 2f       	mov	r30, r24
    9134:	f0 e0       	ldi	r31, 0x00	; 0
    9136:	e6 50       	subi	r30, 0x06	; 6
    9138:	f5 4f       	sbci	r31, 0xF5	; 245
    913a:	99 81       	ldd	r25, Y+1	; 0x01
    913c:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
    913e:	8f 5f       	subi	r24, 0xFF	; 255
    9140:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
    9144:	80 93 1a 0d 	sts	0x0D1A, r24	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    9148:	81 e0       	ldi	r24, 0x01	; 1
    914a:	90 e0       	ldi	r25, 0x00	; 0
    914c:	ec cf       	rjmp	.-40     	; 0x9126 <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    914e:	61 e0       	ldi	r22, 0x01	; 1
    9150:	ce 01       	movw	r24, r28
    9152:	01 96       	adiw	r24, 0x01	; 1
    9154:	0e 94 05 48 	call	0x900a	; 0x900a <twi_transmit>
    9158:	f7 cf       	rjmp	.-18     	; 0x9148 <TwoWire::write(unsigned char)+0x4c>

0000915a <PID::SetControllerDirection(int)>:
_ZN3PID22SetControllerDirectionEi():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:204
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    915a:	0f 93       	push	r16
    915c:	1f 93       	push	r17
    915e:	cf 93       	push	r28
    9160:	df 93       	push	r29
    9162:	ec 01       	movw	r28, r24
    9164:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/PID/PID_v1.cpp:205
   if(inAuto && Direction !=controllerDirection)
    9166:	8a ad       	ldd	r24, Y+58	; 0x3a
    9168:	88 23       	and	r24, r24
    916a:	61 f1       	breq	.+88     	; 0x91c4 <PID::SetControllerDirection(int)+0x6a>
    916c:	88 8d       	ldd	r24, Y+24	; 0x18
    916e:	99 8d       	ldd	r25, Y+25	; 0x19
    9170:	86 17       	cp	r24, r22
    9172:	97 07       	cpc	r25, r23
    9174:	39 f1       	breq	.+78     	; 0x91c4 <PID::SetControllerDirection(int)+0x6a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:207
   {
	    kp = (0 - kp);
    9176:	2c 85       	ldd	r18, Y+12	; 0x0c
    9178:	3d 85       	ldd	r19, Y+13	; 0x0d
    917a:	4e 85       	ldd	r20, Y+14	; 0x0e
    917c:	5f 85       	ldd	r21, Y+15	; 0x0f
    917e:	60 e0       	ldi	r22, 0x00	; 0
    9180:	70 e0       	ldi	r23, 0x00	; 0
    9182:	cb 01       	movw	r24, r22
    9184:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    9188:	6c 87       	std	Y+12, r22	; 0x0c
    918a:	7d 87       	std	Y+13, r23	; 0x0d
    918c:	8e 87       	std	Y+14, r24	; 0x0e
    918e:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:208
      ki = (0 - ki);
    9190:	28 89       	ldd	r18, Y+16	; 0x10
    9192:	39 89       	ldd	r19, Y+17	; 0x11
    9194:	4a 89       	ldd	r20, Y+18	; 0x12
    9196:	5b 89       	ldd	r21, Y+19	; 0x13
    9198:	60 e0       	ldi	r22, 0x00	; 0
    919a:	70 e0       	ldi	r23, 0x00	; 0
    919c:	cb 01       	movw	r24, r22
    919e:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    91a2:	68 8b       	std	Y+16, r22	; 0x10
    91a4:	79 8b       	std	Y+17, r23	; 0x11
    91a6:	8a 8b       	std	Y+18, r24	; 0x12
    91a8:	9b 8b       	std	Y+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:209
      kd = (0 - kd);
    91aa:	2c 89       	ldd	r18, Y+20	; 0x14
    91ac:	3d 89       	ldd	r19, Y+21	; 0x15
    91ae:	4e 89       	ldd	r20, Y+22	; 0x16
    91b0:	5f 89       	ldd	r21, Y+23	; 0x17
    91b2:	60 e0       	ldi	r22, 0x00	; 0
    91b4:	70 e0       	ldi	r23, 0x00	; 0
    91b6:	cb 01       	movw	r24, r22
    91b8:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    91bc:	6c 8b       	std	Y+20, r22	; 0x14
    91be:	7d 8b       	std	Y+21, r23	; 0x15
    91c0:	8e 8b       	std	Y+22, r24	; 0x16
    91c2:	9f 8b       	std	Y+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   }
   controllerDirection = Direction;
    91c4:	19 8f       	std	Y+25, r17	; 0x19
    91c6:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/Arduino/libraries/PID/PID_v1.cpp:212
}
    91c8:	df 91       	pop	r29
    91ca:	cf 91       	pop	r28
    91cc:	1f 91       	pop	r17
    91ce:	0f 91       	pop	r16
    91d0:	08 95       	ret

000091d2 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
    91d2:	cf 93       	push	r28
    91d4:	df 93       	push	r29
    91d6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
    91d8:	89 8d       	ldd	r24, Y+25	; 0x19
    91da:	9a 8d       	ldd	r25, Y+26	; 0x1a
    91dc:	89 2b       	or	r24, r25
    91de:	41 f0       	breq	.+16     	; 0x91f0 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
    91e0:	e8 81       	ld	r30, Y
    91e2:	f9 81       	ldd	r31, Y+1	; 0x01
    91e4:	02 84       	ldd	r0, Z+10	; 0x0a
    91e6:	f3 85       	ldd	r31, Z+11	; 0x0b
    91e8:	e0 2d       	mov	r30, r0
    91ea:	ce 01       	movw	r24, r28
    91ec:	19 95       	eicall
    91ee:	f4 cf       	rjmp	.-24     	; 0x91d8 <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
    91f0:	df 91       	pop	r29
    91f2:	cf 91       	pop	r28
    91f4:	08 95       	ret

000091f6 <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
    91f6:	cf 93       	push	r28
    91f8:	df 93       	push	r29
    91fa:	1f 92       	push	r1
    91fc:	cd b7       	in	r28, 0x3d	; 61
    91fe:	de b7       	in	r29, 0x3e	; 62
    9200:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
    9202:	dc 01       	movw	r26, r24
    9204:	ed 91       	ld	r30, X+
    9206:	fc 91       	ld	r31, X
    9208:	02 80       	ldd	r0, Z+2	; 0x02
    920a:	f3 81       	ldd	r31, Z+3	; 0x03
    920c:	e0 2d       	mov	r30, r0
    920e:	41 e0       	ldi	r20, 0x01	; 1
    9210:	50 e0       	ldi	r21, 0x00	; 0
    9212:	be 01       	movw	r22, r28
    9214:	6f 5f       	subi	r22, 0xFF	; 255
    9216:	7f 4f       	sbci	r23, 0xFF	; 255
    9218:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
    921a:	0f 90       	pop	r0
    921c:	df 91       	pop	r29
    921e:	cf 91       	pop	r28
    9220:	08 95       	ret

00009222 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
    9222:	fc 01       	movw	r30, r24
    9224:	81 8d       	ldd	r24, Z+25	; 0x19
    9226:	92 8d       	ldd	r25, Z+26	; 0x1a
    9228:	08 95       	ret

0000922a <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
    922a:	fc 01       	movw	r30, r24
    922c:	85 89       	ldd	r24, Z+21	; 0x15
    922e:	96 89       	ldd	r25, Z+22	; 0x16
    9230:	08 95       	ret

00009232 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    9232:	22 ef       	ldi	r18, 0xF2	; 242
    9234:	32 e0       	ldi	r19, 0x02	; 2
    9236:	fc 01       	movw	r30, r24
    9238:	31 83       	std	Z+1, r19	; 0x01
    923a:	20 83       	st	Z, r18
    923c:	fb 01       	movw	r30, r22
    923e:	41 89       	ldd	r20, Z+17	; 0x11
    9240:	52 89       	ldd	r21, Z+18	; 0x12
    9242:	63 89       	ldd	r22, Z+19	; 0x13
    9244:	74 89       	ldd	r23, Z+20	; 0x14
    9246:	fc 01       	movw	r30, r24
    9248:	42 83       	std	Z+2, r20	; 0x02
    924a:	53 83       	std	Z+3, r21	; 0x03
    924c:	64 83       	std	Z+4, r22	; 0x04
    924e:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
    9250:	08 95       	ret

00009252 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
    9252:	80 e0       	ldi	r24, 0x00	; 0
    9254:	08 95       	ret

00009256 <EthernetServer::write(unsigned char)>:
_ZN14EthernetServer5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:71

  return EthernetClient(MAX_SOCK_NUM);
}

size_t EthernetServer::write(uint8_t b) 
{
    9256:	cf 93       	push	r28
    9258:	df 93       	push	r29
    925a:	1f 92       	push	r1
    925c:	cd b7       	in	r28, 0x3d	; 61
    925e:	de b7       	in	r29, 0x3e	; 62
    9260:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:72
  return write(&b, 1);
    9262:	dc 01       	movw	r26, r24
    9264:	ed 91       	ld	r30, X+
    9266:	fc 91       	ld	r31, X
    9268:	02 80       	ldd	r0, Z+2	; 0x02
    926a:	f3 81       	ldd	r31, Z+3	; 0x03
    926c:	e0 2d       	mov	r30, r0
    926e:	41 e0       	ldi	r20, 0x01	; 1
    9270:	50 e0       	ldi	r21, 0x00	; 0
    9272:	be 01       	movw	r22, r28
    9274:	6f 5f       	subi	r22, 0xFF	; 255
    9276:	7f 4f       	sbci	r23, 0xFF	; 255
    9278:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:73
}
    927a:	0f 90       	pop	r0
    927c:	df 91       	pop	r29
    927e:	cf 91       	pop	r28
    9280:	08 95       	ret

00009282 <Print::flush()>:
_ZN5Print5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    9282:	08 95       	ret

00009284 <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
    9284:	fc 01       	movw	r30, r24
    9286:	94 85       	ldd	r25, Z+12	; 0x0c
    9288:	fb 01       	movw	r30, r22
    928a:	84 85       	ldd	r24, Z+12	; 0x0c
    928c:	98 13       	cpse	r25, r24
    928e:	03 c0       	rjmp	.+6      	; 0x9296 <EthernetClient::operator==(EthernetClient const&)+0x12>
    9290:	81 e0       	ldi	r24, 0x01	; 1
    9292:	98 30       	cpi	r25, 0x08	; 8
    9294:	09 f4       	brne	.+2      	; 0x9298 <EthernetClient::operator==(EthernetClient const&)+0x14>
    9296:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
    9298:	08 95       	ret

0000929a <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
    929a:	21 e0       	ldi	r18, 0x01	; 1
    929c:	fc 01       	movw	r30, r24
    929e:	84 85       	ldd	r24, Z+12	; 0x0c
    92a0:	88 30       	cpi	r24, 0x08	; 8
    92a2:	09 f4       	brne	.+2      	; 0x92a6 <EthernetClient::operator bool()+0xc>
    92a4:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
    92a6:	82 2f       	mov	r24, r18
    92a8:	08 95       	ret

000092aa <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    92aa:	08 95       	ret

000092ac <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    92ac:	cf 93       	push	r28
    92ae:	df 93       	push	r29
    92b0:	1f 92       	push	r1
    92b2:	cd b7       	in	r28, 0x3d	; 61
    92b4:	de b7       	in	r29, 0x3e	; 62
    92b6:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    92b8:	dc 01       	movw	r26, r24
    92ba:	ed 91       	ld	r30, X+
    92bc:	fc 91       	ld	r31, X
    92be:	02 80       	ldd	r0, Z+2	; 0x02
    92c0:	f3 81       	ldd	r31, Z+3	; 0x03
    92c2:	e0 2d       	mov	r30, r0
    92c4:	41 e0       	ldi	r20, 0x01	; 1
    92c6:	50 e0       	ldi	r21, 0x00	; 0
    92c8:	be 01       	movw	r22, r28
    92ca:	6f 5f       	subi	r22, 0xFF	; 255
    92cc:	7f 4f       	sbci	r23, 0xFF	; 255
    92ce:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    92d0:	0f 90       	pop	r0
    92d2:	df 91       	pop	r29
    92d4:	cf 91       	pop	r28
    92d6:	08 95       	ret

000092d8 <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    92d8:	dc 01       	movw	r26, r24
    92da:	ed 91       	ld	r30, X+
    92dc:	fc 91       	ld	r31, X
    92de:	02 8c       	ldd	r0, Z+26	; 0x1a
    92e0:	f3 8d       	ldd	r31, Z+27	; 0x1b
    92e2:	e0 2d       	mov	r30, r0
    92e4:	19 95       	eicall
    92e6:	91 e0       	ldi	r25, 0x01	; 1
    92e8:	89 27       	eor	r24, r25
    92ea:	08 95       	ret

000092ec <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    92ec:	90 e0       	ldi	r25, 0x00	; 0
    92ee:	80 e0       	ldi	r24, 0x00	; 0
    92f0:	08 95       	ret

000092f2 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    92f2:	dc 01       	movw	r26, r24
    92f4:	ed 91       	ld	r30, X+
    92f6:	fc 91       	ld	r31, X
    92f8:	04 8c       	ldd	r0, Z+28	; 0x1c
    92fa:	f5 8d       	ldd	r31, Z+29	; 0x1d
    92fc:	e0 2d       	mov	r30, r0
    92fe:	19 94       	eijmp

00009300 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    9300:	fc 01       	movw	r30, r24
    9302:	84 89       	ldd	r24, Z+20	; 0x14
    9304:	95 89       	ldd	r25, Z+21	; 0x15
    9306:	08 95       	ret

00009308 <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    9308:	fc 01       	movw	r30, r24
    930a:	82 89       	ldd	r24, Z+18	; 0x12
    930c:	93 89       	ldd	r25, Z+19	; 0x13
    930e:	08 95       	ret

00009310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    9310:	4f 92       	push	r4
    9312:	5f 92       	push	r5
    9314:	6f 92       	push	r6
    9316:	7f 92       	push	r7
    9318:	8f 92       	push	r8
    931a:	9f 92       	push	r9
    931c:	af 92       	push	r10
    931e:	bf 92       	push	r11
    9320:	cf 92       	push	r12
    9322:	df 92       	push	r13
    9324:	ef 92       	push	r14
    9326:	ff 92       	push	r15
    9328:	0f 93       	push	r16
    932a:	1f 93       	push	r17
    932c:	cf 93       	push	r28
    932e:	df 93       	push	r29
    9330:	ec 01       	movw	r28, r24
    9332:	5a 01       	movw	r10, r20
    9334:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    9336:	37 ff       	sbrs	r19, 7
    9338:	05 c0       	rjmp	.+10     	; 0x9344 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    933a:	62 0f       	add	r22, r18
    933c:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    933e:	31 95       	neg	r19
    9340:	21 95       	neg	r18
    9342:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    9344:	7b 01       	movw	r14, r22
    9346:	e2 0e       	add	r14, r18
    9348:	f3 1e       	adc	r15, r19
    934a:	6b 01       	movw	r12, r22
    934c:	77 ff       	sbrs	r23, 7
    934e:	02 c0       	rjmp	.+4      	; 0x9354 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    9350:	d1 2c       	mov	r13, r1
    9352:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    9354:	e8 81       	ld	r30, Y
    9356:	f9 81       	ldd	r31, Y+1	; 0x01
    9358:	06 84       	ldd	r0, Z+14	; 0x0e
    935a:	f7 85       	ldd	r31, Z+15	; 0x0f
    935c:	e0 2d       	mov	r30, r0
    935e:	ce 01       	movw	r24, r28
    9360:	19 95       	eicall
    9362:	8e 15       	cp	r24, r14
    9364:	9f 05       	cpc	r25, r15
    9366:	44 f4       	brge	.+16     	; 0x9378 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    9368:	e8 81       	ld	r30, Y
    936a:	f9 81       	ldd	r31, Y+1	; 0x01
    936c:	06 84       	ldd	r0, Z+14	; 0x0e
    936e:	f7 85       	ldd	r31, Z+15	; 0x0f
    9370:	e0 2d       	mov	r30, r0
    9372:	ce 01       	movw	r24, r28
    9374:	19 95       	eicall
    9376:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    9378:	47 01       	movw	r8, r14
    937a:	8c 18       	sub	r8, r12
    937c:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    937e:	17 ff       	sbrs	r17, 7
    9380:	05 c0       	rjmp	.+10     	; 0x938c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    9382:	a0 0e       	add	r10, r16
    9384:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    9386:	11 95       	neg	r17
    9388:	01 95       	neg	r16
    938a:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    938c:	0a 0d       	add	r16, r10
    938e:	1b 1d       	adc	r17, r11
    9390:	b7 fe       	sbrs	r11, 7
    9392:	02 c0       	rjmp	.+4      	; 0x9398 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    9394:	b1 2c       	mov	r11, r1
    9396:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    9398:	e8 81       	ld	r30, Y
    939a:	f9 81       	ldd	r31, Y+1	; 0x01
    939c:	04 84       	ldd	r0, Z+12	; 0x0c
    939e:	f5 85       	ldd	r31, Z+13	; 0x0d
    93a0:	e0 2d       	mov	r30, r0
    93a2:	ce 01       	movw	r24, r28
    93a4:	19 95       	eicall
    93a6:	80 17       	cp	r24, r16
    93a8:	91 07       	cpc	r25, r17
    93aa:	44 f4       	brge	.+16     	; 0x93bc <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    93ac:	e8 81       	ld	r30, Y
    93ae:	f9 81       	ldd	r31, Y+1	; 0x01
    93b0:	04 84       	ldd	r0, Z+12	; 0x0c
    93b2:	f5 85       	ldd	r31, Z+13	; 0x0d
    93b4:	e0 2d       	mov	r30, r0
    93b6:	ce 01       	movw	r24, r28
    93b8:	19 95       	eicall
    93ba:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    93bc:	38 01       	movw	r6, r16
    93be:	6a 18       	sub	r6, r10
    93c0:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    93c2:	01 50       	subi	r16, 0x01	; 1
    93c4:	11 09       	sbc	r17, r1
    93c6:	97 01       	movw	r18, r14
    93c8:	21 50       	subi	r18, 0x01	; 1
    93ca:	31 09       	sbc	r19, r1
    93cc:	e8 81       	ld	r30, Y
    93ce:	f9 81       	ldd	r31, Y+1	; 0x01
    93d0:	06 80       	ldd	r0, Z+6	; 0x06
    93d2:	f7 81       	ldd	r31, Z+7	; 0x07
    93d4:	e0 2d       	mov	r30, r0
    93d6:	a5 01       	movw	r20, r10
    93d8:	b6 01       	movw	r22, r12
    93da:	ce 01       	movw	r24, r28
    93dc:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    93de:	ee a5       	ldd	r30, Y+46	; 0x2e
    93e0:	ff a5       	ldd	r31, Y+47	; 0x2f
    93e2:	80 81       	ld	r24, Z
    93e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    93e6:	89 23       	and	r24, r25
    93e8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    93ea:	88 8d       	ldd	r24, Y+24	; 0x18
    93ec:	99 8d       	ldd	r25, Y+25	; 0x19
    93ee:	89 2b       	or	r24, r25
    93f0:	c9 f4       	brne	.+50     	; 0x9424 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    93f2:	e8 a9       	ldd	r30, Y+48	; 0x30
    93f4:	f9 a9       	ldd	r31, Y+49	; 0x31
    93f6:	80 81       	ld	r24, Z
    93f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    93fa:	89 23       	and	r24, r25
    93fc:	80 83       	st	Z, r24
    93fe:	12 b8       	out	0x02, r1	; 2
    9400:	ea a9       	ldd	r30, Y+50	; 0x32
    9402:	fb a9       	ldd	r31, Y+51	; 0x33
    9404:	80 81       	ld	r24, Z
    9406:	9c ad       	ldd	r25, Y+60	; 0x3c
    9408:	89 23       	and	r24, r25
    940a:	80 83       	st	Z, r24
    940c:	ea a9       	ldd	r30, Y+50	; 0x32
    940e:	fb a9       	ldd	r31, Y+51	; 0x33
    9410:	80 81       	ld	r24, Z
    9412:	98 ad       	ldd	r25, Y+56	; 0x38
    9414:	89 2b       	or	r24, r25
    9416:	80 83       	st	Z, r24
    9418:	e8 a9       	ldd	r30, Y+48	; 0x30
    941a:	f9 a9       	ldd	r31, Y+49	; 0x31
    941c:	80 81       	ld	r24, Z
    941e:	9f a9       	ldd	r25, Y+55	; 0x37
    9420:	89 2b       	or	r24, r25
    9422:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    9424:	e8 a9       	ldd	r30, Y+48	; 0x30
    9426:	f9 a9       	ldd	r31, Y+49	; 0x31
    9428:	80 81       	ld	r24, Z
    942a:	9b ad       	ldd	r25, Y+59	; 0x3b
    942c:	89 23       	and	r24, r25
    942e:	80 83       	st	Z, r24
    9430:	88 a1       	ldd	r24, Y+32	; 0x20
    9432:	82 b9       	out	0x02, r24	; 2
    9434:	ea a9       	ldd	r30, Y+50	; 0x32
    9436:	fb a9       	ldd	r31, Y+51	; 0x33
    9438:	80 81       	ld	r24, Z
    943a:	9c ad       	ldd	r25, Y+60	; 0x3c
    943c:	89 23       	and	r24, r25
    943e:	80 83       	st	Z, r24
    9440:	ea a9       	ldd	r30, Y+50	; 0x32
    9442:	fb a9       	ldd	r31, Y+51	; 0x33
    9444:	80 81       	ld	r24, Z
    9446:	98 ad       	ldd	r25, Y+56	; 0x38
    9448:	89 2b       	or	r24, r25
    944a:	80 83       	st	Z, r24
    944c:	e8 a9       	ldd	r30, Y+48	; 0x30
    944e:	f9 a9       	ldd	r31, Y+49	; 0x31
    9450:	80 81       	ld	r24, Z
    9452:	9f a9       	ldd	r25, Y+55	; 0x37
    9454:	89 2b       	or	r24, r25
    9456:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    9458:	86 14       	cp	r8, r6
    945a:	97 04       	cpc	r9, r7
    945c:	2c f0       	brlt	.+10     	; 0x9468 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    945e:	96 2d       	mov	r25, r6
    9460:	87 2d       	mov	r24, r7
    9462:	34 01       	movw	r6, r8
    9464:	89 2e       	mov	r8, r25
    9466:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    9468:	18 14       	cp	r1, r8
    946a:	19 04       	cpc	r1, r9
    946c:	0c f5       	brge	.+66     	; 0x94b0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    946e:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    9470:	52 b8       	out	0x02, r5	; 2
    9472:	ea a9       	ldd	r30, Y+50	; 0x32
    9474:	fb a9       	ldd	r31, Y+51	; 0x33
    9476:	20 81       	ld	r18, Z
    9478:	3c ad       	ldd	r19, Y+60	; 0x3c
    947a:	23 23       	and	r18, r19
    947c:	20 83       	st	Z, r18
    947e:	ea a9       	ldd	r30, Y+50	; 0x32
    9480:	fb a9       	ldd	r31, Y+51	; 0x33
    9482:	20 81       	ld	r18, Z
    9484:	38 ad       	ldd	r19, Y+56	; 0x38
    9486:	23 2b       	or	r18, r19
    9488:	20 83       	st	Z, r18
    948a:	42 b8       	out	0x02, r4	; 2
    948c:	ea a9       	ldd	r30, Y+50	; 0x32
    948e:	fb a9       	ldd	r31, Y+51	; 0x33
    9490:	20 81       	ld	r18, Z
    9492:	3c ad       	ldd	r19, Y+60	; 0x3c
    9494:	23 23       	and	r18, r19
    9496:	20 83       	st	Z, r18
    9498:	ea a9       	ldd	r30, Y+50	; 0x32
    949a:	fb a9       	ldd	r31, Y+51	; 0x33
    949c:	20 81       	ld	r18, Z
    949e:	38 ad       	ldd	r19, Y+56	; 0x38
    94a0:	23 2b       	or	r18, r19
    94a2:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    94a4:	01 97       	sbiw	r24, 0x01	; 1
    94a6:	21 f7       	brne	.-56     	; 0x9470 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    94a8:	81 e0       	ldi	r24, 0x01	; 1
    94aa:	88 1a       	sub	r8, r24
    94ac:	91 08       	sbc	r9, r1
    94ae:	dc cf       	rjmp	.-72     	; 0x9468 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    94b0:	88 8d       	ldd	r24, Y+24	; 0x18
    94b2:	99 8d       	ldd	r25, Y+25	; 0x19
    94b4:	00 97       	sbiw	r24, 0x00	; 0
    94b6:	51 f5       	brne	.+84     	; 0x950c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    94b8:	0c 89       	ldd	r16, Y+20	; 0x14
    94ba:	1d 89       	ldd	r17, Y+21	; 0x15
    94bc:	01 50       	subi	r16, 0x01	; 1
    94be:	11 09       	sbc	r17, r1
    94c0:	2a 89       	ldd	r18, Y+18	; 0x12
    94c2:	3b 89       	ldd	r19, Y+19	; 0x13
    94c4:	21 50       	subi	r18, 0x01	; 1
    94c6:	31 09       	sbc	r19, r1
    94c8:	e8 81       	ld	r30, Y
    94ca:	f9 81       	ldd	r31, Y+1	; 0x01
    94cc:	06 80       	ldd	r0, Z+6	; 0x06
    94ce:	f7 81       	ldd	r31, Z+7	; 0x07
    94d0:	e0 2d       	mov	r30, r0
    94d2:	50 e0       	ldi	r21, 0x00	; 0
    94d4:	40 e0       	ldi	r20, 0x00	; 0
    94d6:	70 e0       	ldi	r23, 0x00	; 0
    94d8:	60 e0       	ldi	r22, 0x00	; 0
    94da:	ce 01       	movw	r24, r28
    94dc:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    94de:	ee a5       	ldd	r30, Y+46	; 0x2e
    94e0:	ff a5       	ldd	r31, Y+47	; 0x2f
    94e2:	80 81       	ld	r24, Z
    94e4:	9e a9       	ldd	r25, Y+54	; 0x36
    94e6:	89 2b       	or	r24, r25
    94e8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    94ea:	df 91       	pop	r29
    94ec:	cf 91       	pop	r28
    94ee:	1f 91       	pop	r17
    94f0:	0f 91       	pop	r16
    94f2:	ff 90       	pop	r15
    94f4:	ef 90       	pop	r14
    94f6:	df 90       	pop	r13
    94f8:	cf 90       	pop	r12
    94fa:	bf 90       	pop	r11
    94fc:	af 90       	pop	r10
    94fe:	9f 90       	pop	r9
    9500:	8f 90       	pop	r8
    9502:	7f 90       	pop	r7
    9504:	6f 90       	pop	r6
    9506:	5f 90       	pop	r5
    9508:	4f 90       	pop	r4
    950a:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    950c:	01 97       	sbiw	r24, 0x01	; 1
    950e:	39 f7       	brne	.-50     	; 0x94de <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    9510:	ee a5       	ldd	r30, Y+46	; 0x2e
    9512:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    9514:	80 81       	ld	r24, Z
    9516:	9a ad       	ldd	r25, Y+58	; 0x3a
    9518:	89 23       	and	r24, r25
    951a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    951c:	e8 a9       	ldd	r30, Y+48	; 0x30
    951e:	f9 a9       	ldd	r31, Y+49	; 0x31
    9520:	80 81       	ld	r24, Z
    9522:	9b ad       	ldd	r25, Y+59	; 0x3b
    9524:	89 23       	and	r24, r25
    9526:	80 83       	st	Z, r24
    9528:	84 e0       	ldi	r24, 0x04	; 4
    952a:	82 b9       	out	0x02, r24	; 2
    952c:	ea a9       	ldd	r30, Y+50	; 0x32
    952e:	fb a9       	ldd	r31, Y+51	; 0x33
    9530:	80 81       	ld	r24, Z
    9532:	9c ad       	ldd	r25, Y+60	; 0x3c
    9534:	89 23       	and	r24, r25
    9536:	80 83       	st	Z, r24
    9538:	ea a9       	ldd	r30, Y+50	; 0x32
    953a:	fb a9       	ldd	r31, Y+51	; 0x33
    953c:	80 81       	ld	r24, Z
    953e:	98 ad       	ldd	r25, Y+56	; 0x38
    9540:	89 2b       	or	r24, r25
    9542:	80 83       	st	Z, r24
    9544:	e8 a9       	ldd	r30, Y+48	; 0x30
    9546:	f9 a9       	ldd	r31, Y+49	; 0x31
    9548:	80 81       	ld	r24, Z
    954a:	9f a9       	ldd	r25, Y+55	; 0x37
    954c:	89 2b       	or	r24, r25
    954e:	80 83       	st	Z, r24
    9550:	8a 89       	ldd	r24, Y+18	; 0x12
    9552:	9b 89       	ldd	r25, Y+19	; 0x13
    9554:	01 97       	sbiw	r24, 0x01	; 1
    9556:	92 b9       	out	0x02, r25	; 2
    9558:	ea a9       	ldd	r30, Y+50	; 0x32
    955a:	fb a9       	ldd	r31, Y+51	; 0x33
    955c:	80 81       	ld	r24, Z
    955e:	9c ad       	ldd	r25, Y+60	; 0x3c
    9560:	89 23       	and	r24, r25
    9562:	80 83       	st	Z, r24
    9564:	ea a9       	ldd	r30, Y+50	; 0x32
    9566:	fb a9       	ldd	r31, Y+51	; 0x33
    9568:	80 81       	ld	r24, Z
    956a:	98 ad       	ldd	r25, Y+56	; 0x38
    956c:	89 2b       	or	r24, r25
    956e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    9570:	e8 a9       	ldd	r30, Y+48	; 0x30
    9572:	f9 a9       	ldd	r31, Y+49	; 0x31
    9574:	80 81       	ld	r24, Z
    9576:	9b ad       	ldd	r25, Y+59	; 0x3b
    9578:	89 23       	and	r24, r25
    957a:	80 83       	st	Z, r24
    957c:	85 e0       	ldi	r24, 0x05	; 5
    957e:	82 b9       	out	0x02, r24	; 2
    9580:	ea a9       	ldd	r30, Y+50	; 0x32
    9582:	fb a9       	ldd	r31, Y+51	; 0x33
    9584:	80 81       	ld	r24, Z
    9586:	9c ad       	ldd	r25, Y+60	; 0x3c
    9588:	89 23       	and	r24, r25
    958a:	80 83       	st	Z, r24
    958c:	ea a9       	ldd	r30, Y+50	; 0x32
    958e:	fb a9       	ldd	r31, Y+51	; 0x33
    9590:	80 81       	ld	r24, Z
    9592:	98 ad       	ldd	r25, Y+56	; 0x38
    9594:	89 2b       	or	r24, r25
    9596:	80 83       	st	Z, r24
    9598:	e8 a9       	ldd	r30, Y+48	; 0x30
    959a:	f9 a9       	ldd	r31, Y+49	; 0x31
    959c:	80 81       	ld	r24, Z
    959e:	9f a9       	ldd	r25, Y+55	; 0x37
    95a0:	89 2b       	or	r24, r25
    95a2:	80 83       	st	Z, r24
    95a4:	8a 89       	ldd	r24, Y+18	; 0x12
    95a6:	81 50       	subi	r24, 0x01	; 1
    95a8:	82 b9       	out	0x02, r24	; 2
    95aa:	ea a9       	ldd	r30, Y+50	; 0x32
    95ac:	fb a9       	ldd	r31, Y+51	; 0x33
    95ae:	80 81       	ld	r24, Z
    95b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    95b2:	89 23       	and	r24, r25
    95b4:	80 83       	st	Z, r24
    95b6:	ea a9       	ldd	r30, Y+50	; 0x32
    95b8:	fb a9       	ldd	r31, Y+51	; 0x33
    95ba:	80 81       	ld	r24, Z
    95bc:	98 ad       	ldd	r25, Y+56	; 0x38
    95be:	89 2b       	or	r24, r25
    95c0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    95c2:	e8 a9       	ldd	r30, Y+48	; 0x30
    95c4:	f9 a9       	ldd	r31, Y+49	; 0x31
    95c6:	80 81       	ld	r24, Z
    95c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    95ca:	89 23       	and	r24, r25
    95cc:	80 83       	st	Z, r24
    95ce:	88 e0       	ldi	r24, 0x08	; 8
    95d0:	82 b9       	out	0x02, r24	; 2
    95d2:	ea a9       	ldd	r30, Y+50	; 0x32
    95d4:	fb a9       	ldd	r31, Y+51	; 0x33
    95d6:	80 81       	ld	r24, Z
    95d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    95da:	89 23       	and	r24, r25
    95dc:	80 83       	st	Z, r24
    95de:	ea a9       	ldd	r30, Y+50	; 0x32
    95e0:	fb a9       	ldd	r31, Y+51	; 0x33
    95e2:	80 81       	ld	r24, Z
    95e4:	98 ad       	ldd	r25, Y+56	; 0x38
    95e6:	89 2b       	or	r24, r25
    95e8:	80 83       	st	Z, r24
    95ea:	e8 a9       	ldd	r30, Y+48	; 0x30
    95ec:	f9 a9       	ldd	r31, Y+49	; 0x31
    95ee:	80 81       	ld	r24, Z
    95f0:	9f a9       	ldd	r25, Y+55	; 0x37
    95f2:	89 2b       	or	r24, r25
    95f4:	80 83       	st	Z, r24
    95f6:	8c 89       	ldd	r24, Y+20	; 0x14
    95f8:	9d 89       	ldd	r25, Y+21	; 0x15
    95fa:	01 97       	sbiw	r24, 0x01	; 1
    95fc:	92 b9       	out	0x02, r25	; 2
    95fe:	ea a9       	ldd	r30, Y+50	; 0x32
    9600:	fb a9       	ldd	r31, Y+51	; 0x33
    9602:	80 81       	ld	r24, Z
    9604:	9c ad       	ldd	r25, Y+60	; 0x3c
    9606:	89 23       	and	r24, r25
    9608:	80 83       	st	Z, r24
    960a:	ea a9       	ldd	r30, Y+50	; 0x32
    960c:	fb a9       	ldd	r31, Y+51	; 0x33
    960e:	80 81       	ld	r24, Z
    9610:	98 ad       	ldd	r25, Y+56	; 0x38
    9612:	89 2b       	or	r24, r25
    9614:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    9616:	e8 a9       	ldd	r30, Y+48	; 0x30
    9618:	f9 a9       	ldd	r31, Y+49	; 0x31
    961a:	80 81       	ld	r24, Z
    961c:	9b ad       	ldd	r25, Y+59	; 0x3b
    961e:	89 23       	and	r24, r25
    9620:	80 83       	st	Z, r24
    9622:	89 e0       	ldi	r24, 0x09	; 9
    9624:	82 b9       	out	0x02, r24	; 2
    9626:	ea a9       	ldd	r30, Y+50	; 0x32
    9628:	fb a9       	ldd	r31, Y+51	; 0x33
    962a:	80 81       	ld	r24, Z
    962c:	9c ad       	ldd	r25, Y+60	; 0x3c
    962e:	89 23       	and	r24, r25
    9630:	80 83       	st	Z, r24
    9632:	ea a9       	ldd	r30, Y+50	; 0x32
    9634:	fb a9       	ldd	r31, Y+51	; 0x33
    9636:	80 81       	ld	r24, Z
    9638:	98 ad       	ldd	r25, Y+56	; 0x38
    963a:	89 2b       	or	r24, r25
    963c:	80 83       	st	Z, r24
    963e:	e8 a9       	ldd	r30, Y+48	; 0x30
    9640:	f9 a9       	ldd	r31, Y+49	; 0x31
    9642:	80 81       	ld	r24, Z
    9644:	9f a9       	ldd	r25, Y+55	; 0x37
    9646:	89 2b       	or	r24, r25
    9648:	80 83       	st	Z, r24
    964a:	8c 89       	ldd	r24, Y+20	; 0x14
    964c:	81 50       	subi	r24, 0x01	; 1
    964e:	82 b9       	out	0x02, r24	; 2
    9650:	ea a9       	ldd	r30, Y+50	; 0x32
    9652:	fb a9       	ldd	r31, Y+51	; 0x33
    9654:	80 81       	ld	r24, Z
    9656:	9c ad       	ldd	r25, Y+60	; 0x3c
    9658:	89 23       	and	r24, r25
    965a:	80 83       	st	Z, r24
    965c:	ea a9       	ldd	r30, Y+50	; 0x32
    965e:	fb a9       	ldd	r31, Y+51	; 0x33
    9660:	80 81       	ld	r24, Z
    9662:	98 ad       	ldd	r25, Y+56	; 0x38
    9664:	89 2b       	or	r24, r25
    9666:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    9668:	ee a5       	ldd	r30, Y+46	; 0x2e
    966a:	ff a5       	ldd	r31, Y+47	; 0x2f
    966c:	80 81       	ld	r24, Z
    966e:	9e a9       	ldd	r25, Y+54	; 0x36
    9670:	89 2b       	or	r24, r25
    9672:	80 83       	st	Z, r24
    9674:	34 cf       	rjmp	.-408    	; 0x94de <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

00009676 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    9676:	af 92       	push	r10
    9678:	bf 92       	push	r11
    967a:	cf 92       	push	r12
    967c:	df 92       	push	r13
    967e:	ef 92       	push	r14
    9680:	ff 92       	push	r15
    9682:	0f 93       	push	r16
    9684:	1f 93       	push	r17
    9686:	cf 93       	push	r28
    9688:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    968a:	77 fd       	sbrc	r23, 7
    968c:	75 c0       	rjmp	.+234    	; 0x9778 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    968e:	57 fd       	sbrc	r21, 7
    9690:	73 c0       	rjmp	.+230    	; 0x9778 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    9692:	c3 2e       	mov	r12, r19
    9694:	d2 2e       	mov	r13, r18
    9696:	5a 01       	movw	r10, r20
    9698:	7b 01       	movw	r14, r22
    969a:	ec 01       	movw	r28, r24
    969c:	e8 81       	ld	r30, Y
    969e:	f9 81       	ldd	r31, Y+1	; 0x01
    96a0:	06 84       	ldd	r0, Z+14	; 0x0e
    96a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    96a4:	e0 2d       	mov	r30, r0
    96a6:	19 95       	eicall
    96a8:	8e 15       	cp	r24, r14
    96aa:	9f 05       	cpc	r25, r15
    96ac:	0c f4       	brge	.+2      	; 0x96b0 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    96ae:	64 c0       	rjmp	.+200    	; 0x9778 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    96b0:	e8 81       	ld	r30, Y
    96b2:	f9 81       	ldd	r31, Y+1	; 0x01
    96b4:	04 84       	ldd	r0, Z+12	; 0x0c
    96b6:	f5 85       	ldd	r31, Z+13	; 0x0d
    96b8:	e0 2d       	mov	r30, r0
    96ba:	ce 01       	movw	r24, r28
    96bc:	19 95       	eicall
    96be:	8a 15       	cp	r24, r10
    96c0:	9b 05       	cpc	r25, r11
    96c2:	0c f4       	brge	.+2      	; 0x96c6 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    96c4:	59 c0       	rjmp	.+178    	; 0x9778 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    96c6:	e8 81       	ld	r30, Y
    96c8:	f9 81       	ldd	r31, Y+1	; 0x01
    96ca:	06 80       	ldd	r0, Z+6	; 0x06
    96cc:	f7 81       	ldd	r31, Z+7	; 0x07
    96ce:	e0 2d       	mov	r30, r0
    96d0:	85 01       	movw	r16, r10
    96d2:	97 01       	movw	r18, r14
    96d4:	a5 01       	movw	r20, r10
    96d6:	b7 01       	movw	r22, r14
    96d8:	ce 01       	movw	r24, r28
    96da:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    96dc:	ee a5       	ldd	r30, Y+46	; 0x2e
    96de:	ff a5       	ldd	r31, Y+47	; 0x2f
    96e0:	80 81       	ld	r24, Z
    96e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    96e4:	89 23       	and	r24, r25
    96e6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    96e8:	98 a1       	ldd	r25, Y+32	; 0x20
    96ea:	29 a1       	ldd	r18, Y+33	; 0x21
    96ec:	e8 a9       	ldd	r30, Y+48	; 0x30
    96ee:	f9 a9       	ldd	r31, Y+49	; 0x31
    96f0:	80 81       	ld	r24, Z
    96f2:	3b ad       	ldd	r19, Y+59	; 0x3b
    96f4:	83 23       	and	r24, r19
    96f6:	80 83       	st	Z, r24
    96f8:	22 b9       	out	0x02, r18	; 2
    96fa:	ea a9       	ldd	r30, Y+50	; 0x32
    96fc:	fb a9       	ldd	r31, Y+51	; 0x33
    96fe:	80 81       	ld	r24, Z
    9700:	2c ad       	ldd	r18, Y+60	; 0x3c
    9702:	82 23       	and	r24, r18
    9704:	80 83       	st	Z, r24
    9706:	ea a9       	ldd	r30, Y+50	; 0x32
    9708:	fb a9       	ldd	r31, Y+51	; 0x33
    970a:	80 81       	ld	r24, Z
    970c:	28 ad       	ldd	r18, Y+56	; 0x38
    970e:	82 2b       	or	r24, r18
    9710:	80 83       	st	Z, r24
    9712:	92 b9       	out	0x02, r25	; 2
    9714:	ea a9       	ldd	r30, Y+50	; 0x32
    9716:	fb a9       	ldd	r31, Y+51	; 0x33
    9718:	80 81       	ld	r24, Z
    971a:	9c ad       	ldd	r25, Y+60	; 0x3c
    971c:	89 23       	and	r24, r25
    971e:	80 83       	st	Z, r24
    9720:	ea a9       	ldd	r30, Y+50	; 0x32
    9722:	fb a9       	ldd	r31, Y+51	; 0x33
    9724:	80 81       	ld	r24, Z
    9726:	98 ad       	ldd	r25, Y+56	; 0x38
    9728:	89 2b       	or	r24, r25
    972a:	80 83       	st	Z, r24
    972c:	e8 a9       	ldd	r30, Y+48	; 0x30
    972e:	f9 a9       	ldd	r31, Y+49	; 0x31
    9730:	80 81       	ld	r24, Z
    9732:	9f a9       	ldd	r25, Y+55	; 0x37
    9734:	89 2b       	or	r24, r25
    9736:	80 83       	st	Z, r24
    9738:	c2 b8       	out	0x02, r12	; 2
    973a:	ea a9       	ldd	r30, Y+50	; 0x32
    973c:	fb a9       	ldd	r31, Y+51	; 0x33
    973e:	80 81       	ld	r24, Z
    9740:	9c ad       	ldd	r25, Y+60	; 0x3c
    9742:	89 23       	and	r24, r25
    9744:	80 83       	st	Z, r24
    9746:	ea a9       	ldd	r30, Y+50	; 0x32
    9748:	fb a9       	ldd	r31, Y+51	; 0x33
    974a:	80 81       	ld	r24, Z
    974c:	98 ad       	ldd	r25, Y+56	; 0x38
    974e:	89 2b       	or	r24, r25
    9750:	80 83       	st	Z, r24
    9752:	d2 b8       	out	0x02, r13	; 2
    9754:	ea a9       	ldd	r30, Y+50	; 0x32
    9756:	fb a9       	ldd	r31, Y+51	; 0x33
    9758:	80 81       	ld	r24, Z
    975a:	9c ad       	ldd	r25, Y+60	; 0x3c
    975c:	89 23       	and	r24, r25
    975e:	80 83       	st	Z, r24
    9760:	ea a9       	ldd	r30, Y+50	; 0x32
    9762:	fb a9       	ldd	r31, Y+51	; 0x33
    9764:	80 81       	ld	r24, Z
    9766:	98 ad       	ldd	r25, Y+56	; 0x38
    9768:	89 2b       	or	r24, r25
    976a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    976c:	ee a5       	ldd	r30, Y+46	; 0x2e
    976e:	ff a5       	ldd	r31, Y+47	; 0x2f
    9770:	80 81       	ld	r24, Z
    9772:	9e a9       	ldd	r25, Y+54	; 0x36
    9774:	89 2b       	or	r24, r25
    9776:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    9778:	df 91       	pop	r29
    977a:	cf 91       	pop	r28
    977c:	1f 91       	pop	r17
    977e:	0f 91       	pop	r16
    9780:	ff 90       	pop	r15
    9782:	ef 90       	pop	r14
    9784:	df 90       	pop	r13
    9786:	cf 90       	pop	r12
    9788:	bf 90       	pop	r11
    978a:	af 90       	pop	r10
    978c:	08 95       	ret

0000978e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    978e:	7f 92       	push	r7
    9790:	8f 92       	push	r8
    9792:	9f 92       	push	r9
    9794:	af 92       	push	r10
    9796:	bf 92       	push	r11
    9798:	cf 92       	push	r12
    979a:	df 92       	push	r13
    979c:	ef 92       	push	r14
    979e:	ff 92       	push	r15
    97a0:	0f 93       	push	r16
    97a2:	1f 93       	push	r17
    97a4:	cf 93       	push	r28
    97a6:	df 93       	push	r29
    97a8:	ec 01       	movw	r28, r24
    97aa:	59 01       	movw	r10, r18
    97ac:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    97ae:	0e 9d       	mul	r16, r14
    97b0:	60 01       	movw	r12, r0
    97b2:	0f 9d       	mul	r16, r15
    97b4:	d0 0c       	add	r13, r0
    97b6:	1e 9d       	mul	r17, r14
    97b8:	d0 0c       	add	r13, r0
    97ba:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    97bc:	87 01       	movw	r16, r14
    97be:	04 0f       	add	r16, r20
    97c0:	15 1f       	adc	r17, r21
    97c2:	01 50       	subi	r16, 0x01	; 1
    97c4:	11 09       	sbc	r17, r1
    97c6:	26 0f       	add	r18, r22
    97c8:	37 1f       	adc	r19, r23
    97ca:	21 50       	subi	r18, 0x01	; 1
    97cc:	31 09       	sbc	r19, r1
    97ce:	e8 81       	ld	r30, Y
    97d0:	f9 81       	ldd	r31, Y+1	; 0x01
    97d2:	06 80       	ldd	r0, Z+6	; 0x06
    97d4:	f7 81       	ldd	r31, Z+7	; 0x07
    97d6:	e0 2d       	mov	r30, r0
    97d8:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    97da:	77 24       	eor	r7, r7
    97dc:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    97de:	1c 14       	cp	r1, r12
    97e0:	1d 04       	cpc	r1, r13
    97e2:	0c f0       	brlt	.+2      	; 0x97e6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    97e4:	0a c1       	rjmp	.+532    	; 0x99fa <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    97e6:	ee a5       	ldd	r30, Y+46	; 0x2e
    97e8:	ff a5       	ldd	r31, Y+47	; 0x2f
    97ea:	80 81       	ld	r24, Z
    97ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    97ee:	89 23       	and	r24, r25
    97f0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    97f2:	e8 a9       	ldd	r30, Y+48	; 0x30
    97f4:	f9 a9       	ldd	r31, Y+49	; 0x31
    97f6:	80 81       	ld	r24, Z
    97f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    97fa:	89 23       	and	r24, r25
    97fc:	80 83       	st	Z, r24
    97fe:	9a a1       	ldd	r25, Y+34	; 0x22
    9800:	8b a1       	ldd	r24, Y+35	; 0x23
    9802:	82 b9       	out	0x02, r24	; 2
    9804:	ea a9       	ldd	r30, Y+50	; 0x32
    9806:	fb a9       	ldd	r31, Y+51	; 0x33
    9808:	80 81       	ld	r24, Z
    980a:	2c ad       	ldd	r18, Y+60	; 0x3c
    980c:	82 23       	and	r24, r18
    980e:	80 83       	st	Z, r24
    9810:	ea a9       	ldd	r30, Y+50	; 0x32
    9812:	fb a9       	ldd	r31, Y+51	; 0x33
    9814:	80 81       	ld	r24, Z
    9816:	28 ad       	ldd	r18, Y+56	; 0x38
    9818:	82 2b       	or	r24, r18
    981a:	80 83       	st	Z, r24
    981c:	92 b9       	out	0x02, r25	; 2
    981e:	ea a9       	ldd	r30, Y+50	; 0x32
    9820:	fb a9       	ldd	r31, Y+51	; 0x33
    9822:	80 81       	ld	r24, Z
    9824:	9c ad       	ldd	r25, Y+60	; 0x3c
    9826:	89 23       	and	r24, r25
    9828:	80 83       	st	Z, r24
    982a:	ea a9       	ldd	r30, Y+50	; 0x32
    982c:	fb a9       	ldd	r31, Y+51	; 0x33
    982e:	80 81       	ld	r24, Z
    9830:	98 ad       	ldd	r25, Y+56	; 0x38
    9832:	89 2b       	or	r24, r25
    9834:	80 83       	st	Z, r24
    9836:	e8 a9       	ldd	r30, Y+48	; 0x30
    9838:	f9 a9       	ldd	r31, Y+49	; 0x31
    983a:	80 81       	ld	r24, Z
    983c:	9f a9       	ldd	r25, Y+55	; 0x37
    983e:	89 2b       	or	r24, r25
    9840:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    9842:	81 b1       	in	r24, 0x01	; 1
    9844:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    9846:	88 8d       	ldd	r24, Y+24	; 0x18
    9848:	99 8d       	ldd	r25, Y+25	; 0x19
    984a:	89 2b       	or	r24, r25
    984c:	09 f0       	breq	.+2      	; 0x9850 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    984e:	67 c0       	rjmp	.+206    	; 0x991e <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    9850:	f5 01       	movw	r30, r10
    9852:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    9854:	42 e0       	ldi	r20, 0x02	; 2
    9856:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    9858:	ac a9       	ldd	r26, Y+52	; 0x34
    985a:	bd a9       	ldd	r27, Y+53	; 0x35
    985c:	2c 91       	ld	r18, X
    985e:	3d ad       	ldd	r19, Y+61	; 0x3d
    9860:	23 23       	and	r18, r19
    9862:	2c 93       	st	X, r18
    9864:	20 b1       	in	r18, 0x00	; 0
    9866:	ac a9       	ldd	r26, Y+52	; 0x34
    9868:	bd a9       	ldd	r27, Y+53	; 0x35
    986a:	2c 91       	ld	r18, X
    986c:	39 ad       	ldd	r19, Y+57	; 0x39
    986e:	23 2b       	or	r18, r19
    9870:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    9872:	ac a9       	ldd	r26, Y+52	; 0x34
    9874:	bd a9       	ldd	r27, Y+53	; 0x35
    9876:	2c 91       	ld	r18, X
    9878:	3d ad       	ldd	r19, Y+61	; 0x3d
    987a:	23 23       	and	r18, r19
    987c:	2c 93       	st	X, r18
    987e:	20 b1       	in	r18, 0x00	; 0
    9880:	ac a9       	ldd	r26, Y+52	; 0x34
    9882:	bd a9       	ldd	r27, Y+53	; 0x35
    9884:	2c 91       	ld	r18, X
    9886:	39 ad       	ldd	r19, Y+57	; 0x39
    9888:	23 2b       	or	r18, r19
    988a:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    988c:	ac a9       	ldd	r26, Y+52	; 0x34
    988e:	bd a9       	ldd	r27, Y+53	; 0x35
    9890:	2c 91       	ld	r18, X
    9892:	3d ad       	ldd	r19, Y+61	; 0x3d
    9894:	23 23       	and	r18, r19
    9896:	2c 93       	st	X, r18
    9898:	20 b1       	in	r18, 0x00	; 0
    989a:	ac a9       	ldd	r26, Y+52	; 0x34
    989c:	bd a9       	ldd	r27, Y+53	; 0x35
    989e:	3c 91       	ld	r19, X
    98a0:	69 ad       	ldd	r22, Y+57	; 0x39
    98a2:	36 2b       	or	r19, r22
    98a4:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    98a6:	ac a9       	ldd	r26, Y+52	; 0x34
    98a8:	bd a9       	ldd	r27, Y+53	; 0x35
    98aa:	3c 91       	ld	r19, X
    98ac:	6d ad       	ldd	r22, Y+61	; 0x3d
    98ae:	36 23       	and	r19, r22
    98b0:	3c 93       	st	X, r19
    98b2:	60 b1       	in	r22, 0x00	; 0
    98b4:	ac a9       	ldd	r26, Y+52	; 0x34
    98b6:	bd a9       	ldd	r27, Y+53	; 0x35
    98b8:	3c 91       	ld	r19, X
    98ba:	79 ad       	ldd	r23, Y+57	; 0x39
    98bc:	37 2b       	or	r19, r23
    98be:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    98c0:	41 30       	cpi	r20, 0x01	; 1
    98c2:	51 05       	cpc	r21, r1
    98c4:	49 f5       	brne	.+82     	; 0x9918 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    98c6:	32 2f       	mov	r19, r18
    98c8:	26 2f       	mov	r18, r22
    98ca:	21 93       	st	Z+, r18
    98cc:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    98ce:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    98d0:	09 f0       	breq	.+2      	; 0x98d4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    98d2:	c0 cf       	rjmp	.-128    	; 0x9854 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    98d4:	cc 0c       	add	r12, r12
    98d6:	dd 1c       	adc	r13, r13
    98d8:	ac 0c       	add	r10, r12
    98da:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    98dc:	0c 89       	ldd	r16, Y+20	; 0x14
    98de:	1d 89       	ldd	r17, Y+21	; 0x15
    98e0:	01 50       	subi	r16, 0x01	; 1
    98e2:	11 09       	sbc	r17, r1
    98e4:	2a 89       	ldd	r18, Y+18	; 0x12
    98e6:	3b 89       	ldd	r19, Y+19	; 0x13
    98e8:	21 50       	subi	r18, 0x01	; 1
    98ea:	31 09       	sbc	r19, r1
    98ec:	e8 81       	ld	r30, Y
    98ee:	f9 81       	ldd	r31, Y+1	; 0x01
    98f0:	06 80       	ldd	r0, Z+6	; 0x06
    98f2:	f7 81       	ldd	r31, Z+7	; 0x07
    98f4:	e0 2d       	mov	r30, r0
    98f6:	50 e0       	ldi	r21, 0x00	; 0
    98f8:	40 e0       	ldi	r20, 0x00	; 0
    98fa:	70 e0       	ldi	r23, 0x00	; 0
    98fc:	60 e0       	ldi	r22, 0x00	; 0
    98fe:	ce 01       	movw	r24, r28
    9900:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    9902:	ee a5       	ldd	r30, Y+46	; 0x2e
    9904:	ff a5       	ldd	r31, Y+47	; 0x2f
    9906:	80 81       	ld	r24, Z
    9908:	9e a9       	ldd	r25, Y+54	; 0x36
    990a:	89 2b       	or	r24, r25
    990c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    990e:	81 b1       	in	r24, 0x01	; 1
    9910:	71 b8       	out	0x01, r7	; 1
    9912:	d1 2c       	mov	r13, r1
    9914:	c1 2c       	mov	r12, r1
    9916:	63 cf       	rjmp	.-314    	; 0x97de <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    9918:	41 e0       	ldi	r20, 0x01	; 1
    991a:	50 e0       	ldi	r21, 0x00	; 0
    991c:	9d cf       	rjmp	.-198    	; 0x9858 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    991e:	ec a9       	ldd	r30, Y+52	; 0x34
    9920:	fd a9       	ldd	r31, Y+53	; 0x35
    9922:	80 81       	ld	r24, Z
    9924:	9d ad       	ldd	r25, Y+61	; 0x3d
    9926:	89 23       	and	r24, r25
    9928:	80 83       	st	Z, r24
    992a:	80 b1       	in	r24, 0x00	; 0
    992c:	ec a9       	ldd	r30, Y+52	; 0x34
    992e:	fd a9       	ldd	r31, Y+53	; 0x35
    9930:	80 81       	ld	r24, Z
    9932:	99 ad       	ldd	r25, Y+57	; 0x39
    9934:	89 2b       	or	r24, r25
    9936:	80 83       	st	Z, r24
    9938:	75 01       	movw	r14, r10
    993a:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    993c:	8c a5       	ldd	r24, Y+44	; 0x2c
    993e:	9d a5       	ldd	r25, Y+45	; 0x2d
    9940:	81 30       	cpi	r24, 0x01	; 1
    9942:	91 05       	cpc	r25, r1
    9944:	d9 f5       	brne	.+118    	; 0x99bc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    9946:	ec a9       	ldd	r30, Y+52	; 0x34
    9948:	fd a9       	ldd	r31, Y+53	; 0x35
    994a:	80 81       	ld	r24, Z
    994c:	9d ad       	ldd	r25, Y+61	; 0x3d
    994e:	89 23       	and	r24, r25
    9950:	80 83       	st	Z, r24
    9952:	60 b1       	in	r22, 0x00	; 0
    9954:	ec a9       	ldd	r30, Y+52	; 0x34
    9956:	fd a9       	ldd	r31, Y+53	; 0x35
    9958:	80 81       	ld	r24, Z
    995a:	99 ad       	ldd	r25, Y+57	; 0x39
    995c:	89 2b       	or	r24, r25
    995e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    9960:	ec a9       	ldd	r30, Y+52	; 0x34
    9962:	fd a9       	ldd	r31, Y+53	; 0x35
    9964:	80 81       	ld	r24, Z
    9966:	9d ad       	ldd	r25, Y+61	; 0x3d
    9968:	89 23       	and	r24, r25
    996a:	80 83       	st	Z, r24
    996c:	40 b1       	in	r20, 0x00	; 0
    996e:	ec a9       	ldd	r30, Y+52	; 0x34
    9970:	fd a9       	ldd	r31, Y+53	; 0x35
    9972:	80 81       	ld	r24, Z
    9974:	99 ad       	ldd	r25, Y+57	; 0x39
    9976:	89 2b       	or	r24, r25
    9978:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    997a:	ec a9       	ldd	r30, Y+52	; 0x34
    997c:	fd a9       	ldd	r31, Y+53	; 0x35
    997e:	80 81       	ld	r24, Z
    9980:	9d ad       	ldd	r25, Y+61	; 0x3d
    9982:	89 23       	and	r24, r25
    9984:	80 83       	st	Z, r24
    9986:	20 b1       	in	r18, 0x00	; 0
    9988:	ec a9       	ldd	r30, Y+52	; 0x34
    998a:	fd a9       	ldd	r31, Y+53	; 0x35
    998c:	80 81       	ld	r24, Z
    998e:	99 ad       	ldd	r25, Y+57	; 0x39
    9990:	89 2b       	or	r24, r25
    9992:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    9994:	e8 81       	ld	r30, Y
    9996:	f9 81       	ldd	r31, Y+1	; 0x01
    9998:	01 90       	ld	r0, Z+
    999a:	f0 81       	ld	r31, Z
    999c:	e0 2d       	mov	r30, r0
    999e:	ce 01       	movw	r24, r28
    99a0:	19 95       	eicall
    99a2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    99a4:	f7 01       	movw	r30, r14
    99a6:	81 92       	st	Z+, r8
    99a8:	91 92       	st	Z+, r9
    99aa:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    99ac:	01 50       	subi	r16, 0x01	; 1
    99ae:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    99b0:	29 f6       	brne	.-118    	; 0x993c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    99b2:	cc 0c       	add	r12, r12
    99b4:	dd 1c       	adc	r13, r13
    99b6:	ac 0c       	add	r10, r12
    99b8:	bd 1c       	adc	r11, r13
    99ba:	a3 cf       	rjmp	.-186    	; 0x9902 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    99bc:	89 2b       	or	r24, r25
    99be:	91 f7       	brne	.-28     	; 0x99a4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    99c0:	ec a9       	ldd	r30, Y+52	; 0x34
    99c2:	fd a9       	ldd	r31, Y+53	; 0x35
    99c4:	80 81       	ld	r24, Z
    99c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    99c8:	89 23       	and	r24, r25
    99ca:	80 83       	st	Z, r24
    99cc:	80 b0       	in	r8, 0x00	; 0
    99ce:	ec a9       	ldd	r30, Y+52	; 0x34
    99d0:	fd a9       	ldd	r31, Y+53	; 0x35
    99d2:	80 81       	ld	r24, Z
    99d4:	99 ad       	ldd	r25, Y+57	; 0x39
    99d6:	89 2b       	or	r24, r25
    99d8:	80 83       	st	Z, r24
    99da:	ec a9       	ldd	r30, Y+52	; 0x34
    99dc:	fd a9       	ldd	r31, Y+53	; 0x35
    99de:	80 81       	ld	r24, Z
    99e0:	9d ad       	ldd	r25, Y+61	; 0x3d
    99e2:	89 23       	and	r24, r25
    99e4:	80 83       	st	Z, r24
    99e6:	90 b1       	in	r25, 0x00	; 0
    99e8:	ec a9       	ldd	r30, Y+52	; 0x34
    99ea:	fd a9       	ldd	r31, Y+53	; 0x35
    99ec:	80 81       	ld	r24, Z
    99ee:	29 ad       	ldd	r18, Y+57	; 0x39
    99f0:	82 2b       	or	r24, r18
    99f2:	80 83       	st	Z, r24
    99f4:	98 2c       	mov	r9, r8
    99f6:	89 2e       	mov	r8, r25
    99f8:	d5 cf       	rjmp	.-86     	; 0x99a4 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    99fa:	90 e0       	ldi	r25, 0x00	; 0
    99fc:	80 e0       	ldi	r24, 0x00	; 0
    99fe:	df 91       	pop	r29
    9a00:	cf 91       	pop	r28
    9a02:	1f 91       	pop	r17
    9a04:	0f 91       	pop	r16
    9a06:	ff 90       	pop	r15
    9a08:	ef 90       	pop	r14
    9a0a:	df 90       	pop	r13
    9a0c:	cf 90       	pop	r12
    9a0e:	bf 90       	pop	r11
    9a10:	af 90       	pop	r10
    9a12:	9f 90       	pop	r9
    9a14:	8f 90       	pop	r8
    9a16:	7f 90       	pop	r7
    9a18:	08 95       	ret

00009a1a <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    9a1a:	38 e0       	ldi	r19, 0x08	; 8
    9a1c:	43 9f       	mul	r20, r19
    9a1e:	c0 01       	movw	r24, r0
    9a20:	11 24       	eor	r1, r1
    9a22:	80 7e       	andi	r24, 0xE0	; 224
    9a24:	97 70       	andi	r25, 0x07	; 7
    9a26:	26 95       	lsr	r18
    9a28:	26 95       	lsr	r18
    9a2a:	26 95       	lsr	r18
    9a2c:	82 2b       	or	r24, r18
    9a2e:	70 e0       	ldi	r23, 0x00	; 0
    9a30:	76 2f       	mov	r23, r22
    9a32:	66 27       	eor	r22, r22
    9a34:	66 27       	eor	r22, r22
    9a36:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    9a38:	86 2b       	or	r24, r22
    9a3a:	97 2b       	or	r25, r23
    9a3c:	08 95       	ret

00009a3e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    9a3e:	0f 93       	push	r16
    9a40:	cf 93       	push	r28
    9a42:	df 93       	push	r29
    9a44:	dc 01       	movw	r26, r24
    9a46:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    9a48:	9e 96       	adiw	r26, 0x2e	; 46
    9a4a:	ed 91       	ld	r30, X+
    9a4c:	fc 91       	ld	r31, X
    9a4e:	9f 97       	sbiw	r26, 0x2f	; 47
    9a50:	80 81       	ld	r24, Z
    9a52:	da 96       	adiw	r26, 0x3a	; 58
    9a54:	9c 91       	ld	r25, X
    9a56:	da 97       	sbiw	r26, 0x3a	; 58
    9a58:	89 23       	and	r24, r25
    9a5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    9a5c:	22 23       	and	r18, r18
    9a5e:	09 f4       	brne	.+2      	; 0x9a62 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    9a60:	5b c0       	rjmp	.+182    	; 0x9b18 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    9a62:	58 96       	adiw	r26, 0x18	; 24
    9a64:	8d 91       	ld	r24, X+
    9a66:	9c 91       	ld	r25, X
    9a68:	59 97       	sbiw	r26, 0x19	; 25
    9a6a:	89 2b       	or	r24, r25
    9a6c:	49 f5       	brne	.+82     	; 0x9ac0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    9a6e:	d0 96       	adiw	r26, 0x30	; 48
    9a70:	ed 91       	ld	r30, X+
    9a72:	fc 91       	ld	r31, X
    9a74:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    9a76:	80 81       	ld	r24, Z
    9a78:	db 96       	adiw	r26, 0x3b	; 59
    9a7a:	9c 91       	ld	r25, X
    9a7c:	db 97       	sbiw	r26, 0x3b	; 59
    9a7e:	89 23       	and	r24, r25
    9a80:	80 83       	st	Z, r24
    9a82:	12 b8       	out	0x02, r1	; 2
    9a84:	d2 96       	adiw	r26, 0x32	; 50
    9a86:	ed 91       	ld	r30, X+
    9a88:	fc 91       	ld	r31, X
    9a8a:	d3 97       	sbiw	r26, 0x33	; 51
    9a8c:	80 81       	ld	r24, Z
    9a8e:	dc 96       	adiw	r26, 0x3c	; 60
    9a90:	9c 91       	ld	r25, X
    9a92:	dc 97       	sbiw	r26, 0x3c	; 60
    9a94:	89 23       	and	r24, r25
    9a96:	80 83       	st	Z, r24
    9a98:	d2 96       	adiw	r26, 0x32	; 50
    9a9a:	ed 91       	ld	r30, X+
    9a9c:	fc 91       	ld	r31, X
    9a9e:	d3 97       	sbiw	r26, 0x33	; 51
    9aa0:	80 81       	ld	r24, Z
    9aa2:	d8 96       	adiw	r26, 0x38	; 56
    9aa4:	9c 91       	ld	r25, X
    9aa6:	d8 97       	sbiw	r26, 0x38	; 56
    9aa8:	89 2b       	or	r24, r25
    9aaa:	80 83       	st	Z, r24
    9aac:	d0 96       	adiw	r26, 0x30	; 48
    9aae:	ed 91       	ld	r30, X+
    9ab0:	fc 91       	ld	r31, X
    9ab2:	d1 97       	sbiw	r26, 0x31	; 49
    9ab4:	80 81       	ld	r24, Z
    9ab6:	d7 96       	adiw	r26, 0x37	; 55
    9ab8:	9c 91       	ld	r25, X
    9aba:	d7 97       	sbiw	r26, 0x37	; 55
    9abc:	89 2b       	or	r24, r25
    9abe:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    9ac0:	d0 96       	adiw	r26, 0x30	; 48
    9ac2:	ed 91       	ld	r30, X+
    9ac4:	fc 91       	ld	r31, X
    9ac6:	d1 97       	sbiw	r26, 0x31	; 49
    9ac8:	80 81       	ld	r24, Z
    9aca:	db 96       	adiw	r26, 0x3b	; 59
    9acc:	9c 91       	ld	r25, X
    9ace:	db 97       	sbiw	r26, 0x3b	; 59
    9ad0:	89 23       	and	r24, r25
    9ad2:	80 83       	st	Z, r24
    9ad4:	90 96       	adiw	r26, 0x20	; 32
    9ad6:	8c 91       	ld	r24, X
    9ad8:	90 97       	sbiw	r26, 0x20	; 32
    9ada:	82 b9       	out	0x02, r24	; 2
    9adc:	d2 96       	adiw	r26, 0x32	; 50
    9ade:	ed 91       	ld	r30, X+
    9ae0:	fc 91       	ld	r31, X
    9ae2:	d3 97       	sbiw	r26, 0x33	; 51
    9ae4:	80 81       	ld	r24, Z
    9ae6:	dc 96       	adiw	r26, 0x3c	; 60
    9ae8:	9c 91       	ld	r25, X
    9aea:	dc 97       	sbiw	r26, 0x3c	; 60
    9aec:	89 23       	and	r24, r25
    9aee:	80 83       	st	Z, r24
    9af0:	d2 96       	adiw	r26, 0x32	; 50
    9af2:	ed 91       	ld	r30, X+
    9af4:	fc 91       	ld	r31, X
    9af6:	d3 97       	sbiw	r26, 0x33	; 51
    9af8:	80 81       	ld	r24, Z
    9afa:	d8 96       	adiw	r26, 0x38	; 56
    9afc:	9c 91       	ld	r25, X
    9afe:	d8 97       	sbiw	r26, 0x38	; 56
    9b00:	89 2b       	or	r24, r25
    9b02:	80 83       	st	Z, r24
    9b04:	d0 96       	adiw	r26, 0x30	; 48
    9b06:	ed 91       	ld	r30, X+
    9b08:	fc 91       	ld	r31, X
    9b0a:	d1 97       	sbiw	r26, 0x31	; 49
    9b0c:	80 81       	ld	r24, Z
    9b0e:	d7 96       	adiw	r26, 0x37	; 55
    9b10:	9c 91       	ld	r25, X
    9b12:	d7 97       	sbiw	r26, 0x37	; 55
    9b14:	89 2b       	or	r24, r25
    9b16:	80 83       	st	Z, r24
    9b18:	eb 01       	movw	r28, r22
    9b1a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    9b1c:	18 16       	cp	r1, r24
    9b1e:	19 06       	cpc	r1, r25
    9b20:	bc f5       	brge	.+110    	; 0x9b90 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    9b22:	00 23       	and	r16, r16
    9b24:	91 f1       	breq	.+100    	; 0x9b8a <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    9b26:	fe 01       	movw	r30, r28
    9b28:	45 91       	lpm	r20, Z+
    9b2a:	54 91       	lpm	r21, Z
    9b2c:	34 2f       	mov	r19, r20
    9b2e:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    9b30:	22 b9       	out	0x02, r18	; 2
    9b32:	d2 96       	adiw	r26, 0x32	; 50
    9b34:	ed 91       	ld	r30, X+
    9b36:	fc 91       	ld	r31, X
    9b38:	d3 97       	sbiw	r26, 0x33	; 51
    9b3a:	20 81       	ld	r18, Z
    9b3c:	dc 96       	adiw	r26, 0x3c	; 60
    9b3e:	4c 91       	ld	r20, X
    9b40:	dc 97       	sbiw	r26, 0x3c	; 60
    9b42:	24 23       	and	r18, r20
    9b44:	20 83       	st	Z, r18
    9b46:	d2 96       	adiw	r26, 0x32	; 50
    9b48:	ed 91       	ld	r30, X+
    9b4a:	fc 91       	ld	r31, X
    9b4c:	d3 97       	sbiw	r26, 0x33	; 51
    9b4e:	20 81       	ld	r18, Z
    9b50:	d8 96       	adiw	r26, 0x38	; 56
    9b52:	4c 91       	ld	r20, X
    9b54:	d8 97       	sbiw	r26, 0x38	; 56
    9b56:	24 2b       	or	r18, r20
    9b58:	20 83       	st	Z, r18
    9b5a:	32 b9       	out	0x02, r19	; 2
    9b5c:	d2 96       	adiw	r26, 0x32	; 50
    9b5e:	ed 91       	ld	r30, X+
    9b60:	fc 91       	ld	r31, X
    9b62:	d3 97       	sbiw	r26, 0x33	; 51
    9b64:	20 81       	ld	r18, Z
    9b66:	dc 96       	adiw	r26, 0x3c	; 60
    9b68:	3c 91       	ld	r19, X
    9b6a:	dc 97       	sbiw	r26, 0x3c	; 60
    9b6c:	23 23       	and	r18, r19
    9b6e:	20 83       	st	Z, r18
    9b70:	d2 96       	adiw	r26, 0x32	; 50
    9b72:	ed 91       	ld	r30, X+
    9b74:	fc 91       	ld	r31, X
    9b76:	d3 97       	sbiw	r26, 0x33	; 51
    9b78:	20 81       	ld	r18, Z
    9b7a:	d8 96       	adiw	r26, 0x38	; 56
    9b7c:	3c 91       	ld	r19, X
    9b7e:	d8 97       	sbiw	r26, 0x38	; 56
    9b80:	23 2b       	or	r18, r19
    9b82:	20 83       	st	Z, r18
    9b84:	22 96       	adiw	r28, 0x02	; 2
    9b86:	01 97       	sbiw	r24, 0x01	; 1
    9b88:	c9 cf       	rjmp	.-110    	; 0x9b1c <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    9b8a:	38 81       	ld	r19, Y
    9b8c:	29 81       	ldd	r18, Y+1	; 0x01
    9b8e:	d0 cf       	rjmp	.-96     	; 0x9b30 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    9b90:	9e 96       	adiw	r26, 0x2e	; 46
    9b92:	ed 91       	ld	r30, X+
    9b94:	fc 91       	ld	r31, X
    9b96:	9f 97       	sbiw	r26, 0x2f	; 47
    9b98:	80 81       	ld	r24, Z
    9b9a:	d6 96       	adiw	r26, 0x36	; 54
    9b9c:	9c 91       	ld	r25, X
    9b9e:	89 2b       	or	r24, r25
    9ba0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    9ba2:	df 91       	pop	r29
    9ba4:	cf 91       	pop	r28
    9ba6:	0f 91       	pop	r16
    9ba8:	08 95       	ret

00009baa <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    9baa:	2f 92       	push	r2
    9bac:	3f 92       	push	r3
    9bae:	4f 92       	push	r4
    9bb0:	5f 92       	push	r5
    9bb2:	6f 92       	push	r6
    9bb4:	7f 92       	push	r7
    9bb6:	8f 92       	push	r8
    9bb8:	9f 92       	push	r9
    9bba:	af 92       	push	r10
    9bbc:	bf 92       	push	r11
    9bbe:	cf 92       	push	r12
    9bc0:	df 92       	push	r13
    9bc2:	ef 92       	push	r14
    9bc4:	ff 92       	push	r15
    9bc6:	0f 93       	push	r16
    9bc8:	1f 93       	push	r17
    9bca:	cf 93       	push	r28
    9bcc:	df 93       	push	r29
    9bce:	00 d0       	rcall	.+0      	; 0x9bd0 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    9bd0:	00 d0       	rcall	.+0      	; 0x9bd2 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    9bd2:	cd b7       	in	r28, 0x3d	; 61
    9bd4:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    9bd6:	28 2e       	mov	r2, r24
    9bd8:	31 2c       	mov	r3, r1
    9bda:	c1 01       	movw	r24, r2
    9bdc:	88 0f       	add	r24, r24
    9bde:	99 1f       	adc	r25, r25
    9be0:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
    9be4:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
    9be8:	e8 0f       	add	r30, r24
    9bea:	f9 1f       	adc	r31, r25
    9bec:	80 81       	ld	r24, Z
    9bee:	91 81       	ldd	r25, Z+1	; 0x01
    9bf0:	9e 83       	std	Y+6, r25	; 0x06
    9bf2:	8d 83       	std	Y+5, r24	; 0x05
    9bf4:	81 01       	movw	r16, r2
    9bf6:	00 0f       	add	r16, r16
    9bf8:	11 1f       	adc	r17, r17
    9bfa:	00 0f       	add	r16, r16
    9bfc:	11 1f       	adc	r17, r17
    9bfe:	f8 01       	movw	r30, r16
    9c00:	e8 54       	subi	r30, 0x48	; 72
    9c02:	f5 4f       	sbci	r31, 0xF5	; 245
    9c04:	40 80       	ld	r4, Z
    9c06:	51 80       	ldd	r5, Z+1	; 0x01
    9c08:	62 80       	ldd	r6, Z+2	; 0x02
    9c0a:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    9c0c:	20 e0       	ldi	r18, 0x00	; 0
    9c0e:	30 e0       	ldi	r19, 0x00	; 0
    9c10:	a9 01       	movw	r20, r18
    9c12:	c3 01       	movw	r24, r6
    9c14:	b2 01       	movw	r22, r4
    9c16:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
    9c1a:	87 fd       	sbrc	r24, 7
    9c1c:	97 c0       	rjmp	.+302    	; 0x9d4c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    9c1e:	f8 01       	movw	r30, r16
    9c20:	e4 53       	subi	r30, 0x34	; 52
    9c22:	f5 4f       	sbci	r31, 0xF5	; 245
    9c24:	80 80       	ld	r8, Z
    9c26:	91 80       	ldd	r9, Z+1	; 0x01
    9c28:	a2 80       	ldd	r10, Z+2	; 0x02
    9c2a:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    9c2c:	20 e0       	ldi	r18, 0x00	; 0
    9c2e:	30 e0       	ldi	r19, 0x00	; 0
    9c30:	a9 01       	movw	r20, r18
    9c32:	c5 01       	movw	r24, r10
    9c34:	b4 01       	movw	r22, r8
    9c36:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
    9c3a:	87 fd       	sbrc	r24, 7
    9c3c:	87 c0       	rjmp	.+270    	; 0x9d4c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:219
    9c3e:	f8 01       	movw	r30, r16
    9c40:	e0 52       	subi	r30, 0x20	; 32
    9c42:	f5 4f       	sbci	r31, 0xF5	; 245
    9c44:	c0 80       	ld	r12, Z
    9c46:	d1 80       	ldd	r13, Z+1	; 0x01
    9c48:	e2 80       	ldd	r14, Z+2	; 0x02
    9c4a:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    9c4c:	20 e0       	ldi	r18, 0x00	; 0
    9c4e:	30 e0       	ldi	r19, 0x00	; 0
    9c50:	a9 01       	movw	r20, r18
    9c52:	c7 01       	movw	r24, r14
    9c54:	b6 01       	movw	r22, r12
    9c56:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
    9c5a:	87 fd       	sbrc	r24, 7
    9c5c:	77 c0       	rjmp	.+238    	; 0x9d4c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    9c5e:	81 e0       	ldi	r24, 0x01	; 1
    9c60:	ed 81       	ldd	r30, Y+5	; 0x05
    9c62:	fe 81       	ldd	r31, Y+6	; 0x06
    9c64:	22 8d       	ldd	r18, Z+26	; 0x1a
    9c66:	33 8d       	ldd	r19, Z+27	; 0x1b
    9c68:	21 30       	cpi	r18, 0x01	; 1
    9c6a:	31 05       	cpc	r19, r1
    9c6c:	09 f0       	breq	.+2      	; 0x9c70 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    9c6e:	80 e0       	ldi	r24, 0x00	; 0
    9c70:	ed 81       	ldd	r30, Y+5	; 0x05
    9c72:	fe 81       	ldd	r31, Y+6	; 0x06
    9c74:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    9c76:	40 82       	st	Z, r4
    9c78:	51 82       	std	Z+1, r5	; 0x01
    9c7a:	62 82       	std	Z+2, r6	; 0x02
    9c7c:	73 82       	std	Z+3, r7	; 0x03
    9c7e:	84 82       	std	Z+4, r8	; 0x04
    9c80:	95 82       	std	Z+5, r9	; 0x05
    9c82:	a6 82       	std	Z+6, r10	; 0x06
    9c84:	b7 82       	std	Z+7, r11	; 0x07
    9c86:	c0 86       	std	Z+8, r12	; 0x08
    9c88:	d1 86       	std	Z+9, r13	; 0x09
    9c8a:	e2 86       	std	Z+10, r14	; 0x0a
    9c8c:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    9c8e:	66 a5       	ldd	r22, Z+46	; 0x2e
    9c90:	77 a5       	ldd	r23, Z+47	; 0x2f
    9c92:	80 a9       	ldd	r24, Z+48	; 0x30
    9c94:	91 a9       	ldd	r25, Z+49	; 0x31
    9c96:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    9c9a:	20 e0       	ldi	r18, 0x00	; 0
    9c9c:	30 e0       	ldi	r19, 0x00	; 0
    9c9e:	4a e7       	ldi	r20, 0x7A	; 122
    9ca0:	54 e4       	ldi	r21, 0x44	; 68
    9ca2:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
    9ca6:	69 83       	std	Y+1, r22	; 0x01
    9ca8:	7a 83       	std	Y+2, r23	; 0x02
    9caa:	8b 83       	std	Y+3, r24	; 0x03
    9cac:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    9cae:	ed 81       	ldd	r30, Y+5	; 0x05
    9cb0:	fe 81       	ldd	r31, Y+6	; 0x06
    9cb2:	44 86       	std	Z+12, r4	; 0x0c
    9cb4:	55 86       	std	Z+13, r5	; 0x0d
    9cb6:	66 86       	std	Z+14, r6	; 0x0e
    9cb8:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    9cba:	9b 01       	movw	r18, r22
    9cbc:	ac 01       	movw	r20, r24
    9cbe:	c5 01       	movw	r24, r10
    9cc0:	b4 01       	movw	r22, r8
    9cc2:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
    9cc6:	4b 01       	movw	r8, r22
    9cc8:	5c 01       	movw	r10, r24
    9cca:	ed 81       	ldd	r30, Y+5	; 0x05
    9ccc:	fe 81       	ldd	r31, Y+6	; 0x06
    9cce:	80 8a       	std	Z+16, r8	; 0x10
    9cd0:	91 8a       	std	Z+17, r9	; 0x11
    9cd2:	a2 8a       	std	Z+18, r10	; 0x12
    9cd4:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    9cd6:	29 81       	ldd	r18, Y+1	; 0x01
    9cd8:	3a 81       	ldd	r19, Y+2	; 0x02
    9cda:	4b 81       	ldd	r20, Y+3	; 0x03
    9cdc:	5c 81       	ldd	r21, Y+4	; 0x04
    9cde:	c7 01       	movw	r24, r14
    9ce0:	b6 01       	movw	r22, r12
    9ce2:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
    9ce6:	6b 01       	movw	r12, r22
    9ce8:	7c 01       	movw	r14, r24
    9cea:	ed 81       	ldd	r30, Y+5	; 0x05
    9cec:	fe 81       	ldd	r31, Y+6	; 0x06
    9cee:	c4 8a       	std	Z+20, r12	; 0x14
    9cf0:	d5 8a       	std	Z+21, r13	; 0x15
    9cf2:	e6 8a       	std	Z+22, r14	; 0x16
    9cf4:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    9cf6:	80 8d       	ldd	r24, Z+24	; 0x18
    9cf8:	91 8d       	ldd	r25, Z+25	; 0x19
    9cfa:	01 97       	sbiw	r24, 0x01	; 1
    9cfc:	39 f5       	brne	.+78     	; 0x9d4c <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    9cfe:	a3 01       	movw	r20, r6
    9d00:	92 01       	movw	r18, r4
    9d02:	60 e0       	ldi	r22, 0x00	; 0
    9d04:	70 e0       	ldi	r23, 0x00	; 0
    9d06:	cb 01       	movw	r24, r22
    9d08:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    9d0c:	ed 81       	ldd	r30, Y+5	; 0x05
    9d0e:	fe 81       	ldd	r31, Y+6	; 0x06
    9d10:	64 87       	std	Z+12, r22	; 0x0c
    9d12:	75 87       	std	Z+13, r23	; 0x0d
    9d14:	86 87       	std	Z+14, r24	; 0x0e
    9d16:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    9d18:	a5 01       	movw	r20, r10
    9d1a:	94 01       	movw	r18, r8
    9d1c:	60 e0       	ldi	r22, 0x00	; 0
    9d1e:	70 e0       	ldi	r23, 0x00	; 0
    9d20:	cb 01       	movw	r24, r22
    9d22:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    9d26:	ed 81       	ldd	r30, Y+5	; 0x05
    9d28:	fe 81       	ldd	r31, Y+6	; 0x06
    9d2a:	60 8b       	std	Z+16, r22	; 0x10
    9d2c:	71 8b       	std	Z+17, r23	; 0x11
    9d2e:	82 8b       	std	Z+18, r24	; 0x12
    9d30:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    9d32:	a7 01       	movw	r20, r14
    9d34:	96 01       	movw	r18, r12
    9d36:	60 e0       	ldi	r22, 0x00	; 0
    9d38:	70 e0       	ldi	r23, 0x00	; 0
    9d3a:	cb 01       	movw	r24, r22
    9d3c:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    9d40:	ed 81       	ldd	r30, Y+5	; 0x05
    9d42:	fe 81       	ldd	r31, Y+6	; 0x06
    9d44:	64 8b       	std	Z+20, r22	; 0x14
    9d46:	75 8b       	std	Z+21, r23	; 0x15
    9d48:	86 8b       	std	Z+22, r24	; 0x16
    9d4a:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    9d4c:	f1 01       	movw	r30, r2
    9d4e:	ec 50       	subi	r30, 0x0C	; 12
    9d50:	f5 4f       	sbci	r31, 0xF5	; 245
    9d52:	10 81       	ld	r17, Z
    9d54:	61 2f       	mov	r22, r17
    9d56:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    9d58:	61 15       	cp	r22, r1
    9d5a:	71 05       	cpc	r23, r1
    9d5c:	f1 f1       	breq	.+124    	; 0x9dda <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    9d5e:	07 2e       	mov	r0, r23
    9d60:	00 0c       	add	r0, r0
    9d62:	88 0b       	sbc	r24, r24
    9d64:	99 0b       	sbc	r25, r25
    9d66:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    9d6a:	6b 01       	movw	r12, r22
    9d6c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    9d6e:	ed 81       	ldd	r30, Y+5	; 0x05
    9d70:	fe 81       	ldd	r31, Y+6	; 0x06
    9d72:	66 a5       	ldd	r22, Z+46	; 0x2e
    9d74:	77 a5       	ldd	r23, Z+47	; 0x2f
    9d76:	80 a9       	ldd	r24, Z+48	; 0x30
    9d78:	91 a9       	ldd	r25, Z+49	; 0x31
    9d7a:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    9d7e:	9b 01       	movw	r18, r22
    9d80:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    9d82:	c7 01       	movw	r24, r14
    9d84:	b6 01       	movw	r22, r12
    9d86:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
    9d8a:	6b 01       	movw	r12, r22
    9d8c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    9d8e:	ac 01       	movw	r20, r24
    9d90:	9b 01       	movw	r18, r22
    9d92:	ed 81       	ldd	r30, Y+5	; 0x05
    9d94:	fe 81       	ldd	r31, Y+6	; 0x06
    9d96:	60 89       	ldd	r22, Z+16	; 0x10
    9d98:	71 89       	ldd	r23, Z+17	; 0x11
    9d9a:	82 89       	ldd	r24, Z+18	; 0x12
    9d9c:	93 89       	ldd	r25, Z+19	; 0x13
    9d9e:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
    9da2:	ed 81       	ldd	r30, Y+5	; 0x05
    9da4:	fe 81       	ldd	r31, Y+6	; 0x06
    9da6:	60 8b       	std	Z+16, r22	; 0x10
    9da8:	71 8b       	std	Z+17, r23	; 0x11
    9daa:	82 8b       	std	Z+18, r24	; 0x12
    9dac:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    9dae:	a7 01       	movw	r20, r14
    9db0:	96 01       	movw	r18, r12
    9db2:	64 89       	ldd	r22, Z+20	; 0x14
    9db4:	75 89       	ldd	r23, Z+21	; 0x15
    9db6:	86 89       	ldd	r24, Z+22	; 0x16
    9db8:	97 89       	ldd	r25, Z+23	; 0x17
    9dba:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
    9dbe:	ed 81       	ldd	r30, Y+5	; 0x05
    9dc0:	fe 81       	ldd	r31, Y+6	; 0x06
    9dc2:	64 8b       	std	Z+20, r22	; 0x14
    9dc4:	75 8b       	std	Z+21, r23	; 0x15
    9dc6:	86 8b       	std	Z+22, r24	; 0x16
    9dc8:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    9dca:	81 2f       	mov	r24, r17
    9dcc:	90 e0       	ldi	r25, 0x00	; 0
    9dce:	b0 e0       	ldi	r27, 0x00	; 0
    9dd0:	a0 e0       	ldi	r26, 0x00	; 0
    9dd2:	86 a7       	std	Z+46, r24	; 0x2e
    9dd4:	97 a7       	std	Z+47, r25	; 0x2f
    9dd6:	a0 ab       	std	Z+48, r26	; 0x30
    9dd8:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:221
}
    9dda:	26 96       	adiw	r28, 0x06	; 6
    9ddc:	0f b6       	in	r0, 0x3f	; 63
    9dde:	f8 94       	cli
    9de0:	de bf       	out	0x3e, r29	; 62
    9de2:	0f be       	out	0x3f, r0	; 63
    9de4:	cd bf       	out	0x3d, r28	; 61
    9de6:	df 91       	pop	r29
    9de8:	cf 91       	pop	r28
    9dea:	1f 91       	pop	r17
    9dec:	0f 91       	pop	r16
    9dee:	ff 90       	pop	r15
    9df0:	ef 90       	pop	r14
    9df2:	df 90       	pop	r13
    9df4:	cf 90       	pop	r12
    9df6:	bf 90       	pop	r11
    9df8:	af 90       	pop	r10
    9dfa:	9f 90       	pop	r9
    9dfc:	8f 90       	pop	r8
    9dfe:	7f 90       	pop	r7
    9e00:	6f 90       	pop	r6
    9e02:	5f 90       	pop	r5
    9e04:	4f 90       	pop	r4
    9e06:	3f 90       	pop	r3
    9e08:	2f 90       	pop	r2
    9e0a:	08 95       	ret

00009e0c <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    9e0c:	fb 01       	movw	r30, r22
    9e0e:	9c 01       	movw	r18, r24
    9e10:	28 5f       	subi	r18, 0xF8	; 248
    9e12:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    9e14:	dc 01       	movw	r26, r24
    9e16:	5d 91       	ld	r21, X+
    9e18:	cd 01       	movw	r24, r26
    9e1a:	41 91       	ld	r20, Z+
    9e1c:	54 13       	cpse	r21, r20
    9e1e:	05 c0       	rjmp	.+10     	; 0x9e2a <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    9e20:	a2 17       	cp	r26, r18
    9e22:	b3 07       	cpc	r27, r19
    9e24:	b9 f7       	brne	.-18     	; 0x9e14 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    9e26:	81 e0       	ldi	r24, 0x01	; 1
    9e28:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    9e2a:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    9e2c:	08 95       	ret

00009e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    9e2e:	80 33       	cpi	r24, 0x30	; 48
    9e30:	9c f0       	brlt	.+38     	; 0x9e58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    9e32:	8a 33       	cpi	r24, 0x3A	; 58
    9e34:	24 f0       	brlt	.+8      	; 0x9e3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    9e36:	8f 35       	cpi	r24, 0x5F	; 95
    9e38:	24 f0       	brlt	.+8      	; 0x9e42 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    9e3a:	8b 37       	cpi	r24, 0x7B	; 123
    9e3c:	24 f4       	brge	.+8      	; 0x9e46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    9e3e:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    9e40:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    9e42:	81 34       	cpi	r24, 0x41	; 65
    9e44:	4c f0       	brlt	.+18     	; 0x9e58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    9e46:	8b 35       	cpi	r24, 0x5B	; 91
    9e48:	d4 f3       	brlt	.-12     	; 0x9e3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    9e4a:	93 ed       	ldi	r25, 0xD3	; 211
    9e4c:	98 0f       	add	r25, r24
    9e4e:	81 e0       	ldi	r24, 0x01	; 1
    9e50:	92 30       	cpi	r25, 0x02	; 2
    9e52:	b0 f3       	brcs	.-20     	; 0x9e40 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    9e54:	80 e0       	ldi	r24, 0x00	; 0
    9e56:	08 95       	ret
    9e58:	8b 32       	cpi	r24, 0x2B	; 43
    9e5a:	b9 f7       	brne	.-18     	; 0x9e4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    9e5c:	f0 cf       	rjmp	.-32     	; 0x9e3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00009e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    9e5e:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    9e60:	80 85       	ldd	r24, Z+8	; 0x08
    9e62:	81 11       	cpse	r24, r1
    9e64:	0a c0       	rjmp	.+20     	; 0x9e7a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    9e66:	a2 81       	ldd	r26, Z+2	; 0x02
    9e68:	b3 81       	ldd	r27, Z+3	; 0x03
    9e6a:	cd 01       	movw	r24, r26
    9e6c:	01 96       	adiw	r24, 0x01	; 1
    9e6e:	93 83       	std	Z+3, r25	; 0x03
    9e70:	82 83       	std	Z+2, r24	; 0x02
    9e72:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    9e74:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    9e76:	81 e0       	ldi	r24, 0x01	; 1
    9e78:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    9e7a:	87 81       	ldd	r24, Z+7	; 0x07
    9e7c:	08 95       	ret

00009e7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    9e7e:	df 92       	push	r13
    9e80:	ef 92       	push	r14
    9e82:	ff 92       	push	r15
    9e84:	0f 93       	push	r16
    9e86:	1f 93       	push	r17
    9e88:	cf 93       	push	r28
    9e8a:	df 93       	push	r29
    9e8c:	ec 01       	movw	r28, r24
    9e8e:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    9e90:	0c 81       	ldd	r16, Y+4	; 0x04
    9e92:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    9e94:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9e98:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9e9a:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    9e9c:	ce 01       	movw	r24, r28
    9e9e:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9ea2:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    9ea4:	d8 16       	cp	r13, r24
    9ea6:	89 f1       	breq	.+98     	; 0x9f0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    9ea8:	81 11       	cpse	r24, r1
    9eaa:	0a c0       	rjmp	.+20     	; 0x9ec0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    9eac:	81 e0       	ldi	r24, 0x01	; 1
    9eae:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    9eb0:	df 91       	pop	r29
    9eb2:	cf 91       	pop	r28
    9eb4:	1f 91       	pop	r17
    9eb6:	0f 91       	pop	r16
    9eb8:	ff 90       	pop	r15
    9eba:	ef 90       	pop	r14
    9ebc:	df 90       	pop	r13
    9ebe:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    9ec0:	8c 35       	cpi	r24, 0x5C	; 92
    9ec2:	d1 f4       	brne	.+52     	; 0x9ef8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    9ec4:	ce 01       	movw	r24, r28
    9ec6:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    9eca:	88 23       	and	r24, r24
    9ecc:	79 f3       	breq	.-34     	; 0x9eac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    9ece:	85 37       	cpi	r24, 0x75	; 117
    9ed0:	19 f4       	brne	.+6      	; 0x9ed8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    9ed2:	84 e0       	ldi	r24, 0x04	; 4
    9ed4:	90 e0       	ldi	r25, 0x00	; 0
    9ed6:	ec cf       	rjmp	.-40     	; 0x9eb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    9ed8:	e8 ef       	ldi	r30, 0xF8	; 248
    9eda:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    9edc:	90 81       	ld	r25, Z
    9ede:	99 23       	and	r25, r25
    9ee0:	51 f0       	breq	.+20     	; 0x9ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    9ee2:	89 13       	cpse	r24, r25
    9ee4:	06 c0       	rjmp	.+12     	; 0x9ef2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    9ee6:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    9ee8:	81 11       	cpse	r24, r1
    9eea:	05 c0       	rjmp	.+10     	; 0x9ef6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    9eec:	82 e0       	ldi	r24, 0x02	; 2
    9eee:	90 e0       	ldi	r25, 0x00	; 0
    9ef0:	df cf       	rjmp	.-66     	; 0x9eb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    9ef2:	32 96       	adiw	r30, 0x02	; 2
    9ef4:	f3 cf       	rjmp	.-26     	; 0x9edc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9ef6:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    9ef8:	ec 81       	ldd	r30, Y+4	; 0x04
    9efa:	fd 81       	ldd	r31, Y+5	; 0x05
    9efc:	9f 01       	movw	r18, r30
    9efe:	2f 5f       	subi	r18, 0xFF	; 255
    9f00:	3f 4f       	sbci	r19, 0xFF	; 255
    9f02:	3d 83       	std	Y+5, r19	; 0x05
    9f04:	2c 83       	std	Y+4, r18	; 0x04
    9f06:	80 83       	st	Z, r24
    9f08:	c9 cf       	rjmp	.-110    	; 0x9e9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    9f0a:	ec 81       	ldd	r30, Y+4	; 0x04
    9f0c:	fd 81       	ldd	r31, Y+5	; 0x05
    9f0e:	cf 01       	movw	r24, r30
    9f10:	01 96       	adiw	r24, 0x01	; 1
    9f12:	9d 83       	std	Y+5, r25	; 0x05
    9f14:	8c 83       	std	Y+4, r24	; 0x04
    9f16:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    9f18:	f7 01       	movw	r30, r14
    9f1a:	11 83       	std	Z+1, r17	; 0x01
    9f1c:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    9f1e:	83 e0       	ldi	r24, 0x03	; 3
    9f20:	90 e0       	ldi	r25, 0x00	; 0
    9f22:	01 2b       	or	r16, r17
    9f24:	29 f2       	breq	.-118    	; 0x9eb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    9f26:	90 e0       	ldi	r25, 0x00	; 0
    9f28:	80 e0       	ldi	r24, 0x00	; 0
    9f2a:	c2 cf       	rjmp	.-124    	; 0x9eb0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

00009f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    9f2c:	1f 93       	push	r17
    9f2e:	cf 93       	push	r28
    9f30:	df 93       	push	r29
    9f32:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    9f34:	ce 01       	movw	r24, r28
    9f36:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9f3a:	8b 30       	cpi	r24, 0x0B	; 11
    9f3c:	3c f4       	brge	.+14     	; 0x9f4c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    9f3e:	89 30       	cpi	r24, 0x09	; 9
    9f40:	5c f4       	brge	.+22     	; 0x9f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    9f42:	88 23       	and	r24, r24
    9f44:	e9 f0       	breq	.+58     	; 0x9f80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    9f46:	90 e0       	ldi	r25, 0x00	; 0
    9f48:	80 e0       	ldi	r24, 0x00	; 0
    9f4a:	1c c0       	rjmp	.+56     	; 0x9f84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    9f4c:	80 32       	cpi	r24, 0x20	; 32
    9f4e:	21 f0       	breq	.+8      	; 0x9f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    9f50:	8f 32       	cpi	r24, 0x2F	; 47
    9f52:	21 f0       	breq	.+8      	; 0x9f5c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    9f54:	8d 30       	cpi	r24, 0x0D	; 13
    9f56:	b9 f7       	brne	.-18     	; 0x9f46 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f58:	18 86       	std	Y+8, r1	; 0x08
    9f5a:	ec cf       	rjmp	.-40     	; 0x9f34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    9f5c:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    9f5e:	ce 01       	movw	r24, r28
    9f60:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    9f64:	8a 32       	cpi	r24, 0x2A	; 42
    9f66:	29 f0       	breq	.+10     	; 0x9f72 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    9f68:	8f 32       	cpi	r24, 0x2F	; 47
    9f6a:	d1 f0       	breq	.+52     	; 0x9fa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    9f6c:	82 e0       	ldi	r24, 0x02	; 2
    9f6e:	90 e0       	ldi	r25, 0x00	; 0
    9f70:	09 c0       	rjmp	.+18     	; 0x9f84 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f72:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    9f74:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    9f76:	ce 01       	movw	r24, r28
    9f78:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    9f7c:	81 11       	cpse	r24, r1
    9f7e:	06 c0       	rjmp	.+12     	; 0x9f8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    9f80:	81 e0       	ldi	r24, 0x01	; 1
    9f82:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    9f84:	df 91       	pop	r29
    9f86:	cf 91       	pop	r28
    9f88:	1f 91       	pop	r17
    9f8a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    9f8c:	8f 32       	cpi	r24, 0x2F	; 47
    9f8e:	11 f4       	brne	.+4      	; 0x9f94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    9f90:	11 11       	cpse	r17, r1
    9f92:	e2 cf       	rjmp	.-60     	; 0x9f58 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    9f94:	11 e0       	ldi	r17, 0x01	; 1
    9f96:	8a 32       	cpi	r24, 0x2A	; 42
    9f98:	09 f0       	breq	.+2      	; 0x9f9c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    9f9a:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    9f9c:	18 86       	std	Y+8, r1	; 0x08
    9f9e:	eb cf       	rjmp	.-42     	; 0x9f76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    9fa0:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    9fa2:	ce 01       	movw	r24, r28
    9fa4:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    9fa8:	88 23       	and	r24, r24
    9faa:	51 f3       	breq	.-44     	; 0x9f80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    9fac:	8a 30       	cpi	r24, 0x0A	; 10
    9fae:	c1 f7       	brne	.-16     	; 0x9fa0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    9fb0:	c1 cf       	rjmp	.-126    	; 0x9f34 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00009fb2 <valid_true()>:
_Z10valid_truev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6088
}
////
uint8_t valid_true(void)
{
  return 1;
}
    9fb2:	81 e0       	ldi	r24, 0x01	; 1
    9fb4:	08 95       	ret

00009fb6 <valid_ipv4_address_element_string()>:
_Z33valid_ipv4_address_element_stringv():
    9fb6:	81 e0       	ldi	r24, 0x01	; 1
    9fb8:	08 95       	ret

00009fba <button_nastaveni_reload_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_nastaveni_reload_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5957
   funkce pro restartovani zarizeni
*/
void button_nastaveni_reload_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  resetFunc();
    9fba:	f0 e0       	ldi	r31, 0x00	; 0
    9fbc:	e0 e0       	ldi	r30, 0x00	; 0
    9fbe:	19 94       	eijmp

00009fc0 <nullfce(unsigned int, unsigned int, unsigned char)>:
_Z7nullfcejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:596





void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
    9fc0:	08 95       	ret

00009fc2 <button_check_mqtt_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_check_mqtt_connection_onclickjjh():
    9fc2:	08 95       	ret

00009fc4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z62button_set_brightness_auto_shutdown_select_time_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5712
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    9fc4:	41 11       	cpse	r20, r1
    9fc6:	07 c0       	rjmp	.+14     	; 0x9fd6 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x12>
    9fc8:	81 e0       	ldi	r24, 0x01	; 1
    9fca:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    9fce:	99 23       	and	r25, r25
    9fd0:	49 f0       	breq	.+18     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5720
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    9fd2:	80 e0       	ldi	r24, 0x00	; 0
    9fd4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5714
uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    9fd6:	41 30       	cpi	r20, 0x01	; 1
    9fd8:	31 f4       	brne	.+12     	; 0x9fe6 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x22>
    9fda:	81 e0       	ldi	r24, 0x01	; 1
    9fdc:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    9fe0:	9e 31       	cpi	r25, 0x1E	; 30
    9fe2:	b9 f7       	brne	.-18     	; 0x9fd2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5725
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    ret = 1;
  return ret;
}
    9fe4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5716
  uint8_t ret = 0;
  if (args3 == 0 && display_auto_shutdown == 0)
    ret = 1;
  if (args3 == 1 && display_auto_shutdown == 30)
    ret = 1;
  if (args3 == 2 && display_auto_shutdown == 60)
    9fe6:	42 30       	cpi	r20, 0x02	; 2
    9fe8:	31 f4       	brne	.+12     	; 0x9ff6 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    9fea:	81 e0       	ldi	r24, 0x01	; 1
    9fec:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    9ff0:	9c 33       	cpi	r25, 0x3C	; 60
    9ff2:	79 f7       	brne	.-34     	; 0x9fd2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    9ff4:	f7 cf       	rjmp	.-18     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5718
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    9ff6:	43 30       	cpi	r20, 0x03	; 3
    9ff8:	31 f4       	brne	.+12     	; 0xa006 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x42>
    9ffa:	81 e0       	ldi	r24, 0x01	; 1
    9ffc:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    a000:	98 37       	cpi	r25, 0x78	; 120
    a002:	39 f7       	brne	.-50     	; 0x9fd2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    a004:	ef cf       	rjmp	.-34     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5720
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    a006:	44 30       	cpi	r20, 0x04	; 4
    a008:	31 f4       	brne	.+12     	; 0xa016 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x52>
    a00a:	81 e0       	ldi	r24, 0x01	; 1
    a00c:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    a010:	94 3b       	cpi	r25, 0xB4	; 180
    a012:	f9 f6       	brne	.-66     	; 0x9fd2 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0xe>
    a014:	e7 cf       	rjmp	.-50     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5711
  }
}

uint8_t button_set_brightness_auto_shutdown_select_time_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    a016:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5722
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
  if (args3 == 5 && display_auto_shutdown == 250)
    a018:	45 30       	cpi	r20, 0x05	; 5
    a01a:	21 f7       	brne	.-56     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
    a01c:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
    a020:	9a 3f       	cpi	r25, 0xFA	; 250
    a022:	01 f7       	brne	.-64     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5721
  if (args3 == 2 && display_auto_shutdown == 60)
    ret = 1;
  if (args3 == 3 && display_auto_shutdown == 120)
    ret = 1;
  if (args3 == 4 && display_auto_shutdown == 180)
    ret = 1;
    a024:	81 e0       	ldi	r24, 0x01	; 1
    a026:	de cf       	rjmp	.-68     	; 0x9fe4 <button_set_brightness_auto_shutdown_select_time_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x20>

0000a028 <button_set_brightness_auto_shutdown_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_set_brightness_auto_shutdown_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5640
}

uint8_t button_set_brightness_auto_shutdown_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    a028:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5643
    ret = 1;
  return ret;
}
    a02c:	86 fb       	bst	r24, 6
    a02e:	88 27       	eor	r24, r24
    a030:	80 f9       	bld	r24, 0
    a032:	08 95       	ret

0000a034 <display_enable_show_brightness_manual_mode(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_brightness_manual_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5553
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    a034:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a038:	80 95       	com	r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5611
{
  uint8_t ret = 0;
  if (switch_brightness_automode_get_status_fnt(0, 0, 0) == 0)
    ret = 1;
  return ret;
}
    a03a:	88 1f       	adc	r24, r24
    a03c:	88 27       	eor	r24, r24
    a03e:	88 1f       	adc	r24, r24
    a040:	08 95       	ret

0000a042 <preload_display_setting_brightness(unsigned int, unsigned int, unsigned char)>:
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a042:	cf 93       	push	r28
    a044:	df 93       	push	r29
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a046:	cb e9       	ldi	r28, 0x9B	; 155
    a048:	d9 e0       	ldi	r29, 0x09	; 9
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5594
}
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
    a04a:	60 91 87 0b 	lds	r22, 0x0B87	; 0x800b87 <brigthness_display_values>
    a04e:	70 e0       	ldi	r23, 0x00	; 0
    a050:	90 e0       	ldi	r25, 0x00	; 0
    a052:	80 e0       	ldi	r24, 0x00	; 0
    a054:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    a058:	68 83       	st	Y, r22
    a05a:	79 83       	std	Y+1, r23	; 0x01
    a05c:	8a 83       	std	Y+2, r24	; 0x02
    a05e:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    a060:	80 e0       	ldi	r24, 0x00	; 0
    a062:	90 e0       	ldi	r25, 0x00	; 0
    a064:	a0 ea       	ldi	r26, 0xA0	; 160
    a066:	b0 e4       	ldi	r27, 0x40	; 64
    a068:	88 87       	std	Y+8, r24	; 0x08
    a06a:	99 87       	std	Y+9, r25	; 0x09
    a06c:	aa 87       	std	Y+10, r26	; 0x0a
    a06e:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    a070:	40 e0       	ldi	r20, 0x00	; 0
    a072:	50 e0       	ldi	r21, 0x00	; 0
    a074:	68 ec       	ldi	r22, 0xC8	; 200
    a076:	72 e4       	ldi	r23, 0x42	; 66
    a078:	4c 83       	std	Y+4, r20	; 0x04
    a07a:	5d 83       	std	Y+5, r21	; 0x05
    a07c:	6e 83       	std	Y+6, r22	; 0x06
    a07e:	7f 83       	std	Y+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    a080:	8e 87       	std	Y+14, r24	; 0x0e
    a082:	9f 87       	std	Y+15, r25	; 0x0f
    a084:	a8 8b       	std	Y+16, r26	; 0x10
    a086:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    a088:	81 e0       	ldi	r24, 0x01	; 1
    a08a:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    a08c:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    a08e:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    a090:	8c e3       	ldi	r24, 0x3C	; 60
    a092:	9f e6       	ldi	r25, 0x6F	; 111
    a094:	9c 8b       	std	Y+20, r25	; 0x14
    a096:	8b 8b       	std	Y+19, r24	; 0x13
_Z34preload_display_setting_brightnessjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
////////
/// Nastaveni dialogu nastaveni promene
uint8_t preload_display_setting_brightness(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}
    a098:	df 91       	pop	r29
    a09a:	cf 91       	pop	r28
    a09c:	08 95       	ret

0000a09e <switch_brightness_automode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z41switch_brightness_automode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5553
/////////
/// Funkce, ktera vrati jestli je zapnute automaticke rizeni podsvetleni
uint8_t switch_brightness_automode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 ) ret = 1;
    a09e:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5555
  return ret;
}
    a0a2:	88 1f       	adc	r24, r24
    a0a4:	88 27       	eor	r24, r24
    a0a6:	88 1f       	adc	r24, r24
    a0a8:	08 95       	ret

0000a0aa <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4904
   funkce pro zobrazeni defaultniho cidla zobrazeni teploty
*/
uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    a0aa:	81 e0       	ldi	r24, 0x01	; 1
    a0ac:	90 91 93 09 	lds	r25, 0x0993	; 0x800993 <default_show_temp>
    a0b0:	94 13       	cpse	r25, r20
    a0b2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4908
    ret = 1;

  return ret;
}
    a0b4:	08 95       	ret

0000a0b6 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4891
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args1 == INPUT_SENSOR_SHOW_ACTIVE)
    a0b6:	00 97       	sbiw	r24, 0x00	; 0
    a0b8:	31 f4       	brne	.+12     	; 0xa0c6 <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4892
    return use_tds + use_rtds;
    a0ba:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <use_tds>
    a0be:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <use_rtds>
    a0c2:	89 0f       	add	r24, r25
    a0c4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894

  if (args1 == INPUT_SENSOR_SHOW_ALL)
    a0c6:	01 97       	sbiw	r24, 0x01	; 1
    a0c8:	09 f0       	breq	.+2      	; 0xa0cc <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)+0x16>
    a0ca:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
    return HW_ONEWIRE_MAXROMS + MAX_RTDS;
    a0cc:	80 e1       	ldi	r24, 0x10	; 16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4896
}
    a0ce:	08 95       	ret

0000a0d0 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4643
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a0d0:	ee eb       	ldi	r30, 0xBE	; 190
    a0d2:	fc e0       	ldi	r31, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
  uint8_t active = 0;
    a0d4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    a0d6:	91 85       	ldd	r25, Z+9	; 0x09
    a0d8:	91 30       	cpi	r25, 0x01	; 1
    a0da:	09 f4       	brne	.+2      	; 0xa0de <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    a0dc:	8f 5f       	subi	r24, 0xFF	; 255
    a0de:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4645

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    a0e0:	9d e0       	ldi	r25, 0x0D	; 13
    a0e2:	e0 30       	cpi	r30, 0x00	; 0
    a0e4:	f9 07       	cpc	r31, r25
    a0e6:	b9 f7       	brne	.-18     	; 0xa0d6 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4648
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    a0e8:	08 95       	ret

0000a0ea <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4560
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    a0ea:	8a e0       	ldi	r24, 0x0A	; 10
    a0ec:	08 95       	ret

0000a0ee <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_decjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
  }
}
///
void display_function_vertical_slider_dec(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    a0ee:	fc 01       	movw	r30, r24
    a0f0:	e6 57       	subi	r30, 0x76	; 118
    a0f2:	f6 4f       	sbci	r31, 0xF6	; 246
    a0f4:	90 81       	ld	r25, Z
    a0f6:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <menu_slider_data_min>
    a0fa:	89 17       	cp	r24, r25
    a0fc:	28 f4       	brcc	.+10     	; 0xa108 <display_function_vertical_slider_dec(unsigned int, unsigned int, unsigned char)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4379
  {
    menu_slider_data_current[args1]--;
    a0fe:	91 50       	subi	r25, 0x01	; 1
    a100:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4380
    display_update_slider = 1;
    a102:	81 e0       	ldi	r24, 0x01	; 1
    a104:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
  }
}
    a108:	08 95       	ret

0000a10a <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)>:
_Z36display_function_vertical_slider_incjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4368
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    a10a:	fc 01       	movw	r30, r24
    a10c:	e6 57       	subi	r30, 0x76	; 118
    a10e:	f6 4f       	sbci	r31, 0xF6	; 246
    a110:	90 81       	ld	r25, Z
    a112:	20 91 92 09 	lds	r18, 0x0992	; 0x800992 <menu_slider_data_max>
    a116:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <menu_slider_data_max_element>
    a11a:	28 1b       	sub	r18, r24
    a11c:	33 0b       	sbc	r19, r19
    a11e:	92 17       	cp	r25, r18
    a120:	13 06       	cpc	r1, r19
    a122:	2c f4       	brge	.+10     	; 0xa12e <display_function_vertical_slider_inc(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4370
  {
    menu_slider_data_current[args1]++;
    a124:	9f 5f       	subi	r25, 0xFF	; 255
    a126:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4371
    display_update_slider = 1;
    a128:	81 e0       	ldi	r24, 0x01	; 1
    a12a:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <display_update_slider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4373
  }
}
    a12e:	08 95       	ret

0000a130 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3114
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    a130:	83 30       	cpi	r24, 0x03	; 3
    a132:	41 f4       	brne	.+16     	; 0xa144 <a2d_complete(unsigned char, unsigned int)+0x14>
    a134:	70 93 7f 0b 	sts	0x0B7F, r23	; 0x800b7f <proud+0x1>
    a138:	60 93 7e 0b 	sts	0x0B7E, r22	; 0x800b7e <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3119
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    a13c:	81 e0       	ldi	r24, 0x01	; 1
    a13e:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
}
    a142:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    a144:	86 30       	cpi	r24, 0x06	; 6
    a146:	29 f4       	brne	.+10     	; 0xa152 <a2d_complete(unsigned char, unsigned int)+0x22>
    a148:	70 93 85 0b 	sts	0x0B85, r23	; 0x800b85 <tritri+0x1>
    a14c:	60 93 84 0b 	sts	0x0B84, r22	; 0x800b84 <tritri>
    a150:	f5 cf       	rjmp	.-22     	; 0xa13c <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
  if (channel == A_PETV) petnula = data;
    a152:	85 30       	cpi	r24, 0x05	; 5
    a154:	29 f4       	brne	.+10     	; 0xa160 <a2d_complete(unsigned char, unsigned int)+0x30>
    a156:	70 93 83 0b 	sts	0x0B83, r23	; 0x800b83 <petnula+0x1>
    a15a:	60 93 82 0b 	sts	0x0B82, r22	; 0x800b82 <petnula>
    a15e:	ee cf       	rjmp	.-36     	; 0xa13c <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3117
  if (channel == A_DVANACTV) dvanact = data;
    a160:	84 30       	cpi	r24, 0x04	; 4
    a162:	29 f4       	brne	.+10     	; 0xa16e <a2d_complete(unsigned char, unsigned int)+0x3e>
    a164:	70 93 81 0b 	sts	0x0B81, r23	; 0x800b81 <dvanact+0x1>
    a168:	60 93 80 0b 	sts	0x0B80, r22	; 0x800b80 <dvanact>
    a16c:	e7 cf       	rjmp	.-50     	; 0xa13c <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3118
  if (channel == A_LIGHT) light_curr = data;
    a16e:	87 30       	cpi	r24, 0x07	; 7
    a170:	29 f7       	brne	.-54     	; 0xa13c <a2d_complete(unsigned char, unsigned int)+0xc>
    a172:	70 93 a4 0c 	sts	0x0CA4, r23	; 0x800ca4 <light_curr+0x1>
    a176:	60 93 a3 0c 	sts	0x0CA3, r22	; 0x800ca3 <light_curr>
    a17a:	e0 cf       	rjmp	.-64     	; 0xa13c <a2d_complete(unsigned char, unsigned int)+0xc>

0000a17c <selftest_set_0(unsigned char)>:
_Z14selftest_set_0h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3131
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    a17c:	21 e0       	ldi	r18, 0x01	; 1
    a17e:	30 e0       	ldi	r19, 0x00	; 0
    a180:	01 c0       	rjmp	.+2      	; 0xa184 <selftest_set_0(unsigned char)+0x8>
    a182:	22 0f       	add	r18, r18
    a184:	8a 95       	dec	r24
    a186:	ea f7       	brpl	.-6      	; 0xa182 <selftest_set_0(unsigned char)+0x6>
    a188:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    a18c:	82 2b       	or	r24, r18
    a18e:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
}
    a192:	08 95       	ret

0000a194 <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1705


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    a194:	08 95       	ret

0000a196 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)>:
_Z27menu_redraw_change_variablejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1692
  return 0;
}

uint8_t menu_redraw_change_variable(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_dialog_variable_change == 1)
    a196:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <menu_dialog_variable_change>
    a19a:	81 30       	cpi	r24, 0x01	; 1
    a19c:	19 f4       	brne	.+6      	; 0xa1a4 <menu_redraw_change_variable(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1694
  {
    menu_dialog_variable_change = 0;
    a19e:	10 92 04 09 	sts	0x0904, r1	; 0x800904 <menu_dialog_variable_change>
    a1a2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1697
    return 1;
  }
  return 0;
    a1a4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1698
}
    a1a6:	08 95       	ret

0000a1a8 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)>:
_Z31menu_redraw_change_default_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1682
}


uint8_t menu_redraw_change_default_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_redraw_default_ring == 1)
    a1a8:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <display_redraw_default_ring>
    a1ac:	81 30       	cpi	r24, 0x01	; 1
    a1ae:	19 f4       	brne	.+6      	; 0xa1b6 <menu_redraw_change_default_ring(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684
  {
    display_redraw_default_ring = 0;
    a1b0:	10 92 94 09 	sts	0x0994, r1	; 0x800994 <display_redraw_default_ring>
    a1b4:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1687
    return 1;
  }
  return 0;
    a1b6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1688
}
    a1b8:	08 95       	ret

0000a1ba <menu_redraw_slider(unsigned int, unsigned int, unsigned char)>:
_Z18menu_redraw_sliderjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1671
}


uint8_t menu_redraw_slider(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (display_update_slider == 1)
    a1ba:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <display_update_slider>
    a1be:	81 30       	cpi	r24, 0x01	; 1
    a1c0:	19 f4       	brne	.+6      	; 0xa1c8 <menu_redraw_slider(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1673
  {
    display_update_slider = 0;
    a1c2:	10 92 89 09 	sts	0x0989, r1	; 0x800989 <display_update_slider>
    a1c6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1676
    return 1;
  }
  return 0;
    a1c8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
}
    a1ca:	08 95       	ret

0000a1cc <menu_redraw_date(unsigned int, unsigned int, unsigned char)>:
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    a1cc:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <now>
    a1d0:	90 e0       	ldi	r25, 0x00	; 0
    a1d2:	80 53       	subi	r24, 0x30	; 48
    a1d4:	98 4f       	sbci	r25, 0xF8	; 248
    a1d6:	30 91 75 12 	lds	r19, 0x1275	; 0x801275 <now+0x1>
    a1da:	20 91 76 12 	lds	r18, 0x1276	; 0x801276 <now+0x2>
_Z16menu_redraw_datejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1657
}


uint8_t menu_redraw_date(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (now.year() != last_year || now.month() != last_month || now.day() != last_day || display_update_date == 1)
    a1de:	40 91 02 09 	lds	r20, 0x0902	; 0x800902 <last_year>
    a1e2:	50 91 03 09 	lds	r21, 0x0903	; 0x800903 <last_year+0x1>
    a1e6:	48 17       	cp	r20, r24
    a1e8:	59 07       	cpc	r21, r25
    a1ea:	61 f4       	brne	.+24     	; 0xa204 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a1ec:	40 91 01 09 	lds	r20, 0x0901	; 0x800901 <last_month>
    a1f0:	43 13       	cpse	r20, r19
    a1f2:	08 c0       	rjmp	.+16     	; 0xa204 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a1f4:	40 91 00 09 	lds	r20, 0x0900	; 0x800900 <last_day>
    a1f8:	42 13       	cpse	r20, r18
    a1fa:	04 c0       	rjmp	.+8      	; 0xa204 <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x38>
    a1fc:	40 91 ff 08 	lds	r20, 0x08FF	; 0x8008ff <display_update_date>
    a200:	41 30       	cpi	r20, 0x01	; 1
    a202:	61 f4       	brne	.+24     	; 0xa21c <menu_redraw_date(unsigned int, unsigned int, unsigned char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1659
  {
    display_update_date = 0;
    a204:	10 92 ff 08 	sts	0x08FF, r1	; 0x8008ff <display_update_date>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1660
    last_year = now.year();
    a208:	90 93 03 09 	sts	0x0903, r25	; 0x800903 <last_year+0x1>
    a20c:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <last_year>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1661
    last_month = now.month();
    a210:	30 93 01 09 	sts	0x0901, r19	; 0x800901 <last_month>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1662
    last_day = now.day();
    a214:	20 93 00 09 	sts	0x0900, r18	; 0x800900 <last_day>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1663
    return 1;
    a218:	81 e0       	ldi	r24, 0x01	; 1
    a21a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665
  }
  return 0;
    a21c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666
}
    a21e:	08 95       	ret

0000a220 <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)>:
_Z23menu_redraw_update_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1646
  return 0;
}

uint8_t menu_redraw_update_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (menu_redraw10s == 1)
    a220:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <menu_redraw10s>
    a224:	81 30       	cpi	r24, 0x01	; 1
    a226:	19 f4       	brne	.+6      	; 0xa22e <menu_redraw_update_temp(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
  {
    menu_redraw10s = 0;
    a228:	10 92 aa 0c 	sts	0x0CAA, r1	; 0x800caa <menu_redraw10s>
    a22c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1651
    return 1;
  }
  return 0;
    a22e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1652
}
    a230:	08 95       	ret

0000a232 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)>:
_Z38menu_redraw_change_term_mode_cool_heatjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1636
}

uint8_t menu_redraw_change_term_mode_cool_heat(uint16_t args1, uint16_t args2, uint8_t args3)
{

  if (change_term_mode == 2)
    a232:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <change_term_mode>
    a236:	82 30       	cpi	r24, 0x02	; 2
    a238:	21 f4       	brne	.+8      	; 0xa242 <menu_redraw_change_term_mode_cool_heat(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1638
  {
    change_term_mode = 0;
    a23a:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1639
    return 1;
    a23e:	81 e0       	ldi	r24, 0x01	; 1
    a240:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1641
  }
  return 0;
    a242:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1642
}
    a244:	08 95       	ret

0000a246 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)>:
_Z28menu_redraw_change_term_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1625



uint8_t menu_redraw_change_term_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (change_term_mode == 1)
    a246:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <change_term_mode>
    a24a:	81 30       	cpi	r24, 0x01	; 1
    a24c:	19 f4       	brne	.+6      	; 0xa254 <menu_redraw_change_term_mode(unsigned int, unsigned int, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1627
  {
    change_term_mode = 0;
    a24e:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <change_term_mode>
    a252:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1630
    return 1;
  }
  return 0;
    a254:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1631
}
    a256:	08 95       	ret

0000a258 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)>:
_Z19menu_redraw_time05sjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1602
  return 0;
}


uint8_t menu_redraw_time05s(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a258:	90 91 77 12 	lds	r25, 0x1277	; 0x801277 <now+0x3>
    a25c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <now+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1612
      return 1;
    }
    return 0;
  */

  if (last_time_hour != now.hour() || last_time_minute != now.minute())
    a260:	20 91 fe 08 	lds	r18, 0x08FE	; 0x8008fe <last_time_hour>
    a264:	29 13       	cpse	r18, r25
    a266:	04 c0       	rjmp	.+8      	; 0xa270 <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x18>
    a268:	20 91 fd 08 	lds	r18, 0x08FD	; 0x8008fd <last_time_minute>
    a26c:	28 17       	cp	r18, r24
    a26e:	31 f0       	breq	.+12     	; 0xa27c <menu_redraw_time05s(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1614
  {
    last_time_hour = now.hour();
    a270:	90 93 fe 08 	sts	0x08FE, r25	; 0x8008fe <last_time_hour>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1615
    last_time_minute = now.minute();
    a274:	80 93 fd 08 	sts	0x08FD, r24	; 0x8008fd <last_time_minute>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1616
    return 1;
    a278:	81 e0       	ldi	r24, 0x01	; 1
    a27a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1618
  }
  return 0;
    a27c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1619
}
    a27e:	08 95       	ret

0000a280 <click_keyboard_type(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_typejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1561
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_set_string_keyboard_type = args1;
    a280:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <__data_end>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1562
}
    a284:	08 95       	ret

0000a286 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1551
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    a286:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <__data_end>
    a28a:	83 30       	cpi	r24, 0x03	; 3
    a28c:	08 f0       	brcs	.+2      	; 0xa290 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    a28e:	08 95       	ret
    a290:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1557
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    a292:	08 95       	ret

0000a294 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1520
  line2[0] = 0;
}

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a294:	0f 93       	push	r16
    a296:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1522
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    a298:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <__data_end>
    a29c:	91 11       	cpse	r25, r1
    a29e:	0c c0       	rjmp	.+24     	; 0xa2b8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1523
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    a2a0:	e8 2f       	mov	r30, r24
    a2a2:	f0 e0       	ldi	r31, 0x00	; 0
    a2a4:	e2 5f       	subi	r30, 0xF2	; 242
    a2a6:	ff 47       	sbci	r31, 0x7F	; 127
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    a2a8:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1528
  line1[0] = znak;
    a2aa:	d9 01       	movw	r26, r18
    a2ac:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1529
  line2[0] = 0;
    a2ae:	f8 01       	movw	r30, r16
    a2b0:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1530
}
    a2b2:	1f 91       	pop	r17
    a2b4:	0f 91       	pop	r16
    a2b6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1524
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    a2b8:	91 30       	cpi	r25, 0x01	; 1
    a2ba:	29 f4       	brne	.+10     	; 0xa2c6 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1525
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    a2bc:	e8 2f       	mov	r30, r24
    a2be:	f0 e0       	ldi	r31, 0x00	; 0
    a2c0:	ec 50       	subi	r30, 0x0C	; 12
    a2c2:	f0 48       	sbci	r31, 0x80	; 128
    a2c4:	f1 cf       	rjmp	.-30     	; 0xa2a8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1526
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    a2c6:	92 30       	cpi	r25, 0x02	; 2
    a2c8:	81 f7       	brne	.-32     	; 0xa2aa <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1527
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    a2ca:	e8 2f       	mov	r30, r24
    a2cc:	f0 e0       	ldi	r31, 0x00	; 0
    a2ce:	e6 52       	subi	r30, 0x26	; 38
    a2d0:	f0 48       	sbci	r31, 0x80	; 128
    a2d2:	ea cf       	rjmp	.-44     	; 0xa2a8 <get_function_keyboard_alfa_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>

0000a2d4 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1511
/*
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a2d4:	0f 93       	push	r16
    a2d6:	1f 93       	push	r17
    a2d8:	f9 01       	movw	r30, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1513
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    a2da:	8a 30       	cpi	r24, 0x0A	; 10
    a2dc:	39 f4       	brne	.+14     	; 0xa2ec <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
    a2de:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514
  if (args1 == 11) line1[0] = ':';
    a2e0:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1515
  line2[0] = 0;
    a2e2:	f8 01       	movw	r30, r16
    a2e4:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1516
}
    a2e6:	1f 91       	pop	r17
    a2e8:	0f 91       	pop	r16
    a2ea:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    a2ec:	8b 30       	cpi	r24, 0x0B	; 11
    a2ee:	11 f0       	breq	.+4      	; 0xa2f4 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1512
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    a2f0:	80 5d       	subi	r24, 0xD0	; 208
    a2f2:	f6 cf       	rjmp	.-20     	; 0xa2e0 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1514
  if (args1 == 10) line1[0] = '.';
  if (args1 == 11) line1[0] = ':';
    a2f4:	8a e3       	ldi	r24, 0x3A	; 58
    a2f6:	f4 cf       	rjmp	.-24     	; 0xa2e0 <get_function_keyboard_number_char(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>

0000a2f8 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1491
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 12;
}
    a2f8:	8c e0       	ldi	r24, 0x0C	; 12
    a2fa:	08 95       	ret

0000a2fc <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)>:
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1341
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    }
  }
}
void display_function_set_variable_plus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a2fc:	cf 92       	push	r12
    a2fe:	df 92       	push	r13
    a300:	ef 92       	push	r14
    a302:	ff 92       	push	r15
    a304:	cf 93       	push	r28
    a306:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1342
  if ((menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step) <= menu_dialog_variable[idx].variable_max)
    a308:	25 e1       	ldi	r18, 0x15	; 21
    a30a:	28 9f       	mul	r18, r24
    a30c:	e0 01       	movw	r28, r0
    a30e:	29 9f       	mul	r18, r25
    a310:	d0 0d       	add	r29, r0
    a312:	11 24       	eor	r1, r1
    a314:	c5 56       	subi	r28, 0x65	; 101
    a316:	d6 4f       	sbci	r29, 0xF6	; 246
    a318:	2e 85       	ldd	r18, Y+14	; 0x0e
    a31a:	3f 85       	ldd	r19, Y+15	; 0x0f
    a31c:	48 89       	ldd	r20, Y+16	; 0x10
    a31e:	59 89       	ldd	r21, Y+17	; 0x11
    a320:	68 81       	ld	r22, Y
    a322:	79 81       	ldd	r23, Y+1	; 0x01
    a324:	8a 81       	ldd	r24, Y+2	; 0x02
    a326:	9b 81       	ldd	r25, Y+3	; 0x03
    a328:	0e 94 0c f9 	call	0x1f218	; 0x1f218 <__addsf3>
    a32c:	6b 01       	movw	r12, r22
    a32e:	7c 01       	movw	r14, r24
    a330:	2c 81       	ldd	r18, Y+4	; 0x04
    a332:	3d 81       	ldd	r19, Y+5	; 0x05
    a334:	4e 81       	ldd	r20, Y+6	; 0x06
    a336:	5f 81       	ldd	r21, Y+7	; 0x07
    a338:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
    a33c:	18 16       	cp	r1, r24
    a33e:	e4 f0       	brlt	.+56     	; 0xa378 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1344
  {
    menu_dialog_variable_change = 1;
    a340:	81 e0       	ldi	r24, 0x01	; 1
    a342:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1345
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    a346:	c8 82       	st	Y, r12
    a348:	d9 82       	std	Y+1, r13	; 0x01
    a34a:	ea 82       	std	Y+2, r14	; 0x02
    a34c:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1346
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    a34e:	8c 85       	ldd	r24, Y+12	; 0x0c
    a350:	81 30       	cpi	r24, 0x01	; 1
    a352:	91 f4       	brne	.+36     	; 0xa378 <display_function_set_variable_plus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}

int float_to_int(float x)
{
 return x;
    a354:	c7 01       	movw	r24, r14
    a356:	b6 01       	movw	r22, r12
    a358:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
    a35c:	26 2f       	mov	r18, r22
_Z34display_function_set_variable_plusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a35e:	8a 89       	ldd	r24, Y+18	; 0x12
    a360:	eb 89       	ldd	r30, Y+19	; 0x13
    a362:	fc 89       	ldd	r31, Y+20	; 0x14
    a364:	b7 01       	movw	r22, r14
    a366:	a6 01       	movw	r20, r12
    a368:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
    }
  }
}
    a36a:	df 91       	pop	r29
    a36c:	cf 91       	pop	r28
    a36e:	ff 90       	pop	r15
    a370:	ef 90       	pop	r14
    a372:	df 90       	pop	r13
    a374:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1348
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now + menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a376:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1351
    }
  }
}
    a378:	df 91       	pop	r29
    a37a:	cf 91       	pop	r28
    a37c:	ff 90       	pop	r15
    a37e:	ef 90       	pop	r14
    a380:	df 90       	pop	r13
    a382:	cf 90       	pop	r12
    a384:	08 95       	ret

0000a386 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)>:
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1329
{
  return menu_dialog_variable[idx].variable_now ;
}

void display_function_set_variable_minus(uint16_t idx, uint16_t args2, uint8_t args3)
{
    a386:	cf 92       	push	r12
    a388:	df 92       	push	r13
    a38a:	ef 92       	push	r14
    a38c:	ff 92       	push	r15
    a38e:	cf 93       	push	r28
    a390:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1330
  if (menu_dialog_variable[idx].variable_now - menu_dialog_variable[idx].variable_step >= menu_dialog_variable[idx].variable_min)
    a392:	25 e1       	ldi	r18, 0x15	; 21
    a394:	28 9f       	mul	r18, r24
    a396:	e0 01       	movw	r28, r0
    a398:	29 9f       	mul	r18, r25
    a39a:	d0 0d       	add	r29, r0
    a39c:	11 24       	eor	r1, r1
    a39e:	c5 56       	subi	r28, 0x65	; 101
    a3a0:	d6 4f       	sbci	r29, 0xF6	; 246
    a3a2:	2e 85       	ldd	r18, Y+14	; 0x0e
    a3a4:	3f 85       	ldd	r19, Y+15	; 0x0f
    a3a6:	48 89       	ldd	r20, Y+16	; 0x10
    a3a8:	59 89       	ldd	r21, Y+17	; 0x11
    a3aa:	68 81       	ld	r22, Y
    a3ac:	79 81       	ldd	r23, Y+1	; 0x01
    a3ae:	8a 81       	ldd	r24, Y+2	; 0x02
    a3b0:	9b 81       	ldd	r25, Y+3	; 0x03
    a3b2:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
    a3b6:	6b 01       	movw	r12, r22
    a3b8:	7c 01       	movw	r14, r24
    a3ba:	28 85       	ldd	r18, Y+8	; 0x08
    a3bc:	39 85       	ldd	r19, Y+9	; 0x09
    a3be:	4a 85       	ldd	r20, Y+10	; 0x0a
    a3c0:	5b 85       	ldd	r21, Y+11	; 0x0b
    a3c2:	0e 94 20 fa 	call	0x1f440	; 0x1f440 <__gesf2>
    a3c6:	87 fd       	sbrc	r24, 7
    a3c8:	1c c0       	rjmp	.+56     	; 0xa402 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1332
  {
    menu_dialog_variable_change = 1;
    a3ca:	81 e0       	ldi	r24, 0x01	; 1
    a3cc:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <menu_dialog_variable_change>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1333
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    a3d0:	c8 82       	st	Y, r12
    a3d2:	d9 82       	std	Y+1, r13	; 0x01
    a3d4:	ea 82       	std	Y+2, r14	; 0x02
    a3d6:	fb 82       	std	Y+3, r15	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1334
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    a3d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    a3da:	81 30       	cpi	r24, 0x01	; 1
    a3dc:	91 f4       	brne	.+36     	; 0xa402 <display_function_set_variable_minus(unsigned int, unsigned int, unsigned char)+0x7c>
float_to_int():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
    a3de:	c7 01       	movw	r24, r14
    a3e0:	b6 01       	movw	r22, r12
    a3e2:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
    a3e6:	26 2f       	mov	r18, r22
_Z35display_function_set_variable_minusjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a3e8:	8a 89       	ldd	r24, Y+18	; 0x12
    a3ea:	eb 89       	ldd	r30, Y+19	; 0x13
    a3ec:	fc 89       	ldd	r31, Y+20	; 0x14
    a3ee:	b7 01       	movw	r22, r14
    a3f0:	a6 01       	movw	r20, r12
    a3f2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
    }
  }
}
    a3f4:	df 91       	pop	r29
    a3f6:	cf 91       	pop	r28
    a3f8:	ff 90       	pop	r15
    a3fa:	ef 90       	pop	r14
    a3fc:	df 90       	pop	r13
    a3fe:	cf 90       	pop	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1336
  {
    menu_dialog_variable_change = 1;
    menu_dialog_variable[idx].variable_now = menu_dialog_variable[idx].variable_now  - menu_dialog_variable[idx].variable_step;
    if (menu_dialog_variable[idx].update_now == H_TRUE)
    {
      menu_dialog_variable[idx].save_function(menu_dialog_variable[idx].args, menu_dialog_variable[idx].variable_now, float_to_int(menu_dialog_variable[idx].variable_now));
    a400:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1339
    }
  }
}
    a402:	df 91       	pop	r29
    a404:	cf 91       	pop	r28
    a406:	ff 90       	pop	r15
    a408:	ef 90       	pop	r14
    a40a:	df 90       	pop	r13
    a40c:	cf 90       	pop	r12
    a40e:	08 95       	ret

0000a410 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>:
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1297
}


/// TODO spravne predat id ringu
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a410:	4f 92       	push	r4
    a412:	5f 92       	push	r5
    a414:	6f 92       	push	r6
    a416:	7f 92       	push	r7
    a418:	8f 92       	push	r8
    a41a:	9f 92       	push	r9
    a41c:	af 92       	push	r10
    a41e:	bf 92       	push	r11
    a420:	cf 92       	push	r12
    a422:	df 92       	push	r13
    a424:	ef 92       	push	r14
    a426:	ff 92       	push	r15
    a428:	0f 93       	push	r16
    a42a:	1f 93       	push	r17
    a42c:	cf 93       	push	r28
    a42e:	8b 01       	movw	r16, r22
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    a430:	9b 01       	movw	r18, r22
    a432:	33 27       	eor	r19, r19
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a434:	eb e9       	ldi	r30, 0x9B	; 155
    a436:	f9 e0       	ldi	r31, 0x09	; 9
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
    a438:	c9 01       	movw	r24, r18
    a43a:	88 0f       	add	r24, r24
    a43c:	99 1f       	adc	r25, r25
    a43e:	88 0f       	add	r24, r24
    a440:	99 1f       	adc	r25, r25
    a442:	dc 01       	movw	r26, r24
    a444:	a8 54       	subi	r26, 0x48	; 72
    a446:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    a448:	4d 91       	ld	r20, X+
    a44a:	5d 91       	ld	r21, X+
    a44c:	6d 91       	ld	r22, X+
    a44e:	7c 91       	ld	r23, X
    a450:	40 83       	st	Z, r20
    a452:	51 83       	std	Z+1, r21	; 0x01
    a454:	62 83       	std	Z+2, r22	; 0x02
    a456:	73 83       	std	Z+3, r23	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  menu_dialog_variable[idx].variable_min = min;
    a458:	41 2c       	mov	r4, r1
    a45a:	51 2c       	mov	r5, r1
    a45c:	50 e2       	ldi	r21, 0x20	; 32
    a45e:	65 2e       	mov	r6, r21
    a460:	51 ec       	ldi	r21, 0xC1	; 193
    a462:	75 2e       	mov	r7, r21
    a464:	40 86       	std	Z+8, r4	; 0x08
    a466:	51 86       	std	Z+9, r5	; 0x09
    a468:	62 86       	std	Z+10, r6	; 0x0a
    a46a:	73 86       	std	Z+11, r7	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    a46c:	c1 2c       	mov	r12, r1
    a46e:	d1 2c       	mov	r13, r1
    a470:	60 e2       	ldi	r22, 0x20	; 32
    a472:	e6 2e       	mov	r14, r22
    a474:	61 e4       	ldi	r22, 0x41	; 65
    a476:	f6 2e       	mov	r15, r22
    a478:	c4 82       	std	Z+4, r12	; 0x04
    a47a:	d5 82       	std	Z+5, r13	; 0x05
    a47c:	e6 82       	std	Z+6, r14	; 0x06
    a47e:	f7 82       	std	Z+7, r15	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    a480:	7d ec       	ldi	r23, 0xCD	; 205
    a482:	87 2e       	mov	r8, r23
    a484:	7c ec       	ldi	r23, 0xCC	; 204
    a486:	97 2e       	mov	r9, r23
    a488:	a9 2c       	mov	r10, r9
    a48a:	7d e3       	ldi	r23, 0x3D	; 61
    a48c:	b7 2e       	mov	r11, r23
    a48e:	86 86       	std	Z+14, r8	; 0x0e
    a490:	97 86       	std	Z+15, r9	; 0x0f
    a492:	a0 8a       	std	Z+16, r10	; 0x10
    a494:	b1 8a       	std	Z+17, r11	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    a496:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    a498:	02 8b       	std	Z+18, r16	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    a49a:	c1 e0       	ldi	r28, 0x01	; 1
    a49c:	c4 87       	std	Z+12, r28	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    a49e:	4a eb       	ldi	r20, 0xBA	; 186
    a4a0:	5b e6       	ldi	r21, 0x6B	; 107
    a4a2:	54 8b       	std	Z+20, r21	; 0x14
    a4a4:	43 8b       	std	Z+19, r20	; 0x13
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    a4a6:	dc 01       	movw	r26, r24
    a4a8:	a4 53       	subi	r26, 0x34	; 52
    a4aa:	b5 4f       	sbci	r27, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a4ac:	4d 91       	ld	r20, X+
    a4ae:	5d 91       	ld	r21, X+
    a4b0:	6d 91       	ld	r22, X+
    a4b2:	7c 91       	ld	r23, X
    a4b4:	45 8b       	std	Z+21, r20	; 0x15
    a4b6:	56 8b       	std	Z+22, r21	; 0x16
    a4b8:	67 8b       	std	Z+23, r22	; 0x17
    a4ba:	70 8f       	std	Z+24, r23	; 0x18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  menu_dialog_variable[idx].variable_min = min;
    a4bc:	45 8e       	std	Z+29, r4	; 0x1d
    a4be:	56 8e       	std	Z+30, r5	; 0x1e
    a4c0:	67 8e       	std	Z+31, r6	; 0x1f
    a4c2:	70 a2       	std	Z+32, r7	; 0x20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    a4c4:	c1 8e       	std	Z+25, r12	; 0x19
    a4c6:	d2 8e       	std	Z+26, r13	; 0x1a
    a4c8:	e3 8e       	std	Z+27, r14	; 0x1b
    a4ca:	f4 8e       	std	Z+28, r15	; 0x1c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    a4cc:	83 a2       	std	Z+35, r8	; 0x23
    a4ce:	94 a2       	std	Z+36, r9	; 0x24
    a4d0:	a5 a2       	std	Z+37, r10	; 0x25
    a4d2:	b6 a2       	std	Z+38, r11	; 0x26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    a4d4:	12 a2       	std	Z+34, r1	; 0x22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    a4d6:	07 a3       	std	Z+39, r16	; 0x27
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    a4d8:	c1 a3       	std	Z+33, r28	; 0x21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    a4da:	43 ea       	ldi	r20, 0xA3	; 163
    a4dc:	5b e6       	ldi	r21, 0x6B	; 107
    a4de:	51 a7       	std	Z+41, r21	; 0x29
    a4e0:	40 a7       	std	Z+40, r20	; 0x28
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    a4e2:	80 52       	subi	r24, 0x20	; 32
    a4e4:	95 4f       	sbci	r25, 0xF5	; 245
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    a4e6:	dc 01       	movw	r26, r24
    a4e8:	4d 91       	ld	r20, X+
    a4ea:	5d 91       	ld	r21, X+
    a4ec:	6d 91       	ld	r22, X+
    a4ee:	7c 91       	ld	r23, X
    a4f0:	42 a7       	std	Z+42, r20	; 0x2a
    a4f2:	53 a7       	std	Z+43, r21	; 0x2b
    a4f4:	64 a7       	std	Z+44, r22	; 0x2c
    a4f6:	75 a7       	std	Z+45, r23	; 0x2d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  menu_dialog_variable[idx].variable_min = min;
    a4f8:	42 aa       	std	Z+50, r4	; 0x32
    a4fa:	53 aa       	std	Z+51, r5	; 0x33
    a4fc:	64 aa       	std	Z+52, r6	; 0x34
    a4fe:	75 aa       	std	Z+53, r7	; 0x35
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    a500:	c6 a6       	std	Z+46, r12	; 0x2e
    a502:	d7 a6       	std	Z+47, r13	; 0x2f
    a504:	e0 aa       	std	Z+48, r14	; 0x30
    a506:	f1 aa       	std	Z+49, r15	; 0x31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    a508:	80 ae       	std	Z+56, r8	; 0x38
    a50a:	91 ae       	std	Z+57, r9	; 0x39
    a50c:	a2 ae       	std	Z+58, r10	; 0x3a
    a50e:	b3 ae       	std	Z+59, r11	; 0x3b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    a510:	17 aa       	std	Z+55, r1	; 0x37
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    a512:	04 af       	std	Z+60, r16	; 0x3c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    a514:	c6 ab       	std	Z+54, r28	; 0x36
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    a516:	8c e8       	ldi	r24, 0x8C	; 140
    a518:	9b e6       	ldi	r25, 0x6B	; 107
    a51a:	96 af       	std	Z+62, r25	; 0x3e
    a51c:	85 af       	std	Z+61, r24	; 0x3d
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    a51e:	2c 50       	subi	r18, 0x0C	; 12
    a520:	35 4f       	sbci	r19, 0xF5	; 245
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1301
uint8_t preload_pid_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
    a522:	f9 01       	movw	r30, r18
    a524:	60 81       	ld	r22, Z
    a526:	70 e0       	ldi	r23, 0x00	; 0
    a528:	90 e0       	ldi	r25, 0x00	; 0
    a52a:	80 e0       	ldi	r24, 0x00	; 0
    a52c:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    a530:	60 93 da 09 	sts	0x09DA, r22	; 0x8009da <menu_dialog_variable+0x3f>
    a534:	70 93 db 09 	sts	0x09DB, r23	; 0x8009db <menu_dialog_variable+0x40>
    a538:	80 93 dc 09 	sts	0x09DC, r24	; 0x8009dc <menu_dialog_variable+0x41>
    a53c:	90 93 dd 09 	sts	0x09DD, r25	; 0x8009dd <menu_dialog_variable+0x42>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    a540:	c0 92 e2 09 	sts	0x09E2, r12	; 0x8009e2 <menu_dialog_variable+0x47>
    a544:	d0 92 e3 09 	sts	0x09E3, r13	; 0x8009e3 <menu_dialog_variable+0x48>
    a548:	e0 92 e4 09 	sts	0x09E4, r14	; 0x8009e4 <menu_dialog_variable+0x49>
    a54c:	f0 92 e5 09 	sts	0x09E5, r15	; 0x8009e5 <menu_dialog_variable+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    a550:	80 e0       	ldi	r24, 0x00	; 0
    a552:	90 e0       	ldi	r25, 0x00	; 0
    a554:	ae e7       	ldi	r26, 0x7E	; 126
    a556:	b3 e4       	ldi	r27, 0x43	; 67
    a558:	80 93 de 09 	sts	0x09DE, r24	; 0x8009de <menu_dialog_variable+0x43>
    a55c:	90 93 df 09 	sts	0x09DF, r25	; 0x8009df <menu_dialog_variable+0x44>
    a560:	a0 93 e0 09 	sts	0x09E0, r26	; 0x8009e0 <menu_dialog_variable+0x45>
    a564:	b0 93 e1 09 	sts	0x09E1, r27	; 0x8009e1 <menu_dialog_variable+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    a568:	80 e0       	ldi	r24, 0x00	; 0
    a56a:	90 e0       	ldi	r25, 0x00	; 0
    a56c:	a0 e0       	ldi	r26, 0x00	; 0
    a56e:	b0 e4       	ldi	r27, 0x40	; 64
    a570:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <menu_dialog_variable+0x4d>
    a574:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <menu_dialog_variable+0x4e>
    a578:	a0 93 ea 09 	sts	0x09EA, r26	; 0x8009ea <menu_dialog_variable+0x4f>
    a57c:	b0 93 eb 09 	sts	0x09EB, r27	; 0x8009eb <menu_dialog_variable+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    a580:	c0 93 e7 09 	sts	0x09E7, r28	; 0x8009e7 <menu_dialog_variable+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    a584:	00 93 ec 09 	sts	0x09EC, r16	; 0x8009ec <menu_dialog_variable+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    a588:	c0 93 e6 09 	sts	0x09E6, r28	; 0x8009e6 <menu_dialog_variable+0x4b>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    a58c:	8d e7       	ldi	r24, 0x7D	; 125
    a58e:	9b e6       	ldi	r25, 0x6B	; 107
    a590:	90 93 ee 09 	sts	0x09EE, r25	; 0x8009ee <menu_dialog_variable+0x53>
    a594:	80 93 ed 09 	sts	0x09ED, r24	; 0x8009ed <menu_dialog_variable+0x52>
_Z16preload_pid_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1302
{
  display_function_set_variable(thermostat_get_pid_p(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_P, &helper_thermostat_set_pid_p);
  display_function_set_variable(thermostat_get_pid_i(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_I, &helper_thermostat_set_pid_i);
  display_function_set_variable(thermostat_get_pid_d(args2), -10.0, 10.0, 0.1, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_PID_D, &helper_thermostat_set_pid_d);
  display_function_set_variable(thermostat_get_pid_time(args2),  10, 254, 2, args2, NUMBER_TYPE_INT,  H_TRUE, DIALOG_SET_VARIABLE_PID_T, &helper_thermostat_set_pid_time);
}
    a598:	cf 91       	pop	r28
    a59a:	1f 91       	pop	r17
    a59c:	0f 91       	pop	r16
    a59e:	ff 90       	pop	r15
    a5a0:	ef 90       	pop	r14
    a5a2:	df 90       	pop	r13
    a5a4:	cf 90       	pop	r12
    a5a6:	bf 90       	pop	r11
    a5a8:	af 90       	pop	r10
    a5aa:	9f 90       	pop	r9
    a5ac:	8f 90       	pop	r8
    a5ae:	7f 90       	pop	r7
    a5b0:	6f 90       	pop	r6
    a5b2:	5f 90       	pop	r5
    a5b4:	4f 90       	pop	r4
    a5b6:	08 95       	ret

0000a5b8 <display_enable_show(unsigned int, unsigned int, unsigned char)>:
_Z19display_enable_showjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:605
  return 0;
}
uint8_t display_enable_show(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 1;
}
    a5b8:	81 e0       	ldi	r24, 0x01	; 1
    a5ba:	08 95       	ret

0000a5bc <returnnullfceargs(unsigned int, unsigned int, unsigned char)>:
_Z17returnnullfceargsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:601
void nullfce(uint16_t args1, uint16_t args2, uint8_t args3) {};
void nullfceargs(uint16_t args1, uint16_t args2, uint8_t args3) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 0;
}
    a5bc:	80 e0       	ldi	r24, 0x00	; 0
    a5be:	08 95       	ret

0000a5c0 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    a5c0:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    a5c2:	86 81       	ldd	r24, Z+6	; 0x06
    a5c4:	97 81       	ldd	r25, Z+7	; 0x07
    a5c6:	68 0f       	add	r22, r24
    a5c8:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    a5ca:	24 81       	ldd	r18, Z+4	; 0x04
    a5cc:	35 81       	ldd	r19, Z+5	; 0x05
    a5ce:	26 17       	cp	r18, r22
    a5d0:	37 07       	cpc	r19, r23
    a5d2:	38 f0       	brcs	.+14     	; 0xa5e2 <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    a5d4:	22 81       	ldd	r18, Z+2	; 0x02
    a5d6:	33 81       	ldd	r19, Z+3	; 0x03
    a5d8:	82 0f       	add	r24, r18
    a5da:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    a5dc:	77 83       	std	Z+7, r23	; 0x07
    a5de:	66 83       	std	Z+6, r22	; 0x06
    a5e0:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    a5e2:	90 e0       	ldi	r25, 0x00	; 0
    a5e4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    a5e6:	08 95       	ret

0000a5e8 <remote_tds_get_data(unsigned char) [clone .part.31]>:
_Z19remote_tds_get_datah.part.31():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    a5e8:	0f 93       	push	r16
    a5ea:	1f 93       	push	r17
    a5ec:	cf 93       	push	r28
    a5ee:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1939
{
  int value = 0;
  if (idx < MAX_RTDS)
  {
    value = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    a5f0:	94 e0       	ldi	r25, 0x04	; 4
    a5f2:	89 9f       	mul	r24, r25
    a5f4:	e0 01       	movw	r28, r0
    a5f6:	11 24       	eor	r1, r1
    a5f8:	be 01       	movw	r22, r28
    a5fa:	6b 59       	subi	r22, 0x9B	; 155
    a5fc:	7f 4f       	sbci	r23, 0xFF	; 255
    a5fe:	07 2e       	mov	r0, r23
    a600:	00 0c       	add	r0, r0
    a602:	88 0b       	sbc	r24, r24
    a604:	99 0b       	sbc	r25, r25
    a606:	0e 94 76 b7 	call	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
    a60a:	08 2f       	mov	r16, r24
    a60c:	10 e0       	ldi	r17, 0x00	; 0
    a60e:	10 2f       	mov	r17, r16
    a610:	00 27       	eor	r16, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
    value = value + SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    a612:	be 01       	movw	r22, r28
    a614:	6c 59       	subi	r22, 0x9C	; 156
    a616:	7f 4f       	sbci	r23, 0xFF	; 255
    a618:	07 2e       	mov	r0, r23
    a61a:	00 0c       	add	r0, r0
    a61c:	88 0b       	sbc	r24, r24
    a61e:	99 0b       	sbc	r25, r25
    a620:	0e 94 76 b7 	call	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
  }
  return value;
}
    a624:	80 0f       	add	r24, r16
    a626:	91 2f       	mov	r25, r17
    a628:	91 1d       	adc	r25, r1
    a62a:	df 91       	pop	r29
    a62c:	cf 91       	pop	r28
    a62e:	1f 91       	pop	r17
    a630:	0f 91       	pop	r16
    a632:	08 95       	ret

0000a634 <remote_tds_get_last_update(unsigned char)>:
_Z26remote_tds_get_last_updateh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    a634:	8a 30       	cpi	r24, 0x0A	; 10
    a636:	60 f4       	brcc	.+24     	; 0xa650 <remote_tds_get_last_update(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1949
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    a638:	94 e0       	ldi	r25, 0x04	; 4
    a63a:	89 9f       	mul	r24, r25
    a63c:	b0 01       	movw	r22, r0
    a63e:	11 24       	eor	r1, r1
    a640:	6a 59       	subi	r22, 0x9A	; 154
    a642:	7f 4f       	sbci	r23, 0xFF	; 255
    a644:	07 2e       	mov	r0, r23
    a646:	00 0c       	add	r0, r0
    a648:	88 0b       	sbc	r24, r24
    a64a:	99 0b       	sbc	r25, r25
    a64c:	0c 94 76 b7 	jmp	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1952
  }
  return last;
}
    a650:	8f ef       	ldi	r24, 0xFF	; 255
    a652:	08 95       	ret

0000a654 <remote_tds_get_type(unsigned char)>:
_Z19remote_tds_get_typeh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
  }
}
uint8_t remote_tds_get_type(uint8_t idx)
{
  uint8_t type = 255;
  if (idx < MAX_RTDS)
    a654:	8a 30       	cpi	r24, 0x0A	; 10
    a656:	60 f4       	brcc	.+24     	; 0xa670 <remote_tds_get_type(unsigned char)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1920
  {
    type = SRAM.readByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx));
    a658:	94 e0       	ldi	r25, 0x04	; 4
    a65a:	89 9f       	mul	r24, r25
    a65c:	b0 01       	movw	r22, r0
    a65e:	11 24       	eor	r1, r1
    a660:	69 59       	subi	r22, 0x99	; 153
    a662:	7f 4f       	sbci	r23, 0xFF	; 255
    a664:	07 2e       	mov	r0, r23
    a666:	00 0c       	add	r0, r0
    a668:	88 0b       	sbc	r24, r24
    a66a:	99 0b       	sbc	r25, r25
    a66c:	0c 94 76 b7 	jmp	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
  }
  return type;
}
    a670:	8f ef       	ldi	r24, 0xFF	; 255
    a672:	08 95       	ret

0000a674 <remote_tds_set_data(unsigned char, int)>:
_Z19remote_tds_set_datahi():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926

void remote_tds_set_data(uint8_t idx, int value)
{
    a674:	1f 93       	push	r17
    a676:	cf 93       	push	r28
    a678:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1927
  if (idx < MAX_RTDS)
    a67a:	8a 30       	cpi	r24, 0x0A	; 10
    a67c:	39 f1       	breq	.+78     	; 0xa6cc <remote_tds_set_data(unsigned char, int)+0x58>
    a67e:	17 2f       	mov	r17, r23
    a680:	46 2f       	mov	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    a682:	90 e0       	ldi	r25, 0x00	; 0
    a684:	49 96       	adiw	r24, 0x19	; 25
    a686:	ec 01       	movw	r28, r24
    a688:	cc 0f       	add	r28, r28
    a68a:	dd 1f       	adc	r29, r29
    a68c:	cc 0f       	add	r28, r28
    a68e:	dd 1f       	adc	r29, r29
    a690:	be 01       	movw	r22, r28
    a692:	0d 2e       	mov	r0, r29
    a694:	00 0c       	add	r0, r0
    a696:	88 0b       	sbc	r24, r24
    a698:	99 0b       	sbc	r25, r25
    a69a:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1930
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    a69e:	be 01       	movw	r22, r28
    a6a0:	6f 5f       	subi	r22, 0xFF	; 255
    a6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    a6a4:	07 2e       	mov	r0, r23
    a6a6:	00 0c       	add	r0, r0
    a6a8:	88 0b       	sbc	r24, r24
    a6aa:	99 0b       	sbc	r25, r25
    a6ac:	41 2f       	mov	r20, r17
    a6ae:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    a6b2:	be 01       	movw	r22, r28
    a6b4:	6e 5f       	subi	r22, 0xFE	; 254
    a6b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6b8:	07 2e       	mov	r0, r23
    a6ba:	00 0c       	add	r0, r0
    a6bc:	88 0b       	sbc	r24, r24
    a6be:	99 0b       	sbc	r25, r25
    a6c0:	40 e0       	ldi	r20, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
  }
}
    a6c2:	df 91       	pop	r29
    a6c4:	cf 91       	pop	r28
    a6c6:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1931
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (value & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((value >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    a6c8:	0c 94 3a b7 	jmp	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1933
  }
}
    a6cc:	df 91       	pop	r29
    a6ce:	cf 91       	pop	r28
    a6d0:	1f 91       	pop	r17
    a6d2:	08 95       	ret

0000a6d4 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z41button_select_term_mode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5384
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_select_term_mode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a6d4:	0f 93       	push	r16
    a6d6:	1f 93       	push	r17
    a6d8:	48 2f       	mov	r20, r24
    a6da:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5385
  if (args1 == 0)
    a6dc:	41 11       	cpse	r20, r1
    a6de:	0b c0       	rjmp	.+22     	; 0xa6f6 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5387
  {
    strcpy_P(line1, text_button_term_off);
    a6e0:	62 ec       	ldi	r22, 0xC2	; 194
    a6e2:	74 e8       	ldi	r23, 0x84	; 132
    a6e4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5388
    strcpy_P(line2, text_button_term_off_comment);
    a6e8:	6c ea       	ldi	r22, 0xAC	; 172
    a6ea:	74 e8       	ldi	r23, 0x84	; 132
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    a6ec:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5410
  }
}
    a6ee:	1f 91       	pop	r17
    a6f0:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    a6f2:	0c 94 9a ee 	jmp	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5390
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    a6f6:	41 30       	cpi	r20, 0x01	; 1
    a6f8:	39 f4       	brne	.+14     	; 0xa708 <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5392
  {
    strcpy_P(line1, text_button_term_max);
    a6fa:	68 ea       	ldi	r22, 0xA8	; 168
    a6fc:	74 e8       	ldi	r23, 0x84	; 132
    a6fe:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5393
    strcpy_P(line2, text_button_term_max_comment);
    a702:	62 e9       	ldi	r22, 0x92	; 146
    a704:	74 e8       	ldi	r23, 0x84	; 132
    a706:	f2 cf       	rjmp	.-28     	; 0xa6ec <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5395
  }
  if (args1 == 2)
    a708:	42 30       	cpi	r20, 0x02	; 2
    a70a:	39 f4       	brne	.+14     	; 0xa71a <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5397
  {
    strcpy_P(line1, text_button_term_min);
    a70c:	6e e8       	ldi	r22, 0x8E	; 142
    a70e:	74 e8       	ldi	r23, 0x84	; 132
    a710:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5398
    strcpy_P(line2, text_button_term_min_comment);
    a714:	67 e7       	ldi	r22, 0x77	; 119
    a716:	74 e8       	ldi	r23, 0x84	; 132
    a718:	e9 cf       	rjmp	.-46     	; 0xa6ec <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5400
  }
  if (args1 == 3)
    a71a:	43 30       	cpi	r20, 0x03	; 3
    a71c:	39 f4       	brne	.+14     	; 0xa72c <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5402
  {
    strcpy_P(line1, text_button_term_prog);
    a71e:	62 e7       	ldi	r22, 0x72	; 114
    a720:	74 e8       	ldi	r23, 0x84	; 132
    a722:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5403
    strcpy_P(line2, text_button_term_prog_comment);
    a726:	6e e5       	ldi	r22, 0x5E	; 94
    a728:	74 e8       	ldi	r23, 0x84	; 132
    a72a:	e0 cf       	rjmp	.-64     	; 0xa6ec <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5405
  }
  if (args1 == 4)
    a72c:	44 30       	cpi	r20, 0x04	; 4
    a72e:	39 f4       	brne	.+14     	; 0xa73e <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  {
    strcpy_P(line1, text_button_term_man);
    a730:	6a e5       	ldi	r22, 0x5A	; 90
    a732:	74 e8       	ldi	r23, 0x84	; 132
    a734:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5408
    strcpy_P(line2, text_button_term_man_comment);
    a738:	6b e4       	ldi	r22, 0x4B	; 75
    a73a:	74 e8       	ldi	r23, 0x84	; 132
    a73c:	d7 cf       	rjmp	.-82     	; 0xa6ec <button_select_term_mode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5410
  }
}
    a73e:	1f 91       	pop	r17
    a740:	0f 91       	pop	r16
    a742:	08 95       	ret

0000a744 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5559
  return ret;
}
////////
/// Funkce, ktera vraci popisky pro dynamicke tlacitko
void switch_brightness_automode_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a744:	0f 93       	push	r16
    a746:	1f 93       	push	r17
    a748:	cf 93       	push	r28
    a74a:	df 93       	push	r29
    a74c:	00 d0       	rcall	.+0      	; 0xa74e <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    a74e:	00 d0       	rcall	.+0      	; 0xa750 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    a750:	1f 92       	push	r1
    a752:	1f 92       	push	r1
    a754:	cd b7       	in	r28, 0x3d	; 61
    a756:	de b7       	in	r29, 0x3e	; 62
    a758:	89 01       	movw	r16, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5561
  char str2[8];
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    a75a:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a75e:	87 ff       	sbrs	r24, 7
    a760:	1a c0       	rjmp	.+52     	; 0xa796 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5563
  {
    strcpy_P(line1, new_text_jas_display_automat);
    a762:	6f ee       	ldi	r22, 0xEF	; 239
    a764:	74 e8       	ldi	r23, 0x84	; 132
    a766:	c9 01       	movw	r24, r18
    a768:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5564
    itoa(brigthness_display_auto_values / 2, str2, 10);
    a76c:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
    a770:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    a772:	4a e0       	ldi	r20, 0x0A	; 10
    a774:	be 01       	movw	r22, r28
    a776:	6f 5f       	subi	r22, 0xFF	; 255
    a778:	7f 4f       	sbci	r23, 0xFF	; 255
    a77a:	90 e0       	ldi	r25, 0x00	; 0
    a77c:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z44switch_brightness_automode_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5565
    strcat(line1, str2);
    a780:	be 01       	movw	r22, r28
    a782:	6f 5f       	subi	r22, 0xFF	; 255
    a784:	7f 4f       	sbci	r23, 0xFF	; 255
    a786:	c8 01       	movw	r24, r16
    a788:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5566
    strcat(line1, "%");
    a78c:	63 e0       	ldi	r22, 0x03	; 3
    a78e:	73 e0       	ldi	r23, 0x03	; 3
    a790:	c8 01       	movw	r24, r16
    a792:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5568
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    a796:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a79a:	87 fd       	sbrc	r24, 7
    a79c:	05 c0       	rjmp	.+10     	; 0xa7a8 <switch_brightness_automode_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5570
  {
    strcpy_P(line1, new_text_jas_display_manual);
    a79e:	6e ed       	ldi	r22, 0xDE	; 222
    a7a0:	74 e8       	ldi	r23, 0x84	; 132
    a7a2:	c8 01       	movw	r24, r16
    a7a4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5572
  }
}
    a7a8:	28 96       	adiw	r28, 0x08	; 8
    a7aa:	0f b6       	in	r0, 0x3f	; 63
    a7ac:	f8 94       	cli
    a7ae:	de bf       	out	0x3e, r29	; 62
    a7b0:	0f be       	out	0x3f, r0	; 63
    a7b2:	cd bf       	out	0x3d, r28	; 61
    a7b4:	df 91       	pop	r29
    a7b6:	cf 91       	pop	r28
    a7b8:	1f 91       	pop	r17
    a7ba:	0f 91       	pop	r16
    a7bc:	08 95       	ret

0000a7be <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5524
   Display funkce

*/
/// Funkce ktera vrati popisek pro tlacitko
void button_change_brightness_display_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a7be:	0f 93       	push	r16
    a7c0:	1f 93       	push	r17
    a7c2:	cf 93       	push	r28
    a7c4:	df 93       	push	r29
    a7c6:	00 d0       	rcall	.+0      	; 0xa7c8 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa>
    a7c8:	00 d0       	rcall	.+0      	; 0xa7ca <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xc>
    a7ca:	1f 92       	push	r1
    a7cc:	1f 92       	push	r1
    a7ce:	cd b7       	in	r28, 0x3d	; 61
    a7d0:	de b7       	in	r29, 0x3e	; 62
    a7d2:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5526
  char str2[8];
  strcpy_P(line1, new_text_jas_display);
    a7d4:	66 ec       	ldi	r22, 0xC6	; 198
    a7d6:	74 e8       	ldi	r23, 0x84	; 132
    a7d8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5527
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    a7dc:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a7e0:	87 ff       	sbrs	r24, 7
    a7e2:	1a c0       	rjmp	.+52     	; 0xa818 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5529
  {
    strcpy_P(line2, new_text_jas_display_automat);
    a7e4:	6f ee       	ldi	r22, 0xEF	; 239
    a7e6:	74 e8       	ldi	r23, 0x84	; 132
    a7e8:	c8 01       	movw	r24, r16
    a7ea:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5530
    itoa(brigthness_display_auto_values / 2, str2, 10);
    a7ee:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
    a7f2:	86 95       	lsr	r24
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a7f4:	4a e0       	ldi	r20, 0x0A	; 10
    a7f6:	be 01       	movw	r22, r28
    a7f8:	6f 5f       	subi	r22, 0xFF	; 255
    a7fa:	7f 4f       	sbci	r23, 0xFF	; 255
    a7fc:	90 e0       	ldi	r25, 0x00	; 0
    a7fe:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5531
    strcat(line2, str2);
    a802:	be 01       	movw	r22, r28
    a804:	6f 5f       	subi	r22, 0xFF	; 255
    a806:	7f 4f       	sbci	r23, 0xFF	; 255
    a808:	c8 01       	movw	r24, r16
    a80a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
    strcat(line2, "%");
    a80e:	63 e0       	ldi	r22, 0x03	; 3
    a810:	73 e0       	ldi	r23, 0x03	; 3
    a812:	c8 01       	movw	r24, r16
    a814:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5534
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
    a818:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a81c:	87 fd       	sbrc	r24, 7
    a81e:	23 c0       	rjmp	.+70     	; 0xa866 <button_change_brightness_display_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0xa8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5536
  {
    strcpy_P(line2, new_text_jas_display_manual);
    a820:	6e ed       	ldi	r22, 0xDE	; 222
    a822:	74 e8       	ldi	r23, 0x84	; 132
    a824:	c8 01       	movw	r24, r16
    a826:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5537
    itoa(brigthness_display_values, str2, 10);
    a82a:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    a82e:	4a e0       	ldi	r20, 0x0A	; 10
    a830:	be 01       	movw	r22, r28
    a832:	6f 5f       	subi	r22, 0xFF	; 255
    a834:	7f 4f       	sbci	r23, 0xFF	; 255
    a836:	90 e0       	ldi	r25, 0x00	; 0
    a838:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z50button_change_brightness_display_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5538
    strcat(line2, str2);
    a83c:	be 01       	movw	r22, r28
    a83e:	6f 5f       	subi	r22, 0xFF	; 255
    a840:	7f 4f       	sbci	r23, 0xFF	; 255
    a842:	c8 01       	movw	r24, r16
    a844:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5539
    strcat(line2, "%");
    a848:	63 e0       	ldi	r22, 0x03	; 3
    a84a:	73 e0       	ldi	r23, 0x03	; 3
    a84c:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5541
  }
}
    a84e:	28 96       	adiw	r28, 0x08	; 8
    a850:	0f b6       	in	r0, 0x3f	; 63
    a852:	f8 94       	cli
    a854:	de bf       	out	0x3e, r29	; 62
    a856:	0f be       	out	0x3f, r0	; 63
    a858:	cd bf       	out	0x3d, r28	; 61
    a85a:	df 91       	pop	r29
    a85c:	cf 91       	pop	r28
    a85e:	1f 91       	pop	r17
    a860:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5539
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    strcpy_P(line2, new_text_jas_display_manual);
    itoa(brigthness_display_values, str2, 10);
    strcat(line2, str2);
    strcat(line2, "%");
    a862:	0c 94 28 fb 	jmp	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5541
  }
}
    a866:	28 96       	adiw	r28, 0x08	; 8
    a868:	0f b6       	in	r0, 0x3f	; 63
    a86a:	f8 94       	cli
    a86c:	de bf       	out	0x3e, r29	; 62
    a86e:	0f be       	out	0x3f, r0	; 63
    a870:	cd bf       	out	0x3d, r28	; 61
    a872:	df 91       	pop	r29
    a874:	cf 91       	pop	r28
    a876:	1f 91       	pop	r17
    a878:	0f 91       	pop	r16
    a87a:	08 95       	ret

0000a87c <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z65button_set_brightness_auto_shutdown_select_time_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5646
    ret = 1;
  return ret;
}

void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a87c:	0f 93       	push	r16
    a87e:	1f 93       	push	r17
    a880:	48 2f       	mov	r20, r24
    a882:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5647
  line2[0] = 0;
    a884:	f8 01       	movw	r30, r16
    a886:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5648
  if (args1 == 0)
    a888:	41 11       	cpse	r20, r1
    a88a:	07 c0       	rjmp	.+14     	; 0xa89a <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5649
    strcpy_P(line1, new_text_vypnuto);
    a88c:	6f e1       	ldi	r22, 0x1F	; 31
    a88e:	75 e8       	ldi	r23, 0x85	; 133
    a890:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
}
    a894:	1f 91       	pop	r17
    a896:	0f 91       	pop	r16
    a898:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5650
void button_set_brightness_auto_shutdown_select_time_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    a89a:	41 30       	cpi	r20, 0x01	; 1
    a89c:	29 f4       	brne	.+10     	; 0xa8a8 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5651
    strcpy(line1, "30 sec");
    a89e:	65 e0       	ldi	r22, 0x05	; 5
    a8a0:	73 e0       	ldi	r23, 0x03	; 3
    a8a2:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
    a8a6:	f6 cf       	rjmp	.-20     	; 0xa894 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5653
  if (args1 == 2)
    strcpy(line1, "1 min");
    a8a8:	6c e0       	ldi	r22, 0x0C	; 12
    a8aa:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5652
  line2[0] = 0;
  if (args1 == 0)
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    a8ac:	42 30       	cpi	r20, 0x02	; 2
    a8ae:	61 f0       	breq	.+24     	; 0xa8c8 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5655
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
    a8b0:	62 e1       	ldi	r22, 0x12	; 18
    a8b2:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5654
    strcpy_P(line1, new_text_vypnuto);
  if (args1 == 1)
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    a8b4:	43 30       	cpi	r20, 0x03	; 3
    a8b6:	41 f0       	breq	.+16     	; 0xa8c8 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5657
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
    a8b8:	68 e1       	ldi	r22, 0x18	; 24
    a8ba:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5656
    strcpy(line1, "30 sec");
  if (args1 == 2)
    strcpy(line1, "1 min");
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    a8bc:	44 30       	cpi	r20, 0x04	; 4
    a8be:	21 f0       	breq	.+8      	; 0xa8c8 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5658
    strcpy(line1, "3 min");
  if (args1 == 5)
    a8c0:	45 30       	cpi	r20, 0x05	; 5
    a8c2:	41 f7       	brne	.-48     	; 0xa894 <button_set_brightness_auto_shutdown_select_time_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x18>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
    strcpy(line1, "4 min");
    a8c4:	6e e1       	ldi	r22, 0x1E	; 30
    a8c6:	73 e0       	ldi	r23, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5660
}
    a8c8:	1f 91       	pop	r17
    a8ca:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5659
  if (args1 == 3)
    strcpy(line1, "2 min");
  if (args1 == 4)
    strcpy(line1, "3 min");
  if (args1 == 5)
    strcpy(line1, "4 min");
    a8cc:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <strcpy>

0000a8d0 <display_element_get_string(char*)>:
_Z26display_element_get_stringPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1380
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    a8d0:	65 ef       	ldi	r22, 0xF5	; 245
    a8d2:	79 e0       	ldi	r23, 0x09	; 9
    a8d4:	0c 94 47 fb 	jmp	0x1f68e	; 0x1f68e <strcpy>

0000a8d8 <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z53button_set_brightness_auto_shutdown_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5624
   Funkce pro automaticke vypinani displaye pri neaktivite


*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    a8d8:	0f 93       	push	r16
    a8da:	1f 93       	push	r17
    a8dc:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5625
  strcpy_P(line1, new_text_auto_display_shutdown);
    a8de:	62 e0       	ldi	r22, 0x02	; 2
    a8e0:	75 e8       	ldi	r23, 0x85	; 133
    a8e2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5626
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    a8e6:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    a8ea:	86 fd       	sbrc	r24, 6
    a8ec:	07 c0       	rjmp	.+14     	; 0xa8fc <button_set_brightness_auto_shutdown_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
    strcpy_P(line2, new_text_vypnuto);
    a8ee:	6f e1       	ldi	r22, 0x1F	; 31
    a8f0:	75 e8       	ldi	r23, 0x85	; 133
    a8f2:	c8 01       	movw	r24, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5630
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}
    a8f4:	1f 91       	pop	r17
    a8f6:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
*/
void button_set_brightness_auto_shutdown_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  strcpy_P(line1, new_text_auto_display_shutdown);
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) == 0)
    strcpy_P(line2, new_text_vypnuto);
    a8f8:	0c 94 9a ee 	jmp	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5629
  else
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
    a8fc:	80 91 97 0c 	lds	r24, 0x0C97	; 0x800c97 <display_auto_shutdown>
    a900:	1f 92       	push	r1
    a902:	8f 93       	push	r24
    a904:	84 e2       	ldi	r24, 0x24	; 36
    a906:	93 e0       	ldi	r25, 0x03	; 3
    a908:	9f 93       	push	r25
    a90a:	8f 93       	push	r24
    a90c:	1f 93       	push	r17
    a90e:	0f 93       	push	r16
    a910:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
    a914:	0f 90       	pop	r0
    a916:	0f 90       	pop	r0
    a918:	0f 90       	pop	r0
    a91a:	0f 90       	pop	r0
    a91c:	0f 90       	pop	r0
    a91e:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5630
}
    a920:	1f 91       	pop	r17
    a922:	0f 91       	pop	r16
    a924:	08 95       	ret

0000a926 <ip2CharArray(IPAddress, char*)>:
_Z12ip2CharArray9IPAddressPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
/// ip2CharArray - jednoducha funkce prevodu objectu IPAddress na char pole
/*
   ip - object typu IP address
 * *buf - ukazatel na pole s vysledkem
*/
void ip2CharArray(IPAddress ip, char* buf) {
    a926:	fc 01       	movw	r30, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1757
  sprintf(buf, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
    a928:	85 81       	ldd	r24, Z+5	; 0x05
    a92a:	1f 92       	push	r1
    a92c:	8f 93       	push	r24
    a92e:	84 81       	ldd	r24, Z+4	; 0x04
    a930:	1f 92       	push	r1
    a932:	8f 93       	push	r24
    a934:	83 81       	ldd	r24, Z+3	; 0x03
    a936:	1f 92       	push	r1
    a938:	8f 93       	push	r24
    a93a:	82 81       	ldd	r24, Z+2	; 0x02
    a93c:	1f 92       	push	r1
    a93e:	8f 93       	push	r24
    a940:	85 e3       	ldi	r24, 0x35	; 53
    a942:	93 e0       	ldi	r25, 0x03	; 3
    a944:	9f 93       	push	r25
    a946:	8f 93       	push	r24
    a948:	7f 93       	push	r23
    a94a:	6f 93       	push	r22
    a94c:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
    a950:	8d b7       	in	r24, 0x3d	; 61
    a952:	9e b7       	in	r25, 0x3e	; 62
    a954:	0c 96       	adiw	r24, 0x0c	; 12
    a956:	0f b6       	in	r0, 0x3f	; 63
    a958:	f8 94       	cli
    a95a:	9e bf       	out	0x3e, r25	; 62
    a95c:	0f be       	out	0x3f, r0	; 63
    a95e:	8d bf       	out	0x3d, r24	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1758
}
    a960:	08 95       	ret

0000a962 <mqtt_send_pid_variable(unsigned char)>:
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
   /thermctl-out/XXXXX/pid/IDX/kp
   /thermctl-out/XXXXX/pid/IDX/ki
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
    a962:	af 92       	push	r10
    a964:	bf 92       	push	r11
    a966:	cf 92       	push	r12
    a968:	df 92       	push	r13
    a96a:	ff 92       	push	r15
    a96c:	0f 93       	push	r16
    a96e:	1f 93       	push	r17
    a970:	cf 93       	push	r28
    a972:	df 93       	push	r29
    a974:	cd b7       	in	r28, 0x3d	; 61
    a976:	de b7       	in	r29, 0x3e	; 62
    a978:	a0 97       	sbiw	r28, 0x20	; 32
    a97a:	0f b6       	in	r0, 0x3f	; 63
    a97c:	f8 94       	cli
    a97e:	de bf       	out	0x3e, r29	; 62
    a980:	0f be       	out	0x3f, r0	; 63
    a982:	cd bf       	out	0x3d, r28	; 61
    a984:	f8 2e       	mov	r15, r24
thermostat_get_pid_p():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    a986:	a8 2e       	mov	r10, r24
    a988:	b1 2c       	mov	r11, r1
    a98a:	65 01       	movw	r12, r10
    a98c:	cc 0c       	add	r12, r12
    a98e:	dd 1c       	adc	r13, r13
    a990:	cc 0c       	add	r12, r12
    a992:	dd 1c       	adc	r13, r13
    a994:	f6 01       	movw	r30, r12
    a996:	e8 54       	subi	r30, 0x48	; 72
    a998:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3012
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    a99a:	60 81       	ld	r22, Z
    a99c:	71 81       	ldd	r23, Z+1	; 0x01
    a99e:	82 81       	ldd	r24, Z+2	; 0x02
    a9a0:	93 81       	ldd	r25, Z+3	; 0x03
    a9a2:	8e 01       	movw	r16, r28
    a9a4:	0f 5f       	subi	r16, 0xFF	; 255
    a9a6:	1f 4f       	sbci	r17, 0xFF	; 255
    a9a8:	22 e0       	ldi	r18, 0x02	; 2
    a9aa:	47 e0       	ldi	r20, 0x07	; 7
    a9ac:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3013
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    a9b0:	98 01       	movw	r18, r16
    a9b2:	40 ed       	ldi	r20, 0xD0	; 208
    a9b4:	56 e0       	ldi	r21, 0x06	; 6
    a9b6:	6f 2d       	mov	r22, r15
    a9b8:	81 e4       	ldi	r24, 0x41	; 65
    a9ba:	93 e0       	ldi	r25, 0x03	; 3
    a9bc:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_i():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    a9c0:	f6 01       	movw	r30, r12
    a9c2:	e4 53       	subi	r30, 0x34	; 52
    a9c4:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3014
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    a9c6:	60 81       	ld	r22, Z
    a9c8:	71 81       	ldd	r23, Z+1	; 0x01
    a9ca:	82 81       	ldd	r24, Z+2	; 0x02
    a9cc:	93 81       	ldd	r25, Z+3	; 0x03
    a9ce:	22 e0       	ldi	r18, 0x02	; 2
    a9d0:	47 e0       	ldi	r20, 0x07	; 7
    a9d2:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3015
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    a9d6:	98 01       	movw	r18, r16
    a9d8:	47 ed       	ldi	r20, 0xD7	; 215
    a9da:	56 e0       	ldi	r21, 0x06	; 6
    a9dc:	6f 2d       	mov	r22, r15
    a9de:	81 e4       	ldi	r24, 0x41	; 65
    a9e0:	93 e0       	ldi	r25, 0x03	; 3
    a9e2:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_d():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    a9e6:	f6 01       	movw	r30, r12
    a9e8:	e0 52       	subi	r30, 0x20	; 32
    a9ea:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    a9ec:	60 81       	ld	r22, Z
    a9ee:	71 81       	ldd	r23, Z+1	; 0x01
    a9f0:	82 81       	ldd	r24, Z+2	; 0x02
    a9f2:	93 81       	ldd	r25, Z+3	; 0x03
    a9f4:	22 e0       	ldi	r18, 0x02	; 2
    a9f6:	47 e0       	ldi	r20, 0x07	; 7
    a9f8:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    a9fc:	98 01       	movw	r18, r16
    a9fe:	4e ed       	ldi	r20, 0xDE	; 222
    aa00:	56 e0       	ldi	r21, 0x06	; 6
    aa02:	6f 2d       	mov	r22, r15
    aa04:	81 e4       	ldi	r24, 0x41	; 65
    aa06:	93 e0       	ldi	r25, 0x03	; 3
    aa08:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_get_pid_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    aa0c:	f5 01       	movw	r30, r10
    aa0e:	ec 50       	subi	r30, 0x0C	; 12
    aa10:	f5 4f       	sbci	r31, 0xF5	; 245
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3018
  itoa(thermostat_get_pid_time(idx), payload, 10);
    aa12:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    aa14:	4a e0       	ldi	r20, 0x0A	; 10
    aa16:	b8 01       	movw	r22, r16
    aa18:	90 e0       	ldi	r25, 0x00	; 0
    aa1a:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z22mqtt_send_pid_variableh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3019
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    aa1e:	98 01       	movw	r18, r16
    aa20:	45 ee       	ldi	r20, 0xE5	; 229
    aa22:	56 e0       	ldi	r21, 0x06	; 6
    aa24:	6f 2d       	mov	r22, r15
    aa26:	81 e4       	ldi	r24, 0x41	; 65
    aa28:	93 e0       	ldi	r25, 0x03	; 3
    aa2a:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3020
}
    aa2e:	a0 96       	adiw	r28, 0x20	; 32
    aa30:	0f b6       	in	r0, 0x3f	; 63
    aa32:	f8 94       	cli
    aa34:	de bf       	out	0x3e, r29	; 62
    aa36:	0f be       	out	0x3f, r0	; 63
    aa38:	cd bf       	out	0x3d, r28	; 61
    aa3a:	df 91       	pop	r29
    aa3c:	cf 91       	pop	r28
    aa3e:	1f 91       	pop	r17
    aa40:	0f 91       	pop	r16
    aa42:	ff 90       	pop	r15
    aa44:	df 90       	pop	r13
    aa46:	cf 90       	pop	r12
    aa48:	bf 90       	pop	r11
    aa4a:	af 90       	pop	r10
    aa4c:	08 95       	ret

0000aa4e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    aa4e:	8f 92       	push	r8
    aa50:	9f 92       	push	r9
    aa52:	af 92       	push	r10
    aa54:	bf 92       	push	r11
    aa56:	ef 92       	push	r14
    aa58:	ff 92       	push	r15
    aa5a:	0f 93       	push	r16
    aa5c:	1f 93       	push	r17
    aa5e:	cf 93       	push	r28
    aa60:	df 93       	push	r29
    aa62:	cd b7       	in	r28, 0x3d	; 61
    aa64:	de b7       	in	r29, 0x3e	; 62
    aa66:	a1 97       	sbiw	r28, 0x21	; 33
    aa68:	0f b6       	in	r0, 0x3f	; 63
    aa6a:	f8 94       	cli
    aa6c:	de bf       	out	0x3e, r29	; 62
    aa6e:	0f be       	out	0x3f, r0	; 63
    aa70:	cd bf       	out	0x3d, r28	; 61
    aa72:	7c 01       	movw	r14, r24
    aa74:	fa 01       	movw	r30, r20
    aa76:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    aa78:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    aa7a:	22 30       	cpi	r18, 0x02	; 2
    aa7c:	08 f4       	brcc	.+2      	; 0xaa80 <Print::printNumber(unsigned long, unsigned char)+0x32>
    aa7e:	2a e0       	ldi	r18, 0x0A	; 10
    aa80:	8e 01       	movw	r16, r28
    aa82:	0f 5d       	subi	r16, 0xDF	; 223
    aa84:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    aa86:	82 2e       	mov	r8, r18
    aa88:	91 2c       	mov	r9, r1
    aa8a:	b1 2c       	mov	r11, r1
    aa8c:	a1 2c       	mov	r10, r1
    aa8e:	bf 01       	movw	r22, r30
    aa90:	a5 01       	movw	r20, r10
    aa92:	94 01       	movw	r18, r8
    aa94:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    aa98:	f9 01       	movw	r30, r18
    aa9a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    aa9c:	6a 30       	cpi	r22, 0x0A	; 10
    aa9e:	74 f5       	brge	.+92     	; 0xaafc <Print::printNumber(unsigned long, unsigned char)+0xae>
    aaa0:	60 5d       	subi	r22, 0xD0	; 208
    aaa2:	d8 01       	movw	r26, r16
    aaa4:	6e 93       	st	-X, r22
    aaa6:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    aaa8:	23 2b       	or	r18, r19
    aaaa:	24 2b       	or	r18, r20
    aaac:	25 2b       	or	r18, r21
    aaae:	79 f7       	brne	.-34     	; 0xaa8e <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    aab0:	90 e0       	ldi	r25, 0x00	; 0
    aab2:	80 e0       	ldi	r24, 0x00	; 0
write():
    aab4:	10 97       	sbiw	r26, 0x00	; 0
    aab6:	89 f0       	breq	.+34     	; 0xaada <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    aab8:	fd 01       	movw	r30, r26
    aaba:	01 90       	ld	r0, Z+
    aabc:	00 20       	and	r0, r0
    aabe:	e9 f7       	brne	.-6      	; 0xaaba <Print::printNumber(unsigned long, unsigned char)+0x6c>
    aac0:	31 97       	sbiw	r30, 0x01	; 1
    aac2:	af 01       	movw	r20, r30
    aac4:	4a 1b       	sub	r20, r26
    aac6:	5b 0b       	sbc	r21, r27
    aac8:	d7 01       	movw	r26, r14
    aaca:	ed 91       	ld	r30, X+
    aacc:	fc 91       	ld	r31, X
    aace:	02 80       	ldd	r0, Z+2	; 0x02
    aad0:	f3 81       	ldd	r31, Z+3	; 0x03
    aad2:	e0 2d       	mov	r30, r0
    aad4:	b8 01       	movw	r22, r16
    aad6:	c7 01       	movw	r24, r14
    aad8:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    aada:	a1 96       	adiw	r28, 0x21	; 33
    aadc:	0f b6       	in	r0, 0x3f	; 63
    aade:	f8 94       	cli
    aae0:	de bf       	out	0x3e, r29	; 62
    aae2:	0f be       	out	0x3f, r0	; 63
    aae4:	cd bf       	out	0x3d, r28	; 61
    aae6:	df 91       	pop	r29
    aae8:	cf 91       	pop	r28
    aaea:	1f 91       	pop	r17
    aaec:	0f 91       	pop	r16
    aaee:	ff 90       	pop	r15
    aaf0:	ef 90       	pop	r14
    aaf2:	bf 90       	pop	r11
    aaf4:	af 90       	pop	r10
    aaf6:	9f 90       	pop	r9
    aaf8:	8f 90       	pop	r8
    aafa:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    aafc:	69 5c       	subi	r22, 0xC9	; 201
    aafe:	d1 cf       	rjmp	.-94     	; 0xaaa2 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000ab00 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    ab00:	8f 92       	push	r8
    ab02:	9f 92       	push	r9
    ab04:	af 92       	push	r10
    ab06:	bf 92       	push	r11
    ab08:	cf 92       	push	r12
    ab0a:	df 92       	push	r13
    ab0c:	ef 92       	push	r14
    ab0e:	ff 92       	push	r15
    ab10:	0f 93       	push	r16
    ab12:	1f 93       	push	r17
    ab14:	cf 93       	push	r28
    ab16:	df 93       	push	r29
    ab18:	7c 01       	movw	r14, r24
    ab1a:	eb 01       	movw	r28, r22
    ab1c:	6c 01       	movw	r12, r24
    ab1e:	82 e0       	ldi	r24, 0x02	; 2
    ab20:	c8 0e       	add	r12, r24
    ab22:	d1 1c       	adc	r13, r1
    ab24:	47 01       	movw	r8, r14
    ab26:	e5 e0       	ldi	r30, 0x05	; 5
    ab28:	8e 0e       	add	r8, r30
    ab2a:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
    ab2c:	10 e0       	ldi	r17, 0x00	; 0
    ab2e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    ab30:	f6 01       	movw	r30, r12
    ab32:	41 91       	ld	r20, Z+
    ab34:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    ab36:	50 e0       	ldi	r21, 0x00	; 0
    ab38:	70 e0       	ldi	r23, 0x00	; 0
    ab3a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    ab3c:	2a e0       	ldi	r18, 0x0A	; 10
    ab3e:	ce 01       	movw	r24, r28
    ab40:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <Print::printNumber(unsigned long, unsigned char)>
    ab44:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    ab46:	e8 81       	ld	r30, Y
    ab48:	f9 81       	ldd	r31, Y+1	; 0x01
    ab4a:	01 90       	ld	r0, Z+
    ab4c:	f0 81       	ld	r31, Z
    ab4e:	e0 2d       	mov	r30, r0
    ab50:	6e e2       	ldi	r22, 0x2E	; 46
    ab52:	ce 01       	movw	r24, r28
    ab54:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
    ab56:	8a 0d       	add	r24, r10
    ab58:	9b 1d       	adc	r25, r11
    ab5a:	08 0f       	add	r16, r24
    ab5c:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    ab5e:	c8 14       	cp	r12, r8
    ab60:	d9 04       	cpc	r13, r9
    ab62:	31 f7       	brne	.-52     	; 0xab30 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    ab64:	f7 01       	movw	r30, r14
    ab66:	45 81       	ldd	r20, Z+5	; 0x05
    ab68:	50 e0       	ldi	r21, 0x00	; 0
    ab6a:	70 e0       	ldi	r23, 0x00	; 0
    ab6c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    ab6e:	2a e0       	ldi	r18, 0x0A	; 10
    ab70:	ce 01       	movw	r24, r28
    ab72:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
    ab76:	80 0f       	add	r24, r16
    ab78:	91 1f       	adc	r25, r17
    ab7a:	df 91       	pop	r29
    ab7c:	cf 91       	pop	r28
    ab7e:	1f 91       	pop	r17
    ab80:	0f 91       	pop	r16
    ab82:	ff 90       	pop	r15
    ab84:	ef 90       	pop	r14
    ab86:	df 90       	pop	r13
    ab88:	cf 90       	pop	r12
    ab8a:	bf 90       	pop	r11
    ab8c:	af 90       	pop	r10
    ab8e:	9f 90       	pop	r9
    ab90:	8f 90       	pop	r8
    ab92:	08 95       	ret

0000ab94 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)>:
_Z35display_element_set_string_del_charjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1395
  }
}

void display_element_set_string_del_char(uint16_t args1, uint16_t idx, uint8_t args3)
{
  uint8_t len = strlen(dialog_set_string);
    ab94:	85 ef       	ldi	r24, 0xF5	; 245
    ab96:	99 e0       	ldi	r25, 0x09	; 9
    ab98:	fc 01       	movw	r30, r24
    ab9a:	01 90       	ld	r0, Z+
    ab9c:	00 20       	and	r0, r0
    ab9e:	e9 f7       	brne	.-6      	; 0xab9a <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x6>
    aba0:	cf 01       	movw	r24, r30
    aba2:	86 5f       	subi	r24, 0xF6	; 246
    aba4:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1396
  if (len > 0)
    aba6:	88 23       	and	r24, r24
    aba8:	29 f0       	breq	.+10     	; 0xabb4 <display_element_set_string_del_char(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1397
    dialog_set_string[len - 1] = 0;
    abaa:	99 27       	eor	r25, r25
    abac:	fc 01       	movw	r30, r24
    abae:	ec 50       	subi	r30, 0x0C	; 12
    abb0:	f6 4f       	sbci	r31, 0xF6	; 246
    abb2:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1398
}
    abb4:	08 95       	ret

0000abb6 <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1385
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    abb6:	e5 ef       	ldi	r30, 0xF5	; 245
    abb8:	f9 e0       	ldi	r31, 0x09	; 9
    abba:	01 90       	ld	r0, Z+
    abbc:	00 20       	and	r0, r0
    abbe:	e9 f7       	brne	.-6      	; 0xabba <display_element_set_string_add_char(char)+0x4>
    abc0:	e6 5f       	subi	r30, 0xF6	; 246
    abc2:	f9 40       	sbci	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1386
  if (len  < dialog_set_string_max_length - 1)
    abc4:	ff 27       	eor	r31, r31
    abc6:	20 91 f4 09 	lds	r18, 0x09F4	; 0x8009f4 <dialog_set_string_max_length>
    abca:	21 50       	subi	r18, 0x01	; 1
    abcc:	33 0b       	sbc	r19, r19
    abce:	e2 17       	cp	r30, r18
    abd0:	f3 07       	cpc	r31, r19
    abd2:	24 f4       	brge	.+8      	; 0xabdc <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1388
  {
    dialog_set_string[len] = znak;
    abd4:	eb 50       	subi	r30, 0x0B	; 11
    abd6:	f6 4f       	sbci	r31, 0xF6	; 246
    abd8:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1389
    dialog_set_string[len + 1] = 0;
    abda:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1391
  }
}
    abdc:	08 95       	ret

0000abde <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)>:
_Z19click_keyboard_alfajjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1539
   args3 ... index prvku
*/
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    abde:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <__data_end>
    abe2:	91 11       	cpse	r25, r1
    abe4:	07 c0       	rjmp	.+14     	; 0xabf4 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1540
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    abe6:	e4 2f       	mov	r30, r20
    abe8:	f0 e0       	ldi	r31, 0x00	; 0
    abea:	e2 5f       	subi	r30, 0xF2	; 242
    abec:	ff 47       	sbci	r31, 0x7F	; 127
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    abee:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1546
  ///
  display_element_set_string_add_char(znak);
    abf0:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1541
void click_keyboard_alfa(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    abf4:	91 30       	cpi	r25, 0x01	; 1
    abf6:	29 f4       	brne	.+10     	; 0xac02 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1542
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    abf8:	e4 2f       	mov	r30, r20
    abfa:	f0 e0       	ldi	r31, 0x00	; 0
    abfc:	ec 50       	subi	r30, 0x0C	; 12
    abfe:	f0 48       	sbci	r31, 0x80	; 128
    ac00:	f6 cf       	rjmp	.-20     	; 0xabee <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1543
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    ac02:	92 30       	cpi	r25, 0x02	; 2
    ac04:	a9 f7       	brne	.-22     	; 0xabf0 <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1544
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    ac06:	e4 2f       	mov	r30, r20
    ac08:	f0 e0       	ldi	r31, 0x00	; 0
    ac0a:	e6 52       	subi	r30, 0x26	; 38
    ac0c:	f0 48       	sbci	r31, 0x80	; 128
    ac0e:	ef cf       	rjmp	.-34     	; 0xabee <click_keyboard_alfa(unsigned int, unsigned int, unsigned char)+0x10>

0000ac10 <click_keyboard_number(unsigned int, unsigned int, unsigned char)>:
_Z21click_keyboard_numberjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1501
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
  if (args3 == 10) znak = '.';
    ac10:	8e e2       	ldi	r24, 0x2E	; 46
    ac12:	4a 30       	cpi	r20, 0x0A	; 10
    ac14:	29 f0       	breq	.+10     	; 0xac20 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1500
   args3 ... index prvku
*/
void click_keyboard_number(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    ac16:	80 e3       	ldi	r24, 0x30	; 48
    ac18:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1502
  if (args3 == 10) znak = '.';
  if (args3 == 11) znak = ':';
    ac1a:	4b 30       	cpi	r20, 0x0B	; 11
    ac1c:	09 f4       	brne	.+2      	; 0xac20 <click_keyboard_number(unsigned int, unsigned int, unsigned char)+0x10>
    ac1e:	8a e3       	ldi	r24, 0x3A	; 58
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1503
  display_element_set_string_add_char(znak);
    ac20:	0c 94 db 55 	jmp	0xabb6	; 0xabb6 <display_element_set_string_add_char(char)>

0000ac24 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    ac24:	0e 94 1a fb 	call	0x1f634	; 0x1f634 <abort>

0000ac28 <IPAddress::IPAddress(unsigned char const*)>:
_ZN9IPAddressC2EPKh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    ac28:	dc 01       	movw	r26, r24
    ac2a:	82 ef       	ldi	r24, 0xF2	; 242
    ac2c:	92 e0       	ldi	r25, 0x02	; 2
    ac2e:	8d 93       	st	X+, r24
    ac30:	9d 93       	st	X+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    ac32:	84 e0       	ldi	r24, 0x04	; 4
    ac34:	fb 01       	movw	r30, r22
    ac36:	01 90       	ld	r0, Z+
    ac38:	0d 92       	st	X+, r0
    ac3a:	8a 95       	dec	r24
    ac3c:	e1 f7       	brne	.-8      	; 0xac36 <IPAddress::IPAddress(unsigned char const*)+0xe>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:44
}
    ac3e:	08 95       	ret

0000ac40 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    ac40:	85 e6       	ldi	r24, 0x65	; 101
    ac42:	9d e0       	ldi	r25, 0x0D	; 13
    ac44:	0e 94 40 b4 	call	0x16880	; 0x16880 <HardwareSerial::available()>
    ac48:	21 e0       	ldi	r18, 0x01	; 1
    ac4a:	89 2b       	or	r24, r25
    ac4c:	09 f4       	brne	.+2      	; 0xac50 <Serial0_available()+0x10>
    ac4e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    ac50:	82 2f       	mov	r24, r18
    ac52:	08 95       	ret

0000ac54 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    ac54:	0f 93       	push	r16
    ac56:	1f 93       	push	r17
    ac58:	cf 93       	push	r28
    ac5a:	df 93       	push	r29
    ac5c:	1f 92       	push	r1
    ac5e:	cd b7       	in	r28, 0x3d	; 61
    ac60:	de b7       	in	r29, 0x3e	; 62
    ac62:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    ac64:	dc 01       	movw	r26, r24
    ac66:	ed 91       	ld	r30, X+
    ac68:	fc 91       	ld	r31, X
    ac6a:	00 84       	ldd	r0, Z+8	; 0x08
    ac6c:	f1 85       	ldd	r31, Z+9	; 0x09
    ac6e:	e0 2d       	mov	r30, r0
    ac70:	19 95       	eicall
    ac72:	89 2b       	or	r24, r25
    ac74:	91 f0       	breq	.+36     	; 0xac9a <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    ac76:	21 e0       	ldi	r18, 0x01	; 1
    ac78:	41 e0       	ldi	r20, 0x01	; 1
    ac7a:	50 e0       	ldi	r21, 0x00	; 0
    ac7c:	be 01       	movw	r22, r28
    ac7e:	6f 5f       	subi	r22, 0xFF	; 255
    ac80:	7f 4f       	sbci	r23, 0xFF	; 255
    ac82:	f8 01       	movw	r30, r16
    ac84:	84 85       	ldd	r24, Z+12	; 0x0c
    ac86:	0e 94 e7 d8 	call	0x1b1ce	; 0x1b1ce <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    ac8a:	89 81       	ldd	r24, Y+1	; 0x01
    ac8c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    ac8e:	0f 90       	pop	r0
    ac90:	df 91       	pop	r29
    ac92:	cf 91       	pop	r28
    ac94:	1f 91       	pop	r17
    ac96:	0f 91       	pop	r16
    ac98:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    ac9a:	8f ef       	ldi	r24, 0xFF	; 255
    ac9c:	9f ef       	ldi	r25, 0xFF	; 255
    ac9e:	f7 cf       	rjmp	.-18     	; 0xac8e <EthernetClient::peek()+0x3a>

0000aca0 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
    aca0:	cf 93       	push	r28
    aca2:	df 93       	push	r29
    aca4:	1f 92       	push	r1
    aca6:	cd b7       	in	r28, 0x3d	; 61
    aca8:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    acaa:	fc 01       	movw	r30, r24
    acac:	21 8d       	ldd	r18, Z+25	; 0x19
    acae:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
    acb0:	8f ef       	ldi	r24, 0xFF	; 255
    acb2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
    acb4:	23 2b       	or	r18, r19
    acb6:	59 f0       	breq	.+22     	; 0xacce <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
    acb8:	21 e0       	ldi	r18, 0x01	; 1
    acba:	41 e0       	ldi	r20, 0x01	; 1
    acbc:	50 e0       	ldi	r21, 0x00	; 0
    acbe:	be 01       	movw	r22, r28
    acc0:	6f 5f       	subi	r22, 0xFF	; 255
    acc2:	7f 4f       	sbci	r23, 0xFF	; 255
    acc4:	84 85       	ldd	r24, Z+12	; 0x0c
    acc6:	0e 94 e7 d8 	call	0x1b1ce	; 0x1b1ce <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
    acca:	89 81       	ldd	r24, Y+1	; 0x01
    accc:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
    acce:	0f 90       	pop	r0
    acd0:	df 91       	pop	r29
    acd2:	cf 91       	pop	r28
    acd4:	08 95       	ret

0000acd6 <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    acd6:	fc 01       	movw	r30, r24
    acd8:	84 85       	ldd	r24, Z+12	; 0x0c
    acda:	88 30       	cpi	r24, 0x08	; 8
    acdc:	11 f0       	breq	.+4      	; 0xace2 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    acde:	0c 94 4f d9 	jmp	0x1b29e	; 0x1b29e <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    ace2:	90 e0       	ldi	r25, 0x00	; 0
    ace4:	80 e0       	ldi	r24, 0x00	; 0
    ace6:	08 95       	ret

0000ace8 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
    ace8:	af 92       	push	r10
    acea:	bf 92       	push	r11
    acec:	cf 92       	push	r12
    acee:	df 92       	push	r13
    acf0:	ff 92       	push	r15
    acf2:	0f 93       	push	r16
    acf4:	1f 93       	push	r17
    acf6:	cf 93       	push	r28
    acf8:	df 93       	push	r29
    acfa:	8c 01       	movw	r16, r24
    acfc:	5b 01       	movw	r10, r22
    acfe:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
    ad00:	fc 01       	movw	r30, r24
    ad02:	c7 88       	ldd	r12, Z+23	; 0x17
    ad04:	d0 8c       	ldd	r13, Z+24	; 0x18
    ad06:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
    ad08:	8f 2d       	mov	r24, r15
    ad0a:	0e 94 ab d9 	call	0x1b356	; 0x1b356 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    ad0e:	8c 17       	cp	r24, r28
    ad10:	9d 07       	cpc	r25, r29
    ad12:	20 f4       	brcc	.+8      	; 0xad1c <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
    ad14:	8f 2d       	mov	r24, r15
    ad16:	0e 94 ab d9 	call	0x1b356	; 0x1b356 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
    ad1a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
    ad1c:	9e 01       	movw	r18, r28
    ad1e:	a5 01       	movw	r20, r10
    ad20:	b6 01       	movw	r22, r12
    ad22:	8f 2d       	mov	r24, r15
    ad24:	0e 94 6b d9 	call	0x1b2d6	; 0x1b2d6 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
    ad28:	f8 01       	movw	r30, r16
    ad2a:	87 89       	ldd	r24, Z+23	; 0x17
    ad2c:	90 8d       	ldd	r25, Z+24	; 0x18
    ad2e:	8c 0f       	add	r24, r28
    ad30:	9d 1f       	adc	r25, r29
    ad32:	90 8f       	std	Z+24, r25	; 0x18
    ad34:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
    ad36:	ce 01       	movw	r24, r28
    ad38:	df 91       	pop	r29
    ad3a:	cf 91       	pop	r28
    ad3c:	1f 91       	pop	r17
    ad3e:	0f 91       	pop	r16
    ad40:	ff 90       	pop	r15
    ad42:	df 90       	pop	r13
    ad44:	cf 90       	pop	r12
    ad46:	bf 90       	pop	r11
    ad48:	af 90       	pop	r10
    ad4a:	08 95       	ret

0000ad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    ad4c:	0f 93       	push	r16
    ad4e:	1f 93       	push	r17
    ad50:	cf 93       	push	r28
    ad52:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    ad54:	00 97       	sbiw	r24, 0x00	; 0
    ad56:	01 f1       	breq	.+64     	; 0xad98 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
    ad58:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    ad5a:	fc 01       	movw	r30, r24
    ad5c:	c0 81       	ld	r28, Z
    ad5e:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    ad60:	20 97       	sbiw	r28, 0x00	; 0
    ad62:	d1 f0       	breq	.+52     	; 0xad98 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    ad64:	6a 85       	ldd	r22, Y+10	; 0x0a
    ad66:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    ad68:	01 15       	cp	r16, r1
    ad6a:	11 05       	cpc	r17, r1
    ad6c:	19 f0       	breq	.+6      	; 0xad74 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x28>
    ad6e:	61 15       	cp	r22, r1
    ad70:	71 05       	cpc	r23, r1
    ad72:	49 f4       	brne	.+18     	; 0xad86 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x3a>
    ad74:	06 17       	cp	r16, r22
    ad76:	17 07       	cpc	r17, r23
    ad78:	59 f4       	brne	.+22     	; 0xad90 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    ad7a:	ce 01       	movw	r24, r28
    ad7c:	df 91       	pop	r29
    ad7e:	cf 91       	pop	r28
    ad80:	1f 91       	pop	r17
    ad82:	0f 91       	pop	r16
    ad84:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    ad86:	c8 01       	movw	r24, r16
    ad88:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    ad8c:	89 2b       	or	r24, r25
    ad8e:	a9 f3       	breq	.-22     	; 0xad7a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.41():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    ad90:	0e 80       	ldd	r0, Y+6	; 0x06
    ad92:	df 81       	ldd	r29, Y+7	; 0x07
    ad94:	c0 2d       	mov	r28, r0
    ad96:	e4 cf       	rjmp	.-56     	; 0xad60 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    ad98:	d0 e0       	ldi	r29, 0x00	; 0
    ad9a:	c0 e0       	ldi	r28, 0x00	; 0
    ad9c:	ee cf       	rjmp	.-36     	; 0xad7a <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]+0x2e>

0000ad9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    ad9e:	4f 92       	push	r4
    ada0:	5f 92       	push	r5
    ada2:	6f 92       	push	r6
    ada4:	7f 92       	push	r7
    ada6:	8f 92       	push	r8
    ada8:	9f 92       	push	r9
    adaa:	af 92       	push	r10
    adac:	bf 92       	push	r11
    adae:	df 92       	push	r13
    adb0:	ef 92       	push	r14
    adb2:	ff 92       	push	r15
    adb4:	0f 93       	push	r16
    adb6:	1f 93       	push	r17
    adb8:	cf 93       	push	r28
    adba:	df 93       	push	r29
    adbc:	cd b7       	in	r28, 0x3d	; 61
    adbe:	de b7       	in	r29, 0x3e	; 62
    adc0:	c4 54       	subi	r28, 0x44	; 68
    adc2:	d1 09       	sbc	r29, r1
    adc4:	0f b6       	in	r0, 0x3f	; 63
    adc6:	f8 94       	cli
    adc8:	de bf       	out	0x3e, r29	; 62
    adca:	0f be       	out	0x3f, r0	; 63
    adcc:	cd bf       	out	0x3d, r28	; 61
    adce:	8c 01       	movw	r16, r24
    add0:	4a 01       	movw	r8, r20
    add2:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    add4:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    add8:	00 97       	sbiw	r24, 0x00	; 0
    adda:	09 f0       	breq	.+2      	; 0xadde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    addc:	b0 c0       	rjmp	.+352    	; 0xaf3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    adde:	c8 01       	movw	r24, r16
    ade0:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ade4:	75 01       	movw	r14, r10
    ade6:	8b 35       	cpi	r24, 0x5B	; 91
    ade8:	49 f1       	breq	.+82     	; 0xae3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    adea:	8b 37       	cpi	r24, 0x7B	; 123
    adec:	09 f4       	brne	.+2      	; 0xadf0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    adee:	d2 c0       	rjmp	.+420    	; 0xaf94 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    adf0:	c8 01       	movw	r24, r16
    adf2:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    adf6:	87 32       	cpi	r24, 0x27	; 39
    adf8:	09 f4       	brne	.+2      	; 0xadfc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    adfa:	eb c1       	rjmp	.+982    	; 0xb1d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    adfc:	82 32       	cpi	r24, 0x22	; 34
    adfe:	09 f4       	brne	.+2      	; 0xae02 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    ae00:	e8 c1       	rjmp	.+976    	; 0xb1d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    ae02:	c8 01       	movw	r24, r16
    ae04:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ae08:	b8 2e       	mov	r11, r24
    ae0a:	ce 01       	movw	r24, r28
    ae0c:	01 96       	adiw	r24, 0x01	; 1
    ae0e:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    ae10:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    ae12:	8b 2d       	mov	r24, r11
    ae14:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    ae18:	88 23       	and	r24, r24
    ae1a:	09 f4       	brne	.+2      	; 0xae1e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    ae1c:	f5 c1       	rjmp	.+1002   	; 0xb208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    ae1e:	bf e3       	ldi	r27, 0x3F	; 63
    ae20:	db 16       	cp	r13, r27
    ae22:	09 f4       	brne	.+2      	; 0xae26 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    ae24:	f1 c1       	rjmp	.+994    	; 0xb208 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ae26:	f8 01       	movw	r30, r16
    ae28:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    ae2a:	d3 94       	inc	r13
    ae2c:	d4 01       	movw	r26, r8
    ae2e:	bd 92       	st	X+, r11
    ae30:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    ae32:	c8 01       	movw	r24, r16
    ae34:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ae38:	b8 2e       	mov	r11, r24
    ae3a:	eb cf       	rjmp	.-42     	; 0xae12 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    ae3c:	d8 01       	movw	r26, r16
    ae3e:	16 96       	adiw	r26, 0x06	; 6
    ae40:	8c 91       	ld	r24, X
    ae42:	88 23       	and	r24, r24
    ae44:	09 f4       	brne	.+2      	; 0xae48 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    ae46:	c1 c1       	rjmp	.+898    	; 0xb1ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    ae48:	a1 14       	cp	r10, r1
    ae4a:	b1 04       	cpc	r11, r1
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    ae4e:	2d c1       	rjmp	.+602    	; 0xb0aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    ae50:	88 e0       	ldi	r24, 0x08	; 8
    ae52:	90 e0       	ldi	r25, 0x00	; 0
    ae54:	f5 01       	movw	r30, r10
    ae56:	91 83       	std	Z+1, r25	; 0x01
    ae58:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    ae5a:	13 82       	std	Z+3, r1	; 0x03
    ae5c:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    ae5e:	15 82       	std	Z+5, r1	; 0x05
    ae60:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ae62:	c8 01       	movw	r24, r16
    ae64:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ae68:	8b 35       	cpi	r24, 0x5B	; 91
    ae6a:	09 f0       	breq	.+2      	; 0xae6e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    ae6c:	ef c0       	rjmp	.+478    	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    ae6e:	d8 01       	movw	r26, r16
    ae70:	18 96       	adiw	r26, 0x08	; 8
    ae72:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    ae74:	c8 01       	movw	r24, r16
    ae76:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    ae7a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    ae7c:	89 2b       	or	r24, r25
    ae7e:	09 f0       	breq	.+2      	; 0xae82 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    ae80:	5d c0       	rjmp	.+186    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    ae82:	c8 01       	movw	r24, r16
    ae84:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    ae88:	8d 35       	cpi	r24, 0x5D	; 93
    ae8a:	09 f4       	brne	.+2      	; 0xae8e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    ae8c:	55 c0       	rjmp	.+170    	; 0xaf38 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    ae8e:	8c e0       	ldi	r24, 0x0C	; 12
    ae90:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    ae92:	d4 01       	movw	r26, r8
    ae94:	ed 91       	ld	r30, X+
    ae96:	fc 91       	ld	r31, X
    ae98:	01 90       	ld	r0, Z+
    ae9a:	f0 81       	ld	r31, Z
    ae9c:	e0 2d       	mov	r30, r0
    ae9e:	6c e0       	ldi	r22, 0x0C	; 12
    aea0:	70 e0       	ldi	r23, 0x00	; 0
    aea2:	c4 01       	movw	r24, r8
    aea4:	19 95       	eicall
    aea6:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    aea8:	00 97       	sbiw	r24, 0x00	; 0
    aeaa:	09 f4       	brne	.+2      	; 0xaeae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    aeac:	64 c0       	rjmp	.+200    	; 0xaf76 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    aeae:	dc 01       	movw	r26, r24
    aeb0:	2d 2d       	mov	r18, r13
    aeb2:	1d 92       	st	X+, r1
    aeb4:	2a 95       	dec	r18
    aeb6:	e9 f7       	brne	.-6      	; 0xaeb2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    aeb8:	11 82       	std	Z+1, r1	; 0x01
    aeba:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    aebc:	d7 01       	movw	r26, r14
    aebe:	14 96       	adiw	r26, 0x04	; 4
    aec0:	8d 91       	ld	r24, X+
    aec2:	9c 91       	ld	r25, X
    aec4:	15 97       	sbiw	r26, 0x05	; 5
    aec6:	00 97       	sbiw	r24, 0x00	; 0
    aec8:	09 f4       	brne	.+2      	; 0xaecc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    aeca:	50 c0       	rjmp	.+160    	; 0xaf6c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    aecc:	91 87       	std	Z+9, r25	; 0x09
    aece:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    aed0:	14 96       	adiw	r26, 0x04	; 4
    aed2:	8d 91       	ld	r24, X+
    aed4:	9c 91       	ld	r25, X
    aed6:	dc 01       	movw	r26, r24
    aed8:	17 96       	adiw	r26, 0x07	; 7
    aeda:	fc 93       	st	X, r31
    aedc:	ee 93       	st	-X, r30
    aede:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    aee0:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    aee2:	15 96       	adiw	r26, 0x05	; 5
    aee4:	fc 93       	st	X, r31
    aee6:	ee 93       	st	-X, r30
    aee8:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    aeea:	98 2d       	mov	r25, r8
    aeec:	89 2d       	mov	r24, r9
    aeee:	49 2e       	mov	r4, r25
    aef0:	58 2e       	mov	r5, r24
    aef2:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    aef4:	ef 2b       	or	r30, r31
    aef6:	09 f4       	brne	.+2      	; 0xaefa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    aef8:	d8 c0       	rjmp	.+432    	; 0xb0aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    aefa:	f8 01       	movw	r30, r16
    aefc:	86 81       	ldd	r24, Z+6	; 0x06
    aefe:	81 50       	subi	r24, 0x01	; 1
    af00:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    af02:	b3 01       	movw	r22, r6
    af04:	a2 01       	movw	r20, r4
    af06:	c8 01       	movw	r24, r16
    af08:	0e 94 cf 56 	call	0xad9e	; 0xad9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    af0c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    af0e:	d8 01       	movw	r26, r16
    af10:	16 96       	adiw	r26, 0x06	; 6
    af12:	8c 91       	ld	r24, X
    af14:	16 97       	sbiw	r26, 0x06	; 6
    af16:	8f 5f       	subi	r24, 0xFF	; 255
    af18:	16 96       	adiw	r26, 0x06	; 6
    af1a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    af1c:	a1 14       	cp	r10, r1
    af1e:	b1 04       	cpc	r11, r1
    af20:	69 f4       	brne	.+26     	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    af22:	c8 01       	movw	r24, r16
    af24:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    af28:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    af2a:	89 2b       	or	r24, r25
    af2c:	39 f4       	brne	.+14     	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    af2e:	c8 01       	movw	r24, r16
    af30:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    af34:	8d 35       	cpi	r24, 0x5D	; 93
    af36:	21 f5       	brne	.+72     	; 0xaf80 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    af38:	f8 01       	movw	r30, r16
    af3a:	10 86       	std	Z+8, r1	; 0x08
    af3c:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    af3e:	cc 5b       	subi	r28, 0xBC	; 188
    af40:	df 4f       	sbci	r29, 0xFF	; 255
    af42:	0f b6       	in	r0, 0x3f	; 63
    af44:	f8 94       	cli
    af46:	de bf       	out	0x3e, r29	; 62
    af48:	0f be       	out	0x3f, r0	; 63
    af4a:	cd bf       	out	0x3d, r28	; 61
    af4c:	df 91       	pop	r29
    af4e:	cf 91       	pop	r28
    af50:	1f 91       	pop	r17
    af52:	0f 91       	pop	r16
    af54:	ff 90       	pop	r15
    af56:	ef 90       	pop	r14
    af58:	df 90       	pop	r13
    af5a:	bf 90       	pop	r11
    af5c:	af 90       	pop	r10
    af5e:	9f 90       	pop	r9
    af60:	8f 90       	pop	r8
    af62:	7f 90       	pop	r7
    af64:	6f 90       	pop	r6
    af66:	5f 90       	pop	r5
    af68:	4f 90       	pop	r4
    af6a:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    af6c:	13 96       	adiw	r26, 0x03	; 3
    af6e:	fc 93       	st	X, r31
    af70:	ee 93       	st	-X, r30
    af72:	12 97       	sbiw	r26, 0x02	; 2
    af74:	b6 cf       	rjmp	.-148    	; 0xaee2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    af76:	f0 e0       	ldi	r31, 0x00	; 0
    af78:	e0 e0       	ldi	r30, 0x00	; 0
    af7a:	90 e0       	ldi	r25, 0x00	; 0
    af7c:	80 e0       	ldi	r24, 0x00	; 0
    af7e:	b7 cf       	rjmp	.-146    	; 0xaeee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    af80:	c8 01       	movw	r24, r16
    af82:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    af86:	8c 32       	cpi	r24, 0x2C	; 44
    af88:	09 f0       	breq	.+2      	; 0xaf8c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    af8a:	60 c0       	rjmp	.+192    	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    af8c:	d8 01       	movw	r26, r16
    af8e:	18 96       	adiw	r26, 0x08	; 8
    af90:	1c 92       	st	X, r1
    af92:	7f cf       	rjmp	.-258    	; 0xae92 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    af94:	f8 01       	movw	r30, r16
    af96:	86 81       	ldd	r24, Z+6	; 0x06
    af98:	88 23       	and	r24, r24
    af9a:	09 f4       	brne	.+2      	; 0xaf9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    af9c:	16 c1       	rjmp	.+556    	; 0xb1ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    af9e:	a1 14       	cp	r10, r1
    afa0:	b1 04       	cpc	r11, r1
    afa2:	09 f4       	brne	.+2      	; 0xafa6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    afa4:	82 c0       	rjmp	.+260    	; 0xb0aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    afa6:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    afa8:	89 e0       	ldi	r24, 0x09	; 9
    afaa:	90 e0       	ldi	r25, 0x00	; 0
    afac:	d5 01       	movw	r26, r10
    afae:	11 96       	adiw	r26, 0x01	; 1
    afb0:	9c 93       	st	X, r25
    afb2:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    afb4:	13 96       	adiw	r26, 0x03	; 3
    afb6:	1c 92       	st	X, r1
    afb8:	1e 92       	st	-X, r1
    afba:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    afbc:	15 96       	adiw	r26, 0x05	; 5
    afbe:	1c 92       	st	X, r1
    afc0:	1e 92       	st	-X, r1
    afc2:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    afc4:	45 01       	movw	r8, r10
    afc6:	b2 e0       	ldi	r27, 0x02	; 2
    afc8:	8b 0e       	add	r8, r27
    afca:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    afcc:	c8 01       	movw	r24, r16
    afce:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    afd2:	8b 37       	cpi	r24, 0x7B	; 123
    afd4:	d9 f5       	brne	.+118    	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    afd6:	f8 01       	movw	r30, r16
    afd8:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    afda:	c8 01       	movw	r24, r16
    afdc:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    afe0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    afe2:	89 2b       	or	r24, r25
    afe4:	09 f0       	breq	.+2      	; 0xafe8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    afe6:	aa cf       	rjmp	.-172    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    afe8:	c8 01       	movw	r24, r16
    afea:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    afee:	8d 37       	cpi	r24, 0x7D	; 125
    aff0:	09 f4       	brne	.+2      	; 0xaff4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    aff2:	9c c0       	rjmp	.+312    	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    aff4:	bc e0       	ldi	r27, 0x0C	; 12
    aff6:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    aff8:	c8 01       	movw	r24, r16
    affa:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    affe:	87 32       	cpi	r24, 0x27	; 39
    b000:	79 f0       	breq	.+30     	; 0xb020 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    b002:	82 32       	cpi	r24, 0x22	; 34
    b004:	69 f0       	breq	.+26     	; 0xb020 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    b006:	f8 01       	movw	r30, r16
    b008:	a4 80       	ldd	r10, Z+4	; 0x04
    b00a:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    b00c:	c8 01       	movw	r24, r16
    b00e:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b012:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    b014:	81 11       	cpse	r24, r1
    b016:	1e c0       	rjmp	.+60     	; 0xb054 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    b018:	aa 24       	eor	r10, r10
    b01a:	a3 94       	inc	r10
    b01c:	b1 2c       	mov	r11, r1
    b01e:	8e cf       	rjmp	.-228    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    b020:	be 01       	movw	r22, r28
    b022:	6f 5f       	subi	r22, 0xFF	; 255
    b024:	7f 4f       	sbci	r23, 0xFF	; 255
    b026:	c8 01       	movw	r24, r16
    b028:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    b02c:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    b02e:	89 2b       	or	r24, r25
    b030:	09 f0       	breq	.+2      	; 0xb034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    b032:	84 cf       	rjmp	.-248    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    b034:	c8 01       	movw	r24, r16
    b036:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b03a:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    b03c:	89 2b       	or	r24, r25
    b03e:	09 f0       	breq	.+2      	; 0xb042 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    b040:	7d cf       	rjmp	.-262    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b042:	c8 01       	movw	r24, r16
    b044:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b048:	8a 33       	cpi	r24, 0x3A	; 58
    b04a:	99 f1       	breq	.+102    	; 0xb0b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    b04c:	72 e0       	ldi	r23, 0x02	; 2
    b04e:	a7 2e       	mov	r10, r23
    b050:	b1 2c       	mov	r11, r1
    b052:	74 cf       	rjmp	.-280    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    b054:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    b058:	88 23       	and	r24, r24
    b05a:	c1 f3       	breq	.-16     	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b05c:	d8 01       	movw	r26, r16
    b05e:	18 96       	adiw	r26, 0x08	; 8
    b060:	1c 92       	st	X, r1
    b062:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    b064:	14 96       	adiw	r26, 0x04	; 4
    b066:	ed 91       	ld	r30, X+
    b068:	fc 91       	ld	r31, X
    b06a:	15 97       	sbiw	r26, 0x05	; 5
    b06c:	cf 01       	movw	r24, r30
    b06e:	01 96       	adiw	r24, 0x01	; 1
    b070:	15 96       	adiw	r26, 0x05	; 5
    b072:	9c 93       	st	X, r25
    b074:	8e 93       	st	-X, r24
    b076:	14 97       	sbiw	r26, 0x04	; 4
    b078:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    b07a:	c8 01       	movw	r24, r16
    b07c:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b080:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    b082:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    b086:	81 11       	cpse	r24, r1
    b088:	e9 cf       	rjmp	.-46     	; 0xb05c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    b08a:	d8 01       	movw	r26, r16
    b08c:	14 96       	adiw	r26, 0x04	; 4
    b08e:	ed 91       	ld	r30, X+
    b090:	fc 91       	ld	r31, X
    b092:	15 97       	sbiw	r26, 0x05	; 5
    b094:	cf 01       	movw	r24, r30
    b096:	01 96       	adiw	r24, 0x01	; 1
    b098:	15 96       	adiw	r26, 0x05	; 5
    b09a:	9c 93       	st	X, r25
    b09c:	8e 93       	st	-X, r24
    b09e:	14 97       	sbiw	r26, 0x04	; 4
    b0a0:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    b0a2:	ba 82       	std	Y+2, r11	; 0x02
    b0a4:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    b0a6:	ab 28       	or	r10, r11
    b0a8:	29 f6       	brne	.-118    	; 0xb034 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    b0aa:	e3 e0       	ldi	r30, 0x03	; 3
    b0ac:	ae 2e       	mov	r10, r30
    b0ae:	b1 2c       	mov	r11, r1
    b0b0:	45 cf       	rjmp	.-374    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b0b2:	f8 01       	movw	r30, r16
    b0b4:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    b0b6:	a9 80       	ldd	r10, Y+1	; 0x01
    b0b8:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    b0ba:	a1 14       	cp	r10, r1
    b0bc:	b1 04       	cpc	r11, r1
    b0be:	d1 f5       	brne	.+116    	; 0xb134 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b0c0:	90 e0       	ldi	r25, 0x00	; 0
    b0c2:	80 e0       	ldi	r24, 0x00	; 0
    b0c4:	30 e0       	ldi	r19, 0x00	; 0
    b0c6:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    b0c8:	22 96       	adiw	r28, 0x02	; 2
    b0ca:	3f af       	std	Y+63, r19	; 0x3f
    b0cc:	22 97       	sbiw	r28, 0x02	; 2
    b0ce:	23 96       	adiw	r28, 0x03	; 3
    b0d0:	2f af       	std	Y+63, r18	; 0x3f
    b0d2:	23 97       	sbiw	r28, 0x03	; 3
    b0d4:	25 96       	adiw	r28, 0x05	; 5
    b0d6:	9f af       	std	Y+63, r25	; 0x3f
    b0d8:	8e af       	std	Y+62, r24	; 0x3e
    b0da:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    b0dc:	89 2b       	or	r24, r25
    b0de:	29 f3       	breq	.-54     	; 0xb0aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    b0e0:	d8 01       	movw	r26, r16
    b0e2:	16 96       	adiw	r26, 0x06	; 6
    b0e4:	8c 91       	ld	r24, X
    b0e6:	16 97       	sbiw	r26, 0x06	; 6
    b0e8:	81 50       	subi	r24, 0x01	; 1
    b0ea:	16 96       	adiw	r26, 0x06	; 6
    b0ec:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    b0ee:	25 96       	adiw	r28, 0x05	; 5
    b0f0:	4c ad       	ldd	r20, Y+60	; 0x3c
    b0f2:	5d ad       	ldd	r21, Y+61	; 0x3d
    b0f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    b0f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    b0f8:	25 97       	sbiw	r28, 0x05	; 5
    b0fa:	c8 01       	movw	r24, r16
    b0fc:	0e 94 cf 56 	call	0xad9e	; 0xad9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    b100:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    b102:	f8 01       	movw	r30, r16
    b104:	86 81       	ldd	r24, Z+6	; 0x06
    b106:	8f 5f       	subi	r24, 0xFF	; 255
    b108:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    b10a:	a1 14       	cp	r10, r1
    b10c:	b1 04       	cpc	r11, r1
    b10e:	09 f0       	breq	.+2      	; 0xb112 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    b110:	15 cf       	rjmp	.-470    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    b112:	c8 01       	movw	r24, r16
    b114:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b118:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    b11a:	89 2b       	or	r24, r25
    b11c:	09 f0       	breq	.+2      	; 0xb120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    b11e:	0e cf       	rjmp	.-484    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b120:	c8 01       	movw	r24, r16
    b122:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b126:	8d 37       	cpi	r24, 0x7D	; 125
    b128:	09 f0       	breq	.+2      	; 0xb12c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    b12a:	3f c0       	rjmp	.+126    	; 0xb1aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b12c:	d8 01       	movw	r26, r16
    b12e:	18 96       	adiw	r26, 0x08	; 8
    b130:	1c 92       	st	X, r1
    b132:	04 cf       	rjmp	.-504    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    b134:	b5 01       	movw	r22, r10
    b136:	c4 01       	movw	r24, r8
    b138:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    b13c:	00 97       	sbiw	r24, 0x00	; 0
    b13e:	49 f5       	brne	.+82     	; 0xb192 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    b140:	d3 01       	movw	r26, r6
    b142:	ed 91       	ld	r30, X+
    b144:	fc 91       	ld	r31, X
    b146:	01 90       	ld	r0, Z+
    b148:	f0 81       	ld	r31, Z
    b14a:	e0 2d       	mov	r30, r0
    b14c:	6c e0       	ldi	r22, 0x0C	; 12
    b14e:	70 e0       	ldi	r23, 0x00	; 0
    b150:	c3 01       	movw	r24, r6
    b152:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    b154:	00 97       	sbiw	r24, 0x00	; 0
    b156:	09 f4       	brne	.+2      	; 0xb15a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    b158:	b3 cf       	rjmp	.-154    	; 0xb0c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    b15a:	fc 01       	movw	r30, r24
    b15c:	25 2d       	mov	r18, r5
    b15e:	11 92       	st	Z+, r1
    b160:	2a 95       	dec	r18
    b162:	e9 f7       	brne	.-6      	; 0xb15e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    b164:	dc 01       	movw	r26, r24
    b166:	1d 92       	st	X+, r1
    b168:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    b16a:	d7 01       	movw	r26, r14
    b16c:	14 96       	adiw	r26, 0x04	; 4
    b16e:	ed 91       	ld	r30, X+
    b170:	fc 91       	ld	r31, X
    b172:	15 97       	sbiw	r26, 0x05	; 5
    b174:	30 97       	sbiw	r30, 0x00	; 0
    b176:	81 f0       	breq	.+32     	; 0xb198 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    b178:	dc 01       	movw	r26, r24
    b17a:	19 96       	adiw	r26, 0x09	; 9
    b17c:	fc 93       	st	X, r31
    b17e:	ee 93       	st	-X, r30
    b180:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    b182:	97 83       	std	Z+7, r25	; 0x07
    b184:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    b186:	f7 01       	movw	r30, r14
    b188:	95 83       	std	Z+5, r25	; 0x05
    b18a:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    b18c:	fc 01       	movw	r30, r24
    b18e:	b3 86       	std	Z+11, r11	; 0x0b
    b190:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    b192:	36 2d       	mov	r19, r6
    b194:	27 2d       	mov	r18, r7
    b196:	98 cf       	rjmp	.-208    	; 0xb0c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    b198:	13 96       	adiw	r26, 0x03	; 3
    b19a:	9c 93       	st	X, r25
    b19c:	8e 93       	st	-X, r24
    b19e:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    b1a0:	15 96       	adiw	r26, 0x05	; 5
    b1a2:	9c 93       	st	X, r25
    b1a4:	8e 93       	st	-X, r24
    b1a6:	14 97       	sbiw	r26, 0x04	; 4
    b1a8:	f1 cf       	rjmp	.-30     	; 0xb18c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    b1aa:	c8 01       	movw	r24, r16
    b1ac:	0e 94 2f 4f 	call	0x9e5e	; 0x9e5e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    b1b0:	8c 32       	cpi	r24, 0x2C	; 44
    b1b2:	09 f0       	breq	.+2      	; 0xb1b6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    b1b4:	4b cf       	rjmp	.-362    	; 0xb04c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    b1b6:	f8 01       	movw	r30, r16
    b1b8:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    b1ba:	c8 01       	movw	r24, r16
    b1bc:	0e 94 96 4f 	call	0x9f2c	; 0x9f2c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    b1c0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    b1c2:	89 2b       	or	r24, r25
    b1c4:	09 f4       	brne	.+2      	; 0xb1c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    b1c6:	18 cf       	rjmp	.-464    	; 0xaff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    b1c8:	b9 ce       	rjmp	.-654    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    b1ca:	f5 e0       	ldi	r31, 0x05	; 5
    b1cc:	af 2e       	mov	r10, r31
    b1ce:	b1 2c       	mov	r11, r1
    b1d0:	b5 ce       	rjmp	.-662    	; 0xaf3c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    b1d2:	be 01       	movw	r22, r28
    b1d4:	6f 5f       	subi	r22, 0xFF	; 255
    b1d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1d8:	c8 01       	movw	r24, r16
    b1da:	0e 94 3f 4f 	call	0x9e7e	; 0x9e7e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    b1de:	00 97       	sbiw	r24, 0x00	; 0
    b1e0:	09 f0       	breq	.+2      	; 0xb1e4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    b1e2:	ad ce       	rjmp	.-678    	; 0xaf3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    b1e4:	e1 14       	cp	r14, r1
    b1e6:	f1 04       	cpc	r15, r1
    b1e8:	61 f0       	breq	.+24     	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.49():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    b1ea:	89 81       	ldd	r24, Y+1	; 0x01
    b1ec:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    b1ee:	23 e0       	ldi	r18, 0x03	; 3
    b1f0:	30 e0       	ldi	r19, 0x00	; 0
    b1f2:	d7 01       	movw	r26, r14
    b1f4:	11 96       	adiw	r26, 0x01	; 1
    b1f6:	3c 93       	st	X, r19
    b1f8:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    b1fa:	13 96       	adiw	r26, 0x03	; 3
    b1fc:	9c 93       	st	X, r25
    b1fe:	8e 93       	st	-X, r24
    b200:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    b202:	90 e0       	ldi	r25, 0x00	; 0
    b204:	80 e0       	ldi	r24, 0x00	; 0
    b206:	9b ce       	rjmp	.-714    	; 0xaf3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    b208:	e1 e0       	ldi	r30, 0x01	; 1
    b20a:	f0 e0       	ldi	r31, 0x00	; 0
    b20c:	ec 0f       	add	r30, r28
    b20e:	fd 1f       	adc	r31, r29
    b210:	ed 0d       	add	r30, r13
    b212:	f1 1d       	adc	r31, r1
    b214:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    b216:	19 81       	ldd	r17, Y+1	; 0x01
    b218:	11 23       	and	r17, r17
    b21a:	09 f4       	brne	.+2      	; 0xb21e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    b21c:	51 c0       	rjmp	.+162    	; 0xb2c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    b21e:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b220:	1d 32       	cpi	r17, 0x2D	; 45
    b222:	71 f1       	breq	.+92     	; 0xb280 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    b224:	1b 32       	cpi	r17, 0x2B	; 43
    b226:	61 f1       	breq	.+88     	; 0xb280 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    b228:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    b22a:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b22c:	90 ed       	ldi	r25, 0xD0	; 208
    b22e:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    b230:	9a 30       	cpi	r25, 0x0A	; 10
    b232:	d8 f3       	brcs	.-10     	; 0xb22a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    b234:	81 11       	cpse	r24, r1
    b236:	44 c0       	rjmp	.+136    	; 0xb2c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    b238:	14 37       	cpi	r17, 0x74	; 116
    b23a:	09 f4       	brne	.+2      	; 0xb23e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    b23c:	dd c1       	rjmp	.+954    	; 0xb5f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    b23e:	1b 32       	cpi	r17, 0x2B	; 43
    b240:	09 f1       	breq	.+66     	; 0xb284 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    b242:	1d 32       	cpi	r17, 0x2D	; 45
    b244:	19 f1       	breq	.+70     	; 0xb28c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    b246:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    b248:	fe 01       	movw	r30, r28
    b24a:	31 96       	adiw	r30, 0x01	; 1
    b24c:	20 e0       	ldi	r18, 0x00	; 0
    b24e:	30 e0       	ldi	r19, 0x00	; 0
    b250:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    b252:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b254:	80 ed       	ldi	r24, 0xD0	; 208
    b256:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    b258:	8a 30       	cpi	r24, 0x0A	; 10
    b25a:	d0 f4       	brcc	.+52     	; 0xb290 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    b25c:	aa e0       	ldi	r26, 0x0A	; 10
    b25e:	b0 e0       	ldi	r27, 0x00	; 0
    b260:	0e 94 f1 f8 	call	0x1f1e2	; 0x1f1e2 <__muluhisi3>
    b264:	20 2f       	mov	r18, r16
    b266:	00 0f       	add	r16, r16
    b268:	33 0b       	sbc	r19, r19
    b26a:	20 53       	subi	r18, 0x30	; 48
    b26c:	31 09       	sbc	r19, r1
    b26e:	03 2e       	mov	r0, r19
    b270:	00 0c       	add	r0, r0
    b272:	44 0b       	sbc	r20, r20
    b274:	55 0b       	sbc	r21, r21
    b276:	26 0f       	add	r18, r22
    b278:	37 1f       	adc	r19, r23
    b27a:	48 1f       	adc	r20, r24
    b27c:	59 1f       	adc	r21, r25
    b27e:	e9 cf       	rjmp	.-46     	; 0xb252 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    b280:	32 96       	adiw	r30, 0x02	; 2
    b282:	d3 cf       	rjmp	.-90     	; 0xb22a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    b284:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    b286:	fe 01       	movw	r30, r28
    b288:	32 96       	adiw	r30, 0x02	; 2
    b28a:	e0 cf       	rjmp	.-64     	; 0xb24c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    b28c:	11 e0       	ldi	r17, 0x01	; 1
    b28e:	fb cf       	rjmp	.-10     	; 0xb286 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    b290:	11 23       	and	r17, r17
    b292:	09 f4       	brne	.+2      	; 0xb296 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    b294:	b5 c1       	rjmp	.+874    	; 0xb600 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    b296:	e1 14       	cp	r14, r1
    b298:	f1 04       	cpc	r15, r1
    b29a:	09 f4       	brne	.+2      	; 0xb29e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    b29c:	b2 cf       	rjmp	.-156    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    b29e:	87 e0       	ldi	r24, 0x07	; 7
    b2a0:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    b2a2:	21 15       	cp	r18, r1
    b2a4:	31 05       	cpc	r19, r1
    b2a6:	41 05       	cpc	r20, r1
    b2a8:	51 05       	cpc	r21, r1
    b2aa:	11 f4       	brne	.+4      	; 0xb2b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    b2ac:	86 e0       	ldi	r24, 0x06	; 6
    b2ae:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    b2b0:	f7 01       	movw	r30, r14
    b2b2:	91 83       	std	Z+1, r25	; 0x01
    b2b4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    b2b6:	22 83       	std	Z+2, r18	; 0x02
    b2b8:	33 83       	std	Z+3, r19	; 0x03
    b2ba:	44 83       	std	Z+4, r20	; 0x04
    b2bc:	55 83       	std	Z+5, r21	; 0x05
    b2be:	a1 cf       	rjmp	.-190    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    b2c0:	65 e4       	ldi	r22, 0x45	; 69
    b2c2:	73 e0       	ldi	r23, 0x03	; 3
    b2c4:	ce 01       	movw	r24, r28
    b2c6:	01 96       	adiw	r24, 0x01	; 1
    b2c8:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    b2cc:	89 2b       	or	r24, r25
    b2ce:	09 f4       	brne	.+2      	; 0xb2d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    b2d0:	46 c0       	rjmp	.+140    	; 0xb35e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    b2d2:	5e 01       	movw	r10, r28
    b2d4:	f2 e0       	ldi	r31, 0x02	; 2
    b2d6:	af 0e       	add	r10, r31
    b2d8:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b2da:	1d 32       	cpi	r17, 0x2D	; 45
    b2dc:	49 f0       	breq	.+18     	; 0xb2f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    b2de:	fe 01       	movw	r30, r28
    b2e0:	31 96       	adiw	r30, 0x01	; 1
    b2e2:	5f 01       	movw	r10, r30
    b2e4:	1b 32       	cpi	r17, 0x2B	; 43
    b2e6:	21 f4       	brne	.+8      	; 0xb2f0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    b2e8:	5e 01       	movw	r10, r28
    b2ea:	22 e0       	ldi	r18, 0x02	; 2
    b2ec:	a2 0e       	add	r10, r18
    b2ee:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    b2f0:	69 e4       	ldi	r22, 0x49	; 73
    b2f2:	73 e0       	ldi	r23, 0x03	; 3
    b2f4:	c5 01       	movw	r24, r10
    b2f6:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    b2fa:	89 2b       	or	r24, r25
    b2fc:	81 f1       	breq	.+96     	; 0xb35e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    b2fe:	d5 01       	movw	r26, r10
    b300:	8c 91       	ld	r24, X
    b302:	88 23       	and	r24, r24
    b304:	09 f4       	brne	.+2      	; 0xb308 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    b306:	3b c1       	rjmp	.+630    	; 0xb57e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    b308:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    b30a:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b30c:	90 ed       	ldi	r25, 0xD0	; 208
    b30e:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    b310:	9a 30       	cpi	r25, 0x0A	; 10
    b312:	d0 f3       	brcs	.-12     	; 0xb308 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    b314:	8e 32       	cpi	r24, 0x2E	; 46
    b316:	41 f4       	brne	.+16     	; 0xb328 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    b318:	9d 01       	movw	r18, r26
    b31a:	f9 01       	movw	r30, r18
    b31c:	2f 5f       	subi	r18, 0xFF	; 255
    b31e:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b320:	80 81       	ld	r24, Z
    b322:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    b324:	8a 30       	cpi	r24, 0x0A	; 10
    b326:	c8 f3       	brcs	.-14     	; 0xb31a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    b328:	80 81       	ld	r24, Z
    b32a:	8f 7d       	andi	r24, 0xDF	; 223
    b32c:	85 34       	cpi	r24, 0x45	; 69
    b32e:	a1 f4       	brne	.+40     	; 0xb358 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    b330:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    b332:	8d 32       	cpi	r24, 0x2D	; 45
    b334:	09 f4       	brne	.+2      	; 0xb338 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    b336:	57 c0       	rjmp	.+174    	; 0xb3e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    b338:	8b 32       	cpi	r24, 0x2B	; 43
    b33a:	09 f4       	brne	.+2      	; 0xb33e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    b33c:	54 c0       	rjmp	.+168    	; 0xb3e6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    b33e:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    b340:	80 81       	ld	r24, Z
    b342:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    b344:	8a 30       	cpi	r24, 0x0A	; 10
    b346:	08 f0       	brcs	.+2      	; 0xb34a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    b348:	1a c1       	rjmp	.+564    	; 0xb57e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    b34a:	cf 01       	movw	r24, r30
    b34c:	fc 01       	movw	r30, r24
    b34e:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b350:	20 81       	ld	r18, Z
    b352:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    b354:	2a 30       	cpi	r18, 0x0A	; 10
    b356:	d0 f3       	brcs	.-12     	; 0xb34c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    b358:	80 81       	ld	r24, Z
    b35a:	81 11       	cpse	r24, r1
    b35c:	10 c1       	rjmp	.+544    	; 0xb57e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    b35e:	1b 32       	cpi	r17, 0x2B	; 43
    b360:	09 f4       	brne	.+2      	; 0xb364 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    b362:	43 c0       	rjmp	.+134    	; 0xb3ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    b364:	1d 32       	cpi	r17, 0x2D	; 45
    b366:	09 f0       	breq	.+2      	; 0xb36a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    b368:	47 c0       	rjmp	.+142    	; 0xb3f8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    b36a:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    b36c:	dd 24       	eor	r13, r13
    b36e:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    b370:	5e 01       	movw	r10, r28
    b372:	b2 e0       	ldi	r27, 0x02	; 2
    b374:	ab 0e       	add	r10, r27
    b376:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    b378:	60 e0       	ldi	r22, 0x00	; 0
    b37a:	70 e0       	ldi	r23, 0x00	; 0
    b37c:	80 e8       	ldi	r24, 0x80	; 128
    b37e:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    b380:	14 37       	cpi	r17, 0x74	; 116
    b382:	09 f4       	brne	.+2      	; 0xb386 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    b384:	d2 c0       	rjmp	.+420    	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    b386:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b388:	60 e0       	ldi	r22, 0x00	; 0
    b38a:	70 e0       	ldi	r23, 0x00	; 0
    b38c:	80 ec       	ldi	r24, 0xC0	; 192
    b38e:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    b390:	1e 34       	cpi	r17, 0x4E	; 78
    b392:	09 f4       	brne	.+2      	; 0xb396 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    b394:	ca c0       	rjmp	.+404    	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    b396:	19 34       	cpi	r17, 0x49	; 73
    b398:	09 f4       	brne	.+2      	; 0xb39c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    b39a:	97 c0       	rjmp	.+302    	; 0xb4ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    b39c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    b39e:	20 e0       	ldi	r18, 0x00	; 0
    b3a0:	30 e0       	ldi	r19, 0x00	; 0
    b3a2:	a9 01       	movw	r20, r18
    b3a4:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    b3a6:	d5 01       	movw	r26, r10
    b3a8:	1d 91       	ld	r17, X+
    b3aa:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b3ac:	80 ed       	ldi	r24, 0xD0	; 208
    b3ae:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    b3b0:	8a 30       	cpi	r24, 0x0A	; 10
    b3b2:	48 f5       	brcc	.+82     	; 0xb406 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    b3b4:	2c 3c       	cpi	r18, 0xCC	; 204
    b3b6:	bc ec       	ldi	r27, 0xCC	; 204
    b3b8:	3b 07       	cpc	r19, r27
    b3ba:	bc e0       	ldi	r27, 0x0C	; 12
    b3bc:	4b 07       	cpc	r20, r27
    b3be:	51 05       	cpc	r21, r1
    b3c0:	04 f5       	brge	.+64     	; 0xb402 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    b3c2:	aa e0       	ldi	r26, 0x0A	; 10
    b3c4:	b0 e0       	ldi	r27, 0x00	; 0
    b3c6:	0e 94 f1 f8 	call	0x1f1e2	; 0x1f1e2 <__muluhisi3>
    b3ca:	21 2f       	mov	r18, r17
    b3cc:	11 0f       	add	r17, r17
    b3ce:	33 0b       	sbc	r19, r19
    b3d0:	20 53       	subi	r18, 0x30	; 48
    b3d2:	31 09       	sbc	r19, r1
    b3d4:	03 2e       	mov	r0, r19
    b3d6:	00 0c       	add	r0, r0
    b3d8:	44 0b       	sbc	r20, r20
    b3da:	55 0b       	sbc	r21, r21
    b3dc:	26 0f       	add	r18, r22
    b3de:	37 1f       	adc	r19, r23
    b3e0:	48 1f       	adc	r20, r24
    b3e2:	59 1f       	adc	r21, r25
    b3e4:	df cf       	rjmp	.-66     	; 0xb3a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    b3e6:	32 96       	adiw	r30, 0x02	; 2
    b3e8:	ab cf       	rjmp	.-170    	; 0xb340 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    b3ea:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    b3ec:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    b3ee:	5e 01       	movw	r10, r28
    b3f0:	e2 e0       	ldi	r30, 0x02	; 2
    b3f2:	ae 0e       	add	r10, r30
    b3f4:	b1 1c       	adc	r11, r1
    b3f6:	c0 cf       	rjmp	.-128    	; 0xb378 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    b3f8:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    b3fa:	ce 01       	movw	r24, r28
    b3fc:	01 96       	adiw	r24, 0x01	; 1
    b3fe:	5c 01       	movw	r10, r24
    b400:	bb cf       	rjmp	.-138    	; 0xb378 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    b402:	0f 5f       	subi	r16, 0xFF	; 255
    b404:	cf cf       	rjmp	.-98     	; 0xb3a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    b406:	1e 32       	cpi	r17, 0x2E	; 46
    b408:	31 f5       	brne	.+76     	; 0xb456 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    b40a:	5f 01       	movw	r10, r30
    b40c:	8f ef       	ldi	r24, 0xFF	; 255
    b40e:	a8 1a       	sub	r10, r24
    b410:	b8 0a       	sbc	r11, r24
    b412:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    b414:	d5 01       	movw	r26, r10
    b416:	1d 91       	ld	r17, X+
    b418:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b41a:	80 ed       	ldi	r24, 0xD0	; 208
    b41c:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    b41e:	8a 30       	cpi	r24, 0x0A	; 10
    b420:	d0 f4       	brcc	.+52     	; 0xb456 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    b422:	2c 3c       	cpi	r18, 0xCC	; 204
    b424:	bc ec       	ldi	r27, 0xCC	; 204
    b426:	3b 07       	cpc	r19, r27
    b428:	bc e0       	ldi	r27, 0x0C	; 12
    b42a:	4b 07       	cpc	r20, r27
    b42c:	51 05       	cpc	r21, r1
    b42e:	8c f7       	brge	.-30     	; 0xb412 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    b430:	aa e0       	ldi	r26, 0x0A	; 10
    b432:	b0 e0       	ldi	r27, 0x00	; 0
    b434:	0e 94 f1 f8 	call	0x1f1e2	; 0x1f1e2 <__muluhisi3>
    b438:	21 2f       	mov	r18, r17
    b43a:	11 0f       	add	r17, r17
    b43c:	33 0b       	sbc	r19, r19
    b43e:	20 53       	subi	r18, 0x30	; 48
    b440:	31 09       	sbc	r19, r1
    b442:	03 2e       	mov	r0, r19
    b444:	00 0c       	add	r0, r0
    b446:	44 0b       	sbc	r20, r20
    b448:	55 0b       	sbc	r21, r21
    b44a:	26 0f       	add	r18, r22
    b44c:	37 1f       	adc	r19, r23
    b44e:	48 1f       	adc	r20, r24
    b450:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    b452:	01 50       	subi	r16, 0x01	; 1
    b454:	de cf       	rjmp	.-68     	; 0xb412 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    b456:	80 81       	ld	r24, Z
    b458:	8f 7d       	andi	r24, 0xDF	; 223
    b45a:	00 2e       	mov	r0, r16
    b45c:	00 0c       	add	r0, r0
    b45e:	11 0b       	sbc	r17, r17
    b460:	85 34       	cpi	r24, 0x45	; 69
    b462:	09 f0       	breq	.+2      	; 0xb466 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    b464:	70 c0       	rjmp	.+224    	; 0xb546 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    b466:	81 81       	ldd	r24, Z+1	; 0x01
    b468:	8d 32       	cpi	r24, 0x2D	; 45
    b46a:	41 f5       	brne	.+80     	; 0xb4bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    b46c:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    b46e:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    b470:	90 e0       	ldi	r25, 0x00	; 0
    b472:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    b474:	6a e0       	ldi	r22, 0x0A	; 10
    b476:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    b478:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    b47a:	60 ed       	ldi	r22, 0xD0	; 208
    b47c:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    b47e:	6a 30       	cpi	r22, 0x0A	; 10
    b480:	78 f5       	brcc	.+94     	; 0xb4e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    b482:	b8 9e       	mul	r11, r24
    b484:	b0 01       	movw	r22, r0
    b486:	b9 9e       	mul	r11, r25
    b488:	70 0d       	add	r23, r0
    b48a:	11 24       	eor	r1, r1
    b48c:	8a 2f       	mov	r24, r26
    b48e:	aa 0f       	add	r26, r26
    b490:	99 0b       	sbc	r25, r25
    b492:	c0 97       	sbiw	r24, 0x30	; 48
    b494:	86 0f       	add	r24, r22
    b496:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    b498:	b8 01       	movw	r22, r16
    b49a:	68 0f       	add	r22, r24
    b49c:	79 1f       	adc	r23, r25
    b49e:	67 32       	cpi	r22, 0x27	; 39
    b4a0:	71 05       	cpc	r23, r1
    b4a2:	54 f3       	brlt	.-44     	; 0xb478 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    b4a4:	bb 23       	and	r27, r27
    b4a6:	89 f0       	breq	.+34     	; 0xb4ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    b4a8:	60 e0       	ldi	r22, 0x00	; 0
    b4aa:	70 e0       	ldi	r23, 0x00	; 0
    b4ac:	80 e0       	ldi	r24, 0x00	; 0
    b4ae:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    b4b0:	d1 10       	cpse	r13, r1
    b4b2:	3b c0       	rjmp	.+118    	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    b4b4:	60 e0       	ldi	r22, 0x00	; 0
    b4b6:	70 e0       	ldi	r23, 0x00	; 0
    b4b8:	cb 01       	movw	r24, r22
    b4ba:	37 c0       	rjmp	.+110    	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    b4bc:	8b 32       	cpi	r24, 0x2B	; 43
    b4be:	19 f0       	breq	.+6      	; 0xb4c6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    b4c0:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    b4c2:	b0 e0       	ldi	r27, 0x00	; 0
    b4c4:	d5 cf       	rjmp	.-86     	; 0xb470 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    b4c6:	32 96       	adiw	r30, 0x02	; 2
    b4c8:	fc cf       	rjmp	.-8      	; 0xb4c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    b4ca:	60 e0       	ldi	r22, 0x00	; 0
    b4cc:	70 e0       	ldi	r23, 0x00	; 0
    b4ce:	80 e8       	ldi	r24, 0x80	; 128
    b4d0:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    b4d2:	d1 10       	cpse	r13, r1
    b4d4:	2a c0       	rjmp	.+84     	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    b4d6:	60 e0       	ldi	r22, 0x00	; 0
    b4d8:	70 e0       	ldi	r23, 0x00	; 0
    b4da:	80 e8       	ldi	r24, 0x80	; 128
    b4dc:	9f e7       	ldi	r25, 0x7F	; 127
    b4de:	25 c0       	rjmp	.+74     	; 0xb52a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    b4e0:	bb 23       	and	r27, r27
    b4e2:	19 f0       	breq	.+6      	; 0xb4ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    b4e4:	91 95       	neg	r25
    b4e6:	81 95       	neg	r24
    b4e8:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    b4ea:	08 0f       	add	r16, r24
    b4ec:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    b4ee:	ca 01       	movw	r24, r20
    b4f0:	b9 01       	movw	r22, r18
    b4f2:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    b4f6:	10 16       	cp	r1, r16
    b4f8:	11 06       	cpc	r1, r17
    b4fa:	44 f5       	brge	.+80     	; 0xb54c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    b4fc:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    b4fe:	00 ff       	sbrs	r16, 0
    b500:	0c c0       	rjmp	.+24     	; 0xb51a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    b502:	24 e0       	ldi	r18, 0x04	; 4
    b504:	b2 9e       	mul	r11, r18
    b506:	f0 01       	movw	r30, r0
    b508:	11 24       	eor	r1, r1
    b50a:	e6 5c       	subi	r30, 0xC6	; 198
    b50c:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    b50e:	20 81       	ld	r18, Z
    b510:	31 81       	ldd	r19, Z+1	; 0x01
    b512:	42 81       	ldd	r20, Z+2	; 0x02
    b514:	53 81       	ldd	r21, Z+3	; 0x03
    b516:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    b51a:	15 95       	asr	r17
    b51c:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    b51e:	b3 94       	inc	r11
    b520:	01 15       	cp	r16, r1
    b522:	11 05       	cpc	r17, r1
    b524:	61 f7       	brne	.-40     	; 0xb4fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    b526:	d1 10       	cpse	r13, r1
    b528:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    b52a:	e1 14       	cp	r14, r1
    b52c:	f1 04       	cpc	r15, r1
    b52e:	09 f4       	brne	.+2      	; 0xb532 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    b530:	68 ce       	rjmp	.-816    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    b532:	2a e0       	ldi	r18, 0x0A	; 10
    b534:	30 e0       	ldi	r19, 0x00	; 0
    b536:	f7 01       	movw	r30, r14
    b538:	31 83       	std	Z+1, r19	; 0x01
    b53a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    b53c:	62 83       	std	Z+2, r22	; 0x02
    b53e:	73 83       	std	Z+3, r23	; 0x03
    b540:	84 83       	std	Z+4, r24	; 0x04
    b542:	95 83       	std	Z+5, r25	; 0x05
    b544:	5e ce       	rjmp	.-836    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    b546:	90 e0       	ldi	r25, 0x00	; 0
    b548:	80 e0       	ldi	r24, 0x00	; 0
    b54a:	cf cf       	rjmp	.-98     	; 0xb4ea <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    b54c:	11 95       	neg	r17
    b54e:	01 95       	neg	r16
    b550:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    b552:	b1 2c       	mov	r11, r1
make_float():
    b554:	01 15       	cp	r16, r1
    b556:	11 05       	cpc	r17, r1
    b558:	31 f3       	breq	.-52     	; 0xb526 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    b55a:	00 ff       	sbrs	r16, 0
    b55c:	0c c0       	rjmp	.+24     	; 0xb576 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    b55e:	a4 e0       	ldi	r26, 0x04	; 4
    b560:	ba 9e       	mul	r11, r26
    b562:	f0 01       	movw	r30, r0
    b564:	11 24       	eor	r1, r1
    b566:	ee 5d       	subi	r30, 0xDE	; 222
    b568:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    b56a:	20 81       	ld	r18, Z
    b56c:	31 81       	ldd	r19, Z+1	; 0x01
    b56e:	42 81       	ldd	r20, Z+2	; 0x02
    b570:	53 81       	ldd	r21, Z+3	; 0x03
    b572:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    b576:	15 95       	asr	r17
    b578:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    b57a:	b3 94       	inc	r11
    b57c:	eb cf       	rjmp	.-42     	; 0xb554 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    b57e:	62 e5       	ldi	r22, 0x52	; 82
    b580:	73 e0       	ldi	r23, 0x03	; 3
    b582:	ce 01       	movw	r24, r28
    b584:	01 96       	adiw	r24, 0x01	; 1
    b586:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    b58a:	89 2b       	or	r24, r25
    b58c:	91 f4       	brne	.+36     	; 0xb5b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    b58e:	e1 14       	cp	r14, r1
    b590:	f1 04       	cpc	r15, r1
    b592:	09 f4       	brne	.+2      	; 0xb596 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    b594:	36 ce       	rjmp	.-916    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    b596:	85 e0       	ldi	r24, 0x05	; 5
    b598:	90 e0       	ldi	r25, 0x00	; 0
    b59a:	f7 01       	movw	r30, r14
    b59c:	91 83       	std	Z+1, r25	; 0x01
    b59e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    b5a0:	81 e0       	ldi	r24, 0x01	; 1
    b5a2:	90 e0       	ldi	r25, 0x00	; 0
    b5a4:	a0 e0       	ldi	r26, 0x00	; 0
    b5a6:	b0 e0       	ldi	r27, 0x00	; 0
    b5a8:	82 83       	std	Z+2, r24	; 0x02
    b5aa:	93 83       	std	Z+3, r25	; 0x03
    b5ac:	a4 83       	std	Z+4, r26	; 0x04
    b5ae:	b5 83       	std	Z+5, r27	; 0x05
    b5b0:	28 ce       	rjmp	.-944    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    b5b2:	67 e5       	ldi	r22, 0x57	; 87
    b5b4:	73 e0       	ldi	r23, 0x03	; 3
    b5b6:	ce 01       	movw	r24, r28
    b5b8:	01 96       	adiw	r24, 0x01	; 1
    b5ba:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    b5be:	89 2b       	or	r24, r25
    b5c0:	79 f4       	brne	.+30     	; 0xb5e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    b5c2:	e1 14       	cp	r14, r1
    b5c4:	f1 04       	cpc	r15, r1
    b5c6:	09 f4       	brne	.+2      	; 0xb5ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    b5c8:	1c ce       	rjmp	.-968    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    b5ca:	85 e0       	ldi	r24, 0x05	; 5
    b5cc:	90 e0       	ldi	r25, 0x00	; 0
    b5ce:	d7 01       	movw	r26, r14
    b5d0:	8d 93       	st	X+, r24
    b5d2:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    b5d4:	f7 01       	movw	r30, r14
    b5d6:	12 82       	std	Z+2, r1	; 0x02
    b5d8:	13 82       	std	Z+3, r1	; 0x03
    b5da:	14 82       	std	Z+4, r1	; 0x04
    b5dc:	15 82       	std	Z+5, r1	; 0x05
    b5de:	11 ce       	rjmp	.-990    	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    b5e0:	6d e5       	ldi	r22, 0x5D	; 93
    b5e2:	73 e0       	ldi	r23, 0x03	; 3
    b5e4:	ce 01       	movw	r24, r28
    b5e6:	01 96       	adiw	r24, 0x01	; 1
    b5e8:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    b5ec:	89 2b       	or	r24, r25
    b5ee:	09 f4       	brne	.+2      	; 0xb5f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    b5f0:	08 ce       	rjmp	.-1008   	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    b5f2:	82 e0       	ldi	r24, 0x02	; 2
    b5f4:	90 e0       	ldi	r25, 0x00	; 0
    b5f6:	a3 cc       	rjmp	.-1722   	; 0xaf3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    b5f8:	21 e0       	ldi	r18, 0x01	; 1
    b5fa:	30 e0       	ldi	r19, 0x00	; 0
    b5fc:	40 e0       	ldi	r20, 0x00	; 0
    b5fe:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    b600:	e1 14       	cp	r14, r1
    b602:	f1 04       	cpc	r15, r1
    b604:	09 f0       	breq	.+2      	; 0xb608 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    b606:	52 ce       	rjmp	.-860    	; 0xb2ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    b608:	fc cd       	rjmp	.-1032   	; 0xb202 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

0000b60a <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6006
/*

   Funkce ktera zobrazuje vsechny interni veliciny vhodne k diagnostice zarizeni
*/
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    b60a:	af 92       	push	r10
    b60c:	bf 92       	push	r11
    b60e:	cf 92       	push	r12
    b610:	df 92       	push	r13
    b612:	ef 92       	push	r14
    b614:	ff 92       	push	r15
    b616:	0f 93       	push	r16
    b618:	1f 93       	push	r17
    b61a:	cf 93       	push	r28
    b61c:	df 93       	push	r29
    b61e:	cd b7       	in	r28, 0x3d	; 61
    b620:	de b7       	in	r29, 0x3e	; 62
    b622:	a8 97       	sbiw	r28, 0x28	; 40
    b624:	0f b6       	in	r0, 0x3f	; 63
    b626:	f8 94       	cli
    b628:	de bf       	out	0x3e, r29	; 62
    b62a:	0f be       	out	0x3f, r0	; 63
    b62c:	cd bf       	out	0x3d, r28	; 61
    b62e:	6c 01       	movw	r12, r24
    b630:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6009
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
    b632:	60 e6       	ldi	r22, 0x60	; 96
    b634:	76 e8       	ldi	r23, 0x86	; 134
    b636:	ce 01       	movw	r24, r28
    b638:	01 96       	adiw	r24, 0x01	; 1
    b63a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b63e:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
    b642:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
    b646:	29 e3       	ldi	r18, 0x39	; 57
    b648:	28 9f       	mul	r18, r24
    b64a:	b0 01       	movw	r22, r0
    b64c:	29 9f       	mul	r18, r25
    b64e:	70 0d       	add	r23, r0
    b650:	11 24       	eor	r1, r1
    b652:	90 e0       	ldi	r25, 0x00	; 0
    b654:	80 e0       	ldi	r24, 0x00	; 0
    b656:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    b65a:	20 e0       	ldi	r18, 0x00	; 0
    b65c:	30 e0       	ldi	r19, 0x00	; 0
    b65e:	4a e7       	ldi	r20, 0x7A	; 122
    b660:	54 e4       	ldi	r21, 0x44	; 68
    b662:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6010
void display_element_show_about_device(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[32];
  char str2[8];
  strcpy_P(str1, new_text_input_volt);
  dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, str2);
    b666:	8e 01       	movw	r16, r28
    b668:	0f 5d       	subi	r16, 0xDF	; 223
    b66a:	1f 4f       	sbci	r17, 0xFF	; 255
    b66c:	22 e0       	ldi	r18, 0x02	; 2
    b66e:	44 e0       	ldi	r20, 0x04	; 4
    b670:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6011
  strcat(str1, str2);
    b674:	b8 01       	movw	r22, r16
    b676:	ce 01       	movw	r24, r28
    b678:	01 96       	adiw	r24, 0x01	; 1
    b67a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6012
  strcat(str1, "V");
    b67e:	64 e4       	ldi	r22, 0x44	; 68
    b680:	78 e0       	ldi	r23, 0x08	; 8
    b682:	ce 01       	movw	r24, r28
    b684:	01 96       	adiw	r24, 0x01	; 1
    b686:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6013
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    b68a:	85 e0       	ldi	r24, 0x05	; 5
    b68c:	c8 0e       	add	r12, r24
    b68e:	d1 1c       	adc	r13, r1
    b690:	a5 01       	movw	r20, r10
    b692:	46 5f       	subi	r20, 0xF6	; 246
    b694:	5f 4f       	sbci	r21, 0xFF	; 255
    b696:	ee 24       	eor	r14, r14
    b698:	ea 94       	dec	r14
    b69a:	fe 2c       	mov	r15, r14
    b69c:	10 e0       	ldi	r17, 0x00	; 0
    b69e:	00 e0       	ldi	r16, 0x00	; 0
    b6a0:	21 e0       	ldi	r18, 0x01	; 1
    b6a2:	b6 01       	movw	r22, r12
    b6a4:	ce 01       	movw	r24, r28
    b6a6:	01 96       	adiw	r24, 0x01	; 1
    b6a8:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6015

  strcpy_P(str1, new_text_pet_volt);
    b6ac:	6c e4       	ldi	r22, 0x4C	; 76
    b6ae:	76 e8       	ldi	r23, 0x86	; 134
    b6b0:	ce 01       	movw	r24, r28
    b6b2:	01 96       	adiw	r24, 0x01	; 1
    b6b4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6016
  strcat(str1, ": ");
    b6b8:	63 e4       	ldi	r22, 0x43	; 67
    b6ba:	77 e0       	ldi	r23, 0x07	; 7
    b6bc:	ce 01       	movw	r24, r28
    b6be:	01 96       	adiw	r24, 0x01	; 1
    b6c0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b6c4:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
    b6c8:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
    b6cc:	93 e0       	ldi	r25, 0x03	; 3
    b6ce:	66 0f       	add	r22, r22
    b6d0:	77 1f       	adc	r23, r23
    b6d2:	9a 95       	dec	r25
    b6d4:	e1 f7       	brne	.-8      	; 0xb6ce <display_element_show_about_device(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc4>
    b6d6:	90 e0       	ldi	r25, 0x00	; 0
    b6d8:	80 e0       	ldi	r24, 0x00	; 0
    b6da:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    b6de:	20 e0       	ldi	r18, 0x00	; 0
    b6e0:	30 e0       	ldi	r19, 0x00	; 0
    b6e2:	4a e7       	ldi	r20, 0x7A	; 122
    b6e4:	54 e4       	ldi	r21, 0x44	; 68
    b6e6:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6017
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_pet_volt);
  strcat(str1, ": ");
  dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, str2);
    b6ea:	8e 01       	movw	r16, r28
    b6ec:	0f 5d       	subi	r16, 0xDF	; 223
    b6ee:	1f 4f       	sbci	r17, 0xFF	; 255
    b6f0:	22 e0       	ldi	r18, 0x02	; 2
    b6f2:	44 e0       	ldi	r20, 0x04	; 4
    b6f4:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6018
  strcat(str1, str2);
    b6f8:	b8 01       	movw	r22, r16
    b6fa:	ce 01       	movw	r24, r28
    b6fc:	01 96       	adiw	r24, 0x01	; 1
    b6fe:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6019
  strcat(str1, "V");
    b702:	64 e4       	ldi	r22, 0x44	; 68
    b704:	78 e0       	ldi	r23, 0x08	; 8
    b706:	ce 01       	movw	r24, r28
    b708:	01 96       	adiw	r24, 0x01	; 1
    b70a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6020
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    b70e:	a5 01       	movw	r20, r10
    b710:	47 5e       	subi	r20, 0xE7	; 231
    b712:	5f 4f       	sbci	r21, 0xFF	; 255
    b714:	10 e0       	ldi	r17, 0x00	; 0
    b716:	00 e0       	ldi	r16, 0x00	; 0
    b718:	21 e0       	ldi	r18, 0x01	; 1
    b71a:	b6 01       	movw	r22, r12
    b71c:	ce 01       	movw	r24, r28
    b71e:	01 96       	adiw	r24, 0x01	; 1
    b720:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6022

  strcpy_P(str1, new_text_tritri_volt);
    b724:	68 e3       	ldi	r22, 0x38	; 56
    b726:	76 e8       	ldi	r23, 0x86	; 134
    b728:	ce 01       	movw	r24, r28
    b72a:	01 96       	adiw	r24, 0x01	; 1
    b72c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    b730:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
    b734:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
    b738:	25 e0       	ldi	r18, 0x05	; 5
    b73a:	28 9f       	mul	r18, r24
    b73c:	b0 01       	movw	r22, r0
    b73e:	29 9f       	mul	r18, r25
    b740:	70 0d       	add	r23, r0
    b742:	11 24       	eor	r1, r1
    b744:	90 e0       	ldi	r25, 0x00	; 0
    b746:	80 e0       	ldi	r24, 0x00	; 0
    b748:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    b74c:	20 e0       	ldi	r18, 0x00	; 0
    b74e:	30 e0       	ldi	r19, 0x00	; 0
    b750:	4a e7       	ldi	r20, 0x7A	; 122
    b752:	54 e4       	ldi	r21, 0x44	; 68
    b754:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6023
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_tritri_volt);
  dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, str2);
    b758:	8e 01       	movw	r16, r28
    b75a:	0f 5d       	subi	r16, 0xDF	; 223
    b75c:	1f 4f       	sbci	r17, 0xFF	; 255
    b75e:	22 e0       	ldi	r18, 0x02	; 2
    b760:	44 e0       	ldi	r20, 0x04	; 4
    b762:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6024
  strcat(str1, str2);
    b766:	b8 01       	movw	r22, r16
    b768:	ce 01       	movw	r24, r28
    b76a:	01 96       	adiw	r24, 0x01	; 1
    b76c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6025
  strcat(str1, "V");
    b770:	64 e4       	ldi	r22, 0x44	; 68
    b772:	78 e0       	ldi	r23, 0x08	; 8
    b774:	ce 01       	movw	r24, r28
    b776:	01 96       	adiw	r24, 0x01	; 1
    b778:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6026
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);
    b77c:	a5 01       	movw	r20, r10
    b77e:	48 5d       	subi	r20, 0xD8	; 216
    b780:	5f 4f       	sbci	r21, 0xFF	; 255
    b782:	10 e0       	ldi	r17, 0x00	; 0
    b784:	00 e0       	ldi	r16, 0x00	; 0
    b786:	21 e0       	ldi	r18, 0x01	; 1
    b788:	b6 01       	movw	r22, r12
    b78a:	ce 01       	movw	r24, r28
    b78c:	01 96       	adiw	r24, 0x01	; 1
    b78e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6028

  strcpy_P(str1, new_text_consume_ampere);;
    b792:	69 e2       	ldi	r22, 0x29	; 41
    b794:	76 e8       	ldi	r23, 0x86	; 134
    b796:	ce 01       	movw	r24, r28
    b798:	01 96       	adiw	r24, 0x01	; 1
    b79a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    b79e:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
    b7a2:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
    b7a6:	90 e0       	ldi	r25, 0x00	; 0
    b7a8:	80 e0       	ldi	r24, 0x00	; 0
    b7aa:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6029
  strcat(str1, str2);
  strcat(str1, "V");
  show_string(str1, x + 5 , y + 40 , 1, BLACK, WHITE, 0);

  strcpy_P(str1, new_text_consume_ampere);;
  dtostrf(prepocet_proudu(proud), 4, 2, str2);
    b7ae:	8e 01       	movw	r16, r28
    b7b0:	0f 5d       	subi	r16, 0xDF	; 223
    b7b2:	1f 4f       	sbci	r17, 0xFF	; 255
    b7b4:	22 e0       	ldi	r18, 0x02	; 2
    b7b6:	44 e0       	ldi	r20, 0x04	; 4
    b7b8:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6030
  strcat(str1, str2);
    b7bc:	b8 01       	movw	r22, r16
    b7be:	ce 01       	movw	r24, r28
    b7c0:	01 96       	adiw	r24, 0x01	; 1
    b7c2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6031
  strcat(str1, "mA");
    b7c6:	62 e6       	ldi	r22, 0x62	; 98
    b7c8:	73 e0       	ldi	r23, 0x03	; 3
    b7ca:	ce 01       	movw	r24, r28
    b7cc:	01 96       	adiw	r24, 0x01	; 1
    b7ce:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6032
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    b7d2:	a5 01       	movw	r20, r10
    b7d4:	49 5c       	subi	r20, 0xC9	; 201
    b7d6:	5f 4f       	sbci	r21, 0xFF	; 255
    b7d8:	10 e0       	ldi	r17, 0x00	; 0
    b7da:	00 e0       	ldi	r16, 0x00	; 0
    b7dc:	21 e0       	ldi	r18, 0x01	; 1
    b7de:	b6 01       	movw	r22, r12
    b7e0:	ce 01       	movw	r24, r28
    b7e2:	01 96       	adiw	r24, 0x01	; 1
    b7e4:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6034

  strcpy_P(str1, new_text_internal_temp);
    b7e8:	67 e1       	ldi	r22, 0x17	; 23
    b7ea:	76 e8       	ldi	r23, 0x86	; 134
    b7ec:	ce 01       	movw	r24, r28
    b7ee:	01 96       	adiw	r24, 0x01	; 1
    b7f0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6035
  dtostrf(internal_temp, 4, 2, str2);
    b7f4:	60 91 a6 0c 	lds	r22, 0x0CA6	; 0x800ca6 <internal_temp>
    b7f8:	70 91 a7 0c 	lds	r23, 0x0CA7	; 0x800ca7 <internal_temp+0x1>
    b7fc:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <internal_temp+0x2>
    b800:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <internal_temp+0x3>
    b804:	8e 01       	movw	r16, r28
    b806:	0f 5d       	subi	r16, 0xDF	; 223
    b808:	1f 4f       	sbci	r17, 0xFF	; 255
    b80a:	22 e0       	ldi	r18, 0x02	; 2
    b80c:	44 e0       	ldi	r20, 0x04	; 4
    b80e:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6036
  strcat(str1, str2);
    b812:	b8 01       	movw	r22, r16
    b814:	ce 01       	movw	r24, r28
    b816:	01 96       	adiw	r24, 0x01	; 1
    b818:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6037
  strcat(str1, "C");
    b81c:	6e e1       	ldi	r22, 0x1E	; 30
    b81e:	77 e0       	ldi	r23, 0x07	; 7
    b820:	ce 01       	movw	r24, r28
    b822:	01 96       	adiw	r24, 0x01	; 1
    b824:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6038
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    b828:	a5 01       	movw	r20, r10
    b82a:	4a 5b       	subi	r20, 0xBA	; 186
    b82c:	5f 4f       	sbci	r21, 0xFF	; 255
    b82e:	10 e0       	ldi	r17, 0x00	; 0
    b830:	00 e0       	ldi	r16, 0x00	; 0
    b832:	21 e0       	ldi	r18, 0x01	; 1
    b834:	b6 01       	movw	r22, r12
    b836:	ce 01       	movw	r24, r28
    b838:	01 96       	adiw	r24, 0x01	; 1
    b83a:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6040

  strcpy_P(str1, new_text_selfcheck_test);
    b83e:	6b e0       	ldi	r22, 0x0B	; 11
    b840:	76 e8       	ldi	r23, 0x86	; 134
    b842:	ce 01       	movw	r24, r28
    b844:	01 96       	adiw	r24, 0x01	; 1
    b846:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6041
  itoa(selftest_data, str2, 16);
    b84a:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b84e:	40 e1       	ldi	r20, 0x10	; 16
    b850:	be 01       	movw	r22, r28
    b852:	6f 5d       	subi	r22, 0xDF	; 223
    b854:	7f 4f       	sbci	r23, 0xFF	; 255
    b856:	90 e0       	ldi	r25, 0x00	; 0
    b858:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6042
  strcat(str1, str2);
    b85c:	be 01       	movw	r22, r28
    b85e:	6f 5d       	subi	r22, 0xDF	; 223
    b860:	7f 4f       	sbci	r23, 0xFF	; 255
    b862:	ce 01       	movw	r24, r28
    b864:	01 96       	adiw	r24, 0x01	; 1
    b866:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6043
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    b86a:	a5 01       	movw	r20, r10
    b86c:	4b 5a       	subi	r20, 0xAB	; 171
    b86e:	5f 4f       	sbci	r21, 0xFF	; 255
    b870:	21 e0       	ldi	r18, 0x01	; 1
    b872:	b6 01       	movw	r22, r12
    b874:	ce 01       	movw	r24, r28
    b876:	01 96       	adiw	r24, 0x01	; 1
    b878:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6045

  strcpy_P(str1, new_text_mqtt_send);
    b87c:	69 ef       	ldi	r22, 0xF9	; 249
    b87e:	75 e8       	ldi	r23, 0x85	; 133
    b880:	ce 01       	movw	r24, r28
    b882:	01 96       	adiw	r24, 0x01	; 1
    b884:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b888:	4a e0       	ldi	r20, 0x0A	; 10
    b88a:	be 01       	movw	r22, r28
    b88c:	6f 5d       	subi	r22, 0xDF	; 223
    b88e:	7f 4f       	sbci	r23, 0xFF	; 255
    b890:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
    b894:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
    b898:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6047
  itoa(mqtt_send_message, str2, 10);
  strcat(str1, str2);
    b89c:	be 01       	movw	r22, r28
    b89e:	6f 5d       	subi	r22, 0xDF	; 223
    b8a0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8a2:	ce 01       	movw	r24, r28
    b8a4:	01 96       	adiw	r24, 0x01	; 1
    b8a6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6048
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    b8aa:	a5 01       	movw	r20, r10
    b8ac:	4c 59       	subi	r20, 0x9C	; 156
    b8ae:	5f 4f       	sbci	r21, 0xFF	; 255
    b8b0:	21 e0       	ldi	r18, 0x01	; 1
    b8b2:	b6 01       	movw	r22, r12
    b8b4:	ce 01       	movw	r24, r28
    b8b6:	01 96       	adiw	r24, 0x01	; 1
    b8b8:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6050

  strcpy_P(str1, new_text_mqtt_receive);
    b8bc:	68 ee       	ldi	r22, 0xE8	; 232
    b8be:	75 e8       	ldi	r23, 0x85	; 133
    b8c0:	ce 01       	movw	r24, r28
    b8c2:	01 96       	adiw	r24, 0x01	; 1
    b8c4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b8c8:	4a e0       	ldi	r20, 0x0A	; 10
    b8ca:	be 01       	movw	r22, r28
    b8cc:	6f 5d       	subi	r22, 0xDF	; 223
    b8ce:	7f 4f       	sbci	r23, 0xFF	; 255
    b8d0:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
    b8d4:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
    b8d8:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6052
  itoa(mqtt_receive_message, str2, 10);
  strcat(str1, str2);
    b8dc:	be 01       	movw	r22, r28
    b8de:	6f 5d       	subi	r22, 0xDF	; 223
    b8e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8e2:	ce 01       	movw	r24, r28
    b8e4:	01 96       	adiw	r24, 0x01	; 1
    b8e6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6053
  show_string(str1, x + 5 , y + 115 , 1, BLACK, WHITE, 0);
    b8ea:	a5 01       	movw	r20, r10
    b8ec:	4d 58       	subi	r20, 0x8D	; 141
    b8ee:	5f 4f       	sbci	r21, 0xFF	; 255
    b8f0:	21 e0       	ldi	r18, 0x01	; 1
    b8f2:	b6 01       	movw	r22, r12
    b8f4:	ce 01       	movw	r24, r28
    b8f6:	01 96       	adiw	r24, 0x01	; 1
    b8f8:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6055

  strcpy_P(str1, new_text_mqtt_processed);
    b8fc:	64 ed       	ldi	r22, 0xD4	; 212
    b8fe:	75 e8       	ldi	r23, 0x85	; 133
    b900:	ce 01       	movw	r24, r28
    b902:	01 96       	adiw	r24, 0x01	; 1
    b904:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b908:	4a e0       	ldi	r20, 0x0A	; 10
    b90a:	be 01       	movw	r22, r28
    b90c:	6f 5d       	subi	r22, 0xDF	; 223
    b90e:	7f 4f       	sbci	r23, 0xFF	; 255
    b910:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
    b914:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
    b918:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6057
  itoa(mqtt_process_message, str2, 10);
  strcat(str1, str2);
    b91c:	be 01       	movw	r22, r28
    b91e:	6f 5d       	subi	r22, 0xDF	; 223
    b920:	7f 4f       	sbci	r23, 0xFF	; 255
    b922:	ce 01       	movw	r24, r28
    b924:	01 96       	adiw	r24, 0x01	; 1
    b926:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6058
  show_string(str1, x + 5 , y + 130 , 1, BLACK, WHITE, 0);
    b92a:	a5 01       	movw	r20, r10
    b92c:	4e 57       	subi	r20, 0x7E	; 126
    b92e:	5f 4f       	sbci	r21, 0xFF	; 255
    b930:	21 e0       	ldi	r18, 0x01	; 1
    b932:	b6 01       	movw	r22, r12
    b934:	ce 01       	movw	r24, r28
    b936:	01 96       	adiw	r24, 0x01	; 1
    b938:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6060

  strcpy_P(str1, new_text_mqtt_error);
    b93c:	65 ec       	ldi	r22, 0xC5	; 197
    b93e:	75 e8       	ldi	r23, 0x85	; 133
    b940:	ce 01       	movw	r24, r28
    b942:	01 96       	adiw	r24, 0x01	; 1
    b944:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    b948:	4a e0       	ldi	r20, 0x0A	; 10
    b94a:	be 01       	movw	r22, r28
    b94c:	6f 5d       	subi	r22, 0xDF	; 223
    b94e:	7f 4f       	sbci	r23, 0xFF	; 255
    b950:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
    b954:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
    b958:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z33display_element_show_about_devicejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6062
  itoa(mqtt_error, str2, 10);
  strcat(str1, str2);
    b95c:	be 01       	movw	r22, r28
    b95e:	6f 5d       	subi	r22, 0xDF	; 223
    b960:	7f 4f       	sbci	r23, 0xFF	; 255
    b962:	ce 01       	movw	r24, r28
    b964:	01 96       	adiw	r24, 0x01	; 1
    b966:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6063
  show_string(str1, x + 5 , y + 145 , 1, BLACK, WHITE, 0);
    b96a:	a5 01       	movw	r20, r10
    b96c:	4f 56       	subi	r20, 0x6F	; 111
    b96e:	5f 4f       	sbci	r21, 0xFF	; 255
    b970:	21 e0       	ldi	r18, 0x01	; 1
    b972:	b6 01       	movw	r22, r12
    b974:	ce 01       	movw	r24, r28
    b976:	01 96       	adiw	r24, 0x01	; 1
    b978:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:6064
}
    b97c:	a8 96       	adiw	r28, 0x28	; 40
    b97e:	0f b6       	in	r0, 0x3f	; 63
    b980:	f8 94       	cli
    b982:	de bf       	out	0x3e, r29	; 62
    b984:	0f be       	out	0x3f, r0	; 63
    b986:	cd bf       	out	0x3d, r28	; 61
    b988:	df 91       	pop	r29
    b98a:	cf 91       	pop	r28
    b98c:	1f 91       	pop	r17
    b98e:	0f 91       	pop	r16
    b990:	ff 90       	pop	r15
    b992:	ef 90       	pop	r14
    b994:	df 90       	pop	r13
    b996:	cf 90       	pop	r12
    b998:	bf 90       	pop	r11
    b99a:	af 90       	pop	r10
    b99c:	08 95       	ret

0000b99e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z32display_element_dialog_show_textjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4196
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    b99e:	ef 92       	push	r14
    b9a0:	ff 92       	push	r15
    b9a2:	0f 93       	push	r16
    b9a4:	1f 93       	push	r17
    b9a6:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4197
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    b9a8:	ee 24       	eor	r14, r14
    b9aa:	ea 94       	dec	r14
    b9ac:	fe 2c       	mov	r15, r14
    b9ae:	10 e0       	ldi	r17, 0x00	; 0
    b9b0:	00 e0       	ldi	r16, 0x00	; 0
    b9b2:	22 e0       	ldi	r18, 0x02	; 2
    b9b4:	bc 01       	movw	r22, r24
    b9b6:	85 e1       	ldi	r24, 0x15	; 21
    b9b8:	9a e0       	ldi	r25, 0x0A	; 10
    b9ba:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4198
}
    b9be:	1f 91       	pop	r17
    b9c0:	0f 91       	pop	r16
    b9c2:	ff 90       	pop	r15
    b9c4:	ef 90       	pop	r14
    b9c6:	08 95       	ret

0000b9c8 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4130
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    b9c8:	cf 92       	push	r12
    b9ca:	df 92       	push	r13
    b9cc:	ef 92       	push	r14
    b9ce:	ff 92       	push	r15
    b9d0:	0f 93       	push	r16
    b9d2:	1f 93       	push	r17
    b9d4:	cf 93       	push	r28
    b9d6:	df 93       	push	r29
    b9d8:	cd b7       	in	r28, 0x3d	; 61
    b9da:	de b7       	in	r29, 0x3e	; 62
    b9dc:	68 97       	sbiw	r28, 0x18	; 24
    b9de:	0f b6       	in	r0, 0x3f	; 63
    b9e0:	f8 94       	cli
    b9e2:	de bf       	out	0x3e, r29	; 62
    b9e4:	0f be       	out	0x3f, r0	; 63
    b9e6:	cd bf       	out	0x3d, r28	; 61
    b9e8:	8c 01       	movw	r16, r24
    b9ea:	7b 01       	movw	r14, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    b9ec:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    b9f0:	9e 01       	movw	r18, r28
    b9f2:	2f 5f       	subi	r18, 0xFF	; 255
    b9f4:	3f 4f       	sbci	r19, 0xFF	; 255
    b9f6:	69 01       	movw	r12, r18
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4132

/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[24];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    b9f8:	80 fd       	sbrc	r24, 0
    b9fa:	37 c0       	rjmp	.+110    	; 0xba6a <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4134
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    b9fc:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <now+0x4>
    ba00:	1f 92       	push	r1
    ba02:	8f 93       	push	r24
    ba04:	80 91 77 12 	lds	r24, 0x1277	; 0x801277 <now+0x3>
    ba08:	1f 92       	push	r1
    ba0a:	8f 93       	push	r24
    ba0c:	8f e7       	ldi	r24, 0x7F	; 127
    ba0e:	93 e0       	ldi	r25, 0x03	; 3
    ba10:	9f 93       	push	r25
    ba12:	8f 93       	push	r24
    ba14:	3f 93       	push	r19
    ba16:	2f 93       	push	r18
    ba18:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
    ba1c:	0f b6       	in	r0, 0x3f	; 63
    ba1e:	f8 94       	cli
    ba20:	de bf       	out	0x3e, r29	; 62
    ba22:	0f be       	out	0x3f, r0	; 63
    ba24:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    ba26:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    ba2a:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4141
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    ba2e:	a7 01       	movw	r20, r14
    ba30:	4c 5e       	subi	r20, 0xEC	; 236
    ba32:	5f 4f       	sbci	r21, 0xFF	; 255
    ba34:	b8 01       	movw	r22, r16
    ba36:	6c 5f       	subi	r22, 0xFC	; 252
    ba38:	7f 4f       	sbci	r23, 0xFF	; 255
    ba3a:	ee 24       	eor	r14, r14
    ba3c:	ea 94       	dec	r14
    ba3e:	fe 2c       	mov	r15, r14
    ba40:	10 e0       	ldi	r17, 0x00	; 0
    ba42:	00 e0       	ldi	r16, 0x00	; 0
    ba44:	28 e0       	ldi	r18, 0x08	; 8
    ba46:	c6 01       	movw	r24, r12
    ba48:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4142
}
    ba4c:	68 96       	adiw	r28, 0x18	; 24
    ba4e:	0f b6       	in	r0, 0x3f	; 63
    ba50:	f8 94       	cli
    ba52:	de bf       	out	0x3e, r29	; 62
    ba54:	0f be       	out	0x3f, r0	; 63
    ba56:	cd bf       	out	0x3d, r28	; 61
    ba58:	df 91       	pop	r29
    ba5a:	cf 91       	pop	r28
    ba5c:	1f 91       	pop	r17
    ba5e:	0f 91       	pop	r16
    ba60:	ff 90       	pop	r15
    ba62:	ef 90       	pop	r14
    ba64:	df 90       	pop	r13
    ba66:	cf 90       	pop	r12
    ba68:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4138
  {
    sprintf(str1, "%02d:%02d", now.hour(), now.minute());
  }
  else
  {
    strcpy(str1, "--:--");
    ba6a:	65 e6       	ldi	r22, 0x65	; 101
    ba6c:	73 e0       	ldi	r23, 0x03	; 3
    ba6e:	c9 01       	movw	r24, r18
    ba70:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
    ba74:	d8 cf       	rjmp	.-80     	; 0xba26 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x5e>

0000ba76 <button_set_mqtt_pass_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5901
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    ba76:	70 e0       	ldi	r23, 0x00	; 0
    ba78:	60 e0       	ldi	r22, 0x00	; 0
    ba7a:	87 e6       	ldi	r24, 0x67	; 103
    ba7c:	90 e0       	ldi	r25, 0x00	; 0
    ba7e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    ba82:	63 e5       	ldi	r22, 0x53	; 83
    ba84:	7e e0       	ldi	r23, 0x0E	; 14
    ba86:	85 ef       	ldi	r24, 0xF5	; 245
    ba88:	99 e0       	ldi	r25, 0x09	; 9
    ba8a:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    ba8e:	84 e1       	ldi	r24, 0x14	; 20
    ba90:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    ba94:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    ba98:	88 e2       	ldi	r24, 0x28	; 40
    ba9a:	9e e6       	ldi	r25, 0x6E	; 110
    ba9c:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    baa0:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    baa4:	89 ed       	ldi	r24, 0xD9	; 217
    baa6:	9f e4       	ldi	r25, 0x4F	; 79
    baa8:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    baac:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z28button_set_mqtt_pass_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5903
//// funkce obsluha tlacika nastaveni mqtt klice
void button_set_mqtt_pass_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_key, 20, 0, &helper_dialog_mqtt_set_pass, &valid_true);
}
    bab0:	08 95       	ret

0000bab2 <button_set_mqtt_user_onclick(unsigned int, unsigned int, unsigned char)>:
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5895
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    bab2:	70 e0       	ldi	r23, 0x00	; 0
    bab4:	60 e0       	ldi	r22, 0x00	; 0
    bab6:	87 e6       	ldi	r24, 0x67	; 103
    bab8:	90 e0       	ldi	r25, 0x00	; 0
    baba:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    babe:	6f e3       	ldi	r22, 0x3F	; 63
    bac0:	7e e0       	ldi	r23, 0x0E	; 14
    bac2:	85 ef       	ldi	r24, 0xF5	; 245
    bac4:	99 e0       	ldi	r25, 0x09	; 9
    bac6:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    baca:	84 e1       	ldi	r24, 0x14	; 20
    bacc:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    bad0:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    bad4:	8b e4       	ldi	r24, 0x4B	; 75
    bad6:	9e e6       	ldi	r25, 0x6E	; 110
    bad8:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    badc:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    bae0:	89 ed       	ldi	r24, 0xD9	; 217
    bae2:	9f e4       	ldi	r25, 0x4F	; 79
    bae4:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    bae8:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z28button_set_mqtt_user_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5897
//// funkce obsluha tlacitka nastaveni mqtt uzivatele
void button_set_mqtt_user_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(device.mqtt_user, 20, 0, &helper_dialog_mqtt_set_user, &valid_true);
}
    baec:	08 95       	ret

0000baee <button_set_mqtt_broker_onclick(unsigned int, unsigned int, unsigned char)>:
_Z30button_set_mqtt_broker_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5886


*/
//// funkce obsluha tlacitka nastaveni mqqt serveru
void button_set_mqtt_broker_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    baee:	0f 93       	push	r16
    baf0:	1f 93       	push	r17
    baf2:	cf 93       	push	r28
    baf4:	df 93       	push	r29
    baf6:	cd b7       	in	r28, 0x3d	; 61
    baf8:	de b7       	in	r29, 0x3e	; 62
    bafa:	60 97       	sbiw	r28, 0x10	; 16
    bafc:	0f b6       	in	r0, 0x3f	; 63
    bafe:	f8 94       	cli
    bb00:	de bf       	out	0x3e, r29	; 62
    bb02:	0f be       	out	0x3f, r0	; 63
    bb04:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5888
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bb06:	70 e0       	ldi	r23, 0x00	; 0
    bb08:	60 e0       	ldi	r22, 0x00	; 0
    bb0a:	85 e6       	ldi	r24, 0x65	; 101
    bb0c:	90 e0       	ldi	r25, 0x00	; 0
    bb0e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5889
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
    bb12:	e9 e1       	ldi	r30, 0x19	; 25
    bb14:	fe e0       	ldi	r31, 0x0E	; 14
    bb16:	83 a1       	ldd	r24, Z+35	; 0x23
    bb18:	1f 92       	push	r1
    bb1a:	8f 93       	push	r24
    bb1c:	82 a1       	ldd	r24, Z+34	; 0x22
    bb1e:	1f 92       	push	r1
    bb20:	8f 93       	push	r24
    bb22:	81 a1       	ldd	r24, Z+33	; 0x21
    bb24:	1f 92       	push	r1
    bb26:	8f 93       	push	r24
    bb28:	80 a1       	ldd	r24, Z+32	; 0x20
    bb2a:	1f 92       	push	r1
    bb2c:	8f 93       	push	r24
    bb2e:	85 e3       	ldi	r24, 0x35	; 53
    bb30:	93 e0       	ldi	r25, 0x03	; 3
    bb32:	9f 93       	push	r25
    bb34:	8f 93       	push	r24
    bb36:	8e 01       	movw	r16, r28
    bb38:	0f 5f       	subi	r16, 0xFF	; 255
    bb3a:	1f 4f       	sbci	r17, 0xFF	; 255
    bb3c:	1f 93       	push	r17
    bb3e:	0f 93       	push	r16
    bb40:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    bb44:	b8 01       	movw	r22, r16
    bb46:	85 ef       	ldi	r24, 0xF5	; 245
    bb48:	99 e0       	ldi	r25, 0x09	; 9
    bb4a:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    bb4e:	80 e1       	ldi	r24, 0x10	; 16
    bb50:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    bb54:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    bb58:	8e e6       	ldi	r24, 0x6E	; 110
    bb5a:	9e e6       	ldi	r25, 0x6E	; 110
    bb5c:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    bb60:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    bb64:	8b ed       	ldi	r24, 0xDB	; 219
    bb66:	9f e4       	ldi	r25, 0x4F	; 79
    bb68:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    bb6c:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z30button_set_mqtt_broker_onclickjjh():
    bb70:	0f b6       	in	r0, 0x3f	; 63
    bb72:	f8 94       	cli
    bb74:	de bf       	out	0x3e, r29	; 62
    bb76:	0f be       	out	0x3f, r0	; 63
    bb78:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5891
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.mqtt_server[0], device.mqtt_server[1], device.mqtt_server[2], device.mqtt_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_mqtt_set_server, &valid_ipv4_address_element_string);
}
    bb7a:	60 96       	adiw	r28, 0x10	; 16
    bb7c:	0f b6       	in	r0, 0x3f	; 63
    bb7e:	f8 94       	cli
    bb80:	de bf       	out	0x3e, r29	; 62
    bb82:	0f be       	out	0x3f, r0	; 63
    bb84:	cd bf       	out	0x3d, r28	; 61
    bb86:	df 91       	pop	r29
    bb88:	cf 91       	pop	r28
    bb8a:	1f 91       	pop	r17
    bb8c:	0f 91       	pop	r16
    bb8e:	08 95       	ret

0000bb90 <button_time_set_date_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
  parseBytes(cas_text, ':', tim, 3, 10);
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
}
////
void button_time_set_date_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bb90:	0f 93       	push	r16
    bb92:	1f 93       	push	r17
    bb94:	cf 93       	push	r28
    bb96:	df 93       	push	r29
    bb98:	cd b7       	in	r28, 0x3d	; 61
    bb9a:	de b7       	in	r29, 0x3e	; 62
    bb9c:	2c 97       	sbiw	r28, 0x0c	; 12
    bb9e:	0f b6       	in	r0, 0x3f	; 63
    bba0:	f8 94       	cli
    bba2:	de bf       	out	0x3e, r29	; 62
    bba4:	0f be       	out	0x3f, r0	; 63
    bba6:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5864
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bba8:	70 e0       	ldi	r23, 0x00	; 0
    bbaa:	60 e0       	ldi	r22, 0x00	; 0
    bbac:	85 e6       	ldi	r24, 0x65	; 101
    bbae:	90 e0       	ldi	r25, 0x00	; 0
    bbb0:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    bbb4:	e4 e7       	ldi	r30, 0x74	; 116
    bbb6:	f2 e1       	ldi	r31, 0x12	; 18
    bbb8:	80 81       	ld	r24, Z
    bbba:	90 e0       	ldi	r25, 0x00	; 0
    bbbc:	80 53       	subi	r24, 0x30	; 48
    bbbe:	98 4f       	sbci	r25, 0xF8	; 248
_Z36button_time_set_date_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5865
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
    bbc0:	9f 93       	push	r25
    bbc2:	8f 93       	push	r24
    bbc4:	81 81       	ldd	r24, Z+1	; 0x01
    bbc6:	1f 92       	push	r1
    bbc8:	8f 93       	push	r24
    bbca:	82 81       	ldd	r24, Z+2	; 0x02
    bbcc:	1f 92       	push	r1
    bbce:	8f 93       	push	r24
    bbd0:	8b e6       	ldi	r24, 0x6B	; 107
    bbd2:	93 e0       	ldi	r25, 0x03	; 3
    bbd4:	9f 93       	push	r25
    bbd6:	8f 93       	push	r24
    bbd8:	8e 01       	movw	r16, r28
    bbda:	0f 5f       	subi	r16, 0xFF	; 255
    bbdc:	1f 4f       	sbci	r17, 0xFF	; 255
    bbde:	1f 93       	push	r17
    bbe0:	0f 93       	push	r16
    bbe2:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    bbe6:	b8 01       	movw	r22, r16
    bbe8:	85 ef       	ldi	r24, 0xF5	; 245
    bbea:	99 e0       	ldi	r25, 0x09	; 9
    bbec:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    bbf0:	8b e0       	ldi	r24, 0x0B	; 11
    bbf2:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    bbf6:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    bbfa:	85 e3       	ldi	r24, 0x35	; 53
    bbfc:	98 e6       	ldi	r25, 0x68	; 104
    bbfe:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    bc02:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    bc06:	89 ed       	ldi	r24, 0xD9	; 217
    bc08:	9f e4       	ldi	r25, 0x4F	; 79
    bc0a:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    bc0e:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z36button_time_set_date_manualy_onclickjjh():
    bc12:	0f b6       	in	r0, 0x3f	; 63
    bc14:	f8 94       	cli
    bc16:	de bf       	out	0x3e, r29	; 62
    bc18:	0f be       	out	0x3f, r0	; 63
    bc1a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5867
{
  char datum_text[12];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
    bc1c:	2c 96       	adiw	r28, 0x0c	; 12
    bc1e:	0f b6       	in	r0, 0x3f	; 63
    bc20:	f8 94       	cli
    bc22:	de bf       	out	0x3e, r29	; 62
    bc24:	0f be       	out	0x3f, r0	; 63
    bc26:	cd bf       	out	0x3d, r28	; 61
    bc28:	df 91       	pop	r29
    bc2a:	cf 91       	pop	r28
    bc2c:	1f 91       	pop	r17
    bc2e:	0f 91       	pop	r16
    bc30:	08 95       	ret

0000bc32 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)>:
_Z36button_time_set_time_manualy_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5846
/////////////////////////////////////////////////////////////////////////////////
/*
   Funkce pro rucni nastaveni casu a datumu
*/
void button_time_set_time_manualy_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bc32:	0f 93       	push	r16
    bc34:	1f 93       	push	r17
    bc36:	cf 93       	push	r28
    bc38:	df 93       	push	r29
    bc3a:	00 d0       	rcall	.+0      	; 0xbc3c <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    bc3c:	00 d0       	rcall	.+0      	; 0xbc3e <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    bc3e:	00 d0       	rcall	.+0      	; 0xbc40 <button_time_set_time_manualy_onclick(unsigned int, unsigned int, unsigned char)+0xe>
    bc40:	1f 92       	push	r1
    bc42:	cd b7       	in	r28, 0x3d	; 61
    bc44:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5848
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bc46:	70 e0       	ldi	r23, 0x00	; 0
    bc48:	60 e0       	ldi	r22, 0x00	; 0
    bc4a:	85 e6       	ldi	r24, 0x65	; 101
    bc4c:	90 e0       	ldi	r25, 0x00	; 0
    bc4e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5849
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
    bc52:	e4 e7       	ldi	r30, 0x74	; 116
    bc54:	f2 e1       	ldi	r31, 0x12	; 18
    bc56:	85 81       	ldd	r24, Z+5	; 0x05
    bc58:	1f 92       	push	r1
    bc5a:	8f 93       	push	r24
    bc5c:	84 81       	ldd	r24, Z+4	; 0x04
    bc5e:	1f 92       	push	r1
    bc60:	8f 93       	push	r24
    bc62:	83 81       	ldd	r24, Z+3	; 0x03
    bc64:	1f 92       	push	r1
    bc66:	8f 93       	push	r24
    bc68:	8a e7       	ldi	r24, 0x7A	; 122
    bc6a:	93 e0       	ldi	r25, 0x03	; 3
    bc6c:	9f 93       	push	r25
    bc6e:	8f 93       	push	r24
    bc70:	8e 01       	movw	r16, r28
    bc72:	0f 5f       	subi	r16, 0xFF	; 255
    bc74:	1f 4f       	sbci	r17, 0xFF	; 255
    bc76:	1f 93       	push	r17
    bc78:	0f 93       	push	r16
    bc7a:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    bc7e:	b8 01       	movw	r22, r16
    bc80:	85 ef       	ldi	r24, 0xF5	; 245
    bc82:	99 e0       	ldi	r25, 0x09	; 9
    bc84:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    bc88:	89 e0       	ldi	r24, 0x09	; 9
    bc8a:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    bc8e:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    bc92:	89 e9       	ldi	r24, 0x99	; 153
    bc94:	98 e6       	ldi	r25, 0x68	; 104
    bc96:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    bc9a:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    bc9e:	89 ed       	ldi	r24, 0xD9	; 217
    bca0:	9f e4       	ldi	r25, 0x4F	; 79
    bca2:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    bca6:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z36button_time_set_time_manualy_onclickjjh():
    bcaa:	0f b6       	in	r0, 0x3f	; 63
    bcac:	f8 94       	cli
    bcae:	de bf       	out	0x3e, r29	; 62
    bcb0:	0f be       	out	0x3f, r0	; 63
    bcb2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5851
{
  char cas_text[10];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
    bcb4:	2a 96       	adiw	r28, 0x0a	; 10
    bcb6:	0f b6       	in	r0, 0x3f	; 63
    bcb8:	f8 94       	cli
    bcba:	de bf       	out	0x3e, r29	; 62
    bcbc:	0f be       	out	0x3f, r0	; 63
    bcbe:	cd bf       	out	0x3d, r28	; 61
    bcc0:	df 91       	pop	r29
    bcc2:	cf 91       	pop	r28
    bcc4:	1f 91       	pop	r17
    bcc6:	0f 91       	pop	r16
    bcc8:	08 95       	ret

0000bcca <button_ntp_set_server_onclick(unsigned int, unsigned int, unsigned char)>:
_Z29button_ntp_set_server_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5807
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
///
void button_ntp_set_server_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    bcca:	0f 93       	push	r16
    bccc:	1f 93       	push	r17
    bcce:	cf 93       	push	r28
    bcd0:	df 93       	push	r29
    bcd2:	cd b7       	in	r28, 0x3d	; 61
    bcd4:	de b7       	in	r29, 0x3e	; 62
    bcd6:	60 97       	sbiw	r28, 0x10	; 16
    bcd8:	0f b6       	in	r0, 0x3f	; 63
    bcda:	f8 94       	cli
    bcdc:	de bf       	out	0x3e, r29	; 62
    bcde:	0f be       	out	0x3f, r0	; 63
    bce0:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5809
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
    bce2:	70 e0       	ldi	r23, 0x00	; 0
    bce4:	60 e0       	ldi	r22, 0x00	; 0
    bce6:	85 e6       	ldi	r24, 0x65	; 101
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5810
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
    bcee:	80 91 6a 0e 	lds	r24, 0x0E6A	; 0x800e6a <device+0x51>
    bcf2:	1f 92       	push	r1
    bcf4:	8f 93       	push	r24
    bcf6:	80 91 69 0e 	lds	r24, 0x0E69	; 0x800e69 <device+0x50>
    bcfa:	1f 92       	push	r1
    bcfc:	8f 93       	push	r24
    bcfe:	80 91 68 0e 	lds	r24, 0x0E68	; 0x800e68 <device+0x4f>
    bd02:	1f 92       	push	r1
    bd04:	8f 93       	push	r24
    bd06:	80 91 67 0e 	lds	r24, 0x0E67	; 0x800e67 <device+0x4e>
    bd0a:	1f 92       	push	r1
    bd0c:	8f 93       	push	r24
    bd0e:	85 e3       	ldi	r24, 0x35	; 53
    bd10:	93 e0       	ldi	r25, 0x03	; 3
    bd12:	9f 93       	push	r25
    bd14:	8f 93       	push	r24
    bd16:	8e 01       	movw	r16, r28
    bd18:	0f 5f       	subi	r16, 0xFF	; 255
    bd1a:	1f 4f       	sbci	r17, 0xFF	; 255
    bd1c:	1f 93       	push	r17
    bd1e:	0f 93       	push	r16
    bd20:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    bd24:	b8 01       	movw	r22, r16
    bd26:	85 ef       	ldi	r24, 0xF5	; 245
    bd28:	99 e0       	ldi	r25, 0x09	; 9
    bd2a:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    bd2e:	80 e1       	ldi	r24, 0x10	; 16
    bd30:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    bd34:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    bd38:	83 e9       	ldi	r24, 0x93	; 147
    bd3a:	9e e6       	ldi	r25, 0x6E	; 110
    bd3c:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    bd40:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    bd44:	8b ed       	ldi	r24, 0xDB	; 219
    bd46:	9f e4       	ldi	r25, 0x4F	; 79
    bd48:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    bd4c:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z29button_ntp_set_server_onclickjjh():
    bd50:	0f b6       	in	r0, 0x3f	; 63
    bd52:	f8 94       	cli
    bd54:	de bf       	out	0x3e, r29	; 62
    bd56:	0f be       	out	0x3f, r0	; 63
    bd58:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5812
{
  char ip_text[16];
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}
    bd5a:	60 96       	adiw	r28, 0x10	; 16
    bd5c:	0f b6       	in	r0, 0x3f	; 63
    bd5e:	f8 94       	cli
    bd60:	de bf       	out	0x3e, r29	; 62
    bd62:	0f be       	out	0x3f, r0	; 63
    bd64:	cd bf       	out	0x3d, r28	; 61
    bd66:	df 91       	pop	r29
    bd68:	cf 91       	pop	r28
    bd6a:	1f 91       	pop	r17
    bd6c:	0f 91       	pop	r16
    bd6e:	08 95       	ret

0000bd70 <button_set_brightness_auto_shutdown_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z54button_set_brightness_auto_shutdown_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5634
    sprintf(line2, "Povoleno: %d sec", display_auto_shutdown);
}

void button_set_brightness_auto_shutdown_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_AUTO_SHUTDOWN_SCREEN, 0, 0);
    bd70:	70 e0       	ldi	r23, 0x00	; 0
    bd72:	60 e0       	ldi	r22, 0x00	; 0
    bd74:	8d e9       	ldi	r24, 0x9D	; 157
    bd76:	90 e0       	ldi	r25, 0x00	; 0
    bd78:	0c 94 92 b8 	jmp	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000bd7c <button_change_brightness_display_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z51button_change_brightness_display_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5546
}
///
/// Funce pro nastaveni dialogu pro zobrazeni nastaveni podsvetleni
void button_change_brightness_display_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(NEW_MENU_DISPLAY_NASTAVENI_BRIGTHNESS_SCREEN, 0, 0);
    bd7c:	70 e0       	ldi	r23, 0x00	; 0
    bd7e:	60 e0       	ldi	r22, 0x00	; 0
    bd80:	8b e9       	ldi	r24, 0x9B	; 155
    bd82:	90 e0       	ldi	r25, 0x00	; 0
    bd84:	0c 94 92 b8 	jmp	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000bd88 <dyn_button_show_all_thermostat_dyn_button_onclick(unsigned int, unsigned int, unsigned char)>:
_Z49dyn_button_show_all_thermostat_dyn_button_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
   funkce pro vyber menu nastaveni regulatoru
   args3 je index dynamickeho tlacitka
*/
void dyn_button_show_all_thermostat_dyn_button_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_RING_SCREEN, args3, 0);
    bd88:	64 2f       	mov	r22, r20
    bd8a:	70 e0       	ldi	r23, 0x00	; 0
    bd8c:	89 e0       	ldi	r24, 0x09	; 9
    bd8e:	90 e0       	ldi	r25, 0x00	; 0
    bd90:	0c 94 92 b8 	jmp	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000bd94 <button_change_default_ring_via_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z45button_change_default_ring_via_dialog_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4945
/////

/// funkce vyberu vychozi ringu regulatoru
void button_change_default_ring_via_dialog_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring, 0);
    bd94:	60 91 86 0b 	lds	r22, 0x0B86	; 0x800b86 <default_ring>
    bd98:	70 e0       	ldi	r23, 0x00	; 0
    bd9a:	8a e0       	ldi	r24, 0x0A	; 10
    bd9c:	90 e0       	ldi	r25, 0x00	; 0
    bd9e:	0c 94 92 b8 	jmp	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000bda2 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4657
  tds_associate(idx);
}

/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint16_t args1, uint16_t args2, uint8_t idx)
{
    bda2:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4659
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    bda4:	8b e0       	ldi	r24, 0x0B	; 11
    bda6:	48 9f       	mul	r20, r24
    bda8:	f0 01       	movw	r30, r0
    bdaa:	11 24       	eor	r1, r1
    bdac:	e2 54       	subi	r30, 0x42	; 66
    bdae:	f3 4f       	sbci	r31, 0xF3	; 243
    bdb0:	62 85       	ldd	r22, Z+10	; 0x0a
    bdb2:	6f 3f       	cpi	r22, 0xFF	; 255
    bdb4:	b1 f4       	brne	.+44     	; 0xbde2 <click_tds_associate_or_setting_onewire(unsigned int, unsigned int, unsigned char)+0x40>
    bdb6:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4661
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    bdb8:	70 e0       	ldi	r23, 0x00	; 0
    bdba:	60 e0       	ldi	r22, 0x00	; 0
    bdbc:	84 e6       	ldi	r24, 0x64	; 100
    bdbe:	90 e0       	ldi	r25, 0x00	; 0
    bdc0:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4662
    dialog_yes_function = &helper_tds_associate;
    bdc4:	80 e2       	ldi	r24, 0x20	; 32
    bdc6:	95 e7       	ldi	r25, 0x75	; 117
    bdc8:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    bdcc:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663
    dialog_yes_args1 = idx;
    bdd0:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
    strcpy_P(dialog_text, text_associovat_tds);
    bdd4:	68 ea       	ldi	r22, 0xA8	; 168
    bdd6:	73 e8       	ldi	r23, 0x83	; 131
    bdd8:	85 e1       	ldi	r24, 0x15	; 21
    bdda:	9a e0       	ldi	r25, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4670
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
  }
}
    bddc:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &helper_tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    bdde:	0c 94 9a ee 	jmp	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    bde2:	70 e0       	ldi	r23, 0x00	; 0
    bde4:	84 e0       	ldi	r24, 0x04	; 4
    bde6:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4670
  }
}
    bde8:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx, 0);
    bdea:	0c 94 92 b8 	jmp	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>

0000bdee <display_element_show_time_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_time_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4119
*/


/// dekorativni funkce zobrazeni casu
void display_element_show_time_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    bdee:	af 92       	push	r10
    bdf0:	bf 92       	push	r11
    bdf2:	cf 92       	push	r12
    bdf4:	df 92       	push	r13
    bdf6:	ef 92       	push	r14
    bdf8:	ff 92       	push	r15
    bdfa:	0f 93       	push	r16
    bdfc:	1f 93       	push	r17
    bdfe:	cf 93       	push	r28
    be00:	df 93       	push	r29
    be02:	cd b7       	in	r28, 0x3d	; 61
    be04:	de b7       	in	r29, 0x3e	; 62
    be06:	68 97       	sbiw	r28, 0x18	; 24
    be08:	0f b6       	in	r0, 0x3f	; 63
    be0a:	f8 94       	cli
    be0c:	de bf       	out	0x3e, r29	; 62
    be0e:	0f be       	out	0x3f, r0	; 63
    be10:	cd bf       	out	0x3d, r28	; 61
    be12:	6c 01       	movw	r12, r24
    be14:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4122
  uint16_t pos = 0;
  char str1[24];
  strcpy_P(str1, current_time);
    be16:	64 e0       	ldi	r22, 0x04	; 4
    be18:	73 e8       	ldi	r23, 0x83	; 131
    be1a:	ce 01       	movw	r24, r28
    be1c:	01 96       	adiw	r24, 0x01	; 1
    be1e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4124
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    be22:	a5 01       	movw	r20, r10
    be24:	4b 5f       	subi	r20, 0xFB	; 251
    be26:	5f 4f       	sbci	r21, 0xFF	; 255
    be28:	b6 01       	movw	r22, r12
    be2a:	61 5b       	subi	r22, 0xB1	; 177
    be2c:	7f 4f       	sbci	r23, 0xFF	; 255
    be2e:	ee 24       	eor	r14, r14
    be30:	ea 94       	dec	r14
    be32:	fe 2c       	mov	r15, r14
    be34:	10 e0       	ldi	r17, 0x00	; 0
    be36:	00 e0       	ldi	r16, 0x00	; 0
    be38:	21 e0       	ldi	r18, 0x01	; 1
    be3a:	ce 01       	movw	r24, r28
    be3c:	01 96       	adiw	r24, 0x01	; 1
    be3e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4125
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    be42:	95 01       	movw	r18, r10
    be44:	2c 5a       	subi	r18, 0xAC	; 172
    be46:	3f 4f       	sbci	r19, 0xFF	; 255
    be48:	a6 01       	movw	r20, r12
    be4a:	4c 50       	subi	r20, 0x0C	; 12
    be4c:	5f 4f       	sbci	r21, 0xFF	; 255
    be4e:	b5 01       	movw	r22, r10
    be50:	c6 01       	movw	r24, r12
    be52:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4126
}
    be56:	68 96       	adiw	r28, 0x18	; 24
    be58:	0f b6       	in	r0, 0x3f	; 63
    be5a:	f8 94       	cli
    be5c:	de bf       	out	0x3e, r29	; 62
    be5e:	0f be       	out	0x3f, r0	; 63
    be60:	cd bf       	out	0x3d, r28	; 61
    be62:	df 91       	pop	r29
    be64:	cf 91       	pop	r28
    be66:	1f 91       	pop	r17
    be68:	0f 91       	pop	r16
    be6a:	ff 90       	pop	r15
    be6c:	ef 90       	pop	r14
    be6e:	df 90       	pop	r13
    be70:	cf 90       	pop	r12
    be72:	bf 90       	pop	r11
    be74:	af 90       	pop	r10
    be76:	08 95       	ret

0000be78 <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z25display_element_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4080
}

//-----------------------------------------------------------------------------------------------------------------------------------
void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    be78:	26 0f       	add	r18, r22
    be7a:	37 1f       	adc	r19, r23
    be7c:	48 0f       	add	r20, r24
    be7e:	59 1f       	adc	r21, r25
    be80:	0c 94 b1 b6 	jmp	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>

0000be84 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)>:
_Z30dialog_set_string_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1583
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    be84:	ff 92       	push	r15
    be86:	0f 93       	push	r16
    be88:	1f 93       	push	r17
    be8a:	cf 93       	push	r28
    be8c:	df 93       	push	r29
    be8e:	ec 01       	movw	r28, r24
    be90:	8b 01       	movw	r16, r22
    be92:	f4 2e       	mov	r15, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1584
  if (dialog_save_valid_function() == 1)
    be94:	e0 91 ef 09 	lds	r30, 0x09EF	; 0x8009ef <dialog_save_valid_function>
    be98:	f0 91 f0 09 	lds	r31, 0x09F0	; 0x8009f0 <dialog_save_valid_function+0x1>
    be9c:	19 95       	eicall
    be9e:	81 30       	cpi	r24, 0x01	; 1
    bea0:	79 f4       	brne	.+30     	; 0xbec0 <dialog_set_string_button_click(unsigned int, unsigned int, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1586
  {
    dialog_save_string_function(args1, args2, args3);
    bea2:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <dialog_save_string_function>
    bea6:	f0 91 f2 09 	lds	r31, 0x09F2	; 0x8009f2 <dialog_save_string_function+0x1>
    beaa:	4f 2d       	mov	r20, r15
    beac:	b8 01       	movw	r22, r16
    beae:	ce 01       	movw	r24, r28
    beb0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
    MenuHistoryPrevMenu(0, 0, 0);
  }
}
    beb2:	df 91       	pop	r29
    beb4:	cf 91       	pop	r28
    beb6:	1f 91       	pop	r17
    beb8:	0f 91       	pop	r16
    beba:	ff 90       	pop	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1587
void dialog_set_string_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_save_valid_function() == 1)
  {
    dialog_save_string_function(args1, args2, args3);
    MenuHistoryPrevMenu(0, 0, 0);
    bebc:	0c 94 88 b8 	jmp	0x17110	; 0x17110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1589
  }
}
    bec0:	df 91       	pop	r29
    bec2:	cf 91       	pop	r28
    bec4:	1f 91       	pop	r17
    bec6:	0f 91       	pop	r16
    bec8:	ff 90       	pop	r15
    beca:	08 95       	ret

0000becc <dialog_set_variable_button_click(unsigned int, unsigned int, unsigned char)>:
_Z32dialog_set_variable_button_clickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1577
  dialog_yes_function(dialog_yes_args1, 0, 0);
  MenuHistoryPrevMenu(0, 0, 0);
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
    becc:	1f 93       	push	r17
    bece:	cf 93       	push	r28
    bed0:	df 93       	push	r29
    bed2:	ec 01       	movw	r28, r24
    bed4:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1578
  menu_dialog_variable[args1].save_function(args1, args2, args3);
    bed6:	90 e0       	ldi	r25, 0x00	; 0
    bed8:	80 e0       	ldi	r24, 0x00	; 0
    beda:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
    bede:	ab 01       	movw	r20, r22
    bee0:	bc 01       	movw	r22, r24
    bee2:	85 e1       	ldi	r24, 0x15	; 21
    bee4:	8c 9f       	mul	r24, r28
    bee6:	f0 01       	movw	r30, r0
    bee8:	8d 9f       	mul	r24, r29
    beea:	f0 0d       	add	r31, r0
    beec:	11 24       	eor	r1, r1
    beee:	e5 56       	subi	r30, 0x65	; 101
    bef0:	f6 4f       	sbci	r31, 0xF6	; 246
    bef2:	03 88       	ldd	r0, Z+19	; 0x13
    bef4:	f4 89       	ldd	r31, Z+20	; 0x14
    bef6:	e0 2d       	mov	r30, r0
    bef8:	21 2f       	mov	r18, r17
    befa:	ce 01       	movw	r24, r28
    befc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1580
  MenuHistoryPrevMenu(0, 0, 0);
}
    befe:	df 91       	pop	r29
    bf00:	cf 91       	pop	r28
    bf02:	1f 91       	pop	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1579
}

void dialog_set_variable_button_click(uint16_t args1, uint16_t args2, uint8_t args3)
{
  menu_dialog_variable[args1].save_function(args1, args2, args3);
  MenuHistoryPrevMenu(0, 0, 0);
    bf04:	0c 94 88 b8 	jmp	0x17110	; 0x17110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000bf08 <click_dialog_button_yes(unsigned int, unsigned int, unsigned char)>:
_Z23click_dialog_button_yesjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1572
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint16_t args1, uint16_t args2, uint8_t args3)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    bf08:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <dialog_yes_args1>
    bf0c:	e0 91 97 09 	lds	r30, 0x0997	; 0x800997 <dialog_yes_function>
    bf10:	f0 91 98 09 	lds	r31, 0x0998	; 0x800998 <dialog_yes_function+0x1>
    bf14:	40 e0       	ldi	r20, 0x00	; 0
    bf16:	70 e0       	ldi	r23, 0x00	; 0
    bf18:	60 e0       	ldi	r22, 0x00	; 0
    bf1a:	90 e0       	ldi	r25, 0x00	; 0
    bf1c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1573
  MenuHistoryPrevMenu(0, 0, 0);
    bf1e:	0c 94 88 b8 	jmp	0x17110	; 0x17110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000bf22 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4354
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    bf22:	4f 92       	push	r4
    bf24:	5f 92       	push	r5
    bf26:	6f 92       	push	r6
    bf28:	7f 92       	push	r7
    bf2a:	8f 92       	push	r8
    bf2c:	9f 92       	push	r9
    bf2e:	af 92       	push	r10
    bf30:	bf 92       	push	r11
    bf32:	cf 92       	push	r12
    bf34:	df 92       	push	r13
    bf36:	ef 92       	push	r14
    bf38:	ff 92       	push	r15
    bf3a:	0f 93       	push	r16
    bf3c:	1f 93       	push	r17
    bf3e:	cf 93       	push	r28
    bf40:	df 93       	push	r29
    bf42:	ec 01       	movw	r28, r24
    bf44:	7b 01       	movw	r14, r22
    bf46:	3a 01       	movw	r6, r20
    bf48:	69 01       	movw	r12, r18
    bf4a:	28 01       	movw	r4, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bf4c:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    bf50:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    bf54:	10 e0       	ldi	r17, 0x00	; 0
    bf56:	00 e0       	ldi	r16, 0x00	; 0
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4358
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    bf58:	4b 01       	movw	r8, r22
    bf5a:	82 0e       	add	r8, r18
    bf5c:	93 1e       	adc	r9, r19
    bf5e:	5c 01       	movw	r10, r24
    bf60:	a4 0e       	add	r10, r20
    bf62:	b5 1e       	adc	r11, r21
    bf64:	94 01       	movw	r18, r8
    bf66:	20 1b       	sub	r18, r16
    bf68:	31 0b       	sbc	r19, r17
    bf6a:	a5 01       	movw	r20, r10
    bf6c:	40 1b       	sub	r20, r16
    bf6e:	51 0b       	sbc	r21, r17
    bf70:	b8 01       	movw	r22, r16
    bf72:	6e 0d       	add	r22, r14
    bf74:	7f 1d       	adc	r23, r15
    bf76:	c8 01       	movw	r24, r16
    bf78:	8c 0f       	add	r24, r28
    bf7a:	9d 1f       	adc	r25, r29
    bf7c:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    bf80:	0f 5f       	subi	r16, 0xFF	; 255
    bf82:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4357
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    bf84:	03 30       	cpi	r16, 0x03	; 3
    bf86:	11 05       	cpc	r17, r1
    bf88:	69 f7       	brne	.-38     	; 0xbf64 <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x42>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bf8a:	8f ef       	ldi	r24, 0xFF	; 255
    bf8c:	9f ef       	ldi	r25, 0xFF	; 255
    bf8e:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    bf92:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4360
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    bf96:	83 e0       	ldi	r24, 0x03	; 3
    bf98:	68 1a       	sub	r6, r24
    bf9a:	71 08       	sbc	r7, r1
    bf9c:	6c 0e       	add	r6, r28
    bf9e:	7d 1e       	adc	r7, r29
    bfa0:	23 96       	adiw	r28, 0x03	; 3
    bfa2:	96 01       	movw	r18, r12
    bfa4:	23 50       	subi	r18, 0x03	; 3
    bfa6:	31 09       	sbc	r19, r1
    bfa8:	2e 0d       	add	r18, r14
    bfaa:	3f 1d       	adc	r19, r15
    bfac:	b7 01       	movw	r22, r14
    bfae:	6d 5f       	subi	r22, 0xFD	; 253
    bfb0:	7f 4f       	sbci	r23, 0xFF	; 255
    bfb2:	a3 01       	movw	r20, r6
    bfb4:	ce 01       	movw	r24, r28
    bfb6:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    bfba:	60 91 92 09 	lds	r22, 0x0992	; 0x800992 <menu_slider_data_max>
    bfbe:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <menu_slider_data_max_element>
    bfc2:	68 1b       	sub	r22, r24
    bfc4:	77 0b       	sbc	r23, r23
    bfc6:	6f 5f       	subi	r22, 0xFF	; 255
    bfc8:	7f 4f       	sbci	r23, 0xFF	; 255
    bfca:	c6 01       	movw	r24, r12
    bfcc:	0e 94 88 f8 	call	0x1f110	; 0x1f110 <__udivmodhi4>
    bfd0:	f2 01       	movw	r30, r4
    bfd2:	e6 57       	subi	r30, 0x76	; 118
    bfd4:	f6 4f       	sbci	r31, 0xF6	; 246
    bfd6:	80 81       	ld	r24, Z
    bfd8:	86 9f       	mul	r24, r22
    bfda:	60 2d       	mov	r22, r0
    bfdc:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bfde:	8a e9       	ldi	r24, 0x9A	; 154
    bfe0:	96 ed       	ldi	r25, 0xD6	; 214
    bfe2:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    bfe6:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    bfea:	6e 0d       	add	r22, r14
    bfec:	7f 2d       	mov	r23, r15
    bfee:	71 1d       	adc	r23, r1
    bff0:	9b 01       	movw	r18, r22
    bff2:	26 5f       	subi	r18, 0xF6	; 246
    bff4:	3f 4f       	sbci	r19, 0xFF	; 255
    bff6:	6b 5f       	subi	r22, 0xFB	; 251
    bff8:	7f 4f       	sbci	r23, 0xFF	; 255
    bffa:	a3 01       	movw	r20, r6
    bffc:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4364
}
    bffe:	df 91       	pop	r29
    c000:	cf 91       	pop	r28
    c002:	1f 91       	pop	r17
    c004:	0f 91       	pop	r16
    c006:	ff 90       	pop	r15
    c008:	ef 90       	pop	r14
    c00a:	df 90       	pop	r13
    c00c:	cf 90       	pop	r12
    c00e:	bf 90       	pop	r11
    c010:	af 90       	pop	r10
    c012:	9f 90       	pop	r9
    c014:	8f 90       	pop	r8
    c016:	7f 90       	pop	r7
    c018:	6f 90       	pop	r6
    c01a:	5f 90       	pop	r5
    c01c:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    c01e:	0c 94 6b b6 	jmp	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>

0000c022 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
  if (strlen(text) > 0)
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c022:	6f 92       	push	r6
    c024:	7f 92       	push	r7
    c026:	8f 92       	push	r8
    c028:	9f 92       	push	r9
    c02a:	af 92       	push	r10
    c02c:	bf 92       	push	r11
    c02e:	cf 92       	push	r12
    c030:	df 92       	push	r13
    c032:	ef 92       	push	r14
    c034:	ff 92       	push	r15
    c036:	0f 93       	push	r16
    c038:	1f 93       	push	r17
    c03a:	cf 93       	push	r28
    c03c:	df 93       	push	r29
    c03e:	6c 01       	movw	r12, r24
    c040:	8b 01       	movw	r16, r22
    c042:	3a 01       	movw	r6, r20
    c044:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c046:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    c04a:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    c04e:	f1 2c       	mov	r15, r1
    c050:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4337
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    c052:	4b 01       	movw	r8, r22
    c054:	82 0e       	add	r8, r18
    c056:	93 1e       	adc	r9, r19
    c058:	5c 01       	movw	r10, r24
    c05a:	a4 0e       	add	r10, r20
    c05c:	b5 1e       	adc	r11, r21
    c05e:	94 01       	movw	r18, r8
    c060:	2e 19       	sub	r18, r14
    c062:	3f 09       	sbc	r19, r15
    c064:	a5 01       	movw	r20, r10
    c066:	4e 19       	sub	r20, r14
    c068:	5f 09       	sbc	r21, r15
    c06a:	b7 01       	movw	r22, r14
    c06c:	60 0f       	add	r22, r16
    c06e:	71 1f       	adc	r23, r17
    c070:	c7 01       	movw	r24, r14
    c072:	8c 0d       	add	r24, r12
    c074:	9d 1d       	adc	r25, r13
    c076:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    c07a:	2f ef       	ldi	r18, 0xFF	; 255
    c07c:	e2 1a       	sub	r14, r18
    c07e:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4336
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    c080:	83 e0       	ldi	r24, 0x03	; 3
    c082:	e8 16       	cp	r14, r24
    c084:	f1 04       	cpc	r15, r1
    c086:	59 f7       	brne	.-42     	; 0xc05e <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c088:	8f ef       	ldi	r24, 0xFF	; 255
    c08a:	9f ef       	ldi	r25, 0xFF	; 255
    c08c:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    c090:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    c094:	9e 01       	movw	r18, r28
    c096:	23 50       	subi	r18, 0x03	; 3
    c098:	31 09       	sbc	r19, r1
    c09a:	20 0f       	add	r18, r16
    c09c:	31 1f       	adc	r19, r17
    c09e:	a3 01       	movw	r20, r6
    c0a0:	43 50       	subi	r20, 0x03	; 3
    c0a2:	51 09       	sbc	r21, r1
    c0a4:	4c 0d       	add	r20, r12
    c0a6:	5d 1d       	adc	r21, r13
    c0a8:	b8 01       	movw	r22, r16
    c0aa:	6d 5f       	subi	r22, 0xFD	; 253
    c0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c0ae:	c6 01       	movw	r24, r12
    c0b0:	03 96       	adiw	r24, 0x03	; 3
    c0b2:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c0b6:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    c0ba:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    c0be:	85 ef       	ldi	r24, 0xF5	; 245
    c0c0:	99 e0       	ldi	r25, 0x09	; 9
    c0c2:	fc 01       	movw	r30, r24
    c0c4:	01 90       	ld	r0, Z+
    c0c6:	00 20       	and	r0, r0
    c0c8:	e9 f7       	brne	.-6      	; 0xc0c4 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xa2>
    c0ca:	cf 01       	movw	r24, r30
    c0cc:	86 5f       	subi	r24, 0xF6	; 246
    c0ce:	99 40       	sbci	r25, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    c0d0:	ae 01       	movw	r20, r28
    c0d2:	4c 50       	subi	r20, 0x0C	; 12
    c0d4:	51 09       	sbc	r21, r1
    c0d6:	56 95       	lsr	r21
    c0d8:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4345
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c0da:	01 50       	subi	r16, 0x01	; 1
    c0dc:	11 09       	sbc	r17, r1
    c0de:	40 0f       	add	r20, r16
    c0e0:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    c0e2:	f6 e0       	ldi	r31, 0x06	; 6
    c0e4:	8f 9f       	mul	r24, r31
    c0e6:	c0 01       	movw	r24, r0
    c0e8:	11 24       	eor	r1, r1
    c0ea:	88 0f       	add	r24, r24
    c0ec:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    c0ee:	b3 01       	movw	r22, r6
    c0f0:	68 1b       	sub	r22, r24
    c0f2:	79 0b       	sbc	r23, r25
    c0f4:	76 95       	lsr	r23
    c0f6:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4345
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c0f8:	6c 0d       	add	r22, r12
    c0fa:	7d 1d       	adc	r23, r13
    c0fc:	ee 24       	eor	r14, r14
    c0fe:	ea 94       	dec	r14
    c100:	fe 2c       	mov	r15, r14
    c102:	10 e0       	ldi	r17, 0x00	; 0
    c104:	00 e0       	ldi	r16, 0x00	; 0
    c106:	22 e0       	ldi	r18, 0x02	; 2
    c108:	85 ef       	ldi	r24, 0xF5	; 245
    c10a:	99 e0       	ldi	r25, 0x09	; 9
    c10c:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4346
}
    c110:	df 91       	pop	r29
    c112:	cf 91       	pop	r28
    c114:	1f 91       	pop	r17
    c116:	0f 91       	pop	r16
    c118:	ff 90       	pop	r15
    c11a:	ef 90       	pop	r14
    c11c:	df 90       	pop	r13
    c11e:	cf 90       	pop	r12
    c120:	bf 90       	pop	r11
    c122:	af 90       	pop	r10
    c124:	9f 90       	pop	r9
    c126:	8f 90       	pop	r8
    c128:	7f 90       	pop	r7
    c12a:	6f 90       	pop	r6
    c12c:	08 95       	ret

0000c12e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4304
    }
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t idx, uint8_t args2, char *text)
{
    c12e:	2f 92       	push	r2
    c130:	3f 92       	push	r3
    c132:	4f 92       	push	r4
    c134:	5f 92       	push	r5
    c136:	6f 92       	push	r6
    c138:	7f 92       	push	r7
    c13a:	8f 92       	push	r8
    c13c:	9f 92       	push	r9
    c13e:	af 92       	push	r10
    c140:	bf 92       	push	r11
    c142:	cf 92       	push	r12
    c144:	df 92       	push	r13
    c146:	ef 92       	push	r14
    c148:	ff 92       	push	r15
    c14a:	0f 93       	push	r16
    c14c:	1f 93       	push	r17
    c14e:	cf 93       	push	r28
    c150:	df 93       	push	r29
    c152:	00 d0       	rcall	.+0      	; 0xc154 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x26>
    c154:	00 d0       	rcall	.+0      	; 0xc156 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x28>
    c156:	00 d0       	rcall	.+0      	; 0xc158 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x2a>
    c158:	1f 92       	push	r1
    c15a:	1f 92       	push	r1
    c15c:	cd b7       	in	r28, 0x3d	; 61
    c15e:	de b7       	in	r29, 0x3e	; 62
    c160:	5c 01       	movw	r10, r24
    c162:	7b 01       	movw	r14, r22
    c164:	2a 01       	movw	r4, r20
    c166:	39 01       	movw	r6, r18
    c168:	18 01       	movw	r2, r16
    c16a:	46 01       	movw	r8, r12
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c16c:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    c170:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
    c174:	10 e0       	ldi	r17, 0x00	; 0
    c176:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    c178:	9b 01       	movw	r18, r22
    c17a:	26 0d       	add	r18, r6
    c17c:	37 1d       	adc	r19, r7
    c17e:	3b 87       	std	Y+11, r19	; 0x0b
    c180:	2a 87       	std	Y+10, r18	; 0x0a
    c182:	6c 01       	movw	r12, r24
    c184:	c4 0e       	add	r12, r20
    c186:	d5 1e       	adc	r13, r21
    c188:	2a 85       	ldd	r18, Y+10	; 0x0a
    c18a:	3b 85       	ldd	r19, Y+11	; 0x0b
    c18c:	20 1b       	sub	r18, r16
    c18e:	31 0b       	sbc	r19, r17
    c190:	a6 01       	movw	r20, r12
    c192:	40 1b       	sub	r20, r16
    c194:	51 0b       	sbc	r21, r17
    c196:	b8 01       	movw	r22, r16
    c198:	6e 0d       	add	r22, r14
    c19a:	7f 1d       	adc	r23, r15
    c19c:	c8 01       	movw	r24, r16
    c19e:	8a 0d       	add	r24, r10
    c1a0:	9b 1d       	adc	r25, r11
    c1a2:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
    c1a6:	0f 5f       	subi	r16, 0xFF	; 255
    c1a8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    c1aa:	03 30       	cpi	r16, 0x03	; 3
    c1ac:	11 05       	cpc	r17, r1
    c1ae:	61 f7       	brne	.-40     	; 0xc188 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x5a>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c1b0:	8f ef       	ldi	r24, 0xFF	; 255
    c1b2:	9f ef       	ldi	r25, 0xFF	; 255
    c1b4:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    c1b8:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    c1bc:	93 01       	movw	r18, r6
    c1be:	23 50       	subi	r18, 0x03	; 3
    c1c0:	31 09       	sbc	r19, r1
    c1c2:	2e 0d       	add	r18, r14
    c1c4:	3f 1d       	adc	r19, r15
    c1c6:	a2 01       	movw	r20, r4
    c1c8:	43 50       	subi	r20, 0x03	; 3
    c1ca:	51 09       	sbc	r21, r1
    c1cc:	4a 0d       	add	r20, r10
    c1ce:	5b 1d       	adc	r21, r11
    c1d0:	b7 01       	movw	r22, r14
    c1d2:	6d 5f       	subi	r22, 0xFD	; 253
    c1d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c1d6:	c5 01       	movw	r24, r10
    c1d8:	03 96       	adiw	r24, 0x03	; 3
    c1da:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_FLOAT)
    c1de:	85 e1       	ldi	r24, 0x15	; 21
    c1e0:	82 9d       	mul	r24, r2
    c1e2:	f0 01       	movw	r30, r0
    c1e4:	83 9d       	mul	r24, r3
    c1e6:	f0 0d       	add	r31, r0
    c1e8:	11 24       	eor	r1, r1
    c1ea:	e5 56       	subi	r30, 0x65	; 101
    c1ec:	f6 4f       	sbci	r31, 0xF6	; 246
    c1ee:	85 85       	ldd	r24, Z+13	; 0x0d
    c1f0:	9e 01       	movw	r18, r28
    c1f2:	2f 5f       	subi	r18, 0xFF	; 255
    c1f4:	3f 4f       	sbci	r19, 0xFF	; 255
    c1f6:	69 01       	movw	r12, r18
    c1f8:	81 11       	cpse	r24, r1
    c1fa:	09 c0       	rjmp	.+18     	; 0xc20e <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4316
    dtostrf(menu_dialog_variable[idx].variable_now, 4, 2, line1);
    c1fc:	60 81       	ld	r22, Z
    c1fe:	71 81       	ldd	r23, Z+1	; 0x01
    c200:	82 81       	ldd	r24, Z+2	; 0x02
    c202:	93 81       	ldd	r25, Z+3	; 0x03
    c204:	89 01       	movw	r16, r18
    c206:	22 e0       	ldi	r18, 0x02	; 2
    c208:	44 e0       	ldi	r20, 0x04	; 4
    c20a:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318

  if (menu_dialog_variable[idx].number_type == NUMBER_TYPE_INT)
    c20e:	85 e1       	ldi	r24, 0x15	; 21
    c210:	82 9d       	mul	r24, r2
    c212:	f0 01       	movw	r30, r0
    c214:	83 9d       	mul	r24, r3
    c216:	f0 0d       	add	r31, r0
    c218:	11 24       	eor	r1, r1
    c21a:	e5 56       	subi	r30, 0x65	; 101
    c21c:	f6 4f       	sbci	r31, 0xF6	; 246
    c21e:	85 85       	ldd	r24, Z+13	; 0x0d
    c220:	81 30       	cpi	r24, 0x01	; 1
    c222:	59 f4       	brne	.+22     	; 0xc23a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);
    c224:	60 81       	ld	r22, Z
    c226:	71 81       	ldd	r23, Z+1	; 0x01
    c228:	82 81       	ldd	r24, Z+2	; 0x02
    c22a:	93 81       	ldd	r25, Z+3	; 0x03
    c22c:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
    c230:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    c232:	4a e0       	ldi	r20, 0x0A	; 10
    c234:	b6 01       	movw	r22, r12
    c236:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c23a:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    c23e:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    c242:	f6 01       	movw	r30, r12
    c244:	01 90       	ld	r0, Z+
    c246:	00 20       	and	r0, r0
    c248:	e9 f7       	brne	.-6      	; 0xc244 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x116>
    c24a:	31 97       	sbiw	r30, 0x01	; 1
    c24c:	ec 19       	sub	r30, r12
    c24e:	fd 09       	sbc	r31, r13
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    c250:	3c e0       	ldi	r19, 0x0C	; 12
    c252:	63 1a       	sub	r6, r19
    c254:	71 08       	sbc	r7, r1
    c256:	76 94       	lsr	r7
    c258:	67 94       	ror	r6
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c25a:	81 e0       	ldi	r24, 0x01	; 1
    c25c:	e8 1a       	sub	r14, r24
    c25e:	f1 08       	sbc	r15, r1
    c260:	6e 0c       	add	r6, r14
    c262:	7f 1c       	adc	r7, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    c264:	96 e0       	ldi	r25, 0x06	; 6
    c266:	e9 9f       	mul	r30, r25
    c268:	f0 01       	movw	r30, r0
    c26a:	11 24       	eor	r1, r1
    c26c:	ee 0f       	add	r30, r30
    c26e:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
    itoa(menu_dialog_variable[idx].variable_now, line1, 10);

  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    c270:	b2 01       	movw	r22, r4
    c272:	6e 1b       	sub	r22, r30
    c274:	7f 0b       	sbc	r23, r31
    c276:	76 95       	lsr	r23
    c278:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c27a:	6a 0d       	add	r22, r10
    c27c:	7b 1d       	adc	r23, r11
    c27e:	ee 24       	eor	r14, r14
    c280:	ea 94       	dec	r14
    c282:	fe 2c       	mov	r15, r14
    c284:	10 e0       	ldi	r17, 0x00	; 0
    c286:	00 e0       	ldi	r16, 0x00	; 0
    c288:	22 e0       	ldi	r18, 0x02	; 2
    c28a:	a3 01       	movw	r20, r6
    c28c:	c6 01       	movw	r24, r12
    c28e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328

  if (strlen(text) > 0)
    c292:	f4 01       	movw	r30, r8
    c294:	80 81       	ld	r24, Z
    c296:	88 23       	and	r24, r24
    c298:	41 f0       	breq	.+16     	; 0xc2aa <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x17c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4329
    show_string(text, x + 5 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    c29a:	b5 01       	movw	r22, r10
    c29c:	6b 5f       	subi	r22, 0xFB	; 251
    c29e:	7f 4f       	sbci	r23, 0xFF	; 255
    c2a0:	22 e0       	ldi	r18, 0x02	; 2
    c2a2:	a3 01       	movw	r20, r6
    c2a4:	c4 01       	movw	r24, r8
    c2a6:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
}
    c2aa:	2b 96       	adiw	r28, 0x0b	; 11
    c2ac:	0f b6       	in	r0, 0x3f	; 63
    c2ae:	f8 94       	cli
    c2b0:	de bf       	out	0x3e, r29	; 62
    c2b2:	0f be       	out	0x3f, r0	; 63
    c2b4:	cd bf       	out	0x3d, r28	; 61
    c2b6:	df 91       	pop	r29
    c2b8:	cf 91       	pop	r28
    c2ba:	1f 91       	pop	r17
    c2bc:	0f 91       	pop	r16
    c2be:	ff 90       	pop	r15
    c2c0:	ef 90       	pop	r14
    c2c2:	df 90       	pop	r13
    c2c4:	cf 90       	pop	r12
    c2c6:	bf 90       	pop	r11
    c2c8:	af 90       	pop	r10
    c2ca:	9f 90       	pop	r9
    c2cc:	8f 90       	pop	r8
    c2ce:	7f 90       	pop	r7
    c2d0:	6f 90       	pop	r6
    c2d2:	5f 90       	pop	r5
    c2d4:	4f 90       	pop	r4
    c2d6:	3f 90       	pop	r3
    c2d8:	2f 90       	pop	r2
    c2da:	08 95       	ret

0000c2dc <display_element_fill_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z30display_element_fill_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4084
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

void display_element_fill_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c2dc:	0f 93       	push	r16
    c2de:	1f 93       	push	r17
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c2e0:	10 93 c4 0f 	sts	0x0FC4, r17	; 0x800fc4 <my_lcd+0xb>
    c2e4:	00 93 c3 0f 	sts	0x0FC3, r16	; 0x800fc3 <my_lcd+0xa>
_Z30display_element_fill_rectanglejjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
  my_lcd.Set_Draw_color(args1);
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c2e8:	26 0f       	add	r18, r22
    c2ea:	37 1f       	adc	r19, r23
    c2ec:	48 0f       	add	r20, r24
    c2ee:	59 1f       	adc	r21, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4087
}
    c2f0:	1f 91       	pop	r17
    c2f2:	0f 91       	pop	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4086
}

void display_element_fill_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  my_lcd.Set_Draw_color(args1);
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    c2f4:	0c 94 6b b6 	jmp	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>

0000c2f8 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4182
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
  }
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    c2f8:	af 92       	push	r10
    c2fa:	bf 92       	push	r11
    c2fc:	cf 92       	push	r12
    c2fe:	df 92       	push	r13
    c300:	ef 92       	push	r14
    c302:	ff 92       	push	r15
    c304:	0f 93       	push	r16
    c306:	1f 93       	push	r17
    c308:	cf 93       	push	r28
    c30a:	df 93       	push	r29
    c30c:	cd b7       	in	r28, 0x3d	; 61
    c30e:	de b7       	in	r29, 0x3e	; 62
    c310:	60 97       	sbiw	r28, 0x10	; 16
    c312:	0f b6       	in	r0, 0x3f	; 63
    c314:	f8 94       	cli
    c316:	de bf       	out	0x3e, r29	; 62
    c318:	0f be       	out	0x3f, r0	; 63
    c31a:	cd bf       	out	0x3d, r28	; 61
    c31c:	5c 01       	movw	r10, r24
    c31e:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    c320:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    c324:	9e 01       	movw	r18, r28
    c326:	2f 5f       	subi	r18, 0xFF	; 255
    c328:	3f 4f       	sbci	r19, 0xFF	; 255
    c32a:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4184
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    c32c:	80 fd       	sbrc	r24, 0
    c32e:	4e c0       	rjmp	.+156    	; 0xc3cc <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    c330:	80 91 74 12 	lds	r24, 0x1274	; 0x801274 <now>
    c334:	90 e0       	ldi	r25, 0x00	; 0
    c336:	80 53       	subi	r24, 0x30	; 48
    c338:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4186
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    c33a:	9f 93       	push	r25
    c33c:	8f 93       	push	r24
    c33e:	80 91 75 12 	lds	r24, 0x1275	; 0x801275 <now+0x1>
    c342:	1f 92       	push	r1
    c344:	8f 93       	push	r24
    c346:	80 91 76 12 	lds	r24, 0x1276	; 0x801276 <now+0x2>
    c34a:	1f 92       	push	r1
    c34c:	8f 93       	push	r24
    c34e:	8b e6       	ldi	r24, 0x6B	; 107
    c350:	93 e0       	ldi	r25, 0x03	; 3
    c352:	9f 93       	push	r25
    c354:	8f 93       	push	r24
    c356:	3f 93       	push	r19
    c358:	2f 93       	push	r18
    c35a:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
    c35e:	0f b6       	in	r0, 0x3f	; 63
    c360:	f8 94       	cli
    c362:	de bf       	out	0x3e, r29	; 62
    c364:	0f be       	out	0x3f, r0	; 63
    c366:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    c368:	8f ef       	ldi	r24, 0xFF	; 255
    c36a:	9f ef       	ldi	r25, 0xFF	; 255
    c36c:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
    c370:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4192
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    c374:	4e e8       	ldi	r20, 0x8E	; 142
    c376:	50 e0       	ldi	r21, 0x00	; 0
    c378:	b8 01       	movw	r22, r16
    c37a:	c5 01       	movw	r24, r10
    c37c:	0e 94 9b b6 	call	0x16d36	; 0x16d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
    c380:	b8 01       	movw	r22, r16
    c382:	6f 5f       	subi	r22, 0xFF	; 255
    c384:	7f 4f       	sbci	r23, 0xFF	; 255
    c386:	4e e8       	ldi	r20, 0x8E	; 142
    c388:	50 e0       	ldi	r21, 0x00	; 0
    c38a:	c5 01       	movw	r24, r10
    c38c:	0e 94 9b b6 	call	0x16d36	; 0x16d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
    c390:	a8 01       	movw	r20, r16
    c392:	4e 5f       	subi	r20, 0xFE	; 254
    c394:	5f 4f       	sbci	r21, 0xFF	; 255
    c396:	ee 24       	eor	r14, r14
    c398:	ea 94       	dec	r14
    c39a:	fe 2c       	mov	r15, r14
    c39c:	10 e0       	ldi	r17, 0x00	; 0
    c39e:	00 e0       	ldi	r16, 0x00	; 0
    c3a0:	23 e0       	ldi	r18, 0x03	; 3
    c3a2:	b5 01       	movw	r22, r10
    c3a4:	c6 01       	movw	r24, r12
    c3a6:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4193
}
    c3aa:	60 96       	adiw	r28, 0x10	; 16
    c3ac:	0f b6       	in	r0, 0x3f	; 63
    c3ae:	f8 94       	cli
    c3b0:	de bf       	out	0x3e, r29	; 62
    c3b2:	0f be       	out	0x3f, r0	; 63
    c3b4:	cd bf       	out	0x3d, r28	; 61
    c3b6:	df 91       	pop	r29
    c3b8:	cf 91       	pop	r28
    c3ba:	1f 91       	pop	r17
    c3bc:	0f 91       	pop	r16
    c3be:	ff 90       	pop	r15
    c3c0:	ef 90       	pop	r14
    c3c2:	df 90       	pop	r13
    c3c4:	cf 90       	pop	r12
    c3c6:	bf 90       	pop	r11
    c3c8:	af 90       	pop	r10
    c3ca:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4190
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy_P(str1, new_text_date_error);
    c3cc:	63 e2       	ldi	r22, 0x23	; 35
    c3ce:	73 e8       	ldi	r23, 0x83	; 131
    c3d0:	c9 01       	movw	r24, r18
    c3d2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    c3d6:	c8 cf       	rjmp	.-112    	; 0xc368 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x70>

0000c3d8 <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    c3d8:	cf 93       	push	r28
    c3da:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    c3dc:	68 2f       	mov	r22, r24
    c3de:	85 e6       	ldi	r24, 0x65	; 101
    c3e0:	9d e0       	ldi	r25, 0x0D	; 13
    c3e2:	0e 94 e8 d9 	call	0x1b3d0	; 0x1b3d0 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    c3e6:	8c 2f       	mov	r24, r28
    c3e8:	cc 0f       	add	r28, r28
    c3ea:	99 0b       	sbc	r25, r25
    c3ec:	cf 91       	pop	r28
    c3ee:	08 95       	ret

0000c3f0 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    c3f0:	1f 92       	push	r1
    c3f2:	0f 92       	push	r0
    c3f4:	0f b6       	in	r0, 0x3f	; 63
    c3f6:	0f 92       	push	r0
    c3f8:	11 24       	eor	r1, r1
    c3fa:	0b b6       	in	r0, 0x3b	; 59
    c3fc:	0f 92       	push	r0
    c3fe:	2f 93       	push	r18
    c400:	3f 93       	push	r19
    c402:	4f 93       	push	r20
    c404:	5f 93       	push	r21
    c406:	6f 93       	push	r22
    c408:	7f 93       	push	r23
    c40a:	8f 93       	push	r24
    c40c:	9f 93       	push	r25
    c40e:	af 93       	push	r26
    c410:	bf 93       	push	r27
    c412:	ef 93       	push	r30
    c414:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    c416:	85 e6       	ldi	r24, 0x65	; 101
    c418:	9d e0       	ldi	r25, 0x0D	; 13
    c41a:	0e 94 c7 d9 	call	0x1b38e	; 0x1b38e <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    c41e:	ff 91       	pop	r31
    c420:	ef 91       	pop	r30
    c422:	bf 91       	pop	r27
    c424:	af 91       	pop	r26
    c426:	9f 91       	pop	r25
    c428:	8f 91       	pop	r24
    c42a:	7f 91       	pop	r23
    c42c:	6f 91       	pop	r22
    c42e:	5f 91       	pop	r21
    c430:	4f 91       	pop	r20
    c432:	3f 91       	pop	r19
    c434:	2f 91       	pop	r18
    c436:	0f 90       	pop	r0
    c438:	0b be       	out	0x3b, r0	; 59
    c43a:	0f 90       	pop	r0
    c43c:	0f be       	out	0x3f, r0	; 63
    c43e:	0f 90       	pop	r0
    c440:	1f 90       	pop	r1
    c442:	18 95       	reti

0000c444 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    c444:	1f 92       	push	r1
    c446:	0f 92       	push	r0
    c448:	0f b6       	in	r0, 0x3f	; 63
    c44a:	0f 92       	push	r0
    c44c:	11 24       	eor	r1, r1
    c44e:	0b b6       	in	r0, 0x3b	; 59
    c450:	0f 92       	push	r0
    c452:	2f 93       	push	r18
    c454:	8f 93       	push	r24
    c456:	9f 93       	push	r25
    c458:	ef 93       	push	r30
    c45a:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    c45c:	e0 91 75 0d 	lds	r30, 0x0D75	; 0x800d75 <Serial+0x10>
    c460:	f0 91 76 0d 	lds	r31, 0x0D76	; 0x800d76 <Serial+0x11>
    c464:	80 81       	ld	r24, Z
    c466:	e0 91 7b 0d 	lds	r30, 0x0D7B	; 0x800d7b <Serial+0x16>
    c46a:	f0 91 7c 0d 	lds	r31, 0x0D7C	; 0x800d7c <Serial+0x17>
    c46e:	82 fd       	sbrc	r24, 2
    c470:	1d c0       	rjmp	.+58     	; 0xc4ac <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    c472:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    c474:	80 91 7e 0d 	lds	r24, 0x0D7E	; 0x800d7e <Serial+0x19>
    c478:	8f 5f       	subi	r24, 0xFF	; 255
    c47a:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    c47c:	20 91 7f 0d 	lds	r18, 0x0D7F	; 0x800d7f <Serial+0x1a>
    c480:	82 17       	cp	r24, r18
    c482:	41 f0       	breq	.+16     	; 0xc494 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    c484:	e0 91 7e 0d 	lds	r30, 0x0D7E	; 0x800d7e <Serial+0x19>
    c488:	f0 e0       	ldi	r31, 0x00	; 0
    c48a:	eb 59       	subi	r30, 0x9B	; 155
    c48c:	f2 4f       	sbci	r31, 0xF2	; 242
    c48e:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    c490:	80 93 7e 0d 	sts	0x0D7E, r24	; 0x800d7e <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    c494:	ff 91       	pop	r31
    c496:	ef 91       	pop	r30
    c498:	9f 91       	pop	r25
    c49a:	8f 91       	pop	r24
    c49c:	2f 91       	pop	r18
    c49e:	0f 90       	pop	r0
    c4a0:	0b be       	out	0x3b, r0	; 59
    c4a2:	0f 90       	pop	r0
    c4a4:	0f be       	out	0x3f, r0	; 63
    c4a6:	0f 90       	pop	r0
    c4a8:	1f 90       	pop	r1
    c4aa:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    c4ac:	80 81       	ld	r24, Z
    c4ae:	f2 cf       	rjmp	.-28     	; 0xc494 <__vector_25+0x50>

0000c4b0 <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    c4b0:	1f 93       	push	r17
    c4b2:	cf 93       	push	r28
    c4b4:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    c4b6:	28 2f       	mov	r18, r24
    c4b8:	30 e0       	ldi	r19, 0x00	; 0
    c4ba:	f9 01       	movw	r30, r18
    c4bc:	e0 58       	subi	r30, 0x80	; 128
    c4be:	f9 47       	sbci	r31, 0x79	; 121
    c4c0:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    c4c2:	f9 01       	movw	r30, r18
    c4c4:	e1 59       	subi	r30, 0x91	; 145
    c4c6:	f2 47       	sbci	r31, 0x72	; 114
    c4c8:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    c4ca:	f9 01       	movw	r30, r18
    c4cc:	eb 54       	subi	r30, 0x4B	; 75
    c4ce:	f2 47       	sbci	r31, 0x72	; 114
    c4d0:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    c4d2:	cc 23       	and	r28, r28
    c4d4:	a9 f0       	breq	.+42     	; 0xc500 <digitalWrite+0x50>
    c4d6:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    c4d8:	81 11       	cpse	r24, r1
    c4da:	0e 94 57 47 	call	0x8eae	; 0x8eae <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    c4de:	ec 2f       	mov	r30, r28
    c4e0:	f0 e0       	ldi	r31, 0x00	; 0
    c4e2:	ee 0f       	add	r30, r30
    c4e4:	ff 1f       	adc	r31, r31
    c4e6:	eb 55       	subi	r30, 0x5B	; 91
    c4e8:	f2 47       	sbci	r31, 0x72	; 114
    c4ea:	a5 91       	lpm	r26, Z+
    c4ec:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    c4ee:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    c4f0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    c4f2:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    c4f4:	11 11       	cpse	r17, r1
    c4f6:	08 c0       	rjmp	.+16     	; 0xc508 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    c4f8:	d0 95       	com	r29
    c4fa:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    c4fc:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    c4fe:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:212
}
    c500:	df 91       	pop	r29
    c502:	cf 91       	pop	r28
    c504:	1f 91       	pop	r17
    c506:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    c508:	de 2b       	or	r29, r30
    c50a:	f8 cf       	rjmp	.-16     	; 0xc4fc <digitalWrite+0x4c>

0000c50c <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    c50c:	cf 93       	push	r28
    c50e:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    c510:	90 e0       	ldi	r25, 0x00	; 0
    c512:	fc 01       	movw	r30, r24
    c514:	e1 59       	subi	r30, 0x91	; 145
    c516:	f2 47       	sbci	r31, 0x72	; 114
    c518:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    c51a:	8b 54       	subi	r24, 0x4B	; 75
    c51c:	92 47       	sbci	r25, 0x72	; 114
    c51e:	fc 01       	movw	r30, r24
    c520:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    c522:	88 23       	and	r24, r24
    c524:	c9 f0       	breq	.+50     	; 0xc558 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    c526:	90 e0       	ldi	r25, 0x00	; 0
    c528:	88 0f       	add	r24, r24
    c52a:	99 1f       	adc	r25, r25
    c52c:	fc 01       	movw	r30, r24
    c52e:	e0 59       	subi	r30, 0x90	; 144
    c530:	f9 47       	sbci	r31, 0x79	; 121
    c532:	a5 91       	lpm	r26, Z+
    c534:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    c536:	fc 01       	movw	r30, r24
    c538:	eb 55       	subi	r30, 0x5B	; 91
    c53a:	f2 47       	sbci	r31, 0x72	; 114
    c53c:	c5 91       	lpm	r28, Z+
    c53e:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    c540:	61 11       	cpse	r22, r1
    c542:	0d c0       	rjmp	.+26     	; 0xc55e <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    c544:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    c546:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    c548:	8c 91       	ld	r24, X
    c54a:	20 95       	com	r18
    c54c:	82 23       	and	r24, r18
    c54e:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    c550:	88 81       	ld	r24, Y
    c552:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    c554:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    c556:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    c558:	df 91       	pop	r29
    c55a:	cf 91       	pop	r28
    c55c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    c55e:	62 30       	cpi	r22, 0x02	; 2
    c560:	51 f4       	brne	.+20     	; 0xc576 <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    c562:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    c564:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    c566:	3c 91       	ld	r19, X
    c568:	82 2f       	mov	r24, r18
    c56a:	80 95       	com	r24
    c56c:	83 23       	and	r24, r19
    c56e:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    c570:	e8 81       	ld	r30, Y
    c572:	2e 2b       	or	r18, r30
    c574:	ef cf       	rjmp	.-34     	; 0xc554 <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    c576:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    c578:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    c57a:	ec 91       	ld	r30, X
    c57c:	2e 2b       	or	r18, r30
    c57e:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    c580:	8f bf       	out	0x3f, r24	; 63
    c582:	ea cf       	rjmp	.-44     	; 0xc558 <pinMode+0x4c>

0000c584 <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    c584:	cf 93       	push	r28
    c586:	df 93       	push	r29
    c588:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    c58a:	61 e0       	ldi	r22, 0x01	; 1
    c58c:	8c 81       	ldd	r24, Y+4	; 0x04
    c58e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    c592:	60 e0       	ldi	r22, 0x00	; 0
    c594:	8b 81       	ldd	r24, Y+3	; 0x03
    c596:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    c59a:	61 e0       	ldi	r22, 0x01	; 1
    c59c:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    c59e:	df 91       	pop	r29
    c5a0:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    c5a2:	0c 94 86 62 	jmp	0xc50c	; 0xc50c <pinMode>

0000c5a6 <delayMicroseconds>:
delayMicroseconds():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    c5a6:	82 30       	cpi	r24, 0x02	; 2
    c5a8:	91 05       	cpc	r25, r1
    c5aa:	38 f0       	brcs	.+14     	; 0xc5ba <delayMicroseconds+0x14>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    c5ac:	88 0f       	add	r24, r24
    c5ae:	99 1f       	adc	r25, r25
    c5b0:	88 0f       	add	r24, r24
    c5b2:	99 1f       	adc	r25, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    c5b4:	05 97       	sbiw	r24, 0x05	; 5
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    c5b6:	01 97       	sbiw	r24, 0x01	; 1
    c5b8:	f1 f7       	brne	.-4      	; 0xc5b6 <delayMicroseconds+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    c5ba:	08 95       	ret

0000c5bc <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:396
#endif
#endif // 0
}

void delay(unsigned long ms)
{
    c5bc:	8f 92       	push	r8
    c5be:	9f 92       	push	r9
    c5c0:	af 92       	push	r10
    c5c2:	bf 92       	push	r11
    c5c4:	cf 92       	push	r12
    c5c6:	df 92       	push	r13
    c5c8:	ef 92       	push	r14
    c5ca:	ff 92       	push	r15
    c5cc:	6b 01       	movw	r12, r22
    c5ce:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    c5d0:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <micros>
    c5d4:	4b 01       	movw	r8, r22
    c5d6:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    c5d8:	c1 14       	cp	r12, r1
    c5da:	d1 04       	cpc	r13, r1
    c5dc:	e1 04       	cpc	r14, r1
    c5de:	f1 04       	cpc	r15, r1
    c5e0:	b9 f0       	breq	.+46     	; 0xc610 <delay+0x54>
    c5e2:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <micros>
    c5e6:	68 19       	sub	r22, r8
    c5e8:	79 09       	sbc	r23, r9
    c5ea:	8a 09       	sbc	r24, r10
    c5ec:	9b 09       	sbc	r25, r11
    c5ee:	68 3e       	cpi	r22, 0xE8	; 232
    c5f0:	73 40       	sbci	r23, 0x03	; 3
    c5f2:	81 05       	cpc	r24, r1
    c5f4:	91 05       	cpc	r25, r1
    c5f6:	80 f3       	brcs	.-32     	; 0xc5d8 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    c5f8:	21 e0       	ldi	r18, 0x01	; 1
    c5fa:	c2 1a       	sub	r12, r18
    c5fc:	d1 08       	sbc	r13, r1
    c5fe:	e1 08       	sbc	r14, r1
    c600:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    c602:	88 ee       	ldi	r24, 0xE8	; 232
    c604:	88 0e       	add	r8, r24
    c606:	83 e0       	ldi	r24, 0x03	; 3
    c608:	98 1e       	adc	r9, r24
    c60a:	a1 1c       	adc	r10, r1
    c60c:	b1 1c       	adc	r11, r1
    c60e:	e4 cf       	rjmp	.-56     	; 0xc5d8 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
    c610:	ff 90       	pop	r15
    c612:	ef 90       	pop	r14
    c614:	df 90       	pop	r13
    c616:	cf 90       	pop	r12
    c618:	bf 90       	pop	r11
    c61a:	af 90       	pop	r10
    c61c:	9f 90       	pop	r9
    c61e:	8f 90       	pop	r8
    c620:	08 95       	ret

0000c622 <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    c622:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    c624:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    c626:	60 91 62 0b 	lds	r22, 0x0B62	; 0x800b62 <timer0_millis>
    c62a:	70 91 63 0b 	lds	r23, 0x0B63	; 0x800b63 <timer0_millis+0x1>
    c62e:	80 91 64 0b 	lds	r24, 0x0B64	; 0x800b64 <timer0_millis+0x2>
    c632:	90 91 65 0b 	lds	r25, 0x0B65	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    c636:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    c638:	08 95       	ret

0000c63a <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    c63a:	1f 92       	push	r1
    c63c:	0f 92       	push	r0
    c63e:	0f b6       	in	r0, 0x3f	; 63
    c640:	0f 92       	push	r0
    c642:	11 24       	eor	r1, r1
    c644:	2f 93       	push	r18
    c646:	3f 93       	push	r19
    c648:	8f 93       	push	r24
    c64a:	9f 93       	push	r25
    c64c:	af 93       	push	r26
    c64e:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    c650:	80 91 62 0b 	lds	r24, 0x0B62	; 0x800b62 <timer0_millis>
    c654:	90 91 63 0b 	lds	r25, 0x0B63	; 0x800b63 <timer0_millis+0x1>
    c658:	a0 91 64 0b 	lds	r26, 0x0B64	; 0x800b64 <timer0_millis+0x2>
    c65c:	b0 91 65 0b 	lds	r27, 0x0B65	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    c660:	30 91 61 0b 	lds	r19, 0x0B61	; 0x800b61 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    c664:	23 e0       	ldi	r18, 0x03	; 3
    c666:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    c668:	2d 37       	cpi	r18, 0x7D	; 125
    c66a:	68 f1       	brcs	.+90     	; 0xc6c6 <__vector_23+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    c66c:	26 e8       	ldi	r18, 0x86	; 134
    c66e:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    c670:	02 96       	adiw	r24, 0x02	; 2
    c672:	a1 1d       	adc	r26, r1
    c674:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    c676:	20 93 61 0b 	sts	0x0B61, r18	; 0x800b61 <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    c67a:	80 93 62 0b 	sts	0x0B62, r24	; 0x800b62 <timer0_millis>
    c67e:	90 93 63 0b 	sts	0x0B63, r25	; 0x800b63 <timer0_millis+0x1>
    c682:	a0 93 64 0b 	sts	0x0B64, r26	; 0x800b64 <timer0_millis+0x2>
    c686:	b0 93 65 0b 	sts	0x0B65, r27	; 0x800b65 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    c68a:	80 91 66 0b 	lds	r24, 0x0B66	; 0x800b66 <timer0_overflow_count>
    c68e:	90 91 67 0b 	lds	r25, 0x0B67	; 0x800b67 <timer0_overflow_count+0x1>
    c692:	a0 91 68 0b 	lds	r26, 0x0B68	; 0x800b68 <timer0_overflow_count+0x2>
    c696:	b0 91 69 0b 	lds	r27, 0x0B69	; 0x800b69 <timer0_overflow_count+0x3>
    c69a:	01 96       	adiw	r24, 0x01	; 1
    c69c:	a1 1d       	adc	r26, r1
    c69e:	b1 1d       	adc	r27, r1
    c6a0:	80 93 66 0b 	sts	0x0B66, r24	; 0x800b66 <timer0_overflow_count>
    c6a4:	90 93 67 0b 	sts	0x0B67, r25	; 0x800b67 <timer0_overflow_count+0x1>
    c6a8:	a0 93 68 0b 	sts	0x0B68, r26	; 0x800b68 <timer0_overflow_count+0x2>
    c6ac:	b0 93 69 0b 	sts	0x0B69, r27	; 0x800b69 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    c6b0:	bf 91       	pop	r27
    c6b2:	af 91       	pop	r26
    c6b4:	9f 91       	pop	r25
    c6b6:	8f 91       	pop	r24
    c6b8:	3f 91       	pop	r19
    c6ba:	2f 91       	pop	r18
    c6bc:	0f 90       	pop	r0
    c6be:	0f be       	out	0x3f, r0	; 63
    c6c0:	0f 90       	pop	r0
    c6c2:	1f 90       	pop	r1
    c6c4:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    c6c6:	01 96       	adiw	r24, 0x01	; 1
    c6c8:	a1 1d       	adc	r26, r1
    c6ca:	b1 1d       	adc	r27, r1
    c6cc:	d4 cf       	rjmp	.-88     	; 0xc676 <__vector_23+0x3c>

0000c6ce <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
    c6ce:	1f 92       	push	r1
    c6d0:	0f 92       	push	r0
    c6d2:	0f b6       	in	r0, 0x3f	; 63
    c6d4:	0f 92       	push	r0
    c6d6:	11 24       	eor	r1, r1
    c6d8:	0b b6       	in	r0, 0x3b	; 59
    c6da:	0f 92       	push	r0
    c6dc:	2f 93       	push	r18
    c6de:	3f 93       	push	r19
    c6e0:	4f 93       	push	r20
    c6e2:	5f 93       	push	r21
    c6e4:	6f 93       	push	r22
    c6e6:	7f 93       	push	r23
    c6e8:	8f 93       	push	r24
    c6ea:	9f 93       	push	r25
    c6ec:	af 93       	push	r26
    c6ee:	bf 93       	push	r27
    c6f0:	cf 93       	push	r28
    c6f2:	ef 93       	push	r30
    c6f4:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
    c6f6:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
    c6f8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
    c6fc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    c700:	e0 91 5f 0b 	lds	r30, 0x0B5F	; 0x800b5f <a2d_interupt_func>
    c704:	f0 91 60 0b 	lds	r31, 0x0B60	; 0x800b60 <a2d_interupt_func+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
    c708:	68 2f       	mov	r22, r24
    c70a:	70 e0       	ldi	r23, 0x00	; 0
    c70c:	76 2f       	mov	r23, r22
    c70e:	66 27       	eor	r22, r22
    c710:	69 0f       	add	r22, r25
    c712:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
    c714:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <a2d_input>
    c718:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
    c71a:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
    c71c:	ff 91       	pop	r31
    c71e:	ef 91       	pop	r30
    c720:	cf 91       	pop	r28
    c722:	bf 91       	pop	r27
    c724:	af 91       	pop	r26
    c726:	9f 91       	pop	r25
    c728:	8f 91       	pop	r24
    c72a:	7f 91       	pop	r23
    c72c:	6f 91       	pop	r22
    c72e:	5f 91       	pop	r21
    c730:	4f 91       	pop	r20
    c732:	3f 91       	pop	r19
    c734:	2f 91       	pop	r18
    c736:	0f 90       	pop	r0
    c738:	0b be       	out	0x3b, r0	; 59
    c73a:	0f 90       	pop	r0
    c73c:	0f be       	out	0x3f, r0	; 63
    c73e:	0f 90       	pop	r0
    c740:	1f 90       	pop	r1
    c742:	18 95       	reti

0000c744 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
    c744:	cf 92       	push	r12
    c746:	df 92       	push	r13
    c748:	ef 92       	push	r14
    c74a:	ff 92       	push	r15
    c74c:	0f 93       	push	r16
    c74e:	1f 93       	push	r17
    c750:	cf 93       	push	r28
    c752:	df 93       	push	r29
    c754:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
    c756:	cf 80       	ldd	r12, Y+7	; 0x07
    c758:	d8 84       	ldd	r13, Y+8	; 0x08
    c75a:	e9 84       	ldd	r14, Y+9	; 0x09
    c75c:	fa 84       	ldd	r15, Y+10	; 0x0a
    c75e:	8f 85       	ldd	r24, Y+15	; 0x0f
    c760:	98 89       	ldd	r25, Y+16	; 0x10
    c762:	a9 89       	ldd	r26, Y+17	; 0x11
    c764:	ba 89       	ldd	r27, Y+18	; 0x12
    c766:	c8 0e       	add	r12, r24
    c768:	d9 1e       	adc	r13, r25
    c76a:	ea 1e       	adc	r14, r26
    c76c:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
    c76e:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
    c772:	0b 89       	ldd	r16, Y+19	; 0x13
    c774:	1c 89       	ldd	r17, Y+20	; 0x14
    c776:	2d 89       	ldd	r18, Y+21	; 0x15
    c778:	3e 89       	ldd	r19, Y+22	; 0x16
    c77a:	60 1b       	sub	r22, r16
    c77c:	71 0b       	sbc	r23, r17
    c77e:	82 0b       	sbc	r24, r18
    c780:	93 0b       	sbc	r25, r19
    c782:	28 ee       	ldi	r18, 0xE8	; 232
    c784:	33 e0       	ldi	r19, 0x03	; 3
    c786:	40 e0       	ldi	r20, 0x00	; 0
    c788:	50 e0       	ldi	r21, 0x00	; 0
    c78a:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
    c78e:	ca 01       	movw	r24, r20
    c790:	b9 01       	movw	r22, r18
    c792:	6c 0d       	add	r22, r12
    c794:	7d 1d       	adc	r23, r13
    c796:	8e 1d       	adc	r24, r14
    c798:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
    c79a:	df 91       	pop	r29
    c79c:	cf 91       	pop	r28
    c79e:	1f 91       	pop	r17
    c7a0:	0f 91       	pop	r16
    c7a2:	ff 90       	pop	r15
    c7a4:	ef 90       	pop	r14
    c7a6:	df 90       	pop	r13
    c7a8:	cf 90       	pop	r12
    c7aa:	08 95       	ret

0000c7ac <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
    c7ac:	cf 93       	push	r28
    c7ae:	df 93       	push	r29
    c7b0:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    c7b2:	89 e3       	ldi	r24, 0x39	; 57
    c7b4:	95 e0       	ldi	r25, 0x05	; 5
    c7b6:	9e 83       	std	Y+6, r25	; 0x06
    c7b8:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    c7ba:	88 81       	ld	r24, Y
    c7bc:	99 81       	ldd	r25, Y+1	; 0x01
    c7be:	dc 01       	movw	r26, r24
    c7c0:	ed 91       	ld	r30, X+
    c7c2:	fc 91       	ld	r31, X
    c7c4:	06 84       	ldd	r0, Z+14	; 0x0e
    c7c6:	f7 85       	ldd	r31, Z+15	; 0x0f
    c7c8:	e0 2d       	mov	r30, r0
    c7ca:	69 e3       	ldi	r22, 0x39	; 57
    c7cc:	75 e0       	ldi	r23, 0x05	; 5
    c7ce:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    c7d0:	81 e0       	ldi	r24, 0x01	; 1
    c7d2:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
    c7d4:	df 91       	pop	r29
    c7d6:	cf 91       	pop	r28
    c7d8:	08 95       	ret

0000c7da <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
    c7da:	cf 92       	push	r12
    c7dc:	df 92       	push	r13
    c7de:	ef 92       	push	r14
    c7e0:	ff 92       	push	r15
    c7e2:	0f 93       	push	r16
    c7e4:	1f 93       	push	r17
    c7e6:	cf 93       	push	r28
    c7e8:	df 93       	push	r29
    c7ea:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    c7ec:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
    c7f0:	0b 89       	ldd	r16, Y+19	; 0x13
    c7f2:	1c 89       	ldd	r17, Y+20	; 0x14
    c7f4:	2d 89       	ldd	r18, Y+21	; 0x15
    c7f6:	3e 89       	ldd	r19, Y+22	; 0x16
    c7f8:	60 1b       	sub	r22, r16
    c7fa:	71 0b       	sbc	r23, r17
    c7fc:	82 0b       	sbc	r24, r18
    c7fe:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    c800:	cb 84       	ldd	r12, Y+11	; 0x0b
    c802:	dc 84       	ldd	r13, Y+12	; 0x0c
    c804:	ed 84       	ldd	r14, Y+13	; 0x0d
    c806:	fe 84       	ldd	r15, Y+14	; 0x0e
    c808:	6c 15       	cp	r22, r12
    c80a:	7d 05       	cpc	r23, r13
    c80c:	8e 05       	cpc	r24, r14
    c80e:	9f 05       	cpc	r25, r15
    c810:	28 f4       	brcc	.+10     	; 0xc81c <NTPClient::update()+0x42>
    c812:	01 2b       	or	r16, r17
    c814:	02 2b       	or	r16, r18
    c816:	03 2b       	or	r16, r19
    c818:	09 f0       	breq	.+2      	; 0xc81c <NTPClient::update()+0x42>
    c81a:	9e c0       	rjmp	.+316    	; 0xc958 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    c81c:	8a 81       	ldd	r24, Y+2	; 0x02
    c81e:	81 11       	cpse	r24, r1
    c820:	03 c0       	rjmp	.+6      	; 0xc828 <NTPClient::update()+0x4e>
    c822:	ce 01       	movw	r24, r28
    c824:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
    c828:	7e 01       	movw	r14, r28
    c82a:	87 e1       	ldi	r24, 0x17	; 23
    c82c:	e8 0e       	add	r14, r24
    c82e:	f1 1c       	adc	r15, r1
    c830:	8c e2       	ldi	r24, 0x2C	; 44
    c832:	fe 01       	movw	r30, r28
    c834:	7b 96       	adiw	r30, 0x1b	; 27
    c836:	df 01       	movw	r26, r30
    c838:	1d 92       	st	X+, r1
    c83a:	8a 95       	dec	r24
    c83c:	e9 f7       	brne	.-6      	; 0xc838 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
    c83e:	83 ee       	ldi	r24, 0xE3	; 227
    c840:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
    c842:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
    c844:	86 e0       	ldi	r24, 0x06	; 6
    c846:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
    c848:	8c ee       	ldi	r24, 0xEC	; 236
    c84a:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
    c84c:	81 e3       	ldi	r24, 0x31	; 49
    c84e:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
    c850:	9e e4       	ldi	r25, 0x4E	; 78
    c852:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
    c854:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
    c856:	84 e3       	ldi	r24, 0x34	; 52
    c858:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
    c85a:	88 81       	ld	r24, Y
    c85c:	99 81       	ldd	r25, Y+1	; 0x01
    c85e:	6b 81       	ldd	r22, Y+3	; 0x03
    c860:	7c 81       	ldd	r23, Y+4	; 0x04
    c862:	dc 01       	movw	r26, r24
    c864:	ed 91       	ld	r30, X+
    c866:	fc 91       	ld	r31, X
    c868:	06 88       	ldd	r0, Z+22	; 0x16
    c86a:	f7 89       	ldd	r31, Z+23	; 0x17
    c86c:	e0 2d       	mov	r30, r0
    c86e:	4b e7       	ldi	r20, 0x7B	; 123
    c870:	50 e0       	ldi	r21, 0x00	; 0
    c872:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
    c874:	88 81       	ld	r24, Y
    c876:	99 81       	ldd	r25, Y+1	; 0x01
    c878:	dc 01       	movw	r26, r24
    c87a:	ed 91       	ld	r30, X+
    c87c:	fc 91       	ld	r31, X
    c87e:	02 80       	ldd	r0, Z+2	; 0x02
    c880:	f3 81       	ldd	r31, Z+3	; 0x03
    c882:	e0 2d       	mov	r30, r0
    c884:	40 e3       	ldi	r20, 0x30	; 48
    c886:	50 e0       	ldi	r21, 0x00	; 0
    c888:	b7 01       	movw	r22, r14
    c88a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
    c88c:	88 81       	ld	r24, Y
    c88e:	99 81       	ldd	r25, Y+1	; 0x01
    c890:	dc 01       	movw	r26, r24
    c892:	ed 91       	ld	r30, X+
    c894:	fc 91       	ld	r31, X
    c896:	00 8c       	ldd	r0, Z+24	; 0x18
    c898:	f1 8d       	ldd	r31, Z+25	; 0x19
    c89a:	e0 2d       	mov	r30, r0
    c89c:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
    c89e:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
    c8a0:	6a e0       	ldi	r22, 0x0A	; 10
    c8a2:	70 e0       	ldi	r23, 0x00	; 0
    c8a4:	80 e0       	ldi	r24, 0x00	; 0
    c8a6:	90 e0       	ldi	r25, 0x00	; 0
    c8a8:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
    c8ac:	88 81       	ld	r24, Y
    c8ae:	99 81       	ldd	r25, Y+1	; 0x01
    c8b0:	dc 01       	movw	r26, r24
    c8b2:	ed 91       	ld	r30, X+
    c8b4:	fc 91       	ld	r31, X
    c8b6:	02 8c       	ldd	r0, Z+26	; 0x1a
    c8b8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    c8ba:	e0 2d       	mov	r30, r0
    c8bc:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
    c8be:	15 36       	cpi	r17, 0x65	; 101
    c8c0:	09 f4       	brne	.+2      	; 0xc8c4 <NTPClient::update()+0xea>
    c8c2:	54 c0       	rjmp	.+168    	; 0xc96c <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
    c8c4:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
    c8c6:	89 2b       	or	r24, r25
    c8c8:	59 f3       	breq	.-42     	; 0xc8a0 <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
    c8ca:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
    c8ce:	21 2f       	mov	r18, r17
    c8d0:	30 e0       	ldi	r19, 0x00	; 0
    c8d2:	a9 01       	movw	r20, r18
    c8d4:	4f 5f       	subi	r20, 0xFF	; 255
    c8d6:	5f 4f       	sbci	r21, 0xFF	; 255
    c8d8:	ea e0       	ldi	r30, 0x0A	; 10
    c8da:	e4 9f       	mul	r30, r20
    c8dc:	90 01       	movw	r18, r0
    c8de:	e5 9f       	mul	r30, r21
    c8e0:	30 0d       	add	r19, r0
    c8e2:	11 24       	eor	r1, r1
    c8e4:	89 01       	movw	r16, r18
    c8e6:	33 0f       	add	r19, r19
    c8e8:	22 0b       	sbc	r18, r18
    c8ea:	33 0b       	sbc	r19, r19
    c8ec:	ab 01       	movw	r20, r22
    c8ee:	bc 01       	movw	r22, r24
    c8f0:	40 1b       	sub	r20, r16
    c8f2:	51 0b       	sbc	r21, r17
    c8f4:	62 0b       	sbc	r22, r18
    c8f6:	73 0b       	sbc	r23, r19
    c8f8:	4b 8b       	std	Y+19, r20	; 0x13
    c8fa:	5c 8b       	std	Y+20, r21	; 0x14
    c8fc:	6d 8b       	std	Y+21, r22	; 0x15
    c8fe:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
    c900:	88 81       	ld	r24, Y
    c902:	99 81       	ldd	r25, Y+1	; 0x01
    c904:	dc 01       	movw	r26, r24
    c906:	ed 91       	ld	r30, X+
    c908:	fc 91       	ld	r31, X
    c90a:	04 8c       	ldd	r0, Z+28	; 0x1c
    c90c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    c90e:	e0 2d       	mov	r30, r0
    c910:	40 e3       	ldi	r20, 0x30	; 48
    c912:	50 e0       	ldi	r21, 0x00	; 0
    c914:	b7 01       	movw	r22, r14
    c916:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
    c918:	fe 01       	movw	r30, r28
    c91a:	ff 96       	adiw	r30, 0x3f	; 63
    c91c:	80 81       	ld	r24, Z
    c91e:	91 81       	ldd	r25, Z+1	; 0x01
    c920:	98 27       	eor	r25, r24
    c922:	89 27       	eor	r24, r25
    c924:	98 27       	eor	r25, r24
    c926:	b0 e0       	ldi	r27, 0x00	; 0
    c928:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    c92a:	dc 01       	movw	r26, r24
    c92c:	99 27       	eor	r25, r25
    c92e:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
    c930:	32 96       	adiw	r30, 0x02	; 2
    c932:	40 81       	ld	r20, Z
    c934:	51 81       	ldd	r21, Z+1	; 0x01
    c936:	54 27       	eor	r21, r20
    c938:	45 27       	eor	r20, r21
    c93a:	54 27       	eor	r21, r20
    c93c:	70 e0       	ldi	r23, 0x00	; 0
    c93e:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
    c940:	84 2b       	or	r24, r20
    c942:	95 2b       	or	r25, r21
    c944:	a6 2b       	or	r26, r22
    c946:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
    c948:	80 58       	subi	r24, 0x80	; 128
    c94a:	9e 47       	sbci	r25, 0x7E	; 126
    c94c:	aa 4a       	sbci	r26, 0xAA	; 170
    c94e:	b3 48       	sbci	r27, 0x83	; 131
    c950:	8f 87       	std	Y+15, r24	; 0x0f
    c952:	98 8b       	std	Y+16, r25	; 0x10
    c954:	a9 8b       	std	Y+17, r26	; 0x11
    c956:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
    c958:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
    c95a:	df 91       	pop	r29
    c95c:	cf 91       	pop	r28
    c95e:	1f 91       	pop	r17
    c960:	0f 91       	pop	r16
    c962:	ff 90       	pop	r15
    c964:	ef 90       	pop	r14
    c966:	df 90       	pop	r13
    c968:	cf 90       	pop	r12
    c96a:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
    c96c:	80 e0       	ldi	r24, 0x00	; 0
    c96e:	f5 cf       	rjmp	.-22     	; 0xc95a <NTPClient::update()+0x180>

0000c970 <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
    c970:	1f 92       	push	r1
    c972:	0f 92       	push	r0
    c974:	0f b6       	in	r0, 0x3f	; 63
    c976:	0f 92       	push	r0
    c978:	11 24       	eor	r1, r1
    c97a:	0b b6       	in	r0, 0x3b	; 59
    c97c:	0f 92       	push	r0
    c97e:	2f 93       	push	r18
    c980:	3f 93       	push	r19
    c982:	4f 93       	push	r20
    c984:	5f 93       	push	r21
    c986:	6f 93       	push	r22
    c988:	7f 93       	push	r23
    c98a:	8f 93       	push	r24
    c98c:	9f 93       	push	r25
    c98e:	af 93       	push	r26
    c990:	bf 93       	push	r27
    c992:	ef 93       	push	r30
    c994:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
    c996:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    c99a:	88 7f       	andi	r24, 0xF8	; 248
    c99c:	80 36       	cpi	r24, 0x60	; 96
    c99e:	09 f4       	brne	.+2      	; 0xc9a2 <__vector_39+0x32>
    c9a0:	4d c0       	rjmp	.+154    	; 0xca3c <__vector_39+0xcc>
    c9a2:	08 f0       	brcs	.+2      	; 0xc9a6 <__vector_39+0x36>
    c9a4:	40 c0       	rjmp	.+128    	; 0xca26 <__vector_39+0xb6>
    c9a6:	88 32       	cpi	r24, 0x28	; 40
    c9a8:	09 f4       	brne	.+2      	; 0xc9ac <__vector_39+0x3c>
    c9aa:	a9 c0       	rjmp	.+338    	; 0xcafe <__vector_39+0x18e>
    c9ac:	28 f5       	brcc	.+74     	; 0xc9f8 <__vector_39+0x88>
    c9ae:	80 31       	cpi	r24, 0x10	; 16
    c9b0:	09 f4       	brne	.+2      	; 0xc9b4 <__vector_39+0x44>
    c9b2:	9d c0       	rjmp	.+314    	; 0xcaee <__vector_39+0x17e>
    c9b4:	c8 f4       	brcc	.+50     	; 0xc9e8 <__vector_39+0x78>
    c9b6:	88 23       	and	r24, r24
    c9b8:	09 f4       	brne	.+2      	; 0xc9bc <__vector_39+0x4c>
    c9ba:	fb c0       	rjmp	.+502    	; 0xcbb2 <__vector_39+0x242>
    c9bc:	88 30       	cpi	r24, 0x08	; 8
    c9be:	09 f4       	brne	.+2      	; 0xc9c2 <__vector_39+0x52>
    c9c0:	96 c0       	rjmp	.+300    	; 0xcaee <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    c9c2:	ff 91       	pop	r31
    c9c4:	ef 91       	pop	r30
    c9c6:	bf 91       	pop	r27
    c9c8:	af 91       	pop	r26
    c9ca:	9f 91       	pop	r25
    c9cc:	8f 91       	pop	r24
    c9ce:	7f 91       	pop	r23
    c9d0:	6f 91       	pop	r22
    c9d2:	5f 91       	pop	r21
    c9d4:	4f 91       	pop	r20
    c9d6:	3f 91       	pop	r19
    c9d8:	2f 91       	pop	r18
    c9da:	0f 90       	pop	r0
    c9dc:	0b be       	out	0x3b, r0	; 59
    c9de:	0f 90       	pop	r0
    c9e0:	0f be       	out	0x3f, r0	; 63
    c9e2:	0f 90       	pop	r0
    c9e4:	1f 90       	pop	r1
    c9e6:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    c9e8:	88 31       	cpi	r24, 0x18	; 24
    c9ea:	09 f4       	brne	.+2      	; 0xc9ee <__vector_39+0x7e>
    c9ec:	88 c0       	rjmp	.+272    	; 0xcafe <__vector_39+0x18e>
    c9ee:	80 32       	cpi	r24, 0x20	; 32
    c9f0:	41 f7       	brne	.-48     	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    c9f2:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <twi_error.lto_priv.273>
    c9f6:	14 c0       	rjmp	.+40     	; 0xca20 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    c9f8:	80 34       	cpi	r24, 0x40	; 64
    c9fa:	09 f4       	brne	.+2      	; 0xc9fe <__vector_39+0x8e>
    c9fc:	9d c0       	rjmp	.+314    	; 0xcb38 <__vector_39+0x1c8>
    c9fe:	40 f4       	brcc	.+16     	; 0xca10 <__vector_39+0xa0>
    ca00:	80 33       	cpi	r24, 0x30	; 48
    ca02:	b9 f3       	breq	.-18     	; 0xc9f2 <__vector_39+0x82>
    ca04:	88 33       	cpi	r24, 0x38	; 56
    ca06:	e9 f6       	brne	.-70     	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    ca08:	80 93 62 0d 	sts	0x0D62, r24	; 0x800d62 <twi_error.lto_priv.273>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    ca0c:	85 ec       	ldi	r24, 0xC5	; 197
    ca0e:	b0 c0       	rjmp	.+352    	; 0xcb70 <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    ca10:	80 35       	cpi	r24, 0x50	; 80
    ca12:	09 f4       	brne	.+2      	; 0xca16 <__vector_39+0xa6>
    ca14:	85 c0       	rjmp	.+266    	; 0xcb20 <__vector_39+0x1b0>
    ca16:	88 35       	cpi	r24, 0x58	; 88
    ca18:	09 f4       	brne	.+2      	; 0xca1c <__vector_39+0xac>
    ca1a:	96 c0       	rjmp	.+300    	; 0xcb48 <__vector_39+0x1d8>
    ca1c:	88 34       	cpi	r24, 0x48	; 72
    ca1e:	89 f6       	brne	.-94     	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    ca20:	0e 94 fb 47 	call	0x8ff6	; 0x8ff6 <twi_stop>
    ca24:	ce cf       	rjmp	.-100    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    ca26:	88 39       	cpi	r24, 0x98	; 152
    ca28:	09 f4       	brne	.+2      	; 0xca2c <__vector_39+0xbc>
    ca2a:	8c c0       	rjmp	.+280    	; 0xcb44 <__vector_39+0x1d4>
    ca2c:	38 f5       	brcc	.+78     	; 0xca7c <__vector_39+0x10c>
    ca2e:	88 37       	cpi	r24, 0x78	; 120
    ca30:	29 f0       	breq	.+10     	; 0xca3c <__vector_39+0xcc>
    ca32:	50 f4       	brcc	.+20     	; 0xca48 <__vector_39+0xd8>
    ca34:	88 36       	cpi	r24, 0x68	; 104
    ca36:	11 f0       	breq	.+4      	; 0xca3c <__vector_39+0xcc>
    ca38:	80 37       	cpi	r24, 0x70	; 112
    ca3a:	19 f6       	brne	.-122    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    ca3c:	83 e0       	ldi	r24, 0x03	; 3
    ca3e:	80 93 64 0d 	sts	0x0D64, r24	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    ca42:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <twi_rxBufferIndex>
    ca46:	57 c0       	rjmp	.+174    	; 0xcaf6 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    ca48:	88 38       	cpi	r24, 0x88	; 136
    ca4a:	09 f4       	brne	.+2      	; 0xca4e <__vector_39+0xde>
    ca4c:	7b c0       	rjmp	.+246    	; 0xcb44 <__vector_39+0x1d4>
    ca4e:	80 39       	cpi	r24, 0x90	; 144
    ca50:	19 f0       	breq	.+6      	; 0xca58 <__vector_39+0xe8>
    ca52:	80 38       	cpi	r24, 0x80	; 128
    ca54:	09 f0       	breq	.+2      	; 0xca58 <__vector_39+0xe8>
    ca56:	b5 cf       	rjmp	.-150    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    ca58:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    ca5c:	80 32       	cpi	r24, 0x20	; 32
    ca5e:	08 f0       	brcs	.+2      	; 0xca62 <__vector_39+0xf2>
    ca60:	71 c0       	rjmp	.+226    	; 0xcb44 <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    ca62:	e0 91 5c 0b 	lds	r30, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    ca66:	81 e0       	ldi	r24, 0x01	; 1
    ca68:	8e 0f       	add	r24, r30
    ca6a:	80 93 5c 0b 	sts	0x0B5C, r24	; 0x800b5c <twi_rxBufferIndex>
    ca6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    ca72:	f0 e0       	ldi	r31, 0x00	; 0
    ca74:	e4 5c       	subi	r30, 0xC4	; 196
    ca76:	f4 4f       	sbci	r31, 0xF4	; 244
    ca78:	80 83       	st	Z, r24
    ca7a:	3d c0       	rjmp	.+122    	; 0xcaf6 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    ca7c:	80 3b       	cpi	r24, 0xB0	; 176
    ca7e:	39 f0       	breq	.+14     	; 0xca8e <__vector_39+0x11e>
    ca80:	e0 f4       	brcc	.+56     	; 0xcaba <__vector_39+0x14a>
    ca82:	80 3a       	cpi	r24, 0xA0	; 160
    ca84:	09 f4       	brne	.+2      	; 0xca88 <__vector_39+0x118>
    ca86:	79 c0       	rjmp	.+242    	; 0xcb7a <__vector_39+0x20a>
    ca88:	88 3a       	cpi	r24, 0xA8	; 168
    ca8a:	09 f0       	breq	.+2      	; 0xca8e <__vector_39+0x11e>
    ca8c:	9a cf       	rjmp	.-204    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    ca8e:	84 e0       	ldi	r24, 0x04	; 4
    ca90:	80 93 64 0d 	sts	0x0D64, r24	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    ca94:	10 92 3b 0b 	sts	0x0B3B, r1	; 0x800b3b <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    ca98:	10 92 3a 0b 	sts	0x0B3A, r1	; 0x800b3a <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    ca9c:	e0 91 b2 0c 	lds	r30, 0x0CB2	; 0x800cb2 <twi_onSlaveTransmit.lto_priv.275>
    caa0:	f0 91 b3 0c 	lds	r31, 0x0CB3	; 0x800cb3 <twi_onSlaveTransmit.lto_priv.275+0x1>
    caa4:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    caa6:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    caaa:	81 11       	cpse	r24, r1
    caac:	0f c0       	rjmp	.+30     	; 0xcacc <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
    caae:	81 e0       	ldi	r24, 0x01	; 1
    cab0:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    cab4:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <twi_txBuffer>
    cab8:	09 c0       	rjmp	.+18     	; 0xcacc <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    caba:	80 3c       	cpi	r24, 0xC0	; 192
    cabc:	09 f4       	brne	.+2      	; 0xcac0 <__vector_39+0x150>
    cabe:	a6 cf       	rjmp	.-180    	; 0xca0c <__vector_39+0x9c>
    cac0:	88 3c       	cpi	r24, 0xC8	; 200
    cac2:	09 f4       	brne	.+2      	; 0xcac6 <__vector_39+0x156>
    cac4:	a3 cf       	rjmp	.-186    	; 0xca0c <__vector_39+0x9c>
    cac6:	88 3b       	cpi	r24, 0xB8	; 184
    cac8:	09 f0       	breq	.+2      	; 0xcacc <__vector_39+0x15c>
    caca:	7b cf       	rjmp	.-266    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    cacc:	e0 91 3b 0b 	lds	r30, 0x0B3B	; 0x800b3b <twi_txBufferIndex>
    cad0:	81 e0       	ldi	r24, 0x01	; 1
    cad2:	8e 0f       	add	r24, r30
    cad4:	80 93 3b 0b 	sts	0x0B3B, r24	; 0x800b3b <twi_txBufferIndex>
    cad8:	f0 e0       	ldi	r31, 0x00	; 0
    cada:	e6 5e       	subi	r30, 0xE6	; 230
    cadc:	f4 4f       	sbci	r31, 0xF4	; 244
    cade:	80 81       	ld	r24, Z
    cae0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    cae4:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <twi_txBufferIndex>
    cae8:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <twi_txBufferLength>
    caec:	29 c0       	rjmp	.+82     	; 0xcb40 <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    caee:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    caf2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    caf6:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    caf8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    cafc:	62 cf       	rjmp	.-316    	; 0xc9c2 <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    cafe:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb02:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
    cb06:	98 17       	cp	r25, r24
    cb08:	58 f5       	brcc	.+86     	; 0xcb60 <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    cb0a:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb0e:	81 e0       	ldi	r24, 0x01	; 1
    cb10:	8e 0f       	add	r24, r30
    cb12:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb16:	f0 e0       	ldi	r31, 0x00	; 0
    cb18:	e2 5c       	subi	r30, 0xC2	; 194
    cb1a:	f2 4f       	sbci	r31, 0xF2	; 242
    cb1c:	80 81       	ld	r24, Z
    cb1e:	e9 cf       	rjmp	.-46     	; 0xcaf2 <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    cb20:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb24:	81 e0       	ldi	r24, 0x01	; 1
    cb26:	8e 0f       	add	r24, r30
    cb28:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb2c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    cb30:	f0 e0       	ldi	r31, 0x00	; 0
    cb32:	e2 5c       	subi	r30, 0xC2	; 194
    cb34:	f2 4f       	sbci	r31, 0xF2	; 242
    cb36:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    cb38:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb3c:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    cb40:	98 17       	cp	r25, r24
    cb42:	c8 f2       	brcs	.-78     	; 0xcaf6 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    cb44:	85 e8       	ldi	r24, 0x85	; 133
    cb46:	d8 cf       	rjmp	.-80     	; 0xcaf8 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    cb48:	e0 91 61 0d 	lds	r30, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb4c:	81 e0       	ldi	r24, 0x01	; 1
    cb4e:	8e 0f       	add	r24, r30
    cb50:	80 93 61 0d 	sts	0x0D61, r24	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
    cb54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    cb58:	f0 e0       	ldi	r31, 0x00	; 0
    cb5a:	e2 5c       	subi	r30, 0xC2	; 194
    cb5c:	f2 4f       	sbci	r31, 0xF2	; 242
    cb5e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
    cb60:	80 91 63 0d 	lds	r24, 0x0D63	; 0x800d63 <twi_sendStop.lto_priv.270>
    cb64:	81 11       	cpse	r24, r1
    cb66:	5c cf       	rjmp	.-328    	; 0xca20 <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    cb68:	81 e0       	ldi	r24, 0x01	; 1
    cb6a:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    cb6e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    cb70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    cb74:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
    cb78:	24 cf       	rjmp	.-440    	; 0xc9c2 <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    cb7a:	85 ec       	ldi	r24, 0xC5	; 197
    cb7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    cb80:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    cb84:	80 91 5c 0b 	lds	r24, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    cb88:	80 32       	cpi	r24, 0x20	; 32
    cb8a:	30 f4       	brcc	.+12     	; 0xcb98 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    cb8c:	e0 91 5c 0b 	lds	r30, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    cb90:	f0 e0       	ldi	r31, 0x00	; 0
    cb92:	e4 5c       	subi	r30, 0xC4	; 196
    cb94:	f4 4f       	sbci	r31, 0xF4	; 244
    cb96:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    cb98:	60 91 5c 0b 	lds	r22, 0x0B5C	; 0x800b5c <twi_rxBufferIndex>
    cb9c:	70 e0       	ldi	r23, 0x00	; 0
    cb9e:	e0 91 b0 0c 	lds	r30, 0x0CB0	; 0x800cb0 <twi_onSlaveReceive.lto_priv.274>
    cba2:	f0 91 b1 0c 	lds	r31, 0x0CB1	; 0x800cb1 <twi_onSlaveReceive.lto_priv.274+0x1>
    cba6:	8c e3       	ldi	r24, 0x3C	; 60
    cba8:	9b e0       	ldi	r25, 0x0B	; 11
    cbaa:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    cbac:	10 92 5c 0b 	sts	0x0B5C, r1	; 0x800b5c <twi_rxBufferIndex>
    cbb0:	08 cf       	rjmp	.-496    	; 0xc9c2 <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    cbb2:	10 92 62 0d 	sts	0x0D62, r1	; 0x800d62 <twi_error.lto_priv.273>
    cbb6:	34 cf       	rjmp	.-408    	; 0xca20 <__vector_39+0xb0>

0000cbb8 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
    cbb8:	20 91 1a 0d 	lds	r18, 0x0D1A	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    cbbc:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    cbbe:	21 32       	cpi	r18, 0x21	; 33
    cbc0:	08 f0       	brcs	.+2      	; 0xcbc4 <TwoWire::endTransmission()+0xc>
    cbc2:	44 c0       	rjmp	.+136    	; 0xcc4c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    cbc4:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    cbc8:	81 11       	cpse	r24, r1
    cbca:	fc cf       	rjmp	.-8      	; 0xcbc4 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:173
    cbcc:	80 91 1c 0d 	lds	r24, 0x0D1C	; 0x800d1c <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    cbd0:	92 e0       	ldi	r25, 0x02	; 2
    cbd2:	90 93 64 0d 	sts	0x0D64, r25	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
    cbd6:	91 e0       	ldi	r25, 0x01	; 1
    cbd8:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    cbdc:	9f ef       	ldi	r25, 0xFF	; 255
    cbde:	90 93 62 0d 	sts	0x0D62, r25	; 0x800d62 <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    cbe2:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
    cbe6:	20 93 60 0d 	sts	0x0D60, r18	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
    cbea:	aa ef       	ldi	r26, 0xFA	; 250
    cbec:	ba e0       	ldi	r27, 0x0A	; 10
    cbee:	ee e3       	ldi	r30, 0x3E	; 62
    cbf0:	fd e0       	ldi	r31, 0x0D	; 13
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    cbf2:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
    cbf4:	29 13       	cpse	r18, r25
    cbf6:	31 c0       	rjmp	.+98     	; 0xcc5a <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    cbf8:	10 92 5f 0d 	sts	0x0D5F, r1	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
    cbfc:	90 91 5f 0d 	lds	r25, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
    cc00:	88 0f       	add	r24, r24
    cc02:	89 2b       	or	r24, r25
    cc04:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    cc08:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <twi_inRepStart.lto_priv.271>
    cc0c:	81 30       	cpi	r24, 0x01	; 1
    cc0e:	49 f5       	brne	.+82     	; 0xcc62 <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    cc10:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
    cc14:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
    cc18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
    cc1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    cc20:	83 fd       	sbrc	r24, 3
    cc22:	f8 cf       	rjmp	.-16     	; 0xcc14 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    cc24:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    cc26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    cc2a:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
    cc2e:	82 30       	cpi	r24, 0x02	; 2
    cc30:	e1 f3       	breq	.-8      	; 0xcc2a <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
    cc32:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    cc36:	8f 3f       	cpi	r24, 0xFF	; 255
    cc38:	b1 f0       	breq	.+44     	; 0xcc66 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    cc3a:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    cc3e:	80 32       	cpi	r24, 0x20	; 32
    cc40:	a1 f0       	breq	.+40     	; 0xcc6a <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    cc42:	80 91 62 0d 	lds	r24, 0x0D62	; 0x800d62 <twi_error.lto_priv.273>
    cc46:	80 33       	cpi	r24, 0x30	; 48
    cc48:	91 f0       	breq	.+36     	; 0xcc6e <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    cc4a:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    cc4c:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
    cc50:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
    cc54:	10 92 1d 0d 	sts	0x0D1D, r1	; 0x800d1d <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
    cc58:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    cc5a:	3d 91       	ld	r19, X+
    cc5c:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    cc5e:	9f 5f       	subi	r25, 0xFF	; 255
    cc60:	c9 cf       	rjmp	.-110    	; 0xcbf4 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    cc62:	85 ee       	ldi	r24, 0xE5	; 229
    cc64:	e0 cf       	rjmp	.-64     	; 0xcc26 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
    cc66:	80 e0       	ldi	r24, 0x00	; 0
    cc68:	f1 cf       	rjmp	.-30     	; 0xcc4c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    cc6a:	82 e0       	ldi	r24, 0x02	; 2
    cc6c:	ef cf       	rjmp	.-34     	; 0xcc4c <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    cc6e:	83 e0       	ldi	r24, 0x03	; 3
    cc70:	ed cf       	rjmp	.-38     	; 0xcc4c <TwoWire::endTransmission()+0x94>

0000cc72 <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
    cc72:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
    cc76:	80 ef       	ldi	r24, 0xF0	; 240
    cc78:	90 e0       	ldi	r25, 0x00	; 0
    cc7a:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
    cc7e:	88 ef       	ldi	r24, 0xF8	; 248
    cc80:	9f e0       	ldi	r25, 0x0F	; 15
    cc82:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
    cc86:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
    cc88:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
    cc8a:	08 95       	ret

0000cc8c <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    cc8c:	86 2f       	mov	r24, r22
twi_readFrom():
    cc8e:	64 2f       	mov	r22, r20
    cc90:	0e 94 d0 b7 	call	0x16fa0	; 0x16fa0 <twi_readFrom.part.0.constprop.201>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    cc94:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
    cc98:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    cc9c:	08 95       	ret

0000cc9e <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
    cc9e:	ff 92       	push	r15
    cca0:	0f 93       	push	r16
    cca2:	1f 93       	push	r17
    cca4:	cf 93       	push	r28
    cca6:	df 93       	push	r29
    cca8:	d8 2f       	mov	r29, r24
    ccaa:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
    ccac:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
    ccb0:	86 e9       	ldi	r24, 0x96	; 150
    ccb2:	90 e0       	ldi	r25, 0x00	; 0
    ccb4:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
    ccb8:	88 ef       	ldi	r24, 0xF8	; 248
    ccba:	9f e0       	ldi	r25, 0x0F	; 15
    ccbc:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
    ccc0:	ce ef       	ldi	r28, 0xFE	; 254
    ccc2:	88 23       	and	r24, r24
    ccc4:	41 f0       	breq	.+16     	; 0xccd6 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
    ccc6:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
    ccc8:	8c 2f       	mov	r24, r28
    ccca:	df 91       	pop	r29
    cccc:	cf 91       	pop	r28
    ccce:	1f 91       	pop	r17
    ccd0:	0f 91       	pop	r16
    ccd2:	ff 90       	pop	r15
    ccd4:	08 95       	ret
    ccd6:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
    ccd8:	e1 f1       	breq	.+120    	; 0xcd52 <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    ccda:	41 e0       	ldi	r20, 0x01	; 1
    ccdc:	6d 2f       	mov	r22, r29
    ccde:	88 ef       	ldi	r24, 0xF8	; 248
    cce0:	9f e0       	ldi	r25, 0x0F	; 15
    cce2:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    cce6:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    ccea:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    ccee:	89 1b       	sub	r24, r25
    ccf0:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
    ccf2:	18 16       	cp	r1, r24
    ccf4:	19 06       	cpc	r1, r25
    ccf6:	1c f4       	brge	.+6      	; 0xccfe <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
    ccf8:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
    ccfc:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
    ccfe:	f0 fc       	sbrc	r15, 0
    cd00:	ea cf       	rjmp	.-44     	; 0xccd6 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    cd02:	8d 2f       	mov	r24, r29
    cd04:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
    cd08:	81 ee       	ldi	r24, 0xE1	; 225
    cd0a:	90 e0       	ldi	r25, 0x00	; 0
    cd0c:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
    cd10:	61 ee       	ldi	r22, 0xE1	; 225
    cd12:	88 ef       	ldi	r24, 0xF8	; 248
    cd14:	9f e0       	ldi	r25, 0x0F	; 15
    cd16:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
    cd1a:	88 ef       	ldi	r24, 0xF8	; 248
    cd1c:	9f e0       	ldi	r25, 0x0F	; 15
    cd1e:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
    cd22:	c8 2f       	mov	r28, r24
    cd24:	81 11       	cpse	r24, r1
    cd26:	cf cf       	rjmp	.-98     	; 0xccc6 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
    cd28:	41 e0       	ldi	r20, 0x01	; 1
    cd2a:	6d 2f       	mov	r22, r29
    cd2c:	88 ef       	ldi	r24, 0xF8	; 248
    cd2e:	9f e0       	ldi	r25, 0x0F	; 15
    cd30:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    cd34:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    cd38:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    cd3c:	89 1b       	sub	r24, r25
    cd3e:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
    cd40:	18 16       	cp	r1, r24
    cd42:	19 06       	cpc	r1, r25
    cd44:	0c f0       	brlt	.+2      	; 0xcd48 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
    cd46:	c0 cf       	rjmp	.-128    	; 0xccc8 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
    cd48:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
    cd4c:	f8 01       	movw	r30, r16
    cd4e:	80 83       	st	Z, r24
    cd50:	bb cf       	rjmp	.-138    	; 0xccc8 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
    cd52:	c4 e0       	ldi	r28, 0x04	; 4
    cd54:	b9 cf       	rjmp	.-142    	; 0xccc8 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

0000cd56 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
    cd56:	0f 93       	push	r16
    cd58:	1f 93       	push	r17
    cd5a:	cf 93       	push	r28
    cd5c:	df 93       	push	r29
    cd5e:	08 2f       	mov	r16, r24
    cd60:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    cd62:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
    cd66:	85 ea       	ldi	r24, 0xA5	; 165
    cd68:	90 e0       	ldi	r25, 0x00	; 0
    cd6a:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
    cd6e:	6d 2f       	mov	r22, r29
    cd70:	88 ef       	ldi	r24, 0xF8	; 248
    cd72:	9f e0       	ldi	r25, 0x0F	; 15
    cd74:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
    cd78:	88 ef       	ldi	r24, 0xF8	; 248
    cd7a:	9f e0       	ldi	r25, 0x0F	; 15
    cd7c:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
    cd80:	c8 2f       	mov	r28, r24
    cd82:	81 11       	cpse	r24, r1
    cd84:	1d c0       	rjmp	.+58     	; 0xcdc0 <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
    cd86:	1e ef       	ldi	r17, 0xFE	; 254
    cd88:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
    cd8a:	e1 f0       	breq	.+56     	; 0xcdc4 <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
    cd8c:	41 e0       	ldi	r20, 0x01	; 1
    cd8e:	60 2f       	mov	r22, r16
    cd90:	88 ef       	ldi	r24, 0xF8	; 248
    cd92:	9f e0       	ldi	r25, 0x0F	; 15
    cd94:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    cd98:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    cd9c:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    cda0:	89 1b       	sub	r24, r25
    cda2:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
    cda4:	18 16       	cp	r1, r24
    cda6:	19 06       	cpc	r1, r25
    cda8:	1c f4       	brge	.+6      	; 0xcdb0 <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
    cdaa:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
    cdae:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
    cdb0:	d0 fd       	sbrc	r29, 0
    cdb2:	ea cf       	rjmp	.-44     	; 0xcd88 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
    cdb4:	8c 2f       	mov	r24, r28
    cdb6:	df 91       	pop	r29
    cdb8:	cf 91       	pop	r28
    cdba:	1f 91       	pop	r17
    cdbc:	0f 91       	pop	r16
    cdbe:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    cdc0:	c3 e0       	ldi	r28, 0x03	; 3
    cdc2:	f8 cf       	rjmp	.-16     	; 0xcdb4 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
    cdc4:	c4 e0       	ldi	r28, 0x04	; 4
    cdc6:	f6 cf       	rjmp	.-20     	; 0xcdb4 <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

0000cdc8 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
    cdc8:	ef 92       	push	r14
    cdca:	ff 92       	push	r15
    cdcc:	1f 93       	push	r17
    cdce:	cf 93       	push	r28
    cdd0:	df 93       	push	r29
    cdd2:	18 2f       	mov	r17, r24
    cdd4:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
    cdd6:	65 e5       	ldi	r22, 0x55	; 85
    cdd8:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
    cddc:	81 11       	cpse	r24, r1
    cdde:	0d c0       	rjmp	.+26     	; 0xcdfa <owMatchRom(unsigned char, unsigned char*)+0x32>
    cde0:	e7 01       	movw	r28, r14
    cde2:	88 e0       	ldi	r24, 0x08	; 8
    cde4:	e8 0e       	add	r14, r24
    cde6:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
    cde8:	69 91       	ld	r22, Y+
    cdea:	81 2f       	mov	r24, r17
    cdec:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
    cdf0:	81 11       	cpse	r24, r1
    cdf2:	03 c0       	rjmp	.+6      	; 0xcdfa <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
    cdf4:	ec 16       	cp	r14, r28
    cdf6:	fd 06       	cpc	r15, r29
    cdf8:	b9 f7       	brne	.-18     	; 0xcde8 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
    cdfa:	df 91       	pop	r29
    cdfc:	cf 91       	pop	r28
    cdfe:	1f 91       	pop	r17
    ce00:	ff 90       	pop	r15
    ce02:	ef 90       	pop	r14
    ce04:	08 95       	ret

0000ce06 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
    ce06:	0f 93       	push	r16
    ce08:	1f 93       	push	r17
    ce0a:	cf 93       	push	r28
    ce0c:	df 93       	push	r29
    ce0e:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
    ce10:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
    ce14:	84 eb       	ldi	r24, 0xB4	; 180
    ce16:	90 e0       	ldi	r25, 0x00	; 0
    ce18:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
    ce1c:	88 ef       	ldi	r24, 0xF8	; 248
    ce1e:	9f e0       	ldi	r25, 0x0F	; 15
    ce20:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
    ce24:	c8 2f       	mov	r28, r24
    ce26:	81 11       	cpse	r24, r1
    ce28:	1b c0       	rjmp	.+54     	; 0xce60 <ds2482owReset(unsigned char)+0x5a>
    ce2a:	de ef       	ldi	r29, 0xFE	; 254
    ce2c:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
    ce2e:	f9 f0       	breq	.+62     	; 0xce6e <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
    ce30:	41 e0       	ldi	r20, 0x01	; 1
    ce32:	60 2f       	mov	r22, r16
    ce34:	88 ef       	ldi	r24, 0xF8	; 248
    ce36:	9f e0       	ldi	r25, 0x0F	; 15
    ce38:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
    ce3c:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
    ce40:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
    ce44:	89 1b       	sub	r24, r25
    ce46:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
    ce48:	18 16       	cp	r1, r24
    ce4a:	19 06       	cpc	r1, r25
    ce4c:	1c f4       	brge	.+6      	; 0xce54 <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
    ce4e:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
    ce52:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
    ce54:	10 fd       	sbrc	r17, 0
    ce56:	ea cf       	rjmp	.-44     	; 0xce2c <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
    ce58:	11 fd       	sbrc	r17, 1
    ce5a:	03 c0       	rjmp	.+6      	; 0xce62 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
    ce5c:	c5 e0       	ldi	r28, 0x05	; 5
    ce5e:	01 c0       	rjmp	.+2      	; 0xce62 <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
    ce60:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
    ce62:	8c 2f       	mov	r24, r28
    ce64:	df 91       	pop	r29
    ce66:	cf 91       	pop	r28
    ce68:	1f 91       	pop	r17
    ce6a:	0f 91       	pop	r16
    ce6c:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
    ce6e:	c4 e0       	ldi	r28, 0x04	; 4
    ce70:	f8 cf       	rjmp	.-16     	; 0xce62 <ds2482owReset(unsigned char)+0x5c>

0000ce72 <RTC_DS1307::now()>:
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:268
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
}

DateTime RTC_DS1307::now() {
    ce72:	cf 92       	push	r12
    ce74:	df 92       	push	r13
    ce76:	ff 92       	push	r15
    ce78:	0f 93       	push	r16
    ce7a:	1f 93       	push	r17
    ce7c:	cf 93       	push	r28
    ce7e:	df 93       	push	r29
    ce80:	6c 01       	movw	r12, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    ce82:	88 e6       	ldi	r24, 0x68	; 104
    ce84:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
    ce88:	60 e0       	ldi	r22, 0x00	; 0
    ce8a:	88 ef       	ldi	r24, 0xF8	; 248
    ce8c:	9f e0       	ldi	r25, 0x0F	; 15
    ce8e:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
    ce92:	88 ef       	ldi	r24, 0xF8	; 248
    ce94:	9f e0       	ldi	r25, 0x0F	; 15
    ce96:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
    ce9a:	87 e0       	ldi	r24, 0x07	; 7
    ce9c:	90 e0       	ldi	r25, 0x00	; 0
    ce9e:	0e 94 bc bc 	call	0x17978	; 0x17978 <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    cea2:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
    cea6:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    cea8:	28 2f       	mov	r18, r24
    ceaa:	30 e0       	ldi	r19, 0x00	; 0
    ceac:	94 e0       	ldi	r25, 0x04	; 4
    ceae:	35 95       	asr	r19
    ceb0:	27 95       	ror	r18
    ceb2:	9a 95       	dec	r25
    ceb4:	e1 f7       	brne	.-8      	; 0xceae <RTC_DS1307::now()+0x3c>
    ceb6:	92 2f       	mov	r25, r18
    ceb8:	99 0f       	add	r25, r25
    ceba:	99 0f       	add	r25, r25
    cebc:	c2 2f       	mov	r28, r18
    cebe:	c9 1b       	sub	r28, r25
    cec0:	cc 0f       	add	r28, r28
    cec2:	c8 0f       	add	r28, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
    cec4:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    cec8:	9c 01       	movw	r18, r24
    ceca:	44 e0       	ldi	r20, 0x04	; 4
    cecc:	35 95       	asr	r19
    cece:	27 95       	ror	r18
    ced0:	4a 95       	dec	r20
    ced2:	e1 f7       	brne	.-8      	; 0xcecc <RTC_DS1307::now()+0x5a>
    ced4:	2f 70       	andi	r18, 0x0F	; 15
    ced6:	33 27       	eor	r19, r19
    ced8:	92 2f       	mov	r25, r18
    ceda:	99 0f       	add	r25, r25
    cedc:	99 0f       	add	r25, r25
    cede:	d2 2f       	mov	r29, r18
    cee0:	d9 1b       	sub	r29, r25
    cee2:	dd 0f       	add	r29, r29
    cee4:	d8 0f       	add	r29, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
    cee6:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    ceea:	9c 01       	movw	r18, r24
    ceec:	54 e0       	ldi	r21, 0x04	; 4
    ceee:	35 95       	asr	r19
    cef0:	27 95       	ror	r18
    cef2:	5a 95       	dec	r21
    cef4:	e1 f7       	brne	.-8      	; 0xceee <RTC_DS1307::now()+0x7c>
    cef6:	2f 70       	andi	r18, 0x0F	; 15
    cef8:	33 27       	eor	r19, r19
    cefa:	92 2f       	mov	r25, r18
    cefc:	99 0f       	add	r25, r25
    cefe:	99 0f       	add	r25, r25
    cf00:	12 2f       	mov	r17, r18
    cf02:	19 1b       	sub	r17, r25
    cf04:	11 0f       	add	r17, r17
    cf06:	18 0f       	add	r17, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
    cf08:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
    cf0c:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    cf10:	9c 01       	movw	r18, r24
    cf12:	64 e0       	ldi	r22, 0x04	; 4
    cf14:	35 95       	asr	r19
    cf16:	27 95       	ror	r18
    cf18:	6a 95       	dec	r22
    cf1a:	e1 f7       	brne	.-8      	; 0xcf14 <RTC_DS1307::now()+0xa2>
    cf1c:	2f 70       	andi	r18, 0x0F	; 15
    cf1e:	33 27       	eor	r19, r19
    cf20:	92 2f       	mov	r25, r18
    cf22:	99 0f       	add	r25, r25
    cf24:	99 0f       	add	r25, r25
    cf26:	02 2f       	mov	r16, r18
    cf28:	09 1b       	sub	r16, r25
    cf2a:	00 0f       	add	r16, r16
    cf2c:	08 0f       	add	r16, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
    cf2e:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    cf32:	9c 01       	movw	r18, r24
    cf34:	74 e0       	ldi	r23, 0x04	; 4
    cf36:	35 95       	asr	r19
    cf38:	27 95       	ror	r18
    cf3a:	7a 95       	dec	r23
    cf3c:	e1 f7       	brne	.-8      	; 0xcf36 <RTC_DS1307::now()+0xc4>
    cf3e:	2f 70       	andi	r18, 0x0F	; 15
    cf40:	33 27       	eor	r19, r19
    cf42:	92 2f       	mov	r25, r18
    cf44:	99 0f       	add	r25, r25
    cf46:	99 0f       	add	r25, r25
    cf48:	f2 2e       	mov	r15, r18
    cf4a:	f9 1a       	sub	r15, r25
    cf4c:	ff 0c       	add	r15, r15
    cf4e:	f8 0e       	add	r15, r24
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
    cf50:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
    cf54:	9c 01       	movw	r18, r24
    cf56:	e4 e0       	ldi	r30, 0x04	; 4
    cf58:	35 95       	asr	r19
    cf5a:	27 95       	ror	r18
    cf5c:	ea 95       	dec	r30
    cf5e:	e1 f7       	brne	.-8      	; 0xcf58 <RTC_DS1307::now()+0xe6>
    cf60:	2f 70       	andi	r18, 0x0F	; 15
    cf62:	33 27       	eor	r19, r19
    cf64:	92 2f       	mov	r25, r18
    cf66:	99 0f       	add	r25, r25
    cf68:	99 0f       	add	r25, r25
    cf6a:	29 1b       	sub	r18, r25
    cf6c:	22 0f       	add	r18, r18
    cf6e:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    cf70:	f6 01       	movw	r30, r12
    cf72:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    cf74:	f1 82       	std	Z+1, r15	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    cf76:	02 83       	std	Z+2, r16	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    cf78:	13 83       	std	Z+3, r17	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    cf7a:	d4 83       	std	Z+4, r29	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    cf7c:	c5 83       	std	Z+5, r28	; 0x05
_ZN10RTC_DS13073nowEv():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:283
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
    cf7e:	c6 01       	movw	r24, r12
    cf80:	df 91       	pop	r29
    cf82:	cf 91       	pop	r28
    cf84:	1f 91       	pop	r17
    cf86:	0f 91       	pop	r16
    cf88:	ff 90       	pop	r15
    cf8a:	df 90       	pop	r13
    cf8c:	cf 90       	pop	r12
    cf8e:	08 95       	ret

0000cf90 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254
  Wire.requestFrom(DS1307_ADDRESS, 1);
  uint8_t ss = Wire._I2C_READ();
  return !(ss>>7);
}

void RTC_DS1307::adjust(const DateTime& dt) {
    cf90:	1f 93       	push	r17
    cf92:	cf 93       	push	r28
    cf94:	df 93       	push	r29
    cf96:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
    cf98:	88 e6       	ldi	r24, 0x68	; 104
    cf9a:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
    cf9e:	60 e0       	ldi	r22, 0x00	; 0
    cfa0:	88 ef       	ldi	r24, 0xF8	; 248
    cfa2:	9f e0       	ldi	r25, 0x0F	; 15
    cfa4:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    cfa8:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    cfaa:	1a e0       	ldi	r17, 0x0A	; 10
    cfac:	82 2f       	mov	r24, r18
    cfae:	61 2f       	mov	r22, r17
    cfb0:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    cfb4:	68 2f       	mov	r22, r24
    cfb6:	66 0f       	add	r22, r22
    cfb8:	68 0f       	add	r22, r24
    cfba:	66 0f       	add	r22, r22
    cfbc:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    cfbe:	88 ef       	ldi	r24, 0xF8	; 248
    cfc0:	9f e0       	ldi	r25, 0x0F	; 15
    cfc2:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    cfc6:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    cfc8:	82 2f       	mov	r24, r18
    cfca:	61 2f       	mov	r22, r17
    cfcc:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    cfd0:	68 2f       	mov	r22, r24
    cfd2:	66 0f       	add	r22, r22
    cfd4:	68 0f       	add	r22, r24
    cfd6:	66 0f       	add	r22, r22
    cfd8:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    cfda:	88 ef       	ldi	r24, 0xF8	; 248
    cfdc:	9f e0       	ldi	r25, 0x0F	; 15
    cfde:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    cfe2:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    cfe4:	82 2f       	mov	r24, r18
    cfe6:	61 2f       	mov	r22, r17
    cfe8:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    cfec:	68 2f       	mov	r22, r24
    cfee:	66 0f       	add	r22, r22
    cff0:	68 0f       	add	r22, r24
    cff2:	66 0f       	add	r22, r22
    cff4:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    cff6:	88 ef       	ldi	r24, 0xF8	; 248
    cff8:	9f e0       	ldi	r25, 0x0F	; 15
    cffa:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
    cffe:	60 e0       	ldi	r22, 0x00	; 0
    d000:	88 ef       	ldi	r24, 0xF8	; 248
    d002:	9f e0       	ldi	r25, 0x0F	; 15
    d004:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    d008:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d00a:	82 2f       	mov	r24, r18
    d00c:	61 2f       	mov	r22, r17
    d00e:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    d012:	68 2f       	mov	r22, r24
    d014:	66 0f       	add	r22, r22
    d016:	68 0f       	add	r22, r24
    d018:	66 0f       	add	r22, r22
    d01a:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    d01c:	88 ef       	ldi	r24, 0xF8	; 248
    d01e:	9f e0       	ldi	r25, 0x0F	; 15
    d020:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    d024:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d026:	82 2f       	mov	r24, r18
    d028:	61 2f       	mov	r22, r17
    d02a:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    d02e:	68 2f       	mov	r22, r24
    d030:	66 0f       	add	r22, r22
    d032:	68 0f       	add	r22, r24
    d034:	66 0f       	add	r22, r22
    d036:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    d038:	88 ef       	ldi	r24, 0xF8	; 248
    d03a:	9f e0       	ldi	r25, 0x0F	; 15
    d03c:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
    d040:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
    d042:	82 2f       	mov	r24, r18
    d044:	61 2f       	mov	r22, r17
    d046:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    d04a:	68 2f       	mov	r22, r24
    d04c:	66 0f       	add	r22, r22
    d04e:	68 0f       	add	r22, r24
    d050:	66 0f       	add	r22, r22
    d052:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    d054:	88 ef       	ldi	r24, 0xF8	; 248
    d056:	9f e0       	ldi	r25, 0x0F	; 15
    d058:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
    d05c:	88 ef       	ldi	r24, 0xF8	; 248
    d05e:	9f e0       	ldi	r25, 0x0F	; 15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
    d060:	df 91       	pop	r29
    d062:	cf 91       	pop	r28
    d064:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
    d066:	0c 94 dc 65 	jmp	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>

0000d06a <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5869
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(datum_text, "%02d.%02d.%04d", now.day() , now.month() , now.year());
  display_element_set_string(datum_text, 11, 0, &helper_set_date_manualy, &valid_true);
}
void helper_set_date_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d06a:	cf 92       	push	r12
    d06c:	df 92       	push	r13
    d06e:	ef 92       	push	r14
    d070:	ff 92       	push	r15
    d072:	0f 93       	push	r16
    d074:	1f 93       	push	r17
    d076:	cf 93       	push	r28
    d078:	df 93       	push	r29
    d07a:	cd b7       	in	r28, 0x3d	; 61
    d07c:	de b7       	in	r29, 0x3e	; 62
    d07e:	69 97       	sbiw	r28, 0x19	; 25
    d080:	0f b6       	in	r0, 0x3f	; 63
    d082:	f8 94       	cli
    d084:	de bf       	out	0x3e, r29	; 62
    d086:	0f be       	out	0x3f, r0	; 63
    d088:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5872
  char datum_text[12];
  uint16_t dat[3];
  display_element_get_string(datum_text);
    d08a:	ce 01       	movw	r24, r28
    d08c:	01 96       	adiw	r24, 0x01	; 1
    d08e:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
    d092:	7e 01       	movw	r14, r28
    d094:	74 e1       	ldi	r23, 0x14	; 20
    d096:	e7 0e       	add	r14, r23
    d098:	f1 1c       	adc	r15, r1
    d09a:	6e 01       	movw	r12, r28
    d09c:	8a e1       	ldi	r24, 0x1A	; 26
    d09e:	c8 0e       	add	r12, r24
    d0a0:	d1 1c       	adc	r13, r1
    d0a2:	8e 01       	movw	r16, r28
    d0a4:	0f 5f       	subi	r16, 0xFF	; 255
    d0a6:	1f 4f       	sbci	r17, 0xFF	; 255
parseBytes():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    d0a8:	4a e0       	ldi	r20, 0x0A	; 10
    d0aa:	50 e0       	ldi	r21, 0x00	; 0
    d0ac:	70 e0       	ldi	r23, 0x00	; 0
    d0ae:	60 e0       	ldi	r22, 0x00	; 0
    d0b0:	c8 01       	movw	r24, r16
    d0b2:	0e 94 61 ed 	call	0x1dac2	; 0x1dac2 <strtoul>
    d0b6:	f7 01       	movw	r30, r14
    d0b8:	61 93       	st	Z+, r22
    d0ba:	71 93       	st	Z+, r23
    d0bc:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:124
    str = strchr(str, sep);               // Find next separator
    d0be:	6e e2       	ldi	r22, 0x2E	; 46
    d0c0:	70 e0       	ldi	r23, 0x00	; 0
    d0c2:	c8 01       	movw	r24, r16
    d0c4:	0e 94 33 fb 	call	0x1f666	; 0x1f666 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    if (str == NULL || *str == '\0') {
    d0c8:	00 97       	sbiw	r24, 0x00	; 0
    d0ca:	51 f0       	breq	.+20     	; 0xd0e0 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
    d0cc:	fc 01       	movw	r30, r24
    d0ce:	20 81       	ld	r18, Z
    d0d0:	22 23       	and	r18, r18
    d0d2:	31 f0       	breq	.+12     	; 0xd0e0 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x76>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:128
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
    d0d4:	8c 01       	movw	r16, r24
    d0d6:	0f 5f       	subi	r16, 0xFF	; 255
    d0d8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
}


void parseBytes(const char* str, char sep, uint16_t* bytes, int maxBytes, int base) 
{
  for (int i = 0; i < maxBytes; i++) {
    d0da:	ce 14       	cp	r12, r14
    d0dc:	df 04       	cpc	r13, r15
    d0de:	21 f7       	brne	.-56     	; 0xd0a8 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x3e>
    d0e0:	20 91 79 12 	lds	r18, 0x1279	; 0x801279 <now+0x5>
    d0e4:	30 91 78 12 	lds	r19, 0x1278	; 0x801278 <now+0x4>
    d0e8:	40 91 77 12 	lds	r20, 0x1277	; 0x801277 <now+0x3>
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5874
  parseBytes(datum_text, '.', dat, 3, 10);
  rtc.adjust(DateTime(dat[2], dat[1], dat[0], now.hour(), now.minute(), now.second()));
    d0ec:	5c 89       	ldd	r21, Y+20	; 0x14
    d0ee:	6e 89       	ldd	r22, Y+22	; 0x16
    d0f0:	88 8d       	ldd	r24, Y+24	; 0x18
    d0f2:	99 8d       	ldd	r25, Y+25	; 0x19
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    d0f4:	80 3d       	cpi	r24, 0xD0	; 208
    d0f6:	f7 e0       	ldi	r31, 0x07	; 7
    d0f8:	9f 07       	cpc	r25, r31
    d0fa:	10 f0       	brcs	.+4      	; 0xd100 <helper_set_date_manualy(unsigned int, unsigned int, unsigned char)+0x96>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    d0fc:	80 5d       	subi	r24, 0xD0	; 208
    d0fe:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    d100:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d102:	6e 87       	std	Y+14, r22	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d104:	5f 87       	std	Y+15, r21	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d106:	48 8b       	std	Y+16, r20	; 0x10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d108:	39 8b       	std	Y+17, r19	; 0x11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d10a:	2a 8b       	std	Y+18, r18	; 0x12
_Z23helper_set_date_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5874
    d10c:	ce 01       	movw	r24, r28
    d10e:	0d 96       	adiw	r24, 0x0d	; 13
    d110:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5875
}
    d114:	69 96       	adiw	r28, 0x19	; 25
    d116:	0f b6       	in	r0, 0x3f	; 63
    d118:	f8 94       	cli
    d11a:	de bf       	out	0x3e, r29	; 62
    d11c:	0f be       	out	0x3f, r0	; 63
    d11e:	cd bf       	out	0x3d, r28	; 61
    d120:	df 91       	pop	r29
    d122:	cf 91       	pop	r28
    d124:	1f 91       	pop	r17
    d126:	0f 91       	pop	r16
    d128:	ff 90       	pop	r15
    d12a:	ef 90       	pop	r14
    d12c:	df 90       	pop	r13
    d12e:	cf 90       	pop	r12
    d130:	08 95       	ret

0000d132 <helper_set_time_manualy(unsigned int, unsigned int, unsigned char)>:
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5853
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_NUMBER, 0, 0);
  sprintf(cas_text, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
  display_element_set_string(cas_text, 9, 0, &helper_set_time_manualy, &valid_true);
}
void helper_set_time_manualy(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d132:	cf 93       	push	r28
    d134:	df 93       	push	r29
    d136:	cd b7       	in	r28, 0x3d	; 61
    d138:	de b7       	in	r29, 0x3e	; 62
    d13a:	64 97       	sbiw	r28, 0x14	; 20
    d13c:	0f b6       	in	r0, 0x3f	; 63
    d13e:	f8 94       	cli
    d140:	de bf       	out	0x3e, r29	; 62
    d142:	0f be       	out	0x3f, r0	; 63
    d144:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5856
  char cas_text[10];
  uint8_t tim[3];
  display_element_get_string(cas_text);
    d146:	ce 01       	movw	r24, r28
    d148:	01 96       	adiw	r24, 0x01	; 1
    d14a:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
  parseBytes(cas_text, ':', tim, 3, 10);
    d14e:	23 e0       	ldi	r18, 0x03	; 3
    d150:	30 e0       	ldi	r19, 0x00	; 0
    d152:	ae 01       	movw	r20, r28
    d154:	4e 5e       	subi	r20, 0xEE	; 238
    d156:	5f 4f       	sbci	r21, 0xFF	; 255
    d158:	6a e3       	ldi	r22, 0x3A	; 58
    d15a:	ce 01       	movw	r24, r28
    d15c:	01 96       	adiw	r24, 0x01	; 1
    d15e:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
  rtc.adjust(DateTime(now.year(), now.month(), now.day(), tim[0], tim[1], tim[2]));
    d162:	8c 89       	ldd	r24, Y+20	; 0x14
    d164:	9b 89       	ldd	r25, Y+19	; 0x13
    d166:	2a 89       	ldd	r18, Y+18	; 0x12
    d168:	e4 e7       	ldi	r30, 0x74	; 116
    d16a:	f2 e1       	ldi	r31, 0x12	; 18
    d16c:	32 81       	ldd	r19, Z+2	; 0x02
    d16e:	41 81       	ldd	r20, Z+1	; 0x01
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    d170:	50 81       	ld	r21, Z
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    d172:	5b 87       	std	Y+11, r21	; 0x0b
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    d174:	4c 87       	std	Y+12, r20	; 0x0c
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    d176:	3d 87       	std	Y+13, r19	; 0x0d
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    d178:	2e 87       	std	Y+14, r18	; 0x0e
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    d17a:	9f 87       	std	Y+15, r25	; 0x0f
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    d17c:	88 8b       	std	Y+16, r24	; 0x10
_Z23helper_set_time_manualyjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
    d17e:	ce 01       	movw	r24, r28
    d180:	0b 96       	adiw	r24, 0x0b	; 11
    d182:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5859
}
    d186:	64 96       	adiw	r28, 0x14	; 20
    d188:	0f b6       	in	r0, 0x3f	; 63
    d18a:	f8 94       	cli
    d18c:	de bf       	out	0x3e, r29	; 62
    d18e:	0f be       	out	0x3f, r0	; 63
    d190:	cd bf       	out	0x3d, r28	; 61
    d192:	df 91       	pop	r29
    d194:	cf 91       	pop	r28
    d196:	08 95       	ret

0000d198 <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
    d198:	cf 93       	push	r28
    d19a:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
    d19c:	fc 01       	movw	r30, r24
    d19e:	a0 81       	ld	r26, Z
    d1a0:	b1 81       	ldd	r27, Z+1	; 0x01
    d1a2:	10 97       	sbiw	r26, 0x00	; 0
    d1a4:	21 f4       	brne	.+8      	; 0xd1ae <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
    d1a6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
    d1a8:	df 91       	pop	r29
    d1aa:	cf 91       	pop	r28
    d1ac:	08 95       	ret
    d1ae:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    d1b0:	ed 91       	ld	r30, X+
    d1b2:	fc 91       	ld	r31, X
    d1b4:	11 97       	sbiw	r26, 0x01	; 1
    d1b6:	06 88       	ldd	r0, Z+22	; 0x16
    d1b8:	f7 89       	ldd	r31, Z+23	; 0x17
    d1ba:	e0 2d       	mov	r30, r0
    d1bc:	cd 01       	movw	r24, r26
    d1be:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
    d1c0:	81 11       	cpse	r24, r1
    d1c2:	1e c0       	rjmp	.+60     	; 0xd200 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
    d1c4:	fe 01       	movw	r30, r28
    d1c6:	e5 5e       	subi	r30, 0xE5	; 229
    d1c8:	fd 4f       	sbci	r31, 0xFD	; 253
    d1ca:	80 81       	ld	r24, Z
    d1cc:	91 81       	ldd	r25, Z+1	; 0x01
    d1ce:	89 2b       	or	r24, r25
    d1d0:	51 f7       	brne	.-44     	; 0xd1a6 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
    d1d2:	8d ef       	ldi	r24, 0xFD	; 253
    d1d4:	9f ef       	ldi	r25, 0xFF	; 255
    d1d6:	91 83       	std	Z+1, r25	; 0x01
    d1d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
    d1da:	88 81       	ld	r24, Y
    d1dc:	99 81       	ldd	r25, Y+1	; 0x01
    d1de:	dc 01       	movw	r26, r24
    d1e0:	ed 91       	ld	r30, X+
    d1e2:	fc 91       	ld	r31, X
    d1e4:	06 80       	ldd	r0, Z+6	; 0x06
    d1e6:	f7 81       	ldd	r31, Z+7	; 0x07
    d1e8:	e0 2d       	mov	r30, r0
    d1ea:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
    d1ec:	88 81       	ld	r24, Y
    d1ee:	99 81       	ldd	r25, Y+1	; 0x01
    d1f0:	dc 01       	movw	r26, r24
    d1f2:	ed 91       	ld	r30, X+
    d1f4:	fc 91       	ld	r31, X
    d1f6:	04 88       	ldd	r0, Z+20	; 0x14
    d1f8:	f5 89       	ldd	r31, Z+21	; 0x15
    d1fa:	e0 2d       	mov	r30, r0
    d1fc:	19 95       	eicall
    d1fe:	d3 cf       	rjmp	.-90     	; 0xd1a6 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
    d200:	81 e0       	ldi	r24, 0x01	; 1
    d202:	d2 cf       	rjmp	.-92     	; 0xd1a8 <PubSubClient::connected()+0x10>

0000d204 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    d204:	bf 92       	push	r11
    d206:	cf 92       	push	r12
    d208:	df 92       	push	r13
    d20a:	ef 92       	push	r14
    d20c:	ff 92       	push	r15
    d20e:	0f 93       	push	r16
    d210:	1f 93       	push	r17
    d212:	cf 93       	push	r28
    d214:	df 93       	push	r29
    d216:	00 d0       	rcall	.+0      	; 0xd218 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
    d218:	1f 92       	push	r1
    d21a:	cd b7       	in	r28, 0x3d	; 61
    d21c:	de b7       	in	r29, 0x3e	; 62
    d21e:	7c 01       	movw	r14, r24
    d220:	b6 2e       	mov	r11, r22
    d222:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    d224:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    d226:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
    d228:	be 01       	movw	r22, r28
    d22a:	6f 5f       	subi	r22, 0xFF	; 255
    d22c:	7f 4f       	sbci	r23, 0xFF	; 255
    d22e:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
    d230:	28 2f       	mov	r18, r24
    d232:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
    d234:	88 0f       	add	r24, r24
    d236:	89 2f       	mov	r24, r25
    d238:	88 1f       	adc	r24, r24
    d23a:	99 0b       	sbc	r25, r25
    d23c:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
    d23e:	00 97       	sbiw	r24, 0x00	; 0
    d240:	09 f0       	breq	.+2      	; 0xd244 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
    d242:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
    d244:	f6 01       	movw	r30, r12
    d246:	e3 0f       	add	r30, r19
    d248:	f1 1d       	adc	r31, r1
    d24a:	20 83       	st	Z, r18
    d24c:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
    d24e:	00 97       	sbiw	r24, 0x00	; 0
    d250:	79 f7       	brne	.-34     	; 0xd230 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
    d252:	e3 2f       	mov	r30, r19
    d254:	f0 e0       	ldi	r31, 0x00	; 0
    d256:	ba 01       	movw	r22, r20
    d258:	6e 1b       	sub	r22, r30
    d25a:	7f 0b       	sbc	r23, r31
    d25c:	6c 5f       	subi	r22, 0xFC	; 252
    d25e:	7f 4f       	sbci	r23, 0xFF	; 255
    d260:	db 01       	movw	r26, r22
    d262:	bc 92       	st	X, r11
    d264:	4e 1b       	sub	r20, r30
    d266:	5f 0b       	sbc	r21, r31
    d268:	4b 5f       	subi	r20, 0xFB	; 251
    d26a:	5f 4f       	sbci	r21, 0xFF	; 255
    d26c:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
    d26e:	9c 01       	movw	r18, r24
    d270:	2c 19       	sub	r18, r12
    d272:	3d 09       	sbc	r19, r13
    d274:	2e 17       	cp	r18, r30
    d276:	3f 07       	cpc	r19, r31
    d278:	3c f4       	brge	.+14     	; 0xd288 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
    d27a:	dc 01       	movw	r26, r24
    d27c:	2d 91       	ld	r18, X+
    d27e:	cd 01       	movw	r24, r26
    d280:	da 01       	movw	r26, r20
    d282:	2d 93       	st	X+, r18
    d284:	ad 01       	movw	r20, r26
    d286:	f3 cf       	rjmp	.-26     	; 0xd26e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
    d288:	d7 01       	movw	r26, r14
    d28a:	8d 91       	ld	r24, X+
    d28c:	9c 91       	ld	r25, X
    d28e:	0f 5f       	subi	r16, 0xFF	; 255
    d290:	1f 4f       	sbci	r17, 0xFF	; 255
    d292:	0e 0f       	add	r16, r30
    d294:	1f 1f       	adc	r17, r31
    d296:	dc 01       	movw	r26, r24
    d298:	ed 91       	ld	r30, X+
    d29a:	fc 91       	ld	r31, X
    d29c:	02 80       	ldd	r0, Z+2	; 0x02
    d29e:	f3 81       	ldd	r31, Z+3	; 0x03
    d2a0:	e0 2d       	mov	r30, r0
    d2a2:	a8 01       	movw	r20, r16
    d2a4:	19 95       	eicall
    d2a6:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
    d2a8:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
    d2ac:	f7 01       	movw	r30, r14
    d2ae:	ec 5f       	subi	r30, 0xFC	; 252
    d2b0:	fd 4f       	sbci	r31, 0xFD	; 253
    d2b2:	60 83       	st	Z, r22
    d2b4:	71 83       	std	Z+1, r23	; 0x01
    d2b6:	82 83       	std	Z+2, r24	; 0x02
    d2b8:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
    d2ba:	81 e0       	ldi	r24, 0x01	; 1
    d2bc:	0c 15       	cp	r16, r12
    d2be:	1d 05       	cpc	r17, r13
    d2c0:	09 f0       	breq	.+2      	; 0xd2c4 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
    d2c2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
    d2c4:	0f 90       	pop	r0
    d2c6:	0f 90       	pop	r0
    d2c8:	0f 90       	pop	r0
    d2ca:	0f 90       	pop	r0
    d2cc:	df 91       	pop	r29
    d2ce:	cf 91       	pop	r28
    d2d0:	1f 91       	pop	r17
    d2d2:	0f 91       	pop	r16
    d2d4:	ff 90       	pop	r15
    d2d6:	ef 90       	pop	r14
    d2d8:	df 90       	pop	r13
    d2da:	cf 90       	pop	r12
    d2dc:	bf 90       	pop	r11
    d2de:	08 95       	ret

0000d2e0 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    d2e0:	af 92       	push	r10
    d2e2:	bf 92       	push	r11
    d2e4:	cf 92       	push	r12
    d2e6:	df 92       	push	r13
    d2e8:	ef 92       	push	r14
    d2ea:	ff 92       	push	r15
    d2ec:	0f 93       	push	r16
    d2ee:	1f 93       	push	r17
    d2f0:	cf 93       	push	r28
    d2f2:	df 93       	push	r29
    d2f4:	7c 01       	movw	r14, r24
    d2f6:	5b 01       	movw	r10, r22
    d2f8:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
    d2fa:	ea 01       	movw	r28, r20
    d2fc:	09 90       	ld	r0, Y+
    d2fe:	00 20       	and	r0, r0
    d300:	e9 f7       	brne	.-6      	; 0xd2fc <PubSubClient::publish(char const*, char const*)+0x1c>
    d302:	21 97       	sbiw	r28, 0x01	; 1
    d304:	c4 1b       	sub	r28, r20
    d306:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
    d308:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
    d30c:	88 23       	and	r24, r24
    d30e:	c9 f1       	breq	.+114    	; 0xd382 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
    d310:	f5 01       	movw	r30, r10
    d312:	01 90       	ld	r0, Z+
    d314:	00 20       	and	r0, r0
    d316:	e9 f7       	brne	.-6      	; 0xd312 <PubSubClient::publish(char const*, char const*)+0x32>
    d318:	31 97       	sbiw	r30, 0x01	; 1
    d31a:	ea 19       	sub	r30, r10
    d31c:	fb 09       	sbc	r31, r11
    d31e:	ce 01       	movw	r24, r28
    d320:	07 96       	adiw	r24, 0x07	; 7
    d322:	e8 0f       	add	r30, r24
    d324:	f9 1f       	adc	r31, r25
    d326:	e1 30       	cpi	r30, 0x01	; 1
    d328:	f2 40       	sbci	r31, 0x02	; 2
    d32a:	58 f5       	brcc	.+86     	; 0xd382 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
    d32c:	67 01       	movw	r12, r14
    d32e:	82 e0       	ldi	r24, 0x02	; 2
    d330:	c8 0e       	add	r12, r24
    d332:	d1 1c       	adc	r13, r1
    d334:	45 e0       	ldi	r20, 0x05	; 5
    d336:	50 e0       	ldi	r21, 0x00	; 0
    d338:	b6 01       	movw	r22, r12
    d33a:	c5 01       	movw	r24, r10
    d33c:	0e 94 ae b7 	call	0x16f5c	; 0x16f5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
    d340:	f8 01       	movw	r30, r16
    d342:	dc 01       	movw	r26, r24
    d344:	12 96       	adiw	r26, 0x02	; 2
    d346:	ae 0d       	add	r26, r14
    d348:	bf 1d       	adc	r27, r15
    d34a:	a8 01       	movw	r20, r16
    d34c:	4c 0f       	add	r20, r28
    d34e:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
    d350:	e4 17       	cp	r30, r20
    d352:	f5 07       	cpc	r31, r21
    d354:	19 f0       	breq	.+6      	; 0xd35c <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
    d356:	21 91       	ld	r18, Z+
    d358:	2d 93       	st	X+, r18
    d35a:	fa cf       	rjmp	.-12     	; 0xd350 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    d35c:	25 97       	sbiw	r28, 0x05	; 5
    d35e:	9e 01       	movw	r18, r28
    d360:	28 0f       	add	r18, r24
    d362:	39 1f       	adc	r19, r25
    d364:	a6 01       	movw	r20, r12
    d366:	60 e3       	ldi	r22, 0x30	; 48
    d368:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    d36a:	df 91       	pop	r29
    d36c:	cf 91       	pop	r28
    d36e:	1f 91       	pop	r17
    d370:	0f 91       	pop	r16
    d372:	ff 90       	pop	r15
    d374:	ef 90       	pop	r14
    d376:	df 90       	pop	r13
    d378:	cf 90       	pop	r12
    d37a:	bf 90       	pop	r11
    d37c:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
    d37e:	0c 94 02 69 	jmp	0xd204	; 0xd204 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
    d382:	80 e0       	ldi	r24, 0x00	; 0
    d384:	df 91       	pop	r29
    d386:	cf 91       	pop	r28
    d388:	1f 91       	pop	r17
    d38a:	0f 91       	pop	r16
    d38c:	ff 90       	pop	r15
    d38e:	ef 90       	pop	r14
    d390:	df 90       	pop	r13
    d392:	cf 90       	pop	r12
    d394:	bf 90       	pop	r11
    d396:	af 90       	pop	r10
    d398:	08 95       	ret

0000d39a <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>:
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    }
  }
}
///
///
void mqtt_publis_output(uint8_t idx, uint8_t state)
    d39a:	0f 93       	push	r16
    d39c:	1f 93       	push	r17
    d39e:	cf 93       	push	r28
    d3a0:	df 93       	push	r29
    d3a2:	cd b7       	in	r28, 0x3d	; 61
    d3a4:	de b7       	in	r29, 0x3e	; 62
    d3a6:	c8 58       	subi	r28, 0x88	; 136
    d3a8:	d1 09       	sbc	r29, r1
    d3aa:	0f b6       	in	r0, 0x3f	; 63
    d3ac:	f8 94       	cli
    d3ae:	de bf       	out	0x3e, r29	; 62
    d3b0:	0f be       	out	0x3f, r0	; 63
    d3b2:	cd bf       	out	0x3d, r28	; 61
    d3b4:	08 2f       	mov	r16, r24
    d3b6:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
  {
    strcpy_P(str_topic, termbig_header_in);
    d3b8:	68 e2       	ldi	r22, 0x28	; 40
    d3ba:	78 e8       	ldi	r23, 0x88	; 136
    d3bc:	ce 01       	movw	r24, r28
    d3be:	01 96       	adiw	r24, 0x01	; 1
    d3c0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
    strcat(str_topic, "power-output/");
    d3c4:	69 e8       	ldi	r22, 0x89	; 137
    d3c6:	73 e0       	ldi	r23, 0x03	; 3
    d3c8:	ce 01       	movw	r24, r28
    d3ca:	01 96       	adiw	r24, 0x01	; 1
    d3cc:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    d3d0:	4a e0       	ldi	r20, 0x0A	; 10
    d3d2:	be 01       	movw	r22, r28
    d3d4:	6f 57       	subi	r22, 0x7F	; 127
    d3d6:	7f 4f       	sbci	r23, 0xFF	; 255
    d3d8:	80 2f       	mov	r24, r16
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    d3e0:	be 01       	movw	r22, r28
    d3e2:	6f 57       	subi	r22, 0x7F	; 127
    d3e4:	7f 4f       	sbci	r23, 0xFF	; 255
    d3e6:	ce 01       	movw	r24, r28
    d3e8:	01 96       	adiw	r24, 0x01	; 1
    d3ea:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
    strcat(str_topic, "/state");
    d3ee:	67 e9       	ldi	r22, 0x97	; 151
    d3f0:	73 e0       	ldi	r23, 0x03	; 3
    d3f2:	ce 01       	movw	r24, r28
    d3f4:	01 96       	adiw	r24, 0x01	; 1
    d3f6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    d3fa:	4a e0       	ldi	r20, 0x0A	; 10
    d3fc:	be 01       	movw	r22, r28
    d3fe:	6f 5b       	subi	r22, 0xBF	; 191
    d400:	7f 4f       	sbci	r23, 0xFF	; 255
    d402:	81 2f       	mov	r24, r17
    d404:	90 e0       	ldi	r25, 0x00	; 0
    d406:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z18mqtt_publis_outputhh.part.35():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3081
    itoa(state, payload, 10);
    mqtt_client.publish(str_topic, payload);
    d40a:	ae 01       	movw	r20, r28
    d40c:	4f 5b       	subi	r20, 0xBF	; 191
    d40e:	5f 4f       	sbci	r21, 0xFF	; 255
    d410:	be 01       	movw	r22, r28
    d412:	6f 5f       	subi	r22, 0xFF	; 255
    d414:	7f 4f       	sbci	r23, 0xFF	; 255
    d416:	8f e2       	ldi	r24, 0x2F	; 47
    d418:	90 e1       	ldi	r25, 0x10	; 16
    d41a:	0e 94 70 69 	call	0xd2e0	; 0xd2e0 <PubSubClient::publish(char const*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3083
  }
}
    d41e:	c8 57       	subi	r28, 0x78	; 120
    d420:	df 4f       	sbci	r29, 0xFF	; 255
    d422:	0f b6       	in	r0, 0x3f	; 63
    d424:	f8 94       	cli
    d426:	de bf       	out	0x3e, r29	; 62
    d428:	0f be       	out	0x3f, r0	; 63
    d42a:	cd bf       	out	0x3d, r28	; 61
    d42c:	df 91       	pop	r29
    d42e:	cf 91       	pop	r28
    d430:	1f 91       	pop	r17
    d432:	0f 91       	pop	r16
    d434:	08 95       	ret

0000d436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.276():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    d436:	0c 94 6a f8 	jmp	0x1f0d4	; 0x1f0d4 <eeprom_write_byte>

0000d43a <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:70
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
    d43a:	cf 92       	push	r12
    d43c:	df 92       	push	r13
    d43e:	ef 92       	push	r14
    d440:	ff 92       	push	r15
    d442:	0f 93       	push	r16
    d444:	1f 93       	push	r17
    d446:	cf 93       	push	r28
    d448:	df 93       	push	r29
    d44a:	00 d0       	rcall	.+0      	; 0xd44c <EEPROMwriteFloat(unsigned int, float)+0x12>
    d44c:	1f 92       	push	r1
    d44e:	cd b7       	in	r28, 0x3d	; 61
    d450:	de b7       	in	r29, 0x3e	; 62
    d452:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
    d454:	49 83       	std	Y+1, r20	; 0x01
    d456:	5a 83       	std	Y+2, r21	; 0x02
    d458:	6b 83       	std	Y+3, r22	; 0x03
    d45a:	7c 83       	std	Y+4, r23	; 0x04
    d45c:	ce 01       	movw	r24, r28
    d45e:	01 96       	adiw	r24, 0x01	; 1
    d460:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
    d462:	10 e0       	ldi	r17, 0x00	; 0
    d464:	00 e0       	ldi	r16, 0x00	; 0
    d466:	f7 01       	movw	r30, r14
    d468:	61 91       	ld	r22, Z+
    d46a:	7f 01       	movw	r14, r30
    d46c:	c8 01       	movw	r24, r16
    d46e:	8c 0d       	add	r24, r12
    d470:	9d 1d       	adc	r25, r13
    d472:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    d476:	0f 5f       	subi	r16, 0xFF	; 255
    d478:	1f 4f       	sbci	r17, 0xFF	; 255
    d47a:	04 30       	cpi	r16, 0x04	; 4
    d47c:	11 05       	cpc	r17, r1
    d47e:	99 f7       	brne	.-26     	; 0xd466 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:77
}
    d480:	0f 90       	pop	r0
    d482:	0f 90       	pop	r0
    d484:	0f 90       	pop	r0
    d486:	0f 90       	pop	r0
    d488:	df 91       	pop	r29
    d48a:	cf 91       	pop	r28
    d48c:	1f 91       	pop	r17
    d48e:	0f 91       	pop	r16
    d490:	ff 90       	pop	r15
    d492:	ef 90       	pop	r14
    d494:	df 90       	pop	r13
    d496:	cf 90       	pop	r12
    d498:	08 95       	ret

0000d49a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    d49a:	2d e4       	ldi	r18, 0x4D	; 77
    d49c:	82 9f       	mul	r24, r18
    d49e:	c0 01       	movw	r24, r0
    d4a0:	11 24       	eor	r1, r1
    d4a2:	26 e0       	ldi	r18, 0x06	; 6
    d4a4:	62 9f       	mul	r22, r18
    d4a6:	80 0d       	add	r24, r0
    d4a8:	91 1d       	adc	r25, r1
    d4aa:	11 24       	eor	r1, r1
    d4ac:	64 2f       	mov	r22, r20
    d4ae:	8e 50       	subi	r24, 0x0E	; 14
    d4b0:	9e 4f       	sbci	r25, 0xFE	; 254
    d4b2:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d4b6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    d4b6:	1f 93       	push	r17
    d4b8:	cf 93       	push	r28
    d4ba:	df 93       	push	r29
    d4bc:	14 2f       	mov	r17, r20
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    d4be:	9d e4       	ldi	r25, 0x4D	; 77
    d4c0:	89 9f       	mul	r24, r25
    d4c2:	e0 01       	movw	r28, r0
    d4c4:	11 24       	eor	r1, r1
    d4c6:	cf 50       	subi	r28, 0x0F	; 15
    d4c8:	de 4f       	sbci	r29, 0xFE	; 254
    d4ca:	86 e0       	ldi	r24, 0x06	; 6
    d4cc:	68 9f       	mul	r22, r24
    d4ce:	c0 0d       	add	r28, r0
    d4d0:	d1 1d       	adc	r29, r1
    d4d2:	11 24       	eor	r1, r1
    d4d4:	65 2f       	mov	r22, r21
    d4d6:	ce 01       	movw	r24, r28
    d4d8:	05 96       	adiw	r24, 0x05	; 5
    d4da:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    d4de:	61 2f       	mov	r22, r17
    d4e0:	ce 01       	movw	r24, r28
    d4e2:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:333
}
    d4e4:	df 91       	pop	r29
    d4e6:	cf 91       	pop	r28
    d4e8:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    d4ea:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d4ee <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    d4ee:	cf 92       	push	r12
    d4f0:	ef 92       	push	r14
    d4f2:	0f 93       	push	r16
    d4f4:	1f 93       	push	r17
    d4f6:	cf 93       	push	r28
    d4f8:	df 93       	push	r29
    d4fa:	c8 2f       	mov	r28, r24
    d4fc:	56 2f       	mov	r21, r22
    d4fe:	8e 2d       	mov	r24, r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    d500:	3f e0       	ldi	r19, 0x0F	; 15
    d502:	63 2f       	mov	r22, r19
    d504:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    d508:	83 70       	andi	r24, 0x03	; 3
    d50a:	98 e0       	ldi	r25, 0x08	; 8
    d50c:	09 9f       	mul	r16, r25
    d50e:	80 01       	movw	r16, r0
    d510:	11 24       	eor	r1, r1
    d512:	08 0f       	add	r16, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    d514:	8d e4       	ldi	r24, 0x4D	; 77
    d516:	c8 9f       	mul	r28, r24
    d518:	e0 01       	movw	r28, r0
    d51a:	11 24       	eor	r1, r1
    d51c:	cf 50       	subi	r28, 0x0F	; 15
    d51e:	de 4f       	sbci	r29, 0xFE	; 254
    d520:	96 e0       	ldi	r25, 0x06	; 6
    d522:	59 9f       	mul	r21, r25
    d524:	c0 0d       	add	r28, r0
    d526:	d1 1d       	adc	r29, r1
    d528:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    d52a:	82 2f       	mov	r24, r18
    d52c:	0e 94 25 fa 	call	0x1f44a	; 0x1f44a <__udivmodqi4>
    d530:	68 2f       	mov	r22, r24
    d532:	66 0f       	add	r22, r22
    d534:	66 70       	andi	r22, 0x06	; 6
    d536:	88 e0       	ldi	r24, 0x08	; 8
    d538:	48 9f       	mul	r20, r24
    d53a:	a0 01       	movw	r20, r0
    d53c:	11 24       	eor	r1, r1
    d53e:	9c 2d       	mov	r25, r12
    d540:	91 70       	andi	r25, 0x01	; 1
    d542:	c9 2e       	mov	r12, r25
    d544:	c4 0e       	add	r12, r20
    d546:	6c 0d       	add	r22, r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    d548:	ce 01       	movw	r24, r28
    d54a:	02 96       	adiw	r24, 0x02	; 2
    d54c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    d550:	60 2f       	mov	r22, r16
    d552:	ce 01       	movw	r24, r28
    d554:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:318
}
    d556:	df 91       	pop	r29
    d558:	cf 91       	pop	r28
    d55a:	1f 91       	pop	r17
    d55c:	0f 91       	pop	r16
    d55e:	ef 90       	pop	r14
    d560:	cf 90       	pop	r12
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    d562:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d566 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    d566:	ef 92       	push	r14
    d568:	ff 92       	push	r15
    d56a:	0f 93       	push	r16
    d56c:	1f 93       	push	r17
    d56e:	cf 93       	push	r28
    d570:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    d572:	9d e4       	ldi	r25, 0x4D	; 77
    d574:	89 9f       	mul	r24, r25
    d576:	80 01       	movw	r16, r0
    d578:	11 24       	eor	r1, r1
    d57a:	eb 01       	movw	r28, r22
    d57c:	78 01       	movw	r14, r16
    d57e:	8c ec       	ldi	r24, 0xCC	; 204
    d580:	e8 1a       	sub	r14, r24
    d582:	8d ef       	ldi	r24, 0xFD	; 253
    d584:	f8 0a       	sbc	r15, r24
    d586:	02 5c       	subi	r16, 0xC2	; 194
    d588:	1d 4f       	sbci	r17, 0xFD	; 253
    d58a:	69 91       	ld	r22, Y+
    d58c:	c7 01       	movw	r24, r14
    d58e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    d592:	fe 01       	movw	r30, r28
    d594:	31 97       	sbiw	r30, 0x01	; 1
    d596:	80 81       	ld	r24, Z
    d598:	88 23       	and	r24, r24
    d59a:	31 f0       	breq	.+12     	; 0xd5a8 <thermostat_program_set_name(unsigned char, char*)+0x42>
    d59c:	9f ef       	ldi	r25, 0xFF	; 255
    d59e:	e9 1a       	sub	r14, r25
    d5a0:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    d5a2:	e0 16       	cp	r14, r16
    d5a4:	f1 06       	cpc	r15, r17
    d5a6:	89 f7       	brne	.-30     	; 0xd58a <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	ef 90       	pop	r14
    d5b4:	08 95       	ret

0000d5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    d5b6:	ef 92       	push	r14
    d5b8:	ff 92       	push	r15
    d5ba:	0f 93       	push	r16
    d5bc:	1f 93       	push	r17
    d5be:	cf 93       	push	r28
    d5c0:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    d5c2:	e8 2e       	mov	r14, r24
    d5c4:	f1 2c       	mov	r15, r1
    d5c6:	91 e2       	ldi	r25, 0x21	; 33
    d5c8:	89 9f       	mul	r24, r25
    d5ca:	e0 01       	movw	r28, r0
    d5cc:	11 24       	eor	r1, r1
    d5ce:	87 01       	movw	r16, r14
    d5d0:	00 0f       	add	r16, r16
    d5d2:	11 1f       	adc	r17, r17
    d5d4:	00 0f       	add	r16, r16
    d5d6:	11 1f       	adc	r17, r17
    d5d8:	f8 01       	movw	r30, r16
    d5da:	e8 54       	subi	r30, 0x48	; 72
    d5dc:	f5 4f       	sbci	r31, 0xF5	; 245
    d5de:	40 81       	ld	r20, Z
    d5e0:	51 81       	ldd	r21, Z+1	; 0x01
    d5e2:	62 81       	ldd	r22, Z+2	; 0x02
    d5e4:	73 81       	ldd	r23, Z+3	; 0x03
    d5e6:	ce 01       	movw	r24, r28
    d5e8:	80 5a       	subi	r24, 0xA0	; 160
    d5ea:	9e 4f       	sbci	r25, 0xFE	; 254
    d5ec:	0e 94 1d 6a 	call	0xd43a	; 0xd43a <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    d5f0:	f8 01       	movw	r30, r16
    d5f2:	e4 53       	subi	r30, 0x34	; 52
    d5f4:	f5 4f       	sbci	r31, 0xF5	; 245
    d5f6:	40 81       	ld	r20, Z
    d5f8:	51 81       	ldd	r21, Z+1	; 0x01
    d5fa:	62 81       	ldd	r22, Z+2	; 0x02
    d5fc:	73 81       	ldd	r23, Z+3	; 0x03
    d5fe:	ce 01       	movw	r24, r28
    d600:	8c 59       	subi	r24, 0x9C	; 156
    d602:	9e 4f       	sbci	r25, 0xFE	; 254
    d604:	0e 94 1d 6a 	call	0xd43a	; 0xd43a <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    d608:	f8 01       	movw	r30, r16
    d60a:	e0 52       	subi	r30, 0x20	; 32
    d60c:	f5 4f       	sbci	r31, 0xF5	; 245
    d60e:	40 81       	ld	r20, Z
    d610:	51 81       	ldd	r21, Z+1	; 0x01
    d612:	62 81       	ldd	r22, Z+2	; 0x02
    d614:	73 81       	ldd	r23, Z+3	; 0x03
    d616:	ce 01       	movw	r24, r28
    d618:	88 59       	subi	r24, 0x98	; 152
    d61a:	9e 4f       	sbci	r25, 0xFE	; 254
    d61c:	0e 94 1d 6a 	call	0xd43a	; 0xd43a <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    d620:	f7 01       	movw	r30, r14
    d622:	ec 50       	subi	r30, 0x0C	; 12
    d624:	f5 4f       	sbci	r31, 0xF5	; 245
    d626:	60 81       	ld	r22, Z
    d628:	ce 01       	movw	r24, r28
    d62a:	84 59       	subi	r24, 0x94	; 148
    d62c:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:237
}
    d62e:	df 91       	pop	r29
    d630:	cf 91       	pop	r28
    d632:	1f 91       	pop	r17
    d634:	0f 91       	pop	r16
    d636:	ff 90       	pop	r15
    d638:	ef 90       	pop	r14
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    d63a:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d63e <button_click_ring_term_set_pid_default(unsigned int, unsigned int, unsigned char)>:
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1280
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_time(args1, args3);
}
void button_click_ring_term_set_pid_default(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d63e:	8f 92       	push	r8
    d640:	9f 92       	push	r9
    d642:	af 92       	push	r10
    d644:	bf 92       	push	r11
    d646:	ef 92       	push	r14
    d648:	ff 92       	push	r15
    d64a:	0f 93       	push	r16
    d64c:	1f 93       	push	r17
    d64e:	cf 93       	push	r28
    d650:	df 93       	push	r29
    d652:	eb 01       	movw	r28, r22
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d654:	7b 01       	movw	r14, r22
    d656:	ff 24       	eor	r15, r15
    d658:	87 01       	movw	r16, r14
    d65a:	00 0f       	add	r16, r16
    d65c:	11 1f       	adc	r17, r17
    d65e:	00 0f       	add	r16, r16
    d660:	11 1f       	adc	r17, r17
    d662:	f8 01       	movw	r30, r16
    d664:	e8 54       	subi	r30, 0x48	; 72
    d666:	f5 4f       	sbci	r31, 0xF5	; 245
    d668:	81 2c       	mov	r8, r1
    d66a:	91 2c       	mov	r9, r1
    d66c:	90 e8       	ldi	r25, 0x80	; 128
    d66e:	a9 2e       	mov	r10, r25
    d670:	9f e3       	ldi	r25, 0x3F	; 63
    d672:	b9 2e       	mov	r11, r25
    d674:	80 82       	st	Z, r8
    d676:	91 82       	std	Z+1, r9	; 0x01
    d678:	a2 82       	std	Z+2, r10	; 0x02
    d67a:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d67c:	86 2f       	mov	r24, r22
    d67e:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d682:	8c 2f       	mov	r24, r28
    d684:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d688:	f8 01       	movw	r30, r16
    d68a:	e4 53       	subi	r30, 0x34	; 52
    d68c:	f5 4f       	sbci	r31, 0xF5	; 245
    d68e:	80 e0       	ldi	r24, 0x00	; 0
    d690:	90 e0       	ldi	r25, 0x00	; 0
    d692:	a0 e0       	ldi	r26, 0x00	; 0
    d694:	bf e3       	ldi	r27, 0x3F	; 63
    d696:	80 83       	st	Z, r24
    d698:	91 83       	std	Z+1, r25	; 0x01
    d69a:	a2 83       	std	Z+2, r26	; 0x02
    d69c:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d69e:	8c 2f       	mov	r24, r28
    d6a0:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d6a4:	8c 2f       	mov	r24, r28
    d6a6:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d6aa:	f8 01       	movw	r30, r16
    d6ac:	e0 52       	subi	r30, 0x20	; 32
    d6ae:	f5 4f       	sbci	r31, 0xF5	; 245
    d6b0:	80 82       	st	Z, r8
    d6b2:	91 82       	std	Z+1, r9	; 0x01
    d6b4:	a2 82       	std	Z+2, r10	; 0x02
    d6b6:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d6b8:	8c 2f       	mov	r24, r28
    d6ba:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d6be:	8c 2f       	mov	r24, r28
    d6c0:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d6c4:	f7 01       	movw	r30, r14
    d6c6:	ec 50       	subi	r30, 0x0C	; 12
    d6c8:	f5 4f       	sbci	r31, 0xF5	; 245
    d6ca:	8c e3       	ldi	r24, 0x3C	; 60
    d6cc:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d6ce:	8c 2f       	mov	r24, r28
    d6d0:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d6d4:	8c 2f       	mov	r24, r28
    d6d6:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z38button_click_ring_term_set_pid_defaultjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    d6da:	40 e0       	ldi	r20, 0x00	; 0
    d6dc:	be 01       	movw	r22, r28
    d6de:	90 e0       	ldi	r25, 0x00	; 0
    d6e0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1286
}
    d6e2:	df 91       	pop	r29
    d6e4:	cf 91       	pop	r28
    d6e6:	1f 91       	pop	r17
    d6e8:	0f 91       	pop	r16
    d6ea:	ff 90       	pop	r15
    d6ec:	ef 90       	pop	r14
    d6ee:	bf 90       	pop	r11
    d6f0:	af 90       	pop	r10
    d6f2:	9f 90       	pop	r9
    d6f4:	8f 90       	pop	r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1285
{
  thermostat_ring_pid_set_kp(args2, 1.0);
  thermostat_ring_pid_set_ki(args2, 0.5);
  thermostat_ring_pid_set_kd(args2, 1.0);
  thermostat_ring_pid_set_time(args2, 60);
  preload_pid_menu(0, args2, 0);
    d6f6:	0c 94 08 52 	jmp	0xa410	; 0xa410 <preload_pid_menu(unsigned int, unsigned int, unsigned char)>

0000d6fa <helper_thermostat_set_pid_time(unsigned int, float, unsigned char)>:
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1276
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kd(args1, args2);
}
void helper_thermostat_set_pid_time(uint16_t args1, float args2, uint8_t args3)
{
    d6fa:	cf 93       	push	r28
    d6fc:	df 93       	push	r29
    d6fe:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
  thermostat_ring_set_pid_eeprom(id);
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d700:	fc 01       	movw	r30, r24
    d702:	ff 27       	eor	r31, r31
    d704:	ec 50       	subi	r30, 0x0C	; 12
    d706:	f5 4f       	sbci	r31, 0xF5	; 245
    d708:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d70a:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d70e:	8c 2f       	mov	r24, r28
_Z30helper_thermostat_set_pid_timejfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1278
  thermostat_ring_pid_set_time(args1, args3);
}
    d710:	df 91       	pop	r29
    d712:	cf 91       	pop	r28
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
    d714:	0c 94 db 6a 	jmp	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000d718 <helper_thermostat_set_pid_d(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1272
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_ki(args1, args2);
}
void helper_thermostat_set_pid_d(uint16_t args1, float args2, uint8_t args3)
{
    d718:	cf 93       	push	r28
    d71a:	df 93       	push	r29
    d71c:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d71e:	fc 01       	movw	r30, r24
    d720:	ff 27       	eor	r31, r31
    d722:	ee 0f       	add	r30, r30
    d724:	ff 1f       	adc	r31, r31
    d726:	ee 0f       	add	r30, r30
    d728:	ff 1f       	adc	r31, r31
    d72a:	e0 52       	subi	r30, 0x20	; 32
    d72c:	f5 4f       	sbci	r31, 0xF5	; 245
    d72e:	40 83       	st	Z, r20
    d730:	51 83       	std	Z+1, r21	; 0x01
    d732:	62 83       	std	Z+2, r22	; 0x02
    d734:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d736:	8c 2f       	mov	r24, r28
    d738:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d73c:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_djfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1274
  thermostat_ring_pid_set_kd(args1, args2);
}
    d73e:	df 91       	pop	r29
    d740:	cf 91       	pop	r28
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
    d742:	0c 94 db 6a 	jmp	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000d746 <helper_thermostat_set_pid_i(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1268
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_pid_set_kp(args1, args2);
}
void helper_thermostat_set_pid_i(uint16_t args1, float args2, uint8_t args3)
{
    d746:	cf 93       	push	r28
    d748:	df 93       	push	r29
    d74a:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
  thermostat_ring_update_pid_parameters(id);
  thermostat_ring_set_pid_eeprom(id);
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d74c:	fc 01       	movw	r30, r24
    d74e:	ff 27       	eor	r31, r31
    d750:	ee 0f       	add	r30, r30
    d752:	ff 1f       	adc	r31, r31
    d754:	ee 0f       	add	r30, r30
    d756:	ff 1f       	adc	r31, r31
    d758:	e4 53       	subi	r30, 0x34	; 52
    d75a:	f5 4f       	sbci	r31, 0xF5	; 245
    d75c:	40 83       	st	Z, r20
    d75e:	51 83       	std	Z+1, r21	; 0x01
    d760:	62 83       	std	Z+2, r22	; 0x02
    d762:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d764:	8c 2f       	mov	r24, r28
    d766:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d76a:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_ijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1270
  thermostat_ring_pid_set_ki(args1, args2);
}
    d76c:	df 91       	pop	r29
    d76e:	cf 91       	pop	r28
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
    d770:	0c 94 db 6a 	jmp	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000d774 <helper_thermostat_set_pid_p(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1264
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
}
void helper_thermostat_set_pid_p(uint16_t args1, float args2, uint8_t args3)
{
    d774:	cf 93       	push	r28
    d776:	df 93       	push	r29
    d778:	ec 01       	movw	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d77a:	fc 01       	movw	r30, r24
    d77c:	ff 27       	eor	r31, r31
    d77e:	ee 0f       	add	r30, r30
    d780:	ff 1f       	adc	r31, r31
    d782:	ee 0f       	add	r30, r30
    d784:	ff 1f       	adc	r31, r31
    d786:	e8 54       	subi	r30, 0x48	; 72
    d788:	f5 4f       	sbci	r31, 0xF5	; 245
    d78a:	40 83       	st	Z, r20
    d78c:	51 83       	std	Z+1, r21	; 0x01
    d78e:	62 83       	std	Z+2, r22	; 0x02
    d790:	73 83       	std	Z+3, r23	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d792:	8c 2f       	mov	r24, r28
    d794:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d798:	8c 2f       	mov	r24, r28
_Z27helper_thermostat_set_pid_pjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1266
  thermostat_ring_pid_set_kp(args1, args2);
}
    d79a:	df 91       	pop	r29
    d79c:	cf 91       	pop	r28
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
    d79e:	0c 94 db 6a 	jmp	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>

0000d7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    d7a2:	21 e2       	ldi	r18, 0x21	; 33
    d7a4:	82 9f       	mul	r24, r18
    d7a6:	c0 01       	movw	r24, r0
    d7a8:	11 24       	eor	r1, r1
    d7aa:	82 5a       	subi	r24, 0xA2	; 162
    d7ac:	9e 4f       	sbci	r25, 0xFE	; 254
    d7ae:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d7b2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z31button_select_term_mode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5366
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/

void button_select_term_mode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d7b2:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5367
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    d7b4:	60 e0       	ldi	r22, 0x00	; 0
    d7b6:	44 23       	and	r20, r20
    d7b8:	61 f0       	breq	.+24     	; 0xd7d2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    d7ba:	61 e0       	ldi	r22, 0x01	; 1
    d7bc:	41 30       	cpi	r20, 0x01	; 1
    d7be:	49 f0       	breq	.+18     	; 0xd7d2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5369
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    d7c0:	67 e0       	ldi	r22, 0x07	; 7
    d7c2:	42 30       	cpi	r20, 0x02	; 2
    d7c4:	31 f0       	breq	.+12     	; 0xd7d2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5370
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    d7c6:	62 e0       	ldi	r22, 0x02	; 2
    d7c8:	43 30       	cpi	r20, 0x03	; 3
    d7ca:	19 f0       	breq	.+6      	; 0xd7d2 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5371
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    d7cc:	44 30       	cpi	r20, 0x04	; 4
    d7ce:	19 f4       	brne	.+6      	; 0xd7d6 <button_select_term_mode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
    d7d0:	68 e0       	ldi	r22, 0x08	; 8
    d7d2:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5372
  change_term_mode = 1;
    d7d6:	81 e0       	ldi	r24, 0x01	; 1
    d7d8:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5373
}
    d7dc:	08 95       	ret

0000d7de <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    d7de:	1f 93       	push	r17
    d7e0:	cf 93       	push	r28
    d7e2:	df 93       	push	r29
    d7e4:	16 2f       	mov	r17, r22
    d7e6:	67 2f       	mov	r22, r23
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    d7e8:	91 e2       	ldi	r25, 0x21	; 33
    d7ea:	89 9f       	mul	r24, r25
    d7ec:	e0 01       	movw	r28, r0
    d7ee:	11 24       	eor	r1, r1
    d7f0:	ce 01       	movw	r24, r28
    d7f2:	8a 5a       	subi	r24, 0xAA	; 170
    d7f4:	9e 4f       	sbci	r25, 0xFE	; 254
    d7f6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    d7fa:	61 2f       	mov	r22, r17
    d7fc:	ce 01       	movw	r24, r28
    d7fe:	89 5a       	subi	r24, 0xA9	; 169
    d800:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:160
}
    d802:	df 91       	pop	r29
    d804:	cf 91       	pop	r28
    d806:	1f 91       	pop	r17
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    d808:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d80c <helper_thermostat_set_mezni(unsigned int, float, unsigned char)>:
_Z27helper_thermostat_set_meznijfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1260
  args2 -- menu_dialog_set_variable_now, aktualni hodnota
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
    d80c:	cf 93       	push	r28
    d80e:	c8 2f       	mov	r28, r24
    d810:	cb 01       	movw	r24, r22
    d812:	ba 01       	movw	r22, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    d814:	20 e0       	ldi	r18, 0x00	; 0
    d816:	30 e0       	ldi	r19, 0x00	; 0
    d818:	40 e2       	ldi	r20, 0x20	; 32
    d81a:	51 e4       	ldi	r21, 0x41	; 65
    d81c:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
    d820:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
    d824:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1262
}
    d826:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1261
  args1 -- menu_dialog_set_variable_args, id ringu
  args3 -- menu_dialog_set_variable_now, aktualni hodnota uint8_t format
*/
void helper_thermostat_set_mezni(uint16_t args1, float args2, uint8_t args3)
{
  thermostat_ring_set_mezni(args1, (args2 * 10.0));
    d828:	0c 94 ef 6b 	jmp	0xd7de	; 0xd7de <thermostat_ring_set_mezni(unsigned char, int)>

0000d82c <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    d82c:	df 92       	push	r13
    d82e:	ef 92       	push	r14
    d830:	ff 92       	push	r15
    d832:	0f 93       	push	r16
    d834:	1f 93       	push	r17
    d836:	cf 93       	push	r28
    d838:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    d83a:	91 e2       	ldi	r25, 0x21	; 33
    d83c:	89 9f       	mul	r24, r25
    d83e:	e0 01       	movw	r28, r0
    d840:	11 24       	eor	r1, r1
    d842:	7b 01       	movw	r14, r22
    d844:	8e 01       	movw	r16, r28
    d846:	04 5b       	subi	r16, 0xB4	; 180
    d848:	1e 4f       	sbci	r17, 0xFE	; 254
    d84a:	cb 5a       	subi	r28, 0xAB	; 171
    d84c:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    d84e:	f7 01       	movw	r30, r14
    d850:	d1 90       	ld	r13, Z+
    d852:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    d854:	6d 2d       	mov	r22, r13
    d856:	c8 01       	movw	r24, r16
    d858:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    d85c:	dd 20       	and	r13, r13
    d85e:	29 f0       	breq	.+10     	; 0xd86a <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    d860:	0f 5f       	subi	r16, 0xFF	; 255
    d862:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    d864:	0c 17       	cp	r16, r28
    d866:	1d 07       	cpc	r17, r29
    d868:	91 f7       	brne	.-28     	; 0xd84e <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    d86a:	df 91       	pop	r29
    d86c:	cf 91       	pop	r28
    d86e:	1f 91       	pop	r17
    d870:	0f 91       	pop	r16
    d872:	ff 90       	pop	r15
    d874:	ef 90       	pop	r14
    d876:	df 90       	pop	r13
    d878:	08 95       	ret

0000d87a <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    d87a:	8f 92       	push	r8
    d87c:	9f 92       	push	r9
    d87e:	af 92       	push	r10
    d880:	bf 92       	push	r11
    d882:	ef 92       	push	r14
    d884:	ff 92       	push	r15
    d886:	0f 93       	push	r16
    d888:	1f 93       	push	r17
    d88a:	cf 93       	push	r28
    d88c:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d88e:	e8 2e       	mov	r14, r24
    d890:	f1 2c       	mov	r15, r1
    d892:	87 01       	movw	r16, r14
    d894:	00 0f       	add	r16, r16
    d896:	11 1f       	adc	r17, r17
    d898:	00 0f       	add	r16, r16
    d89a:	11 1f       	adc	r17, r17
    d89c:	f8 01       	movw	r30, r16
    d89e:	e8 54       	subi	r30, 0x48	; 72
    d8a0:	f5 4f       	sbci	r31, 0xF5	; 245
    d8a2:	81 2c       	mov	r8, r1
    d8a4:	91 2c       	mov	r9, r1
    d8a6:	90 e8       	ldi	r25, 0x80	; 128
    d8a8:	a9 2e       	mov	r10, r25
    d8aa:	9f e3       	ldi	r25, 0x3F	; 63
    d8ac:	b9 2e       	mov	r11, r25
    d8ae:	80 82       	st	Z, r8
    d8b0:	91 82       	std	Z+1, r9	; 0x01
    d8b2:	a2 82       	std	Z+2, r10	; 0x02
    d8b4:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d8b6:	8c 2f       	mov	r24, r28
    d8b8:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d8bc:	8c 2f       	mov	r24, r28
    d8be:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d8c2:	f8 01       	movw	r30, r16
    d8c4:	e4 53       	subi	r30, 0x34	; 52
    d8c6:	f5 4f       	sbci	r31, 0xF5	; 245
    d8c8:	80 e0       	ldi	r24, 0x00	; 0
    d8ca:	90 e0       	ldi	r25, 0x00	; 0
    d8cc:	a0 e0       	ldi	r26, 0x00	; 0
    d8ce:	bf e3       	ldi	r27, 0x3F	; 63
    d8d0:	80 83       	st	Z, r24
    d8d2:	91 83       	std	Z+1, r25	; 0x01
    d8d4:	a2 83       	std	Z+2, r26	; 0x02
    d8d6:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d8d8:	8c 2f       	mov	r24, r28
    d8da:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d8de:	8c 2f       	mov	r24, r28
    d8e0:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d8e4:	f8 01       	movw	r30, r16
    d8e6:	e0 52       	subi	r30, 0x20	; 32
    d8e8:	f5 4f       	sbci	r31, 0xF5	; 245
    d8ea:	80 82       	st	Z, r8
    d8ec:	91 82       	std	Z+1, r9	; 0x01
    d8ee:	a2 82       	std	Z+2, r10	; 0x02
    d8f0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d8f2:	8c 2f       	mov	r24, r28
    d8f4:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d8f8:	8c 2f       	mov	r24, r28
    d8fa:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d8fe:	f7 01       	movw	r30, r14
    d900:	ec 50       	subi	r30, 0x0C	; 12
    d902:	f5 4f       	sbci	r31, 0xF5	; 245
    d904:	8c e3       	ldi	r24, 0x3C	; 60
    d906:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d908:	8c 2f       	mov	r24, r28
    d90a:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d90e:	8c 2f       	mov	r24, r28
    d910:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    d914:	81 e2       	ldi	r24, 0x21	; 33
    d916:	c8 9f       	mul	r28, r24
    d918:	80 01       	movw	r16, r0
    d91a:	11 24       	eor	r1, r1
    d91c:	6f ef       	ldi	r22, 0xFF	; 255
    d91e:	c8 01       	movw	r24, r16
    d920:	84 5a       	subi	r24, 0xA4	; 164
    d922:	9e 4f       	sbci	r25, 0xFE	; 254
    d924:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, RING_NO_INPUT);
  thermostat_ring_set_mezni(idx, 220);
    d928:	6c ed       	ldi	r22, 0xDC	; 220
    d92a:	70 e0       	ldi	r23, 0x00	; 0
    d92c:	8c 2f       	mov	r24, r28
    d92e:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    d932:	6f ef       	ldi	r22, 0xFF	; 255
    d934:	c8 01       	movw	r24, r16
    d936:	85 5a       	subi	r24, 0xA5	; 165
    d938:	9e 4f       	sbci	r25, 0xFE	; 254
    d93a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    d93e:	f7 01       	movw	r30, r14
    d940:	e3 57       	subi	r30, 0x73	; 115
    d942:	f4 4f       	sbci	r31, 0xF4	; 244
    d944:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    d946:	6f ef       	ldi	r22, 0xFF	; 255
    d948:	c8 01       	movw	r24, r16
    d94a:	83 5a       	subi	r24, 0xA3	; 163
    d94c:	9e 4f       	sbci	r25, 0xFE	; 254
    d94e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    d952:	6f ef       	ldi	r22, 0xFF	; 255
    d954:	c8 01       	movw	r24, r16
    d956:	81 5a       	subi	r24, 0xA1	; 161
    d958:	9e 4f       	sbci	r25, 0xFE	; 254
    d95a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    d95e:	60 e0       	ldi	r22, 0x00	; 0
    d960:	8c 2f       	mov	r24, r28
    d962:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    d966:	6e e9       	ldi	r22, 0x9E	; 158
    d968:	73 e0       	ldi	r23, 0x03	; 3
    d96a:	8c 2f       	mov	r24, r28
    d96c:	0e 94 16 6c 	call	0xd82c	; 0xd82c <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    d970:	60 e0       	ldi	r22, 0x00	; 0
    d972:	c8 01       	movw	r24, r16
    d974:	88 5a       	subi	r24, 0xA8	; 168
    d976:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    d978:	cf 91       	pop	r28
    d97a:	1f 91       	pop	r17
    d97c:	0f 91       	pop	r16
    d97e:	ff 90       	pop	r15
    d980:	ef 90       	pop	r14
    d982:	bf 90       	pop	r11
    d984:	af 90       	pop	r10
    d986:	9f 90       	pop	r9
    d988:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    d98a:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d98e <helper_thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48helper_thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5185
   Funkce pro aktivovani/deaktivovani ringu termostatu
*/

void helper_thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  thermostat_ring_clear(args1);
    d98e:	0c 94 3d 6c 	jmp	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>

0000d992 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)>:
_Z38helper_thermostat_button_set_ring_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5152
   args3
   promene nemaji zadny vyznam
*/

void helper_thermostat_button_set_ring_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    d992:	cf 93       	push	r28
    d994:	df 93       	push	r29
    d996:	00 d0       	rcall	.+0      	; 0xd998 <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x6>
    d998:	00 d0       	rcall	.+0      	; 0xd99a <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0x8>
    d99a:	00 d0       	rcall	.+0      	; 0xd99c <helper_thermostat_button_set_ring_name(unsigned int, unsigned int, unsigned char)+0xa>
    d99c:	1f 92       	push	r1
    d99e:	cd b7       	in	r28, 0x3d	; 61
    d9a0:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154
  char name[10];
  display_element_get_string(name);
    d9a2:	ce 01       	movw	r24, r28
    d9a4:	01 96       	adiw	r24, 0x01	; 1
    d9a6:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
  args2 = display_element_get_string_args();
  thermostat_ring_set_name(args2, name);
    d9aa:	be 01       	movw	r22, r28
    d9ac:	6f 5f       	subi	r22, 0xFF	; 255
    d9ae:	7f 4f       	sbci	r23, 0xFF	; 255
    d9b0:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <dialog_set_string_args>
    d9b4:	0e 94 16 6c 	call	0xd82c	; 0xd82c <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5157
}
    d9b8:	2a 96       	adiw	r28, 0x0a	; 10
    d9ba:	0f b6       	in	r0, 0x3f	; 63
    d9bc:	f8 94       	cli
    d9be:	de bf       	out	0x3e, r29	; 62
    d9c0:	0f be       	out	0x3f, r0	; 63
    d9c2:	cd bf       	out	0x3d, r28	; 61
    d9c4:	df 91       	pop	r29
    d9c6:	cf 91       	pop	r28
    d9c8:	08 95       	ret

0000d9ca <helper_thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z46helper_thermostat_button_activate_ring_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    d9ca:	21 e2       	ldi	r18, 0x21	; 33
    d9cc:	82 9f       	mul	r24, r18
    d9ce:	c0 01       	movw	r24, r0
    d9d0:	11 24       	eor	r1, r1
    d9d2:	61 e0       	ldi	r22, 0x01	; 1
    d9d4:	83 5a       	subi	r24, 0xA3	; 163
    d9d6:	9e 4f       	sbci	r25, 0xFE	; 254
    d9d8:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d9dc <button_deassociate_input_sensor_for_term_onclick(unsigned int, unsigned int, unsigned char)>:
_Z48button_deassociate_input_sensor_for_term_onclickjjh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    d9dc:	21 e2       	ldi	r18, 0x21	; 33
    d9de:	62 9f       	mul	r22, r18
    d9e0:	c0 01       	movw	r24, r0
    d9e2:	11 24       	eor	r1, r1
    d9e4:	6f ef       	ldi	r22, 0xFF	; 255
    d9e6:	84 5a       	subi	r24, 0xA4	; 164
    d9e8:	9e 4f       	sbci	r25, 0xFE	; 254
    d9ea:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000d9ee <button_select_term_ring_input_in_dialog_onclick(unsigned int, unsigned int, unsigned char)>:
_Z47button_select_term_ring_input_in_dialog_onclickjjh():
    d9ee:	21 e2       	ldi	r18, 0x21	; 33
    d9f0:	62 9f       	mul	r22, r18
    d9f2:	c0 01       	movw	r24, r0
    d9f4:	11 24       	eor	r1, r1
    d9f6:	64 2f       	mov	r22, r20
    d9f8:	84 5a       	subi	r24, 0xA4	; 164
    d9fa:	9e 4f       	sbci	r25, 0xFE	; 254
    d9fc:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000da00 <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    da00:	af 92       	push	r10
    da02:	bf 92       	push	r11
    da04:	cf 92       	push	r12
    da06:	df 92       	push	r13
    da08:	ef 92       	push	r14
    da0a:	ff 92       	push	r15
    da0c:	0f 93       	push	r16
    da0e:	1f 93       	push	r17
    da10:	cf 93       	push	r28
    da12:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    da14:	86 30       	cpi	r24, 0x06	; 6
    da16:	08 f0       	brcs	.+2      	; 0xda1a <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    da18:	49 c0       	rjmp	.+146    	; 0xdaac <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    da1a:	6b 01       	movw	r12, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    da1c:	96 e1       	ldi	r25, 0x16	; 22
    da1e:	89 9f       	mul	r24, r25
    da20:	e0 01       	movw	r28, r0
    da22:	11 24       	eor	r1, r1
    da24:	f6 01       	movw	r30, r12
    da26:	61 91       	ld	r22, Z+
    da28:	7f 01       	movw	r14, r30
    da2a:	ce 01       	movw	r24, r28
    da2c:	88 53       	subi	r24, 0x38	; 56
    da2e:	9f 4f       	sbci	r25, 0xFF	; 255
    da30:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    da34:	8e 01       	movw	r16, r28
    da36:	07 53       	subi	r16, 0x37	; 55
    da38:	1f 4f       	sbci	r17, 0xFF	; 255
    da3a:	5e 01       	movw	r10, r28
    da3c:	f1 ed       	ldi	r31, 0xD1	; 209
    da3e:	af 0e       	add	r10, r31
    da40:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    da42:	f7 01       	movw	r30, r14
    da44:	61 91       	ld	r22, Z+
    da46:	7f 01       	movw	r14, r30
    da48:	c8 01       	movw	r24, r16
    da4a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    da4e:	f7 01       	movw	r30, r14
    da50:	62 85       	ldd	r22, Z+10	; 0x0a
    da52:	c8 01       	movw	r24, r16
    da54:	0b 96       	adiw	r24, 0x0b	; 11
    da56:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    da5a:	0f 5f       	subi	r16, 0xFF	; 255
    da5c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    da5e:	0a 15       	cp	r16, r10
    da60:	1b 05       	cpc	r17, r11
    da62:	79 f7       	brne	.-34     	; 0xda42 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    da64:	f6 01       	movw	r30, r12
    da66:	61 85       	ldd	r22, Z+9	; 0x09
    da68:	c8 01       	movw	r24, r16
    da6a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    da6e:	f6 01       	movw	r30, r12
    da70:	63 85       	ldd	r22, Z+11	; 0x0b
    da72:	ce 01       	movw	r24, r28
    da74:	8e 52       	subi	r24, 0x2E	; 46
    da76:	9f 4f       	sbci	r25, 0xFF	; 255
    da78:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    da7c:	f6 01       	movw	r30, r12
    da7e:	62 85       	ldd	r22, Z+10	; 0x0a
    da80:	ce 01       	movw	r24, r28
    da82:	8d 52       	subi	r24, 0x2D	; 45
    da84:	9f 4f       	sbci	r25, 0xFF	; 255
    da86:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    da8a:	f6 01       	movw	r30, r12
    da8c:	64 89       	ldd	r22, Z+20	; 0x14
    da8e:	ce 01       	movw	r24, r28
    da90:	84 52       	subi	r24, 0x24	; 36
    da92:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    da94:	df 91       	pop	r29
    da96:	cf 91       	pop	r28
    da98:	1f 91       	pop	r17
    da9a:	0f 91       	pop	r16
    da9c:	ff 90       	pop	r15
    da9e:	ef 90       	pop	r14
    daa0:	df 90       	pop	r13
    daa2:	cf 90       	pop	r12
    daa4:	bf 90       	pop	r11
    daa6:	af 90       	pop	r10
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    daa8:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:69
  }
}
    daac:	df 91       	pop	r29
    daae:	cf 91       	pop	r28
    dab0:	1f 91       	pop	r17
    dab2:	0f 91       	pop	r16
    dab4:	ff 90       	pop	r15
    dab6:	ef 90       	pop	r14
    dab8:	df 90       	pop	r13
    daba:	cf 90       	pop	r12
    dabc:	bf 90       	pop	r11
    dabe:	af 90       	pop	r10
    dac0:	08 95       	ret

0000dac2 <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    dac2:	ff 92       	push	r15
    dac4:	0f 93       	push	r16
    dac6:	1f 93       	push	r17
    dac8:	cf 93       	push	r28
    daca:	df 93       	push	r29
    dacc:	8c 01       	movw	r16, r24
    dace:	d0 e0       	ldi	r29, 0x00	; 0
    dad0:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    dad2:	f8 01       	movw	r30, r16
    dad4:	f1 90       	ld	r15, Z+
    dad6:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    dad8:	6f 2d       	mov	r22, r15
    dada:	ce 01       	movw	r24, r28
    dadc:	8c 59       	subi	r24, 0x9C	; 156
    dade:	9f 4f       	sbci	r25, 0xFF	; 255
    dae0:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    dae4:	f1 10       	cpse	r15, r1
    dae6:	0b c0       	rjmp	.+22     	; 0xdafe <device_set_name(char*)+0x3c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    dae8:	60 e0       	ldi	r22, 0x00	; 0
    daea:	ce 01       	movw	r24, r28
    daec:	8b 59       	subi	r24, 0x9B	; 155
    daee:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    daf0:	df 91       	pop	r29
    daf2:	cf 91       	pop	r28
    daf4:	1f 91       	pop	r17
    daf6:	0f 91       	pop	r16
    daf8:	ff 90       	pop	r15
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    dafa:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dafe:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    db00:	c9 30       	cpi	r28, 0x09	; 9
    db02:	d1 05       	cpc	r29, r1
    db04:	31 f7       	brne	.-52     	; 0xdad2 <device_set_name(char*)+0x10>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    db06:	df 91       	pop	r29
    db08:	cf 91       	pop	r28
    db0a:	1f 91       	pop	r17
    db0c:	0f 91       	pop	r16
    db0e:	ff 90       	pop	r15
    db10:	08 95       	ret

0000db12 <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    db12:	ef 92       	push	r14
    db14:	ff 92       	push	r15
    db16:	0f 93       	push	r16
    db18:	1f 93       	push	r17
    db1a:	cf 93       	push	r28
    db1c:	df 93       	push	r29
    db1e:	09 e1       	ldi	r16, 0x19	; 25
    db20:	1e e0       	ldi	r17, 0x0E	; 14
    db22:	ce e6       	ldi	r28, 0x6E	; 110
    db24:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    db26:	f8 01       	movw	r30, r16
    db28:	61 91       	ld	r22, Z+
    db2a:	8f 01       	movw	r16, r30
    db2c:	ce 01       	movw	r24, r28
    db2e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    db32:	21 96       	adiw	r28, 0x01	; 1
    db34:	c4 37       	cpi	r28, 0x74	; 116
    db36:	d1 05       	cpc	r29, r1
    db38:	b1 f7       	brne	.-20     	; 0xdb26 <save_setup_network()+0x14>
    db3a:	0f e1       	ldi	r16, 0x1F	; 31
    db3c:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    db3e:	f8 01       	movw	r30, r16
    db40:	61 91       	ld	r22, Z+
    db42:	8f 01       	movw	r16, r30
    db44:	ce 01       	movw	r24, r28
    db46:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    db4a:	21 96       	adiw	r28, 0x01	; 1
    db4c:	c8 37       	cpi	r28, 0x78	; 120
    db4e:	d1 05       	cpc	r29, r1
    db50:	b1 f7       	brne	.-20     	; 0xdb3e <save_setup_network()+0x2c>
    db52:	03 e2       	ldi	r16, 0x23	; 35
    db54:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    db56:	f8 01       	movw	r30, r16
    db58:	61 91       	ld	r22, Z+
    db5a:	8f 01       	movw	r16, r30
    db5c:	ce 01       	movw	r24, r28
    db5e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    db62:	21 96       	adiw	r28, 0x01	; 1
    db64:	cc 37       	cpi	r28, 0x7C	; 124
    db66:	d1 05       	cpc	r29, r1
    db68:	b1 f7       	brne	.-20     	; 0xdb56 <save_setup_network()+0x44>
    db6a:	2b e2       	ldi	r18, 0x2B	; 43
    db6c:	e2 2e       	mov	r14, r18
    db6e:	2e e0       	ldi	r18, 0x0E	; 14
    db70:	f2 2e       	mov	r15, r18
    db72:	00 e8       	ldi	r16, 0x80	; 128
    db74:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    db76:	f7 01       	movw	r30, r14
    db78:	61 91       	ld	r22, Z+
    db7a:	7f 01       	movw	r14, r30
    db7c:	c8 01       	movw	r24, r16
    db7e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    db82:	0f 5f       	subi	r16, 0xFF	; 255
    db84:	1f 4f       	sbci	r17, 0xFF	; 255
    db86:	04 38       	cpi	r16, 0x84	; 132
    db88:	11 05       	cpc	r17, r1
    db8a:	a9 f7       	brne	.-22     	; 0xdb76 <save_setup_network()+0x64>
    db8c:	97 e2       	ldi	r25, 0x27	; 39
    db8e:	e9 2e       	mov	r14, r25
    db90:	9e e0       	ldi	r25, 0x0E	; 14
    db92:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    db94:	f7 01       	movw	r30, r14
    db96:	61 91       	ld	r22, Z+
    db98:	7f 01       	movw	r14, r30
    db9a:	ce 01       	movw	r24, r28
    db9c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dba0:	21 96       	adiw	r28, 0x01	; 1
    dba2:	c0 38       	cpi	r28, 0x80	; 128
    dba4:	d1 05       	cpc	r29, r1
    dba6:	b1 f7       	brne	.-20     	; 0xdb94 <save_setup_network()+0x82>
    dba8:	8f e2       	ldi	r24, 0x2F	; 47
    dbaa:	e8 2e       	mov	r14, r24
    dbac:	8e e0       	ldi	r24, 0x0E	; 14
    dbae:	f8 2e       	mov	r15, r24
    dbb0:	c4 e6       	ldi	r28, 0x64	; 100
    dbb2:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    dbb4:	f7 01       	movw	r30, r14
    dbb6:	61 91       	ld	r22, Z+
    dbb8:	7f 01       	movw	r14, r30
    dbba:	ce 01       	movw	r24, r28
    dbbc:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dbc0:	21 96       	adiw	r28, 0x01	; 1
    dbc2:	cd 36       	cpi	r28, 0x6D	; 109
    dbc4:	d1 05       	cpc	r29, r1
    dbc6:	b1 f7       	brne	.-20     	; 0xdbb4 <save_setup_network()+0xa2>
    dbc8:	c9 e3       	ldi	r28, 0x39	; 57
    dbca:	de e0       	ldi	r29, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    dbcc:	69 91       	ld	r22, Y+
    dbce:	c8 01       	movw	r24, r16
    dbd0:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dbd4:	0f 5f       	subi	r16, 0xFF	; 255
    dbd6:	1f 4f       	sbci	r17, 0xFF	; 255
    dbd8:	08 38       	cpi	r16, 0x88	; 136
    dbda:	11 05       	cpc	r17, r1
    dbdc:	b9 f7       	brne	.-18     	; 0xdbcc <save_setup_network()+0xba>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    dbde:	60 91 3e 0e 	lds	r22, 0x0E3E	; 0x800e3e <device+0x25>
    dbe2:	88 e8       	ldi	r24, 0x88	; 136
    dbe4:	90 e0       	ldi	r25, 0x00	; 0
    dbe6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    dbea:	60 91 3d 0e 	lds	r22, 0x0E3D	; 0x800e3d <device+0x24>
    dbee:	89 e8       	ldi	r24, 0x89	; 137
    dbf0:	90 e0       	ldi	r25, 0x00	; 0
    dbf2:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dbf6:	0f e3       	ldi	r16, 0x3F	; 63
    dbf8:	1e e0       	ldi	r17, 0x0E	; 14
    dbfa:	ca e8       	ldi	r28, 0x8A	; 138
    dbfc:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    dbfe:	f8 01       	movw	r30, r16
    dc00:	61 91       	ld	r22, Z+
    dc02:	8f 01       	movw	r16, r30
    dc04:	ce 01       	movw	r24, r28
    dc06:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dc0a:	21 96       	adiw	r28, 0x01	; 1
    dc0c:	ce 39       	cpi	r28, 0x9E	; 158
    dc0e:	d1 05       	cpc	r29, r1
    dc10:	b1 f7       	brne	.-20     	; 0xdbfe <save_setup_network()+0xec>
    dc12:	03 e5       	ldi	r16, 0x53	; 83
    dc14:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    dc16:	f8 01       	movw	r30, r16
    dc18:	61 91       	ld	r22, Z+
    dc1a:	8f 01       	movw	r16, r30
    dc1c:	ce 01       	movw	r24, r28
    dc1e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dc22:	21 96       	adiw	r28, 0x01	; 1
    dc24:	c2 3b       	cpi	r28, 0xB2	; 178
    dc26:	d1 05       	cpc	r29, r1
    dc28:	b1 f7       	brne	.-20     	; 0xdc16 <save_setup_network()+0x104>
    dc2a:	07 e6       	ldi	r16, 0x67	; 103
    dc2c:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    dc2e:	f8 01       	movw	r30, r16
    dc30:	61 91       	ld	r22, Z+
    dc32:	8f 01       	movw	r16, r30
    dc34:	ce 01       	movw	r24, r28
    dc36:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
    dc3a:	21 96       	adiw	r28, 0x01	; 1
    dc3c:	c6 3b       	cpi	r28, 0xB6	; 182
    dc3e:	d1 05       	cpc	r29, r1
    dc40:	b1 f7       	brne	.-20     	; 0xdc2e <save_setup_network()+0x11c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:54
}
    dc42:	df 91       	pop	r29
    dc44:	cf 91       	pop	r28
    dc46:	1f 91       	pop	r17
    dc48:	0f 91       	pop	r16
    dc4a:	ff 90       	pop	r15
    dc4c:	ef 90       	pop	r14
    dc4e:	08 95       	ret

0000dc50 <helper_dialog_mqtt_set_pass(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_passjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5930
  strcpy(device.mqtt_user, user);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_pass(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dc50:	cf 93       	push	r28
    dc52:	df 93       	push	r29
    dc54:	cd b7       	in	r28, 0x3d	; 61
    dc56:	de b7       	in	r29, 0x3e	; 62
    dc58:	64 97       	sbiw	r28, 0x14	; 20
    dc5a:	0f b6       	in	r0, 0x3f	; 63
    dc5c:	f8 94       	cli
    dc5e:	de bf       	out	0x3e, r29	; 62
    dc60:	0f be       	out	0x3f, r0	; 63
    dc62:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5932
  char key[20];
  display_element_get_string(key);
    dc64:	ce 01       	movw	r24, r28
    dc66:	01 96       	adiw	r24, 0x01	; 1
    dc68:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5933
  strcpy(device.mqtt_key, key);
    dc6c:	be 01       	movw	r22, r28
    dc6e:	6f 5f       	subi	r22, 0xFF	; 255
    dc70:	7f 4f       	sbci	r23, 0xFF	; 255
    dc72:	83 e5       	ldi	r24, 0x53	; 83
    dc74:	9e e0       	ldi	r25, 0x0E	; 14
    dc76:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5934
  save_setup_network();
    dc7a:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5935
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dc7e:	87 e0       	ldi	r24, 0x07	; 7
    dc80:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5936
}
    dc84:	64 96       	adiw	r28, 0x14	; 20
    dc86:	0f b6       	in	r0, 0x3f	; 63
    dc88:	f8 94       	cli
    dc8a:	de bf       	out	0x3e, r29	; 62
    dc8c:	0f be       	out	0x3f, r0	; 63
    dc8e:	cd bf       	out	0x3d, r28	; 61
    dc90:	df 91       	pop	r29
    dc92:	cf 91       	pop	r28
    dc94:	08 95       	ret

0000dc96 <helper_dialog_mqtt_set_user(unsigned int, unsigned int, unsigned char)>:
_Z27helper_dialog_mqtt_set_userjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5922
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
  save_setup_network();
  selftest_set_0(SELFTEST_RESTART_NEEDED);
}
void helper_dialog_mqtt_set_user(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dc96:	cf 93       	push	r28
    dc98:	df 93       	push	r29
    dc9a:	cd b7       	in	r28, 0x3d	; 61
    dc9c:	de b7       	in	r29, 0x3e	; 62
    dc9e:	64 97       	sbiw	r28, 0x14	; 20
    dca0:	0f b6       	in	r0, 0x3f	; 63
    dca2:	f8 94       	cli
    dca4:	de bf       	out	0x3e, r29	; 62
    dca6:	0f be       	out	0x3f, r0	; 63
    dca8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5924
  char user[20];
  display_element_get_string(user);
    dcaa:	ce 01       	movw	r24, r28
    dcac:	01 96       	adiw	r24, 0x01	; 1
    dcae:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5925
  strcpy(device.mqtt_user, user);
    dcb2:	be 01       	movw	r22, r28
    dcb4:	6f 5f       	subi	r22, 0xFF	; 255
    dcb6:	7f 4f       	sbci	r23, 0xFF	; 255
    dcb8:	8f e3       	ldi	r24, 0x3F	; 63
    dcba:	9e e0       	ldi	r25, 0x0E	; 14
    dcbc:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5926
  save_setup_network();
    dcc0:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5927
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dcc4:	87 e0       	ldi	r24, 0x07	; 7
    dcc6:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5928
}
    dcca:	64 96       	adiw	r28, 0x14	; 20
    dccc:	0f b6       	in	r0, 0x3f	; 63
    dcce:	f8 94       	cli
    dcd0:	de bf       	out	0x3e, r29	; 62
    dcd2:	0f be       	out	0x3f, r0	; 63
    dcd4:	cd bf       	out	0x3d, r28	; 61
    dcd6:	df 91       	pop	r29
    dcd8:	cf 91       	pop	r28
    dcda:	08 95       	ret

0000dcdc <helper_dialog_mqtt_set_server(unsigned int, unsigned int, unsigned char)>:
_Z29helper_dialog_mqtt_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5914

/*

*/
void helper_dialog_mqtt_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dcdc:	cf 93       	push	r28
    dcde:	df 93       	push	r29
    dce0:	cd b7       	in	r28, 0x3d	; 61
    dce2:	de b7       	in	r29, 0x3e	; 62
    dce4:	60 97       	sbiw	r28, 0x10	; 16
    dce6:	0f b6       	in	r0, 0x3f	; 63
    dce8:	f8 94       	cli
    dcea:	de bf       	out	0x3e, r29	; 62
    dcec:	0f be       	out	0x3f, r0	; 63
    dcee:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5916
  char ip_text[16];
  display_element_get_string(ip_text);
    dcf0:	ce 01       	movw	r24, r28
    dcf2:	01 96       	adiw	r24, 0x01	; 1
    dcf4:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5917
  parseBytes(ip_text, '.', device.mqtt_server, 4, 10);
    dcf8:	24 e0       	ldi	r18, 0x04	; 4
    dcfa:	30 e0       	ldi	r19, 0x00	; 0
    dcfc:	49 e3       	ldi	r20, 0x39	; 57
    dcfe:	5e e0       	ldi	r21, 0x0E	; 14
    dd00:	6e e2       	ldi	r22, 0x2E	; 46
    dd02:	ce 01       	movw	r24, r28
    dd04:	01 96       	adiw	r24, 0x01	; 1
    dd06:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5918
  save_setup_network();
    dd0a:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5919
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dd0e:	87 e0       	ldi	r24, 0x07	; 7
    dd10:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5920
}
    dd14:	60 96       	adiw	r28, 0x10	; 16
    dd16:	0f b6       	in	r0, 0x3f	; 63
    dd18:	f8 94       	cli
    dd1a:	de bf       	out	0x3e, r29	; 62
    dd1c:	0f be       	out	0x3f, r0	; 63
    dd1e:	cd bf       	out	0x3d, r28	; 61
    dd20:	df 91       	pop	r29
    dd22:	cf 91       	pop	r28
    dd24:	08 95       	ret

0000dd26 <helper_dialog_ntp_set_server(unsigned int, unsigned int, unsigned char)>:
_Z28helper_dialog_ntp_set_serverjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5815
  sprintf(ip_text, "%d.%d.%d.%d", device.ntp_server[0], device.ntp_server[1], device.ntp_server[2], device.ntp_server[3]);
  display_element_set_string(ip_text, 16, 0, &helper_dialog_ntp_set_server, &valid_ipv4_address_element_string);
}

void helper_dialog_ntp_set_server(uint16_t args1, uint16_t args2, uint8_t args3)
{
    dd26:	cf 93       	push	r28
    dd28:	df 93       	push	r29
    dd2a:	cd b7       	in	r28, 0x3d	; 61
    dd2c:	de b7       	in	r29, 0x3e	; 62
    dd2e:	60 97       	sbiw	r28, 0x10	; 16
    dd30:	0f b6       	in	r0, 0x3f	; 63
    dd32:	f8 94       	cli
    dd34:	de bf       	out	0x3e, r29	; 62
    dd36:	0f be       	out	0x3f, r0	; 63
    dd38:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5818
  uint8_t ip[4];
  char ip_text[16];
  display_element_get_string(ip_text);
    dd3a:	ce 01       	movw	r24, r28
    dd3c:	01 96       	adiw	r24, 0x01	; 1
    dd3e:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5819
  parseBytes(ip_text, '.', device.ntp_server, 4, 10);
    dd42:	24 e0       	ldi	r18, 0x04	; 4
    dd44:	30 e0       	ldi	r19, 0x00	; 0
    dd46:	47 e6       	ldi	r20, 0x67	; 103
    dd48:	5e e0       	ldi	r21, 0x0E	; 14
    dd4a:	6e e2       	ldi	r22, 0x2E	; 46
    dd4c:	ce 01       	movw	r24, r28
    dd4e:	01 96       	adiw	r24, 0x01	; 1
    dd50:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5820
  save_setup_network();
    dd54:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5821
  selftest_set_0(SELFTEST_RESTART_NEEDED);
    dd58:	87 e0       	ldi	r24, 0x07	; 7
    dd5a:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5822
}
    dd5e:	60 96       	adiw	r28, 0x10	; 16
    dd60:	0f b6       	in	r0, 0x3f	; 63
    dd62:	f8 94       	cli
    dd64:	de bf       	out	0x3e, r29	; 62
    dd66:	0f be       	out	0x3f, r0	; 63
    dd68:	cd bf       	out	0x3d, r28	; 61
    dd6a:	df 91       	pop	r29
    dd6c:	cf 91       	pop	r28
    dd6e:	08 95       	ret

0000dd70 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>:
_Z19remote_tds_set_namehPc.part.24():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1795
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    dd70:	df 92       	push	r13
    dd72:	ef 92       	push	r14
    dd74:	ff 92       	push	r15
    dd76:	0f 93       	push	r16
    dd78:	1f 93       	push	r17
    dd7a:	cf 93       	push	r28
    dd7c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    dd7e:	94 e1       	ldi	r25, 0x14	; 20
    dd80:	89 9f       	mul	r24, r25
    dd82:	e0 01       	movw	r28, r0
    dd84:	11 24       	eor	r1, r1
    dd86:	7b 01       	movw	r14, r22
    dd88:	8e 01       	movw	r16, r28
    dd8a:	06 55       	subi	r16, 0x56	; 86
    dd8c:	1a 4f       	sbci	r17, 0xFA	; 250
    dd8e:	c4 54       	subi	r28, 0x44	; 68
    dd90:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    dd92:	f7 01       	movw	r30, r14
    dd94:	d1 90       	ld	r13, Z+
    dd96:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    dd98:	6d 2d       	mov	r22, r13
    dd9a:	c8 01       	movw	r24, r16
    dd9c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
      if (t == 0) break;
    dda0:	dd 20       	and	r13, r13
    dda2:	29 f0       	breq	.+10     	; 0xddae <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x3e>
    dda4:	0f 5f       	subi	r16, 0xFF	; 255
    dda6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    dda8:	0c 17       	cp	r16, r28
    ddaa:	1d 07       	cpc	r17, r29
    ddac:	91 f7       	brne	.-28     	; 0xdd92 <remote_tds_set_name(unsigned char, char*) [clone .part.24]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1805
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    ddae:	df 91       	pop	r29
    ddb0:	cf 91       	pop	r28
    ddb2:	1f 91       	pop	r17
    ddb4:	0f 91       	pop	r16
    ddb6:	ff 90       	pop	r15
    ddb8:	ef 90       	pop	r14
    ddba:	df 90       	pop	r13
    ddbc:	08 95       	ret

0000ddbe <button_nastaveni_default_value(unsigned int, unsigned int, unsigned char)>:
_Z30button_nastaveni_default_valuejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5948
   a pak restart
*/
void button_nastaveni_default_value(uint16_t args1, uint16_t args2, uint8_t args3)
{
  /// TODO dialog ANO/NE
  EEPROM.write(set_default_values, 255);
    ddbe:	6f ef       	ldi	r22, 0xFF	; 255
    ddc0:	8a e5       	ldi	r24, 0x5A	; 90
    ddc2:	90 e0       	ldi	r25, 0x00	; 0
    ddc4:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5949
  resetFunc();
    ddc8:	f0 e0       	ldi	r31, 0x00	; 0
    ddca:	e0 e0       	ldi	r30, 0x00	; 0
    ddcc:	19 94       	eijmp

0000ddce <helper_set_menu_time_offset(unsigned int, float, unsigned char)>:
_Z27helper_set_menu_time_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1325
  return menu_dialog_variable[idx].variable_now ;
}

int display_function_get_variable_int(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    ddce:	60 91 9b 09 	lds	r22, 0x099B	; 0x80099b <menu_dialog_variable>
    ddd2:	70 91 9c 09 	lds	r23, 0x099C	; 0x80099c <menu_dialog_variable+0x1>
    ddd6:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <menu_dialog_variable+0x2>
    ddda:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <menu_dialog_variable+0x3>
    ddde:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
    dde2:	81 e0       	ldi	r24, 0x01	; 1
    dde4:	90 e0       	ldi	r25, 0x00	; 0
    dde6:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000ddea <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)>:
_Z66button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5665
}

void button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t click1 = 0;
  display_auto_shutdown_now = 0;
    ddea:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5666
  if (args3 == 0)
    ddee:	41 11       	cpse	r20, r1
    ddf0:	13 c0       	rjmp	.+38     	; 0xde18 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x2e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5668
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    ddf2:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    ddf6:	8f 7b       	andi	r24, 0xBF	; 191
    ddf8:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5669
    display_auto_shutdown = 0;
    ddfc:	10 92 97 0c 	sts	0x0C97, r1	; 0x800c97 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5704
    display_auto_shutdown = 250;
    click1 = 1;
  }
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    de00:	60 91 97 0c 	lds	r22, 0x0C97	; 0x800c97 <display_auto_shutdown>
    de04:	80 e6       	ldi	r24, 0x60	; 96
    de06:	90 e0       	ldi	r25, 0x00	; 0
    de08:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5705
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
    de0c:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de10:	8f e5       	ldi	r24, 0x5F	; 95
    de12:	90 e0       	ldi	r25, 0x00	; 0
    de14:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5672
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 0;
    click1 = 1;
  }
  if (args3 == 1)
    de18:	41 30       	cpi	r20, 0x01	; 1
    de1a:	49 f4       	brne	.+18     	; 0xde2e <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5674
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    de1c:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de20:	80 64       	ori	r24, 0x40	; 64
    de22:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5675
    display_auto_shutdown = 30;
    de26:	8e e1       	ldi	r24, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
    click1 = 1;
  }
  if (args3 == 5)
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 250;
    de28:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <display_auto_shutdown>
    de2c:	e9 cf       	rjmp	.-46     	; 0xde00 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5678
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    display_auto_shutdown = 30;
    click1 = 1;
  }
  if (args3 == 2)
    de2e:	42 30       	cpi	r20, 0x02	; 2
    de30:	39 f4       	brne	.+14     	; 0xde40 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5680
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    de32:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de36:	80 64       	ori	r24, 0x40	; 64
    de38:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5681
    display_auto_shutdown = 60;
    de3c:	8c e3       	ldi	r24, 0x3C	; 60
    de3e:	f4 cf       	rjmp	.-24     	; 0xde28 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5684
    click1 = 1;
  }
  if (args3 == 3)
    de40:	43 30       	cpi	r20, 0x03	; 3
    de42:	39 f4       	brne	.+14     	; 0xde52 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5686
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    de44:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de48:	80 64       	ori	r24, 0x40	; 64
    de4a:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5687
    display_auto_shutdown = 120;
    de4e:	88 e7       	ldi	r24, 0x78	; 120
    de50:	eb cf       	rjmp	.-42     	; 0xde28 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5690
    click1 = 1;
  }
  if (args3 == 4)
    de52:	44 30       	cpi	r20, 0x04	; 4
    de54:	39 f4       	brne	.+14     	; 0xde64 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x7a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5692
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    de56:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de5a:	80 64       	ori	r24, 0x40	; 64
    de5c:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5693
    display_auto_shutdown = 180;
    de60:	84 eb       	ldi	r24, 0xB4	; 180
    de62:	e2 cf       	rjmp	.-60     	; 0xde28 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5696
    click1 = 1;
  }
  if (args3 == 5)
    de64:	45 30       	cpi	r20, 0x05	; 5
    de66:	39 f4       	brne	.+14     	; 0xde76 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5698
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY);
    de68:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de6c:	80 64       	ori	r24, 0x40	; 64
    de6e:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5699
    display_auto_shutdown = 250;
    de72:	8a ef       	ldi	r24, 0xFA	; 250
    de74:	d9 cf       	rjmp	.-78     	; 0xde28 <button_set_brightness_auto_shutdown_select_time_dyn_symbol_onclick(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5707
  if (click1 == 1)
  {
    EEPROM.write(my_display_auto_shutdown, display_auto_shutdown);
    EEPROM.write(my_brightness_mode, brigthness_display_mode);
  }
}
    de76:	08 95       	ret

0000de78 <helper_display_set_brightness(unsigned int, float, unsigned char)>:
_Z29helper_display_set_brightnessjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5599
  display_function_set_variable(brigthness_display_values, 5, 100, 5, 0, NUMBER_TYPE_INT,  H_TRUE, 0, &helper_display_set_brightness);
}

void helper_display_set_brightness(uint16_t args1, float args2, uint8_t args3)
{
  brigthness_display_values = args3;
    de78:	20 93 87 0b 	sts	0x0B87, r18	; 0x800b87 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5600
  my_touch.TP_SetBacklight(brigthness_display_values * 2);
    de7c:	82 2f       	mov	r24, r18
    de7e:	88 0f       	add	r24, r24
    de80:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5601
  EEPROM.write(my_brightness_values, brigthness_display_values);
    de84:	60 91 87 0b 	lds	r22, 0x0B87	; 0x800b87 <brigthness_display_values>
    de88:	8e e5       	ldi	r24, 0x5E	; 94
    de8a:	90 e0       	ldi	r25, 0x00	; 0
    de8c:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000de90 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)>:
_Z34switch_brightness_automode_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5577
}
////////
/// Obsluzna funkce nastaveni rizeni podsvetleni
void switch_brightness_automode_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0 )
    de90:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    de94:	87 ff       	sbrs	r24, 7
    de96:	0e c0       	rjmp	.+28     	; 0xdeb4 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5579
  {
    cbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    de98:	8f 77       	andi	r24, 0x7F	; 127
    de9a:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5580
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    de9e:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
    dea2:	88 0f       	add	r24, r24
    dea4:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5588
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
  }
switch_brightness_automode_onclick_end:
  EEPROM.write(my_brightness_mode, brigthness_display_mode);
    dea8:	60 91 a5 0c 	lds	r22, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
    deac:	8f e5       	ldi	r24, 0x5F	; 95
    deae:	90 e0       	ldi	r25, 0x00	; 0
    deb0:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
    my_touch.TP_SetBacklight(brigthness_display_values * 2);
    goto switch_brightness_automode_onclick_end;
  }
  if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) == 0 )
  {
    sbi(brigthness_display_mode, DISPLAY_MODE_STATUS_BIT);
    deb4:	80 68       	ori	r24, 0x80	; 128
    deb6:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
    deba:	f6 cf       	rjmp	.-20     	; 0xdea8 <switch_brightness_automode_onclick(unsigned int, unsigned int, unsigned char)+0x18>

0000debc <term_ring_do_activate(unsigned int, unsigned int, unsigned char)>:
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5036
    ret = 2;
  return ret;
}
////
void term_ring_do_activate(uint16_t args1, uint16_t args2, uint8_t args3)
{
    debc:	cf 93       	push	r28
    debe:	c8 2f       	mov	r28, r24
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    dec0:	21 e2       	ldi	r18, 0x21	; 33
    dec2:	82 9f       	mul	r24, r18
    dec4:	c0 01       	movw	r24, r0
    dec6:	11 24       	eor	r1, r1
    dec8:	61 e0       	ldi	r22, 0x01	; 1
    deca:	83 5a       	subi	r24, 0xA3	; 163
    decc:	9e 4f       	sbci	r25, 0xFE	; 254
    dece:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5038
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
    ded2:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    ded6:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5039
  default_ring = args1;
    deda:	c0 93 86 0b 	sts	0x0B86, r28	; 0x800b86 <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    dede:	6c 2f       	mov	r22, r28
    dee0:	8c e5       	ldi	r24, 0x5C	; 92
    dee2:	90 e0       	ldi	r25, 0x00	; 0
_Z21term_ring_do_activatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5041
{
  thermostat_ring_set_active(args1, 1);
  last_default_ring = default_ring;
  default_ring = args1;
  set_default_ring(default_ring);
}
    dee4:	cf 91       	pop	r28
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    dee6:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000deea <button_click_set_show_default_temp(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_show_default_tempjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4884
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint16_t args1, uint16_t args2, uint8_t args3)
{
  default_show_temp = args3;
    deea:	40 93 93 09 	sts	0x0993, r20	; 0x800993 <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    deee:	64 2f       	mov	r22, r20
    def0:	8d e5       	ldi	r24, 0x5D	; 93
    def2:	90 e0       	ldi	r25, 0x00	; 0
    def4:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>

0000def8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    def8:	cf 93       	push	r28
    defa:	df 93       	push	r29
    defc:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    defe:	8a 30       	cpi	r24, 0x0A	; 10
    df00:	78 f4       	brcc	.+30     	; 0xdf20 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    df02:	ba 01       	movw	r22, r20
    df04:	c8 2f       	mov	r28, r24
    df06:	0e 94 b8 6e 	call	0xdd70	; 0xdd70 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    df0a:	24 e1       	ldi	r18, 0x14	; 20
    df0c:	c2 9f       	mul	r28, r18
    df0e:	c0 01       	movw	r24, r0
    df10:	11 24       	eor	r1, r1
    df12:	6d 2f       	mov	r22, r29
    df14:	83 54       	subi	r24, 0x43	; 67
    df16:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    df18:	df 91       	pop	r29
    df1a:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822


void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    df1c:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    df20:	df 91       	pop	r29
    df22:	cf 91       	pop	r28
    df24:	08 95       	ret

0000df26 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829



///
void remote_tds_clear(uint8_t idx)
{
    df26:	cf 93       	push	r28
    df28:	df 93       	push	r29
    df2a:	cd b7       	in	r28, 0x3d	; 61
    df2c:	de b7       	in	r29, 0x3e	; 62
    df2e:	62 97       	sbiw	r28, 0x12	; 18
    df30:	0f b6       	in	r0, 0x3f	; 63
    df32:	f8 94       	cli
    df34:	de bf       	out	0x3e, r29	; 62
    df36:	0f be       	out	0x3f, r0	; 63
    df38:	cd bf       	out	0x3d, r28	; 61
    df3a:	e1 e0       	ldi	r30, 0x01	; 1
    df3c:	f0 e0       	ldi	r31, 0x00	; 0
    df3e:	ec 0f       	add	r30, r28
    df40:	fd 1f       	adc	r31, r29
    df42:	e8 0f       	add	r30, r24
    df44:	f1 1d       	adc	r31, r1
    df46:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1833
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    df48:	ae 01       	movw	r20, r28
    df4a:	4f 5f       	subi	r20, 0xFF	; 255
    df4c:	5f 4f       	sbci	r21, 0xFF	; 255
    df4e:	60 e0       	ldi	r22, 0x00	; 0
    df50:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1834
}
    df54:	62 96       	adiw	r28, 0x12	; 18
    df56:	0f b6       	in	r0, 0x3f	; 63
    df58:	f8 94       	cli
    df5a:	de bf       	out	0x3e, r29	; 62
    df5c:	0f be       	out	0x3f, r0	; 63
    df5e:	cd bf       	out	0x3d, r28	; 61
    df60:	df 91       	pop	r29
    df62:	cf 91       	pop	r28
    df64:	08 95       	ret

0000df66 <click_rtds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z30click_rtds_deassociate_onewirejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4597
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint16_t args1, uint16_t args2, uint8_t args3)
{
    df66:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4598
  remote_tds_clear(args2);
    df68:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4599
  MenuHistoryPrevMenu(0, 0, 0);
    df6c:	0c 94 88 b8 	jmp	0x17110	; 0x17110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000df70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.279():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    df70:	0c 94 62 f8 	jmp	0x1f0c4	; 0x1f0c4 <eeprom_read_byte>

0000df74 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:59
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
    df74:	cf 92       	push	r12
    df76:	df 92       	push	r13
    df78:	ef 92       	push	r14
    df7a:	ff 92       	push	r15
    df7c:	0f 93       	push	r16
    df7e:	1f 93       	push	r17
    df80:	cf 93       	push	r28
    df82:	df 93       	push	r29
    df84:	00 d0       	rcall	.+0      	; 0xdf86 <EEPROMreadFloat(unsigned int)+0x12>
    df86:	1f 92       	push	r1
    df88:	cd b7       	in	r28, 0x3d	; 61
    df8a:	de b7       	in	r29, 0x3e	; 62
    df8c:	7e 01       	movw	r14, r28
    df8e:	25 e0       	ldi	r18, 0x05	; 5
    df90:	e2 0e       	add	r14, r18
    df92:	f1 1c       	adc	r15, r1
    df94:	8e 01       	movw	r16, r28
    df96:	0f 5f       	subi	r16, 0xFF	; 255
    df98:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
    df9a:	6c 01       	movw	r12, r24
    df9c:	c0 1a       	sub	r12, r16
    df9e:	d1 0a       	sbc	r13, r17
    dfa0:	c6 01       	movw	r24, r12
    dfa2:	80 0f       	add	r24, r16
    dfa4:	91 1f       	adc	r25, r17
    dfa6:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    dfaa:	f8 01       	movw	r30, r16
    dfac:	81 93       	st	Z+, r24
    dfae:	8f 01       	movw	r16, r30
    dfb0:	ee 15       	cp	r30, r14
    dfb2:	ff 05       	cpc	r31, r15
    dfb4:	a9 f7       	brne	.-22     	; 0xdfa0 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
  return data.f;
    dfb6:	69 81       	ldd	r22, Y+1	; 0x01
    dfb8:	7a 81       	ldd	r23, Y+2	; 0x02
    dfba:	8b 81       	ldd	r24, Y+3	; 0x03
    dfbc:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:66
}
    dfbe:	0f 90       	pop	r0
    dfc0:	0f 90       	pop	r0
    dfc2:	0f 90       	pop	r0
    dfc4:	0f 90       	pop	r0
    dfc6:	df 91       	pop	r29
    dfc8:	cf 91       	pop	r28
    dfca:	1f 91       	pop	r17
    dfcc:	0f 91       	pop	r16
    dfce:	ff 90       	pop	r15
    dfd0:	ef 90       	pop	r14
    dfd2:	df 90       	pop	r13
    dfd4:	cf 90       	pop	r12
    dfd6:	08 95       	ret

0000dfd8 <thermostat_program_get_threshold(unsigned char, unsigned char)>:
_Z32thermostat_program_get_thresholdhh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:323
}


//// ziska rozhodovaci uroven termostatu
uint16_t thermostat_program_get_threshold(uint8_t program_id, uint8_t interval_id)
{
    dfd8:	1f 93       	push	r17
    dfda:	cf 93       	push	r28
    dfdc:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:325
  uint16_t ret = 0;
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
    dfde:	9d e4       	ldi	r25, 0x4D	; 77
    dfe0:	89 9f       	mul	r24, r25
    dfe2:	e0 01       	movw	r28, r0
    dfe4:	11 24       	eor	r1, r1
    dfe6:	cf 50       	subi	r28, 0x0F	; 15
    dfe8:	de 4f       	sbci	r29, 0xFE	; 254
    dfea:	86 e0       	ldi	r24, 0x06	; 6
    dfec:	68 9f       	mul	r22, r24
    dfee:	c0 0d       	add	r28, r0
    dff0:	d1 1d       	adc	r29, r1
    dff2:	11 24       	eor	r1, r1
    dff4:	ce 01       	movw	r24, r28
    dff6:	05 96       	adiw	r24, 0x05	; 5
    dff8:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    dffc:	18 2f       	mov	r17, r24
    dffe:	ce 01       	movw	r24, r28
    e000:	04 96       	adiw	r24, 0x04	; 4
    e002:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e006:	21 2f       	mov	r18, r17
    e008:	30 e0       	ldi	r19, 0x00	; 0
    e00a:	32 2f       	mov	r19, r18
    e00c:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:327
  return ret;
}
    e00e:	82 0f       	add	r24, r18
    e010:	93 2f       	mov	r25, r19
    e012:	91 1d       	adc	r25, r1
    e014:	df 91       	pop	r29
    e016:	cf 91       	pop	r28
    e018:	1f 91       	pop	r17
    e01a:	08 95       	ret

0000e01c <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z27thermostat_program_get_timehhPhS_S_S_S_():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:301
}


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
    e01c:	7f 92       	push	r7
    e01e:	8f 92       	push	r8
    e020:	9f 92       	push	r9
    e022:	af 92       	push	r10
    e024:	bf 92       	push	r11
    e026:	cf 92       	push	r12
    e028:	df 92       	push	r13
    e02a:	ef 92       	push	r14
    e02c:	ff 92       	push	r15
    e02e:	0f 93       	push	r16
    e030:	1f 93       	push	r17
    e032:	cf 93       	push	r28
    e034:	df 93       	push	r29
    e036:	5a 01       	movw	r10, r20
    e038:	e9 01       	movw	r28, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:302
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    e03a:	9d e4       	ldi	r25, 0x4D	; 77
    e03c:	89 9f       	mul	r24, r25
    e03e:	40 01       	movw	r8, r0
    e040:	11 24       	eor	r1, r1
    e042:	ef e0       	ldi	r30, 0x0F	; 15
    e044:	8e 1a       	sub	r8, r30
    e046:	ee ef       	ldi	r30, 0xFE	; 254
    e048:	9e 0a       	sbc	r9, r30
    e04a:	f6 e0       	ldi	r31, 0x06	; 6
    e04c:	6f 9f       	mul	r22, r31
    e04e:	80 0c       	add	r8, r0
    e050:	91 1c       	adc	r9, r1
    e052:	11 24       	eor	r1, r1
    e054:	c4 01       	movw	r24, r8
    e056:	02 96       	adiw	r24, 0x02	; 2
    e058:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e05c:	78 2e       	mov	r7, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    e05e:	c4 01       	movw	r24, r8
    e060:	03 96       	adiw	r24, 0x03	; 3
    e062:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    e066:	97 2d       	mov	r25, r7
    e068:	96 95       	lsr	r25
    e06a:	96 95       	lsr	r25
    e06c:	96 95       	lsr	r25
    e06e:	f5 01       	movw	r30, r10
    e070:	90 83       	st	Z, r25
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    e072:	27 2d       	mov	r18, r7
    e074:	30 e0       	ldi	r19, 0x00	; 0
    e076:	35 95       	asr	r19
    e078:	27 95       	ror	r18
    e07a:	23 70       	andi	r18, 0x03	; 3
    e07c:	9f e0       	ldi	r25, 0x0F	; 15
    e07e:	29 9f       	mul	r18, r25
    e080:	20 2d       	mov	r18, r0
    e082:	11 24       	eor	r1, r1
    e084:	28 83       	st	Y, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    e086:	28 2f       	mov	r18, r24
    e088:	26 95       	lsr	r18
    e08a:	26 95       	lsr	r18
    e08c:	26 95       	lsr	r18
    e08e:	f8 01       	movw	r30, r16
    e090:	20 83       	st	Z, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    e092:	83 70       	andi	r24, 0x03	; 3
    e094:	89 9f       	mul	r24, r25
    e096:	80 2d       	mov	r24, r0
    e098:	11 24       	eor	r1, r1
    e09a:	f7 01       	movw	r30, r14
    e09c:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    e09e:	87 2d       	mov	r24, r7
    e0a0:	81 70       	andi	r24, 0x01	; 1
    e0a2:	f6 01       	movw	r30, r12
    e0a4:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:309
}
    e0a6:	df 91       	pop	r29
    e0a8:	cf 91       	pop	r28
    e0aa:	1f 91       	pop	r17
    e0ac:	0f 91       	pop	r16
    e0ae:	ff 90       	pop	r15
    e0b0:	ef 90       	pop	r14
    e0b2:	df 90       	pop	r13
    e0b4:	cf 90       	pop	r12
    e0b6:	bf 90       	pop	r11
    e0b8:	af 90       	pop	r10
    e0ba:	9f 90       	pop	r9
    e0bc:	8f 90       	pop	r8
    e0be:	7f 90       	pop	r7
    e0c0:	08 95       	ret

0000e0c2 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    e0c2:	21 e2       	ldi	r18, 0x21	; 33
    e0c4:	82 9f       	mul	r24, r18
    e0c6:	c0 01       	movw	r24, r0
    e0c8:	11 24       	eor	r1, r1
    e0ca:	82 5a       	subi	r24, 0xA2	; 162
    e0cc:	9e 4f       	sbci	r25, 0xFE	; 254
    e0ce:	0c 94 b8 6f 	jmp	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000e0d2 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    e0d2:	0f 93       	push	r16
    e0d4:	1f 93       	push	r17
    e0d6:	cf 93       	push	r28
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    e0d8:	91 e2       	ldi	r25, 0x21	; 33
    e0da:	89 9f       	mul	r24, r25
    e0dc:	80 01       	movw	r16, r0
    e0de:	11 24       	eor	r1, r1
    e0e0:	c8 01       	movw	r24, r16
    e0e2:	8a 5a       	subi	r24, 0xAA	; 170
    e0e4:	9e 4f       	sbci	r25, 0xFE	; 254
    e0e6:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e0ea:	c8 2f       	mov	r28, r24
    e0ec:	c8 01       	movw	r24, r16
    e0ee:	89 5a       	subi	r24, 0xA9	; 169
    e0f0:	9e 4f       	sbci	r25, 0xFE	; 254
    e0f2:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e0f6:	2c 2f       	mov	r18, r28
    e0f8:	30 e0       	ldi	r19, 0x00	; 0
    e0fa:	32 2f       	mov	r19, r18
    e0fc:	22 27       	eor	r18, r18
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:155
}
    e0fe:	82 0f       	add	r24, r18
    e100:	93 2f       	mov	r25, r19
    e102:	91 1d       	adc	r25, r1
    e104:	cf 91       	pop	r28
    e106:	1f 91       	pop	r17
    e108:	0f 91       	pop	r16
    e10a:	08 95       	ret

0000e10c <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1290
  preload_pid_menu(0, args2, 0);
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e10c:	1f 93       	push	r17
    e10e:	cf 93       	push	r28
    e110:	df 93       	push	r29
    e112:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1291
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    e114:	86 2f       	mov	r24, r22
    e116:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e11a:	cb e9       	ldi	r28, 0x9B	; 155
    e11c:	d9 e0       	ldi	r29, 0x09	; 9
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1291
}


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
    e11e:	bc 01       	movw	r22, r24
    e120:	99 0f       	add	r25, r25
    e122:	88 0b       	sbc	r24, r24
    e124:	99 0b       	sbc	r25, r25
    e126:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    e12a:	20 e0       	ldi	r18, 0x00	; 0
    e12c:	30 e0       	ldi	r19, 0x00	; 0
    e12e:	40 e2       	ldi	r20, 0x20	; 32
    e130:	51 e4       	ldi	r21, 0x41	; 65
    e132:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    e136:	68 83       	st	Y, r22
    e138:	79 83       	std	Y+1, r23	; 0x01
    e13a:	8a 83       	std	Y+2, r24	; 0x02
    e13c:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  menu_dialog_variable[idx].variable_min = min;
    e13e:	80 e0       	ldi	r24, 0x00	; 0
    e140:	90 e0       	ldi	r25, 0x00	; 0
    e142:	a0 e8       	ldi	r26, 0x80	; 128
    e144:	b1 e4       	ldi	r27, 0x41	; 65
    e146:	88 87       	std	Y+8, r24	; 0x08
    e148:	99 87       	std	Y+9, r25	; 0x09
    e14a:	aa 87       	std	Y+10, r26	; 0x0a
    e14c:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    e14e:	80 e0       	ldi	r24, 0x00	; 0
    e150:	90 e0       	ldi	r25, 0x00	; 0
    e152:	a0 e0       	ldi	r26, 0x00	; 0
    e154:	b2 e4       	ldi	r27, 0x42	; 66
    e156:	8c 83       	std	Y+4, r24	; 0x04
    e158:	9d 83       	std	Y+5, r25	; 0x05
    e15a:	ae 83       	std	Y+6, r26	; 0x06
    e15c:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    e15e:	80 e0       	ldi	r24, 0x00	; 0
    e160:	90 e0       	ldi	r25, 0x00	; 0
    e162:	a0 e0       	ldi	r26, 0x00	; 0
    e164:	bf e3       	ldi	r27, 0x3F	; 63
    e166:	8e 87       	std	Y+14, r24	; 0x0e
    e168:	9f 87       	std	Y+15, r25	; 0x0f
    e16a:	a8 8b       	std	Y+16, r26	; 0x10
    e16c:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    e16e:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    e170:	1a 8b       	std	Y+18, r17	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    e172:	81 e0       	ldi	r24, 0x01	; 1
    e174:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    e176:	86 e0       	ldi	r24, 0x06	; 6
    e178:	9c e6       	ldi	r25, 0x6C	; 108
    e17a:	9c 8b       	std	Y+20, r25	; 0x14
    e17c:	8b 8b       	std	Y+19, r24	; 0x13
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1292


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(args2) / 10.0, 16.0, 32.0, 0.5, args2, NUMBER_TYPE_FLOAT,  H_TRUE, DIALOG_SET_VARIABLE_GENERAL, &helper_thermostat_set_mezni);
}
    e17e:	df 91       	pop	r29
    e180:	cf 91       	pop	r28
    e182:	1f 91       	pop	r17
    e184:	08 95       	ret

0000e186 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    e186:	21 e2       	ldi	r18, 0x21	; 33
    e188:	82 9f       	mul	r24, r18
    e18a:	c0 01       	movw	r24, r0
    e18c:	11 24       	eor	r1, r1
    e18e:	83 5a       	subi	r24, 0xA3	; 163
    e190:	9e 4f       	sbci	r25, 0xFE	; 254
    e192:	0c 94 b8 6f 	jmp	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>

0000e196 <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)>:
_Z44display_enable_show_thermostat_deactive_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5509
    ret = 1;
  return ret;
}

uint8_t display_enable_show_thermostat_deactive_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e196:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5511
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e198:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e19c:	91 e0       	ldi	r25, 0x01	; 1
    e19e:	8f 3f       	cpi	r24, 0xFF	; 255
    e1a0:	09 f4       	brne	.+2      	; 0xe1a4 <display_enable_show_thermostat_deactive_ring(unsigned int, unsigned int, unsigned char)+0xe>
    e1a2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5514
    ret = 1;
  return ret;
}
    e1a4:	89 2f       	mov	r24, r25
    e1a6:	08 95       	ret

0000e1a8 <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)>:
_Z42display_enable_show_thermostat_active_ringjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5501
  }
*/


uint8_t display_enable_show_thermostat_active_ring(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e1a8:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5503
  uint8_t ret = 0;
  if (thermostat_ring_get_active(args2) == RING_FREE)
    e1aa:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e1ae:	91 e0       	ldi	r25, 0x01	; 1
    e1b0:	8f 3f       	cpi	r24, 0xFF	; 255
    e1b2:	09 f0       	breq	.+2      	; 0xe1b6 <display_enable_show_thermostat_active_ring(unsigned int, unsigned int, unsigned char)+0xe>
    e1b4:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5506
    ret = 1;
  return ret;
}
    e1b6:	89 2f       	mov	r24, r25
    e1b8:	08 95       	ret

0000e1ba <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5477
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/

uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e1ba:	cf 93       	push	r28
    e1bc:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5479
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e1be:	86 2f       	mov	r24, r22
    e1c0:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e1c4:	8f 3f       	cpi	r24, 0xFF	; 255
    e1c6:	59 f0       	breq	.+22     	; 0xe1de <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5481
  {
    mode = thermostat_ring_get_mode(args2);
    e1c8:	8c 2f       	mov	r24, r28
    e1ca:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
    e1ce:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5483
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
      return 1;
    e1d0:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5482
{
  uint8_t mode = 0;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    mode = thermostat_ring_get_mode(args2);
    if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    e1d2:	93 30       	cpi	r25, 0x03	; 3
    e1d4:	29 f0       	breq	.+10     	; 0xe1e0 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    e1d6:	95 30       	cpi	r25, 0x05	; 5
    e1d8:	19 f0       	breq	.+6      	; 0xe1e0 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
    e1da:	98 30       	cpi	r25, 0x08	; 8
    e1dc:	09 f0       	breq	.+2      	; 0xe1e0 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5485
      return 1;
  }
  return 0;
    e1de:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5486
}
    e1e0:	cf 91       	pop	r28
    e1e2:	08 95       	ret

0000e1e4 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_set_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5459
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/

void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e1e4:	0f 93       	push	r16
    e1e6:	1f 93       	push	r17
    e1e8:	cf 93       	push	r28
    e1ea:	8c 01       	movw	r16, r24
    e1ec:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e1ee:	86 2f       	mov	r24, r22
    e1f0:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e1f4:	8f 3f       	cpi	r24, 0xFF	; 255
    e1f6:	71 f0       	breq	.+28     	; 0xe214 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5463
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    e1f8:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5462

void button_click_set_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    e1fa:	03 30       	cpi	r16, 0x03	; 3
    e1fc:	11 05       	cpc	r17, r1
    e1fe:	21 f0       	breq	.+8      	; 0xe208 <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5464
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    e200:	05 30       	cpi	r16, 0x05	; 5
    e202:	11 05       	cpc	r17, r1
    e204:	21 f4       	brne	.+8      	; 0xe20e <button_click_set_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5465
      thermostat_ring_update_bites(args2, STATUS_BIT_HEAT_OR_COOL, 1);
    e206:	61 e0       	ldi	r22, 0x01	; 1
    e208:	8c 2f       	mov	r24, r28
    e20a:	0e 94 4f da 	call	0x1b49e	; 0x1b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5466
    change_term_mode = 2;
    e20e:	82 e0       	ldi	r24, 0x02	; 2
    e210:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5468
  }
}
    e214:	cf 91       	pop	r28
    e216:	1f 91       	pop	r17
    e218:	0f 91       	pop	r16
    e21a:	08 95       	ret

0000e21c <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z38button_select_term_mode_get_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5342
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e21c:	cf 93       	push	r28
    e21e:	df 93       	push	r29
    e220:	d6 2f       	mov	r29, r22
    e222:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5345
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e224:	86 2f       	mov	r24, r22
    e226:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e22a:	8f 3f       	cpi	r24, 0xFF	; 255
    e22c:	49 f1       	breq	.+82     	; 0xe280 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5348
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    e22e:	8d 2f       	mov	r24, r29
    e230:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
    e234:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5349
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    e236:	c1 11       	cpse	r28, r1
    e238:	05 c0       	rjmp	.+10     	; 0xe244 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x28>
    e23a:	81 e0       	ldi	r24, 0x01	; 1
    e23c:	99 23       	and	r25, r25
    e23e:	39 f0       	breq	.+14     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5347
{
  uint8_t mode;
  uint8_t ret = 2;
  if (thermostat_ring_get_active(args2) != RING_FREE)
  {
    ret = 0;
    e240:	80 e0       	ldi	r24, 0x00	; 0
    e242:	05 c0       	rjmp	.+10     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5350
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    e244:	c1 30       	cpi	r28, 0x01	; 1
    e246:	31 f4       	brne	.+12     	; 0xe254 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x38>
    e248:	81 e0       	ldi	r24, 0x01	; 1
    e24a:	91 30       	cpi	r25, 0x01	; 1
    e24c:	c9 f7       	brne	.-14     	; 0xe240 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  }
  return ret;
}
    e24e:	df 91       	pop	r29
    e250:	cf 91       	pop	r28
    e252:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5351
  {
    ret = 0;
    mode = thermostat_ring_get_mode(args2);
    if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    e254:	c2 30       	cpi	r28, 0x02	; 2
    e256:	21 f4       	brne	.+8      	; 0xe260 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x44>
    e258:	81 e0       	ldi	r24, 0x01	; 1
    e25a:	97 30       	cpi	r25, 0x07	; 7
    e25c:	89 f7       	brne	.-30     	; 0xe240 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e25e:	f7 cf       	rjmp	.-18     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5352
    if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    e260:	c3 30       	cpi	r28, 0x03	; 3
    e262:	21 f4       	brne	.+8      	; 0xe26c <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x50>
    e264:	81 e0       	ldi	r24, 0x01	; 1
    e266:	92 30       	cpi	r25, 0x02	; 2
    e268:	59 f7       	brne	.-42     	; 0xe240 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e26a:	f1 cf       	rjmp	.-30     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5353
    if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    e26c:	c4 30       	cpi	r28, 0x04	; 4
    e26e:	41 f7       	brne	.-48     	; 0xe240 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e270:	81 e0       	ldi	r24, 0x01	; 1
    e272:	98 30       	cpi	r25, 0x08	; 8
    e274:	61 f3       	breq	.-40     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    e276:	93 30       	cpi	r25, 0x03	; 3
    e278:	51 f3       	breq	.-44     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
    e27a:	95 30       	cpi	r25, 0x05	; 5
    e27c:	09 f7       	brne	.-62     	; 0xe240 <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x24>
    e27e:	e7 cf       	rjmp	.-50     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5344
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_select_term_mode_get_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 2;
    e280:	82 e0       	ldi	r24, 0x02	; 2
    e282:	e5 cf       	rjmp	.-54     	; 0xe24e <button_select_term_mode_get_status_fnt(unsigned int, unsigned int, unsigned char)+0x32>

0000e284 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)>:
_Z34button_click_default_term_set_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5263
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/

void button_click_default_term_set_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e284:	cf 93       	push	r28
    e286:	df 93       	push	r29
    e288:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5264
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    e28a:	c0 91 86 0b 	lds	r28, 0x0B86	; 0x800b86 <default_ring>
    e28e:	8c 2f       	mov	r24, r28
    e290:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e294:	8f 3f       	cpi	r24, 0xFF	; 255
    e296:	61 f0       	breq	.+24     	; 0xe2b0 <button_click_default_term_set_mode(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5266
  {
    thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    e298:	8c 2f       	mov	r24, r28
    e29a:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
    e29e:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
    thermostat_ring_set_mode(default_ring, args1);
    e2a2:	6d 2f       	mov	r22, r29
    e2a4:	8c 2f       	mov	r24, r28
    e2a6:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5268
    change_term_mode = 1;
    e2aa:	81 e0       	ldi	r24, 0x01	; 1
    e2ac:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5270
  }
}
    e2b0:	df 91       	pop	r29
    e2b2:	cf 91       	pop	r28
    e2b4:	08 95       	ret

0000e2b6 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)>:
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5241
   return
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e2b6:	1f 93       	push	r17
    e2b8:	cf 93       	push	r28
    e2ba:	df 93       	push	r29
    e2bc:	ec 01       	movw	r28, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
    e2be:	10 91 86 0b 	lds	r17, 0x0B86	; 0x800b86 <default_ring>
    e2c2:	81 2f       	mov	r24, r17
    e2c4:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e2c8:	8f 3f       	cpi	r24, 0xFF	; 255
    e2ca:	71 f0       	breq	.+28     	; 0xe2e8 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    e2cc:	81 2f       	mov	r24, r17
    e2ce:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
    e2d2:	98 2f       	mov	r25, r24
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5247
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
    e2d4:	8c 17       	cp	r24, r28
    e2d6:	1d 06       	cpc	r1, r29
    e2d8:	29 f0       	breq	.+10     	; 0xe2e4 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x2e>
    e2da:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <thermostat_mode_default_ring_last_state>
    e2de:	8c 17       	cp	r24, r28
    e2e0:	1d 06       	cpc	r1, r29
    e2e2:	39 f4       	brne	.+14     	; 0xe2f2 <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x3c>
thermostat_ring_get_mode_1():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:185
    e2e4:	81 e0       	ldi	r24, 0x01	; 1
    e2e6:	9c 13       	cpse	r25, r28
_Z40button_status_default_ring_term_has_modejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5242
     - uint8_t 1... activni, 0... neaktivni
*/

uint8_t button_status_default_ring_term_has_mode(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    e2e8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5253
      ret = 2;
    //printf("last:%d, mode%d, idx%d\n", thermostat_mode_default_ring_last_state, thermostat_ring_get_mode(default_ring), args1);
  }
  //printf("ret %d\n\n", ret);
  return ret;
}
    e2ea:	df 91       	pop	r29
    e2ec:	cf 91       	pop	r28
    e2ee:	1f 91       	pop	r17
    e2f0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5248
  if (thermostat_ring_get_active(default_ring) != RING_FREE)
  {
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
    if (thermostat_ring_get_mode(default_ring) != args1 && thermostat_mode_default_ring_last_state != args1)
      ret = 2;
    e2f2:	82 e0       	ldi	r24, 0x02	; 2
    e2f4:	fa cf       	rjmp	.-12     	; 0xe2ea <button_status_default_ring_term_has_mode(unsigned int, unsigned int, unsigned char)+0x34>

0000e2f6 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5050
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e2f6:	cf 93       	push	r28
    e2f8:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5051
  if (thermostat_ring_get_active(args3) != RING_FREE)
    e2fa:	84 2f       	mov	r24, r20
    e2fc:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e300:	8f 3f       	cpi	r24, 0xFF	; 255
    e302:	89 f0       	breq	.+34     	; 0xe326 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x30>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5053
  {
    last_default_ring = default_ring;
    e304:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    e308:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5054
    default_ring = args3;
    e30c:	c0 93 86 0b 	sts	0x0B86, r28	; 0x800b86 <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1195
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    e310:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <MenuHistoryIndex>
    e314:	f0 e0       	ldi	r31, 0x00	; 0
    e316:	eb 5f       	subi	r30, 0xFB	; 251
    e318:	f2 4f       	sbci	r31, 0xF2	; 242
    e31a:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5064
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
  display_redraw_default_ring = 1;
    e31c:	81 e0       	ldi	r24, 0x01	; 1
    e31e:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <display_redraw_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5065
}
    e322:	cf 91       	pop	r28
    e324:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e326:	70 e0       	ldi	r23, 0x00	; 0
    e328:	60 e0       	ldi	r22, 0x00	; 0
    e32a:	84 e6       	ldi	r24, 0x64	; 100
    e32c:	90 e0       	ldi	r25, 0x00	; 0
    e32e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5060
    dialog_yes_function = &term_ring_do_activate;
    e332:	8e e5       	ldi	r24, 0x5E	; 94
    e334:	9f e6       	ldi	r25, 0x6F	; 111
    e336:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    e33a:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5061
    dialog_yes_args1 = args3;
    e33e:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5062
    strcpy_P(dialog_text, text_term_do_activate);
    e342:	61 ee       	ldi	r22, 0xE1	; 225
    e344:	73 e8       	ldi	r23, 0x83	; 131
    e346:	85 e1       	ldi	r24, 0x15	; 21
    e348:	9a e0       	ldi	r25, 0x0A	; 10
    e34a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    e34e:	e6 cf       	rjmp	.-52     	; 0xe31c <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x26>

0000e350 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5028
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    e350:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    e354:	84 13       	cpse	r24, r20
    e356:	08 c0       	rjmp	.+16     	; 0xe368 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x18>
    e358:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e35c:	91 e0       	ldi	r25, 0x01	; 1
    e35e:	81 30       	cpi	r24, 0x01	; 1
    e360:	09 f0       	breq	.+2      	; 0xe364 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5027
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    e362:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    ret = 2;
  return ret;
}
    e364:	89 2f       	mov	r24, r25
    e366:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if ((args3 == default_ring) && (thermostat_ring_get_active(default_ring) == 1))
    ret = 1;
  if ((args3 != default_ring) && (args3 != last_default_ring))
    e368:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <last_default_ring>
    e36c:	84 17       	cp	r24, r20
    e36e:	c9 f3       	breq	.-14     	; 0xe362 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5031
    ret = 2;
    e370:	92 e0       	ldi	r25, 0x02	; 2
    e372:	f8 cf       	rjmp	.-16     	; 0xe364 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)+0x14>

0000e374 <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    e374:	ef 92       	push	r14
    e376:	ff 92       	push	r15
    e378:	0f 93       	push	r16
    e37a:	1f 93       	push	r17
    e37c:	cf 93       	push	r28
    e37e:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    e380:	91 e2       	ldi	r25, 0x21	; 33
    e382:	89 9f       	mul	r24, r25
    e384:	e0 01       	movw	r28, r0
    e386:	11 24       	eor	r1, r1
    e388:	8e 01       	movw	r16, r28
    e38a:	04 5b       	subi	r16, 0xB4	; 180
    e38c:	1e 4f       	sbci	r17, 0xFE	; 254
    e38e:	7b 01       	movw	r14, r22
    e390:	cb 5a       	subi	r28, 0xAB	; 171
    e392:	de 4f       	sbci	r29, 0xFE	; 254
    e394:	c8 01       	movw	r24, r16
    e396:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:105
    name[i] = t;
    e39a:	f7 01       	movw	r30, r14
    e39c:	81 93       	st	Z+, r24
    e39e:	7f 01       	movw	r14, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    e3a0:	88 23       	and	r24, r24
    e3a2:	29 f0       	breq	.+10     	; 0xe3ae <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    e3a4:	0f 5f       	subi	r16, 0xFF	; 255
    e3a6:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    e3a8:	0c 17       	cp	r16, r28
    e3aa:	1d 07       	cpc	r17, r29
    e3ac:	99 f7       	brne	.-26     	; 0xe394 <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    e3ae:	df 91       	pop	r29
    e3b0:	cf 91       	pop	r28
    e3b2:	1f 91       	pop	r17
    e3b4:	0f 91       	pop	r16
    e3b6:	ff 90       	pop	r15
    e3b8:	ef 90       	pop	r14
    e3ba:	08 95       	ret

0000e3bc <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_activate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5208
  thermostat_ring_get_name(args2, str2);
  strcat(dialog_text, str2);
}

void thermostat_button_activate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e3bc:	1f 93       	push	r17
    e3be:	cf 93       	push	r28
    e3c0:	df 93       	push	r29
    e3c2:	00 d0       	rcall	.+0      	; 0xe3c4 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    e3c4:	00 d0       	rcall	.+0      	; 0xe3c6 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    e3c6:	00 d0       	rcall	.+0      	; 0xe3c8 <thermostat_button_activate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e3c8:	1f 92       	push	r1
    e3ca:	cd b7       	in	r28, 0x3d	; 61
    e3cc:	de b7       	in	r29, 0x3e	; 62
    e3ce:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5211
  //printf("aktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e3d0:	70 e0       	ldi	r23, 0x00	; 0
    e3d2:	60 e0       	ldi	r22, 0x00	; 0
    e3d4:	84 e6       	ldi	r24, 0x64	; 100
    e3d6:	90 e0       	ldi	r25, 0x00	; 0
    e3d8:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5212
  dialog_yes_function = &helper_thermostat_button_activate_ring_onclick;
    e3dc:	85 ee       	ldi	r24, 0xE5	; 229
    e3de:	9c e6       	ldi	r25, 0x6C	; 108
    e3e0:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    e3e4:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5213
  dialog_yes_args1 = args2;
    e3e8:	10 93 96 09 	sts	0x0996, r17	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5214
  strcpy_P(dialog_text, text_term_do_activate1);
    e3ec:	6c e3       	ldi	r22, 0x3C	; 60
    e3ee:	74 e8       	ldi	r23, 0x84	; 132
    e3f0:	85 e1       	ldi	r24, 0x15	; 21
    e3f2:	9a e0       	ldi	r25, 0x0A	; 10
    e3f4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5215
  strcat(dialog_text, ": ");
    e3f8:	63 e4       	ldi	r22, 0x43	; 67
    e3fa:	77 e0       	ldi	r23, 0x07	; 7
    e3fc:	85 e1       	ldi	r24, 0x15	; 21
    e3fe:	9a e0       	ldi	r25, 0x0A	; 10
    e400:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5216
  thermostat_ring_get_name(args2, str2);
    e404:	be 01       	movw	r22, r28
    e406:	6f 5f       	subi	r22, 0xFF	; 255
    e408:	7f 4f       	sbci	r23, 0xFF	; 255
    e40a:	81 2f       	mov	r24, r17
    e40c:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5217
  strcat(dialog_text, str2);
    e410:	be 01       	movw	r22, r28
    e412:	6f 5f       	subi	r22, 0xFF	; 255
    e414:	7f 4f       	sbci	r23, 0xFF	; 255
    e416:	85 e1       	ldi	r24, 0x15	; 21
    e418:	9a e0       	ldi	r25, 0x0A	; 10
    e41a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5218
}
    e41e:	2a 96       	adiw	r28, 0x0a	; 10
    e420:	0f b6       	in	r0, 0x3f	; 63
    e422:	f8 94       	cli
    e424:	de bf       	out	0x3e, r29	; 62
    e426:	0f be       	out	0x3f, r0	; 63
    e428:	cd bf       	out	0x3d, r28	; 61
    e42a:	df 91       	pop	r29
    e42c:	cf 91       	pop	r28
    e42e:	1f 91       	pop	r17
    e430:	08 95       	ret

0000e432 <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)>:
_Z41thermostat_button_deactivate_ring_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5195
  thermostat_ring_set_active(args1, 1);
}

/// funkce pro deaktivaci termostatu
void thermostat_button_deactivate_ring_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e432:	1f 93       	push	r17
    e434:	cf 93       	push	r28
    e436:	df 93       	push	r29
    e438:	00 d0       	rcall	.+0      	; 0xe43a <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    e43a:	00 d0       	rcall	.+0      	; 0xe43c <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    e43c:	00 d0       	rcall	.+0      	; 0xe43e <thermostat_button_deactivate_ring_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e43e:	1f 92       	push	r1
    e440:	cd b7       	in	r28, 0x3d	; 61
    e442:	de b7       	in	r29, 0x3e	; 62
    e444:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5198
  //printf("deaktivece %d-%d-%d\n", args1, args2, args3);
  char str2[10];
  MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0, 0);
    e446:	70 e0       	ldi	r23, 0x00	; 0
    e448:	60 e0       	ldi	r22, 0x00	; 0
    e44a:	84 e6       	ldi	r24, 0x64	; 100
    e44c:	90 e0       	ldi	r25, 0x00	; 0
    e44e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5199
  dialog_yes_function = &helper_thermostat_button_deactivate_ring_onclick;
    e452:	87 ec       	ldi	r24, 0xC7	; 199
    e454:	9c e6       	ldi	r25, 0x6C	; 108
    e456:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <dialog_yes_function+0x1>
    e45a:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
  dialog_yes_args1 = args2;
    e45e:	10 93 96 09 	sts	0x0996, r17	; 0x800996 <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5201
  strcpy_P(dialog_text, text_term_do_deactivate);
    e462:	6b e2       	ldi	r22, 0x2B	; 43
    e464:	74 e8       	ldi	r23, 0x84	; 132
    e466:	85 e1       	ldi	r24, 0x15	; 21
    e468:	9a e0       	ldi	r25, 0x0A	; 10
    e46a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5202
  strcat(dialog_text, ": ");
    e46e:	63 e4       	ldi	r22, 0x43	; 67
    e470:	77 e0       	ldi	r23, 0x07	; 7
    e472:	85 e1       	ldi	r24, 0x15	; 21
    e474:	9a e0       	ldi	r25, 0x0A	; 10
    e476:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5203
  thermostat_ring_get_name(args2, str2);
    e47a:	be 01       	movw	r22, r28
    e47c:	6f 5f       	subi	r22, 0xFF	; 255
    e47e:	7f 4f       	sbci	r23, 0xFF	; 255
    e480:	81 2f       	mov	r24, r17
    e482:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5204
  strcat(dialog_text, str2);
    e486:	be 01       	movw	r22, r28
    e488:	6f 5f       	subi	r22, 0xFF	; 255
    e48a:	7f 4f       	sbci	r23, 0xFF	; 255
    e48c:	85 e1       	ldi	r24, 0x15	; 21
    e48e:	9a e0       	ldi	r25, 0x0A	; 10
    e490:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
}
    e494:	2a 96       	adiw	r28, 0x0a	; 10
    e496:	0f b6       	in	r0, 0x3f	; 63
    e498:	f8 94       	cli
    e49a:	de bf       	out	0x3e, r29	; 62
    e49c:	0f be       	out	0x3f, r0	; 63
    e49e:	cd bf       	out	0x3d, r28	; 61
    e4a0:	df 91       	pop	r29
    e4a2:	cf 91       	pop	r28
    e4a4:	1f 91       	pop	r17
    e4a6:	08 95       	ret

0000e4a8 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)>:
_Z39thermostat_button_set_ring_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5169
   args3 - nepotrebuji
   promene nemaji zadny vyznam
*/

void thermostat_button_set_ring_name_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e4a8:	1f 93       	push	r17
    e4aa:	cf 93       	push	r28
    e4ac:	df 93       	push	r29
    e4ae:	00 d0       	rcall	.+0      	; 0xe4b0 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0x8>
    e4b0:	00 d0       	rcall	.+0      	; 0xe4b2 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xa>
    e4b2:	00 d0       	rcall	.+0      	; 0xe4b4 <thermostat_button_set_ring_name_onclick(unsigned int, unsigned int, unsigned char)+0xc>
    e4b4:	1f 92       	push	r1
    e4b6:	cd b7       	in	r28, 0x3d	; 61
    e4b8:	de b7       	in	r29, 0x3e	; 62
    e4ba:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  char name[10];
  //printf("%d -- %d -- %d\n", args1, args2, args3);
  thermostat_ring_get_name(args2, name);
    e4bc:	be 01       	movw	r22, r28
    e4be:	6f 5f       	subi	r22, 0xFF	; 255
    e4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    e4c2:	81 2f       	mov	r24, r17
    e4c4:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5173
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    e4c8:	70 e0       	ldi	r23, 0x00	; 0
    e4ca:	60 e0       	ldi	r22, 0x00	; 0
    e4cc:	87 e6       	ldi	r24, 0x67	; 103
    e4ce:	90 e0       	ldi	r25, 0x00	; 0
    e4d0:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    e4d4:	be 01       	movw	r22, r28
    e4d6:	6f 5f       	subi	r22, 0xFF	; 255
    e4d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e4da:	85 ef       	ldi	r24, 0xF5	; 245
    e4dc:	99 e0       	ldi	r25, 0x09	; 9
    e4de:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    e4e2:	89 e0       	ldi	r24, 0x09	; 9
    e4e4:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    e4e8:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    e4ec:	89 ec       	ldi	r24, 0xC9	; 201
    e4ee:	9c e6       	ldi	r25, 0x6C	; 108
    e4f0:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    e4f4:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    e4f8:	89 ed       	ldi	r24, 0xD9	; 217
    e4fa:	9f e4       	ldi	r25, 0x4F	; 79
    e4fc:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    e500:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z39thermostat_button_set_ring_name_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5175
  char name[10];
  //printf("%d -- %d -- %d\n", args1, args2, args3);
  thermostat_ring_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, 9, args2, &helper_thermostat_button_set_ring_name, &valid_true);
}
    e504:	2a 96       	adiw	r28, 0x0a	; 10
    e506:	0f b6       	in	r0, 0x3f	; 63
    e508:	f8 94       	cli
    e50a:	de bf       	out	0x3e, r29	; 62
    e50c:	0f be       	out	0x3f, r0	; 63
    e50e:	cd bf       	out	0x3d, r28	; 61
    e510:	df 91       	pop	r29
    e512:	cf 91       	pop	r28
    e514:	1f 91       	pop	r17
    e516:	08 95       	ret

0000e518 <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z48dyn_button_show_all_thermostat_get_status_stringhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5121


/////////////////////
/// Funkce pro vyplneni popisku vyberoveho menu ringu termostatu
void dyn_button_show_all_thermostat_get_status_string(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e518:	cf 92       	push	r12
    e51a:	df 92       	push	r13
    e51c:	ef 92       	push	r14
    e51e:	ff 92       	push	r15
    e520:	0f 93       	push	r16
    e522:	1f 93       	push	r17
    e524:	cf 93       	push	r28
    e526:	df 93       	push	r29
    e528:	00 d0       	rcall	.+0      	; 0xe52a <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    e52a:	00 d0       	rcall	.+0      	; 0xe52c <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x14>
    e52c:	00 d0       	rcall	.+0      	; 0xe52e <dyn_button_show_all_thermostat_get_status_string(unsigned char, unsigned char, unsigned char, char*, char*)+0x16>
    e52e:	1f 92       	push	r1
    e530:	cd b7       	in	r28, 0x3d	; 61
    e532:	de b7       	in	r29, 0x3e	; 62
    e534:	d2 2e       	mov	r13, r18
    e536:	c3 2e       	mov	r12, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5123
  char name[10];
  thermostat_ring_get_name(args1, name);
    e538:	9e 01       	movw	r18, r28
    e53a:	2f 5f       	subi	r18, 0xFF	; 255
    e53c:	3f 4f       	sbci	r19, 0xFF	; 255
    e53e:	79 01       	movw	r14, r18
    e540:	b9 01       	movw	r22, r18
    e542:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5124
  sprintf(line1, "Regulator: %s", name);
    e546:	ff 92       	push	r15
    e548:	ef 92       	push	r14
    e54a:	83 ea       	ldi	r24, 0xA3	; 163
    e54c:	93 e0       	ldi	r25, 0x03	; 3
    e54e:	9f 93       	push	r25
    e550:	8f 93       	push	r24
    e552:	cf 92       	push	r12
    e554:	df 92       	push	r13
    e556:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5125
  strcpy_P(line2, text_dashdash);
    e55a:	67 e2       	ldi	r22, 0x27	; 39
    e55c:	74 e8       	ldi	r23, 0x84	; 132
    e55e:	c8 01       	movw	r24, r16
    e560:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    e564:	0f 90       	pop	r0
    e566:	0f 90       	pop	r0
    e568:	0f 90       	pop	r0
    e56a:	0f 90       	pop	r0
    e56c:	0f 90       	pop	r0
    e56e:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5126
}
    e570:	2a 96       	adiw	r28, 0x0a	; 10
    e572:	0f b6       	in	r0, 0x3f	; 63
    e574:	f8 94       	cli
    e576:	de bf       	out	0x3e, r29	; 62
    e578:	0f be       	out	0x3f, r0	; 63
    e57a:	cd bf       	out	0x3d, r28	; 61
    e57c:	df 91       	pop	r29
    e57e:	cf 91       	pop	r28
    e580:	1f 91       	pop	r17
    e582:	0f 91       	pop	r16
    e584:	ff 90       	pop	r15
    e586:	ef 90       	pop	r14
    e588:	df 90       	pop	r13
    e58a:	cf 90       	pop	r12
    e58c:	08 95       	ret

0000e58e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5095
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e58e:	ef 92       	push	r14
    e590:	ff 92       	push	r15
    e592:	0f 93       	push	r16
    e594:	1f 93       	push	r17
    e596:	cf 93       	push	r28
    e598:	df 93       	push	r29
    e59a:	00 d0       	rcall	.+0      	; 0xe59c <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0xe>
    e59c:	00 d0       	rcall	.+0      	; 0xe59e <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x10>
    e59e:	00 d0       	rcall	.+0      	; 0xe5a0 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x12>
    e5a0:	1f 92       	push	r1
    e5a2:	cd b7       	in	r28, 0x3d	; 61
    e5a4:	de b7       	in	r29, 0x3e	; 62
    e5a6:	c9 01       	movw	r24, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5097
  char name[10];
  strcpy_P(line1, text_change_default_ring);
    e5a8:	6d e0       	ldi	r22, 0x0D	; 13
    e5aa:	74 e8       	ldi	r23, 0x84	; 132
    e5ac:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5098
  if (default_ring != NO_DEFAULT_RING)
    e5b0:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
    e5b4:	8f 3f       	cpi	r24, 0xFF	; 255
    e5b6:	21 f1       	breq	.+72     	; 0xe600 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x72>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
  {
    thermostat_ring_get_name(default_ring, name);
    e5b8:	9e 01       	movw	r18, r28
    e5ba:	2f 5f       	subi	r18, 0xFF	; 255
    e5bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e5be:	79 01       	movw	r14, r18
    e5c0:	b9 01       	movw	r22, r18
    e5c2:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5101
    sprintf(line2, "Regulator: %s", name);
    e5c6:	ff 92       	push	r15
    e5c8:	ef 92       	push	r14
    e5ca:	83 ea       	ldi	r24, 0xA3	; 163
    e5cc:	93 e0       	ldi	r25, 0x03	; 3
    e5ce:	9f 93       	push	r25
    e5d0:	8f 93       	push	r24
    e5d2:	1f 93       	push	r17
    e5d4:	0f 93       	push	r16
    e5d6:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
    e5da:	0f 90       	pop	r0
    e5dc:	0f 90       	pop	r0
    e5de:	0f 90       	pop	r0
    e5e0:	0f 90       	pop	r0
    e5e2:	0f 90       	pop	r0
    e5e4:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5107
  }
  else
  {
    strcpy_P(line2, text_dashdash);
  }
}
    e5e6:	2a 96       	adiw	r28, 0x0a	; 10
    e5e8:	0f b6       	in	r0, 0x3f	; 63
    e5ea:	f8 94       	cli
    e5ec:	de bf       	out	0x3e, r29	; 62
    e5ee:	0f be       	out	0x3f, r0	; 63
    e5f0:	cd bf       	out	0x3d, r28	; 61
    e5f2:	df 91       	pop	r29
    e5f4:	cf 91       	pop	r28
    e5f6:	1f 91       	pop	r17
    e5f8:	0f 91       	pop	r16
    e5fa:	ff 90       	pop	r15
    e5fc:	ef 90       	pop	r14
    e5fe:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5105
    thermostat_ring_get_name(default_ring, name);
    sprintf(line2, "Regulator: %s", name);
  }
  else
  {
    strcpy_P(line2, text_dashdash);
    e600:	67 e2       	ldi	r22, 0x27	; 39
    e602:	74 e8       	ldi	r23, 0x84	; 132
    e604:	c8 01       	movw	r24, r16
    e606:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    e60a:	ed cf       	rjmp	.-38     	; 0xe5e6 <button_get_default_ring_labels(unsigned char, unsigned char, unsigned char, char*, char*)+0x58>

0000e60c <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5076
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    e60c:	af 92       	push	r10
    e60e:	bf 92       	push	r11
    e610:	cf 92       	push	r12
    e612:	df 92       	push	r13
    e614:	ff 92       	push	r15
    e616:	0f 93       	push	r16
    e618:	1f 93       	push	r17
    e61a:	cf 93       	push	r28
    e61c:	df 93       	push	r29
    e61e:	cd b7       	in	r28, 0x3d	; 61
    e620:	de b7       	in	r29, 0x3e	; 62
    e622:	66 97       	sbiw	r28, 0x16	; 22
    e624:	0f b6       	in	r0, 0x3f	; 63
    e626:	f8 94       	cli
    e628:	de bf       	out	0x3e, r29	; 62
    e62a:	0f be       	out	0x3f, r0	; 63
    e62c:	cd bf       	out	0x3d, r28	; 61
    e62e:	f8 2e       	mov	r15, r24
    e630:	59 01       	movw	r10, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    e632:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e636:	9e 01       	movw	r18, r28
    e638:	2f 5f       	subi	r18, 0xFF	; 255
    e63a:	3f 4f       	sbci	r19, 0xFF	; 255
    e63c:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5080
    strcpy_P(active, text_term_active);
    e63e:	65 e0       	ldi	r22, 0x05	; 5
    e640:	74 e8       	ldi	r23, 0x84	; 132
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != RING_FREE)
    e642:	8f 3f       	cpi	r24, 0xFF	; 255
    e644:	11 f4       	brne	.+4      	; 0xe64a <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, unsigned char, char*, char*)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5082
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    e646:	6b ef       	ldi	r22, 0xFB	; 251
    e648:	73 e8       	ldi	r23, 0x83	; 131
    e64a:	c6 01       	movw	r24, r12
    e64c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5083
  thermostat_ring_get_name(args1, name);
    e650:	be 01       	movw	r22, r28
    e652:	63 5f       	subi	r22, 0xF3	; 243
    e654:	7f 4f       	sbci	r23, 0xFF	; 255
    e656:	8f 2d       	mov	r24, r15
    e658:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5084
  sprintf(line2, "Reg. %d %s", args1, active);
    e65c:	df 92       	push	r13
    e65e:	cf 92       	push	r12
    e660:	1f 92       	push	r1
    e662:	ff 92       	push	r15
    e664:	81 eb       	ldi	r24, 0xB1	; 177
    e666:	93 e0       	ldi	r25, 0x03	; 3
    e668:	9f 93       	push	r25
    e66a:	8f 93       	push	r24
    e66c:	1f 93       	push	r17
    e66e:	0f 93       	push	r16
    e670:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5085
  strcpy(line1, name);
    e674:	be 01       	movw	r22, r28
    e676:	63 5f       	subi	r22, 0xF3	; 243
    e678:	7f 4f       	sbci	r23, 0xFF	; 255
    e67a:	c5 01       	movw	r24, r10
    e67c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
    e680:	0f b6       	in	r0, 0x3f	; 63
    e682:	f8 94       	cli
    e684:	de bf       	out	0x3e, r29	; 62
    e686:	0f be       	out	0x3f, r0	; 63
    e688:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5086
}
    e68a:	66 96       	adiw	r28, 0x16	; 22
    e68c:	0f b6       	in	r0, 0x3f	; 63
    e68e:	f8 94       	cli
    e690:	de bf       	out	0x3e, r29	; 62
    e692:	0f be       	out	0x3f, r0	; 63
    e694:	cd bf       	out	0x3d, r28	; 61
    e696:	df 91       	pop	r29
    e698:	cf 91       	pop	r28
    e69a:	1f 91       	pop	r17
    e69c:	0f 91       	pop	r16
    e69e:	ff 90       	pop	r15
    e6a0:	df 90       	pop	r13
    e6a2:	cf 90       	pop	r12
    e6a4:	bf 90       	pop	r11
    e6a6:	af 90       	pop	r10
    e6a8:	08 95       	ret

0000e6aa <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_dialog_default_ringjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4091
  my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    e6aa:	af 92       	push	r10
    e6ac:	bf 92       	push	r11
    e6ae:	cf 92       	push	r12
    e6b0:	df 92       	push	r13
    e6b2:	ef 92       	push	r14
    e6b4:	ff 92       	push	r15
    e6b6:	0f 93       	push	r16
    e6b8:	1f 93       	push	r17
    e6ba:	cf 93       	push	r28
    e6bc:	df 93       	push	r29
    e6be:	cd b7       	in	r28, 0x3d	; 61
    e6c0:	de b7       	in	r29, 0x3e	; 62
    e6c2:	a8 97       	sbiw	r28, 0x28	; 40
    e6c4:	0f b6       	in	r0, 0x3f	; 63
    e6c6:	f8 94       	cli
    e6c8:	de bf       	out	0x3e, r29	; 62
    e6ca:	0f be       	out	0x3f, r0	; 63
    e6cc:	cd bf       	out	0x3d, r28	; 61
    e6ce:	6c 01       	movw	r12, r24
    e6d0:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4094
  char name[10];
  char default_text[30];
  strcpy_P(default_text, new_text_regulator);
    e6d2:	68 ef       	ldi	r22, 0xF8	; 248
    e6d4:	72 e8       	ldi	r23, 0x82	; 130
    e6d6:	ce 01       	movw	r24, r28
    e6d8:	01 96       	adiw	r24, 0x01	; 1
    e6da:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4095
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e6de:	8e 2d       	mov	r24, r14
    e6e0:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e6e4:	8f 3f       	cpi	r24, 0xFF	; 255
    e6e6:	51 f1       	breq	.+84     	; 0xe73c <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4097
  {
    thermostat_ring_get_name(args2, name);
    e6e8:	be 01       	movw	r22, r28
    e6ea:	61 5e       	subi	r22, 0xE1	; 225
    e6ec:	7f 4f       	sbci	r23, 0xFF	; 255
    e6ee:	8e 2d       	mov	r24, r14
    e6f0:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4103
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    strcat(default_text, name);
    e6f4:	be 01       	movw	r22, r28
    e6f6:	61 5e       	subi	r22, 0xE1	; 225
    e6f8:	7f 4f       	sbci	r23, 0xFF	; 255
    e6fa:	ce 01       	movw	r24, r28
    e6fc:	01 96       	adiw	r24, 0x01	; 1
    e6fe:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4105
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    e702:	ee 24       	eor	r14, r14
    e704:	ea 94       	dec	r14
    e706:	fe 2c       	mov	r15, r14
    e708:	10 e0       	ldi	r17, 0x00	; 0
    e70a:	00 e0       	ldi	r16, 0x00	; 0
    e70c:	22 e0       	ldi	r18, 0x02	; 2
    e70e:	a5 01       	movw	r20, r10
    e710:	b6 01       	movw	r22, r12
    e712:	ce 01       	movw	r24, r28
    e714:	01 96       	adiw	r24, 0x01	; 1
    e716:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4106
}
    e71a:	a8 96       	adiw	r28, 0x28	; 40
    e71c:	0f b6       	in	r0, 0x3f	; 63
    e71e:	f8 94       	cli
    e720:	de bf       	out	0x3e, r29	; 62
    e722:	0f be       	out	0x3f, r0	; 63
    e724:	cd bf       	out	0x3d, r28	; 61
    e726:	df 91       	pop	r29
    e728:	cf 91       	pop	r28
    e72a:	1f 91       	pop	r17
    e72c:	0f 91       	pop	r16
    e72e:	ff 90       	pop	r15
    e730:	ef 90       	pop	r14
    e732:	df 90       	pop	r13
    e734:	cf 90       	pop	r12
    e736:	bf 90       	pop	r11
    e738:	af 90       	pop	r10
    e73a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4102
    thermostat_ring_get_name(args2, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_term_deactive);
    e73c:	6b ef       	ldi	r22, 0xFB	; 251
    e73e:	73 e8       	ldi	r23, 0x83	; 131
    e740:	ce 01       	movw	r24, r28
    e742:	4f 96       	adiw	r24, 0x1f	; 31
    e744:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    e748:	d5 cf       	rjmp	.-86     	; 0xe6f4 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x4a>

0000e74a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5436
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e74a:	0f 93       	push	r16
    e74c:	1f 93       	push	r17
    e74e:	cf 93       	push	r28
    e750:	8c 01       	movw	r16, r24
    e752:	c6 2f       	mov	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5439
  uint8_t ret = 2;
  uint8_t b;
  if (thermostat_ring_get_active(args2) != RING_FREE)
    e754:	86 2f       	mov	r24, r22
    e756:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
    e75a:	8f 3f       	cpi	r24, 0xFF	; 255
    e75c:	81 f0       	breq	.+32     	; 0xe77e <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x34>
thermostat_ring_get_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    e75e:	21 e2       	ldi	r18, 0x21	; 33
    e760:	c2 9f       	mul	r28, r18
    e762:	c0 01       	movw	r24, r0
    e764:	11 24       	eor	r1, r1
    e766:	88 5a       	subi	r24, 0xA8	; 168
    e768:	9e 4f       	sbci	r25, 0xFE	; 254
    e76a:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5443
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    e76e:	80 fd       	sbrc	r24, 0
    e770:	0b c0       	rjmp	.+22     	; 0xe788 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    e772:	81 e0       	ldi	r24, 0x01	; 1
    e774:	03 30       	cpi	r16, 0x03	; 3
    e776:	11 05       	cpc	r17, r1
    e778:	19 f0       	breq	.+6      	; 0xe780 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5445
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    e77a:	80 e0       	ldi	r24, 0x00	; 0
    e77c:	01 c0       	rjmp	.+2      	; 0xe780 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5437
   args3 ... index prvku v menu
*/

uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 2;
    e77e:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5449
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
      ret = 1;
  }
  return ret;
}
    e780:	cf 91       	pop	r28
    e782:	1f 91       	pop	r17
    e784:	0f 91       	pop	r16
    e786:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5445
  {
    ret = 0;
    b = thermostat_ring_get_status_bites(args2, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    e788:	81 e0       	ldi	r24, 0x01	; 1
    e78a:	05 30       	cpi	r16, 0x05	; 5
    e78c:	11 05       	cpc	r17, r1
    e78e:	a9 f7       	brne	.-22     	; 0xe77a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x30>
    e790:	f7 cf       	rjmp	.-18     	; 0xe780 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>

0000e792 <button_select_term_ring_input_in_dialog_status_fnt(unsigned int, unsigned int, unsigned char)>:
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4915
/*
   funkce pro zobrazeni prizareneho vstupniho cidla k ringu
   args3 ... id polozky menu
*/
uint8_t button_select_term_ring_input_in_dialog_status_fnt(uint16_t args1, uint16_t args2, uint8_t args3)
{
    e792:	cf 93       	push	r28
    e794:	c4 2f       	mov	r28, r20
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
    e796:	21 e2       	ldi	r18, 0x21	; 33
    e798:	62 9f       	mul	r22, r18
    e79a:	c0 01       	movw	r24, r0
    e79c:	11 24       	eor	r1, r1
    e79e:	84 5a       	subi	r24, 0xA4	; 164
    e7a0:	9e 4f       	sbci	r25, 0xFE	; 254
    e7a2:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z50button_select_term_ring_input_in_dialog_status_fntjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4917
  uint8_t ret = 0;
  if (thermostat_ring_get_asociate_tds(args2) == args3)
    e7a6:	91 e0       	ldi	r25, 0x01	; 1
    e7a8:	c8 13       	cpse	r28, r24
    e7aa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4920
    ret = 1;
  return ret;
}
    e7ac:	89 2f       	mov	r24, r25
    e7ae:	cf 91       	pop	r28
    e7b0:	08 95       	ret

0000e7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    e7b2:	af 92       	push	r10
    e7b4:	bf 92       	push	r11
    e7b6:	cf 92       	push	r12
    e7b8:	df 92       	push	r13
    e7ba:	ef 92       	push	r14
    e7bc:	ff 92       	push	r15
    e7be:	0f 93       	push	r16
    e7c0:	1f 93       	push	r17
    e7c2:	cf 93       	push	r28
    e7c4:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    e7c6:	86 30       	cpi	r24, 0x06	; 6
    e7c8:	08 f0       	brcs	.+2      	; 0xe7cc <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    e7ca:	56 c0       	rjmp	.+172    	; 0xe878 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    e7cc:	8b 01       	movw	r16, r22
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    e7ce:	96 e1       	ldi	r25, 0x16	; 22
    e7d0:	89 9f       	mul	r24, r25
    e7d2:	e0 01       	movw	r28, r0
    e7d4:	11 24       	eor	r1, r1
    e7d6:	ce 01       	movw	r24, r28
    e7d8:	88 53       	subi	r24, 0x38	; 56
    e7da:	9f 4f       	sbci	r25, 0xFF	; 255
    e7dc:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e7e0:	f8 01       	movw	r30, r16
    e7e2:	81 93       	st	Z+, r24
    e7e4:	6f 01       	movw	r12, r30
    e7e6:	7e 01       	movw	r14, r28
    e7e8:	f9 ec       	ldi	r31, 0xC9	; 201
    e7ea:	ef 0e       	add	r14, r31
    e7ec:	f1 1c       	adc	r15, r1
    e7ee:	5e 01       	movw	r10, r28
    e7f0:	81 ed       	ldi	r24, 0xD1	; 209
    e7f2:	a8 0e       	add	r10, r24
    e7f4:	b1 1c       	adc	r11, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    e7f6:	c7 01       	movw	r24, r14
    e7f8:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e7fc:	f6 01       	movw	r30, r12
    e7fe:	81 93       	st	Z+, r24
    e800:	6f 01       	movw	r12, r30
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    e802:	c7 01       	movw	r24, r14
    e804:	0b 96       	adiw	r24, 0x0b	; 11
    e806:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e80a:	f6 01       	movw	r30, r12
    e80c:	82 87       	std	Z+10, r24	; 0x0a
    e80e:	ff ef       	ldi	r31, 0xFF	; 255
    e810:	ef 1a       	sub	r14, r31
    e812:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    e814:	ea 14       	cp	r14, r10
    e816:	fb 04       	cpc	r15, r11
    e818:	71 f7       	brne	.-36     	; 0xe7f6 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    e81a:	f8 01       	movw	r30, r16
    e81c:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    e81e:	c7 01       	movw	r24, r14
    e820:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e824:	f8 01       	movw	r30, r16
    e826:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    e828:	ce 01       	movw	r24, r28
    e82a:	8e 52       	subi	r24, 0x2E	; 46
    e82c:	9f 4f       	sbci	r25, 0xFF	; 255
    e82e:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e832:	f8 2e       	mov	r15, r24
    e834:	ce 01       	movw	r24, r28
    e836:	8d 52       	subi	r24, 0x2D	; 45
    e838:	9f 4f       	sbci	r25, 0xFF	; 255
    e83a:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e83e:	2f 2d       	mov	r18, r15
    e840:	30 e0       	ldi	r19, 0x00	; 0
    e842:	32 2f       	mov	r19, r18
    e844:	22 27       	eor	r18, r18
    e846:	82 0f       	add	r24, r18
    e848:	93 2f       	mov	r25, r19
    e84a:	91 1d       	adc	r25, r1
    e84c:	f8 01       	movw	r30, r16
    e84e:	93 87       	std	Z+11, r25	; 0x0b
    e850:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    e852:	ce 01       	movw	r24, r28
    e854:	84 52       	subi	r24, 0x24	; 36
    e856:	9f 4f       	sbci	r25, 0xFF	; 255
    e858:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    e85c:	f8 01       	movw	r30, r16
    e85e:	84 8b       	std	Z+20, r24	; 0x14
    e860:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    e862:	df 91       	pop	r29
    e864:	cf 91       	pop	r28
    e866:	1f 91       	pop	r17
    e868:	0f 91       	pop	r16
    e86a:	ff 90       	pop	r15
    e86c:	ef 90       	pop	r14
    e86e:	df 90       	pop	r13
    e870:	cf 90       	pop	r12
    e872:	bf 90       	pop	r11
    e874:	af 90       	pop	r10
    e876:	08 95       	ret
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    e878:	80 e0       	ldi	r24, 0x00	; 0
    e87a:	f3 cf       	rjmp	.-26     	; 0xe862 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000e87c <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    e87c:	ef 92       	push	r14
    e87e:	ff 92       	push	r15
    e880:	0f 93       	push	r16
    e882:	1f 93       	push	r17
    e884:	cf 93       	push	r28
    e886:	df 93       	push	r29
    e888:	cd b7       	in	r28, 0x3d	; 61
    e88a:	de b7       	in	r29, 0x3e	; 62
    e88c:	6e 97       	sbiw	r28, 0x1e	; 30
    e88e:	0f b6       	in	r0, 0x3f	; 63
    e890:	f8 94       	cli
    e892:	de bf       	out	0x3e, r29	; 62
    e894:	0f be       	out	0x3f, r0	; 63
    e896:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    e898:	1f 8a       	std	Y+23, r1	; 0x17
    e89a:	18 8e       	std	Y+24, r1	; 0x18
    e89c:	19 8e       	std	Y+25, r1	; 0x19
    e89e:	1a 8e       	std	Y+26, r1	; 0x1a
    e8a0:	1b 8e       	std	Y+27, r1	; 0x1b
    e8a2:	1c 8e       	std	Y+28, r1	; 0x1c
    e8a4:	1d 8e       	std	Y+29, r1	; 0x1d
    e8a6:	1e 8e       	std	Y+30, r1	; 0x1e
    e8a8:	0e eb       	ldi	r16, 0xBE	; 190
    e8aa:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    e8ac:	ee 24       	eor	r14, r14
    e8ae:	ea 94       	dec	r14
    e8b0:	f8 01       	movw	r30, r16
    e8b2:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    e8b4:	b8 01       	movw	r22, r16
    e8b6:	ce 01       	movw	r24, r28
    e8b8:	47 96       	adiw	r24, 0x17	; 23
    e8ba:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <tds_compare_rom(unsigned char*, unsigned char*)>
    e8be:	81 11       	cpse	r24, r1
    e8c0:	14 c0       	rjmp	.+40     	; 0xe8ea <tds_update_associate()+0x6e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    e8c2:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    e8c4:	be 01       	movw	r22, r28
    e8c6:	6f 5f       	subi	r22, 0xFF	; 255
    e8c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e8ca:	8f 2d       	mov	r24, r15
    e8cc:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    e8d0:	b8 01       	movw	r22, r16
    e8d2:	ce 01       	movw	r24, r28
    e8d4:	02 96       	adiw	r24, 0x02	; 2
    e8d6:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <tds_compare_rom(unsigned char*, unsigned char*)>
    e8da:	88 23       	and	r24, r24
    e8dc:	11 f0       	breq	.+4      	; 0xe8e2 <tds_update_associate()+0x66>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    e8de:	f8 01       	movw	r30, r16
    e8e0:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    e8e2:	f3 94       	inc	r15
    e8e4:	f6 e0       	ldi	r31, 0x06	; 6
    e8e6:	ff 12       	cpse	r15, r31
    e8e8:	ed cf       	rjmp	.-38     	; 0xe8c4 <tds_update_associate()+0x48>
    e8ea:	05 5f       	subi	r16, 0xF5	; 245
    e8ec:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    e8ee:	8d e0       	ldi	r24, 0x0D	; 13
    e8f0:	00 30       	cpi	r16, 0x00	; 0
    e8f2:	18 07       	cpc	r17, r24
    e8f4:	e9 f6       	brne	.-70     	; 0xe8b0 <tds_update_associate()+0x34>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    e8f6:	6e 96       	adiw	r28, 0x1e	; 30
    e8f8:	0f b6       	in	r0, 0x3f	; 63
    e8fa:	f8 94       	cli
    e8fc:	de bf       	out	0x3e, r29	; 62
    e8fe:	0f be       	out	0x3f, r0	; 63
    e900:	cd bf       	out	0x3d, r28	; 61
    e902:	df 91       	pop	r29
    e904:	cf 91       	pop	r28
    e906:	1f 91       	pop	r17
    e908:	0f 91       	pop	r16
    e90a:	ff 90       	pop	r15
    e90c:	ef 90       	pop	r14
    e90e:	08 95       	ret

0000e910 <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    e910:	af 92       	push	r10
    e912:	bf 92       	push	r11
    e914:	cf 92       	push	r12
    e916:	df 92       	push	r13
    e918:	ef 92       	push	r14
    e91a:	ff 92       	push	r15
    e91c:	1f 93       	push	r17
    e91e:	cf 93       	push	r28
    e920:	df 93       	push	r29
    e922:	cd b7       	in	r28, 0x3d	; 61
    e924:	de b7       	in	r29, 0x3e	; 62
    e926:	66 97       	sbiw	r28, 0x16	; 22
    e928:	0f b6       	in	r0, 0x3f	; 63
    e92a:	f8 94       	cli
    e92c:	de bf       	out	0x3e, r29	; 62
    e92e:	0f be       	out	0x3f, r0	; 63
    e930:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    e932:	90 91 00 0d 	lds	r25, 0x0D00	; 0x800d00 <Global_HWwirenum>
    e936:	89 17       	cp	r24, r25
    e938:	a0 f0       	brcs	.+40     	; 0xe962 <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    e93a:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    e93c:	0e 94 3e 74 	call	0xe87c	; 0xe87c <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:226
  return ret;
}
    e940:	81 2f       	mov	r24, r17
    e942:	66 96       	adiw	r28, 0x16	; 22
    e944:	0f b6       	in	r0, 0x3f	; 63
    e946:	f8 94       	cli
    e948:	de bf       	out	0x3e, r29	; 62
    e94a:	0f be       	out	0x3f, r0	; 63
    e94c:	cd bf       	out	0x3d, r28	; 61
    e94e:	df 91       	pop	r29
    e950:	cf 91       	pop	r28
    e952:	1f 91       	pop	r17
    e954:	ff 90       	pop	r15
    e956:	ef 90       	pop	r14
    e958:	df 90       	pop	r13
    e95a:	cf 90       	pop	r12
    e95c:	bf 90       	pop	r11
    e95e:	af 90       	pop	r10
    e960:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    e962:	a8 2e       	mov	r10, r24
    e964:	b1 2c       	mov	r11, r1
    e966:	2b e0       	ldi	r18, 0x0B	; 11
    e968:	82 9f       	mul	r24, r18
    e96a:	c0 01       	movw	r24, r0
    e96c:	11 24       	eor	r1, r1
    e96e:	fc 01       	movw	r30, r24
    e970:	e2 54       	subi	r30, 0x42	; 66
    e972:	f3 4f       	sbci	r31, 0xF3	; 243
    e974:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    e976:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    e978:	be 01       	movw	r22, r28
    e97a:	6f 5f       	subi	r22, 0xFF	; 255
    e97c:	7f 4f       	sbci	r23, 0xFF	; 255
    e97e:	81 2f       	mov	r24, r17
    e980:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    e984:	b7 01       	movw	r22, r14
    e986:	ce 01       	movw	r24, r28
    e988:	02 96       	adiw	r24, 0x02	; 2
    e98a:	0e 94 06 4f 	call	0x9e0c	; 0x9e0c <tds_compare_rom(unsigned char*, unsigned char*)>
    e98e:	81 11       	cpse	r24, r1
    e990:	d4 cf       	rjmp	.-88     	; 0xe93a <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    e992:	1f 5f       	subi	r17, 0xFF	; 255
    e994:	16 30       	cpi	r17, 0x06	; 6
    e996:	81 f7       	brne	.-32     	; 0xe978 <tds_associate(unsigned char)+0x68>
    e998:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    e99a:	2b e0       	ldi	r18, 0x0B	; 11
    e99c:	2a 9d       	mul	r18, r10
    e99e:	c0 01       	movw	r24, r0
    e9a0:	2b 9d       	mul	r18, r11
    e9a2:	90 0d       	add	r25, r0
    e9a4:	11 24       	eor	r1, r1
    e9a6:	fc 01       	movw	r30, r24
    e9a8:	e9 53       	subi	r30, 0x39	; 57
    e9aa:	f3 4f       	sbci	r31, 0xF3	; 243
    e9ac:	6f 01       	movw	r12, r30
    e9ae:	03 c0       	rjmp	.+6      	; 0xe9b6 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    e9b0:	1f 5f       	subi	r17, 0xFF	; 255
    e9b2:	16 30       	cpi	r17, 0x06	; 6
    e9b4:	11 f2       	breq	.-124    	; 0xe93a <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    e9b6:	be 01       	movw	r22, r28
    e9b8:	6f 5f       	subi	r22, 0xFF	; 255
    e9ba:	7f 4f       	sbci	r23, 0xFF	; 255
    e9bc:	81 2f       	mov	r24, r17
    e9be:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    e9c2:	89 81       	ldd	r24, Y+1	; 0x01
    e9c4:	81 11       	cpse	r24, r1
    e9c6:	f4 cf       	rjmp	.-24     	; 0xe9b0 <tds_associate(unsigned char)+0xa0>
    e9c8:	f6 01       	movw	r30, r12
    e9ca:	80 81       	ld	r24, Z
    e9cc:	81 30       	cpi	r24, 0x01	; 1
    e9ce:	81 f7       	brne	.-32     	; 0xe9b0 <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    e9d0:	89 83       	std	Y+1, r24	; 0x01
    e9d2:	fe 01       	movw	r30, r28
    e9d4:	32 96       	adiw	r30, 0x02	; 2
    e9d6:	90 e0       	ldi	r25, 0x00	; 0
    e9d8:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    e9da:	d7 01       	movw	r26, r14
    e9dc:	a8 0f       	add	r26, r24
    e9de:	b9 1f       	adc	r27, r25
    e9e0:	2c 91       	ld	r18, X
    e9e2:	21 93       	st	Z+, r18
    e9e4:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    e9e6:	88 30       	cpi	r24, 0x08	; 8
    e9e8:	91 05       	cpc	r25, r1
    e9ea:	b9 f7       	brne	.-18     	; 0xe9da <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    e9ec:	2b e0       	ldi	r18, 0x0B	; 11
    e9ee:	12 9f       	mul	r17, r18
    e9f0:	f0 01       	movw	r30, r0
    e9f2:	11 24       	eor	r1, r1
    e9f4:	e2 54       	subi	r30, 0x42	; 66
    e9f6:	f3 4f       	sbci	r31, 0xF3	; 243
    e9f8:	e0 85       	ldd	r30, Z+8	; 0x08
    e9fa:	f0 e0       	ldi	r31, 0x00	; 0
    e9fc:	ee 0f       	add	r30, r30
    e9fe:	ff 1f       	adc	r31, r31
    ea00:	ef 5f       	subi	r30, 0xFF	; 255
    ea02:	f2 4f       	sbci	r31, 0xF2	; 242
    ea04:	80 81       	ld	r24, Z
    ea06:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    ea08:	be 01       	movw	r22, r28
    ea0a:	6f 5f       	subi	r22, 0xFF	; 255
    ea0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ea0e:	81 2f       	mov	r24, r17
    ea10:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
    ea14:	3e e1       	ldi	r19, 0x1E	; 30
    ea16:	13 9f       	mul	r17, r19
    ea18:	a0 01       	movw	r20, r0
    ea1a:	11 24       	eor	r1, r1
    ea1c:	90 e0       	ldi	r25, 0x00	; 0
    ea1e:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    ea20:	20 e2       	ldi	r18, 0x20	; 32
    ea22:	3e e4       	ldi	r19, 0x4E	; 78
    ea24:	fc 01       	movw	r30, r24
    ea26:	ee 0f       	add	r30, r30
    ea28:	ff 1f       	adc	r31, r31
    ea2a:	e4 0f       	add	r30, r20
    ea2c:	f5 1f       	adc	r31, r21
    ea2e:	e2 53       	subi	r30, 0x32	; 50
    ea30:	f4 4f       	sbci	r31, 0xF4	; 244
    ea32:	30 87       	std	Z+8, r19	; 0x08
    ea34:	27 83       	std	Z+7, r18	; 0x07
    ea36:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ea38:	8a 30       	cpi	r24, 0x0A	; 10
    ea3a:	91 05       	cpc	r25, r1
    ea3c:	99 f7       	brne	.-26     	; 0xea24 <tds_associate(unsigned char)+0x114>
    ea3e:	7e cf       	rjmp	.-260    	; 0xe93c <tds_associate(unsigned char)+0x2c>

0000ea40 <helper_tds_associate(unsigned int, unsigned int, unsigned char)>:
_Z20helper_tds_associatejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4652
  return active;
}

void helper_tds_associate(uint16_t idx, uint16_t args2, uint8_t args3)
{
  tds_associate(idx);
    ea40:	0c 94 88 74 	jmp	0xe910	; 0xe910 <tds_associate(unsigned char)>

0000ea44 <clik_button_onewire_scan_bus(unsigned int, unsigned int, unsigned char)>:
_Z28clik_button_onewire_scan_busjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4680
  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
}

void clik_button_onewire_scan_bus(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ea44:	0f 93       	push	r16
    ea46:	1f 93       	push	r17
    ea48:	cf 93       	push	r28
    ea4a:	df 93       	push	r29
    ea4c:	cd b7       	in	r28, 0x3d	; 61
    ea4e:	de b7       	in	r29, 0x3e	; 62
    ea50:	a0 97       	sbiw	r28, 0x20	; 32
    ea52:	0f b6       	in	r0, 0x3f	; 63
    ea54:	f8 94       	cli
    ea56:	de bf       	out	0x3e, r29	; 62
    ea58:	0f be       	out	0x3f, r0	; 63
    ea5a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4682
  char str1[32];
  Global_HWwirenum = 0;
    ea5c:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683
  one_hw_search_device(0);
    ea60:	0e 94 5f b9 	call	0x172be	; 0x172be <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4684
  tds_update_associate();
    ea64:	0e 94 3e 74 	call	0xe87c	; 0xe87c <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4685
  MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    ea68:	70 e0       	ldi	r23, 0x00	; 0
    ea6a:	60 e0       	ldi	r22, 0x00	; 0
    ea6c:	88 e6       	ldi	r24, 0x68	; 104
    ea6e:	90 e0       	ldi	r25, 0x00	; 0
    ea70:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4687
  /// TODO text
  sprintf(str1, "Nalezeno: %d novych 1Wire", Global_HWwirenum);
    ea74:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
    ea78:	1f 92       	push	r1
    ea7a:	8f 93       	push	r24
    ea7c:	8c eb       	ldi	r24, 0xBC	; 188
    ea7e:	93 e0       	ldi	r25, 0x03	; 3
    ea80:	9f 93       	push	r25
    ea82:	8f 93       	push	r24
    ea84:	8e 01       	movw	r16, r28
    ea86:	0f 5f       	subi	r16, 0xFF	; 255
    ea88:	1f 4f       	sbci	r17, 0xFF	; 255
    ea8a:	1f 93       	push	r17
    ea8c:	0f 93       	push	r16
    ea8e:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4688
  strcpy(dialog_text, str1);
    ea92:	b8 01       	movw	r22, r16
    ea94:	85 e1       	ldi	r24, 0x15	; 21
    ea96:	9a e0       	ldi	r25, 0x0A	; 10
    ea98:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
    ea9c:	0f 90       	pop	r0
    ea9e:	0f 90       	pop	r0
    eaa0:	0f 90       	pop	r0
    eaa2:	0f 90       	pop	r0
    eaa4:	0f 90       	pop	r0
    eaa6:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4689
}
    eaa8:	a0 96       	adiw	r28, 0x20	; 32
    eaaa:	0f b6       	in	r0, 0x3f	; 63
    eaac:	f8 94       	cli
    eaae:	de bf       	out	0x3e, r29	; 62
    eab0:	0f be       	out	0x3f, r0	; 63
    eab2:	cd bf       	out	0x3d, r28	; 61
    eab4:	df 91       	pop	r29
    eab6:	cf 91       	pop	r28
    eab8:	1f 91       	pop	r17
    eaba:	0f 91       	pop	r16
    eabc:	08 95       	ret

0000eabe <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    eabe:	1f 93       	push	r17
    eac0:	cf 93       	push	r28
    eac2:	df 93       	push	r29
    eac4:	cd b7       	in	r28, 0x3d	; 61
    eac6:	de b7       	in	r29, 0x3e	; 62
    eac8:	66 97       	sbiw	r28, 0x16	; 22
    eaca:	0f b6       	in	r0, 0x3f	; 63
    eacc:	f8 94       	cli
    eace:	de bf       	out	0x3e, r29	; 62
    ead0:	0f be       	out	0x3f, r0	; 63
    ead2:	cd bf       	out	0x3d, r28	; 61
    ead4:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ead6:	be 01       	movw	r22, r28
    ead8:	6f 5f       	subi	r22, 0xFF	; 255
    eada:	7f 4f       	sbci	r23, 0xFF	; 255
    eadc:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    eae0:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    eae2:	6e e9       	ldi	r22, 0x9E	; 158
    eae4:	73 e0       	ldi	r23, 0x03	; 3
    eae6:	ce 01       	movw	r24, r28
    eae8:	0d 96       	adiw	r24, 0x0d	; 13
    eaea:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    eaee:	1c 86       	std	Y+12, r1	; 0x0c
    eaf0:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    eaf2:	8a e0       	ldi	r24, 0x0A	; 10
    eaf4:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    eaf6:	1a 82       	std	Y+2, r1	; 0x02
    eaf8:	1b 82       	std	Y+3, r1	; 0x03
    eafa:	1c 82       	std	Y+4, r1	; 0x04
    eafc:	1d 82       	std	Y+5, r1	; 0x05
    eafe:	1e 82       	std	Y+6, r1	; 0x06
    eb00:	1f 82       	std	Y+7, r1	; 0x07
    eb02:	18 86       	std	Y+8, r1	; 0x08
    eb04:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    eb06:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    eb08:	be 01       	movw	r22, r28
    eb0a:	6f 5f       	subi	r22, 0xFF	; 255
    eb0c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb0e:	81 2f       	mov	r24, r17
    eb10:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    eb14:	0e 94 3e 74 	call	0xe87c	; 0xe87c <tds_update_associate()>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:132
}
    eb18:	66 96       	adiw	r28, 0x16	; 22
    eb1a:	0f b6       	in	r0, 0x3f	; 63
    eb1c:	f8 94       	cli
    eb1e:	de bf       	out	0x3e, r29	; 62
    eb20:	0f be       	out	0x3f, r0	; 63
    eb22:	cd bf       	out	0x3d, r28	; 61
    eb24:	df 91       	pop	r29
    eb26:	cf 91       	pop	r28
    eb28:	1f 91       	pop	r17
    eb2a:	08 95       	ret

0000eb2c <click_tds_deassociate_onewire(unsigned int, unsigned int, unsigned char)>:
_Z29click_tds_deassociate_onewirejjh():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    eb2c:	8b e0       	ldi	r24, 0x0B	; 11
    eb2e:	68 9f       	mul	r22, r24
    eb30:	f0 01       	movw	r30, r0
    eb32:	11 24       	eor	r1, r1
    eb34:	e2 54       	subi	r30, 0x42	; 66
    eb36:	f3 4f       	sbci	r31, 0xF3	; 243
    eb38:	82 85       	ldd	r24, Z+10	; 0x0a
    eb3a:	0e 94 5f 75 	call	0xeabe	; 0xeabe <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4676
/// zruseni associace
void click_tds_deassociate_onewire(uint16_t args1, uint16_t idx, uint8_t args3)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu(0, 0, 0);
    eb3e:	0c 94 88 b8 	jmp	0x17110	; 0x17110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>

0000eb42 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z38display_element_show_tds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4201
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    eb42:	af 92       	push	r10
    eb44:	bf 92       	push	r11
    eb46:	cf 92       	push	r12
    eb48:	df 92       	push	r13
    eb4a:	ef 92       	push	r14
    eb4c:	ff 92       	push	r15
    eb4e:	0f 93       	push	r16
    eb50:	1f 93       	push	r17
    eb52:	cf 93       	push	r28
    eb54:	df 93       	push	r29
    eb56:	cd b7       	in	r28, 0x3d	; 61
    eb58:	de b7       	in	r29, 0x3e	; 62
    eb5a:	ca 54       	subi	r28, 0x4A	; 74
    eb5c:	d1 09       	sbc	r29, r1
    eb5e:	0f b6       	in	r0, 0x3f	; 63
    eb60:	f8 94       	cli
    eb62:	de bf       	out	0x3e, r29	; 62
    eb64:	0f be       	out	0x3f, r0	; 63
    eb66:	cd bf       	out	0x3d, r28	; 61
    eb68:	6c 01       	movw	r12, r24
    eb6a:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4206
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    eb6c:	be 01       	movw	r22, r28
    eb6e:	6b 5c       	subi	r22, 0xCB	; 203
    eb70:	7f 4f       	sbci	r23, 0xFF	; 255
    eb72:	8e 2d       	mov	r24, r14
    eb74:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    eb78:	81 30       	cpi	r24, 0x01	; 1
    eb7a:	d9 f5       	brne	.+118    	; 0xebf2 <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4209
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    eb7c:	8e e1       	ldi	r24, 0x1E	; 30
    eb7e:	e8 9e       	mul	r14, r24
    eb80:	f0 01       	movw	r30, r0
    eb82:	11 24       	eor	r1, r1
    eb84:	e2 53       	subi	r30, 0x32	; 50
    eb86:	f4 4f       	sbci	r31, 0xF4	; 244
    eb88:	65 81       	ldd	r22, Z+5	; 0x05
    eb8a:	76 81       	ldd	r23, Z+6	; 0x06
    eb8c:	07 2e       	mov	r0, r23
    eb8e:	00 0c       	add	r0, r0
    eb90:	88 0b       	sbc	r24, r24
    eb92:	99 0b       	sbc	r25, r25
    eb94:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    eb98:	20 e0       	ldi	r18, 0x00	; 0
    eb9a:	30 e0       	ldi	r19, 0x00	; 0
    eb9c:	4a e7       	ldi	r20, 0x7A	; 122
    eb9e:	54 e4       	ldi	r21, 0x44	; 68
    eba0:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4210
    dtostrf(te, 4, 2, str1);
    eba4:	8e 01       	movw	r16, r28
    eba6:	05 5e       	subi	r16, 0xE5	; 229
    eba8:	1f 4f       	sbci	r17, 0xFF	; 255
    ebaa:	22 e0       	ldi	r18, 0x02	; 2
    ebac:	44 e0       	ldi	r20, 0x04	; 4
    ebae:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4211
    strcat(str1, "C");
    ebb2:	6e e1       	ldi	r22, 0x1E	; 30
    ebb4:	77 e0       	ldi	r23, 0x07	; 7
    ebb6:	c8 01       	movw	r24, r16
    ebb8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4212
    strcpy_P(str2, current_temp_short);
    ebbc:	62 e6       	ldi	r22, 0x62	; 98
    ebbe:	73 e8       	ldi	r23, 0x83	; 131
    ebc0:	ce 01       	movw	r24, r28
    ebc2:	01 96       	adiw	r24, 0x01	; 1
    ebc4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4213
    strcat(str2, str1);
    ebc8:	b8 01       	movw	r22, r16
    ebca:	ce 01       	movw	r24, r28
    ebcc:	01 96       	adiw	r24, 0x01	; 1
    ebce:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4214
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    ebd2:	a5 01       	movw	r20, r10
    ebd4:	44 57       	subi	r20, 0x74	; 116
    ebd6:	5f 4f       	sbci	r21, 0xFF	; 255
    ebd8:	b6 01       	movw	r22, r12
    ebda:	66 5f       	subi	r22, 0xF6	; 246
    ebdc:	7f 4f       	sbci	r23, 0xFF	; 255
    ebde:	ee 24       	eor	r14, r14
    ebe0:	ea 94       	dec	r14
    ebe2:	fe 2c       	mov	r15, r14
    ebe4:	10 e0       	ldi	r17, 0x00	; 0
    ebe6:	00 e0       	ldi	r16, 0x00	; 0
    ebe8:	22 e0       	ldi	r18, 0x02	; 2
    ebea:	ce 01       	movw	r24, r28
    ebec:	01 96       	adiw	r24, 0x01	; 1
    ebee:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4216
  }
}
    ebf2:	c6 5b       	subi	r28, 0xB6	; 182
    ebf4:	df 4f       	sbci	r29, 0xFF	; 255
    ebf6:	0f b6       	in	r0, 0x3f	; 63
    ebf8:	f8 94       	cli
    ebfa:	de bf       	out	0x3e, r29	; 62
    ebfc:	0f be       	out	0x3f, r0	; 63
    ebfe:	cd bf       	out	0x3d, r28	; 61
    ec00:	df 91       	pop	r29
    ec02:	cf 91       	pop	r28
    ec04:	1f 91       	pop	r17
    ec06:	0f 91       	pop	r16
    ec08:	ff 90       	pop	r15
    ec0a:	ef 90       	pop	r14
    ec0c:	df 90       	pop	r13
    ec0e:	cf 90       	pop	r12
    ec10:	bf 90       	pop	r11
    ec12:	af 90       	pop	r10
    ec14:	08 95       	ret

0000ec16 <display_menu_tds_set_name(unsigned int, unsigned int, unsigned char)>:
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1448
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ec16:	1f 93       	push	r17
    ec18:	cf 93       	push	r28
    ec1a:	df 93       	push	r29
    ec1c:	cd b7       	in	r28, 0x3d	; 61
    ec1e:	de b7       	in	r29, 0x3e	; 62
    ec20:	a0 97       	sbiw	r28, 0x20	; 32
    ec22:	0f b6       	in	r0, 0x3f	; 63
    ec24:	f8 94       	cli
    ec26:	de bf       	out	0x3e, r29	; 62
    ec28:	0f be       	out	0x3f, r0	; 63
    ec2a:	cd bf       	out	0x3d, r28	; 61
    ec2c:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ec2e:	be 01       	movw	r22, r28
    ec30:	6f 5f       	subi	r22, 0xFF	; 255
    ec32:	7f 4f       	sbci	r23, 0xFF	; 255
    ec34:	81 2f       	mov	r24, r17
    ec36:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    ec3a:	be 01       	movw	r22, r28
    ec3c:	63 5f       	subi	r22, 0xF3	; 243
    ec3e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec40:	ce 01       	movw	r24, r28
    ec42:	47 96       	adiw	r24, 0x17	; 23
    ec44:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1451
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    ec48:	70 e0       	ldi	r23, 0x00	; 0
    ec4a:	60 e0       	ldi	r22, 0x00	; 0
    ec4c:	87 e6       	ldi	r24, 0x67	; 103
    ec4e:	90 e0       	ldi	r25, 0x00	; 0
    ec50:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    ec54:	be 01       	movw	r22, r28
    ec56:	69 5e       	subi	r22, 0xE9	; 233
    ec58:	7f 4f       	sbci	r23, 0xFF	; 255
    ec5a:	85 ef       	ldi	r24, 0xF5	; 245
    ec5c:	99 e0       	ldi	r25, 0x09	; 9
    ec5e:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    ec62:	88 e0       	ldi	r24, 0x08	; 8
    ec64:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    ec68:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    ec6c:	8f ef       	ldi	r24, 0xFF	; 255
    ec6e:	96 e7       	ldi	r25, 0x76	; 118
    ec70:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    ec74:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    ec78:	89 ed       	ldi	r24, 0xD9	; 217
    ec7a:	9f e4       	ldi	r25, 0x4F	; 79
    ec7c:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    ec80:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z25display_menu_tds_set_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1454
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
    ec84:	a0 96       	adiw	r28, 0x20	; 32
    ec86:	0f b6       	in	r0, 0x3f	; 63
    ec88:	f8 94       	cli
    ec8a:	de bf       	out	0x3e, r29	; 62
    ec8c:	0f be       	out	0x3f, r0	; 63
    ec8e:	cd bf       	out	0x3d, r28	; 61
    ec90:	df 91       	pop	r29
    ec92:	cf 91       	pop	r28
    ec94:	1f 91       	pop	r17
    ec96:	08 95       	ret

0000ec98 <display_menu_tds_set_period(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1440
  //dialog_save_variable_function = ;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ec98:	ff 92       	push	r15
    ec9a:	0f 93       	push	r16
    ec9c:	1f 93       	push	r17
    ec9e:	cf 93       	push	r28
    eca0:	df 93       	push	r29
    eca2:	cd b7       	in	r28, 0x3d	; 61
    eca4:	de b7       	in	r29, 0x3e	; 62
    eca6:	66 97       	sbiw	r28, 0x16	; 22
    eca8:	0f b6       	in	r0, 0x3f	; 63
    ecaa:	f8 94       	cli
    ecac:	de bf       	out	0x3e, r29	; 62
    ecae:	0f be       	out	0x3f, r0	; 63
    ecb0:	cd bf       	out	0x3d, r28	; 61
    ecb2:	08 2f       	mov	r16, r24
    ecb4:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1441
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    ecb6:	70 e0       	ldi	r23, 0x00	; 0
    ecb8:	60 e0       	ldi	r22, 0x00	; 0
    ecba:	86 e6       	ldi	r24, 0x66	; 102
    ecbc:	90 e0       	ldi	r25, 0x00	; 0
    ecbe:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ecc2:	be 01       	movw	r22, r28
    ecc4:	6f 5f       	subi	r22, 0xFF	; 255
    ecc6:	7f 4f       	sbci	r23, 0xFF	; 255
    ecc8:	8f 2d       	mov	r24, r15
    ecca:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:115
  return tds.period;
    ecce:	6d 89       	ldd	r22, Y+21	; 0x15
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ecd0:	85 e1       	ldi	r24, 0x15	; 21
    ecd2:	08 9f       	mul	r16, r24
    ecd4:	80 01       	movw	r16, r0
    ecd6:	11 24       	eor	r1, r1
    ecd8:	05 56       	subi	r16, 0x65	; 101
    ecda:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1442

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
    ecdc:	70 e0       	ldi	r23, 0x00	; 0
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	80 e0       	ldi	r24, 0x00	; 0
    ece2:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    ece6:	f8 01       	movw	r30, r16
    ece8:	60 83       	st	Z, r22
    ecea:	71 83       	std	Z+1, r23	; 0x01
    ecec:	82 83       	std	Z+2, r24	; 0x02
    ecee:	93 83       	std	Z+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    ecf0:	80 e0       	ldi	r24, 0x00	; 0
    ecf2:	90 e0       	ldi	r25, 0x00	; 0
    ecf4:	a0 e8       	ldi	r26, 0x80	; 128
    ecf6:	bf e3       	ldi	r27, 0x3F	; 63
    ecf8:	80 87       	std	Z+8, r24	; 0x08
    ecfa:	91 87       	std	Z+9, r25	; 0x09
    ecfc:	a2 87       	std	Z+10, r26	; 0x0a
    ecfe:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    ed00:	40 e0       	ldi	r20, 0x00	; 0
    ed02:	50 e0       	ldi	r21, 0x00	; 0
    ed04:	6f e7       	ldi	r22, 0x7F	; 127
    ed06:	73 e4       	ldi	r23, 0x43	; 67
    ed08:	44 83       	std	Z+4, r20	; 0x04
    ed0a:	55 83       	std	Z+5, r21	; 0x05
    ed0c:	66 83       	std	Z+6, r22	; 0x06
    ed0e:	77 83       	std	Z+7, r23	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    ed10:	86 87       	std	Z+14, r24	; 0x0e
    ed12:	97 87       	std	Z+15, r25	; 0x0f
    ed14:	a0 8b       	std	Z+16, r26	; 0x10
    ed16:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    ed18:	81 e0       	ldi	r24, 0x01	; 1
    ed1a:	85 87       	std	Z+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    ed1c:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    ed1e:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    ed20:	80 e3       	ldi	r24, 0x30	; 48
    ed22:	97 e7       	ldi	r25, 0x77	; 119
    ed24:	94 8b       	std	Z+20, r25	; 0x14
    ed26:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_periodjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1444
void display_menu_tds_set_period(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable((float)tds_get_period(args2), 1, 255, 1, args2, NUMBER_TYPE_INT , H_FALSE, args1, &menu_tds_save_period);
  //dialog_save_variable_function = ;
}
    ed28:	66 96       	adiw	r28, 0x16	; 22
    ed2a:	0f b6       	in	r0, 0x3f	; 63
    ed2c:	f8 94       	cli
    ed2e:	de bf       	out	0x3e, r29	; 62
    ed30:	0f be       	out	0x3f, r0	; 63
    ed32:	cd bf       	out	0x3d, r28	; 61
    ed34:	df 91       	pop	r29
    ed36:	cf 91       	pop	r28
    ed38:	1f 91       	pop	r17
    ed3a:	0f 91       	pop	r16
    ed3c:	ff 90       	pop	r15
    ed3e:	08 95       	ret

0000ed40 <display_menu_tds_set_offset(unsigned int, unsigned int, unsigned char)>:
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1432
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ed40:	ff 92       	push	r15
    ed42:	0f 93       	push	r16
    ed44:	1f 93       	push	r17
    ed46:	cf 93       	push	r28
    ed48:	df 93       	push	r29
    ed4a:	cd b7       	in	r28, 0x3d	; 61
    ed4c:	de b7       	in	r29, 0x3e	; 62
    ed4e:	66 97       	sbiw	r28, 0x16	; 22
    ed50:	0f b6       	in	r0, 0x3f	; 63
    ed52:	f8 94       	cli
    ed54:	de bf       	out	0x3e, r29	; 62
    ed56:	0f be       	out	0x3f, r0	; 63
    ed58:	cd bf       	out	0x3d, r28	; 61
    ed5a:	08 2f       	mov	r16, r24
    ed5c:	f6 2e       	mov	r15, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1433
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    ed5e:	70 e0       	ldi	r23, 0x00	; 0
    ed60:	60 e0       	ldi	r22, 0x00	; 0
    ed62:	86 e6       	ldi	r24, 0x66	; 102
    ed64:	90 e0       	ldi	r25, 0x00	; 0
    ed66:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
tds_get_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ed6a:	be 01       	movw	r22, r28
    ed6c:	6f 5f       	subi	r22, 0xFF	; 255
    ed6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ed70:	8f 2d       	mov	r24, r15
    ed72:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:99
  return tds.offset;
    ed76:	6b 85       	ldd	r22, Y+11	; 0x0b
    ed78:	7c 85       	ldd	r23, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ed7a:	85 e1       	ldi	r24, 0x15	; 21
    ed7c:	08 9f       	mul	r16, r24
    ed7e:	80 01       	movw	r16, r0
    ed80:	11 24       	eor	r1, r1
    ed82:	05 56       	subi	r16, 0x65	; 101
    ed84:	16 4f       	sbci	r17, 0xF6	; 246
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1434
*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
    ed86:	07 2e       	mov	r0, r23
    ed88:	00 0c       	add	r0, r0
    ed8a:	88 0b       	sbc	r24, r24
    ed8c:	99 0b       	sbc	r25, r25
    ed8e:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    ed92:	20 e0       	ldi	r18, 0x00	; 0
    ed94:	30 e0       	ldi	r19, 0x00	; 0
    ed96:	4a e7       	ldi	r20, 0x7A	; 122
    ed98:	54 e4       	ldi	r21, 0x44	; 68
    ed9a:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ed9e:	f8 01       	movw	r30, r16
    eda0:	60 83       	st	Z, r22
    eda2:	71 83       	std	Z+1, r23	; 0x01
    eda4:	82 83       	std	Z+2, r24	; 0x02
    eda6:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  menu_dialog_variable[idx].variable_min = min;
    eda8:	80 e0       	ldi	r24, 0x00	; 0
    edaa:	90 e0       	ldi	r25, 0x00	; 0
    edac:	a0 e2       	ldi	r26, 0x20	; 32
    edae:	b1 ec       	ldi	r27, 0xC1	; 193
    edb0:	80 87       	std	Z+8, r24	; 0x08
    edb2:	91 87       	std	Z+9, r25	; 0x09
    edb4:	a2 87       	std	Z+10, r26	; 0x0a
    edb6:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    edb8:	80 e0       	ldi	r24, 0x00	; 0
    edba:	90 e0       	ldi	r25, 0x00	; 0
    edbc:	a0 e2       	ldi	r26, 0x20	; 32
    edbe:	b1 e4       	ldi	r27, 0x41	; 65
    edc0:	84 83       	std	Z+4, r24	; 0x04
    edc2:	95 83       	std	Z+5, r25	; 0x05
    edc4:	a6 83       	std	Z+6, r26	; 0x06
    edc6:	b7 83       	std	Z+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    edc8:	8d ec       	ldi	r24, 0xCD	; 205
    edca:	9c ec       	ldi	r25, 0xCC	; 204
    edcc:	ac ec       	ldi	r26, 0xCC	; 204
    edce:	bd e3       	ldi	r27, 0x3D	; 61
    edd0:	86 87       	std	Z+14, r24	; 0x0e
    edd2:	97 87       	std	Z+15, r25	; 0x0f
    edd4:	a0 8b       	std	Z+16, r26	; 0x10
    edd6:	b1 8b       	std	Z+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    edd8:	15 86       	std	Z+13, r1	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    edda:	f2 8a       	std	Z+18, r15	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    eddc:	14 86       	std	Z+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    edde:	86 e6       	ldi	r24, 0x66	; 102
    ede0:	97 e7       	ldi	r25, 0x77	; 119
    ede2:	94 8b       	std	Z+20, r25	; 0x14
    ede4:	83 8b       	std	Z+19, r24	; 0x13
_Z27display_menu_tds_set_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1436
void display_menu_tds_set_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(tds_get_offset(args2) / 1000.0, -10, 10, 0.1, args2, NUMBER_TYPE_FLOAT, H_FALSE, args1, &menu_tds_save_offset);
  //dialog_save_variable_function = ;
}
    ede6:	66 96       	adiw	r28, 0x16	; 22
    ede8:	0f b6       	in	r0, 0x3f	; 63
    edea:	f8 94       	cli
    edec:	de bf       	out	0x3e, r29	; 62
    edee:	0f be       	out	0x3f, r0	; 63
    edf0:	cd bf       	out	0x3d, r28	; 61
    edf2:	df 91       	pop	r29
    edf4:	cf 91       	pop	r28
    edf6:	1f 91       	pop	r17
    edf8:	0f 91       	pop	r16
    edfa:	ff 90       	pop	r15
    edfc:	08 95       	ret

0000edfe <menu_tds_save_name(unsigned int, unsigned int, unsigned char)>:
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1415
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
/////
void menu_tds_save_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    edfe:	1f 93       	push	r17
    ee00:	cf 93       	push	r28
    ee02:	df 93       	push	r29
    ee04:	cd b7       	in	r28, 0x3d	; 61
    ee06:	de b7       	in	r29, 0x3e	; 62
    ee08:	a0 97       	sbiw	r28, 0x20	; 32
    ee0a:	0f b6       	in	r0, 0x3f	; 63
    ee0c:	f8 94       	cli
    ee0e:	de bf       	out	0x3e, r29	; 62
    ee10:	0f be       	out	0x3f, r0	; 63
    ee12:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1417
  char name[10];
  display_element_get_string(name);
    ee14:	ce 01       	movw	r24, r28
    ee16:	47 96       	adiw	r24, 0x17	; 23
    ee18:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1418
  if (strlen(name) > 0)
    ee1c:	8f 89       	ldd	r24, Y+23	; 0x17
    ee1e:	88 23       	and	r24, r24
    ee20:	a9 f0       	breq	.+42     	; 0xee4c <menu_tds_save_name(unsigned int, unsigned int, unsigned char)+0x4e>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    ee22:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ee26:	be 01       	movw	r22, r28
    ee28:	6f 5f       	subi	r22, 0xFF	; 255
    ee2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ee2c:	81 2f       	mov	r24, r17
    ee2e:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    ee32:	be 01       	movw	r22, r28
    ee34:	69 5e       	subi	r22, 0xE9	; 233
    ee36:	7f 4f       	sbci	r23, 0xFF	; 255
    ee38:	ce 01       	movw	r24, r28
    ee3a:	0d 96       	adiw	r24, 0x0d	; 13
    ee3c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    ee40:	be 01       	movw	r22, r28
    ee42:	6f 5f       	subi	r22, 0xFF	; 255
    ee44:	7f 4f       	sbci	r23, 0xFF	; 255
    ee46:	81 2f       	mov	r24, r17
    ee48:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1420
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    ee4c:	a0 96       	adiw	r28, 0x20	; 32
    ee4e:	0f b6       	in	r0, 0x3f	; 63
    ee50:	f8 94       	cli
    ee52:	de bf       	out	0x3e, r29	; 62
    ee54:	0f be       	out	0x3f, r0	; 63
    ee56:	cd bf       	out	0x3d, r28	; 61
    ee58:	df 91       	pop	r29
    ee5a:	cf 91       	pop	r28
    ee5c:	1f 91       	pop	r17
    ee5e:	08 95       	ret

0000ee60 <menu_tds_save_period(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1410
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
    ee60:	ff 92       	push	r15
    ee62:	0f 93       	push	r16
    ee64:	1f 93       	push	r17
    ee66:	cf 93       	push	r28
    ee68:	df 93       	push	r29
    ee6a:	cd b7       	in	r28, 0x3d	; 61
    ee6c:	de b7       	in	r29, 0x3e	; 62
    ee6e:	66 97       	sbiw	r28, 0x16	; 22
    ee70:	0f b6       	in	r0, 0x3f	; 63
    ee72:	f8 94       	cli
    ee74:	de bf       	out	0x3e, r29	; 62
    ee76:	0f be       	out	0x3f, r0	; 63
    ee78:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1320
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    ee7a:	95 e1       	ldi	r25, 0x15	; 21
    ee7c:	89 9f       	mul	r24, r25
    ee7e:	80 01       	movw	r16, r0
    ee80:	11 24       	eor	r1, r1
    ee82:	05 56       	subi	r16, 0x65	; 101
    ee84:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1411
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
    ee86:	f8 01       	movw	r30, r16
    ee88:	60 81       	ld	r22, Z
    ee8a:	71 81       	ldd	r23, Z+1	; 0x01
    ee8c:	82 81       	ldd	r24, Z+2	; 0x02
    ee8e:	93 81       	ldd	r25, Z+3	; 0x03
    ee90:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
    ee94:	f6 2e       	mov	r15, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    ee96:	f8 01       	movw	r30, r16
    ee98:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ee9a:	be 01       	movw	r22, r28
    ee9c:	6f 5f       	subi	r22, 0xFF	; 255
    ee9e:	7f 4f       	sbci	r23, 0xFF	; 255
    eea0:	81 2f       	mov	r24, r17
    eea2:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:107
  tds.period = period;
    eea6:	fd 8a       	std	Y+21, r15	; 0x15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    eea8:	be 01       	movw	r22, r28
    eeaa:	6f 5f       	subi	r22, 0xFF	; 255
    eeac:	7f 4f       	sbci	r23, 0xFF	; 255
    eeae:	81 2f       	mov	r24, r17
    eeb0:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1412
}

void menu_tds_save_period(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_period(display_function_get_variable_args(args1), display_function_get_variable_float(args1));
}
    eeb4:	66 96       	adiw	r28, 0x16	; 22
    eeb6:	0f b6       	in	r0, 0x3f	; 63
    eeb8:	f8 94       	cli
    eeba:	de bf       	out	0x3e, r29	; 62
    eebc:	0f be       	out	0x3f, r0	; 63
    eebe:	cd bf       	out	0x3d, r28	; 61
    eec0:	df 91       	pop	r29
    eec2:	cf 91       	pop	r28
    eec4:	1f 91       	pop	r17
    eec6:	0f 91       	pop	r16
    eec8:	ff 90       	pop	r15
    eeca:	08 95       	ret

0000eecc <menu_tds_save_offset(unsigned int, float, unsigned char)>:
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1405
/////
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
    eecc:	cf 92       	push	r12
    eece:	df 92       	push	r13
    eed0:	ef 92       	push	r14
    eed2:	ff 92       	push	r15
    eed4:	0f 93       	push	r16
    eed6:	1f 93       	push	r17
    eed8:	cf 93       	push	r28
    eeda:	df 93       	push	r29
    eedc:	cd b7       	in	r28, 0x3d	; 61
    eede:	de b7       	in	r29, 0x3e	; 62
    eee0:	66 97       	sbiw	r28, 0x16	; 22
    eee2:	0f b6       	in	r0, 0x3f	; 63
    eee4:	f8 94       	cli
    eee6:	de bf       	out	0x3e, r29	; 62
    eee8:	0f be       	out	0x3f, r0	; 63
    eeea:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable_float():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1320
  return menu_dialog_variable[idx].args;
}

float display_function_get_variable_float(uint8_t idx)
{
  return menu_dialog_variable[idx].variable_now ;
    eeec:	95 e1       	ldi	r25, 0x15	; 21
    eeee:	89 9f       	mul	r24, r25
    eef0:	80 01       	movw	r16, r0
    eef2:	11 24       	eor	r1, r1
    eef4:	05 56       	subi	r16, 0x65	; 101
    eef6:	16 4f       	sbci	r17, 0xF6	; 246
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1406
/*
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
    eef8:	20 e0       	ldi	r18, 0x00	; 0
    eefa:	30 e0       	ldi	r19, 0x00	; 0
    eefc:	4a e7       	ldi	r20, 0x7A	; 122
    eefe:	54 e4       	ldi	r21, 0x44	; 68
    ef00:	f8 01       	movw	r30, r16
    ef02:	60 81       	ld	r22, Z
    ef04:	71 81       	ldd	r23, Z+1	; 0x01
    ef06:	82 81       	ldd	r24, Z+2	; 0x02
    ef08:	93 81       	ldd	r25, Z+3	; 0x03
    ef0a:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
    ef0e:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
    ef12:	6b 01       	movw	r12, r22
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1315
   kdyz je vice techto dialogu v jednom nenu
*/

uint8_t display_function_get_variable_args(uint8_t idx)
{
  return menu_dialog_variable[idx].args;
    ef14:	f8 01       	movw	r30, r16
    ef16:	12 89       	ldd	r17, Z+18	; 0x12
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ef18:	be 01       	movw	r22, r28
    ef1a:	6f 5f       	subi	r22, 0xFF	; 255
    ef1c:	7f 4f       	sbci	r23, 0xFF	; 255
    ef1e:	81 2f       	mov	r24, r17
    ef20:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    ef24:	dc 86       	std	Y+12, r13	; 0x0c
    ef26:	cb 86       	std	Y+11, r12	; 0x0b
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    ef28:	be 01       	movw	r22, r28
    ef2a:	6f 5f       	subi	r22, 0xFF	; 255
    ef2c:	7f 4f       	sbci	r23, 0xFF	; 255
    ef2e:	81 2f       	mov	r24, r17
    ef30:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsetjfh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1407
   args1 index polozky pomocnych promenych pro nastavovaci dialog
*/
void menu_tds_save_offset(uint16_t args1, float args2, uint8_t args3)
{
  tds_set_offset(display_function_get_variable_args(args1), display_function_get_variable_float(args1) * 1000);
}
    ef34:	66 96       	adiw	r28, 0x16	; 22
    ef36:	0f b6       	in	r0, 0x3f	; 63
    ef38:	f8 94       	cli
    ef3a:	de bf       	out	0x3e, r29	; 62
    ef3c:	0f be       	out	0x3f, r0	; 63
    ef3e:	cd bf       	out	0x3d, r28	; 61
    ef40:	df 91       	pop	r29
    ef42:	cf 91       	pop	r28
    ef44:	1f 91       	pop	r17
    ef46:	0f 91       	pop	r16
    ef48:	ff 90       	pop	r15
    ef4a:	ef 90       	pop	r14
    ef4c:	df 90       	pop	r13
    ef4e:	cf 90       	pop	r12
    ef50:	08 95       	ret

0000ef52 <button_click_set_time_offset(unsigned int, unsigned int, unsigned char)>:
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5830
////////////////////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ef52:	cf 93       	push	r28
    ef54:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5831
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
    ef56:	70 e0       	ldi	r23, 0x00	; 0
    ef58:	60 e0       	ldi	r22, 0x00	; 0
    ef5a:	86 e6       	ldi	r24, 0x66	; 102
    ef5c:	90 e0       	ldi	r25, 0x00	; 0
    ef5e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    ef62:	81 e0       	ldi	r24, 0x01	; 1
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1354
    }
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
    ef6a:	cb e9       	ldi	r28, 0x9B	; 155
    ef6c:	d9 e0       	ldi	r29, 0x09	; 9
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5832
   Obsluha tlacitka casovy offset
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
    ef6e:	68 2f       	mov	r22, r24
    ef70:	88 0f       	add	r24, r24
    ef72:	77 0b       	sbc	r23, r23
    ef74:	88 0b       	sbc	r24, r24
    ef76:	99 0b       	sbc	r25, r25
    ef78:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    ef7c:	68 83       	st	Y, r22
    ef7e:	79 83       	std	Y+1, r23	; 0x01
    ef80:	8a 83       	std	Y+2, r24	; 0x02
    ef82:	9b 83       	std	Y+3, r25	; 0x03
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1355
  }
}
void display_function_set_variable(float now, float min, float max, float step, uint8_t args, uint8_t number_type, uint8_t update_now, uint8_t idx, fptr_save_function save_function)
{
  menu_dialog_variable[idx].variable_now = now;
  menu_dialog_variable[idx].variable_min = min;
    ef84:	80 e0       	ldi	r24, 0x00	; 0
    ef86:	90 e0       	ldi	r25, 0x00	; 0
    ef88:	a0 e4       	ldi	r26, 0x40	; 64
    ef8a:	b1 ec       	ldi	r27, 0xC1	; 193
    ef8c:	88 87       	std	Y+8, r24	; 0x08
    ef8e:	99 87       	std	Y+9, r25	; 0x09
    ef90:	aa 87       	std	Y+10, r26	; 0x0a
    ef92:	bb 87       	std	Y+11, r27	; 0x0b
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1356
  menu_dialog_variable[idx].variable_max = max;
    ef94:	80 e0       	ldi	r24, 0x00	; 0
    ef96:	90 e0       	ldi	r25, 0x00	; 0
    ef98:	a0 e4       	ldi	r26, 0x40	; 64
    ef9a:	b1 e4       	ldi	r27, 0x41	; 65
    ef9c:	8c 83       	std	Y+4, r24	; 0x04
    ef9e:	9d 83       	std	Y+5, r25	; 0x05
    efa0:	ae 83       	std	Y+6, r26	; 0x06
    efa2:	bf 83       	std	Y+7, r27	; 0x07
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1357
  menu_dialog_variable[idx].variable_step = step;
    efa4:	80 e0       	ldi	r24, 0x00	; 0
    efa6:	90 e0       	ldi	r25, 0x00	; 0
    efa8:	a0 e8       	ldi	r26, 0x80	; 128
    efaa:	bf e3       	ldi	r27, 0x3F	; 63
    efac:	8e 87       	std	Y+14, r24	; 0x0e
    efae:	9f 87       	std	Y+15, r25	; 0x0f
    efb0:	a8 8b       	std	Y+16, r26	; 0x10
    efb2:	b9 8b       	std	Y+17, r27	; 0x11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1358
  menu_dialog_variable[idx].number_type = number_type;
    efb4:	81 e0       	ldi	r24, 0x01	; 1
    efb6:	8d 87       	std	Y+13, r24	; 0x0d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1359
  menu_dialog_variable[idx].args = args;
    efb8:	1a 8a       	std	Y+18, r1	; 0x12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1360
  menu_dialog_variable[idx].update_now = update_now;
    efba:	1c 86       	std	Y+12, r1	; 0x0c
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1361
  menu_dialog_variable[idx].save_function = save_function;
    efbc:	87 ee       	ldi	r24, 0xE7	; 231
    efbe:	9e e6       	ldi	r25, 0x6E	; 110
    efc0:	9c 8b       	std	Y+20, r25	; 0x14
    efc2:	8b 8b       	std	Y+19, r24	; 0x13
_Z28button_click_set_time_offsetjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5833
*/
void button_click_set_time_offset(uint16_t args1, uint16_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0, 0);
  display_function_set_variable(time_get_offset(), -12, 12, 1, 0, NUMBER_TYPE_INT, H_FALSE, 0, &helper_set_menu_time_offset);
}
    efc4:	df 91       	pop	r29
    efc6:	cf 91       	pop	r28
    efc8:	08 95       	ret

0000efca <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)>:
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5785
/*

   Obsluha tlacitka synchronizace NTP casu
*/
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
    efca:	0f 93       	push	r16
    efcc:	1f 93       	push	r17
    efce:	cf 93       	push	r28
    efd0:	df 93       	push	r29
    efd2:	cd b7       	in	r28, 0x3d	; 61
    efd4:	de b7       	in	r29, 0x3e	; 62
    efd6:	c4 55       	subi	r28, 0x54	; 84
    efd8:	d1 09       	sbc	r29, r1
    efda:	0f b6       	in	r0, 0x3f	; 63
    efdc:	f8 94       	cli
    efde:	de bf       	out	0x3e, r29	; 62
    efe0:	0f be       	out	0x3f, r0	; 63
    efe2:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    efe4:	1b 82       	std	Y+3, r1	; 0x03
    efe6:	86 ed       	ldi	r24, 0xD6	; 214
    efe8:	93 e0       	ldi	r25, 0x03	; 3
    efea:	9d 83       	std	Y+5, r25	; 0x05
    efec:	8c 83       	std	Y+4, r24	; 0x04
    efee:	89 e3       	ldi	r24, 0x39	; 57
    eff0:	95 e0       	ldi	r25, 0x05	; 5
    eff2:	9f 83       	std	Y+7, r25	; 0x07
    eff4:	8e 83       	std	Y+6, r24	; 0x06
    eff6:	18 86       	std	Y+8, r1	; 0x08
    eff8:	19 86       	std	Y+9, r1	; 0x09
    effa:	1a 86       	std	Y+10, r1	; 0x0a
    effc:	1b 86       	std	Y+11, r1	; 0x0b
    effe:	80 e6       	ldi	r24, 0x60	; 96
    f000:	9a ee       	ldi	r25, 0xEA	; 234
    f002:	a0 e0       	ldi	r26, 0x00	; 0
    f004:	b0 e0       	ldi	r27, 0x00	; 0
    f006:	8c 87       	std	Y+12, r24	; 0x0c
    f008:	9d 87       	std	Y+13, r25	; 0x0d
    f00a:	ae 87       	std	Y+14, r26	; 0x0e
    f00c:	bf 87       	std	Y+15, r27	; 0x0f
    f00e:	18 8a       	std	Y+16, r1	; 0x10
    f010:	19 8a       	std	Y+17, r1	; 0x11
    f012:	1a 8a       	std	Y+18, r1	; 0x12
    f014:	1b 8a       	std	Y+19, r1	; 0x13
    f016:	1c 8a       	std	Y+20, r1	; 0x14
    f018:	1d 8a       	std	Y+21, r1	; 0x15
    f01a:	1e 8a       	std	Y+22, r1	; 0x16
    f01c:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    f01e:	8c e4       	ldi	r24, 0x4C	; 76
    f020:	92 e1       	ldi	r25, 0x12	; 18
    f022:	9a 83       	std	Y+2, r25	; 0x02
    f024:	89 83       	std	Y+1, r24	; 0x01
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5788
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
    f026:	ce 01       	movw	r24, r28
    f028:	88 5b       	subi	r24, 0xB8	; 184
    f02a:	9f 4f       	sbci	r25, 0xFF	; 255
    f02c:	0e 94 c0 bd 	call	0x17b80	; 0x17b80 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    f030:	81 e0       	ldi	r24, 0x01	; 1
    f032:	90 e0       	ldi	r25, 0x00	; 0
    f034:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5789
void button_click_ntp_sync_time(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char str2[6];
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
    f038:	ae 01       	movw	r20, r28
    f03a:	48 5b       	subi	r20, 0xB8	; 184
    f03c:	5f 4f       	sbci	r21, 0xFF	; 255
    f03e:	68 2f       	mov	r22, r24
    f040:	ce 01       	movw	r24, r28
    f042:	01 96       	adiw	r24, 0x01	; 1
    f044:	0e 94 dc bc 	call	0x179b8	; 0x179b8 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
    f048:	81 30       	cpi	r24, 0x01	; 1
    f04a:	09 f0       	breq	.+2      	; 0xf04e <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x84>
    f04c:	42 c0       	rjmp	.+132    	; 0xf0d2 <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0x108>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f04e:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
    f052:	8d 7f       	andi	r24, 0xFD	; 253
    f054:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
_Z26button_click_ntp_sync_timejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5792
  NTPClient timeClient(udpClient);
  DateTime ted;
  if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
  {
    selftest_clear_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    f058:	70 e0       	ldi	r23, 0x00	; 0
    f05a:	60 e0       	ldi	r22, 0x00	; 0
    f05c:	88 e6       	ldi	r24, 0x68	; 104
    f05e:	90 e0       	ldi	r25, 0x00	; 0
    f060:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5793
    sprintf(str2, "%02d:%02d", ted.hour(), ted.minute());
    f064:	2d 96       	adiw	r28, 0x0d	; 13
    f066:	8f ad       	ldd	r24, Y+63	; 0x3f
    f068:	2d 97       	sbiw	r28, 0x0d	; 13
    f06a:	1f 92       	push	r1
    f06c:	8f 93       	push	r24
    f06e:	2c 96       	adiw	r28, 0x0c	; 12
    f070:	8f ad       	ldd	r24, Y+63	; 0x3f
    f072:	2c 97       	sbiw	r28, 0x0c	; 12
    f074:	1f 92       	push	r1
    f076:	8f 93       	push	r24
    f078:	8f e7       	ldi	r24, 0x7F	; 127
    f07a:	93 e0       	ldi	r25, 0x03	; 3
    f07c:	9f 93       	push	r25
    f07e:	8f 93       	push	r24
    f080:	8e 01       	movw	r16, r28
    f082:	01 5b       	subi	r16, 0xB1	; 177
    f084:	1f 4f       	sbci	r17, 0xFF	; 255
    f086:	1f 93       	push	r17
    f088:	0f 93       	push	r16
    f08a:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
    strcpy_P(dialog_text, new_text_ok_ntp_time);
    f08e:	63 e8       	ldi	r22, 0x83	; 131
    f090:	75 e8       	ldi	r23, 0x85	; 133
    f092:	85 e1       	ldi	r24, 0x15	; 21
    f094:	9a e0       	ldi	r25, 0x0A	; 10
    f096:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5795
    strcat(dialog_text, " ");
    f09a:	60 e7       	ldi	r22, 0x70	; 112
    f09c:	76 e0       	ldi	r23, 0x06	; 6
    f09e:	85 e1       	ldi	r24, 0x15	; 21
    f0a0:	9a e0       	ldi	r25, 0x0A	; 10
    f0a2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
    strcat(dialog_text, str2);
    f0a6:	b8 01       	movw	r22, r16
    f0a8:	85 e1       	ldi	r24, 0x15	; 21
    f0aa:	9a e0       	ldi	r25, 0x0A	; 10
    f0ac:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
    f0b0:	0f b6       	in	r0, 0x3f	; 63
    f0b2:	f8 94       	cli
    f0b4:	de bf       	out	0x3e, r29	; 62
    f0b6:	0f be       	out	0x3f, r0	; 63
    f0b8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5804
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    strcpy_P(dialog_text, new_text_error_ntp_time);
  }
}
    f0ba:	cc 5a       	subi	r28, 0xAC	; 172
    f0bc:	df 4f       	sbci	r29, 0xFF	; 255
    f0be:	0f b6       	in	r0, 0x3f	; 63
    f0c0:	f8 94       	cli
    f0c2:	de bf       	out	0x3e, r29	; 62
    f0c4:	0f be       	out	0x3f, r0	; 63
    f0c6:	cd bf       	out	0x3d, r28	; 61
    f0c8:	df 91       	pop	r29
    f0ca:	cf 91       	pop	r28
    f0cc:	1f 91       	pop	r17
    f0ce:	0f 91       	pop	r16
    f0d0:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5800
    strcat(dialog_text, " ");
    strcat(dialog_text, str2);
  }
  else
  {
    selftest_set_0(SELFTEST_ERR_NTP);
    f0d2:	81 e0       	ldi	r24, 0x01	; 1
    f0d4:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5801
    MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
    f0d8:	70 e0       	ldi	r23, 0x00	; 0
    f0da:	60 e0       	ldi	r22, 0x00	; 0
    f0dc:	88 e6       	ldi	r24, 0x68	; 104
    f0de:	90 e0       	ldi	r25, 0x00	; 0
    f0e0:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5802
    strcpy_P(dialog_text, new_text_error_ntp_time);
    f0e4:	6d e6       	ldi	r22, 0x6D	; 109
    f0e6:	75 e8       	ldi	r23, 0x85	; 133
    f0e8:	85 e1       	ldi	r24, 0x15	; 21
    f0ea:	9a e0       	ldi	r25, 0x0A	; 10
    f0ec:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
    f0f0:	e4 cf       	rjmp	.-56     	; 0xf0ba <button_click_ntp_sync_time(unsigned int, unsigned int, unsigned char)+0xf0>

0000f0f2 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1809
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    f0f2:	cf 93       	push	r28
    f0f4:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
  if (idx < MAX_RTDS)
    f0f6:	8a 30       	cpi	r24, 0x0A	; 10
    f0f8:	68 f4       	brcc	.+26     	; 0xf114 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    f0fa:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    f0fc:	24 e1       	ldi	r18, 0x14	; 20
    f0fe:	82 9f       	mul	r24, r18
    f100:	c0 01       	movw	r24, r0
    f102:	11 24       	eor	r1, r1
    f104:	83 54       	subi	r24, 0x43	; 67
    f106:	9a 4f       	sbci	r25, 0xFA	; 250
    f108:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    f10c:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1816
  }
  else
    *active = 255;
}
    f10e:	df 91       	pop	r29
    f110:	cf 91       	pop	r28
    f112:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1815
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    f114:	8f ef       	ldi	r24, 0xFF	; 255
    f116:	fb 01       	movw	r30, r22
    f118:	80 83       	st	Z, r24
    f11a:	f9 cf       	rjmp	.-14     	; 0xf10e <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000f11c <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)>:
_Z25click_rtds_setting_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4752
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint16_t args1, uint16_t args2, uint8_t loop_idx)
{
    f11c:	1f 93       	push	r17
    f11e:	cf 93       	push	r28
    f120:	df 93       	push	r29
    f122:	1f 92       	push	r1
    f124:	cd b7       	in	r28, 0x3d	; 61
    f126:	de b7       	in	r29, 0x3e	; 62
    f128:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4757
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    f12a:	be 01       	movw	r22, r28
    f12c:	6f 5f       	subi	r22, 0xFF	; 255
    f12e:	7f 4f       	sbci	r23, 0xFF	; 255
    f130:	84 2f       	mov	r24, r20
    f132:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4758
  if (active == 1)
    f136:	89 81       	ldd	r24, Y+1	; 0x01
    f138:	81 30       	cpi	r24, 0x01	; 1
    f13a:	31 f4       	brne	.+12     	; 0xf148 <click_rtds_setting_sensor(unsigned int, unsigned int, unsigned char)+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4760
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx, 0);
    f13c:	61 2f       	mov	r22, r17
    f13e:	70 e0       	ldi	r23, 0x00	; 0
    f140:	87 e0       	ldi	r24, 0x07	; 7
    f142:	90 e0       	ldi	r25, 0x00	; 0
    f144:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4762
  }
}
    f148:	0f 90       	pop	r0
    f14a:	df 91       	pop	r29
    f14c:	cf 91       	pop	r28
    f14e:	1f 91       	pop	r17
    f150:	08 95       	ret

0000f152 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1874
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    f152:	1f 93       	push	r17
    f154:	cf 93       	push	r28
    f156:	df 93       	push	r29
    f158:	1f 92       	push	r1
    f15a:	cd b7       	in	r28, 0x3d	; 61
    f15c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f15e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
  {
    remote_tds_get_active(idx, &active);
    f160:	be 01       	movw	r22, r28
    f162:	6f 5f       	subi	r22, 0xFF	; 255
    f164:	7f 4f       	sbci	r23, 0xFF	; 255
    f166:	81 2f       	mov	r24, r17
    f168:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1880
    if (active == 0)
    f16c:	89 81       	ldd	r24, Y+1	; 0x01
    f16e:	88 23       	and	r24, r24
    f170:	21 f0       	breq	.+8      	; 0xf17a <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f172:	1f 5f       	subi	r17, 0xFF	; 255
    f174:	1a 30       	cpi	r17, 0x0A	; 10
    f176:	a1 f7       	brne	.-24     	; 0xf160 <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    f178:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1887
      ret = idx;
      break;
    }
  }
  return ret;
}
    f17a:	81 2f       	mov	r24, r17
    f17c:	0f 90       	pop	r0
    f17e:	df 91       	pop	r29
    f180:	cf 91       	pop	r28
    f182:	1f 91       	pop	r17
    f184:	08 95       	ret

0000f186 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)>:
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4706
  }
  return cnt;
}

void click_rtds_add_sensor(uint16_t args1, uint16_t args2, uint8_t args3)
{
    f186:	1f 93       	push	r17
    f188:	cf 93       	push	r28
    f18a:	df 93       	push	r29
    f18c:	00 d0       	rcall	.+0      	; 0xf18e <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x8>
    f18e:	1f 92       	push	r1
    f190:	1f 92       	push	r1
    f192:	cd b7       	in	r28, 0x3d	; 61
    f194:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4709
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    f196:	0e 94 a9 78 	call	0xf152	; 0xf152 <remote_tds_find_free()>
    f19a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4710
  if (idx != 255)
    f19c:	8f 3f       	cpi	r24, 0xFF	; 255
    f19e:	21 f1       	breq	.+72     	; 0xf1e8 <click_rtds_add_sensor(unsigned int, unsigned int, unsigned char)+0x62>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4712
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    f1a0:	6c eb       	ldi	r22, 0xBC	; 188
    f1a2:	73 e8       	ldi	r23, 0x83	; 131
    f1a4:	ce 01       	movw	r24, r28
    f1a6:	01 96       	adiw	r24, 0x01	; 1
    f1a8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4713
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    f1ac:	70 e0       	ldi	r23, 0x00	; 0
    f1ae:	60 e0       	ldi	r22, 0x00	; 0
    f1b0:	87 e6       	ldi	r24, 0x67	; 103
    f1b2:	90 e0       	ldi	r25, 0x00	; 0
    f1b4:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    f1b8:	be 01       	movw	r22, r28
    f1ba:	6f 5f       	subi	r22, 0xFF	; 255
    f1bc:	7f 4f       	sbci	r23, 0xFF	; 255
    f1be:	85 ef       	ldi	r24, 0xF5	; 245
    f1c0:	99 e0       	ldi	r25, 0x09	; 9
    f1c2:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    f1c6:	82 e1       	ldi	r24, 0x12	; 18
    f1c8:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    f1cc:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    f1d0:	8d ec       	ldi	r24, 0xCD	; 205
    f1d2:	9d e7       	ldi	r25, 0x7D	; 125
    f1d4:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    f1d8:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    f1dc:	89 ed       	ldi	r24, 0xD9	; 217
    f1de:	9f e4       	ldi	r25, 0x4F	; 79
    f1e0:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    f1e4:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z21click_rtds_add_sensorjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4716
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}
    f1e8:	0f 90       	pop	r0
    f1ea:	0f 90       	pop	r0
    f1ec:	0f 90       	pop	r0
    f1ee:	0f 90       	pop	r0
    f1f0:	0f 90       	pop	r0
    f1f2:	df 91       	pop	r29
    f1f4:	cf 91       	pop	r28
    f1f6:	1f 91       	pop	r17
    f1f8:	08 95       	ret

0000f1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1770
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    f1fa:	af 92       	push	r10
    f1fc:	bf 92       	push	r11
    f1fe:	cf 92       	push	r12
    f200:	df 92       	push	r13
    f202:	ef 92       	push	r14
    f204:	ff 92       	push	r15
    f206:	0f 93       	push	r16
    f208:	1f 93       	push	r17
    f20a:	cf 93       	push	r28
    f20c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1772
  char t;
  if (idx < MAX_RTDS)
    f20e:	8a 30       	cpi	r24, 0x0A	; 10
    f210:	88 f5       	brcc	.+98     	; 0xf274 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    f212:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    f214:	94 e1       	ldi	r25, 0x14	; 20
    f216:	89 9f       	mul	r24, r25
    f218:	e0 01       	movw	r28, r0
    f21a:	11 24       	eor	r1, r1
    f21c:	6e 01       	movw	r12, r28
    f21e:	e6 e5       	ldi	r30, 0x56	; 86
    f220:	ce 1a       	sub	r12, r30
    f222:	ea ef       	ldi	r30, 0xFA	; 250
    f224:	de 0a       	sbc	r13, r30
    f226:	8a 01       	movw	r16, r20
    f228:	5e 01       	movw	r10, r28
    f22a:	f4 e4       	ldi	r31, 0x44	; 68
    f22c:	af 1a       	sub	r10, r31
    f22e:	fa ef       	ldi	r31, 0xFA	; 250
    f230:	bf 0a       	sbc	r11, r31
    f232:	c6 01       	movw	r24, r12
    f234:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
      name[i] = t;
    f238:	f8 01       	movw	r30, r16
    f23a:	81 93       	st	Z+, r24
    f23c:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
      name[i + 1] = 0;
    f23e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1779
      if (t == 0) break;
    f240:	88 23       	and	r24, r24
    f242:	31 f0       	breq	.+12     	; 0xf250 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    f244:	ff ef       	ldi	r31, 0xFF	; 255
    f246:	cf 1a       	sub	r12, r31
    f248:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    f24a:	ca 14       	cp	r12, r10
    f24c:	db 04       	cpc	r13, r11
    f24e:	89 f7       	brne	.-30     	; 0xf232 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1781
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    f250:	ce 01       	movw	r24, r28
    f252:	83 54       	subi	r24, 0x43	; 67
    f254:	9a 4f       	sbci	r25, 0xFA	; 250
    f256:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
    f25a:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
  }
  else
  {
    *active = 255;
    f25c:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1787
  }
}
    f25e:	df 91       	pop	r29
    f260:	cf 91       	pop	r28
    f262:	1f 91       	pop	r17
    f264:	0f 91       	pop	r16
    f266:	ff 90       	pop	r15
    f268:	ef 90       	pop	r14
    f26a:	df 90       	pop	r13
    f26c:	cf 90       	pop	r12
    f26e:	bf 90       	pop	r11
    f270:	af 90       	pop	r10
    f272:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    f274:	8f ef       	ldi	r24, 0xFF	; 255
    f276:	fb 01       	movw	r30, r22
    f278:	f1 cf       	rjmp	.-30     	; 0xf25c <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000f27a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
/*
   v args2 je bud vylistovat vsechny a nebo pouze aktivni, pouze neaktivni
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    f27a:	7f 92       	push	r7
    f27c:	8f 92       	push	r8
    f27e:	9f 92       	push	r9
    f280:	af 92       	push	r10
    f282:	bf 92       	push	r11
    f284:	cf 92       	push	r12
    f286:	df 92       	push	r13
    f288:	ef 92       	push	r14
    f28a:	ff 92       	push	r15
    f28c:	0f 93       	push	r16
    f28e:	1f 93       	push	r17
    f290:	cf 93       	push	r28
    f292:	df 93       	push	r29
    f294:	cd b7       	in	r28, 0x3d	; 61
    f296:	de b7       	in	r29, 0x3e	; 62
    f298:	aa 97       	sbiw	r28, 0x2a	; 42
    f29a:	0f b6       	in	r0, 0x3f	; 63
    f29c:	f8 94       	cli
    f29e:	de bf       	out	0x3e, r29	; 62
    f2a0:	0f be       	out	0x3f, r0	; 63
    f2a2:	cd bf       	out	0x3d, r28	; 61
    f2a4:	78 2e       	mov	r7, r24
    f2a6:	e4 2e       	mov	r14, r20
    f2a8:	69 01       	movw	r12, r18
    f2aa:	58 01       	movw	r10, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4826
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
    f2ac:	63 ed       	ldi	r22, 0xD3	; 211
    f2ae:	73 e8       	ldi	r23, 0x83	; 131
    f2b0:	c9 01       	movw	r24, r18
    f2b2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
  strcpy(line2, "");
    f2b6:	62 e0       	ldi	r22, 0x02	; 2
    f2b8:	73 e0       	ldi	r23, 0x03	; 3
    f2ba:	c8 01       	movw	r24, r16
    f2bc:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
    f2c0:	88 ec       	ldi	r24, 0xC8	; 200
    f2c2:	88 2e       	mov	r8, r24
    f2c4:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f2c6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4824
   v args1 je index poradi prvku grafickeho menu
*/
void button_get_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    f2c8:	f1 2c       	mov	r15, r1
tds_used():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    f2ca:	c4 01       	movw	r24, r8
    f2cc:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4832
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (((tds_used(idx) == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE)) || args3 == INPUT_SENSOR_SHOW_ALL)
    f2d0:	81 30       	cpi	r24, 0x01	; 1
    f2d2:	11 f4       	brne	.+4      	; 0xf2d8 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x5e>
    f2d4:	ee 20       	and	r14, r14
    f2d6:	19 f0       	breq	.+6      	; 0xf2de <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x64>
    f2d8:	81 e0       	ldi	r24, 0x01	; 1
    f2da:	e8 12       	cpse	r14, r24
    f2dc:	2f c0       	rjmp	.+94     	; 0xf33c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
    {
      if (cri == args1)
    f2de:	7f 10       	cpse	r7, r15
    f2e0:	2c c0       	rjmp	.+88     	; 0xf33a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xc0>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    f2e2:	be 01       	movw	r22, r28
    f2e4:	6f 5f       	subi	r22, 0xFF	; 255
    f2e6:	7f 4f       	sbci	r23, 0xFF	; 255
    f2e8:	81 2f       	mov	r24, r17
    f2ea:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    f2ee:	be 01       	movw	r22, r28
    f2f0:	63 5f       	subi	r22, 0xF3	; 243
    f2f2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2f4:	ce 01       	movw	r24, r28
    f2f6:	47 96       	adiw	r24, 0x17	; 23
    f2f8:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
_Z28button_get_show_default_temphhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4837
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    f2fc:	be 01       	movw	r22, r28
    f2fe:	69 5e       	subi	r22, 0xE9	; 233
    f300:	7f 4f       	sbci	r23, 0xFF	; 255
    f302:	c5 01       	movw	r24, r10
    f304:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4838
        strcpy_P(line1, nastaveni_onewire);
    f308:	63 ed       	ldi	r22, 0xD3	; 211
    f30a:	73 e8       	ldi	r23, 0x83	; 131
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4856
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    f30c:	c6 01       	movw	r24, r12
    f30e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4865
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    f312:	aa 96       	adiw	r28, 0x2a	; 42
    f314:	0f b6       	in	r0, 0x3f	; 63
    f316:	f8 94       	cli
    f318:	de bf       	out	0x3e, r29	; 62
    f31a:	0f be       	out	0x3f, r0	; 63
    f31c:	cd bf       	out	0x3d, r28	; 61
    f31e:	df 91       	pop	r29
    f320:	cf 91       	pop	r28
    f322:	1f 91       	pop	r17
    f324:	0f 91       	pop	r16
    f326:	ff 90       	pop	r15
    f328:	ef 90       	pop	r14
    f32a:	df 90       	pop	r13
    f32c:	cf 90       	pop	r12
    f32e:	bf 90       	pop	r11
    f330:	af 90       	pop	r10
    f332:	9f 90       	pop	r9
    f334:	8f 90       	pop	r8
    f336:	7f 90       	pop	r7
    f338:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4841
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    f33a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4830
  uint8_t active;
  strcpy_P(line1, nastaveni_onewire);
  strcpy(line2, "");
  //printf("gg %d %d %d\n", args1, args2, args3);
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f33c:	1f 5f       	subi	r17, 0xFF	; 255
    f33e:	86 e1       	ldi	r24, 0x16	; 22
    f340:	88 0e       	add	r8, r24
    f342:	91 1c       	adc	r9, r1
    f344:	16 30       	cpi	r17, 0x06	; 6
    f346:	09 f6       	brne	.-126    	; 0xf2ca <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
      }
      cri++;
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
    f348:	64 ec       	ldi	r22, 0xC4	; 196
    f34a:	73 e8       	ldi	r23, 0x83	; 131
    f34c:	c6 01       	movw	r24, r12
    f34e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4846
  strcpy(line2, "");
    f352:	62 e0       	ldi	r22, 0x02	; 2
    f354:	73 e0       	ldi	r23, 0x03	; 3
    f356:	c5 01       	movw	r24, r10
    f358:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f35c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4849
  {
    remote_tds_get_active(idx, &active);
    f35e:	be 01       	movw	r22, r28
    f360:	6f 5f       	subi	r22, 0xFF	; 255
    f362:	7f 4f       	sbci	r23, 0xFF	; 255
    f364:	81 2f       	mov	r24, r17
    f366:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    f36a:	89 81       	ldd	r24, Y+1	; 0x01
    f36c:	81 30       	cpi	r24, 0x01	; 1
    f36e:	d9 f4       	brne	.+54     	; 0xf3a6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    f370:	e1 10       	cpse	r14, r1
    f372:	19 c0       	rjmp	.+50     	; 0xf3a6 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x12c>
    f374:	81 2f       	mov	r24, r17
    f376:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
    f37a:	81 30       	cpi	r24, 0x01	; 1
    f37c:	b9 f4       	brne	.+46     	; 0xf3ac <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4852
    {
      if (cri == args1)
    f37e:	7f 10       	cpse	r7, r15
    f380:	19 c0       	rjmp	.+50     	; 0xf3b4 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x13a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
      {
        remote_tds_get_complete(idx, &active, name);
    f382:	ae 01       	movw	r20, r28
    f384:	49 5e       	subi	r20, 0xE9	; 233
    f386:	5f 4f       	sbci	r21, 0xFF	; 255
    f388:	be 01       	movw	r22, r28
    f38a:	6f 5f       	subi	r22, 0xFF	; 255
    f38c:	7f 4f       	sbci	r23, 0xFF	; 255
    f38e:	81 2f       	mov	r24, r17
    f390:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4855
        strcpy(line2, name);
    f394:	be 01       	movw	r22, r28
    f396:	69 5e       	subi	r22, 0xE9	; 233
    f398:	7f 4f       	sbci	r23, 0xFF	; 255
    f39a:	c5 01       	movw	r24, r10
    f39c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4856
        strcpy_P(line1, nastaveni_rtds);
    f3a0:	64 ec       	ldi	r22, 0xC4	; 196
    f3a2:	73 e8       	ldi	r23, 0x83	; 131
    f3a4:	b3 cf       	rjmp	.-154    	; 0xf30c <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4850
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_active(idx, &active);
    if (((active == 1) && (args3 == INPUT_SENSOR_SHOW_ACTIVE) && (remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP )) || args3 == INPUT_SENSOR_SHOW_ALL)
    f3a6:	81 e0       	ldi	r24, 0x01	; 1
    f3a8:	e8 16       	cp	r14, r24
    f3aa:	49 f3       	breq	.-46     	; 0xf37e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
    }
  }
  /// pro rtds
  strcpy_P(line1, nastaveni_rtds);
  strcpy(line2, "");
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f3ac:	1f 5f       	subi	r17, 0xFF	; 255
    f3ae:	1a 30       	cpi	r17, 0x0A	; 10
    f3b0:	b1 f6       	brne	.-84     	; 0xf35e <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0xe4>
    f3b2:	af cf       	rjmp	.-162    	; 0xf312 <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4859
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
        goto button_get_show_default_temp_end;
      }
      cri++;
    f3b4:	f3 94       	inc	r15
    f3b6:	fa cf       	rjmp	.-12     	; 0xf3ac <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)+0x132>

0000f3b8 <button_get_show_default_temp_1(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z30button_get_show_default_temp_1hhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
  /// hack kvuli goto
  cri = 0;
}

void button_get_show_default_temp_1(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    f3b8:	0f 93       	push	r16
    f3ba:	1f 93       	push	r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4869
  button_get_show_default_temp(args1, args2, args3, line1, line2);
    f3bc:	0e 94 3d 79 	call	0xf27a	; 0xf27a <button_get_show_default_temp(unsigned char, unsigned char, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4870
}
    f3c0:	1f 91       	pop	r17
    f3c2:	0f 91       	pop	r16
    f3c4:	08 95       	ret

0000f3c6 <get_global_temp(unsigned char, char*, float*)>:
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4767
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
    f3c6:	8f 92       	push	r8
    f3c8:	9f 92       	push	r9
    f3ca:	af 92       	push	r10
    f3cc:	bf 92       	push	r11
    f3ce:	cf 92       	push	r12
    f3d0:	df 92       	push	r13
    f3d2:	ef 92       	push	r14
    f3d4:	ff 92       	push	r15
    f3d6:	0f 93       	push	r16
    f3d8:	1f 93       	push	r17
    f3da:	cf 93       	push	r28
    f3dc:	df 93       	push	r29
    f3de:	cd b7       	in	r28, 0x3d	; 61
    f3e0:	de b7       	in	r29, 0x3e	; 62
    f3e2:	67 97       	sbiw	r28, 0x17	; 23
    f3e4:	0f b6       	in	r0, 0x3f	; 63
    f3e6:	f8 94       	cli
    f3e8:	de bf       	out	0x3e, r29	; 62
    f3ea:	0f be       	out	0x3f, r0	; 63
    f3ec:	cd bf       	out	0x3d, r28	; 61
    f3ee:	e8 2e       	mov	r14, r24
    f3f0:	5b 01       	movw	r10, r22
    f3f2:	4a 01       	movw	r8, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4772
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    f3f4:	6e eb       	ldi	r22, 0xBE	; 190
    f3f6:	73 e8       	ldi	r23, 0x83	; 131
    f3f8:	c5 01       	movw	r24, r10
    f3fa:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4773
  *temp = 0.0;
    f3fe:	f4 01       	movw	r30, r8
    f400:	10 82       	st	Z, r1
    f402:	11 82       	std	Z+1, r1	; 0x01
    f404:	12 82       	std	Z+2, r1	; 0x02
    f406:	13 82       	std	Z+3, r1	; 0x03
    f408:	d1 2c       	mov	r13, r1
    f40a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    f40c:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    f40e:	1e e1       	ldi	r17, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4776
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    f410:	be 01       	movw	r22, r28
    f412:	6f 5f       	subi	r22, 0xFF	; 255
    f414:	7f 4f       	sbci	r23, 0xFF	; 255
    f416:	8c 2d       	mov	r24, r12
    f418:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
    f41c:	81 30       	cpi	r24, 0x01	; 1
    f41e:	f1 f5       	brne	.+124    	; 0xf49c <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4777
      if (tds.used == 1)
    f420:	89 81       	ldd	r24, Y+1	; 0x01
    f422:	81 30       	cpi	r24, 0x01	; 1
    f424:	d9 f5       	brne	.+118    	; 0xf49c <get_global_temp(unsigned char, char*, float*)+0xd6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4779
      {
        if (cri == device)
    f426:	e0 12       	cpse	r14, r16
    f428:	38 c0       	rjmp	.+112    	; 0xf49a <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4781
        {
          strcpy(name, tds.name);
    f42a:	be 01       	movw	r22, r28
    f42c:	63 5f       	subi	r22, 0xF3	; 243
    f42e:	7f 4f       	sbci	r23, 0xFF	; 255
    f430:	c5 01       	movw	r24, r10
    f432:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4782
          if (status_tds18s20[idx].online == True)
    f436:	1c 9d       	mul	r17, r12
    f438:	f0 01       	movw	r30, r0
    f43a:	1d 9d       	mul	r17, r13
    f43c:	f0 0d       	add	r31, r0
    f43e:	11 24       	eor	r1, r1
    f440:	e2 53       	subi	r30, 0x32	; 50
    f442:	f4 4f       	sbci	r31, 0xF4	; 244
    f444:	f3 8c       	ldd	r15, Z+27	; 0x1b
    f446:	81 e0       	ldi	r24, 0x01	; 1
    f448:	f8 12       	cpse	r15, r24
    f44a:	27 c0       	rjmp	.+78     	; 0xf49a <get_global_temp(unsigned char, char*, float*)+0xd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4784
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    f44c:	65 81       	ldd	r22, Z+5	; 0x05
    f44e:	76 81       	ldd	r23, Z+6	; 0x06
    f450:	07 2e       	mov	r0, r23
    f452:	00 0c       	add	r0, r0
    f454:	88 0b       	sbc	r24, r24
    f456:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    f458:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    f45c:	20 e0       	ldi	r18, 0x00	; 0
    f45e:	30 e0       	ldi	r19, 0x00	; 0
    f460:	4a e7       	ldi	r20, 0x7A	; 122
    f462:	54 e4       	ldi	r21, 0x44	; 68
    f464:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
    f468:	f4 01       	movw	r30, r8
    f46a:	60 83       	st	Z, r22
    f46c:	71 83       	std	Z+1, r23	; 0x01
    f46e:	82 83       	std	Z+2, r24	; 0x02
    f470:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4813
    }
  }
  /// goto skok
get_global_temp_end:
  return ret;
}
    f472:	8f 2d       	mov	r24, r15
    f474:	67 96       	adiw	r28, 0x17	; 23
    f476:	0f b6       	in	r0, 0x3f	; 63
    f478:	f8 94       	cli
    f47a:	de bf       	out	0x3e, r29	; 62
    f47c:	0f be       	out	0x3f, r0	; 63
    f47e:	cd bf       	out	0x3d, r28	; 61
    f480:	df 91       	pop	r29
    f482:	cf 91       	pop	r28
    f484:	1f 91       	pop	r17
    f486:	0f 91       	pop	r16
    f488:	ff 90       	pop	r15
    f48a:	ef 90       	pop	r14
    f48c:	df 90       	pop	r13
    f48e:	cf 90       	pop	r12
    f490:	bf 90       	pop	r11
    f492:	af 90       	pop	r10
    f494:	9f 90       	pop	r9
    f496:	8f 90       	pop	r8
    f498:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4789
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    f49a:	0f 5f       	subi	r16, 0xFF	; 255
    f49c:	ff ef       	ldi	r31, 0xFF	; 255
    f49e:	cf 1a       	sub	r12, r31
    f4a0:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4775
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f4a2:	86 e0       	ldi	r24, 0x06	; 6
    f4a4:	c8 16       	cp	r12, r24
    f4a6:	d1 04       	cpc	r13, r1
    f4a8:	09 f0       	breq	.+2      	; 0xf4ac <get_global_temp(unsigned char, char*, float*)+0xe6>
    f4aa:	b2 cf       	rjmp	.-156    	; 0xf410 <get_global_temp(unsigned char, char*, float*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f4ac:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
  {
    remote_tds_get_active(idx, &active);
    f4ae:	be 01       	movw	r22, r28
    f4b0:	69 5e       	subi	r22, 0xE9	; 233
    f4b2:	7f 4f       	sbci	r23, 0xFF	; 255
    f4b4:	81 2f       	mov	r24, r17
    f4b6:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
    if (active == 1)
    f4ba:	8f 89       	ldd	r24, Y+23	; 0x17
    f4bc:	81 30       	cpi	r24, 0x01	; 1
    f4be:	f1 f4       	brne	.+60     	; 0xf4fc <get_global_temp(unsigned char, char*, float*)+0x136>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
    {
      if (cri == device)
    f4c0:	e0 12       	cpse	r14, r16
    f4c2:	1b c0       	rjmp	.+54     	; 0xf4fa <get_global_temp(unsigned char, char*, float*)+0x134>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4799
      {
        remote_tds_get_complete(idx, &active, name);
    f4c4:	a5 01       	movw	r20, r10
    f4c6:	be 01       	movw	r22, r28
    f4c8:	69 5e       	subi	r22, 0xE9	; 233
    f4ca:	7f 4f       	sbci	r23, 0xFF	; 255
    f4cc:	81 2f       	mov	r24, r17
    f4ce:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4800
        if (remote_tds_get_last_update(idx) < 250 && remote_tds_get_type(idx) == RTDS_REMOTE_TYPE_TEMP)
    f4d2:	81 2f       	mov	r24, r17
    f4d4:	0e 94 1a 53 	call	0xa634	; 0xa634 <remote_tds_get_last_update(unsigned char)>
    f4d8:	8a 3f       	cpi	r24, 0xFA	; 250
    f4da:	78 f4       	brcc	.+30     	; 0xf4fa <get_global_temp(unsigned char, char*, float*)+0x134>
    f4dc:	81 2f       	mov	r24, r17
    f4de:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
    f4e2:	f8 2e       	mov	r15, r24
    f4e4:	e1 e0       	ldi	r30, 0x01	; 1
    f4e6:	8e 13       	cpse	r24, r30
    f4e8:	08 c0       	rjmp	.+16     	; 0xf4fa <get_global_temp(unsigned char, char*, float*)+0x134>
remote_tds_get_data():
    f4ea:	81 2f       	mov	r24, r17
    f4ec:	0e 94 f4 52 	call	0xa5e8	; 0xa5e8 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z15get_global_temphPcPf():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    f4f0:	bc 01       	movw	r22, r24
    f4f2:	99 0f       	add	r25, r25
    f4f4:	88 0b       	sbc	r24, r24
    f4f6:	99 0b       	sbc	r25, r25
    f4f8:	af cf       	rjmp	.-162    	; 0xf458 <get_global_temp(unsigned char, char*, float*)+0x92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4807
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    f4fa:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4792
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f4fc:	1f 5f       	subi	r17, 0xFF	; 255
    f4fe:	1a 30       	cpi	r17, 0x0A	; 10
    f500:	b1 f6       	brne	.-84     	; 0xf4ae <get_global_temp(unsigned char, char*, float*)+0xe8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4770
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    f502:	f1 2c       	mov	r15, r1
    f504:	b6 cf       	rjmp	.-148    	; 0xf472 <get_global_temp(unsigned char, char*, float*)+0xac>

0000f506 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z27display_element_show_temp_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4161
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    f506:	8f 92       	push	r8
    f508:	9f 92       	push	r9
    f50a:	af 92       	push	r10
    f50c:	bf 92       	push	r11
    f50e:	cf 92       	push	r12
    f510:	df 92       	push	r13
    f512:	ef 92       	push	r14
    f514:	ff 92       	push	r15
    f516:	0f 93       	push	r16
    f518:	1f 93       	push	r17
    f51a:	cf 93       	push	r28
    f51c:	df 93       	push	r29
    f51e:	cd b7       	in	r28, 0x3d	; 61
    f520:	de b7       	in	r29, 0x3e	; 62
    f522:	e8 97       	sbiw	r28, 0x38	; 56
    f524:	0f b6       	in	r0, 0x3f	; 63
    f526:	f8 94       	cli
    f528:	de bf       	out	0x3e, r29	; 62
    f52a:	0f be       	out	0x3f, r0	; 63
    f52c:	cd bf       	out	0x3d, r28	; 61
    f52e:	5c 01       	movw	r10, r24
    f530:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4166
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  stat = get_global_temp(default_show_temp, str2, &te);
    f532:	ae 01       	movw	r20, r28
    f534:	4b 5c       	subi	r20, 0xCB	; 203
    f536:	5f 4f       	sbci	r21, 0xFF	; 255
    f538:	be 01       	movw	r22, r28
    f53a:	6f 5d       	subi	r22, 0xDF	; 223
    f53c:	7f 4f       	sbci	r23, 0xFF	; 255
    f53e:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <default_show_temp>
    f542:	0e 94 e3 79 	call	0xf3c6	; 0xf3c6 <get_global_temp(unsigned char, char*, float*)>
    f546:	24 e1       	ldi	r18, 0x14	; 20
    f548:	82 0e       	add	r8, r18
    f54a:	91 1c       	adc	r9, r1
    f54c:	34 e0       	ldi	r19, 0x04	; 4
    f54e:	a3 0e       	add	r10, r19
    f550:	b1 1c       	adc	r11, r1
    f552:	9e 01       	movw	r18, r28
    f554:	2f 5f       	subi	r18, 0xFF	; 255
    f556:	3f 4f       	sbci	r19, 0xFF	; 255
    f558:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4167
  if (stat == 1)
    f55a:	81 30       	cpi	r24, 0x01	; 1
    f55c:	a9 f5       	brne	.+106    	; 0xf5c8 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4169
  {
    dtostrf(te, 4, 1, str1);
    f55e:	6d a9       	ldd	r22, Y+53	; 0x35
    f560:	7e a9       	ldd	r23, Y+54	; 0x36
    f562:	8f a9       	ldd	r24, Y+55	; 0x37
    f564:	98 ad       	ldd	r25, Y+56	; 0x38
    f566:	89 01       	movw	r16, r18
    f568:	21 e0       	ldi	r18, 0x01	; 1
    f56a:	44 e0       	ldi	r20, 0x04	; 4
    f56c:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4170
    if (strlen(str1) <= 4)
    f570:	f6 01       	movw	r30, r12
    f572:	01 90       	ld	r0, Z+
    f574:	00 20       	and	r0, r0
    f576:	e9 f7       	brne	.-6      	; 0xf572 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x6c>
    f578:	31 97       	sbiw	r30, 0x01	; 1
    f57a:	ec 19       	sub	r30, r12
    f57c:	fd 09       	sbc	r31, r13
    f57e:	35 97       	sbiw	r30, 0x05	; 5
    f580:	28 f4       	brcc	.+10     	; 0xf58c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x86>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4171
      strcat(str1, "C");
    f582:	6e e1       	ldi	r22, 0x1E	; 30
    f584:	77 e0       	ldi	r23, 0x07	; 7
    f586:	c6 01       	movw	r24, r12
    f588:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4172
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    f58c:	ee 24       	eor	r14, r14
    f58e:	ea 94       	dec	r14
    f590:	fe 2c       	mov	r15, r14
    f592:	10 e0       	ldi	r17, 0x00	; 0
    f594:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    f596:	28 e0       	ldi	r18, 0x08	; 8
    f598:	a4 01       	movw	r20, r8
    f59a:	b5 01       	movw	r22, r10
    f59c:	c6 01       	movw	r24, r12
    f59e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4179
  }
}
    f5a2:	e8 96       	adiw	r28, 0x38	; 56
    f5a4:	0f b6       	in	r0, 0x3f	; 63
    f5a6:	f8 94       	cli
    f5a8:	de bf       	out	0x3e, r29	; 62
    f5aa:	0f be       	out	0x3f, r0	; 63
    f5ac:	cd bf       	out	0x3d, r28	; 61
    f5ae:	df 91       	pop	r29
    f5b0:	cf 91       	pop	r28
    f5b2:	1f 91       	pop	r17
    f5b4:	0f 91       	pop	r16
    f5b6:	ff 90       	pop	r15
    f5b8:	ef 90       	pop	r14
    f5ba:	df 90       	pop	r13
    f5bc:	cf 90       	pop	r12
    f5be:	bf 90       	pop	r11
    f5c0:	af 90       	pop	r10
    f5c2:	9f 90       	pop	r9
    f5c4:	8f 90       	pop	r8
    f5c6:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4176
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    f5c8:	6e eb       	ldi	r22, 0xBE	; 190
    f5ca:	73 e8       	ldi	r23, 0x83	; 131
    f5cc:	c9 01       	movw	r24, r18
    f5ce:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4177
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    f5d2:	ee 24       	eor	r14, r14
    f5d4:	ea 94       	dec	r14
    f5d6:	fe 2c       	mov	r15, r14
    f5d8:	00 e0       	ldi	r16, 0x00	; 0
    f5da:	18 ef       	ldi	r17, 0xF8	; 248
    f5dc:	dc cf       	rjmp	.-72     	; 0xf596 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x90>

0000f5de <display_element_show_temp_decorate_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_temp_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4147
}
///

/// dekorativni funkce pro zobrazeni teploty
void display_element_show_temp_decorate_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    f5de:	af 92       	push	r10
    f5e0:	bf 92       	push	r11
    f5e2:	cf 92       	push	r12
    f5e4:	df 92       	push	r13
    f5e6:	ef 92       	push	r14
    f5e8:	ff 92       	push	r15
    f5ea:	0f 93       	push	r16
    f5ec:	1f 93       	push	r17
    f5ee:	cf 93       	push	r28
    f5f0:	df 93       	push	r29
    f5f2:	cd b7       	in	r28, 0x3d	; 61
    f5f4:	de b7       	in	r29, 0x3e	; 62
    f5f6:	e8 97       	sbiw	r28, 0x38	; 56
    f5f8:	0f b6       	in	r0, 0x3f	; 63
    f5fa:	f8 94       	cli
    f5fc:	de bf       	out	0x3e, r29	; 62
    f5fe:	0f be       	out	0x3f, r0	; 63
    f600:	cd bf       	out	0x3d, r28	; 61
    f602:	6c 01       	movw	r12, r24
    f604:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4152
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    f606:	61 e1       	ldi	r22, 0x11	; 17
    f608:	73 e8       	ldi	r23, 0x83	; 131
    f60a:	ce 01       	movw	r24, r28
    f60c:	01 96       	adiw	r24, 0x01	; 1
    f60e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4153
  stat = get_global_temp(default_show_temp, str2, &te);
    f612:	ae 01       	movw	r20, r28
    f614:	4b 5c       	subi	r20, 0xCB	; 203
    f616:	5f 4f       	sbci	r21, 0xFF	; 255
    f618:	be 01       	movw	r22, r28
    f61a:	6f 5d       	subi	r22, 0xDF	; 223
    f61c:	7f 4f       	sbci	r23, 0xFF	; 255
    f61e:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <default_show_temp>
    f622:	0e 94 e3 79 	call	0xf3c6	; 0xf3c6 <get_global_temp(unsigned char, char*, float*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4154
  strcat(str1, str2);
    f626:	be 01       	movw	r22, r28
    f628:	6f 5d       	subi	r22, 0xDF	; 223
    f62a:	7f 4f       	sbci	r23, 0xFF	; 255
    f62c:	ce 01       	movw	r24, r28
    f62e:	01 96       	adiw	r24, 0x01	; 1
    f630:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4155
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    f634:	a5 01       	movw	r20, r10
    f636:	4b 5f       	subi	r20, 0xFB	; 251
    f638:	5f 4f       	sbci	r21, 0xFF	; 255
    f63a:	b6 01       	movw	r22, r12
    f63c:	6b 5f       	subi	r22, 0xFB	; 251
    f63e:	7f 4f       	sbci	r23, 0xFF	; 255
    f640:	ee 24       	eor	r14, r14
    f642:	ea 94       	dec	r14
    f644:	fe 2c       	mov	r15, r14
    f646:	10 e0       	ldi	r17, 0x00	; 0
    f648:	00 e0       	ldi	r16, 0x00	; 0
    f64a:	21 e0       	ldi	r18, 0x01	; 1
    f64c:	ce 01       	movw	r24, r28
    f64e:	01 96       	adiw	r24, 0x01	; 1
    f650:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    f654:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    f658:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z36display_element_show_temp_decorate_1jjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4157
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    f65c:	95 01       	movw	r18, r10
    f65e:	2c 5a       	subi	r18, 0xAC	; 172
    f660:	3f 4f       	sbci	r19, 0xFF	; 255
    f662:	a6 01       	movw	r20, r12
    f664:	4c 50       	subi	r20, 0x0C	; 12
    f666:	5f 4f       	sbci	r21, 0xFF	; 255
    f668:	b5 01       	movw	r22, r10
    f66a:	c6 01       	movw	r24, r12
    f66c:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4158
}
    f670:	e8 96       	adiw	r28, 0x38	; 56
    f672:	0f b6       	in	r0, 0x3f	; 63
    f674:	f8 94       	cli
    f676:	de bf       	out	0x3e, r29	; 62
    f678:	0f be       	out	0x3f, r0	; 63
    f67a:	cd bf       	out	0x3d, r28	; 61
    f67c:	df 91       	pop	r29
    f67e:	cf 91       	pop	r28
    f680:	1f 91       	pop	r17
    f682:	0f 91       	pop	r16
    f684:	ff 90       	pop	r15
    f686:	ef 90       	pop	r14
    f688:	df 90       	pop	r13
    f68a:	cf 90       	pop	r12
    f68c:	bf 90       	pop	r11
    f68e:	af 90       	pop	r10
    f690:	08 95       	ret

0000f692 <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4579
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, uint8_t args3, char *line1, char *line2)
{
    f692:	cf 92       	push	r12
    f694:	df 92       	push	r13
    f696:	ff 92       	push	r15
    f698:	0f 93       	push	r16
    f69a:	1f 93       	push	r17
    f69c:	cf 93       	push	r28
    f69e:	df 93       	push	r29
    f6a0:	1f 92       	push	r1
    f6a2:	cd b7       	in	r28, 0x3d	; 61
    f6a4:	de b7       	in	r29, 0x3e	; 62
    f6a6:	f8 2e       	mov	r15, r24
    f6a8:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
  uint8_t active;
  strcpy_P(line1, text_not_used);
    f6aa:	6b e9       	ldi	r22, 0x9B	; 155
    f6ac:	73 e8       	ldi	r23, 0x83	; 131
    f6ae:	c9 01       	movw	r24, r18
    f6b0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4582
  line2[0] = 0;
    f6b4:	f8 01       	movw	r30, r16
    f6b6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4583
  remote_tds_get_active(args1, &active);
    f6b8:	be 01       	movw	r22, r28
    f6ba:	6f 5f       	subi	r22, 0xFF	; 255
    f6bc:	7f 4f       	sbci	r23, 0xFF	; 255
    f6be:	8f 2d       	mov	r24, r15
    f6c0:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4584
  if (active == 1)
    f6c4:	89 81       	ldd	r24, Y+1	; 0x01
    f6c6:	81 30       	cpi	r24, 0x01	; 1
    f6c8:	89 f4       	brne	.+34     	; 0xf6ec <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4586
  {
    remote_tds_get_complete(args1, &active, line1);
    f6ca:	a6 01       	movw	r20, r12
    f6cc:	be 01       	movw	r22, r28
    f6ce:	6f 5f       	subi	r22, 0xFF	; 255
    f6d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6d2:	8f 2d       	mov	r24, r15
    f6d4:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
    if (remote_tds_get_type(args1) == RTDS_REMOTE_TYPE_TEMP)
    f6d8:	8f 2d       	mov	r24, r15
    f6da:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
    f6de:	81 30       	cpi	r24, 0x01	; 1
    f6e0:	29 f4       	brne	.+10     	; 0xf6ec <get_function_rtds_text_button(unsigned char, unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4588
      strcpy_P(line2, new_text_rtds_type_temp);
    f6e2:	62 e7       	ldi	r22, 0x72	; 114
    f6e4:	73 e8       	ldi	r23, 0x83	; 131
    f6e6:	c8 01       	movw	r24, r16
    f6e8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4590
  }
}
    f6ec:	0f 90       	pop	r0
    f6ee:	df 91       	pop	r29
    f6f0:	cf 91       	pop	r28
    f6f2:	1f 91       	pop	r17
    f6f4:	0f 91       	pop	r16
    f6f6:	ff 90       	pop	r15
    f6f8:	df 90       	pop	r13
    f6fa:	cf 90       	pop	r12
    f6fc:	08 95       	ret

0000f6fe <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4260
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    f6fe:	5f 92       	push	r5
    f700:	6f 92       	push	r6
    f702:	7f 92       	push	r7
    f704:	8f 92       	push	r8
    f706:	9f 92       	push	r9
    f708:	af 92       	push	r10
    f70a:	bf 92       	push	r11
    f70c:	cf 92       	push	r12
    f70e:	df 92       	push	r13
    f710:	ef 92       	push	r14
    f712:	ff 92       	push	r15
    f714:	0f 93       	push	r16
    f716:	1f 93       	push	r17
    f718:	cf 93       	push	r28
    f71a:	df 93       	push	r29
    f71c:	cd b7       	in	r28, 0x3d	; 61
    f71e:	de b7       	in	r29, 0x3e	; 62
    f720:	cd 54       	subi	r28, 0x4D	; 77
    f722:	d1 09       	sbc	r29, r1
    f724:	0f b6       	in	r0, 0x3f	; 63
    f726:	f8 94       	cli
    f728:	de bf       	out	0x3e, r29	; 62
    f72a:	0f be       	out	0x3f, r0	; 63
    f72c:	cd bf       	out	0x3d, r28	; 61
    f72e:	3c 01       	movw	r6, r24
    f730:	5b 01       	movw	r10, r22
    f732:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    f734:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    f738:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4268
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    f73c:	26 0f       	add	r18, r22
    f73e:	37 1f       	adc	r19, r23
    f740:	48 0f       	add	r20, r24
    f742:	59 1f       	adc	r21, r25
    f744:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4269
  remote_tds_get_complete(args2, &active, name);
    f748:	ae 01       	movw	r20, r28
    f74a:	45 5c       	subi	r20, 0xC5	; 197
    f74c:	5f 4f       	sbci	r21, 0xFF	; 255
    f74e:	be 01       	movw	r22, r28
    f750:	63 5b       	subi	r22, 0xB3	; 179
    f752:	7f 4f       	sbci	r23, 0xFF	; 255
    f754:	8e 2d       	mov	r24, r14
    f756:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
  if (active == 1)
    f75a:	2e 96       	adiw	r28, 0x0e	; 14
    f75c:	8f ad       	ldd	r24, Y+63	; 0x3f
    f75e:	2e 97       	sbiw	r28, 0x0e	; 14
    f760:	81 30       	cpi	r24, 0x01	; 1
    f762:	09 f0       	breq	.+2      	; 0xf766 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x68>
    f764:	c2 c0       	rjmp	.+388    	; 0xf8ea <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4273
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    f766:	6b e6       	ldi	r22, 0x6B	; 107
    f768:	73 e8       	ldi	r23, 0x83	; 131
    f76a:	ce 01       	movw	r24, r28
    f76c:	01 96       	adiw	r24, 0x01	; 1
    f76e:	6c 01       	movw	r12, r24
    f770:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4274
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    f774:	43 01       	movw	r8, r6
    f776:	95 e0       	ldi	r25, 0x05	; 5
    f778:	89 0e       	add	r8, r25
    f77a:	91 1c       	adc	r9, r1
    f77c:	ee 24       	eor	r14, r14
    f77e:	ea 94       	dec	r14
    f780:	fe 2c       	mov	r15, r14
    f782:	10 e0       	ldi	r17, 0x00	; 0
    f784:	00 e0       	ldi	r16, 0x00	; 0
    f786:	22 e0       	ldi	r18, 0x02	; 2
    f788:	a5 01       	movw	r20, r10
    f78a:	46 5f       	subi	r20, 0xF6	; 246
    f78c:	5f 4f       	sbci	r21, 0xFF	; 255
    f78e:	b4 01       	movw	r22, r8
    f790:	c6 01       	movw	r24, r12
    f792:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
    strcpy(str1, name);
    f796:	be 01       	movw	r22, r28
    f798:	65 5c       	subi	r22, 0xC5	; 197
    f79a:	7f 4f       	sbci	r23, 0xFF	; 255
    f79c:	c6 01       	movw	r24, r12
    f79e:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4276
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    f7a2:	b3 01       	movw	r22, r6
    f7a4:	6c 5e       	subi	r22, 0xEC	; 236
    f7a6:	7f 4f       	sbci	r23, 0xFF	; 255
    f7a8:	22 e0       	ldi	r18, 0x02	; 2
    f7aa:	a5 01       	movw	r20, r10
    f7ac:	42 5e       	subi	r20, 0xE2	; 226
    f7ae:	5f 4f       	sbci	r21, 0xFF	; 255
    f7b0:	c6 01       	movw	r24, r12
    f7b2:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4277
    if (remote_tds_get_type(args2) == RTDS_REMOTE_TYPE_TEMP)
    f7b6:	85 2d       	mov	r24, r5
    f7b8:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
    f7bc:	81 30       	cpi	r24, 0x01	; 1
    f7be:	09 f0       	breq	.+2      	; 0xf7c2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xc4>
    f7c0:	94 c0       	rjmp	.+296    	; 0xf8ea <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1ec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
    f7c2:	62 e7       	ldi	r22, 0x72	; 114
    f7c4:	73 e8       	ldi	r23, 0x83	; 131
    f7c6:	c6 01       	movw	r24, r12
    f7c8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);
    f7cc:	21 e0       	ldi	r18, 0x01	; 1
    f7ce:	a5 01       	movw	r20, r10
    f7d0:	44 5c       	subi	r20, 0xC4	; 196
    f7d2:	5f 4f       	sbci	r21, 0xFF	; 255
    f7d4:	b4 01       	movw	r22, r8
    f7d6:	c6 01       	movw	r24, r12
    f7d8:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1937
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
  if (idx < MAX_RTDS)
    f7dc:	89 e0       	ldi	r24, 0x09	; 9
    f7de:	85 15       	cp	r24, r5
    f7e0:	08 f4       	brcc	.+2      	; 0xf7e4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xe6>
    f7e2:	9a c0       	rjmp	.+308    	; 0xf918 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x21a>
    f7e4:	85 2d       	mov	r24, r5
    f7e6:	0e 94 f4 52 	call	0xa5e8	; 0xa5e8 <remote_tds_get_data(unsigned char) [clone .part.31]>
_Z39display_element_show_rtds_info_dynamicsjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
    {
      /// teplota
      strcpy_P(str1, new_text_rtds_type_temp);
      show_string(str1, x + 5, y + 60 , 1, BLACK, WHITE, 0);

      te = remote_tds_get_data(args2) / 1000.0;
    f7ea:	bc 01       	movw	r22, r24
    f7ec:	99 0f       	add	r25, r25
    f7ee:	88 0b       	sbc	r24, r24
    f7f0:	99 0b       	sbc	r25, r25
    f7f2:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
    f7f6:	20 e0       	ldi	r18, 0x00	; 0
    f7f8:	30 e0       	ldi	r19, 0x00	; 0
    f7fa:	4a e7       	ldi	r20, 0x7A	; 122
    f7fc:	54 e4       	ldi	r21, 0x44	; 68
    f7fe:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4284
      dtostrf(te, 4, 2, str1);
    f802:	86 01       	movw	r16, r12
    f804:	22 e0       	ldi	r18, 0x02	; 2
    f806:	44 e0       	ldi	r20, 0x04	; 4
    f808:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285
      strcat(str1, "C");
    f80c:	6e e1       	ldi	r22, 0x1E	; 30
    f80e:	77 e0       	ldi	r23, 0x07	; 7
    f810:	c6 01       	movw	r24, r12
    f812:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4286
      strcpy_P(str2, current_temp_short);
    f816:	3e 01       	movw	r6, r28
    f818:	91 e2       	ldi	r25, 0x21	; 33
    f81a:	69 0e       	add	r6, r25
    f81c:	71 1c       	adc	r7, r1
    f81e:	62 e6       	ldi	r22, 0x62	; 98
    f820:	73 e8       	ldi	r23, 0x83	; 131
    f822:	c3 01       	movw	r24, r6
    f824:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
      strcat(str2, str1);
    f828:	b6 01       	movw	r22, r12
    f82a:	c3 01       	movw	r24, r6
    f82c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4288
      show_string(str2, x + 5, y + 80 , 2, BLACK, WHITE, 0);
    f830:	ee 24       	eor	r14, r14
    f832:	ea 94       	dec	r14
    f834:	fe 2c       	mov	r15, r14
    f836:	10 e0       	ldi	r17, 0x00	; 0
    f838:	00 e0       	ldi	r16, 0x00	; 0
    f83a:	22 e0       	ldi	r18, 0x02	; 2
    f83c:	a5 01       	movw	r20, r10
    f83e:	40 5b       	subi	r20, 0xB0	; 176
    f840:	5f 4f       	sbci	r21, 0xFF	; 255
    f842:	b4 01       	movw	r22, r8
    f844:	c3 01       	movw	r24, r6
    f846:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
    f84a:	85 2d       	mov	r24, r5
    f84c:	0e 94 1a 53 	call	0xa634	; 0xa634 <remote_tds_get_last_update(unsigned char)>
    f850:	58 2e       	mov	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      strcpy_P(str2, text_last_update);
    f852:	6c e4       	ldi	r22, 0x4C	; 76
    f854:	73 e8       	ldi	r23, 0x83	; 131
    f856:	c3 01       	movw	r24, r6
    f858:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4292
      sprintf(str1, "%s: %d", str2, last_update);
    f85c:	1f 92       	push	r1
    f85e:	5f 92       	push	r5
    f860:	7f 92       	push	r7
    f862:	6f 92       	push	r6
    f864:	83 ee       	ldi	r24, 0xE3	; 227
    f866:	93 e0       	ldi	r25, 0x03	; 3
    f868:	9f 93       	push	r25
    f86a:	8f 93       	push	r24
    f86c:	df 92       	push	r13
    f86e:	cf 92       	push	r12
    f870:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
    f874:	21 e0       	ldi	r18, 0x01	; 1
    f876:	a5 01       	movw	r20, r10
    f878:	4c 59       	subi	r20, 0x9C	; 156
    f87a:	5f 4f       	sbci	r21, 0xFF	; 255
    f87c:	b4 01       	movw	r22, r8
    f87e:	c6 01       	movw	r24, r12
    f880:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4295
      active = 1;
      if (last_update >= 250) active = 0;
    f884:	0f b6       	in	r0, 0x3f	; 63
    f886:	f8 94       	cli
    f888:	de bf       	out	0x3e, r29	; 62
    f88a:	0f be       	out	0x3f, r0	; 63
    f88c:	cd bf       	out	0x3d, r28	; 61
    f88e:	99 ef       	ldi	r25, 0xF9	; 249
    f890:	95 15       	cp	r25, r5
    f892:	08 f4       	brcc	.+2      	; 0xf896 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x198>
    f894:	44 c0       	rjmp	.+136    	; 0xf91e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x220>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4294
      /// posledni aktualizace
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
    f896:	81 e0       	ldi	r24, 0x01	; 1
    f898:	2e 96       	adiw	r28, 0x0e	; 14
    f89a:	8f af       	std	Y+63, r24	; 0x3f
    f89c:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4296
      if (last_update >= 250) active = 0;
      strcpy_P(str2, text_online);
    f89e:	65 e4       	ldi	r22, 0x45	; 69
    f8a0:	73 e8       	ldi	r23, 0x83	; 131
    f8a2:	c3 01       	movw	r24, r6
    f8a4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
      sprintf(str1, "%s: %d", str2, active);
    f8a8:	2e 96       	adiw	r28, 0x0e	; 14
    f8aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    f8ac:	2e 97       	sbiw	r28, 0x0e	; 14
    f8ae:	1f 92       	push	r1
    f8b0:	8f 93       	push	r24
    f8b2:	7f 92       	push	r7
    f8b4:	6f 92       	push	r6
    f8b6:	83 ee       	ldi	r24, 0xE3	; 227
    f8b8:	93 e0       	ldi	r25, 0x03	; 3
    f8ba:	9f 93       	push	r25
    f8bc:	8f 93       	push	r24
    f8be:	df 92       	push	r13
    f8c0:	cf 92       	push	r12
    f8c2:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4298
      show_string(str1, x + 5, y + 120 , 2, BLACK, WHITE, 0);
    f8c6:	a5 01       	movw	r20, r10
    f8c8:	48 58       	subi	r20, 0x88	; 136
    f8ca:	5f 4f       	sbci	r21, 0xFF	; 255
    f8cc:	ee 24       	eor	r14, r14
    f8ce:	ea 94       	dec	r14
    f8d0:	fe 2c       	mov	r15, r14
    f8d2:	10 e0       	ldi	r17, 0x00	; 0
    f8d4:	00 e0       	ldi	r16, 0x00	; 0
    f8d6:	22 e0       	ldi	r18, 0x02	; 2
    f8d8:	b4 01       	movw	r22, r8
    f8da:	c6 01       	movw	r24, r12
    f8dc:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
    f8e0:	0f b6       	in	r0, 0x3f	; 63
    f8e2:	f8 94       	cli
    f8e4:	de bf       	out	0x3e, r29	; 62
    f8e6:	0f be       	out	0x3f, r0	; 63
    f8e8:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4301
    }
  }
}
    f8ea:	c3 5b       	subi	r28, 0xB3	; 179
    f8ec:	df 4f       	sbci	r29, 0xFF	; 255
    f8ee:	0f b6       	in	r0, 0x3f	; 63
    f8f0:	f8 94       	cli
    f8f2:	de bf       	out	0x3e, r29	; 62
    f8f4:	0f be       	out	0x3f, r0	; 63
    f8f6:	cd bf       	out	0x3d, r28	; 61
    f8f8:	df 91       	pop	r29
    f8fa:	cf 91       	pop	r28
    f8fc:	1f 91       	pop	r17
    f8fe:	0f 91       	pop	r16
    f900:	ff 90       	pop	r15
    f902:	ef 90       	pop	r14
    f904:	df 90       	pop	r13
    f906:	cf 90       	pop	r12
    f908:	bf 90       	pop	r11
    f90a:	af 90       	pop	r10
    f90c:	9f 90       	pop	r9
    f90e:	8f 90       	pop	r8
    f910:	7f 90       	pop	r7
    f912:	6f 90       	pop	r6
    f914:	5f 90       	pop	r5
    f916:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1936
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int value = 0;
    f918:	90 e0       	ldi	r25, 0x00	; 0
    f91a:	80 e0       	ldi	r24, 0x00	; 0
    f91c:	66 cf       	rjmp	.-308    	; 0xf7ea <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0xec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4295
      last_update = remote_tds_get_last_update(args2);
      strcpy_P(str2, text_last_update);
      sprintf(str1, "%s: %d", str2, last_update);
      show_string(str1, x + 5, y + 100 , 1, BLACK, WHITE, 0);
      active = 1;
      if (last_update >= 250) active = 0;
    f91e:	2e 96       	adiw	r28, 0x0e	; 14
    f920:	1f ae       	std	Y+63, r1	; 0x3f
    f922:	2e 97       	sbiw	r28, 0x0e	; 14
    f924:	bc cf       	rjmp	.-136    	; 0xf89e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1a0>

0000f926 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    f926:	cf 92       	push	r12
    f928:	df 92       	push	r13
    f92a:	ef 92       	push	r14
    f92c:	ff 92       	push	r15
    f92e:	1f 93       	push	r17
    f930:	cf 93       	push	r28
    f932:	df 93       	push	r29
    f934:	cd b7       	in	r28, 0x3d	; 61
    f936:	de b7       	in	r29, 0x3e	; 62
    f938:	63 97       	sbiw	r28, 0x13	; 19
    f93a:	0f b6       	in	r0, 0x3f	; 63
    f93c:	f8 94       	cli
    f93e:	de bf       	out	0x3e, r29	; 62
    f940:	0f be       	out	0x3f, r0	; 63
    f942:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3046
  uint8_t active = 0;
    f944:	1b 8a       	std	Y+19, r1	; 0x13
    f946:	86 e6       	ldi	r24, 0x66	; 102
    f948:	c8 2e       	mov	r12, r24
    f94a:	d1 2c       	mov	r13, r1
    f94c:	e1 2c       	mov	r14, r1
    f94e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    f950:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3050
  {
    remote_tds_get_complete(idx, &active, payload);
    f952:	ae 01       	movw	r20, r28
    f954:	4f 5f       	subi	r20, 0xFF	; 255
    f956:	5f 4f       	sbci	r21, 0xFF	; 255
    f958:	be 01       	movw	r22, r28
    f95a:	6d 5e       	subi	r22, 0xED	; 237
    f95c:	7f 4f       	sbci	r23, 0xFF	; 255
    f95e:	81 2f       	mov	r24, r17
    f960:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3052
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    f964:	8b 89       	ldd	r24, Y+19	; 0x13
    f966:	81 30       	cpi	r24, 0x01	; 1
    f968:	09 f0       	breq	.+2      	; 0xf96c <send_mqtt_remote_tds_status()+0x46>
    f96a:	58 c0       	rjmp	.+176    	; 0xfa1c <send_mqtt_remote_tds_status()+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3054
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    f96c:	9e 01       	movw	r18, r28
    f96e:	2f 5f       	subi	r18, 0xFF	; 255
    f970:	3f 4f       	sbci	r19, 0xFF	; 255
    f972:	4a ee       	ldi	r20, 0xEA	; 234
    f974:	53 e0       	ldi	r21, 0x03	; 3
    f976:	61 2f       	mov	r22, r17
    f978:	8f ee       	ldi	r24, 0xEF	; 239
    f97a:	93 e0       	ldi	r25, 0x03	; 3
    f97c:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
      itoa(active, payload, 10);
    f980:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    f982:	4a e0       	ldi	r20, 0x0A	; 10
    f984:	be 01       	movw	r22, r28
    f986:	6f 5f       	subi	r22, 0xFF	; 255
    f988:	7f 4f       	sbci	r23, 0xFF	; 255
    f98a:	90 e0       	ldi	r25, 0x00	; 0
    f98c:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    f990:	9e 01       	movw	r18, r28
    f992:	2f 5f       	subi	r18, 0xFF	; 255
    f994:	3f 4f       	sbci	r19, 0xFF	; 255
    f996:	44 ef       	ldi	r20, 0xF4	; 244
    f998:	53 e0       	ldi	r21, 0x03	; 3
    f99a:	61 2f       	mov	r22, r17
    f99c:	8f ee       	ldi	r24, 0xEF	; 239
    f99e:	93 e0       	ldi	r25, 0x03	; 3
    f9a0:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_data():
    f9a4:	81 2f       	mov	r24, r17
    f9a6:	0e 94 f4 52 	call	0xa5e8	; 0xa5e8 <remote_tds_get_data(unsigned char) [clone .part.31]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    f9aa:	4a e0       	ldi	r20, 0x0A	; 10
    f9ac:	be 01       	movw	r22, r28
    f9ae:	6f 5f       	subi	r22, 0xFF	; 255
    f9b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f9b2:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
    f9b6:	9e 01       	movw	r18, r28
    f9b8:	2f 5f       	subi	r18, 0xFF	; 255
    f9ba:	3f 4f       	sbci	r19, 0xFF	; 255
    f9bc:	4b ef       	ldi	r20, 0xFB	; 251
    f9be:	53 e0       	ldi	r21, 0x03	; 3
    f9c0:	61 2f       	mov	r22, r17
    f9c2:	8f ee       	ldi	r24, 0xEF	; 239
    f9c4:	93 e0       	ldi	r25, 0x03	; 3
    f9c6:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3059
      itoa(remote_tds_get_type(idx), payload, 10);
    f9ca:	81 2f       	mov	r24, r17
    f9cc:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    f9d0:	4a e0       	ldi	r20, 0x0A	; 10
    f9d2:	be 01       	movw	r22, r28
    f9d4:	6f 5f       	subi	r22, 0xFF	; 255
    f9d6:	7f 4f       	sbci	r23, 0xFF	; 255
    f9d8:	90 e0       	ldi	r25, 0x00	; 0
    f9da:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
    f9de:	9e 01       	movw	r18, r28
    f9e0:	2f 5f       	subi	r18, 0xFF	; 255
    f9e2:	3f 4f       	sbci	r19, 0xFF	; 255
    f9e4:	41 e0       	ldi	r20, 0x01	; 1
    f9e6:	54 e0       	ldi	r21, 0x04	; 4
    f9e8:	61 2f       	mov	r22, r17
    f9ea:	8f ee       	ldi	r24, 0xEF	; 239
    f9ec:	93 e0       	ldi	r25, 0x03	; 3
    f9ee:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1949
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    f9f2:	c7 01       	movw	r24, r14
    f9f4:	b6 01       	movw	r22, r12
    f9f6:	0e 94 76 b7 	call	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    f9fa:	4a e0       	ldi	r20, 0x0A	; 10
    f9fc:	be 01       	movw	r22, r28
    f9fe:	6f 5f       	subi	r22, 0xFF	; 255
    fa00:	7f 4f       	sbci	r23, 0xFF	; 255
    fa02:	90 e0       	ldi	r25, 0x00	; 0
    fa04:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "value", payload);
      itoa(remote_tds_get_type(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    fa08:	9e 01       	movw	r18, r28
    fa0a:	2f 5f       	subi	r18, 0xFF	; 255
    fa0c:	3f 4f       	sbci	r19, 0xFF	; 255
    fa0e:	46 e0       	ldi	r20, 0x06	; 6
    fa10:	54 e0       	ldi	r21, 0x04	; 4
    fa12:	61 2f       	mov	r22, r17
    fa14:	8f ee       	ldi	r24, 0xEF	; 239
    fa16:	93 e0       	ldi	r25, 0x03	; 3
    fa18:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fa1c:	1f 5f       	subi	r17, 0xFF	; 255
    fa1e:	84 e0       	ldi	r24, 0x04	; 4
    fa20:	c8 0e       	add	r12, r24
    fa22:	d1 1c       	adc	r13, r1
    fa24:	e1 1c       	adc	r14, r1
    fa26:	f1 1c       	adc	r15, r1
    fa28:	8e e8       	ldi	r24, 0x8E	; 142
    fa2a:	c8 16       	cp	r12, r24
    fa2c:	d1 04       	cpc	r13, r1
    fa2e:	e1 04       	cpc	r14, r1
    fa30:	f1 04       	cpc	r15, r1
    fa32:	09 f0       	breq	.+2      	; 0xfa36 <send_mqtt_remote_tds_status()+0x110>
    fa34:	8e cf       	rjmp	.-228    	; 0xf952 <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3065
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "type", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    fa36:	63 96       	adiw	r28, 0x13	; 19
    fa38:	0f b6       	in	r0, 0x3f	; 63
    fa3a:	f8 94       	cli
    fa3c:	de bf       	out	0x3e, r29	; 62
    fa3e:	0f be       	out	0x3f, r0	; 63
    fa40:	cd bf       	out	0x3d, r28	; 61
    fa42:	df 91       	pop	r29
    fa44:	cf 91       	pop	r28
    fa46:	1f 91       	pop	r17
    fa48:	ff 90       	pop	r15
    fa4a:	ef 90       	pop	r14
    fa4c:	df 90       	pop	r13
    fa4e:	cf 90       	pop	r12
    fa50:	08 95       	ret

0000fa52 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    fa52:	ef 92       	push	r14
    fa54:	ff 92       	push	r15
    fa56:	0f 93       	push	r16
    fa58:	1f 93       	push	r17
    fa5a:	cf 93       	push	r28
    fa5c:	df 93       	push	r29
    fa5e:	cd b7       	in	r28, 0x3d	; 61
    fa60:	de b7       	in	r29, 0x3e	; 62
    fa62:	63 97       	sbiw	r28, 0x13	; 19
    fa64:	0f b6       	in	r0, 0x3f	; 63
    fa66:	f8 94       	cli
    fa68:	de bf       	out	0x3e, r29	; 62
    fa6a:	0f be       	out	0x3f, r0	; 63
    fa6c:	cd bf       	out	0x3d, r28	; 61
    fa6e:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fa70:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1897
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    fa72:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1901
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    fa74:	ae 01       	movw	r20, r28
    fa76:	4f 5f       	subi	r20, 0xFF	; 255
    fa78:	5f 4f       	sbci	r21, 0xFF	; 255
    fa7a:	be 01       	movw	r22, r28
    fa7c:	6d 5e       	subi	r22, 0xED	; 237
    fa7e:	7f 4f       	sbci	r23, 0xFF	; 255
    fa80:	81 2f       	mov	r24, r17
    fa82:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
    if (strcmp(name, tmp_name) == 0)
    fa86:	be 01       	movw	r22, r28
    fa88:	6f 5f       	subi	r22, 0xFF	; 255
    fa8a:	7f 4f       	sbci	r23, 0xFF	; 255
    fa8c:	c7 01       	movw	r24, r14
    fa8e:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
    fa92:	89 2b       	or	r24, r25
    fa94:	09 f4       	brne	.+2      	; 0xfa98 <remote_tds_name_exist(char*)+0x46>
    fa96:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    fa98:	1f 5f       	subi	r17, 0xFF	; 255
    fa9a:	1a 30       	cpi	r17, 0x0A	; 10
    fa9c:	59 f7       	brne	.-42     	; 0xfa74 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1906
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    fa9e:	80 2f       	mov	r24, r16
    faa0:	63 96       	adiw	r28, 0x13	; 19
    faa2:	0f b6       	in	r0, 0x3f	; 63
    faa4:	f8 94       	cli
    faa6:	de bf       	out	0x3e, r29	; 62
    faa8:	0f be       	out	0x3f, r0	; 63
    faaa:	cd bf       	out	0x3d, r28	; 61
    faac:	df 91       	pop	r29
    faae:	cf 91       	pop	r28
    fab0:	1f 91       	pop	r17
    fab2:	0f 91       	pop	r16
    fab4:	ff 90       	pop	r15
    fab6:	ef 90       	pop	r14
    fab8:	08 95       	ret

0000faba <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4734
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    faba:	1f 93       	push	r17
    fabc:	cf 93       	push	r28
    fabe:	df 93       	push	r29
    fac0:	cd b7       	in	r28, 0x3d	; 61
    fac2:	de b7       	in	r29, 0x3e	; 62
    fac4:	62 97       	sbiw	r28, 0x12	; 18
    fac6:	0f b6       	in	r0, 0x3f	; 63
    fac8:	f8 94       	cli
    faca:	de bf       	out	0x3e, r29	; 62
    facc:	0f be       	out	0x3f, r0	; 63
    face:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    fad0:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4737

void menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    fad4:	ce 01       	movw	r24, r28
    fad6:	01 96       	adiw	r24, 0x01	; 1
    fad8:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4739
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    fadc:	89 81       	ldd	r24, Y+1	; 0x01
    fade:	88 23       	and	r24, r24
    fae0:	71 f0       	breq	.+28     	; 0xfafe <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4741
  {
    if (remote_tds_name_exist(name) == 255)
    fae2:	ce 01       	movw	r24, r28
    fae4:	01 96       	adiw	r24, 0x01	; 1
    fae6:	0e 94 29 7d 	call	0xfa52	; 0xfa52 <remote_tds_name_exist(char*)>
    faea:	8f 3f       	cpi	r24, 0xFF	; 255
    faec:	41 f4       	brne	.+16     	; 0xfafe <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1798
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    faee:	1a 30       	cpi	r17, 0x0A	; 10
    faf0:	30 f4       	brcc	.+12     	; 0xfafe <menu_rtds_update_name(unsigned int, unsigned int, unsigned char)+0x44>
    faf2:	be 01       	movw	r22, r28
    faf4:	6f 5f       	subi	r22, 0xFF	; 255
    faf6:	7f 4f       	sbci	r23, 0xFF	; 255
    faf8:	81 2f       	mov	r24, r17
    fafa:	0e 94 b8 6e 	call	0xdd70	; 0xdd70 <remote_tds_set_name(unsigned char, char*) [clone .part.24]>
_Z21menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4744
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    fafe:	62 96       	adiw	r28, 0x12	; 18
    fb00:	0f b6       	in	r0, 0x3f	; 63
    fb02:	f8 94       	cli
    fb04:	de bf       	out	0x3e, r29	; 62
    fb06:	0f be       	out	0x3f, r0	; 63
    fb08:	cd bf       	out	0x3d, r28	; 61
    fb0a:	df 91       	pop	r29
    fb0c:	cf 91       	pop	r28
    fb0e:	1f 91       	pop	r17
    fb10:	08 95       	ret

0000fb12 <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1842
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/


void remote_tds_subscibe_topic(uint8_t idx)
{
    fb12:	cf 93       	push	r28
    fb14:	df 93       	push	r29
    fb16:	cd b7       	in	r28, 0x3d	; 61
    fb18:	de b7       	in	r29, 0x3e	; 62
    fb1a:	c1 58       	subi	r28, 0x81	; 129
    fb1c:	d1 09       	sbc	r29, r1
    fb1e:	0f b6       	in	r0, 0x3f	; 63
    fb20:	f8 94       	cli
    fb22:	de bf       	out	0x3e, r29	; 62
    fb24:	0f be       	out	0x3f, r0	; 63
    fb26:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1845
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    fb28:	cf 57       	subi	r28, 0x7F	; 127
    fb2a:	df 4f       	sbci	r29, 0xFF	; 255
    fb2c:	18 82       	st	Y, r1
    fb2e:	c1 58       	subi	r28, 0x81	; 129
    fb30:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
  remote_tds_get_complete(idx, &active, tmp1);
    fb32:	ae 01       	movw	r20, r28
    fb34:	4f 5f       	subi	r20, 0xFF	; 255
    fb36:	5f 4f       	sbci	r21, 0xFF	; 255
    fb38:	be 01       	movw	r22, r28
    fb3a:	6f 57       	subi	r22, 0x7F	; 127
    fb3c:	7f 4f       	sbci	r23, 0xFF	; 255
    fb3e:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
  if (active == 1)
    fb42:	cf 57       	subi	r28, 0x7F	; 127
    fb44:	df 4f       	sbci	r29, 0xFF	; 255
    fb46:	88 81       	ld	r24, Y
    fb48:	c1 58       	subi	r28, 0x81	; 129
    fb4a:	d0 40       	sbci	r29, 0x00	; 0
    fb4c:	81 30       	cpi	r24, 0x01	; 1
    fb4e:	d9 f4       	brne	.+54     	; 0xfb86 <remote_tds_subscibe_topic(unsigned char)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash); /// /rtds/
    fb50:	6e ec       	ldi	r22, 0xCE	; 206
    fb52:	70 e8       	ldi	r23, 0x80	; 128
    fb54:	ce 01       	movw	r24, r28
    fb56:	8f 5b       	subi	r24, 0xBF	; 191
    fb58:	9f 4f       	sbci	r25, 0xFF	; 255
    fb5a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
    strcat(tmp2, tmp1);
    fb5e:	be 01       	movw	r22, r28
    fb60:	6f 5f       	subi	r22, 0xFF	; 255
    fb62:	7f 4f       	sbci	r23, 0xFF	; 255
    fb64:	ce 01       	movw	r24, r28
    fb66:	8f 5b       	subi	r24, 0xBF	; 191
    fb68:	9f 4f       	sbci	r25, 0xFF	; 255
    fb6a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
    strcat(tmp2, "/#");
    fb6e:	60 ef       	ldi	r22, 0xF0	; 240
    fb70:	76 e0       	ldi	r23, 0x06	; 6
    fb72:	ce 01       	movw	r24, r28
    fb74:	8f 5b       	subi	r24, 0xBF	; 191
    fb76:	9f 4f       	sbci	r25, 0xFF	; 255
    fb78:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1852
    mqtt_client.subscribe(tmp2);
    fb7c:	ce 01       	movw	r24, r28
    fb7e:	8f 5b       	subi	r24, 0xBF	; 191
    fb80:	9f 4f       	sbci	r25, 0xFF	; 255
    fb82:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
  }
}
    fb86:	cf 57       	subi	r28, 0x7F	; 127
    fb88:	df 4f       	sbci	r29, 0xFF	; 255
    fb8a:	0f b6       	in	r0, 0x3f	; 63
    fb8c:	f8 94       	cli
    fb8e:	de bf       	out	0x3e, r29	; 62
    fb90:	0f be       	out	0x3f, r0	; 63
    fb92:	cd bf       	out	0x3d, r28	; 61
    fb94:	df 91       	pop	r29
    fb96:	cf 91       	pop	r28
    fb98:	08 95       	ret

0000fb9a <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)>:
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4719
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx, &menu_rtds_create_name, &valid_true);
  }
}

void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    fb9a:	1f 93       	push	r17
    fb9c:	cf 93       	push	r28
    fb9e:	df 93       	push	r29
    fba0:	cd b7       	in	r28, 0x3d	; 61
    fba2:	de b7       	in	r29, 0x3e	; 62
    fba4:	62 97       	sbiw	r28, 0x12	; 18
    fba6:	0f b6       	in	r0, 0x3f	; 63
    fba8:	f8 94       	cli
    fbaa:	de bf       	out	0x3e, r29	; 62
    fbac:	0f be       	out	0x3f, r0	; 63
    fbae:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1375
  dialog_save_valid_function = valid_function;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    fbb0:	10 91 f3 09 	lds	r17, 0x09F3	; 0x8009f3 <dialog_set_string_args>
_Z21menu_rtds_create_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
void menu_rtds_create_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
    fbb4:	ce 01       	movw	r24, r28
    fbb6:	01 96       	adiw	r24, 0x01	; 1
    fbb8:	0e 94 68 54 	call	0xa8d0	; 0xa8d0 <display_element_get_string(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    fbbc:	89 81       	ldd	r24, Y+1	; 0x01
    fbbe:	88 23       	and	r24, r24
    fbc0:	81 f0       	breq	.+32     	; 0xfbe2 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
    if (remote_tds_name_exist(name) == 255)
    fbc2:	ce 01       	movw	r24, r28
    fbc4:	01 96       	adiw	r24, 0x01	; 1
    fbc6:	0e 94 29 7d 	call	0xfa52	; 0xfa52 <remote_tds_name_exist(char*)>
    fbca:	8f 3f       	cpi	r24, 0xFF	; 255
    fbcc:	51 f4       	brne	.+20     	; 0xfbe2 <menu_rtds_create_name(unsigned int, unsigned int, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4728
    {
      remote_tds_set_complete(idx, active, name);
    fbce:	ae 01       	movw	r20, r28
    fbd0:	4f 5f       	subi	r20, 0xFF	; 255
    fbd2:	5f 4f       	sbci	r21, 0xFF	; 255
    fbd4:	61 e0       	ldi	r22, 0x01	; 1
    fbd6:	81 2f       	mov	r24, r17
    fbd8:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4729
      remote_tds_subscibe_topic(idx);
    fbdc:	81 2f       	mov	r24, r17
    fbde:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4731
    }
}
    fbe2:	62 96       	adiw	r28, 0x12	; 18
    fbe4:	0f b6       	in	r0, 0x3f	; 63
    fbe6:	f8 94       	cli
    fbe8:	de bf       	out	0x3e, r29	; 62
    fbea:	0f be       	out	0x3f, r0	; 63
    fbec:	cd bf       	out	0x3d, r28	; 61
    fbee:	df 91       	pop	r29
    fbf0:	cf 91       	pop	r28
    fbf2:	1f 91       	pop	r17
    fbf4:	08 95       	ret

0000fbf6 <click_rtds_subscribe(unsigned int, unsigned int, unsigned char)>:
_Z20click_rtds_subscribejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4603
  remote_tds_clear(args2);
  MenuHistoryPrevMenu(0, 0, 0);
}
////
void click_rtds_subscribe(uint16_t args1, uint16_t idx, uint8_t args3)
{
    fbf6:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4604
  remote_tds_subscibe_topic(idx);
    fbf8:	0c 94 89 7d 	jmp	0xfb12	; 0xfb12 <remote_tds_subscibe_topic(unsigned char)>

0000fbfc <display_menu_rtds_update_name(unsigned int, unsigned int, unsigned char)>:
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1457
  display_element_set_string(name, 8, args2, &menu_tds_save_name, &valid_true);
  //dialog_save_variable_function = ;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint16_t args1, uint16_t args2, uint8_t args3)
{
    fbfc:	1f 93       	push	r17
    fbfe:	cf 93       	push	r28
    fc00:	df 93       	push	r29
    fc02:	cd b7       	in	r28, 0x3d	; 61
    fc04:	de b7       	in	r29, 0x3e	; 62
    fc06:	63 97       	sbiw	r28, 0x13	; 19
    fc08:	0f b6       	in	r0, 0x3f	; 63
    fc0a:	f8 94       	cli
    fc0c:	de bf       	out	0x3e, r29	; 62
    fc0e:	0f be       	out	0x3f, r0	; 63
    fc10:	cd bf       	out	0x3d, r28	; 61
    fc12:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1460
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    fc14:	ae 01       	movw	r20, r28
    fc16:	4f 5f       	subi	r20, 0xFF	; 255
    fc18:	5f 4f       	sbci	r21, 0xFF	; 255
    fc1a:	be 01       	movw	r22, r28
    fc1c:	6d 5e       	subi	r22, 0xED	; 237
    fc1e:	7f 4f       	sbci	r23, 0xFF	; 255
    fc20:	81 2f       	mov	r24, r17
    fc22:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1461
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
    fc26:	70 e0       	ldi	r23, 0x00	; 0
    fc28:	60 e0       	ldi	r22, 0x00	; 0
    fc2a:	87 e6       	ldi	r24, 0x67	; 103
    fc2c:	90 e0       	ldi	r25, 0x00	; 0
    fc2e:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1366
  menu_dialog_variable[idx].save_function = save_function;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx, fptr_args save_function, ret_fptr_no_args valid_function)
{
  strcpy(dialog_set_string, str);
    fc32:	be 01       	movw	r22, r28
    fc34:	6f 5f       	subi	r22, 0xFF	; 255
    fc36:	7f 4f       	sbci	r23, 0xFF	; 255
    fc38:	85 ef       	ldi	r24, 0xF5	; 245
    fc3a:	99 e0       	ldi	r25, 0x09	; 9
    fc3c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1367
  dialog_set_string_max_length = max_length;
    fc40:	82 e1       	ldi	r24, 0x12	; 18
    fc42:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1368
  dialog_set_string_args = idx;
    fc46:	10 93 f3 09 	sts	0x09F3, r17	; 0x8009f3 <dialog_set_string_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1369
  dialog_save_string_function = save_function;
    fc4a:	8d e5       	ldi	r24, 0x5D	; 93
    fc4c:	9d e7       	ldi	r25, 0x7D	; 125
    fc4e:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <dialog_save_string_function+0x1>
    fc52:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <dialog_save_string_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1370
  dialog_save_valid_function = valid_function;
    fc56:	89 ed       	ldi	r24, 0xD9	; 217
    fc58:	9f e4       	ldi	r25, 0x4F	; 79
    fc5a:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <dialog_save_valid_function+0x1>
    fc5e:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <dialog_save_valid_function>
_Z29display_menu_rtds_update_namejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1464
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2, &menu_rtds_update_name, &valid_true);
  //dialog_save_variable_function = ;
}
    fc62:	63 96       	adiw	r28, 0x13	; 19
    fc64:	0f b6       	in	r0, 0x3f	; 63
    fc66:	f8 94       	cli
    fc68:	de bf       	out	0x3e, r29	; 62
    fc6a:	0f be       	out	0x3f, r0	; 63
    fc6c:	cd bf       	out	0x3d, r28	; 61
    fc6e:	df 91       	pop	r29
    fc70:	cf 91       	pop	r28
    fc72:	1f 91       	pop	r17
    fc74:	08 95       	ret

0000fc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:135
}



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
    fc76:	4f 92       	push	r4
    fc78:	5f 92       	push	r5
    fc7a:	6f 92       	push	r6
    fc7c:	7f 92       	push	r7
    fc7e:	8f 92       	push	r8
    fc80:	9f 92       	push	r9
    fc82:	af 92       	push	r10
    fc84:	bf 92       	push	r11
    fc86:	cf 92       	push	r12
    fc88:	df 92       	push	r13
    fc8a:	ef 92       	push	r14
    fc8c:	ff 92       	push	r15
    fc8e:	0f 93       	push	r16
    fc90:	1f 93       	push	r17
    fc92:	cf 93       	push	r28
    fc94:	df 93       	push	r29
    fc96:	00 d0       	rcall	.+0      	; 0xfc98 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
    fc98:	00 d0       	rcall	.+0      	; 0xfc9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
    fc9a:	1f 92       	push	r1
    fc9c:	1f 92       	push	r1
    fc9e:	cd b7       	in	r28, 0x3d	; 61
    fca0:	de b7       	in	r29, 0x3e	; 62
    fca2:	6c 01       	movw	r12, r24
    fca4:	46 2e       	mov	r4, r22
    fca6:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:137
  char tmp1[8];
  str[0] = 0;
    fca8:	fc 01       	movw	r30, r24
    fcaa:	10 82       	st	Z, r1
    fcac:	3a 01       	movw	r6, r20
    fcae:	f1 2c       	mov	r15, r1
    fcb0:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    fcb2:	a0 2e       	mov	r10, r16
    fcb4:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    fcb6:	8e 01       	movw	r16, r28
    fcb8:	0f 5f       	subi	r16, 0xFF	; 255
    fcba:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
    fcbc:	82 2f       	mov	r24, r18
    fcbe:	81 50       	subi	r24, 0x01	; 1
    fcc0:	99 0b       	sbc	r25, r25
    fcc2:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:140
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
    fcc4:	f3 01       	movw	r30, r6
    fcc6:	81 91       	ld	r24, Z+
    fcc8:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:433
    fcca:	a5 01       	movw	r20, r10
    fccc:	b8 01       	movw	r22, r16
    fcce:	90 e0       	ldi	r25, 0x00	; 0
    fcd0:	0e 94 cc ee 	call	0x1dd98	; 0x1dd98 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:141
    if (strlen(tmp1) < 2)
    fcd4:	f8 01       	movw	r30, r16
    fcd6:	01 90       	ld	r0, Z+
    fcd8:	00 20       	and	r0, r0
    fcda:	e9 f7       	brne	.-6      	; 0xfcd6 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
    fcdc:	31 97       	sbiw	r30, 0x01	; 1
    fcde:	e0 1b       	sub	r30, r16
    fce0:	f1 0b       	sbc	r31, r17
    fce2:	32 97       	sbiw	r30, 0x02	; 2
    fce4:	28 f4       	brcc	.+10     	; 0xfcf0 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:142
      strcat(str, "0");
    fce6:	62 e1       	ldi	r22, 0x12	; 18
    fce8:	74 e0       	ldi	r23, 0x04	; 4
    fcea:	c6 01       	movw	r24, r12
    fcec:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:143
    strcat(str, tmp1); 
    fcf0:	b8 01       	movw	r22, r16
    fcf2:	c6 01       	movw	r24, r12
    fcf4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:144
    if (a < maxBytes - 1)
    fcf8:	e8 14       	cp	r14, r8
    fcfa:	f9 04       	cpc	r15, r9
    fcfc:	34 f4       	brge	.+12     	; 0xfd0a <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:146
    {
      tmp1[0] = sep;
    fcfe:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:147
      tmp1[1] = 0;
    fd00:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:148
      strcat(str, tmp1);
    fd02:	b8 01       	movw	r22, r16
    fd04:	c6 01       	movw	r24, r12
    fd06:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
    fd0a:	ff ef       	ldi	r31, 0xFF	; 255
    fd0c:	ef 1a       	sub	r14, r31
    fd0e:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:138

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
    fd10:	e5 14       	cp	r14, r5
    fd12:	c0 f2       	brcs	.-80     	; 0xfcc4 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:151
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
    fd14:	28 96       	adiw	r28, 0x08	; 8
    fd16:	0f b6       	in	r0, 0x3f	; 63
    fd18:	f8 94       	cli
    fd1a:	de bf       	out	0x3e, r29	; 62
    fd1c:	0f be       	out	0x3f, r0	; 63
    fd1e:	cd bf       	out	0x3d, r28	; 61
    fd20:	df 91       	pop	r29
    fd22:	cf 91       	pop	r28
    fd24:	1f 91       	pop	r17
    fd26:	0f 91       	pop	r16
    fd28:	ff 90       	pop	r15
    fd2a:	ef 90       	pop	r14
    fd2c:	df 90       	pop	r13
    fd2e:	cf 90       	pop	r12
    fd30:	bf 90       	pop	r11
    fd32:	af 90       	pop	r10
    fd34:	9f 90       	pop	r9
    fd36:	8f 90       	pop	r8
    fd38:	7f 90       	pop	r7
    fd3a:	6f 90       	pop	r6
    fd3c:	5f 90       	pop	r5
    fd3e:	4f 90       	pop	r4
    fd40:	08 95       	ret

0000fd42 <display_element_show_network_detail(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z35display_element_show_network_detailjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5737

   Funkce pro zobrazeni sitovych informaci

*/
void display_element_show_network_detail(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
    fd42:	af 92       	push	r10
    fd44:	bf 92       	push	r11
    fd46:	cf 92       	push	r12
    fd48:	df 92       	push	r13
    fd4a:	ef 92       	push	r14
    fd4c:	ff 92       	push	r15
    fd4e:	0f 93       	push	r16
    fd50:	1f 93       	push	r17
    fd52:	cf 93       	push	r28
    fd54:	df 93       	push	r29
    fd56:	cd b7       	in	r28, 0x3d	; 61
    fd58:	de b7       	in	r29, 0x3e	; 62
    fd5a:	c2 54       	subi	r28, 0x42	; 66
    fd5c:	d1 09       	sbc	r29, r1
    fd5e:	0f b6       	in	r0, 0x3f	; 63
    fd60:	f8 94       	cli
    fd62:	de bf       	out	0x3e, r29	; 62
    fd64:	0f be       	out	0x3f, r0	; 63
    fd66:	cd bf       	out	0x3d, r28	; 61
    fd68:	6c 01       	movw	r12, r24
    fd6a:	5b 01       	movw	r10, r22
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    fd6c:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
    fd70:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z35display_element_show_network_detailjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5741
  char str1[36];
  char str2[24];
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    fd74:	26 0f       	add	r18, r22
    fd76:	37 1f       	adc	r19, r23
    fd78:	48 0f       	add	r20, r24
    fd7a:	59 1f       	adc	r21, r25
    fd7c:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5743
  /// mac adresa
  strcpy_P(str1, new_text_device_mac);
    fd80:	62 e6       	ldi	r22, 0x62	; 98
    fd82:	75 e8       	ldi	r23, 0x85	; 133
    fd84:	ce 01       	movw	r24, r28
    fd86:	01 96       	adiw	r24, 0x01	; 1
    fd88:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5744
  strcat(str1, ": ");
    fd8c:	63 e4       	ldi	r22, 0x43	; 67
    fd8e:	77 e0       	ldi	r23, 0x07	; 7
    fd90:	ce 01       	movw	r24, r28
    fd92:	01 96       	adiw	r24, 0x01	; 1
    fd94:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  createString(str2, '.', device.mac, 6, 16);
    fd98:	00 e1       	ldi	r16, 0x10	; 16
    fd9a:	26 e0       	ldi	r18, 0x06	; 6
    fd9c:	49 e1       	ldi	r20, 0x19	; 25
    fd9e:	5e e0       	ldi	r21, 0x0E	; 14
    fda0:	6e e2       	ldi	r22, 0x2E	; 46
    fda2:	ce 01       	movw	r24, r28
    fda4:	85 96       	adiw	r24, 0x25	; 37
    fda6:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5746
  strcat(str1, str2);
    fdaa:	be 01       	movw	r22, r28
    fdac:	6b 5d       	subi	r22, 0xDB	; 219
    fdae:	7f 4f       	sbci	r23, 0xFF	; 255
    fdb0:	ce 01       	movw	r24, r28
    fdb2:	01 96       	adiw	r24, 0x01	; 1
    fdb4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5747
  show_string(str1, x + 5 , y + 10 , 1, BLACK, WHITE, 0);
    fdb8:	85 e0       	ldi	r24, 0x05	; 5
    fdba:	c8 0e       	add	r12, r24
    fdbc:	d1 1c       	adc	r13, r1
    fdbe:	a5 01       	movw	r20, r10
    fdc0:	46 5f       	subi	r20, 0xF6	; 246
    fdc2:	5f 4f       	sbci	r21, 0xFF	; 255
    fdc4:	ee 24       	eor	r14, r14
    fdc6:	ea 94       	dec	r14
    fdc8:	fe 2c       	mov	r15, r14
    fdca:	10 e0       	ldi	r17, 0x00	; 0
    fdcc:	00 e0       	ldi	r16, 0x00	; 0
    fdce:	21 e0       	ldi	r18, 0x01	; 1
    fdd0:	b6 01       	movw	r22, r12
    fdd2:	ce 01       	movw	r24, r28
    fdd4:	01 96       	adiw	r24, 0x01	; 1
    fdd6:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5749
  /// nazev
  strcpy_P(str1, new_text_device_nazev);
    fdda:	63 e5       	ldi	r22, 0x53	; 83
    fddc:	75 e8       	ldi	r23, 0x85	; 133
    fdde:	ce 01       	movw	r24, r28
    fde0:	01 96       	adiw	r24, 0x01	; 1
    fde2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5750
  strcat(str1, ": ");
    fde6:	63 e4       	ldi	r22, 0x43	; 67
    fde8:	77 e0       	ldi	r23, 0x07	; 7
    fdea:	ce 01       	movw	r24, r28
    fdec:	01 96       	adiw	r24, 0x01	; 1
    fdee:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5751
  strcat(str1, device.nazev);
    fdf2:	6f e2       	ldi	r22, 0x2F	; 47
    fdf4:	7e e0       	ldi	r23, 0x0E	; 14
    fdf6:	ce 01       	movw	r24, r28
    fdf8:	01 96       	adiw	r24, 0x01	; 1
    fdfa:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5752
  show_string(str1, x + 5 , y + 25 , 1, BLACK, WHITE, 0);
    fdfe:	a5 01       	movw	r20, r10
    fe00:	47 5e       	subi	r20, 0xE7	; 231
    fe02:	5f 4f       	sbci	r21, 0xFF	; 255
    fe04:	21 e0       	ldi	r18, 0x01	; 1
    fe06:	b6 01       	movw	r22, r12
    fe08:	ce 01       	movw	r24, r28
    fe0a:	01 96       	adiw	r24, 0x01	; 1
    fe0c:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5754
  /// ip adresa
  ip2CharArray(device.myIP, str2);
    fe10:	6f e1       	ldi	r22, 0x1F	; 31
    fe12:	7e e0       	ldi	r23, 0x0E	; 14
    fe14:	ce 01       	movw	r24, r28
    fe16:	cd 96       	adiw	r24, 0x3d	; 61
    fe18:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
    fe1c:	be 01       	movw	r22, r28
    fe1e:	6b 5d       	subi	r22, 0xDB	; 219
    fe20:	7f 4f       	sbci	r23, 0xFF	; 255
    fe22:	ce 01       	movw	r24, r28
    fe24:	cd 96       	adiw	r24, 0x3d	; 61
    fe26:	0e 94 93 54 	call	0xa926	; 0xa926 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
  strcpy_P(str1, new_text_device_ip);
    fe2a:	69 e4       	ldi	r22, 0x49	; 73
    fe2c:	75 e8       	ldi	r23, 0x85	; 133
    fe2e:	ce 01       	movw	r24, r28
    fe30:	01 96       	adiw	r24, 0x01	; 1
    fe32:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5756
  strcat(str1, ": ");
    fe36:	63 e4       	ldi	r22, 0x43	; 67
    fe38:	77 e0       	ldi	r23, 0x07	; 7
    fe3a:	ce 01       	movw	r24, r28
    fe3c:	01 96       	adiw	r24, 0x01	; 1
    fe3e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
  strcat(str1, str2);
    fe42:	be 01       	movw	r22, r28
    fe44:	6b 5d       	subi	r22, 0xDB	; 219
    fe46:	7f 4f       	sbci	r23, 0xFF	; 255
    fe48:	ce 01       	movw	r24, r28
    fe4a:	01 96       	adiw	r24, 0x01	; 1
    fe4c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5758
  show_string(str1, x + 5 , y + 55 , 1, BLACK, WHITE, 0);
    fe50:	a5 01       	movw	r20, r10
    fe52:	49 5c       	subi	r20, 0xC9	; 201
    fe54:	5f 4f       	sbci	r21, 0xFF	; 255
    fe56:	21 e0       	ldi	r18, 0x01	; 1
    fe58:	b6 01       	movw	r22, r12
    fe5a:	ce 01       	movw	r24, r28
    fe5c:	01 96       	adiw	r24, 0x01	; 1
    fe5e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5760
  /// ip maska
  ip2CharArray(device.myMASK, str2);
    fe62:	63 e2       	ldi	r22, 0x23	; 35
    fe64:	7e e0       	ldi	r23, 0x0E	; 14
    fe66:	ce 01       	movw	r24, r28
    fe68:	cd 96       	adiw	r24, 0x3d	; 61
    fe6a:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
    fe6e:	be 01       	movw	r22, r28
    fe70:	6b 5d       	subi	r22, 0xDB	; 219
    fe72:	7f 4f       	sbci	r23, 0xFF	; 255
    fe74:	ce 01       	movw	r24, r28
    fe76:	cd 96       	adiw	r24, 0x3d	; 61
    fe78:	0e 94 93 54 	call	0xa926	; 0xa926 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5761
  strcpy_P(str1, new_text_device_mask);
    fe7c:	60 e4       	ldi	r22, 0x40	; 64
    fe7e:	75 e8       	ldi	r23, 0x85	; 133
    fe80:	ce 01       	movw	r24, r28
    fe82:	01 96       	adiw	r24, 0x01	; 1
    fe84:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5762
  strcat(str1, ": ");
    fe88:	63 e4       	ldi	r22, 0x43	; 67
    fe8a:	77 e0       	ldi	r23, 0x07	; 7
    fe8c:	ce 01       	movw	r24, r28
    fe8e:	01 96       	adiw	r24, 0x01	; 1
    fe90:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5763
  strcat(str1, str2);
    fe94:	be 01       	movw	r22, r28
    fe96:	6b 5d       	subi	r22, 0xDB	; 219
    fe98:	7f 4f       	sbci	r23, 0xFF	; 255
    fe9a:	ce 01       	movw	r24, r28
    fe9c:	01 96       	adiw	r24, 0x01	; 1
    fe9e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5764
  show_string(str1, x + 5 , y + 70 , 1, BLACK, WHITE, 0);
    fea2:	a5 01       	movw	r20, r10
    fea4:	4a 5b       	subi	r20, 0xBA	; 186
    fea6:	5f 4f       	sbci	r21, 0xFF	; 255
    fea8:	21 e0       	ldi	r18, 0x01	; 1
    feaa:	b6 01       	movw	r22, r12
    feac:	ce 01       	movw	r24, r28
    feae:	01 96       	adiw	r24, 0x01	; 1
    feb0:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5766
  /// ip gw
  ip2CharArray(device.myGW, str2);
    feb4:	6b e2       	ldi	r22, 0x2B	; 43
    feb6:	7e e0       	ldi	r23, 0x0E	; 14
    feb8:	ce 01       	movw	r24, r28
    feba:	cd 96       	adiw	r24, 0x3d	; 61
    febc:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
    fec0:	be 01       	movw	r22, r28
    fec2:	6b 5d       	subi	r22, 0xDB	; 219
    fec4:	7f 4f       	sbci	r23, 0xFF	; 255
    fec6:	ce 01       	movw	r24, r28
    fec8:	cd 96       	adiw	r24, 0x3d	; 61
    feca:	0e 94 93 54 	call	0xa926	; 0xa926 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5767
  strcpy_P(str1, new_text_device_gw);
    fece:	62 e3       	ldi	r22, 0x32	; 50
    fed0:	75 e8       	ldi	r23, 0x85	; 133
    fed2:	ce 01       	movw	r24, r28
    fed4:	01 96       	adiw	r24, 0x01	; 1
    fed6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5768
  strcat(str1, ": ");
    feda:	63 e4       	ldi	r22, 0x43	; 67
    fedc:	77 e0       	ldi	r23, 0x07	; 7
    fede:	ce 01       	movw	r24, r28
    fee0:	01 96       	adiw	r24, 0x01	; 1
    fee2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5769
  strcat(str1, str2);
    fee6:	be 01       	movw	r22, r28
    fee8:	6b 5d       	subi	r22, 0xDB	; 219
    feea:	7f 4f       	sbci	r23, 0xFF	; 255
    feec:	ce 01       	movw	r24, r28
    feee:	01 96       	adiw	r24, 0x01	; 1
    fef0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5770
  show_string(str1, x + 5 , y + 85 , 1, BLACK, WHITE, 0);
    fef4:	a5 01       	movw	r20, r10
    fef6:	4b 5a       	subi	r20, 0xAB	; 171
    fef8:	5f 4f       	sbci	r21, 0xFF	; 255
    fefa:	21 e0       	ldi	r18, 0x01	; 1
    fefc:	b6 01       	movw	r22, r12
    fefe:	ce 01       	movw	r24, r28
    ff00:	01 96       	adiw	r24, 0x01	; 1
    ff02:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5772
  /// ip dns serveru
  ip2CharArray(device.myDNS, str2);
    ff06:	67 e2       	ldi	r22, 0x27	; 39
    ff08:	7e e0       	ldi	r23, 0x0E	; 14
    ff0a:	ce 01       	movw	r24, r28
    ff0c:	cd 96       	adiw	r24, 0x3d	; 61
    ff0e:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
    ff12:	be 01       	movw	r22, r28
    ff14:	6b 5d       	subi	r22, 0xDB	; 219
    ff16:	7f 4f       	sbci	r23, 0xFF	; 255
    ff18:	ce 01       	movw	r24, r28
    ff1a:	cd 96       	adiw	r24, 0x3d	; 61
    ff1c:	0e 94 93 54 	call	0xa926	; 0xa926 <ip2CharArray(IPAddress, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5773
  strcpy_P(str1, new_text_device_dns);
    ff20:	67 e2       	ldi	r22, 0x27	; 39
    ff22:	75 e8       	ldi	r23, 0x85	; 133
    ff24:	ce 01       	movw	r24, r28
    ff26:	01 96       	adiw	r24, 0x01	; 1
    ff28:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5774
  strcat(str1, ": ");
    ff2c:	63 e4       	ldi	r22, 0x43	; 67
    ff2e:	77 e0       	ldi	r23, 0x07	; 7
    ff30:	ce 01       	movw	r24, r28
    ff32:	01 96       	adiw	r24, 0x01	; 1
    ff34:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5775
  strcat(str1, str2);
    ff38:	be 01       	movw	r22, r28
    ff3a:	6b 5d       	subi	r22, 0xDB	; 219
    ff3c:	7f 4f       	sbci	r23, 0xFF	; 255
    ff3e:	ce 01       	movw	r24, r28
    ff40:	01 96       	adiw	r24, 0x01	; 1
    ff42:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5776
  show_string(str1, x + 5 , y + 100 , 1, BLACK, WHITE, 0);
    ff46:	a5 01       	movw	r20, r10
    ff48:	4c 59       	subi	r20, 0x9C	; 156
    ff4a:	5f 4f       	sbci	r21, 0xFF	; 255
    ff4c:	21 e0       	ldi	r18, 0x01	; 1
    ff4e:	b6 01       	movw	r22, r12
    ff50:	ce 01       	movw	r24, r28
    ff52:	01 96       	adiw	r24, 0x01	; 1
    ff54:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5777
}
    ff58:	ce 5b       	subi	r28, 0xBE	; 190
    ff5a:	df 4f       	sbci	r29, 0xFF	; 255
    ff5c:	0f b6       	in	r0, 0x3f	; 63
    ff5e:	f8 94       	cli
    ff60:	de bf       	out	0x3e, r29	; 62
    ff62:	0f be       	out	0x3f, r0	; 63
    ff64:	cd bf       	out	0x3d, r28	; 61
    ff66:	df 91       	pop	r29
    ff68:	cf 91       	pop	r28
    ff6a:	1f 91       	pop	r17
    ff6c:	0f 91       	pop	r16
    ff6e:	ff 90       	pop	r15
    ff70:	ef 90       	pop	r14
    ff72:	df 90       	pop	r13
    ff74:	cf 90       	pop	r12
    ff76:	bf 90       	pop	r11
    ff78:	af 90       	pop	r10
    ff7a:	08 95       	ret

0000ff7c <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4620
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , uint8_t args3, char *line1, char *line2)
{
    ff7c:	7f 92       	push	r7
    ff7e:	8f 92       	push	r8
    ff80:	9f 92       	push	r9
    ff82:	af 92       	push	r10
    ff84:	bf 92       	push	r11
    ff86:	cf 92       	push	r12
    ff88:	df 92       	push	r13
    ff8a:	ef 92       	push	r14
    ff8c:	ff 92       	push	r15
    ff8e:	0f 93       	push	r16
    ff90:	1f 93       	push	r17
    ff92:	cf 93       	push	r28
    ff94:	df 93       	push	r29
    ff96:	cd b7       	in	r28, 0x3d	; 61
    ff98:	de b7       	in	r29, 0x3e	; 62
    ff9a:	e0 97       	sbiw	r28, 0x30	; 48
    ff9c:	0f b6       	in	r0, 0x3f	; 63
    ff9e:	f8 94       	cli
    ffa0:	de bf       	out	0x3e, r29	; 62
    ffa2:	0f be       	out	0x3f, r0	; 63
    ffa4:	cd bf       	out	0x3d, r28	; 61
    ffa6:	98 2e       	mov	r9, r24
    ffa8:	82 2e       	mov	r8, r18
    ffaa:	73 2e       	mov	r7, r19
    ffac:	78 01       	movw	r14, r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4622
  char str2[26];
  strcpy_P(line1, text_not_used);
    ffae:	6b e9       	ldi	r22, 0x9B	; 155
    ffb0:	73 e8       	ldi	r23, 0x83	; 131
    ffb2:	82 2f       	mov	r24, r18
    ffb4:	93 2f       	mov	r25, r19
    ffb6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4623
  strcpy(line2, "-");
    ffba:	69 e6       	ldi	r22, 0x69	; 105
    ffbc:	73 e0       	ldi	r23, 0x03	; 3
    ffbe:	c8 01       	movw	r24, r16
    ffc0:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4624
  if (w_rom[args1].used == 1)
    ffc4:	4b e0       	ldi	r20, 0x0B	; 11
    ffc6:	49 9d       	mul	r20, r9
    ffc8:	c0 01       	movw	r24, r0
    ffca:	11 24       	eor	r1, r1
    ffcc:	9c 01       	movw	r18, r24
    ffce:	22 54       	subi	r18, 0x42	; 66
    ffd0:	33 4f       	sbci	r19, 0xF3	; 243
    ffd2:	69 01       	movw	r12, r18
    ffd4:	f9 01       	movw	r30, r18
    ffd6:	81 85       	ldd	r24, Z+9	; 0x09
    ffd8:	81 30       	cpi	r24, 0x01	; 1
    ffda:	c9 f5       	brne	.+114    	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4626
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    ffdc:	a9 01       	movw	r20, r18
    ffde:	00 e1       	ldi	r16, 0x10	; 16
    ffe0:	28 e0       	ldi	r18, 0x08	; 8
    ffe2:	6a e3       	ldi	r22, 0x3A	; 58
    ffe4:	ce 01       	movw	r24, r28
    ffe6:	01 96       	adiw	r24, 0x01	; 1
    ffe8:	5c 01       	movw	r10, r24
    ffea:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4627
    sprintf(line1, "%d: %s", args1, str2);
    ffee:	bf 92       	push	r11
    fff0:	af 92       	push	r10
    fff2:	1f 92       	push	r1
    fff4:	9f 92       	push	r9
    fff6:	84 e1       	ldi	r24, 0x14	; 20
    fff8:	94 e0       	ldi	r25, 0x04	; 4
    fffa:	9f 93       	push	r25
    fffc:	8f 93       	push	r24
    fffe:	7f 92       	push	r7
   10000:	8f 92       	push	r8
   10002:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4629

    if (w_rom[args1].tds_idx != 255)
   10006:	0f b6       	in	r0, 0x3f	; 63
   10008:	f8 94       	cli
   1000a:	de bf       	out	0x3e, r29	; 62
   1000c:	0f be       	out	0x3f, r0	; 63
   1000e:	cd bf       	out	0x3d, r28	; 61
   10010:	f6 01       	movw	r30, r12
   10012:	82 85       	ldd	r24, Z+10	; 0x0a
   10014:	8f 3f       	cpi	r24, 0xFF	; 255
   10016:	79 f1       	breq	.+94     	; 0x10076 <__EEPROM_REGION_LENGTH__+0x76>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4631
    {
      strcpy_P(line2, text_nastavit_tds);
   10018:	68 e8       	ldi	r22, 0x88	; 136
   1001a:	73 e8       	ldi	r23, 0x83	; 131
   1001c:	c7 01       	movw	r24, r14
   1001e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
tds_get_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   10022:	be 01       	movw	r22, r28
   10024:	65 5e       	subi	r22, 0xE5	; 229
   10026:	7f 4f       	sbci	r23, 0xFF	; 255
   10028:	f6 01       	movw	r30, r12
   1002a:	82 85       	ldd	r24, Z+10	; 0x0a
   1002c:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
   10030:	be 01       	movw	r22, r28
   10032:	69 5d       	subi	r22, 0xD9	; 217
   10034:	7f 4f       	sbci	r23, 0xFF	; 255
   10036:	c5 01       	movw	r24, r10
   10038:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4633
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
   1003c:	60 e7       	ldi	r22, 0x70	; 112
   1003e:	76 e0       	ldi	r23, 0x06	; 6
   10040:	c7 01       	movw	r24, r14
   10042:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4634
      strcat(line2, str2);
   10046:	b5 01       	movw	r22, r10
   10048:	c7 01       	movw	r24, r14
   1004a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4639
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
   1004e:	e0 96       	adiw	r28, 0x30	; 48
   10050:	0f b6       	in	r0, 0x3f	; 63
   10052:	f8 94       	cli
   10054:	de bf       	out	0x3e, r29	; 62
   10056:	0f be       	out	0x3f, r0	; 63
   10058:	cd bf       	out	0x3d, r28	; 61
   1005a:	df 91       	pop	r29
   1005c:	cf 91       	pop	r28
   1005e:	1f 91       	pop	r17
   10060:	0f 91       	pop	r16
   10062:	ff 90       	pop	r15
   10064:	ef 90       	pop	r14
   10066:	df 90       	pop	r13
   10068:	cf 90       	pop	r12
   1006a:	bf 90       	pop	r11
   1006c:	af 90       	pop	r10
   1006e:	9f 90       	pop	r9
   10070:	8f 90       	pop	r8
   10072:	7f 90       	pop	r7
   10074:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
   10076:	68 ea       	ldi	r22, 0xA8	; 168
   10078:	73 e8       	ldi	r23, 0x83	; 131
   1007a:	c7 01       	movw	r24, r14
   1007c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
   10080:	e6 cf       	rjmp	.-52     	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>

00010082 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)>:
_Z36display_element_show_tds_info_staticjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4219
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t args1, uint8_t args2, char *text)
{
   10082:	3f 92       	push	r3
   10084:	4f 92       	push	r4
   10086:	5f 92       	push	r5
   10088:	6f 92       	push	r6
   1008a:	7f 92       	push	r7
   1008c:	8f 92       	push	r8
   1008e:	9f 92       	push	r9
   10090:	af 92       	push	r10
   10092:	bf 92       	push	r11
   10094:	cf 92       	push	r12
   10096:	df 92       	push	r13
   10098:	ef 92       	push	r14
   1009a:	ff 92       	push	r15
   1009c:	0f 93       	push	r16
   1009e:	1f 93       	push	r17
   100a0:	cf 93       	push	r28
   100a2:	df 93       	push	r29
   100a4:	cd b7       	in	r28, 0x3d	; 61
   100a6:	de b7       	in	r29, 0x3e	; 62
   100a8:	ca 54       	subi	r28, 0x4A	; 74
   100aa:	d1 09       	sbc	r29, r1
   100ac:	0f b6       	in	r0, 0x3f	; 63
   100ae:	f8 94       	cli
   100b0:	de bf       	out	0x3e, r29	; 62
   100b2:	0f be       	out	0x3f, r0	; 63
   100b4:	cd bf       	out	0x3d, r28	; 61
   100b6:	4c 01       	movw	r8, r24
   100b8:	3b 01       	movw	r6, r22
   100ba:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   100bc:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   100c0:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjjhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4225
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
   100c4:	26 0f       	add	r18, r22
   100c6:	37 1f       	adc	r19, r23
   100c8:	48 0f       	add	r20, r24
   100ca:	59 1f       	adc	r21, r25
   100cc:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4226
  if (get_tds18s20(args2, &tds) == 1)
   100d0:	be 01       	movw	r22, r28
   100d2:	6b 5c       	subi	r22, 0xCB	; 203
   100d4:	7f 4f       	sbci	r23, 0xFF	; 255
   100d6:	8e 2d       	mov	r24, r14
   100d8:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   100dc:	23 01       	movw	r4, r6
   100de:	28 e2       	ldi	r18, 0x28	; 40
   100e0:	42 0e       	add	r4, r18
   100e2:	51 1c       	adc	r5, r1
   100e4:	9e 01       	movw	r18, r28
   100e6:	2f 5f       	subi	r18, 0xFF	; 255
   100e8:	3f 4f       	sbci	r19, 0xFF	; 255
   100ea:	59 01       	movw	r10, r18
   100ec:	81 30       	cpi	r24, 0x01	; 1
   100ee:	09 f0       	breq	.+2      	; 0x100f2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x70>
   100f0:	ca c0       	rjmp	.+404    	; 0x10286 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4228
  {
    createString(str2, ':', tds.rom, 8, 16);
   100f2:	6e 01       	movw	r12, r28
   100f4:	3b e1       	ldi	r19, 0x1B	; 27
   100f6:	c3 0e       	add	r12, r19
   100f8:	d1 1c       	adc	r13, r1
   100fa:	00 e1       	ldi	r16, 0x10	; 16
   100fc:	28 e0       	ldi	r18, 0x08	; 8
   100fe:	ae 01       	movw	r20, r28
   10100:	4a 5c       	subi	r20, 0xCA	; 202
   10102:	5f 4f       	sbci	r21, 0xFF	; 255
   10104:	6a e3       	ldi	r22, 0x3A	; 58
   10106:	c6 01       	movw	r24, r12
   10108:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4229
    sprintf(str1, "rom: %s", str2);
   1010c:	df 92       	push	r13
   1010e:	cf 92       	push	r12
   10110:	8b e1       	ldi	r24, 0x1B	; 27
   10112:	94 e0       	ldi	r25, 0x04	; 4
   10114:	9f 93       	push	r25
   10116:	8f 93       	push	r24
   10118:	bf 92       	push	r11
   1011a:	af 92       	push	r10
   1011c:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4230
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
   10120:	8a e0       	ldi	r24, 0x0A	; 10
   10122:	88 0e       	add	r8, r24
   10124:	91 1c       	adc	r9, r1
   10126:	a3 01       	movw	r20, r6
   10128:	4b 5a       	subi	r20, 0xAB	; 171
   1012a:	5f 4f       	sbci	r21, 0xFF	; 255
   1012c:	ee 24       	eor	r14, r14
   1012e:	ea 94       	dec	r14
   10130:	fe 2c       	mov	r15, r14
   10132:	10 e0       	ldi	r17, 0x00	; 0
   10134:	00 e0       	ldi	r16, 0x00	; 0
   10136:	21 e0       	ldi	r18, 0x01	; 1
   10138:	b4 01       	movw	r22, r8
   1013a:	c5 01       	movw	r24, r10
   1013c:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4232
    ///
    strcpy_P(str2, text_nazev);
   10140:	6b e6       	ldi	r22, 0x6B	; 107
   10142:	73 e8       	ldi	r23, 0x83	; 131
   10144:	c6 01       	movw	r24, r12
   10146:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4233
    sprintf(str1, "%s: %s", str2, tds.name);
   1014a:	85 e3       	ldi	r24, 0x35	; 53
   1014c:	90 e0       	ldi	r25, 0x00	; 0
   1014e:	8c 0f       	add	r24, r28
   10150:	9d 1f       	adc	r25, r29
   10152:	0c 96       	adiw	r24, 0x0c	; 12
   10154:	9f 93       	push	r25
   10156:	8f 93       	push	r24
   10158:	df 92       	push	r13
   1015a:	cf 92       	push	r12
   1015c:	83 e2       	ldi	r24, 0x23	; 35
   1015e:	94 e0       	ldi	r25, 0x04	; 4
   10160:	9f 93       	push	r25
   10162:	8f 93       	push	r24
   10164:	bf 92       	push	r11
   10166:	af 92       	push	r10
   10168:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4234
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
   1016c:	22 e0       	ldi	r18, 0x02	; 2
   1016e:	a2 01       	movw	r20, r4
   10170:	b4 01       	movw	r22, r8
   10172:	c5 01       	movw	r24, r10
   10174:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4236
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
   10178:	21 96       	adiw	r28, 0x01	; 1
   1017a:	6e ad       	ldd	r22, Y+62	; 0x3e
   1017c:	7f ad       	ldd	r23, Y+63	; 0x3f
   1017e:	21 97       	sbiw	r28, 0x01	; 1
   10180:	07 2e       	mov	r0, r23
   10182:	00 0c       	add	r0, r0
   10184:	88 0b       	sbc	r24, r24
   10186:	99 0b       	sbc	r25, r25
   10188:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1018c:	20 e0       	ldi	r18, 0x00	; 0
   1018e:	30 e0       	ldi	r19, 0x00	; 0
   10190:	4a e7       	ldi	r20, 0x7A	; 122
   10192:	54 e4       	ldi	r21, 0x44	; 68
   10194:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4237
    dtostrf(te, 4, 2, str1);
   10198:	85 01       	movw	r16, r10
   1019a:	22 e0       	ldi	r18, 0x02	; 2
   1019c:	44 e0       	ldi	r20, 0x04	; 4
   1019e:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4238
    strcat(str1, "C");
   101a2:	6e e1       	ldi	r22, 0x1E	; 30
   101a4:	77 e0       	ldi	r23, 0x07	; 7
   101a6:	c5 01       	movw	r24, r10
   101a8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4239
    strcpy_P(str2, temp_offset_short);
   101ac:	6d e3       	ldi	r22, 0x3D	; 61
   101ae:	73 e8       	ldi	r23, 0x83	; 131
   101b0:	c6 01       	movw	r24, r12
   101b2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4240
    strcat(str2, str1);
   101b6:	b5 01       	movw	r22, r10
   101b8:	c6 01       	movw	r24, r12
   101ba:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4241
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
   101be:	a3 01       	movw	r20, r6
   101c0:	44 5c       	subi	r20, 0xC4	; 196
   101c2:	5f 4f       	sbci	r21, 0xFF	; 255
   101c4:	10 e0       	ldi	r17, 0x00	; 0
   101c6:	00 e0       	ldi	r16, 0x00	; 0
   101c8:	22 e0       	ldi	r18, 0x02	; 2
   101ca:	b4 01       	movw	r22, r8
   101cc:	c6 01       	movw	r24, r12
   101ce:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4243
    ///
    strcpy_P(str2, nastaveni_tds_period);
   101d2:	6e e2       	ldi	r22, 0x2E	; 46
   101d4:	73 e8       	ldi	r23, 0x83	; 131
   101d6:	c6 01       	movw	r24, r12
   101d8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4244
    sprintf(str1, "%s: %ds", str2, tds.period);
   101dc:	2a 96       	adiw	r28, 0x0a	; 10
   101de:	8f ad       	ldd	r24, Y+63	; 0x3f
   101e0:	2a 97       	sbiw	r28, 0x0a	; 10
   101e2:	1f 92       	push	r1
   101e4:	8f 93       	push	r24
   101e6:	df 92       	push	r13
   101e8:	cf 92       	push	r12
   101ea:	8a e2       	ldi	r24, 0x2A	; 42
   101ec:	94 e0       	ldi	r25, 0x04	; 4
   101ee:	9f 93       	push	r25
   101f0:	8f 93       	push	r24
   101f2:	bf 92       	push	r11
   101f4:	af 92       	push	r10
   101f6:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
   101fa:	a3 01       	movw	r20, r6
   101fc:	4c 59       	subi	r20, 0x9C	; 156
   101fe:	5f 4f       	sbci	r21, 0xFF	; 255
   10200:	22 e0       	ldi	r18, 0x02	; 2
   10202:	b4 01       	movw	r22, r8
   10204:	c5 01       	movw	r24, r10
   10206:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4248

    ///
    strcpy_P(str2, text_online);
   1020a:	65 e4       	ldi	r22, 0x45	; 69
   1020c:	73 e8       	ldi	r23, 0x83	; 131
   1020e:	c6 01       	movw	r24, r12
   10210:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4249
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
   10214:	9e e1       	ldi	r25, 0x1E	; 30
   10216:	39 9e       	mul	r3, r25
   10218:	f0 01       	movw	r30, r0
   1021a:	11 24       	eor	r1, r1
   1021c:	e2 53       	subi	r30, 0x32	; 50
   1021e:	f4 4f       	sbci	r31, 0xF4	; 244
   10220:	83 8d       	ldd	r24, Z+27	; 0x1b
   10222:	1f 92       	push	r1
   10224:	8f 93       	push	r24
   10226:	df 92       	push	r13
   10228:	cf 92       	push	r12
   1022a:	83 ee       	ldi	r24, 0xE3	; 227
   1022c:	93 e0       	ldi	r25, 0x03	; 3
   1022e:	9f 93       	push	r25
   10230:	8f 93       	push	r24
   10232:	bf 92       	push	r11
   10234:	af 92       	push	r10
   10236:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4250
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
   1023a:	a3 01       	movw	r20, r6
   1023c:	48 58       	subi	r20, 0x88	; 136
   1023e:	5f 4f       	sbci	r21, 0xFF	; 255
   10240:	22 e0       	ldi	r18, 0x02	; 2
   10242:	b4 01       	movw	r22, r8
   10244:	c5 01       	movw	r24, r10
   10246:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   1024a:	0f b6       	in	r0, 0x3f	; 63
   1024c:	f8 94       	cli
   1024e:	de bf       	out	0x3e, r29	; 62
   10250:	0f be       	out	0x3f, r0	; 63
   10252:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4257
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
   10254:	c6 5b       	subi	r28, 0xB6	; 182
   10256:	df 4f       	sbci	r29, 0xFF	; 255
   10258:	0f b6       	in	r0, 0x3f	; 63
   1025a:	f8 94       	cli
   1025c:	de bf       	out	0x3e, r29	; 62
   1025e:	0f be       	out	0x3f, r0	; 63
   10260:	cd bf       	out	0x3d, r28	; 61
   10262:	df 91       	pop	r29
   10264:	cf 91       	pop	r28
   10266:	1f 91       	pop	r17
   10268:	0f 91       	pop	r16
   1026a:	ff 90       	pop	r15
   1026c:	ef 90       	pop	r14
   1026e:	df 90       	pop	r13
   10270:	cf 90       	pop	r12
   10272:	bf 90       	pop	r11
   10274:	af 90       	pop	r10
   10276:	9f 90       	pop	r9
   10278:	8f 90       	pop	r8
   1027a:	7f 90       	pop	r7
   1027c:	6f 90       	pop	r6
   1027e:	5f 90       	pop	r5
   10280:	4f 90       	pop	r4
   10282:	3f 90       	pop	r3
   10284:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4254
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
   10286:	6e eb       	ldi	r22, 0xBE	; 190
   10288:	73 e8       	ldi	r23, 0x83	; 131
   1028a:	c9 01       	movw	r24, r18
   1028c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4255
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
   10290:	b4 01       	movw	r22, r8
   10292:	67 5e       	subi	r22, 0xE7	; 231
   10294:	7f 4f       	sbci	r23, 0xFF	; 255
   10296:	ee 24       	eor	r14, r14
   10298:	ea 94       	dec	r14
   1029a:	fe 2c       	mov	r15, r14
   1029c:	00 e0       	ldi	r16, 0x00	; 0
   1029e:	18 ef       	ldi	r17, 0xF8	; 248
   102a0:	24 e0       	ldi	r18, 0x04	; 4
   102a2:	a2 01       	movw	r20, r4
   102a4:	c5 01       	movw	r24, r10
   102a6:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   102aa:	d4 cf       	rjmp	.-88     	; 0x10254 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char*)+0x1d2>

000102ac <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   102ac:	61 e0       	ldi	r22, 0x01	; 1
   102ae:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
   102b2:	0c 94 58 62 	jmp	0xc4b0	; 0xc4b0 <digitalWrite>

000102b6 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   102b6:	60 e0       	ldi	r22, 0x00	; 0
   102b8:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
   102bc:	0c 94 58 62 	jmp	0xc4b0	; 0xc4b0 <digitalWrite>

000102c0 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   102c0:	08 95       	ret

000102c2 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   102c2:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   102c4:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   102c6:	0d b4       	in	r0, 0x2d	; 45
   102c8:	07 fe       	sbrs	r0, 7
   102ca:	fd cf       	rjmp	.-6      	; 0x102c6 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:221
    return SPDR;
   102cc:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:222
  }
   102ce:	08 95       	ret

000102d0 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   102d0:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   102d2:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:208
  }
   102d4:	08 95       	ret

000102d6 <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   102d6:	cf 93       	push	r28
   102d8:	df 93       	push	r29
   102da:	d8 2f       	mov	r29, r24
   102dc:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   102de:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
   102e2:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
   102e6:	0e 94 68 81 	call	0x102d0	; 0x102d0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   102ea:	0e 94 5b 81 	call	0x102b6	; 0x102b6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   102ee:	80 e0       	ldi	r24, 0x00	; 0
   102f0:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   102f4:	8d 2f       	mov	r24, r29
   102f6:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   102fa:	8c 2f       	mov	r24, r28
   102fc:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   10300:	80 e0       	ldi	r24, 0x00	; 0
   10302:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   10306:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   10308:	0e 94 56 81 	call	0x102ac	; 0x102ac <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   1030c:	8c 2f       	mov	r24, r28
   1030e:	df 91       	pop	r29
   10310:	cf 91       	pop	r28
   10312:	08 95       	ret

00010314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   10314:	df 92       	push	r13
   10316:	ef 92       	push	r14
   10318:	ff 92       	push	r15
   1031a:	0f 93       	push	r16
   1031c:	1f 93       	push	r17
   1031e:	cf 93       	push	r28
   10320:	df 93       	push	r29
   10322:	d8 2f       	mov	r29, r24
   10324:	d9 2e       	mov	r13, r25
   10326:	c6 2f       	mov	r28, r22
   10328:	7a 01       	movw	r14, r20
   1032a:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   1032c:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
   10330:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
   10334:	0e 94 68 81 	call	0x102d0	; 0x102d0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   10338:	0e 94 5b 81 	call	0x102b6	; 0x102b6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   1033c:	8d 2d       	mov	r24, r13
   1033e:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   10342:	8d 2f       	mov	r24, r29
   10344:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   10348:	8c 2f       	mov	r24, r28
   1034a:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1034e:	e7 01       	movw	r28, r14
   10350:	e0 0e       	add	r14, r16
   10352:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   10354:	ce 15       	cp	r28, r14
   10356:	df 05       	cpc	r29, r15
   10358:	21 f0       	breq	.+8      	; 0x10362 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   1035a:	89 91       	ld	r24, Y+
   1035c:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   10360:	f9 cf       	rjmp	.-14     	; 0x10354 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   10362:	0e 94 56 81 	call	0x102ac	; 0x102ac <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   10366:	c8 01       	movw	r24, r16
   10368:	df 91       	pop	r29
   1036a:	cf 91       	pop	r28
   1036c:	1f 91       	pop	r17
   1036e:	0f 91       	pop	r16
   10370:	ff 90       	pop	r15
   10372:	ef 90       	pop	r14
   10374:	df 90       	pop	r13
   10376:	08 95       	ret

00010378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   10378:	1f 93       	push	r17
   1037a:	cf 93       	push	r28
   1037c:	df 93       	push	r29
   1037e:	18 2f       	mov	r17, r24
   10380:	d6 2f       	mov	r29, r22
   10382:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   10384:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
   10388:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
   1038c:	0e 94 68 81 	call	0x102d0	; 0x102d0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   10390:	0e 94 5b 81 	call	0x102b6	; 0x102b6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   10394:	80 e0       	ldi	r24, 0x00	; 0
   10396:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   1039a:	81 2f       	mov	r24, r17
   1039c:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   103a0:	8d 2f       	mov	r24, r29
   103a2:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   103a6:	8c 2f       	mov	r24, r28
   103a8:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   103ac:	0e 94 56 81 	call	0x102ac	; 0x102ac <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   103b0:	81 e0       	ldi	r24, 0x01	; 1
   103b2:	df 91       	pop	r29
   103b4:	cf 91       	pop	r28
   103b6:	1f 91       	pop	r17
   103b8:	08 95       	ret

000103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   103ba:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   103bc:	82 95       	swap	r24
   103be:	88 0f       	add	r24, r24
   103c0:	80 7e       	andi	r24, 0xE0	; 224
   103c2:	6c e0       	ldi	r22, 0x0C	; 12
   103c4:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   103c6:	c9 01       	movw	r24, r18
   103c8:	0c 94 bc 81 	jmp	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

000103cc <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   103cc:	cf 93       	push	r28
   103ce:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   103d0:	60 e1       	ldi	r22, 0x10	; 16
   103d2:	70 e0       	ldi	r23, 0x00	; 0
   103d4:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   103d8:	4f ef       	ldi	r20, 0xFF	; 255
   103da:	62 e0       	ldi	r22, 0x02	; 2
   103dc:	70 e0       	ldi	r23, 0x00	; 0
   103de:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   103e0:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   103e2:	0c 94 dd 81 	jmp	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000103e6 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   103e6:	cf 93       	push	r28
   103e8:	df 93       	push	r29
   103ea:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   103ec:	8c 85       	ldd	r24, Y+12	; 0x0c
   103ee:	88 30       	cpi	r24, 0x08	; 8
   103f0:	61 f0       	breq	.+24     	; 0x1040a <EthernetUDP::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   103f2:	0e 94 e6 81 	call	0x103cc	; 0x103cc <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:79

  EthernetClass::_server_port[_sock] = 0;
   103f6:	ec 85       	ldd	r30, Y+12	; 0x0c
   103f8:	f0 e0       	ldi	r31, 0x00	; 0
   103fa:	ee 0f       	add	r30, r30
   103fc:	ff 1f       	adc	r31, r31
   103fe:	e6 59       	subi	r30, 0x96	; 150
   10400:	f4 4f       	sbci	r31, 0xF4	; 244
   10402:	11 82       	std	Z+1, r1	; 0x01
   10404:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80
  _sock = MAX_SOCK_NUM;
   10406:	88 e0       	ldi	r24, 0x08	; 8
   10408:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   1040a:	df 91       	pop	r29
   1040c:	cf 91       	pop	r28
   1040e:	08 95       	ret

00010410 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   10410:	1f 93       	push	r17
   10412:	cf 93       	push	r28
   10414:	df 93       	push	r29
   10416:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   10418:	dc 01       	movw	r26, r24
   1041a:	58 96       	adiw	r26, 0x18	; 24
   1041c:	1c 92       	st	X, r1
   1041e:	1e 92       	st	-X, r1
   10420:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   10422:	22 81       	ldd	r18, Z+2	; 0x02
   10424:	21 11       	cpse	r18, r1
   10426:	09 c0       	rjmp	.+18     	; 0x1043a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   10428:	23 81       	ldd	r18, Z+3	; 0x03
   1042a:	21 11       	cpse	r18, r1
   1042c:	06 c0       	rjmp	.+12     	; 0x1043a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   1042e:	24 81       	ldd	r18, Z+4	; 0x04
   10430:	21 11       	cpse	r18, r1
   10432:	03 c0       	rjmp	.+6      	; 0x1043a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   10434:	25 81       	ldd	r18, Z+5	; 0x05
   10436:	22 23       	and	r18, r18
   10438:	39 f1       	breq	.+78     	; 0x10488 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1043a:	41 15       	cp	r20, r1
   1043c:	51 05       	cpc	r21, r1
   1043e:	21 f1       	breq	.+72     	; 0x10488 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   10440:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   10442:	dc 01       	movw	r26, r24
   10444:	1c 96       	adiw	r26, 0x0c	; 12
   10446:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   10448:	af 01       	movw	r20, r30
   1044a:	4e 5f       	subi	r20, 0xFE	; 254
   1044c:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1044e:	61 2f       	mov	r22, r17
   10450:	62 95       	swap	r22
   10452:	66 0f       	add	r22, r22
   10454:	60 7e       	andi	r22, 0xE0	; 224
   10456:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   10458:	24 e0       	ldi	r18, 0x04	; 4
   1045a:	30 e0       	ldi	r19, 0x00	; 0
   1045c:	8c e0       	ldi	r24, 0x0C	; 12
   1045e:	90 e0       	ldi	r25, 0x00	; 0
   10460:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   10464:	4d 2f       	mov	r20, r29
   10466:	60 e1       	ldi	r22, 0x10	; 16
   10468:	70 e0       	ldi	r23, 0x00	; 0
   1046a:	81 2f       	mov	r24, r17
   1046c:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   10470:	4c 2f       	mov	r20, r28
   10472:	61 e1       	ldi	r22, 0x11	; 17
   10474:	70 e0       	ldi	r23, 0x00	; 0
   10476:	81 2f       	mov	r24, r17
   10478:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1047c:	81 e0       	ldi	r24, 0x01	; 1
   1047e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   10480:	df 91       	pop	r29
   10482:	cf 91       	pop	r28
   10484:	1f 91       	pop	r17
   10486:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   10488:	90 e0       	ldi	r25, 0x00	; 0
   1048a:	80 e0       	ldi	r24, 0x00	; 0
   1048c:	f9 cf       	rjmp	.-14     	; 0x10480 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001048e <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
   1048e:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
   10490:	82 95       	swap	r24
   10492:	88 0f       	add	r24, r24
   10494:	80 7e       	andi	r24, 0xE0	; 224
   10496:	68 e0       	ldi	r22, 0x08	; 8
   10498:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
   1049a:	c9 01       	movw	r24, r18
   1049c:	0c 94 6b 81 	jmp	0x102d6	; 0x102d6 <W5500Class::read(unsigned int, unsigned char)>

000104a0 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   104a0:	1f 93       	push	r17
   104a2:	cf 93       	push	r28
   104a4:	df 93       	push	r29
   104a6:	18 2f       	mov	r17, r24
   104a8:	66 e2       	ldi	r22, 0x26	; 38
   104aa:	70 e0       	ldi	r23, 0x00	; 0
   104ac:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   104b0:	c8 2f       	mov	r28, r24
   104b2:	d0 e0       	ldi	r29, 0x00	; 0
   104b4:	dc 2f       	mov	r29, r28
   104b6:	cc 27       	eor	r28, r28
   104b8:	67 e2       	ldi	r22, 0x27	; 39
   104ba:	70 e0       	ldi	r23, 0x00	; 0
   104bc:	81 2f       	mov	r24, r17
   104be:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   104c2:	8c 0f       	add	r24, r28
   104c4:	9d 2f       	mov	r25, r29
   104c6:	91 1d       	adc	r25, r1
   104c8:	df 91       	pop	r29
   104ca:	cf 91       	pop	r28
   104cc:	1f 91       	pop	r17
   104ce:	08 95       	ret

000104d0 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   104d0:	1f 93       	push	r17
   104d2:	cf 93       	push	r28
   104d4:	df 93       	push	r29
   104d6:	18 2f       	mov	r17, r24
   104d8:	60 e2       	ldi	r22, 0x20	; 32
   104da:	70 e0       	ldi	r23, 0x00	; 0
   104dc:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   104e0:	c8 2f       	mov	r28, r24
   104e2:	d0 e0       	ldi	r29, 0x00	; 0
   104e4:	dc 2f       	mov	r29, r28
   104e6:	cc 27       	eor	r28, r28
   104e8:	61 e2       	ldi	r22, 0x21	; 33
   104ea:	70 e0       	ldi	r23, 0x00	; 0
   104ec:	81 2f       	mov	r24, r17
   104ee:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   104f2:	8c 0f       	add	r24, r28
   104f4:	9d 2f       	mov	r25, r29
   104f6:	91 1d       	adc	r25, r1
   104f8:	df 91       	pop	r29
   104fa:	cf 91       	pop	r28
   104fc:	1f 91       	pop	r17
   104fe:	08 95       	ret

00010500 <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   10500:	fc 01       	movw	r30, r24
   10502:	84 85       	ldd	r24, Z+12	; 0x0c
   10504:	88 30       	cpi	r24, 0x08	; 8
   10506:	21 f0       	breq	.+8      	; 0x10510 <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   10508:	63 e0       	ldi	r22, 0x03	; 3
   1050a:	70 e0       	ldi	r23, 0x00	; 0
   1050c:	0c 94 47 82 	jmp	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   10510:	80 e0       	ldi	r24, 0x00	; 0
   10512:	08 95       	ret

00010514 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   10514:	cf 93       	push	r28
   10516:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   10518:	fc 01       	movw	r30, r24
   1051a:	24 85       	ldd	r18, Z+12	; 0x0c
   1051c:	28 30       	cpi	r18, 0x08	; 8
   1051e:	d9 f0       	breq	.+54     	; 0x10556 <EthernetClient::connected()+0x42>
   10520:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   10522:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   10526:	84 31       	cpi	r24, 0x14	; 20
   10528:	89 f0       	breq	.+34     	; 0x1054c <EthernetClient::connected()+0x38>
   1052a:	88 23       	and	r24, r24
   1052c:	79 f0       	breq	.+30     	; 0x1054c <EthernetClient::connected()+0x38>
   1052e:	88 31       	cpi	r24, 0x18	; 24
   10530:	69 f0       	breq	.+26     	; 0x1054c <EthernetClient::connected()+0x38>
   10532:	21 e0       	ldi	r18, 0x01	; 1
   10534:	8c 31       	cpi	r24, 0x1C	; 28
   10536:	59 f4       	brne	.+22     	; 0x1054e <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   10538:	e8 81       	ld	r30, Y
   1053a:	f9 81       	ldd	r31, Y+1	; 0x01
   1053c:	00 84       	ldd	r0, Z+8	; 0x08
   1053e:	f1 85       	ldd	r31, Z+9	; 0x09
   10540:	e0 2d       	mov	r30, r0
   10542:	ce 01       	movw	r24, r28
   10544:	19 95       	eicall
   10546:	21 e0       	ldi	r18, 0x01	; 1
   10548:	89 2b       	or	r24, r25
   1054a:	09 f4       	brne	.+2      	; 0x1054e <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   1054c:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   1054e:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   10550:	df 91       	pop	r29
   10552:	cf 91       	pop	r28
   10554:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   10556:	80 e0       	ldi	r24, 0x00	; 0
   10558:	fb cf       	rjmp	.-10     	; 0x10550 <EthernetClient::connected()+0x3c>

0001055a <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   1055a:	cf 92       	push	r12
   1055c:	df 92       	push	r13
   1055e:	ef 92       	push	r14
   10560:	ff 92       	push	r15
   10562:	cf 93       	push	r28
   10564:	df 93       	push	r29
   10566:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   10568:	8c 85       	ldd	r24, Y+12	; 0x0c
   1056a:	88 30       	cpi	r24, 0x08	; 8
   1056c:	89 f1       	breq	.+98     	; 0x105d0 <EthernetClient::stop()+0x76>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   1056e:	68 e0       	ldi	r22, 0x08	; 8
   10570:	70 e0       	ldi	r23, 0x00	; 0
   10572:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   10576:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1057a:	6b 01       	movw	r12, r22
   1057c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   1057e:	ce 01       	movw	r24, r28
   10580:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   10584:	88 23       	and	r24, r24
   10586:	91 f0       	breq	.+36     	; 0x105ac <EthernetClient::stop()+0x52>
   10588:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1058c:	6c 19       	sub	r22, r12
   1058e:	7d 09       	sbc	r23, r13
   10590:	8e 09       	sbc	r24, r14
   10592:	9f 09       	sbc	r25, r15
   10594:	68 3e       	cpi	r22, 0xE8	; 232
   10596:	73 40       	sbci	r23, 0x03	; 3
   10598:	81 05       	cpc	r24, r1
   1059a:	91 05       	cpc	r25, r1
   1059c:	38 f4       	brcc	.+14     	; 0x105ac <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   1059e:	61 e0       	ldi	r22, 0x01	; 1
   105a0:	70 e0       	ldi	r23, 0x00	; 0
   105a2:	80 e0       	ldi	r24, 0x00	; 0
   105a4:	90 e0       	ldi	r25, 0x00	; 0
   105a6:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
   105aa:	e9 cf       	rjmp	.-46     	; 0x1057e <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   105ac:	ce 01       	movw	r24, r28
   105ae:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   105b2:	88 23       	and	r24, r24
   105b4:	19 f0       	breq	.+6      	; 0x105bc <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   105b6:	8c 85       	ldd	r24, Y+12	; 0x0c
   105b8:	0e 94 e6 81 	call	0x103cc	; 0x103cc <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:142

  EthernetClass::_server_port[_sock] = 0;
   105bc:	ec 85       	ldd	r30, Y+12	; 0x0c
   105be:	f0 e0       	ldi	r31, 0x00	; 0
   105c0:	ee 0f       	add	r30, r30
   105c2:	ff 1f       	adc	r31, r31
   105c4:	e6 59       	subi	r30, 0x96	; 150
   105c6:	f4 4f       	sbci	r31, 0xF4	; 244
   105c8:	11 82       	std	Z+1, r1	; 0x01
   105ca:	10 82       	st	Z, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143
  _sock = MAX_SOCK_NUM;
   105cc:	88 e0       	ldi	r24, 0x08	; 8
   105ce:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   105d0:	df 91       	pop	r29
   105d2:	cf 91       	pop	r28
   105d4:	ff 90       	pop	r15
   105d6:	ef 90       	pop	r14
   105d8:	df 90       	pop	r13
   105da:	cf 90       	pop	r12
   105dc:	08 95       	ret

000105de <EthernetServer::accept()>:
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:30
    }
  }  
}

void EthernetServer::accept()
{
   105de:	4f 92       	push	r4
   105e0:	5f 92       	push	r5
   105e2:	6f 92       	push	r6
   105e4:	7f 92       	push	r7
   105e6:	8f 92       	push	r8
   105e8:	9f 92       	push	r9
   105ea:	af 92       	push	r10
   105ec:	bf 92       	push	r11
   105ee:	cf 92       	push	r12
   105f0:	df 92       	push	r13
   105f2:	ef 92       	push	r14
   105f4:	ff 92       	push	r15
   105f6:	1f 93       	push	r17
   105f8:	cf 93       	push	r28
   105fa:	df 93       	push	r29
   105fc:	cd b7       	in	r28, 0x3d	; 61
   105fe:	de b7       	in	r29, 0x3e	; 62
   10600:	2d 97       	sbiw	r28, 0x0d	; 13
   10602:	0f b6       	in	r0, 0x3f	; 63
   10604:	f8 94       	cli
   10606:	de bf       	out	0x3e, r29	; 62
   10608:	0f be       	out	0x3f, r0	; 63
   1060a:	cd bf       	out	0x3d, r28	; 61
   1060c:	7c 01       	movw	r14, r24
   1060e:	9a e6       	ldi	r25, 0x6A	; 106
   10610:	a9 2e       	mov	r10, r25
   10612:	9b e0       	ldi	r25, 0x0B	; 11
   10614:	b9 2e       	mov	r11, r25
   10616:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:31
  int listening = 0;
   10618:	d1 2c       	mov	r13, r1
   1061a:	c1 2c       	mov	r12, r1
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1061c:	28 ee       	ldi	r18, 0xE8	; 232
   1061e:	42 2e       	mov	r4, r18
   10620:	23 e0       	ldi	r18, 0x03	; 3
   10622:	52 2e       	mov	r5, r18
   10624:	61 2c       	mov	r6, r1
   10626:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   10628:	30 ed       	ldi	r19, 0xD0	; 208
   1062a:	83 2e       	mov	r8, r19
   1062c:	32 e0       	ldi	r19, 0x02	; 2
   1062e:	93 2e       	mov	r9, r19
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   10630:	1c 82       	std	Y+4, r1	; 0x04
   10632:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10634:	4d 82       	std	Y+5, r4	; 0x05
   10636:	5e 82       	std	Y+6, r5	; 0x06
   10638:	6f 82       	std	Y+7, r6	; 0x07
   1063a:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1063c:	9a 82       	std	Y+2, r9	; 0x02
   1063e:	89 82       	std	Y+1, r8	; 0x01
   10640:	1d 87       	std	Y+13, r17	; 0x0d
_ZN14EthernetServer6acceptEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:36

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
   10642:	d5 01       	movw	r26, r10
   10644:	2d 91       	ld	r18, X+
   10646:	3d 91       	ld	r19, X+
   10648:	5d 01       	movw	r10, r26
   1064a:	f7 01       	movw	r30, r14
   1064c:	84 81       	ldd	r24, Z+4	; 0x04
   1064e:	95 81       	ldd	r25, Z+5	; 0x05
   10650:	28 17       	cp	r18, r24
   10652:	39 07       	cpc	r19, r25
   10654:	b1 f4       	brne	.+44     	; 0x10682 <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:37
      if (client.status() == SnSR::LISTEN) {
   10656:	ce 01       	movw	r24, r28
   10658:	01 96       	adiw	r24, 0x01	; 1
   1065a:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   1065e:	84 31       	cpi	r24, 0x14	; 20
   10660:	99 f1       	breq	.+102    	; 0x106c8 <EthernetServer::accept()+0xea>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:40
        listening = 1;
      } 
      else if (client.status() == SnSR::CLOSE_WAIT && !client.available()) {
   10662:	ce 01       	movw	r24, r28
   10664:	01 96       	adiw	r24, 0x01	; 1
   10666:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   1066a:	8c 31       	cpi	r24, 0x1C	; 28
   1066c:	51 f4       	brne	.+20     	; 0x10682 <EthernetServer::accept()+0xa4>
   1066e:	ce 01       	movw	r24, r28
   10670:	01 96       	adiw	r24, 0x01	; 1
   10672:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <EthernetClient::available()>
   10676:	89 2b       	or	r24, r25
   10678:	21 f4       	brne	.+8      	; 0x10682 <EthernetServer::accept()+0xa4>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:41
        client.stop();
   1067a:	ce 01       	movw	r24, r28
   1067c:	01 96       	adiw	r24, 0x01	; 1
   1067e:	0e 94 ad 82 	call	0x1055a	; 0x1055a <EthernetClient::stop()>
   10682:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:33

void EthernetServer::accept()
{
  int listening = 0;

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   10684:	18 30       	cpi	r17, 0x08	; 8
   10686:	a1 f6       	brne	.-88     	; 0x10630 <EthernetServer::accept()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:46
        client.stop();
      }
    } 
  }

  if (!listening) {
   10688:	cd 28       	or	r12, r13
   1068a:	41 f4       	brne	.+16     	; 0x1069c <EthernetServer::accept()+0xbe>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:47
    begin();
   1068c:	d7 01       	movw	r26, r14
   1068e:	ed 91       	ld	r30, X+
   10690:	fc 91       	ld	r31, X
   10692:	00 84       	ldd	r0, Z+8	; 0x08
   10694:	f1 85       	ldd	r31, Z+9	; 0x09
   10696:	e0 2d       	mov	r30, r0
   10698:	c7 01       	movw	r24, r14
   1069a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:49
  }
}
   1069c:	2d 96       	adiw	r28, 0x0d	; 13
   1069e:	0f b6       	in	r0, 0x3f	; 63
   106a0:	f8 94       	cli
   106a2:	de bf       	out	0x3e, r29	; 62
   106a4:	0f be       	out	0x3f, r0	; 63
   106a6:	cd bf       	out	0x3d, r28	; 61
   106a8:	df 91       	pop	r29
   106aa:	cf 91       	pop	r28
   106ac:	1f 91       	pop	r17
   106ae:	ff 90       	pop	r15
   106b0:	ef 90       	pop	r14
   106b2:	df 90       	pop	r13
   106b4:	cf 90       	pop	r12
   106b6:	bf 90       	pop	r11
   106b8:	af 90       	pop	r10
   106ba:	9f 90       	pop	r9
   106bc:	8f 90       	pop	r8
   106be:	7f 90       	pop	r7
   106c0:	6f 90       	pop	r6
   106c2:	5f 90       	pop	r5
   106c4:	4f 90       	pop	r4
   106c6:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:38
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port) {
      if (client.status() == SnSR::LISTEN) {
        listening = 1;
   106c8:	cc 24       	eor	r12, r12
   106ca:	c3 94       	inc	r12
   106cc:	d1 2c       	mov	r13, r1
   106ce:	d9 cf       	rjmp	.-78     	; 0x10682 <EthernetServer::accept()+0xa4>

000106d0 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   106d0:	cf 92       	push	r12
   106d2:	df 92       	push	r13
   106d4:	ef 92       	push	r14
   106d6:	ff 92       	push	r15
   106d8:	1f 93       	push	r17
   106da:	cf 93       	push	r28
   106dc:	df 93       	push	r29
   106de:	18 2f       	mov	r17, r24
   106e0:	6b 01       	movw	r12, r22
   106e2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   106e4:	0e 94 4f d9 	call	0x1b29e	; 0x1b29e <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
   106e8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   106ea:	00 97       	sbiw	r24, 0x00	; 0
   106ec:	d9 f4       	brne	.+54     	; 0x10724 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   106ee:	63 e0       	ldi	r22, 0x03	; 3
   106f0:	70 e0       	ldi	r23, 0x00	; 0
   106f2:	81 2f       	mov	r24, r17
   106f4:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   106f8:	84 31       	cpi	r24, 0x14	; 20
   106fa:	59 f0       	breq	.+22     	; 0x10712 <recv(unsigned char, unsigned char*, int)+0x42>
   106fc:	88 23       	and	r24, r24
   106fe:	49 f0       	breq	.+18     	; 0x10712 <recv(unsigned char, unsigned char*, int)+0x42>
   10700:	c1 e0       	ldi	r28, 0x01	; 1
   10702:	d0 e0       	ldi	r29, 0x00	; 0
   10704:	8c 31       	cpi	r24, 0x1C	; 28
   10706:	11 f4       	brne	.+4      	; 0x1070c <recv(unsigned char, unsigned char*, int)+0x3c>
   10708:	d0 e0       	ldi	r29, 0x00	; 0
   1070a:	c0 e0       	ldi	r28, 0x00	; 0
   1070c:	d1 95       	neg	r29
   1070e:	c1 95       	neg	r28
   10710:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   10712:	ce 01       	movw	r24, r28
   10714:	df 91       	pop	r29
   10716:	cf 91       	pop	r28
   10718:	1f 91       	pop	r17
   1071a:	ff 90       	pop	r15
   1071c:	ef 90       	pop	r14
   1071e:	df 90       	pop	r13
   10720:	cf 90       	pop	r12
   10722:	08 95       	ret
   10724:	e8 16       	cp	r14, r24
   10726:	f9 06       	cpc	r15, r25
   10728:	0c f4       	brge	.+2      	; 0x1072c <recv(unsigned char, unsigned char*, int)+0x5c>
   1072a:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   1072c:	1c 16       	cp	r1, r28
   1072e:	1d 06       	cpc	r1, r29
   10730:	84 f7       	brge	.-32     	; 0x10712 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   10732:	20 e0       	ldi	r18, 0x00	; 0
   10734:	ae 01       	movw	r20, r28
   10736:	b6 01       	movw	r22, r12
   10738:	81 2f       	mov	r24, r17
   1073a:	0e 94 e7 d8 	call	0x1b1ce	; 0x1b1ce <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   1073e:	60 e4       	ldi	r22, 0x40	; 64
   10740:	70 e0       	ldi	r23, 0x00	; 0
   10742:	81 2f       	mov	r24, r17
   10744:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
   10748:	e4 cf       	rjmp	.-56     	; 0x10712 <recv(unsigned char, unsigned char*, int)+0x42>

0001074a <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   1074a:	cf 93       	push	r28
   1074c:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   1074e:	fc 01       	movw	r30, r24
   10750:	21 8d       	ldd	r18, Z+25	; 0x19
   10752:	32 8d       	ldd	r19, Z+26	; 0x1a
   10754:	21 15       	cp	r18, r1
   10756:	31 05       	cpc	r19, r1
   10758:	29 f4       	brne	.+10     	; 0x10764 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   1075a:	8f ef       	ldi	r24, 0xFF	; 255
   1075c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   1075e:	df 91       	pop	r29
   10760:	cf 91       	pop	r28
   10762:	08 95       	ret
   10764:	ec 01       	movw	r28, r24
   10766:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   10768:	42 17       	cp	r20, r18
   1076a:	53 07       	cpc	r21, r19
   1076c:	08 f0       	brcs	.+2      	; 0x10770 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   1076e:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   10770:	0e 94 68 83 	call	0x106d0	; 0x106d0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   10774:	18 16       	cp	r1, r24
   10776:	19 06       	cpc	r1, r25
   10778:	84 f7       	brge	.-32     	; 0x1075a <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   1077a:	29 8d       	ldd	r18, Y+25	; 0x19
   1077c:	3a 8d       	ldd	r19, Y+26	; 0x1a
   1077e:	28 1b       	sub	r18, r24
   10780:	39 0b       	sbc	r19, r25
   10782:	3a 8f       	std	Y+26, r19	; 0x1a
   10784:	29 8f       	std	Y+25, r18	; 0x19
   10786:	eb cf       	rjmp	.-42     	; 0x1075e <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

00010788 <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   10788:	0f 93       	push	r16
   1078a:	1f 93       	push	r17
   1078c:	cf 93       	push	r28
   1078e:	df 93       	push	r29
   10790:	1f 92       	push	r1
   10792:	cd b7       	in	r28, 0x3d	; 61
   10794:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   10796:	fc 01       	movw	r30, r24
   10798:	21 8d       	ldd	r18, Z+25	; 0x19
   1079a:	32 8d       	ldd	r19, Z+26	; 0x1a
   1079c:	23 2b       	or	r18, r19
   1079e:	41 f4       	brne	.+16     	; 0x107b0 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   107a0:	8f ef       	ldi	r24, 0xFF	; 255
   107a2:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   107a4:	0f 90       	pop	r0
   107a6:	df 91       	pop	r29
   107a8:	cf 91       	pop	r28
   107aa:	1f 91       	pop	r17
   107ac:	0f 91       	pop	r16
   107ae:	08 95       	ret
   107b0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   107b2:	41 e0       	ldi	r20, 0x01	; 1
   107b4:	50 e0       	ldi	r21, 0x00	; 0
   107b6:	be 01       	movw	r22, r28
   107b8:	6f 5f       	subi	r22, 0xFF	; 255
   107ba:	7f 4f       	sbci	r23, 0xFF	; 255
   107bc:	fc 01       	movw	r30, r24
   107be:	84 85       	ldd	r24, Z+12	; 0x0c
   107c0:	0e 94 68 83 	call	0x106d0	; 0x106d0 <recv(unsigned char, unsigned char*, int)>
   107c4:	18 16       	cp	r1, r24
   107c6:	19 06       	cpc	r1, r25
   107c8:	5c f7       	brge	.-42     	; 0x107a0 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   107ca:	f8 01       	movw	r30, r16
   107cc:	81 8d       	ldd	r24, Z+25	; 0x19
   107ce:	92 8d       	ldd	r25, Z+26	; 0x1a
   107d0:	01 97       	sbiw	r24, 0x01	; 1
   107d2:	92 8f       	std	Z+26, r25	; 0x1a
   107d4:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   107d6:	89 81       	ldd	r24, Y+1	; 0x01
   107d8:	90 e0       	ldi	r25, 0x00	; 0
   107da:	e4 cf       	rjmp	.-56     	; 0x107a4 <EthernetUDP::read()+0x1c>

000107dc <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   107dc:	0f 93       	push	r16
   107de:	1f 93       	push	r17
   107e0:	cf 93       	push	r28
   107e2:	df 93       	push	r29
   107e4:	00 d0       	rcall	.+0      	; 0x107e6 <EthernetUDP::parsePacket()+0xa>
   107e6:	00 d0       	rcall	.+0      	; 0x107e8 <EthernetUDP::parsePacket()+0xc>
   107e8:	1f 92       	push	r1
   107ea:	1f 92       	push	r1
   107ec:	cd b7       	in	r28, 0x3d	; 61
   107ee:	de b7       	in	r29, 0x3e	; 62
   107f0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   107f2:	dc 01       	movw	r26, r24
   107f4:	ed 91       	ld	r30, X+
   107f6:	fc 91       	ld	r31, X
   107f8:	06 80       	ldd	r0, Z+6	; 0x06
   107fa:	f7 81       	ldd	r31, Z+7	; 0x07
   107fc:	e0 2d       	mov	r30, r0
   107fe:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   10800:	f8 01       	movw	r30, r16
   10802:	84 85       	ldd	r24, Z+12	; 0x0c
   10804:	0e 94 4f d9 	call	0x1b29e	; 0x1b29e <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>
   10808:	89 2b       	or	r24, r25
   1080a:	b1 f1       	breq	.+108    	; 0x10878 <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   1080c:	48 e0       	ldi	r20, 0x08	; 8
   1080e:	50 e0       	ldi	r21, 0x00	; 0
   10810:	be 01       	movw	r22, r28
   10812:	6f 5f       	subi	r22, 0xFF	; 255
   10814:	7f 4f       	sbci	r23, 0xFF	; 255
   10816:	d8 01       	movw	r26, r16
   10818:	1c 96       	adiw	r26, 0x0c	; 12
   1081a:	8c 91       	ld	r24, X
   1081c:	0e 94 68 83 	call	0x106d0	; 0x106d0 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   10820:	18 16       	cp	r1, r24
   10822:	19 06       	cpc	r1, r25
   10824:	f4 f4       	brge	.+60     	; 0x10862 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   10826:	d8 01       	movw	r26, r16
   10828:	51 96       	adiw	r26, 0x11	; 17
   1082a:	84 e0       	ldi	r24, 0x04	; 4
   1082c:	fe 01       	movw	r30, r28
   1082e:	31 96       	adiw	r30, 0x01	; 1
   10830:	01 90       	ld	r0, Z+
   10832:	0d 92       	st	X+, r0
   10834:	8a 95       	dec	r24
   10836:	e1 f7       	brne	.-8      	; 0x10830 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   10838:	8d 81       	ldd	r24, Y+5	; 0x05
   1083a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1083c:	98 2f       	mov	r25, r24
   1083e:	88 27       	eor	r24, r24
   10840:	2e 81       	ldd	r18, Y+6	; 0x06
   10842:	82 0f       	add	r24, r18
   10844:	91 1d       	adc	r25, r1
   10846:	f8 01       	movw	r30, r16
   10848:	96 8b       	std	Z+22, r25	; 0x16
   1084a:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1084c:	8f 81       	ldd	r24, Y+7	; 0x07
   1084e:	28 2f       	mov	r18, r24
   10850:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   10852:	32 2f       	mov	r19, r18
   10854:	22 27       	eor	r18, r18
   10856:	88 85       	ldd	r24, Y+8	; 0x08
   10858:	82 0f       	add	r24, r18
   1085a:	93 2f       	mov	r25, r19
   1085c:	91 1d       	adc	r25, r1
   1085e:	92 8f       	std	Z+26, r25	; 0x1a
   10860:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   10862:	28 96       	adiw	r28, 0x08	; 8
   10864:	0f b6       	in	r0, 0x3f	; 63
   10866:	f8 94       	cli
   10868:	de bf       	out	0x3e, r29	; 62
   1086a:	0f be       	out	0x3f, r0	; 63
   1086c:	cd bf       	out	0x3d, r28	; 61
   1086e:	df 91       	pop	r29
   10870:	cf 91       	pop	r28
   10872:	1f 91       	pop	r17
   10874:	0f 91       	pop	r16
   10876:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   10878:	90 e0       	ldi	r25, 0x00	; 0
   1087a:	80 e0       	ldi	r24, 0x00	; 0
   1087c:	f2 cf       	rjmp	.-28     	; 0x10862 <EthernetUDP::parsePacket()+0x86>

0001087e <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
   1087e:	fc 01       	movw	r30, r24
   10880:	84 85       	ldd	r24, Z+12	; 0x0c
   10882:	0c 94 68 83 	jmp	0x106d0	; 0x106d0 <recv(unsigned char, unsigned char*, int)>

00010886 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
   10886:	cf 93       	push	r28
   10888:	df 93       	push	r29
   1088a:	1f 92       	push	r1
   1088c:	cd b7       	in	r28, 0x3d	; 61
   1088e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
   10890:	41 e0       	ldi	r20, 0x01	; 1
   10892:	50 e0       	ldi	r21, 0x00	; 0
   10894:	be 01       	movw	r22, r28
   10896:	6f 5f       	subi	r22, 0xFF	; 255
   10898:	7f 4f       	sbci	r23, 0xFF	; 255
   1089a:	fc 01       	movw	r30, r24
   1089c:	84 85       	ldd	r24, Z+12	; 0x0c
   1089e:	0e 94 68 83 	call	0x106d0	; 0x106d0 <recv(unsigned char, unsigned char*, int)>
   108a2:	18 16       	cp	r1, r24
   108a4:	19 06       	cpc	r1, r25
   108a6:	34 f4       	brge	.+12     	; 0x108b4 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
   108a8:	89 81       	ldd	r24, Y+1	; 0x01
   108aa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
   108ac:	0f 90       	pop	r0
   108ae:	df 91       	pop	r29
   108b0:	cf 91       	pop	r28
   108b2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
   108b4:	8f ef       	ldi	r24, 0xFF	; 255
   108b6:	9f ef       	ldi	r25, 0xFF	; 255
   108b8:	f9 cf       	rjmp	.-14     	; 0x108ac <EthernetClient::read()+0x26>

000108ba <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   108ba:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   108bc:	fc 01       	movw	r30, r24
   108be:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   108c0:	60 e2       	ldi	r22, 0x20	; 32
   108c2:	70 e0       	ldi	r23, 0x00	; 0
   108c4:	8c 2f       	mov	r24, r28
   108c6:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   108ca:	62 e0       	ldi	r22, 0x02	; 2
   108cc:	70 e0       	ldi	r23, 0x00	; 0
   108ce:	8c 2f       	mov	r24, r28
   108d0:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   108d4:	84 fd       	sbrc	r24, 4
   108d6:	11 c0       	rjmp	.+34     	; 0x108fa <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   108d8:	62 e0       	ldi	r22, 0x02	; 2
   108da:	70 e0       	ldi	r23, 0x00	; 0
   108dc:	8c 2f       	mov	r24, r28
   108de:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   108e2:	83 ff       	sbrs	r24, 3
   108e4:	f2 cf       	rjmp	.-28     	; 0x108ca <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   108e6:	48 e1       	ldi	r20, 0x18	; 24
   108e8:	62 e0       	ldi	r22, 0x02	; 2
   108ea:	70 e0       	ldi	r23, 0x00	; 0
   108ec:	8c 2f       	mov	r24, r28
   108ee:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   108f2:	90 e0       	ldi	r25, 0x00	; 0
   108f4:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   108f6:	cf 91       	pop	r28
   108f8:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   108fa:	40 e1       	ldi	r20, 0x10	; 16
   108fc:	62 e0       	ldi	r22, 0x02	; 2
   108fe:	70 e0       	ldi	r23, 0x00	; 0
   10900:	8c 2f       	mov	r24, r28
   10902:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   10906:	81 e0       	ldi	r24, 0x01	; 1
   10908:	90 e0       	ldi	r25, 0x00	; 0
   1090a:	f5 cf       	rjmp	.-22     	; 0x108f6 <EthernetUDP::endPacket()+0x3c>

0001090c <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   1090c:	ef 92       	push	r14
   1090e:	ff 92       	push	r15
   10910:	1f 93       	push	r17
   10912:	cf 93       	push	r28
   10914:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   10916:	fc 01       	movw	r30, r24
   10918:	24 85       	ldd	r18, Z+12	; 0x0c
   1091a:	28 30       	cpi	r18, 0x08	; 8
   1091c:	39 f0       	breq	.+14     	; 0x1092c <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   1091e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   10920:	df 91       	pop	r29
   10922:	cf 91       	pop	r28
   10924:	1f 91       	pop	r17
   10926:	ff 90       	pop	r15
   10928:	ef 90       	pop	r14
   1092a:	08 95       	ret
   1092c:	7b 01       	movw	r14, r22
   1092e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   10930:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   10932:	63 e0       	ldi	r22, 0x03	; 3
   10934:	70 e0       	ldi	r23, 0x00	; 0
   10936:	81 2f       	mov	r24, r17
   10938:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1093c:	81 11       	cpse	r24, r1
   1093e:	0e c0       	rjmp	.+28     	; 0x1095c <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   10940:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   10942:	8c 85       	ldd	r24, Y+12	; 0x0c
   10944:	88 30       	cpi	r24, 0x08	; 8
   10946:	59 f3       	breq	.-42     	; 0x1091e <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   10948:	fe 86       	std	Y+14, r15	; 0x0e
   1094a:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   1094c:	1a 8e       	std	Y+26, r1	; 0x1a
   1094e:	19 8e       	std	Y+25, r1	; 0x19
socket():
   10950:	a7 01       	movw	r20, r14
   10952:	62 e0       	ldi	r22, 0x02	; 2
   10954:	0e 94 0e d2 	call	0x1a41c	; 0x1a41c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   10958:	81 e0       	ldi	r24, 0x01	; 1
   1095a:	e2 cf       	rjmp	.-60     	; 0x10920 <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   1095c:	88 31       	cpi	r24, 0x18	; 24
   1095e:	81 f3       	breq	.-32     	; 0x10940 <EthernetUDP::begin(unsigned int)+0x34>
   10960:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   10962:	18 30       	cpi	r17, 0x08	; 8
   10964:	31 f7       	brne	.-52     	; 0x10932 <EthernetUDP::begin(unsigned int)+0x26>
   10966:	ed cf       	rjmp	.-38     	; 0x10942 <EthernetUDP::begin(unsigned int)+0x36>

00010968 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
   10968:	4f 92       	push	r4
   1096a:	5f 92       	push	r5
   1096c:	6f 92       	push	r6
   1096e:	7f 92       	push	r7
   10970:	8f 92       	push	r8
   10972:	9f 92       	push	r9
   10974:	af 92       	push	r10
   10976:	bf 92       	push	r11
   10978:	cf 92       	push	r12
   1097a:	df 92       	push	r13
   1097c:	ef 92       	push	r14
   1097e:	ff 92       	push	r15
   10980:	0f 93       	push	r16
   10982:	1f 93       	push	r17
   10984:	cf 93       	push	r28
   10986:	df 93       	push	r29
   10988:	cd b7       	in	r28, 0x3d	; 61
   1098a:	de b7       	in	r29, 0x3e	; 62
   1098c:	63 97       	sbiw	r28, 0x13	; 19
   1098e:	0f b6       	in	r0, 0x3f	; 63
   10990:	f8 94       	cli
   10992:	de bf       	out	0x3e, r29	; 62
   10994:	0f be       	out	0x3f, r0	; 63
   10996:	cd bf       	out	0x3d, r28	; 61
   10998:	7c 01       	movw	r14, r24
   1099a:	6b 01       	movw	r12, r22
   1099c:	3a 01       	movw	r6, r20
   1099e:	fb 01       	movw	r30, r22
   109a0:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
   109a2:	8d 91       	ld	r24, X+
   109a4:	81 11       	cpse	r24, r1
   109a6:	fd cf       	rjmp	.-6      	; 0x109a2 <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
   109a8:	30 e0       	ldi	r19, 0x00	; 0
   109aa:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
   109ac:	90 e0       	ldi	r25, 0x00	; 0
   109ae:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   109b0:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
   109b2:	41 91       	ld	r20, Z+
   109b4:	44 23       	and	r20, r20
   109b6:	01 f1       	breq	.+64     	; 0x109f8 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
   109b8:	84 30       	cpi	r24, 0x04	; 4
   109ba:	91 05       	cpc	r25, r1
   109bc:	0c f0       	brlt	.+2      	; 0x109c0 <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
   109be:	42 c0       	rjmp	.+132    	; 0x10a44 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
   109c0:	4e 32       	cpi	r20, 0x2E	; 46
   109c2:	69 f4       	brne	.+26     	; 0x109de <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
   109c4:	2f 3f       	cpi	r18, 0xFF	; 255
   109c6:	31 05       	cpc	r19, r1
   109c8:	09 f0       	breq	.+2      	; 0x109cc <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
   109ca:	e4 f5       	brge	.+120    	; 0x10a44 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
   109cc:	d3 01       	movw	r26, r6
   109ce:	a8 0f       	add	r26, r24
   109d0:	b9 1f       	adc	r27, r25
   109d2:	12 96       	adiw	r26, 0x02	; 2
   109d4:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
   109d6:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
   109d8:	30 e0       	ldi	r19, 0x00	; 0
   109da:	20 e0       	ldi	r18, 0x00	; 0
   109dc:	ea cf       	rjmp	.-44     	; 0x109b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
   109de:	52 9f       	mul	r21, r18
   109e0:	b0 01       	movw	r22, r0
   109e2:	53 9f       	mul	r21, r19
   109e4:	70 0d       	add	r23, r0
   109e6:	11 24       	eor	r1, r1
   109e8:	24 2f       	mov	r18, r20
   109ea:	44 0f       	add	r20, r20
   109ec:	33 0b       	sbc	r19, r19
   109ee:	20 53       	subi	r18, 0x30	; 48
   109f0:	31 09       	sbc	r19, r1
   109f2:	26 0f       	add	r18, r22
   109f4:	37 1f       	adc	r19, r23
   109f6:	dd cf       	rjmp	.-70     	; 0x109b2 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
   109f8:	2f 3f       	cpi	r18, 0xFF	; 255
   109fa:	31 05       	cpc	r19, r1
   109fc:	09 f0       	breq	.+2      	; 0x10a00 <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
   109fe:	14 f5       	brge	.+68     	; 0x10a44 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
   10a00:	84 30       	cpi	r24, 0x04	; 4
   10a02:	91 05       	cpc	r25, r1
   10a04:	fc f4       	brge	.+62     	; 0x10a44 <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
   10a06:	68 0e       	add	r6, r24
   10a08:	79 1e       	adc	r7, r25
   10a0a:	f3 01       	movw	r30, r6
   10a0c:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
   10a0e:	cc 24       	eor	r12, r12
   10a10:	c3 94       	inc	r12
   10a12:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
   10a14:	c6 01       	movw	r24, r12
   10a16:	63 96       	adiw	r28, 0x13	; 19
   10a18:	0f b6       	in	r0, 0x3f	; 63
   10a1a:	f8 94       	cli
   10a1c:	de bf       	out	0x3e, r29	; 62
   10a1e:	0f be       	out	0x3f, r0	; 63
   10a20:	cd bf       	out	0x3d, r28	; 61
   10a22:	df 91       	pop	r29
   10a24:	cf 91       	pop	r28
   10a26:	1f 91       	pop	r17
   10a28:	0f 91       	pop	r16
   10a2a:	ff 90       	pop	r15
   10a2c:	ef 90       	pop	r14
   10a2e:	df 90       	pop	r13
   10a30:	cf 90       	pop	r12
   10a32:	bf 90       	pop	r11
   10a34:	af 90       	pop	r10
   10a36:	9f 90       	pop	r9
   10a38:	8f 90       	pop	r8
   10a3a:	7f 90       	pop	r7
   10a3c:	6f 90       	pop	r6
   10a3e:	5f 90       	pop	r5
   10a40:	4f 90       	pop	r4
   10a42:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
   10a44:	f7 01       	movw	r30, r14
   10a46:	42 81       	ldd	r20, Z+2	; 0x02
   10a48:	53 81       	ldd	r21, Z+3	; 0x03
   10a4a:	64 81       	ldd	r22, Z+4	; 0x04
   10a4c:	75 81       	ldd	r23, Z+5	; 0x05
   10a4e:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <_ZL11INADDR_NONE.lto_priv.237+0x2>
   10a52:	90 91 14 0e 	lds	r25, 0x0E14	; 0x800e14 <_ZL11INADDR_NONE.lto_priv.237+0x3>
   10a56:	a0 91 15 0e 	lds	r26, 0x0E15	; 0x800e15 <_ZL11INADDR_NONE.lto_priv.237+0x4>
   10a5a:	b0 91 16 0e 	lds	r27, 0x0E16	; 0x800e16 <_ZL11INADDR_NONE.lto_priv.237+0x5>
   10a5e:	48 17       	cp	r20, r24
   10a60:	59 07       	cpc	r21, r25
   10a62:	6a 07       	cpc	r22, r26
   10a64:	7b 07       	cpc	r23, r27
   10a66:	09 f4       	brne	.+2      	; 0x10a6a <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
   10a68:	00 c2       	rjmp	.+1024   	; 0x10e6a <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
   10a6a:	87 01       	movw	r16, r14
   10a6c:	08 5f       	subi	r16, 0xF8	; 248
   10a6e:	1f 4f       	sbci	r17, 0xFF	; 255
   10a70:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   10a74:	6f 70       	andi	r22, 0x0F	; 15
   10a76:	77 27       	eor	r23, r23
   10a78:	7c 5f       	subi	r23, 0xFC	; 252
   10a7a:	c8 01       	movw	r24, r16
   10a7c:	0e 94 86 84 	call	0x1090c	; 0x1090c <EthernetUDP::begin(unsigned int)>
   10a80:	81 30       	cpi	r24, 0x01	; 1
   10a82:	09 f0       	breq	.+2      	; 0x10a86 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
   10a84:	f7 c1       	rjmp	.+1006   	; 0x10e74 <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   10a86:	82 ef       	ldi	r24, 0xF2	; 242
   10a88:	92 e0       	ldi	r25, 0x02	; 2
   10a8a:	9a 83       	std	Y+2, r25	; 0x02
   10a8c:	89 83       	std	Y+1, r24	; 0x01
   10a8e:	f7 01       	movw	r30, r14
   10a90:	82 81       	ldd	r24, Z+2	; 0x02
   10a92:	93 81       	ldd	r25, Z+3	; 0x03
   10a94:	a4 81       	ldd	r26, Z+4	; 0x04
   10a96:	b5 81       	ldd	r27, Z+5	; 0x05
   10a98:	8b 83       	std	Y+3, r24	; 0x03
   10a9a:	9c 83       	std	Y+4, r25	; 0x04
   10a9c:	ad 83       	std	Y+5, r26	; 0x05
   10a9e:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
   10aa0:	45 e3       	ldi	r20, 0x35	; 53
   10aa2:	50 e0       	ldi	r21, 0x00	; 0
   10aa4:	be 01       	movw	r22, r28
   10aa6:	6f 5f       	subi	r22, 0xFF	; 255
   10aa8:	7f 4f       	sbci	r23, 0xFF	; 255
   10aaa:	c8 01       	movw	r24, r16
   10aac:	0e 94 08 82 	call	0x10410	; 0x10410 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
   10ab0:	89 2b       	or	r24, r25
   10ab2:	31 f4       	brne	.+12     	; 0x10ac0 <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   10ab4:	d1 2c       	mov	r13, r1
   10ab6:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
   10ab8:	c8 01       	movw	r24, r16
   10aba:	0e 94 f3 81 	call	0x103e6	; 0x103e6 <EthernetUDP::stop()>
   10abe:	aa cf       	rjmp	.-172    	; 0x10a14 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
   10ac0:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   10ac4:	f7 01       	movw	r30, r14
   10ac6:	77 83       	std	Z+7, r23	; 0x07
   10ac8:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
   10aca:	42 e0       	ldi	r20, 0x02	; 2
   10acc:	50 e0       	ldi	r21, 0x00	; 0
   10ace:	b7 01       	movw	r22, r14
   10ad0:	6a 5f       	subi	r22, 0xFA	; 250
   10ad2:	7f 4f       	sbci	r23, 0xFF	; 255
   10ad4:	c8 01       	movw	r24, r16
   10ad6:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
   10ada:	81 e0       	ldi	r24, 0x01	; 1
   10adc:	90 e0       	ldi	r25, 0x00	; 0
   10ade:	9a 83       	std	Y+2, r25	; 0x02
   10ae0:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10ae2:	42 e0       	ldi	r20, 0x02	; 2
   10ae4:	50 e0       	ldi	r21, 0x00	; 0
   10ae6:	be 01       	movw	r22, r28
   10ae8:	6f 5f       	subi	r22, 0xFF	; 255
   10aea:	7f 4f       	sbci	r23, 0xFF	; 255
   10aec:	c8 01       	movw	r24, r16
   10aee:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
   10af2:	80 e0       	ldi	r24, 0x00	; 0
   10af4:	91 e0       	ldi	r25, 0x01	; 1
   10af6:	9a 83       	std	Y+2, r25	; 0x02
   10af8:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10afa:	42 e0       	ldi	r20, 0x02	; 2
   10afc:	50 e0       	ldi	r21, 0x00	; 0
   10afe:	be 01       	movw	r22, r28
   10b00:	6f 5f       	subi	r22, 0xFF	; 255
   10b02:	7f 4f       	sbci	r23, 0xFF	; 255
   10b04:	c8 01       	movw	r24, r16
   10b06:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
   10b0a:	1a 82       	std	Y+2, r1	; 0x02
   10b0c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10b0e:	42 e0       	ldi	r20, 0x02	; 2
   10b10:	50 e0       	ldi	r21, 0x00	; 0
   10b12:	be 01       	movw	r22, r28
   10b14:	6f 5f       	subi	r22, 0xFF	; 255
   10b16:	7f 4f       	sbci	r23, 0xFF	; 255
   10b18:	c8 01       	movw	r24, r16
   10b1a:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10b1e:	42 e0       	ldi	r20, 0x02	; 2
   10b20:	50 e0       	ldi	r21, 0x00	; 0
   10b22:	be 01       	movw	r22, r28
   10b24:	6f 5f       	subi	r22, 0xFF	; 255
   10b26:	7f 4f       	sbci	r23, 0xFF	; 255
   10b28:	c8 01       	movw	r24, r16
   10b2a:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10b2e:	42 e0       	ldi	r20, 0x02	; 2
   10b30:	50 e0       	ldi	r21, 0x00	; 0
   10b32:	be 01       	movw	r22, r28
   10b34:	6f 5f       	subi	r22, 0xFF	; 255
   10b36:	7f 4f       	sbci	r23, 0xFF	; 255
   10b38:	c8 01       	movw	r24, r16
   10b3a:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
   10b3e:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
   10b40:	f6 01       	movw	r30, r12
   10b42:	80 81       	ld	r24, Z
   10b44:	88 23       	and	r24, r24
   10b46:	01 f1       	breq	.+64     	; 0x10b88 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
   10b48:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
   10b4a:	f6 01       	movw	r30, r12
   10b4c:	81 91       	ld	r24, Z+
   10b4e:	2f 01       	movw	r4, r30
   10b50:	88 23       	and	r24, r24
   10b52:	11 f0       	breq	.+4      	; 0x10b58 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
   10b54:	8e 32       	cpi	r24, 0x2E	; 46
   10b56:	b1 f4       	brne	.+44     	; 0x10b84 <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
   10b58:	46 01       	movw	r8, r12
   10b5a:	8a 18       	sub	r8, r10
   10b5c:	9b 08       	sbc	r9, r11
   10b5e:	18 14       	cp	r1, r8
   10b60:	19 04       	cpc	r1, r9
   10b62:	74 f4       	brge	.+28     	; 0x10b80 <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
   10b64:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
   10b66:	41 e0       	ldi	r20, 0x01	; 1
   10b68:	50 e0       	ldi	r21, 0x00	; 0
   10b6a:	be 01       	movw	r22, r28
   10b6c:	63 5f       	subi	r22, 0xF3	; 243
   10b6e:	7f 4f       	sbci	r23, 0xFF	; 255
   10b70:	c8 01       	movw	r24, r16
   10b72:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
   10b76:	a4 01       	movw	r20, r8
   10b78:	b5 01       	movw	r22, r10
   10b7a:	c8 01       	movw	r24, r16
   10b7c:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
   10b80:	52 01       	movw	r10, r4
   10b82:	de cf       	rjmp	.-68     	; 0x10b40 <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
   10b84:	62 01       	movw	r12, r4
   10b86:	e1 cf       	rjmp	.-62     	; 0x10b4a <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
   10b88:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
   10b8a:	41 e0       	ldi	r20, 0x01	; 1
   10b8c:	50 e0       	ldi	r21, 0x00	; 0
   10b8e:	be 01       	movw	r22, r28
   10b90:	63 5f       	subi	r22, 0xF3	; 243
   10b92:	7f 4f       	sbci	r23, 0xFF	; 255
   10b94:	c8 01       	movw	r24, r16
   10b96:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
   10b9a:	c1 2c       	mov	r12, r1
   10b9c:	dd 24       	eor	r13, r13
   10b9e:	d3 94       	inc	r13
   10ba0:	da 82       	std	Y+2, r13	; 0x02
   10ba2:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10ba4:	42 e0       	ldi	r20, 0x02	; 2
   10ba6:	50 e0       	ldi	r21, 0x00	; 0
   10ba8:	be 01       	movw	r22, r28
   10baa:	6f 5f       	subi	r22, 0xFF	; 255
   10bac:	7f 4f       	sbci	r23, 0xFF	; 255
   10bae:	c8 01       	movw	r24, r16
   10bb0:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
   10bb4:	da 82       	std	Y+2, r13	; 0x02
   10bb6:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
   10bb8:	42 e0       	ldi	r20, 0x02	; 2
   10bba:	50 e0       	ldi	r21, 0x00	; 0
   10bbc:	be 01       	movw	r22, r28
   10bbe:	6f 5f       	subi	r22, 0xFF	; 255
   10bc0:	7f 4f       	sbci	r23, 0xFF	; 255
   10bc2:	c8 01       	movw	r24, r16
   10bc4:	0e 94 74 56 	call	0xace8	; 0xace8 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
   10bc8:	c8 01       	movw	r24, r16
   10bca:	0e 94 5d 84 	call	0x108ba	; 0x108ba <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
   10bce:	89 2b       	or	r24, r25
   10bd0:	09 f4       	brne	.+2      	; 0x10bd4 <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
   10bd2:	70 cf       	rjmp	.-288    	; 0x10ab4 <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
   10bd4:	f3 e0       	ldi	r31, 0x03	; 3
   10bd6:	af 2e       	mov	r10, r31
   10bd8:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   10bda:	23 01       	movw	r4, r6
   10bdc:	22 e0       	ldi	r18, 0x02	; 2
   10bde:	42 0e       	add	r4, r18
   10be0:	51 1c       	adc	r5, r1
   10be2:	43 c0       	rjmp	.+134    	; 0x10c6a <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
   10be4:	f7 01       	movw	r30, r14
   10be6:	42 81       	ldd	r20, Z+2	; 0x02
   10be8:	53 81       	ldd	r21, Z+3	; 0x03
   10bea:	64 81       	ldd	r22, Z+4	; 0x04
   10bec:	75 81       	ldd	r23, Z+5	; 0x05
   10bee:	81 8d       	ldd	r24, Z+25	; 0x19
   10bf0:	92 8d       	ldd	r25, Z+26	; 0x1a
   10bf2:	a3 8d       	ldd	r26, Z+27	; 0x1b
   10bf4:	b4 8d       	ldd	r27, Z+28	; 0x1c
   10bf6:	48 17       	cp	r20, r24
   10bf8:	59 07       	cpc	r21, r25
   10bfa:	6a 07       	cpc	r22, r26
   10bfc:	7b 07       	cpc	r23, r27
   10bfe:	09 f0       	breq	.+2      	; 0x10c02 <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
   10c00:	2a c1       	rjmp	.+596    	; 0x10e56 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
   10c02:	85 8d       	ldd	r24, Z+29	; 0x1d
   10c04:	96 8d       	ldd	r25, Z+30	; 0x1e
   10c06:	c5 97       	sbiw	r24, 0x35	; 53
   10c08:	09 f0       	breq	.+2      	; 0x10c0c <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
   10c0a:	25 c1       	rjmp	.+586    	; 0x10e56 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
   10c0c:	81 a1       	ldd	r24, Z+33	; 0x21
   10c0e:	92 a1       	ldd	r25, Z+34	; 0x22
   10c10:	0c 97       	sbiw	r24, 0x0c	; 12
   10c12:	0c f4       	brge	.+2      	; 0x10c16 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
   10c14:	25 c1       	rjmp	.+586    	; 0x10e60 <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
   10c16:	4c e0       	ldi	r20, 0x0C	; 12
   10c18:	50 e0       	ldi	r21, 0x00	; 0
   10c1a:	be 01       	movw	r22, r28
   10c1c:	6f 5f       	subi	r22, 0xFF	; 255
   10c1e:	7f 4f       	sbci	r23, 0xFF	; 255
   10c20:	c8 01       	movw	r24, r16
   10c22:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
   10c26:	8b 81       	ldd	r24, Y+3	; 0x03
   10c28:	9c 81       	ldd	r25, Y+4	; 0x04
   10c2a:	98 27       	eor	r25, r24
   10c2c:	89 27       	eor	r24, r25
   10c2e:	98 27       	eor	r25, r24
   10c30:	9a 8b       	std	Y+18, r25	; 0x12
   10c32:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
   10c34:	f7 01       	movw	r30, r14
   10c36:	46 81       	ldd	r20, Z+6	; 0x06
   10c38:	57 81       	ldd	r21, Z+7	; 0x07
   10c3a:	29 81       	ldd	r18, Y+1	; 0x01
   10c3c:	3a 81       	ldd	r19, Y+2	; 0x02
   10c3e:	42 17       	cp	r20, r18
   10c40:	53 07       	cpc	r21, r19
   10c42:	11 f4       	brne	.+4      	; 0x10c48 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
   10c44:	97 fd       	sbrc	r25, 7
   10c46:	2f c0       	rjmp	.+94     	; 0x10ca6 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
   10c48:	c8 01       	movw	r24, r16
   10c4a:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
   10c4e:	ec ef       	ldi	r30, 0xFC	; 252
   10c50:	ce 2e       	mov	r12, r30
   10c52:	dd 24       	eor	r13, r13
   10c54:	da 94       	dec	r13
   10c56:	81 e0       	ldi	r24, 0x01	; 1
   10c58:	a8 1a       	sub	r10, r24
   10c5a:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
   10c5c:	09 f4       	brne	.+2      	; 0x10c60 <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
   10c5e:	2c cf       	rjmp	.-424    	; 0x10ab8 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
   10c60:	ff ef       	ldi	r31, 0xFF	; 255
   10c62:	cf 16       	cp	r12, r31
   10c64:	df 06       	cpc	r13, r31
   10c66:	09 f0       	breq	.+2      	; 0x10c6a <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
   10c68:	27 cf       	rjmp	.-434    	; 0x10ab8 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
   10c6a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   10c6e:	3b 01       	movw	r6, r22
   10c70:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
   10c72:	c8 01       	movw	r24, r16
   10c74:	0e 94 ee 83 	call	0x107dc	; 0x107dc <EthernetUDP::parsePacket()>
   10c78:	18 16       	cp	r1, r24
   10c7a:	19 06       	cpc	r1, r25
   10c7c:	0c f4       	brge	.+2      	; 0x10c80 <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
   10c7e:	b2 cf       	rjmp	.-156    	; 0x10be4 <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
   10c80:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   10c84:	66 19       	sub	r22, r6
   10c86:	77 09       	sbc	r23, r7
   10c88:	88 09       	sbc	r24, r8
   10c8a:	99 09       	sbc	r25, r9
   10c8c:	69 38       	cpi	r22, 0x89	; 137
   10c8e:	73 41       	sbci	r23, 0x13	; 19
   10c90:	81 05       	cpc	r24, r1
   10c92:	91 05       	cpc	r25, r1
   10c94:	08 f0       	brcs	.+2      	; 0x10c98 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
   10c96:	db c0       	rjmp	.+438    	; 0x10e4e <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
   10c98:	62 e3       	ldi	r22, 0x32	; 50
   10c9a:	70 e0       	ldi	r23, 0x00	; 0
   10c9c:	80 e0       	ldi	r24, 0x00	; 0
   10c9e:	90 e0       	ldi	r25, 0x00	; 0
   10ca0:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
   10ca4:	e6 cf       	rjmp	.-52     	; 0x10c72 <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
   10ca6:	8f 70       	andi	r24, 0x0F	; 15
   10ca8:	92 70       	andi	r25, 0x02	; 2
   10caa:	89 2b       	or	r24, r25
   10cac:	41 f0       	breq	.+16     	; 0x10cbe <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
   10cae:	c8 01       	movw	r24, r16
   10cb0:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
   10cb4:	7b ef       	ldi	r23, 0xFB	; 251
   10cb6:	c7 2e       	mov	r12, r23
   10cb8:	dd 24       	eor	r13, r13
   10cba:	da 94       	dec	r13
   10cbc:	cc cf       	rjmp	.-104    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
   10cbe:	6f 80       	ldd	r6, Y+7	; 0x07
   10cc0:	78 84       	ldd	r7, Y+8	; 0x08
   10cc2:	76 24       	eor	r7, r6
   10cc4:	67 24       	eor	r6, r7
   10cc6:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   10cc8:	d1 2c       	mov	r13, r1
   10cca:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
   10ccc:	61 14       	cp	r6, r1
   10cce:	71 04       	cpc	r7, r1
   10cd0:	d1 f4       	brne	.+52     	; 0x10d06 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
   10cd2:	c8 01       	movw	r24, r16
   10cd4:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
   10cd8:	6a ef       	ldi	r22, 0xFA	; 250
   10cda:	c6 2e       	mov	r12, r22
   10cdc:	dd 24       	eor	r13, r13
   10cde:	da 94       	dec	r13
   10ce0:	ba cf       	rjmp	.-140    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
   10ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
   10ce4:	81 11       	cpse	r24, r1
   10ce6:	17 c0       	rjmp	.+46     	; 0x10d16 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   10ce8:	c8 01       	movw	r24, r16
   10cea:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10cee:	c8 01       	movw	r24, r16
   10cf0:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10cf4:	c8 01       	movw	r24, r16
   10cf6:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10cfa:	c8 01       	movw	r24, r16
   10cfc:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
   10d00:	ff ef       	ldi	r31, 0xFF	; 255
   10d02:	cf 1a       	sub	r12, r31
   10d04:	df 0a       	sbc	r13, r31
   10d06:	8d 81       	ldd	r24, Y+5	; 0x05
   10d08:	9e 81       	ldd	r25, Y+6	; 0x06
   10d0a:	98 27       	eor	r25, r24
   10d0c:	89 27       	eor	r24, r25
   10d0e:	98 27       	eor	r25, r24
   10d10:	c8 16       	cp	r12, r24
   10d12:	d9 06       	cpc	r13, r25
   10d14:	a8 f4       	brcc	.+42     	; 0x10d40 <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   10d16:	41 e0       	ldi	r20, 0x01	; 1
   10d18:	50 e0       	ldi	r21, 0x00	; 0
   10d1a:	be 01       	movw	r22, r28
   10d1c:	63 5f       	subi	r22, 0xF3	; 243
   10d1e:	7f 4f       	sbci	r23, 0xFF	; 255
   10d20:	c8 01       	movw	r24, r16
   10d22:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
   10d26:	8d 85       	ldd	r24, Y+13	; 0x0d
   10d28:	88 23       	and	r24, r24
   10d2a:	d9 f2       	breq	.-74     	; 0x10ce2 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
   10d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
   10d2e:	9f ef       	ldi	r25, 0xFF	; 255
   10d30:	98 0f       	add	r25, r24
   10d32:	9d 87       	std	Y+13, r25	; 0x0d
   10d34:	88 23       	and	r24, r24
   10d36:	a9 f2       	breq	.-86     	; 0x10ce2 <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
   10d38:	c8 01       	movw	r24, r16
   10d3a:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10d3e:	f6 cf       	rjmp	.-20     	; 0x10d2c <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   10d40:	91 2c       	mov	r9, r1
   10d42:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
   10d44:	41 e0       	ldi	r20, 0x01	; 1
   10d46:	50 e0       	ldi	r21, 0x00	; 0
   10d48:	be 01       	movw	r22, r28
   10d4a:	6d 5e       	subi	r22, 0xED	; 237
   10d4c:	7f 4f       	sbci	r23, 0xFF	; 255
   10d4e:	c8 01       	movw	r24, r16
   10d50:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
   10d54:	8b 89       	ldd	r24, Y+19	; 0x13
   10d56:	98 2f       	mov	r25, r24
   10d58:	90 7c       	andi	r25, 0xC0	; 192
   10d5a:	61 f4       	brne	.+24     	; 0x10d74 <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
   10d5c:	88 23       	and	r24, r24
   10d5e:	89 f0       	breq	.+34     	; 0x10d82 <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
   10d60:	8b 89       	ldd	r24, Y+19	; 0x13
   10d62:	9f ef       	ldi	r25, 0xFF	; 255
   10d64:	98 0f       	add	r25, r24
   10d66:	9b 8b       	std	Y+19, r25	; 0x13
   10d68:	88 23       	and	r24, r24
   10d6a:	41 f0       	breq	.+16     	; 0x10d7c <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
   10d6c:	c8 01       	movw	r24, r16
   10d6e:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10d72:	f6 cf       	rjmp	.-20     	; 0x10d60 <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
   10d74:	c8 01       	movw	r24, r16
   10d76:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
   10d7a:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
   10d7c:	8b 89       	ldd	r24, Y+19	; 0x13
   10d7e:	81 11       	cpse	r24, r1
   10d80:	e1 cf       	rjmp	.-62     	; 0x10d44 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
   10d82:	42 e0       	ldi	r20, 0x02	; 2
   10d84:	50 e0       	ldi	r21, 0x00	; 0
   10d86:	be 01       	movw	r22, r28
   10d88:	61 5f       	subi	r22, 0xF1	; 241
   10d8a:	7f 4f       	sbci	r23, 0xFF	; 255
   10d8c:	c8 01       	movw	r24, r16
   10d8e:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
   10d92:	42 e0       	ldi	r20, 0x02	; 2
   10d94:	50 e0       	ldi	r21, 0x00	; 0
   10d96:	be 01       	movw	r22, r28
   10d98:	63 5f       	subi	r22, 0xF3	; 243
   10d9a:	7f 4f       	sbci	r23, 0xFF	; 255
   10d9c:	c8 01       	movw	r24, r16
   10d9e:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
   10da2:	c8 01       	movw	r24, r16
   10da4:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10da8:	c8 01       	movw	r24, r16
   10daa:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10dae:	c8 01       	movw	r24, r16
   10db0:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
   10db4:	c8 01       	movw	r24, r16
   10db6:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
   10dba:	42 e0       	ldi	r20, 0x02	; 2
   10dbc:	50 e0       	ldi	r21, 0x00	; 0
   10dbe:	be 01       	movw	r22, r28
   10dc0:	6f 5e       	subi	r22, 0xEF	; 239
   10dc2:	7f 4f       	sbci	r23, 0xFF	; 255
   10dc4:	c8 01       	movw	r24, r16
   10dc6:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   10dca:	8f 85       	ldd	r24, Y+15	; 0x0f
   10dcc:	98 89       	ldd	r25, Y+16	; 0x10
   10dce:	81 15       	cp	r24, r1
   10dd0:	91 40       	sbci	r25, 0x01	; 1
   10dd2:	e9 f4       	brne	.+58     	; 0x10e0e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
   10dd4:	cd 84       	ldd	r12, Y+13	; 0x0d
   10dd6:	de 84       	ldd	r13, Y+14	; 0x0e
   10dd8:	dc 24       	eor	r13, r12
   10dda:	cd 24       	eor	r12, r13
   10ddc:	dc 24       	eor	r13, r12
   10dde:	81 e0       	ldi	r24, 0x01	; 1
   10de0:	c8 16       	cp	r12, r24
   10de2:	d1 04       	cpc	r13, r1
   10de4:	a1 f4       	brne	.+40     	; 0x10e0e <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
   10de6:	89 89       	ldd	r24, Y+17	; 0x11
   10de8:	9a 89       	ldd	r25, Y+18	; 0x12
   10dea:	81 15       	cp	r24, r1
   10dec:	94 40       	sbci	r25, 0x04	; 4
   10dee:	41 f0       	breq	.+16     	; 0x10e00 <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
   10df0:	c8 01       	movw	r24, r16
   10df2:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
   10df6:	57 ef       	ldi	r21, 0xF7	; 247
   10df8:	c5 2e       	mov	r12, r21
   10dfa:	dd 24       	eor	r13, r13
   10dfc:	da 94       	dec	r13
   10dfe:	2b cf       	rjmp	.-426    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
   10e00:	44 e0       	ldi	r20, 0x04	; 4
   10e02:	50 e0       	ldi	r21, 0x00	; 0
   10e04:	b2 01       	movw	r22, r4
   10e06:	c8 01       	movw	r24, r16
   10e08:	0e 94 a5 83 	call	0x1074a	; 0x1074a <EthernetUDP::read(unsigned char*, unsigned int)>
   10e0c:	24 cf       	rjmp	.-440    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
   10e0e:	d1 2c       	mov	r13, r1
   10e10:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   10e12:	89 89       	ldd	r24, Y+17	; 0x11
   10e14:	9a 89       	ldd	r25, Y+18	; 0x12
   10e16:	98 27       	eor	r25, r24
   10e18:	89 27       	eor	r24, r25
   10e1a:	98 27       	eor	r25, r24
   10e1c:	c8 16       	cp	r12, r24
   10e1e:	d9 06       	cpc	r13, r25
   10e20:	38 f4       	brcc	.+14     	; 0x10e30 <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
   10e22:	c8 01       	movw	r24, r16
   10e24:	0e 94 c4 83 	call	0x10788	; 0x10788 <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
   10e28:	ff ef       	ldi	r31, 0xFF	; 255
   10e2a:	cf 1a       	sub	r12, r31
   10e2c:	df 0a       	sbc	r13, r31
   10e2e:	f1 cf       	rjmp	.-30     	; 0x10e12 <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
   10e30:	2f ef       	ldi	r18, 0xFF	; 255
   10e32:	82 1a       	sub	r8, r18
   10e34:	92 0a       	sbc	r9, r18
   10e36:	68 14       	cp	r6, r8
   10e38:	79 04       	cpc	r7, r9
   10e3a:	09 f0       	breq	.+2      	; 0x10e3e <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
   10e3c:	83 cf       	rjmp	.-250    	; 0x10d44 <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
   10e3e:	c8 01       	movw	r24, r16
   10e40:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
   10e44:	46 ef       	ldi	r20, 0xF6	; 246
   10e46:	c4 2e       	mov	r12, r20
   10e48:	dd 24       	eor	r13, r13
   10e4a:	da 94       	dec	r13
   10e4c:	04 cf       	rjmp	.-504    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
   10e4e:	cc 24       	eor	r12, r12
   10e50:	ca 94       	dec	r12
   10e52:	dc 2c       	mov	r13, r12
   10e54:	00 cf       	rjmp	.-512    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
   10e56:	2e ef       	ldi	r18, 0xFE	; 254
   10e58:	c2 2e       	mov	r12, r18
   10e5a:	dd 24       	eor	r13, r13
   10e5c:	da 94       	dec	r13
   10e5e:	fb ce       	rjmp	.-522    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
   10e60:	9d ef       	ldi	r25, 0xFD	; 253
   10e62:	c9 2e       	mov	r12, r25
   10e64:	dd 24       	eor	r13, r13
   10e66:	da 94       	dec	r13
   10e68:	f6 ce       	rjmp	.-532    	; 0x10c56 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
   10e6a:	8e ef       	ldi	r24, 0xFE	; 254
   10e6c:	c8 2e       	mov	r12, r24
   10e6e:	dd 24       	eor	r13, r13
   10e70:	da 94       	dec	r13
   10e72:	d0 cd       	rjmp	.-1120   	; 0x10a14 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
   10e74:	d1 2c       	mov	r13, r1
   10e76:	c1 2c       	mov	r12, r1
   10e78:	cd cd       	rjmp	.-1126   	; 0x10a14 <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00010e7a <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   10e7a:	cf 92       	push	r12
   10e7c:	df 92       	push	r13
   10e7e:	ef 92       	push	r14
   10e80:	ff 92       	push	r15
   10e82:	0f 93       	push	r16
   10e84:	1f 93       	push	r17
   10e86:	cf 93       	push	r28
   10e88:	df 93       	push	r29
   10e8a:	cd b7       	in	r28, 0x3d	; 61
   10e8c:	de b7       	in	r29, 0x3e	; 62
   10e8e:	af 97       	sbiw	r28, 0x2f	; 47
   10e90:	0f b6       	in	r0, 0x3f	; 63
   10e92:	f8 94       	cli
   10e94:	de bf       	out	0x3e, r29	; 62
   10e96:	0f be       	out	0x3f, r0	; 63
   10e98:	cd bf       	out	0x3d, r28	; 61
   10e9a:	7c 01       	movw	r14, r24
   10e9c:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   10e9e:	02 ef       	ldi	r16, 0xF2	; 242
   10ea0:	12 e0       	ldi	r17, 0x02	; 2
   10ea2:	1a 83       	std	Y+2, r17	; 0x02
   10ea4:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   10ea6:	1c 86       	std	Y+12, r1	; 0x0c
   10ea8:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10eaa:	88 ee       	ldi	r24, 0xE8	; 232
   10eac:	93 e0       	ldi	r25, 0x03	; 3
   10eae:	a0 e0       	ldi	r26, 0x00	; 0
   10eb0:	b0 e0       	ldi	r27, 0x00	; 0
   10eb2:	8d 87       	std	Y+13, r24	; 0x0d
   10eb4:	9e 87       	std	Y+14, r25	; 0x0e
   10eb6:	af 87       	std	Y+15, r26	; 0x0f
   10eb8:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   10eba:	88 ea       	ldi	r24, 0xA8	; 168
   10ebc:	92 e0       	ldi	r25, 0x02	; 2
   10ebe:	9a 87       	std	Y+10, r25	; 0x0a
   10ec0:	89 87       	std	Y+9, r24	; 0x09
   10ec2:	88 e0       	ldi	r24, 0x08	; 8
   10ec4:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
   10ec6:	19 8f       	std	Y+25, r17	; 0x19
   10ec8:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10eca:	1a 8e       	std	Y+26, r1	; 0x1a
   10ecc:	1b 8e       	std	Y+27, r1	; 0x1b
   10ece:	1c 8e       	std	Y+28, r1	; 0x1c
   10ed0:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   10ed2:	1b a7       	std	Y+43, r17	; 0x2b
   10ed4:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10ed6:	1c a6       	std	Y+44, r1	; 0x2c
   10ed8:	1d a6       	std	Y+45, r1	; 0x2d
   10eda:	1e a6       	std	Y+46, r1	; 0x2e
   10edc:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   10ede:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <Ethernet+0x2>
   10ee2:	90 91 07 0e 	lds	r25, 0x0E07	; 0x800e07 <Ethernet+0x3>
   10ee6:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <Ethernet+0x4>
   10eea:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <Ethernet+0x5>
   10eee:	8e a3       	std	Y+38, r24	; 0x26
   10ef0:	9f a3       	std	Y+39, r25	; 0x27
   10ef2:	a8 a7       	std	Y+40, r26	; 0x28
   10ef4:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   10ef6:	8b 83       	std	Y+3, r24	; 0x03
   10ef8:	9c 83       	std	Y+4, r25	; 0x04
   10efa:	ad 83       	std	Y+5, r26	; 0x05
   10efc:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
   10efe:	18 86       	std	Y+8, r1	; 0x08
   10f00:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   10f02:	ae 01       	movw	r20, r28
   10f04:	46 5d       	subi	r20, 0xD6	; 214
   10f06:	5f 4f       	sbci	r21, 0xFF	; 255
   10f08:	ce 01       	movw	r24, r28
   10f0a:	01 96       	adiw	r24, 0x01	; 1
   10f0c:	0e 94 b4 84 	call	0x10968	; 0x10968 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   10f10:	81 30       	cpi	r24, 0x01	; 1
   10f12:	91 05       	cpc	r25, r1
   10f14:	b1 f4       	brne	.+44     	; 0x10f42 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   10f16:	d7 01       	movw	r26, r14
   10f18:	ed 91       	ld	r30, X+
   10f1a:	fc 91       	ld	r31, X
   10f1c:	04 88       	ldd	r0, Z+20	; 0x14
   10f1e:	f5 89       	ldd	r31, Z+21	; 0x15
   10f20:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   10f22:	1d a3       	std	Y+37, r17	; 0x25
   10f24:	0c a3       	std	Y+36, r16	; 0x24
   10f26:	8c a5       	ldd	r24, Y+44	; 0x2c
   10f28:	9d a5       	ldd	r25, Y+45	; 0x2d
   10f2a:	ae a5       	ldd	r26, Y+46	; 0x2e
   10f2c:	bf a5       	ldd	r27, Y+47	; 0x2f
   10f2e:	8e a3       	std	Y+38, r24	; 0x26
   10f30:	9f a3       	std	Y+39, r25	; 0x27
   10f32:	a8 a7       	std	Y+40, r26	; 0x28
   10f34:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   10f36:	a6 01       	movw	r20, r12
   10f38:	be 01       	movw	r22, r28
   10f3a:	6c 5d       	subi	r22, 0xDC	; 220
   10f3c:	7f 4f       	sbci	r23, 0xFF	; 255
   10f3e:	c7 01       	movw	r24, r14
   10f40:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   10f42:	af 96       	adiw	r28, 0x2f	; 47
   10f44:	0f b6       	in	r0, 0x3f	; 63
   10f46:	f8 94       	cli
   10f48:	de bf       	out	0x3e, r29	; 62
   10f4a:	0f be       	out	0x3f, r0	; 63
   10f4c:	cd bf       	out	0x3d, r28	; 61
   10f4e:	df 91       	pop	r29
   10f50:	cf 91       	pop	r28
   10f52:	1f 91       	pop	r17
   10f54:	0f 91       	pop	r16
   10f56:	ff 90       	pop	r15
   10f58:	ef 90       	pop	r14
   10f5a:	df 90       	pop	r13
   10f5c:	cf 90       	pop	r12
   10f5e:	08 95       	ret

00010f60 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
   10f60:	cf 92       	push	r12
   10f62:	df 92       	push	r13
   10f64:	ef 92       	push	r14
   10f66:	ff 92       	push	r15
   10f68:	0f 93       	push	r16
   10f6a:	1f 93       	push	r17
   10f6c:	cf 93       	push	r28
   10f6e:	df 93       	push	r29
   10f70:	cd b7       	in	r28, 0x3d	; 61
   10f72:	de b7       	in	r29, 0x3e	; 62
   10f74:	af 97       	sbiw	r28, 0x2f	; 47
   10f76:	0f b6       	in	r0, 0x3f	; 63
   10f78:	f8 94       	cli
   10f7a:	de bf       	out	0x3e, r29	; 62
   10f7c:	0f be       	out	0x3f, r0	; 63
   10f7e:	cd bf       	out	0x3d, r28	; 61
   10f80:	7c 01       	movw	r14, r24
   10f82:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   10f84:	02 ef       	ldi	r16, 0xF2	; 242
   10f86:	12 e0       	ldi	r17, 0x02	; 2
   10f88:	1a 83       	std	Y+2, r17	; 0x02
   10f8a:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   10f8c:	1c 86       	std	Y+12, r1	; 0x0c
   10f8e:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   10f90:	88 ee       	ldi	r24, 0xE8	; 232
   10f92:	93 e0       	ldi	r25, 0x03	; 3
   10f94:	a0 e0       	ldi	r26, 0x00	; 0
   10f96:	b0 e0       	ldi	r27, 0x00	; 0
   10f98:	8d 87       	std	Y+13, r24	; 0x0d
   10f9a:	9e 87       	std	Y+14, r25	; 0x0e
   10f9c:	af 87       	std	Y+15, r26	; 0x0f
   10f9e:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   10fa0:	88 ea       	ldi	r24, 0xA8	; 168
   10fa2:	92 e0       	ldi	r25, 0x02	; 2
   10fa4:	9a 87       	std	Y+10, r25	; 0x0a
   10fa6:	89 87       	std	Y+9, r24	; 0x09
   10fa8:	88 e0       	ldi	r24, 0x08	; 8
   10faa:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
   10fac:	19 8f       	std	Y+25, r17	; 0x19
   10fae:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10fb0:	1a 8e       	std	Y+26, r1	; 0x1a
   10fb2:	1b 8e       	std	Y+27, r1	; 0x1b
   10fb4:	1c 8e       	std	Y+28, r1	; 0x1c
   10fb6:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   10fb8:	1b a7       	std	Y+43, r17	; 0x2b
   10fba:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   10fbc:	1c a6       	std	Y+44, r1	; 0x2c
   10fbe:	1d a6       	std	Y+45, r1	; 0x2d
   10fc0:	1e a6       	std	Y+46, r1	; 0x2e
   10fc2:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   10fc4:	80 91 06 0e 	lds	r24, 0x0E06	; 0x800e06 <Ethernet+0x2>
   10fc8:	90 91 07 0e 	lds	r25, 0x0E07	; 0x800e07 <Ethernet+0x3>
   10fcc:	a0 91 08 0e 	lds	r26, 0x0E08	; 0x800e08 <Ethernet+0x4>
   10fd0:	b0 91 09 0e 	lds	r27, 0x0E09	; 0x800e09 <Ethernet+0x5>
   10fd4:	8e a3       	std	Y+38, r24	; 0x26
   10fd6:	9f a3       	std	Y+39, r25	; 0x27
   10fd8:	a8 a7       	std	Y+40, r26	; 0x28
   10fda:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   10fdc:	8b 83       	std	Y+3, r24	; 0x03
   10fde:	9c 83       	std	Y+4, r25	; 0x04
   10fe0:	ad 83       	std	Y+5, r26	; 0x05
   10fe2:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   10fe4:	18 86       	std	Y+8, r1	; 0x08
   10fe6:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   10fe8:	ae 01       	movw	r20, r28
   10fea:	46 5d       	subi	r20, 0xD6	; 214
   10fec:	5f 4f       	sbci	r21, 0xFF	; 255
   10fee:	ce 01       	movw	r24, r28
   10ff0:	01 96       	adiw	r24, 0x01	; 1
   10ff2:	0e 94 b4 84 	call	0x10968	; 0x10968 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
   10ff6:	81 30       	cpi	r24, 0x01	; 1
   10ff8:	91 05       	cpc	r25, r1
   10ffa:	b1 f4       	brne	.+44     	; 0x11028 <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
   10ffc:	d7 01       	movw	r26, r14
   10ffe:	ed 91       	ld	r30, X+
   11000:	fc 91       	ld	r31, X
   11002:	06 84       	ldd	r0, Z+14	; 0x0e
   11004:	f7 85       	ldd	r31, Z+15	; 0x0f
   11006:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   11008:	1d a3       	std	Y+37, r17	; 0x25
   1100a:	0c a3       	std	Y+36, r16	; 0x24
   1100c:	8c a5       	ldd	r24, Y+44	; 0x2c
   1100e:	9d a5       	ldd	r25, Y+45	; 0x2d
   11010:	ae a5       	ldd	r26, Y+46	; 0x2e
   11012:	bf a5       	ldd	r27, Y+47	; 0x2f
   11014:	8e a3       	std	Y+38, r24	; 0x26
   11016:	9f a3       	std	Y+39, r25	; 0x27
   11018:	a8 a7       	std	Y+40, r26	; 0x28
   1101a:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
   1101c:	a6 01       	movw	r20, r12
   1101e:	be 01       	movw	r22, r28
   11020:	6c 5d       	subi	r22, 0xDC	; 220
   11022:	7f 4f       	sbci	r23, 0xFF	; 255
   11024:	c7 01       	movw	r24, r14
   11026:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
   11028:	af 96       	adiw	r28, 0x2f	; 47
   1102a:	0f b6       	in	r0, 0x3f	; 63
   1102c:	f8 94       	cli
   1102e:	de bf       	out	0x3e, r29	; 62
   11030:	0f be       	out	0x3f, r0	; 63
   11032:	cd bf       	out	0x3d, r28	; 61
   11034:	df 91       	pop	r29
   11036:	cf 91       	pop	r28
   11038:	1f 91       	pop	r17
   1103a:	0f 91       	pop	r16
   1103c:	ff 90       	pop	r15
   1103e:	ef 90       	pop	r14
   11040:	df 90       	pop	r13
   11042:	cf 90       	pop	r12
   11044:	08 95       	ret

00011046 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)>:
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5964
///////////////////////////////////////////////////////////////////
/*
   Obsluha tlacitka kontrola konektivity
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
   11046:	cf 93       	push	r28
   11048:	df 93       	push	r29
   1104a:	cd b7       	in	r28, 0x3d	; 61
   1104c:	de b7       	in	r29, 0x3e	; 62
   1104e:	60 97       	sbiw	r28, 0x10	; 16
   11050:	0f b6       	in	r0, 0x3f	; 63
   11052:	f8 94       	cli
   11054:	de bf       	out	0x3e, r29	; 62
   11056:	0f be       	out	0x3f, r0	; 63
   11058:	cd bf       	out	0x3d, r28	; 61
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5979
*/
uint8_t check_connectivity_connection(void)
{
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
   1105a:	67 eb       	ldi	r22, 0xB7	; 183
   1105c:	75 e8       	ldi	r23, 0x85	; 133
   1105e:	ce 01       	movw	r24, r28
   11060:	01 96       	adiw	r24, 0x01	; 1
   11062:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5980
  if (!ethClient1.connected())
   11066:	87 e6       	ldi	r24, 0x67	; 103
   11068:	92 e1       	ldi	r25, 0x12	; 18
   1106a:	0e 94 8a 82 	call	0x10514	; 0x10514 <EthernetClient::connected()>
   1106e:	81 11       	cpse	r24, r1
   11070:	17 c0       	rjmp	.+46     	; 0x110a0 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5982
  {
    if (ethClient1.connect(server, 80))
   11072:	40 e5       	ldi	r20, 0x50	; 80
   11074:	50 e0       	ldi	r21, 0x00	; 0
   11076:	be 01       	movw	r22, r28
   11078:	6f 5f       	subi	r22, 0xFF	; 255
   1107a:	7f 4f       	sbci	r23, 0xFF	; 255
   1107c:	87 e6       	ldi	r24, 0x67	; 103
   1107e:	92 e1       	ldi	r25, 0x12	; 18
   11080:	0e 94 b0 87 	call	0x10f60	; 0x10f60 <EthernetClient::connect(char const*, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5984
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   11084:	70 e0       	ldi	r23, 0x00	; 0
   11086:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5982
  char server[16];
  uint8_t ret = 0;
  strcpy_P(server, seznam_server);
  if (!ethClient1.connected())
  {
    if (ethClient1.connect(server, 80))
   11088:	89 2b       	or	r24, r25
   1108a:	99 f0       	breq	.+38     	; 0x110b2 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5984
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   1108c:	88 e6       	ldi	r24, 0x68	; 104
   1108e:	90 e0       	ldi	r25, 0x00	; 0
   11090:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5985
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
   11094:	66 e9       	ldi	r22, 0x96	; 150
   11096:	75 e8       	ldi	r23, 0x85	; 133
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5991
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   11098:	85 e1       	ldi	r24, 0x15	; 21
   1109a:	9a e0       	ldi	r25, 0x0A	; 10
   1109c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
_Z38button_network_test_connection_onclickjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5967
*/
void button_network_test_connection_onclick(uint16_t args1, uint16_t args2, uint8_t args3)
{
  check_connectivity_connection();
  /// TODO - pridat do selfcheck testu
}
   110a0:	60 96       	adiw	r28, 0x10	; 16
   110a2:	0f b6       	in	r0, 0x3f	; 63
   110a4:	f8 94       	cli
   110a6:	de bf       	out	0x3e, r29	; 62
   110a8:	0f be       	out	0x3f, r0	; 63
   110aa:	cd bf       	out	0x3d, r28	; 61
   110ac:	df 91       	pop	r29
   110ae:	cf 91       	pop	r28
   110b0:	08 95       	ret
check_connectivity_connection():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5990
      strcpy_P(dialog_text, new_text_ok_connect_seznam);
      ret = 1;
    }
    else
    {
      MenuHistoryNextMenu(MENU_DIALOG_OK, 0, 0);
   110b2:	88 e6       	ldi	r24, 0x68	; 104
   110b4:	90 e0       	ldi	r25, 0x00	; 0
   110b6:	0e 94 92 b8 	call	0x17124	; 0x17124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5991
      strcpy_P(dialog_text, new_text_err_connect_seznam);
   110ba:	65 ea       	ldi	r22, 0xA5	; 165
   110bc:	75 e8       	ldi	r23, 0x85	; 133
   110be:	ec cf       	rjmp	.-40     	; 0x11098 <button_network_test_connection_onclick(unsigned int, unsigned int, unsigned char)+0x52>

000110c0 <EthernetServer::begin()>:
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:17
{
  _port = port;
}

void EthernetServer::begin()
{
   110c0:	8f 92       	push	r8
   110c2:	9f 92       	push	r9
   110c4:	af 92       	push	r10
   110c6:	bf 92       	push	r11
   110c8:	cf 92       	push	r12
   110ca:	df 92       	push	r13
   110cc:	ef 92       	push	r14
   110ce:	ff 92       	push	r15
   110d0:	0f 93       	push	r16
   110d2:	1f 93       	push	r17
   110d4:	cf 93       	push	r28
   110d6:	df 93       	push	r29
   110d8:	cd b7       	in	r28, 0x3d	; 61
   110da:	de b7       	in	r29, 0x3e	; 62
   110dc:	2d 97       	sbiw	r28, 0x0d	; 13
   110de:	0f b6       	in	r0, 0x3f	; 63
   110e0:	f8 94       	cli
   110e2:	de bf       	out	0x3e, r29	; 62
   110e4:	0f be       	out	0x3f, r0	; 63
   110e6:	cd bf       	out	0x3d, r28	; 61
   110e8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   110ea:	10 e0       	ldi	r17, 0x00	; 0
   110ec:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   110ee:	38 ee       	ldi	r19, 0xE8	; 232
   110f0:	83 2e       	mov	r8, r19
   110f2:	33 e0       	ldi	r19, 0x03	; 3
   110f4:	93 2e       	mov	r9, r19
   110f6:	a1 2c       	mov	r10, r1
   110f8:	b1 2c       	mov	r11, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   110fa:	40 ed       	ldi	r20, 0xD0	; 208
   110fc:	c4 2e       	mov	r12, r20
   110fe:	42 e0       	ldi	r20, 0x02	; 2
   11100:	d4 2e       	mov	r13, r20
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   11102:	1c 82       	std	Y+4, r1	; 0x04
   11104:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   11106:	8d 82       	std	Y+5, r8	; 0x05
   11108:	9e 82       	std	Y+6, r9	; 0x06
   1110a:	af 82       	std	Y+7, r10	; 0x07
   1110c:	b8 86       	std	Y+8, r11	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1110e:	da 82       	std	Y+2, r13	; 0x02
   11110:	c9 82       	std	Y+1, r12	; 0x01
   11112:	0d 87       	std	Y+13, r16	; 0x0d
_ZN14EthernetServer5beginEv():
    EthernetClient client(sock);
    if (client.status() == SnSR::CLOSED) {
   11114:	ce 01       	movw	r24, r28
   11116:	01 96       	adiw	r24, 0x01	; 1
   11118:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   1111c:	81 11       	cpse	r24, r1
   1111e:	30 c0       	rjmp	.+96     	; 0x11180 <EthernetServer::begin()+0xc0>
socket():
   11120:	f7 01       	movw	r30, r14
   11122:	44 81       	ldd	r20, Z+4	; 0x04
   11124:	55 81       	ldd	r21, Z+5	; 0x05
   11126:	61 e0       	ldi	r22, 0x01	; 1
   11128:	80 2f       	mov	r24, r16
   1112a:	0e 94 0e d2 	call	0x1a41c	; 0x1a41c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   1112e:	63 e0       	ldi	r22, 0x03	; 3
   11130:	70 e0       	ldi	r23, 0x00	; 0
   11132:	80 2f       	mov	r24, r16
   11134:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
listen():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:55
 * @brief	This function established  the connection for the channel in passive (server) mode. This function waits for the request from the peer.
 * @return	1 for success else 0.
 */
uint8_t listen(SOCKET s)
{
  if (w5500.readSnSR(s) != SnSR::INIT)
   11138:	83 31       	cpi	r24, 0x13	; 19
   1113a:	29 f4       	brne	.+10     	; 0x11146 <EthernetServer::begin()+0x86>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:57
    return 0;
  w5500.execCmdSn(s, Sock_LISTEN);
   1113c:	62 e0       	ldi	r22, 0x02	; 2
   1113e:	70 e0       	ldi	r23, 0x00	; 0
   11140:	80 2f       	mov	r24, r16
   11142:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetServer5beginEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:23
      socket(sock, SnMR::TCP, _port, 0);
      listen(sock);
      EthernetClass::_server_port[sock] = _port;
   11146:	f7 01       	movw	r30, r14
   11148:	84 81       	ldd	r24, Z+4	; 0x04
   1114a:	95 81       	ldd	r25, Z+5	; 0x05
   1114c:	00 0f       	add	r16, r16
   1114e:	11 1f       	adc	r17, r17
   11150:	f8 01       	movw	r30, r16
   11152:	e6 59       	subi	r30, 0x96	; 150
   11154:	f4 4f       	sbci	r31, 0xF4	; 244
   11156:	91 83       	std	Z+1, r25	; 0x01
   11158:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:27
      break;
    }
  }  
}
   1115a:	2d 96       	adiw	r28, 0x0d	; 13
   1115c:	0f b6       	in	r0, 0x3f	; 63
   1115e:	f8 94       	cli
   11160:	de bf       	out	0x3e, r29	; 62
   11162:	0f be       	out	0x3f, r0	; 63
   11164:	cd bf       	out	0x3d, r28	; 61
   11166:	df 91       	pop	r29
   11168:	cf 91       	pop	r28
   1116a:	1f 91       	pop	r17
   1116c:	0f 91       	pop	r16
   1116e:	ff 90       	pop	r15
   11170:	ef 90       	pop	r14
   11172:	df 90       	pop	r13
   11174:	cf 90       	pop	r12
   11176:	bf 90       	pop	r11
   11178:	af 90       	pop	r10
   1117a:	9f 90       	pop	r9
   1117c:	8f 90       	pop	r8
   1117e:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:18
  _port = port;
}

void EthernetServer::begin()
{
  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   11180:	0f 5f       	subi	r16, 0xFF	; 255
   11182:	1f 4f       	sbci	r17, 0xFF	; 255
   11184:	08 30       	cpi	r16, 0x08	; 8
   11186:	11 05       	cpc	r17, r1
   11188:	09 f0       	breq	.+2      	; 0x1118c <EthernetServer::begin()+0xcc>
   1118a:	bb cf       	rjmp	.-138    	; 0x11102 <EthernetServer::begin()+0x42>
   1118c:	e6 cf       	rjmp	.-52     	; 0x1115a <EthernetServer::begin()+0x9a>

0001118e <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
   1118e:	8f 92       	push	r8
   11190:	9f 92       	push	r9
   11192:	af 92       	push	r10
   11194:	bf 92       	push	r11
   11196:	cf 92       	push	r12
   11198:	df 92       	push	r13
   1119a:	ef 92       	push	r14
   1119c:	ff 92       	push	r15
   1119e:	0f 93       	push	r16
   111a0:	1f 93       	push	r17
   111a2:	cf 93       	push	r28
   111a4:	6c 01       	movw	r12, r24
   111a6:	5b 01       	movw	r10, r22
   111a8:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
   111aa:	fc 01       	movw	r30, r24
   111ac:	c4 85       	ldd	r28, Z+12	; 0x0c
   111ae:	c8 30       	cpi	r28, 0x08	; 8
   111b0:	a1 f4       	brne	.+40     	; 0x111da <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   111b2:	81 e0       	ldi	r24, 0x01	; 1
   111b4:	90 e0       	ldi	r25, 0x00	; 0
   111b6:	f6 01       	movw	r30, r12
   111b8:	93 83       	std	Z+3, r25	; 0x03
   111ba:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
   111bc:	f1 2c       	mov	r15, r1
   111be:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
   111c0:	c7 01       	movw	r24, r14
   111c2:	cf 91       	pop	r28
   111c4:	1f 91       	pop	r17
   111c6:	0f 91       	pop	r16
   111c8:	ff 90       	pop	r15
   111ca:	ef 90       	pop	r14
   111cc:	df 90       	pop	r13
   111ce:	cf 90       	pop	r12
   111d0:	bf 90       	pop	r11
   111d2:	af 90       	pop	r10
   111d4:	9f 90       	pop	r9
   111d6:	8f 90       	pop	r8
   111d8:	08 95       	ret
   111da:	8a 01       	movw	r16, r20
   111dc:	41 30       	cpi	r20, 0x01	; 1
   111de:	58 40       	sbci	r21, 0x08	; 8
   111e0:	10 f0       	brcs	.+4      	; 0x111e6 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
   111e2:	00 e0       	ldi	r16, 0x00	; 0
   111e4:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
   111e6:	8c 2f       	mov	r24, r28
   111e8:	0e 94 ab d9 	call	0x1b356	; 0x1b356 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>
   111ec:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
   111ee:	63 e0       	ldi	r22, 0x03	; 3
   111f0:	70 e0       	ldi	r23, 0x00	; 0
   111f2:	8c 2f       	mov	r24, r28
   111f4:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
   111f8:	87 31       	cpi	r24, 0x17	; 23
   111fa:	11 f0       	breq	.+4      	; 0x11200 <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
   111fc:	8c 31       	cpi	r24, 0x1C	; 28
   111fe:	09 f5       	brne	.+66     	; 0x11242 <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
   11200:	80 16       	cp	r8, r16
   11202:	91 06       	cpc	r9, r17
   11204:	80 f3       	brcs	.-32     	; 0x111e6 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
   11206:	98 01       	movw	r18, r16
   11208:	a5 01       	movw	r20, r10
   1120a:	70 e0       	ldi	r23, 0x00	; 0
   1120c:	60 e0       	ldi	r22, 0x00	; 0
   1120e:	8c 2f       	mov	r24, r28
   11210:	0e 94 6b d9 	call	0x1b2d6	; 0x1b2d6 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
   11214:	60 e2       	ldi	r22, 0x20	; 32
   11216:	70 e0       	ldi	r23, 0x00	; 0
   11218:	8c 2f       	mov	r24, r28
   1121a:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1121e:	62 e0       	ldi	r22, 0x02	; 2
   11220:	70 e0       	ldi	r23, 0x00	; 0
   11222:	8c 2f       	mov	r24, r28
   11224:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   11228:	84 fd       	sbrc	r24, 4
   1122a:	0e c0       	rjmp	.+28     	; 0x11248 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1122c:	63 e0       	ldi	r22, 0x03	; 3
   1122e:	70 e0       	ldi	r23, 0x00	; 0
   11230:	8c 2f       	mov	r24, r28
   11232:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
   11236:	81 11       	cpse	r24, r1
   11238:	f2 cf       	rjmp	.-28     	; 0x1121e <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
   1123a:	8c 2f       	mov	r24, r28
   1123c:	0e 94 e6 81 	call	0x103cc	; 0x103cc <close(unsigned char)>
   11240:	b8 cf       	rjmp	.-144    	; 0x111b2 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
   11242:	10 e0       	ldi	r17, 0x00	; 0
   11244:	00 e0       	ldi	r16, 0x00	; 0
   11246:	df cf       	rjmp	.-66     	; 0x11206 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   11248:	40 e1       	ldi	r20, 0x10	; 16
   1124a:	62 e0       	ldi	r22, 0x02	; 2
   1124c:	70 e0       	ldi	r23, 0x00	; 0
   1124e:	8c 2f       	mov	r24, r28
   11250:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
   11254:	01 2b       	or	r16, r17
   11256:	09 f0       	breq	.+2      	; 0x1125a <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
   11258:	b3 cf       	rjmp	.-154    	; 0x111c0 <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
   1125a:	ab cf       	rjmp	.-170    	; 0x111b2 <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

0001125c <EthernetServer::write(unsigned char const*, unsigned int)>:
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:76
{
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
   1125c:	3f 92       	push	r3
   1125e:	4f 92       	push	r4
   11260:	5f 92       	push	r5
   11262:	6f 92       	push	r6
   11264:	7f 92       	push	r7
   11266:	8f 92       	push	r8
   11268:	9f 92       	push	r9
   1126a:	af 92       	push	r10
   1126c:	bf 92       	push	r11
   1126e:	cf 92       	push	r12
   11270:	df 92       	push	r13
   11272:	ef 92       	push	r14
   11274:	ff 92       	push	r15
   11276:	0f 93       	push	r16
   11278:	1f 93       	push	r17
   1127a:	cf 93       	push	r28
   1127c:	df 93       	push	r29
   1127e:	cd b7       	in	r28, 0x3d	; 61
   11280:	de b7       	in	r29, 0x3e	; 62
   11282:	2d 97       	sbiw	r28, 0x0d	; 13
   11284:	0f b6       	in	r0, 0x3f	; 63
   11286:	f8 94       	cli
   11288:	de bf       	out	0x3e, r29	; 62
   1128a:	0f be       	out	0x3f, r0	; 63
   1128c:	cd bf       	out	0x3d, r28	; 61
   1128e:	6c 01       	movw	r12, r24
   11290:	5b 01       	movw	r10, r22
   11292:	4a 01       	movw	r8, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:79
  size_t n = 0;
  
  accept();
   11294:	0e 94 ef 82 	call	0x105de	; 0x105de <EthernetServer::accept()>
   11298:	8a e6       	ldi	r24, 0x6A	; 106
   1129a:	e8 2e       	mov	r14, r24
   1129c:	8b e0       	ldi	r24, 0x0B	; 11
   1129e:	f8 2e       	mov	r15, r24
   112a0:	31 2c       	mov	r3, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:77
  return write(&b, 1);
}

size_t EthernetServer::write(const uint8_t *buffer, size_t size) 
{
  size_t n = 0;
   112a2:	10 e0       	ldi	r17, 0x00	; 0
   112a4:	00 e0       	ldi	r16, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   112a6:	98 ee       	ldi	r25, 0xE8	; 232
   112a8:	49 2e       	mov	r4, r25
   112aa:	93 e0       	ldi	r25, 0x03	; 3
   112ac:	59 2e       	mov	r5, r25
   112ae:	61 2c       	mov	r6, r1
   112b0:	71 2c       	mov	r7, r1
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
   112b2:	1c 82       	std	Y+4, r1	; 0x04
   112b4:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   112b6:	4d 82       	std	Y+5, r4	; 0x05
   112b8:	5e 82       	std	Y+6, r5	; 0x06
   112ba:	6f 82       	std	Y+7, r6	; 0x07
   112bc:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   112be:	80 ed       	ldi	r24, 0xD0	; 208
   112c0:	92 e0       	ldi	r25, 0x02	; 2
   112c2:	9a 83       	std	Y+2, r25	; 0x02
   112c4:	89 83       	std	Y+1, r24	; 0x01
   112c6:	3d 86       	std	Y+13, r3	; 0x0d
_ZN14EthernetServer5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   112c8:	f7 01       	movw	r30, r14
   112ca:	21 91       	ld	r18, Z+
   112cc:	31 91       	ld	r19, Z+
   112ce:	7f 01       	movw	r14, r30
   112d0:	f6 01       	movw	r30, r12
   112d2:	84 81       	ldd	r24, Z+4	; 0x04
   112d4:	95 81       	ldd	r25, Z+5	; 0x05
   112d6:	28 17       	cp	r18, r24
   112d8:	39 07       	cpc	r19, r25
   112da:	71 f4       	brne	.+28     	; 0x112f8 <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:85
      client.status() == SnSR::ESTABLISHED) {
   112dc:	ce 01       	movw	r24, r28
   112de:	01 96       	adiw	r24, 0x01	; 1
   112e0:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:84
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);

    if (EthernetClass::_server_port[sock] == _port &&
   112e4:	87 31       	cpi	r24, 0x17	; 23
   112e6:	41 f4       	brne	.+16     	; 0x112f8 <EthernetServer::write(unsigned char const*, unsigned int)+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:86
      client.status() == SnSR::ESTABLISHED) {
      n += client.write(buffer, size);
   112e8:	a4 01       	movw	r20, r8
   112ea:	b5 01       	movw	r22, r10
   112ec:	ce 01       	movw	r24, r28
   112ee:	01 96       	adiw	r24, 0x01	; 1
   112f0:	0e 94 c7 88 	call	0x1118e	; 0x1118e <EthernetClient::write(unsigned char const*, unsigned int)>
   112f4:	08 0f       	add	r16, r24
   112f6:	19 1f       	adc	r17, r25
   112f8:	33 94       	inc	r3
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:81
{
  size_t n = 0;
  
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   112fa:	f8 e0       	ldi	r31, 0x08	; 8
   112fc:	3f 12       	cpse	r3, r31
   112fe:	d9 cf       	rjmp	.-78     	; 0x112b2 <EthernetServer::write(unsigned char const*, unsigned int)+0x56>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:91
      n += client.write(buffer, size);
    }
  }
  
  return n;
}
   11300:	c8 01       	movw	r24, r16
   11302:	2d 96       	adiw	r28, 0x0d	; 13
   11304:	0f b6       	in	r0, 0x3f	; 63
   11306:	f8 94       	cli
   11308:	de bf       	out	0x3e, r29	; 62
   1130a:	0f be       	out	0x3f, r0	; 63
   1130c:	cd bf       	out	0x3d, r28	; 61
   1130e:	df 91       	pop	r29
   11310:	cf 91       	pop	r28
   11312:	1f 91       	pop	r17
   11314:	0f 91       	pop	r16
   11316:	ff 90       	pop	r15
   11318:	ef 90       	pop	r14
   1131a:	df 90       	pop	r13
   1131c:	cf 90       	pop	r12
   1131e:	bf 90       	pop	r11
   11320:	af 90       	pop	r10
   11322:	9f 90       	pop	r9
   11324:	8f 90       	pop	r8
   11326:	7f 90       	pop	r7
   11328:	6f 90       	pop	r6
   1132a:	5f 90       	pop	r5
   1132c:	4f 90       	pop	r4
   1132e:	3f 90       	pop	r3
   11330:	08 95       	ret

00011332 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
   11332:	df 92       	push	r13
   11334:	ef 92       	push	r14
   11336:	ff 92       	push	r15
   11338:	0f 93       	push	r16
   1133a:	1f 93       	push	r17
   1133c:	cf 93       	push	r28
   1133e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
   11340:	fc 01       	movw	r30, r24
   11342:	24 85       	ldd	r18, Z+12	; 0x0c
   11344:	28 30       	cpi	r18, 0x08	; 8
   11346:	51 f0       	breq	.+20     	; 0x1135c <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
   11348:	90 e0       	ldi	r25, 0x00	; 0
   1134a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
   1134c:	df 91       	pop	r29
   1134e:	cf 91       	pop	r28
   11350:	1f 91       	pop	r17
   11352:	0f 91       	pop	r16
   11354:	ff 90       	pop	r15
   11356:	ef 90       	pop	r14
   11358:	df 90       	pop	r13
   1135a:	08 95       	ret
   1135c:	7a 01       	movw	r14, r20
   1135e:	eb 01       	movw	r28, r22
   11360:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   11362:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   11364:	63 e0       	ldi	r22, 0x03	; 3
   11366:	70 e0       	ldi	r23, 0x00	; 0
   11368:	8d 2d       	mov	r24, r13
   1136a:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   1136e:	81 11       	cpse	r24, r1
   11370:	28 c0       	rjmp	.+80     	; 0x113c2 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
   11372:	f8 01       	movw	r30, r16
   11374:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   11376:	f8 01       	movw	r30, r16
   11378:	84 85       	ldd	r24, Z+12	; 0x0c
   1137a:	88 30       	cpi	r24, 0x08	; 8
   1137c:	29 f3       	breq	.-54     	; 0x11348 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
   1137e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   11382:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   11386:	2f 5f       	subi	r18, 0xFF	; 255
   11388:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
   1138a:	19 f1       	breq	.+70     	; 0x113d2 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
   1138c:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   11390:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
socket():
   11394:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
   11398:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
   1139c:	61 e0       	ldi	r22, 0x01	; 1
   1139e:	0e 94 0e d2 	call	0x1a41c	; 0x1a41c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   113a2:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
   113a4:	8f 3f       	cpi	r24, 0xFF	; 255
   113a6:	c1 f4       	brne	.+48     	; 0x113d8 <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
   113a8:	8b 81       	ldd	r24, Y+3	; 0x03
   113aa:	8f 3f       	cpi	r24, 0xFF	; 255
   113ac:	01 f5       	brne	.+64     	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   113ae:	8c 81       	ldd	r24, Y+4	; 0x04
   113b0:	8f 3f       	cpi	r24, 0xFF	; 255
   113b2:	e9 f4       	brne	.+58     	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   113b4:	8d 81       	ldd	r24, Y+5	; 0x05
   113b6:	8f 3f       	cpi	r24, 0xFF	; 255
   113b8:	d1 f4       	brne	.+52     	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
   113ba:	88 e0       	ldi	r24, 0x08	; 8
   113bc:	f8 01       	movw	r30, r16
   113be:	84 87       	std	Z+12, r24	; 0x0c
   113c0:	c3 cf       	rjmp	.-122    	; 0x11348 <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
   113c2:	8b 7f       	andi	r24, 0xFB	; 251
   113c4:	88 31       	cpi	r24, 0x18	; 24
   113c6:	a9 f2       	breq	.-86     	; 0x11372 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
   113c8:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   113ca:	f8 e0       	ldi	r31, 0x08	; 8
   113cc:	df 12       	cpse	r13, r31
   113ce:	ca cf       	rjmp	.-108    	; 0x11364 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
   113d0:	d2 cf       	rjmp	.-92     	; 0x11376 <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
   113d2:	20 e0       	ldi	r18, 0x00	; 0
   113d4:	34 e0       	ldi	r19, 0x04	; 4
   113d6:	da cf       	rjmp	.-76     	; 0x1138c <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
   113d8:	81 11       	cpse	r24, r1
   113da:	09 c0       	rjmp	.+18     	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   113dc:	8b 81       	ldd	r24, Y+3	; 0x03
   113de:	81 11       	cpse	r24, r1
   113e0:	06 c0       	rjmp	.+12     	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   113e2:	8c 81       	ldd	r24, Y+4	; 0x04
   113e4:	81 11       	cpse	r24, r1
   113e6:	03 c0       	rjmp	.+6      	; 0x113ee <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
   113e8:	8d 81       	ldd	r24, Y+5	; 0x05
   113ea:	88 23       	and	r24, r24
   113ec:	31 f3       	breq	.-52     	; 0x113ba <EthernetClient::connect(IPAddress, unsigned int)+0x88>
   113ee:	e1 14       	cp	r14, r1
   113f0:	f1 04       	cpc	r15, r1
   113f2:	19 f3       	breq	.-58     	; 0x113ba <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
   113f4:	f8 01       	movw	r30, r16
   113f6:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   113f8:	ae 01       	movw	r20, r28
   113fa:	4e 5f       	subi	r20, 0xFE	; 254
   113fc:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   113fe:	6d 2d       	mov	r22, r13
   11400:	62 95       	swap	r22
   11402:	66 0f       	add	r22, r22
   11404:	60 7e       	andi	r22, 0xE0	; 224
   11406:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   11408:	24 e0       	ldi	r18, 0x04	; 4
   1140a:	30 e0       	ldi	r19, 0x00	; 0
   1140c:	8c e0       	ldi	r24, 0x0C	; 12
   1140e:	90 e0       	ldi	r25, 0x00	; 0
   11410:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   11414:	4f 2d       	mov	r20, r15
   11416:	60 e1       	ldi	r22, 0x10	; 16
   11418:	70 e0       	ldi	r23, 0x00	; 0
   1141a:	8d 2d       	mov	r24, r13
   1141c:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   11420:	4e 2d       	mov	r20, r14
   11422:	61 e1       	ldi	r22, 0x11	; 17
   11424:	70 e0       	ldi	r23, 0x00	; 0
   11426:	8d 2d       	mov	r24, r13
   11428:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
   1142c:	64 e0       	ldi	r22, 0x04	; 4
   1142e:	70 e0       	ldi	r23, 0x00	; 0
   11430:	8d 2d       	mov	r24, r13
   11432:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
   11436:	c8 01       	movw	r24, r16
   11438:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   1143c:	87 31       	cpi	r24, 0x17	; 23
   1143e:	61 f0       	breq	.+24     	; 0x11458 <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
   11440:	61 e0       	ldi	r22, 0x01	; 1
   11442:	70 e0       	ldi	r23, 0x00	; 0
   11444:	80 e0       	ldi	r24, 0x00	; 0
   11446:	90 e0       	ldi	r25, 0x00	; 0
   11448:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
   1144c:	c8 01       	movw	r24, r16
   1144e:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
   11452:	81 11       	cpse	r24, r1
   11454:	f0 cf       	rjmp	.-32     	; 0x11436 <EthernetClient::connect(IPAddress, unsigned int)+0x104>
   11456:	b1 cf       	rjmp	.-158    	; 0x113ba <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
   11458:	81 e0       	ldi	r24, 0x01	; 1
   1145a:	90 e0       	ldi	r25, 0x00	; 0
   1145c:	77 cf       	rjmp	.-274    	; 0x1134c <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

0001145e <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
   1145e:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
   11460:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
   11462:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
   11464:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SPIClass::initialized>
   11468:	81 11       	cpse	r24, r1
   1146a:	27 c0       	rjmp	.+78     	; 0x114ba <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
   1146c:	ed eb       	ldi	r30, 0xBD	; 189
   1146e:	fd e8       	ldi	r31, 0x8D	; 141
   11470:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
   11472:	e7 e7       	ldi	r30, 0x77	; 119
   11474:	fd e8       	ldi	r31, 0x8D	; 141
   11476:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
   11478:	e8 2f       	mov	r30, r24
   1147a:	f0 e0       	ldi	r31, 0x00	; 0
   1147c:	ee 0f       	add	r30, r30
   1147e:	ff 1f       	adc	r31, r31
   11480:	e0 59       	subi	r30, 0x90	; 144
   11482:	f9 47       	sbci	r31, 0x79	; 121
   11484:	a5 91       	lpm	r26, Z+
   11486:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
   11488:	ec 91       	ld	r30, X
   1148a:	e9 23       	and	r30, r25
   1148c:	21 f4       	brne	.+8      	; 0x11496 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
   1148e:	61 e0       	ldi	r22, 0x01	; 1
   11490:	88 e0       	ldi	r24, 0x08	; 8
   11492:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
   11496:	61 e0       	ldi	r22, 0x01	; 1
   11498:	88 e0       	ldi	r24, 0x08	; 8
   1149a:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
   1149e:	8c b5       	in	r24, 0x2c	; 44
   114a0:	80 61       	ori	r24, 0x10	; 16
   114a2:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
   114a4:	8c b5       	in	r24, 0x2c	; 44
   114a6:	80 64       	ori	r24, 0x40	; 64
   114a8:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
   114aa:	61 e0       	ldi	r22, 0x01	; 1
   114ac:	89 e0       	ldi	r24, 0x09	; 9
   114ae:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
   114b2:	61 e0       	ldi	r22, 0x01	; 1
   114b4:	8a e0       	ldi	r24, 0x0A	; 10
   114b6:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
   114ba:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SPIClass::initialized>
   114be:	8f 5f       	subi	r24, 0xFF	; 255
   114c0:	80 93 f9 0a 	sts	0x0AF9, r24	; 0x800af9 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
   114c4:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.cpp:64
}
   114c6:	cf 91       	pop	r28
   114c8:	08 95       	ret

000114ca <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
   114ca:	7f 92       	push	r7
   114cc:	8f 92       	push	r8
   114ce:	9f 92       	push	r9
   114d0:	af 92       	push	r10
   114d2:	bf 92       	push	r11
   114d4:	cf 92       	push	r12
   114d6:	df 92       	push	r13
   114d8:	ef 92       	push	r14
   114da:	ff 92       	push	r15
   114dc:	0f 93       	push	r16
   114de:	1f 93       	push	r17
   114e0:	cf 93       	push	r28
   114e2:	df 93       	push	r29
   114e4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
   114e6:	fc 01       	movw	r30, r24
   114e8:	86 81       	ldd	r24, Z+6	; 0x06
   114ea:	81 11       	cpse	r24, r1
   114ec:	35 c0       	rjmp	.+106    	; 0x11558 <SoftSPIB::transfer(unsigned char)+0x8e>
   114ee:	86 2f       	mov	r24, r22
   114f0:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
   114f2:	ec 01       	movw	r28, r24
   114f4:	d6 95       	lsr	r29
   114f6:	dc 2f       	mov	r29, r28
   114f8:	cc 27       	eor	r28, r28
   114fa:	d7 95       	ror	r29
   114fc:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
   114fe:	66 1f       	adc	r22, r22
   11500:	66 27       	eor	r22, r22
   11502:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11504:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
   11506:	ec 01       	movw	r28, r24
   11508:	55 e0       	ldi	r21, 0x05	; 5
   1150a:	cc 0f       	add	r28, r28
   1150c:	dd 1f       	adc	r29, r29
   1150e:	5a 95       	dec	r21
   11510:	e1 f7       	brne	.-8      	; 0x1150a <SoftSPIB::transfer(unsigned char)+0x40>
   11512:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11514:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
   11516:	ec 01       	movw	r28, r24
   11518:	73 e0       	ldi	r23, 0x03	; 3
   1151a:	cc 0f       	add	r28, r28
   1151c:	dd 1f       	adc	r29, r29
   1151e:	7a 95       	dec	r23
   11520:	e1 f7       	brne	.-8      	; 0x1151a <SoftSPIB::transfer(unsigned char)+0x50>
   11522:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11524:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
   11526:	ec 01       	movw	r28, r24
   11528:	cc 0f       	add	r28, r28
   1152a:	dd 1f       	adc	r29, r29
   1152c:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   1152e:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
   11530:	ec 01       	movw	r28, r24
   11532:	d5 95       	asr	r29
   11534:	c7 95       	ror	r28
   11536:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
   11538:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
   1153a:	ec 01       	movw	r28, r24
   1153c:	a3 e0       	ldi	r26, 0x03	; 3
   1153e:	d5 95       	asr	r29
   11540:	c7 95       	ror	r28
   11542:	aa 95       	dec	r26
   11544:	e1 f7       	brne	.-8      	; 0x1153e <SoftSPIB::transfer(unsigned char)+0x74>
   11546:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
   11548:	6c 2b       	or	r22, r28
   1154a:	b5 e0       	ldi	r27, 0x05	; 5
   1154c:	95 95       	asr	r25
   1154e:	87 95       	ror	r24
   11550:	ba 95       	dec	r27
   11552:	e1 f7       	brne	.-8      	; 0x1154c <SoftSPIB::transfer(unsigned char)+0x82>
   11554:	82 70       	andi	r24, 0x02	; 2
   11556:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
   11558:	91 e0       	ldi	r25, 0x01	; 1
   1155a:	80 e0       	ldi	r24, 0x00	; 0
   1155c:	f8 01       	movw	r30, r16
   1155e:	21 81       	ldd	r18, Z+1	; 0x01
   11560:	21 11       	cpse	r18, r1
   11562:	01 c0       	rjmp	.+2      	; 0x11566 <SoftSPIB::transfer(unsigned char)+0x9c>
   11564:	90 e0       	ldi	r25, 0x00	; 0
   11566:	e9 2e       	mov	r14, r25
   11568:	f8 2e       	mov	r15, r24
   1156a:	d1 2c       	mov	r13, r1
   1156c:	c1 2c       	mov	r12, r1
   1156e:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   11570:	c6 2f       	mov	r28, r22
   11572:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
   11574:	f8 01       	movw	r30, r16
   11576:	80 81       	ld	r24, Z
   11578:	88 23       	and	r24, r24
   1157a:	39 f0       	breq	.+14     	; 0x1158a <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
   1157c:	f1 e0       	ldi	r31, 0x01	; 1
   1157e:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
   11580:	6e 2d       	mov	r22, r14
   11582:	f8 01       	movw	r30, r16
   11584:	85 81       	ldd	r24, Z+5	; 0x05
   11586:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
   1158a:	be 01       	movw	r22, r28
   1158c:	0c 2c       	mov	r0, r12
   1158e:	02 c0       	rjmp	.+4      	; 0x11594 <SoftSPIB::transfer(unsigned char)+0xca>
   11590:	75 95       	asr	r23
   11592:	67 95       	ror	r22
   11594:	0a 94       	dec	r0
   11596:	e2 f7       	brpl	.-8      	; 0x11590 <SoftSPIB::transfer(unsigned char)+0xc6>
   11598:	61 70       	andi	r22, 0x01	; 1
   1159a:	f8 01       	movw	r30, r16
   1159c:	84 81       	ldd	r24, Z+4	; 0x04
   1159e:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
   115a2:	57 01       	movw	r10, r14
   115a4:	f1 e0       	ldi	r31, 0x01	; 1
   115a6:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
   115a8:	6a 2d       	mov	r22, r10
   115aa:	f8 01       	movw	r30, r16
   115ac:	85 81       	ldd	r24, Z+5	; 0x05
   115ae:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
   115b2:	f8 01       	movw	r30, r16
   115b4:	23 81       	ldd	r18, Z+3	; 0x03
   115b6:	30 e0       	ldi	r19, 0x00	; 0
   115b8:	f9 01       	movw	r30, r18
   115ba:	e0 58       	subi	r30, 0x80	; 128
   115bc:	f9 47       	sbci	r31, 0x79	; 121
   115be:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
   115c0:	f9 01       	movw	r30, r18
   115c2:	e1 59       	subi	r30, 0x91	; 145
   115c4:	f2 47       	sbci	r31, 0x72	; 114
   115c6:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
   115c8:	f9 01       	movw	r30, r18
   115ca:	eb 54       	subi	r30, 0x4B	; 75
   115cc:	f2 47       	sbci	r31, 0x72	; 114
   115ce:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
   115d0:	77 20       	and	r7, r7
   115d2:	a9 f1       	breq	.+106    	; 0x1163e <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   115d4:	81 11       	cpse	r24, r1
   115d6:	0e 94 57 47 	call	0x8eae	; 0x8eae <turnOffPWM>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
   115da:	e7 2d       	mov	r30, r7
   115dc:	f0 e0       	ldi	r31, 0x00	; 0
   115de:	ee 0f       	add	r30, r30
   115e0:	ff 1f       	adc	r31, r31
   115e2:	e1 5a       	subi	r30, 0xA1	; 161
   115e4:	f2 47       	sbci	r31, 0x72	; 114
   115e6:	a5 91       	lpm	r26, Z+
   115e8:	b4 91       	lpm	r27, Z
   115ea:	ec 91       	ld	r30, X
   115ec:	8e 22       	and	r8, r30
   115ee:	31 e0       	ldi	r19, 0x01	; 1
   115f0:	20 e0       	ldi	r18, 0x00	; 0
   115f2:	09 f4       	brne	.+2      	; 0x115f6 <SoftSPIB::transfer(unsigned char)+0x12c>
   115f4:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
   115f6:	83 2f       	mov	r24, r19
   115f8:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
   115fa:	f8 01       	movw	r30, r16
   115fc:	26 81       	ldd	r18, Z+6	; 0x06
   115fe:	21 11       	cpse	r18, r1
   11600:	21 c0       	rjmp	.+66     	; 0x11644 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
   11602:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   11604:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
   11606:	f8 01       	movw	r30, r16
   11608:	80 81       	ld	r24, Z
   1160a:	88 23       	and	r24, r24
   1160c:	11 f1       	breq	.+68     	; 0x11652 <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
   1160e:	75 01       	movw	r14, r10
   11610:	ff ef       	ldi	r31, 0xFF	; 255
   11612:	cf 1a       	sub	r12, r31
   11614:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
   11616:	28 e0       	ldi	r18, 0x08	; 8
   11618:	c2 16       	cp	r12, r18
   1161a:	d1 04       	cpc	r13, r1
   1161c:	09 f0       	breq	.+2      	; 0x11620 <SoftSPIB::transfer(unsigned char)+0x156>
   1161e:	aa cf       	rjmp	.-172    	; 0x11574 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
   11620:	89 2d       	mov	r24, r9
   11622:	df 91       	pop	r29
   11624:	cf 91       	pop	r28
   11626:	1f 91       	pop	r17
   11628:	0f 91       	pop	r16
   1162a:	ff 90       	pop	r15
   1162c:	ef 90       	pop	r14
   1162e:	df 90       	pop	r13
   11630:	cf 90       	pop	r12
   11632:	bf 90       	pop	r11
   11634:	af 90       	pop	r10
   11636:	9f 90       	pop	r9
   11638:	8f 90       	pop	r8
   1163a:	7f 90       	pop	r7
   1163c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring_digital.c:220
   1163e:	90 e0       	ldi	r25, 0x00	; 0
   11640:	80 e0       	ldi	r24, 0x00	; 0
   11642:	db cf       	rjmp	.-74     	; 0x115fa <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
   11644:	96 95       	lsr	r25
   11646:	98 2f       	mov	r25, r24
   11648:	88 27       	eor	r24, r24
   1164a:	97 95       	ror	r25
   1164c:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
   1164e:	96 94       	lsr	r9
   11650:	d9 cf       	rjmp	.-78     	; 0x11604 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
   11652:	6e 2d       	mov	r22, r14
   11654:	85 81       	ldd	r24, Z+5	; 0x05
   11656:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
   1165a:	da cf       	rjmp	.-76     	; 0x11610 <SoftSPIB::transfer(unsigned char)+0x146>

0001165c <delay_hus(unsigned long)>:
_Z9delay_husm():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:13
#include "LCDWIKI_TOUCH.h"
#include "mcu_touch_magic.h"
#include "cali_para.h"

void delay_hus(u32 us)
{
   1165c:	0f 93       	push	r16
   1165e:	1f 93       	push	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:16
    //u32 time=100*us/7; 
    //while(--time);
    for (uint8_t i=0; i< us; i++) __asm__("nop\n\t");
   11660:	40 e0       	ldi	r20, 0x00	; 0
   11662:	04 2f       	mov	r16, r20
   11664:	10 e0       	ldi	r17, 0x00	; 0
   11666:	30 e0       	ldi	r19, 0x00	; 0
   11668:	20 e0       	ldi	r18, 0x00	; 0
   1166a:	06 17       	cp	r16, r22
   1166c:	17 07       	cpc	r17, r23
   1166e:	28 07       	cpc	r18, r24
   11670:	39 07       	cpc	r19, r25
   11672:	18 f4       	brcc	.+6      	; 0x1167a <delay_hus(unsigned long)+0x1e>
   11674:	00 00       	nop
   11676:	4f 5f       	subi	r20, 0xFF	; 255
   11678:	f4 cf       	rjmp	.-24     	; 0x11662 <delay_hus(unsigned long)+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:17
}
   1167a:	1f 91       	pop	r17
   1167c:	0f 91       	pop	r16
   1167e:	08 95       	ret

00011680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   11680:	cf 93       	push	r28
   11682:	df 93       	push	r29
   11684:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
   11686:	a6 a5       	ldd	r26, Z+46	; 0x2e
   11688:	b7 a5       	ldd	r27, Z+47	; 0x2f
   1168a:	8c 91       	ld	r24, X
   1168c:	92 ad       	ldd	r25, Z+58	; 0x3a
   1168e:	89 23       	and	r24, r25
   11690:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
   11692:	a0 a9       	ldd	r26, Z+48	; 0x30
   11694:	b1 a9       	ldd	r27, Z+49	; 0x31
   11696:	8c 91       	ld	r24, X
   11698:	93 ad       	ldd	r25, Z+59	; 0x3b
   1169a:	89 23       	and	r24, r25
   1169c:	8c 93       	st	X, r24
   1169e:	72 b9       	out	0x02, r23	; 2
   116a0:	a2 a9       	ldd	r26, Z+50	; 0x32
   116a2:	b3 a9       	ldd	r27, Z+51	; 0x33
   116a4:	8c 91       	ld	r24, X
   116a6:	94 ad       	ldd	r25, Z+60	; 0x3c
   116a8:	89 23       	and	r24, r25
   116aa:	8c 93       	st	X, r24
   116ac:	a2 a9       	ldd	r26, Z+50	; 0x32
   116ae:	b3 a9       	ldd	r27, Z+51	; 0x33
   116b0:	8c 91       	ld	r24, X
   116b2:	90 ad       	ldd	r25, Z+56	; 0x38
   116b4:	89 2b       	or	r24, r25
   116b6:	8c 93       	st	X, r24
   116b8:	62 b9       	out	0x02, r22	; 2
   116ba:	a2 a9       	ldd	r26, Z+50	; 0x32
   116bc:	b3 a9       	ldd	r27, Z+51	; 0x33
   116be:	8c 91       	ld	r24, X
   116c0:	94 ad       	ldd	r25, Z+60	; 0x3c
   116c2:	89 23       	and	r24, r25
   116c4:	8c 93       	st	X, r24
   116c6:	a2 a9       	ldd	r26, Z+50	; 0x32
   116c8:	b3 a9       	ldd	r27, Z+51	; 0x33
   116ca:	8c 91       	ld	r24, X
   116cc:	90 ad       	ldd	r25, Z+56	; 0x38
   116ce:	89 2b       	or	r24, r25
   116d0:	8c 93       	st	X, r24
   116d2:	a0 a9       	ldd	r26, Z+48	; 0x30
   116d4:	b1 a9       	ldd	r27, Z+49	; 0x31
   116d6:	8c 91       	ld	r24, X
   116d8:	97 a9       	ldd	r25, Z+55	; 0x37
   116da:	89 2b       	or	r24, r25
   116dc:	8c 93       	st	X, r24
   116de:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
   116e0:	9f ef       	ldi	r25, 0xFF	; 255
   116e2:	92 0f       	add	r25, r18
   116e4:	12 16       	cp	r1, r18
   116e6:	0c f0       	brlt	.+2      	; 0x116ea <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
   116e8:	3f c0       	rjmp	.+126    	; 0x11768 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
   116ea:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
   116ec:	82 b9       	out	0x02, r24	; 2
   116ee:	c2 a9       	ldd	r28, Z+50	; 0x32
   116f0:	d3 a9       	ldd	r29, Z+51	; 0x33
   116f2:	88 81       	ld	r24, Y
   116f4:	24 ad       	ldd	r18, Z+60	; 0x3c
   116f6:	82 23       	and	r24, r18
   116f8:	88 83       	st	Y, r24
   116fa:	c2 a9       	ldd	r28, Z+50	; 0x32
   116fc:	d3 a9       	ldd	r29, Z+51	; 0x33
   116fe:	88 81       	ld	r24, Y
   11700:	20 ad       	ldd	r18, Z+56	; 0x38
   11702:	82 2b       	or	r24, r18
   11704:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
   11706:	99 23       	and	r25, r25
   11708:	69 f1       	breq	.+90     	; 0x11764 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
   1170a:	20 8d       	ldd	r18, Z+24	; 0x18
   1170c:	31 8d       	ldd	r19, Z+25	; 0x19
   1170e:	21 30       	cpi	r18, 0x01	; 1
   11710:	31 05       	cpc	r19, r1
   11712:	41 f5       	brne	.+80     	; 0x11764 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
   11714:	6f 5f       	subi	r22, 0xFF	; 255
   11716:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
   11718:	c0 a9       	ldd	r28, Z+48	; 0x30
   1171a:	d1 a9       	ldd	r29, Z+49	; 0x31
   1171c:	88 81       	ld	r24, Y
   1171e:	23 ad       	ldd	r18, Z+59	; 0x3b
   11720:	82 23       	and	r24, r18
   11722:	88 83       	st	Y, r24
   11724:	72 b9       	out	0x02, r23	; 2
   11726:	c2 a9       	ldd	r28, Z+50	; 0x32
   11728:	d3 a9       	ldd	r29, Z+51	; 0x33
   1172a:	88 81       	ld	r24, Y
   1172c:	24 ad       	ldd	r18, Z+60	; 0x3c
   1172e:	82 23       	and	r24, r18
   11730:	88 83       	st	Y, r24
   11732:	c2 a9       	ldd	r28, Z+50	; 0x32
   11734:	d3 a9       	ldd	r29, Z+51	; 0x33
   11736:	88 81       	ld	r24, Y
   11738:	20 ad       	ldd	r18, Z+56	; 0x38
   1173a:	82 2b       	or	r24, r18
   1173c:	88 83       	st	Y, r24
   1173e:	62 b9       	out	0x02, r22	; 2
   11740:	c2 a9       	ldd	r28, Z+50	; 0x32
   11742:	d3 a9       	ldd	r29, Z+51	; 0x33
   11744:	88 81       	ld	r24, Y
   11746:	24 ad       	ldd	r18, Z+60	; 0x3c
   11748:	82 23       	and	r24, r18
   1174a:	88 83       	st	Y, r24
   1174c:	c2 a9       	ldd	r28, Z+50	; 0x32
   1174e:	d3 a9       	ldd	r29, Z+51	; 0x33
   11750:	88 81       	ld	r24, Y
   11752:	20 ad       	ldd	r18, Z+56	; 0x38
   11754:	82 2b       	or	r24, r18
   11756:	88 83       	st	Y, r24
   11758:	c0 a9       	ldd	r28, Z+48	; 0x30
   1175a:	d1 a9       	ldd	r29, Z+49	; 0x31
   1175c:	88 81       	ld	r24, Y
   1175e:	27 a9       	ldd	r18, Z+55	; 0x37
   11760:	82 2b       	or	r24, r18
   11762:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
   11764:	29 2f       	mov	r18, r25
   11766:	bc cf       	rjmp	.-136    	; 0x116e0 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
   11768:	a6 a5       	ldd	r26, Z+46	; 0x2e
   1176a:	b7 a5       	ldd	r27, Z+47	; 0x2f
   1176c:	8c 91       	ld	r24, X
   1176e:	96 a9       	ldd	r25, Z+54	; 0x36
   11770:	89 2b       	or	r24, r25
   11772:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
   11774:	df 91       	pop	r29
   11776:	cf 91       	pop	r28
   11778:	08 95       	ret

0001177a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
   1177a:	af 92       	push	r10
   1177c:	bf 92       	push	r11
   1177e:	cf 92       	push	r12
   11780:	df 92       	push	r13
   11782:	ef 92       	push	r14
   11784:	ff 92       	push	r15
   11786:	0f 93       	push	r16
   11788:	1f 93       	push	r17
   1178a:	cf 93       	push	r28
   1178c:	df 93       	push	r29
   1178e:	00 d0       	rcall	.+0      	; 0x11790 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
   11790:	00 d0       	rcall	.+0      	; 0x11792 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
   11792:	1f 92       	push	r1
   11794:	1f 92       	push	r1
   11796:	cd b7       	in	r28, 0x3d	; 61
   11798:	de b7       	in	r29, 0x3e	; 62
   1179a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
   1179c:	dc 01       	movw	r26, r24
   1179e:	9e 96       	adiw	r26, 0x2e	; 46
   117a0:	ed 91       	ld	r30, X+
   117a2:	fc 91       	ld	r31, X
   117a4:	9f 97       	sbiw	r26, 0x2f	; 47
   117a6:	80 81       	ld	r24, Z
   117a8:	da 96       	adiw	r26, 0x3a	; 58
   117aa:	9c 91       	ld	r25, X
   117ac:	da 97       	sbiw	r26, 0x3a	; 58
   117ae:	89 23       	and	r24, r25
   117b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
   117b2:	58 96       	adiw	r26, 0x18	; 24
   117b4:	8d 91       	ld	r24, X+
   117b6:	9c 91       	ld	r25, X
   117b8:	59 97       	sbiw	r26, 0x19	; 25
   117ba:	00 97       	sbiw	r24, 0x00	; 0
   117bc:	09 f0       	breq	.+2      	; 0x117c0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
   117be:	44 c3       	rjmp	.+1672   	; 0x11e48 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
   117c0:	56 96       	adiw	r26, 0x16	; 22
   117c2:	8d 91       	ld	r24, X+
   117c4:	9c 91       	ld	r25, X
   117c6:	57 97       	sbiw	r26, 0x17	; 23
   117c8:	82 30       	cpi	r24, 0x02	; 2
   117ca:	91 05       	cpc	r25, r1
   117cc:	09 f4       	brne	.+2      	; 0x117d0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
   117ce:	0b c3       	rjmp	.+1558   	; 0x11de6 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
   117d0:	83 30       	cpi	r24, 0x03	; 3
   117d2:	91 05       	cpc	r25, r1
   117d4:	09 f4       	brne	.+2      	; 0x117d8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
   117d6:	23 c3       	rjmp	.+1606   	; 0x11e1e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
   117d8:	01 97       	sbiw	r24, 0x01	; 1
   117da:	09 f0       	breq	.+2      	; 0x117de <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
   117dc:	32 c3       	rjmp	.+1636   	; 0x11e42 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
   117de:	1e 96       	adiw	r26, 0x0e	; 14
   117e0:	0d 90       	ld	r0, X+
   117e2:	bc 91       	ld	r27, X
   117e4:	a0 2d       	mov	r26, r0
   117e6:	68 01       	movw	r12, r16
   117e8:	c0 94       	com	r12
   117ea:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
   117ec:	40 95       	com	r20
   117ee:	50 95       	com	r21
   117f0:	fa 01       	movw	r30, r20
   117f2:	ea 0f       	add	r30, r26
   117f4:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
   117f6:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
   117f8:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
   117fa:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
   117fc:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
   117fe:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   11800:	6a 0f       	add	r22, r26
   11802:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
   11804:	d7 01       	movw	r26, r14
   11806:	d0 96       	adiw	r26, 0x30	; 48
   11808:	cd 90       	ld	r12, X+
   1180a:	dc 90       	ld	r13, X
   1180c:	d6 01       	movw	r26, r12
   1180e:	bc 90       	ld	r11, X
   11810:	d7 01       	movw	r26, r14
   11812:	db 96       	adiw	r26, 0x3b	; 59
   11814:	ac 90       	ld	r10, X
   11816:	ba 20       	and	r11, r10
   11818:	d6 01       	movw	r26, r12
   1181a:	bc 92       	st	X, r11
   1181c:	12 b8       	out	0x02, r1	; 2
   1181e:	d7 01       	movw	r26, r14
   11820:	d2 96       	adiw	r26, 0x32	; 50
   11822:	cd 90       	ld	r12, X+
   11824:	dc 90       	ld	r13, X
   11826:	d6 01       	movw	r26, r12
   11828:	bc 90       	ld	r11, X
   1182a:	d7 01       	movw	r26, r14
   1182c:	dc 96       	adiw	r26, 0x3c	; 60
   1182e:	ac 90       	ld	r10, X
   11830:	ba 20       	and	r11, r10
   11832:	d6 01       	movw	r26, r12
   11834:	bc 92       	st	X, r11
   11836:	d7 01       	movw	r26, r14
   11838:	d2 96       	adiw	r26, 0x32	; 50
   1183a:	cd 90       	ld	r12, X+
   1183c:	dc 90       	ld	r13, X
   1183e:	d6 01       	movw	r26, r12
   11840:	bc 90       	ld	r11, X
   11842:	d7 01       	movw	r26, r14
   11844:	d8 96       	adiw	r26, 0x38	; 56
   11846:	ac 90       	ld	r10, X
   11848:	ba 28       	or	r11, r10
   1184a:	d6 01       	movw	r26, r12
   1184c:	bc 92       	st	X, r11
   1184e:	a0 e5       	ldi	r26, 0x50	; 80
   11850:	a2 b9       	out	0x02, r26	; 2
   11852:	d7 01       	movw	r26, r14
   11854:	d2 96       	adiw	r26, 0x32	; 50
   11856:	cd 90       	ld	r12, X+
   11858:	dc 90       	ld	r13, X
   1185a:	d6 01       	movw	r26, r12
   1185c:	bc 90       	ld	r11, X
   1185e:	d7 01       	movw	r26, r14
   11860:	dc 96       	adiw	r26, 0x3c	; 60
   11862:	ac 90       	ld	r10, X
   11864:	ba 20       	and	r11, r10
   11866:	d6 01       	movw	r26, r12
   11868:	bc 92       	st	X, r11
   1186a:	d7 01       	movw	r26, r14
   1186c:	d2 96       	adiw	r26, 0x32	; 50
   1186e:	cd 90       	ld	r12, X+
   11870:	dc 90       	ld	r13, X
   11872:	d6 01       	movw	r26, r12
   11874:	bc 90       	ld	r11, X
   11876:	d7 01       	movw	r26, r14
   11878:	d8 96       	adiw	r26, 0x38	; 56
   1187a:	ac 90       	ld	r10, X
   1187c:	ba 28       	or	r11, r10
   1187e:	d6 01       	movw	r26, r12
   11880:	bc 92       	st	X, r11
   11882:	d7 01       	movw	r26, r14
   11884:	d0 96       	adiw	r26, 0x30	; 48
   11886:	cd 90       	ld	r12, X+
   11888:	dc 90       	ld	r13, X
   1188a:	d6 01       	movw	r26, r12
   1188c:	bc 90       	ld	r11, X
   1188e:	d7 01       	movw	r26, r14
   11890:	d7 96       	adiw	r26, 0x37	; 55
   11892:	ac 90       	ld	r10, X
   11894:	ba 28       	or	r11, r10
   11896:	d6 01       	movw	r26, r12
   11898:	bc 92       	st	X, r11
   1189a:	72 b9       	out	0x02, r23	; 2
   1189c:	d7 01       	movw	r26, r14
   1189e:	d2 96       	adiw	r26, 0x32	; 50
   118a0:	ad 90       	ld	r10, X+
   118a2:	bc 90       	ld	r11, X
   118a4:	d5 01       	movw	r26, r10
   118a6:	7c 91       	ld	r23, X
   118a8:	d7 01       	movw	r26, r14
   118aa:	dc 96       	adiw	r26, 0x3c	; 60
   118ac:	dc 90       	ld	r13, X
   118ae:	7d 21       	and	r23, r13
   118b0:	d5 01       	movw	r26, r10
   118b2:	7c 93       	st	X, r23
   118b4:	d7 01       	movw	r26, r14
   118b6:	d2 96       	adiw	r26, 0x32	; 50
   118b8:	ad 90       	ld	r10, X+
   118ba:	bc 90       	ld	r11, X
   118bc:	d5 01       	movw	r26, r10
   118be:	7c 91       	ld	r23, X
   118c0:	d7 01       	movw	r26, r14
   118c2:	d8 96       	adiw	r26, 0x38	; 56
   118c4:	dc 90       	ld	r13, X
   118c6:	7d 29       	or	r23, r13
   118c8:	d5 01       	movw	r26, r10
   118ca:	7c 93       	st	X, r23
   118cc:	62 b9       	out	0x02, r22	; 2
   118ce:	d7 01       	movw	r26, r14
   118d0:	d2 96       	adiw	r26, 0x32	; 50
   118d2:	cd 90       	ld	r12, X+
   118d4:	dc 90       	ld	r13, X
   118d6:	d6 01       	movw	r26, r12
   118d8:	6c 91       	ld	r22, X
   118da:	d7 01       	movw	r26, r14
   118dc:	dc 96       	adiw	r26, 0x3c	; 60
   118de:	7c 91       	ld	r23, X
   118e0:	67 23       	and	r22, r23
   118e2:	d6 01       	movw	r26, r12
   118e4:	6c 93       	st	X, r22
   118e6:	d7 01       	movw	r26, r14
   118e8:	d2 96       	adiw	r26, 0x32	; 50
   118ea:	cd 90       	ld	r12, X+
   118ec:	dc 90       	ld	r13, X
   118ee:	d6 01       	movw	r26, r12
   118f0:	6c 91       	ld	r22, X
   118f2:	d7 01       	movw	r26, r14
   118f4:	d8 96       	adiw	r26, 0x38	; 56
   118f6:	7c 91       	ld	r23, X
   118f8:	67 2b       	or	r22, r23
   118fa:	d6 01       	movw	r26, r12
   118fc:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
   118fe:	d7 01       	movw	r26, r14
   11900:	d0 96       	adiw	r26, 0x30	; 48
   11902:	cd 90       	ld	r12, X+
   11904:	dc 90       	ld	r13, X
   11906:	d6 01       	movw	r26, r12
   11908:	6c 91       	ld	r22, X
   1190a:	d7 01       	movw	r26, r14
   1190c:	db 96       	adiw	r26, 0x3b	; 59
   1190e:	7c 91       	ld	r23, X
   11910:	67 23       	and	r22, r23
   11912:	d6 01       	movw	r26, r12
   11914:	6c 93       	st	X, r22
   11916:	12 b8       	out	0x02, r1	; 2
   11918:	d7 01       	movw	r26, r14
   1191a:	d2 96       	adiw	r26, 0x32	; 50
   1191c:	cd 90       	ld	r12, X+
   1191e:	dc 90       	ld	r13, X
   11920:	d6 01       	movw	r26, r12
   11922:	6c 91       	ld	r22, X
   11924:	d7 01       	movw	r26, r14
   11926:	dc 96       	adiw	r26, 0x3c	; 60
   11928:	7c 91       	ld	r23, X
   1192a:	67 23       	and	r22, r23
   1192c:	d6 01       	movw	r26, r12
   1192e:	6c 93       	st	X, r22
   11930:	d7 01       	movw	r26, r14
   11932:	d2 96       	adiw	r26, 0x32	; 50
   11934:	cd 90       	ld	r12, X+
   11936:	dc 90       	ld	r13, X
   11938:	d6 01       	movw	r26, r12
   1193a:	6c 91       	ld	r22, X
   1193c:	d7 01       	movw	r26, r14
   1193e:	d8 96       	adiw	r26, 0x38	; 56
   11940:	7c 91       	ld	r23, X
   11942:	67 2b       	or	r22, r23
   11944:	d6 01       	movw	r26, r12
   11946:	6c 93       	st	X, r22
   11948:	61 e5       	ldi	r22, 0x51	; 81
   1194a:	62 b9       	out	0x02, r22	; 2
   1194c:	d7 01       	movw	r26, r14
   1194e:	d2 96       	adiw	r26, 0x32	; 50
   11950:	cd 90       	ld	r12, X+
   11952:	dc 90       	ld	r13, X
   11954:	d6 01       	movw	r26, r12
   11956:	6c 91       	ld	r22, X
   11958:	d7 01       	movw	r26, r14
   1195a:	dc 96       	adiw	r26, 0x3c	; 60
   1195c:	7c 91       	ld	r23, X
   1195e:	67 23       	and	r22, r23
   11960:	d6 01       	movw	r26, r12
   11962:	6c 93       	st	X, r22
   11964:	d7 01       	movw	r26, r14
   11966:	d2 96       	adiw	r26, 0x32	; 50
   11968:	cd 90       	ld	r12, X+
   1196a:	dc 90       	ld	r13, X
   1196c:	d6 01       	movw	r26, r12
   1196e:	6c 91       	ld	r22, X
   11970:	d7 01       	movw	r26, r14
   11972:	d8 96       	adiw	r26, 0x38	; 56
   11974:	7c 91       	ld	r23, X
   11976:	67 2b       	or	r22, r23
   11978:	d6 01       	movw	r26, r12
   1197a:	6c 93       	st	X, r22
   1197c:	d7 01       	movw	r26, r14
   1197e:	d0 96       	adiw	r26, 0x30	; 48
   11980:	cd 90       	ld	r12, X+
   11982:	dc 90       	ld	r13, X
   11984:	d6 01       	movw	r26, r12
   11986:	6c 91       	ld	r22, X
   11988:	d7 01       	movw	r26, r14
   1198a:	d7 96       	adiw	r26, 0x37	; 55
   1198c:	7c 91       	ld	r23, X
   1198e:	67 2b       	or	r22, r23
   11990:	d6 01       	movw	r26, r12
   11992:	6c 93       	st	X, r22
   11994:	32 b9       	out	0x02, r19	; 2
   11996:	d7 01       	movw	r26, r14
   11998:	d2 96       	adiw	r26, 0x32	; 50
   1199a:	cd 90       	ld	r12, X+
   1199c:	dc 90       	ld	r13, X
   1199e:	d6 01       	movw	r26, r12
   119a0:	3c 91       	ld	r19, X
   119a2:	d7 01       	movw	r26, r14
   119a4:	dc 96       	adiw	r26, 0x3c	; 60
   119a6:	6c 91       	ld	r22, X
   119a8:	36 23       	and	r19, r22
   119aa:	d6 01       	movw	r26, r12
   119ac:	3c 93       	st	X, r19
   119ae:	d7 01       	movw	r26, r14
   119b0:	d2 96       	adiw	r26, 0x32	; 50
   119b2:	cd 90       	ld	r12, X+
   119b4:	dc 90       	ld	r13, X
   119b6:	d6 01       	movw	r26, r12
   119b8:	3c 91       	ld	r19, X
   119ba:	d7 01       	movw	r26, r14
   119bc:	d8 96       	adiw	r26, 0x38	; 56
   119be:	6c 91       	ld	r22, X
   119c0:	36 2b       	or	r19, r22
   119c2:	d6 01       	movw	r26, r12
   119c4:	3c 93       	st	X, r19
   119c6:	22 b9       	out	0x02, r18	; 2
   119c8:	d7 01       	movw	r26, r14
   119ca:	d2 96       	adiw	r26, 0x32	; 50
   119cc:	6d 91       	ld	r22, X+
   119ce:	7c 91       	ld	r23, X
   119d0:	db 01       	movw	r26, r22
   119d2:	2c 91       	ld	r18, X
   119d4:	d7 01       	movw	r26, r14
   119d6:	dc 96       	adiw	r26, 0x3c	; 60
   119d8:	3c 91       	ld	r19, X
   119da:	23 23       	and	r18, r19
   119dc:	db 01       	movw	r26, r22
   119de:	2c 93       	st	X, r18
   119e0:	d7 01       	movw	r26, r14
   119e2:	d2 96       	adiw	r26, 0x32	; 50
   119e4:	6d 91       	ld	r22, X+
   119e6:	7c 91       	ld	r23, X
   119e8:	db 01       	movw	r26, r22
   119ea:	2c 91       	ld	r18, X
   119ec:	d7 01       	movw	r26, r14
   119ee:	d8 96       	adiw	r26, 0x38	; 56
   119f0:	3c 91       	ld	r19, X
   119f2:	23 2b       	or	r18, r19
   119f4:	db 01       	movw	r26, r22
   119f6:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
   119f8:	d7 01       	movw	r26, r14
   119fa:	d0 96       	adiw	r26, 0x30	; 48
   119fc:	6d 91       	ld	r22, X+
   119fe:	7c 91       	ld	r23, X
   11a00:	db 01       	movw	r26, r22
   11a02:	2c 91       	ld	r18, X
   11a04:	d7 01       	movw	r26, r14
   11a06:	db 96       	adiw	r26, 0x3b	; 59
   11a08:	3c 91       	ld	r19, X
   11a0a:	23 23       	and	r18, r19
   11a0c:	db 01       	movw	r26, r22
   11a0e:	2c 93       	st	X, r18
   11a10:	12 b8       	out	0x02, r1	; 2
   11a12:	d7 01       	movw	r26, r14
   11a14:	d2 96       	adiw	r26, 0x32	; 50
   11a16:	6d 91       	ld	r22, X+
   11a18:	7c 91       	ld	r23, X
   11a1a:	db 01       	movw	r26, r22
   11a1c:	2c 91       	ld	r18, X
   11a1e:	d7 01       	movw	r26, r14
   11a20:	dc 96       	adiw	r26, 0x3c	; 60
   11a22:	3c 91       	ld	r19, X
   11a24:	23 23       	and	r18, r19
   11a26:	db 01       	movw	r26, r22
   11a28:	2c 93       	st	X, r18
   11a2a:	d7 01       	movw	r26, r14
   11a2c:	d2 96       	adiw	r26, 0x32	; 50
   11a2e:	6d 91       	ld	r22, X+
   11a30:	7c 91       	ld	r23, X
   11a32:	db 01       	movw	r26, r22
   11a34:	2c 91       	ld	r18, X
   11a36:	d7 01       	movw	r26, r14
   11a38:	d8 96       	adiw	r26, 0x38	; 56
   11a3a:	3c 91       	ld	r19, X
   11a3c:	23 2b       	or	r18, r19
   11a3e:	db 01       	movw	r26, r22
   11a40:	2c 93       	st	X, r18
   11a42:	22 e5       	ldi	r18, 0x52	; 82
   11a44:	22 b9       	out	0x02, r18	; 2
   11a46:	d7 01       	movw	r26, r14
   11a48:	d2 96       	adiw	r26, 0x32	; 50
   11a4a:	6d 91       	ld	r22, X+
   11a4c:	7c 91       	ld	r23, X
   11a4e:	db 01       	movw	r26, r22
   11a50:	2c 91       	ld	r18, X
   11a52:	d7 01       	movw	r26, r14
   11a54:	dc 96       	adiw	r26, 0x3c	; 60
   11a56:	3c 91       	ld	r19, X
   11a58:	23 23       	and	r18, r19
   11a5a:	db 01       	movw	r26, r22
   11a5c:	2c 93       	st	X, r18
   11a5e:	d7 01       	movw	r26, r14
   11a60:	d2 96       	adiw	r26, 0x32	; 50
   11a62:	6d 91       	ld	r22, X+
   11a64:	7c 91       	ld	r23, X
   11a66:	db 01       	movw	r26, r22
   11a68:	2c 91       	ld	r18, X
   11a6a:	d7 01       	movw	r26, r14
   11a6c:	d8 96       	adiw	r26, 0x38	; 56
   11a6e:	3c 91       	ld	r19, X
   11a70:	23 2b       	or	r18, r19
   11a72:	db 01       	movw	r26, r22
   11a74:	2c 93       	st	X, r18
   11a76:	d7 01       	movw	r26, r14
   11a78:	d0 96       	adiw	r26, 0x30	; 48
   11a7a:	6d 91       	ld	r22, X+
   11a7c:	7c 91       	ld	r23, X
   11a7e:	db 01       	movw	r26, r22
   11a80:	2c 91       	ld	r18, X
   11a82:	d7 01       	movw	r26, r14
   11a84:	d7 96       	adiw	r26, 0x37	; 55
   11a86:	3c 91       	ld	r19, X
   11a88:	23 2b       	or	r18, r19
   11a8a:	db 01       	movw	r26, r22
   11a8c:	2c 93       	st	X, r18
   11a8e:	52 b9       	out	0x02, r21	; 2
   11a90:	d7 01       	movw	r26, r14
   11a92:	d2 96       	adiw	r26, 0x32	; 50
   11a94:	6d 91       	ld	r22, X+
   11a96:	7c 91       	ld	r23, X
   11a98:	db 01       	movw	r26, r22
   11a9a:	2c 91       	ld	r18, X
   11a9c:	d7 01       	movw	r26, r14
   11a9e:	dc 96       	adiw	r26, 0x3c	; 60
   11aa0:	3c 91       	ld	r19, X
   11aa2:	23 23       	and	r18, r19
   11aa4:	db 01       	movw	r26, r22
   11aa6:	2c 93       	st	X, r18
   11aa8:	d7 01       	movw	r26, r14
   11aaa:	d2 96       	adiw	r26, 0x32	; 50
   11aac:	6d 91       	ld	r22, X+
   11aae:	7c 91       	ld	r23, X
   11ab0:	db 01       	movw	r26, r22
   11ab2:	2c 91       	ld	r18, X
   11ab4:	d7 01       	movw	r26, r14
   11ab6:	d8 96       	adiw	r26, 0x38	; 56
   11ab8:	3c 91       	ld	r19, X
   11aba:	23 2b       	or	r18, r19
   11abc:	db 01       	movw	r26, r22
   11abe:	2c 93       	st	X, r18
   11ac0:	42 b9       	out	0x02, r20	; 2
   11ac2:	d7 01       	movw	r26, r14
   11ac4:	d2 96       	adiw	r26, 0x32	; 50
   11ac6:	4d 91       	ld	r20, X+
   11ac8:	5c 91       	ld	r21, X
   11aca:	da 01       	movw	r26, r20
   11acc:	2c 91       	ld	r18, X
   11ace:	d7 01       	movw	r26, r14
   11ad0:	dc 96       	adiw	r26, 0x3c	; 60
   11ad2:	3c 91       	ld	r19, X
   11ad4:	23 23       	and	r18, r19
   11ad6:	da 01       	movw	r26, r20
   11ad8:	2c 93       	st	X, r18
   11ada:	d7 01       	movw	r26, r14
   11adc:	d2 96       	adiw	r26, 0x32	; 50
   11ade:	4d 91       	ld	r20, X+
   11ae0:	5c 91       	ld	r21, X
   11ae2:	da 01       	movw	r26, r20
   11ae4:	2c 91       	ld	r18, X
   11ae6:	d7 01       	movw	r26, r14
   11ae8:	d8 96       	adiw	r26, 0x38	; 56
   11aea:	3c 91       	ld	r19, X
   11aec:	23 2b       	or	r18, r19
   11aee:	da 01       	movw	r26, r20
   11af0:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
   11af2:	d7 01       	movw	r26, r14
   11af4:	d0 96       	adiw	r26, 0x30	; 48
   11af6:	4d 91       	ld	r20, X+
   11af8:	5c 91       	ld	r21, X
   11afa:	da 01       	movw	r26, r20
   11afc:	2c 91       	ld	r18, X
   11afe:	d7 01       	movw	r26, r14
   11b00:	db 96       	adiw	r26, 0x3b	; 59
   11b02:	3c 91       	ld	r19, X
   11b04:	23 23       	and	r18, r19
   11b06:	da 01       	movw	r26, r20
   11b08:	2c 93       	st	X, r18
   11b0a:	12 b8       	out	0x02, r1	; 2
   11b0c:	d7 01       	movw	r26, r14
   11b0e:	d2 96       	adiw	r26, 0x32	; 50
   11b10:	4d 91       	ld	r20, X+
   11b12:	5c 91       	ld	r21, X
   11b14:	da 01       	movw	r26, r20
   11b16:	2c 91       	ld	r18, X
   11b18:	d7 01       	movw	r26, r14
   11b1a:	dc 96       	adiw	r26, 0x3c	; 60
   11b1c:	3c 91       	ld	r19, X
   11b1e:	23 23       	and	r18, r19
   11b20:	da 01       	movw	r26, r20
   11b22:	2c 93       	st	X, r18
   11b24:	d7 01       	movw	r26, r14
   11b26:	d2 96       	adiw	r26, 0x32	; 50
   11b28:	4d 91       	ld	r20, X+
   11b2a:	5c 91       	ld	r21, X
   11b2c:	da 01       	movw	r26, r20
   11b2e:	2c 91       	ld	r18, X
   11b30:	d7 01       	movw	r26, r14
   11b32:	d8 96       	adiw	r26, 0x38	; 56
   11b34:	3c 91       	ld	r19, X
   11b36:	23 2b       	or	r18, r19
   11b38:	da 01       	movw	r26, r20
   11b3a:	2c 93       	st	X, r18
   11b3c:	23 e5       	ldi	r18, 0x53	; 83
   11b3e:	22 b9       	out	0x02, r18	; 2
   11b40:	d7 01       	movw	r26, r14
   11b42:	d2 96       	adiw	r26, 0x32	; 50
   11b44:	4d 91       	ld	r20, X+
   11b46:	5c 91       	ld	r21, X
   11b48:	da 01       	movw	r26, r20
   11b4a:	2c 91       	ld	r18, X
   11b4c:	d7 01       	movw	r26, r14
   11b4e:	dc 96       	adiw	r26, 0x3c	; 60
   11b50:	3c 91       	ld	r19, X
   11b52:	23 23       	and	r18, r19
   11b54:	da 01       	movw	r26, r20
   11b56:	2c 93       	st	X, r18
   11b58:	d7 01       	movw	r26, r14
   11b5a:	d2 96       	adiw	r26, 0x32	; 50
   11b5c:	4d 91       	ld	r20, X+
   11b5e:	5c 91       	ld	r21, X
   11b60:	da 01       	movw	r26, r20
   11b62:	2c 91       	ld	r18, X
   11b64:	d7 01       	movw	r26, r14
   11b66:	d8 96       	adiw	r26, 0x38	; 56
   11b68:	3c 91       	ld	r19, X
   11b6a:	23 2b       	or	r18, r19
   11b6c:	da 01       	movw	r26, r20
   11b6e:	2c 93       	st	X, r18
   11b70:	d7 01       	movw	r26, r14
   11b72:	d0 96       	adiw	r26, 0x30	; 48
   11b74:	4d 91       	ld	r20, X+
   11b76:	5c 91       	ld	r21, X
   11b78:	da 01       	movw	r26, r20
   11b7a:	2c 91       	ld	r18, X
   11b7c:	d7 01       	movw	r26, r14
   11b7e:	d7 96       	adiw	r26, 0x37	; 55
   11b80:	3c 91       	ld	r19, X
   11b82:	23 2b       	or	r18, r19
   11b84:	da 01       	movw	r26, r20
   11b86:	2c 93       	st	X, r18
   11b88:	12 b9       	out	0x02, r17	; 2
   11b8a:	d7 01       	movw	r26, r14
   11b8c:	d2 96       	adiw	r26, 0x32	; 50
   11b8e:	4d 91       	ld	r20, X+
   11b90:	5c 91       	ld	r21, X
   11b92:	da 01       	movw	r26, r20
   11b94:	2c 91       	ld	r18, X
   11b96:	d7 01       	movw	r26, r14
   11b98:	dc 96       	adiw	r26, 0x3c	; 60
   11b9a:	3c 91       	ld	r19, X
   11b9c:	23 23       	and	r18, r19
   11b9e:	da 01       	movw	r26, r20
   11ba0:	2c 93       	st	X, r18
   11ba2:	d7 01       	movw	r26, r14
   11ba4:	d2 96       	adiw	r26, 0x32	; 50
   11ba6:	4d 91       	ld	r20, X+
   11ba8:	5c 91       	ld	r21, X
   11baa:	da 01       	movw	r26, r20
   11bac:	2c 91       	ld	r18, X
   11bae:	d7 01       	movw	r26, r14
   11bb0:	d8 96       	adiw	r26, 0x38	; 56
   11bb2:	3c 91       	ld	r19, X
   11bb4:	23 2b       	or	r18, r19
   11bb6:	da 01       	movw	r26, r20
   11bb8:	2c 93       	st	X, r18
   11bba:	02 b9       	out	0x02, r16	; 2
   11bbc:	d7 01       	movw	r26, r14
   11bbe:	d2 96       	adiw	r26, 0x32	; 50
   11bc0:	4d 91       	ld	r20, X+
   11bc2:	5c 91       	ld	r21, X
   11bc4:	da 01       	movw	r26, r20
   11bc6:	2c 91       	ld	r18, X
   11bc8:	d7 01       	movw	r26, r14
   11bca:	dc 96       	adiw	r26, 0x3c	; 60
   11bcc:	3c 91       	ld	r19, X
   11bce:	23 23       	and	r18, r19
   11bd0:	da 01       	movw	r26, r20
   11bd2:	2c 93       	st	X, r18
   11bd4:	d7 01       	movw	r26, r14
   11bd6:	d2 96       	adiw	r26, 0x32	; 50
   11bd8:	4d 91       	ld	r20, X+
   11bda:	5c 91       	ld	r21, X
   11bdc:	da 01       	movw	r26, r20
   11bde:	2c 91       	ld	r18, X
   11be0:	d7 01       	movw	r26, r14
   11be2:	d8 96       	adiw	r26, 0x38	; 56
   11be4:	3c 91       	ld	r19, X
   11be6:	23 2b       	or	r18, r19
   11be8:	da 01       	movw	r26, r20
   11bea:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
   11bec:	d7 01       	movw	r26, r14
   11bee:	d0 96       	adiw	r26, 0x30	; 48
   11bf0:	4d 91       	ld	r20, X+
   11bf2:	5c 91       	ld	r21, X
   11bf4:	da 01       	movw	r26, r20
   11bf6:	2c 91       	ld	r18, X
   11bf8:	d7 01       	movw	r26, r14
   11bfa:	db 96       	adiw	r26, 0x3b	; 59
   11bfc:	3c 91       	ld	r19, X
   11bfe:	23 23       	and	r18, r19
   11c00:	da 01       	movw	r26, r20
   11c02:	2c 93       	st	X, r18
   11c04:	12 b8       	out	0x02, r1	; 2
   11c06:	d7 01       	movw	r26, r14
   11c08:	d2 96       	adiw	r26, 0x32	; 50
   11c0a:	4d 91       	ld	r20, X+
   11c0c:	5c 91       	ld	r21, X
   11c0e:	da 01       	movw	r26, r20
   11c10:	2c 91       	ld	r18, X
   11c12:	d7 01       	movw	r26, r14
   11c14:	dc 96       	adiw	r26, 0x3c	; 60
   11c16:	3c 91       	ld	r19, X
   11c18:	23 23       	and	r18, r19
   11c1a:	da 01       	movw	r26, r20
   11c1c:	2c 93       	st	X, r18
   11c1e:	d7 01       	movw	r26, r14
   11c20:	d2 96       	adiw	r26, 0x32	; 50
   11c22:	4d 91       	ld	r20, X+
   11c24:	5c 91       	ld	r21, X
   11c26:	da 01       	movw	r26, r20
   11c28:	2c 91       	ld	r18, X
   11c2a:	d7 01       	movw	r26, r14
   11c2c:	d8 96       	adiw	r26, 0x38	; 56
   11c2e:	3c 91       	ld	r19, X
   11c30:	23 2b       	or	r18, r19
   11c32:	da 01       	movw	r26, r20
   11c34:	2c 93       	st	X, r18
   11c36:	20 e2       	ldi	r18, 0x20	; 32
   11c38:	22 b9       	out	0x02, r18	; 2
   11c3a:	d7 01       	movw	r26, r14
   11c3c:	d2 96       	adiw	r26, 0x32	; 50
   11c3e:	4d 91       	ld	r20, X+
   11c40:	5c 91       	ld	r21, X
   11c42:	da 01       	movw	r26, r20
   11c44:	2c 91       	ld	r18, X
   11c46:	d7 01       	movw	r26, r14
   11c48:	dc 96       	adiw	r26, 0x3c	; 60
   11c4a:	3c 91       	ld	r19, X
   11c4c:	23 23       	and	r18, r19
   11c4e:	da 01       	movw	r26, r20
   11c50:	2c 93       	st	X, r18
   11c52:	d7 01       	movw	r26, r14
   11c54:	d2 96       	adiw	r26, 0x32	; 50
   11c56:	4d 91       	ld	r20, X+
   11c58:	5c 91       	ld	r21, X
   11c5a:	da 01       	movw	r26, r20
   11c5c:	2c 91       	ld	r18, X
   11c5e:	d7 01       	movw	r26, r14
   11c60:	d8 96       	adiw	r26, 0x38	; 56
   11c62:	3c 91       	ld	r19, X
   11c64:	23 2b       	or	r18, r19
   11c66:	da 01       	movw	r26, r20
   11c68:	2c 93       	st	X, r18
   11c6a:	d7 01       	movw	r26, r14
   11c6c:	d0 96       	adiw	r26, 0x30	; 48
   11c6e:	4d 91       	ld	r20, X+
   11c70:	5c 91       	ld	r21, X
   11c72:	da 01       	movw	r26, r20
   11c74:	2c 91       	ld	r18, X
   11c76:	d7 01       	movw	r26, r14
   11c78:	d7 96       	adiw	r26, 0x37	; 55
   11c7a:	3c 91       	ld	r19, X
   11c7c:	23 2b       	or	r18, r19
   11c7e:	da 01       	movw	r26, r20
   11c80:	2c 93       	st	X, r18
   11c82:	f2 b9       	out	0x02, r31	; 2
   11c84:	d7 01       	movw	r26, r14
   11c86:	d2 96       	adiw	r26, 0x32	; 50
   11c88:	4d 91       	ld	r20, X+
   11c8a:	5c 91       	ld	r21, X
   11c8c:	da 01       	movw	r26, r20
   11c8e:	2c 91       	ld	r18, X
   11c90:	d7 01       	movw	r26, r14
   11c92:	dc 96       	adiw	r26, 0x3c	; 60
   11c94:	3c 91       	ld	r19, X
   11c96:	23 23       	and	r18, r19
   11c98:	da 01       	movw	r26, r20
   11c9a:	2c 93       	st	X, r18
   11c9c:	d7 01       	movw	r26, r14
   11c9e:	d2 96       	adiw	r26, 0x32	; 50
   11ca0:	4d 91       	ld	r20, X+
   11ca2:	5c 91       	ld	r21, X
   11ca4:	da 01       	movw	r26, r20
   11ca6:	2c 91       	ld	r18, X
   11ca8:	d7 01       	movw	r26, r14
   11caa:	d8 96       	adiw	r26, 0x38	; 56
   11cac:	3c 91       	ld	r19, X
   11cae:	23 2b       	or	r18, r19
   11cb0:	da 01       	movw	r26, r20
   11cb2:	2c 93       	st	X, r18
   11cb4:	e2 b9       	out	0x02, r30	; 2
   11cb6:	d7 01       	movw	r26, r14
   11cb8:	d2 96       	adiw	r26, 0x32	; 50
   11cba:	ed 91       	ld	r30, X+
   11cbc:	fc 91       	ld	r31, X
   11cbe:	d3 97       	sbiw	r26, 0x33	; 51
   11cc0:	20 81       	ld	r18, Z
   11cc2:	dc 96       	adiw	r26, 0x3c	; 60
   11cc4:	3c 91       	ld	r19, X
   11cc6:	dc 97       	sbiw	r26, 0x3c	; 60
   11cc8:	23 23       	and	r18, r19
   11cca:	20 83       	st	Z, r18
   11ccc:	d2 96       	adiw	r26, 0x32	; 50
   11cce:	ed 91       	ld	r30, X+
   11cd0:	fc 91       	ld	r31, X
   11cd2:	d3 97       	sbiw	r26, 0x33	; 51
   11cd4:	20 81       	ld	r18, Z
   11cd6:	d8 96       	adiw	r26, 0x38	; 56
   11cd8:	3c 91       	ld	r19, X
   11cda:	d8 97       	sbiw	r26, 0x38	; 56
   11cdc:	23 2b       	or	r18, r19
   11cde:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
   11ce0:	d0 96       	adiw	r26, 0x30	; 48
   11ce2:	ed 91       	ld	r30, X+
   11ce4:	fc 91       	ld	r31, X
   11ce6:	d1 97       	sbiw	r26, 0x31	; 49
   11ce8:	20 81       	ld	r18, Z
   11cea:	db 96       	adiw	r26, 0x3b	; 59
   11cec:	3c 91       	ld	r19, X
   11cee:	db 97       	sbiw	r26, 0x3b	; 59
   11cf0:	23 23       	and	r18, r19
   11cf2:	20 83       	st	Z, r18
   11cf4:	12 b8       	out	0x02, r1	; 2
   11cf6:	d2 96       	adiw	r26, 0x32	; 50
   11cf8:	ed 91       	ld	r30, X+
   11cfa:	fc 91       	ld	r31, X
   11cfc:	d3 97       	sbiw	r26, 0x33	; 51
   11cfe:	20 81       	ld	r18, Z
   11d00:	dc 96       	adiw	r26, 0x3c	; 60
   11d02:	3c 91       	ld	r19, X
   11d04:	dc 97       	sbiw	r26, 0x3c	; 60
   11d06:	23 23       	and	r18, r19
   11d08:	20 83       	st	Z, r18
   11d0a:	d2 96       	adiw	r26, 0x32	; 50
   11d0c:	ed 91       	ld	r30, X+
   11d0e:	fc 91       	ld	r31, X
   11d10:	d3 97       	sbiw	r26, 0x33	; 51
   11d12:	20 81       	ld	r18, Z
   11d14:	d8 96       	adiw	r26, 0x38	; 56
   11d16:	3c 91       	ld	r19, X
   11d18:	d8 97       	sbiw	r26, 0x38	; 56
   11d1a:	23 2b       	or	r18, r19
   11d1c:	20 83       	st	Z, r18
   11d1e:	21 e2       	ldi	r18, 0x21	; 33
   11d20:	22 b9       	out	0x02, r18	; 2
   11d22:	d2 96       	adiw	r26, 0x32	; 50
   11d24:	ed 91       	ld	r30, X+
   11d26:	fc 91       	ld	r31, X
   11d28:	d3 97       	sbiw	r26, 0x33	; 51
   11d2a:	20 81       	ld	r18, Z
   11d2c:	dc 96       	adiw	r26, 0x3c	; 60
   11d2e:	3c 91       	ld	r19, X
   11d30:	dc 97       	sbiw	r26, 0x3c	; 60
   11d32:	23 23       	and	r18, r19
   11d34:	20 83       	st	Z, r18
   11d36:	d2 96       	adiw	r26, 0x32	; 50
   11d38:	ed 91       	ld	r30, X+
   11d3a:	fc 91       	ld	r31, X
   11d3c:	d3 97       	sbiw	r26, 0x33	; 51
   11d3e:	20 81       	ld	r18, Z
   11d40:	d8 96       	adiw	r26, 0x38	; 56
   11d42:	3c 91       	ld	r19, X
   11d44:	d8 97       	sbiw	r26, 0x38	; 56
   11d46:	23 2b       	or	r18, r19
   11d48:	20 83       	st	Z, r18
   11d4a:	d0 96       	adiw	r26, 0x30	; 48
   11d4c:	ed 91       	ld	r30, X+
   11d4e:	fc 91       	ld	r31, X
   11d50:	d1 97       	sbiw	r26, 0x31	; 49
   11d52:	20 81       	ld	r18, Z
   11d54:	d7 96       	adiw	r26, 0x37	; 55
   11d56:	3c 91       	ld	r19, X
   11d58:	d7 97       	sbiw	r26, 0x37	; 55
   11d5a:	23 2b       	or	r18, r19
   11d5c:	20 83       	st	Z, r18
   11d5e:	92 b9       	out	0x02, r25	; 2
   11d60:	d2 96       	adiw	r26, 0x32	; 50
   11d62:	ed 91       	ld	r30, X+
   11d64:	fc 91       	ld	r31, X
   11d66:	d3 97       	sbiw	r26, 0x33	; 51
   11d68:	90 81       	ld	r25, Z
   11d6a:	dc 96       	adiw	r26, 0x3c	; 60
   11d6c:	2c 91       	ld	r18, X
   11d6e:	dc 97       	sbiw	r26, 0x3c	; 60
   11d70:	92 23       	and	r25, r18
   11d72:	90 83       	st	Z, r25
   11d74:	d2 96       	adiw	r26, 0x32	; 50
   11d76:	ed 91       	ld	r30, X+
   11d78:	fc 91       	ld	r31, X
   11d7a:	d3 97       	sbiw	r26, 0x33	; 51
   11d7c:	90 81       	ld	r25, Z
   11d7e:	d8 96       	adiw	r26, 0x38	; 56
   11d80:	2c 91       	ld	r18, X
   11d82:	d8 97       	sbiw	r26, 0x38	; 56
   11d84:	92 2b       	or	r25, r18
   11d86:	90 83       	st	Z, r25
   11d88:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   11d8a:	d2 96       	adiw	r26, 0x32	; 50
   11d8c:	ed 91       	ld	r30, X+
   11d8e:	fc 91       	ld	r31, X
   11d90:	d3 97       	sbiw	r26, 0x33	; 51
   11d92:	80 81       	ld	r24, Z
   11d94:	dc 96       	adiw	r26, 0x3c	; 60
   11d96:	9c 91       	ld	r25, X
   11d98:	dc 97       	sbiw	r26, 0x3c	; 60
   11d9a:	89 23       	and	r24, r25
   11d9c:	80 83       	st	Z, r24
   11d9e:	d2 96       	adiw	r26, 0x32	; 50
   11da0:	ed 91       	ld	r30, X+
   11da2:	fc 91       	ld	r31, X
   11da4:	d3 97       	sbiw	r26, 0x33	; 51
   11da6:	80 81       	ld	r24, Z
   11da8:	d8 96       	adiw	r26, 0x38	; 56
   11daa:	9c 91       	ld	r25, X
   11dac:	89 2b       	or	r24, r25
   11dae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
   11db0:	d7 01       	movw	r26, r14
   11db2:	9e 96       	adiw	r26, 0x2e	; 46
   11db4:	ed 91       	ld	r30, X+
   11db6:	fc 91       	ld	r31, X
   11db8:	9f 97       	sbiw	r26, 0x2f	; 47
   11dba:	80 81       	ld	r24, Z
   11dbc:	d6 96       	adiw	r26, 0x36	; 54
   11dbe:	9c 91       	ld	r25, X
   11dc0:	89 2b       	or	r24, r25
   11dc2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
   11dc4:	28 96       	adiw	r28, 0x08	; 8
   11dc6:	0f b6       	in	r0, 0x3f	; 63
   11dc8:	f8 94       	cli
   11dca:	de bf       	out	0x3e, r29	; 62
   11dcc:	0f be       	out	0x3f, r0	; 63
   11dce:	cd bf       	out	0x3d, r28	; 61
   11dd0:	df 91       	pop	r29
   11dd2:	cf 91       	pop	r28
   11dd4:	1f 91       	pop	r17
   11dd6:	0f 91       	pop	r16
   11dd8:	ff 90       	pop	r15
   11dda:	ef 90       	pop	r14
   11ddc:	df 90       	pop	r13
   11dde:	cf 90       	pop	r12
   11de0:	bf 90       	pop	r11
   11de2:	af 90       	pop	r10
   11de4:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   11de6:	f7 01       	movw	r30, r14
   11de8:	a6 85       	ldd	r26, Z+14	; 0x0e
   11dea:	b7 85       	ldd	r27, Z+15	; 0x0f
   11dec:	59 01       	movw	r10, r18
   11dee:	a0 94       	com	r10
   11df0:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
   11df2:	9d 01       	movw	r18, r26
   11df4:	26 1b       	sub	r18, r22
   11df6:	37 0b       	sbc	r19, r23
   11df8:	21 50       	subi	r18, 0x01	; 1
   11dfa:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   11dfc:	60 89       	ldd	r22, Z+16	; 0x10
   11dfe:	71 89       	ldd	r23, Z+17	; 0x11
   11e00:	68 01       	movw	r12, r16
   11e02:	c0 94       	com	r12
   11e04:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
   11e06:	8a 01       	movw	r16, r20
   11e08:	00 95       	com	r16
   11e0a:	10 95       	com	r17
   11e0c:	06 0f       	add	r16, r22
   11e0e:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
   11e10:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
   11e12:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
   11e14:	a6 01       	movw	r20, r12
   11e16:	46 0f       	add	r20, r22
   11e18:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
   11e1a:	b5 01       	movw	r22, r10
   11e1c:	f1 cc       	rjmp	.-1566   	; 0x11800 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
   11e1e:	f7 01       	movw	r30, r14
   11e20:	a0 89       	ldd	r26, Z+16	; 0x10
   11e22:	b1 89       	ldd	r27, Z+17	; 0x11
   11e24:	69 01       	movw	r12, r18
   11e26:	c0 94       	com	r12
   11e28:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
   11e2a:	cd 01       	movw	r24, r26
   11e2c:	86 1b       	sub	r24, r22
   11e2e:	97 0b       	sbc	r25, r23
   11e30:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
   11e32:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
   11e34:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
   11e36:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
   11e38:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
   11e3a:	a6 01       	movw	r20, r12
   11e3c:	4a 0f       	add	r20, r26
   11e3e:	5b 1f       	adc	r21, r27
   11e40:	e1 cc       	rjmp	.-1598   	; 0x11804 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
   11e42:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
   11e44:	fb 01       	movw	r30, r22
   11e46:	de cc       	rjmp	.-1604   	; 0x11804 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
   11e48:	01 97       	sbiw	r24, 0x01	; 1
   11e4a:	09 f0       	breq	.+2      	; 0x11e4e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
   11e4c:	e5 c1       	rjmp	.+970    	; 0x12218 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
   11e4e:	d0 96       	adiw	r26, 0x30	; 48
   11e50:	ed 91       	ld	r30, X+
   11e52:	fc 91       	ld	r31, X
   11e54:	d1 97       	sbiw	r26, 0x31	; 49
   11e56:	80 81       	ld	r24, Z
   11e58:	db 96       	adiw	r26, 0x3b	; 59
   11e5a:	9c 91       	ld	r25, X
   11e5c:	db 97       	sbiw	r26, 0x3b	; 59
   11e5e:	89 23       	and	r24, r25
   11e60:	80 83       	st	Z, r24
   11e62:	82 e0       	ldi	r24, 0x02	; 2
   11e64:	82 b9       	out	0x02, r24	; 2
   11e66:	d2 96       	adiw	r26, 0x32	; 50
   11e68:	ed 91       	ld	r30, X+
   11e6a:	fc 91       	ld	r31, X
   11e6c:	d3 97       	sbiw	r26, 0x33	; 51
   11e6e:	80 81       	ld	r24, Z
   11e70:	dc 96       	adiw	r26, 0x3c	; 60
   11e72:	9c 91       	ld	r25, X
   11e74:	dc 97       	sbiw	r26, 0x3c	; 60
   11e76:	89 23       	and	r24, r25
   11e78:	80 83       	st	Z, r24
   11e7a:	d2 96       	adiw	r26, 0x32	; 50
   11e7c:	ed 91       	ld	r30, X+
   11e7e:	fc 91       	ld	r31, X
   11e80:	d3 97       	sbiw	r26, 0x33	; 51
   11e82:	80 81       	ld	r24, Z
   11e84:	d8 96       	adiw	r26, 0x38	; 56
   11e86:	9c 91       	ld	r25, X
   11e88:	d8 97       	sbiw	r26, 0x38	; 56
   11e8a:	89 2b       	or	r24, r25
   11e8c:	80 83       	st	Z, r24
   11e8e:	d0 96       	adiw	r26, 0x30	; 48
   11e90:	ed 91       	ld	r30, X+
   11e92:	fc 91       	ld	r31, X
   11e94:	d1 97       	sbiw	r26, 0x31	; 49
   11e96:	80 81       	ld	r24, Z
   11e98:	d7 96       	adiw	r26, 0x37	; 55
   11e9a:	9c 91       	ld	r25, X
   11e9c:	d7 97       	sbiw	r26, 0x37	; 55
   11e9e:	89 2b       	or	r24, r25
   11ea0:	80 83       	st	Z, r24
   11ea2:	72 b9       	out	0x02, r23	; 2
   11ea4:	d2 96       	adiw	r26, 0x32	; 50
   11ea6:	ed 91       	ld	r30, X+
   11ea8:	fc 91       	ld	r31, X
   11eaa:	d3 97       	sbiw	r26, 0x33	; 51
   11eac:	80 81       	ld	r24, Z
   11eae:	dc 96       	adiw	r26, 0x3c	; 60
   11eb0:	9c 91       	ld	r25, X
   11eb2:	dc 97       	sbiw	r26, 0x3c	; 60
   11eb4:	89 23       	and	r24, r25
   11eb6:	80 83       	st	Z, r24
   11eb8:	d2 96       	adiw	r26, 0x32	; 50
   11eba:	ed 91       	ld	r30, X+
   11ebc:	fc 91       	ld	r31, X
   11ebe:	d3 97       	sbiw	r26, 0x33	; 51
   11ec0:	80 81       	ld	r24, Z
   11ec2:	d8 96       	adiw	r26, 0x38	; 56
   11ec4:	9c 91       	ld	r25, X
   11ec6:	d8 97       	sbiw	r26, 0x38	; 56
   11ec8:	89 2b       	or	r24, r25
   11eca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
   11ecc:	d0 96       	adiw	r26, 0x30	; 48
   11ece:	ed 91       	ld	r30, X+
   11ed0:	fc 91       	ld	r31, X
   11ed2:	d1 97       	sbiw	r26, 0x31	; 49
   11ed4:	80 81       	ld	r24, Z
   11ed6:	db 96       	adiw	r26, 0x3b	; 59
   11ed8:	9c 91       	ld	r25, X
   11eda:	db 97       	sbiw	r26, 0x3b	; 59
   11edc:	89 23       	and	r24, r25
   11ede:	80 83       	st	Z, r24
   11ee0:	83 e0       	ldi	r24, 0x03	; 3
   11ee2:	82 b9       	out	0x02, r24	; 2
   11ee4:	d2 96       	adiw	r26, 0x32	; 50
   11ee6:	ed 91       	ld	r30, X+
   11ee8:	fc 91       	ld	r31, X
   11eea:	d3 97       	sbiw	r26, 0x33	; 51
   11eec:	80 81       	ld	r24, Z
   11eee:	dc 96       	adiw	r26, 0x3c	; 60
   11ef0:	9c 91       	ld	r25, X
   11ef2:	dc 97       	sbiw	r26, 0x3c	; 60
   11ef4:	89 23       	and	r24, r25
   11ef6:	80 83       	st	Z, r24
   11ef8:	d2 96       	adiw	r26, 0x32	; 50
   11efa:	ed 91       	ld	r30, X+
   11efc:	fc 91       	ld	r31, X
   11efe:	d3 97       	sbiw	r26, 0x33	; 51
   11f00:	80 81       	ld	r24, Z
   11f02:	d8 96       	adiw	r26, 0x38	; 56
   11f04:	9c 91       	ld	r25, X
   11f06:	d8 97       	sbiw	r26, 0x38	; 56
   11f08:	89 2b       	or	r24, r25
   11f0a:	80 83       	st	Z, r24
   11f0c:	d0 96       	adiw	r26, 0x30	; 48
   11f0e:	ed 91       	ld	r30, X+
   11f10:	fc 91       	ld	r31, X
   11f12:	d1 97       	sbiw	r26, 0x31	; 49
   11f14:	80 81       	ld	r24, Z
   11f16:	d7 96       	adiw	r26, 0x37	; 55
   11f18:	9c 91       	ld	r25, X
   11f1a:	d7 97       	sbiw	r26, 0x37	; 55
   11f1c:	89 2b       	or	r24, r25
   11f1e:	80 83       	st	Z, r24
   11f20:	62 b9       	out	0x02, r22	; 2
   11f22:	d2 96       	adiw	r26, 0x32	; 50
   11f24:	ed 91       	ld	r30, X+
   11f26:	fc 91       	ld	r31, X
   11f28:	d3 97       	sbiw	r26, 0x33	; 51
   11f2a:	80 81       	ld	r24, Z
   11f2c:	dc 96       	adiw	r26, 0x3c	; 60
   11f2e:	9c 91       	ld	r25, X
   11f30:	dc 97       	sbiw	r26, 0x3c	; 60
   11f32:	89 23       	and	r24, r25
   11f34:	80 83       	st	Z, r24
   11f36:	d2 96       	adiw	r26, 0x32	; 50
   11f38:	ed 91       	ld	r30, X+
   11f3a:	fc 91       	ld	r31, X
   11f3c:	d3 97       	sbiw	r26, 0x33	; 51
   11f3e:	80 81       	ld	r24, Z
   11f40:	d8 96       	adiw	r26, 0x38	; 56
   11f42:	9c 91       	ld	r25, X
   11f44:	d8 97       	sbiw	r26, 0x38	; 56
   11f46:	89 2b       	or	r24, r25
   11f48:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
   11f4a:	d0 96       	adiw	r26, 0x30	; 48
   11f4c:	ed 91       	ld	r30, X+
   11f4e:	fc 91       	ld	r31, X
   11f50:	d1 97       	sbiw	r26, 0x31	; 49
   11f52:	80 81       	ld	r24, Z
   11f54:	db 96       	adiw	r26, 0x3b	; 59
   11f56:	9c 91       	ld	r25, X
   11f58:	db 97       	sbiw	r26, 0x3b	; 59
   11f5a:	89 23       	and	r24, r25
   11f5c:	80 83       	st	Z, r24
   11f5e:	86 e0       	ldi	r24, 0x06	; 6
   11f60:	82 b9       	out	0x02, r24	; 2
   11f62:	d2 96       	adiw	r26, 0x32	; 50
   11f64:	ed 91       	ld	r30, X+
   11f66:	fc 91       	ld	r31, X
   11f68:	d3 97       	sbiw	r26, 0x33	; 51
   11f6a:	80 81       	ld	r24, Z
   11f6c:	dc 96       	adiw	r26, 0x3c	; 60
   11f6e:	9c 91       	ld	r25, X
   11f70:	dc 97       	sbiw	r26, 0x3c	; 60
   11f72:	89 23       	and	r24, r25
   11f74:	80 83       	st	Z, r24
   11f76:	d2 96       	adiw	r26, 0x32	; 50
   11f78:	ed 91       	ld	r30, X+
   11f7a:	fc 91       	ld	r31, X
   11f7c:	d3 97       	sbiw	r26, 0x33	; 51
   11f7e:	80 81       	ld	r24, Z
   11f80:	d8 96       	adiw	r26, 0x38	; 56
   11f82:	9c 91       	ld	r25, X
   11f84:	d8 97       	sbiw	r26, 0x38	; 56
   11f86:	89 2b       	or	r24, r25
   11f88:	80 83       	st	Z, r24
   11f8a:	d0 96       	adiw	r26, 0x30	; 48
   11f8c:	ed 91       	ld	r30, X+
   11f8e:	fc 91       	ld	r31, X
   11f90:	d1 97       	sbiw	r26, 0x31	; 49
   11f92:	80 81       	ld	r24, Z
   11f94:	d7 96       	adiw	r26, 0x37	; 55
   11f96:	9c 91       	ld	r25, X
   11f98:	d7 97       	sbiw	r26, 0x37	; 55
   11f9a:	89 2b       	or	r24, r25
   11f9c:	80 83       	st	Z, r24
   11f9e:	52 b9       	out	0x02, r21	; 2
   11fa0:	d2 96       	adiw	r26, 0x32	; 50
   11fa2:	ed 91       	ld	r30, X+
   11fa4:	fc 91       	ld	r31, X
   11fa6:	d3 97       	sbiw	r26, 0x33	; 51
   11fa8:	80 81       	ld	r24, Z
   11faa:	dc 96       	adiw	r26, 0x3c	; 60
   11fac:	9c 91       	ld	r25, X
   11fae:	dc 97       	sbiw	r26, 0x3c	; 60
   11fb0:	89 23       	and	r24, r25
   11fb2:	80 83       	st	Z, r24
   11fb4:	d2 96       	adiw	r26, 0x32	; 50
   11fb6:	ed 91       	ld	r30, X+
   11fb8:	fc 91       	ld	r31, X
   11fba:	d3 97       	sbiw	r26, 0x33	; 51
   11fbc:	80 81       	ld	r24, Z
   11fbe:	d8 96       	adiw	r26, 0x38	; 56
   11fc0:	9c 91       	ld	r25, X
   11fc2:	d8 97       	sbiw	r26, 0x38	; 56
   11fc4:	89 2b       	or	r24, r25
   11fc6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
   11fc8:	d0 96       	adiw	r26, 0x30	; 48
   11fca:	ed 91       	ld	r30, X+
   11fcc:	fc 91       	ld	r31, X
   11fce:	d1 97       	sbiw	r26, 0x31	; 49
   11fd0:	80 81       	ld	r24, Z
   11fd2:	db 96       	adiw	r26, 0x3b	; 59
   11fd4:	9c 91       	ld	r25, X
   11fd6:	db 97       	sbiw	r26, 0x3b	; 59
   11fd8:	89 23       	and	r24, r25
   11fda:	80 83       	st	Z, r24
   11fdc:	87 e0       	ldi	r24, 0x07	; 7
   11fde:	82 b9       	out	0x02, r24	; 2
   11fe0:	d2 96       	adiw	r26, 0x32	; 50
   11fe2:	ed 91       	ld	r30, X+
   11fe4:	fc 91       	ld	r31, X
   11fe6:	d3 97       	sbiw	r26, 0x33	; 51
   11fe8:	80 81       	ld	r24, Z
   11fea:	dc 96       	adiw	r26, 0x3c	; 60
   11fec:	9c 91       	ld	r25, X
   11fee:	dc 97       	sbiw	r26, 0x3c	; 60
   11ff0:	89 23       	and	r24, r25
   11ff2:	80 83       	st	Z, r24
   11ff4:	d2 96       	adiw	r26, 0x32	; 50
   11ff6:	ed 91       	ld	r30, X+
   11ff8:	fc 91       	ld	r31, X
   11ffa:	d3 97       	sbiw	r26, 0x33	; 51
   11ffc:	80 81       	ld	r24, Z
   11ffe:	d8 96       	adiw	r26, 0x38	; 56
   12000:	9c 91       	ld	r25, X
   12002:	d8 97       	sbiw	r26, 0x38	; 56
   12004:	89 2b       	or	r24, r25
   12006:	80 83       	st	Z, r24
   12008:	d0 96       	adiw	r26, 0x30	; 48
   1200a:	ed 91       	ld	r30, X+
   1200c:	fc 91       	ld	r31, X
   1200e:	d1 97       	sbiw	r26, 0x31	; 49
   12010:	80 81       	ld	r24, Z
   12012:	d7 96       	adiw	r26, 0x37	; 55
   12014:	9c 91       	ld	r25, X
   12016:	d7 97       	sbiw	r26, 0x37	; 55
   12018:	89 2b       	or	r24, r25
   1201a:	80 83       	st	Z, r24
   1201c:	42 b9       	out	0x02, r20	; 2
   1201e:	d2 96       	adiw	r26, 0x32	; 50
   12020:	ed 91       	ld	r30, X+
   12022:	fc 91       	ld	r31, X
   12024:	d3 97       	sbiw	r26, 0x33	; 51
   12026:	80 81       	ld	r24, Z
   12028:	dc 96       	adiw	r26, 0x3c	; 60
   1202a:	9c 91       	ld	r25, X
   1202c:	dc 97       	sbiw	r26, 0x3c	; 60
   1202e:	89 23       	and	r24, r25
   12030:	80 83       	st	Z, r24
   12032:	d2 96       	adiw	r26, 0x32	; 50
   12034:	ed 91       	ld	r30, X+
   12036:	fc 91       	ld	r31, X
   12038:	d3 97       	sbiw	r26, 0x33	; 51
   1203a:	80 81       	ld	r24, Z
   1203c:	d8 96       	adiw	r26, 0x38	; 56
   1203e:	9c 91       	ld	r25, X
   12040:	d8 97       	sbiw	r26, 0x38	; 56
   12042:	89 2b       	or	r24, r25
   12044:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
   12046:	d0 96       	adiw	r26, 0x30	; 48
   12048:	ed 91       	ld	r30, X+
   1204a:	fc 91       	ld	r31, X
   1204c:	d1 97       	sbiw	r26, 0x31	; 49
   1204e:	80 81       	ld	r24, Z
   12050:	db 96       	adiw	r26, 0x3b	; 59
   12052:	9c 91       	ld	r25, X
   12054:	db 97       	sbiw	r26, 0x3b	; 59
   12056:	89 23       	and	r24, r25
   12058:	80 83       	st	Z, r24
   1205a:	84 e0       	ldi	r24, 0x04	; 4
   1205c:	82 b9       	out	0x02, r24	; 2
   1205e:	d2 96       	adiw	r26, 0x32	; 50
   12060:	ed 91       	ld	r30, X+
   12062:	fc 91       	ld	r31, X
   12064:	d3 97       	sbiw	r26, 0x33	; 51
   12066:	80 81       	ld	r24, Z
   12068:	dc 96       	adiw	r26, 0x3c	; 60
   1206a:	9c 91       	ld	r25, X
   1206c:	dc 97       	sbiw	r26, 0x3c	; 60
   1206e:	89 23       	and	r24, r25
   12070:	80 83       	st	Z, r24
   12072:	d2 96       	adiw	r26, 0x32	; 50
   12074:	ed 91       	ld	r30, X+
   12076:	fc 91       	ld	r31, X
   12078:	d3 97       	sbiw	r26, 0x33	; 51
   1207a:	80 81       	ld	r24, Z
   1207c:	d8 96       	adiw	r26, 0x38	; 56
   1207e:	9c 91       	ld	r25, X
   12080:	d8 97       	sbiw	r26, 0x38	; 56
   12082:	89 2b       	or	r24, r25
   12084:	80 83       	st	Z, r24
   12086:	d0 96       	adiw	r26, 0x30	; 48
   12088:	ed 91       	ld	r30, X+
   1208a:	fc 91       	ld	r31, X
   1208c:	d1 97       	sbiw	r26, 0x31	; 49
   1208e:	80 81       	ld	r24, Z
   12090:	d7 96       	adiw	r26, 0x37	; 55
   12092:	9c 91       	ld	r25, X
   12094:	d7 97       	sbiw	r26, 0x37	; 55
   12096:	89 2b       	or	r24, r25
   12098:	80 83       	st	Z, r24
   1209a:	32 b9       	out	0x02, r19	; 2
   1209c:	d2 96       	adiw	r26, 0x32	; 50
   1209e:	ed 91       	ld	r30, X+
   120a0:	fc 91       	ld	r31, X
   120a2:	d3 97       	sbiw	r26, 0x33	; 51
   120a4:	80 81       	ld	r24, Z
   120a6:	dc 96       	adiw	r26, 0x3c	; 60
   120a8:	9c 91       	ld	r25, X
   120aa:	dc 97       	sbiw	r26, 0x3c	; 60
   120ac:	89 23       	and	r24, r25
   120ae:	80 83       	st	Z, r24
   120b0:	d2 96       	adiw	r26, 0x32	; 50
   120b2:	ed 91       	ld	r30, X+
   120b4:	fc 91       	ld	r31, X
   120b6:	d3 97       	sbiw	r26, 0x33	; 51
   120b8:	80 81       	ld	r24, Z
   120ba:	d8 96       	adiw	r26, 0x38	; 56
   120bc:	9c 91       	ld	r25, X
   120be:	d8 97       	sbiw	r26, 0x38	; 56
   120c0:	89 2b       	or	r24, r25
   120c2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
   120c4:	d0 96       	adiw	r26, 0x30	; 48
   120c6:	ed 91       	ld	r30, X+
   120c8:	fc 91       	ld	r31, X
   120ca:	d1 97       	sbiw	r26, 0x31	; 49
   120cc:	80 81       	ld	r24, Z
   120ce:	db 96       	adiw	r26, 0x3b	; 59
   120d0:	9c 91       	ld	r25, X
   120d2:	db 97       	sbiw	r26, 0x3b	; 59
   120d4:	89 23       	and	r24, r25
   120d6:	80 83       	st	Z, r24
   120d8:	85 e0       	ldi	r24, 0x05	; 5
   120da:	82 b9       	out	0x02, r24	; 2
   120dc:	d2 96       	adiw	r26, 0x32	; 50
   120de:	ed 91       	ld	r30, X+
   120e0:	fc 91       	ld	r31, X
   120e2:	d3 97       	sbiw	r26, 0x33	; 51
   120e4:	80 81       	ld	r24, Z
   120e6:	dc 96       	adiw	r26, 0x3c	; 60
   120e8:	9c 91       	ld	r25, X
   120ea:	dc 97       	sbiw	r26, 0x3c	; 60
   120ec:	89 23       	and	r24, r25
   120ee:	80 83       	st	Z, r24
   120f0:	d2 96       	adiw	r26, 0x32	; 50
   120f2:	ed 91       	ld	r30, X+
   120f4:	fc 91       	ld	r31, X
   120f6:	d3 97       	sbiw	r26, 0x33	; 51
   120f8:	80 81       	ld	r24, Z
   120fa:	d8 96       	adiw	r26, 0x38	; 56
   120fc:	9c 91       	ld	r25, X
   120fe:	d8 97       	sbiw	r26, 0x38	; 56
   12100:	89 2b       	or	r24, r25
   12102:	80 83       	st	Z, r24
   12104:	d0 96       	adiw	r26, 0x30	; 48
   12106:	ed 91       	ld	r30, X+
   12108:	fc 91       	ld	r31, X
   1210a:	d1 97       	sbiw	r26, 0x31	; 49
   1210c:	80 81       	ld	r24, Z
   1210e:	d7 96       	adiw	r26, 0x37	; 55
   12110:	9c 91       	ld	r25, X
   12112:	d7 97       	sbiw	r26, 0x37	; 55
   12114:	89 2b       	or	r24, r25
   12116:	80 83       	st	Z, r24
   12118:	22 b9       	out	0x02, r18	; 2
   1211a:	d2 96       	adiw	r26, 0x32	; 50
   1211c:	ed 91       	ld	r30, X+
   1211e:	fc 91       	ld	r31, X
   12120:	d3 97       	sbiw	r26, 0x33	; 51
   12122:	80 81       	ld	r24, Z
   12124:	dc 96       	adiw	r26, 0x3c	; 60
   12126:	9c 91       	ld	r25, X
   12128:	dc 97       	sbiw	r26, 0x3c	; 60
   1212a:	89 23       	and	r24, r25
   1212c:	80 83       	st	Z, r24
   1212e:	d2 96       	adiw	r26, 0x32	; 50
   12130:	ed 91       	ld	r30, X+
   12132:	fc 91       	ld	r31, X
   12134:	d3 97       	sbiw	r26, 0x33	; 51
   12136:	80 81       	ld	r24, Z
   12138:	d8 96       	adiw	r26, 0x38	; 56
   1213a:	9c 91       	ld	r25, X
   1213c:	d8 97       	sbiw	r26, 0x38	; 56
   1213e:	89 2b       	or	r24, r25
   12140:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
   12142:	d0 96       	adiw	r26, 0x30	; 48
   12144:	ed 91       	ld	r30, X+
   12146:	fc 91       	ld	r31, X
   12148:	d1 97       	sbiw	r26, 0x31	; 49
   1214a:	80 81       	ld	r24, Z
   1214c:	db 96       	adiw	r26, 0x3b	; 59
   1214e:	9c 91       	ld	r25, X
   12150:	db 97       	sbiw	r26, 0x3b	; 59
   12152:	89 23       	and	r24, r25
   12154:	80 83       	st	Z, r24
   12156:	88 e0       	ldi	r24, 0x08	; 8
   12158:	82 b9       	out	0x02, r24	; 2
   1215a:	d2 96       	adiw	r26, 0x32	; 50
   1215c:	ed 91       	ld	r30, X+
   1215e:	fc 91       	ld	r31, X
   12160:	d3 97       	sbiw	r26, 0x33	; 51
   12162:	80 81       	ld	r24, Z
   12164:	dc 96       	adiw	r26, 0x3c	; 60
   12166:	9c 91       	ld	r25, X
   12168:	dc 97       	sbiw	r26, 0x3c	; 60
   1216a:	89 23       	and	r24, r25
   1216c:	80 83       	st	Z, r24
   1216e:	d2 96       	adiw	r26, 0x32	; 50
   12170:	ed 91       	ld	r30, X+
   12172:	fc 91       	ld	r31, X
   12174:	d3 97       	sbiw	r26, 0x33	; 51
   12176:	80 81       	ld	r24, Z
   12178:	d8 96       	adiw	r26, 0x38	; 56
   1217a:	9c 91       	ld	r25, X
   1217c:	d8 97       	sbiw	r26, 0x38	; 56
   1217e:	89 2b       	or	r24, r25
   12180:	80 83       	st	Z, r24
   12182:	d0 96       	adiw	r26, 0x30	; 48
   12184:	ed 91       	ld	r30, X+
   12186:	fc 91       	ld	r31, X
   12188:	d1 97       	sbiw	r26, 0x31	; 49
   1218a:	80 81       	ld	r24, Z
   1218c:	d7 96       	adiw	r26, 0x37	; 55
   1218e:	9c 91       	ld	r25, X
   12190:	d7 97       	sbiw	r26, 0x37	; 55
   12192:	89 2b       	or	r24, r25
   12194:	80 83       	st	Z, r24
   12196:	12 b9       	out	0x02, r17	; 2
   12198:	d2 96       	adiw	r26, 0x32	; 50
   1219a:	ed 91       	ld	r30, X+
   1219c:	fc 91       	ld	r31, X
   1219e:	d3 97       	sbiw	r26, 0x33	; 51
   121a0:	80 81       	ld	r24, Z
   121a2:	dc 96       	adiw	r26, 0x3c	; 60
   121a4:	9c 91       	ld	r25, X
   121a6:	dc 97       	sbiw	r26, 0x3c	; 60
   121a8:	89 23       	and	r24, r25
   121aa:	80 83       	st	Z, r24
   121ac:	d2 96       	adiw	r26, 0x32	; 50
   121ae:	ed 91       	ld	r30, X+
   121b0:	fc 91       	ld	r31, X
   121b2:	d3 97       	sbiw	r26, 0x33	; 51
   121b4:	80 81       	ld	r24, Z
   121b6:	d8 96       	adiw	r26, 0x38	; 56
   121b8:	9c 91       	ld	r25, X
   121ba:	d8 97       	sbiw	r26, 0x38	; 56
   121bc:	89 2b       	or	r24, r25
   121be:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
   121c0:	d0 96       	adiw	r26, 0x30	; 48
   121c2:	ed 91       	ld	r30, X+
   121c4:	fc 91       	ld	r31, X
   121c6:	d1 97       	sbiw	r26, 0x31	; 49
   121c8:	80 81       	ld	r24, Z
   121ca:	db 96       	adiw	r26, 0x3b	; 59
   121cc:	9c 91       	ld	r25, X
   121ce:	db 97       	sbiw	r26, 0x3b	; 59
   121d0:	89 23       	and	r24, r25
   121d2:	80 83       	st	Z, r24
   121d4:	89 e0       	ldi	r24, 0x09	; 9
   121d6:	82 b9       	out	0x02, r24	; 2
   121d8:	d2 96       	adiw	r26, 0x32	; 50
   121da:	ed 91       	ld	r30, X+
   121dc:	fc 91       	ld	r31, X
   121de:	d3 97       	sbiw	r26, 0x33	; 51
   121e0:	80 81       	ld	r24, Z
   121e2:	dc 96       	adiw	r26, 0x3c	; 60
   121e4:	9c 91       	ld	r25, X
   121e6:	dc 97       	sbiw	r26, 0x3c	; 60
   121e8:	89 23       	and	r24, r25
   121ea:	80 83       	st	Z, r24
   121ec:	d2 96       	adiw	r26, 0x32	; 50
   121ee:	ed 91       	ld	r30, X+
   121f0:	fc 91       	ld	r31, X
   121f2:	d3 97       	sbiw	r26, 0x33	; 51
   121f4:	80 81       	ld	r24, Z
   121f6:	d8 96       	adiw	r26, 0x38	; 56
   121f8:	9c 91       	ld	r25, X
   121fa:	d8 97       	sbiw	r26, 0x38	; 56
   121fc:	89 2b       	or	r24, r25
   121fe:	80 83       	st	Z, r24
   12200:	d0 96       	adiw	r26, 0x30	; 48
   12202:	ed 91       	ld	r30, X+
   12204:	fc 91       	ld	r31, X
   12206:	d1 97       	sbiw	r26, 0x31	; 49
   12208:	80 81       	ld	r24, Z
   1220a:	d7 96       	adiw	r26, 0x37	; 55
   1220c:	9c 91       	ld	r25, X
   1220e:	d7 97       	sbiw	r26, 0x37	; 55
   12210:	89 2b       	or	r24, r25
   12212:	80 83       	st	Z, r24
   12214:	02 b9       	out	0x02, r16	; 2
   12216:	b9 cd       	rjmp	.-1166   	; 0x11d8a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
   12218:	7d 83       	std	Y+5, r23	; 0x05
   1221a:	6e 83       	std	Y+6, r22	; 0x06
   1221c:	3f 83       	std	Y+7, r19	; 0x07
   1221e:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
   12220:	59 83       	std	Y+1, r21	; 0x01
   12222:	4a 83       	std	Y+2, r20	; 0x02
   12224:	1b 83       	std	Y+3, r17	; 0x03
   12226:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
   12228:	f7 01       	movw	r30, r14
   1222a:	64 8d       	ldd	r22, Z+28	; 0x1c
   1222c:	75 8d       	ldd	r23, Z+29	; 0x1d
   1222e:	24 e0       	ldi	r18, 0x04	; 4
   12230:	ae 01       	movw	r20, r28
   12232:	4b 5f       	subi	r20, 0xFB	; 251
   12234:	5f 4f       	sbci	r21, 0xFF	; 255
   12236:	c7 01       	movw	r24, r14
   12238:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
   1223c:	d7 01       	movw	r26, r14
   1223e:	5e 96       	adiw	r26, 0x1e	; 30
   12240:	6d 91       	ld	r22, X+
   12242:	7c 91       	ld	r23, X
   12244:	24 e0       	ldi	r18, 0x04	; 4
   12246:	ae 01       	movw	r20, r28
   12248:	4f 5f       	subi	r20, 0xFF	; 255
   1224a:	5f 4f       	sbci	r21, 0xFF	; 255
   1224c:	c7 01       	movw	r24, r14
   1224e:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   12252:	ae cd       	rjmp	.-1188   	; 0x11db0 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00012254 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
   12254:	0f 93       	push	r16
   12256:	1f 93       	push	r17
   12258:	cf 93       	push	r28
   1225a:	df 93       	push	r29
   1225c:	8c 01       	movw	r16, r24
   1225e:	c4 e6       	ldi	r28, 0x64	; 100
   12260:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
   12262:	ce 01       	movw	r24, r28
   12264:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
   12268:	f8 01       	movw	r30, r16
   1226a:	81 93       	st	Z+, r24
   1226c:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
   1226e:	10 82       	st	Z, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
   12270:	88 23       	and	r24, r24
   12272:	21 f0       	breq	.+8      	; 0x1227c <device_get_name(char*)+0x28>
   12274:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
   12276:	cd 36       	cpi	r28, 0x6D	; 109
   12278:	d1 05       	cpc	r29, r1
   1227a:	99 f7       	brne	.-26     	; 0x12262 <device_get_name(char*)+0xe>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
   1227c:	df 91       	pop	r29
   1227e:	cf 91       	pop	r28
   12280:	1f 91       	pop	r17
   12282:	0f 91       	pop	r16
   12284:	08 95       	ret

00012286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
   12286:	cf 92       	push	r12
   12288:	df 92       	push	r13
   1228a:	ef 92       	push	r14
   1228c:	ff 92       	push	r15
   1228e:	0f 93       	push	r16
   12290:	1f 93       	push	r17
   12292:	cf 93       	push	r28
   12294:	df 93       	push	r29
   12296:	cd b7       	in	r28, 0x3d	; 61
   12298:	de b7       	in	r29, 0x3e	; 62
   1229a:	ca 54       	subi	r28, 0x4A	; 74
   1229c:	d1 09       	sbc	r29, r1
   1229e:	0f b6       	in	r0, 0x3f	; 63
   122a0:	f8 94       	cli
   122a2:	de bf       	out	0x3e, r29	; 62
   122a4:	0f be       	out	0x3f, r0	; 63
   122a6:	cd bf       	out	0x3d, r28	; 61
   122a8:	8c 01       	movw	r16, r24
   122aa:	6b 01       	movw	r12, r22
   122ac:	7a 01       	movw	r14, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:220
  char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
   122ae:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   122b2:	88 23       	and	r24, r24
   122b4:	89 f1       	breq	.+98     	; 0x12318 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
   122b6:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   122ba:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   122be:	01 96       	adiw	r24, 0x01	; 1
   122c0:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   122c4:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
   122c8:	ce 01       	movw	r24, r28
   122ca:	8f 5b       	subi	r24, 0xBF	; 191
   122cc:	9f 4f       	sbci	r25, 0xFF	; 255
   122ce:	0e 94 2a 91 	call	0x12254	; 0x12254 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
   122d2:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   122d6:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   122da:	ce 01       	movw	r24, r28
   122dc:	01 96       	adiw	r24, 0x01	; 1
   122de:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
   122e2:	be 01       	movw	r22, r28
   122e4:	6f 5b       	subi	r22, 0xBF	; 191
   122e6:	7f 4f       	sbci	r23, 0xFF	; 255
   122e8:	ce 01       	movw	r24, r28
   122ea:	01 96       	adiw	r24, 0x01	; 1
   122ec:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
   122f0:	60 e9       	ldi	r22, 0x90	; 144
   122f2:	75 e0       	ldi	r23, 0x05	; 5
   122f4:	ce 01       	movw	r24, r28
   122f6:	01 96       	adiw	r24, 0x01	; 1
   122f8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
   122fc:	b6 01       	movw	r22, r12
   122fe:	ce 01       	movw	r24, r28
   12300:	01 96       	adiw	r24, 0x01	; 1
   12302:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   12306:	a7 01       	movw	r20, r14
   12308:	be 01       	movw	r22, r28
   1230a:	6f 5f       	subi	r22, 0xFF	; 255
   1230c:	7f 4f       	sbci	r23, 0xFF	; 255
   1230e:	c8 01       	movw	r24, r16
   12310:	0e 94 70 69 	call	0xd2e0	; 0xd2e0 <PubSubClient::publish(char const*, char const*)>
   12314:	81 11       	cpse	r24, r1
   12316:	09 c0       	rjmp	.+18     	; 0x1232a <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
   12318:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1231c:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   12320:	01 96       	adiw	r24, 0x01	; 1
   12322:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   12326:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:232
}
   1232a:	c6 5b       	subi	r28, 0xB6	; 182
   1232c:	df 4f       	sbci	r29, 0xFF	; 255
   1232e:	0f b6       	in	r0, 0x3f	; 63
   12330:	f8 94       	cli
   12332:	de bf       	out	0x3e, r29	; 62
   12334:	0f be       	out	0x3f, r0	; 63
   12336:	cd bf       	out	0x3d, r28	; 61
   12338:	df 91       	pop	r29
   1233a:	cf 91       	pop	r28
   1233c:	1f 91       	pop	r17
   1233e:	0f 91       	pop	r16
   12340:	ff 90       	pop	r15
   12342:	ef 90       	pop	r14
   12344:	df 90       	pop	r13
   12346:	cf 90       	pop	r12
   12348:	08 95       	ret

0001234a <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:438
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
   1234a:	cf 93       	push	r28
   1234c:	df 93       	push	r29
   1234e:	cd b7       	in	r28, 0x3d	; 61
   12350:	de b7       	in	r29, 0x3e	; 62
   12352:	60 97       	sbiw	r28, 0x10	; 16
   12354:	0f b6       	in	r0, 0x3f	; 63
   12356:	f8 94       	cli
   12358:	de bf       	out	0x3e, r29	; 62
   1235a:	0f be       	out	0x3f, r0	; 63
   1235c:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:440
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
   1235e:	90 91 b7 0a 	lds	r25, 0x0AB7	; 0x800ab7 <mqtt_log_cnt>
   12362:	e9 2f       	mov	r30, r25
   12364:	f0 e0       	ldi	r31, 0x00	; 0
   12366:	e9 5c       	subi	r30, 0xC9	; 201
   12368:	f5 4f       	sbci	r31, 0xF5	; 245
   1236a:	80 83       	st	Z, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:441
  mqtt_log[mqtt_log_cnt + 1] = 0;
   1236c:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:442
  mqtt_log_cnt++;
   1236e:	9f 5f       	subi	r25, 0xFF	; 255
   12370:	90 93 b7 0a 	sts	0x0AB7, r25	; 0x800ab7 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:443
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
   12374:	97 fd       	sbrc	r25, 7
   12376:	04 c0       	rjmp	.+8      	; 0x12380 <printf_via_mqtt(char, __file*)+0x36>
   12378:	8a 30       	cpi	r24, 0x0A	; 10
   1237a:	11 f0       	breq	.+4      	; 0x12380 <printf_via_mqtt(char, __file*)+0x36>
   1237c:	81 11       	cpse	r24, r1
   1237e:	13 c0       	rjmp	.+38     	; 0x123a6 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:445
  {
    strcpy(topic, "log-printf");
   12380:	62 e3       	ldi	r22, 0x32	; 50
   12382:	74 e0       	ldi	r23, 0x04	; 4
   12384:	ce 01       	movw	r24, r28
   12386:	01 96       	adiw	r24, 0x01	; 1
   12388:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:446
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
   1238c:	47 e3       	ldi	r20, 0x37	; 55
   1238e:	5a e0       	ldi	r21, 0x0A	; 10
   12390:	be 01       	movw	r22, r28
   12392:	6f 5f       	subi	r22, 0xFF	; 255
   12394:	7f 4f       	sbci	r23, 0xFF	; 255
   12396:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <pub_mqtt_client>
   1239a:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <pub_mqtt_client+0x1>
   1239e:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:447
    mqtt_log_cnt = 0;
   123a2:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <mqtt_log_cnt>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:449
  }
}
   123a6:	60 96       	adiw	r28, 0x10	; 16
   123a8:	0f b6       	in	r0, 0x3f	; 63
   123aa:	f8 94       	cli
   123ac:	de bf       	out	0x3e, r29	; 62
   123ae:	0f be       	out	0x3f, r0	; 63
   123b0:	cd bf       	out	0x3d, r28	; 61
   123b2:	df 91       	pop	r29
   123b4:	cf 91       	pop	r28
   123b6:	08 95       	ret

000123b8 <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2048
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
   123b8:	2f 92       	push	r2
   123ba:	3f 92       	push	r3
   123bc:	4f 92       	push	r4
   123be:	5f 92       	push	r5
   123c0:	6f 92       	push	r6
   123c2:	7f 92       	push	r7
   123c4:	8f 92       	push	r8
   123c6:	9f 92       	push	r9
   123c8:	af 92       	push	r10
   123ca:	bf 92       	push	r11
   123cc:	cf 92       	push	r12
   123ce:	df 92       	push	r13
   123d0:	ef 92       	push	r14
   123d2:	ff 92       	push	r15
   123d4:	0f 93       	push	r16
   123d6:	1f 93       	push	r17
   123d8:	cf 93       	push	r28
   123da:	df 93       	push	r29
   123dc:	cd b7       	in	r28, 0x3d	; 61
   123de:	de b7       	in	r29, 0x3e	; 62
   123e0:	c6 54       	subi	r28, 0x46	; 70
   123e2:	d1 40       	sbci	r29, 0x01	; 1
   123e4:	0f b6       	in	r0, 0x3f	; 63
   123e6:	f8 94       	cli
   123e8:	de bf       	out	0x3e, r29	; 62
   123ea:	0f be       	out	0x3f, r0	; 63
   123ec:	cd bf       	out	0x3d, r28	; 61
   123ee:	4c 01       	movw	r8, r24
   123f0:	8b 01       	movw	r16, r22
   123f2:	7a 01       	movw	r14, r20
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   123f4:	1b 82       	std	Y+3, r1	; 0x03
   123f6:	86 ed       	ldi	r24, 0xD6	; 214
   123f8:	93 e0       	ldi	r25, 0x03	; 3
   123fa:	9d 83       	std	Y+5, r25	; 0x05
   123fc:	8c 83       	std	Y+4, r24	; 0x04
   123fe:	89 e3       	ldi	r24, 0x39	; 57
   12400:	95 e0       	ldi	r25, 0x05	; 5
   12402:	9f 83       	std	Y+7, r25	; 0x07
   12404:	8e 83       	std	Y+6, r24	; 0x06
   12406:	18 86       	std	Y+8, r1	; 0x08
   12408:	19 86       	std	Y+9, r1	; 0x09
   1240a:	1a 86       	std	Y+10, r1	; 0x0a
   1240c:	1b 86       	std	Y+11, r1	; 0x0b
   1240e:	80 e6       	ldi	r24, 0x60	; 96
   12410:	9a ee       	ldi	r25, 0xEA	; 234
   12412:	a0 e0       	ldi	r26, 0x00	; 0
   12414:	b0 e0       	ldi	r27, 0x00	; 0
   12416:	8c 87       	std	Y+12, r24	; 0x0c
   12418:	9d 87       	std	Y+13, r25	; 0x0d
   1241a:	ae 87       	std	Y+14, r26	; 0x0e
   1241c:	bf 87       	std	Y+15, r27	; 0x0f
   1241e:	18 8a       	std	Y+16, r1	; 0x10
   12420:	19 8a       	std	Y+17, r1	; 0x11
   12422:	1a 8a       	std	Y+18, r1	; 0x12
   12424:	1b 8a       	std	Y+19, r1	; 0x13
   12426:	1c 8a       	std	Y+20, r1	; 0x14
   12428:	1d 8a       	std	Y+21, r1	; 0x15
   1242a:	1e 8a       	std	Y+22, r1	; 0x16
   1242c:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   1242e:	8c e4       	ldi	r24, 0x4C	; 76
   12430:	92 e1       	ldi	r25, 0x12	; 18
   12432:	9a 83       	std	Y+2, r25	; 0x02
   12434:	89 83       	std	Y+1, r24	; 0x01
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;

  NTPClient timeClient(udpClient);
  DateTime ted;
   12436:	ce 01       	movw	r24, r28
   12438:	84 5c       	subi	r24, 0xC4	; 196
   1243a:	9e 4f       	sbci	r25, 0xFE	; 254
   1243c:	0e 94 c0 bd 	call	0x17b80	; 0x17b80 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   12440:	e5 e0       	ldi	r30, 0x05	; 5
   12442:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
   12444:	80 e0       	ldi	r24, 0x00	; 0
   12446:	11 92       	st	Z+, r1
   12448:	8f 5f       	subi	r24, 0xFF	; 255
   1244a:	80 38       	cpi	r24, 0x80	; 128
   1244c:	e1 f7       	brne	.-8      	; 0x12446 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2065
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
   1244e:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
   12452:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
   12456:	01 96       	adiw	r24, 0x01	; 1
   12458:	90 93 7d 0b 	sts	0x0B7D, r25	; 0x800b7d <mqtt_receive_message+0x1>
   1245c:	80 93 7c 0b 	sts	0x0B7C, r24	; 0x800b7c <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
  strncpy(my_payload, (char*) payload, length);
   12460:	a7 01       	movw	r20, r14
   12462:	b8 01       	movw	r22, r16
   12464:	85 e0       	ldi	r24, 0x05	; 5
   12466:	99 e0       	ldi	r25, 0x09	; 9
   12468:	0e 94 5c fb 	call	0x1f6b8	; 0x1f6b8 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
   1246c:	5e 01       	movw	r10, r28
   1246e:	28 ec       	ldi	r18, 0xC8	; 200
   12470:	a2 0e       	add	r10, r18
   12472:	b1 1c       	adc	r11, r1
   12474:	6a e1       	ldi	r22, 0x1A	; 26
   12476:	71 e8       	ldi	r23, 0x81	; 129
   12478:	c5 01       	movw	r24, r10
   1247a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
  if (strcmp(str1, topic) == 0)
   1247e:	b4 01       	movw	r22, r8
   12480:	c5 01       	movw	r24, r10
   12482:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12486:	89 2b       	or	r24, r25
   12488:	49 f4       	brne	.+18     	; 0x1249c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
   1248a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1248e:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12492:	01 96       	adiw	r24, 0x01	; 1
   12494:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12498:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
   1249c:	61 e3       	ldi	r22, 0x31	; 49
   1249e:	71 e8       	ldi	r23, 0x81	; 129
   124a0:	c5 01       	movw	r24, r10
   124a2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
  if (strcmp(str1, topic) == 0)
   124a6:	b4 01       	movw	r22, r8
   124a8:	c5 01       	movw	r24, r10
   124aa:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   124ae:	89 2b       	or	r24, r25
   124b0:	49 f4       	brne	.+18     	; 0x124c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2078
  {
    mqtt_process_message++;
   124b2:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   124b6:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   124ba:	01 96       	adiw	r24, 0x01	; 1
   124bc:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   124c0:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
   124c4:	68 e5       	ldi	r22, 0x58	; 88
   124c6:	71 e8       	ldi	r23, 0x81	; 129
   124c8:	c5 01       	movw	r24, r10
   124ca:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
  strcat_P(str1, global_time_set);
   124ce:	6c ef       	ldi	r22, 0xFC	; 252
   124d0:	70 e8       	ldi	r23, 0x80	; 128
   124d2:	c5 01       	movw	r24, r10
   124d4:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
  if (strcmp(str1, topic) == 0)
   124d8:	b4 01       	movw	r22, r8
   124da:	c5 01       	movw	r24, r10
   124dc:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   124e0:	89 2b       	or	r24, r25
   124e2:	09 f0       	breq	.+2      	; 0x124e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e>
   124e4:	b5 c0       	rjmp	.+362    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
  {
    mqtt_process_message++;
   124e6:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   124ea:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   124ee:	01 96       	adiw	r24, 0x01	; 1
   124f0:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   124f4:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
   124f8:	20 91 87 0e 	lds	r18, 0x0E87	; 0x800e87 <doc>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   124fc:	88 e8       	ldi	r24, 0x88	; 136
   124fe:	9e e0       	ldi	r25, 0x0E	; 14
   12500:	2a 96       	adiw	r28, 0x0a	; 10
   12502:	9f af       	std	Y+63, r25	; 0x3f
   12504:	8e af       	std	Y+62, r24	; 0x3e
   12506:	2a 97       	sbiw	r28, 0x0a	; 10
   12508:	85 e0       	ldi	r24, 0x05	; 5
   1250a:	99 e0       	ldi	r25, 0x09	; 9
   1250c:	2c 96       	adiw	r28, 0x0c	; 12
   1250e:	9f af       	std	Y+63, r25	; 0x3f
   12510:	8e af       	std	Y+62, r24	; 0x3e
   12512:	2c 97       	sbiw	r28, 0x0c	; 12
   12514:	2e 96       	adiw	r28, 0x0e	; 14
   12516:	9f af       	std	Y+63, r25	; 0x3f
   12518:	8e af       	std	Y+62, r24	; 0x3e
   1251a:	2e 97       	sbiw	r28, 0x0e	; 14
   1251c:	2f 96       	adiw	r28, 0x0f	; 15
   1251e:	2f af       	std	Y+63, r18	; 0x3f
   12520:	2f 97       	sbiw	r28, 0x0f	; 15
   12522:	61 96       	adiw	r28, 0x11	; 17
   12524:	1f ae       	std	Y+63, r1	; 0x3f
   12526:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
   12528:	10 92 8f 0e 	sts	0x0E8F, r1	; 0x800e8f <doc+0x8>
   1252c:	10 92 8e 0e 	sts	0x0E8E, r1	; 0x800e8e <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   12530:	80 e9       	ldi	r24, 0x90	; 144
   12532:	9f e0       	ldi	r25, 0x0F	; 15
   12534:	89 2b       	or	r24, r25
   12536:	09 f4       	brne	.+2      	; 0x1253a <mqtt_callback(char*, unsigned char*, unsigned int)+0x182>
   12538:	51 c1       	rjmp	.+674    	; 0x127dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x424>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
   1253a:	10 92 91 0f 	sts	0x0F91, r1	; 0x800f91 <doc+0x10a>
   1253e:	10 92 90 0f 	sts	0x0F90, r1	; 0x800f90 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
   12542:	88 e8       	ldi	r24, 0x88	; 136
   12544:	9e e0       	ldi	r25, 0x0E	; 14
   12546:	ac 01       	movw	r20, r24
   12548:	60 e9       	ldi	r22, 0x90	; 144
   1254a:	7f e0       	ldi	r23, 0x0F	; 15
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
   1254c:	ce 01       	movw	r24, r28
   1254e:	88 5b       	subi	r24, 0xB8	; 184
   12550:	9f 4f       	sbci	r25, 0xFF	; 255
   12552:	0e 94 cf 56 	call	0xad9e	; 0xad9e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
   12556:	80 e9       	ldi	r24, 0x90	; 144
   12558:	9f e0       	ldi	r25, 0x0F	; 15
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
   1255a:	00 e9       	ldi	r16, 0x90	; 144
   1255c:	1f e0       	ldi	r17, 0x0F	; 15
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
   1255e:	89 2b       	or	r24, r25
   12560:	51 f0       	breq	.+20     	; 0x12576 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
   12562:	80 91 90 0f 	lds	r24, 0x0F90	; 0x800f90 <doc+0x109>
   12566:	90 91 91 0f 	lds	r25, 0x0F91	; 0x800f91 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
   1256a:	02 e9       	ldi	r16, 0x92	; 146
   1256c:	1f e0       	ldi	r17, 0x0F	; 15
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
   1256e:	09 97       	sbiw	r24, 0x09	; 9
   12570:	11 f0       	breq	.+4      	; 0x12576 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
   12572:	10 e0       	ldi	r17, 0x00	; 0
   12574:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
   12576:	6d e3       	ldi	r22, 0x3D	; 61
   12578:	74 e0       	ldi	r23, 0x04	; 4
   1257a:	c8 01       	movw	r24, r16
   1257c:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12580:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
   12582:	89 2b       	or	r24, r25
   12584:	09 f4       	brne	.+2      	; 0x12588 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d0>
   12586:	64 c0       	rjmp	.+200    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   12588:	62 e4       	ldi	r22, 0x42	; 66
   1258a:	74 e0       	ldi	r23, 0x04	; 4
   1258c:	c8 01       	movw	r24, r16
   1258e:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   12592:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
   12594:	89 2b       	or	r24, r25
   12596:	09 f4       	brne	.+2      	; 0x1259a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1e2>
   12598:	5b c0       	rjmp	.+182    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   1259a:	68 e4       	ldi	r22, 0x48	; 72
   1259c:	74 e0       	ldi	r23, 0x04	; 4
   1259e:	c8 01       	movw	r24, r16
   125a0:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   125a4:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
   125a6:	89 2b       	or	r24, r25
   125a8:	09 f4       	brne	.+2      	; 0x125ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1f4>
   125aa:	52 c0       	rjmp	.+164    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   125ac:	6d e4       	ldi	r22, 0x4D	; 77
   125ae:	74 e0       	ldi	r23, 0x04	; 4
   125b0:	c8 01       	movw	r24, r16
   125b2:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
   125b6:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
   125b8:	89 2b       	or	r24, r25
   125ba:	09 f4       	brne	.+2      	; 0x125be <mqtt_callback(char*, unsigned char*, unsigned int)+0x206>
   125bc:	49 c0       	rjmp	.+146    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   125be:	64 e5       	ldi	r22, 0x54	; 84
   125c0:	74 e0       	ldi	r23, 0x04	; 4
   125c2:	c8 01       	movw	r24, r16
   125c4:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2091
   125c8:	00 97       	sbiw	r24, 0x00	; 0
   125ca:	09 f4       	brne	.+2      	; 0x125ce <mqtt_callback(char*, unsigned char*, unsigned int)+0x216>
   125cc:	41 c0       	rjmp	.+130    	; 0x12650 <mqtt_callback(char*, unsigned char*, unsigned int)+0x298>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
   125ce:	0e 94 98 db 	call	0x1b730	; 0x1b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   125d2:	38 2e       	mov	r3, r24
   125d4:	c6 01       	movw	r24, r12
   125d6:	0e 94 98 db 	call	0x1b730	; 0x1b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   125da:	d8 2e       	mov	r13, r24
   125dc:	c3 01       	movw	r24, r6
   125de:	0e 94 98 db 	call	0x1b730	; 0x1b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   125e2:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
   125e4:	6b e5       	ldi	r22, 0x5B	; 91
   125e6:	74 e0       	ldi	r23, 0x04	; 4
   125e8:	c8 01       	movw	r24, r16
   125ea:	0e 94 a6 56 	call	0xad4c	; 0xad4c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.41]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
   125ee:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
   125f0:	00 97       	sbiw	r24, 0x00	; 0
   125f2:	19 f0       	breq	.+6      	; 0x125fa <mqtt_callback(char*, unsigned char*, unsigned int)+0x242>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
   125f4:	0e 94 98 db 	call	0x1b730	; 0x1b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   125f8:	18 2f       	mov	r17, r24
   125fa:	c2 01       	movw	r24, r4
   125fc:	0e 94 98 db 	call	0x1b730	; 0x1b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
   12600:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
   12602:	d7 01       	movw	r26, r14
   12604:	8d 91       	ld	r24, X+
   12606:	9c 91       	ld	r25, X
   12608:	11 97       	sbiw	r26, 0x01	; 1
   1260a:	87 30       	cpi	r24, 0x07	; 7
   1260c:	91 05       	cpc	r25, r1
   1260e:	08 f0       	brcs	.+2      	; 0x12612 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25a>
   12610:	e8 c0       	rjmp	.+464    	; 0x127e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x42a>
   12612:	85 30       	cpi	r24, 0x05	; 5
   12614:	91 05       	cpc	r25, r1
   12616:	08 f0       	brcs	.+2      	; 0x1261a <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
   12618:	f2 c0       	rjmp	.+484    	; 0x127fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x446>
   1261a:	03 97       	sbiw	r24, 0x03	; 3
   1261c:	08 f0       	brcs	.+2      	; 0x12620 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
   1261e:	01 c1       	rjmp	.+514    	; 0x12822 <mqtt_callback(char*, unsigned char*, unsigned int)+0x46a>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12620:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   12622:	29 96       	adiw	r28, 0x09	; 9
   12624:	6f af       	std	Y+63, r22	; 0x3f
   12626:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   12628:	2a 96       	adiw	r28, 0x0a	; 10
   1262a:	0f af       	std	Y+63, r16	; 0x3f
   1262c:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   1262e:	2b 96       	adiw	r28, 0x0b	; 11
   12630:	1f af       	std	Y+63, r17	; 0x3f
   12632:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   12634:	2c 96       	adiw	r28, 0x0c	; 12
   12636:	cf ae       	std	Y+63, r12	; 0x3f
   12638:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   1263a:	2d 96       	adiw	r28, 0x0d	; 13
   1263c:	df ae       	std	Y+63, r13	; 0x3f
   1263e:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   12640:	2e 96       	adiw	r28, 0x0e	; 14
   12642:	3f ae       	std	Y+63, r3	; 0x3f
   12644:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2092
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
   12646:	ce 01       	movw	r24, r28
   12648:	88 5b       	subi	r24, 0xB8	; 184
   1264a:	9f 4f       	sbci	r25, 0xFF	; 255
   1264c:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
   12650:	68 e5       	ldi	r22, 0x58	; 88
   12652:	71 e8       	ldi	r23, 0x81	; 129
   12654:	c5 01       	movw	r24, r10
   12656:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2096
  strcat_P(str1, global_time_ntp);
   1265a:	6c ee       	ldi	r22, 0xEC	; 236
   1265c:	70 e8       	ldi	r23, 0x80	; 128
   1265e:	c5 01       	movw	r24, r10
   12660:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2097
  if (strcmp(str1, topic) == 0)
   12664:	b4 01       	movw	r22, r8
   12666:	c5 01       	movw	r24, r10
   12668:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1266c:	89 2b       	or	r24, r25
   1266e:	e9 f4       	brne	.+58     	; 0x126aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
  {
    mqtt_process_message++;
   12670:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12674:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12678:	01 96       	adiw	r24, 0x01	; 1
   1267a:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1267e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   12682:	81 e0       	ldi	r24, 0x01	; 1
   12684:	90 e0       	ldi	r25, 0x00	; 0
   12686:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
   1268a:	ae 01       	movw	r20, r28
   1268c:	44 5c       	subi	r20, 0xC4	; 196
   1268e:	5e 4f       	sbci	r21, 0xFE	; 254
   12690:	68 2f       	mov	r22, r24
   12692:	ce 01       	movw	r24, r28
   12694:	01 96       	adiw	r24, 0x01	; 1
   12696:	0e 94 dc bc 	call	0x179b8	; 0x179b8 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>
   1269a:	81 30       	cpi	r24, 0x01	; 1
   1269c:	09 f0       	breq	.+2      	; 0x126a0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x2e8>
   1269e:	ee c0       	rjmp	.+476    	; 0x1287c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   126a0:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   126a4:	8d 7f       	andi	r24, 0xFD	; 253
   126a6:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2106
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
   126aa:	68 e5       	ldi	r22, 0x58	; 88
   126ac:	71 e8       	ldi	r23, 0x81	; 129
   126ae:	c5 01       	movw	r24, r10
   126b0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
  strcat_P(str1, global_time_offset);
   126b4:	65 ed       	ldi	r22, 0xD5	; 213
   126b6:	70 e8       	ldi	r23, 0x80	; 128
   126b8:	c5 01       	movw	r24, r10
   126ba:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
  if (strcmp(str1, topic) == 0)
   126be:	b4 01       	movw	r22, r8
   126c0:	c5 01       	movw	r24, r10
   126c2:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   126c6:	89 2b       	or	r24, r25
   126c8:	91 f4       	brne	.+36     	; 0x126ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2110
  {
    mqtt_process_message++;
   126ca:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   126ce:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   126d2:	01 96       	adiw	r24, 0x01	; 1
   126d4:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   126d8:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
    time_set_offset(atoi(my_payload));
   126dc:	85 e0       	ldi	r24, 0x05	; 5
   126de:	99 e0       	ldi	r25, 0x09	; 9
   126e0:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   126e4:	68 2f       	mov	r22, r24
   126e6:	81 e0       	ldi	r24, 0x01	; 1
   126e8:	90 e0       	ldi	r25, 0x00	; 0
   126ea:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
   126ee:	68 e5       	ldi	r22, 0x58	; 88
   126f0:	71 e8       	ldi	r23, 0x81	; 129
   126f2:	c5 01       	movw	r24, r10
   126f4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2116
  strcat(str1, device.nazev);
   126f8:	6f e2       	ldi	r22, 0x2F	; 47
   126fa:	7e e0       	ldi	r23, 0x0E	; 14
   126fc:	c5 01       	movw	r24, r10
   126fe:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
  strcat(str1, "/tds/associate");
   12702:	6f e5       	ldi	r22, 0x5F	; 95
   12704:	74 e0       	ldi	r23, 0x04	; 4
   12706:	c5 01       	movw	r24, r10
   12708:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  if (strcmp(str1, topic) == 0)
   1270c:	b4 01       	movw	r22, r8
   1270e:	c5 01       	movw	r24, r10
   12710:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2055
  char tmp1[32];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
   12714:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2118
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
   12716:	89 2b       	or	r24, r25
   12718:	b1 f4       	brne	.+44     	; 0x12746 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
  {
    mqtt_process_message++;
   1271a:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1271e:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12722:	01 96       	adiw	r24, 0x01	; 1
   12724:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12728:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
    id = atoi(my_payload);
   1272c:	85 e0       	ldi	r24, 0x05	; 5
   1272e:	99 e0       	ldi	r25, 0x09	; 9
   12730:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12734:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
    if (tds_associate(id) == 255)
   12736:	0e 94 88 74 	call	0xe910	; 0xe910 <tds_associate(unsigned char)>
   1273a:	8f 3f       	cpi	r24, 0xFF	; 255
   1273c:	21 f4       	brne	.+8      	; 0x12746 <mqtt_callback(char*, unsigned char*, unsigned int)+0x38e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2123
      log_error(&mqtt_client, "tds/associate full or bad id");
   1273e:	8e e6       	ldi	r24, 0x6E	; 110
   12740:	94 e0       	ldi	r25, 0x04	; 4
   12742:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2129
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
   12746:	68 e5       	ldi	r22, 0x58	; 88
   12748:	71 e8       	ldi	r23, 0x81	; 129
   1274a:	c5 01       	movw	r24, r10
   1274c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
  strcat(str1, device.nazev);
   12750:	6f e2       	ldi	r22, 0x2F	; 47
   12752:	7e e0       	ldi	r23, 0x0E	; 14
   12754:	c5 01       	movw	r24, r10
   12756:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
  strcat(str1, "/tds/set/");
   1275a:	6b e8       	ldi	r22, 0x8B	; 139
   1275c:	74 e0       	ldi	r23, 0x04	; 4
   1275e:	c5 01       	movw	r24, r10
   12760:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12764:	f5 01       	movw	r30, r10
   12766:	01 90       	ld	r0, Z+
   12768:	00 20       	and	r0, r0
   1276a:	e9 f7       	brne	.-6      	; 0x12766 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ae>
   1276c:	31 97       	sbiw	r30, 0x01	; 1
   1276e:	af 01       	movw	r20, r30
   12770:	4a 19       	sub	r20, r10
   12772:	5b 09       	sbc	r21, r11
   12774:	b4 01       	movw	r22, r8
   12776:	c5 01       	movw	r24, r10
   12778:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   1277c:	89 2b       	or	r24, r25
   1277e:	09 f0       	breq	.+2      	; 0x12782 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ca>
   12780:	01 c1       	rjmp	.+514    	; 0x12984 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2134
  {
    mqtt_process_message++;
   12782:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12786:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1278a:	01 96       	adiw	r24, 0x01	; 1
   1278c:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12790:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12794:	f5 01       	movw	r30, r10
   12796:	01 90       	ld	r0, Z+
   12798:	00 20       	and	r0, r0
   1279a:	e9 f7       	brne	.-6      	; 0x12796 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3de>
   1279c:	31 97       	sbiw	r30, 0x01	; 1
   1279e:	ea 19       	sub	r30, r10
   127a0:	fb 09       	sbc	r31, r11
   127a2:	9e 2f       	mov	r25, r30
   127a4:	4e 2f       	mov	r20, r30
   127a6:	84 2f       	mov	r24, r20
   127a8:	89 1b       	sub	r24, r25
   127aa:	24 2f       	mov	r18, r20
   127ac:	30 e0       	ldi	r19, 0x00	; 0
   127ae:	d4 01       	movw	r26, r8
   127b0:	0d 90       	ld	r0, X+
   127b2:	00 20       	and	r0, r0
   127b4:	e9 f7       	brne	.-6      	; 0x127b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f8>
   127b6:	11 97       	sbiw	r26, 0x01	; 1
   127b8:	a8 19       	sub	r26, r8
   127ba:	b9 09       	sbc	r27, r9
   127bc:	2a 17       	cp	r18, r26
   127be:	3b 07       	cpc	r19, r27
   127c0:	08 f0       	brcs	.+2      	; 0x127c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x40c>
   127c2:	60 c0       	rjmp	.+192    	; 0x12884 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2138
    {
      str1[cnt] = topic[f];
   127c4:	d5 01       	movw	r26, r10
   127c6:	a8 0f       	add	r26, r24
   127c8:	b1 1d       	adc	r27, r1
   127ca:	28 0d       	add	r18, r8
   127cc:	39 1d       	adc	r19, r9
   127ce:	f9 01       	movw	r30, r18
   127d0:	80 81       	ld	r24, Z
   127d2:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2139
      str1[cnt + 1] = 0;
   127d4:	11 96       	adiw	r26, 0x01	; 1
   127d6:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2136
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   127d8:	4f 5f       	subi	r20, 0xFF	; 255
   127da:	e5 cf       	rjmp	.-54     	; 0x127a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x3ee>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
   127dc:	80 e9       	ldi	r24, 0x90	; 144
   127de:	9f e0       	ldi	r25, 0x0F	; 15
   127e0:	b2 ce       	rjmp	.-668    	; 0x12546 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   127e2:	87 30       	cpi	r24, 0x07	; 7
   127e4:	91 05       	cpc	r25, r1
   127e6:	b1 f0       	breq	.+44     	; 0x12814 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45c>
   127e8:	0a 97       	sbiw	r24, 0x0a	; 10
   127ea:	09 f0       	breq	.+2      	; 0x127ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x436>
   127ec:	19 cf       	rjmp	.-462    	; 0x12620 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   127ee:	f7 01       	movw	r30, r14
   127f0:	62 81       	ldd	r22, Z+2	; 0x02
   127f2:	73 81       	ldd	r23, Z+3	; 0x03
   127f4:	84 81       	ldd	r24, Z+4	; 0x04
   127f6:	95 81       	ldd	r25, Z+5	; 0x05
   127f8:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
   127fc:	03 c0       	rjmp	.+6      	; 0x12804 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   127fe:	f7 01       	movw	r30, r14
   12800:	62 81       	ldd	r22, Z+2	; 0x02
   12802:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   12804:	60 3d       	cpi	r22, 0xD0	; 208
   12806:	f7 e0       	ldi	r31, 0x07	; 7
   12808:	7f 07       	cpc	r23, r31
   1280a:	08 f4       	brcc	.+2      	; 0x1280e <mqtt_callback(char*, unsigned char*, unsigned int)+0x456>
   1280c:	0a cf       	rjmp	.-492    	; 0x12622 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   1280e:	60 5d       	subi	r22, 0xD0	; 208
   12810:	77 40       	sbci	r23, 0x07	; 7
   12812:	07 cf       	rjmp	.-498    	; 0x12622 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   12814:	12 96       	adiw	r26, 0x02	; 2
   12816:	6d 91       	ld	r22, X+
   12818:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1281a:	71 95       	neg	r23
   1281c:	61 95       	neg	r22
   1281e:	71 09       	sbc	r23, r1
   12820:	f1 cf       	rjmp	.-30     	; 0x12804 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   12822:	12 96       	adiw	r26, 0x02	; 2
   12824:	ed 91       	ld	r30, X+
   12826:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   12828:	30 97       	sbiw	r30, 0x00	; 0
   1282a:	09 f4       	brne	.+2      	; 0x1282e <mqtt_callback(char*, unsigned char*, unsigned int)+0x476>
   1282c:	f9 ce       	rjmp	.-526    	; 0x12620 <mqtt_callback(char*, unsigned char*, unsigned int)+0x268>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1282e:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
   12830:	61 e0       	ldi	r22, 0x01	; 1
   12832:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
   12834:	84 37       	cpi	r24, 0x74	; 116
   12836:	09 f4       	brne	.+2      	; 0x1283a <mqtt_callback(char*, unsigned char*, unsigned int)+0x482>
   12838:	f4 ce       	rjmp	.-536    	; 0x12622 <mqtt_callback(char*, unsigned char*, unsigned int)+0x26a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1283a:	8b 32       	cpi	r24, 0x2B	; 43
   1283c:	c9 f0       	breq	.+50     	; 0x12870 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4b8>
   1283e:	8d 32       	cpi	r24, 0x2D	; 45
   12840:	c1 f4       	brne	.+48     	; 0x12872 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   12842:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   12844:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
   12846:	70 e0       	ldi	r23, 0x00	; 0
   12848:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1284a:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1284c:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1284e:	20 ed       	ldi	r18, 0xD0	; 208
   12850:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   12852:	2a 30       	cpi	r18, 0x0A	; 10
   12854:	80 f4       	brcc	.+32     	; 0x12876 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4be>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   12856:	46 9f       	mul	r20, r22
   12858:	90 01       	movw	r18, r0
   1285a:	47 9f       	mul	r20, r23
   1285c:	30 0d       	add	r19, r0
   1285e:	11 24       	eor	r1, r1
   12860:	b9 01       	movw	r22, r18
   12862:	60 53       	subi	r22, 0x30	; 48
   12864:	71 09       	sbc	r23, r1
   12866:	69 0f       	add	r22, r25
   12868:	71 1d       	adc	r23, r1
   1286a:	97 fd       	sbrc	r25, 7
   1286c:	7a 95       	dec	r23
   1286e:	ee cf       	rjmp	.-36     	; 0x1284c <mqtt_callback(char*, unsigned char*, unsigned int)+0x494>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   12870:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   12872:	80 e0       	ldi	r24, 0x00	; 0
   12874:	e8 cf       	rjmp	.-48     	; 0x12846 <mqtt_callback(char*, unsigned char*, unsigned int)+0x48e>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   12876:	81 11       	cpse	r24, r1
   12878:	d0 cf       	rjmp	.-96     	; 0x1281a <mqtt_callback(char*, unsigned char*, unsigned int)+0x462>
   1287a:	c4 cf       	rjmp	.-120    	; 0x12804 <mqtt_callback(char*, unsigned char*, unsigned int)+0x44c>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset(), &ted) == 1)
      selftest_clear_0(SELFTEST_ERR_NTP);
    else
      selftest_set_0(SELFTEST_ERR_NTP);
   1287c:	81 e0       	ldi	r24, 0x01	; 1
   1287e:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
   12882:	13 cf       	rjmp	.-474    	; 0x126aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x2f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12884:	60 e9       	ldi	r22, 0x90	; 144
   12886:	75 e0       	ldi	r23, 0x05	; 5
   12888:	c5 01       	movw	r24, r10
   1288a:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   1288e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2142
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12890:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
   12892:	e8 e4       	ldi	r30, 0x48	; 72
   12894:	ce 2e       	mov	r12, r30
   12896:	d1 2c       	mov	r13, r1
   12898:	cc 0e       	add	r12, r28
   1289a:	dd 1e       	adc	r13, r29
   1289c:	fc e0       	ldi	r31, 0x0C	; 12
   1289e:	cf 0e       	add	r12, r31
   128a0:	d1 1c       	adc	r13, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2144
    pch = strtok (str1, "/");
    while (pch != NULL)
   128a2:	01 15       	cp	r16, r1
   128a4:	11 05       	cpc	r17, r1
   128a6:	09 f4       	brne	.+2      	; 0x128aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x4f2>
   128a8:	6d c0       	rjmp	.+218    	; 0x12984 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2146
    {
      if (cnt == 0) id = atoi(pch);
   128aa:	61 10       	cpse	r6, r1
   128ac:	0d c0       	rjmp	.+26     	; 0x128c8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x510>
   128ae:	c8 01       	movw	r24, r16
   128b0:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   128b4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
      if (id < HW_ONEWIRE_MAXROMS)
   128b6:	25 e0       	ldi	r18, 0x05	; 5
   128b8:	28 17       	cp	r18, r24
   128ba:	08 f0       	brcs	.+2      	; 0x128be <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
   128bc:	5a c0       	rjmp	.+180    	; 0x12972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2155
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
   128be:	8c ed       	ldi	r24, 0xDC	; 220
   128c0:	94 e0       	ldi	r25, 0x04	; 4
   128c2:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   128c6:	55 c0       	rjmp	.+170    	; 0x12972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2147
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
   128c8:	85 e0       	ldi	r24, 0x05	; 5
   128ca:	87 15       	cp	r24, r7
   128cc:	c0 f3       	brcs	.-16     	; 0x128be <mqtt_callback(char*, unsigned char*, unsigned int)+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2149
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
   128ce:	91 e0       	ldi	r25, 0x01	; 1
   128d0:	69 12       	cpse	r6, r25
   128d2:	4f c0       	rjmp	.+158    	; 0x12972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   128d4:	6a ee       	ldi	r22, 0xEA	; 234
   128d6:	73 e0       	ldi	r23, 0x03	; 3
   128d8:	c8 01       	movw	r24, r16
   128da:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   128de:	89 2b       	or	r24, r25
   128e0:	89 f4       	brne	.+34     	; 0x12904 <mqtt_callback(char*, unsigned char*, unsigned int)+0x54c>
tds_set_name():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   128e2:	be 01       	movw	r22, r28
   128e4:	68 5b       	subi	r22, 0xB8	; 184
   128e6:	7f 4f       	sbci	r23, 0xFF	; 255
   128e8:	87 2d       	mov	r24, r7
   128ea:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
   128ee:	65 e0       	ldi	r22, 0x05	; 5
   128f0:	79 e0       	ldi	r23, 0x09	; 9
   128f2:	c6 01       	movw	r24, r12
   128f4:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
   128f8:	be 01       	movw	r22, r28
   128fa:	68 5b       	subi	r22, 0xB8	; 184
   128fc:	7f 4f       	sbci	r23, 0xFF	; 255
   128fe:	87 2d       	mov	r24, r7
   12900:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2150
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
   12904:	69 e1       	ldi	r22, 0x19	; 25
   12906:	78 e0       	ldi	r23, 0x08	; 8
   12908:	c8 01       	movw	r24, r16
   1290a:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1290e:	89 2b       	or	r24, r25
   12910:	a9 f4       	brne	.+42     	; 0x1293c <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
   12912:	85 e0       	ldi	r24, 0x05	; 5
   12914:	99 e0       	ldi	r25, 0x09	; 9
   12916:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1291a:	7c 01       	movw	r14, r24
tds_set_offset():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   1291c:	be 01       	movw	r22, r28
   1291e:	68 5b       	subi	r22, 0xB8	; 184
   12920:	7f 4f       	sbci	r23, 0xFF	; 255
   12922:	87 2d       	mov	r24, r7
   12924:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
   12928:	64 96       	adiw	r28, 0x14	; 20
   1292a:	ff ae       	std	Y+63, r15	; 0x3f
   1292c:	ee ae       	std	Y+62, r14	; 0x3e
   1292e:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
   12930:	be 01       	movw	r22, r28
   12932:	68 5b       	subi	r22, 0xB8	; 184
   12934:	7f 4f       	sbci	r23, 0xFF	; 255
   12936:	87 2d       	mov	r24, r7
   12938:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
   1293c:	60 e9       	ldi	r22, 0x90	; 144
   1293e:	76 e0       	ldi	r23, 0x06	; 6
   12940:	c8 01       	movw	r24, r16
   12942:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12946:	89 2b       	or	r24, r25
   12948:	a1 f4       	brne	.+40     	; 0x12972 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ba>
   1294a:	85 e0       	ldi	r24, 0x05	; 5
   1294c:	99 e0       	ldi	r25, 0x09	; 9
   1294e:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12952:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
   12954:	be 01       	movw	r22, r28
   12956:	68 5b       	subi	r22, 0xB8	; 184
   12958:	7f 4f       	sbci	r23, 0xFF	; 255
   1295a:	87 2d       	mov	r24, r7
   1295c:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2151
   12960:	6d 96       	adiw	r28, 0x1d	; 29
   12962:	1f af       	std	Y+63, r17	; 0x3f
   12964:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
   12966:	be 01       	movw	r22, r28
   12968:	68 5b       	subi	r22, 0xB8	; 184
   1296a:	7f 4f       	sbci	r23, 0xFF	; 255
   1296c:	87 2d       	mov	r24, r7
   1296e:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2157
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
   12972:	60 e9       	ldi	r22, 0x90	; 144
   12974:	75 e0       	ldi	r23, 0x05	; 5
   12976:	90 e0       	ldi	r25, 0x00	; 0
   12978:	80 e0       	ldi	r24, 0x00	; 0
   1297a:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   1297e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2158
      cnt++;
   12980:	63 94       	inc	r6
   12982:	8f cf       	rjmp	.-226    	; 0x128a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x4ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
   12984:	68 e5       	ldi	r22, 0x58	; 88
   12986:	71 e8       	ldi	r23, 0x81	; 129
   12988:	c5 01       	movw	r24, r10
   1298a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
  strcat(str1, device.nazev);
   1298e:	6f e2       	ldi	r22, 0x2F	; 47
   12990:	7e e0       	ldi	r23, 0x0E	; 14
   12992:	c5 01       	movw	r24, r10
   12994:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
  strcat(str1, "/tds/clear");
   12998:	65 e9       	ldi	r22, 0x95	; 149
   1299a:	74 e0       	ldi	r23, 0x04	; 4
   1299c:	c5 01       	movw	r24, r10
   1299e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
  if (strncmp(str1, topic, strlen(str1)) == 0)
   129a2:	f5 01       	movw	r30, r10
   129a4:	01 90       	ld	r0, Z+
   129a6:	00 20       	and	r0, r0
   129a8:	e9 f7       	brne	.-6      	; 0x129a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ec>
   129aa:	31 97       	sbiw	r30, 0x01	; 1
   129ac:	af 01       	movw	r20, r30
   129ae:	4a 19       	sub	r20, r10
   129b0:	5b 09       	sbc	r21, r11
   129b2:	b4 01       	movw	r22, r8
   129b4:	c5 01       	movw	r24, r10
   129b6:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   129ba:	89 2b       	or	r24, r25
   129bc:	a1 f4       	brne	.+40     	; 0x129e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
  {
    mqtt_process_message++;
   129be:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   129c2:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   129c6:	01 96       	adiw	r24, 0x01	; 1
   129c8:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   129cc:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
    id = atoi(my_payload);
   129d0:	85 e0       	ldi	r24, 0x05	; 5
   129d2:	99 e0       	ldi	r25, 0x09	; 9
   129d4:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   129d8:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2170
    if (id < HW_ONEWIRE_MAXROMS)
   129da:	a5 e0       	ldi	r26, 0x05	; 5
   129dc:	a8 17       	cp	r26, r24
   129de:	08 f4       	brcc	.+2      	; 0x129e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62a>
   129e0:	83 c0       	rjmp	.+262    	; 0x12ae8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x730>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171
      tds_set_clear(id);
   129e2:	0e 94 5f 75 	call	0xeabe	; 0xeabe <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2180
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///
  ///
  //// thermctl-in/XXXXX/rtds-control/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
   129e6:	68 e5       	ldi	r22, 0x58	; 88
   129e8:	71 e8       	ldi	r23, 0x81	; 129
   129ea:	c5 01       	movw	r24, r10
   129ec:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2181
  strcat(str1, device.nazev);
   129f0:	6f e2       	ldi	r22, 0x2F	; 47
   129f2:	7e e0       	ldi	r23, 0x0E	; 14
   129f4:	c5 01       	movw	r24, r10
   129f6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
  strcat(str1, "/rtds-control/register");
   129fa:	61 eb       	ldi	r22, 0xB1	; 177
   129fc:	74 e0       	ldi	r23, 0x04	; 4
   129fe:	c5 01       	movw	r24, r10
   12a00:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2183
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12a04:	f5 01       	movw	r30, r10
   12a06:	01 90       	ld	r0, Z+
   12a08:	00 20       	and	r0, r0
   12a0a:	e9 f7       	brne	.-6      	; 0x12a06 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64e>
   12a0c:	31 97       	sbiw	r30, 0x01	; 1
   12a0e:	af 01       	movw	r20, r30
   12a10:	4a 19       	sub	r20, r10
   12a12:	5b 09       	sbc	r21, r11
   12a14:	b4 01       	movw	r22, r8
   12a16:	c5 01       	movw	r24, r10
   12a18:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12a1c:	89 2b       	or	r24, r25
   12a1e:	d1 f4       	brne	.+52     	; 0x12a54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
  {
    mqtt_process_message++;
   12a20:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12a24:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12a28:	01 96       	adiw	r24, 0x01	; 1
   12a2a:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12a2e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2186
    if (remote_tds_name_exist(my_payload) == 255)
   12a32:	85 e0       	ldi	r24, 0x05	; 5
   12a34:	99 e0       	ldi	r25, 0x09	; 9
   12a36:	0e 94 29 7d 	call	0xfa52	; 0xfa52 <remote_tds_name_exist(char*)>
   12a3a:	8f 3f       	cpi	r24, 0xFF	; 255
   12a3c:	59 f4       	brne	.+22     	; 0x12a54 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
    {
      id = remote_tds_find_free();
   12a3e:	0e 94 a9 78 	call	0xf152	; 0xf152 <remote_tds_find_free()>
   12a42:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2189
      remote_tds_set_complete(id, 1, my_payload);
   12a44:	45 e0       	ldi	r20, 0x05	; 5
   12a46:	59 e0       	ldi	r21, 0x09	; 9
   12a48:	61 e0       	ldi	r22, 0x01	; 1
   12a4a:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2190
      remote_tds_subscibe_topic(id);
   12a4e:	87 2d       	mov	r24, r7
   12a50:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2196
    }
    ///TODO - vratit ze jiz existuje
  }
  ///
  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
   12a54:	68 e5       	ldi	r22, 0x58	; 88
   12a56:	71 e8       	ldi	r23, 0x81	; 129
   12a58:	c5 01       	movw	r24, r10
   12a5a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2197
  strcat(str1, device.nazev);
   12a5e:	6f e2       	ldi	r22, 0x2F	; 47
   12a60:	7e e0       	ldi	r23, 0x0E	; 14
   12a62:	c5 01       	movw	r24, r10
   12a64:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2198
  strcat(str1, "/rtds-control/set/");
   12a68:	68 ec       	ldi	r22, 0xC8	; 200
   12a6a:	74 e0       	ldi	r23, 0x04	; 4
   12a6c:	c5 01       	movw	r24, r10
   12a6e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2199
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12a72:	f5 01       	movw	r30, r10
   12a74:	01 90       	ld	r0, Z+
   12a76:	00 20       	and	r0, r0
   12a78:	e9 f7       	brne	.-6      	; 0x12a74 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6bc>
   12a7a:	31 97       	sbiw	r30, 0x01	; 1
   12a7c:	af 01       	movw	r20, r30
   12a7e:	4a 19       	sub	r20, r10
   12a80:	5b 09       	sbc	r21, r11
   12a82:	b4 01       	movw	r22, r8
   12a84:	c5 01       	movw	r24, r10
   12a86:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12a8a:	89 2b       	or	r24, r25
   12a8c:	09 f0       	breq	.+2      	; 0x12a90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6d8>
   12a8e:	6a c0       	rjmp	.+212    	; 0x12b64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2201
  {
    mqtt_process_message++;
   12a90:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12a94:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12a98:	01 96       	adiw	r24, 0x01	; 1
   12a9a:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12a9e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12aa2:	f5 01       	movw	r30, r10
   12aa4:	01 90       	ld	r0, Z+
   12aa6:	00 20       	and	r0, r0
   12aa8:	e9 f7       	brne	.-6      	; 0x12aa4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6ec>
   12aaa:	31 97       	sbiw	r30, 0x01	; 1
   12aac:	ea 19       	sub	r30, r10
   12aae:	fb 09       	sbc	r31, r11
   12ab0:	9e 2f       	mov	r25, r30
   12ab2:	4e 2f       	mov	r20, r30
   12ab4:	84 2f       	mov	r24, r20
   12ab6:	89 1b       	sub	r24, r25
   12ab8:	24 2f       	mov	r18, r20
   12aba:	30 e0       	ldi	r19, 0x00	; 0
   12abc:	d4 01       	movw	r26, r8
   12abe:	0d 90       	ld	r0, X+
   12ac0:	00 20       	and	r0, r0
   12ac2:	e9 f7       	brne	.-6      	; 0x12abe <mqtt_callback(char*, unsigned char*, unsigned int)+0x706>
   12ac4:	11 97       	sbiw	r26, 0x01	; 1
   12ac6:	a8 19       	sub	r26, r8
   12ac8:	b9 09       	sbc	r27, r9
   12aca:	2a 17       	cp	r18, r26
   12acc:	3b 07       	cpc	r19, r27
   12ace:	88 f4       	brcc	.+34     	; 0x12af2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x73a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2205
    {
      str1[cnt] = topic[f];
   12ad0:	d5 01       	movw	r26, r10
   12ad2:	a8 0f       	add	r26, r24
   12ad4:	b1 1d       	adc	r27, r1
   12ad6:	28 0d       	add	r18, r8
   12ad8:	39 1d       	adc	r19, r9
   12ada:	f9 01       	movw	r30, r18
   12adc:	80 81       	ld	r24, Z
   12ade:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
      str1[cnt + 1] = 0;
   12ae0:	11 96       	adiw	r26, 0x01	; 1
   12ae2:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2203
  strcat(str1, "/rtds-control/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12ae4:	4f 5f       	subi	r20, 0xFF	; 255
   12ae6:	e6 cf       	rjmp	.-52     	; 0x12ab4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2173
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
   12ae8:	80 ea       	ldi	r24, 0xA0	; 160
   12aea:	94 e0       	ldi	r25, 0x04	; 4
   12aec:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   12af0:	7a cf       	rjmp	.-268    	; 0x129e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x62e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2210
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12af2:	60 e9       	ldi	r22, 0x90	; 144
   12af4:	75 e0       	ldi	r23, 0x05	; 5
   12af6:	c5 01       	movw	r24, r10
   12af8:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12afc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2211
    pch = strtok (str1, "/");
    while (pch != NULL)
   12afe:	00 97       	sbiw	r24, 0x00	; 0
   12b00:	89 f1       	breq	.+98     	; 0x12b64 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2213
    {
      if (cnt == 0) id = atoi(pch);
   12b02:	11 11       	cpse	r17, r1
   12b04:	0b c0       	rjmp	.+22     	; 0x12b1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x764>
   12b06:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12b0a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2227
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
   12b0c:	60 e9       	ldi	r22, 0x90	; 144
   12b0e:	75 e0       	ldi	r23, 0x05	; 5
   12b10:	90 e0       	ldi	r25, 0x00	; 0
   12b12:	80 e0       	ldi	r24, 0x00	; 0
   12b14:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2228
      cnt++;
   12b18:	1f 5f       	subi	r17, 0xFF	; 255
   12b1a:	f1 cf       	rjmp	.-30     	; 0x12afe <mqtt_callback(char*, unsigned char*, unsigned int)+0x746>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2214
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
   12b1c:	11 30       	cpi	r17, 0x01	; 1
   12b1e:	b1 f7       	brne	.-20     	; 0x12b0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
   12b20:	6a ee       	ldi	r22, 0xEA	; 234
   12b22:	73 e0       	ldi	r23, 0x03	; 3
   12b24:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12b28:	89 2b       	or	r24, r25
   12b2a:	81 f7       	brne	.-32     	; 0x12b0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
      {
        remote_tds_get_active(id, &active);
   12b2c:	be 01       	movw	r22, r28
   12b2e:	6a 5b       	subi	r22, 0xBA	; 186
   12b30:	7e 4f       	sbci	r23, 0xFE	; 254
   12b32:	87 2d       	mov	r24, r7
   12b34:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
        if (active == 0)
   12b38:	ca 5b       	subi	r28, 0xBA	; 186
   12b3a:	de 4f       	sbci	r29, 0xFE	; 254
   12b3c:	88 81       	ld	r24, Y
   12b3e:	c6 54       	subi	r28, 0x46	; 70
   12b40:	d1 40       	sbci	r29, 0x01	; 1
   12b42:	81 11       	cpse	r24, r1
   12b44:	0a c0       	rjmp	.+20     	; 0x12b5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x7a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2219
        {
          remote_tds_set_complete(id, 1, my_payload);
   12b46:	45 e0       	ldi	r20, 0x05	; 5
   12b48:	59 e0       	ldi	r21, 0x09	; 9
   12b4a:	61 e0       	ldi	r22, 0x01	; 1
   12b4c:	87 2d       	mov	r24, r7
   12b4e:	0e 94 7c 6f 	call	0xdef8	; 0xdef8 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
          remote_tds_subscibe_topic(id);
   12b52:	87 2d       	mov	r24, r7
   12b54:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <remote_tds_subscibe_topic(unsigned char)>
   12b58:	d9 cf       	rjmp	.-78     	; 0x12b0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2224
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
   12b5a:	8b ed       	ldi	r24, 0xDB	; 219
   12b5c:	94 e0       	ldi	r25, 0x04	; 4
   12b5e:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   12b62:	d4 cf       	rjmp	.-88     	; 0x12b0c <mqtt_callback(char*, unsigned char*, unsigned int)+0x754>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2233
      cnt++;
    }
  }
  ///
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
   12b64:	68 e5       	ldi	r22, 0x58	; 88
   12b66:	71 e8       	ldi	r23, 0x81	; 129
   12b68:	c5 01       	movw	r24, r10
   12b6a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2234
  strcat(str1, device.nazev);
   12b6e:	6f e2       	ldi	r22, 0x2F	; 47
   12b70:	7e e0       	ldi	r23, 0x0E	; 14
   12b72:	c5 01       	movw	r24, r10
   12b74:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
  strcat(str1, "/rtds-control/clear");
   12b78:	6b ee       	ldi	r22, 0xEB	; 235
   12b7a:	74 e0       	ldi	r23, 0x04	; 4
   12b7c:	c5 01       	movw	r24, r10
   12b7e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2236
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12b82:	f5 01       	movw	r30, r10
   12b84:	01 90       	ld	r0, Z+
   12b86:	00 20       	and	r0, r0
   12b88:	e9 f7       	brne	.-6      	; 0x12b84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7cc>
   12b8a:	31 97       	sbiw	r30, 0x01	; 1
   12b8c:	af 01       	movw	r20, r30
   12b8e:	4a 19       	sub	r20, r10
   12b90:	5b 09       	sbc	r21, r11
   12b92:	b4 01       	movw	r22, r8
   12b94:	c5 01       	movw	r24, r10
   12b96:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12b9a:	89 2b       	or	r24, r25
   12b9c:	09 f0       	breq	.+2      	; 0x12ba0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7e8>
   12b9e:	74 c0       	rjmp	.+232    	; 0x12c88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  {
    mqtt_process_message++;
   12ba0:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12ba4:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12ba8:	01 96       	adiw	r24, 0x01	; 1
   12baa:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12bae:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2239
    id = atoi(my_payload);
   12bb2:	85 e0       	ldi	r24, 0x05	; 5
   12bb4:	99 e0       	ldi	r25, 0x09	; 9
   12bb6:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12bba:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1861
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
   12bbc:	c8 5f       	subi	r28, 0xF8	; 248
   12bbe:	de 4f       	sbci	r29, 0xFE	; 254
   12bc0:	18 82       	st	Y, r1
   12bc2:	c8 50       	subi	r28, 0x08	; 8
   12bc4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
  remote_tds_get_complete(idx, &active, tmp1);
   12bc6:	ae 01       	movw	r20, r28
   12bc8:	48 57       	subi	r20, 0x78	; 120
   12bca:	5f 4f       	sbci	r21, 0xFF	; 255
   12bcc:	be 01       	movw	r22, r28
   12bce:	68 5f       	subi	r22, 0xF8	; 248
   12bd0:	7e 4f       	sbci	r23, 0xFE	; 254
   12bd2:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
  if (active == 1)
   12bd6:	c8 5f       	subi	r28, 0xF8	; 248
   12bd8:	de 4f       	sbci	r29, 0xFE	; 254
   12bda:	88 81       	ld	r24, Y
   12bdc:	c8 50       	subi	r28, 0x08	; 8
   12bde:	d1 40       	sbci	r29, 0x01	; 1
   12be0:	81 30       	cpi	r24, 0x01	; 1
   12be2:	09 f0       	breq	.+2      	; 0x12be6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82e>
   12be4:	4e c0       	rjmp	.+156    	; 0x12c82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
  {
    strcpy_P(tmp2, new_text_slash_rtds_slash);
   12be6:	8e 01       	movw	r16, r28
   12be8:	08 5b       	subi	r16, 0xB8	; 184
   12bea:	1f 4f       	sbci	r17, 0xFF	; 255
   12bec:	6e ec       	ldi	r22, 0xCE	; 206
   12bee:	70 e8       	ldi	r23, 0x80	; 128
   12bf0:	c8 01       	movw	r24, r16
   12bf2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
    strcat(tmp2, tmp1);
   12bf6:	be 01       	movw	r22, r28
   12bf8:	68 57       	subi	r22, 0x78	; 120
   12bfa:	7f 4f       	sbci	r23, 0xFF	; 255
   12bfc:	c8 01       	movw	r24, r16
   12bfe:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
    strcat(tmp2, "/#");
   12c02:	60 ef       	ldi	r22, 0xF0	; 240
   12c04:	76 e0       	ldi	r23, 0x06	; 6
   12c06:	c8 01       	movw	r24, r16
   12c08:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   12c0c:	d8 01       	movw	r26, r16
   12c0e:	0d 90       	ld	r0, X+
   12c10:	00 20       	and	r0, r0
   12c12:	e9 f7       	brne	.-6      	; 0x12c0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x856>
   12c14:	cd 01       	movw	r24, r26
   12c16:	80 1b       	sub	r24, r16
   12c18:	91 0b       	sbc	r25, r17
   12c1a:	08 96       	adiw	r24, 0x08	; 8
   12c1c:	81 30       	cpi	r24, 0x01	; 1
   12c1e:	92 40       	sbci	r25, 0x02	; 2
   12c20:	80 f5       	brcc	.+96     	; 0x12c82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
   12c22:	8f e2       	ldi	r24, 0x2F	; 47
   12c24:	90 e1       	ldi	r25, 0x10	; 16
   12c26:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   12c2a:	88 23       	and	r24, r24
   12c2c:	51 f1       	breq	.+84     	; 0x12c82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
   12c2e:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   12c32:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   12c36:	01 96       	adiw	r24, 0x01	; 1
   12c38:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   12c3c:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
   12c40:	89 2b       	or	r24, r25
   12c42:	31 f4       	brne	.+12     	; 0x12c50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x898>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
   12c44:	81 e0       	ldi	r24, 0x01	; 1
   12c46:	90 e0       	ldi	r25, 0x00	; 0
   12c48:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   12c4c:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
   12c50:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   12c54:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   12c58:	90 93 36 10 	sts	0x1036, r25	; 0x801036 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
   12c5c:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
   12c60:	47 e0       	ldi	r20, 0x07	; 7
   12c62:	50 e0       	ldi	r21, 0x00	; 0
   12c64:	61 e3       	ldi	r22, 0x31	; 49
   12c66:	70 e1       	ldi	r23, 0x10	; 16
   12c68:	c8 01       	movw	r24, r16
   12c6a:	0e 94 ae b7 	call	0x16f5c	; 0x16f5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12c6e:	9c 01       	movw	r18, r24
   12c70:	25 50       	subi	r18, 0x05	; 5
   12c72:	31 09       	sbc	r19, r1
   12c74:	41 e3       	ldi	r20, 0x31	; 49
   12c76:	50 e1       	ldi	r21, 0x10	; 16
   12c78:	62 ea       	ldi	r22, 0xA2	; 162
   12c7a:	8f e2       	ldi	r24, 0x2F	; 47
   12c7c:	90 e1       	ldi	r25, 0x10	; 16
   12c7e:	0e 94 02 69 	call	0xd204	; 0xd204 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2242
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
   12c82:	87 2d       	mov	r24, r7
   12c84:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2246
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
   12c88:	68 e5       	ldi	r22, 0x58	; 88
   12c8a:	71 e8       	ldi	r23, 0x81	; 129
   12c8c:	c5 01       	movw	r24, r10
   12c8e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
  strcat(str1, device.nazev);
   12c92:	6f e2       	ldi	r22, 0x2F	; 47
   12c94:	7e e0       	ldi	r23, 0x0E	; 14
   12c96:	c5 01       	movw	r24, r10
   12c98:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2248
  strcat(str1, "/rtds-control/get");
   12c9c:	6f ef       	ldi	r22, 0xFF	; 255
   12c9e:	74 e0       	ldi	r23, 0x04	; 4
   12ca0:	c5 01       	movw	r24, r10
   12ca2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2249
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12ca6:	f5 01       	movw	r30, r10
   12ca8:	01 90       	ld	r0, Z+
   12caa:	00 20       	and	r0, r0
   12cac:	e9 f7       	brne	.-6      	; 0x12ca8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f0>
   12cae:	31 97       	sbiw	r30, 0x01	; 1
   12cb0:	af 01       	movw	r20, r30
   12cb2:	4a 19       	sub	r20, r10
   12cb4:	5b 09       	sbc	r21, r11
   12cb6:	b4 01       	movw	r22, r8
   12cb8:	c5 01       	movw	r24, r10
   12cba:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12cbe:	89 2b       	or	r24, r25
   12cc0:	11 f4       	brne	.+4      	; 0x12cc6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x90e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2251
  {
    send_mqtt_remote_tds_status();
   12cc2:	0e 94 93 7c 	call	0xf926	; 0xf926 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2255
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
   12cc6:	6e ec       	ldi	r22, 0xCE	; 206
   12cc8:	70 e8       	ldi	r23, 0x80	; 128
   12cca:	c5 01       	movw	r24, r10
   12ccc:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12cd0:	f5 01       	movw	r30, r10
   12cd2:	01 90       	ld	r0, Z+
   12cd4:	00 20       	and	r0, r0
   12cd6:	e9 f7       	brne	.-6      	; 0x12cd2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x91a>
   12cd8:	31 97       	sbiw	r30, 0x01	; 1
   12cda:	af 01       	movw	r20, r30
   12cdc:	4a 19       	sub	r20, r10
   12cde:	5b 09       	sbc	r21, r11
   12ce0:	b4 01       	movw	r22, r8
   12ce2:	c5 01       	movw	r24, r10
   12ce4:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12ce8:	89 2b       	or	r24, r25
   12cea:	09 f0       	breq	.+2      	; 0x12cee <mqtt_callback(char*, unsigned char*, unsigned int)+0x936>
   12cec:	9a c0       	rjmp	.+308    	; 0x12e22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2258
  {
    mqtt_process_message++;
   12cee:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12cf2:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12cf6:	01 96       	adiw	r24, 0x01	; 1
   12cf8:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12cfc:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12d00:	f5 01       	movw	r30, r10
   12d02:	01 90       	ld	r0, Z+
   12d04:	00 20       	and	r0, r0
   12d06:	e9 f7       	brne	.-6      	; 0x12d02 <mqtt_callback(char*, unsigned char*, unsigned int)+0x94a>
   12d08:	31 97       	sbiw	r30, 0x01	; 1
   12d0a:	ea 19       	sub	r30, r10
   12d0c:	fb 09       	sbc	r31, r11
   12d0e:	9e 2f       	mov	r25, r30
   12d10:	4e 2f       	mov	r20, r30
   12d12:	84 2f       	mov	r24, r20
   12d14:	89 1b       	sub	r24, r25
   12d16:	24 2f       	mov	r18, r20
   12d18:	30 e0       	ldi	r19, 0x00	; 0
   12d1a:	d4 01       	movw	r26, r8
   12d1c:	0d 90       	ld	r0, X+
   12d1e:	00 20       	and	r0, r0
   12d20:	e9 f7       	brne	.-6      	; 0x12d1c <mqtt_callback(char*, unsigned char*, unsigned int)+0x964>
   12d22:	11 97       	sbiw	r26, 0x01	; 1
   12d24:	a8 19       	sub	r26, r8
   12d26:	b9 09       	sbc	r27, r9
   12d28:	2a 17       	cp	r18, r26
   12d2a:	3b 07       	cpc	r19, r27
   12d2c:	60 f4       	brcc	.+24     	; 0x12d46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x98e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2262
    {
      str1[cnt] = topic[f];
   12d2e:	d5 01       	movw	r26, r10
   12d30:	a8 0f       	add	r26, r24
   12d32:	b1 1d       	adc	r27, r1
   12d34:	28 0d       	add	r18, r8
   12d36:	39 1d       	adc	r19, r9
   12d38:	f9 01       	movw	r30, r18
   12d3a:	80 81       	ld	r24, Z
   12d3c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
      str1[cnt + 1] = 0;
   12d3e:	11 96       	adiw	r26, 0x01	; 1
   12d40:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2260
  strcpy_P(str1, new_text_slash_rtds_slash); /// /rtds/
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12d42:	4f 5f       	subi	r20, 0xFF	; 255
   12d44:	e6 cf       	rjmp	.-52     	; 0x12d12 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2267
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12d46:	60 e9       	ldi	r22, 0x90	; 144
   12d48:	75 e0       	ldi	r23, 0x05	; 5
   12d4a:	c5 01       	movw	r24, r10
   12d4c:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2266
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12d50:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
    pch = strtok (str1, "/");
    while (pch != NULL)
   12d52:	00 97       	sbiw	r24, 0x00	; 0
   12d54:	b9 f0       	breq	.+46     	; 0x12d84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2270
    {
      if (cnt == 0)
   12d56:	11 11       	cpse	r17, r1
   12d58:	0e c0       	rjmp	.+28     	; 0x12d76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2271
        strcpy(tmp1, pch);
   12d5a:	bc 01       	movw	r22, r24
   12d5c:	ce 01       	movw	r24, r28
   12d5e:	88 57       	subi	r24, 0x78	; 120
   12d60:	9f 4f       	sbci	r25, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
      if (cnt == 1)
        strcpy(tmp2, pch);
   12d62:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2274
      pch = strtok (NULL, "/");
   12d66:	60 e9       	ldi	r22, 0x90	; 144
   12d68:	75 e0       	ldi	r23, 0x05	; 5
   12d6a:	90 e0       	ldi	r25, 0x00	; 0
   12d6c:	80 e0       	ldi	r24, 0x00	; 0
   12d6e:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2275
      cnt++;
   12d72:	1f 5f       	subi	r17, 0xFF	; 255
   12d74:	ee cf       	rjmp	.-36     	; 0x12d52 <mqtt_callback(char*, unsigned char*, unsigned int)+0x99a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2272
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0)
        strcpy(tmp1, pch);
      if (cnt == 1)
   12d76:	11 30       	cpi	r17, 0x01	; 1
   12d78:	b1 f7       	brne	.-20     	; 0x12d66 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2273
        strcpy(tmp2, pch);
   12d7a:	bc 01       	movw	r22, r24
   12d7c:	ce 01       	movw	r24, r28
   12d7e:	88 5f       	subi	r24, 0xF8	; 248
   12d80:	9e 4f       	sbci	r25, 0xFE	; 254
   12d82:	ef cf       	rjmp	.-34     	; 0x12d62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2268
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   12d84:	77 e6       	ldi	r23, 0x67	; 103
   12d86:	c7 2e       	mov	r12, r23
   12d88:	d1 2c       	mov	r13, r1
   12d8a:	e1 2c       	mov	r14, r1
   12d8c:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12d8e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
    {
      uint8_t active = 0;
   12d90:	29 96       	adiw	r28, 0x09	; 9
   12d92:	1f ae       	std	Y+63, r1	; 0x3f
   12d94:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2280
      str1[0] = 0;
   12d96:	d5 01       	movw	r26, r10
   12d98:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2281
      remote_tds_get_complete(idx, &active, str1);
   12d9a:	a5 01       	movw	r20, r10
   12d9c:	be 01       	movw	r22, r28
   12d9e:	68 5b       	subi	r22, 0xB8	; 184
   12da0:	7f 4f       	sbci	r23, 0xFF	; 255
   12da2:	81 2f       	mov	r24, r17
   12da4:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2282
      if (active == 1 && strcmp(str1, tmp1) == 0)
   12da8:	29 96       	adiw	r28, 0x09	; 9
   12daa:	8f ad       	ldd	r24, Y+63	; 0x3f
   12dac:	29 97       	sbiw	r28, 0x09	; 9
   12dae:	81 30       	cpi	r24, 0x01	; 1
   12db0:	59 f5       	brne	.+86     	; 0x12e08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
   12db2:	be 01       	movw	r22, r28
   12db4:	68 57       	subi	r22, 0x78	; 120
   12db6:	7f 4f       	sbci	r23, 0xFF	; 255
   12db8:	c5 01       	movw	r24, r10
   12dba:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12dbe:	89 2b       	or	r24, r25
   12dc0:	19 f5       	brne	.+70     	; 0x12e08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2284
      {
        if (strcmp(tmp2, "value") == 0)
   12dc2:	6b ef       	ldi	r22, 0xFB	; 251
   12dc4:	73 e0       	ldi	r23, 0x03	; 3
   12dc6:	ce 01       	movw	r24, r28
   12dc8:	88 5f       	subi	r24, 0xF8	; 248
   12dca:	9e 4f       	sbci	r25, 0xFE	; 254
   12dcc:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12dd0:	89 2b       	or	r24, r25
   12dd2:	41 f4       	brne	.+16     	; 0x12de4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2285
          remote_tds_set_data(idx, atoi(my_payload));
   12dd4:	85 e0       	ldi	r24, 0x05	; 5
   12dd6:	99 e0       	ldi	r25, 0x09	; 9
   12dd8:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12ddc:	bc 01       	movw	r22, r24
   12dde:	81 2f       	mov	r24, r17
   12de0:	0e 94 3a 53 	call	0xa674	; 0xa674 <remote_tds_set_data(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286
        if (strcmp(tmp2, "type") == 0)
   12de4:	61 e0       	ldi	r22, 0x01	; 1
   12de6:	74 e0       	ldi	r23, 0x04	; 4
   12de8:	ce 01       	movw	r24, r28
   12dea:	88 5f       	subi	r24, 0xF8	; 248
   12dec:	9e 4f       	sbci	r25, 0xFE	; 254
   12dee:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   12df2:	89 2b       	or	r24, r25
   12df4:	49 f4       	brne	.+18     	; 0x12e08 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
          remote_tds_set_type(idx, atoi(my_payload));
   12df6:	85 e0       	ldi	r24, 0x05	; 5
   12df8:	99 e0       	ldi	r25, 0x09	; 9
   12dfa:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1912
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   12dfe:	48 2f       	mov	r20, r24
   12e00:	c7 01       	movw	r24, r14
   12e02:	b6 01       	movw	r22, r12
   12e04:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2277
      if (cnt == 1)
        strcpy(tmp2, pch);
      pch = strtok (NULL, "/");
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   12e08:	1f 5f       	subi	r17, 0xFF	; 255
   12e0a:	b4 e0       	ldi	r27, 0x04	; 4
   12e0c:	cb 0e       	add	r12, r27
   12e0e:	d1 1c       	adc	r13, r1
   12e10:	e1 1c       	adc	r14, r1
   12e12:	f1 1c       	adc	r15, r1
   12e14:	ef e8       	ldi	r30, 0x8F	; 143
   12e16:	ce 16       	cp	r12, r30
   12e18:	d1 04       	cpc	r13, r1
   12e1a:	e1 04       	cpc	r14, r1
   12e1c:	f1 04       	cpc	r15, r1
   12e1e:	09 f0       	breq	.+2      	; 0x12e22 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa6a>
   12e20:	b7 cf       	rjmp	.-146    	; 0x12d90 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2293
      }
    }
  }
  ///

  strcpy_P(str1, new_text_slash_rtds_control_list); /// /rtds-control/list"
   12e22:	6b eb       	ldi	r22, 0xBB	; 187
   12e24:	70 e8       	ldi	r23, 0x80	; 128
   12e26:	c5 01       	movw	r24, r10
   12e28:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
   12e2c:	68 e5       	ldi	r22, 0x58	; 88
   12e2e:	71 e8       	ldi	r23, 0x81	; 129
   12e30:	c5 01       	movw	r24, r10
   12e32:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
  strcat(str1, device.nazev);
   12e36:	6f e2       	ldi	r22, 0x2F	; 47
   12e38:	7e e0       	ldi	r23, 0x0E	; 14
   12e3a:	c5 01       	movw	r24, r10
   12e3c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2310
  strcat(str1, "/prog/set/");
   12e40:	61 e1       	ldi	r22, 0x11	; 17
   12e42:	75 e0       	ldi	r23, 0x05	; 5
   12e44:	c5 01       	movw	r24, r10
   12e46:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12e4a:	f5 01       	movw	r30, r10
   12e4c:	01 90       	ld	r0, Z+
   12e4e:	00 20       	and	r0, r0
   12e50:	e9 f7       	brne	.-6      	; 0x12e4c <mqtt_callback(char*, unsigned char*, unsigned int)+0xa94>
   12e52:	31 97       	sbiw	r30, 0x01	; 1
   12e54:	af 01       	movw	r20, r30
   12e56:	4a 19       	sub	r20, r10
   12e58:	5b 09       	sbc	r21, r11
   12e5a:	b4 01       	movw	r22, r8
   12e5c:	c5 01       	movw	r24, r10
   12e5e:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12e62:	89 2b       	or	r24, r25
   12e64:	09 f0       	breq	.+2      	; 0x12e68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xab0>
   12e66:	46 c0       	rjmp	.+140    	; 0x12ef4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2313
  {
    mqtt_process_message++;
   12e68:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12e6c:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12e70:	01 96       	adiw	r24, 0x01	; 1
   12e72:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12e76:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12e7a:	f5 01       	movw	r30, r10
   12e7c:	01 90       	ld	r0, Z+
   12e7e:	00 20       	and	r0, r0
   12e80:	e9 f7       	brne	.-6      	; 0x12e7c <mqtt_callback(char*, unsigned char*, unsigned int)+0xac4>
   12e82:	31 97       	sbiw	r30, 0x01	; 1
   12e84:	ea 19       	sub	r30, r10
   12e86:	fb 09       	sbc	r31, r11
   12e88:	9e 2f       	mov	r25, r30
   12e8a:	4e 2f       	mov	r20, r30
   12e8c:	84 2f       	mov	r24, r20
   12e8e:	89 1b       	sub	r24, r25
   12e90:	24 2f       	mov	r18, r20
   12e92:	30 e0       	ldi	r19, 0x00	; 0
   12e94:	d4 01       	movw	r26, r8
   12e96:	0d 90       	ld	r0, X+
   12e98:	00 20       	and	r0, r0
   12e9a:	e9 f7       	brne	.-6      	; 0x12e96 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
   12e9c:	11 97       	sbiw	r26, 0x01	; 1
   12e9e:	a8 19       	sub	r26, r8
   12ea0:	b9 09       	sbc	r27, r9
   12ea2:	2a 17       	cp	r18, r26
   12ea4:	3b 07       	cpc	r19, r27
   12ea6:	60 f4       	brcc	.+24     	; 0x12ec0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
    {
      str1[cnt] = topic[f];
   12ea8:	d5 01       	movw	r26, r10
   12eaa:	a8 0f       	add	r26, r24
   12eac:	b1 1d       	adc	r27, r1
   12eae:	28 0d       	add	r18, r8
   12eb0:	39 1d       	adc	r19, r9
   12eb2:	f9 01       	movw	r30, r18
   12eb4:	80 81       	ld	r24, Z
   12eb6:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
      str1[cnt + 1] = 0;
   12eb8:	11 96       	adiw	r26, 0x01	; 1
   12eba:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2315
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   12ebc:	4f 5f       	subi	r20, 0xFF	; 255
   12ebe:	e6 cf       	rjmp	.-52     	; 0x12e8c <mqtt_callback(char*, unsigned char*, unsigned int)+0xad4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2322
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   12ec0:	60 e9       	ldi	r22, 0x90	; 144
   12ec2:	75 e0       	ldi	r23, 0x05	; 5
   12ec4:	c5 01       	movw	r24, r10
   12ec6:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   12eca:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2321
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   12ecc:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   12ece:	6d e4       	ldi	r22, 0x4D	; 77
   12ed0:	e6 2e       	mov	r14, r22
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
    pch = strtok (str1, "/");
    while (pch != NULL)
   12ed2:	01 15       	cp	r16, r1
   12ed4:	11 05       	cpc	r17, r1
   12ed6:	71 f0       	breq	.+28     	; 0x12ef4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
    {
      if (cnt == 0) id = atoi(pch);
   12ed8:	f1 10       	cpse	r15, r1
   12eda:	c7 c0       	rjmp	.+398    	; 0x1306a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcb2>
   12edc:	c8 01       	movw	r24, r16
   12ede:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12ee2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
      if (id < AVAILABLE_PROGRAM)
   12ee4:	f7 e0       	ldi	r31, 0x07	; 7
   12ee6:	f8 17       	cp	r31, r24
   12ee8:	08 f0       	brcs	.+2      	; 0x12eec <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
   12eea:	e6 c0       	rjmp	.+460    	; 0x130b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2333
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
   12eec:	8c e1       	ldi	r24, 0x1C	; 28
   12eee:	95 e0       	ldi	r25, 0x05	; 5
   12ef0:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2341
      pch = strtok (NULL, "/");
      cnt++;
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
   12ef4:	68 e5       	ldi	r22, 0x58	; 88
   12ef6:	71 e8       	ldi	r23, 0x81	; 129
   12ef8:	c5 01       	movw	r24, r10
   12efa:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
  strcat(str1, device.nazev);
   12efe:	6f e2       	ldi	r22, 0x2F	; 47
   12f00:	7e e0       	ldi	r23, 0x0E	; 14
   12f02:	c5 01       	movw	r24, r10
   12f04:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2343
  strcat(str1, "/prog/clear");
   12f08:	6c e2       	ldi	r22, 0x2C	; 44
   12f0a:	75 e0       	ldi	r23, 0x05	; 5
   12f0c:	c5 01       	movw	r24, r10
   12f0e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2344
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12f12:	f5 01       	movw	r30, r10
   12f14:	01 90       	ld	r0, Z+
   12f16:	00 20       	and	r0, r0
   12f18:	e9 f7       	brne	.-6      	; 0x12f14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb5c>
   12f1a:	31 97       	sbiw	r30, 0x01	; 1
   12f1c:	af 01       	movw	r20, r30
   12f1e:	4a 19       	sub	r20, r10
   12f20:	5b 09       	sbc	r21, r11
   12f22:	b4 01       	movw	r22, r8
   12f24:	c5 01       	movw	r24, r10
   12f26:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   12f2a:	89 2b       	or	r24, r25
   12f2c:	09 f0       	breq	.+2      	; 0x12f30 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb78>
   12f2e:	52 c0       	rjmp	.+164    	; 0x12fd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2346
  {
    mqtt_process_message++;
   12f30:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   12f34:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   12f38:	01 96       	adiw	r24, 0x01	; 1
   12f3a:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   12f3e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
    id = atoi(my_payload);
   12f42:	85 e0       	ldi	r24, 0x05	; 5
   12f44:	99 e0       	ldi	r25, 0x09	; 9
   12f46:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   12f4a:	18 2f       	mov	r17, r24
   12f4c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2348
    if (id < AVAILABLE_PROGRAM)
   12f4e:	97 e0       	ldi	r25, 0x07	; 7
   12f50:	91 17       	cp	r25, r17
   12f52:	08 f4       	brcc	.+2      	; 0x12f56 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb9e>
   12f54:	ba c0       	rjmp	.+372    	; 0x130ca <mqtt_callback(char*, unsigned char*, unsigned int)+0xd12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2350
    {
      strcpy_P(tmp2, text_prog);
   12f56:	6b eb       	ldi	r22, 0xBB	; 187
   12f58:	72 e8       	ldi	r23, 0x82	; 130
   12f5a:	ce 01       	movw	r24, r28
   12f5c:	88 5f       	subi	r24, 0xF8	; 248
   12f5e:	9e 4f       	sbci	r25, 0xFE	; 254
   12f60:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2351
      thermostat_program_set_name(id, tmp2);
   12f64:	be 01       	movw	r22, r28
   12f66:	68 5f       	subi	r22, 0xF8	; 248
   12f68:	7e 4f       	sbci	r23, 0xFE	; 254
   12f6a:	81 2f       	mov	r24, r17
   12f6c:	0e 94 b3 6a 	call	0xd566	; 0xd566 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
   12f70:	ad e4       	ldi	r26, 0x4D	; 77
   12f72:	1a 9f       	mul	r17, r26
   12f74:	c0 01       	movw	r24, r0
   12f76:	11 24       	eor	r1, r1
   12f78:	6f ef       	ldi	r22, 0xFF	; 255
   12f7a:	8f 50       	subi	r24, 0x0F	; 15
   12f7c:	9e 4f       	sbci	r25, 0xFE	; 254
   12f7e:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   12f82:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
   12f84:	c1 2c       	mov	r12, r1
   12f86:	e1 2c       	mov	r14, r1
   12f88:	00 e0       	ldi	r16, 0x00	; 0
   12f8a:	20 e0       	ldi	r18, 0x00	; 0
   12f8c:	40 e0       	ldi	r20, 0x00	; 0
   12f8e:	61 2f       	mov	r22, r17
   12f90:	87 2d       	mov	r24, r7
   12f92:	0e 94 77 6a 	call	0xd4ee	; 0xd4ee <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
        thermostat_program_set_threshold(id, progid, 220);
   12f96:	4c ed       	ldi	r20, 0xDC	; 220
   12f98:	50 e0       	ldi	r21, 0x00	; 0
   12f9a:	61 2f       	mov	r22, r17
   12f9c:	87 2d       	mov	r24, r7
   12f9e:	0e 94 5b 6a 	call	0xd4b6	; 0xd4b6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2357
        thermostat_program_set_week(id, progid, 0);
   12fa2:	40 e0       	ldi	r20, 0x00	; 0
   12fa4:	61 2f       	mov	r22, r17
   12fa6:	87 2d       	mov	r24, r7
   12fa8:	0e 94 4d 6a 	call	0xd49a	; 0xd49a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy_P(tmp2, text_prog);
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, PROG_FREE);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
   12fac:	1f 5f       	subi	r17, 0xFF	; 255
   12fae:	1b 30       	cpi	r17, 0x0B	; 11
   12fb0:	49 f7       	brne	.-46     	; 0x12f84 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
   12fb2:	0b e5       	ldi	r16, 0x5B	; 91
   12fb4:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   12fb6:	c8 01       	movw	r24, r16
   12fb8:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2361
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
   12fbc:	78 12       	cpse	r7, r24
   12fbe:	04 c0       	rjmp	.+8      	; 0x12fc8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc10>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   12fc0:	6f ef       	ldi	r22, 0xFF	; 255
   12fc2:	c8 01       	movw	r24, r16
   12fc4:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   12fc8:	0f 5d       	subi	r16, 0xDF	; 223
   12fca:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2359
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   12fcc:	01 15       	cp	r16, r1
   12fce:	b2 e0       	ldi	r27, 0x02	; 2
   12fd0:	1b 07       	cpc	r17, r27
   12fd2:	89 f7       	brne	.-30     	; 0x12fb6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2373
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
   12fd4:	68 e5       	ldi	r22, 0x58	; 88
   12fd6:	71 e8       	ldi	r23, 0x81	; 129
   12fd8:	c5 01       	movw	r24, r10
   12fda:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
  strcat(str1, device.nazev);
   12fde:	6f e2       	ldi	r22, 0x2F	; 47
   12fe0:	7e e0       	ldi	r23, 0x0E	; 14
   12fe2:	c5 01       	movw	r24, r10
   12fe4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  strcat(str1, "/prog_interval/set/");
   12fe8:	6a e4       	ldi	r22, 0x4A	; 74
   12fea:	75 e0       	ldi	r23, 0x05	; 5
   12fec:	c5 01       	movw	r24, r10
   12fee:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
  if (strncmp(str1, topic, strlen(str1)) == 0)
   12ff2:	f5 01       	movw	r30, r10
   12ff4:	01 90       	ld	r0, Z+
   12ff6:	00 20       	and	r0, r0
   12ff8:	e9 f7       	brne	.-6      	; 0x12ff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc3c>
   12ffa:	31 97       	sbiw	r30, 0x01	; 1
   12ffc:	af 01       	movw	r20, r30
   12ffe:	4a 19       	sub	r20, r10
   13000:	5b 09       	sbc	r21, r11
   13002:	b4 01       	movw	r22, r8
   13004:	c5 01       	movw	r24, r10
   13006:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   1300a:	89 2b       	or	r24, r25
   1300c:	09 f0       	breq	.+2      	; 0x13010 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc58>
   1300e:	32 c1       	rjmp	.+612    	; 0x13274 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2378
  {
    mqtt_process_message++;
   13010:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13014:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13018:	01 96       	adiw	r24, 0x01	; 1
   1301a:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1301e:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13022:	f5 01       	movw	r30, r10
   13024:	01 90       	ld	r0, Z+
   13026:	00 20       	and	r0, r0
   13028:	e9 f7       	brne	.-6      	; 0x13024 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6c>
   1302a:	31 97       	sbiw	r30, 0x01	; 1
   1302c:	ea 19       	sub	r30, r10
   1302e:	fb 09       	sbc	r31, r11
   13030:	9e 2f       	mov	r25, r30
   13032:	4e 2f       	mov	r20, r30
   13034:	84 2f       	mov	r24, r20
   13036:	89 1b       	sub	r24, r25
   13038:	24 2f       	mov	r18, r20
   1303a:	30 e0       	ldi	r19, 0x00	; 0
   1303c:	d4 01       	movw	r26, r8
   1303e:	0d 90       	ld	r0, X+
   13040:	00 20       	and	r0, r0
   13042:	e9 f7       	brne	.-6      	; 0x1303e <mqtt_callback(char*, unsigned char*, unsigned int)+0xc86>
   13044:	11 97       	sbiw	r26, 0x01	; 1
   13046:	a8 19       	sub	r26, r8
   13048:	b9 09       	sbc	r27, r9
   1304a:	2a 17       	cp	r18, r26
   1304c:	3b 07       	cpc	r19, r27
   1304e:	08 f0       	brcs	.+2      	; 0x13052 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc9a>
   13050:	41 c0       	rjmp	.+130    	; 0x130d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
    {
      str1[cnt] = topic[f];
   13052:	d5 01       	movw	r26, r10
   13054:	a8 0f       	add	r26, r24
   13056:	b1 1d       	adc	r27, r1
   13058:	28 0d       	add	r18, r8
   1305a:	39 1d       	adc	r19, r9
   1305c:	f9 01       	movw	r30, r18
   1305e:	80 81       	ld	r24, Z
   13060:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2383
      str1[cnt + 1] = 0;
   13062:	11 96       	adiw	r26, 0x01	; 1
   13064:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2380
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13066:	4f 5f       	subi	r20, 0xFF	; 255
   13068:	e5 cf       	rjmp	.-54     	; 0x13034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
   1306a:	27 e0       	ldi	r18, 0x07	; 7
   1306c:	27 15       	cp	r18, r7
   1306e:	08 f4       	brcc	.+2      	; 0x13072 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcba>
   13070:	3d cf       	rjmp	.-390    	; 0x12eec <mqtt_callback(char*, unsigned char*, unsigned int)+0xb34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
   13072:	81 e0       	ldi	r24, 0x01	; 1
   13074:	f8 12       	cpse	r15, r24
   13076:	20 c0       	rjmp	.+64     	; 0x130b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   13078:	6a ee       	ldi	r22, 0xEA	; 234
   1307a:	73 e0       	ldi	r23, 0x03	; 3
   1307c:	c8 01       	movw	r24, r16
   1307e:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13082:	89 2b       	or	r24, r25
   13084:	29 f4       	brne	.+10     	; 0x13090 <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd8>
   13086:	65 e0       	ldi	r22, 0x05	; 5
   13088:	79 e0       	ldi	r23, 0x09	; 9
   1308a:	87 2d       	mov	r24, r7
   1308c:	0e 94 b3 6a 	call	0xd566	; 0xd566 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2329
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
   13090:	64 ef       	ldi	r22, 0xF4	; 244
   13092:	73 e0       	ldi	r23, 0x03	; 3
   13094:	c8 01       	movw	r24, r16
   13096:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1309a:	89 2b       	or	r24, r25
   1309c:	69 f4       	brne	.+26     	; 0x130b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd00>
   1309e:	85 e0       	ldi	r24, 0x05	; 5
   130a0:	99 e0       	ldi	r25, 0x09	; 9
   130a2:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   130a6:	7e 9c       	mul	r7, r14
   130a8:	90 01       	movw	r18, r0
   130aa:	11 24       	eor	r1, r1
   130ac:	68 2f       	mov	r22, r24
   130ae:	c9 01       	movw	r24, r18
   130b0:	8f 50       	subi	r24, 0x0F	; 15
   130b2:	9e 4f       	sbci	r25, 0xFE	; 254
   130b4:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
   130b8:	60 e9       	ldi	r22, 0x90	; 144
   130ba:	75 e0       	ldi	r23, 0x05	; 5
   130bc:	90 e0       	ldi	r25, 0x00	; 0
   130be:	80 e0       	ldi	r24, 0x00	; 0
   130c0:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   130c4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
      cnt++;
   130c6:	f3 94       	inc	r15
   130c8:	04 cf       	rjmp	.-504    	; 0x12ed2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
   130ca:	88 e3       	ldi	r24, 0x38	; 56
   130cc:	95 e0       	ldi	r25, 0x05	; 5
   130ce:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   130d2:	80 cf       	rjmp	.-256    	; 0x12fd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2387
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   130d4:	60 e9       	ldi	r22, 0x90	; 144
   130d6:	75 e0       	ldi	r23, 0x05	; 5
   130d8:	c5 01       	movw	r24, r10
   130da:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   130de:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
   130e0:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2386
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   130e2:	31 2c       	mov	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2388
    pch = strtok (str1, "/");
    while (pch != NULL)
   130e4:	41 14       	cp	r4, r1
   130e6:	51 04       	cpc	r5, r1
   130e8:	09 f4       	brne	.+2      	; 0x130ec <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
   130ea:	c4 c0       	rjmp	.+392    	; 0x13274 <mqtt_callback(char*, unsigned char*, unsigned int)+0xebc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2390
    {
      if (cnt == 0) id = atoi(pch);
   130ec:	31 10       	cpse	r3, r1
   130ee:	82 c0       	rjmp	.+260    	; 0x131f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe3c>
   130f0:	c2 01       	movw	r24, r4
   130f2:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   130f6:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2392
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
   130f8:	27 e0       	ldi	r18, 0x07	; 7
   130fa:	27 15       	cp	r18, r7
   130fc:	08 f4       	brcc	.+2      	; 0x13100 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd48>
   130fe:	b6 c0       	rjmp	.+364    	; 0x1326c <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
   13100:	8a e0       	ldi	r24, 0x0A	; 10
   13102:	86 15       	cp	r24, r6
   13104:	08 f4       	brcc	.+2      	; 0x13108 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd50>
   13106:	b2 c0       	rjmp	.+356    	; 0x1326c <mqtt_callback(char*, unsigned char*, unsigned int)+0xeb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2394
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
   13108:	92 e0       	ldi	r25, 0x02	; 2
   1310a:	39 12       	cpse	r3, r25
   1310c:	a6 c0       	rjmp	.+332    	; 0x1325a <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
   1310e:	64 ef       	ldi	r22, 0xF4	; 244
   13110:	73 e0       	ldi	r23, 0x03	; 3
   13112:	c2 01       	movw	r24, r4
   13114:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13118:	89 2b       	or	r24, r25
   1311a:	c1 f5       	brne	.+112    	; 0x1318c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
   1311c:	85 e0       	ldi	r24, 0x05	; 5
   1311e:	99 e0       	ldi	r25, 0x09	; 9
   13120:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13124:	28 2e       	mov	r2, r24
thermostat_program_set_interval_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:379

/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   13126:	de 01       	movw	r26, r28
   13128:	a8 5b       	subi	r26, 0xB8	; 184
   1312a:	bf 4f       	sbci	r27, 0xFF	; 255
   1312c:	6d 01       	movw	r12, r26
   1312e:	fe 01       	movw	r30, r28
   13130:	e8 5d       	subi	r30, 0xD8	; 216
   13132:	fe 4f       	sbci	r31, 0xFE	; 254
   13134:	7f 01       	movw	r14, r30
   13136:	8e 01       	movw	r16, r28
   13138:	0d 5b       	subi	r16, 0xBD	; 189
   1313a:	1e 4f       	sbci	r17, 0xFE	; 254
   1313c:	9e 01       	movw	r18, r28
   1313e:	2c 5b       	subi	r18, 0xBC	; 188
   13140:	3e 4f       	sbci	r19, 0xFE	; 254
   13142:	ae 01       	movw	r20, r28
   13144:	4b 5b       	subi	r20, 0xBB	; 187
   13146:	5e 4f       	sbci	r21, 0xFE	; 254
   13148:	66 2d       	mov	r22, r6
   1314a:	87 2d       	mov	r24, r7
   1314c:	0e 94 0e 70 	call	0xe01c	; 0xe01c <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:380
  if (active != set_active)
   13150:	29 96       	adiw	r28, 0x09	; 9
   13152:	8f ad       	ldd	r24, Y+63	; 0x3f
   13154:	29 97       	sbiw	r28, 0x09	; 9
   13156:	28 16       	cp	r2, r24
   13158:	c9 f0       	breq	.+50     	; 0x1318c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
   1315a:	c2 2c       	mov	r12, r2
   1315c:	c8 5d       	subi	r28, 0xD8	; 216
   1315e:	de 4f       	sbci	r29, 0xFE	; 254
   13160:	e8 80       	ld	r14, Y
   13162:	c8 52       	subi	r28, 0x28	; 40
   13164:	d1 40       	sbci	r29, 0x01	; 1
   13166:	cd 5b       	subi	r28, 0xBD	; 189
   13168:	de 4f       	sbci	r29, 0xFE	; 254
   1316a:	08 81       	ld	r16, Y
   1316c:	c3 54       	subi	r28, 0x43	; 67
   1316e:	d1 40       	sbci	r29, 0x01	; 1
   13170:	cc 5b       	subi	r28, 0xBC	; 188
   13172:	de 4f       	sbci	r29, 0xFE	; 254
   13174:	28 81       	ld	r18, Y
   13176:	c4 54       	subi	r28, 0x44	; 68
   13178:	d1 40       	sbci	r29, 0x01	; 1
   1317a:	cb 5b       	subi	r28, 0xBB	; 187
   1317c:	de 4f       	sbci	r29, 0xFE	; 254
   1317e:	48 81       	ld	r20, Y
   13180:	c5 54       	subi	r28, 0x45	; 69
   13182:	d1 40       	sbci	r29, 0x01	; 1
   13184:	66 2d       	mov	r22, r6
   13186:	87 2d       	mov	r24, r7
   13188:	0e 94 77 6a 	call	0xd4ee	; 0xd4ee <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2395
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
   1318c:	67 e9       	ldi	r22, 0x97	; 151
   1318e:	76 e0       	ldi	r23, 0x06	; 6
   13190:	c2 01       	movw	r24, r4
   13192:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13196:	89 2b       	or	r24, r25
   13198:	49 f4       	brne	.+18     	; 0x131ac <mqtt_callback(char*, unsigned char*, unsigned int)+0xdf4>
   1319a:	85 e0       	ldi	r24, 0x05	; 5
   1319c:	99 e0       	ldi	r25, 0x09	; 9
   1319e:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   131a2:	ac 01       	movw	r20, r24
   131a4:	66 2d       	mov	r22, r6
   131a6:	87 2d       	mov	r24, r7
   131a8:	0e 94 5b 6a 	call	0xd4b6	; 0xd4b6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
   131ac:	65 ee       	ldi	r22, 0xE5	; 229
   131ae:	76 e0       	ldi	r23, 0x06	; 6
   131b0:	c2 01       	movw	r24, r4
   131b2:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   131b6:	89 2b       	or	r24, r25
   131b8:	09 f0       	breq	.+2      	; 0x131bc <mqtt_callback(char*, unsigned char*, unsigned int)+0xe04>
   131ba:	4f c0       	rjmp	.+158    	; 0x1325a <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
   131bc:	6e e5       	ldi	r22, 0x5E	; 94
   131be:	75 e0       	ldi	r23, 0x05	; 5
   131c0:	85 e0       	ldi	r24, 0x05	; 5
   131c2:	99 e0       	ldi	r25, 0x09	; 9
   131c4:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
   131c8:	f1 2c       	mov	r15, r1
   131ca:	c1 2c       	mov	r12, r1
   131cc:	e1 2c       	mov	r14, r1
   131ce:	00 e0       	ldi	r16, 0x00	; 0
   131d0:	51 2c       	mov	r5, r1
   131d2:	d1 2c       	mov	r13, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
   131d4:	10 e0       	ldi	r17, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
   131d6:	00 97       	sbiw	r24, 0x00	; 0
   131d8:	99 f1       	breq	.+102    	; 0x13240 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe88>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
   131da:	11 11       	cpse	r17, r1
   131dc:	13 c0       	rjmp	.+38     	; 0x13204 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe4c>
   131de:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   131e2:	d8 2e       	mov	r13, r24
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
   131e4:	6e e5       	ldi	r22, 0x5E	; 94
   131e6:	75 e0       	ldi	r23, 0x05	; 5
   131e8:	90 e0       	ldi	r25, 0x00	; 0
   131ea:	80 e0       	ldi	r24, 0x00	; 0
   131ec:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:354
    cnt++;
   131f0:	1f 5f       	subi	r17, 0xFF	; 255
   131f2:	f1 cf       	rjmp	.-30     	; 0x131d6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1e>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2391
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
   131f4:	f1 e0       	ldi	r31, 0x01	; 1
   131f6:	3f 12       	cpse	r3, r31
   131f8:	7f cf       	rjmp	.-258    	; 0x130f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
   131fa:	c2 01       	movw	r24, r4
   131fc:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13200:	68 2e       	mov	r6, r24
   13202:	7a cf       	rjmp	.-268    	; 0x130f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd40>
thermostat_program_set_parse_interval():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
   13204:	11 30       	cpi	r17, 0x01	; 1
   13206:	21 f4       	brne	.+8      	; 0x13210 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe58>
   13208:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1320c:	58 2e       	mov	r5, r24
   1320e:	ea cf       	rjmp	.-44     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
   13210:	12 30       	cpi	r17, 0x02	; 2
   13212:	21 f4       	brne	.+8      	; 0x1321c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe64>
   13214:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13218:	08 2f       	mov	r16, r24
   1321a:	e4 cf       	rjmp	.-56     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
   1321c:	13 30       	cpi	r17, 0x03	; 3
   1321e:	21 f4       	brne	.+8      	; 0x13228 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
   13220:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13224:	e8 2e       	mov	r14, r24
   13226:	de cf       	rjmp	.-68     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
   13228:	14 30       	cpi	r17, 0x04	; 4
   1322a:	21 f4       	brne	.+8      	; 0x13234 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
   1322c:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13230:	f8 2e       	mov	r15, r24
   13232:	d8 cf       	rjmp	.-80     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
   13234:	15 30       	cpi	r17, 0x05	; 5
   13236:	b1 f6       	brne	.-84     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
   13238:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1323c:	c8 2e       	mov	r12, r24
   1323e:	d2 cf       	rjmp	.-92     	; 0x131e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe2c>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
   13240:	16 30       	cpi	r17, 0x06	; 6
   13242:	59 f4       	brne	.+22     	; 0x1325a <mqtt_callback(char*, unsigned char*, unsigned int)+0xea2>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
   13244:	25 2d       	mov	r18, r5
   13246:	4d 2d       	mov	r20, r13
   13248:	66 2d       	mov	r22, r6
   1324a:	87 2d       	mov	r24, r7
   1324c:	0e 94 77 6a 	call	0xd4ee	; 0xd4ee <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
   13250:	4f 2d       	mov	r20, r15
   13252:	66 2d       	mov	r22, r6
   13254:	87 2d       	mov	r24, r7
   13256:	0e 94 4d 6a 	call	0xd49a	; 0xd49a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2403
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
        break;
      }
      pch = strtok (NULL, "/");
   1325a:	60 e9       	ldi	r22, 0x90	; 144
   1325c:	75 e0       	ldi	r23, 0x05	; 5
   1325e:	90 e0       	ldi	r25, 0x00	; 0
   13260:	80 e0       	ldi	r24, 0x00	; 0
   13262:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13266:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
      cnt++;
   13268:	33 94       	inc	r3
   1326a:	3c cf       	rjmp	.-392    	; 0x130e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
   1326c:	80 e6       	ldi	r24, 0x60	; 96
   1326e:	95 e0       	ldi	r25, 0x05	; 5
   13270:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2409
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
   13274:	68 e5       	ldi	r22, 0x58	; 88
   13276:	71 e8       	ldi	r23, 0x81	; 129
   13278:	c5 01       	movw	r24, r10
   1327a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2410
  strcat(str1, device.nazev);
   1327e:	6f e2       	ldi	r22, 0x2F	; 47
   13280:	7e e0       	ldi	r23, 0x0E	; 14
   13282:	c5 01       	movw	r24, r10
   13284:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2411
  strcat(str1, "/ring/default");
   13288:	69 e7       	ldi	r22, 0x79	; 121
   1328a:	75 e0       	ldi	r23, 0x05	; 5
   1328c:	c5 01       	movw	r24, r10
   1328e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
  if (strcmp(str1, topic) == 0)
   13292:	b4 01       	movw	r22, r8
   13294:	c5 01       	movw	r24, r10
   13296:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1329a:	89 2b       	or	r24, r25
   1329c:	d9 f4       	brne	.+54     	; 0x132d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2414
  {
    mqtt_process_message++;
   1329e:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   132a2:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   132a6:	01 96       	adiw	r24, 0x01	; 1
   132a8:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   132ac:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
    last_default_ring = default_ring;
   132b0:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   132b4:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2416
    default_ring = atoi(my_payload);
   132b8:	85 e0       	ldi	r24, 0x05	; 5
   132ba:	99 e0       	ldi	r25, 0x09	; 9
   132bc:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   132c0:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
    display_redraw_default_ring = 1;
   132c4:	91 e0       	ldi	r25, 0x01	; 1
   132c6:	90 93 94 09 	sts	0x0994, r25	; 0x800994 <display_redraw_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   132ca:	68 2f       	mov	r22, r24
   132cc:	8c e5       	ldi	r24, 0x5C	; 92
   132ce:	90 e0       	ldi	r25, 0x00	; 0
   132d0:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2422
    display_redraw_default_ring = 1;
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
   132d4:	68 e5       	ldi	r22, 0x58	; 88
   132d6:	71 e8       	ldi	r23, 0x81	; 129
   132d8:	c5 01       	movw	r24, r10
   132da:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2423
  strcat(str1, device.nazev);
   132de:	6f e2       	ldi	r22, 0x2F	; 47
   132e0:	7e e0       	ldi	r23, 0x0E	; 14
   132e2:	c5 01       	movw	r24, r10
   132e4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  strcat(str1, "/ring/get/");
   132e8:	67 e8       	ldi	r22, 0x87	; 135
   132ea:	75 e0       	ldi	r23, 0x05	; 5
   132ec:	c5 01       	movw	r24, r10
   132ee:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
  if (strncmp(str1, topic, strlen(str1)) == 0)
   132f2:	f5 01       	movw	r30, r10
   132f4:	01 90       	ld	r0, Z+
   132f6:	00 20       	and	r0, r0
   132f8:	e9 f7       	brne	.-6      	; 0x132f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3c>
   132fa:	31 97       	sbiw	r30, 0x01	; 1
   132fc:	8f 01       	movw	r16, r30
   132fe:	0a 19       	sub	r16, r10
   13300:	1b 09       	sbc	r17, r11
   13302:	a8 01       	movw	r20, r16
   13304:	b4 01       	movw	r22, r8
   13306:	c5 01       	movw	r24, r10
   13308:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   1330c:	89 2b       	or	r24, r25
   1330e:	09 f0       	breq	.+2      	; 0x13312 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5a>
   13310:	4c c0       	rjmp	.+152    	; 0x133aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13312:	90 2f       	mov	r25, r16
   13314:	80 2f       	mov	r24, r16
   13316:	89 1b       	sub	r24, r25
   13318:	20 2f       	mov	r18, r16
   1331a:	30 e0       	ldi	r19, 0x00	; 0
   1331c:	f4 01       	movw	r30, r8
   1331e:	01 90       	ld	r0, Z+
   13320:	00 20       	and	r0, r0
   13322:	e9 f7       	brne	.-6      	; 0x1331e <mqtt_callback(char*, unsigned char*, unsigned int)+0xf66>
   13324:	31 97       	sbiw	r30, 0x01	; 1
   13326:	e8 19       	sub	r30, r8
   13328:	f9 09       	sbc	r31, r9
   1332a:	2e 17       	cp	r18, r30
   1332c:	3f 07       	cpc	r19, r31
   1332e:	70 f4       	brcc	.+28     	; 0x1334c <mqtt_callback(char*, unsigned char*, unsigned int)+0xf94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2430
    {
      str1[cnt] = topic[f];
   13330:	e8 ec       	ldi	r30, 0xC8	; 200
   13332:	f0 e0       	ldi	r31, 0x00	; 0
   13334:	ec 0f       	add	r30, r28
   13336:	fd 1f       	adc	r31, r29
   13338:	e8 0f       	add	r30, r24
   1333a:	f1 1d       	adc	r31, r1
   1333c:	28 0d       	add	r18, r8
   1333e:	39 1d       	adc	r19, r9
   13340:	d9 01       	movw	r26, r18
   13342:	8c 91       	ld	r24, X
   13344:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2431
      str1[cnt + 1] = 0;
   13346:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13348:	0f 5f       	subi	r16, 0xFF	; 255
   1334a:	e4 cf       	rjmp	.-56     	; 0x13314 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf5c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2435
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   1334c:	60 e9       	ldi	r22, 0x90	; 144
   1334e:	75 e0       	ldi	r23, 0x05	; 5
   13350:	ce 01       	movw	r24, r28
   13352:	88 53       	subi	r24, 0x38	; 56
   13354:	9f 4f       	sbci	r25, 0xFF	; 255
   13356:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2434
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   1335a:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2436
    pch = strtok (str1, "/");
    while (pch != NULL)
   1335c:	00 97       	sbiw	r24, 0x00	; 0
   1335e:	29 f1       	breq	.+74     	; 0x133aa <mqtt_callback(char*, unsigned char*, unsigned int)+0xff2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2438
    {
      if (cnt == 0) id = atoi(my_payload);
   13360:	11 11       	cpse	r17, r1
   13362:	0d c0       	rjmp	.+26     	; 0x1337e <mqtt_callback(char*, unsigned char*, unsigned int)+0xfc6>
   13364:	85 e0       	ldi	r24, 0x05	; 5
   13366:	99 e0       	ldi	r25, 0x09	; 9
   13368:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1336c:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
      if (id < MAX_THERMOSTAT)
   1336e:	b4 e0       	ldi	r27, 0x04	; 4
   13370:	b8 17       	cp	r27, r24
   13372:	98 f4       	brcc	.+38     	; 0x1339a <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2445
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   13374:	82 e9       	ldi	r24, 0x92	; 146
   13376:	95 e0       	ldi	r25, 0x05	; 5
   13378:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   1337c:	0e c0       	rjmp	.+28     	; 0x1339a <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
   1337e:	e4 e0       	ldi	r30, 0x04	; 4
   13380:	e7 15       	cp	r30, r7
   13382:	c0 f3       	brcs	.-16     	; 0x13374 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
   13384:	11 30       	cpi	r17, 0x01	; 1
   13386:	49 f4       	brne	.+18     	; 0x1339a <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   13388:	61 e4       	ldi	r22, 0x41	; 65
   1338a:	73 e0       	ldi	r23, 0x03	; 3
   1338c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13390:	89 2b       	or	r24, r25
   13392:	19 f4       	brne	.+6      	; 0x1339a <mqtt_callback(char*, unsigned char*, unsigned int)+0xfe2>
   13394:	87 2d       	mov	r24, r7
   13396:	0e 94 b1 54 	call	0xa962	; 0xa962 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2447
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   1339a:	60 e9       	ldi	r22, 0x90	; 144
   1339c:	75 e0       	ldi	r23, 0x05	; 5
   1339e:	90 e0       	ldi	r25, 0x00	; 0
   133a0:	80 e0       	ldi	r24, 0x00	; 0
   133a2:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2448
      cnt++;
   133a6:	1f 5f       	subi	r17, 0xFF	; 255
   133a8:	d9 cf       	rjmp	.-78     	; 0x1335c <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2467
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
   133aa:	68 e5       	ldi	r22, 0x58	; 88
   133ac:	71 e8       	ldi	r23, 0x81	; 129
   133ae:	c5 01       	movw	r24, r10
   133b0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2468
  strcat(str1, device.nazev);
   133b4:	6f e2       	ldi	r22, 0x2F	; 47
   133b6:	7e e0       	ldi	r23, 0x0E	; 14
   133b8:	c5 01       	movw	r24, r10
   133ba:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2469
  strcat(str1, "/ring/set/");
   133be:	62 ea       	ldi	r22, 0xA2	; 162
   133c0:	75 e0       	ldi	r23, 0x05	; 5
   133c2:	c5 01       	movw	r24, r10
   133c4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2470
  if (strncmp(str1, topic, strlen(str1)) == 0)
   133c8:	f5 01       	movw	r30, r10
   133ca:	01 90       	ld	r0, Z+
   133cc:	00 20       	and	r0, r0
   133ce:	e9 f7       	brne	.-6      	; 0x133ca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1012>
   133d0:	31 97       	sbiw	r30, 0x01	; 1
   133d2:	8f 01       	movw	r16, r30
   133d4:	0a 19       	sub	r16, r10
   133d6:	1b 09       	sbc	r17, r11
   133d8:	a8 01       	movw	r20, r16
   133da:	b4 01       	movw	r22, r8
   133dc:	c5 01       	movw	r24, r10
   133de:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   133e2:	89 2b       	or	r24, r25
   133e4:	09 f0       	breq	.+2      	; 0x133e8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1030>
   133e6:	cb c1       	rjmp	.+918    	; 0x1377e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   133e8:	90 2f       	mov	r25, r16
   133ea:	80 2f       	mov	r24, r16
   133ec:	89 1b       	sub	r24, r25
   133ee:	20 2f       	mov	r18, r16
   133f0:	30 e0       	ldi	r19, 0x00	; 0
   133f2:	f4 01       	movw	r30, r8
   133f4:	01 90       	ld	r0, Z+
   133f6:	00 20       	and	r0, r0
   133f8:	e9 f7       	brne	.-6      	; 0x133f4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x103c>
   133fa:	31 97       	sbiw	r30, 0x01	; 1
   133fc:	e8 19       	sub	r30, r8
   133fe:	f9 09       	sbc	r31, r9
   13400:	2e 17       	cp	r18, r30
   13402:	3f 07       	cpc	r19, r31
   13404:	70 f4       	brcc	.+28     	; 0x13422 <mqtt_callback(char*, unsigned char*, unsigned int)+0x106a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
    {
      str1[cnt] = topic[f];
   13406:	e8 ec       	ldi	r30, 0xC8	; 200
   13408:	f0 e0       	ldi	r31, 0x00	; 0
   1340a:	ec 0f       	add	r30, r28
   1340c:	fd 1f       	adc	r31, r29
   1340e:	e8 0f       	add	r30, r24
   13410:	f1 1d       	adc	r31, r1
   13412:	28 0d       	add	r18, r8
   13414:	39 1d       	adc	r19, r9
   13416:	d9 01       	movw	r26, r18
   13418:	8c 91       	ld	r24, X
   1341a:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
      str1[cnt + 1] = 0;
   1341c:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2473
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   1341e:	0f 5f       	subi	r16, 0xFF	; 255
   13420:	e4 cf       	rjmp	.-56     	; 0x133ea <mqtt_callback(char*, unsigned char*, unsigned int)+0x1032>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2480
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13422:	60 e9       	ldi	r22, 0x90	; 144
   13424:	75 e0       	ldi	r23, 0x05	; 5
   13426:	ce 01       	movw	r24, r28
   13428:	88 53       	subi	r24, 0x38	; 56
   1342a:	9f 4f       	sbci	r25, 0xFF	; 255
   1342c:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13430:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2479
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13432:	e1 2c       	mov	r14, r1
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   13434:	51 e2       	ldi	r21, 0x21	; 33
   13436:	d5 2e       	mov	r13, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
          thermostat_ring_set_mode(id, active);
          if (active == TERM_MODE_MAN_HEAT)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
          if (active == TERM_MODE_MAN_COOL)
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
          change_term_mode = 1;
   13438:	cc 24       	eor	r12, r12
   1343a:	c3 94       	inc	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2481
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
   1343c:	01 15       	cp	r16, r1
   1343e:	11 05       	cpc	r17, r1
   13440:	09 f4       	brne	.+2      	; 0x13444 <mqtt_callback(char*, unsigned char*, unsigned int)+0x108c>
   13442:	9d c1       	rjmp	.+826    	; 0x1377e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2483
    {
      if (cnt == 0) id = atoi(pch);
   13444:	e1 10       	cpse	r14, r1
   13446:	0d c0       	rjmp	.+26     	; 0x13462 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10aa>
   13448:	c8 01       	movw	r24, r16
   1344a:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1344e:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
      if (id < MAX_THERMOSTAT)
   13450:	b4 e0       	ldi	r27, 0x04	; 4
   13452:	b8 17       	cp	r27, r24
   13454:	08 f0       	brcs	.+2      	; 0x13458 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
   13456:	8a c1       	rjmp	.+788    	; 0x1376c <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2532
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
   13458:	82 e9       	ldi	r24, 0x92	; 146
   1345a:	95 e0       	ldi	r25, 0x05	; 5
   1345c:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13460:	85 c1       	rjmp	.+778    	; 0x1376c <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
   13462:	e4 e0       	ldi	r30, 0x04	; 4
   13464:	e7 15       	cp	r30, r7
   13466:	c0 f3       	brcs	.-16     	; 0x13458 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
   13468:	f1 e0       	ldi	r31, 0x01	; 1
   1346a:	ef 12       	cpse	r14, r31
   1346c:	7f c1       	rjmp	.+766    	; 0x1376c <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   1346e:	6a ee       	ldi	r22, 0xEA	; 234
   13470:	73 e0       	ldi	r23, 0x03	; 3
   13472:	c8 01       	movw	r24, r16
   13474:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13478:	89 2b       	or	r24, r25
   1347a:	29 f4       	brne	.+10     	; 0x13486 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ce>
   1347c:	65 e0       	ldi	r22, 0x05	; 5
   1347e:	79 e0       	ldi	r23, 0x09	; 9
   13480:	87 2d       	mov	r24, r7
   13482:	0e 94 16 6c 	call	0xd82c	; 0xd82c <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
   13486:	61 ea       	ldi	r22, 0xA1	; 161
   13488:	76 e0       	ldi	r23, 0x06	; 6
   1348a:	c8 01       	movw	r24, r16
   1348c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13490:	89 2b       	or	r24, r25
   13492:	81 f4       	brne	.+32     	; 0x134b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
   13494:	85 e0       	ldi	r24, 0x05	; 5
   13496:	99 e0       	ldi	r25, 0x09	; 9
   13498:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   1349c:	88 30       	cpi	r24, 0x08	; 8
   1349e:	91 05       	cpc	r25, r1
   134a0:	4c f4       	brge	.+18     	; 0x134b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10fc>
thermostat_ring_set_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
   134a2:	7d 9c       	mul	r7, r13
   134a4:	90 01       	movw	r18, r0
   134a6:	11 24       	eor	r1, r1
   134a8:	68 2f       	mov	r22, r24
   134aa:	c9 01       	movw	r24, r18
   134ac:	85 5a       	subi	r24, 0xA5	; 165
   134ae:	9e 4f       	sbci	r25, 0xFE	; 254
   134b0:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0))
   134b4:	69 ea       	ldi	r22, 0xA9	; 169
   134b6:	76 e0       	ldi	r23, 0x06	; 6
   134b8:	c8 01       	movw	r24, r16
   134ba:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   134be:	89 2b       	or	r24, r25
   134c0:	79 f4       	brne	.+30     	; 0x134e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
        {
          thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
   134c2:	85 e0       	ldi	r24, 0x05	; 5
   134c4:	99 e0       	ldi	r25, 0x09	; 9
   134c6:	0e 94 64 ee 	call	0x1dcc8	; 0x1dcc8 <atof>
   134ca:	20 e0       	ldi	r18, 0x00	; 0
   134cc:	30 e0       	ldi	r19, 0x00	; 0
   134ce:	40 e2       	ldi	r20, 0x20	; 32
   134d0:	51 e4       	ldi	r21, 0x41	; 65
   134d2:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
   134d6:	0e 94 ea f9 	call	0x1f3d4	; 0x1f3d4 <__fixsfsi>
   134da:	87 2d       	mov	r24, r7
   134dc:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2494
        }
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0))
   134e0:	67 e9       	ldi	r22, 0x97	; 151
   134e2:	76 e0       	ldi	r23, 0x06	; 6
   134e4:	c8 01       	movw	r24, r16
   134e6:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   134ea:	89 2b       	or	r24, r25
   134ec:	41 f4       	brne	.+16     	; 0x134fe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1146>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2496
        {
          thermostat_ring_set_mezni(id, atoi(my_payload));
   134ee:	85 e0       	ldi	r24, 0x05	; 5
   134f0:	99 e0       	ldi	r25, 0x09	; 9
   134f2:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   134f6:	bc 01       	movw	r22, r24
   134f8:	87 2d       	mov	r24, r7
   134fa:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2498
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
   134fe:	65 eb       	ldi	r22, 0xB5	; 181
   13500:	76 e0       	ldi	r23, 0x06	; 6
   13502:	c8 01       	movw	r24, r16
   13504:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13508:	89 2b       	or	r24, r25
   1350a:	09 f0       	breq	.+2      	; 0x1350e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1156>
   1350c:	5a c0       	rjmp	.+180    	; 0x135c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x120a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2500
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   1350e:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   13512:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
   13516:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3231
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
   1351a:	6f ec       	ldi	r22, 0xCF	; 207
   1351c:	78 e0       	ldi	r23, 0x08	; 8
   1351e:	85 e0       	ldi	r24, 0x05	; 5
   13520:	99 e0       	ldi	r25, 0x09	; 9
   13522:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13526:	ff 24       	eor	r15, r15
   13528:	f3 94       	inc	r15
   1352a:	89 2b       	or	r24, r25
   1352c:	09 f0       	breq	.+2      	; 0x13530 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1178>
   1352e:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
   13530:	6d ea       	ldi	r22, 0xAD	; 173
   13532:	75 e0       	ldi	r23, 0x05	; 5
   13534:	85 e0       	ldi	r24, 0x05	; 5
   13536:	99 e0       	ldi	r25, 0x09	; 9
   13538:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1353c:	89 2b       	or	r24, r25
   1353e:	11 f4       	brne	.+4      	; 0x13544 <mqtt_callback(char*, unsigned char*, unsigned int)+0x118c>
_Z13mqtt_callbackPcPhj():
   13540:	43 e0       	ldi	r20, 0x03	; 3
   13542:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
   13544:	64 eb       	ldi	r22, 0xB4	; 180
   13546:	75 e0       	ldi	r23, 0x05	; 5
   13548:	85 e0       	ldi	r24, 0x05	; 5
   1354a:	99 e0       	ldi	r25, 0x09	; 9
   1354c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13550:	89 2b       	or	r24, r25
   13552:	11 f4       	brne	.+4      	; 0x13558 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11a0>
_Z13mqtt_callbackPcPhj():
   13554:	32 e0       	ldi	r19, 0x02	; 2
   13556:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
   13558:	6f eb       	ldi	r22, 0xBF	; 191
   1355a:	78 e0       	ldi	r23, 0x08	; 8
   1355c:	85 e0       	ldi	r24, 0x05	; 5
   1355e:	99 e0       	ldi	r25, 0x09	; 9
   13560:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13564:	89 2b       	or	r24, r25
   13566:	11 f4       	brne	.+4      	; 0x1356c <mqtt_callback(char*, unsigned char*, unsigned int)+0x11b4>
_Z13mqtt_callbackPcPhj():
   13568:	24 e0       	ldi	r18, 0x04	; 4
   1356a:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3235
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
   1356c:	69 eb       	ldi	r22, 0xB9	; 185
   1356e:	75 e0       	ldi	r23, 0x05	; 5
   13570:	85 e0       	ldi	r24, 0x05	; 5
   13572:	99 e0       	ldi	r25, 0x09	; 9
   13574:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13578:	89 2b       	or	r24, r25
   1357a:	11 f4       	brne	.+4      	; 0x13580 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c8>
_Z13mqtt_callbackPcPhj():
   1357c:	96 e0       	ldi	r25, 0x06	; 6
   1357e:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
          thermostat_ring_set_mezni(id, atoi(my_payload));
        }
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
          active = convert_text_mode(my_payload);
   13580:	ca 5b       	subi	r28, 0xBA	; 186
   13582:	de 4f       	sbci	r29, 0xFE	; 254
   13584:	f8 82       	st	Y, r15
   13586:	c6 54       	subi	r28, 0x46	; 70
   13588:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
          thermostat_ring_set_mode(id, active);
   1358a:	6f 2d       	mov	r22, r15
   1358c:	87 2d       	mov	r24, r7
   1358e:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
          if (active == TERM_MODE_MAN_HEAT)
   13592:	ca 5b       	subi	r28, 0xBA	; 186
   13594:	de 4f       	sbci	r29, 0xFE	; 254
   13596:	88 81       	ld	r24, Y
   13598:	c6 54       	subi	r28, 0x46	; 70
   1359a:	d1 40       	sbci	r29, 0x01	; 1
   1359c:	83 30       	cpi	r24, 0x03	; 3
   1359e:	21 f4       	brne	.+8      	; 0x135a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11f0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   135a0:	60 e0       	ldi	r22, 0x00	; 0
   135a2:	87 2d       	mov	r24, r7
   135a4:	0e 94 4f da 	call	0x1b49e	; 0x1b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
          if (active == TERM_MODE_MAN_COOL)
   135a8:	ca 5b       	subi	r28, 0xBA	; 186
   135aa:	de 4f       	sbci	r29, 0xFE	; 254
   135ac:	88 81       	ld	r24, Y
   135ae:	c6 54       	subi	r28, 0x46	; 70
   135b0:	d1 40       	sbci	r29, 0x01	; 1
   135b2:	85 30       	cpi	r24, 0x05	; 5
   135b4:	21 f4       	brne	.+8      	; 0x135be <mqtt_callback(char*, unsigned char*, unsigned int)+0x1206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   135b6:	61 e0       	ldi	r22, 0x01	; 1
   135b8:	87 2d       	mov	r24, r7
   135ba:	0e 94 4f da 	call	0x1b49e	; 0x1b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2507
          change_term_mode = 1;
   135be:	c0 92 9a 09 	sts	0x099A, r12	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2510

        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
   135c2:	6a eb       	ldi	r22, 0xBA	; 186
   135c4:	76 e0       	ldi	r23, 0x06	; 6
   135c6:	c8 01       	movw	r24, r16
   135c8:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   135cc:	89 2b       	or	r24, r25
   135ce:	59 f5       	brne	.+86     	; 0x13626 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2512
        {
          thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   135d0:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
   135d4:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
   135d8:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
          active = atoi(my_payload);
   135dc:	85 e0       	ldi	r24, 0x05	; 5
   135de:	99 e0       	ldi	r25, 0x09	; 9
   135e0:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   135e4:	ca 5b       	subi	r28, 0xBA	; 186
   135e6:	de 4f       	sbci	r29, 0xFE	; 254
   135e8:	88 83       	st	Y, r24
   135ea:	c6 54       	subi	r28, 0x46	; 70
   135ec:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2514
          thermostat_ring_set_mode(id, active);
   135ee:	68 2f       	mov	r22, r24
   135f0:	87 2d       	mov	r24, r7
   135f2:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2515
          if (active == TERM_MODE_MAN_HEAT)
   135f6:	ca 5b       	subi	r28, 0xBA	; 186
   135f8:	de 4f       	sbci	r29, 0xFE	; 254
   135fa:	88 81       	ld	r24, Y
   135fc:	c6 54       	subi	r28, 0x46	; 70
   135fe:	d1 40       	sbci	r29, 0x01	; 1
   13600:	83 30       	cpi	r24, 0x03	; 3
   13602:	21 f4       	brne	.+8      	; 0x1360c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2516
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
   13604:	60 e0       	ldi	r22, 0x00	; 0
   13606:	87 2d       	mov	r24, r7
   13608:	0e 94 4f da 	call	0x1b49e	; 0x1b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2517
          if (active == TERM_MODE_MAN_COOL)
   1360c:	ca 5b       	subi	r28, 0xBA	; 186
   1360e:	de 4f       	sbci	r29, 0xFE	; 254
   13610:	88 81       	ld	r24, Y
   13612:	c6 54       	subi	r28, 0x46	; 70
   13614:	d1 40       	sbci	r29, 0x01	; 1
   13616:	85 30       	cpi	r24, 0x05	; 5
   13618:	21 f4       	brne	.+8      	; 0x13622 <mqtt_callback(char*, unsigned char*, unsigned int)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2518
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
   1361a:	61 e0       	ldi	r22, 0x01	; 1
   1361c:	87 2d       	mov	r24, r7
   1361e:	0e 94 4f da 	call	0x1b49e	; 0x1b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
          change_term_mode = 1;
   13622:	c0 92 9a 09 	sts	0x099A, r12	; 0x80099a <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2521
        }
        if ((cnt == 1) && (strcmp(pch, "input") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
   13626:	6f eb       	ldi	r22, 0xBF	; 191
   13628:	76 e0       	ldi	r23, 0x06	; 6
   1362a:	c8 01       	movw	r24, r16
   1362c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13630:	89 2b       	or	r24, r25
   13632:	69 f4       	brne	.+26     	; 0x1364e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1296>
   13634:	85 e0       	ldi	r24, 0x05	; 5
   13636:	99 e0       	ldi	r25, 0x09	; 9
   13638:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
   1363c:	7d 9c       	mul	r7, r13
   1363e:	90 01       	movw	r18, r0
   13640:	11 24       	eor	r1, r1
   13642:	68 2f       	mov	r22, r24
   13644:	c9 01       	movw	r24, r18
   13646:	84 5a       	subi	r24, 0xA4	; 164
   13648:	9e 4f       	sbci	r25, 0xFE	; 254
   1364a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
        //if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
   1364e:	64 ef       	ldi	r22, 0xF4	; 244
   13650:	73 e0       	ldi	r23, 0x03	; 3
   13652:	c8 01       	movw	r24, r16
   13654:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13658:	89 2b       	or	r24, r25
   1365a:	69 f4       	brne	.+26     	; 0x13676 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12be>
   1365c:	85 e0       	ldi	r24, 0x05	; 5
   1365e:	99 e0       	ldi	r25, 0x09	; 9
   13660:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
   13664:	7d 9c       	mul	r7, r13
   13666:	90 01       	movw	r18, r0
   13668:	11 24       	eor	r1, r1
   1366a:	68 2f       	mov	r22, r24
   1366c:	c9 01       	movw	r24, r18
   1366e:	83 5a       	subi	r24, 0xA3	; 163
   13670:	9e 4f       	sbci	r25, 0xFE	; 254
   13672:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
   13676:	65 ec       	ldi	r22, 0xC5	; 197
   13678:	76 e0       	ldi	r23, 0x06	; 6
   1367a:	c8 01       	movw	r24, r16
   1367c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13680:	89 2b       	or	r24, r25
   13682:	69 f4       	brne	.+26     	; 0x1369e <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
   13684:	85 e0       	ldi	r24, 0x05	; 5
   13686:	99 e0       	ldi	r25, 0x09	; 9
   13688:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
   1368c:	7d 9c       	mul	r7, r13
   1368e:	90 01       	movw	r18, r0
   13690:	11 24       	eor	r1, r1
   13692:	68 2f       	mov	r22, r24
   13694:	c9 01       	movw	r24, r18
   13696:	81 5a       	subi	r24, 0xA1	; 161
   13698:	9e 4f       	sbci	r25, 0xFE	; 254
   1369a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2525
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
   1369e:	6c ec       	ldi	r22, 0xCC	; 204
   136a0:	76 e0       	ldi	r23, 0x06	; 6
   136a2:	c8 01       	movw	r24, r16
   136a4:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   136a8:	89 2b       	or	r24, r25
   136aa:	a1 f4       	brne	.+40     	; 0x136d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x131c>
   136ac:	85 e0       	ldi	r24, 0x05	; 5
   136ae:	99 e0       	ldi	r25, 0x09	; 9
   136b0:	0e 94 64 ee 	call	0x1dcc8	; 0x1dcc8 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
   136b4:	24 e0       	ldi	r18, 0x04	; 4
   136b6:	72 9e       	mul	r7, r18
   136b8:	f0 01       	movw	r30, r0
   136ba:	11 24       	eor	r1, r1
   136bc:	e8 54       	subi	r30, 0x48	; 72
   136be:	f5 4f       	sbci	r31, 0xF5	; 245
   136c0:	60 83       	st	Z, r22
   136c2:	71 83       	std	Z+1, r23	; 0x01
   136c4:	82 83       	std	Z+2, r24	; 0x02
   136c6:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
   136c8:	87 2d       	mov	r24, r7
   136ca:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
   136ce:	87 2d       	mov	r24, r7
   136d0:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2526
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
   136d4:	63 ed       	ldi	r22, 0xD3	; 211
   136d6:	76 e0       	ldi	r23, 0x06	; 6
   136d8:	c8 01       	movw	r24, r16
   136da:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   136de:	89 2b       	or	r24, r25
   136e0:	a1 f4       	brne	.+40     	; 0x1370a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
   136e2:	85 e0       	ldi	r24, 0x05	; 5
   136e4:	99 e0       	ldi	r25, 0x09	; 9
   136e6:	0e 94 64 ee 	call	0x1dcc8	; 0x1dcc8 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
   136ea:	a4 e0       	ldi	r26, 0x04	; 4
   136ec:	7a 9e       	mul	r7, r26
   136ee:	f0 01       	movw	r30, r0
   136f0:	11 24       	eor	r1, r1
   136f2:	e4 53       	subi	r30, 0x34	; 52
   136f4:	f5 4f       	sbci	r31, 0xF5	; 245
   136f6:	60 83       	st	Z, r22
   136f8:	71 83       	std	Z+1, r23	; 0x01
   136fa:	82 83       	std	Z+2, r24	; 0x02
   136fc:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
   136fe:	87 2d       	mov	r24, r7
   13700:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
   13704:	87 2d       	mov	r24, r7
   13706:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2527
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
   1370a:	6a ed       	ldi	r22, 0xDA	; 218
   1370c:	76 e0       	ldi	r23, 0x06	; 6
   1370e:	c8 01       	movw	r24, r16
   13710:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13714:	89 2b       	or	r24, r25
   13716:	a1 f4       	brne	.+40     	; 0x13740 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1388>
   13718:	85 e0       	ldi	r24, 0x05	; 5
   1371a:	99 e0       	ldi	r25, 0x09	; 9
   1371c:	0e 94 64 ee 	call	0x1dcc8	; 0x1dcc8 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
   13720:	b4 e0       	ldi	r27, 0x04	; 4
   13722:	7b 9e       	mul	r7, r27
   13724:	f0 01       	movw	r30, r0
   13726:	11 24       	eor	r1, r1
   13728:	e0 52       	subi	r30, 0x20	; 32
   1372a:	f5 4f       	sbci	r31, 0xF5	; 245
   1372c:	60 83       	st	Z, r22
   1372e:	71 83       	std	Z+1, r23	; 0x01
   13730:	82 83       	std	Z+2, r24	; 0x02
   13732:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
   13734:	87 2d       	mov	r24, r7
   13736:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
   1373a:	87 2d       	mov	r24, r7
   1373c:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
   13740:	61 ee       	ldi	r22, 0xE1	; 225
   13742:	76 e0       	ldi	r23, 0x06	; 6
   13744:	c8 01       	movw	r24, r16
   13746:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   1374a:	89 2b       	or	r24, r25
   1374c:	79 f4       	brne	.+30     	; 0x1376c <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b4>
   1374e:	85 e0       	ldi	r24, 0x05	; 5
   13750:	99 e0       	ldi	r25, 0x09	; 9
   13752:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
   13756:	e7 2d       	mov	r30, r7
   13758:	f0 e0       	ldi	r31, 0x00	; 0
   1375a:	ec 50       	subi	r30, 0x0C	; 12
   1375c:	f5 4f       	sbci	r31, 0xF5	; 245
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2528
   1375e:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
   13760:	87 2d       	mov	r24, r7
   13762:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
   13766:	87 2d       	mov	r24, r7
   13768:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
   1376c:	60 e9       	ldi	r22, 0x90	; 144
   1376e:	75 e0       	ldi	r23, 0x05	; 5
   13770:	90 e0       	ldi	r25, 0x00	; 0
   13772:	80 e0       	ldi	r24, 0x00	; 0
   13774:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13778:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
      cnt++;
   1377a:	e3 94       	inc	r14
   1377c:	5f ce       	rjmp	.-834    	; 0x1343c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1084>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
   1377e:	68 e5       	ldi	r22, 0x58	; 88
   13780:	71 e8       	ldi	r23, 0x81	; 129
   13782:	c5 01       	movw	r24, r10
   13784:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  strcat(str1, device.nazev);
   13788:	6f e2       	ldi	r22, 0x2F	; 47
   1378a:	7e e0       	ldi	r23, 0x0E	; 14
   1378c:	c5 01       	movw	r24, r10
   1378e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2542
  strcat(str1, "/ring/clear");
   13792:	62 ec       	ldi	r22, 0xC2	; 194
   13794:	75 e0       	ldi	r23, 0x05	; 5
   13796:	c5 01       	movw	r24, r10
   13798:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2543
  if (strncmp(str1, topic, strlen(str1)) == 0)
   1379c:	f5 01       	movw	r30, r10
   1379e:	01 90       	ld	r0, Z+
   137a0:	00 20       	and	r0, r0
   137a2:	e9 f7       	brne	.-6      	; 0x1379e <mqtt_callback(char*, unsigned char*, unsigned int)+0x13e6>
   137a4:	31 97       	sbiw	r30, 0x01	; 1
   137a6:	af 01       	movw	r20, r30
   137a8:	4a 19       	sub	r20, r10
   137aa:	5b 09       	sbc	r21, r11
   137ac:	b4 01       	movw	r22, r8
   137ae:	c5 01       	movw	r24, r10
   137b0:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   137b4:	89 2b       	or	r24, r25
   137b6:	a1 f4       	brne	.+40     	; 0x137e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2545
  {
    mqtt_process_message++;
   137b8:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   137bc:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   137c0:	01 96       	adiw	r24, 0x01	; 1
   137c2:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   137c6:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2546
    id = atoi(my_payload);
   137ca:	85 e0       	ldi	r24, 0x05	; 5
   137cc:	99 e0       	ldi	r25, 0x09	; 9
   137ce:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   137d2:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2547
    if (id < MAX_THERMOSTAT)
   137d4:	e4 e0       	ldi	r30, 0x04	; 4
   137d6:	e8 17       	cp	r30, r24
   137d8:	08 f4       	brcc	.+2      	; 0x137dc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1424>
   137da:	9c c1       	rjmp	.+824    	; 0x13b14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x175c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2549
    {
      thermostat_ring_clear(id);
   137dc:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
   137e0:	68 e5       	ldi	r22, 0x58	; 88
   137e2:	71 e8       	ldi	r23, 0x81	; 129
   137e4:	c5 01       	movw	r24, r10
   137e6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2561
  strcat(str1, device.nazev);
   137ea:	6f e2       	ldi	r22, 0x2F	; 47
   137ec:	7e e0       	ldi	r23, 0x0E	; 14
   137ee:	c5 01       	movw	r24, r10
   137f0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2562
  strcat(str1, "/network/get/config");
   137f4:	60 ee       	ldi	r22, 0xE0	; 224
   137f6:	75 e0       	ldi	r23, 0x05	; 5
   137f8:	c5 01       	movw	r24, r10
   137fa:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
  if (strncmp(str1, topic, strlen(str1)) == 0)
   137fe:	f5 01       	movw	r30, r10
   13800:	01 90       	ld	r0, Z+
   13802:	00 20       	and	r0, r0
   13804:	e9 f7       	brne	.-6      	; 0x13800 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1448>
   13806:	31 97       	sbiw	r30, 0x01	; 1
   13808:	af 01       	movw	r20, r30
   1380a:	4a 19       	sub	r20, r10
   1380c:	5b 09       	sbc	r21, r11
   1380e:	b4 01       	movw	r22, r8
   13810:	c5 01       	movw	r24, r10
   13812:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   13816:	89 2b       	or	r24, r25
   13818:	09 f0       	breq	.+2      	; 0x1381c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1464>
   1381a:	2f c1       	rjmp	.+606    	; 0x13a7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x16c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2565
  {
    mqtt_process_message++;
   1381c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13820:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13824:	01 96       	adiw	r24, 0x01	; 1
   13826:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   1382a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:263
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
   1382e:	c8 5d       	subi	r28, 0xD8	; 216
   13830:	de 4f       	sbci	r29, 0xFE	; 254
   13832:	18 82       	st	Y, r1
   13834:	c8 52       	subi	r28, 0x28	; 40
   13836:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:264
  createString(payload, ':', device.mac, 6, 16);
   13838:	00 e1       	ldi	r16, 0x10	; 16
   1383a:	26 e0       	ldi	r18, 0x06	; 6
   1383c:	49 e1       	ldi	r20, 0x19	; 25
   1383e:	5e e0       	ldi	r21, 0x0E	; 14
   13840:	6a e3       	ldi	r22, 0x3A	; 58
   13842:	ce 01       	movw	r24, r28
   13844:	88 5d       	subi	r24, 0xD8	; 216
   13846:	9e 4f       	sbci	r25, 0xFE	; 254
   13848:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:265
  strcpy_P(str_topic, network_mac);
   1384c:	6f ea       	ldi	r22, 0xAF	; 175
   1384e:	70 e8       	ldi	r23, 0x80	; 128
   13850:	ce 01       	movw	r24, r28
   13852:	88 5b       	subi	r24, 0xB8	; 184
   13854:	9f 4f       	sbci	r25, 0xFF	; 255
   13856:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:266
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1385a:	ae 01       	movw	r20, r28
   1385c:	48 5d       	subi	r20, 0xD8	; 216
   1385e:	5e 4f       	sbci	r21, 0xFE	; 254
   13860:	be 01       	movw	r22, r28
   13862:	68 5b       	subi	r22, 0xB8	; 184
   13864:	7f 4f       	sbci	r23, 0xFF	; 255
   13866:	8f e2       	ldi	r24, 0x2F	; 47
   13868:	90 e1       	ldi	r25, 0x10	; 16
   1386a:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:268
  ///
  payload[0] = 0;
   1386e:	c8 5d       	subi	r28, 0xD8	; 216
   13870:	de 4f       	sbci	r29, 0xFE	; 254
   13872:	18 82       	st	Y, r1
   13874:	c8 52       	subi	r28, 0x28	; 40
   13876:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:269
  createString(payload, '.', device.myIP, 4, 10);
   13878:	0a e0       	ldi	r16, 0x0A	; 10
   1387a:	24 e0       	ldi	r18, 0x04	; 4
   1387c:	4f e1       	ldi	r20, 0x1F	; 31
   1387e:	5e e0       	ldi	r21, 0x0E	; 14
   13880:	6e e2       	ldi	r22, 0x2E	; 46
   13882:	ce 01       	movw	r24, r28
   13884:	88 5d       	subi	r24, 0xD8	; 216
   13886:	9e 4f       	sbci	r25, 0xFE	; 254
   13888:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:270
  strcpy_P(str_topic, network_ip);
   1388c:	62 ed       	ldi	r22, 0xD2	; 210
   1388e:	77 e8       	ldi	r23, 0x87	; 135
   13890:	ce 01       	movw	r24, r28
   13892:	88 5b       	subi	r24, 0xB8	; 184
   13894:	9f 4f       	sbci	r25, 0xFF	; 255
   13896:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:271
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1389a:	ae 01       	movw	r20, r28
   1389c:	48 5d       	subi	r20, 0xD8	; 216
   1389e:	5e 4f       	sbci	r21, 0xFE	; 254
   138a0:	be 01       	movw	r22, r28
   138a2:	68 5b       	subi	r22, 0xB8	; 184
   138a4:	7f 4f       	sbci	r23, 0xFF	; 255
   138a6:	8f e2       	ldi	r24, 0x2F	; 47
   138a8:	90 e1       	ldi	r25, 0x10	; 16
   138aa:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:273
  ///
  payload[0] = 0;
   138ae:	c8 5d       	subi	r28, 0xD8	; 216
   138b0:	de 4f       	sbci	r29, 0xFE	; 254
   138b2:	18 82       	st	Y, r1
   138b4:	c8 52       	subi	r28, 0x28	; 40
   138b6:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:274
  createString(payload, '.', device.myMASK, 4, 10);
   138b8:	24 e0       	ldi	r18, 0x04	; 4
   138ba:	43 e2       	ldi	r20, 0x23	; 35
   138bc:	5e e0       	ldi	r21, 0x0E	; 14
   138be:	6e e2       	ldi	r22, 0x2E	; 46
   138c0:	ce 01       	movw	r24, r28
   138c2:	88 5d       	subi	r24, 0xD8	; 216
   138c4:	9e 4f       	sbci	r25, 0xFE	; 254
   138c6:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:275
  strcpy_P(str_topic, network_netmask);
   138ca:	6f e9       	ldi	r22, 0x9F	; 159
   138cc:	70 e8       	ldi	r23, 0x80	; 128
   138ce:	ce 01       	movw	r24, r28
   138d0:	88 5b       	subi	r24, 0xB8	; 184
   138d2:	9f 4f       	sbci	r25, 0xFF	; 255
   138d4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:276
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   138d8:	ae 01       	movw	r20, r28
   138da:	48 5d       	subi	r20, 0xD8	; 216
   138dc:	5e 4f       	sbci	r21, 0xFE	; 254
   138de:	be 01       	movw	r22, r28
   138e0:	68 5b       	subi	r22, 0xB8	; 184
   138e2:	7f 4f       	sbci	r23, 0xFF	; 255
   138e4:	8f e2       	ldi	r24, 0x2F	; 47
   138e6:	90 e1       	ldi	r25, 0x10	; 16
   138e8:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:278
  ///
  payload[0] = 0;
   138ec:	c8 5d       	subi	r28, 0xD8	; 216
   138ee:	de 4f       	sbci	r29, 0xFE	; 254
   138f0:	18 82       	st	Y, r1
   138f2:	c8 52       	subi	r28, 0x28	; 40
   138f4:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:279
  createString(payload, '.', device.myGW, 4, 10);
   138f6:	24 e0       	ldi	r18, 0x04	; 4
   138f8:	4b e2       	ldi	r20, 0x2B	; 43
   138fa:	5e e0       	ldi	r21, 0x0E	; 14
   138fc:	6e e2       	ldi	r22, 0x2E	; 46
   138fe:	ce 01       	movw	r24, r28
   13900:	88 5d       	subi	r24, 0xD8	; 216
   13902:	9e 4f       	sbci	r25, 0xFE	; 254
   13904:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:280
  strcpy_P(str_topic, network_gw);
   13908:	64 e9       	ldi	r22, 0x94	; 148
   1390a:	70 e8       	ldi	r23, 0x80	; 128
   1390c:	ce 01       	movw	r24, r28
   1390e:	88 5b       	subi	r24, 0xB8	; 184
   13910:	9f 4f       	sbci	r25, 0xFF	; 255
   13912:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:281
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13916:	ae 01       	movw	r20, r28
   13918:	48 5d       	subi	r20, 0xD8	; 216
   1391a:	5e 4f       	sbci	r21, 0xFE	; 254
   1391c:	be 01       	movw	r22, r28
   1391e:	68 5b       	subi	r22, 0xB8	; 184
   13920:	7f 4f       	sbci	r23, 0xFF	; 255
   13922:	8f e2       	ldi	r24, 0x2F	; 47
   13924:	90 e1       	ldi	r25, 0x10	; 16
   13926:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:283
  ///
  payload[0] = 0;
   1392a:	c8 5d       	subi	r28, 0xD8	; 216
   1392c:	de 4f       	sbci	r29, 0xFE	; 254
   1392e:	18 82       	st	Y, r1
   13930:	c8 52       	subi	r28, 0x28	; 40
   13932:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:284
  createString(payload, '.', device.myDNS, 4, 10);
   13934:	24 e0       	ldi	r18, 0x04	; 4
   13936:	47 e2       	ldi	r20, 0x27	; 39
   13938:	5e e0       	ldi	r21, 0x0E	; 14
   1393a:	6e e2       	ldi	r22, 0x2E	; 46
   1393c:	ce 01       	movw	r24, r28
   1393e:	88 5d       	subi	r24, 0xD8	; 216
   13940:	9e 4f       	sbci	r25, 0xFE	; 254
   13942:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:285
  strcpy_P(str_topic, network_dns);
   13946:	68 e8       	ldi	r22, 0x88	; 136
   13948:	70 e8       	ldi	r23, 0x80	; 128
   1394a:	ce 01       	movw	r24, r28
   1394c:	88 5b       	subi	r24, 0xB8	; 184
   1394e:	9f 4f       	sbci	r25, 0xFF	; 255
   13950:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:286
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13954:	ae 01       	movw	r20, r28
   13956:	48 5d       	subi	r20, 0xD8	; 216
   13958:	5e 4f       	sbci	r21, 0xFE	; 254
   1395a:	be 01       	movw	r22, r28
   1395c:	68 5b       	subi	r22, 0xB8	; 184
   1395e:	7f 4f       	sbci	r23, 0xFF	; 255
   13960:	8f e2       	ldi	r24, 0x2F	; 47
   13962:	90 e1       	ldi	r25, 0x10	; 16
   13964:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:288
  ///
  payload[0] = 0;
   13968:	c8 5d       	subi	r28, 0xD8	; 216
   1396a:	de 4f       	sbci	r29, 0xFE	; 254
   1396c:	18 82       	st	Y, r1
   1396e:	c8 52       	subi	r28, 0x28	; 40
   13970:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:289
  createString(payload, '.', device.ntp_server, 4, 10);
   13972:	24 e0       	ldi	r18, 0x04	; 4
   13974:	47 e6       	ldi	r20, 0x67	; 103
   13976:	5e e0       	ldi	r21, 0x0E	; 14
   13978:	6e e2       	ldi	r22, 0x2E	; 46
   1397a:	ce 01       	movw	r24, r28
   1397c:	88 5d       	subi	r24, 0xD8	; 216
   1397e:	9e 4f       	sbci	r25, 0xFE	; 254
   13980:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:290
  strcpy_P(str_topic, network_ntp);
   13984:	6c e7       	ldi	r22, 0x7C	; 124
   13986:	70 e8       	ldi	r23, 0x80	; 128
   13988:	ce 01       	movw	r24, r28
   1398a:	88 5b       	subi	r24, 0xB8	; 184
   1398c:	9f 4f       	sbci	r25, 0xFF	; 255
   1398e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:291
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13992:	ae 01       	movw	r20, r28
   13994:	48 5d       	subi	r20, 0xD8	; 216
   13996:	5e 4f       	sbci	r21, 0xFE	; 254
   13998:	be 01       	movw	r22, r28
   1399a:	68 5b       	subi	r22, 0xB8	; 184
   1399c:	7f 4f       	sbci	r23, 0xFF	; 255
   1399e:	8f e2       	ldi	r24, 0x2F	; 47
   139a0:	90 e1       	ldi	r25, 0x10	; 16
   139a2:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:293
  ///
  payload[0] = 0;
   139a6:	c8 5d       	subi	r28, 0xD8	; 216
   139a8:	de 4f       	sbci	r29, 0xFE	; 254
   139aa:	18 82       	st	Y, r1
   139ac:	c8 52       	subi	r28, 0x28	; 40
   139ae:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:294
  createString(payload, '.', device.mqtt_server, 4, 10);
   139b0:	24 e0       	ldi	r18, 0x04	; 4
   139b2:	49 e3       	ldi	r20, 0x39	; 57
   139b4:	5e e0       	ldi	r21, 0x0E	; 14
   139b6:	6e e2       	ldi	r22, 0x2E	; 46
   139b8:	ce 01       	movw	r24, r28
   139ba:	88 5d       	subi	r24, 0xD8	; 216
   139bc:	9e 4f       	sbci	r25, 0xFE	; 254
   139be:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:295
  strcpy_P(str_topic, network_mqtt_host);
   139c2:	6a e6       	ldi	r22, 0x6A	; 106
   139c4:	70 e8       	ldi	r23, 0x80	; 128
   139c6:	ce 01       	movw	r24, r28
   139c8:	88 5b       	subi	r24, 0xB8	; 184
   139ca:	9f 4f       	sbci	r25, 0xFF	; 255
   139cc:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:296
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   139d0:	ae 01       	movw	r20, r28
   139d2:	48 5d       	subi	r20, 0xD8	; 216
   139d4:	5e 4f       	sbci	r21, 0xFE	; 254
   139d6:	be 01       	movw	r22, r28
   139d8:	68 5b       	subi	r22, 0xB8	; 184
   139da:	7f 4f       	sbci	r23, 0xFF	; 255
   139dc:	8f e2       	ldi	r24, 0x2F	; 47
   139de:	90 e1       	ldi	r25, 0x10	; 16
   139e0:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   139e4:	4a e0       	ldi	r20, 0x0A	; 10
   139e6:	be 01       	movw	r22, r28
   139e8:	68 5d       	subi	r22, 0xD8	; 216
   139ea:	7e 4f       	sbci	r23, 0xFE	; 254
   139ec:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <device+0x24>
   139f0:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <device+0x25>
   139f4:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:299
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
   139f8:	68 e5       	ldi	r22, 0x58	; 88
   139fa:	70 e8       	ldi	r23, 0x80	; 128
   139fc:	ce 01       	movw	r24, r28
   139fe:	88 5b       	subi	r24, 0xB8	; 184
   13a00:	9f 4f       	sbci	r25, 0xFF	; 255
   13a02:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:300
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
   13a06:	ae 01       	movw	r20, r28
   13a08:	48 5d       	subi	r20, 0xD8	; 216
   13a0a:	5e 4f       	sbci	r21, 0xFE	; 254
   13a0c:	be 01       	movw	r22, r28
   13a0e:	68 5b       	subi	r22, 0xB8	; 184
   13a10:	7f 4f       	sbci	r23, 0xFF	; 255
   13a12:	8f e2       	ldi	r24, 0x2F	; 47
   13a14:	90 e1       	ldi	r25, 0x10	; 16
   13a16:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:302
  ///
  strcpy_P(str_topic, network_mqtt_user);
   13a1a:	66 e4       	ldi	r22, 0x46	; 70
   13a1c:	70 e8       	ldi	r23, 0x80	; 128
   13a1e:	ce 01       	movw	r24, r28
   13a20:	88 5b       	subi	r24, 0xB8	; 184
   13a22:	9f 4f       	sbci	r25, 0xFF	; 255
   13a24:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:303
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
   13a28:	4f e3       	ldi	r20, 0x3F	; 63
   13a2a:	5e e0       	ldi	r21, 0x0E	; 14
   13a2c:	be 01       	movw	r22, r28
   13a2e:	68 5b       	subi	r22, 0xB8	; 184
   13a30:	7f 4f       	sbci	r23, 0xFF	; 255
   13a32:	8f e2       	ldi	r24, 0x2F	; 47
   13a34:	90 e1       	ldi	r25, 0x10	; 16
   13a36:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:305
  ///
  strcpy_P(str_topic, network_mqtt_key);
   13a3a:	65 e3       	ldi	r22, 0x35	; 53
   13a3c:	70 e8       	ldi	r23, 0x80	; 128
   13a3e:	ce 01       	movw	r24, r28
   13a40:	88 5b       	subi	r24, 0xB8	; 184
   13a42:	9f 4f       	sbci	r25, 0xFF	; 255
   13a44:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:306
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
   13a48:	43 e5       	ldi	r20, 0x53	; 83
   13a4a:	5e e0       	ldi	r21, 0x0E	; 14
   13a4c:	be 01       	movw	r22, r28
   13a4e:	68 5b       	subi	r22, 0xB8	; 184
   13a50:	7f 4f       	sbci	r23, 0xFF	; 255
   13a52:	8f e2       	ldi	r24, 0x2F	; 47
   13a54:	90 e1       	ldi	r25, 0x10	; 16
   13a56:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:308
  ///
  strcpy_P(str_topic, network_name);
   13a5a:	68 e2       	ldi	r22, 0x28	; 40
   13a5c:	70 e8       	ldi	r23, 0x80	; 128
   13a5e:	ce 01       	movw	r24, r28
   13a60:	88 5b       	subi	r24, 0xB8	; 184
   13a62:	9f 4f       	sbci	r25, 0xFF	; 255
   13a64:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:309
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
   13a68:	4f e2       	ldi	r20, 0x2F	; 47
   13a6a:	5e e0       	ldi	r21, 0x0E	; 14
   13a6c:	be 01       	movw	r22, r28
   13a6e:	68 5b       	subi	r22, 0xB8	; 184
   13a70:	7f 4f       	sbci	r23, 0xFF	; 255
   13a72:	8f e2       	ldi	r24, 0x2F	; 47
   13a74:	90 e1       	ldi	r25, 0x10	; 16
   13a76:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
   13a7a:	68 e5       	ldi	r22, 0x58	; 88
   13a7c:	71 e8       	ldi	r23, 0x81	; 129
   13a7e:	c5 01       	movw	r24, r10
   13a80:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2581
  strcat(str1, device.nazev);
   13a84:	6f e2       	ldi	r22, 0x2F	; 47
   13a86:	7e e0       	ldi	r23, 0x0E	; 14
   13a88:	c5 01       	movw	r24, r10
   13a8a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2582
  strcat(str1, "/network/set/");
   13a8e:	64 ef       	ldi	r22, 0xF4	; 244
   13a90:	75 e0       	ldi	r23, 0x05	; 5
   13a92:	c5 01       	movw	r24, r10
   13a94:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13a98:	f5 01       	movw	r30, r10
   13a9a:	01 90       	ld	r0, Z+
   13a9c:	00 20       	and	r0, r0
   13a9e:	e9 f7       	brne	.-6      	; 0x13a9a <mqtt_callback(char*, unsigned char*, unsigned int)+0x16e2>
   13aa0:	31 97       	sbiw	r30, 0x01	; 1
   13aa2:	af 01       	movw	r20, r30
   13aa4:	4a 19       	sub	r20, r10
   13aa6:	5b 09       	sbc	r21, r11
   13aa8:	b4 01       	movw	r22, r8
   13aaa:	c5 01       	movw	r24, r10
   13aac:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   13ab0:	89 2b       	or	r24, r25
   13ab2:	09 f0       	breq	.+2      	; 0x13ab6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x16fe>
   13ab4:	04 c1       	rjmp	.+520    	; 0x13cbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2585
  {
    mqtt_process_message++;
   13ab6:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13aba:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13abe:	01 96       	adiw	r24, 0x01	; 1
   13ac0:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13ac4:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13ac8:	f5 01       	movw	r30, r10
   13aca:	01 90       	ld	r0, Z+
   13acc:	00 20       	and	r0, r0
   13ace:	e9 f7       	brne	.-6      	; 0x13aca <mqtt_callback(char*, unsigned char*, unsigned int)+0x1712>
   13ad0:	31 97       	sbiw	r30, 0x01	; 1
   13ad2:	ea 19       	sub	r30, r10
   13ad4:	fb 09       	sbc	r31, r11
   13ad6:	9e 2f       	mov	r25, r30
   13ad8:	4e 2f       	mov	r20, r30
   13ada:	84 2f       	mov	r24, r20
   13adc:	89 1b       	sub	r24, r25
   13ade:	24 2f       	mov	r18, r20
   13ae0:	30 e0       	ldi	r19, 0x00	; 0
   13ae2:	d4 01       	movw	r26, r8
   13ae4:	0d 90       	ld	r0, X+
   13ae6:	00 20       	and	r0, r0
   13ae8:	e9 f7       	brne	.-6      	; 0x13ae4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x172c>
   13aea:	11 97       	sbiw	r26, 0x01	; 1
   13aec:	a8 19       	sub	r26, r8
   13aee:	b9 09       	sbc	r27, r9
   13af0:	2a 17       	cp	r18, r26
   13af2:	3b 07       	cpc	r19, r27
   13af4:	a0 f4       	brcc	.+40     	; 0x13b1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2589
    {
      str1[cnt] = topic[f];
   13af6:	a8 ec       	ldi	r26, 0xC8	; 200
   13af8:	b0 e0       	ldi	r27, 0x00	; 0
   13afa:	ac 0f       	add	r26, r28
   13afc:	bd 1f       	adc	r27, r29
   13afe:	a8 0f       	add	r26, r24
   13b00:	b1 1d       	adc	r27, r1
   13b02:	28 0d       	add	r18, r8
   13b04:	39 1d       	adc	r19, r9
   13b06:	f9 01       	movw	r30, r18
   13b08:	80 81       	ld	r24, Z
   13b0a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590
      str1[cnt + 1] = 0;
   13b0c:	11 96       	adiw	r26, 0x01	; 1
   13b0e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2587
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13b10:	4f 5f       	subi	r20, 0xFF	; 255
   13b12:	e3 cf       	rjmp	.-58     	; 0x13ada <mqtt_callback(char*, unsigned char*, unsigned int)+0x1722>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2553
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
   13b14:	8e ec       	ldi	r24, 0xCE	; 206
   13b16:	95 e0       	ldi	r25, 0x05	; 5
   13b18:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
   13b1c:	61 ce       	rjmp	.-830    	; 0x137e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1428>
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
   13b1e:	60 e9       	ldi	r22, 0x90	; 144
   13b20:	75 e0       	ldi	r23, 0x05	; 5
   13b22:	ce 01       	movw	r24, r28
   13b24:	88 53       	subi	r24, 0x38	; 56
   13b26:	9f 4f       	sbci	r25, 0xFF	; 255
   13b28:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13b2c:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
   13b2e:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
   13b30:	e1 14       	cp	r14, r1
   13b32:	f1 04       	cpc	r15, r1
   13b34:	09 f4       	brne	.+2      	; 0x13b38 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1780>
   13b36:	b7 c0       	rjmp	.+366    	; 0x13ca6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18ee>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
   13b38:	62 e0       	ldi	r22, 0x02	; 2
   13b3a:	76 e0       	ldi	r23, 0x06	; 6
   13b3c:	c7 01       	movw	r24, r14
   13b3e:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13b42:	89 2b       	or	r24, r25
   13b44:	51 f4       	brne	.+20     	; 0x13b5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x17a2>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
   13b46:	26 e0       	ldi	r18, 0x06	; 6
   13b48:	30 e0       	ldi	r19, 0x00	; 0
   13b4a:	49 e1       	ldi	r20, 0x19	; 25
   13b4c:	5e e0       	ldi	r21, 0x0E	; 14
   13b4e:	6a e3       	ldi	r22, 0x3A	; 58
   13b50:	85 e0       	ldi	r24, 0x05	; 5
   13b52:	99 e0       	ldi	r25, 0x09	; 9
   13b54:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
   13b58:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
   13b5a:	66 e0       	ldi	r22, 0x06	; 6
   13b5c:	76 e0       	ldi	r23, 0x06	; 6
   13b5e:	c7 01       	movw	r24, r14
   13b60:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13b64:	89 2b       	or	r24, r25
   13b66:	51 f4       	brne	.+20     	; 0x13b7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x17c4>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
   13b68:	24 e0       	ldi	r18, 0x04	; 4
   13b6a:	30 e0       	ldi	r19, 0x00	; 0
   13b6c:	4f e1       	ldi	r20, 0x1F	; 31
   13b6e:	5e e0       	ldi	r21, 0x0E	; 14
   13b70:	6e e2       	ldi	r22, 0x2E	; 46
   13b72:	85 e0       	ldi	r24, 0x05	; 5
   13b74:	99 e0       	ldi	r25, 0x09	; 9
   13b76:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
   13b7a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
   13b7c:	69 e0       	ldi	r22, 0x09	; 9
   13b7e:	76 e0       	ldi	r23, 0x06	; 6
   13b80:	c7 01       	movw	r24, r14
   13b82:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13b86:	89 2b       	or	r24, r25
   13b88:	51 f4       	brne	.+20     	; 0x13b9e <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
   13b8a:	24 e0       	ldi	r18, 0x04	; 4
   13b8c:	30 e0       	ldi	r19, 0x00	; 0
   13b8e:	43 e2       	ldi	r20, 0x23	; 35
   13b90:	5e e0       	ldi	r21, 0x0E	; 14
   13b92:	6e e2       	ldi	r22, 0x2E	; 46
   13b94:	85 e0       	ldi	r24, 0x05	; 5
   13b96:	99 e0       	ldi	r25, 0x09	; 9
   13b98:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
   13b9c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
   13b9e:	61 e1       	ldi	r22, 0x11	; 17
   13ba0:	76 e0       	ldi	r23, 0x06	; 6
   13ba2:	c7 01       	movw	r24, r14
   13ba4:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13ba8:	89 2b       	or	r24, r25
   13baa:	51 f4       	brne	.+20     	; 0x13bc0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1808>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
   13bac:	24 e0       	ldi	r18, 0x04	; 4
   13bae:	30 e0       	ldi	r19, 0x00	; 0
   13bb0:	4b e2       	ldi	r20, 0x2B	; 43
   13bb2:	5e e0       	ldi	r21, 0x0E	; 14
   13bb4:	6e e2       	ldi	r22, 0x2E	; 46
   13bb6:	85 e0       	ldi	r24, 0x05	; 5
   13bb8:	99 e0       	ldi	r25, 0x09	; 9
   13bba:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
   13bbe:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
   13bc0:	64 e1       	ldi	r22, 0x14	; 20
   13bc2:	76 e0       	ldi	r23, 0x06	; 6
   13bc4:	c7 01       	movw	r24, r14
   13bc6:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13bca:	89 2b       	or	r24, r25
   13bcc:	51 f4       	brne	.+20     	; 0x13be2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x182a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
   13bce:	24 e0       	ldi	r18, 0x04	; 4
   13bd0:	30 e0       	ldi	r19, 0x00	; 0
   13bd2:	47 e2       	ldi	r20, 0x27	; 39
   13bd4:	5e e0       	ldi	r21, 0x0E	; 14
   13bd6:	6e e2       	ldi	r22, 0x2E	; 46
   13bd8:	85 e0       	ldi	r24, 0x05	; 5
   13bda:	99 e0       	ldi	r25, 0x09	; 9
   13bdc:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
   13be0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
   13be2:	68 e1       	ldi	r22, 0x18	; 24
   13be4:	76 e0       	ldi	r23, 0x06	; 6
   13be6:	c7 01       	movw	r24, r14
   13be8:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13bec:	89 2b       	or	r24, r25
   13bee:	51 f4       	brne	.+20     	; 0x13c04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x184c>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.',device.ntp_server, 4, 10);
   13bf0:	24 e0       	ldi	r18, 0x04	; 4
   13bf2:	30 e0       	ldi	r19, 0x00	; 0
   13bf4:	47 e6       	ldi	r20, 0x67	; 103
   13bf6:	5e e0       	ldi	r21, 0x0E	; 14
   13bf8:	6e e2       	ldi	r22, 0x2E	; 46
   13bfa:	85 e0       	ldi	r24, 0x05	; 5
   13bfc:	99 e0       	ldi	r25, 0x09	; 9
   13bfe:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
   13c02:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
   13c04:	6c e1       	ldi	r22, 0x1C	; 28
   13c06:	76 e0       	ldi	r23, 0x06	; 6
   13c08:	c7 01       	movw	r24, r14
   13c0a:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13c0e:	89 2b       	or	r24, r25
   13c10:	51 f4       	brne	.+20     	; 0x13c26 <mqtt_callback(char*, unsigned char*, unsigned int)+0x186e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
   13c12:	24 e0       	ldi	r18, 0x04	; 4
   13c14:	30 e0       	ldi	r19, 0x00	; 0
   13c16:	49 e3       	ldi	r20, 0x39	; 57
   13c18:	5e e0       	ldi	r21, 0x0E	; 14
   13c1a:	6e e2       	ldi	r22, 0x2E	; 46
   13c1c:	85 e0       	ldi	r24, 0x05	; 5
   13c1e:	99 e0       	ldi	r25, 0x09	; 9
   13c20:	0e 94 cb b9 	call	0x17396	; 0x17396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
   13c24:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
   13c26:	66 e2       	ldi	r22, 0x26	; 38
   13c28:	76 e0       	ldi	r23, 0x06	; 6
   13c2a:	c7 01       	movw	r24, r14
   13c2c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13c30:	89 2b       	or	r24, r25
   13c32:	49 f4       	brne	.+18     	; 0x13c46 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
   13c34:	85 e0       	ldi	r24, 0x05	; 5
   13c36:	99 e0       	ldi	r25, 0x09	; 9
   13c38:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13c3c:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   13c40:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
   13c44:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
   13c46:	60 e3       	ldi	r22, 0x30	; 48
   13c48:	76 e0       	ldi	r23, 0x06	; 6
   13c4a:	c7 01       	movw	r24, r14
   13c4c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13c50:	89 2b       	or	r24, r25
   13c52:	39 f4       	brne	.+14     	; 0x13c62 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18aa>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
   13c54:	65 e0       	ldi	r22, 0x05	; 5
   13c56:	79 e0       	ldi	r23, 0x09	; 9
   13c58:	8f e3       	ldi	r24, 0x3F	; 63
   13c5a:	9e e0       	ldi	r25, 0x0E	; 14
   13c5c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
   13c60:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
   13c62:	6a e3       	ldi	r22, 0x3A	; 58
   13c64:	76 e0       	ldi	r23, 0x06	; 6
   13c66:	c7 01       	movw	r24, r14
   13c68:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13c6c:	89 2b       	or	r24, r25
   13c6e:	39 f4       	brne	.+14     	; 0x13c7e <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c6>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
   13c70:	65 e0       	ldi	r22, 0x05	; 5
   13c72:	79 e0       	ldi	r23, 0x09	; 9
   13c74:	83 e5       	ldi	r24, 0x53	; 83
   13c76:	9e e0       	ldi	r25, 0x0E	; 14
   13c78:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
   13c7c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
   13c7e:	6a ee       	ldi	r22, 0xEA	; 234
   13c80:	73 e0       	ldi	r23, 0x03	; 3
   13c82:	c7 01       	movw	r24, r14
   13c84:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13c88:	89 2b       	or	r24, r25
   13c8a:	29 f4       	brne	.+10     	; 0x13c96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18de>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
   13c8c:	85 e0       	ldi	r24, 0x05	; 5
   13c8e:	99 e0       	ldi	r25, 0x09	; 9
   13c90:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
   13c94:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
   13c96:	60 e9       	ldi	r22, 0x90	; 144
   13c98:	75 e0       	ldi	r23, 0x05	; 5
   13c9a:	90 e0       	ldi	r25, 0x00	; 0
   13c9c:	80 e0       	ldi	r24, 0x00	; 0
   13c9e:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13ca2:	7c 01       	movw	r14, r24
   13ca4:	45 cf       	rjmp	.-374    	; 0x13b30 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1778>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2594
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
   13ca6:	11 30       	cpi	r17, 0x01	; 1
   13ca8:	41 f4       	brne	.+16     	; 0x13cba <mqtt_callback(char*, unsigned char*, unsigned int)+0x1902>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2596
    {
      save_setup_network();
   13caa:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2601
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
   13cae:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   13cb2:	80 68       	ori	r24, 0x80	; 128
   13cb4:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
   13cb8:	02 c0       	rjmp	.+4      	; 0x13cbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1906>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2599
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
   13cba:	12 30       	cpi	r17, 0x02	; 2
   13cbc:	c1 f3       	breq	.-16     	; 0x13cae <mqtt_callback(char*, unsigned char*, unsigned int)+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2606
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
   13cbe:	68 e5       	ldi	r22, 0x58	; 88
   13cc0:	71 e8       	ldi	r23, 0x81	; 129
   13cc2:	c5 01       	movw	r24, r10
   13cc4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2607
  strcat(str1, device.nazev);
   13cc8:	6f e2       	ldi	r22, 0x2F	; 47
   13cca:	7e e0       	ldi	r23, 0x0E	; 14
   13ccc:	c5 01       	movw	r24, r10
   13cce:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2608
  strcat(str1, "/light/set/");
   13cd2:	64 e4       	ldi	r22, 0x44	; 68
   13cd4:	76 e0       	ldi	r23, 0x06	; 6
   13cd6:	c5 01       	movw	r24, r10
   13cd8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2609
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13cdc:	f5 01       	movw	r30, r10
   13cde:	01 90       	ld	r0, Z+
   13ce0:	00 20       	and	r0, r0
   13ce2:	e9 f7       	brne	.-6      	; 0x13cde <mqtt_callback(char*, unsigned char*, unsigned int)+0x1926>
   13ce4:	31 97       	sbiw	r30, 0x01	; 1
   13ce6:	af 01       	movw	r20, r30
   13ce8:	4a 19       	sub	r20, r10
   13cea:	5b 09       	sbc	r21, r11
   13cec:	b4 01       	movw	r22, r8
   13cee:	c5 01       	movw	r24, r10
   13cf0:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   13cf4:	89 2b       	or	r24, r25
   13cf6:	09 f0       	breq	.+2      	; 0x13cfa <mqtt_callback(char*, unsigned char*, unsigned int)+0x1942>
   13cf8:	46 c0       	rjmp	.+140    	; 0x13d86 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
  {
    mqtt_process_message++;
   13cfa:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13cfe:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13d02:	01 96       	adiw	r24, 0x01	; 1
   13d04:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13d08:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13d0c:	f5 01       	movw	r30, r10
   13d0e:	01 90       	ld	r0, Z+
   13d10:	00 20       	and	r0, r0
   13d12:	e9 f7       	brne	.-6      	; 0x13d0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1956>
   13d14:	31 97       	sbiw	r30, 0x01	; 1
   13d16:	ea 19       	sub	r30, r10
   13d18:	fb 09       	sbc	r31, r11
   13d1a:	9e 2f       	mov	r25, r30
   13d1c:	4e 2f       	mov	r20, r30
   13d1e:	84 2f       	mov	r24, r20
   13d20:	89 1b       	sub	r24, r25
   13d22:	24 2f       	mov	r18, r20
   13d24:	30 e0       	ldi	r19, 0x00	; 0
   13d26:	d4 01       	movw	r26, r8
   13d28:	0d 90       	ld	r0, X+
   13d2a:	00 20       	and	r0, r0
   13d2c:	e9 f7       	brne	.-6      	; 0x13d28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1970>
   13d2e:	11 97       	sbiw	r26, 0x01	; 1
   13d30:	a8 19       	sub	r26, r8
   13d32:	b9 09       	sbc	r27, r9
   13d34:	2a 17       	cp	r18, r26
   13d36:	3b 07       	cpc	r19, r27
   13d38:	78 f4       	brcc	.+30     	; 0x13d58 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2616
    {
      str1[cnt] = topic[f];
   13d3a:	a8 ec       	ldi	r26, 0xC8	; 200
   13d3c:	b0 e0       	ldi	r27, 0x00	; 0
   13d3e:	ac 0f       	add	r26, r28
   13d40:	bd 1f       	adc	r27, r29
   13d42:	a8 0f       	add	r26, r24
   13d44:	b1 1d       	adc	r27, r1
   13d46:	28 0d       	add	r18, r8
   13d48:	39 1d       	adc	r19, r9
   13d4a:	f9 01       	movw	r30, r18
   13d4c:	80 81       	ld	r24, Z
   13d4e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2617
      str1[cnt + 1] = 0;
   13d50:	11 96       	adiw	r26, 0x01	; 1
   13d52:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2614
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13d54:	4f 5f       	subi	r20, 0xFF	; 255
   13d56:	e3 cf       	rjmp	.-58     	; 0x13d1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1966>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2621
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13d58:	60 e9       	ldi	r22, 0x90	; 144
   13d5a:	75 e0       	ldi	r23, 0x05	; 5
   13d5c:	ce 01       	movw	r24, r28
   13d5e:	88 53       	subi	r24, 0x38	; 56
   13d60:	9f 4f       	sbci	r25, 0xFF	; 255
   13d62:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13d66:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2622
    pch = strtok (str1, "/");
    while (pch != NULL)
   13d68:	00 97       	sbiw	r24, 0x00	; 0
   13d6a:	69 f0       	breq	.+26     	; 0x13d86 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2624
    {
      if (cnt == 0) id = atoi(pch);
   13d6c:	11 11       	cpse	r17, r1
   13d6e:	03 c0       	rjmp	.+6      	; 0x13d76 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19be>
   13d70:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13d74:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2627
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
   13d76:	60 e9       	ldi	r22, 0x90	; 144
   13d78:	75 e0       	ldi	r23, 0x05	; 5
   13d7a:	90 e0       	ldi	r25, 0x00	; 0
   13d7c:	80 e0       	ldi	r24, 0x00	; 0
   13d7e:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2628
      cnt++;
   13d82:	1f 5f       	subi	r17, 0xFF	; 255
   13d84:	f1 cf       	rjmp	.-30     	; 0x13d68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2633
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
   13d86:	6c e0       	ldi	r22, 0x0C	; 12
   13d88:	71 e8       	ldi	r23, 0x81	; 129
   13d8a:	c5 01       	movw	r24, r10
   13d8c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2634
  strcat(str1, "output/");
   13d90:	6f e8       	ldi	r22, 0x8F	; 143
   13d92:	73 e0       	ldi	r23, 0x03	; 3
   13d94:	c5 01       	movw	r24, r10
   13d96:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2635
  if (strncmp(str1, topic, strlen(str1)) == 0)
   13d9a:	f5 01       	movw	r30, r10
   13d9c:	01 90       	ld	r0, Z+
   13d9e:	00 20       	and	r0, r0
   13da0:	e9 f7       	brne	.-6      	; 0x13d9c <mqtt_callback(char*, unsigned char*, unsigned int)+0x19e4>
   13da2:	31 97       	sbiw	r30, 0x01	; 1
   13da4:	af 01       	movw	r20, r30
   13da6:	4a 19       	sub	r20, r10
   13da8:	5b 09       	sbc	r21, r11
   13daa:	b4 01       	movw	r22, r8
   13dac:	c5 01       	movw	r24, r10
   13dae:	0e 94 4e fb 	call	0x1f69c	; 0x1f69c <strncmp>
   13db2:	89 2b       	or	r24, r25
   13db4:	09 f0       	breq	.+2      	; 0x13db8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a00>
   13db6:	78 c0       	rjmp	.+240    	; 0x13ea8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2637
  {
    mqtt_process_message++;
   13db8:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13dbc:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13dc0:	01 96       	adiw	r24, 0x01	; 1
   13dc2:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13dc6:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2639
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13dca:	f5 01       	movw	r30, r10
   13dcc:	01 90       	ld	r0, Z+
   13dce:	00 20       	and	r0, r0
   13dd0:	e9 f7       	brne	.-6      	; 0x13dcc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a14>
   13dd2:	31 97       	sbiw	r30, 0x01	; 1
   13dd4:	ea 19       	sub	r30, r10
   13dd6:	fb 09       	sbc	r31, r11
   13dd8:	9e 2f       	mov	r25, r30
   13dda:	4e 2f       	mov	r20, r30
   13ddc:	84 2f       	mov	r24, r20
   13dde:	89 1b       	sub	r24, r25
   13de0:	24 2f       	mov	r18, r20
   13de2:	30 e0       	ldi	r19, 0x00	; 0
   13de4:	d4 01       	movw	r26, r8
   13de6:	0d 90       	ld	r0, X+
   13de8:	00 20       	and	r0, r0
   13dea:	e9 f7       	brne	.-6      	; 0x13de6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2e>
   13dec:	11 97       	sbiw	r26, 0x01	; 1
   13dee:	a8 19       	sub	r26, r8
   13df0:	b9 09       	sbc	r27, r9
   13df2:	2a 17       	cp	r18, r26
   13df4:	3b 07       	cpc	r19, r27
   13df6:	78 f4       	brcc	.+30     	; 0x13e16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2641
    {
      str1[cnt] = topic[f];
   13df8:	a8 ec       	ldi	r26, 0xC8	; 200
   13dfa:	b0 e0       	ldi	r27, 0x00	; 0
   13dfc:	ac 0f       	add	r26, r28
   13dfe:	bd 1f       	adc	r27, r29
   13e00:	a8 0f       	add	r26, r24
   13e02:	b1 1d       	adc	r27, r1
   13e04:	28 0d       	add	r18, r8
   13e06:	39 1d       	adc	r19, r9
   13e08:	f9 01       	movw	r30, r18
   13e0a:	80 81       	ld	r24, Z
   13e0c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2642
      str1[cnt + 1] = 0;
   13e0e:	11 96       	adiw	r26, 0x01	; 1
   13e10:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2639
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
   13e12:	4f 5f       	subi	r20, 0xFF	; 255
   13e14:	e3 cf       	rjmp	.-58     	; 0x13ddc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2646
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
   13e16:	60 e9       	ldi	r22, 0x90	; 144
   13e18:	75 e0       	ldi	r23, 0x05	; 5
   13e1a:	ce 01       	movw	r24, r28
   13e1c:	88 53       	subi	r24, 0x38	; 56
   13e1e:	9f 4f       	sbci	r25, 0xFF	; 255
   13e20:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13e24:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2645
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
   13e26:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2647
    pch = strtok (str1, "/");
    while (pch != NULL)
   13e28:	01 15       	cp	r16, r1
   13e2a:	11 05       	cpc	r17, r1
   13e2c:	e9 f1       	breq	.+122    	; 0x13ea8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2649
    {
      if (cnt == 0) id = atoi(pch);
   13e2e:	f1 10       	cpse	r15, r1
   13e30:	0d c0       	rjmp	.+26     	; 0x13e4c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a94>
   13e32:	c8 01       	movw	r24, r16
   13e34:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13e38:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2660
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
   13e3a:	60 e9       	ldi	r22, 0x90	; 144
   13e3c:	75 e0       	ldi	r23, 0x05	; 5
   13e3e:	90 e0       	ldi	r25, 0x00	; 0
   13e40:	80 e0       	ldi	r24, 0x00	; 0
   13e42:	0e 94 a1 ee 	call	0x1dd42	; 0x1dd42 <strtok>
   13e46:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
      cnt++;
   13e48:	f3 94       	inc	r15
   13e4a:	ee cf       	rjmp	.-36     	; 0x13e28 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2650
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
   13e4c:	f1 e0       	ldi	r31, 0x01	; 1
   13e4e:	ff 12       	cpse	r15, r31
   13e50:	f4 cf       	rjmp	.-24     	; 0x13e3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   13e52:	8f e5       	ldi	r24, 0x5F	; 95
   13e54:	c8 2e       	mov	r12, r24
   13e56:	dd 24       	eor	r13, r13
   13e58:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   13e5a:	c6 01       	movw	r24, r12
   13e5c:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2653
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
   13e60:	78 12       	cpse	r7, r24
   13e62:	19 c0       	rjmp	.+50     	; 0x13e96 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ade>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
   13e64:	6a ec       	ldi	r22, 0xCA	; 202
   13e66:	78 e0       	ldi	r23, 0x08	; 8
   13e68:	c8 01       	movw	r24, r16
   13e6a:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13e6e:	89 2b       	or	r24, r25
   13e70:	29 f0       	breq	.+10     	; 0x13e7c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac4>
   13e72:	e7 2d       	mov	r30, r7
   13e74:	f0 e0       	ldi	r31, 0x00	; 0
   13e76:	e8 57       	subi	r30, 0x78	; 120
   13e78:	f4 4f       	sbci	r31, 0xF4	; 244
   13e7a:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2656
            if (strcmp(pch, "state")) last_output_update[id] = 0;
   13e7c:	68 e9       	ldi	r22, 0x98	; 152
   13e7e:	73 e0       	ldi	r23, 0x03	; 3
   13e80:	c8 01       	movw	r24, r16
   13e82:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13e86:	89 2b       	or	r24, r25
   13e88:	c1 f2       	breq	.-80     	; 0x13e3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   13e8a:	e7 2d       	mov	r30, r7
   13e8c:	f0 e0       	ldi	r31, 0x00	; 0
   13e8e:	e8 57       	subi	r30, 0x78	; 120
   13e90:	f4 4f       	sbci	r31, 0xF4	; 244
   13e92:	10 82       	st	Z, r1
   13e94:	d2 cf       	rjmp	.-92     	; 0x13e3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
   13e96:	21 e2       	ldi	r18, 0x21	; 33
   13e98:	c2 0e       	add	r12, r18
   13e9a:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2652
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   13e9c:	84 e0       	ldi	r24, 0x04	; 4
   13e9e:	c8 16       	cp	r12, r24
   13ea0:	82 e0       	ldi	r24, 0x02	; 2
   13ea2:	d8 06       	cpc	r13, r24
   13ea4:	d1 f6       	brne	.-76     	; 0x13e5a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa2>
   13ea6:	c9 cf       	rjmp	.-110    	; 0x13e3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/brightness
  strcpy_P(str1, thermctl_header_in);
   13ea8:	68 e5       	ldi	r22, 0x58	; 88
   13eaa:	71 e8       	ldi	r23, 0x81	; 129
   13eac:	c5 01       	movw	r24, r10
   13eae:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2667
  strcat(str1, device.nazev);
   13eb2:	6f e2       	ldi	r22, 0x2F	; 47
   13eb4:	7e e0       	ldi	r23, 0x0E	; 14
   13eb6:	c5 01       	movw	r24, r10
   13eb8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2668
  strcat(str1, "/brightness");
   13ebc:	60 e5       	ldi	r22, 0x50	; 80
   13ebe:	76 e0       	ldi	r23, 0x06	; 6
   13ec0:	c5 01       	movw	r24, r10
   13ec2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2669
  if (strcmp(str1, topic) == 0)
   13ec6:	b4 01       	movw	r22, r8
   13ec8:	c5 01       	movw	r24, r10
   13eca:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13ece:	89 2b       	or	r24, r25
   13ed0:	79 f4       	brne	.+30     	; 0x13ef0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2671
  {
    mqtt_process_message++;
   13ed2:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13ed6:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13eda:	01 96       	adiw	r24, 0x01	; 1
   13edc:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13ee0:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
    my_touch.TP_SetBacklight(atoi(my_payload));
   13ee4:	85 e0       	ldi	r24, 0x05	; 5
   13ee6:	99 e0       	ldi	r25, 0x09	; 9
   13ee8:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13eec:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2676
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   13ef0:	68 e5       	ldi	r22, 0x58	; 88
   13ef2:	71 e8       	ldi	r23, 0x81	; 129
   13ef4:	c5 01       	movw	r24, r10
   13ef6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2677
  strcat(str1, device.nazev);
   13efa:	6f e2       	ldi	r22, 0x2F	; 47
   13efc:	7e e0       	ldi	r23, 0x0E	; 14
   13efe:	c5 01       	movw	r24, r10
   13f00:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
  strcat(str1, "/reload");
   13f04:	6c e5       	ldi	r22, 0x5C	; 92
   13f06:	76 e0       	ldi	r23, 0x06	; 6
   13f08:	c5 01       	movw	r24, r10
   13f0a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2679
  if (strcmp(str1, topic) == 0)
   13f0e:	b4 01       	movw	r22, r8
   13f10:	c5 01       	movw	r24, r10
   13f12:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13f16:	8c 01       	movw	r16, r24
   13f18:	89 2b       	or	r24, r25
   13f1a:	79 f4       	brne	.+30     	; 0x13f3a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2681
  {
    mqtt_process_message++;
   13f1c:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13f20:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13f24:	01 96       	adiw	r24, 0x01	; 1
   13f26:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13f2a:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2682
    log_error(&mqtt_client, "reload ..... ");
   13f2e:	84 e6       	ldi	r24, 0x64	; 100
   13f30:	96 e0       	ldi	r25, 0x06	; 6
   13f32:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
    resetFunc();
   13f36:	f8 01       	movw	r30, r16
   13f38:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
   13f3a:	68 e5       	ldi	r22, 0x58	; 88
   13f3c:	71 e8       	ldi	r23, 0x81	; 129
   13f3e:	c5 01       	movw	r24, r10
   13f40:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
  strcat(str1, device.nazev);
   13f44:	6f e2       	ldi	r22, 0x2F	; 47
   13f46:	7e e0       	ldi	r23, 0x0E	; 14
   13f48:	c5 01       	movw	r24, r10
   13f4a:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2689
  strcat(str1, "/bootloader");
   13f4e:	62 e7       	ldi	r22, 0x72	; 114
   13f50:	76 e0       	ldi	r23, 0x06	; 6
   13f52:	c5 01       	movw	r24, r10
   13f54:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2690
  if (strcmp(str1, topic) == 0)
   13f58:	b4 01       	movw	r22, r8
   13f5a:	c5 01       	movw	r24, r10
   13f5c:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13f60:	89 2b       	or	r24, r25
   13f62:	e9 f4       	brne	.+58     	; 0x13f9e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2692
  {
    mqtt_process_message++;
   13f64:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13f68:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13f6c:	01 96       	adiw	r24, 0x01	; 1
   13f6e:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13f72:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2693
    log_error(&mqtt_client, "bootloader ..... ");
   13f76:	8e e7       	ldi	r24, 0x7E	; 126
   13f78:	96 e0       	ldi	r25, 0x06	; 6
   13f7a:	0e 94 25 d0 	call	0x1a04a	; 0x1a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
    EEPROM.write(bootloader_tag, 255);
   13f7e:	6f ef       	ldi	r22, 0xFF	; 255
   13f80:	90 e0       	ldi	r25, 0x00	; 0
   13f82:	80 e0       	ldi	r24, 0x00	; 0
   13f84:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
   13f88:	88 e1       	ldi	r24, 0x18	; 24
   13f8a:	9e e0       	ldi	r25, 0x0E	; 14
   13f8c:	0f b6       	in	r0, 0x3f	; 63
   13f8e:	f8 94       	cli
   13f90:	a8 95       	wdr
   13f92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13f96:	0f be       	out	0x3f, r0	; 63
   13f98:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
   13f9c:	ff cf       	rjmp	.-2      	; 0x13f9c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1be4>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
   13f9e:	68 e5       	ldi	r22, 0x58	; 88
   13fa0:	71 e8       	ldi	r23, 0x81	; 129
   13fa2:	c5 01       	movw	r24, r10
   13fa4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
  strcat(str1, device.nazev);
   13fa8:	6f e2       	ldi	r22, 0x2F	; 47
   13faa:	7e e0       	ldi	r23, 0x0E	; 14
   13fac:	c5 01       	movw	r24, r10
   13fae:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2702
  strcat(str1, "/default");
   13fb2:	6e e7       	ldi	r22, 0x7E	; 126
   13fb4:	75 e0       	ldi	r23, 0x05	; 5
   13fb6:	c5 01       	movw	r24, r10
   13fb8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2703
  if (strcmp(str1, topic) == 0)
   13fbc:	b4 01       	movw	r22, r8
   13fbe:	c5 01       	movw	r24, r10
   13fc0:	0e 94 3e fb 	call	0x1f67c	; 0x1f67c <strcmp>
   13fc4:	89 2b       	or	r24, r25
   13fc6:	91 f4       	brne	.+36     	; 0x13fec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c34>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2705
  {
    mqtt_process_message++;
   13fc8:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   13fcc:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   13fd0:	01 96       	adiw	r24, 0x01	; 1
   13fd2:	90 93 7b 0b 	sts	0x0B7B, r25	; 0x800b7b <mqtt_process_message+0x1>
   13fd6:	80 93 7a 0b 	sts	0x0B7A, r24	; 0x800b7a <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2707
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
   13fda:	85 e0       	ldi	r24, 0x05	; 5
   13fdc:	99 e0       	ldi	r25, 0x09	; 9
   13fde:	0e 94 68 ee 	call	0x1dcd0	; 0x1dcd0 <atoi>
   13fe2:	68 2f       	mov	r22, r24
   13fe4:	8a e5       	ldi	r24, 0x5A	; 90
   13fe6:	90 e0       	ldi	r25, 0x00	; 0
   13fe8:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  }

}
   13fec:	ca 5b       	subi	r28, 0xBA	; 186
   13fee:	de 4f       	sbci	r29, 0xFE	; 254
   13ff0:	0f b6       	in	r0, 0x3f	; 63
   13ff2:	f8 94       	cli
   13ff4:	de bf       	out	0x3e, r29	; 62
   13ff6:	0f be       	out	0x3f, r0	; 63
   13ff8:	cd bf       	out	0x3d, r28	; 61
   13ffa:	df 91       	pop	r29
   13ffc:	cf 91       	pop	r28
   13ffe:	1f 91       	pop	r17
   14000:	0f 91       	pop	r16
   14002:	ff 90       	pop	r15
   14004:	ef 90       	pop	r14
   14006:	df 90       	pop	r13
   14008:	cf 90       	pop	r12
   1400a:	bf 90       	pop	r11
   1400c:	af 90       	pop	r10
   1400e:	9f 90       	pop	r9
   14010:	8f 90       	pop	r8
   14012:	7f 90       	pop	r7
   14014:	6f 90       	pop	r6
   14016:	5f 90       	pop	r5
   14018:	4f 90       	pop	r4
   1401a:	3f 90       	pop	r3
   1401c:	2f 90       	pop	r2
   1401e:	08 95       	ret

00014020 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
   14020:	0f 93       	push	r16
   14022:	1f 93       	push	r17
   14024:	cf 93       	push	r28
   14026:	df 93       	push	r29
   14028:	cd b7       	in	r28, 0x3d	; 61
   1402a:	de b7       	in	r29, 0x3e	; 62
   1402c:	a5 97       	sbiw	r28, 0x25	; 37
   1402e:	0f b6       	in	r0, 0x3f	; 63
   14030:	f8 94       	cli
   14032:	de bf       	out	0x3e, r29	; 62
   14034:	0f be       	out	0x3f, r0	; 63
   14036:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  long mil;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  if (!mqtt_client.connected())
   14038:	8f e2       	ldi	r24, 0x2F	; 47
   1403a:	90 e1       	ldi	r25, 0x10	; 16
   1403c:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   14040:	81 11       	cpse	r24, r1
   14042:	b7 c0       	rjmp	.+366    	; 0x141b2 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2723
  {
    device_get_name(nazev);
   14044:	ce 01       	movw	r24, r28
   14046:	4b 96       	adiw	r24, 0x1b	; 27
   14048:	0e 94 2a 91 	call	0x12254	; 0x12254 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
    mil = millis();
   1404c:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
    if (mil > lastmqttconnect)
   14050:	00 91 85 09 	lds	r16, 0x0985	; 0x800985 <lastmqttconnect>
   14054:	10 91 86 09 	lds	r17, 0x0986	; 0x800986 <lastmqttconnect+0x1>
   14058:	20 91 87 09 	lds	r18, 0x0987	; 0x800987 <lastmqttconnect+0x2>
   1405c:	30 91 88 09 	lds	r19, 0x0988	; 0x800988 <lastmqttconnect+0x3>
   14060:	06 17       	cp	r16, r22
   14062:	17 07       	cpc	r17, r23
   14064:	28 07       	cpc	r18, r24
   14066:	39 07       	cpc	r19, r25
   14068:	0c f0       	brlt	.+2      	; 0x1406c <mqtt_reconnect()+0x4c>
   1406a:	a3 c0       	rjmp	.+326    	; 0x141b2 <mqtt_reconnect()+0x192>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2727
    {
      lastmqttconnect = mil + 5000;
   1406c:	68 57       	subi	r22, 0x78	; 120
   1406e:	7c 4e       	sbci	r23, 0xEC	; 236
   14070:	8f 4f       	sbci	r24, 0xFF	; 255
   14072:	9f 4f       	sbci	r25, 0xFF	; 255
   14074:	60 93 85 09 	sts	0x0985, r22	; 0x800985 <lastmqttconnect>
   14078:	70 93 86 09 	sts	0x0986, r23	; 0x800986 <lastmqttconnect+0x1>
   1407c:	80 93 87 09 	sts	0x0987, r24	; 0x800987 <lastmqttconnect+0x2>
   14080:	90 93 88 09 	sts	0x0988, r25	; 0x800988 <lastmqttconnect+0x3>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
   14084:	8f e2       	ldi	r24, 0x2F	; 47
   14086:	90 e1       	ldi	r25, 0x10	; 16
   14088:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   1408c:	81 11       	cpse	r24, r1
   1408e:	d0 c0       	rjmp	.+416    	; 0x14230 <mqtt_reconnect()+0x210>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
   14090:	60 91 44 12 	lds	r22, 0x1244	; 0x801244 <mqtt_client+0x215>
   14094:	70 91 45 12 	lds	r23, 0x1245	; 0x801245 <mqtt_client+0x216>
   14098:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1409c:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   140a0:	dc 01       	movw	r26, r24
   140a2:	ed 91       	ld	r30, X+
   140a4:	fc 91       	ld	r31, X
   140a6:	40 91 46 12 	lds	r20, 0x1246	; 0x801246 <mqtt_client+0x217>
   140aa:	50 91 47 12 	lds	r21, 0x1247	; 0x801247 <mqtt_client+0x218>
   140ae:	61 15       	cp	r22, r1
   140b0:	71 05       	cpc	r23, r1
   140b2:	09 f4       	brne	.+2      	; 0x140b6 <mqtt_reconnect()+0x96>
   140b4:	8b c0       	rjmp	.+278    	; 0x141cc <mqtt_reconnect()+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
   140b6:	00 88       	ldd	r0, Z+16	; 0x10
   140b8:	f1 89       	ldd	r31, Z+17	; 0x11
   140ba:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
   140bc:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
   140be:	81 30       	cpi	r24, 0x01	; 1
   140c0:	91 05       	cpc	r25, r1
   140c2:	09 f0       	breq	.+2      	; 0x140c6 <mqtt_reconnect()+0xa6>
   140c4:	12 c1       	rjmp	.+548    	; 0x142ea <mqtt_reconnect()+0x2ca>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
   140c6:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   140ca:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
   140ce:	87 e0       	ldi	r24, 0x07	; 7
   140d0:	e8 e1       	ldi	r30, 0x18	; 24
   140d2:	f2 e0       	ldi	r31, 0x02	; 2
   140d4:	de 01       	movw	r26, r28
   140d6:	11 96       	adiw	r26, 0x01	; 1
   140d8:	01 90       	ld	r0, Z+
   140da:	0d 92       	st	X+, r0
   140dc:	8a 95       	dec	r24
   140de:	e1 f7       	brne	.-8      	; 0x140d8 <mqtt_reconnect()+0xb8>
   140e0:	fe 01       	movw	r30, r28
   140e2:	31 96       	adiw	r30, 0x01	; 1
   140e4:	a6 e3       	ldi	r26, 0x36	; 54
   140e6:	b0 e1       	ldi	r27, 0x10	; 16
   140e8:	ce 01       	movw	r24, r28
   140ea:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
   140ec:	21 91       	ld	r18, Z+
   140ee:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
   140f0:	8e 17       	cp	r24, r30
   140f2:	9f 07       	cpc	r25, r31
   140f4:	d9 f7       	brne	.-10     	; 0x140ec <mqtt_reconnect()+0xcc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
   140f6:	82 e0       	ldi	r24, 0x02	; 2
   140f8:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
   140fc:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
   14100:	8f e0       	ldi	r24, 0x0F	; 15
   14102:	80 93 3f 10 	sts	0x103F, r24	; 0x80103f <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
   14106:	4f e0       	ldi	r20, 0x0F	; 15
   14108:	50 e0       	ldi	r21, 0x00	; 0
   1410a:	61 e3       	ldi	r22, 0x31	; 49
   1410c:	70 e1       	ldi	r23, 0x10	; 16
   1410e:	ce 01       	movw	r24, r28
   14110:	4b 96       	adiw	r24, 0x1b	; 27
   14112:	0e 94 ae b7 	call	0x16f5c	; 0x16f5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
   14116:	9c 01       	movw	r18, r24
   14118:	25 50       	subi	r18, 0x05	; 5
   1411a:	31 09       	sbc	r19, r1
   1411c:	41 e3       	ldi	r20, 0x31	; 49
   1411e:	50 e1       	ldi	r21, 0x10	; 16
   14120:	60 e1       	ldi	r22, 0x10	; 16
   14122:	8f e2       	ldi	r24, 0x2F	; 47
   14124:	90 e1       	ldi	r25, 0x10	; 16
   14126:	0e 94 02 69 	call	0xd204	; 0xd204 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
   1412a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1412e:	60 93 33 12 	sts	0x1233, r22	; 0x801233 <mqtt_client+0x204>
   14132:	70 93 34 12 	sts	0x1234, r23	; 0x801234 <mqtt_client+0x205>
   14136:	80 93 35 12 	sts	0x1235, r24	; 0x801235 <mqtt_client+0x206>
   1413a:	90 93 36 12 	sts	0x1236, r25	; 0x801236 <mqtt_client+0x207>
   1413e:	60 93 37 12 	sts	0x1237, r22	; 0x801237 <mqtt_client+0x208>
   14142:	70 93 38 12 	sts	0x1238, r23	; 0x801238 <mqtt_client+0x209>
   14146:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <mqtt_client+0x20a>
   1414a:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
   1414e:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   14152:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   14156:	dc 01       	movw	r26, r24
   14158:	ed 91       	ld	r30, X+
   1415a:	fc 91       	ld	r31, X
   1415c:	00 84       	ldd	r0, Z+8	; 0x08
   1415e:	f1 85       	ldd	r31, Z+9	; 0x09
   14160:	e0 2d       	mov	r30, r0
   14162:	19 95       	eicall
   14164:	89 2b       	or	r24, r25
   14166:	09 f0       	breq	.+2      	; 0x1416a <mqtt_reconnect()+0x14a>
   14168:	48 c0       	rjmp	.+144    	; 0x141fa <mqtt_reconnect()+0x1da>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
   1416a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*10)) {
   1416e:	00 91 37 12 	lds	r16, 0x1237	; 0x801237 <mqtt_client+0x208>
   14172:	10 91 38 12 	lds	r17, 0x1238	; 0x801238 <mqtt_client+0x209>
   14176:	20 91 39 12 	lds	r18, 0x1239	; 0x801239 <mqtt_client+0x20a>
   1417a:	30 91 3a 12 	lds	r19, 0x123A	; 0x80123a <mqtt_client+0x20b>
   1417e:	60 1b       	sub	r22, r16
   14180:	71 0b       	sbc	r23, r17
   14182:	82 0b       	sbc	r24, r18
   14184:	93 0b       	sbc	r25, r19
   14186:	62 33       	cpi	r22, 0x32	; 50
   14188:	71 05       	cpc	r23, r1
   1418a:	81 05       	cpc	r24, r1
   1418c:	91 05       	cpc	r25, r1
   1418e:	f8 f2       	brcs	.-66     	; 0x1414e <mqtt_reconnect()+0x12e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
   14190:	8c ef       	ldi	r24, 0xFC	; 252
   14192:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   14194:	90 93 4b 12 	sts	0x124B, r25	; 0x80124b <mqtt_client+0x21c>
   14198:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
   1419c:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   141a0:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   141a4:	dc 01       	movw	r26, r24
   141a6:	ed 91       	ld	r30, X+
   141a8:	fc 91       	ld	r31, X
   141aa:	04 88       	ldd	r0, Z+20	; 0x14
   141ac:	f5 89       	ldd	r31, Z+21	; 0x15
   141ae:	e0 2d       	mov	r30, r0
   141b0:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2758
      }
    }
  }
  ret = mqtt_client.state();
  return ret;
}
   141b2:	80 91 4a 12 	lds	r24, 0x124A	; 0x80124a <mqtt_client+0x21b>
   141b6:	a5 96       	adiw	r28, 0x25	; 37
   141b8:	0f b6       	in	r0, 0x3f	; 63
   141ba:	f8 94       	cli
   141bc:	de bf       	out	0x3e, r29	; 62
   141be:	0f be       	out	0x3f, r0	; 63
   141c0:	cd bf       	out	0x3d, r28	; 61
   141c2:	df 91       	pop	r29
   141c4:	cf 91       	pop	r28
   141c6:	1f 91       	pop	r17
   141c8:	0f 91       	pop	r16
   141ca:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
   141cc:	06 84       	ldd	r0, Z+14	; 0x0e
   141ce:	f7 85       	ldd	r31, Z+15	; 0x0f
   141d0:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   141d2:	22 ef       	ldi	r18, 0xF2	; 242
   141d4:	32 e0       	ldi	r19, 0x02	; 2
   141d6:	3a 83       	std	Y+2, r19	; 0x02
   141d8:	29 83       	std	Y+1, r18	; 0x01
   141da:	00 91 40 12 	lds	r16, 0x1240	; 0x801240 <mqtt_client+0x211>
   141de:	10 91 41 12 	lds	r17, 0x1241	; 0x801241 <mqtt_client+0x212>
   141e2:	20 91 42 12 	lds	r18, 0x1242	; 0x801242 <mqtt_client+0x213>
   141e6:	30 91 43 12 	lds	r19, 0x1243	; 0x801243 <mqtt_client+0x214>
   141ea:	0b 83       	std	Y+3, r16	; 0x03
   141ec:	1c 83       	std	Y+4, r17	; 0x04
   141ee:	2d 83       	std	Y+5, r18	; 0x05
   141f0:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
   141f2:	be 01       	movw	r22, r28
   141f4:	6f 5f       	subi	r22, 0xFF	; 255
   141f6:	7f 4f       	sbci	r23, 0xFF	; 255
   141f8:	61 cf       	rjmp	.-318    	; 0x140bc <mqtt_reconnect()+0x9c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   141fa:	ce 01       	movw	r24, r28
   141fc:	85 96       	adiw	r24, 0x25	; 37
   141fe:	0e 94 b3 ba 	call	0x17566	; 0x17566 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
   14202:	04 97       	sbiw	r24, 0x04	; 4
   14204:	59 f6       	brne	.-106    	; 0x1419c <mqtt_reconnect()+0x17c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
   14206:	80 91 34 10 	lds	r24, 0x1034	; 0x801034 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
   1420a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
   1420c:	81 11       	cpse	r24, r1
   1420e:	c2 cf       	rjmp	.-124    	; 0x14194 <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
   14210:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14214:	60 93 37 12 	sts	0x1237, r22	; 0x801237 <mqtt_client+0x208>
   14218:	70 93 38 12 	sts	0x1238, r23	; 0x801238 <mqtt_client+0x209>
   1421c:	80 93 39 12 	sts	0x1239, r24	; 0x801239 <mqtt_client+0x20a>
   14220:	90 93 3a 12 	sts	0x123A, r25	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
   14224:	10 92 3b 12 	sts	0x123B, r1	; 0x80123b <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
   14228:	10 92 4b 12 	sts	0x124B, r1	; 0x80124b <mqtt_client+0x21c>
   1422c:	10 92 4a 12 	sts	0x124A, r1	; 0x80124a <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
    if (mil > lastmqttconnect)
    {
      lastmqttconnect = mil + 5000;
      if (mqtt_client.connect(nazev))
      {
        strcpy_P(topic, thermctl_header_in);
   14230:	68 e5       	ldi	r22, 0x58	; 88
   14232:	71 e8       	ldi	r23, 0x81	; 129
   14234:	ce 01       	movw	r24, r28
   14236:	01 96       	adiw	r24, 0x01	; 1
   14238:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2731
        strcat(topic, nazev);
   1423c:	be 01       	movw	r22, r28
   1423e:	65 5e       	subi	r22, 0xE5	; 229
   14240:	7f 4f       	sbci	r23, 0xFF	; 255
   14242:	ce 01       	movw	r24, r28
   14244:	01 96       	adiw	r24, 0x01	; 1
   14246:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
        strcat(topic, "/#");
   1424a:	60 ef       	ldi	r22, 0xF0	; 240
   1424c:	76 e0       	ldi	r23, 0x06	; 6
   1424e:	ce 01       	movw	r24, r28
   14250:	01 96       	adiw	r24, 0x01	; 1
   14252:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2733
        mqtt_client.subscribe(topic);
   14256:	ce 01       	movw	r24, r28
   14258:	01 96       	adiw	r24, 0x01	; 1
   1425a:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2734
        strcpy_P(topic, thermctl_header_in);
   1425e:	68 e5       	ldi	r22, 0x58	; 88
   14260:	71 e8       	ldi	r23, 0x81	; 129
   14262:	ce 01       	movw	r24, r28
   14264:	01 96       	adiw	r24, 0x01	; 1
   14266:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2735
        strcat(topic, "global/#");
   1426a:	6a ee       	ldi	r22, 0xEA	; 234
   1426c:	76 e0       	ldi	r23, 0x06	; 6
   1426e:	ce 01       	movw	r24, r28
   14270:	01 96       	adiw	r24, 0x01	; 1
   14272:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2736
        mqtt_client.subscribe(topic);
   14276:	ce 01       	movw	r24, r28
   14278:	01 96       	adiw	r24, 0x01	; 1
   1427a:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1427e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
          remote_tds_subscibe_topic(idx);
   14280:	81 2f       	mov	r24, r17
   14282:	0e 94 89 7d 	call	0xfb12	; 0xfb12 <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2738
        mqtt_client.subscribe(topic);
        strcpy_P(topic, thermctl_header_in);
        strcat(topic, "global/#");
        mqtt_client.subscribe(topic);
        //// /rtds/xxxxx
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14286:	1f 5f       	subi	r17, 0xFF	; 255
   14288:	1a 30       	cpi	r17, 0x0A	; 10
   1428a:	d1 f7       	brne	.-12     	; 0x14280 <mqtt_reconnect()+0x260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
          remote_tds_subscibe_topic(idx);
        //// svetelny controller
        strcpy_P(topic, lightctl_header_out);
   1428c:	69 e4       	ldi	r22, 0x49	; 73
   1428e:	71 e8       	ldi	r23, 0x81	; 129
   14290:	ce 01       	movw	r24, r28
   14292:	01 96       	adiw	r24, 0x01	; 1
   14294:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2742
        strcat(topic, "/#");
   14298:	60 ef       	ldi	r22, 0xF0	; 240
   1429a:	76 e0       	ldi	r23, 0x06	; 6
   1429c:	ce 01       	movw	r24, r28
   1429e:	01 96       	adiw	r24, 0x01	; 1
   142a0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
        mqtt_client.subscribe(topic);
   142a4:	ce 01       	movw	r24, r28
   142a6:	01 96       	adiw	r24, 0x01	; 1
   142a8:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2745
        /// zpetna vazba od ostatnich room controleru
        strcpy_P(topic, thermctl_subscribe);
   142ac:	61 e3       	ldi	r22, 0x31	; 49
   142ae:	71 e8       	ldi	r23, 0x81	; 129
   142b0:	ce 01       	movw	r24, r28
   142b2:	01 96       	adiw	r24, 0x01	; 1
   142b4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2746
        mqtt_client.subscribe(topic);
   142b8:	ce 01       	movw	r24, r28
   142ba:	01 96       	adiw	r24, 0x01	; 1
   142bc:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2748
        /// zpetna vazba od ostatnich term controlleru
        strcpy_P(topic, termbig_subscribe);
   142c0:	6a e1       	ldi	r22, 0x1A	; 26
   142c2:	71 e8       	ldi	r23, 0x81	; 129
   142c4:	ce 01       	movw	r24, r28
   142c6:	01 96       	adiw	r24, 0x01	; 1
   142c8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2749
        mqtt_client.subscribe(topic);
   142cc:	ce 01       	movw	r24, r28
   142ce:	01 96       	adiw	r24, 0x01	; 1
   142d0:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
        /// zpetna vazba od vystupu
        strcpy_P(topic, termbig_header_out);
   142d4:	6c e0       	ldi	r22, 0x0C	; 12
   142d6:	71 e8       	ldi	r23, 0x81	; 129
   142d8:	ce 01       	movw	r24, r28
   142da:	01 96       	adiw	r24, 0x01	; 1
   142dc:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
        mqtt_client.subscribe(topic);
   142e0:	ce 01       	movw	r24, r28
   142e2:	01 96       	adiw	r24, 0x01	; 1
   142e4:	0e 94 6e ba 	call	0x174dc	; 0x174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>
   142e8:	64 cf       	rjmp	.-312    	; 0x141b2 <mqtt_reconnect()+0x192>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
   142ea:	8e ef       	ldi	r24, 0xFE	; 254
   142ec:	9f ef       	ldi	r25, 0xFF	; 255
   142ee:	90 93 4b 12 	sts	0x124B, r25	; 0x80124b <mqtt_client+0x21c>
   142f2:	80 93 4a 12 	sts	0x124A, r24	; 0x80124a <mqtt_client+0x21b>
   142f6:	5d cf       	rjmp	.-326    	; 0x141b2 <mqtt_reconnect()+0x192>

000142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
   142f8:	ef 92       	push	r14
   142fa:	ff 92       	push	r15
   142fc:	0f 93       	push	r16
   142fe:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   14300:	80 17       	cp	r24, r16
   14302:	91 07       	cpc	r25, r17
   14304:	74 f4       	brge	.+28     	; 0x14322 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   14306:	84 0f       	add	r24, r20
   14308:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   1430a:	08 17       	cp	r16, r24
   1430c:	19 07       	cpc	r17, r25
   1430e:	4c f4       	brge	.+18     	; 0x14322 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
   14310:	6e 15       	cp	r22, r14
   14312:	7f 05       	cpc	r23, r15
   14314:	34 f4       	brge	.+12     	; 0x14322 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
   14316:	62 0f       	add	r22, r18
   14318:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
   1431a:	81 e0       	ldi	r24, 0x01	; 1
   1431c:	e6 16       	cp	r14, r22
   1431e:	f7 06       	cpc	r15, r23
   14320:	0c f0       	brlt	.+2      	; 0x14324 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
   14322:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4543
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
   14324:	1f 91       	pop	r17
   14326:	0f 91       	pop	r16
   14328:	ff 90       	pop	r15
   1432a:	ef 90       	pop	r14
   1432c:	08 95       	ret

0001432e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4520
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
   1432e:	2f 92       	push	r2
   14330:	3f 92       	push	r3
   14332:	4f 92       	push	r4
   14334:	5f 92       	push	r5
   14336:	6f 92       	push	r6
   14338:	7f 92       	push	r7
   1433a:	9f 92       	push	r9
   1433c:	af 92       	push	r10
   1433e:	bf 92       	push	r11
   14340:	cf 92       	push	r12
   14342:	df 92       	push	r13
   14344:	ef 92       	push	r14
   14346:	ff 92       	push	r15
   14348:	0f 93       	push	r16
   1434a:	1f 93       	push	r17
   1434c:	cf 93       	push	r28
   1434e:	df 93       	push	r29
   14350:	00 d0       	rcall	.+0      	; 0x14352 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
   14352:	1f 92       	push	r1
   14354:	1f 92       	push	r1
   14356:	cd b7       	in	r28, 0x3d	; 61
   14358:	de b7       	in	r29, 0x3e	; 62
   1435a:	6c 01       	movw	r12, r24
   1435c:	5b 01       	movw	r10, r22
   1435e:	1a 01       	movw	r2, r20
   14360:	29 01       	movw	r4, r18
   14362:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14364:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   14368:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   1436c:	10 e0       	ldi	r17, 0x00	; 0
   1436e:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4525
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   14370:	3b 01       	movw	r6, r22
   14372:	62 0e       	add	r6, r18
   14374:	73 1e       	adc	r7, r19
   14376:	84 0f       	add	r24, r20
   14378:	95 1f       	adc	r25, r21
   1437a:	9d 83       	std	Y+5, r25	; 0x05
   1437c:	8c 83       	std	Y+4, r24	; 0x04
   1437e:	93 01       	movw	r18, r6
   14380:	20 1b       	sub	r18, r16
   14382:	31 0b       	sbc	r19, r17
   14384:	4c 81       	ldd	r20, Y+4	; 0x04
   14386:	5d 81       	ldd	r21, Y+5	; 0x05
   14388:	40 1b       	sub	r20, r16
   1438a:	51 0b       	sbc	r21, r17
   1438c:	b5 01       	movw	r22, r10
   1438e:	60 0f       	add	r22, r16
   14390:	71 1f       	adc	r23, r17
   14392:	c6 01       	movw	r24, r12
   14394:	80 0f       	add	r24, r16
   14396:	91 1f       	adc	r25, r17
   14398:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   1439c:	0f 5f       	subi	r16, 0xFF	; 255
   1439e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4524
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   143a0:	03 30       	cpi	r16, 0x03	; 3
   143a2:	11 05       	cpc	r17, r1
   143a4:	61 f7       	brne	.-40     	; 0x1437e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4526
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
   143a6:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4527
  str1[1] = 0;
   143a8:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4529
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
   143aa:	ce 01       	movw	r24, r28
   143ac:	01 96       	adiw	r24, 0x01	; 1
   143ae:	fc 01       	movw	r30, r24
   143b0:	01 90       	ld	r0, Z+
   143b2:	00 20       	and	r0, r0
   143b4:	e9 f7       	brne	.-6      	; 0x143b0 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
   143b6:	31 97       	sbiw	r30, 0x01	; 1
   143b8:	e8 1b       	sub	r30, r24
   143ba:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   143bc:	29 2d       	mov	r18, r9
   143be:	22 0f       	add	r18, r18
   143c0:	29 0d       	add	r18, r9
   143c2:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   143c4:	a2 01       	movw	r20, r4
   143c6:	42 1b       	sub	r20, r18
   143c8:	51 09       	sbc	r21, r1
   143ca:	56 95       	lsr	r21
   143cc:	47 95       	ror	r20
   143ce:	56 95       	lsr	r21
   143d0:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   143d2:	4a 0d       	add	r20, r10
   143d4:	5b 2d       	mov	r21, r11
   143d6:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   143d8:	26 e0       	ldi	r18, 0x06	; 6
   143da:	e2 9f       	mul	r30, r18
   143dc:	f0 01       	movw	r30, r0
   143de:	11 24       	eor	r1, r1
   143e0:	9e 9e       	mul	r9, r30
   143e2:	90 01       	movw	r18, r0
   143e4:	9f 9e       	mul	r9, r31
   143e6:	30 0d       	add	r19, r0
   143e8:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4530
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
   143ea:	33 27       	eor	r19, r19
   143ec:	b1 01       	movw	r22, r2
   143ee:	62 1b       	sub	r22, r18
   143f0:	73 0b       	sbc	r23, r19
   143f2:	76 95       	lsr	r23
   143f4:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
   143f6:	6c 0d       	add	r22, r12
   143f8:	7d 2d       	mov	r23, r13
   143fa:	71 1d       	adc	r23, r1
   143fc:	ee 24       	eor	r14, r14
   143fe:	ea 94       	dec	r14
   14400:	fe 2c       	mov	r15, r14
   14402:	10 e0       	ldi	r17, 0x00	; 0
   14404:	00 e0       	ldi	r16, 0x00	; 0
   14406:	29 2d       	mov	r18, r9
   14408:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
}
   1440c:	0f 90       	pop	r0
   1440e:	0f 90       	pop	r0
   14410:	0f 90       	pop	r0
   14412:	0f 90       	pop	r0
   14414:	0f 90       	pop	r0
   14416:	df 91       	pop	r29
   14418:	cf 91       	pop	r28
   1441a:	1f 91       	pop	r17
   1441c:	0f 91       	pop	r16
   1441e:	ff 90       	pop	r15
   14420:	ef 90       	pop	r14
   14422:	df 90       	pop	r13
   14424:	cf 90       	pop	r12
   14426:	bf 90       	pop	r11
   14428:	af 90       	pop	r10
   1442a:	9f 90       	pop	r9
   1442c:	7f 90       	pop	r7
   1442e:	6f 90       	pop	r6
   14430:	5f 90       	pop	r5
   14432:	4f 90       	pop	r4
   14434:	3f 90       	pop	r3
   14436:	2f 90       	pop	r2
   14438:	08 95       	ret

0001443a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
   1443a:	2f 92       	push	r2
   1443c:	3f 92       	push	r3
   1443e:	4f 92       	push	r4
   14440:	5f 92       	push	r5
   14442:	6f 92       	push	r6
   14444:	7f 92       	push	r7
   14446:	8f 92       	push	r8
   14448:	9f 92       	push	r9
   1444a:	af 92       	push	r10
   1444c:	bf 92       	push	r11
   1444e:	cf 92       	push	r12
   14450:	df 92       	push	r13
   14452:	ef 92       	push	r14
   14454:	ff 92       	push	r15
   14456:	0f 93       	push	r16
   14458:	1f 93       	push	r17
   1445a:	cf 93       	push	r28
   1445c:	df 93       	push	r29
   1445e:	00 d0       	rcall	.+0      	; 0x14460 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
   14460:	1f 92       	push	r1
   14462:	cd b7       	in	r28, 0x3d	; 61
   14464:	de b7       	in	r29, 0x3e	; 62
   14466:	2c 01       	movw	r4, r24
   14468:	3b 01       	movw	r6, r22
   1446a:	0a 83       	std	Y+2, r16	; 0x02
   1446c:	eb 82       	std	Y+3, r14	; 0x03
   1446e:	3c 2c       	mov	r3, r12
   14470:	2d 2c       	mov	r2, r13
   14472:	98 2d       	mov	r25, r8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4458
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
  if (state == 0)
   14474:	88 20       	and	r8, r8
   14476:	51 f0       	breq	.+20     	; 0x1448c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4460
    back_color = color_inactive;
  if (state == 1)
   14478:	91 30       	cpi	r25, 0x01	; 1
   1447a:	51 f0       	breq	.+20     	; 0x14490 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4462
    back_color = color_active;
  if (state == 2)
   1447c:	92 30       	cpi	r25, 0x02	; 2
   1447e:	09 f4       	brne	.+2      	; 0x14482 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x48>
   14480:	cf c0       	rjmp	.+414    	; 0x14620 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = LIGHTGREY;
   14482:	a8 e1       	ldi	r26, 0x18	; 24
   14484:	3a 2e       	mov	r3, r26
   14486:	b6 ec       	ldi	r27, 0xC6	; 198
   14488:	2b 2e       	mov	r2, r27
   1448a:	02 c0       	rjmp	.+4      	; 0x14490 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4459
  if (state == 0)
    back_color = color_inactive;
   1448c:	3a 2c       	mov	r3, r10
   1448e:	2b 2c       	mov	r2, r11
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14490:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   14494:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   14498:	10 e0       	ldi	r17, 0x00	; 0
   1449a:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4468
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   1449c:	a2 2e       	mov	r10, r18
   1449e:	b1 2c       	mov	r11, r1
   144a0:	84 2e       	mov	r8, r20
   144a2:	91 2c       	mov	r9, r1
   144a4:	65 01       	movw	r12, r10
   144a6:	c6 0c       	add	r12, r6
   144a8:	d7 1c       	adc	r13, r7
   144aa:	74 01       	movw	r14, r8
   144ac:	e4 0c       	add	r14, r4
   144ae:	f5 1c       	adc	r15, r5
   144b0:	96 01       	movw	r18, r12
   144b2:	20 1b       	sub	r18, r16
   144b4:	31 0b       	sbc	r19, r17
   144b6:	a7 01       	movw	r20, r14
   144b8:	40 1b       	sub	r20, r16
   144ba:	51 0b       	sbc	r21, r17
   144bc:	b8 01       	movw	r22, r16
   144be:	66 0d       	add	r22, r6
   144c0:	77 1d       	adc	r23, r7
   144c2:	c8 01       	movw	r24, r16
   144c4:	84 0d       	add	r24, r4
   144c6:	95 1d       	adc	r25, r5
   144c8:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   144cc:	0f 5f       	subi	r16, 0xFF	; 255
   144ce:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4467
  if (state == 2)
  {
    goto button_click_2_end ;
  }
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   144d0:	03 30       	cpi	r16, 0x03	; 3
   144d2:	11 05       	cpc	r17, r1
   144d4:	69 f7       	brne	.-38     	; 0x144b0 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x76>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   144d6:	30 92 c3 0f 	sts	0x0FC3, r3	; 0x800fc3 <my_lcd+0xa>
   144da:	20 92 c4 0f 	sts	0x0FC4, r2	; 0x800fc4 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   144de:	93 01       	movw	r18, r6
   144e0:	23 50       	subi	r18, 0x03	; 3
   144e2:	31 09       	sbc	r19, r1
   144e4:	2a 0d       	add	r18, r10
   144e6:	3b 1d       	adc	r19, r11
   144e8:	a2 01       	movw	r20, r4
   144ea:	43 50       	subi	r20, 0x03	; 3
   144ec:	51 09       	sbc	r21, r1
   144ee:	48 0d       	add	r20, r8
   144f0:	59 1d       	adc	r21, r9
   144f2:	b3 01       	movw	r22, r6
   144f4:	6d 5f       	subi	r22, 0xFD	; 253
   144f6:	7f 4f       	sbci	r23, 0xFF	; 255
   144f8:	c2 01       	movw	r24, r4
   144fa:	03 96       	adiw	r24, 0x03	; 3
   144fc:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
  if (strlen(line1) > 0)
   14500:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14502:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14504:	80 81       	ld	r24, Z
   14506:	88 23       	and	r24, r24
   14508:	09 f4       	brne	.+2      	; 0x1450c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd2>
   1450a:	a1 c0       	rjmp	.+322    	; 0x1464e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4473
  {
    prvni = 1;
   1450c:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4474
    num_lines_const = 2;
   1450e:	f2 e0       	ldi	r31, 0x02	; 2
   14510:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4476
  }
  if (strlen(line2) > 0)
   14512:	ec 8d       	ldd	r30, Y+28	; 0x1c
   14514:	fd 8d       	ldd	r31, Y+29	; 0x1d
   14516:	90 81       	ld	r25, Z
   14518:	99 23       	and	r25, r25
   1451a:	09 f4       	brne	.+2      	; 0x1451e <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe4>
   1451c:	9b c0       	rjmp	.+310    	; 0x14654 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x21a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
   1451e:	f9 81       	ldd	r31, Y+1	; 0x01
   14520:	fe 5f       	subi	r31, 0xFE	; 254
   14522:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4478
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
   14524:	21 e0       	ldi	r18, 0x01	; 1
   14526:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4449
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   14528:	d1 2c       	mov	r13, r1
   1452a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4481
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
   1452c:	81 30       	cpi	r24, 0x01	; 1
   1452e:	d1 f5       	brne	.+116    	; 0x145a4 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x16a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4483
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   14530:	ea 8d       	ldd	r30, Y+26	; 0x1a
   14532:	fb 8d       	ldd	r31, Y+27	; 0x1b
   14534:	01 90       	ld	r0, Z+
   14536:	00 20       	and	r0, r0
   14538:	e9 f7       	brne	.-6      	; 0x14534 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xfa>
   1453a:	9f 01       	movw	r18, r30
   1453c:	21 50       	subi	r18, 0x01	; 1
   1453e:	31 09       	sbc	r19, r1
   14540:	4a 8d       	ldd	r20, Y+26	; 0x1a
   14542:	5b 8d       	ldd	r21, Y+27	; 0x1b
   14544:	24 1b       	sub	r18, r20
   14546:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14548:	8a 81       	ldd	r24, Y+2	; 0x02
   1454a:	88 0f       	add	r24, r24
   1454c:	5a 81       	ldd	r21, Y+2	; 0x02
   1454e:	85 0f       	add	r24, r21
   14550:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   14552:	f5 01       	movw	r30, r10
   14554:	e8 1b       	sub	r30, r24
   14556:	f1 09       	sbc	r31, r1
   14558:	cf 01       	movw	r24, r30
   1455a:	f9 81       	ldd	r31, Y+1	; 0x01
   1455c:	6f 2f       	mov	r22, r31
   1455e:	70 e0       	ldi	r23, 0x00	; 0
   14560:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   14564:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   14566:	a3 01       	movw	r20, r6
   14568:	41 50       	subi	r20, 0x01	; 1
   1456a:	51 09       	sbc	r21, r1
   1456c:	46 0f       	add	r20, r22
   1456e:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14570:	66 e0       	ldi	r22, 0x06	; 6
   14572:	26 9f       	mul	r18, r22
   14574:	90 01       	movw	r18, r0
   14576:	11 24       	eor	r1, r1
   14578:	ea 81       	ldd	r30, Y+2	; 0x02
   1457a:	e2 9f       	mul	r30, r18
   1457c:	c0 01       	movw	r24, r0
   1457e:	e3 9f       	mul	r30, r19
   14580:	90 0d       	add	r25, r0
   14582:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   14584:	b4 01       	movw	r22, r8
   14586:	68 1b       	sub	r22, r24
   14588:	79 0b       	sbc	r23, r25
   1458a:	76 95       	lsr	r23
   1458c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
   1458e:	64 0d       	add	r22, r4
   14590:	75 1d       	adc	r23, r5
   14592:	e3 2c       	mov	r14, r3
   14594:	f2 2c       	mov	r15, r2
   14596:	10 e0       	ldi	r17, 0x00	; 0
   14598:	00 e0       	ldi	r16, 0x00	; 0
   1459a:	2e 2f       	mov	r18, r30
   1459c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1459e:	9b 8d       	ldd	r25, Y+27	; 0x1b
   145a0:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4488
  }
  if (druhy == 1)
   145a4:	fc 81       	ldd	r31, Y+4	; 0x04
   145a6:	f1 30       	cpi	r31, 0x01	; 1
   145a8:	d9 f5       	brne	.+118    	; 0x14620 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4490
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   145aa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   145ac:	fd 8d       	ldd	r31, Y+29	; 0x1d
   145ae:	01 90       	ld	r0, Z+
   145b0:	00 20       	and	r0, r0
   145b2:	e9 f7       	brne	.-6      	; 0x145ae <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x174>
   145b4:	31 97       	sbiw	r30, 0x01	; 1
   145b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
   145b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
   145ba:	e2 1b       	sub	r30, r18
   145bc:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   145be:	8b 81       	ldd	r24, Y+3	; 0x03
   145c0:	88 0f       	add	r24, r24
   145c2:	3b 81       	ldd	r19, Y+3	; 0x03
   145c4:	83 0f       	add	r24, r19
   145c6:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4492
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
   145c8:	a5 01       	movw	r20, r10
   145ca:	48 1b       	sub	r20, r24
   145cc:	51 09       	sbc	r21, r1
   145ce:	ca 01       	movw	r24, r20
   145d0:	88 0f       	add	r24, r24
   145d2:	99 1f       	adc	r25, r25
   145d4:	59 81       	ldd	r21, Y+1	; 0x01
   145d6:	65 2f       	mov	r22, r21
   145d8:	70 e0       	ldi	r23, 0x00	; 0
   145da:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   145de:	81 e0       	ldi	r24, 0x01	; 1
   145e0:	68 1a       	sub	r6, r24
   145e2:	71 08       	sbc	r7, r1
   145e4:	66 0e       	add	r6, r22
   145e6:	77 1e       	adc	r7, r23
   145e8:	a3 01       	movw	r20, r6
   145ea:	4c 0d       	add	r20, r12
   145ec:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   145ee:	96 e0       	ldi	r25, 0x06	; 6
   145f0:	e9 9f       	mul	r30, r25
   145f2:	f0 01       	movw	r30, r0
   145f4:	11 24       	eor	r1, r1
   145f6:	3e 9f       	mul	r19, r30
   145f8:	c0 01       	movw	r24, r0
   145fa:	3f 9f       	mul	r19, r31
   145fc:	90 0d       	add	r25, r0
   145fe:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4491
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   14600:	b4 01       	movw	r22, r8
   14602:	68 1b       	sub	r22, r24
   14604:	79 0b       	sbc	r23, r25
   14606:	76 95       	lsr	r23
   14608:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
   1460a:	64 0d       	add	r22, r4
   1460c:	75 1d       	adc	r23, r5
   1460e:	e3 2c       	mov	r14, r3
   14610:	f2 2c       	mov	r15, r2
   14612:	10 e0       	ldi	r17, 0x00	; 0
   14614:	00 e0       	ldi	r16, 0x00	; 0
   14616:	23 2f       	mov	r18, r19
   14618:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1461a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1461c:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4497
  }
button_click_2_end:
  state = 0;
}
   14620:	0f 90       	pop	r0
   14622:	0f 90       	pop	r0
   14624:	0f 90       	pop	r0
   14626:	0f 90       	pop	r0
   14628:	df 91       	pop	r29
   1462a:	cf 91       	pop	r28
   1462c:	1f 91       	pop	r17
   1462e:	0f 91       	pop	r16
   14630:	ff 90       	pop	r15
   14632:	ef 90       	pop	r14
   14634:	df 90       	pop	r13
   14636:	cf 90       	pop	r12
   14638:	bf 90       	pop	r11
   1463a:	af 90       	pop	r10
   1463c:	9f 90       	pop	r9
   1463e:	8f 90       	pop	r8
   14640:	7f 90       	pop	r7
   14642:	6f 90       	pop	r6
   14644:	5f 90       	pop	r5
   14646:	4f 90       	pop	r4
   14648:	3f 90       	pop	r3
   1464a:	2f 90       	pop	r2
   1464c:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4455
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
   1464e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4454
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   14650:	19 82       	std	Y+1, r1	; 0x01
   14652:	5f cf       	rjmp	.-322    	; 0x14512 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4456
  uint8_t prvni = 0;
  uint8_t druhy = 0;
   14654:	1c 82       	std	Y+4, r1	; 0x04
   14656:	68 cf       	rjmp	.-304    	; 0x14528 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xee>

00014658 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
   14658:	2f 92       	push	r2
   1465a:	3f 92       	push	r3
   1465c:	4f 92       	push	r4
   1465e:	5f 92       	push	r5
   14660:	6f 92       	push	r6
   14662:	7f 92       	push	r7
   14664:	8f 92       	push	r8
   14666:	9f 92       	push	r9
   14668:	af 92       	push	r10
   1466a:	bf 92       	push	r11
   1466c:	cf 92       	push	r12
   1466e:	df 92       	push	r13
   14670:	ef 92       	push	r14
   14672:	ff 92       	push	r15
   14674:	0f 93       	push	r16
   14676:	1f 93       	push	r17
   14678:	cf 93       	push	r28
   1467a:	df 93       	push	r29
   1467c:	00 d0       	rcall	.+0      	; 0x1467e <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
   1467e:	1f 92       	push	r1
   14680:	1f 92       	push	r1
   14682:	cd b7       	in	r28, 0x3d	; 61
   14684:	de b7       	in	r29, 0x3e	; 62
   14686:	2c 01       	movw	r4, r24
   14688:	3b 01       	movw	r6, r22
   1468a:	5a 83       	std	Y+2, r21	; 0x02
   1468c:	49 83       	std	Y+1, r20	; 0x01
   1468e:	19 01       	movw	r2, r18
   14690:	90 2e       	mov	r9, r16
   14692:	eb 82       	std	Y+3, r14	; 0x03
   14694:	dd 82       	std	Y+5, r13	; 0x05
   14696:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14698:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   1469c:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   146a0:	10 e0       	ldi	r17, 0x00	; 0
   146a2:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   146a4:	6b 01       	movw	r12, r22
   146a6:	c2 0e       	add	r12, r18
   146a8:	d3 1e       	adc	r13, r19
   146aa:	7a 01       	movw	r14, r20
   146ac:	e8 0e       	add	r14, r24
   146ae:	f9 1e       	adc	r15, r25
   146b0:	96 01       	movw	r18, r12
   146b2:	20 1b       	sub	r18, r16
   146b4:	31 0b       	sbc	r19, r17
   146b6:	a7 01       	movw	r20, r14
   146b8:	40 1b       	sub	r20, r16
   146ba:	51 0b       	sbc	r21, r17
   146bc:	b8 01       	movw	r22, r16
   146be:	66 0d       	add	r22, r6
   146c0:	77 1d       	adc	r23, r7
   146c2:	c8 01       	movw	r24, r16
   146c4:	84 0d       	add	r24, r4
   146c6:	95 1d       	adc	r25, r5
   146c8:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   146cc:	0f 5f       	subi	r16, 0xFF	; 255
   146ce:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   146d0:	03 30       	cpi	r16, 0x03	; 3
   146d2:	11 05       	cpc	r17, r1
   146d4:	69 f7       	brne	.-38     	; 0x146b0 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
   146d6:	91 01       	movw	r18, r2
   146d8:	23 50       	subi	r18, 0x03	; 3
   146da:	31 09       	sbc	r19, r1
   146dc:	49 81       	ldd	r20, Y+1	; 0x01
   146de:	5a 81       	ldd	r21, Y+2	; 0x02
   146e0:	43 50       	subi	r20, 0x03	; 3
   146e2:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4420
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
   146e4:	61 e0       	ldi	r22, 0x01	; 1
   146e6:	86 12       	cpse	r8, r22
   146e8:	11 c0       	rjmp	.+34     	; 0x1470c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   146ea:	8f ef       	ldi	r24, 0xFF	; 255
   146ec:	9f ef       	ldi	r25, 0xFF	; 255
   146ee:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
   146f2:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4423
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
   146f6:	26 0d       	add	r18, r6
   146f8:	37 1d       	adc	r19, r7
   146fa:	44 0d       	add	r20, r4
   146fc:	55 1d       	adc	r21, r5
   146fe:	b3 01       	movw	r22, r6
   14700:	6d 5f       	subi	r22, 0xFD	; 253
   14702:	7f 4f       	sbci	r23, 0xFF	; 255
   14704:	c2 01       	movw	r24, r4
   14706:	03 96       	adiw	r24, 0x03	; 3
   14708:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
  }
  if (strlen(line1) > 0)
   1470c:	ec 81       	ldd	r30, Y+4	; 0x04
   1470e:	fd 81       	ldd	r31, Y+5	; 0x05
   14710:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4416
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
   14712:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4411
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
   14714:	d1 2c       	mov	r13, r1
   14716:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4425
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
   14718:	88 23       	and	r24, r24
   1471a:	91 f1       	breq	.+100    	; 0x14780 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
   1471c:	01 90       	ld	r0, Z+
   1471e:	00 20       	and	r0, r0
   14720:	e9 f7       	brne	.-6      	; 0x1471c <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
   14722:	31 97       	sbiw	r30, 0x01	; 1
   14724:	4c 81       	ldd	r20, Y+4	; 0x04
   14726:	5d 81       	ldd	r21, Y+5	; 0x05
   14728:	e4 1b       	sub	r30, r20
   1472a:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   1472c:	89 2d       	mov	r24, r9
   1472e:	88 0f       	add	r24, r24
   14730:	89 0d       	add	r24, r9
   14732:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
   14734:	61 01       	movw	r12, r2
   14736:	c8 1a       	sub	r12, r24
   14738:	d1 08       	sbc	r13, r1
   1473a:	d6 94       	lsr	r13
   1473c:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   1473e:	a3 01       	movw	r20, r6
   14740:	41 50       	subi	r20, 0x01	; 1
   14742:	51 09       	sbc	r21, r1
   14744:	4c 0d       	add	r20, r12
   14746:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   14748:	66 e0       	ldi	r22, 0x06	; 6
   1474a:	e6 9f       	mul	r30, r22
   1474c:	f0 01       	movw	r30, r0
   1474e:	11 24       	eor	r1, r1
   14750:	9e 9e       	mul	r9, r30
   14752:	c0 01       	movw	r24, r0
   14754:	9f 9e       	mul	r9, r31
   14756:	90 0d       	add	r25, r0
   14758:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4429
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
   1475a:	69 81       	ldd	r22, Y+1	; 0x01
   1475c:	7a 81       	ldd	r23, Y+2	; 0x02
   1475e:	68 1b       	sub	r22, r24
   14760:	79 0b       	sbc	r23, r25
   14762:	76 95       	lsr	r23
   14764:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
   14766:	64 0d       	add	r22, r4
   14768:	75 1d       	adc	r23, r5
   1476a:	ee 24       	eor	r14, r14
   1476c:	ea 94       	dec	r14
   1476e:	fe 2c       	mov	r15, r14
   14770:	10 e0       	ldi	r17, 0x00	; 0
   14772:	00 e0       	ldi	r16, 0x00	; 0
   14774:	29 2d       	mov	r18, r9
   14776:	8c 81       	ldd	r24, Y+4	; 0x04
   14778:	9d 81       	ldd	r25, Y+5	; 0x05
   1477a:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
   1477e:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4433
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
   14780:	f5 01       	movw	r30, r10
   14782:	80 81       	ld	r24, Z
   14784:	88 23       	and	r24, r24
   14786:	b9 f1       	breq	.+110    	; 0x147f6 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4436
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
   14788:	01 90       	ld	r0, Z+
   1478a:	00 20       	and	r0, r0
   1478c:	e9 f7       	brne	.-6      	; 0x14788 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
   1478e:	9f 01       	movw	r18, r30
   14790:	21 50       	subi	r18, 0x01	; 1
   14792:	31 09       	sbc	r19, r1
   14794:	2a 19       	sub	r18, r10
   14796:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   14798:	8b 81       	ldd	r24, Y+3	; 0x03
   1479a:	88 0f       	add	r24, r24
   1479c:	fb 81       	ldd	r31, Y+3	; 0x03
   1479e:	8f 0f       	add	r24, r31
   147a0:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   147a2:	a1 01       	movw	r20, r2
   147a4:	48 1b       	sub	r20, r24
   147a6:	51 09       	sbc	r21, r1
   147a8:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4435
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
   147aa:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4438
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
   147ac:	70 e0       	ldi	r23, 0x00	; 0
   147ae:	0e 94 88 f8 	call	0x1f110	; 0x1f110 <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   147b2:	51 e0       	ldi	r21, 0x01	; 1
   147b4:	65 1a       	sub	r6, r21
   147b6:	71 08       	sbc	r7, r1
   147b8:	c6 0c       	add	r12, r6
   147ba:	d7 1c       	adc	r13, r7
   147bc:	ab 01       	movw	r20, r22
   147be:	4c 0d       	add	r20, r12
   147c0:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   147c2:	66 e0       	ldi	r22, 0x06	; 6
   147c4:	26 9f       	mul	r18, r22
   147c6:	90 01       	movw	r18, r0
   147c8:	11 24       	eor	r1, r1
   147ca:	f2 9f       	mul	r31, r18
   147cc:	c0 01       	movw	r24, r0
   147ce:	f3 9f       	mul	r31, r19
   147d0:	90 0d       	add	r25, r0
   147d2:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4437
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
   147d4:	69 81       	ldd	r22, Y+1	; 0x01
   147d6:	7a 81       	ldd	r23, Y+2	; 0x02
   147d8:	68 1b       	sub	r22, r24
   147da:	79 0b       	sbc	r23, r25
   147dc:	76 95       	lsr	r23
   147de:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4439
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
   147e0:	64 0d       	add	r22, r4
   147e2:	75 1d       	adc	r23, r5
   147e4:	ee 24       	eor	r14, r14
   147e6:	ea 94       	dec	r14
   147e8:	fe 2c       	mov	r15, r14
   147ea:	10 e0       	ldi	r17, 0x00	; 0
   147ec:	00 e0       	ldi	r16, 0x00	; 0
   147ee:	2f 2f       	mov	r18, r31
   147f0:	c5 01       	movw	r24, r10
   147f2:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4441
  }
}
   147f6:	0f 90       	pop	r0
   147f8:	0f 90       	pop	r0
   147fa:	0f 90       	pop	r0
   147fc:	0f 90       	pop	r0
   147fe:	0f 90       	pop	r0
   14800:	df 91       	pop	r29
   14802:	cf 91       	pop	r28
   14804:	1f 91       	pop	r17
   14806:	0f 91       	pop	r16
   14808:	ff 90       	pop	r15
   1480a:	ef 90       	pop	r14
   1480c:	df 90       	pop	r13
   1480e:	cf 90       	pop	r12
   14810:	bf 90       	pop	r11
   14812:	af 90       	pop	r10
   14814:	9f 90       	pop	r9
   14816:	8f 90       	pop	r8
   14818:	7f 90       	pop	r7
   1481a:	6f 90       	pop	r6
   1481c:	5f 90       	pop	r5
   1481e:	4f 90       	pop	r4
   14820:	3f 90       	pop	r3
   14822:	2f 90       	pop	r2
   14824:	08 95       	ret

00014826 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
    display_update_slider = 1;
  }
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
   14826:	cf 93       	push	r28
   14828:	df 93       	push	r29
   1482a:	fc 01       	movw	r30, r24
   1482c:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
  if (max_element > 0)
   1482e:	22 23       	and	r18, r18
   14830:	09 f1       	breq	.+66     	; 0x14874 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
  {
    menu_slider_data_max = *stop;
   14832:	98 81       	ld	r25, Y
   14834:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
    menu_slider_data_min = *start;
   14838:	80 81       	ld	r24, Z
   1483a:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
    menu_slider_data_max_element = max_element;
   1483e:	20 93 90 09 	sts	0x0990, r18	; 0x800990 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
    ///
    *start = menu_slider_data_current[args];
   14842:	a4 2f       	mov	r26, r20
   14844:	b0 e0       	ldi	r27, 0x00	; 0
   14846:	a6 57       	subi	r26, 0x76	; 118
   14848:	b6 4f       	sbci	r27, 0xF6	; 246
   1484a:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4393
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   1484c:	62 2f       	mov	r22, r18
   1484e:	70 e0       	ldi	r23, 0x00	; 0
   14850:	49 2f       	mov	r20, r25
   14852:	50 e0       	ldi	r21, 0x00	; 0
   14854:	db 01       	movw	r26, r22
   14856:	a3 0f       	add	r26, r19
   14858:	b1 1d       	adc	r27, r1
   1485a:	4a 17       	cp	r20, r26
   1485c:	5b 07       	cpc	r21, r27
   1485e:	6c f0       	brlt	.+26     	; 0x1487a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4392
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
   14860:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4395
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
   14862:	80 81       	ld	r24, Z
   14864:	98 17       	cp	r25, r24
   14866:	08 f4       	brcc	.+2      	; 0x1486a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4396
      *start = menu_slider_data_max;
   14868:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
   1486a:	29 17       	cp	r18, r25
   1486c:	78 f4       	brcc	.+30     	; 0x1488c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4398
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
   1486e:	80 81       	ld	r24, Z
   14870:	28 0f       	add	r18, r24
   14872:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4402
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
   14874:	df 91       	pop	r29
   14876:	cf 91       	pop	r28
   14878:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4393
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
   1487a:	48 1b       	sub	r20, r24
   1487c:	51 09       	sbc	r21, r1
   1487e:	64 17       	cp	r22, r20
   14880:	75 07       	cpc	r23, r21
   14882:	74 f7       	brge	.-36     	; 0x14860 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
      *start = menu_slider_data_max - max_element;
   14884:	89 2f       	mov	r24, r25
   14886:	82 1b       	sub	r24, r18
   14888:	80 83       	st	Z, r24
   1488a:	eb cf       	rjmp	.-42     	; 0x14862 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4400
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
   1488c:	98 83       	st	Y, r25
   1488e:	f2 cf       	rjmp	.-28     	; 0x14874 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

00014890 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1204
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
   14890:	ff 92       	push	r15
   14892:	0f 93       	push	r16
   14894:	1f 93       	push	r17
   14896:	cf 93       	push	r28
   14898:	df 93       	push	r29
   1489a:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   1489c:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   148a0:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1206
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   148a2:	80 e0       	ldi	r24, 0x00	; 0
   148a4:	6e ed       	ldi	r22, 0xDE	; 222
   148a6:	79 e0       	ldi	r23, 0x09	; 9
   148a8:	c3 ef       	ldi	r28, 0xF3	; 243
   148aa:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   148ac:	89 01       	movw	r16, r18
   148ae:	01 5f       	subi	r16, 0xF1	; 241
   148b0:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1206
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   148b2:	fb 01       	movw	r30, r22
   148b4:	94 91       	lpm	r25, Z
   148b6:	89 17       	cp	r24, r25
   148b8:	e8 f4       	brcc	.+58     	; 0x148f4 <MenuHistoryGetMenu(unsigned char*)+0x64>
   148ba:	8c 9f       	mul	r24, r28
   148bc:	a0 01       	movw	r20, r0
   148be:	8d 9f       	mul	r24, r29
   148c0:	50 0d       	add	r21, r0
   148c2:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1209
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   148c4:	fa 01       	movw	r30, r20
   148c6:	e2 54       	subi	r30, 0x42	; 66
   148c8:	f3 4f       	sbci	r31, 0xF3	; 243
   148ca:	f4 90       	lpm	r15, Z
   148cc:	f8 01       	movw	r30, r16
   148ce:	90 81       	ld	r25, Z
   148d0:	9f 11       	cpse	r25, r15
   148d2:	0e c0       	rjmp	.+28     	; 0x148f0 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1208
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
   148d4:	4e 51       	subi	r20, 0x1E	; 30
   148d6:	56 4f       	sbci	r21, 0xF6	; 246
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1240
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
   148d8:	2b 5f       	subi	r18, 0xFB	; 251
   148da:	32 4f       	sbci	r19, 0xF2	; 242
   148dc:	f9 01       	movw	r30, r18
   148de:	20 81       	ld	r18, Z
   148e0:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1244
      return menus;
    }
  }
}
   148e2:	ca 01       	movw	r24, r20
   148e4:	df 91       	pop	r29
   148e6:	cf 91       	pop	r28
   148e8:	1f 91       	pop	r17
   148ea:	0f 91       	pop	r16
   148ec:	ff 90       	pop	r15
   148ee:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1206
}
///
const Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  const Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
   148f0:	8f 5f       	subi	r24, 0xFF	; 255
   148f2:	df cf       	rjmp	.-66     	; 0x148b2 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1215
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   148f4:	80 e0       	ldi	r24, 0x00	; 0
   148f6:	6f ed       	ldi	r22, 0xDF	; 223
   148f8:	79 e0       	ldi	r23, 0x09	; 9
   148fa:	c3 ef       	ldi	r28, 0xF3	; 243
   148fc:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   148fe:	89 01       	movw	r16, r18
   14900:	01 5f       	subi	r16, 0xF1	; 241
   14902:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1215
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   14904:	fb 01       	movw	r30, r22
   14906:	94 91       	lpm	r25, Z
   14908:	89 17       	cp	r24, r25
   1490a:	90 f4       	brcc	.+36     	; 0x14930 <MenuHistoryGetMenu(unsigned char*)+0xa0>
   1490c:	8c 9f       	mul	r24, r28
   1490e:	a0 01       	movw	r20, r0
   14910:	8d 9f       	mul	r24, r29
   14912:	50 0d       	add	r21, r0
   14914:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1218
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14916:	fa 01       	movw	r30, r20
   14918:	e4 5c       	subi	r30, 0xC4	; 196
   1491a:	f5 4d       	sbci	r31, 0xD5	; 213
   1491c:	f4 90       	lpm	r15, Z
   1491e:	f8 01       	movw	r30, r16
   14920:	90 81       	ld	r25, Z
   14922:	9f 11       	cpse	r25, r15
   14924:	03 c0       	rjmp	.+6      	; 0x1492c <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1217
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
   14926:	40 5a       	subi	r20, 0xA0	; 160
   14928:	58 4d       	sbci	r21, 0xD8	; 216
   1492a:	d6 cf       	rjmp	.-84     	; 0x148d8 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1215
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
   1492c:	8f 5f       	subi	r24, 0xFF	; 255
   1492e:	ea cf       	rjmp	.-44     	; 0x14904 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14930:	80 e0       	ldi	r24, 0x00	; 0
   14932:	60 ee       	ldi	r22, 0xE0	; 224
   14934:	79 e0       	ldi	r23, 0x09	; 9
   14936:	c3 ef       	ldi	r28, 0xF3	; 243
   14938:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   1493a:	89 01       	movw	r16, r18
   1493c:	01 5f       	subi	r16, 0xF1	; 241
   1493e:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14940:	fb 01       	movw	r30, r22
   14942:	94 91       	lpm	r25, Z
   14944:	89 17       	cp	r24, r25
   14946:	90 f4       	brcc	.+36     	; 0x1496c <MenuHistoryGetMenu(unsigned char*)+0xdc>
   14948:	8c 9f       	mul	r24, r28
   1494a:	a0 01       	movw	r20, r0
   1494c:	8d 9f       	mul	r24, r29
   1494e:	50 0d       	add	r21, r0
   14950:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1228
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14952:	fa 01       	movw	r30, r20
   14954:	e6 54       	subi	r30, 0x46	; 70
   14956:	f8 4b       	sbci	r31, 0xB8	; 184
   14958:	f4 90       	lpm	r15, Z
   1495a:	f8 01       	movw	r30, r16
   1495c:	90 81       	ld	r25, Z
   1495e:	9f 11       	cpse	r25, r15
   14960:	03 c0       	rjmp	.+6      	; 0x14968 <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1227
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
   14962:	42 52       	subi	r20, 0x22	; 34
   14964:	5b 4b       	sbci	r21, 0xBB	; 187
   14966:	b8 cf       	rjmp	.-144    	; 0x148d8 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1225
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
   14968:	8f 5f       	subi	r24, 0xFF	; 255
   1496a:	ea cf       	rjmp	.-44     	; 0x14940 <MenuHistoryGetMenu(unsigned char*)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   1496c:	90 e0       	ldi	r25, 0x00	; 0
   1496e:	61 ee       	ldi	r22, 0xE1	; 225
   14970:	79 e0       	ldi	r23, 0x09	; 9
   14972:	c3 ef       	ldi	r28, 0xF3	; 243
   14974:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14976:	89 01       	movw	r16, r18
   14978:	01 5f       	subi	r16, 0xF1	; 241
   1497a:	12 4f       	sbci	r17, 0xF2	; 242
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   1497c:	fb 01       	movw	r30, r22
   1497e:	84 91       	lpm	r24, Z
   14980:	98 17       	cp	r25, r24
   14982:	08 f0       	brcs	.+2      	; 0x14986 <MenuHistoryGetMenu(unsigned char*)+0xf6>
   14984:	ae cf       	rjmp	.-164    	; 0x148e2 <MenuHistoryGetMenu(unsigned char*)+0x52>
   14986:	9c 9f       	mul	r25, r28
   14988:	a0 01       	movw	r20, r0
   1498a:	9d 9f       	mul	r25, r29
   1498c:	50 0d       	add	r21, r0
   1498e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1238
  {
    menus = &Menu_All.ListMenu4[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
   14990:	fa 01       	movw	r30, r20
   14992:	e8 5c       	subi	r30, 0xC8	; 200
   14994:	fa 49       	sbci	r31, 0x9A	; 154
   14996:	f4 90       	lpm	r15, Z
   14998:	f8 01       	movw	r30, r16
   1499a:	80 81       	ld	r24, Z
   1499c:	8f 11       	cpse	r24, r15
   1499e:	03 c0       	rjmp	.+6      	; 0x149a6 <MenuHistoryGetMenu(unsigned char*)+0x116>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1237
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
  {
    menus = &Menu_All.ListMenu4[idx];
   149a0:	44 5a       	subi	r20, 0xA4	; 164
   149a2:	5d 49       	sbci	r21, 0x9D	; 157
   149a4:	99 cf       	rjmp	.-206    	; 0x148d8 <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1235
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu4); idx++)
   149a6:	9f 5f       	subi	r25, 0xFF	; 255
   149a8:	e9 cf       	rjmp	.-46     	; 0x1497c <MenuHistoryGetMenu(unsigned char*)+0xec>

000149aa <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1122



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
   149aa:	4f 92       	push	r4
   149ac:	5f 92       	push	r5
   149ae:	6f 92       	push	r6
   149b0:	7f 92       	push	r7
   149b2:	8f 92       	push	r8
   149b4:	9f 92       	push	r9
   149b6:	af 92       	push	r10
   149b8:	bf 92       	push	r11
   149ba:	cf 92       	push	r12
   149bc:	df 92       	push	r13
   149be:	ef 92       	push	r14
   149c0:	ff 92       	push	r15
   149c2:	0f 93       	push	r16
   149c4:	1f 93       	push	r17
   149c6:	cf 93       	push	r28
   149c8:	df 93       	push	r29
   149ca:	1f 92       	push	r1
   149cc:	cd b7       	in	r28, 0x3d	; 61
   149ce:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1133
  uint16_t color_background;
  uint8_t args1;
  const Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
   149d0:	ce 01       	movw	r24, r28
   149d2:	01 96       	adiw	r24, 0x01	; 1
   149d4:	0e 94 48 a4 	call	0x14890	; 0x14890 <MenuHistoryGetMenu(unsigned char*)>
   149d8:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1134
  attr = pgm_read_byte(&current->atributes);
   149da:	fc 01       	movw	r30, r24
   149dc:	eb 51       	subi	r30, 0x1B	; 27
   149de:	fd 4f       	sbci	r31, 0xFD	; 253
   149e0:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1135
  x = pgm_read_word(&current->x);
   149e2:	38 97       	sbiw	r30, 0x08	; 8
   149e4:	c5 90       	lpm	r12, Z+
   149e6:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1136
  y = pgm_read_word(&current->y);
   149e8:	fc 01       	movw	r30, r24
   149ea:	e1 52       	subi	r30, 0x21	; 33
   149ec:	fd 4f       	sbci	r31, 0xFD	; 253
   149ee:	e5 90       	lpm	r14, Z+
   149f0:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1137
  size_x = pgm_read_word(&current->size_x);
   149f2:	fc 01       	movw	r30, r24
   149f4:	ef 51       	subi	r30, 0x1F	; 31
   149f6:	fd 4f       	sbci	r31, 0xFD	; 253
   149f8:	a5 90       	lpm	r10, Z+
   149fa:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1138
  size_y = pgm_read_word(&current->size_y);
   149fc:	fc 01       	movw	r30, r24
   149fe:	ed 51       	subi	r30, 0x1D	; 29
   14a00:	fd 4f       	sbci	r31, 0xFD	; 253
   14a02:	65 90       	lpm	r6, Z+
   14a04:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1139
  color_background = pgm_read_word(&current->color_background);
   14a06:	fc 01       	movw	r30, r24
   14a08:	ea 51       	subi	r30, 0x1A	; 26
   14a0a:	fd 4f       	sbci	r31, 0xFD	; 253
   14a0c:	85 90       	lpm	r8, Z+
   14a0e:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1141

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
   14a10:	50 fe       	sbrs	r5, 0
   14a12:	03 c0       	rjmp	.+6      	; 0x14a1a <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1250

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
   14a14:	c4 01       	movw	r24, r8
   14a16:	0e 94 71 b8 	call	0x170e2	; 0x170e2 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1146
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
   14a1a:	51 fe       	sbrs	r5, 1
   14a1c:	0e c0       	rjmp	.+28     	; 0x14a3a <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14a1e:	90 92 c4 0f 	sts	0x0FC4, r9	; 0x800fc4 <my_lcd+0xb>
   14a22:	80 92 c3 0f 	sts	0x0FC3, r8	; 0x800fc3 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1149
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
   14a26:	97 01       	movw	r18, r14
   14a28:	26 0d       	add	r18, r6
   14a2a:	37 1d       	adc	r19, r7
   14a2c:	a6 01       	movw	r20, r12
   14a2e:	4a 0d       	add	r20, r10
   14a30:	5b 1d       	adc	r21, r11
   14a32:	b7 01       	movw	r22, r14
   14a34:	c6 01       	movw	r24, r12
   14a36:	0e 94 6b b6 	call	0x16cd6	; 0x16cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1152
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
   14a3a:	52 fe       	sbrs	r5, 2
   14a3c:	2a c0       	rjmp	.+84     	; 0x14a92 <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14a3e:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   14a42:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   14a46:	91 2c       	mov	r9, r1
   14a48:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1157
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
   14a4a:	6e 0c       	add	r6, r14
   14a4c:	7f 1c       	adc	r7, r15
   14a4e:	26 01       	movw	r4, r12
   14a50:	4a 0c       	add	r4, r10
   14a52:	5b 1c       	adc	r5, r11
   14a54:	93 01       	movw	r18, r6
   14a56:	28 19       	sub	r18, r8
   14a58:	39 09       	sbc	r19, r9
   14a5a:	a2 01       	movw	r20, r4
   14a5c:	48 19       	sub	r20, r8
   14a5e:	59 09       	sbc	r21, r9
   14a60:	b7 01       	movw	r22, r14
   14a62:	c6 01       	movw	r24, r12
   14a64:	88 0d       	add	r24, r8
   14a66:	99 1d       	adc	r25, r9
   14a68:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1158
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
   14a6c:	a5 01       	movw	r20, r10
   14a6e:	48 19       	sub	r20, r8
   14a70:	59 09       	sbc	r21, r9
   14a72:	b7 01       	movw	r22, r14
   14a74:	69 5e       	subi	r22, 0xE9	; 233
   14a76:	7f 4f       	sbci	r23, 0xFF	; 255
   14a78:	c6 01       	movw	r24, r12
   14a7a:	0e 94 9b b6 	call	0x16d36	; 0x16d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
   14a7e:	8f ef       	ldi	r24, 0xFF	; 255
   14a80:	88 1a       	sub	r8, r24
   14a82:	98 0a       	sbc	r9, r24
   14a84:	ef ef       	ldi	r30, 0xFF	; 255
   14a86:	ee 1a       	sub	r14, r30
   14a88:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1155
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
   14a8a:	f4 e0       	ldi	r31, 0x04	; 4
   14a8c:	8f 16       	cp	r8, r31
   14a8e:	91 04       	cpc	r9, r1
   14a90:	09 f7       	brne	.-62     	; 0x14a54 <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1161
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt = (ret_fptr*)pgm_read_word(&current->preload_function);
   14a92:	f8 01       	movw	r30, r16
   14a94:	ef 50       	subi	r30, 0x0F	; 15
   14a96:	fd 4f       	sbci	r31, 0xFD	; 253
   14a98:	25 91       	lpm	r18, Z+
   14a9a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1162
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), args1, -1);
   14a9c:	f8 01       	movw	r30, r16
   14a9e:	e4 52       	subi	r30, 0x24	; 36
   14aa0:	fd 4f       	sbci	r31, 0xFD	; 253
   14aa2:	e4 91       	lpm	r30, Z
   14aa4:	69 81       	ldd	r22, Y+1	; 0x01
   14aa6:	70 e0       	ldi	r23, 0x00	; 0
   14aa8:	4f ef       	ldi	r20, 0xFF	; 255
   14aaa:	8e 2f       	mov	r24, r30
   14aac:	90 e0       	ldi	r25, 0x00	; 0
   14aae:	f9 01       	movw	r30, r18
   14ab0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1164

  display_redraw_once = 0;
   14ab2:	10 92 b6 0c 	sts	0x0CB6, r1	; 0x800cb6 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1165
}
   14ab6:	0f 90       	pop	r0
   14ab8:	df 91       	pop	r29
   14aba:	cf 91       	pop	r28
   14abc:	1f 91       	pop	r17
   14abe:	0f 91       	pop	r16
   14ac0:	ff 90       	pop	r15
   14ac2:	ef 90       	pop	r14
   14ac4:	df 90       	pop	r13
   14ac6:	cf 90       	pop	r12
   14ac8:	bf 90       	pop	r11
   14aca:	af 90       	pop	r10
   14acc:	9f 90       	pop	r9
   14ace:	8f 90       	pop	r8
   14ad0:	7f 90       	pop	r7
   14ad2:	6f 90       	pop	r6
   14ad4:	5f 90       	pop	r5
   14ad6:	4f 90       	pop	r4
   14ad8:	08 95       	ret

00014ada <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3425
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
   14ada:	2f 92       	push	r2
   14adc:	3f 92       	push	r3
   14ade:	4f 92       	push	r4
   14ae0:	5f 92       	push	r5
   14ae2:	6f 92       	push	r6
   14ae4:	7f 92       	push	r7
   14ae6:	8f 92       	push	r8
   14ae8:	9f 92       	push	r9
   14aea:	af 92       	push	r10
   14aec:	bf 92       	push	r11
   14aee:	cf 92       	push	r12
   14af0:	df 92       	push	r13
   14af2:	ef 92       	push	r14
   14af4:	ff 92       	push	r15
   14af6:	0f 93       	push	r16
   14af8:	1f 93       	push	r17
   14afa:	cf 93       	push	r28
   14afc:	df 93       	push	r29
   14afe:	cd b7       	in	r28, 0x3d	; 61
   14b00:	de b7       	in	r29, 0x3e	; 62
   14b02:	c0 54       	subi	r28, 0x40	; 64
   14b04:	d1 40       	sbci	r29, 0x01	; 1
   14b06:	0f b6       	in	r0, 0x3f	; 63
   14b08:	f8 94       	cli
   14b0a:	de bf       	out	0x3e, r29	; 62
   14b0c:	0f be       	out	0x3f, r0	; 63
   14b0e:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
   14b10:	1b 82       	std	Y+3, r1	; 0x03
   14b12:	86 ed       	ldi	r24, 0xD6	; 214
   14b14:	93 e0       	ldi	r25, 0x03	; 3
   14b16:	9d 83       	std	Y+5, r25	; 0x05
   14b18:	8c 83       	std	Y+4, r24	; 0x04
   14b1a:	89 e3       	ldi	r24, 0x39	; 57
   14b1c:	95 e0       	ldi	r25, 0x05	; 5
   14b1e:	9f 83       	std	Y+7, r25	; 0x07
   14b20:	8e 83       	std	Y+6, r24	; 0x06
   14b22:	18 86       	std	Y+8, r1	; 0x08
   14b24:	19 86       	std	Y+9, r1	; 0x09
   14b26:	1a 86       	std	Y+10, r1	; 0x0a
   14b28:	1b 86       	std	Y+11, r1	; 0x0b
   14b2a:	80 e6       	ldi	r24, 0x60	; 96
   14b2c:	9a ee       	ldi	r25, 0xEA	; 234
   14b2e:	a0 e0       	ldi	r26, 0x00	; 0
   14b30:	b0 e0       	ldi	r27, 0x00	; 0
   14b32:	8c 87       	std	Y+12, r24	; 0x0c
   14b34:	9d 87       	std	Y+13, r25	; 0x0d
   14b36:	ae 87       	std	Y+14, r26	; 0x0e
   14b38:	bf 87       	std	Y+15, r27	; 0x0f
   14b3a:	18 8a       	std	Y+16, r1	; 0x10
   14b3c:	19 8a       	std	Y+17, r1	; 0x11
   14b3e:	1a 8a       	std	Y+18, r1	; 0x12
   14b40:	1b 8a       	std	Y+19, r1	; 0x13
   14b42:	1c 8a       	std	Y+20, r1	; 0x14
   14b44:	1d 8a       	std	Y+21, r1	; 0x15
   14b46:	1e 8a       	std	Y+22, r1	; 0x16
   14b48:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
   14b4a:	8c e4       	ldi	r24, 0x4C	; 76
   14b4c:	92 e1       	ldi	r25, 0x12	; 18
   14b4e:	9a 83       	std	Y+2, r25	; 0x02
   14b50:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3209
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
   14b52:	61 e0       	ldi	r22, 0x01	; 1
   14b54:	86 e0       	ldi	r24, 0x06	; 6
   14b56:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3210
  pinMode(ETH_CS, OUTPUT);
   14b5a:	61 e0       	ldi	r22, 0x01	; 1
   14b5c:	8f e0       	ldi	r24, 0x0F	; 15
   14b5e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
  pinMode(LED, OUTPUT);
   14b62:	61 e0       	ldi	r22, 0x01	; 1
   14b64:	88 e0       	ldi	r24, 0x08	; 8
   14b66:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3212
  pinMode(PIEZO, OUTPUT);
   14b6a:	61 e0       	ldi	r22, 0x01	; 1
   14b6c:	8c e0       	ldi	r24, 0x0C	; 12
   14b6e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3213
  pinMode(STORAGE_RAM_CS, OUTPUT);
   14b72:	61 e0       	ldi	r22, 0x01	; 1
   14b74:	86 e1       	ldi	r24, 0x16	; 22
   14b76:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3214
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
   14b7a:	61 e0       	ldi	r22, 0x01	; 1
   14b7c:	87 e1       	ldi	r24, 0x17	; 23
   14b7e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
  pinMode(JUMPER, INPUT_PULLUP);
   14b82:	62 e0       	ldi	r22, 0x02	; 2
   14b84:	8e e0       	ldi	r24, 0x0E	; 14
   14b86:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217

  digitalWrite(PIEZO, LOW);
   14b8a:	60 e0       	ldi	r22, 0x00	; 0
   14b8c:	8c e0       	ldi	r24, 0x0C	; 12
   14b8e:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
  delay(1000);
   14b92:	68 ee       	ldi	r22, 0xE8	; 232
   14b94:	73 e0       	ldi	r23, 0x03	; 3
   14b96:	80 e0       	ldi	r24, 0x00	; 0
   14b98:	90 e0       	ldi	r25, 0x00	; 0
   14b9a:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3219
  digitalWrite(PIEZO, HIGH);
   14b9e:	61 e0       	ldi	r22, 0x01	; 1
   14ba0:	8c e0       	ldi	r24, 0x0C	; 12
   14ba2:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3441

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
   14ba6:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
  SPI.begin();
   14ba8:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3443
  Wire.begin();
   14bac:	0e 94 e9 d6 	call	0x1add2	; 0x1add2 <TwoWire::begin() [clone .constprop.54]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
   14bb0:	0e 94 e9 d6 	call	0x1add2	; 0x1add2 <TwoWire::begin() [clone .constprop.54]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:460
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
   14bb4:	8f e2       	ldi	r24, 0x2F	; 47
   14bb6:	90 e1       	ldi	r25, 0x10	; 16
   14bb8:	90 93 36 0a 	sts	0x0A36, r25	; 0x800a36 <pub_mqtt_client+0x1>
   14bbc:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3447
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
   14bc0:	70 e0       	ldi	r23, 0x00	; 0
   14bc2:	60 e0       	ldi	r22, 0x00	; 0
   14bc4:	85 ea       	ldi	r24, 0xA5	; 165
   14bc6:	91 e9       	ldi	r25, 0x91	; 145
   14bc8:	0e 94 04 ef 	call	0x1de08	; 0x1de08 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
   14bcc:	70 e0       	ldi	r23, 0x00	; 0
   14bce:	60 e0       	ldi	r22, 0x00	; 0
   14bd0:	8c ee       	ldi	r24, 0xEC	; 236
   14bd2:	91 e6       	ldi	r25, 0x61	; 97
   14bd4:	0e 94 04 ef 	call	0x1de08	; 0x1de08 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3450
  printf_begin();

  swSPI.begin();
   14bd8:	8b e7       	ldi	r24, 0x7B	; 123
   14bda:	92 e1       	ldi	r25, 0x12	; 18
   14bdc:	0e 94 c2 62 	call	0xc584	; 0xc584 <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1200
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
   14be0:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   14be4:	f0 e0       	ldi	r31, 0x00	; 0
   14be6:	e1 5f       	subi	r30, 0xF1	; 241
   14be8:	f2 4f       	sbci	r31, 0xF2	; 242
   14bea:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
   14bec:	0e 94 f4 d5 	call	0x1abe8	; 0x1abe8 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
   14bf0:	80 91 d3 0f 	lds	r24, 0x0FD3	; 0x800fd3 <my_lcd+0x1a>
   14bf4:	90 91 d4 0f 	lds	r25, 0x0FD4	; 0x800fd4 <my_lcd+0x1b>
   14bf8:	01 96       	adiw	r24, 0x01	; 1
   14bfa:	09 f0       	breq	.+2      	; 0x14bfe <setup+0x124>
   14bfc:	4c c0       	rjmp	.+152    	; 0x14c96 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
   14bfe:	60 e0       	ldi	r22, 0x00	; 0
   14c00:	84 e0       	ldi	r24, 0x04	; 4
   14c02:	90 e0       	ldi	r25, 0x00	; 0
   14c04:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   14c08:	89 2b       	or	r24, r25
   14c0a:	39 f5       	brne	.+78     	; 0x14c5a <setup+0x180>
   14c0c:	61 e0       	ldi	r22, 0x01	; 1
   14c0e:	84 e0       	ldi	r24, 0x04	; 4
   14c10:	90 e0       	ldi	r25, 0x00	; 0
   14c12:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   14c16:	81 15       	cp	r24, r1
   14c18:	90 48       	sbci	r25, 0x80	; 128
   14c1a:	f9 f4       	brne	.+62     	; 0x14c5a <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
   14c1c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__malloc_margin+0x9>
   14c20:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__malloc_margin+0xa>
   14c24:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__malloc_margin+0xb>
   14c28:	2b 96       	adiw	r28, 0x0b	; 11
   14c2a:	8d af       	std	Y+61, r24	; 0x3d
   14c2c:	9e af       	std	Y+62, r25	; 0x3e
   14c2e:	af af       	std	Y+63, r26	; 0x3f
   14c30:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
   14c32:	23 e0       	ldi	r18, 0x03	; 3
   14c34:	ae 01       	movw	r20, r28
   14c36:	48 5b       	subi	r20, 0xB8	; 184
   14c38:	5f 4f       	sbci	r21, 0xFF	; 255
   14c3a:	69 eb       	ldi	r22, 0xB9	; 185
   14c3c:	70 e0       	ldi	r23, 0x00	; 0
   14c3e:	89 eb       	ldi	r24, 0xB9	; 185
   14c40:	9f e0       	ldi	r25, 0x0F	; 15
   14c42:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
   14c46:	60 e0       	ldi	r22, 0x00	; 0
   14c48:	80 ed       	ldi	r24, 0xD0	; 208
   14c4a:	90 e0       	ldi	r25, 0x00	; 0
   14c4c:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
   14c50:	61 e0       	ldi	r22, 0x01	; 1
   14c52:	80 ed       	ldi	r24, 0xD0	; 208
   14c54:	90 e0       	ldi	r25, 0x00	; 0
   14c56:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
   14c5a:	61 e0       	ldi	r22, 0x01	; 1
   14c5c:	83 ed       	ldi	r24, 0xD3	; 211
   14c5e:	90 e0       	ldi	r25, 0x00	; 0
   14c60:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
   14c64:	81 34       	cpi	r24, 0x41	; 65
   14c66:	b3 e9       	ldi	r27, 0x93	; 147
   14c68:	9b 07       	cpc	r25, r27
   14c6a:	89 f0       	breq	.+34     	; 0x14c8e <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
   14c6c:	86 38       	cpi	r24, 0x86	; 134
   14c6e:	e4 e9       	ldi	r30, 0x94	; 148
   14c70:	9e 07       	cpc	r25, r30
   14c72:	69 f0       	breq	.+26     	; 0x14c8e <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
   14c74:	88 38       	cpi	r24, 0x88	; 136
   14c76:	f4 e9       	ldi	r31, 0x94	; 148
   14c78:	9f 07       	cpc	r25, r31
   14c7a:	49 f0       	breq	.+18     	; 0x14c8e <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
   14c7c:	86 39       	cpi	r24, 0x96	; 150
   14c7e:	27 e7       	ldi	r18, 0x77	; 119
   14c80:	92 07       	cpc	r25, r18
   14c82:	29 f0       	breq	.+10     	; 0x14c8e <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
   14c84:	60 e0       	ldi	r22, 0x00	; 0
   14c86:	90 e0       	ldi	r25, 0x00	; 0
   14c88:	80 e0       	ldi	r24, 0x00	; 0
   14c8a:	0e 94 65 d6 	call	0x1acca	; 0x1acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
   14c8e:	90 93 d4 0f 	sts	0x0FD4, r25	; 0x800fd4 <my_lcd+0x1b>
   14c92:	80 93 d3 0f 	sts	0x0FD3, r24	; 0x800fd3 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
   14c96:	00 91 d3 0f 	lds	r16, 0x0FD3	; 0x800fd3 <my_lcd+0x1a>
   14c9a:	10 91 d4 0f 	lds	r17, 0x0FD4	; 0x800fd4 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
   14c9e:	0e 94 f4 d5 	call	0x1abe8	; 0x1abe8 <LCDWIKI_KBV::reset() [clone .constprop.62]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
   14ca2:	68 ec       	ldi	r22, 0xC8	; 200
   14ca4:	70 e0       	ldi	r23, 0x00	; 0
   14ca6:	80 e0       	ldi	r24, 0x00	; 0
   14ca8:	90 e0       	ldi	r25, 0x00	; 0
   14caa:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
   14cae:	06 39       	cpi	r16, 0x96	; 150
   14cb0:	17 47       	sbci	r17, 0x77	; 119
   14cb2:	09 f0       	breq	.+2      	; 0x14cb6 <setup+0x1dc>
   14cb4:	c7 c2       	rjmp	.+1422   	; 0x15244 <setup+0x76a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
   14cb6:	89 e0       	ldi	r24, 0x09	; 9
   14cb8:	90 e0       	ldi	r25, 0x00	; 0
   14cba:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <my_lcd+0x19>
   14cbe:	80 93 d1 0f 	sts	0x0FD1, r24	; 0x800fd1 <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   14cc2:	8a e2       	ldi	r24, 0x2A	; 42
   14cc4:	90 e0       	ldi	r25, 0x00	; 0
   14cc6:	90 93 d6 0f 	sts	0x0FD6, r25	; 0x800fd6 <my_lcd+0x1d>
   14cca:	80 93 d5 0f 	sts	0x0FD5, r24	; 0x800fd5 <my_lcd+0x1c>
   14cce:	8b e2       	ldi	r24, 0x2B	; 43
   14cd0:	90 e0       	ldi	r25, 0x00	; 0
   14cd2:	90 93 d8 0f 	sts	0x0FD8, r25	; 0x800fd8 <my_lcd+0x1f>
   14cd6:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <my_lcd+0x1e>
   14cda:	8c e2       	ldi	r24, 0x2C	; 44
   14cdc:	90 e0       	ldi	r25, 0x00	; 0
   14cde:	90 93 da 0f 	sts	0x0FDA, r25	; 0x800fda <my_lcd+0x21>
   14ce2:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <my_lcd+0x20>
   14ce6:	8e e2       	ldi	r24, 0x2E	; 46
   14ce8:	90 e0       	ldi	r25, 0x00	; 0
   14cea:	90 93 dc 0f 	sts	0x0FDC, r25	; 0x800fdc <my_lcd+0x23>
   14cee:	80 93 db 0f 	sts	0x0FDB, r24	; 0x800fdb <my_lcd+0x22>
   14cf2:	83 e3       	ldi	r24, 0x33	; 51
   14cf4:	90 e0       	ldi	r25, 0x00	; 0
   14cf6:	90 93 de 0f 	sts	0x0FDE, r25	; 0x800fde <my_lcd+0x25>
   14cfa:	80 93 dd 0f 	sts	0x0FDD, r24	; 0x800fdd <my_lcd+0x24>
   14cfe:	87 e3       	ldi	r24, 0x37	; 55
   14d00:	90 e0       	ldi	r25, 0x00	; 0
   14d02:	90 93 e0 0f 	sts	0x0FE0, r25	; 0x800fe0 <my_lcd+0x27>
   14d06:	80 93 df 0f 	sts	0x0FDF, r24	; 0x800fdf <my_lcd+0x26>
   14d0a:	86 e3       	ldi	r24, 0x36	; 54
   14d0c:	90 e0       	ldi	r25, 0x00	; 0
   14d0e:	90 93 e2 0f 	sts	0x0FE2, r25	; 0x800fe2 <my_lcd+0x29>
   14d12:	80 93 e1 0f 	sts	0x0FE1, r24	; 0x800fe1 <my_lcd+0x28>
   14d16:	10 92 e4 0f 	sts	0x0FE4, r1	; 0x800fe4 <my_lcd+0x2b>
   14d1a:	10 92 e3 0f 	sts	0x0FE3, r1	; 0x800fe3 <my_lcd+0x2a>
   14d1e:	10 92 e6 0f 	sts	0x0FE6, r1	; 0x800fe6 <my_lcd+0x2d>
   14d22:	10 92 e5 0f 	sts	0x0FE5, r1	; 0x800fe5 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
   14d26:	06 e6       	ldi	r16, 0x66	; 102
   14d28:	11 e8       	ldi	r17, 0x81	; 129
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
   14d2a:	3c e6       	ldi	r19, 0x6C	; 108
   14d2c:	e3 2e       	mov	r14, r19
   14d2e:	f1 2c       	mov	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
   14d30:	f8 01       	movw	r30, r16
   14d32:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
   14d34:	31 96       	adiw	r30, 0x01	; 1
   14d36:	d4 90       	lpm	r13, Z
   14d38:	0e 5f       	subi	r16, 0xFE	; 254
   14d3a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
   14d3c:	6f 37       	cpi	r22, 0x7F	; 127
   14d3e:	89 f0       	breq	.+34     	; 0x14d62 <setup+0x288>
   14d40:	de 01       	movw	r26, r28
   14d42:	a8 5b       	subi	r26, 0xB8	; 184
   14d44:	bf 4f       	sbci	r27, 0xFF	; 255
   14d46:	30 e0       	ldi	r19, 0x00	; 0
   14d48:	20 e0       	ldi	r18, 0x00	; 0
   14d4a:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
   14d4c:	2d 15       	cp	r18, r13
   14d4e:	08 f0       	brcs	.+2      	; 0x14d52 <setup+0x278>
   14d50:	70 c2       	rjmp	.+1248   	; 0x15232 <setup+0x758>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
   14d52:	f8 01       	movw	r30, r16
   14d54:	e2 0f       	add	r30, r18
   14d56:	f3 1f       	adc	r31, r19
   14d58:	e4 91       	lpm	r30, Z
   14d5a:	ed 93       	st	X+, r30
   14d5c:	2f 5f       	subi	r18, 0xFF	; 255
   14d5e:	3f 4f       	sbci	r19, 0xFF	; 255
   14d60:	f5 cf       	rjmp	.-22     	; 0x14d4c <setup+0x272>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
   14d62:	6d 2d       	mov	r22, r13
   14d64:	70 e0       	ldi	r23, 0x00	; 0
   14d66:	90 e0       	ldi	r25, 0x00	; 0
   14d68:	80 e0       	ldi	r24, 0x00	; 0
   14d6a:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
   14d6e:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
   14d70:	6d 2d       	mov	r22, r13
   14d72:	70 e0       	ldi	r23, 0x00	; 0
   14d74:	6e 5f       	subi	r22, 0xFE	; 254
   14d76:	7f 4f       	sbci	r23, 0xFF	; 255
   14d78:	e6 1a       	sub	r14, r22
   14d7a:	f7 0a       	sbc	r15, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
   14d7c:	1e 14       	cp	r1, r14
   14d7e:	1f 04       	cpc	r1, r15
   14d80:	bc f2       	brlt	.-82     	; 0x14d30 <setup+0x256>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
   14d82:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <my_lcd+0x16>
   14d86:	0e 94 53 d3 	call	0x1a6a6	; 0x1a6a6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
   14d8a:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   14d8e:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   14d92:	80 81       	ld	r24, Z
   14d94:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   14d98:	89 23       	and	r24, r25
   14d9a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
   14d9c:	20 91 e3 0f 	lds	r18, 0x0FE3	; 0x800fe3 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
   14da0:	40 91 d1 0f 	lds	r20, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   14da4:	50 91 d2 0f 	lds	r21, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   14da8:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   14dac:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   14db0:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   14db4:	80 81       	ld	r24, Z
   14db6:	89 23       	and	r24, r25
   14db8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
   14dba:	41 15       	cp	r20, r1
   14dbc:	51 05       	cpc	r21, r1
   14dbe:	09 f0       	breq	.+2      	; 0x14dc2 <setup+0x2e8>
   14dc0:	48 c2       	rjmp	.+1168   	; 0x15252 <setup+0x778>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
   14dc2:	81 e6       	ldi	r24, 0x61	; 97
   14dc4:	82 b9       	out	0x02, r24	; 2
   14dc6:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   14dca:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   14dce:	80 81       	ld	r24, Z
   14dd0:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   14dd4:	89 23       	and	r24, r25
   14dd6:	80 83       	st	Z, r24
   14dd8:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   14ddc:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   14de0:	80 81       	ld	r24, Z
   14de2:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   14de6:	89 2b       	or	r24, r25
   14de8:	80 83       	st	Z, r24
   14dea:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   14dee:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   14df2:	80 81       	ld	r24, Z
   14df4:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   14df8:	89 2b       	or	r24, r25
   14dfa:	80 83       	st	Z, r24
   14dfc:	22 b9       	out	0x02, r18	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
   14dfe:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   14e02:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   14e06:	80 81       	ld	r24, Z
   14e08:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   14e0c:	89 23       	and	r24, r25
   14e0e:	80 83       	st	Z, r24
   14e10:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   14e14:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   14e18:	80 81       	ld	r24, Z
   14e1a:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   14e1e:	89 2b       	or	r24, r25
   14e20:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
   14e22:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   14e26:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   14e2a:	80 81       	ld	r24, Z
   14e2c:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   14e30:	89 2b       	or	r24, r25
   14e32:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
   14e34:	83 e0       	ldi	r24, 0x03	; 3
   14e36:	0e 94 53 d3 	call	0x1a6a6	; 0x1a6a6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
  my_lcd.Fill_Screen(WHITE);
   14e3a:	8f ef       	ldi	r24, 0xFF	; 255
   14e3c:	9f ef       	ldi	r25, 0xFF	; 255
   14e3e:	0e 94 71 b8 	call	0x170e2	; 0x170e2 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
   14e42:	8f e1       	ldi	r24, 0x1F	; 31
   14e44:	90 e0       	ldi	r25, 0x00	; 0
   14e46:	90 93 c4 0f 	sts	0x0FC4, r25	; 0x800fc4 <my_lcd+0xb>
   14e4a:	80 93 c3 0f 	sts	0x0FC3, r24	; 0x800fc3 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3458
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
   14e4e:	62 ee       	ldi	r22, 0xE2	; 226
   14e50:	72 e8       	ldi	r23, 0x82	; 130
   14e52:	ce 01       	movw	r24, r28
   14e54:	88 5b       	subi	r24, 0xB8	; 184
   14e56:	9f 4f       	sbci	r25, 0xFF	; 255
   14e58:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3459
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
   14e5c:	ee 24       	eor	r14, r14
   14e5e:	ea 94       	dec	r14
   14e60:	fe 2c       	mov	r15, r14
   14e62:	0f e1       	ldi	r16, 0x1F	; 31
   14e64:	10 e0       	ldi	r17, 0x00	; 0
   14e66:	22 e0       	ldi	r18, 0x02	; 2
   14e68:	4a e0       	ldi	r20, 0x0A	; 10
   14e6a:	50 e0       	ldi	r21, 0x00	; 0
   14e6c:	6e e1       	ldi	r22, 0x1E	; 30
   14e6e:	70 e0       	ldi	r23, 0x00	; 0
   14e70:	ce 01       	movw	r24, r28
   14e72:	88 5b       	subi	r24, 0xB8	; 184
   14e74:	9f 4f       	sbci	r25, 0xFF	; 255
   14e76:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   14e7a:	8e e1       	ldi	r24, 0x1E	; 30
   14e7c:	90 e0       	ldi	r25, 0x00	; 0
   14e7e:	c3 5c       	subi	r28, 0xC3	; 195
   14e80:	de 4f       	sbci	r29, 0xFE	; 254
   14e82:	99 83       	std	Y+1, r25	; 0x01
   14e84:	88 83       	st	Y, r24
   14e86:	cd 53       	subi	r28, 0x3D	; 61
   14e88:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
  ///
  for (uint8_t init = 0;  init < 16; init++)
   14e8a:	c8 5c       	subi	r28, 0xC8	; 200
   14e8c:	de 4f       	sbci	r29, 0xFE	; 254
   14e8e:	18 82       	st	Y, r1
   14e90:	c8 53       	subi	r28, 0x38	; 56
   14e92:	d1 40       	sbci	r29, 0x01	; 1
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   14e94:	3e 01       	movw	r6, r28
   14e96:	9e ed       	ldi	r25, 0xDE	; 222
   14e98:	69 0e       	add	r6, r25
   14e9a:	71 1c       	adc	r7, r1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
   14e9c:	a8 ec       	ldi	r26, 0xC8	; 200
   14e9e:	b0 e0       	ldi	r27, 0x00	; 0
   14ea0:	ac 0f       	add	r26, r28
   14ea2:	bd 1f       	adc	r27, r29
   14ea4:	1c 96       	adiw	r26, 0x0c	; 12
   14ea6:	c1 5c       	subi	r28, 0xC1	; 193
   14ea8:	de 4f       	sbci	r29, 0xFE	; 254
   14eaa:	b9 83       	std	Y+1, r27	; 0x01
   14eac:	a8 83       	st	Y, r26
   14eae:	cf 53       	subi	r28, 0x3F	; 63
   14eb0:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
   14eb2:	ee 24       	eor	r14, r14
   14eb4:	ea 94       	dec	r14
   14eb6:	fe 2c       	mov	r15, r14
   14eb8:	00 e0       	ldi	r16, 0x00	; 0
   14eba:	18 ef       	ldi	r17, 0xF8	; 248
   14ebc:	21 e0       	ldi	r18, 0x01	; 1
   14ebe:	4e e1       	ldi	r20, 0x1E	; 30
   14ec0:	50 e0       	ldi	r21, 0x00	; 0
   14ec2:	c3 5c       	subi	r28, 0xC3	; 195
   14ec4:	de 4f       	sbci	r29, 0xFE	; 254
   14ec6:	68 81       	ld	r22, Y
   14ec8:	79 81       	ldd	r23, Y+1	; 0x01
   14eca:	cd 53       	subi	r28, 0x3D	; 61
   14ecc:	d1 40       	sbci	r29, 0x01	; 1
   14ece:	83 ef       	ldi	r24, 0xF3	; 243
   14ed0:	96 e0       	ldi	r25, 0x06	; 6
   14ed2:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
   14ed6:	c8 5c       	subi	r28, 0xC8	; 200
   14ed8:	de 4f       	sbci	r29, 0xFE	; 254
   14eda:	b8 81       	ld	r27, Y
   14edc:	c8 53       	subi	r28, 0x38	; 56
   14ede:	d1 40       	sbci	r29, 0x01	; 1
   14ee0:	b1 11       	cpse	r27, r1
   14ee2:	fc c1       	rjmp	.+1016   	; 0x152dc <setup+0x802>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   14ee4:	62 ed       	ldi	r22, 0xD2	; 210
   14ee6:	72 e8       	ldi	r23, 0x82	; 130
   14ee8:	ce 01       	movw	r24, r28
   14eea:	88 5b       	subi	r24, 0xB8	; 184
   14eec:	9f 4f       	sbci	r25, 0xFF	; 255
   14eee:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3468
      strcat(str1, ":1");
   14ef2:	65 ef       	ldi	r22, 0xF5	; 245
   14ef4:	76 e0       	ldi	r23, 0x06	; 6
   14ef6:	ce 01       	movw	r24, r28
   14ef8:	88 5b       	subi	r24, 0xB8	; 184
   14efa:	9f 4f       	sbci	r25, 0xFF	; 255
   14efc:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   14f00:	00 ee       	ldi	r16, 0xE0	; 224
   14f02:	17 e0       	ldi	r17, 0x07	; 7
   14f04:	21 e0       	ldi	r18, 0x01	; 1
   14f06:	42 e3       	ldi	r20, 0x32	; 50
   14f08:	50 e0       	ldi	r21, 0x00	; 0
   14f0a:	6e e1       	ldi	r22, 0x1E	; 30
   14f0c:	70 e0       	ldi	r23, 0x00	; 0
   14f0e:	ce 01       	movw	r24, r28
   14f10:	88 5b       	subi	r24, 0xB8	; 184
   14f12:	9f 4f       	sbci	r25, 0xFF	; 255
   14f14:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3471

      tritri = 0;
   14f18:	10 92 85 0b 	sts	0x0B85, r1	; 0x800b85 <tritri+0x1>
   14f1c:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3472
      petnula = 0;
   14f20:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <petnula+0x1>
   14f24:	10 92 82 0b 	sts	0x0B82, r1	; 0x800b82 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
      dvanact = 0;
   14f28:	10 92 81 0b 	sts	0x0B81, r1	; 0x800b81 <dvanact+0x1>
   14f2c:	10 92 80 0b 	sts	0x0B80, r1	; 0x800b80 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3475
      dvanact = 0;
      light_curr = 0;
   14f30:	10 92 a4 0c 	sts	0x0CA4, r1	; 0x800ca4 <light_curr+0x1>
   14f34:	10 92 a3 0c 	sts	0x0CA3, r1	; 0x800ca3 <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
   14f38:	88 ef       	ldi	r24, 0xF8	; 248
   14f3a:	80 93 83 0c 	sts	0x0C83, r24	; 0x800c83 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
   14f3e:	83 e0       	ldi	r24, 0x03	; 3
   14f40:	80 93 5d 0b 	sts	0x0B5D, r24	; 0x800b5d <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
   14f44:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
   14f48:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
   14f4c:	8e e8       	ldi	r24, 0x8E	; 142
   14f4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
   14f52:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
   14f56:	80 91 5d 0b 	lds	r24, 0x0B5D	; 0x800b5d <a2d_reference>
   14f5a:	e0 e4       	ldi	r30, 0x40	; 64
   14f5c:	8e 9f       	mul	r24, r30
   14f5e:	c0 01       	movw	r24, r0
   14f60:	11 24       	eor	r1, r1
   14f62:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
   14f66:	88 e9       	ldi	r24, 0x98	; 152
   14f68:	90 e5       	ldi	r25, 0x50	; 80
   14f6a:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <a2d_interupt_func+0x1>
   14f6e:	80 93 5f 0b 	sts	0x0B5F, r24	; 0x800b5f <a2d_interupt_func>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
   14f72:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3482
      a2d_start_first(A_PROUD);
   14f76:	83 e0       	ldi	r24, 0x03	; 3
   14f78:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3483
      milis = millis();
   14f7c:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14f80:	6b 01       	movw	r12, r22
   14f82:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
      while (a2d_run_now == 0 && millis() - milis < 10);
   14f84:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14f88:	6c 19       	sub	r22, r12
   14f8a:	7d 09       	sbc	r23, r13
   14f8c:	8e 09       	sbc	r24, r14
   14f8e:	9f 09       	sbc	r25, r15
   14f90:	6a 30       	cpi	r22, 0x0A	; 10
   14f92:	71 05       	cpc	r23, r1
   14f94:	81 05       	cpc	r24, r1
   14f96:	91 05       	cpc	r25, r1
   14f98:	a8 f3       	brcs	.-22     	; 0x14f84 <setup+0x4aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3487
      /// regulator 3.3V
      a2d_run_now = 0;
      a2d_start_first(A_TRIV);
   14f9a:	86 e0       	ldi	r24, 0x06	; 6
   14f9c:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
      milis = millis();
   14fa0:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14fa4:	6b 01       	movw	r12, r22
   14fa6:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
      while (a2d_run_now == 0 && millis() - milis < 10);
   14fa8:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14fac:	6c 19       	sub	r22, r12
   14fae:	7d 09       	sbc	r23, r13
   14fb0:	8e 09       	sbc	r24, r14
   14fb2:	9f 09       	sbc	r25, r15
   14fb4:	6a 30       	cpi	r22, 0x0A	; 10
   14fb6:	71 05       	cpc	r23, r1
   14fb8:	81 05       	cpc	r24, r1
   14fba:	91 05       	cpc	r25, r1
   14fbc:	a8 f3       	brcs	.-22     	; 0x14fa8 <setup+0x4ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3492
      /// regulator 5.0V
      a2d_run_now = 0;
      a2d_start_first(A_PETV);
   14fbe:	85 e0       	ldi	r24, 0x05	; 5
   14fc0:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3493
      milis = millis();
   14fc4:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14fc8:	6b 01       	movw	r12, r22
   14fca:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3494
      while (a2d_run_now == 0 && millis() - milis < 10);
   14fcc:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14fd0:	6c 19       	sub	r22, r12
   14fd2:	7d 09       	sbc	r23, r13
   14fd4:	8e 09       	sbc	r24, r14
   14fd6:	9f 09       	sbc	r25, r15
   14fd8:	6a 30       	cpi	r22, 0x0A	; 10
   14fda:	71 05       	cpc	r23, r1
   14fdc:	81 05       	cpc	r24, r1
   14fde:	91 05       	cpc	r25, r1
   14fe0:	a8 f3       	brcs	.-22     	; 0x14fcc <setup+0x4f2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3497
      /// vstupni napeti 12V
      a2d_run_now = 0;
      a2d_start_first(A_DVANACTV);
   14fe2:	84 e0       	ldi	r24, 0x04	; 4
   14fe4:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3498
      milis = millis();
   14fe8:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14fec:	6b 01       	movw	r12, r22
   14fee:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
      while (a2d_run_now == 0 && millis() - milis < 10);
   14ff0:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   14ff4:	6c 19       	sub	r22, r12
   14ff6:	7d 09       	sbc	r23, r13
   14ff8:	8e 09       	sbc	r24, r14
   14ffa:	9f 09       	sbc	r25, r15
   14ffc:	6a 30       	cpi	r22, 0x0A	; 10
   14ffe:	71 05       	cpc	r23, r1
   15000:	81 05       	cpc	r24, r1
   15002:	91 05       	cpc	r25, r1
   15004:	a8 f3       	brcs	.-22     	; 0x14ff0 <setup+0x516>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3502
      /// aktualni intenzita svetla
      a2d_run_now = 0;
      a2d_start_first(A_LIGHT);
   15006:	87 e0       	ldi	r24, 0x07	; 7
   15008:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3503
      milis = millis();
   1500c:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15010:	6b 01       	movw	r12, r22
   15012:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3504
      while (a2d_run_now == 0 && millis() - milis < 10);
   15014:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15018:	6c 19       	sub	r22, r12
   1501a:	7d 09       	sbc	r23, r13
   1501c:	8e 09       	sbc	r24, r14
   1501e:	9f 09       	sbc	r25, r15
   15020:	6a 30       	cpi	r22, 0x0A	; 10
   15022:	71 05       	cpc	r23, r1
   15024:	81 05       	cpc	r24, r1
   15026:	91 05       	cpc	r25, r1
   15028:	a8 f3       	brcs	.-22     	; 0x15014 <setup+0x53a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   1502a:	7e 01       	movw	r14, r28
   1502c:	fa ef       	ldi	r31, 0xFA	; 250
   1502e:	ef 1a       	sub	r14, r31
   15030:	fe ef       	ldi	r31, 0xFE	; 254
   15032:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   15034:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
   15038:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
   1503c:	25 e0       	ldi	r18, 0x05	; 5
   1503e:	28 9f       	mul	r18, r24
   15040:	b0 01       	movw	r22, r0
   15042:	29 9f       	mul	r18, r25
   15044:	70 0d       	add	r23, r0
   15046:	11 24       	eor	r1, r1
   15048:	90 e0       	ldi	r25, 0x00	; 0
   1504a:	80 e0       	ldi	r24, 0x00	; 0
   1504c:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   15050:	20 e0       	ldi	r18, 0x00	; 0
   15052:	30 e0       	ldi	r19, 0x00	; 0
   15054:	4a e7       	ldi	r20, 0x7A	; 122
   15056:	54 e4       	ldi	r21, 0x44	; 68
   15058:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
   1505c:	87 01       	movw	r16, r14
   1505e:	22 e0       	ldi	r18, 0x02	; 2
   15060:	44 e0       	ldi	r20, 0x04	; 4
   15062:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   15066:	6e 01       	movw	r12, r28
   15068:	22 ef       	ldi	r18, 0xF2	; 242
   1506a:	c2 1a       	sub	r12, r18
   1506c:	2e ef       	ldi	r18, 0xFE	; 254
   1506e:	d2 0a       	sbc	r13, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   15070:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
   15074:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
   15078:	03 e0       	ldi	r16, 0x03	; 3
   1507a:	66 0f       	add	r22, r22
   1507c:	77 1f       	adc	r23, r23
   1507e:	0a 95       	dec	r16
   15080:	e1 f7       	brne	.-8      	; 0x1507a <setup+0x5a0>
   15082:	90 e0       	ldi	r25, 0x00	; 0
   15084:	80 e0       	ldi	r24, 0x00	; 0
   15086:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1508a:	20 e0       	ldi	r18, 0x00	; 0
   1508c:	30 e0       	ldi	r19, 0x00	; 0
   1508e:	4a e7       	ldi	r20, 0x7A	; 122
   15090:	54 e4       	ldi	r21, 0x44	; 68
   15092:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3509
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
   15096:	86 01       	movw	r16, r12
   15098:	22 e0       	ldi	r18, 0x02	; 2
   1509a:	44 e0       	ldi	r20, 0x04	; 4
   1509c:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   150a0:	5e 01       	movw	r10, r28
   150a2:	8a ee       	ldi	r24, 0xEA	; 234
   150a4:	a8 1a       	sub	r10, r24
   150a6:	8e ef       	ldi	r24, 0xFE	; 254
   150a8:	b8 0a       	sbc	r11, r24
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   150aa:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   150ae:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   150b2:	29 e3       	ldi	r18, 0x39	; 57
   150b4:	28 9f       	mul	r18, r24
   150b6:	b0 01       	movw	r22, r0
   150b8:	29 9f       	mul	r18, r25
   150ba:	70 0d       	add	r23, r0
   150bc:	11 24       	eor	r1, r1
   150be:	90 e0       	ldi	r25, 0x00	; 0
   150c0:	80 e0       	ldi	r24, 0x00	; 0
   150c2:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   150c6:	20 e0       	ldi	r18, 0x00	; 0
   150c8:	30 e0       	ldi	r19, 0x00	; 0
   150ca:	4a e7       	ldi	r20, 0x7A	; 122
   150cc:	54 e4       	ldi	r21, 0x44	; 68
   150ce:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
   150d2:	85 01       	movw	r16, r10
   150d4:	22 e0       	ldi	r18, 0x02	; 2
   150d6:	44 e0       	ldi	r20, 0x04	; 4
   150d8:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   150dc:	4e 01       	movw	r8, r28
   150de:	92 ee       	ldi	r25, 0xE2	; 226
   150e0:	89 1a       	sub	r8, r25
   150e2:	9e ef       	ldi	r25, 0xFE	; 254
   150e4:	99 0a       	sbc	r9, r25
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   150e6:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
   150ea:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
   150ee:	90 e0       	ldi	r25, 0x00	; 0
   150f0:	80 e0       	ldi	r24, 0x00	; 0
   150f2:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
   150f6:	84 01       	movw	r16, r8
   150f8:	22 e0       	ldi	r18, 0x02	; 2
   150fa:	44 e0       	ldi	r20, 0x04	; 4
   150fc:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
   15100:	9f 92       	push	r9
   15102:	8f 92       	push	r8
   15104:	bf 92       	push	r11
   15106:	af 92       	push	r10
   15108:	df 92       	push	r13
   1510a:	cf 92       	push	r12
   1510c:	ff 92       	push	r15
   1510e:	ef 92       	push	r14
   15110:	88 ef       	ldi	r24, 0xF8	; 248
   15112:	96 e0       	ldi	r25, 0x06	; 6
   15114:	9f 93       	push	r25
   15116:	8f 93       	push	r24
   15118:	6e 01       	movw	r12, r28
   1511a:	a8 e8       	ldi	r26, 0x88	; 136
   1511c:	ca 0e       	add	r12, r26
   1511e:	d1 1c       	adc	r13, r1
   15120:	df 92       	push	r13
   15122:	cf 92       	push	r12
   15124:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3513
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15128:	ee 24       	eor	r14, r14
   1512a:	ea 94       	dec	r14
   1512c:	fe 2c       	mov	r15, r14
   1512e:	00 ee       	ldi	r16, 0xE0	; 224
   15130:	17 e0       	ldi	r17, 0x07	; 7
   15132:	21 e0       	ldi	r18, 0x01	; 1
   15134:	42 e3       	ldi	r20, 0x32	; 50
   15136:	50 e0       	ldi	r21, 0x00	; 0
   15138:	60 ea       	ldi	r22, 0xA0	; 160
   1513a:	70 e0       	ldi	r23, 0x00	; 0
   1513c:	c6 01       	movw	r24, r12
   1513e:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15142:	0f b6       	in	r0, 0x3f	; 63
   15144:	f8 94       	cli
   15146:	de bf       	out	0x3e, r29	; 62
   15148:	0f be       	out	0x3f, r0	; 63
   1514a:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836
      default_show_temp = get_default_show_temp();
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
   1514c:	c8 5c       	subi	r28, 0xC8	; 200
   1514e:	de 4f       	sbci	r29, 0xFE	; 254
   15150:	28 81       	ld	r18, Y
   15152:	c8 53       	subi	r28, 0x38	; 56
   15154:	d1 40       	sbci	r29, 0x01	; 1
   15156:	2e 30       	cpi	r18, 0x0E	; 14
   15158:	11 f0       	breq	.+4      	; 0x1515e <setup+0x684>
   1515a:	0c 94 68 b1 	jmp	0x162d0	; 0x162d0 <setup+0x17f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
    {
      strcpy_P(str1, text_ntp_cas);
   1515e:	65 ee       	ldi	r22, 0xE5	; 229
   15160:	71 e8       	ldi	r23, 0x81	; 129
   15162:	ce 01       	movw	r24, r28
   15164:	88 5b       	subi	r24, 0xB8	; 184
   15166:	9f 4f       	sbci	r25, 0xFF	; 255
   15168:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1516c:	ee 24       	eor	r14, r14
   1516e:	ea 94       	dec	r14
   15170:	fe 2c       	mov	r15, r14
   15172:	00 ee       	ldi	r16, 0xE0	; 224
   15174:	17 e0       	ldi	r17, 0x07	; 7
   15176:	21 e0       	ldi	r18, 0x01	; 1
   15178:	4e eb       	ldi	r20, 0xBE	; 190
   1517a:	50 e0       	ldi	r21, 0x00	; 0
   1517c:	6e e1       	ldi	r22, 0x1E	; 30
   1517e:	70 e0       	ldi	r23, 0x00	; 0
   15180:	ce 01       	movw	r24, r28
   15182:	88 5b       	subi	r24, 0xB8	; 184
   15184:	9f 4f       	sbci	r25, 0xFF	; 255
   15186:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:422
   1518a:	d3 01       	movw	r26, r6
   1518c:	1c 92       	st	X, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:423
  createString(tmp1, '.', device.ntp_server, 4, 10);
   1518e:	0a e0       	ldi	r16, 0x0A	; 10
   15190:	24 e0       	ldi	r18, 0x04	; 4
   15192:	47 e6       	ldi	r20, 0x67	; 103
   15194:	5e e0       	ldi	r21, 0x0E	; 14
   15196:	6e e2       	ldi	r22, 0x2E	; 46
   15198:	c3 01       	movw	r24, r6
   1519a:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   1519e:	89 e3       	ldi	r24, 0x39	; 57
   151a0:	95 e0       	ldi	r25, 0x05	; 5
   151a2:	9f 83       	std	Y+7, r25	; 0x07
   151a4:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   151a6:	89 81       	ldd	r24, Y+1	; 0x01
   151a8:	9a 81       	ldd	r25, Y+2	; 0x02
   151aa:	dc 01       	movw	r26, r24
   151ac:	ed 91       	ld	r30, X+
   151ae:	fc 91       	ld	r31, X
   151b0:	06 84       	ldd	r0, Z+14	; 0x0e
   151b2:	f7 85       	ldd	r31, Z+15	; 0x0f
   151b4:	e0 2d       	mov	r30, r0
   151b6:	69 e3       	ldi	r22, 0x39	; 57
   151b8:	75 e0       	ldi	r23, 0x05	; 5
   151ba:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   151bc:	81 e0       	ldi	r24, 0x01	; 1
   151be:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   151c0:	80 e1       	ldi	r24, 0x10	; 16
   151c2:	9e e0       	ldi	r25, 0x0E	; 14
   151c4:	a0 e0       	ldi	r26, 0x00	; 0
   151c6:	b0 e0       	ldi	r27, 0x00	; 0
   151c8:	88 87       	std	Y+8, r24	; 0x08
   151ca:	99 87       	std	Y+9, r25	; 0x09
   151cc:	aa 87       	std	Y+10, r26	; 0x0a
   151ce:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   151d0:	7d 82       	std	Y+5, r7	; 0x05
   151d2:	6c 82       	std	Y+4, r6	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
   151d4:	81 e0       	ldi	r24, 0x01	; 1
   151d6:	90 e0       	ldi	r25, 0x00	; 0
   151d8:	a0 e0       	ldi	r26, 0x00	; 0
   151da:	b0 e0       	ldi	r27, 0x00	; 0
   151dc:	8c 87       	std	Y+12, r24	; 0x0c
   151de:	9d 87       	std	Y+13, r25	; 0x0d
   151e0:	ae 87       	std	Y+14, r26	; 0x0e
   151e2:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:428
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
   151e4:	ce 01       	movw	r24, r28
   151e6:	01 96       	adiw	r24, 0x01	; 1
   151e8:	0e 94 ed 63 	call	0xc7da	; 0xc7da <NTPClient::update()>
   151ec:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   151ee:	89 81       	ldd	r24, Y+1	; 0x01
   151f0:	9a 81       	ldd	r25, Y+2	; 0x02
   151f2:	dc 01       	movw	r26, r24
   151f4:	ed 91       	ld	r30, X+
   151f6:	fc 91       	ld	r31, X
   151f8:	02 88       	ldd	r0, Z+18	; 0x12
   151fa:	f3 89       	ldd	r31, Z+19	; 0x13
   151fc:	e0 2d       	mov	r30, r0
   151fe:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   15200:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
      if (ntp_check(&timeClient) == 0)
   15202:	11 11       	cpse	r17, r1
   15204:	0c 94 4e b1 	jmp	0x1629c	; 0x1629c <setup+0x17c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
      {
        strcpy_P(str1, text_err);
   15208:	6e eb       	ldi	r22, 0xBE	; 190
   1520a:	73 e8       	ldi	r23, 0x83	; 131
   1520c:	ce 01       	movw	r24, r28
   1520e:	88 5b       	subi	r24, 0xB8	; 184
   15210:	9f 4f       	sbci	r25, 0xFF	; 255
   15212:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   15216:	00 e0       	ldi	r16, 0x00	; 0
   15218:	18 ef       	ldi	r17, 0xF8	; 248
   1521a:	21 e0       	ldi	r18, 0x01	; 1
   1521c:	4e eb       	ldi	r20, 0xBE	; 190
   1521e:	50 e0       	ldi	r21, 0x00	; 0
   15220:	60 ea       	ldi	r22, 0xA0	; 160
   15222:	70 e0       	ldi	r23, 0x00	; 0
   15224:	ce 01       	movw	r24, r28
   15226:	88 5b       	subi	r24, 0xB8	; 184
   15228:	9f 4f       	sbci	r25, 0xFF	; 255
   1522a:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3844
        selftest_set_0(SELFTEST_ERR_NTP);
   1522e:	81 e0       	ldi	r24, 0x01	; 1
   15230:	72 c5       	rjmp	.+2788   	; 0x15d16 <setup+0x123c>
   15232:	0d 0d       	add	r16, r13
   15234:	11 1d       	adc	r17, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
   15236:	70 e0       	ldi	r23, 0x00	; 0
   15238:	2d 2d       	mov	r18, r13
   1523a:	89 eb       	ldi	r24, 0xB9	; 185
   1523c:	9f e0       	ldi	r25, 0x0F	; 15
   1523e:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   15242:	96 cd       	rjmp	.-1236   	; 0x14d70 <setup+0x296>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
   15244:	8f ef       	ldi	r24, 0xFF	; 255
   15246:	90 e0       	ldi	r25, 0x00	; 0
   15248:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <my_lcd+0x19>
   1524c:	80 93 d1 0f 	sts	0x0FD1, r24	; 0x800fd1 <my_lcd+0x18>
   15250:	98 cd       	rjmp	.-1232   	; 0x14d82 <setup+0x2a8>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
   15252:	41 30       	cpi	r20, 0x01	; 1
   15254:	51 05       	cpc	r21, r1
   15256:	19 f5       	brne	.+70     	; 0x1529e <setup+0x7c4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
   15258:	81 e0       	ldi	r24, 0x01	; 1
   1525a:	82 b9       	out	0x02, r24	; 2
   1525c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   15260:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   15264:	80 81       	ld	r24, Z
   15266:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1526a:	89 23       	and	r24, r25
   1526c:	80 83       	st	Z, r24
   1526e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   15272:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   15276:	80 81       	ld	r24, Z
   15278:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1527c:	89 2b       	or	r24, r25
   1527e:	80 83       	st	Z, r24
   15280:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   15284:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   15288:	80 81       	ld	r24, Z
   1528a:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1528e:	89 2b       	or	r24, r25
   15290:	80 83       	st	Z, r24
setup():
   15292:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
   15294:	21 11       	cpse	r18, r1
   15296:	01 c0       	rjmp	.+2      	; 0x1529a <setup+0x7c0>
setup():
   15298:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
   1529a:	82 b9       	out	0x02, r24	; 2
   1529c:	b0 cd       	rjmp	.-1184   	; 0x14dfe <setup+0x324>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
   1529e:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
   152a0:	21 11       	cpse	r18, r1
   152a2:	01 c0       	rjmp	.+2      	; 0x152a6 <setup+0x7cc>
setup():
   152a4:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
   152a6:	82 b9       	out	0x02, r24	; 2
   152a8:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   152ac:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   152b0:	80 81       	ld	r24, Z
   152b2:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   152b6:	89 23       	and	r24, r25
   152b8:	80 83       	st	Z, r24
   152ba:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   152be:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   152c2:	80 81       	ld	r24, Z
   152c4:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   152c8:	89 2b       	or	r24, r25
   152ca:	80 83       	st	Z, r24
   152cc:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   152d0:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   152d4:	80 81       	ld	r24, Z
   152d6:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   152da:	a1 cd       	rjmp	.-1214   	; 0x14e1e <setup+0x344>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3517
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
   152dc:	c8 5c       	subi	r28, 0xC8	; 200
   152de:	de 4f       	sbci	r29, 0xFE	; 254
   152e0:	f8 81       	ld	r31, Y
   152e2:	c8 53       	subi	r28, 0x38	; 56
   152e4:	d1 40       	sbci	r29, 0x01	; 1
   152e6:	f1 30       	cpi	r31, 0x01	; 1
   152e8:	09 f0       	breq	.+2      	; 0x152ec <setup+0x812>
   152ea:	63 c0       	rjmp	.+198    	; 0x153b2 <setup+0x8d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3519
    {
      strcpy_P(str1, text_vnitrni_ochrany);
   152ec:	62 ed       	ldi	r22, 0xD2	; 210
   152ee:	72 e8       	ldi	r23, 0x82	; 130
   152f0:	ce 01       	movw	r24, r28
   152f2:	88 5b       	subi	r24, 0xB8	; 184
   152f4:	9f 4f       	sbci	r25, 0xFF	; 255
   152f6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
      strcat(str1, ":2");
   152fa:	66 e1       	ldi	r22, 0x16	; 22
   152fc:	77 e0       	ldi	r23, 0x07	; 7
   152fe:	ce 01       	movw	r24, r28
   15300:	88 5b       	subi	r24, 0xB8	; 184
   15302:	9f 4f       	sbci	r25, 0xFF	; 255
   15304:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3521
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15308:	ee 24       	eor	r14, r14
   1530a:	ea 94       	dec	r14
   1530c:	fe 2c       	mov	r15, r14
   1530e:	00 ee       	ldi	r16, 0xE0	; 224
   15310:	17 e0       	ldi	r17, 0x07	; 7
   15312:	21 e0       	ldi	r18, 0x01	; 1
   15314:	4c e3       	ldi	r20, 0x3C	; 60
   15316:	50 e0       	ldi	r21, 0x00	; 0
   15318:	6e e1       	ldi	r22, 0x1E	; 30
   1531a:	70 e0       	ldi	r23, 0x00	; 0
   1531c:	ce 01       	movw	r24, r28
   1531e:	88 5b       	subi	r24, 0xB8	; 184
   15320:	9f 4f       	sbci	r25, 0xFF	; 255
   15322:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   15326:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <lm75_temp+0xb>
   1532a:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <lm75_temp+0xc>
   1532e:	04 80       	ldd	r0, Z+4	; 0x04
   15330:	f5 81       	ldd	r31, Z+5	; 0x05
   15332:	e0 2d       	mov	r30, r0
   15334:	80 81       	ld	r24, Z
   15336:	0e 94 1c b8 	call	0x17038	; 0x17038 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
   1533a:	7e 01       	movw	r14, r28
   1533c:	22 ee       	ldi	r18, 0xE2	; 226
   1533e:	e2 1a       	sub	r14, r18
   15340:	2e ef       	ldi	r18, 0xFE	; 254
   15342:	f2 0a       	sbc	r15, r18
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   15344:	bc 01       	movw	r22, r24
   15346:	99 0f       	add	r25, r25
   15348:	88 0b       	sbc	r24, r24
   1534a:	99 0b       	sbc	r25, r25
   1534c:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   15350:	20 91 0b 10 	lds	r18, 0x100B	; 0x80100b <lm75_temp+0x7>
   15354:	30 91 0c 10 	lds	r19, 0x100C	; 0x80100c <lm75_temp+0x8>
   15358:	40 91 0d 10 	lds	r20, 0x100D	; 0x80100d <lm75_temp+0x9>
   1535c:	50 91 0e 10 	lds	r21, 0x100E	; 0x80100e <lm75_temp+0xa>
   15360:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3522
   15364:	87 01       	movw	r16, r14
   15366:	22 e0       	ldi	r18, 0x02	; 2
   15368:	44 e0       	ldi	r20, 0x04	; 4
   1536a:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
      sprintf(str2, "iT=%sC", s_current);
   1536e:	ff 92       	push	r15
   15370:	ef 92       	push	r14
   15372:	89 e1       	ldi	r24, 0x19	; 25
   15374:	97 e0       	ldi	r25, 0x07	; 7
   15376:	9f 93       	push	r25
   15378:	8f 93       	push	r24
   1537a:	6e 01       	movw	r12, r28
   1537c:	88 e8       	ldi	r24, 0x88	; 136
   1537e:	c8 0e       	add	r12, r24
   15380:	d1 1c       	adc	r13, r1
   15382:	df 92       	push	r13
   15384:	cf 92       	push	r12
   15386:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3524
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1538a:	ee 24       	eor	r14, r14
   1538c:	ea 94       	dec	r14
   1538e:	fe 2c       	mov	r15, r14
   15390:	00 ee       	ldi	r16, 0xE0	; 224
   15392:	17 e0       	ldi	r17, 0x07	; 7
   15394:	21 e0       	ldi	r18, 0x01	; 1
   15396:	4c e3       	ldi	r20, 0x3C	; 60
   15398:	50 e0       	ldi	r21, 0x00	; 0
   1539a:	60 ea       	ldi	r22, 0xA0	; 160
   1539c:	70 e0       	ldi	r23, 0x00	; 0
   1539e:	c6 01       	movw	r24, r12
   153a0:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   153a4:	0f 90       	pop	r0
   153a6:	0f 90       	pop	r0
   153a8:	0f 90       	pop	r0
   153aa:	0f 90       	pop	r0
   153ac:	0f 90       	pop	r0
   153ae:	0f 90       	pop	r0
   153b0:	cd ce       	rjmp	.-614    	; 0x1514c <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
   153b2:	c8 5c       	subi	r28, 0xC8	; 200
   153b4:	de 4f       	sbci	r29, 0xFE	; 254
   153b6:	98 81       	ld	r25, Y
   153b8:	c8 53       	subi	r28, 0x38	; 56
   153ba:	d1 40       	sbci	r29, 0x01	; 1
   153bc:	92 30       	cpi	r25, 0x02	; 2
   153be:	09 f0       	breq	.+2      	; 0x153c2 <setup+0x8e8>
   153c0:	87 c1       	rjmp	.+782    	; 0x156d0 <setup+0xbf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3530
    {
      if (EEPROM.read(set_default_values) == 255)
   153c2:	8a e5       	ldi	r24, 0x5A	; 90
   153c4:	90 e0       	ldi	r25, 0x00	; 0
   153c6:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   153ca:	8f 3f       	cpi	r24, 0xFF	; 255
   153cc:	09 f0       	breq	.+2      	; 0x153d0 <setup+0x8f6>
   153ce:	6e c1       	rjmp	.+732    	; 0x156ac <setup+0xbd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3532
      {
        EEPROM.write(set_default_values, 0);
   153d0:	60 e0       	ldi	r22, 0x00	; 0
   153d2:	8a e5       	ldi	r24, 0x5A	; 90
   153d4:	90 e0       	ldi	r25, 0x00	; 0
   153d6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3533
        strcpy_P(str1, text_vychozi_nastaveni);
   153da:	60 ec       	ldi	r22, 0xC0	; 192
   153dc:	72 e8       	ldi	r23, 0x82	; 130
   153de:	ce 01       	movw	r24, r28
   153e0:	88 5b       	subi	r24, 0xB8	; 184
   153e2:	9f 4f       	sbci	r25, 0xFF	; 255
   153e4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3534
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   153e8:	ee 24       	eor	r14, r14
   153ea:	ea 94       	dec	r14
   153ec:	fe 2c       	mov	r15, r14
   153ee:	00 e0       	ldi	r16, 0x00	; 0
   153f0:	18 ef       	ldi	r17, 0xF8	; 248
   153f2:	21 e0       	ldi	r18, 0x01	; 1
   153f4:	46 e4       	ldi	r20, 0x46	; 70
   153f6:	50 e0       	ldi	r21, 0x00	; 0
   153f8:	6e e1       	ldi	r22, 0x1E	; 30
   153fa:	70 e0       	ldi	r23, 0x00	; 0
   153fc:	ce 01       	movw	r24, r28
   153fe:	88 5b       	subi	r24, 0xB8	; 184
   15400:	9f 4f       	sbci	r25, 0xFF	; 255
   15402:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
   15406:	6f ef       	ldi	r22, 0xFF	; 255
   15408:	8d e5       	ldi	r24, 0x5D	; 93
   1540a:	90 e0       	ldi	r25, 0x00	; 0
   1540c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3539
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
   15410:	80 e0       	ldi	r24, 0x00	; 0
   15412:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
   15416:	81 e0       	ldi	r24, 0x01	; 1
   15418:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
   1541c:	82 e0       	ldi	r24, 0x02	; 2
   1541e:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
   15422:	83 e0       	ldi	r24, 0x03	; 3
   15424:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
   15428:	84 e0       	ldi	r24, 0x04	; 4
   1542a:	0e 94 3d 6c 	call	0xd87a	; 0xd87a <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3541
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1542e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3543
        {
          strcpy(tmp1, "");
   15430:	62 e0       	ldi	r22, 0x02	; 2
   15432:	73 e0       	ldi	r23, 0x03	; 3
   15434:	ce 01       	movw	r24, r28
   15436:	8e 50       	subi	r24, 0x0E	; 14
   15438:	9f 4f       	sbci	r25, 0xFF	; 255
   1543a:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
          remote_tds_clear(idx);
   1543e:	81 2f       	mov	r24, r17
   15440:	0e 94 93 6f 	call	0xdf26	; 0xdf26 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3541
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15444:	1f 5f       	subi	r17, 0xFF	; 255
   15446:	1a 30       	cpi	r17, 0x0A	; 10
   15448:	99 f7       	brne	.-26     	; 0x15430 <setup+0x956>
   1544a:	f1 ef       	ldi	r31, 0xF1	; 241
   1544c:	af 2e       	mov	r10, r31
   1544e:	bb 24       	eor	r11, r11
   15450:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3547
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   15452:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3549
        {
          strcpy_P(str2, text_prog);
   15454:	6b eb       	ldi	r22, 0xBB	; 187
   15456:	72 e8       	ldi	r23, 0x82	; 130
   15458:	ce 01       	movw	r24, r28
   1545a:	88 57       	subi	r24, 0x78	; 120
   1545c:	9f 4f       	sbci	r25, 0xFF	; 255
   1545e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
          thermostat_program_set_name(idx, str2);
   15462:	be 01       	movw	r22, r28
   15464:	68 57       	subi	r22, 0x78	; 120
   15466:	7f 4f       	sbci	r23, 0xFF	; 255
   15468:	81 2f       	mov	r24, r17
   1546a:	0e 94 b3 6a 	call	0xd566	; 0xd566 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
   1546e:	6f ef       	ldi	r22, 0xFF	; 255
   15470:	c5 01       	movw	r24, r10
   15472:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   15476:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
   15478:	c1 2c       	mov	r12, r1
   1547a:	e1 2c       	mov	r14, r1
   1547c:	00 e0       	ldi	r16, 0x00	; 0
   1547e:	20 e0       	ldi	r18, 0x00	; 0
   15480:	40 e0       	ldi	r20, 0x00	; 0
   15482:	6f 2d       	mov	r22, r15
   15484:	81 2f       	mov	r24, r17
   15486:	0e 94 77 6a 	call	0xd4ee	; 0xd4ee <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
            thermostat_program_set_threshold(idx, interval_id, 220);
   1548a:	4c ed       	ldi	r20, 0xDC	; 220
   1548c:	50 e0       	ldi	r21, 0x00	; 0
   1548e:	6f 2d       	mov	r22, r15
   15490:	81 2f       	mov	r24, r17
   15492:	0e 94 5b 6a 	call	0xd4b6	; 0xd4b6 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3556
            thermostat_program_set_week(idx, interval_id, 0);
   15496:	40 e0       	ldi	r20, 0x00	; 0
   15498:	6f 2d       	mov	r22, r15
   1549a:	81 2f       	mov	r24, r17
   1549c:	0e 94 4d 6a 	call	0xd49a	; 0xd49a <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3552
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy_P(str2, text_prog);
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, PROG_FREE);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   154a0:	f3 94       	inc	r15
   154a2:	ab e0       	ldi	r26, 0x0B	; 11
   154a4:	fa 12       	cpse	r15, r26
   154a6:	e8 cf       	rjmp	.-48     	; 0x15478 <setup+0x99e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3547
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   154a8:	1f 5f       	subi	r17, 0xFF	; 255
   154aa:	bd e4       	ldi	r27, 0x4D	; 77
   154ac:	ab 0e       	add	r10, r27
   154ae:	b1 1c       	adc	r11, r1
   154b0:	18 30       	cpi	r17, 0x08	; 8
   154b2:	81 f6       	brne	.-96     	; 0x15454 <setup+0x97a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
   154b4:	ea e0       	ldi	r30, 0x0A	; 10
   154b6:	fe 2e       	mov	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   154b8:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3562
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
   154ba:	be 01       	movw	r22, r28
   154bc:	68 53       	subi	r22, 0x38	; 56
   154be:	7f 4f       	sbci	r23, 0xFF	; 255
   154c0:	80 2f       	mov	r24, r16
   154c2:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
          strcpy(tds.name, "FREE");
   154c6:	6e e9       	ldi	r22, 0x9E	; 158
   154c8:	73 e0       	ldi	r23, 0x03	; 3
   154ca:	c1 5c       	subi	r28, 0xC1	; 193
   154cc:	de 4f       	sbci	r29, 0xFE	; 254
   154ce:	88 81       	ld	r24, Y
   154d0:	99 81       	ldd	r25, Y+1	; 0x01
   154d2:	cf 53       	subi	r28, 0x3F	; 63
   154d4:	d1 40       	sbci	r29, 0x01	; 1
   154d6:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3564
          tds.used = 0;
   154da:	c8 53       	subi	r28, 0x38	; 56
   154dc:	df 4f       	sbci	r29, 0xFF	; 255
   154de:	18 82       	st	Y, r1
   154e0:	c8 5c       	subi	r28, 0xC8	; 200
   154e2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3565
          tds.offset = 0;
   154e4:	ce 52       	subi	r28, 0x2E	; 46
   154e6:	df 4f       	sbci	r29, 0xFF	; 255
   154e8:	19 82       	std	Y+1, r1	; 0x01
   154ea:	18 82       	st	Y, r1
   154ec:	c2 5d       	subi	r28, 0xD2	; 210
   154ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3566
          tds.assigned_ds2482 = 0;
   154f0:	cf 52       	subi	r28, 0x2F	; 47
   154f2:	df 4f       	sbci	r29, 0xFF	; 255
   154f4:	18 82       	st	Y, r1
   154f6:	c1 5d       	subi	r28, 0xD1	; 209
   154f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3567
          tds.period = 10;
   154fa:	c4 52       	subi	r28, 0x24	; 36
   154fc:	df 4f       	sbci	r29, 0xFF	; 255
   154fe:	f8 82       	st	Y, r15
   15500:	cc 5d       	subi	r28, 0xDC	; 220
   15502:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
   15504:	c7 53       	subi	r28, 0x37	; 55
   15506:	df 4f       	sbci	r29, 0xFF	; 255
   15508:	18 83       	st	Y, r17
   1550a:	c9 5c       	subi	r28, 0xC9	; 201
   1550c:	d0 40       	sbci	r29, 0x00	; 0
   1550e:	c6 53       	subi	r28, 0x36	; 54
   15510:	df 4f       	sbci	r29, 0xFF	; 255
   15512:	18 83       	st	Y, r17
   15514:	ca 5c       	subi	r28, 0xCA	; 202
   15516:	d0 40       	sbci	r29, 0x00	; 0
   15518:	c5 53       	subi	r28, 0x35	; 53
   1551a:	df 4f       	sbci	r29, 0xFF	; 255
   1551c:	18 83       	st	Y, r17
   1551e:	cb 5c       	subi	r28, 0xCB	; 203
   15520:	d0 40       	sbci	r29, 0x00	; 0
   15522:	c4 53       	subi	r28, 0x34	; 52
   15524:	df 4f       	sbci	r29, 0xFF	; 255
   15526:	18 83       	st	Y, r17
   15528:	cc 5c       	subi	r28, 0xCC	; 204
   1552a:	d0 40       	sbci	r29, 0x00	; 0
   1552c:	c3 53       	subi	r28, 0x33	; 51
   1552e:	df 4f       	sbci	r29, 0xFF	; 255
   15530:	18 83       	st	Y, r17
   15532:	cd 5c       	subi	r28, 0xCD	; 205
   15534:	d0 40       	sbci	r29, 0x00	; 0
   15536:	c2 53       	subi	r28, 0x32	; 50
   15538:	df 4f       	sbci	r29, 0xFF	; 255
   1553a:	18 83       	st	Y, r17
   1553c:	ce 5c       	subi	r28, 0xCE	; 206
   1553e:	d0 40       	sbci	r29, 0x00	; 0
   15540:	c1 53       	subi	r28, 0x31	; 49
   15542:	df 4f       	sbci	r29, 0xFF	; 255
   15544:	18 83       	st	Y, r17
   15546:	cf 5c       	subi	r28, 0xCF	; 207
   15548:	d0 40       	sbci	r29, 0x00	; 0
   1554a:	c0 53       	subi	r28, 0x30	; 48
   1554c:	df 4f       	sbci	r29, 0xFF	; 255
   1554e:	18 83       	st	Y, r17
   15550:	c0 5d       	subi	r28, 0xD0	; 208
   15552:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3569
          set_tds18s20(idx, &tds);
   15554:	be 01       	movw	r22, r28
   15556:	68 53       	subi	r22, 0x38	; 56
   15558:	7f 4f       	sbci	r23, 0xFF	; 255
   1555a:	80 2f       	mov	r24, r16
   1555c:	0e 94 00 6d 	call	0xda00	; 0xda00 <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
   15560:	0f 5f       	subi	r16, 0xFF	; 255
   15562:	06 30       	cpi	r16, 0x06	; 6
   15564:	09 f0       	breq	.+2      	; 0x15568 <setup+0xa8e>
   15566:	a9 cf       	rjmp	.-174    	; 0x154ba <setup+0x9e0>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   15568:	84 e1       	ldi	r24, 0x14	; 20
   1556a:	f3 01       	movw	r30, r6
   1556c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   1556e:	8c e0       	ldi	r24, 0x0C	; 12
   15570:	81 83       	std	Z+1, r24	; 0x01
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   15572:	8e e0       	ldi	r24, 0x0E	; 14
   15574:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   15576:	91 e1       	ldi	r25, 0x11	; 17
   15578:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   1557a:	84 83       	std	Z+4, r24	; 0x04
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   1557c:	15 82       	std	Z+5, r1	; 0x05
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3572
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
   1557e:	c3 01       	movw	r24, r6
   15580:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3202
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(int8_t offset)
{
  EEPROM.write(time_offset, offset);
   15584:	61 e0       	ldi	r22, 0x01	; 1
   15586:	81 e0       	ldi	r24, 0x01	; 1
   15588:	90 e0       	ldi	r25, 0x00	; 0
   1558a:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3575
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
   1558e:	22 e0       	ldi	r18, 0x02	; 2
   15590:	20 93 19 0e 	sts	0x0E19, r18	; 0x800e19 <device>
   15594:	31 e0       	ldi	r19, 0x01	; 1
   15596:	30 93 1a 0e 	sts	0x0E1A, r19	; 0x800e1a <device+0x1>
   1559a:	20 93 1b 0e 	sts	0x0E1B, r18	; 0x800e1b <device+0x2>
   1559e:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   155a2:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   155a6:	96 95       	lsr	r25
   155a8:	87 95       	ror	r24
   155aa:	80 93 1c 0e 	sts	0x0E1C, r24	; 0x800e1c <device+0x3>
   155ae:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   155b2:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   155b6:	96 95       	lsr	r25
   155b8:	87 95       	ror	r24
   155ba:	80 93 1d 0e 	sts	0x0E1D, r24	; 0x800e1d <device+0x4>
   155be:	80 91 7e 0b 	lds	r24, 0x0B7E	; 0x800b7e <proud>
   155c2:	90 91 7f 0b 	lds	r25, 0x0B7F	; 0x800b7f <proud+0x1>
   155c6:	96 95       	lsr	r25
   155c8:	87 95       	ror	r24
   155ca:	80 93 1e 0e 	sts	0x0E1E, r24	; 0x800e1e <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3576
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 111;
   155ce:	90 ec       	ldi	r25, 0xC0	; 192
   155d0:	90 93 1f 0e 	sts	0x0E1F, r25	; 0x800e1f <device+0x6>
   155d4:	88 ea       	ldi	r24, 0xA8	; 168
   155d6:	80 93 20 0e 	sts	0x0E20, r24	; 0x800e20 <device+0x7>
   155da:	20 93 21 0e 	sts	0x0E21, r18	; 0x800e21 <device+0x8>
   155de:	4f e6       	ldi	r20, 0x6F	; 111
   155e0:	40 93 22 0e 	sts	0x0E22, r20	; 0x800e22 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3577
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
   155e4:	10 93 23 0e 	sts	0x0E23, r17	; 0x800e23 <device+0xa>
   155e8:	10 93 24 0e 	sts	0x0E24, r17	; 0x800e24 <device+0xb>
   155ec:	10 93 25 0e 	sts	0x0E25, r17	; 0x800e25 <device+0xc>
   155f0:	10 92 26 0e 	sts	0x0E26, r1	; 0x800e26 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3579

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
   155f4:	90 93 2b 0e 	sts	0x0E2B, r25	; 0x800e2b <device+0x12>
   155f8:	80 93 2c 0e 	sts	0x0E2C, r24	; 0x800e2c <device+0x13>
   155fc:	20 93 2d 0e 	sts	0x0E2D, r18	; 0x800e2d <device+0x14>
   15600:	30 93 2e 0e 	sts	0x0E2E, r19	; 0x800e2e <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3580
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
   15604:	90 93 27 0e 	sts	0x0E27, r25	; 0x800e27 <device+0xe>
   15608:	80 93 28 0e 	sts	0x0E28, r24	; 0x800e28 <device+0xf>
   1560c:	20 93 29 0e 	sts	0x0E29, r18	; 0x800e29 <device+0x10>
   15610:	30 93 2a 0e 	sts	0x0E2A, r19	; 0x800e2a <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3581
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
   15614:	90 93 39 0e 	sts	0x0E39, r25	; 0x800e39 <device+0x20>
   15618:	80 93 3a 0e 	sts	0x0E3A, r24	; 0x800e3a <device+0x21>
   1561c:	20 93 3b 0e 	sts	0x0E3B, r18	; 0x800e3b <device+0x22>
   15620:	30 93 3c 0e 	sts	0x0E3C, r19	; 0x800e3c <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3582
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
   15624:	90 93 67 0e 	sts	0x0E67, r25	; 0x800e67 <device+0x4e>
   15628:	80 93 68 0e 	sts	0x0E68, r24	; 0x800e68 <device+0x4f>
   1562c:	20 93 69 0e 	sts	0x0E69, r18	; 0x800e69 <device+0x50>
   15630:	30 93 6a 0e 	sts	0x0E6A, r19	; 0x800e6a <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
        device.mqtt_port = 1883;
   15634:	8b e5       	ldi	r24, 0x5B	; 91
   15636:	97 e0       	ldi	r25, 0x07	; 7
   15638:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   1563c:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
        strcpy(device.mqtt_user, "saric");
   15640:	60 e2       	ldi	r22, 0x20	; 32
   15642:	77 e0       	ldi	r23, 0x07	; 7
   15644:	8f e3       	ldi	r24, 0x3F	; 63
   15646:	9e e0       	ldi	r25, 0x0E	; 14
   15648:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3585
        strcpy(device.mqtt_key, "no");
   1564c:	66 e2       	ldi	r22, 0x26	; 38
   1564e:	77 e0       	ldi	r23, 0x07	; 7
   15650:	83 e5       	ldi	r24, 0x53	; 83
   15652:	9e e0       	ldi	r25, 0x0E	; 14
   15654:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
        save_setup_network();
   15658:	0e 94 89 6d 	call	0xdb12	; 0xdb12 <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
        strcpy(str1, "TERM D2");
   1565c:	69 e2       	ldi	r22, 0x29	; 41
   1565e:	77 e0       	ldi	r23, 0x07	; 7
   15660:	ce 01       	movw	r24, r28
   15662:	88 5b       	subi	r24, 0xB8	; 184
   15664:	9f 4f       	sbci	r25, 0xFF	; 255
   15666:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3588
        device_set_name(str1);
   1566a:	ce 01       	movw	r24, r28
   1566c:	88 5b       	subi	r24, 0xB8	; 184
   1566e:	9f 4f       	sbci	r25, 0xFF	; 255
   15670:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3590
        char hostname[10];
        device_get_name(hostname);
   15674:	c3 01       	movw	r24, r6
   15676:	0e 94 2a 91 	call	0x12254	; 0x12254 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3591
        default_ring = NO_DEFAULT_RING;
   1567a:	10 93 86 0b 	sts	0x0B86, r17	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
        last_default_ring = NO_DEFAULT_RING;
   1567e:	10 93 95 09 	sts	0x0995, r17	; 0x800995 <last_default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
   15682:	6f ef       	ldi	r22, 0xFF	; 255
   15684:	8c e5       	ldi	r24, 0x5C	; 92
   15686:	90 e0       	ldi	r25, 0x00	; 0
   15688:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3594
        char hostname[10];
        device_get_name(hostname);
        default_ring = NO_DEFAULT_RING;
        last_default_ring = NO_DEFAULT_RING;
        set_default_ring(default_ring);
        EEPROM.write(my_brightness_values, 50);
   1568c:	62 e3       	ldi	r22, 0x32	; 50
   1568e:	8e e5       	ldi	r24, 0x5E	; 94
   15690:	90 e0       	ldi	r25, 0x00	; 0
   15692:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3595
        EEPROM.write(my_brightness_mode, 0);
   15696:	60 e0       	ldi	r22, 0x00	; 0
   15698:	8f e5       	ldi	r24, 0x5F	; 95
   1569a:	90 e0       	ldi	r25, 0x00	; 0
   1569c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3596
        EEPROM.write(my_display_auto_shutdown, 60);
   156a0:	6c e3       	ldi	r22, 0x3C	; 60
   156a2:	80 e6       	ldi	r24, 0x60	; 96
   156a4:	90 e0       	ldi	r25, 0x00	; 0
   156a6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
   156aa:	50 cd       	rjmp	.-1376   	; 0x1514c <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3600
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
   156ac:	6f ea       	ldi	r22, 0xAF	; 175
   156ae:	72 e8       	ldi	r23, 0x82	; 130
   156b0:	ce 01       	movw	r24, r28
   156b2:	88 5b       	subi	r24, 0xB8	; 184
   156b4:	9f 4f       	sbci	r25, 0xFF	; 255
   156b6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3601
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   156ba:	ee 24       	eor	r14, r14
   156bc:	ea 94       	dec	r14
   156be:	fe 2c       	mov	r15, r14
   156c0:	00 ee       	ldi	r16, 0xE0	; 224
   156c2:	17 e0       	ldi	r17, 0x07	; 7
   156c4:	21 e0       	ldi	r18, 0x01	; 1
   156c6:	46 e4       	ldi	r20, 0x46	; 70
   156c8:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   156ca:	6e e1       	ldi	r22, 0x1E	; 30
   156cc:	70 e0       	ldi	r23, 0x00	; 0
   156ce:	66 c0       	rjmp	.+204    	; 0x1579c <setup+0xcc2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
   156d0:	c8 5c       	subi	r28, 0xC8	; 200
   156d2:	de 4f       	sbci	r29, 0xFE	; 254
   156d4:	f8 81       	ld	r31, Y
   156d6:	c8 53       	subi	r28, 0x38	; 56
   156d8:	d1 40       	sbci	r29, 0x01	; 1
   156da:	f3 30       	cpi	r31, 0x03	; 3
   156dc:	09 f0       	breq	.+2      	; 0x156e0 <setup+0xc06>
   156de:	79 c0       	rjmp	.+242    	; 0x157d2 <setup+0xcf8>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   156e0:	61 e0       	ldi	r22, 0x01	; 1
   156e2:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   156e6:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
   156ea:	61 e0       	ldi	r22, 0x01	; 1
   156ec:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   156f0:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
   156f4:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   156f8:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   156fc:	0e 94 c2 62 	call	0xc584	; 0xc584 <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   15700:	60 e0       	ldi	r22, 0x00	; 0
   15702:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   15706:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1570a:	61 e0       	ldi	r22, 0x01	; 1
   1570c:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   15710:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15714:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
   15718:	60 e4       	ldi	r22, 0x40	; 64
   1571a:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   1571e:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   15722:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   15726:	61 e0       	ldi	r22, 0x01	; 1
   15728:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   1572c:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3609
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
   15730:	4b ea       	ldi	r20, 0xAB	; 171
   15732:	60 e0       	ldi	r22, 0x00	; 0
   15734:	70 e0       	ldi	r23, 0x00	; 0
   15736:	cb 01       	movw	r24, r22
   15738:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
      if (SRAM.readByte(0) == 0xAB)
   1573c:	60 e0       	ldi	r22, 0x00	; 0
   1573e:	70 e0       	ldi	r23, 0x00	; 0
   15740:	cb 01       	movw	r24, r22
   15742:	0e 94 76 b7 	call	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
      {
        strcpy_P(str1, text_test_ram);
   15746:	62 ea       	ldi	r22, 0xA2	; 162
   15748:	72 e8       	ldi	r23, 0x82	; 130
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
   1574a:	8b 3a       	cpi	r24, 0xAB	; 171
   1574c:	69 f5       	brne	.+90     	; 0x157a8 <setup+0xcce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3612
      {
        strcpy_P(str1, text_test_ram);
   1574e:	ce 01       	movw	r24, r28
   15750:	88 5b       	subi	r24, 0xB8	; 184
   15752:	9f 4f       	sbci	r25, 0xFF	; 255
   15754:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3613
        strcat(str1, " init ...");
   15758:	61 e3       	ldi	r22, 0x31	; 49
   1575a:	77 e0       	ldi	r23, 0x07	; 7
   1575c:	ce 01       	movw	r24, r28
   1575e:	88 5b       	subi	r24, 0xB8	; 184
   15760:	9f 4f       	sbci	r25, 0xFF	; 255
   15762:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3614
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15766:	ee 24       	eor	r14, r14
   15768:	ea 94       	dec	r14
   1576a:	fe 2c       	mov	r15, r14
   1576c:	00 ee       	ldi	r16, 0xE0	; 224
   1576e:	17 e0       	ldi	r17, 0x07	; 7
   15770:	21 e0       	ldi	r18, 0x01	; 1
   15772:	40 e5       	ldi	r20, 0x50	; 80
   15774:	50 e0       	ldi	r21, 0x00	; 0
   15776:	6e e1       	ldi	r22, 0x1E	; 30
   15778:	70 e0       	ldi	r23, 0x00	; 0
   1577a:	ce 01       	movw	r24, r28
   1577c:	88 5b       	subi	r24, 0xB8	; 184
   1577e:	9f 4f       	sbci	r25, 0xFF	; 255
   15780:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3627
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
   15784:	6f e9       	ldi	r22, 0x9F	; 159
   15786:	72 e8       	ldi	r23, 0x82	; 130
   15788:	ce 01       	movw	r24, r28
   1578a:	88 5b       	subi	r24, 0xB8	; 184
   1578c:	9f 4f       	sbci	r25, 0xFF	; 255
   1578e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15792:	21 e0       	ldi	r18, 0x01	; 1
   15794:	40 e5       	ldi	r20, 0x50	; 80
   15796:	50 e0       	ldi	r21, 0x00	; 0
   15798:	62 ed       	ldi	r22, 0xD2	; 210
   1579a:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   1579c:	ce 01       	movw	r24, r28
   1579e:	88 5b       	subi	r24, 0xB8	; 184
   157a0:	9f 4f       	sbci	r25, 0xFF	; 255
   157a2:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   157a6:	d2 cc       	rjmp	.-1628   	; 0x1514c <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
   157a8:	ce 01       	movw	r24, r28
   157aa:	88 5b       	subi	r24, 0xB8	; 184
   157ac:	9f 4f       	sbci	r25, 0xFF	; 255
   157ae:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
        strcat_P(str1, text_err);
   157b2:	6e eb       	ldi	r22, 0xBE	; 190
   157b4:	73 e8       	ldi	r23, 0x83	; 131
   157b6:	ce 01       	movw	r24, r28
   157b8:	88 5b       	subi	r24, 0xB8	; 184
   157ba:	9f 4f       	sbci	r25, 0xFF	; 255
   157bc:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3634
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   157c0:	ee 24       	eor	r14, r14
   157c2:	ea 94       	dec	r14
   157c4:	fe 2c       	mov	r15, r14
   157c6:	00 e0       	ldi	r16, 0x00	; 0
   157c8:	18 ef       	ldi	r17, 0xF8	; 248
   157ca:	21 e0       	ldi	r18, 0x01	; 1
   157cc:	40 e5       	ldi	r20, 0x50	; 80
   157ce:	50 e0       	ldi	r21, 0x00	; 0
   157d0:	7c cf       	rjmp	.-264    	; 0x156ca <setup+0xbf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639
      }
    }
    ///
    /// init EEPROMKY
    if (init == 4)
   157d2:	c8 5c       	subi	r28, 0xC8	; 200
   157d4:	de 4f       	sbci	r29, 0xFE	; 254
   157d6:	28 81       	ld	r18, Y
   157d8:	c8 53       	subi	r28, 0x38	; 56
   157da:	d1 40       	sbci	r29, 0x01	; 1
   157dc:	24 30       	cpi	r18, 0x04	; 4
   157de:	09 f0       	breq	.+2      	; 0x157e2 <setup+0xd08>
   157e0:	c6 c5       	rjmp	.+2956   	; 0x1636e <setup+0x1894>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
   157e2:	61 e0       	ldi	r22, 0x01	; 1
   157e4:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   157e8:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
   157ec:	61 e0       	ldi	r22, 0x01	; 1
   157ee:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   157f2:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
   157f6:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   157fa:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   157fe:	0e 94 c2 62 	call	0xc584	; 0xc584 <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
   15802:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   15806:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   1580a:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   1580e:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   15812:	89 2b       	or	r24, r25
   15814:	8a 2b       	or	r24, r26
   15816:	8b 2b       	or	r24, r27
   15818:	a9 f0       	breq	.+42     	; 0x15844 <setup+0xd6a>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   1581a:	0e 94 42 d3 	call	0x1a684	; 0x1a684 <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   1581e:	80 fd       	sbrc	r24, 0
   15820:	fc cf       	rjmp	.-8      	; 0x1581a <setup+0xd40>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
   15822:	86 e0       	ldi	r24, 0x06	; 6
   15824:	0e 94 fa d2 	call	0x1a5f4	; 0x1a5f4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
   15828:	0e 94 f5 d2 	call	0x1a5ea	; 0x1a5ea <EEPROM_CAT25::endCommand() [clone .constprop.80]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
   1582c:	82 e0       	ldi	r24, 0x02	; 2
   1582e:	0e 94 fa d2 	call	0x1a5f4	; 0x1a5f4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
   15832:	6a eb       	ldi	r22, 0xBA	; 186
   15834:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   15838:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1583c:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
   15840:	0e 94 f5 d2 	call	0x1a5ea	; 0x1a5ea <EEPROM_CAT25::endCommand() [clone .constprop.80]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
   15844:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   15848:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   1584c:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   15850:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   15854:	89 2b       	or	r24, r25
   15856:	8a 2b       	or	r24, r26
   15858:	8b 2b       	or	r24, r27
   1585a:	61 f1       	breq	.+88     	; 0x158b4 <setup+0xdda>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
   1585c:	0e 94 42 d3 	call	0x1a684	; 0x1a684 <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>
   15860:	80 fd       	sbrc	r24, 0
   15862:	fc cf       	rjmp	.-8      	; 0x1585c <setup+0xd82>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
   15864:	83 e0       	ldi	r24, 0x03	; 3
   15866:	0e 94 fa d2 	call	0x1a5f4	; 0x1a5f4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1586a:	6f ef       	ldi	r22, 0xFF	; 255
   1586c:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   15870:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   15874:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
   15878:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
   1587a:	0e 94 f5 d2 	call	0x1a5ea	; 0x1a5ea <EEPROM_CAT25::endCommand() [clone .constprop.80]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3643
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
   1587e:	1a 3b       	cpi	r17, 0xBA	; 186
   15880:	c9 f4       	brne	.+50     	; 0x158b4 <setup+0xdda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3645
      {
        strcpy_P(str1, text_test_eeprom);
   15882:	6f e8       	ldi	r22, 0x8F	; 143
   15884:	72 e8       	ldi	r23, 0x82	; 130
   15886:	ce 01       	movw	r24, r28
   15888:	88 5b       	subi	r24, 0xB8	; 184
   1588a:	9f 4f       	sbci	r25, 0xFF	; 255
   1588c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3646
        strcat_P(str1, text_ok);
   15890:	6f e9       	ldi	r22, 0x9F	; 159
   15892:	72 e8       	ldi	r23, 0x82	; 130
   15894:	ce 01       	movw	r24, r28
   15896:	88 5b       	subi	r24, 0xB8	; 184
   15898:	9f 4f       	sbci	r25, 0xFF	; 255
   1589a:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3647
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   1589e:	ee 24       	eor	r14, r14
   158a0:	ea 94       	dec	r14
   158a2:	fe 2c       	mov	r15, r14
   158a4:	00 ee       	ldi	r16, 0xE0	; 224
   158a6:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   158a8:	21 e0       	ldi	r18, 0x01	; 1
   158aa:	4a e5       	ldi	r20, 0x5A	; 90
   158ac:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   158ae:	6e e1       	ldi	r22, 0x1E	; 30
   158b0:	70 e0       	ldi	r23, 0x00	; 0
   158b2:	75 c2       	rjmp	.+1258   	; 0x15d9e <setup+0x12c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3651
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
   158b4:	6f e8       	ldi	r22, 0x8F	; 143
   158b6:	72 e8       	ldi	r23, 0x82	; 130
   158b8:	ce 01       	movw	r24, r28
   158ba:	88 5b       	subi	r24, 0xB8	; 184
   158bc:	9f 4f       	sbci	r25, 0xFF	; 255
   158be:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3652
        strcat_P(str1, text_err);
   158c2:	6e eb       	ldi	r22, 0xBE	; 190
   158c4:	73 e8       	ldi	r23, 0x83	; 131
   158c6:	ce 01       	movw	r24, r28
   158c8:	88 5b       	subi	r24, 0xB8	; 184
   158ca:	9f 4f       	sbci	r25, 0xFF	; 255
   158cc:	0e 94 8f ee 	call	0x1dd1e	; 0x1dd1e <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
   158d0:	ee 24       	eor	r14, r14
   158d2:	ea 94       	dec	r14
   158d4:	fe 2c       	mov	r15, r14
   158d6:	00 e0       	ldi	r16, 0x00	; 0
   158d8:	18 ef       	ldi	r17, 0xF8	; 248
   158da:	e6 cf       	rjmp	.-52     	; 0x158a8 <setup+0xdce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
   158dc:	6d e7       	ldi	r22, 0x7D	; 125
   158de:	72 e8       	ldi	r23, 0x82	; 130
   158e0:	ce 01       	movw	r24, r28
   158e2:	88 5b       	subi	r24, 0xB8	; 184
   158e4:	9f 4f       	sbci	r25, 0xFF	; 255
   158e6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3661
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   158ea:	ee 24       	eor	r14, r14
   158ec:	ea 94       	dec	r14
   158ee:	fe 2c       	mov	r15, r14
   158f0:	00 ee       	ldi	r16, 0xE0	; 224
   158f2:	17 e0       	ldi	r17, 0x07	; 7
   158f4:	21 e0       	ldi	r18, 0x01	; 1
   158f6:	44 e6       	ldi	r20, 0x64	; 100
   158f8:	50 e0       	ldi	r21, 0x00	; 0
   158fa:	6e e1       	ldi	r22, 0x1E	; 30
   158fc:	70 e0       	ldi	r23, 0x00	; 0
   158fe:	ce 01       	movw	r24, r28
   15900:	88 5b       	subi	r24, 0xB8	; 184
   15902:	9f 4f       	sbci	r25, 0xFF	; 255
   15904:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15908:	09 e1       	ldi	r16, 0x19	; 25
   1590a:	e0 2e       	mov	r14, r16
   1590c:	0e e0       	ldi	r16, 0x0E	; 14
   1590e:	f0 2e       	mov	r15, r16
   15910:	0e e6       	ldi	r16, 0x6E	; 110
   15912:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
   15914:	c8 01       	movw	r24, r16
   15916:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1591a:	d7 01       	movw	r26, r14
   1591c:	8d 93       	st	X+, r24
   1591e:	7d 01       	movw	r14, r26
   15920:	0f 5f       	subi	r16, 0xFF	; 255
   15922:	1f 4f       	sbci	r17, 0xFF	; 255
   15924:	04 37       	cpi	r16, 0x74	; 116
   15926:	11 05       	cpc	r17, r1
   15928:	a9 f7       	brne	.-22     	; 0x15914 <setup+0xe3a>
   1592a:	bf e1       	ldi	r27, 0x1F	; 31
   1592c:	eb 2e       	mov	r14, r27
   1592e:	be e0       	ldi	r27, 0x0E	; 14
   15930:	fb 2e       	mov	r15, r27
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
   15932:	c8 01       	movw	r24, r16
   15934:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15938:	f7 01       	movw	r30, r14
   1593a:	81 93       	st	Z+, r24
   1593c:	7f 01       	movw	r14, r30
   1593e:	0f 5f       	subi	r16, 0xFF	; 255
   15940:	1f 4f       	sbci	r17, 0xFF	; 255
   15942:	08 37       	cpi	r16, 0x78	; 120
   15944:	11 05       	cpc	r17, r1
   15946:	a9 f7       	brne	.-22     	; 0x15932 <setup+0xe58>
   15948:	a3 e2       	ldi	r26, 0x23	; 35
   1594a:	ea 2e       	mov	r14, r26
   1594c:	ae e0       	ldi	r26, 0x0E	; 14
   1594e:	fa 2e       	mov	r15, r26
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
   15950:	c8 01       	movw	r24, r16
   15952:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15956:	d7 01       	movw	r26, r14
   15958:	8d 93       	st	X+, r24
   1595a:	7d 01       	movw	r14, r26
   1595c:	0f 5f       	subi	r16, 0xFF	; 255
   1595e:	1f 4f       	sbci	r17, 0xFF	; 255
   15960:	0c 37       	cpi	r16, 0x7C	; 124
   15962:	11 05       	cpc	r17, r1
   15964:	a9 f7       	brne	.-22     	; 0x15950 <setup+0xe76>
   15966:	eb e2       	ldi	r30, 0x2B	; 43
   15968:	ce 2e       	mov	r12, r30
   1596a:	ee e0       	ldi	r30, 0x0E	; 14
   1596c:	de 2e       	mov	r13, r30
   1596e:	f0 e8       	ldi	r31, 0x80	; 128
   15970:	ef 2e       	mov	r14, r31
   15972:	f1 2c       	mov	r15, r1
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
   15974:	c7 01       	movw	r24, r14
   15976:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1597a:	f6 01       	movw	r30, r12
   1597c:	81 93       	st	Z+, r24
   1597e:	6f 01       	movw	r12, r30
   15980:	ff ef       	ldi	r31, 0xFF	; 255
   15982:	ef 1a       	sub	r14, r31
   15984:	ff 0a       	sbc	r15, r31
   15986:	24 e8       	ldi	r18, 0x84	; 132
   15988:	e2 16       	cp	r14, r18
   1598a:	f1 04       	cpc	r15, r1
   1598c:	99 f7       	brne	.-26     	; 0x15974 <setup+0xe9a>
   1598e:	77 e2       	ldi	r23, 0x27	; 39
   15990:	c7 2e       	mov	r12, r23
   15992:	7e e0       	ldi	r23, 0x0E	; 14
   15994:	d7 2e       	mov	r13, r23
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
   15996:	c8 01       	movw	r24, r16
   15998:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1599c:	d6 01       	movw	r26, r12
   1599e:	8d 93       	st	X+, r24
   159a0:	6d 01       	movw	r12, r26
   159a2:	0f 5f       	subi	r16, 0xFF	; 255
   159a4:	1f 4f       	sbci	r17, 0xFF	; 255
   159a6:	00 38       	cpi	r16, 0x80	; 128
   159a8:	11 05       	cpc	r17, r1
   159aa:	a9 f7       	brne	.-22     	; 0x15996 <setup+0xebc>
   159ac:	6f e2       	ldi	r22, 0x2F	; 47
   159ae:	c6 2e       	mov	r12, r22
   159b0:	6e e0       	ldi	r22, 0x0E	; 14
   159b2:	d6 2e       	mov	r13, r22
   159b4:	04 e6       	ldi	r16, 0x64	; 100
   159b6:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
   159b8:	c8 01       	movw	r24, r16
   159ba:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   159be:	f6 01       	movw	r30, r12
   159c0:	81 93       	st	Z+, r24
   159c2:	6f 01       	movw	r12, r30
   159c4:	0f 5f       	subi	r16, 0xFF	; 255
   159c6:	1f 4f       	sbci	r17, 0xFF	; 255
   159c8:	0d 36       	cpi	r16, 0x6D	; 109
   159ca:	11 05       	cpc	r17, r1
   159cc:	a9 f7       	brne	.-22     	; 0x159b8 <setup+0xede>
   159ce:	09 e3       	ldi	r16, 0x39	; 57
   159d0:	1e e0       	ldi	r17, 0x0E	; 14
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
   159d2:	c7 01       	movw	r24, r14
   159d4:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   159d8:	d8 01       	movw	r26, r16
   159da:	8d 93       	st	X+, r24
   159dc:	8d 01       	movw	r16, r26
   159de:	bf ef       	ldi	r27, 0xFF	; 255
   159e0:	eb 1a       	sub	r14, r27
   159e2:	fb 0a       	sbc	r15, r27
   159e4:	e8 e8       	ldi	r30, 0x88	; 136
   159e6:	ee 16       	cp	r14, r30
   159e8:	f1 04       	cpc	r15, r1
   159ea:	99 f7       	brne	.-26     	; 0x159d2 <setup+0xef8>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
   159ec:	88 e8       	ldi	r24, 0x88	; 136
   159ee:	90 e0       	ldi	r25, 0x00	; 0
   159f0:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   159f4:	18 2f       	mov	r17, r24
   159f6:	89 e8       	ldi	r24, 0x89	; 137
   159f8:	90 e0       	ldi	r25, 0x00	; 0
   159fa:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   159fe:	21 2f       	mov	r18, r17
   15a00:	30 e0       	ldi	r19, 0x00	; 0
   15a02:	32 2f       	mov	r19, r18
   15a04:	22 27       	eor	r18, r18
   15a06:	82 0f       	add	r24, r18
   15a08:	93 2f       	mov	r25, r19
   15a0a:	91 1d       	adc	r25, r1
   15a0c:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   15a10:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
   15a14:	5f e3       	ldi	r21, 0x3F	; 63
   15a16:	e5 2e       	mov	r14, r21
   15a18:	5e e0       	ldi	r21, 0x0E	; 14
   15a1a:	f5 2e       	mov	r15, r21
   15a1c:	0a e8       	ldi	r16, 0x8A	; 138
   15a1e:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
   15a20:	c8 01       	movw	r24, r16
   15a22:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15a26:	d7 01       	movw	r26, r14
   15a28:	8d 93       	st	X+, r24
   15a2a:	7d 01       	movw	r14, r26
   15a2c:	0f 5f       	subi	r16, 0xFF	; 255
   15a2e:	1f 4f       	sbci	r17, 0xFF	; 255
   15a30:	0e 39       	cpi	r16, 0x9E	; 158
   15a32:	11 05       	cpc	r17, r1
   15a34:	a9 f7       	brne	.-22     	; 0x15a20 <setup+0xf46>
   15a36:	93 e5       	ldi	r25, 0x53	; 83
   15a38:	e9 2e       	mov	r14, r25
   15a3a:	9e e0       	ldi	r25, 0x0E	; 14
   15a3c:	f9 2e       	mov	r15, r25
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
   15a3e:	c8 01       	movw	r24, r16
   15a40:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15a44:	f7 01       	movw	r30, r14
   15a46:	81 93       	st	Z+, r24
   15a48:	7f 01       	movw	r14, r30
   15a4a:	0f 5f       	subi	r16, 0xFF	; 255
   15a4c:	1f 4f       	sbci	r17, 0xFF	; 255
   15a4e:	02 3b       	cpi	r16, 0xB2	; 178
   15a50:	11 05       	cpc	r17, r1
   15a52:	a9 f7       	brne	.-22     	; 0x15a3e <setup+0xf64>
   15a54:	87 e6       	ldi	r24, 0x67	; 103
   15a56:	e8 2e       	mov	r14, r24
   15a58:	8e e0       	ldi	r24, 0x0E	; 14
   15a5a:	f8 2e       	mov	r15, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
   15a5c:	c8 01       	movw	r24, r16
   15a5e:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15a62:	d7 01       	movw	r26, r14
   15a64:	8d 93       	st	X+, r24
   15a66:	7d 01       	movw	r14, r26
   15a68:	0f 5f       	subi	r16, 0xFF	; 255
   15a6a:	1f 4f       	sbci	r17, 0xFF	; 255
   15a6c:	06 3b       	cpi	r16, 0xB6	; 182
   15a6e:	11 05       	cpc	r17, r1
   15a70:	a9 f7       	brne	.-22     	; 0x15a5c <setup+0xf82>
   15a72:	4e ec       	ldi	r20, 0xCE	; 206
   15a74:	5b e0       	ldi	r21, 0x0B	; 11
   15a76:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
   15a78:	60 e2       	ldi	r22, 0x20	; 32
   15a7a:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:35
   15a7c:	90 e0       	ldi	r25, 0x00	; 0
   15a7e:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3667
   15a80:	fc 01       	movw	r30, r24
   15a82:	ee 0f       	add	r30, r30
   15a84:	ff 1f       	adc	r31, r31
   15a86:	e4 0f       	add	r30, r20
   15a88:	f5 1f       	adc	r31, r21
   15a8a:	70 87       	std	Z+8, r23	; 0x08
   15a8c:	67 83       	std	Z+7, r22	; 0x07
   15a8e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3666
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
   15a90:	8a 30       	cpi	r24, 0x0A	; 10
   15a92:	91 05       	cpc	r25, r1
   15a94:	a9 f7       	brne	.-22     	; 0x15a80 <setup+0xfa6>
   15a96:	21 50       	subi	r18, 0x01	; 1
   15a98:	42 5e       	subi	r20, 0xE2	; 226
   15a9a:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3665
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   15a9c:	21 11       	cpse	r18, r1
   15a9e:	ee cf       	rjmp	.-36     	; 0x15a7c <setup+0xfa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3670
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
   15aa0:	10 92 88 0b 	sts	0x0B88, r1	; 0x800b88 <last_output_update>
   15aa4:	10 92 89 0b 	sts	0x0B89, r1	; 0x800b89 <last_output_update+0x1>
   15aa8:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <last_output_update+0x2>
   15aac:	10 92 8b 0b 	sts	0x0B8B, r1	; 0x800b8b <last_output_update+0x3>
   15ab0:	10 92 8c 0b 	sts	0x0B8C, r1	; 0x800b8c <last_output_update+0x4>
   15ab4:	b7 e6       	ldi	r27, 0x67	; 103
   15ab6:	cb 2e       	mov	r12, r27
   15ab8:	d1 2c       	mov	r13, r1
   15aba:	e1 2c       	mov	r14, r1
   15abc:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15abe:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3674
      {
        remote_tds_set_data(idx, 0);
   15ac0:	70 e0       	ldi	r23, 0x00	; 0
   15ac2:	60 e0       	ldi	r22, 0x00	; 0
   15ac4:	81 2f       	mov	r24, r17
   15ac6:	0e 94 3a 53 	call	0xa674	; 0xa674 <remote_tds_set_data(unsigned char, int)>
remote_tds_set_type():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1912
///
void remote_tds_set_type(uint8_t idx, uint8_t type)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_type + (ram_remote_tds_store_size * idx), type);
   15aca:	4f ef       	ldi	r20, 0xFF	; 255
   15acc:	c7 01       	movw	r24, r14
   15ace:	b6 01       	movw	r22, r12
   15ad0:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_set_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1957
}
uint8_t remote_tds_set_last_update(uint8_t idx, uint8_t value)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), value);
   15ad4:	c7 01       	movw	r24, r14
   15ad6:	b6 01       	movw	r22, r12
   15ad8:	61 50       	subi	r22, 0x01	; 1
   15ada:	71 09       	sbc	r23, r1
   15adc:	81 09       	sbc	r24, r1
   15ade:	91 09       	sbc	r25, r1
   15ae0:	4f ef       	ldi	r20, 0xFF	; 255
   15ae2:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3672
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;

      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15ae6:	1f 5f       	subi	r17, 0xFF	; 255
   15ae8:	b4 e0       	ldi	r27, 0x04	; 4
   15aea:	cb 0e       	add	r12, r27
   15aec:	d1 1c       	adc	r13, r1
   15aee:	e1 1c       	adc	r14, r1
   15af0:	f1 1c       	adc	r15, r1
   15af2:	1a 30       	cpi	r17, 0x0A	; 10
   15af4:	29 f7       	brne	.-54     	; 0x15ac0 <setup+0xfe6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
   15af6:	c8 5c       	subi	r28, 0xC8	; 200
   15af8:	de 4f       	sbci	r29, 0xFE	; 254
   15afa:	e8 81       	ld	r30, Y
   15afc:	c8 53       	subi	r28, 0x38	; 56
   15afe:	d1 40       	sbci	r29, 0x01	; 1
   15b00:	ef 5f       	subi	r30, 0xFF	; 255
   15b02:	c8 5c       	subi	r28, 0xC8	; 200
   15b04:	de 4f       	sbci	r29, 0xFE	; 254
   15b06:	e8 83       	st	Y, r30
   15b08:	c8 53       	subi	r28, 0x38	; 56
   15b0a:	d1 40       	sbci	r29, 0x01	; 1
   15b0c:	c3 5c       	subi	r28, 0xC3	; 195
   15b0e:	de 4f       	sbci	r29, 0xFE	; 254
   15b10:	88 81       	ld	r24, Y
   15b12:	99 81       	ldd	r25, Y+1	; 0x01
   15b14:	cd 53       	subi	r28, 0x3D	; 61
   15b16:	d1 40       	sbci	r29, 0x01	; 1
   15b18:	0f 96       	adiw	r24, 0x0f	; 15
   15b1a:	c3 5c       	subi	r28, 0xC3	; 195
   15b1c:	de 4f       	sbci	r29, 0xFE	; 254
   15b1e:	99 83       	std	Y+1, r25	; 0x01
   15b20:	88 83       	st	Y, r24
   15b22:	cd 53       	subi	r28, 0x3D	; 61
   15b24:	d1 40       	sbci	r29, 0x01	; 1
   15b26:	e0 31       	cpi	r30, 0x10	; 16
   15b28:	09 f0       	breq	.+2      	; 0x15b2c <setup+0x1052>
   15b2a:	c3 c9       	rjmp	.-3194   	; 0x14eb2 <setup+0x3d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
   15b2c:	64 ef       	ldi	r22, 0xF4	; 244
   15b2e:	71 e0       	ldi	r23, 0x01	; 1
   15b30:	80 e0       	ldi	r24, 0x00	; 0
   15b32:	90 e0       	ldi	r25, 0x00	; 0
   15b34:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3875
  MenuPrepareStyle();
   15b38:	0e 94 d5 a4 	call	0x149aa	; 0x149aa <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
  draw_menu(true, 0, 0, 0);
   15b3c:	50 e0       	ldi	r21, 0x00	; 0
   15b3e:	40 e0       	ldi	r20, 0x00	; 0
   15b40:	70 e0       	ldi	r23, 0x00	; 0
   15b42:	60 e0       	ldi	r22, 0x00	; 0
   15b44:	81 e0       	ldi	r24, 0x01	; 1
   15b46:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3877
  a2d_run_now = 1;
   15b4a:	81 e0       	ldi	r24, 0x01	; 1
   15b4c:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879

  milis_10s = millis();
   15b50:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15b54:	60 93 ab 0c 	sts	0x0CAB, r22	; 0x800cab <milis_10s>
   15b58:	70 93 ac 0c 	sts	0x0CAC, r23	; 0x800cac <milis_10s+0x1>
   15b5c:	80 93 ad 0c 	sts	0x0CAD, r24	; 0x800cad <milis_10s+0x2>
   15b60:	90 93 ae 0c 	sts	0x0CAE, r25	; 0x800cae <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
  milis_1s = millis();
   15b64:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15b68:	60 93 9c 0c 	sts	0x0C9C, r22	; 0x800c9c <milis_1s>
   15b6c:	70 93 9d 0c 	sts	0x0C9D, r23	; 0x800c9d <milis_1s+0x1>
   15b70:	80 93 9e 0c 	sts	0x0C9E, r24	; 0x800c9e <milis_1s+0x2>
   15b74:	90 93 9f 0c 	sts	0x0C9F, r25	; 0x800c9f <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3881
  milis_05s = millis();
   15b78:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15b7c:	60 93 92 0c 	sts	0x0C92, r22	; 0x800c92 <milis_05s>
   15b80:	70 93 93 0c 	sts	0x0C93, r23	; 0x800c93 <milis_05s+0x1>
   15b84:	80 93 94 0c 	sts	0x0C94, r24	; 0x800c94 <milis_05s+0x2>
   15b88:	90 93 95 0c 	sts	0x0C95, r25	; 0x800c95 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
  milis_005s = millis();
   15b8c:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   15b90:	60 93 8c 0c 	sts	0x0C8C, r22	; 0x800c8c <milis_005s>
   15b94:	70 93 8d 0c 	sts	0x0C8D, r23	; 0x800c8d <milis_005s+0x1>
   15b98:	80 93 8e 0c 	sts	0x0C8E, r24	; 0x800c8e <milis_005s+0x2>
   15b9c:	90 93 8f 0c 	sts	0x0C8F, r25	; 0x800c8f <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884

}
   15ba0:	c0 5c       	subi	r28, 0xC0	; 192
   15ba2:	de 4f       	sbci	r29, 0xFE	; 254
   15ba4:	0f b6       	in	r0, 0x3f	; 63
   15ba6:	f8 94       	cli
   15ba8:	de bf       	out	0x3e, r29	; 62
   15baa:	0f be       	out	0x3f, r0	; 63
   15bac:	cd bf       	out	0x3d, r28	; 61
   15bae:	df 91       	pop	r29
   15bb0:	cf 91       	pop	r28
   15bb2:	1f 91       	pop	r17
   15bb4:	0f 91       	pop	r16
   15bb6:	ff 90       	pop	r15
   15bb8:	ef 90       	pop	r14
   15bba:	df 90       	pop	r13
   15bbc:	cf 90       	pop	r12
   15bbe:	bf 90       	pop	r11
   15bc0:	af 90       	pop	r10
   15bc2:	9f 90       	pop	r9
   15bc4:	8f 90       	pop	r8
   15bc6:	7f 90       	pop	r7
   15bc8:	6f 90       	pop	r6
   15bca:	5f 90       	pop	r5
   15bcc:	4f 90       	pop	r4
   15bce:	3f 90       	pop	r3
   15bd0:	2f 90       	pop	r2
   15bd2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
   15bd4:	61 e7       	ldi	r22, 0x71	; 113
   15bd6:	72 e8       	ldi	r23, 0x82	; 130
   15bd8:	ce 01       	movw	r24, r28
   15bda:	88 5b       	subi	r24, 0xB8	; 184
   15bdc:	9f 4f       	sbci	r25, 0xFF	; 255
   15bde:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3684
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15be2:	ee 24       	eor	r14, r14
   15be4:	ea 94       	dec	r14
   15be6:	fe 2c       	mov	r15, r14
   15be8:	00 ee       	ldi	r16, 0xE0	; 224
   15bea:	17 e0       	ldi	r17, 0x07	; 7
   15bec:	21 e0       	ldi	r18, 0x01	; 1
   15bee:	4e e6       	ldi	r20, 0x6E	; 110
   15bf0:	50 e0       	ldi	r21, 0x00	; 0
   15bf2:	6e e1       	ldi	r22, 0x1E	; 30
   15bf4:	70 e0       	ldi	r23, 0x00	; 0
   15bf6:	ce 01       	movw	r24, r28
   15bf8:	88 5b       	subi	r24, 0xB8	; 184
   15bfa:	9f 4f       	sbci	r25, 0xFF	; 255
   15bfc:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   15c00:	20 91 cd 0f 	lds	r18, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   15c04:	30 91 ce 0f 	lds	r19, 0x0FCE	; 0x800fce <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
   15c08:	40 91 cb 0f 	lds	r20, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   15c0c:	50 91 cc 0f 	lds	r21, 0x0FCC	; 0x800fcc <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
   15c10:	90 91 cf 0f 	lds	r25, 0x0FCF	; 0x800fcf <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
  return onoff_mode;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
   15c14:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   15c18:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   15c1c:	80 81       	ld	r24, Z
   15c1e:	60 91 b6 0f 	lds	r22, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   15c22:	86 2b       	or	r24, r22
   15c24:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:94
	TCLK_HIGH; 
   15c26:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   15c2a:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   15c2e:	80 81       	ld	r24, Z
   15c30:	60 91 b4 0f 	lds	r22, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   15c34:	86 2b       	or	r24, r22
   15c36:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	TCS_HIGH;
   15c38:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   15c3c:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   15c40:	80 81       	ld	r24, Z
   15c42:	60 91 b3 0f 	lds	r22, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   15c46:	86 2b       	or	r24, r22
   15c48:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	SDCS_HIGH;
   15c4a:	e0 91 b1 0f 	lds	r30, 0x0FB1	; 0x800fb1 <my_touch+0x1b>
   15c4e:	f0 91 b2 0f 	lds	r31, 0x0FB2	; 0x800fb2 <my_touch+0x1c>
   15c52:	80 81       	ld	r24, Z
   15c54:	60 91 b8 0f 	lds	r22, 0x0FB8	; 0x800fb8 <my_touch+0x22>
   15c58:	86 2b       	or	r24, r22
   15c5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	wid = w;
   15c5c:	50 93 9f 0f 	sts	0x0F9F, r21	; 0x800f9f <my_touch+0x9>
   15c60:	40 93 9e 0f 	sts	0x0F9E, r20	; 0x800f9e <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	heig = h;	
   15c64:	30 93 a1 0f 	sts	0x0FA1, r19	; 0x800fa1 <my_touch+0xb>
   15c68:	20 93 a0 0f 	sts	0x0FA0, r18	; 0x800fa0 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:420
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
   15c6c:	90 93 a4 0f 	sts	0x0FA4, r25	; 0x800fa4 <my_touch+0xe>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	TCS_HIGH;
	SDCS_HIGH;
	wid = w;
	heig = h;	
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
   15c70:	8a e0       	ldi	r24, 0x0A	; 10
   15c72:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:410
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
   15c76:	83 e0       	ldi	r24, 0x03	; 3
   15c78:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <my_touch+0xd>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
   15c7c:	81 e0       	ldi	r24, 0x01	; 1
   15c7e:	0e 94 c5 d2 	call	0x1a58a	; 0x1a58a <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   15c82:	1b e0       	ldi	r17, 0x0B	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      for (uint8_t i = 1; i < 8; i++)
      {
        digitalWrite(LED, LOW);
   15c84:	60 e0       	ldi	r22, 0x00	; 0
   15c86:	88 e0       	ldi	r24, 0x08	; 8
   15c88:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3691
        my_touch.TP_SetBacklight(i * 11);
   15c8c:	81 2f       	mov	r24, r17
   15c8e:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
        delay(100);
   15c92:	64 e6       	ldi	r22, 0x64	; 100
   15c94:	70 e0       	ldi	r23, 0x00	; 0
   15c96:	80 e0       	ldi	r24, 0x00	; 0
   15c98:	90 e0       	ldi	r25, 0x00	; 0
   15c9a:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
        digitalWrite(LED, HIGH);
   15c9e:	61 e0       	ldi	r22, 0x01	; 1
   15ca0:	88 e0       	ldi	r24, 0x08	; 8
   15ca2:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
        delay(100);
   15ca6:	64 e6       	ldi	r22, 0x64	; 100
   15ca8:	70 e0       	ldi	r23, 0x00	; 0
   15caa:	80 e0       	ldi	r24, 0x00	; 0
   15cac:	90 e0       	ldi	r25, 0x00	; 0
   15cae:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
   15cb2:	15 5f       	subi	r17, 0xF5	; 245
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      strcpy_P(str1, text_touchscreen);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
      my_touch.TP_Set_Rotation(3);
      my_touch.TP_SetOnOff(LED_ON);
      for (uint8_t i = 1; i < 8; i++)
   15cb4:	18 35       	cpi	r17, 0x58	; 88
   15cb6:	31 f7       	brne	.-52     	; 0x15c84 <setup+0x11aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
        my_touch.TP_SetBacklight(i * 11);
        delay(100);
        digitalWrite(LED, HIGH);
        delay(100);
      }
      display_auto_shutdown = EEPROM.read(my_display_auto_shutdown);
   15cb8:	80 e6       	ldi	r24, 0x60	; 96
   15cba:	90 e0       	ldi	r25, 0x00	; 0
   15cbc:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15cc0:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <display_auto_shutdown>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
      brigthness_display_values = EEPROM.read(my_brightness_values);
   15cc4:	8e e5       	ldi	r24, 0x5E	; 94
   15cc6:	90 e0       	ldi	r25, 0x00	; 0
   15cc8:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15ccc:	18 2f       	mov	r17, r24
   15cce:	80 93 87 0b 	sts	0x0B87, r24	; 0x800b87 <brigthness_display_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
   15cd2:	8f e5       	ldi	r24, 0x5F	; 95
   15cd4:	90 e0       	ldi	r25, 0x00	; 0
   15cd6:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   15cda:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <brigthness_display_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
   15cde:	81 2f       	mov	r24, r17
   15ce0:	88 0f       	add	r24, r24
   15ce2:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
   15ce6:	07 cf       	rjmp	.-498    	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3724
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
   15ce8:	6e eb       	ldi	r22, 0xBE	; 190
   15cea:	73 e8       	ldi	r23, 0x83	; 131
   15cec:	ce 01       	movw	r24, r28
   15cee:	88 5b       	subi	r24, 0xB8	; 184
   15cf0:	9f 4f       	sbci	r25, 0xFF	; 255
   15cf2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3725
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   15cf6:	ee 24       	eor	r14, r14
   15cf8:	ea 94       	dec	r14
   15cfa:	fe 2c       	mov	r15, r14
   15cfc:	00 e0       	ldi	r16, 0x00	; 0
   15cfe:	18 ef       	ldi	r17, 0xF8	; 248
   15d00:	21 e0       	ldi	r18, 0x01	; 1
   15d02:	48 e7       	ldi	r20, 0x78	; 120
   15d04:	50 e0       	ldi	r21, 0x00	; 0
   15d06:	60 ea       	ldi	r22, 0xA0	; 160
   15d08:	70 e0       	ldi	r23, 0x00	; 0
   15d0a:	ce 01       	movw	r24, r28
   15d0c:	88 5b       	subi	r24, 0xB8	; 184
   15d0e:	9f 4f       	sbci	r25, 0xFF	; 255
   15d10:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3726
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
   15d14:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
      }
      else
      {
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_RTC);
   15d16:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
   15d1a:	ed ce       	rjmp	.-550    	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3731
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
   15d1c:	c8 5c       	subi	r28, 0xC8	; 200
   15d1e:	de 4f       	sbci	r29, 0xFE	; 254
   15d20:	e8 81       	ld	r30, Y
   15d22:	c8 53       	subi	r28, 0x38	; 56
   15d24:	d1 40       	sbci	r29, 0x01	; 1
   15d26:	e8 30       	cpi	r30, 0x08	; 8
   15d28:	09 f0       	breq	.+2      	; 0x15d2c <setup+0x1252>
   15d2a:	3f c0       	rjmp	.+126    	; 0x15daa <setup+0x12d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3733
    {
      strcpy_P(str1, text_onewire_hledam);
   15d2c:	65 e5       	ldi	r22, 0x55	; 85
   15d2e:	72 e8       	ldi	r23, 0x82	; 130
   15d30:	ce 01       	movw	r24, r28
   15d32:	88 5b       	subi	r24, 0xB8	; 184
   15d34:	9f 4f       	sbci	r25, 0xFF	; 255
   15d36:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3734
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15d3a:	ee 24       	eor	r14, r14
   15d3c:	ea 94       	dec	r14
   15d3e:	fe 2c       	mov	r15, r14
   15d40:	00 ee       	ldi	r16, 0xE0	; 224
   15d42:	17 e0       	ldi	r17, 0x07	; 7
   15d44:	21 e0       	ldi	r18, 0x01	; 1
   15d46:	42 e8       	ldi	r20, 0x82	; 130
   15d48:	50 e0       	ldi	r21, 0x00	; 0
   15d4a:	6e e1       	ldi	r22, 0x1E	; 30
   15d4c:	70 e0       	ldi	r23, 0x00	; 0
   15d4e:	ce 01       	movw	r24, r28
   15d50:	88 5b       	subi	r24, 0xB8	; 184
   15d52:	9f 4f       	sbci	r25, 0xFF	; 255
   15d54:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3735
      Global_HWwirenum = 0;
   15d58:	10 92 00 0d 	sts	0x0D00, r1	; 0x800d00 <Global_HWwirenum>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3736
      one_hw_search_device(0);
   15d5c:	0e 94 5f b9 	call	0x172be	; 0x172be <one_hw_search_device(unsigned char) [clone .constprop.184]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3737
      tds_update_associate();
   15d60:	0e 94 3e 74 	call	0xe87c	; 0xe87c <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
      strcpy (str1, "Nalezeno: ");
   15d64:	6b e3       	ldi	r22, 0x3B	; 59
   15d66:	77 e0       	ldi	r23, 0x07	; 7
   15d68:	ce 01       	movw	r24, r28
   15d6a:	88 5b       	subi	r24, 0xB8	; 184
   15d6c:	9f 4f       	sbci	r25, 0xFF	; 255
   15d6e:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
      itoa(Global_HWwirenum, str2, 10);
   15d72:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   15d76:	4a e0       	ldi	r20, 0x0A	; 10
   15d78:	be 01       	movw	r22, r28
   15d7a:	68 57       	subi	r22, 0x78	; 120
   15d7c:	7f 4f       	sbci	r23, 0xFF	; 255
   15d7e:	90 e0       	ldi	r25, 0x00	; 0
   15d80:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
      strcat(str1, str2);
   15d84:	be 01       	movw	r22, r28
   15d86:	68 57       	subi	r22, 0x78	; 120
   15d88:	7f 4f       	sbci	r23, 0xFF	; 255
   15d8a:	ce 01       	movw	r24, r28
   15d8c:	88 5b       	subi	r24, 0xB8	; 184
   15d8e:	9f 4f       	sbci	r25, 0xFF	; 255
   15d90:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3741
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15d94:	21 e0       	ldi	r18, 0x01	; 1
   15d96:	42 e8       	ldi	r20, 0x82	; 130
   15d98:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15d9a:	60 ea       	ldi	r22, 0xA0	; 160
   15d9c:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    {
      strcpy_P(str1, text_rest_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15d9e:	ce 01       	movw	r24, r28
   15da0:	88 5b       	subi	r24, 0xB8	; 184
   15da2:	9f 4f       	sbci	r25, 0xFF	; 255
   15da4:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   15da8:	a6 ce       	rjmp	.-692    	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
   15daa:	c8 5c       	subi	r28, 0xC8	; 200
   15dac:	de 4f       	sbci	r29, 0xFE	; 254
   15dae:	f8 81       	ld	r31, Y
   15db0:	c8 53       	subi	r28, 0x38	; 56
   15db2:	d1 40       	sbci	r29, 0x01	; 1
   15db4:	f9 30       	cpi	r31, 0x09	; 9
   15db6:	09 f0       	breq	.+2      	; 0x15dba <setup+0x12e0>
   15db8:	37 c3       	rjmp	.+1646   	; 0x16428 <setup+0x194e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3747
    {
      digitalWrite(ETH_RST, HIGH);
   15dba:	61 e0       	ldi	r22, 0x01	; 1
   15dbc:	86 e0       	ldi	r24, 0x06	; 6
   15dbe:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
      delay(10);
   15dc2:	6a e0       	ldi	r22, 0x0A	; 10
   15dc4:	70 e0       	ldi	r23, 0x00	; 0
   15dc6:	80 e0       	ldi	r24, 0x00	; 0
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3749
      digitalWrite(ETH_RST, LOW);
   15dce:	60 e0       	ldi	r22, 0x00	; 0
   15dd0:	86 e0       	ldi	r24, 0x06	; 6
   15dd2:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
      delay(10);
   15dd6:	6a e0       	ldi	r22, 0x0A	; 10
   15dd8:	70 e0       	ldi	r23, 0x00	; 0
   15dda:	80 e0       	ldi	r24, 0x00	; 0
   15ddc:	90 e0       	ldi	r25, 0x00	; 0
   15dde:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3751
      digitalWrite(ETH_RST, HIGH);
   15de2:	61 e0       	ldi	r22, 0x01	; 1
   15de4:	86 e0       	ldi	r24, 0x06	; 6
   15de6:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
      delay(100);
   15dea:	64 e6       	ldi	r22, 0x64	; 100
   15dec:	70 e0       	ldi	r23, 0x00	; 0
   15dee:	80 e0       	ldi	r24, 0x00	; 0
   15df0:	90 e0       	ldi	r25, 0x00	; 0
   15df2:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
   15df6:	8f e0       	ldi	r24, 0x0F	; 15
   15df8:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <Ethernet+0xc>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3754
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
   15dfc:	63 e2       	ldi	r22, 0x23	; 35
   15dfe:	7e e0       	ldi	r23, 0x0E	; 14
   15e00:	ce 01       	movw	r24, r28
   15e02:	8e 5c       	subi	r24, 0xCE	; 206
   15e04:	9e 4f       	sbci	r25, 0xFE	; 254
   15e06:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
   15e0a:	6b e2       	ldi	r22, 0x2B	; 43
   15e0c:	7e e0       	ldi	r23, 0x0E	; 14
   15e0e:	ce 01       	movw	r24, r28
   15e10:	84 5d       	subi	r24, 0xD4	; 212
   15e12:	9e 4f       	sbci	r25, 0xFE	; 254
   15e14:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
   15e18:	67 e2       	ldi	r22, 0x27	; 39
   15e1a:	7e e0       	ldi	r23, 0x0E	; 14
   15e1c:	ce 01       	movw	r24, r28
   15e1e:	8a 5d       	subi	r24, 0xDA	; 218
   15e20:	9e 4f       	sbci	r25, 0xFE	; 254
   15e22:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
   15e26:	6f e1       	ldi	r22, 0x1F	; 31
   15e28:	7e e0       	ldi	r23, 0x0E	; 14
   15e2a:	c3 01       	movw	r24, r6
   15e2c:	0e 94 14 56 	call	0xac28	; 0xac28 <IPAddress::IPAddress(unsigned char const*)>
   15e30:	9e 01       	movw	r18, r28
   15e32:	2e 5c       	subi	r18, 0xCE	; 206
   15e34:	3e 4f       	sbci	r19, 0xFE	; 254
   15e36:	ae 01       	movw	r20, r28
   15e38:	44 5d       	subi	r20, 0xD4	; 212
   15e3a:	5e 4f       	sbci	r21, 0xFE	; 254
   15e3c:	be 01       	movw	r22, r28
   15e3e:	6a 5d       	subi	r22, 0xDA	; 218
   15e40:	7e 4f       	sbci	r23, 0xFE	; 254
   15e42:	c3 01       	movw	r24, r6
   15e44:	0e 94 42 d2 	call	0x1a484	; 0x1a484 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>
writeRCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:242
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
  __GP_REGISTER8 (RCR,    0x001B);    // Retry count
   15e48:	42 e0       	ldi	r20, 0x02	; 2
   15e4a:	64 e0       	ldi	r22, 0x04	; 4
   15e4c:	8b e1       	ldi	r24, 0x1B	; 27
   15e4e:	90 e0       	ldi	r25, 0x00	; 0
   15e50:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
writeRTR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:241
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
  __GP_REGISTER8 (IR,     0x0015);    // Interrupt
  __GP_REGISTER8 (IMR,    0x0016);    // Interrupt Mask
  __GP_REGISTER16(RTR,    0x0019);    // Timeout address
   15e54:	42 e0       	ldi	r20, 0x02	; 2
   15e56:	64 e0       	ldi	r22, 0x04	; 4
   15e58:	89 e1       	ldi	r24, 0x19	; 25
   15e5a:	90 e0       	ldi	r25, 0x00	; 0
   15e5c:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   15e60:	48 e5       	ldi	r20, 0x58	; 88
   15e62:	64 e0       	ldi	r22, 0x04	; 4
   15e64:	8a e1       	ldi	r24, 0x1A	; 26
   15e66:	90 e0       	ldi	r25, 0x00	; 0
   15e68:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
      w5500.setRetransmissionCount(2);
      w5500.setRetransmissionTime(600);
      strcpy_P(str1, text_ethernet_rozhrani);
   15e6c:	63 e4       	ldi	r22, 0x43	; 67
   15e6e:	72 e8       	ldi	r23, 0x82	; 130
   15e70:	ce 01       	movw	r24, r28
   15e72:	88 5b       	subi	r24, 0xB8	; 184
   15e74:	9f 4f       	sbci	r25, 0xFF	; 255
   15e76:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3758
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15e7a:	ee 24       	eor	r14, r14
   15e7c:	ea 94       	dec	r14
   15e7e:	fe 2c       	mov	r15, r14
   15e80:	00 ee       	ldi	r16, 0xE0	; 224
   15e82:	17 e0       	ldi	r17, 0x07	; 7
   15e84:	21 e0       	ldi	r18, 0x01	; 1
   15e86:	4c e8       	ldi	r20, 0x8C	; 140
   15e88:	50 e0       	ldi	r21, 0x00	; 0
   15e8a:	6e e1       	ldi	r22, 0x1E	; 30
   15e8c:	70 e0       	ldi	r23, 0x00	; 0
   15e8e:	ce 01       	movw	r24, r28
   15e90:	88 5b       	subi	r24, 0xB8	; 184
   15e92:	9f 4f       	sbci	r25, 0xFF	; 255
   15e94:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
      delay(100);
   15e98:	64 e6       	ldi	r22, 0x64	; 100
   15e9a:	70 e0       	ldi	r23, 0x00	; 0
   15e9c:	80 e0       	ldi	r24, 0x00	; 0
   15e9e:	90 e0       	ldi	r25, 0x00	; 0
   15ea0:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
      http_server.begin();
   15ea4:	89 e2       	ldi	r24, 0x29	; 41
   15ea6:	90 e1       	ldi	r25, 0x10	; 16
   15ea8:	0e 94 60 88 	call	0x110c0	; 0x110c0 <EthernetServer::begin()>
   15eac:	24 ce       	rjmp	.-952    	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3783
        {
          selftest_clear_0(SELFTEST_MQTT_LINK);
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
   15eae:	85 e0       	ldi	r24, 0x05	; 5
   15eb0:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
   15eb4:	03 c3       	rjmp	.+1542   	; 0x164bc <setup+0x19e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3793
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
   15eb6:	6f e9       	ldi	r22, 0x9F	; 159
   15eb8:	72 e8       	ldi	r23, 0x82	; 130
   15eba:	ce 01       	movw	r24, r28
   15ebc:	88 5b       	subi	r24, 0xB8	; 184
   15ebe:	9f 4f       	sbci	r25, 0xFF	; 255
   15ec0:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15ec4:	ee 24       	eor	r14, r14
   15ec6:	ea 94       	dec	r14
   15ec8:	fe 2c       	mov	r15, r14
   15eca:	00 ee       	ldi	r16, 0xE0	; 224
   15ecc:	17 e0       	ldi	r17, 0x07	; 7
   15ece:	2c c3       	rjmp	.+1624   	; 0x16528 <setup+0x1a4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3799
      }
    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
   15ed0:	c8 5c       	subi	r28, 0xC8	; 200
   15ed2:	de 4f       	sbci	r29, 0xFE	; 254
   15ed4:	88 81       	ld	r24, Y
   15ed6:	c8 53       	subi	r28, 0x38	; 56
   15ed8:	d1 40       	sbci	r29, 0x01	; 1
   15eda:	8b 30       	cpi	r24, 0x0B	; 11
   15edc:	81 f4       	brne	.+32     	; 0x15efe <setup+0x1424>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3801
    {
      strcpy_P(str1, text_rest_rozhrani);
   15ede:	64 e1       	ldi	r22, 0x14	; 20
   15ee0:	72 e8       	ldi	r23, 0x82	; 130
   15ee2:	ce 01       	movw	r24, r28
   15ee4:	88 5b       	subi	r24, 0xB8	; 184
   15ee6:	9f 4f       	sbci	r25, 0xFF	; 255
   15ee8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3802
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15eec:	ee 24       	eor	r14, r14
   15eee:	ea 94       	dec	r14
   15ef0:	fe 2c       	mov	r15, r14
   15ef2:	00 ee       	ldi	r16, 0xE0	; 224
   15ef4:	17 e0       	ldi	r17, 0x07	; 7
   15ef6:	21 e0       	ldi	r18, 0x01	; 1
   15ef8:	40 ea       	ldi	r20, 0xA0	; 160
   15efa:	50 e0       	ldi	r21, 0x00	; 0
   15efc:	d8 cc       	rjmp	.-1616   	; 0x158ae <setup+0xdd4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3806
    }
    ///
    /// inicializace nrf
    if (init == 12)
   15efe:	c8 5c       	subi	r28, 0xC8	; 200
   15f00:	de 4f       	sbci	r29, 0xFE	; 254
   15f02:	98 81       	ld	r25, Y
   15f04:	c8 53       	subi	r28, 0x38	; 56
   15f06:	d1 40       	sbci	r29, 0x01	; 1
   15f08:	9c 30       	cpi	r25, 0x0C	; 12
   15f0a:	09 f0       	breq	.+2      	; 0x15f0e <setup+0x1434>
   15f0c:	11 c3       	rjmp	.+1570   	; 0x16530 <setup+0x1a56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3808
    {
      strcpy_P(str1, text_nrf_rozhrani);
   15f0e:	67 e0       	ldi	r22, 0x07	; 7
   15f10:	72 e8       	ldi	r23, 0x82	; 130
   15f12:	ce 01       	movw	r24, r28
   15f14:	88 5b       	subi	r24, 0xB8	; 184
   15f16:	9f 4f       	sbci	r25, 0xFF	; 255
   15f18:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3809
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   15f1c:	ee 24       	eor	r14, r14
   15f1e:	ea 94       	dec	r14
   15f20:	fe 2c       	mov	r15, r14
   15f22:	00 ee       	ldi	r16, 0xE0	; 224
   15f24:	17 e0       	ldi	r17, 0x07	; 7
   15f26:	21 e0       	ldi	r18, 0x01	; 1
   15f28:	4a ea       	ldi	r20, 0xAA	; 170
   15f2a:	50 e0       	ldi	r21, 0x00	; 0
   15f2c:	6e e1       	ldi	r22, 0x1E	; 30
   15f2e:	70 e0       	ldi	r23, 0x00	; 0
   15f30:	ce 01       	movw	r24, r28
   15f32:	88 5b       	subi	r24, 0xB8	; 184
   15f34:	9f 4f       	sbci	r25, 0xFF	; 255
   15f36:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3810
      scan_rf_net_enable = 2;
   15f3a:	82 e0       	ldi	r24, 0x02	; 2
   15f3c:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <scan_rf_net_enable>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:631
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
   15f40:	80 91 11 10 	lds	r24, 0x1011	; 0x801011 <radio>
   15f44:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <radio+0x1>
   15f48:	20 91 13 10 	lds	r18, 0x1013	; 0x801013 <radio+0x2>
   15f4c:	30 91 14 10 	lds	r19, 0x1014	; 0x801014 <radio+0x3>
   15f50:	82 17       	cp	r24, r18
   15f52:	93 07       	cpc	r25, r19
   15f54:	19 f0       	breq	.+6      	; 0x15f5c <setup+0x1482>
   15f56:	61 e0       	ldi	r22, 0x01	; 1
   15f58:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:634
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
   15f5c:	80 91 13 10 	lds	r24, 0x1013	; 0x801013 <radio+0x2>
   15f60:	90 91 14 10 	lds	r25, 0x1014	; 0x801014 <radio+0x3>
   15f64:	20 91 11 10 	lds	r18, 0x1011	; 0x801011 <radio>
   15f68:	30 91 12 10 	lds	r19, 0x1012	; 0x801012 <radio+0x1>
   15f6c:	28 17       	cp	r18, r24
   15f6e:	39 07       	cpc	r19, r25
   15f70:	19 f0       	breq	.+6      	; 0x15f78 <setup+0x149e>
/home/saric/Arduino/libraries/RF24/RF24.cpp:636
    #endif
        pinMode(csn_pin,OUTPUT);
   15f72:	61 e0       	ldi	r22, 0x01	; 1
   15f74:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
/home/saric/Arduino/libraries/RF24/RF24.cpp:638
    
    _SPI.begin();
   15f78:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SPIClass::begin()>
ce():
/home/saric/Arduino/libraries/RF24/RF24.cpp:80
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
   15f7c:	80 91 11 10 	lds	r24, 0x1011	; 0x801011 <radio>
   15f80:	90 91 12 10 	lds	r25, 0x1012	; 0x801012 <radio+0x1>
   15f84:	20 91 13 10 	lds	r18, 0x1013	; 0x801013 <radio+0x2>
   15f88:	30 91 14 10 	lds	r19, 0x1014	; 0x801014 <radio+0x3>
   15f8c:	82 17       	cp	r24, r18
   15f8e:	93 07       	cpc	r25, r19
   15f90:	19 f0       	breq	.+6      	; 0x15f98 <setup+0x14be>
   15f92:	60 e0       	ldi	r22, 0x00	; 0
   15f94:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:640
    #endif
        pinMode(csn_pin,OUTPUT);
    
    _SPI.begin();
    ce(LOW);
  	csn(HIGH);
   15f98:	81 e0       	ldi	r24, 0x01	; 1
   15f9a:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:652
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
   15f9e:	65 e0       	ldi	r22, 0x05	; 5
   15fa0:	70 e0       	ldi	r23, 0x00	; 0
   15fa2:	80 e0       	ldi	r24, 0x00	; 0
   15fa4:	90 e0       	ldi	r25, 0x00	; 0
   15fa6:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/RF24/RF24.cpp:655

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
   15faa:	6c e0       	ldi	r22, 0x0C	; 12
   15fac:	80 e0       	ldi	r24, 0x00	; 0
   15fae:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setRetries():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1588
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
   15fb2:	6f e5       	ldi	r22, 0x5F	; 95
   15fb4:	84 e0       	ldi	r24, 0x04	; 4
   15fb6:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1437
/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
   15fba:	86 e0       	ldi	r24, 0x06	; 6
   15fbc:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   15fc0:	88 7f       	andi	r24, 0xF8	; 248
/home/saric/Arduino/libraries/RF24/RF24.cpp:1446
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
   15fc2:	68 2f       	mov	r22, r24
   15fc4:	61 60       	ori	r22, 0x01	; 1
   15fc6:	86 e0       	ldi	r24, 0x06	; 6
   15fc8:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   15fcc:	86 e0       	ldi	r24, 0x06	; 6
   15fce:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   15fd2:	87 7d       	andi	r24, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1476
  #endif
  if( speed == RF24_250KBPS )
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
   15fd4:	18 2f       	mov	r17, r24
   15fd6:	10 62       	ori	r17, 0x20	; 32
/home/saric/Arduino/libraries/RF24/RF24.cpp:1480
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=450;
  #else //16Mhz Arduino
	txDelay=155;
   15fd8:	8b e9       	ldi	r24, 0x9B	; 155
   15fda:	90 e0       	ldi	r25, 0x00	; 0
   15fdc:	a0 e0       	ldi	r26, 0x00	; 0
   15fde:	b0 e0       	ldi	r27, 0x00	; 0
   15fe0:	80 93 21 10 	sts	0x1021, r24	; 0x801021 <radio+0x10>
   15fe4:	90 93 22 10 	sts	0x1022, r25	; 0x801022 <radio+0x11>
   15fe8:	a0 93 23 10 	sts	0x1023, r26	; 0x801023 <radio+0x12>
   15fec:	b0 93 24 10 	sts	0x1024, r27	; 0x801024 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   15ff0:	61 2f       	mov	r22, r17
   15ff2:	86 e0       	ldi	r24, 0x06	; 6
   15ff4:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   15ff8:	86 e0       	ldi	r24, 0x06	; 6
   15ffa:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   15ffe:	18 13       	cpse	r17, r24
   16000:	03 c0       	rjmp	.+6      	; 0x16008 <setup+0x152e>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:669

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
  {
    p_variant = true ;
   16002:	81 e0       	ldi	r24, 0x01	; 1
   16004:	80 93 17 10 	sts	0x1017, r24	; 0x801017 <radio+0x6>
/home/saric/Arduino/libraries/RF24/RF24.cpp:671
  }
  setup = read_register(RF_SETUP);
   16008:	86 e0       	ldi	r24, 0x06	; 6
   1600a:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
setDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1462
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
   1600e:	86 e0       	ldi	r24, 0x06	; 6
   16010:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1470
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if !defined(F_CPU) || F_CPU > 20000000
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
   16014:	45 e5       	ldi	r20, 0x55	; 85
   16016:	50 e0       	ldi	r21, 0x00	; 0
   16018:	60 e0       	ldi	r22, 0x00	; 0
   1601a:	70 e0       	ldi	r23, 0x00	; 0
   1601c:	40 93 21 10 	sts	0x1021, r20	; 0x801021 <radio+0x10>
   16020:	50 93 22 10 	sts	0x1022, r21	; 0x801022 <radio+0x11>
   16024:	60 93 23 10 	sts	0x1023, r22	; 0x801023 <radio+0x12>
   16028:	70 93 24 10 	sts	0x1024, r23	; 0x801024 <radio+0x13>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1465
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   1602c:	68 2f       	mov	r22, r24
   1602e:	67 7d       	andi	r22, 0xD7	; 215
/home/saric/Arduino/libraries/RF24/RF24.cpp:1497
      #else //16Mhz Arduino	  
	  txDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
   16030:	86 e0       	ldi	r24, 0x06	; 6
   16032:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1500

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
   16036:	86 e0       	ldi	r24, 0x06	; 6
   16038:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1603c:	80 e0       	ldi	r24, 0x00	; 0
   1603e:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
toggle_features():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1263
/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
	_SPI.transfer( ACTIVATE );
   16042:	80 e5       	ldi	r24, 0x50	; 80
   16044:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1264
    _SPI.transfer( 0x73 );
   16048:	83 e7       	ldi	r24, 0x73	; 115
   1604a:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1604e:	81 e0       	ldi	r24, 0x01	; 1
   16050:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:686
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
   16054:	60 e0       	ldi	r22, 0x00	; 0
   16056:	8d e1       	ldi	r24, 0x1D	; 29
   16058:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:687
  write_register(DYNPD,0);
   1605c:	60 e0       	ldi	r22, 0x00	; 0
   1605e:	8c e1       	ldi	r24, 0x1C	; 28
   16060:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:688
  dynamic_payloads_enabled = false;
   16064:	10 92 19 10 	sts	0x1019, r1	; 0x801019 <radio+0x8>
/home/saric/Arduino/libraries/RF24/RF24.cpp:692

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   16068:	60 e7       	ldi	r22, 0x70	; 112
   1606a:	87 e0       	ldi	r24, 0x07	; 7
   1606c:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
setChannel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:458
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
   16070:	6c e4       	ldi	r22, 0x4C	; 76
   16072:	85 e0       	ldi	r24, 0x05	; 5
   16074:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
flush_rx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:338

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
   16078:	82 ee       	ldi	r24, 0xE2	; 226
   1607a:	0e 94 8b d0 	call	0x1a116	; 0x1a116 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
flush_tx():
/home/saric/Arduino/libraries/RF24/RF24.cpp:345

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
   1607e:	81 ee       	ldi	r24, 0xE1	; 225
   16080:	0e 94 8b d0 	call	0x1a116	; 0x1a116 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
powerUp():
/home/saric/Arduino/libraries/RF24/RF24.cpp:798
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
   16084:	80 e0       	ldi	r24, 0x00	; 0
   16086:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:801

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
   1608a:	81 fd       	sbrc	r24, 1
   1608c:	0b c0       	rjmp	.+22     	; 0x160a4 <setup+0x15ca>
/home/saric/Arduino/libraries/RF24/RF24.cpp:802
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
   1608e:	68 2f       	mov	r22, r24
   16090:	62 60       	ori	r22, 0x02	; 2
   16092:	80 e0       	ldi	r24, 0x00	; 0
   16094:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:807

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
   16098:	65 e0       	ldi	r22, 0x05	; 5
   1609a:	70 e0       	ldi	r23, 0x00	; 0
   1609c:	80 e0       	ldi	r24, 0x00	; 0
   1609e:	90 e0       	ldi	r25, 0x00	; 0
   160a0:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
begin():
/home/saric/Arduino/libraries/RF24/RF24.cpp:707

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
   160a4:	80 e0       	ldi	r24, 0x00	; 0
   160a6:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   160aa:	68 2f       	mov	r22, r24
   160ac:	6e 7f       	andi	r22, 0xFE	; 254
   160ae:	80 e0       	ldi	r24, 0x00	; 0
   160b0:	0e 94 62 d0 	call	0x1a0c4	; 0x1a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:708
  delay(100);
   160b4:	64 e6       	ldi	r22, 0x64	; 100
   160b6:	70 e0       	ldi	r23, 0x00	; 0
   160b8:	80 e0       	ldi	r24, 0x00	; 0
   160ba:	90 e0       	ldi	r25, 0x00	; 0
   160bc:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
   160c0:	1a cd       	rjmp	.-1484   	; 0x15af6 <setup+0x101c>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
   160c2:	f8 01       	movw	r30, r16
   160c4:	22 a8       	ldd	r2, Z+50	; 0x32
   160c6:	33 a8       	ldd	r3, Z+51	; 0x33
   160c8:	44 a8       	ldd	r4, Z+52	; 0x34
   160ca:	55 a8       	ldd	r5, Z+53	; 0x35
   160cc:	a2 01       	movw	r20, r4
   160ce:	91 01       	movw	r18, r2
   160d0:	c5 01       	movw	r24, r10
   160d2:	b4 01       	movw	r22, r8
   160d4:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
   160d8:	87 fd       	sbrc	r24, 7
   160da:	64 c3       	rjmp	.+1736   	; 0x167a4 <setup+0x1cca>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
   160dc:	21 e0       	ldi	r18, 0x01	; 1
   160de:	f8 01       	movw	r30, r16
   160e0:	22 af       	std	Z+58, r18	; 0x3a
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   160e2:	12 aa       	std	Z+50, r1	; 0x32
   160e4:	13 aa       	std	Z+51, r1	; 0x33
   160e6:	14 aa       	std	Z+52, r1	; 0x34
   160e8:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   160ea:	80 e0       	ldi	r24, 0x00	; 0
   160ec:	90 e0       	ldi	r25, 0x00	; 0
   160ee:	af e7       	ldi	r26, 0x7F	; 127
   160f0:	b3 e4       	ldi	r27, 0x43	; 67
   160f2:	86 ab       	std	Z+54, r24	; 0x36
   160f4:	97 ab       	std	Z+55, r25	; 0x37
   160f6:	a0 af       	std	Z+56, r26	; 0x38
   160f8:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
   160fa:	46 8c       	ldd	r4, Z+30	; 0x1e
   160fc:	57 8c       	ldd	r5, Z+31	; 0x1f
   160fe:	d2 01       	movw	r26, r4
   16100:	8d 90       	ld	r8, X+
   16102:	9d 90       	ld	r9, X+
   16104:	ad 90       	ld	r10, X+
   16106:	bc 90       	ld	r11, X
   16108:	20 e0       	ldi	r18, 0x00	; 0
   1610a:	30 e0       	ldi	r19, 0x00	; 0
   1610c:	4f e7       	ldi	r20, 0x7F	; 127
   1610e:	53 e4       	ldi	r21, 0x43	; 67
   16110:	c5 01       	movw	r24, r10
   16112:	b4 01       	movw	r22, r8
   16114:	0e 94 20 fa 	call	0x1f440	; 0x1f440 <__gesf2>
   16118:	18 16       	cp	r1, r24
   1611a:	14 f5       	brge	.+68     	; 0x16160 <setup+0x1686>
   1611c:	80 e0       	ldi	r24, 0x00	; 0
   1611e:	90 e0       	ldi	r25, 0x00	; 0
   16120:	af e7       	ldi	r26, 0x7F	; 127
   16122:	b3 e4       	ldi	r27, 0x43	; 67
   16124:	f2 01       	movw	r30, r4
   16126:	80 83       	st	Z, r24
   16128:	91 83       	std	Z+1, r25	; 0x01
   1612a:	a2 83       	std	Z+2, r26	; 0x02
   1612c:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
   1612e:	f8 01       	movw	r30, r16
   16130:	26 a0       	ldd	r2, Z+38	; 0x26
   16132:	37 a0       	ldd	r3, Z+39	; 0x27
   16134:	40 a4       	ldd	r4, Z+40	; 0x28
   16136:	51 a4       	ldd	r5, Z+41	; 0x29
   16138:	86 a8       	ldd	r8, Z+54	; 0x36
   1613a:	97 a8       	ldd	r9, Z+55	; 0x37
   1613c:	a0 ac       	ldd	r10, Z+56	; 0x38
   1613e:	b1 ac       	ldd	r11, Z+57	; 0x39
   16140:	a5 01       	movw	r20, r10
   16142:	94 01       	movw	r18, r8
   16144:	c2 01       	movw	r24, r4
   16146:	b1 01       	movw	r22, r2
   16148:	0e 94 20 fa 	call	0x1f440	; 0x1f440 <__gesf2>
   1614c:	18 16       	cp	r1, r24
   1614e:	c4 f4       	brge	.+48     	; 0x16180 <setup+0x16a6>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
   16150:	d8 01       	movw	r26, r16
   16152:	96 96       	adiw	r26, 0x26	; 38
   16154:	8d 92       	st	X+, r8
   16156:	9d 92       	st	X+, r9
   16158:	ad 92       	st	X+, r10
   1615a:	bc 92       	st	X, r11
   1615c:	99 97       	sbiw	r26, 0x29	; 41
   1615e:	1d c0       	rjmp	.+58     	; 0x1619a <setup+0x16c0>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
   16160:	20 e0       	ldi	r18, 0x00	; 0
   16162:	30 e0       	ldi	r19, 0x00	; 0
   16164:	a9 01       	movw	r20, r18
   16166:	c5 01       	movw	r24, r10
   16168:	b4 01       	movw	r22, r8
   1616a:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
   1616e:	87 ff       	sbrs	r24, 7
   16170:	de cf       	rjmp	.-68     	; 0x1612e <setup+0x1654>
   16172:	d2 01       	movw	r26, r4
   16174:	1d 92       	st	X+, r1
   16176:	1d 92       	st	X+, r1
   16178:	1d 92       	st	X+, r1
   1617a:	1c 92       	st	X, r1
   1617c:	13 97       	sbiw	r26, 0x03	; 3
   1617e:	d7 cf       	rjmp	.-82     	; 0x1612e <setup+0x1654>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
   16180:	f8 01       	movw	r30, r16
   16182:	82 a8       	ldd	r8, Z+50	; 0x32
   16184:	93 a8       	ldd	r9, Z+51	; 0x33
   16186:	a4 a8       	ldd	r10, Z+52	; 0x34
   16188:	b5 a8       	ldd	r11, Z+53	; 0x35
   1618a:	a5 01       	movw	r20, r10
   1618c:	94 01       	movw	r18, r8
   1618e:	c2 01       	movw	r24, r4
   16190:	b1 01       	movw	r22, r2
   16192:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
   16196:	87 fd       	sbrc	r24, 7
   16198:	db cf       	rjmp	.-74     	; 0x16150 <setup+0x1676>
   1619a:	c5 5c       	subi	r28, 0xC5	; 197
   1619c:	de 4f       	sbci	r29, 0xFE	; 254
   1619e:	e8 81       	ld	r30, Y
   161a0:	f9 81       	ldd	r31, Y+1	; 0x01
   161a2:	cb 53       	subi	r28, 0x3B	; 59
   161a4:	d1 40       	sbci	r29, 0x01	; 1
   161a6:	34 96       	adiw	r30, 0x04	; 4
   161a8:	c5 5c       	subi	r28, 0xC5	; 197
   161aa:	de 4f       	sbci	r29, 0xFE	; 254
   161ac:	f9 83       	std	Y+1, r31	; 0x01
   161ae:	e8 83       	st	Y, r30
   161b0:	cb 53       	subi	r28, 0x3B	; 59
   161b2:	d1 40       	sbci	r29, 0x01	; 1
   161b4:	c7 5c       	subi	r28, 0xC7	; 199
   161b6:	de 4f       	sbci	r29, 0xFE	; 254
   161b8:	88 81       	ld	r24, Y
   161ba:	99 81       	ldd	r25, Y+1	; 0x01
   161bc:	c9 53       	subi	r28, 0x39	; 57
   161be:	d1 40       	sbci	r29, 0x01	; 1
   161c0:	04 96       	adiw	r24, 0x04	; 4
   161c2:	c7 5c       	subi	r28, 0xC7	; 199
   161c4:	de 4f       	sbci	r29, 0xFE	; 254
   161c6:	99 83       	std	Y+1, r25	; 0x01
   161c8:	88 83       	st	Y, r24
   161ca:	c9 53       	subi	r28, 0x39	; 57
   161cc:	d1 40       	sbci	r29, 0x01	; 1
   161ce:	94 e0       	ldi	r25, 0x04	; 4
   161d0:	c9 0e       	add	r12, r25
   161d2:	d1 1c       	adc	r13, r1
   161d4:	a2 e0       	ldi	r26, 0x02	; 2
   161d6:	ea 0e       	add	r14, r26
   161d8:	f1 1c       	adc	r15, r1
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
   161da:	ba e0       	ldi	r27, 0x0A	; 10
   161dc:	eb 16       	cp	r14, r27
   161de:	f1 04       	cpc	r15, r1
   161e0:	09 f0       	breq	.+2      	; 0x161e4 <setup+0x170a>
   161e2:	db c1       	rjmp	.+950    	; 0x1659a <setup+0x1ac0>
   161e4:	4d e8       	ldi	r20, 0x8D	; 141
   161e6:	24 2e       	mov	r2, r20
   161e8:	4b e0       	ldi	r20, 0x0B	; 11
   161ea:	34 2e       	mov	r3, r20
   161ec:	58 eb       	ldi	r21, 0xB8	; 184
   161ee:	85 2e       	mov	r8, r21
   161f0:	5a e0       	ldi	r21, 0x0A	; 10
   161f2:	95 2e       	mov	r9, r21
   161f4:	6c ec       	ldi	r22, 0xCC	; 204
   161f6:	a6 2e       	mov	r10, r22
   161f8:	6a e0       	ldi	r22, 0x0A	; 10
   161fa:	b6 2e       	mov	r11, r22
   161fc:	70 ee       	ldi	r23, 0xE0	; 224
   161fe:	c7 2e       	mov	r12, r23
   16200:	7a e0       	ldi	r23, 0x0A	; 10
   16202:	d7 2e       	mov	r13, r23
   16204:	e4 ef       	ldi	r30, 0xF4	; 244
   16206:	ee 2e       	mov	r14, r30
   16208:	ea e0       	ldi	r30, 0x0A	; 10
   1620a:	fe 2e       	mov	r15, r30
   1620c:	00 e6       	ldi	r16, 0x60	; 96
   1620e:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   16210:	51 2c       	mov	r5, r1
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   16212:	f1 01       	movw	r30, r2
   16214:	11 92       	st	Z+, r1
   16216:	1f 01       	movw	r2, r30
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
   16218:	c8 01       	movw	r24, r16
   1621a:	0e 94 ba 6f 	call	0xdf74	; 0xdf74 <EEPROMreadFloat(unsigned int)>
   1621e:	d4 01       	movw	r26, r8
   16220:	6d 93       	st	X+, r22
   16222:	7d 93       	st	X+, r23
   16224:	8d 93       	st	X+, r24
   16226:	9d 93       	st	X+, r25
   16228:	4d 01       	movw	r8, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
   1622a:	c8 01       	movw	r24, r16
   1622c:	04 96       	adiw	r24, 0x04	; 4
   1622e:	0e 94 ba 6f 	call	0xdf74	; 0xdf74 <EEPROMreadFloat(unsigned int)>
   16232:	f5 01       	movw	r30, r10
   16234:	61 93       	st	Z+, r22
   16236:	71 93       	st	Z+, r23
   16238:	81 93       	st	Z+, r24
   1623a:	91 93       	st	Z+, r25
   1623c:	5f 01       	movw	r10, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
   1623e:	c8 01       	movw	r24, r16
   16240:	08 96       	adiw	r24, 0x08	; 8
   16242:	0e 94 ba 6f 	call	0xdf74	; 0xdf74 <EEPROMreadFloat(unsigned int)>
   16246:	d6 01       	movw	r26, r12
   16248:	6d 93       	st	X+, r22
   1624a:	7d 93       	st	X+, r23
   1624c:	8d 93       	st	X+, r24
   1624e:	9d 93       	st	X+, r25
   16250:	6d 01       	movw	r12, r26
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
   16252:	c8 01       	movw	r24, r16
   16254:	0c 96       	adiw	r24, 0x0c	; 12
   16256:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1625a:	f7 01       	movw	r30, r14
   1625c:	81 93       	st	Z+, r24
   1625e:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3826
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
   16260:	85 2d       	mov	r24, r5
   16262:	0e 94 d5 4d 	call	0x9baa	; 0x9baa <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3821
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   16266:	53 94       	inc	r5
   16268:	0f 5d       	subi	r16, 0xDF	; 223
   1626a:	1f 4f       	sbci	r17, 0xFF	; 255
   1626c:	f5 e0       	ldi	r31, 0x05	; 5
   1626e:	5f 12       	cpse	r5, r31
   16270:	d0 cf       	rjmp	.-96     	; 0x16212 <setup+0x1738>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
   16272:	8c e5       	ldi	r24, 0x5C	; 92
   16274:	90 e0       	ldi	r25, 0x00	; 0
   16276:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1627a:	18 2f       	mov	r17, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3829
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
   1627c:	80 93 86 0b 	sts	0x0B86, r24	; 0x800b86 <default_ring>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3830
      last_default_ring = default_ring;
   16280:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <last_default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2015
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
   16284:	8d e5       	ldi	r24, 0x5D	; 93
   16286:	90 e0       	ldi	r25, 0x00	; 0
   16288:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3831
        thermostat_ring_update_pid_parameters(idx);
      }

      default_ring = get_default_ring();
      last_default_ring = default_ring;
      default_show_temp = get_default_show_temp();
   1628c:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <default_show_temp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3832
      thermostat_mode_default_ring_last_state = thermostat_ring_get_mode(default_ring);
   16290:	81 2f       	mov	r24, r17
   16292:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
   16296:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <thermostat_mode_default_ring_last_state>
   1629a:	2d cc       	rjmp	.-1958   	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3848
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
   1629c:	6f e9       	ldi	r22, 0x9F	; 159
   1629e:	72 e8       	ldi	r23, 0x82	; 130
   162a0:	ce 01       	movw	r24, r28
   162a2:	88 5b       	subi	r24, 0xB8	; 184
   162a4:	9f 4f       	sbci	r25, 0xFF	; 255
   162a6:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3849
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   162aa:	ee 24       	eor	r14, r14
   162ac:	ea 94       	dec	r14
   162ae:	fe 2c       	mov	r15, r14
   162b0:	00 ee       	ldi	r16, 0xE0	; 224
   162b2:	17 e0       	ldi	r17, 0x07	; 7
   162b4:	21 e0       	ldi	r18, 0x01	; 1
   162b6:	4e eb       	ldi	r20, 0xBE	; 190
   162b8:	50 e0       	ldi	r21, 0x00	; 0
   162ba:	60 ea       	ldi	r22, 0xA0	; 160
   162bc:	70 e0       	ldi	r23, 0x00	; 0
   162be:	ce 01       	movw	r24, r28
   162c0:	88 5b       	subi	r24, 0xB8	; 184
   162c2:	9f 4f       	sbci	r25, 0xFF	; 255
   162c4:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   162c8:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   162cc:	8d 7f       	andi	r24, 0xFD	; 253
   162ce:	a9 c0       	rjmp	.+338    	; 0x16422 <setup+0x1948>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3855
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
   162d0:	c8 5c       	subi	r28, 0xC8	; 200
   162d2:	de 4f       	sbci	r29, 0xFE	; 254
   162d4:	b8 81       	ld	r27, Y
   162d6:	c8 53       	subi	r28, 0x38	; 56
   162d8:	d1 40       	sbci	r29, 0x01	; 1
   162da:	bf 30       	cpi	r27, 0x0F	; 15
   162dc:	09 f0       	breq	.+2      	; 0x162e0 <setup+0x1806>
   162de:	0b cc       	rjmp	.-2026   	; 0x15af6 <setup+0x101c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3857
    {
      strcpy_P(str1, text_rtc_cas);
   162e0:	62 ed       	ldi	r22, 0xD2	; 210
   162e2:	71 e8       	ldi	r23, 0x81	; 129
   162e4:	ce 01       	movw	r24, r28
   162e6:	88 5b       	subi	r24, 0xB8	; 184
   162e8:	9f 4f       	sbci	r25, 0xFF	; 255
   162ea:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3858
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   162ee:	ee 24       	eor	r14, r14
   162f0:	ea 94       	dec	r14
   162f2:	fe 2c       	mov	r15, r14
   162f4:	00 ee       	ldi	r16, 0xE0	; 224
   162f6:	17 e0       	ldi	r17, 0x07	; 7
   162f8:	21 e0       	ldi	r18, 0x01	; 1
   162fa:	48 ec       	ldi	r20, 0xC8	; 200
   162fc:	50 e0       	ldi	r21, 0x00	; 0
   162fe:	6e e1       	ldi	r22, 0x1E	; 30
   16300:	70 e0       	ldi	r23, 0x00	; 0
   16302:	ce 01       	movw	r24, r28
   16304:	88 5b       	subi	r24, 0xB8	; 184
   16306:	9f 4f       	sbci	r25, 0xFF	; 255
   16308:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3859
      if (rtc.isrunning())
   1630c:	0e 94 c5 bc 	call	0x1798a	; 0x1798a <RTC_DS1307::isrunning() [clone .constprop.149]>
   16310:	88 23       	and	r24, r24
   16312:	a9 f0       	breq	.+42     	; 0x1633e <setup+0x1864>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3861
      {
        strcpy_P(str1, text_ok);
   16314:	6f e9       	ldi	r22, 0x9F	; 159
   16316:	72 e8       	ldi	r23, 0x82	; 130
   16318:	ce 01       	movw	r24, r28
   1631a:	88 5b       	subi	r24, 0xB8	; 184
   1631c:	9f 4f       	sbci	r25, 0xFF	; 255
   1631e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3862
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16322:	21 e0       	ldi	r18, 0x01	; 1
   16324:	48 ec       	ldi	r20, 0xC8	; 200
   16326:	50 e0       	ldi	r21, 0x00	; 0
   16328:	60 ea       	ldi	r22, 0xA0	; 160
   1632a:	70 e0       	ldi	r23, 0x00	; 0
   1632c:	ce 01       	movw	r24, r28
   1632e:	88 5b       	subi	r24, 0xB8	; 184
   16330:	9f 4f       	sbci	r25, 0xFF	; 255
   16332:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   16336:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   1633a:	8e 7f       	andi	r24, 0xFE	; 254
   1633c:	72 c0       	rjmp	.+228    	; 0x16422 <setup+0x1948>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3867
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
   1633e:	6e eb       	ldi	r22, 0xBE	; 190
   16340:	73 e8       	ldi	r23, 0x83	; 131
   16342:	ce 01       	movw	r24, r28
   16344:	88 5b       	subi	r24, 0xB8	; 184
   16346:	9f 4f       	sbci	r25, 0xFF	; 255
   16348:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3868
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1634c:	ee 24       	eor	r14, r14
   1634e:	ea 94       	dec	r14
   16350:	fe 2c       	mov	r15, r14
   16352:	00 e0       	ldi	r16, 0x00	; 0
   16354:	18 ef       	ldi	r17, 0xF8	; 248
   16356:	21 e0       	ldi	r18, 0x01	; 1
   16358:	48 ec       	ldi	r20, 0xC8	; 200
   1635a:	50 e0       	ldi	r21, 0x00	; 0
   1635c:	60 ea       	ldi	r22, 0xA0	; 160
   1635e:	70 e0       	ldi	r23, 0x00	; 0
   16360:	ce 01       	movw	r24, r28
   16362:	88 5b       	subi	r24, 0xB8	; 184
   16364:	9f 4f       	sbci	r25, 0xFF	; 255
   16366:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
        selftest_set_0(SELFTEST_ERR_RTC);
   1636a:	80 e0       	ldi	r24, 0x00	; 0
   1636c:	d4 cc       	rjmp	.-1624   	; 0x15d16 <setup+0x123c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3658
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }
    ///
    ///  nacteni provoznich parametru
    if (init == 5)
   1636e:	c8 5c       	subi	r28, 0xC8	; 200
   16370:	de 4f       	sbci	r29, 0xFE	; 254
   16372:	98 81       	ld	r25, Y
   16374:	c8 53       	subi	r28, 0x38	; 56
   16376:	d1 40       	sbci	r29, 0x01	; 1
   16378:	95 30       	cpi	r25, 0x05	; 5
   1637a:	09 f4       	brne	.+2      	; 0x1637e <setup+0x18a4>
   1637c:	af ca       	rjmp	.-2722   	; 0x158dc <setup+0xe02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3681
        remote_tds_set_last_update(idx, 255);
      }
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
   1637e:	96 30       	cpi	r25, 0x06	; 6
   16380:	09 f4       	brne	.+2      	; 0x16384 <setup+0x18aa>
   16382:	28 cc       	rjmp	.-1968   	; 0x15bd4 <setup+0x10fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3703
      brigthness_display_mode = EEPROM.read(my_brightness_mode);
      my_touch.TP_SetBacklight(brigthness_display_values * 2);
    }
    ///
    /// inicializace ds2482
    if (init == 7)
   16384:	97 30       	cpi	r25, 0x07	; 7
   16386:	09 f0       	breq	.+2      	; 0x1638a <setup+0x18b0>
   16388:	c9 cc       	rjmp	.-1646   	; 0x15d1c <setup+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
    {
      strcpy_P(str1, text_onewire_rozhrani);
   1638a:	62 e6       	ldi	r22, 0x62	; 98
   1638c:	72 e8       	ldi	r23, 0x82	; 130
   1638e:	ce 01       	movw	r24, r28
   16390:	88 5b       	subi	r24, 0xB8	; 184
   16392:	9f 4f       	sbci	r25, 0xFF	; 255
   16394:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3706
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16398:	ee 24       	eor	r14, r14
   1639a:	ea 94       	dec	r14
   1639c:	fe 2c       	mov	r15, r14
   1639e:	00 ee       	ldi	r16, 0xE0	; 224
   163a0:	17 e0       	ldi	r17, 0x07	; 7
   163a2:	21 e0       	ldi	r18, 0x01	; 1
   163a4:	48 e7       	ldi	r20, 0x78	; 120
   163a6:	50 e0       	ldi	r21, 0x00	; 0
   163a8:	6e e1       	ldi	r22, 0x1E	; 30
   163aa:	70 e0       	ldi	r23, 0x00	; 0
   163ac:	ce 01       	movw	r24, r28
   163ae:	88 5b       	subi	r24, 0xB8	; 184
   163b0:	9f 4f       	sbci	r25, 0xFF	; 255
   163b2:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
      ds2482_address[0].i2c_addr = 0b0011000;
   163b6:	88 e1       	ldi	r24, 0x18	; 24
   163b8:	80 93 01 0d 	sts	0x0D01, r24	; 0x800d01 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3708
      ds2482_address[0].HWwirenum = 0;
   163bc:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <ds2482_address+0x1>
   163c0:	ee ec       	ldi	r30, 0xCE	; 206
   163c2:	fb e0       	ldi	r31, 0x0B	; 11
   163c4:	82 e8       	ldi	r24, 0x82	; 130
   163c6:	9c e0       	ldi	r25, 0x0C	; 12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3712
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
   163c8:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
        status_tds18s20[idx].period_now = 0;
   163ca:	14 8e       	std	Z+28, r1	; 0x1c
   163cc:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
   163ce:	8e 17       	cp	r24, r30
   163d0:	9f 07       	cpc	r25, r31
   163d2:	d1 f7       	brne	.-12     	; 0x163c8 <setup+0x18ee>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   163d4:	4a e0       	ldi	r20, 0x0A	; 10
   163d6:	be 01       	movw	r22, r28
   163d8:	6e 50       	subi	r22, 0x0E	; 14
   163da:	7f 4f       	sbci	r23, 0xFF	; 255
   163dc:	88 e1       	ldi	r24, 0x18	; 24
   163de:	90 e0       	ldi	r25, 0x00	; 0
   163e0:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
   163e4:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   163e8:	0e 94 39 66 	call	0xcc72	; 0xcc72 <ds2482reset(unsigned char)>
   163ec:	81 11       	cpse	r24, r1
   163ee:	7c cc       	rjmp	.-1800   	; 0x15ce8 <setup+0x120e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718
      {
        strcpy_P(str1, text_ok);
   163f0:	6f e9       	ldi	r22, 0x9F	; 159
   163f2:	72 e8       	ldi	r23, 0x82	; 130
   163f4:	ce 01       	movw	r24, r28
   163f6:	88 5b       	subi	r24, 0xB8	; 184
   163f8:	9f 4f       	sbci	r25, 0xFF	; 255
   163fa:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   163fe:	ee 24       	eor	r14, r14
   16400:	ea 94       	dec	r14
   16402:	fe 2c       	mov	r15, r14
   16404:	00 ee       	ldi	r16, 0xE0	; 224
   16406:	17 e0       	ldi	r17, 0x07	; 7
   16408:	21 e0       	ldi	r18, 0x01	; 1
   1640a:	48 e7       	ldi	r20, 0x78	; 120
   1640c:	50 e0       	ldi	r21, 0x00	; 0
   1640e:	60 ea       	ldi	r22, 0xA0	; 160
   16410:	70 e0       	ldi	r23, 0x00	; 0
   16412:	ce 01       	movw	r24, r28
   16414:	88 5b       	subi	r24, 0xB8	; 184
   16416:	9f 4f       	sbci	r25, 0xFF	; 255
   16418:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1641c:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   16420:	8b 7f       	andi	r24, 0xFB	; 251
   16422:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
   16426:	67 cb       	rjmp	.-2354   	; 0x15af6 <setup+0x101c>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3764
      delay(100);
      http_server.begin();
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
   16428:	c8 5c       	subi	r28, 0xC8	; 200
   1642a:	de 4f       	sbci	r29, 0xFE	; 254
   1642c:	a8 81       	ld	r26, Y
   1642e:	c8 53       	subi	r28, 0x38	; 56
   16430:	d1 40       	sbci	r29, 0x01	; 1
   16432:	aa 30       	cpi	r26, 0x0A	; 10
   16434:	09 f0       	breq	.+2      	; 0x16438 <setup+0x195e>
   16436:	4c cd       	rjmp	.-1384   	; 0x15ed0 <setup+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3766
    {
      strcpy_P(str1, text_mqtt_rozhrani);
   16438:	65 e3       	ldi	r22, 0x35	; 53
   1643a:	72 e8       	ldi	r23, 0x82	; 130
   1643c:	ce 01       	movw	r24, r28
   1643e:	88 5b       	subi	r24, 0xB8	; 184
   16440:	9f 4f       	sbci	r25, 0xFF	; 255
   16442:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16446:	ee 24       	eor	r14, r14
   16448:	ea 94       	dec	r14
   1644a:	fe 2c       	mov	r15, r14
   1644c:	00 ee       	ldi	r16, 0xE0	; 224
   1644e:	17 e0       	ldi	r17, 0x07	; 7
   16450:	21 e0       	ldi	r18, 0x01	; 1
   16452:	46 e9       	ldi	r20, 0x96	; 150
   16454:	50 e0       	ldi	r21, 0x00	; 0
   16456:	6e e1       	ldi	r22, 0x1E	; 30
   16458:	70 e0       	ldi	r23, 0x00	; 0
   1645a:	ce 01       	movw	r24, r28
   1645c:	88 5b       	subi	r24, 0xB8	; 184
   1645e:	9f 4f       	sbci	r25, 0xFF	; 255
   16460:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769

      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
   16464:	80 91 3d 0e 	lds	r24, 0x0E3D	; 0x800e3d <device+0x24>
   16468:	90 91 3e 0e 	lds	r25, 0x0E3E	; 0x800e3e <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
   1646c:	20 91 3c 0e 	lds	r18, 0x0E3C	; 0x800e3c <device+0x23>
   16470:	30 91 3b 0e 	lds	r19, 0x0E3B	; 0x800e3b <device+0x22>
   16474:	40 91 3a 0e 	lds	r20, 0x0E3A	; 0x800e3a <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
   16478:	50 91 39 0e 	lds	r21, 0x0E39	; 0x800e39 <device+0x20>
   1647c:	50 93 40 12 	sts	0x1240, r21	; 0x801240 <mqtt_client+0x211>
   16480:	40 93 41 12 	sts	0x1241, r20	; 0x801241 <mqtt_client+0x212>
   16484:	30 93 42 12 	sts	0x1242, r19	; 0x801242 <mqtt_client+0x213>
   16488:	20 93 43 12 	sts	0x1243, r18	; 0x801243 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
   1648c:	90 93 47 12 	sts	0x1247, r25	; 0x801247 <mqtt_client+0x218>
   16490:	80 93 46 12 	sts	0x1246, r24	; 0x801246 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
   16494:	10 92 45 12 	sts	0x1245, r1	; 0x801245 <mqtt_client+0x216>
   16498:	10 92 44 12 	sts	0x1244, r1	; 0x801244 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
   1649c:	8c ed       	ldi	r24, 0xDC	; 220
   1649e:	91 e9       	ldi	r25, 0x91	; 145
   164a0:	90 93 3d 12 	sts	0x123D, r25	; 0x80123d <mqtt_client+0x20e>
   164a4:	80 93 3c 12 	sts	0x123C, r24	; 0x80123c <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(const char* header)
{
  header_out = header;
   164a8:	86 e2       	ldi	r24, 0x26	; 38
   164aa:	92 e8       	ldi	r25, 0x82	; 130
   164ac:	90 93 b9 0c 	sts	0x0CB9, r25	; 0x800cb9 <header_out+0x1>
   164b0:	80 93 b8 0c 	sts	0x0CB8, r24	; 0x800cb8 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3772
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
   164b4:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   164b8:	6b 01       	movw	r12, r22
   164ba:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3773
      while ((millis() - milis) < 3000 )
   164bc:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   164c0:	6c 19       	sub	r22, r12
   164c2:	7d 09       	sbc	r23, r13
   164c4:	8e 09       	sbc	r24, r14
   164c6:	9f 09       	sbc	r25, r15
   164c8:	68 3b       	cpi	r22, 0xB8	; 184
   164ca:	7b 40       	sbci	r23, 0x0B	; 11
   164cc:	81 05       	cpc	r24, r1
   164ce:	91 05       	cpc	r25, r1
   164d0:	98 f4       	brcc	.+38     	; 0x164f8 <setup+0x1a1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3775
      {
        lastmqttconnect = 0;
   164d2:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <lastmqttconnect>
   164d6:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <lastmqttconnect+0x1>
   164da:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <lastmqttconnect+0x2>
   164de:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <lastmqttconnect+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3776
        mqtt_client.loop();
   164e2:	0e 94 9a d0 	call	0x1a134	; 0x1a134 <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3777
        if (mqtt_reconnect() == 0)
   164e6:	0e 94 10 a0 	call	0x14020	; 0x14020 <mqtt_reconnect()>
   164ea:	81 11       	cpse	r24, r1
   164ec:	e0 cc       	rjmp	.-1600   	; 0x15eae <setup+0x13d4>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   164ee:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   164f2:	8f 7d       	andi	r24, 0xDF	; 223
   164f4:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3785
          break;
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
   164f8:	10 92 85 09 	sts	0x0985, r1	; 0x800985 <lastmqttconnect>
   164fc:	10 92 86 09 	sts	0x0986, r1	; 0x800986 <lastmqttconnect+0x1>
   16500:	10 92 87 09 	sts	0x0987, r1	; 0x800987 <lastmqttconnect+0x2>
   16504:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <lastmqttconnect+0x3>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
   16508:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3786
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }
      lastmqttconnect = 0;
      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
   1650c:	85 ff       	sbrs	r24, 5
   1650e:	d3 cc       	rjmp	.-1626   	; 0x15eb6 <setup+0x13dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3788
      {
        strcpy_P(str1, text_err);
   16510:	6e eb       	ldi	r22, 0xBE	; 190
   16512:	73 e8       	ldi	r23, 0x83	; 131
   16514:	ce 01       	movw	r24, r28
   16516:	88 5b       	subi	r24, 0xB8	; 184
   16518:	9f 4f       	sbci	r25, 0xFF	; 255
   1651a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3789
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
   1651e:	ee 24       	eor	r14, r14
   16520:	ea 94       	dec	r14
   16522:	fe 2c       	mov	r15, r14
   16524:	00 e0       	ldi	r16, 0x00	; 0
   16526:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3794
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16528:	21 e0       	ldi	r18, 0x01	; 1
   1652a:	46 e9       	ldi	r20, 0x96	; 150
   1652c:	50 e0       	ldi	r21, 0x00	; 0
   1652e:	35 cc       	rjmp	.-1942   	; 0x15d9a <setup+0x12c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3815
      scan_rf_net_enable = 2;
      radio.begin();
    }
    ///
    /// inicializace termostatu
    if (init == 13)
   16530:	c8 5c       	subi	r28, 0xC8	; 200
   16532:	de 4f       	sbci	r29, 0xFE	; 254
   16534:	b8 81       	ld	r27, Y
   16536:	c8 53       	subi	r28, 0x38	; 56
   16538:	d1 40       	sbci	r29, 0x01	; 1
   1653a:	bd 30       	cpi	r27, 0x0D	; 13
   1653c:	11 f0       	breq	.+4      	; 0x16542 <setup+0x1a68>
   1653e:	0c 94 a6 a8 	jmp	0x1514c	; 0x1514c <setup+0x672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3817
    {
      strcpy_P(str1, text_pid_regulator);
   16542:	69 ef       	ldi	r22, 0xF9	; 249
   16544:	71 e8       	ldi	r23, 0x81	; 129
   16546:	ce 01       	movw	r24, r28
   16548:	88 5b       	subi	r24, 0xB8	; 184
   1654a:	9f 4f       	sbci	r25, 0xFF	; 255
   1654c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3818
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
   16550:	ee 24       	eor	r14, r14
   16552:	ea 94       	dec	r14
   16554:	fe 2c       	mov	r15, r14
   16556:	00 ee       	ldi	r16, 0xE0	; 224
   16558:	17 e0       	ldi	r17, 0x07	; 7
   1655a:	21 e0       	ldi	r18, 0x01	; 1
   1655c:	44 eb       	ldi	r20, 0xB4	; 180
   1655e:	50 e0       	ldi	r21, 0x00	; 0
   16560:	6e e1       	ldi	r22, 0x1E	; 30
   16562:	70 e0       	ldi	r23, 0x00	; 0
   16564:	ce 01       	movw	r24, r28
   16566:	88 5b       	subi	r24, 0xB8	; 184
   16568:	9f 4f       	sbci	r25, 0xFF	; 255
   1656a:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
   1656e:	aa eb       	ldi	r26, 0xBA	; 186
   16570:	bb e0       	ldi	r27, 0x0B	; 11
   16572:	c5 5c       	subi	r28, 0xC5	; 197
   16574:	de 4f       	sbci	r29, 0xFE	; 254
   16576:	b9 83       	std	Y+1, r27	; 0x01
   16578:	a8 83       	st	Y, r26
   1657a:	cb 53       	subi	r28, 0x3B	; 59
   1657c:	d1 40       	sbci	r29, 0x01	; 1
   1657e:	e2 e9       	ldi	r30, 0x92	; 146
   16580:	fb e0       	ldi	r31, 0x0B	; 11
   16582:	c7 5c       	subi	r28, 0xC7	; 199
   16584:	de 4f       	sbci	r29, 0xFE	; 254
   16586:	f9 83       	std	Y+1, r31	; 0x01
   16588:	e8 83       	st	Y, r30
   1658a:	c9 53       	subi	r28, 0x39	; 57
   1658c:	d1 40       	sbci	r29, 0x01	; 1
   1658e:	a6 ea       	ldi	r26, 0xA6	; 166
   16590:	ca 2e       	mov	r12, r26
   16592:	ab e0       	ldi	r26, 0x0B	; 11
   16594:	da 2e       	mov	r13, r26
   16596:	f1 2c       	mov	r15, r1
   16598:	e1 2c       	mov	r14, r1
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   1659a:	8c e3       	ldi	r24, 0x3C	; 60
   1659c:	90 e0       	ldi	r25, 0x00	; 0
   1659e:	0e 94 0d f3 	call	0x1e61a	; 0x1e61a <malloc>
   165a2:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
   165a4:	c5 5c       	subi	r28, 0xC5	; 197
   165a6:	de 4f       	sbci	r29, 0xFE	; 254
   165a8:	e8 81       	ld	r30, Y
   165aa:	f9 81       	ldd	r31, Y+1	; 0x01
   165ac:	cb 53       	subi	r28, 0x3B	; 59
   165ae:	d1 40       	sbci	r29, 0x01	; 1
   165b0:	dc 01       	movw	r26, r24
   165b2:	5f 96       	adiw	r26, 0x1f	; 31
   165b4:	fc 93       	st	X, r31
   165b6:	ee 93       	st	-X, r30
   165b8:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
   165ba:	c7 5c       	subi	r28, 0xC7	; 199
   165bc:	de 4f       	sbci	r29, 0xFE	; 254
   165be:	88 81       	ld	r24, Y
   165c0:	99 81       	ldd	r25, Y+1	; 0x01
   165c2:	c9 53       	subi	r28, 0x39	; 57
   165c4:	d1 40       	sbci	r29, 0x01	; 1
   165c6:	5d 96       	adiw	r26, 0x1d	; 29
   165c8:	9c 93       	st	X, r25
   165ca:	8e 93       	st	-X, r24
   165cc:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
   165ce:	91 96       	adiw	r26, 0x21	; 33
   165d0:	dc 92       	st	X, r13
   165d2:	ce 92       	st	-X, r12
   165d4:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
   165d6:	da 96       	adiw	r26, 0x3a	; 58
   165d8:	1c 92       	st	X, r1
   165da:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
   165dc:	d2 96       	adiw	r26, 0x32	; 50
   165de:	1d 92       	st	X+, r1
   165e0:	1d 92       	st	X+, r1
   165e2:	1d 92       	st	X+, r1
   165e4:	1c 92       	st	X, r1
   165e6:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
   165e8:	80 e0       	ldi	r24, 0x00	; 0
   165ea:	90 e0       	ldi	r25, 0x00	; 0
   165ec:	af e7       	ldi	r26, 0x7F	; 127
   165ee:	b3 e4       	ldi	r27, 0x43	; 67
   165f0:	f8 01       	movw	r30, r16
   165f2:	86 ab       	std	Z+54, r24	; 0x36
   165f4:	97 ab       	std	Z+55, r25	; 0x37
   165f6:	a0 af       	std	Z+56, r26	; 0x38
   165f8:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
   165fa:	84 e6       	ldi	r24, 0x64	; 100
   165fc:	90 e0       	ldi	r25, 0x00	; 0
   165fe:	a0 e0       	ldi	r26, 0x00	; 0
   16600:	b0 e0       	ldi	r27, 0x00	; 0
   16602:	86 a7       	std	Z+46, r24	; 0x2e
   16604:	97 a7       	std	Z+47, r25	; 0x2f
   16606:	a0 ab       	std	Z+48, r26	; 0x30
   16608:	b1 ab       	std	Z+49, r27	; 0x31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:33

    PID::SetControllerDirection(ControllerDirection);
   1660a:	70 e0       	ldi	r23, 0x00	; 0
   1660c:	60 e0       	ldi	r22, 0x00	; 0
   1660e:	c8 01       	movw	r24, r16
   16610:	0e 94 ad 48 	call	0x915a	; 0x915a <PID::SetControllerDirection(int)>
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   16614:	e1 e0       	ldi	r30, 0x01	; 1
   16616:	f0 e0       	ldi	r31, 0x00	; 0
   16618:	d8 01       	movw	r26, r16
   1661a:	5b 96       	adiw	r26, 0x1b	; 27
   1661c:	fc 93       	st	X, r31
   1661e:	ee 93       	st	-X, r30
   16620:	5a 97       	sbiw	r26, 0x1a	; 26
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
   16622:	f1 e0       	ldi	r31, 0x01	; 1
   16624:	db 96       	adiw	r26, 0x3b	; 59
   16626:	fc 93       	st	X, r31
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
   16628:	80 e0       	ldi	r24, 0x00	; 0
   1662a:	90 e0       	ldi	r25, 0x00	; 0
   1662c:	a0 e0       	ldi	r26, 0x00	; 0
   1662e:	b0 e4       	ldi	r27, 0x40	; 64
   16630:	f8 01       	movw	r30, r16
   16632:	80 83       	st	Z, r24
   16634:	91 83       	std	Z+1, r25	; 0x01
   16636:	a2 83       	std	Z+2, r26	; 0x02
   16638:	b3 83       	std	Z+3, r27	; 0x03
   1663a:	80 e0       	ldi	r24, 0x00	; 0
   1663c:	90 e0       	ldi	r25, 0x00	; 0
   1663e:	a0 ea       	ldi	r26, 0xA0	; 160
   16640:	b0 e4       	ldi	r27, 0x40	; 64
   16642:	84 83       	std	Z+4, r24	; 0x04
   16644:	95 83       	std	Z+5, r25	; 0x05
   16646:	a6 83       	std	Z+6, r26	; 0x06
   16648:	b7 83       	std	Z+7, r27	; 0x07
   1664a:	80 e0       	ldi	r24, 0x00	; 0
   1664c:	90 e0       	ldi	r25, 0x00	; 0
   1664e:	a0 e8       	ldi	r26, 0x80	; 128
   16650:	bf e3       	ldi	r27, 0x3F	; 63
   16652:	80 87       	std	Z+8, r24	; 0x08
   16654:	91 87       	std	Z+9, r25	; 0x09
   16656:	a2 87       	std	Z+10, r26	; 0x0a
   16658:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
   1665a:	66 a5       	ldd	r22, Z+46	; 0x2e
   1665c:	77 a5       	ldd	r23, Z+47	; 0x2f
   1665e:	80 a9       	ldd	r24, Z+48	; 0x30
   16660:	91 a9       	ldd	r25, Z+49	; 0x31
   16662:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   16666:	20 e0       	ldi	r18, 0x00	; 0
   16668:	30 e0       	ldi	r19, 0x00	; 0
   1666a:	4a e7       	ldi	r20, 0x7A	; 122
   1666c:	54 e4       	ldi	r21, 0x44	; 68
   1666e:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
   16672:	4b 01       	movw	r8, r22
   16674:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
   16676:	80 e0       	ldi	r24, 0x00	; 0
   16678:	90 e0       	ldi	r25, 0x00	; 0
   1667a:	a0 e0       	ldi	r26, 0x00	; 0
   1667c:	b0 e4       	ldi	r27, 0x40	; 64
   1667e:	f8 01       	movw	r30, r16
   16680:	84 87       	std	Z+12, r24	; 0x0c
   16682:	95 87       	std	Z+13, r25	; 0x0d
   16684:	a6 87       	std	Z+14, r26	; 0x0e
   16686:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
   16688:	20 e0       	ldi	r18, 0x00	; 0
   1668a:	30 e0       	ldi	r19, 0x00	; 0
   1668c:	40 ea       	ldi	r20, 0xA0	; 160
   1668e:	50 e4       	ldi	r21, 0x40	; 64
   16690:	c5 01       	movw	r24, r10
   16692:	b4 01       	movw	r22, r8
   16694:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
   16698:	1b 01       	movw	r2, r22
   1669a:	2c 01       	movw	r4, r24
   1669c:	d8 01       	movw	r26, r16
   1669e:	50 96       	adiw	r26, 0x10	; 16
   166a0:	2d 92       	st	X+, r2
   166a2:	3d 92       	st	X+, r3
   166a4:	4d 92       	st	X+, r4
   166a6:	5c 92       	st	X, r5
   166a8:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
   166aa:	a5 01       	movw	r20, r10
   166ac:	94 01       	movw	r18, r8
   166ae:	60 e0       	ldi	r22, 0x00	; 0
   166b0:	70 e0       	ldi	r23, 0x00	; 0
   166b2:	80 e8       	ldi	r24, 0x80	; 128
   166b4:	9f e3       	ldi	r25, 0x3F	; 63
   166b6:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
   166ba:	4b 01       	movw	r8, r22
   166bc:	5c 01       	movw	r10, r24
   166be:	f8 01       	movw	r30, r16
   166c0:	84 8a       	std	Z+20, r8	; 0x14
   166c2:	95 8a       	std	Z+21, r9	; 0x15
   166c4:	a6 8a       	std	Z+22, r10	; 0x16
   166c6:	b7 8a       	std	Z+23, r11	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
   166c8:	80 8d       	ldd	r24, Z+24	; 0x18
   166ca:	91 8d       	ldd	r25, Z+25	; 0x19
   166cc:	01 97       	sbiw	r24, 0x01	; 1
   166ce:	11 f5       	brne	.+68     	; 0x16714 <setup+0x1c3a>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
   166d0:	80 e0       	ldi	r24, 0x00	; 0
   166d2:	90 e0       	ldi	r25, 0x00	; 0
   166d4:	a0 e0       	ldi	r26, 0x00	; 0
   166d6:	b0 ec       	ldi	r27, 0xC0	; 192
   166d8:	84 87       	std	Z+12, r24	; 0x0c
   166da:	95 87       	std	Z+13, r25	; 0x0d
   166dc:	a6 87       	std	Z+14, r26	; 0x0e
   166de:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
   166e0:	a2 01       	movw	r20, r4
   166e2:	91 01       	movw	r18, r2
   166e4:	60 e0       	ldi	r22, 0x00	; 0
   166e6:	70 e0       	ldi	r23, 0x00	; 0
   166e8:	cb 01       	movw	r24, r22
   166ea:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
   166ee:	d8 01       	movw	r26, r16
   166f0:	50 96       	adiw	r26, 0x10	; 16
   166f2:	6d 93       	st	X+, r22
   166f4:	7d 93       	st	X+, r23
   166f6:	8d 93       	st	X+, r24
   166f8:	9c 93       	st	X, r25
   166fa:	53 97       	sbiw	r26, 0x13	; 19
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
   166fc:	a5 01       	movw	r20, r10
   166fe:	94 01       	movw	r18, r8
   16700:	60 e0       	ldi	r22, 0x00	; 0
   16702:	70 e0       	ldi	r23, 0x00	; 0
   16704:	cb 01       	movw	r24, r22
   16706:	0e 94 0b f9 	call	0x1f216	; 0x1f216 <__subsf3>
   1670a:	f8 01       	movw	r30, r16
   1670c:	64 8b       	std	Z+20, r22	; 0x14
   1670e:	75 8b       	std	Z+21, r23	; 0x15
   16710:	86 8b       	std	Z+22, r24	; 0x16
   16712:	97 8b       	std	Z+23, r25	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
   16714:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   16718:	28 ee       	ldi	r18, 0xE8	; 232
   1671a:	33 e0       	ldi	r19, 0x03	; 3
   1671c:	40 e0       	ldi	r20, 0x00	; 0
   1671e:	50 e0       	ldi	r21, 0x00	; 0
   16720:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   16724:	f8 01       	movw	r30, r16
   16726:	86 a5       	ldd	r24, Z+46	; 0x2e
   16728:	97 a5       	ldd	r25, Z+47	; 0x2f
   1672a:	a0 a9       	ldd	r26, Z+48	; 0x30
   1672c:	b1 a9       	ldd	r27, Z+49	; 0x31
   1672e:	28 1b       	sub	r18, r24
   16730:	39 0b       	sbc	r19, r25
   16732:	4a 0b       	sbc	r20, r26
   16734:	5b 0b       	sbc	r21, r27
   16736:	d8 01       	movw	r26, r16
   16738:	22 a3       	std	Z+34, r18	; 0x22
   1673a:	33 a3       	std	Z+35, r19	; 0x23
   1673c:	44 a3       	std	Z+36, r20	; 0x24
   1673e:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
   16740:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   16744:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   16748:	ee 0d       	add	r30, r14
   1674a:	ff 1d       	adc	r31, r15
   1674c:	11 83       	std	Z+1, r17	; 0x01
   1674e:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
   16750:	da 96       	adiw	r26, 0x3a	; 58
   16752:	8c 91       	ld	r24, X
   16754:	da 97       	sbiw	r26, 0x3a	; 58
   16756:	81 11       	cpse	r24, r1
   16758:	c1 cc       	rjmp	.-1662   	; 0x160dc <setup+0x1602>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
   1675a:	5e 96       	adiw	r26, 0x1e	; 30
   1675c:	ed 91       	ld	r30, X+
   1675e:	fc 91       	ld	r31, X
   16760:	80 80       	ld	r8, Z
   16762:	91 80       	ldd	r9, Z+1	; 0x01
   16764:	a2 80       	ldd	r10, Z+2	; 0x02
   16766:	b3 80       	ldd	r11, Z+3	; 0x03
   16768:	f8 01       	movw	r30, r16
   1676a:	86 a2       	std	Z+38, r8	; 0x26
   1676c:	97 a2       	std	Z+39, r9	; 0x27
   1676e:	a0 a6       	std	Z+40, r10	; 0x28
   16770:	b1 a6       	std	Z+41, r11	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
   16772:	04 8c       	ldd	r0, Z+28	; 0x1c
   16774:	f5 8d       	ldd	r31, Z+29	; 0x1d
   16776:	e0 2d       	mov	r30, r0
   16778:	80 81       	ld	r24, Z
   1677a:	91 81       	ldd	r25, Z+1	; 0x01
   1677c:	a2 81       	ldd	r26, Z+2	; 0x02
   1677e:	b3 81       	ldd	r27, Z+3	; 0x03
   16780:	f8 01       	movw	r30, r16
   16782:	82 a7       	std	Z+42, r24	; 0x2a
   16784:	93 a7       	std	Z+43, r25	; 0x2b
   16786:	a4 a7       	std	Z+44, r26	; 0x2c
   16788:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
   1678a:	26 a8       	ldd	r2, Z+54	; 0x36
   1678c:	37 a8       	ldd	r3, Z+55	; 0x37
   1678e:	40 ac       	ldd	r4, Z+56	; 0x38
   16790:	51 ac       	ldd	r5, Z+57	; 0x39
   16792:	a2 01       	movw	r20, r4
   16794:	91 01       	movw	r18, r2
   16796:	c5 01       	movw	r24, r10
   16798:	b4 01       	movw	r22, r8
   1679a:	0e 94 20 fa 	call	0x1f440	; 0x1f440 <__gesf2>
   1679e:	18 16       	cp	r1, r24
   167a0:	0c f0       	brlt	.+2      	; 0x167a4 <setup+0x1cca>
   167a2:	8f cc       	rjmp	.-1762   	; 0x160c2 <setup+0x15e8>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
   167a4:	d8 01       	movw	r26, r16
   167a6:	96 96       	adiw	r26, 0x26	; 38
   167a8:	2d 92       	st	X+, r2
   167aa:	3d 92       	st	X+, r3
   167ac:	4d 92       	st	X+, r4
   167ae:	5c 92       	st	X, r5
   167b0:	99 97       	sbiw	r26, 0x29	; 41
   167b2:	94 cc       	rjmp	.-1752   	; 0x160dc <setup+0x1602>

000167b4 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryNextMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1184
  }
}
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   167b4:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   167b8:	2a 30       	cpi	r18, 0x0A	; 10
   167ba:	70 f4       	brcc	.+28     	; 0x167d8 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1186
  {
    MenuHistoryIndex++;
   167bc:	2f 5f       	subi	r18, 0xFF	; 255
   167be:	20 93 19 0d 	sts	0x0D19, r18	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
    MenuHistory[MenuHistoryIndex] = id;
   167c2:	30 e0       	ldi	r19, 0x00	; 0
   167c4:	f9 01       	movw	r30, r18
   167c6:	e1 5f       	subi	r30, 0xF1	; 241
   167c8:	f2 4f       	sbci	r31, 0xF2	; 242
   167ca:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1188
    Global_menu_args1[MenuHistoryIndex] = args1;
   167cc:	2b 5f       	subi	r18, 0xFB	; 251
   167ce:	32 4f       	sbci	r19, 0xF2	; 242
   167d0:	f9 01       	movw	r30, r18
   167d2:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
    MenuPrepareStyle();
   167d4:	0c 94 d5 a4 	jmp	0x149aa	; 0x149aa <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
  }
}
   167d8:	08 95       	ret

000167da <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)>:
_Z19MenuHistoryPrevMenujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1175


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   167da:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   167de:	88 23       	and	r24, r24
   167e0:	29 f0       	breq	.+10     	; 0x167ec <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
  {
    MenuHistoryIndex--;
   167e2:	81 50       	subi	r24, 0x01	; 1
   167e4:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
    MenuPrepareStyle();
   167e8:	0c 94 d5 a4 	jmp	0x149aa	; 0x149aa <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
  }
}
   167ec:	08 95       	ret

000167ee <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:616




bool enable_redraw(uint8_t mask, uint8_t data)
{
   167ee:	30 e0       	ldi	r19, 0x00	; 0
   167f0:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:620
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
   167f2:	e1 e0       	ldi	r30, 0x01	; 1
   167f4:	f0 e0       	ldi	r31, 0x00	; 0
   167f6:	af 01       	movw	r20, r30
   167f8:	02 2e       	mov	r0, r18
   167fa:	01 c0       	rjmp	.+2      	; 0x167fe <enable_redraw(unsigned char, unsigned char)+0x10>
   167fc:	44 0f       	add	r20, r20
   167fe:	0a 94       	dec	r0
   16800:	ea f7       	brpl	.-6      	; 0x167fc <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:621
    if ( (mask & v) != 0 )
   16802:	98 2f       	mov	r25, r24
   16804:	94 23       	and	r25, r20
   16806:	11 f0       	breq	.+4      	; 0x1680c <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:622
      if ( (data & v) != 0)
   16808:	46 23       	and	r20, r22
   1680a:	39 f4       	brne	.+14     	; 0x1681a <enable_redraw(unsigned char, unsigned char)+0x2c>
   1680c:	2f 5f       	subi	r18, 0xFF	; 255
   1680e:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:618


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
   16810:	28 30       	cpi	r18, 0x08	; 8
   16812:	31 05       	cpc	r19, r1
   16814:	81 f7       	brne	.-32     	; 0x167f6 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:617



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
   16816:	80 e0       	ldi	r24, 0x00	; 0
   16818:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:624
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
   1681a:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:629
        break;
      }
  }
  return ret;
}
   1681c:	08 95       	ret

0001681e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   1681e:	fc 01       	movw	r30, r24
   16820:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
   16822:	44 8d       	ldd	r20, Z+28	; 0x1c
   16824:	25 2f       	mov	r18, r21
   16826:	30 e0       	ldi	r19, 0x00	; 0
   16828:	84 2f       	mov	r24, r20
   1682a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   1682c:	82 1b       	sub	r24, r18
   1682e:	93 0b       	sbc	r25, r19
   16830:	54 17       	cp	r21, r20
   16832:	10 f0       	brcs	.+4      	; 0x16838 <HardwareSerial::availableForWrite()+0x1a>
   16834:	cf 96       	adiw	r24, 0x3f	; 63
   16836:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
   16838:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
   1683a:	08 95       	ret

0001683c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
   1683c:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
   1683e:	91 8d       	ldd	r25, Z+25	; 0x19
   16840:	82 8d       	ldd	r24, Z+26	; 0x1a
   16842:	98 17       	cp	r25, r24
   16844:	61 f0       	breq	.+24     	; 0x1685e <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
   16846:	a2 8d       	ldd	r26, Z+26	; 0x1a
   16848:	ae 0f       	add	r26, r30
   1684a:	bf 2f       	mov	r27, r31
   1684c:	b1 1d       	adc	r27, r1
   1684e:	5d 96       	adiw	r26, 0x1d	; 29
   16850:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
   16852:	92 8d       	ldd	r25, Z+26	; 0x1a
   16854:	9f 5f       	subi	r25, 0xFF	; 255
   16856:	9f 73       	andi	r25, 0x3F	; 63
   16858:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
   1685a:	90 e0       	ldi	r25, 0x00	; 0
   1685c:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1685e:	8f ef       	ldi	r24, 0xFF	; 255
   16860:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
   16862:	08 95       	ret

00016864 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
   16864:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
   16866:	91 8d       	ldd	r25, Z+25	; 0x19
   16868:	82 8d       	ldd	r24, Z+26	; 0x1a
   1686a:	98 17       	cp	r25, r24
   1686c:	31 f0       	breq	.+12     	; 0x1687a <HardwareSerial::peek()+0x16>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
   1686e:	82 8d       	ldd	r24, Z+26	; 0x1a
   16870:	e8 0f       	add	r30, r24
   16872:	f1 1d       	adc	r31, r1
   16874:	85 8d       	ldd	r24, Z+29	; 0x1d
   16876:	90 e0       	ldi	r25, 0x00	; 0
   16878:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
   1687a:	8f ef       	ldi	r24, 0xFF	; 255
   1687c:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
   1687e:	08 95       	ret

00016880 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
   16880:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
   16882:	91 8d       	ldd	r25, Z+25	; 0x19
   16884:	22 8d       	ldd	r18, Z+26	; 0x1a
   16886:	89 2f       	mov	r24, r25
   16888:	90 e0       	ldi	r25, 0x00	; 0
   1688a:	80 5c       	subi	r24, 0xC0	; 192
   1688c:	9f 4f       	sbci	r25, 0xFF	; 255
   1688e:	82 1b       	sub	r24, r18
   16890:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
   16892:	8f 73       	andi	r24, 0x3F	; 63
   16894:	99 27       	eor	r25, r25
   16896:	08 95       	ret

00016898 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
   16898:	80 e2       	ldi	r24, 0x20	; 32
   1689a:	96 e5       	ldi	r25, 0x56	; 86
   1689c:	89 2b       	or	r24, r25
   1689e:	49 f0       	breq	.+18     	; 0x168b2 <serialEventRun()+0x1a>
   168a0:	80 e0       	ldi	r24, 0x00	; 0
   168a2:	90 e0       	ldi	r25, 0x00	; 0
   168a4:	89 2b       	or	r24, r25
   168a6:	29 f0       	breq	.+10     	; 0x168b2 <serialEventRun()+0x1a>
   168a8:	0e 94 20 56 	call	0xac40	; 0xac40 <Serial0_available()>
   168ac:	81 11       	cpse	r24, r1
   168ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
   168b2:	80 e0       	ldi	r24, 0x00	; 0
   168b4:	90 e0       	ldi	r25, 0x00	; 0
   168b6:	89 2b       	or	r24, r25
   168b8:	49 f0       	breq	.+18     	; 0x168cc <serialEventRun()+0x34>
   168ba:	80 e0       	ldi	r24, 0x00	; 0
   168bc:	90 e0       	ldi	r25, 0x00	; 0
   168be:	89 2b       	or	r24, r25
   168c0:	29 f0       	breq	.+10     	; 0x168cc <serialEventRun()+0x34>
   168c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
   168c6:	81 11       	cpse	r24, r1
   168c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
   168cc:	08 95       	ret

000168ce <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>:
_ZN13LCDWIKI_TOUCH22TP_Write_Byte_LowSpeedEh.constprop.231():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:104
	LCD_Set_Rotation(r);
	TP_SetBacklight(10);
}


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
   168ce:	0f 93       	push	r16
   168d0:	1f 93       	push	r17
   168d2:	cf 93       	push	r28
   168d4:	df 93       	push	r29
   168d6:	10 e0       	ldi	r17, 0x00	; 0
   168d8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   168da:	c8 2f       	mov	r28, r24
   168dc:	d0 e0       	ldi	r29, 0x00	; 0
   168de:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   168e2:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   168e6:	90 91 b6 0f 	lds	r25, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   168ea:	9e 01       	movw	r18, r28
   168ec:	00 2e       	mov	r0, r16
   168ee:	02 c0       	rjmp	.+4      	; 0x168f4 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x26>
   168f0:	35 95       	asr	r19
   168f2:	27 95       	ror	r18
   168f4:	0a 94       	dec	r0
   168f6:	e2 f7       	brpl	.-8      	; 0x168f0 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x22>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   168f8:	80 81       	ld	r24, Z
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:109
void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
        {
                if(data & (1<< val))
   168fa:	20 ff       	sbrs	r18, 0
   168fc:	31 c0       	rjmp	.+98     	; 0x16960 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x92>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:111
                {
                        TDIN_HIGH;
   168fe:	98 2b       	or	r25, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                }
                else
                {
                        TDIN_LOW;
   16900:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:118
                }

		delay_hus(80);
   16902:	60 e5       	ldi	r22, 0x50	; 80
   16904:	70 e0       	ldi	r23, 0x00	; 0
   16906:	80 e0       	ldi	r24, 0x00	; 0
   16908:	90 e0       	ldi	r25, 0x00	; 0
   1690a:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:119
                TCLK_LOW;
   1690e:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   16912:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   16916:	80 81       	ld	r24, Z
   16918:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1691c:	90 95       	com	r25
   1691e:	98 23       	and	r25, r24
   16920:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
                delay_hus(120);
   16922:	68 e7       	ldi	r22, 0x78	; 120
   16924:	70 e0       	ldi	r23, 0x00	; 0
   16926:	80 e0       	ldi	r24, 0x00	; 0
   16928:	90 e0       	ldi	r25, 0x00	; 0
   1692a:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:121
                TCLK_HIGH;
   1692e:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   16932:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   16936:	80 81       	ld	r24, Z
   16938:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1693c:	89 2b       	or	r24, r25
   1693e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
                delay_hus(120);
   16940:	68 e7       	ldi	r22, 0x78	; 120
   16942:	70 e0       	ldi	r23, 0x00	; 0
   16944:	80 e0       	ldi	r24, 0x00	; 0
   16946:	90 e0       	ldi	r25, 0x00	; 0
   16948:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
   1694c:	0f 5f       	subi	r16, 0xFF	; 255
   1694e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107


void LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(uint8_t data)
{
        uint8_t val = 0;
        while(val < 8)
   16950:	08 30       	cpi	r16, 0x08	; 8
   16952:	11 05       	cpc	r17, r1
   16954:	21 f6       	brne	.-120    	; 0x168de <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x10>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:125
                delay_hus(120);
                TCLK_HIGH;
                delay_hus(120);
                val++;
        }
}
   16956:	df 91       	pop	r29
   16958:	cf 91       	pop	r28
   1695a:	1f 91       	pop	r17
   1695c:	0f 91       	pop	r16
   1695e:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:115
                {
                        TDIN_HIGH;
                }
                else
                {
                        TDIN_LOW;
   16960:	90 95       	com	r25
   16962:	98 23       	and	r25, r24
   16964:	cd cf       	rjmp	.-102    	; 0x16900 <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]+0x32>

00016966 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   16966:	2f 92       	push	r2
   16968:	3f 92       	push	r3
   1696a:	4f 92       	push	r4
   1696c:	5f 92       	push	r5
   1696e:	6f 92       	push	r6
   16970:	7f 92       	push	r7
   16972:	8f 92       	push	r8
   16974:	9f 92       	push	r9
   16976:	af 92       	push	r10
   16978:	bf 92       	push	r11
   1697a:	cf 92       	push	r12
   1697c:	df 92       	push	r13
   1697e:	ef 92       	push	r14
   16980:	ff 92       	push	r15
   16982:	0f 93       	push	r16
   16984:	1f 93       	push	r17
   16986:	cf 93       	push	r28
   16988:	df 93       	push	r29
   1698a:	cd b7       	in	r28, 0x3d	; 61
   1698c:	de b7       	in	r29, 0x3e	; 62
   1698e:	2d 97       	sbiw	r28, 0x0d	; 13
   16990:	0f b6       	in	r0, 0x3f	; 63
   16992:	f8 94       	cli
   16994:	de bf       	out	0x3e, r29	; 62
   16996:	0f be       	out	0x3f, r0	; 63
   16998:	cd bf       	out	0x3d, r28	; 61
   1699a:	fc 01       	movw	r30, r24
   1699c:	a0 81       	ld	r26, Z
   1699e:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   169a0:	cb 01       	movw	r24, r22
   169a2:	8e 50       	subi	r24, 0x0E	; 14
   169a4:	97 42       	sbci	r25, 0x27	; 39
   169a6:	02 97       	sbiw	r24, 0x02	; 2
   169a8:	20 f5       	brcc	.+72     	; 0x169f2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   169aa:	fd 01       	movw	r30, r26
   169ac:	01 90       	ld	r0, Z+
   169ae:	00 20       	and	r0, r0
   169b0:	e9 f7       	brne	.-6      	; 0x169ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x46>
   169b2:	31 97       	sbiw	r30, 0x01	; 1
   169b4:	ea 1b       	sub	r30, r26
   169b6:	fb 0b       	sbc	r31, r27
   169b8:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   169bc:	26 e0       	ldi	r18, 0x06	; 6
   169be:	82 9f       	mul	r24, r18
   169c0:	c0 01       	movw	r24, r0
   169c2:	11 24       	eor	r1, r1
   169c4:	8e 9f       	mul	r24, r30
   169c6:	90 01       	movw	r18, r0
   169c8:	8f 9f       	mul	r24, r31
   169ca:	30 0d       	add	r19, r0
   169cc:	9e 9f       	mul	r25, r30
   169ce:	30 0d       	add	r19, r0
   169d0:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   169d2:	80 91 cb 0f 	lds	r24, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   169d6:	90 91 cc 0f 	lds	r25, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   169da:	82 1b       	sub	r24, r18
   169dc:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   169de:	6e 30       	cpi	r22, 0x0E	; 14
   169e0:	77 42       	sbci	r23, 0x27	; 39
   169e2:	89 f5       	brne	.+98     	; 0x16a46 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   169e4:	bc 01       	movw	r22, r24
   169e6:	97 ff       	sbrs	r25, 7
   169e8:	02 c0       	rjmp	.+4      	; 0x169ee <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x88>
   169ea:	6f 5f       	subi	r22, 0xFF	; 255
   169ec:	7f 4f       	sbci	r23, 0xFF	; 255
   169ee:	75 95       	asr	r23
   169f0:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   169f2:	70 93 bc 0f 	sts	0x0FBC, r23	; 0x800fbc <my_lcd+0x3>
   169f6:	60 93 bb 0f 	sts	0x0FBB, r22	; 0x800fbb <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   169fa:	50 93 be 0f 	sts	0x0FBE, r21	; 0x800fbe <my_lcd+0x5>
   169fe:	40 93 bd 0f 	sts	0x0FBD, r20	; 0x800fbd <my_lcd+0x4>
   16a02:	be 83       	std	Y+6, r27	; 0x06
   16a04:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   16a06:	ed 81       	ldd	r30, Y+5	; 0x05
   16a08:	fe 81       	ldd	r31, Y+6	; 0x06
   16a0a:	91 91       	ld	r25, Z+
   16a0c:	fe 83       	std	Y+6, r31	; 0x06
   16a0e:	ed 83       	std	Y+5, r30	; 0x05
   16a10:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   16a12:	99 23       	and	r25, r25
   16a14:	09 f4       	brne	.+2      	; 0x16a18 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xb2>
   16a16:	dd c0       	rjmp	.+442    	; 0x16bd2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   16a18:	9a 30       	cpi	r25, 0x0A	; 10
   16a1a:	c9 f4       	brne	.+50     	; 0x16a4e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   16a1c:	80 91 c5 0f 	lds	r24, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   16a20:	f8 e0       	ldi	r31, 0x08	; 8
   16a22:	8f 9f       	mul	r24, r31
   16a24:	c0 01       	movw	r24, r0
   16a26:	11 24       	eor	r1, r1
   16a28:	20 91 bd 0f 	lds	r18, 0x0FBD	; 0x800fbd <my_lcd+0x4>
   16a2c:	30 91 be 0f 	lds	r19, 0x0FBE	; 0x800fbe <my_lcd+0x5>
   16a30:	82 0f       	add	r24, r18
   16a32:	93 1f       	adc	r25, r19
   16a34:	90 93 be 0f 	sts	0x0FBE, r25	; 0x800fbe <my_lcd+0x5>
   16a38:	80 93 bd 0f 	sts	0x0FBD, r24	; 0x800fbd <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   16a3c:	10 92 bc 0f 	sts	0x0FBC, r1	; 0x800fbc <my_lcd+0x3>
   16a40:	10 92 bb 0f 	sts	0x0FBB, r1	; 0x800fbb <my_lcd+0x2>
   16a44:	e0 cf       	rjmp	.-64     	; 0x16a06 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   16a46:	bc 01       	movw	r22, r24
   16a48:	61 50       	subi	r22, 0x01	; 1
   16a4a:	71 09       	sbc	r23, r1
   16a4c:	d2 cf       	rjmp	.-92     	; 0x169f2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   16a4e:	9d 30       	cpi	r25, 0x0D	; 13
   16a50:	d1 f2       	breq	.-76     	; 0x16a06 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16a52:	20 91 bb 0f 	lds	r18, 0x0FBB	; 0x800fbb <my_lcd+0x2>
   16a56:	30 91 bc 0f 	lds	r19, 0x0FBC	; 0x800fbc <my_lcd+0x3>
   16a5a:	39 87       	std	Y+9, r19	; 0x09
   16a5c:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   16a5e:	20 91 cb 0f 	lds	r18, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   16a62:	30 91 cc 0f 	lds	r19, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   16a66:	48 85       	ldd	r20, Y+8	; 0x08
   16a68:	59 85       	ldd	r21, Y+9	; 0x09
   16a6a:	42 17       	cp	r20, r18
   16a6c:	53 07       	cpc	r21, r19
   16a6e:	0c f0       	brlt	.+2      	; 0x16a72 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x10c>
   16a70:	88 c0       	rjmp	.+272    	; 0x16b82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16a72:	60 90 bd 0f 	lds	r6, 0x0FBD	; 0x800fbd <my_lcd+0x4>
   16a76:	70 90 be 0f 	lds	r7, 0x0FBE	; 0x800fbe <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   16a7a:	20 91 cd 0f 	lds	r18, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   16a7e:	30 91 ce 0f 	lds	r19, 0x0FCE	; 0x800fce <my_lcd+0x15>
   16a82:	62 16       	cp	r6, r18
   16a84:	73 06       	cpc	r7, r19
   16a86:	0c f0       	brlt	.+2      	; 0x16a8a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x124>
   16a88:	7c c0       	rjmp	.+248    	; 0x16b82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16a8a:	50 91 c5 0f 	lds	r21, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   16a8e:	5a 83       	std	Y+2, r21	; 0x02
   16a90:	c5 2e       	mov	r12, r21
   16a92:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   16a94:	28 85       	ldd	r18, Y+8	; 0x08
   16a96:	39 85       	ldd	r19, Y+9	; 0x09
   16a98:	e6 e0       	ldi	r30, 0x06	; 6
   16a9a:	5e 9f       	mul	r21, r30
   16a9c:	20 0d       	add	r18, r0
   16a9e:	31 1d       	adc	r19, r1
   16aa0:	11 24       	eor	r1, r1
   16aa2:	12 16       	cp	r1, r18
   16aa4:	13 06       	cpc	r1, r19
   16aa6:	0c f0       	brlt	.+2      	; 0x16aaa <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x144>
   16aa8:	6c c0       	rjmp	.+216    	; 0x16b82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   16aaa:	96 01       	movw	r18, r12
   16aac:	93 e0       	ldi	r25, 0x03	; 3
   16aae:	22 0f       	add	r18, r18
   16ab0:	33 1f       	adc	r19, r19
   16ab2:	9a 95       	dec	r25
   16ab4:	e1 f7       	brne	.-8      	; 0x16aae <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x148>
   16ab6:	26 0d       	add	r18, r6
   16ab8:	37 1d       	adc	r19, r7
   16aba:	12 16       	cp	r1, r18
   16abc:	13 06       	cpc	r1, r19
   16abe:	0c f0       	brlt	.+2      	; 0x16ac2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x15c>
   16ac0:	60 c0       	rjmp	.+192    	; 0x16b82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   16ac2:	80 3b       	cpi	r24, 0xB0	; 176
   16ac4:	08 f0       	brcs	.+2      	; 0x16ac8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   16ac6:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   16ac8:	f0 91 c6 0f 	lds	r31, 0x0FC6	; 0x800fc6 <my_lcd+0xd>
   16acc:	ff 83       	std	Y+7, r31	; 0x07
   16ace:	20 90 c1 0f 	lds	r2, 0x0FC1	; 0x800fc1 <my_lcd+0x8>
   16ad2:	30 90 c2 0f 	lds	r3, 0x0FC2	; 0x800fc2 <my_lcd+0x9>
   16ad6:	20 91 bf 0f 	lds	r18, 0x0FBF	; 0x800fbf <my_lcd+0x6>
   16ada:	30 91 c0 0f 	lds	r19, 0x0FC0	; 0x800fc0 <my_lcd+0x7>
   16ade:	3c 83       	std	Y+4, r19	; 0x04
   16ae0:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   16ae2:	48 85       	ldd	r20, Y+8	; 0x08
   16ae4:	59 85       	ldd	r21, Y+9	; 0x09
   16ae6:	5d 87       	std	Y+13, r21	; 0x0d
   16ae8:	4c 87       	std	Y+12, r20	; 0x0c
   16aea:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   16aec:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   16aee:	24 e6       	ldi	r18, 0x64	; 100
   16af0:	38 e8       	ldi	r19, 0x88	; 136
   16af2:	24 1b       	sub	r18, r20
   16af4:	35 0b       	sbc	r19, r21
   16af6:	f9 01       	movw	r30, r18
   16af8:	45 e0       	ldi	r20, 0x05	; 5
   16afa:	84 9f       	mul	r24, r20
   16afc:	e0 0d       	add	r30, r0
   16afe:	f1 1d       	adc	r31, r1
   16b00:	11 24       	eor	r1, r1
   16b02:	fb 87       	std	Y+11, r31	; 0x0b
   16b04:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   16b06:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   16b08:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   16b0a:	55 30       	cpi	r21, 0x05	; 5
   16b0c:	29 f0       	breq	.+10     	; 0x16b18 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   16b0e:	ea 85       	ldd	r30, Y+10	; 0x0a
   16b10:	fb 85       	ldd	r31, Y+11	; 0x0b
   16b12:	ea 0d       	add	r30, r10
   16b14:	fb 1d       	adc	r31, r11
   16b16:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   16b18:	23 01       	movw	r4, r6
   16b1a:	91 2c       	mov	r9, r1
   16b1c:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   16b1e:	8e 2f       	mov	r24, r30
   16b20:	90 e0       	ldi	r25, 0x00	; 0
   16b22:	99 87       	std	Y+9, r25	; 0x09
   16b24:	88 87       	std	Y+8, r24	; 0x08
   16b26:	e0 ff       	sbrs	r30, 0
   16b28:	3c c0       	rjmp	.+120    	; 0x16ba2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   16b2a:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   16b2c:	2b 81       	ldd	r18, Y+3	; 0x03
   16b2e:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   16b30:	eb 80       	ldd	r14, Y+3	; 0x03
   16b32:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   16b34:	91 30       	cpi	r25, 0x01	; 1
   16b36:	09 f0       	breq	.+2      	; 0x16b3a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
   16b38:	42 c0       	rjmp	.+132    	; 0x16bbe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   16b3a:	a3 01       	movw	r20, r6
   16b3c:	48 0d       	add	r20, r8
   16b3e:	59 1d       	adc	r21, r9
   16b40:	b5 01       	movw	r22, r10
   16b42:	89 eb       	ldi	r24, 0xB9	; 185
   16b44:	9f e0       	ldi	r25, 0x0F	; 15
   16b46:	0e 94 3b 4b 	call	0x9676	; 0x9676 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   16b4a:	e8 85       	ldd	r30, Y+8	; 0x08
   16b4c:	f9 85       	ldd	r31, Y+9	; 0x09
   16b4e:	f5 95       	asr	r31
   16b50:	e7 95       	ror	r30
   16b52:	3f ef       	ldi	r19, 0xFF	; 255
   16b54:	83 1a       	sub	r8, r19
   16b56:	93 0a       	sbc	r9, r19
   16b58:	4c 0c       	add	r4, r12
   16b5a:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   16b5c:	48 e0       	ldi	r20, 0x08	; 8
   16b5e:	84 16       	cp	r8, r20
   16b60:	91 04       	cpc	r9, r1
   16b62:	e9 f6       	brne	.-70     	; 0x16b1e <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1b8>
   16b64:	5f ef       	ldi	r21, 0xFF	; 255
   16b66:	a5 1a       	sub	r10, r21
   16b68:	b5 0a       	sbc	r11, r21
   16b6a:	8c 85       	ldd	r24, Y+12	; 0x0c
   16b6c:	9d 85       	ldd	r25, Y+13	; 0x0d
   16b6e:	8c 0d       	add	r24, r12
   16b70:	9d 1d       	adc	r25, r13
   16b72:	9d 87       	std	Y+13, r25	; 0x0d
   16b74:	8c 87       	std	Y+12, r24	; 0x0c
   16b76:	99 81       	ldd	r25, Y+1	; 0x01
   16b78:	9f 5f       	subi	r25, 0xFF	; 255
   16b7a:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   16b7c:	96 30       	cpi	r25, 0x06	; 6
   16b7e:	09 f0       	breq	.+2      	; 0x16b82 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x21c>
   16b80:	c2 cf       	rjmp	.-124    	; 0x16b06 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   16b82:	20 91 c5 0f 	lds	r18, 0x0FC5	; 0x800fc5 <my_lcd+0xc>
   16b86:	80 91 bb 0f 	lds	r24, 0x0FBB	; 0x800fbb <my_lcd+0x2>
   16b8a:	90 91 bc 0f 	lds	r25, 0x0FBC	; 0x800fbc <my_lcd+0x3>
   16b8e:	e6 e0       	ldi	r30, 0x06	; 6
   16b90:	2e 9f       	mul	r18, r30
   16b92:	80 0d       	add	r24, r0
   16b94:	91 1d       	adc	r25, r1
   16b96:	11 24       	eor	r1, r1
   16b98:	90 93 bc 0f 	sts	0x0FBC, r25	; 0x800fbc <my_lcd+0x3>
   16b9c:	80 93 bb 0f 	sts	0x0FBB, r24	; 0x800fbb <my_lcd+0x2>
   16ba0:	32 cf       	rjmp	.-412    	; 0x16a06 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   16ba2:	eb 81       	ldd	r30, Y+3	; 0x03
   16ba4:	fc 81       	ldd	r31, Y+4	; 0x04
   16ba6:	2e 16       	cp	r2, r30
   16ba8:	3f 06       	cpc	r3, r31
   16baa:	79 f2       	breq	.-98     	; 0x16b4a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   16bac:	ff 81       	ldd	r31, Y+7	; 0x07
   16bae:	f1 11       	cpse	r31, r1
   16bb0:	cc cf       	rjmp	.-104    	; 0x16b4a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   16bb2:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   16bb4:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   16bb6:	21 30       	cpi	r18, 0x01	; 1
   16bb8:	11 f4       	brne	.+4      	; 0x16bbe <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   16bba:	91 01       	movw	r18, r2
   16bbc:	be cf       	rjmp	.-132    	; 0x16b3a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   16bbe:	86 01       	movw	r16, r12
   16bc0:	96 01       	movw	r18, r12
   16bc2:	a2 01       	movw	r20, r4
   16bc4:	6c 85       	ldd	r22, Y+12	; 0x0c
   16bc6:	7d 85       	ldd	r23, Y+13	; 0x0d
   16bc8:	89 eb       	ldi	r24, 0xB9	; 185
   16bca:	9f e0       	ldi	r25, 0x0F	; 15
   16bcc:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   16bd0:	bc cf       	rjmp	.-136    	; 0x16b4a <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.174():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   16bd2:	2d 96       	adiw	r28, 0x0d	; 13
   16bd4:	0f b6       	in	r0, 0x3f	; 63
   16bd6:	f8 94       	cli
   16bd8:	de bf       	out	0x3e, r29	; 62
   16bda:	0f be       	out	0x3f, r0	; 63
   16bdc:	cd bf       	out	0x3d, r28	; 61
   16bde:	df 91       	pop	r29
   16be0:	cf 91       	pop	r28
   16be2:	1f 91       	pop	r17
   16be4:	0f 91       	pop	r16
   16be6:	ff 90       	pop	r15
   16be8:	ef 90       	pop	r14
   16bea:	df 90       	pop	r13
   16bec:	cf 90       	pop	r12
   16bee:	bf 90       	pop	r11
   16bf0:	af 90       	pop	r10
   16bf2:	9f 90       	pop	r9
   16bf4:	8f 90       	pop	r8
   16bf6:	7f 90       	pop	r7
   16bf8:	6f 90       	pop	r6
   16bfa:	5f 90       	pop	r5
   16bfc:	4f 90       	pop	r4
   16bfe:	3f 90       	pop	r3
   16c00:	2f 90       	pop	r2
   16c02:	08 95       	ret

00016c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>:
_ZN12PubSubClient8readByteEPh.constprop.160():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   16c04:	cf 92       	push	r12
   16c06:	df 92       	push	r13
   16c08:	ef 92       	push	r14
   16c0a:	ff 92       	push	r15
   16c0c:	cf 93       	push	r28
   16c0e:	df 93       	push	r29
   16c10:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   16c12:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   16c16:	6b 01       	movw	r12, r22
   16c18:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   16c1a:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   16c1e:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   16c22:	dc 01       	movw	r26, r24
   16c24:	ed 91       	ld	r30, X+
   16c26:	fc 91       	ld	r31, X
   16c28:	00 84       	ldd	r0, Z+8	; 0x08
   16c2a:	f1 85       	ldd	r31, Z+9	; 0x09
   16c2c:	e0 2d       	mov	r30, r0
   16c2e:	19 95       	eicall
   16c30:	89 2b       	or	r24, r25
   16c32:	69 f4       	brne	.+26     	; 0x16c4e <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   16c34:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 10)){
   16c38:	6c 19       	sub	r22, r12
   16c3a:	7d 09       	sbc	r23, r13
   16c3c:	8e 09       	sbc	r24, r14
   16c3e:	9f 09       	sbc	r25, r15
   16c40:	62 33       	cpi	r22, 0x32	; 50
   16c42:	71 05       	cpc	r23, r1
   16c44:	81 05       	cpc	r24, r1
   16c46:	91 05       	cpc	r25, r1
   16c48:	40 f3       	brcs	.-48     	; 0x16c1a <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   16c4a:	80 e0       	ldi	r24, 0x00	; 0
   16c4c:	0d c0       	rjmp	.+26     	; 0x16c68 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   16c4e:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   16c52:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   16c56:	dc 01       	movw	r26, r24
   16c58:	ed 91       	ld	r30, X+
   16c5a:	fc 91       	ld	r31, X
   16c5c:	02 84       	ldd	r0, Z+10	; 0x0a
   16c5e:	f3 85       	ldd	r31, Z+11	; 0x0b
   16c60:	e0 2d       	mov	r30, r0
   16c62:	19 95       	eicall
   16c64:	88 83       	st	Y, r24
   16c66:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   16c68:	df 91       	pop	r29
   16c6a:	cf 91       	pop	r28
   16c6c:	ff 90       	pop	r15
   16c6e:	ef 90       	pop	r14
   16c70:	df 90       	pop	r13
   16c72:	cf 90       	pop	r12
   16c74:	08 95       	ret

00016c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>:
_ZN13LCDWIKI_TOUCH15TP_SetBacklightEh.constprop.230():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	y0=0;
	x=0xffff;
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_SetBacklight(uint8_t ibacklight)
   16c76:	1f 93       	push	r17
   16c78:	cf 93       	push	r28
   16c7a:	df 93       	push	r29
   16c7c:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:59
{
backlight = ibacklight;
   16c7e:	c6 e9       	ldi	r28, 0x96	; 150
   16c80:	df e0       	ldi	r29, 0x0F	; 15
   16c82:	8f 87       	std	Y+15, r24	; 0x0f
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:60
TCS_LOW;
   16c84:	e9 89       	ldd	r30, Y+17	; 0x11
   16c86:	fa 89       	ldd	r31, Y+18	; 0x12
   16c88:	90 81       	ld	r25, Z
   16c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
   16c8c:	80 95       	com	r24
   16c8e:	89 23       	and	r24, r25
   16c90:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:61
SDCS_LOW;
   16c92:	eb 8d       	ldd	r30, Y+27	; 0x1b
   16c94:	fc 8d       	ldd	r31, Y+28	; 0x1c
   16c96:	90 81       	ld	r25, Z
   16c98:	8a a1       	ldd	r24, Y+34	; 0x22
   16c9a:	80 95       	com	r24
   16c9c:	89 23       	and	r24, r25
   16c9e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:62
delay_hus(200);
   16ca0:	68 ec       	ldi	r22, 0xC8	; 200
   16ca2:	70 e0       	ldi	r23, 0x00	; 0
   16ca4:	80 e0       	ldi	r24, 0x00	; 0
   16ca6:	90 e0       	ldi	r25, 0x00	; 0
   16ca8:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
TCS_HIGH;
   16cac:	e9 89       	ldd	r30, Y+17	; 0x11
   16cae:	fa 89       	ldd	r31, Y+18	; 0x12
   16cb0:	80 81       	ld	r24, Z
   16cb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   16cb4:	89 2b       	or	r24, r25
   16cb6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
SDCS_HIGH;
   16cb8:	eb 8d       	ldd	r30, Y+27	; 0x1b
   16cba:	fc 8d       	ldd	r31, Y+28	; 0x1c
   16cbc:	80 81       	ld	r24, Z
   16cbe:	9a a1       	ldd	r25, Y+34	; 0x22
   16cc0:	89 2b       	or	r24, r25
   16cc2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:65
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
   16cc4:	85 e5       	ldi	r24, 0x55	; 85
   16cc6:	0e 94 67 b4 	call	0x168ce	; 0x168ce <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
TP_Write_Byte_LowSpeed(ibacklight);
   16cca:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:67
}
   16ccc:	df 91       	pop	r29
   16cce:	cf 91       	pop	r28
   16cd0:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_BACKLIGHT);
TP_Write_Byte_LowSpeed(ibacklight);
   16cd2:	0c 94 67 b4 	jmp	0x168ce	; 0x168ce <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

00016cd6 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.229():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   16cd6:	ef 92       	push	r14
   16cd8:	ff 92       	push	r15
   16cda:	0f 93       	push	r16
   16cdc:	1f 93       	push	r17
   16cde:	cf 93       	push	r28
   16ce0:	df 93       	push	r29
   16ce2:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   16ce4:	ea 01       	movw	r28, r20
   16ce6:	c8 1b       	sub	r28, r24
   16ce8:	d9 0b       	sbc	r29, r25
   16cea:	9e 01       	movw	r18, r28
   16cec:	2f 5f       	subi	r18, 0xFF	; 255
   16cee:	3f 4f       	sbci	r19, 0xFF	; 255
   16cf0:	df 01       	movw	r26, r30
   16cf2:	a6 1b       	sub	r26, r22
   16cf4:	b7 0b       	sbc	r27, r23
   16cf6:	8d 01       	movw	r16, r26
   16cf8:	0f 5f       	subi	r16, 0xFF	; 255
   16cfa:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   16cfc:	37 ff       	sbrs	r19, 7
   16cfe:	04 c0       	rjmp	.+8      	; 0x16d08 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   16d00:	9e 01       	movw	r18, r28
   16d02:	20 95       	com	r18
   16d04:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   16d06:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   16d08:	17 ff       	sbrs	r17, 7
   16d0a:	04 c0       	rjmp	.+8      	; 0x16d14 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.229]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   16d0c:	8d 01       	movw	r16, r26
   16d0e:	00 95       	com	r16
   16d10:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   16d12:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   16d14:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   16d18:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   16d1c:	ab 01       	movw	r20, r22
   16d1e:	bc 01       	movw	r22, r24
   16d20:	89 eb       	ldi	r24, 0xB9	; 185
   16d22:	9f e0       	ldi	r25, 0x0F	; 15
   16d24:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   16d28:	df 91       	pop	r29
   16d2a:	cf 91       	pop	r28
   16d2c:	1f 91       	pop	r17
   16d2e:	0f 91       	pop	r16
   16d30:	ff 90       	pop	r15
   16d32:	ef 90       	pop	r14
   16d34:	08 95       	ret

00016d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.226():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   16d36:	ef 92       	push	r14
   16d38:	ff 92       	push	r15
   16d3a:	0f 93       	push	r16
   16d3c:	1f 93       	push	r17
   16d3e:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   16d40:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   16d44:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   16d48:	01 e0       	ldi	r16, 0x01	; 1
   16d4a:	10 e0       	ldi	r17, 0x00	; 0
   16d4c:	ab 01       	movw	r20, r22
   16d4e:	bc 01       	movw	r22, r24
   16d50:	89 eb       	ldi	r24, 0xB9	; 185
   16d52:	9f e0       	ldi	r25, 0x0F	; 15
   16d54:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   16d58:	1f 91       	pop	r17
   16d5a:	0f 91       	pop	r16
   16d5c:	ff 90       	pop	r15
   16d5e:	ef 90       	pop	r14
   16d60:	08 95       	ret

00016d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.225():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   16d62:	8f 92       	push	r8
   16d64:	9f 92       	push	r9
   16d66:	af 92       	push	r10
   16d68:	bf 92       	push	r11
   16d6a:	cf 92       	push	r12
   16d6c:	df 92       	push	r13
   16d6e:	ef 92       	push	r14
   16d70:	ff 92       	push	r15
   16d72:	0f 93       	push	r16
   16d74:	1f 93       	push	r17
   16d76:	cf 93       	push	r28
   16d78:	df 93       	push	r29
   16d7a:	6c 01       	movw	r12, r24
   16d7c:	eb 01       	movw	r28, r22
   16d7e:	4a 01       	movw	r8, r20
   16d80:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   16d82:	9a 01       	movw	r18, r20
   16d84:	28 1b       	sub	r18, r24
   16d86:	39 0b       	sbc	r19, r25
   16d88:	89 01       	movw	r16, r18
   16d8a:	0f 5f       	subi	r16, 0xFF	; 255
   16d8c:	1f 4f       	sbci	r17, 0xFF	; 255
   16d8e:	c7 01       	movw	r24, r14
   16d90:	86 1b       	sub	r24, r22
   16d92:	97 0b       	sbc	r25, r23
   16d94:	5c 01       	movw	r10, r24
   16d96:	4f ef       	ldi	r20, 0xFF	; 255
   16d98:	a4 1a       	sub	r10, r20
   16d9a:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   16d9c:	17 ff       	sbrs	r17, 7
   16d9e:	04 c0       	rjmp	.+8      	; 0x16da8 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   16da0:	89 01       	movw	r16, r18
   16da2:	00 95       	com	r16
   16da4:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   16da6:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   16da8:	b7 fe       	sbrs	r11, 7
   16daa:	04 c0       	rjmp	.+8      	; 0x16db4 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   16dac:	5c 01       	movw	r10, r24
   16dae:	a0 94       	com	r10
   16db0:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   16db2:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   16db4:	a8 01       	movw	r20, r16
   16db6:	be 01       	movw	r22, r28
   16db8:	c6 01       	movw	r24, r12
   16dba:	0e 94 9b b6 	call	0x16d36	; 0x16d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   16dbe:	a8 01       	movw	r20, r16
   16dc0:	b7 01       	movw	r22, r14
   16dc2:	c6 01       	movw	r24, r12
   16dc4:	0e 94 9b b6 	call	0x16d36	; 0x16d36 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.226]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   16dc8:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   16dcc:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   16dd0:	85 01       	movw	r16, r10
   16dd2:	21 e0       	ldi	r18, 0x01	; 1
   16dd4:	30 e0       	ldi	r19, 0x00	; 0
   16dd6:	ae 01       	movw	r20, r28
   16dd8:	b6 01       	movw	r22, r12
   16dda:	89 eb       	ldi	r24, 0xB9	; 185
   16ddc:	9f e0       	ldi	r25, 0x0F	; 15
   16dde:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   16de2:	e0 90 c3 0f 	lds	r14, 0x0FC3	; 0x800fc3 <my_lcd+0xa>
   16de6:	f0 90 c4 0f 	lds	r15, 0x0FC4	; 0x800fc4 <my_lcd+0xb>
   16dea:	21 e0       	ldi	r18, 0x01	; 1
   16dec:	30 e0       	ldi	r19, 0x00	; 0
   16dee:	ae 01       	movw	r20, r28
   16df0:	b4 01       	movw	r22, r8
   16df2:	89 eb       	ldi	r24, 0xB9	; 185
   16df4:	9f e0       	ldi	r25, 0x0F	; 15
   16df6:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.225():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   16dfa:	df 91       	pop	r29
   16dfc:	cf 91       	pop	r28
   16dfe:	1f 91       	pop	r17
   16e00:	0f 91       	pop	r16
   16e02:	ff 90       	pop	r15
   16e04:	ef 90       	pop	r14
   16e06:	df 90       	pop	r13
   16e08:	cf 90       	pop	r12
   16e0a:	bf 90       	pop	r11
   16e0c:	af 90       	pop	r10
   16e0e:	9f 90       	pop	r9
   16e10:	8f 90       	pop	r8
   16e12:	08 95       	ret

00016e14 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.222():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   16e14:	cf 92       	push	r12
   16e16:	df 92       	push	r13
   16e18:	ef 92       	push	r14
   16e1a:	ff 92       	push	r15
   16e1c:	6b 01       	movw	r12, r22
   16e1e:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   16e20:	80 91 7e 0e 	lds	r24, 0x0E7E	; 0x800e7e <SRAM+0x4>
   16e24:	90 91 7f 0e 	lds	r25, 0x0E7F	; 0x800e7f <SRAM+0x5>
   16e28:	a0 91 80 0e 	lds	r26, 0x0E80	; 0x800e80 <SRAM+0x6>
   16e2c:	b0 91 81 0e 	lds	r27, 0x0E81	; 0x800e81 <SRAM+0x7>
   16e30:	01 97       	sbiw	r24, 0x01	; 1
   16e32:	a1 40       	sbci	r26, 0x01	; 1
   16e34:	b1 05       	cpc	r27, r1
   16e36:	48 f0       	brcs	.+18     	; 0x16e4a <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   16e38:	b7 01       	movw	r22, r14
   16e3a:	88 27       	eor	r24, r24
   16e3c:	99 27       	eor	r25, r25
   16e3e:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16e42:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16e46:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   16e4a:	99 27       	eor	r25, r25
   16e4c:	8f 2d       	mov	r24, r15
   16e4e:	7e 2d       	mov	r23, r14
   16e50:	6d 2d       	mov	r22, r13
   16e52:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16e56:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16e5a:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   16e5e:	6c 2d       	mov	r22, r12
   16e60:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16e64:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   16e68:	ff 90       	pop	r15
   16e6a:	ef 90       	pop	r14
   16e6c:	df 90       	pop	r13
   16e6e:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   16e70:	0c 94 65 8a 	jmp	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>

00016e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   16e74:	cf 92       	push	r12
   16e76:	df 92       	push	r13
   16e78:	ef 92       	push	r14
   16e7a:	ff 92       	push	r15
   16e7c:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   16e7e:	c0 90 7e 0e 	lds	r12, 0x0E7E	; 0x800e7e <SRAM+0x4>
   16e82:	d0 90 7f 0e 	lds	r13, 0x0E7F	; 0x800e7f <SRAM+0x5>
   16e86:	e0 90 80 0e 	lds	r14, 0x0E80	; 0x800e80 <SRAM+0x6>
   16e8a:	f0 90 81 0e 	lds	r15, 0x0E81	; 0x800e81 <SRAM+0x7>
   16e8e:	6c 15       	cp	r22, r12
   16e90:	7d 05       	cpc	r23, r13
   16e92:	8e 05       	cpc	r24, r14
   16e94:	9f 05       	cpc	r25, r15
   16e96:	38 f5       	brcc	.+78     	; 0x16ee6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x72>
   16e98:	c4 2f       	mov	r28, r20
   16e9a:	6b 01       	movw	r12, r22
   16e9c:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   16e9e:	60 e0       	ldi	r22, 0x00	; 0
   16ea0:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   16ea4:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   16ea8:	62 e0       	ldi	r22, 0x02	; 2
   16eaa:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16eae:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16eb2:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   16eb6:	c7 01       	movw	r24, r14
   16eb8:	b6 01       	movw	r22, r12
   16eba:	0e 94 0a b7 	call	0x16e14	; 0x16e14 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   16ebe:	6c 2f       	mov	r22, r28
   16ec0:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16ec4:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16ec8:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   16ecc:	61 e0       	ldi	r22, 0x01	; 1
   16ece:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   16ed2:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
   16ed6:	81 e0       	ldi	r24, 0x01	; 1
   16ed8:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.218():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   16eda:	cf 91       	pop	r28
   16edc:	ff 90       	pop	r15
   16ede:	ef 90       	pop	r14
   16ee0:	df 90       	pop	r13
   16ee2:	cf 90       	pop	r12
   16ee4:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   16ee6:	90 e0       	ldi	r25, 0x00	; 0
   16ee8:	80 e0       	ldi	r24, 0x00	; 0
   16eea:	f7 cf       	rjmp	.-18     	; 0x16eda <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]+0x66>

00016eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>:
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   16eec:	cf 92       	push	r12
   16eee:	df 92       	push	r13
   16ef0:	ef 92       	push	r14
   16ef2:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   16ef4:	c0 90 7e 0e 	lds	r12, 0x0E7E	; 0x800e7e <SRAM+0x4>
   16ef8:	d0 90 7f 0e 	lds	r13, 0x0E7F	; 0x800e7f <SRAM+0x5>
   16efc:	e0 90 80 0e 	lds	r14, 0x0E80	; 0x800e80 <SRAM+0x6>
   16f00:	f0 90 81 0e 	lds	r15, 0x0E81	; 0x800e81 <SRAM+0x7>
   16f04:	6c 15       	cp	r22, r12
   16f06:	7d 05       	cpc	r23, r13
   16f08:	8e 05       	cpc	r24, r14
   16f0a:	9f 05       	cpc	r25, r15
   16f0c:	28 f5       	brcc	.+74     	; 0x16f58 <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x6c>
   16f0e:	6b 01       	movw	r12, r22
   16f10:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   16f12:	60 e0       	ldi	r22, 0x00	; 0
   16f14:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   16f18:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   16f1c:	63 e0       	ldi	r22, 0x03	; 3
   16f1e:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16f22:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16f26:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   16f2a:	c7 01       	movw	r24, r14
   16f2c:	b6 01       	movw	r22, r12
   16f2e:	0e 94 0a b7 	call	0x16e14	; 0x16e14 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.222]>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   16f32:	6f ef       	ldi	r22, 0xFF	; 255
   16f34:	80 91 7a 0e 	lds	r24, 0x0E7A	; 0x800e7a <SRAM>
   16f38:	90 91 7b 0e 	lds	r25, 0x0E7B	; 0x800e7b <SRAM+0x1>
   16f3c:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
   16f40:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   16f42:	61 e0       	ldi	r22, 0x01	; 1
   16f44:	80 91 82 0e 	lds	r24, 0x0E82	; 0x800e82 <SRAM+0x8>
   16f48:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.216():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   16f4c:	8f 2d       	mov	r24, r15
   16f4e:	ff 90       	pop	r15
   16f50:	ef 90       	pop	r14
   16f52:	df 90       	pop	r13
   16f54:	cf 90       	pop	r12
   16f56:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   16f58:	f1 2c       	mov	r15, r1
   16f5a:	f8 cf       	rjmp	.-16     	; 0x16f4c <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]+0x60>

00016f5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.214():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   16f5c:	cf 93       	push	r28
   16f5e:	df 93       	push	r29
   16f60:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   16f62:	fa 01       	movw	r30, r20
   16f64:	32 96       	adiw	r30, 0x02	; 2
   16f66:	e6 0f       	add	r30, r22
   16f68:	f7 1f       	adc	r31, r23
   16f6a:	dc 01       	movw	r26, r24
   16f6c:	9d 01       	movw	r18, r26
   16f6e:	2c 1b       	sub	r18, r28
   16f70:	3d 0b       	sbc	r19, r29
   16f72:	cf 01       	movw	r24, r30
   16f74:	86 1b       	sub	r24, r22
   16f76:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   16f78:	4d 91       	ld	r20, X+
   16f7a:	44 23       	and	r20, r20
   16f7c:	11 f0       	breq	.+4      	; 0x16f82 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   16f7e:	41 93       	st	Z+, r20
   16f80:	f5 cf       	rjmp	.-22     	; 0x16f6c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   16f82:	ac 01       	movw	r20, r24
   16f84:	42 1b       	sub	r20, r18
   16f86:	53 0b       	sbc	r21, r19
   16f88:	64 0f       	add	r22, r20
   16f8a:	75 1f       	adc	r23, r21
   16f8c:	fb 01       	movw	r30, r22
   16f8e:	32 97       	sbiw	r30, 0x02	; 2
   16f90:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   16f92:	61 50       	subi	r22, 0x01	; 1
   16f94:	71 09       	sbc	r23, r1
   16f96:	fb 01       	movw	r30, r22
   16f98:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   16f9a:	df 91       	pop	r29
   16f9c:	cf 91       	pop	r28
   16f9e:	08 95       	ret

00016fa0 <twi_readFrom.part.0.constprop.201>:
twi_readFrom.part.0.constprop.201():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
   16fa0:	90 91 64 0d 	lds	r25, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
   16fa4:	91 11       	cpse	r25, r1
   16fa6:	fc cf       	rjmp	.-8      	; 0x16fa0 <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
   16fa8:	91 e0       	ldi	r25, 0x01	; 1
   16faa:	90 93 64 0d 	sts	0x0D64, r25	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
   16fae:	90 93 63 0d 	sts	0x0D63, r25	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   16fb2:	2f ef       	ldi	r18, 0xFF	; 255
   16fb4:	20 93 62 0d 	sts	0x0D62, r18	; 0x800d62 <twi_error.lto_priv.273>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   16fb8:	10 92 61 0d 	sts	0x0D61, r1	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
   16fbc:	26 0f       	add	r18, r22
   16fbe:	20 93 60 0d 	sts	0x0D60, r18	; 0x800d60 <twi_masterBufferLength.lto_priv.268>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
   16fc2:	90 93 5f 0d 	sts	0x0D5F, r25	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
   16fc6:	90 91 5f 0d 	lds	r25, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
   16fca:	88 0f       	add	r24, r24
   16fcc:	89 2b       	or	r24, r25
   16fce:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <twi_slarw.lto_priv.266>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
   16fd2:	80 91 5e 0d 	lds	r24, 0x0D5E	; 0x800d5e <twi_inRepStart.lto_priv.271>
   16fd6:	81 30       	cpi	r24, 0x01	; 1
   16fd8:	f9 f4       	brne	.+62     	; 0x17018 <twi_readFrom.part.0.constprop.201+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   16fda:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
   16fde:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <twi_slarw.lto_priv.266>
   16fe2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
   16fe6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   16fea:	83 fd       	sbrc	r24, 3
   16fec:	f8 cf       	rjmp	.-16     	; 0x16fde <twi_readFrom.part.0.constprop.201+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   16fee:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   16ff0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
   16ff4:	80 91 64 0d 	lds	r24, 0x0D64	; 0x800d64 <twi_state.lto_priv.272>
   16ff8:	81 30       	cpi	r24, 0x01	; 1
   16ffa:	e1 f3       	breq	.-8      	; 0x16ff4 <twi_readFrom.part.0.constprop.201+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
   16ffc:	80 91 61 0d 	lds	r24, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
   17000:	86 17       	cp	r24, r22
   17002:	10 f4       	brcc	.+4      	; 0x17008 <twi_readFrom.part.0.constprop.201+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
   17004:	60 91 61 0d 	lds	r22, 0x0D61	; 0x800d61 <twi_masterBufferIndex.lto_priv.267>
   17008:	ae e3       	ldi	r26, 0x3E	; 62
   1700a:	bd e0       	ldi	r27, 0x0D	; 13
   1700c:	ee e1       	ldi	r30, 0x1E	; 30
   1700e:	fd e0       	ldi	r31, 0x0D	; 13
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   17010:	80 e0       	ldi	r24, 0x00	; 0
   17012:	86 13       	cpse	r24, r22
   17014:	03 c0       	rjmp	.+6      	; 0x1701c <twi_readFrom.part.0.constprop.201+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
   17016:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
   17018:	85 ee       	ldi	r24, 0xE5	; 229
   1701a:	ea cf       	rjmp	.-44     	; 0x16ff0 <twi_readFrom.part.0.constprop.201+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
   1701c:	9d 91       	ld	r25, X+
   1701e:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
   17020:	8f 5f       	subi	r24, 0xFF	; 255
   17022:	f7 cf       	rjmp	.-18     	; 0x17012 <twi_readFrom.part.0.constprop.201+0x72>

00017024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>:
_ZN7TwoWire17beginTransmissionEh.constprop.199():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   17024:	91 e0       	ldi	r25, 0x01	; 1
   17026:	90 93 1d 0d 	sts	0x0D1D, r25	; 0x800d1d <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   1702a:	80 93 1c 0d 	sts	0x0D1C, r24	; 0x800d1c <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   1702e:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   17032:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:150
}
   17036:	08 95       	ret

00017038 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>:
_ZN24Temperature_LM75_Derived30readIntegerTemperatureRegisterEh.constprop.196():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:51
  .default_temperature_frac_width = 8,
  .max_temperature_resolution     = 13,
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
   17038:	cf 93       	push	r28
   1703a:	df 93       	push	r29
   1703c:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
   1703e:	80 91 06 10 	lds	r24, 0x1006	; 0x801006 <lm75_temp+0x2>
   17042:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
   17046:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   1704a:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   1704e:	dc 01       	movw	r26, r24
   17050:	ed 91       	ld	r30, X+
   17052:	fc 91       	ld	r31, X
   17054:	01 90       	ld	r0, Z+
   17056:	f0 81       	ld	r31, Z
   17058:	e0 2d       	mov	r30, r0
   1705a:	6c 2f       	mov	r22, r28
   1705c:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
   1705e:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   17062:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   17066:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
   1706a:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   1706e:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   17072:	20 91 07 10 	lds	r18, 0x1007	; 0x801007 <lm75_temp+0x3>
   17076:	42 e0       	ldi	r20, 0x02	; 2
   17078:	29 30       	cpi	r18, 0x09	; 9
   1707a:	08 f4       	brcc	.+2      	; 0x1707e <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]+0x46>
   1707c:	41 e0       	ldi	r20, 0x01	; 1
   1707e:	60 91 06 10 	lds	r22, 0x1006	; 0x801006 <lm75_temp+0x2>
   17082:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
   17086:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   1708a:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   1708e:	dc 01       	movw	r26, r24
   17090:	ed 91       	ld	r30, X+
   17092:	fc 91       	ld	r31, X
   17094:	02 84       	ldd	r0, Z+10	; 0x0a
   17096:	f3 85       	ldd	r31, Z+11	; 0x0b
   17098:	e0 2d       	mov	r30, r0
   1709a:	19 95       	eicall
   1709c:	d8 2f       	mov	r29, r24
   1709e:	b0 e0       	ldi	r27, 0x00	; 0
   170a0:	cb 2f       	mov	r28, r27
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
   170a2:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <lm75_temp+0x3>
   170a6:	89 30       	cpi	r24, 0x09	; 9
   170a8:	68 f0       	brcs	.+26     	; 0x170c4 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]+0x8c>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
   170aa:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   170ae:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   170b2:	dc 01       	movw	r26, r24
   170b4:	ed 91       	ld	r30, X+
   170b6:	fc 91       	ld	r31, X
   170b8:	02 84       	ldd	r0, Z+10	; 0x0a
   170ba:	f3 85       	ldd	r31, Z+11	; 0x0b
   170bc:	e0 2d       	mov	r30, r0
   170be:	19 95       	eicall
   170c0:	c8 2b       	or	r28, r24
   170c2:	d9 2b       	or	r29, r25
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
   170c4:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <lm75_temp>
   170c8:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <lm75_temp+0x1>
   170cc:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
   170d0:	80 91 08 10 	lds	r24, 0x1008	; 0x801008 <lm75_temp+0x4>
   170d4:	90 91 09 10 	lds	r25, 0x1009	; 0x801009 <lm75_temp+0x5>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:76

  // Read the raw memory as a 16-bit signed integer and return.
  return *(int16_t *)(&t);
}
   170d8:	8c 23       	and	r24, r28
   170da:	9d 23       	and	r25, r29
   170dc:	df 91       	pop	r29
   170de:	cf 91       	pop	r28
   170e0:	08 95       	ret

000170e2 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.193]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   170e2:	ef 92       	push	r14
   170e4:	ff 92       	push	r15
   170e6:	0f 93       	push	r16
   170e8:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   170ea:	e9 eb       	ldi	r30, 0xB9	; 185
   170ec:	ff e0       	ldi	r31, 0x0F	; 15
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.193():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   170ee:	04 89       	ldd	r16, Z+20	; 0x14
   170f0:	15 89       	ldd	r17, Z+21	; 0x15
   170f2:	22 89       	ldd	r18, Z+18	; 0x12
   170f4:	33 89       	ldd	r19, Z+19	; 0x13
   170f6:	7c 01       	movw	r14, r24
   170f8:	50 e0       	ldi	r21, 0x00	; 0
   170fa:	40 e0       	ldi	r20, 0x00	; 0
   170fc:	70 e0       	ldi	r23, 0x00	; 0
   170fe:	60 e0       	ldi	r22, 0x00	; 0
   17100:	cf 01       	movw	r24, r30
   17102:	0e 94 88 49 	call	0x9310	; 0x9310 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   17106:	1f 91       	pop	r17
   17108:	0f 91       	pop	r16
   1710a:	ff 90       	pop	r15
   1710c:	ef 90       	pop	r14
   1710e:	08 95       	ret

00017110 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]>:
_Z19MenuHistoryPrevMenujjh.constprop.192():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1175


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (MenuHistoryIndex > 0)
   17110:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   17114:	88 23       	and	r24, r24
   17116:	29 f0       	breq	.+10     	; 0x17122 <MenuHistoryPrevMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.192]+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1177
  {
    MenuHistoryIndex--;
   17118:	81 50       	subi	r24, 0x01	; 1
   1711a:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1178
    MenuPrepareStyle();
   1711e:	0c 94 d5 a4 	jmp	0x149aa	; 0x149aa <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1180
  }
}
   17122:	08 95       	ret

00017124 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]>:
_Z19MenuHistoryNextMenujjh.constprop.191():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1184
///
void MenuHistoryNextMenu(uint16_t id, uint16_t args1, uint8_t fake)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
   17124:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <MenuHistoryIndex>
   17128:	2a 30       	cpi	r18, 0x0A	; 10
   1712a:	70 f4       	brcc	.+28     	; 0x17148 <MenuHistoryNextMenu(unsigned int, unsigned int, unsigned char) [clone .constprop.191]+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1186
  {
    MenuHistoryIndex++;
   1712c:	2f 5f       	subi	r18, 0xFF	; 255
   1712e:	20 93 19 0d 	sts	0x0D19, r18	; 0x800d19 <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1187
    MenuHistory[MenuHistoryIndex] = id;
   17132:	30 e0       	ldi	r19, 0x00	; 0
   17134:	f9 01       	movw	r30, r18
   17136:	e1 5f       	subi	r30, 0xF1	; 241
   17138:	f2 4f       	sbci	r31, 0xF2	; 242
   1713a:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1188
    Global_menu_args1[MenuHistoryIndex] = args1;
   1713c:	2b 5f       	subi	r18, 0xFB	; 251
   1713e:	32 4f       	sbci	r19, 0xF2	; 242
   17140:	f9 01       	movw	r30, r18
   17142:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1189
    MenuPrepareStyle();
   17144:	0c 94 d5 a4 	jmp	0x149aa	; 0x149aa <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1191
  }
}
   17148:	08 95       	ret

0001714a <TwoWire::read() [clone .constprop.190]>:
_ZN7TwoWire4readEv.constprop.190():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   1714a:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
   1714e:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
   17152:	2f ef       	ldi	r18, 0xFF	; 255
   17154:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
   17156:	98 17       	cp	r25, r24
   17158:	48 f4       	brcc	.+18     	; 0x1716c <TwoWire::read() [clone .constprop.190]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
   1715a:	e9 2f       	mov	r30, r25
   1715c:	f0 e0       	ldi	r31, 0x00	; 0
   1715e:	e2 5e       	subi	r30, 0xE2	; 226
   17160:	f2 4f       	sbci	r31, 0xF2	; 242
   17162:	20 81       	ld	r18, Z
   17164:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
   17166:	9f 5f       	subi	r25, 0xFF	; 255
   17168:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
   1716c:	c9 01       	movw	r24, r18
   1716e:	08 95       	ret

00017170 <TwoWire::write(int) [clone .constprop.189]>:
_ZN7TwoWire5writeEi.constprop.189():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   17170:	68 2f       	mov	r22, r24
   17172:	88 ef       	ldi	r24, 0xF8	; 248
   17174:	9f e0       	ldi	r25, 0x0F	; 15
   17176:	0c 94 7e 48 	jmp	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>

0001717a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>:
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   1717a:	df 92       	push	r13
   1717c:	ef 92       	push	r14
   1717e:	ff 92       	push	r15
   17180:	0f 93       	push	r16
   17182:	1f 93       	push	r17
   17184:	cf 93       	push	r28
   17186:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   17188:	90 91 8d 12 	lds	r25, 0x128D	; 0x80128d <lastDevice>
   1718c:	99 23       	and	r25, r25
   1718e:	51 f0       	breq	.+20     	; 0x171a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   17190:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   17192:	8d 2f       	mov	r24, r29
   17194:	df 91       	pop	r29
   17196:	cf 91       	pop	r28
   17198:	1f 91       	pop	r17
   1719a:	0f 91       	pop	r16
   1719c:	ff 90       	pop	r15
   1719e:	ef 90       	pop	r14
   171a0:	df 90       	pop	r13
   171a2:	08 95       	ret
   171a4:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   171a6:	0e 94 03 67 	call	0xce06	; 0xce06 <ds2482owReset(unsigned char)>
   171aa:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   171ac:	81 11       	cpse	r24, r1
   171ae:	f1 cf       	rjmp	.-30     	; 0x17192 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   171b0:	60 ef       	ldi	r22, 0xF0	; 240
   171b2:	8f 2d       	mov	r24, r15
   171b4:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <ds2482owWriteByte(unsigned char, unsigned char)>
   171b8:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   171ba:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   171bc:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   171be:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   171c0:	81 11       	cpse	r24, r1
   171c2:	e7 cf       	rjmp	.-50     	; 0x17192 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   171c4:	80 91 84 12 	lds	r24, 0x1284	; 0x801284 <lastDiscrepancy>
   171c8:	08 17       	cp	r16, r24
   171ca:	50 f4       	brcc	.+20     	; 0x171e0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   171cc:	ee 2d       	mov	r30, r14
   171ce:	f0 e0       	ldi	r31, 0x00	; 0
   171d0:	eb 57       	subi	r30, 0x7B	; 123
   171d2:	fd 4e       	sbci	r31, 0xED	; 237
   171d4:	80 81       	ld	r24, Z
   171d6:	81 23       	and	r24, r17
   171d8:	c1 e0       	ldi	r28, 0x01	; 1
   171da:	29 f4       	brne	.+10     	; 0x171e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   171dc:	c0 e0       	ldi	r28, 0x00	; 0
   171de:	03 c0       	rjmp	.+6      	; 0x171e6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x6c>
   171e0:	c1 e0       	ldi	r28, 0x01	; 1
   171e2:	80 13       	cpse	r24, r16
   171e4:	fb cf       	rjmp	.-10     	; 0x171dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   171e6:	8f 2d       	mov	r24, r15
   171e8:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   171ec:	88 e7       	ldi	r24, 0x78	; 120
   171ee:	90 e0       	ldi	r25, 0x00	; 0
   171f0:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   171f4:	90 e0       	ldi	r25, 0x00	; 0
   171f6:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   171f8:	cc 23       	and	r28, r28
   171fa:	11 f0       	breq	.+4      	; 0x17200 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x86>
_Z11owMatchNexthPh.constprop.187():
   171fc:	80 e8       	ldi	r24, 0x80	; 128
   171fe:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   17200:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   17204:	88 ef       	ldi	r24, 0xF8	; 248
   17206:	9f e0       	ldi	r25, 0x0F	; 15
   17208:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
   1720c:	81 11       	cpse	r24, r1
   1720e:	53 c0       	rjmp	.+166    	; 0x172b6 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x13c>
   17210:	6e ef       	ldi	r22, 0xFE	; 254
   17212:	d6 2e       	mov	r13, r22
   17214:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   17216:	dd 20       	and	r13, r13
   17218:	09 f4       	brne	.+2      	; 0x1721c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xa2>
   1721a:	4f c0       	rjmp	.+158    	; 0x172ba <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1721c:	41 e0       	ldi	r20, 0x01	; 1
   1721e:	6f 2d       	mov	r22, r15
   17220:	88 ef       	ldi	r24, 0xF8	; 248
   17222:	9f e0       	ldi	r25, 0x0F	; 15
   17224:	0e 94 46 66 	call	0xcc8c	; 0xcc8c <TwoWire::requestFrom(unsigned char, unsigned char)>
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   17228:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <TwoWire::rxBufferLength>
   1722c:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <TwoWire::rxBufferIndex>
   17230:	89 1b       	sub	r24, r25
   17232:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   17234:	18 16       	cp	r1, r24
   17236:	19 06       	cpc	r1, r25
   17238:	1c f4       	brge	.+6      	; 0x17240 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1723a:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
   1723e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   17240:	c0 fd       	sbrc	r28, 0
   17242:	e8 cf       	rjmp	.-48     	; 0x17214 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x9a>
_Z11owMatchNexthPh.constprop.187():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   17244:	2c 2f       	mov	r18, r28
   17246:	30 e0       	ldi	r19, 0x00	; 0
   17248:	c9 01       	movw	r24, r18
   1724a:	45 e0       	ldi	r20, 0x05	; 5
   1724c:	95 95       	asr	r25
   1724e:	87 95       	ror	r24
   17250:	4a 95       	dec	r20
   17252:	e1 f7       	brne	.-8      	; 0x1724c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xd2>
   17254:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   17256:	22 0f       	add	r18, r18
   17258:	23 2f       	mov	r18, r19
   1725a:	22 1f       	adc	r18, r18
   1725c:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   1725e:	83 30       	cpi	r24, 0x03	; 3
   17260:	99 f0       	breq	.+38     	; 0x17288 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x10e>
   17262:	ee 2d       	mov	r30, r14
   17264:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   17266:	81 11       	cpse	r24, r1
   17268:	1b c0       	rjmp	.+54     	; 0x172a0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   1726a:	22 23       	and	r18, r18
   1726c:	11 f1       	breq	.+68     	; 0x172b2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   1726e:	eb 57       	subi	r30, 0x7B	; 123
   17270:	fd 4e       	sbci	r31, 0xED	; 237
   17272:	80 81       	ld	r24, Z
   17274:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   17276:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   17278:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   1727a:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   1727c:	11 f4       	brne	.+4      	; 0x17282 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   1727e:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   17280:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   17282:	88 e0       	ldi	r24, 0x08	; 8
   17284:	e8 12       	cpse	r14, r24
   17286:	9e cf       	rjmp	.-196    	; 0x171c4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   17288:	01 34       	cpi	r16, 0x41	; 65
   1728a:	08 f4       	brcc	.+2      	; 0x1728e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x114>
   1728c:	81 cf       	rjmp	.-254    	; 0x17190 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   1728e:	d0 93 84 12 	sts	0x1284, r29	; 0x801284 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   17292:	81 e0       	ldi	r24, 0x01	; 1
   17294:	d1 11       	cpse	r29, r1
   17296:	80 e0       	ldi	r24, 0x00	; 0
   17298:	80 93 8d 12 	sts	0x128D, r24	; 0x80128d <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   1729c:	d0 e0       	ldi	r29, 0x00	; 0
   1729e:	79 cf       	rjmp	.-270    	; 0x17192 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   172a0:	21 11       	cpse	r18, r1
   172a2:	e5 cf       	rjmp	.-54     	; 0x1726e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   172a4:	eb 57       	subi	r30, 0x7B	; 123
   172a6:	fd 4e       	sbci	r31, 0xED	; 237
   172a8:	80 81       	ld	r24, Z
   172aa:	91 2f       	mov	r25, r17
   172ac:	90 95       	com	r25
   172ae:	89 23       	and	r24, r25
   172b0:	e2 cf       	rjmp	.-60     	; 0x17276 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   172b2:	d0 2f       	mov	r29, r16
   172b4:	f7 cf       	rjmp	.-18     	; 0x172a4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   172b6:	d3 e0       	ldi	r29, 0x03	; 3
   172b8:	6c cf       	rjmp	.-296    	; 0x17192 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   172ba:	d4 e0       	ldi	r29, 0x04	; 4
   172bc:	6a cf       	rjmp	.-300    	; 0x17192 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]+0x18>

000172be <one_hw_search_device(unsigned char) [clone .constprop.184]>:
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:231
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
   172be:	ff 92       	push	r15
   172c0:	0f 93       	push	r16
   172c2:	1f 93       	push	r17
   172c4:	cf 93       	push	r28
   172c6:	df 93       	push	r29
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:234
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
   172c8:	10 92 02 0d 	sts	0x0D02, r1	; 0x800d02 <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
   172cc:	c0 91 01 0d 	lds	r28, 0x0D01	; 0x800d01 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
   172d0:	8c 2f       	mov	r24, r28
   172d2:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
   172d6:	88 ef       	ldi	r24, 0xF8	; 248
   172d8:	9f e0       	ldi	r25, 0x0F	; 15
   172da:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
   172de:	81 11       	cpse	r24, r1
   172e0:	10 c0       	rjmp	.+32     	; 0x17302 <one_hw_search_device(unsigned char) [clone .constprop.184]+0x44>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   172e2:	8c 2f       	mov	r24, r28
   172e4:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
   172e8:	82 ed       	ldi	r24, 0xD2	; 210
   172ea:	90 e0       	ldi	r25, 0x00	; 0
   172ec:	0e 94 b8 b8 	call	0x17170	; 0x17170 <TwoWire::write(int) [clone .constprop.189]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
   172f0:	60 e0       	ldi	r22, 0x00	; 0
   172f2:	88 ef       	ldi	r24, 0xF8	; 248
   172f4:	9f e0       	ldi	r25, 0x0F	; 15
   172f6:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
   172fa:	88 ef       	ldi	r24, 0xF8	; 248
   172fc:	9f e0       	ldi	r25, 0x0F	; 15
   172fe:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
   17302:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   17306:	0e 94 39 66 	call	0xcc72	; 0xcc72 <ds2482reset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
   1730a:	80 91 01 0d 	lds	r24, 0x0D01	; 0x800d01 <ds2482_address>
   1730e:	0e 94 03 67 	call	0xce06	; 0xce06 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
   17312:	10 91 01 0d 	lds	r17, 0x0D01	; 0x800d01 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
   17316:	10 92 8d 12 	sts	0x128D, r1	; 0x80128d <lastDevice>
   1731a:	10 92 84 12 	sts	0x1284, r1	; 0x801284 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
   1731e:	81 2f       	mov	r24, r17
   17320:	0e 94 bd b8 	call	0x1717a	; 0x1717a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
_Z20one_hw_search_deviceh.constprop.184():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
   17324:	81 11       	cpse	r24, r1
   17326:	31 c0       	rjmp	.+98     	; 0x1738a <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
   17328:	0b e0       	ldi	r16, 0x0B	; 11
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
   1732a:	ff 24       	eor	r15, r15
   1732c:	f3 94       	inc	r15
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) { /// TODO optimalizovat podminku do jednoho radku
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
   1732e:	d0 91 02 0d 	lds	r29, 0x0D02	; 0x800d02 <ds2482_address+0x1>
   17332:	d6 30       	cpi	r29, 0x06	; 6
   17334:	50 f5       	brcc	.+84     	; 0x1738a <one_hw_search_device(unsigned char) [clone .constprop.184]+0xcc>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
   17336:	c0 91 00 0d 	lds	r28, 0x0D00	; 0x800d00 <Global_HWwirenum>
   1733a:	2c 2f       	mov	r18, r28
   1733c:	30 e0       	ldi	r19, 0x00	; 0
   1733e:	a5 e8       	ldi	r26, 0x85	; 133
   17340:	b2 e1       	ldi	r27, 0x12	; 18
   17342:	c0 9f       	mul	r28, r16
   17344:	b0 01       	movw	r22, r0
   17346:	11 24       	eor	r1, r1
   17348:	90 e0       	ldi	r25, 0x00	; 0
   1734a:	80 e0       	ldi	r24, 0x00	; 0
   1734c:	4d 91       	ld	r20, X+
   1734e:	fc 01       	movw	r30, r24
   17350:	e6 0f       	add	r30, r22
   17352:	f7 1f       	adc	r31, r23
   17354:	e2 54       	subi	r30, 0x42	; 66
   17356:	f3 4f       	sbci	r31, 0xF3	; 243
   17358:	40 83       	st	Z, r20
   1735a:	01 96       	adiw	r24, 0x01	; 1
   1735c:	88 30       	cpi	r24, 0x08	; 8
   1735e:	91 05       	cpc	r25, r1
   17360:	a9 f7       	brne	.-22     	; 0x1734c <one_hw_search_device(unsigned char) [clone .constprop.184]+0x8e>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
   17362:	02 9f       	mul	r16, r18
   17364:	f0 01       	movw	r30, r0
   17366:	03 9f       	mul	r16, r19
   17368:	f0 0d       	add	r31, r0
   1736a:	11 24       	eor	r1, r1
   1736c:	e2 54       	subi	r30, 0x42	; 66
   1736e:	f3 4f       	sbci	r31, 0xF3	; 243
   17370:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
   17372:	f1 86       	std	Z+9, r15	; 0x09
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
   17374:	81 2f       	mov	r24, r17
   17376:	0e 94 bd b8 	call	0x1717a	; 0x1717a <owMatchNext(unsigned char, unsigned char*) [clone .constprop.187]>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
   1737a:	df 5f       	subi	r29, 0xFF	; 255
   1737c:	d0 93 02 0d 	sts	0x0D02, r29	; 0x800d02 <ds2482_address+0x1>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
   17380:	cf 5f       	subi	r28, 0xFF	; 255
   17382:	c0 93 00 0d 	sts	0x0D00, r28	; 0x800d00 <Global_HWwirenum>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
   17386:	85 30       	cpi	r24, 0x05	; 5
   17388:	91 f6       	brne	.-92     	; 0x1732e <one_hw_search_device(unsigned char) [clone .constprop.184]+0x70>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:262
      { ///hledani dokonceno
        break;
      }
    }
  return r;
}
   1738a:	df 91       	pop	r29
   1738c:	cf 91       	pop	r28
   1738e:	1f 91       	pop	r17
   17390:	0f 91       	pop	r16
   17392:	ff 90       	pop	r15
   17394:	08 95       	ret

00017396 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]>:
_Z10parseBytesPKccPhii.constprop.183():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:106
{
 return x;
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
   17396:	cf 92       	push	r12
   17398:	df 92       	push	r13
   1739a:	ef 92       	push	r14
   1739c:	ff 92       	push	r15
   1739e:	0f 93       	push	r16
   173a0:	1f 93       	push	r17
   173a2:	cf 93       	push	r28
   173a4:	df 93       	push	r29
   173a6:	ec 01       	movw	r28, r24
   173a8:	8a 01       	movw	r16, r20
   173aa:	7a 01       	movw	r14, r20
   173ac:	e2 0e       	add	r14, r18
   173ae:	f3 1e       	adc	r15, r19
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   173b0:	c6 2e       	mov	r12, r22
   173b2:	66 0f       	add	r22, r22
   173b4:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:110

void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   173b6:	4a e0       	ldi	r20, 0x0A	; 10
   173b8:	50 e0       	ldi	r21, 0x00	; 0
   173ba:	70 e0       	ldi	r23, 0x00	; 0
   173bc:	60 e0       	ldi	r22, 0x00	; 0
   173be:	ce 01       	movw	r24, r28
   173c0:	0e 94 61 ed 	call	0x1dac2	; 0x1dac2 <strtoul>
   173c4:	f8 01       	movw	r30, r16
   173c6:	61 93       	st	Z+, r22
   173c8:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:111
    str = strchr(str, sep);               // Find next separator
   173ca:	b6 01       	movw	r22, r12
   173cc:	ce 01       	movw	r24, r28
   173ce:	0e 94 33 fb 	call	0x1f666	; 0x1f666 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:112
    if (str == NULL || *str == '\0') {
   173d2:	00 97       	sbiw	r24, 0x00	; 0
   173d4:	49 f0       	breq	.+18     	; 0x173e8 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
   173d6:	fc 01       	movw	r30, r24
   173d8:	20 81       	ld	r18, Z
   173da:	22 23       	and	r18, r18
   173dc:	29 f0       	breq	.+10     	; 0x173e8 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x52>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:115
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
   173de:	ec 01       	movw	r28, r24
   173e0:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base)
{
  //parseBytes(str, sep, (uint16_t*)bytes, maxBytes, base);
  for (int i = 0; i < maxBytes; i++) {
   173e2:	0e 15       	cp	r16, r14
   173e4:	1f 05       	cpc	r17, r15
   173e6:	39 f7       	brne	.-50     	; 0x173b6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.183]+0x20>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                               // Point to next character after separator
  }
}
   173e8:	df 91       	pop	r29
   173ea:	cf 91       	pop	r28
   173ec:	1f 91       	pop	r17
   173ee:	0f 91       	pop	r16
   173f0:	ff 90       	pop	r15
   173f2:	ef 90       	pop	r14
   173f4:	df 90       	pop	r13
   173f6:	cf 90       	pop	r12
   173f8:	08 95       	ret

000173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>:
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1719
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   173fa:	8f 92       	push	r8
   173fc:	9f 92       	push	r9
   173fe:	af 92       	push	r10
   17400:	bf 92       	push	r11
   17402:	cf 92       	push	r12
   17404:	df 92       	push	r13
   17406:	ef 92       	push	r14
   17408:	ff 92       	push	r15
   1740a:	0f 93       	push	r16
   1740c:	1f 93       	push	r17
   1740e:	cf 93       	push	r28
   17410:	df 93       	push	r29
   17412:	00 d0       	rcall	.+0      	; 0x17414 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1a>
   17414:	00 d0       	rcall	.+0      	; 0x17416 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x1c>
   17416:	cd b7       	in	r28, 0x3d	; 61
   17418:	de b7       	in	r29, 0x3e	; 62
   1741a:	6c 01       	movw	r12, r24
   1741c:	5b 01       	movw	r10, r22
   1741e:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   17420:	10 92 c6 0f 	sts	0x0FC6, r1	; 0x800fc6 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   17424:	20 93 c5 0f 	sts	0x0FC5, r18	; 0x800fc5 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   17428:	10 93 c0 0f 	sts	0x0FC0, r17	; 0x800fc0 <my_lcd+0x7>
   1742c:	00 93 bf 0f 	sts	0x0FBF, r16	; 0x800fbf <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   17430:	f0 92 c2 0f 	sts	0x0FC2, r15	; 0x800fc2 <my_lcd+0x9>
   17434:	e0 92 c1 0f 	sts	0x0FC1, r14	; 0x800fc1 <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   17438:	1a 82       	std	Y+2, r1	; 0x02
   1743a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   1743c:	1c 82       	std	Y+4, r1	; 0x04
   1743e:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   17440:	1e 82       	std	Y+6, r1	; 0x06
   17442:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   17444:	00 97       	sbiw	r24, 0x00	; 0
   17446:	69 f1       	breq	.+90     	; 0x174a2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
   17448:	fc 01       	movw	r30, r24
   1744a:	01 90       	ld	r0, Z+
   1744c:	00 20       	and	r0, r0
   1744e:	e9 f7       	brne	.-6      	; 0x1744a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x50>
   17450:	31 97       	sbiw	r30, 0x01	; 1
   17452:	8f 01       	movw	r16, r30
   17454:	08 1b       	sub	r16, r24
   17456:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   17458:	b8 01       	movw	r22, r16
   1745a:	6f 5f       	subi	r22, 0xFF	; 255
   1745c:	7f 4f       	sbci	r23, 0xFF	; 255
   1745e:	90 e0       	ldi	r25, 0x00	; 0
   17460:	80 e0       	ldi	r24, 0x00	; 0
   17462:	0e 94 39 fa 	call	0x1f472	; 0x1f472 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   17466:	00 97       	sbiw	r24, 0x00	; 0
   17468:	81 f0       	breq	.+32     	; 0x1748a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x90>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   1746a:	9a 83       	std	Y+2, r25	; 0x02
   1746c:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   1746e:	1c 83       	std	Y+4, r17	; 0x04
   17470:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   17472:	2d 81       	ldd	r18, Y+5	; 0x05
   17474:	3e 81       	ldd	r19, Y+6	; 0x06
   17476:	23 2b       	or	r18, r19
   17478:	11 f4       	brne	.+4      	; 0x1747e <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x84>
   1747a:	fc 01       	movw	r30, r24
   1747c:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   1747e:	1e 83       	std	Y+6, r17	; 0x06
   17480:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   17482:	b6 01       	movw	r22, r12
   17484:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
   17488:	0c c0       	rjmp	.+24     	; 0x174a2 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0xa8>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   1748a:	89 81       	ldd	r24, Y+1	; 0x01
   1748c:	9a 81       	ldd	r25, Y+2	; 0x02
   1748e:	00 97       	sbiw	r24, 0x00	; 0
   17490:	11 f0       	breq	.+4      	; 0x17496 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]+0x9c>
   17492:	0e 94 a9 f3 	call	0x1e752	; 0x1e752 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   17496:	1a 82       	std	Y+2, r1	; 0x02
   17498:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   1749a:	1e 82       	std	Y+6, r1	; 0x06
   1749c:	1d 82       	std	Y+5, r1	; 0x05
   1749e:	1c 82       	std	Y+4, r1	; 0x04
   174a0:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   174a2:	a4 01       	movw	r20, r8
   174a4:	b5 01       	movw	r22, r10
   174a6:	ce 01       	movw	r24, r28
   174a8:	01 96       	adiw	r24, 0x01	; 1
   174aa:	0e 94 b3 b4 	call	0x16966	; 0x16966 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.174]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   174ae:	89 81       	ldd	r24, Y+1	; 0x01
   174b0:	9a 81       	ldd	r25, Y+2	; 0x02
   174b2:	0e 94 a9 f3 	call	0x1e752	; 0x1e752 <free>
_Z11show_stringPciihjjb.constprop.169():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1726
}
   174b6:	26 96       	adiw	r28, 0x06	; 6
   174b8:	0f b6       	in	r0, 0x3f	; 63
   174ba:	f8 94       	cli
   174bc:	de bf       	out	0x3e, r29	; 62
   174be:	0f be       	out	0x3f, r0	; 63
   174c0:	cd bf       	out	0x3d, r28	; 61
   174c2:	df 91       	pop	r29
   174c4:	cf 91       	pop	r28
   174c6:	1f 91       	pop	r17
   174c8:	0f 91       	pop	r16
   174ca:	ff 90       	pop	r15
   174cc:	ef 90       	pop	r14
   174ce:	df 90       	pop	r13
   174d0:	cf 90       	pop	r12
   174d2:	bf 90       	pop	r11
   174d4:	af 90       	pop	r10
   174d6:	9f 90       	pop	r9
   174d8:	8f 90       	pop	r8
   174da:	08 95       	ret

000174dc <PubSubClient::subscribe(char const*) [clone .constprop.166]>:
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468
    lastOutActivity = millis();
    return (rc == 1+llen+length);
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
   174dc:	cf 93       	push	r28
   174de:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   174e0:	fc 01       	movw	r30, r24
   174e2:	01 90       	ld	r0, Z+
   174e4:	00 20       	and	r0, r0
   174e6:	e9 f7       	brne	.-6      	; 0x174e2 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x6>
   174e8:	9f 01       	movw	r18, r30
   174ea:	28 1b       	sub	r18, r24
   174ec:	39 0b       	sbc	r19, r25
   174ee:	28 5f       	subi	r18, 0xF8	; 248
   174f0:	3f 4f       	sbci	r19, 0xFF	; 255
   174f2:	21 30       	cpi	r18, 0x01	; 1
   174f4:	32 40       	sbci	r19, 0x02	; 2
   174f6:	98 f5       	brcc	.+102    	; 0x1755e <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
   174f8:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   174fa:	8f e2       	ldi	r24, 0x2F	; 47
   174fc:	90 e1       	ldi	r25, 0x10	; 16
   174fe:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   17502:	88 23       	and	r24, r24
   17504:	61 f1       	breq	.+88     	; 0x1755e <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   17506:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   1750a:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   1750e:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   17510:	19 f1       	breq	.+70     	; 0x17558 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   17512:	90 93 32 12 	sts	0x1232, r25	; 0x801232 <mqtt_client+0x203>
   17516:	80 93 31 12 	sts	0x1231, r24	; 0x801231 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   1751a:	80 91 31 12 	lds	r24, 0x1231	; 0x801231 <mqtt_client+0x202>
   1751e:	90 91 32 12 	lds	r25, 0x1232	; 0x801232 <mqtt_client+0x203>
   17522:	90 93 36 10 	sts	0x1036, r25	; 0x801036 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   17526:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   1752a:	47 e0       	ldi	r20, 0x07	; 7
   1752c:	50 e0       	ldi	r21, 0x00	; 0
   1752e:	61 e3       	ldi	r22, 0x31	; 49
   17530:	70 e1       	ldi	r23, 0x10	; 16
   17532:	ce 01       	movw	r24, r28
   17534:	0e 94 ae b7 	call	0x16f5c	; 0x16f5c <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.214]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   17538:	fc 01       	movw	r30, r24
   1753a:	e1 5d       	subi	r30, 0xD1	; 209
   1753c:	ff 4e       	sbci	r31, 0xEF	; 239
   1753e:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   17540:	9c 01       	movw	r18, r24
   17542:	24 50       	subi	r18, 0x04	; 4
   17544:	31 09       	sbc	r19, r1
   17546:	41 e3       	ldi	r20, 0x31	; 49
   17548:	50 e1       	ldi	r21, 0x10	; 16
   1754a:	62 e8       	ldi	r22, 0x82	; 130
   1754c:	8f e2       	ldi	r24, 0x2F	; 47
   1754e:	90 e1       	ldi	r25, 0x10	; 16
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   17550:	df 91       	pop	r29
   17552:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   17554:	0c 94 02 69 	jmp	0xd204	; 0xd204 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   17558:	81 e0       	ldi	r24, 0x01	; 1
   1755a:	90 e0       	ldi	r25, 0x00	; 0
   1755c:	da cf       	rjmp	.-76     	; 0x17512 <PubSubClient::subscribe(char const*) [clone .constprop.166]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.166():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   1755e:	80 e0       	ldi	r24, 0x00	; 0
   17560:	df 91       	pop	r29
   17562:	cf 91       	pop	r28
   17564:	08 95       	ret

00017566 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>:
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   17566:	3f 92       	push	r3
   17568:	4f 92       	push	r4
   1756a:	5f 92       	push	r5
   1756c:	6f 92       	push	r6
   1756e:	7f 92       	push	r7
   17570:	8f 92       	push	r8
   17572:	9f 92       	push	r9
   17574:	af 92       	push	r10
   17576:	bf 92       	push	r11
   17578:	cf 92       	push	r12
   1757a:	df 92       	push	r13
   1757c:	ef 92       	push	r14
   1757e:	ff 92       	push	r15
   17580:	0f 93       	push	r16
   17582:	1f 93       	push	r17
   17584:	cf 93       	push	r28
   17586:	df 93       	push	r29
   17588:	1f 92       	push	r1
   1758a:	cd b7       	in	r28, 0x3d	; 61
   1758c:	de b7       	in	r29, 0x3e	; 62
   1758e:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17590:	81 e3       	ldi	r24, 0x31	; 49
   17592:	90 e1       	ldi	r25, 0x10	; 16
   17594:	0e 94 02 b6 	call	0x16c04	; 0x16c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   17598:	81 11       	cpse	r24, r1
   1759a:	16 c0       	rjmp	.+44     	; 0x175c8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   1759c:	10 e0       	ldi	r17, 0x00	; 0
   1759e:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   175a0:	c8 01       	movw	r24, r16
   175a2:	0f 90       	pop	r0
   175a4:	df 91       	pop	r29
   175a6:	cf 91       	pop	r28
   175a8:	1f 91       	pop	r17
   175aa:	0f 91       	pop	r16
   175ac:	ff 90       	pop	r15
   175ae:	ef 90       	pop	r14
   175b0:	df 90       	pop	r13
   175b2:	cf 90       	pop	r12
   175b4:	bf 90       	pop	r11
   175b6:	af 90       	pop	r10
   175b8:	9f 90       	pop	r9
   175ba:	8f 90       	pop	r8
   175bc:	7f 90       	pop	r7
   175be:	6f 90       	pop	r6
   175c0:	5f 90       	pop	r5
   175c2:	4f 90       	pop	r4
   175c4:	3f 90       	pop	r3
   175c6:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   175c8:	30 90 31 10 	lds	r3, 0x1031	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   175cc:	19 82       	std	Y+1, r1	; 0x01
   175ce:	32 e3       	ldi	r19, 0x32	; 50
   175d0:	83 2e       	mov	r8, r19
   175d2:	30 e1       	ldi	r19, 0x10	; 16
   175d4:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   175d6:	ee 24       	eor	r14, r14
   175d8:	e3 94       	inc	r14
   175da:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   175dc:	d1 2c       	mov	r13, r1
   175de:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   175e0:	41 2c       	mov	r4, r1
   175e2:	51 2c       	mov	r5, r1
   175e4:	32 01       	movw	r6, r4
   175e6:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   175e8:	ce 01       	movw	r24, r28
   175ea:	01 96       	adiw	r24, 0x01	; 1
   175ec:	0e 94 02 b6 	call	0x16c04	; 0x16c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   175f0:	88 23       	and	r24, r24
   175f2:	a1 f2       	breq	.-88     	; 0x1759c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   175f4:	87 01       	movw	r16, r14
   175f6:	0f 5f       	subi	r16, 0xFF	; 255
   175f8:	1f 4f       	sbci	r17, 0xFF	; 255
   175fa:	89 81       	ldd	r24, Y+1	; 0x01
   175fc:	d4 01       	movw	r26, r8
   175fe:	8d 93       	st	X+, r24
   17600:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   17602:	28 2f       	mov	r18, r24
   17604:	2f 77       	andi	r18, 0x7F	; 127
   17606:	30 e0       	ldi	r19, 0x00	; 0
   17608:	24 9d       	mul	r18, r4
   1760a:	a0 01       	movw	r20, r0
   1760c:	25 9d       	mul	r18, r5
   1760e:	50 0d       	add	r21, r0
   17610:	34 9d       	mul	r19, r4
   17612:	50 0d       	add	r21, r0
   17614:	11 24       	eor	r1, r1
   17616:	c4 0e       	add	r12, r20
   17618:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   1761a:	27 e0       	ldi	r18, 0x07	; 7
   1761c:	44 0c       	add	r4, r4
   1761e:	55 1c       	adc	r5, r5
   17620:	66 1c       	adc	r6, r6
   17622:	77 1c       	adc	r7, r7
   17624:	2a 95       	dec	r18
   17626:	d1 f7       	brne	.-12     	; 0x1761c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   17628:	87 fd       	sbrc	r24, 7
   1762a:	31 c0       	rjmp	.+98     	; 0x1768e <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x128>
   1762c:	b3 2d       	mov	r27, r3
   1762e:	b0 7f       	andi	r27, 0xF0	; 240
   17630:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   17632:	8f ef       	ldi	r24, 0xFF	; 255
   17634:	80 0f       	add	r24, r16
   17636:	f5 01       	movw	r30, r10
   17638:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   1763a:	f0 e3       	ldi	r31, 0x30	; 48
   1763c:	bf 13       	cpse	r27, r31
   1763e:	29 c0       	rjmp	.+82     	; 0x17692 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   17640:	c8 01       	movw	r24, r16
   17642:	8f 5c       	subi	r24, 0xCF	; 207
   17644:	9f 4e       	sbci	r25, 0xEF	; 239
   17646:	0e 94 02 b6 	call	0x16c04	; 0x16c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   1764a:	88 23       	and	r24, r24
   1764c:	09 f4       	brne	.+2      	; 0x17650 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xea>
   1764e:	a6 cf       	rjmp	.-180    	; 0x1759c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   17650:	c7 01       	movw	r24, r14
   17652:	8d 5c       	subi	r24, 0xCD	; 205
   17654:	9f 4e       	sbci	r25, 0xEF	; 239
   17656:	0e 94 02 b6 	call	0x16c04	; 0x16c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   1765a:	88 23       	and	r24, r24
   1765c:	09 f4       	brne	.+2      	; 0x17660 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0xfa>
   1765e:	9e cf       	rjmp	.-196    	; 0x1759c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   17660:	0e 5f       	subi	r16, 0xFE	; 254
   17662:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.158():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   17664:	d5 01       	movw	r26, r10
   17666:	ec 91       	ld	r30, X
   17668:	f0 e0       	ldi	r31, 0x00	; 0
   1766a:	e1 5d       	subi	r30, 0xD1	; 209
   1766c:	ff 4e       	sbci	r31, 0xEF	; 239
   1766e:	e3 80       	ldd	r14, Z+3	; 0x03
   17670:	f1 2c       	mov	r15, r1
   17672:	fe 2c       	mov	r15, r14
   17674:	ee 24       	eor	r14, r14
   17676:	84 81       	ldd	r24, Z+4	; 0x04
   17678:	e8 0e       	add	r14, r24
   1767a:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   1767c:	80 91 31 10 	lds	r24, 0x1031	; 0x801031 <mqtt_client+0x2>
   17680:	81 ff       	sbrs	r24, 1
   17682:	03 c0       	rjmp	.+6      	; 0x1768a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   17684:	b2 e0       	ldi	r27, 0x02	; 2
   17686:	eb 0e       	add	r14, r27
   17688:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   1768a:	92 e0       	ldi	r25, 0x02	; 2
   1768c:	05 c0       	rjmp	.+10     	; 0x17698 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   1768e:	78 01       	movw	r14, r16
   17690:	ab cf       	rjmp	.-170    	; 0x175e8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   17692:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   17694:	f1 2c       	mov	r15, r1
   17696:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   17698:	69 2e       	mov	r6, r25
   1769a:	71 2c       	mov	r7, r1
   1769c:	60 1a       	sub	r6, r16
   1769e:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   176a0:	8e ef       	ldi	r24, 0xFE	; 254
   176a2:	88 2e       	mov	r8, r24
   176a4:	99 24       	eor	r9, r9
   176a6:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   176a8:	c3 01       	movw	r24, r6
   176aa:	80 0f       	add	r24, r16
   176ac:	91 1f       	adc	r25, r17
   176ae:	8c 15       	cp	r24, r12
   176b0:	9d 05       	cpc	r25, r13
   176b2:	78 f5       	brcc	.+94     	; 0x17712 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   176b4:	ce 01       	movw	r24, r28
   176b6:	01 96       	adiw	r24, 0x01	; 1
   176b8:	0e 94 02 b6 	call	0x16c04	; 0x16c04 <PubSubClient::readByte(unsigned char*) [clone .constprop.160]>
   176bc:	88 23       	and	r24, r24
   176be:	09 f4       	brne	.+2      	; 0x176c2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x15c>
   176c0:	6d cf       	rjmp	.-294    	; 0x1759c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   176c2:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <mqtt_client+0x219>
   176c6:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <mqtt_client+0x21a>
   176ca:	00 97       	sbiw	r24, 0x00	; 0
   176cc:	b1 f0       	breq	.+44     	; 0x176fa <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   176ce:	e0 e3       	ldi	r30, 0x30	; 48
   176d0:	3e 12       	cpse	r3, r30
   176d2:	13 c0       	rjmp	.+38     	; 0x176fa <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
   176d4:	d5 01       	movw	r26, r10
   176d6:	2c 91       	ld	r18, X
   176d8:	f4 01       	movw	r30, r8
   176da:	e2 1b       	sub	r30, r18
   176dc:	f1 09       	sbc	r31, r1
   176de:	9f 01       	movw	r18, r30
   176e0:	20 0f       	add	r18, r16
   176e2:	31 1f       	adc	r19, r17
   176e4:	e2 16       	cp	r14, r18
   176e6:	f3 06       	cpc	r15, r19
   176e8:	40 f4       	brcc	.+16     	; 0x176fa <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   176ea:	dc 01       	movw	r26, r24
   176ec:	ed 91       	ld	r30, X+
   176ee:	fc 91       	ld	r31, X
   176f0:	01 90       	ld	r0, Z+
   176f2:	f0 81       	ld	r31, Z
   176f4:	e0 2d       	mov	r30, r0
   176f6:	69 81       	ldd	r22, Y+1	; 0x01
   176f8:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   176fa:	01 15       	cp	r16, r1
   176fc:	b2 e0       	ldi	r27, 0x02	; 2
   176fe:	1b 07       	cpc	r17, r27
   17700:	28 f4       	brcc	.+10     	; 0x1770c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   17702:	89 81       	ldd	r24, Y+1	; 0x01
   17704:	f8 01       	movw	r30, r16
   17706:	e1 5d       	subi	r30, 0xD1	; 209
   17708:	ff 4e       	sbci	r31, 0xEF	; 239
   1770a:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   1770c:	0f 5f       	subi	r16, 0xFF	; 255
   1770e:	1f 4f       	sbci	r17, 0xFF	; 255
   17710:	cb cf       	rjmp	.-106    	; 0x176a8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   17712:	80 91 48 12 	lds	r24, 0x1248	; 0x801248 <mqtt_client+0x219>
   17716:	90 91 49 12 	lds	r25, 0x1249	; 0x801249 <mqtt_client+0x21a>
   1771a:	89 2b       	or	r24, r25
   1771c:	09 f0       	breq	.+2      	; 0x17720 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1ba>
   1771e:	40 cf       	rjmp	.-384    	; 0x175a0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>
   17720:	01 30       	cpi	r16, 0x01	; 1
   17722:	e2 e0       	ldi	r30, 0x02	; 2
   17724:	1e 07       	cpc	r17, r30
   17726:	08 f0       	brcs	.+2      	; 0x1772a <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x1c4>
   17728:	39 cf       	rjmp	.-398    	; 0x1759c <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x36>
   1772a:	3a cf       	rjmp	.-396    	; 0x175a0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]+0x3a>

0001772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:165
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   1772c:	af 92       	push	r10
   1772e:	bf 92       	push	r11
   17730:	df 92       	push	r13
   17732:	ef 92       	push	r14
   17734:	ff 92       	push	r15
   17736:	0f 93       	push	r16
   17738:	1f 93       	push	r17
   1773a:	cf 93       	push	r28
   1773c:	df 93       	push	r29
   1773e:	cd b7       	in	r28, 0x3d	; 61
   17740:	de b7       	in	r29, 0x3e	; 62
   17742:	c6 55       	subi	r28, 0x56	; 86
   17744:	d1 09       	sbc	r29, r1
   17746:	0f b6       	in	r0, 0x3f	; 63
   17748:	f8 94       	cli
   1774a:	de bf       	out	0x3e, r29	; 62
   1774c:	0f be       	out	0x3f, r0	; 63
   1774e:	cd bf       	out	0x3d, r28	; 61
   17750:	5c 01       	movw	r10, r24
   17752:	d6 2e       	mov	r13, r22
   17754:	7a 01       	movw	r14, r20
   17756:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   17758:	8f e2       	ldi	r24, 0x2F	; 47
   1775a:	90 e1       	ldi	r25, 0x10	; 16
   1775c:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   17760:	88 23       	and	r24, r24
   17762:	09 f4       	brne	.+2      	; 0x17766 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0x3a>
   17764:	52 c0       	rjmp	.+164    	; 0x1780a <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xde>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   17766:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   1776a:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   1776e:	01 96       	adiw	r24, 0x01	; 1
   17770:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   17774:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   17778:	ce 01       	movw	r24, r28
   1777a:	83 5b       	subi	r24, 0xB3	; 179
   1777c:	9f 4f       	sbci	r25, 0xFF	; 255
   1777e:	0e 94 2a 91 	call	0x12254	; 0x12254 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   17782:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   17786:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   1778a:	ce 01       	movw	r24, r28
   1778c:	01 96       	adiw	r24, 0x01	; 1
   1778e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   17792:	be 01       	movw	r22, r28
   17794:	63 5b       	subi	r22, 0xB3	; 179
   17796:	7f 4f       	sbci	r23, 0xFF	; 255
   17798:	ce 01       	movw	r24, r28
   1779a:	01 96       	adiw	r24, 0x01	; 1
   1779c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   177a0:	60 e9       	ldi	r22, 0x90	; 144
   177a2:	75 e0       	ldi	r23, 0x05	; 5
   177a4:	ce 01       	movw	r24, r28
   177a6:	01 96       	adiw	r24, 0x01	; 1
   177a8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   177ac:	b5 01       	movw	r22, r10
   177ae:	ce 01       	movw	r24, r28
   177b0:	01 96       	adiw	r24, 0x01	; 1
   177b2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   177b6:	60 e9       	ldi	r22, 0x90	; 144
   177b8:	75 e0       	ldi	r23, 0x05	; 5
   177ba:	ce 01       	movw	r24, r28
   177bc:	01 96       	adiw	r24, 0x01	; 1
   177be:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   177c2:	4a e0       	ldi	r20, 0x0A	; 10
   177c4:	be 01       	movw	r22, r28
   177c6:	6f 5b       	subi	r22, 0xBF	; 191
   177c8:	7f 4f       	sbci	r23, 0xFF	; 255
   177ca:	8d 2d       	mov	r24, r13
   177cc:	90 e0       	ldi	r25, 0x00	; 0
   177ce:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.153():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   177d2:	be 01       	movw	r22, r28
   177d4:	6f 5b       	subi	r22, 0xBF	; 191
   177d6:	7f 4f       	sbci	r23, 0xFF	; 255
   177d8:	ce 01       	movw	r24, r28
   177da:	01 96       	adiw	r24, 0x01	; 1
   177dc:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   177e0:	60 e9       	ldi	r22, 0x90	; 144
   177e2:	75 e0       	ldi	r23, 0x05	; 5
   177e4:	ce 01       	movw	r24, r28
   177e6:	01 96       	adiw	r24, 0x01	; 1
   177e8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   177ec:	b7 01       	movw	r22, r14
   177ee:	ce 01       	movw	r24, r28
   177f0:	01 96       	adiw	r24, 0x01	; 1
   177f2:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   177f6:	a8 01       	movw	r20, r16
   177f8:	be 01       	movw	r22, r28
   177fa:	6f 5f       	subi	r22, 0xFF	; 255
   177fc:	7f 4f       	sbci	r23, 0xFF	; 255
   177fe:	8f e2       	ldi	r24, 0x2F	; 47
   17800:	90 e1       	ldi	r25, 0x10	; 16
   17802:	0e 94 70 69 	call	0xd2e0	; 0xd2e0 <PubSubClient::publish(char const*, char const*)>
   17806:	81 11       	cpse	r24, r1
   17808:	09 c0       	rjmp	.+18     	; 0x1781c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]+0xf0>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   1780a:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1780e:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   17812:	01 96       	adiw	r24, 0x01	; 1
   17814:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   17818:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:187
}
   1781c:	ca 5a       	subi	r28, 0xAA	; 170
   1781e:	df 4f       	sbci	r29, 0xFF	; 255
   17820:	0f b6       	in	r0, 0x3f	; 63
   17822:	f8 94       	cli
   17824:	de bf       	out	0x3e, r29	; 62
   17826:	0f be       	out	0x3f, r0	; 63
   17828:	cd bf       	out	0x3d, r28	; 61
   1782a:	df 91       	pop	r29
   1782c:	cf 91       	pop	r28
   1782e:	1f 91       	pop	r17
   17830:	0f 91       	pop	r16
   17832:	ff 90       	pop	r15
   17834:	ef 90       	pop	r14
   17836:	df 90       	pop	r13
   17838:	bf 90       	pop	r11
   1783a:	af 90       	pop	r10
   1783c:	08 95       	ret

0001783e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>:
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:189
///
void send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, uint8_t idx, char *topic, char *payload)
   1783e:	cf 92       	push	r12
   17840:	df 92       	push	r13
   17842:	ef 92       	push	r14
   17844:	ff 92       	push	r15
   17846:	0f 93       	push	r16
   17848:	1f 93       	push	r17
   1784a:	cf 93       	push	r28
   1784c:	df 93       	push	r29
   1784e:	cd b7       	in	r28, 0x3d	; 61
   17850:	de b7       	in	r29, 0x3e	; 62
   17852:	c6 55       	subi	r28, 0x56	; 86
   17854:	d1 09       	sbc	r29, r1
   17856:	0f b6       	in	r0, 0x3f	; 63
   17858:	f8 94       	cli
   1785a:	de bf       	out	0x3e, r29	; 62
   1785c:	0f be       	out	0x3f, r0	; 63
   1785e:	cd bf       	out	0x3d, r28	; 61
   17860:	c8 2e       	mov	r12, r24
   17862:	d6 2e       	mov	r13, r22
   17864:	7a 01       	movw	r14, r20
   17866:	89 01       	movw	r16, r18
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:194
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   17868:	8f e2       	ldi	r24, 0x2F	; 47
   1786a:	90 e1       	ldi	r25, 0x10	; 16
   1786c:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   17870:	88 23       	and	r24, r24
   17872:	09 f4       	brne	.+2      	; 0x17876 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x38>
   17874:	68 c0       	rjmp	.+208    	; 0x17946 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x108>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:196
  {
    mqtt_send_message++;
   17876:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   1787a:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   1787e:	01 96       	adiw	r24, 0x01	; 1
   17880:	90 93 bb 0c 	sts	0x0CBB, r25	; 0x800cbb <mqtt_send_message+0x1>
   17884:	80 93 ba 0c 	sts	0x0CBA, r24	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:197
    device_get_name(hostname);
   17888:	ce 01       	movw	r24, r28
   1788a:	83 5b       	subi	r24, 0xB3	; 179
   1788c:	9f 4f       	sbci	r25, 0xFF	; 255
   1788e:	0e 94 2a 91 	call	0x12254	; 0x12254 <device_get_name(char*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:198
    strcpy_P(str_topic, header_out);
   17892:	60 91 b8 0c 	lds	r22, 0x0CB8	; 0x800cb8 <header_out>
   17896:	70 91 b9 0c 	lds	r23, 0x0CB9	; 0x800cb9 <header_out+0x1>
   1789a:	ce 01       	movw	r24, r28
   1789c:	01 96       	adiw	r24, 0x01	; 1
   1789e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:199
    strcat(str_topic, hostname);
   178a2:	be 01       	movw	r22, r28
   178a4:	63 5b       	subi	r22, 0xB3	; 179
   178a6:	7f 4f       	sbci	r23, 0xFF	; 255
   178a8:	ce 01       	movw	r24, r28
   178aa:	01 96       	adiw	r24, 0x01	; 1
   178ac:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:200
    strcat(str_topic, "/");
   178b0:	60 e9       	ldi	r22, 0x90	; 144
   178b2:	75 e0       	ldi	r23, 0x05	; 5
   178b4:	ce 01       	movw	r24, r28
   178b6:	01 96       	adiw	r24, 0x01	; 1
   178b8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:201
    strcat(str_topic, prefix);
   178bc:	69 ed       	ldi	r22, 0xD9	; 217
   178be:	78 e0       	ldi	r23, 0x08	; 8
   178c0:	ce 01       	movw	r24, r28
   178c2:	01 96       	adiw	r24, 0x01	; 1
   178c4:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:202
    strcat(str_topic, "/");
   178c8:	60 e9       	ldi	r22, 0x90	; 144
   178ca:	75 e0       	ldi	r23, 0x05	; 5
   178cc:	ce 01       	movw	r24, r28
   178ce:	01 96       	adiw	r24, 0x01	; 1
   178d0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   178d4:	4a e0       	ldi	r20, 0x0A	; 10
   178d6:	be 01       	movw	r22, r28
   178d8:	6f 5b       	subi	r22, 0xBF	; 191
   178da:	7f 4f       	sbci	r23, 0xFF	; 255
   178dc:	8c 2d       	mov	r24, r12
   178de:	90 e0       	ldi	r25, 0x00	; 0
   178e0:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:204
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   178e4:	be 01       	movw	r22, r28
   178e6:	6f 5b       	subi	r22, 0xBF	; 191
   178e8:	7f 4f       	sbci	r23, 0xFF	; 255
   178ea:	ce 01       	movw	r24, r28
   178ec:	01 96       	adiw	r24, 0x01	; 1
   178ee:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:205
    strcat(str_topic, "/");
   178f2:	60 e9       	ldi	r22, 0x90	; 144
   178f4:	75 e0       	ldi	r23, 0x05	; 5
   178f6:	ce 01       	movw	r24, r28
   178f8:	01 96       	adiw	r24, 0x01	; 1
   178fa:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   178fe:	4a e0       	ldi	r20, 0x0A	; 10
   17900:	be 01       	movw	r22, r28
   17902:	6f 5b       	subi	r22, 0xBF	; 191
   17904:	7f 4f       	sbci	r23, 0xFF	; 255
   17906:	8d 2d       	mov	r24, r13
   17908:	90 e0       	ldi	r25, 0x00	; 0
   1790a:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
_Z45send_mqtt_message_prefix_id_idx_topic_payloadP12PubSubClientPchhS1_S1_.constprop.151():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:207
    itoa(idx, tmp1, 10);
    strcat(str_topic, tmp1);
   1790e:	be 01       	movw	r22, r28
   17910:	6f 5b       	subi	r22, 0xBF	; 191
   17912:	7f 4f       	sbci	r23, 0xFF	; 255
   17914:	ce 01       	movw	r24, r28
   17916:	01 96       	adiw	r24, 0x01	; 1
   17918:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:208
    strcat(str_topic, "/");
   1791c:	60 e9       	ldi	r22, 0x90	; 144
   1791e:	75 e0       	ldi	r23, 0x05	; 5
   17920:	ce 01       	movw	r24, r28
   17922:	01 96       	adiw	r24, 0x01	; 1
   17924:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:209
    strcat(str_topic, topic);
   17928:	b7 01       	movw	r22, r14
   1792a:	ce 01       	movw	r24, r28
   1792c:	01 96       	adiw	r24, 0x01	; 1
   1792e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:210
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   17932:	a8 01       	movw	r20, r16
   17934:	be 01       	movw	r22, r28
   17936:	6f 5f       	subi	r22, 0xFF	; 255
   17938:	7f 4f       	sbci	r23, 0xFF	; 255
   1793a:	8f e2       	ldi	r24, 0x2F	; 47
   1793c:	90 e1       	ldi	r25, 0x10	; 16
   1793e:	0e 94 70 69 	call	0xd2e0	; 0xd2e0 <PubSubClient::publish(char const*, char const*)>
   17942:	81 11       	cpse	r24, r1
   17944:	09 c0       	rjmp	.+18     	; 0x17958 <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]+0x11a>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:213
  }
  else
    mqtt_error++;
   17946:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1794a:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   1794e:	01 96       	adiw	r24, 0x01	; 1
   17950:	90 93 bd 0c 	sts	0x0CBD, r25	; 0x800cbd <mqtt_error+0x1>
   17954:	80 93 bc 0c 	sts	0x0CBC, r24	; 0x800cbc <mqtt_error>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:214
}
   17958:	ca 5a       	subi	r28, 0xAA	; 170
   1795a:	df 4f       	sbci	r29, 0xFF	; 255
   1795c:	0f b6       	in	r0, 0x3f	; 63
   1795e:	f8 94       	cli
   17960:	de bf       	out	0x3e, r29	; 62
   17962:	0f be       	out	0x3f, r0	; 63
   17964:	cd bf       	out	0x3d, r28	; 61
   17966:	df 91       	pop	r29
   17968:	cf 91       	pop	r28
   1796a:	1f 91       	pop	r17
   1796c:	0f 91       	pop	r16
   1796e:	ff 90       	pop	r15
   17970:	ef 90       	pop	r14
   17972:	df 90       	pop	r13
   17974:	cf 90       	pop	r12
   17976:	08 95       	ret

00017978 <TwoWire::requestFrom(int, int) [clone .constprop.150]>:
_ZN7TwoWire11requestFromEii.constprop.150():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   17978:	68 2f       	mov	r22, r24
   1797a:	88 e6       	ldi	r24, 0x68	; 104
   1797c:	0e 94 d0 b7 	call	0x16fa0	; 0x16fa0 <twi_readFrom.part.0.constprop.201>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   17980:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   17984:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   17988:	08 95       	ret

0001798a <RTC_DS1307::isrunning() [clone .constprop.149]>:
_ZN10RTC_DS13079isrunningEv.constprop.149():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   1798a:	88 e6       	ldi	r24, 0x68	; 104
   1798c:	0e 94 12 b8 	call	0x17024	; 0x17024 <TwoWire::beginTransmission(unsigned char) [clone .constprop.199]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   17990:	60 e0       	ldi	r22, 0x00	; 0
   17992:	88 ef       	ldi	r24, 0xF8	; 248
   17994:	9f e0       	ldi	r25, 0x0F	; 15
   17996:	0e 94 7e 48 	call	0x90fc	; 0x90fc <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   1799a:	88 ef       	ldi	r24, 0xF8	; 248
   1799c:	9f e0       	ldi	r25, 0x0F	; 15
   1799e:	0e 94 dc 65 	call	0xcbb8	; 0xcbb8 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   179a2:	81 e0       	ldi	r24, 0x01	; 1
   179a4:	90 e0       	ldi	r25, 0x00	; 0
   179a6:	0e 94 bc bc 	call	0x17978	; 0x17978 <TwoWire::requestFrom(int, int) [clone .constprop.150]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   179aa:	0e 94 a5 b8 	call	0x1714a	; 0x1714a <TwoWire::read() [clone .constprop.190]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   179ae:	80 58       	subi	r24, 0x80	; 128
   179b0:	87 fb       	bst	r24, 7
   179b2:	88 27       	eor	r24, r24
   179b4:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   179b6:	08 95       	ret

000179b8 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]>:
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:399
  }
}


//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
   179b8:	3f 92       	push	r3
   179ba:	4f 92       	push	r4
   179bc:	5f 92       	push	r5
   179be:	6f 92       	push	r6
   179c0:	7f 92       	push	r7
   179c2:	8f 92       	push	r8
   179c4:	9f 92       	push	r9
   179c6:	af 92       	push	r10
   179c8:	bf 92       	push	r11
   179ca:	cf 92       	push	r12
   179cc:	df 92       	push	r13
   179ce:	ef 92       	push	r14
   179d0:	ff 92       	push	r15
   179d2:	0f 93       	push	r16
   179d4:	1f 93       	push	r17
   179d6:	cf 93       	push	r28
   179d8:	df 93       	push	r29
   179da:	cd b7       	in	r28, 0x3d	; 61
   179dc:	de b7       	in	r29, 0x3e	; 62
   179de:	6b 97       	sbiw	r28, 0x1b	; 27
   179e0:	0f b6       	in	r0, 0x3f	; 63
   179e2:	f8 94       	cli
   179e4:	de bf       	out	0x3e, r29	; 62
   179e6:	0f be       	out	0x3f, r0	; 63
   179e8:	cd bf       	out	0x3d, r28	; 61
   179ea:	7c 01       	movw	r14, r24
   179ec:	16 2f       	mov	r17, r22
   179ee:	6a 01       	movw	r12, r20
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:403
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
   179f0:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:404
  createString(tmp1, '.', device.ntp_server, 4, 10);
   179f2:	0a e0       	ldi	r16, 0x0A	; 10
   179f4:	24 e0       	ldi	r18, 0x04	; 4
   179f6:	47 e6       	ldi	r20, 0x67	; 103
   179f8:	5e e0       	ldi	r21, 0x0E	; 14
   179fa:	6e e2       	ldi	r22, 0x2E	; 46
   179fc:	ce 01       	movw	r24, r28
   179fe:	01 96       	adiw	r24, 0x01	; 1
   17a00:	5c 01       	movw	r10, r24
   17a02:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:405
  timeClient->begin();
   17a06:	c7 01       	movw	r24, r14
   17a08:	0e 94 d6 63 	call	0xc7ac	; 0xc7ac <NTPClient::begin()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:406
  timeClient->setTimeOffset(3600 * offset);
   17a0c:	20 e1       	ldi	r18, 0x10	; 16
   17a0e:	3e e0       	ldi	r19, 0x0E	; 14
   17a10:	12 9f       	mul	r17, r18
   17a12:	c0 01       	movw	r24, r0
   17a14:	13 9f       	mul	r17, r19
   17a16:	90 0d       	add	r25, r0
   17a18:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
   17a1a:	09 2e       	mov	r0, r25
   17a1c:	00 0c       	add	r0, r0
   17a1e:	aa 0b       	sbc	r26, r26
   17a20:	bb 0b       	sbc	r27, r27
   17a22:	f7 01       	movw	r30, r14
   17a24:	87 83       	std	Z+7, r24	; 0x07
   17a26:	90 87       	std	Z+8, r25	; 0x08
   17a28:	a1 87       	std	Z+9, r26	; 0x09
   17a2a:	b2 87       	std	Z+10, r27	; 0x0a
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
   17a2c:	b4 82       	std	Z+4, r11	; 0x04
   17a2e:	a3 82       	std	Z+3, r10	; 0x03
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   17a30:	c7 01       	movw	r24, r14
   17a32:	0e 94 ed 63 	call	0xc7da	; 0xc7da <NTPClient::update()>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:402

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset,  DateTime *now)
{
  char tmp1[20];
  uint8_t ret = 0;
   17a36:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:408
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
   17a38:	88 23       	and	r24, r24
   17a3a:	09 f4       	brne	.+2      	; 0x17a3e <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x86>
   17a3c:	7c c0       	rjmp	.+248    	; 0x17b36 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x17e>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
   17a3e:	c7 01       	movw	r24, r14
   17a40:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17a44:	2c e3       	ldi	r18, 0x3C	; 60
   17a46:	82 2e       	mov	r8, r18
   17a48:	91 2c       	mov	r9, r1
   17a4a:	a1 2c       	mov	r10, r1
   17a4c:	b1 2c       	mov	r11, r1
   17a4e:	a5 01       	movw	r20, r10
   17a50:	94 01       	movw	r18, r8
   17a52:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   17a56:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
   17a58:	c7 01       	movw	r24, r14
   17a5a:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17a5e:	30 e1       	ldi	r19, 0x10	; 16
   17a60:	43 2e       	mov	r4, r19
   17a62:	3e e0       	ldi	r19, 0x0E	; 14
   17a64:	53 2e       	mov	r5, r19
   17a66:	61 2c       	mov	r6, r1
   17a68:	71 2c       	mov	r7, r1
   17a6a:	a3 01       	movw	r20, r6
   17a6c:	92 01       	movw	r18, r4
   17a6e:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   17a72:	a5 01       	movw	r20, r10
   17a74:	94 01       	movw	r18, r8
   17a76:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   17a7a:	a2 2e       	mov	r10, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
   17a7c:	c7 01       	movw	r24, r14
   17a7e:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17a82:	20 e8       	ldi	r18, 0x80	; 128
   17a84:	31 e5       	ldi	r19, 0x51	; 81
   17a86:	41 e0       	ldi	r20, 0x01	; 1
   17a88:	50 e0       	ldi	r21, 0x00	; 0
   17a8a:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   17a8e:	a3 01       	movw	r20, r6
   17a90:	92 01       	movw	r18, r4
   17a92:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   17a96:	92 2e       	mov	r9, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
   17a98:	c7 01       	movw	r24, r14
   17a9a:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17a9e:	6d 8b       	std	Y+21, r22	; 0x15
   17aa0:	7e 8b       	std	Y+22, r23	; 0x16
   17aa2:	8f 8b       	std	Y+23, r24	; 0x17
   17aa4:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
   17aa6:	ce 01       	movw	r24, r28
   17aa8:	45 96       	adiw	r24, 0x15	; 21
   17aaa:	0e 94 68 da 	call	0x1b4d0	; 0x1b4d0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
   17aae:	dc 01       	movw	r26, r24
   17ab0:	13 96       	adiw	r26, 0x03	; 3
   17ab2:	8c 90       	ld	r8, X
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
   17ab4:	c7 01       	movw	r24, r14
   17ab6:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17aba:	6d 8b       	std	Y+21, r22	; 0x15
   17abc:	7e 8b       	std	Y+22, r23	; 0x16
   17abe:	8f 8b       	std	Y+23, r24	; 0x17
   17ac0:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
   17ac2:	ce 01       	movw	r24, r28
   17ac4:	45 96       	adiw	r24, 0x15	; 21
   17ac6:	0e 94 68 da 	call	0x1b4d0	; 0x1b4d0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
   17aca:	fc 01       	movw	r30, r24
   17acc:	05 81       	ldd	r16, Z+5	; 0x05
   17ace:	00 2e       	mov	r0, r16
   17ad0:	00 0c       	add	r0, r0
   17ad2:	11 0b       	sbc	r17, r17
   17ad4:	0f 5f       	subi	r16, 0xFF	; 255
   17ad6:	1f 4f       	sbci	r17, 0xFF	; 255
getYear():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
}

int NTPClient::getYear() const {
  time_t rawtime = this->getEpochTime();
   17ad8:	c7 01       	movw	r24, r14
   17ada:	0e 94 a2 63 	call	0xc744	; 0xc744 <NTPClient::getEpochTime() const>
   17ade:	6d 8b       	std	Y+21, r22	; 0x15
   17ae0:	7e 8b       	std	Y+22, r23	; 0x16
   17ae2:	8f 8b       	std	Y+23, r24	; 0x17
   17ae4:	98 8f       	std	Y+24, r25	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   17ae6:	ce 01       	movw	r24, r28
   17ae8:	45 96       	adiw	r24, 0x15	; 21
   17aea:	0e 94 68 da 	call	0x1b4d0	; 0x1b4d0 <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   17aee:	dc 01       	movw	r26, r24
   17af0:	16 96       	adiw	r26, 0x06	; 6
   17af2:	2d 91       	ld	r18, X+
   17af4:	3c 91       	ld	r19, X
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
  {
    rtc->adjust(DateTime(timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
   17af6:	c9 01       	movw	r24, r18
   17af8:	84 59       	subi	r24, 0x94	; 148
   17afa:	98 4f       	sbci	r25, 0xF8	; 248
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   17afc:	80 3d       	cpi	r24, 0xD0	; 208
   17afe:	b7 e0       	ldi	r27, 0x07	; 7
   17b00:	9b 07       	cpc	r25, r27
   17b02:	10 f0       	brcs	.+4      	; 0x17b08 <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x150>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
   17b04:	80 5d       	subi	r24, 0xD0	; 208
   17b06:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
   17b08:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
   17b0a:	0e 8b       	std	Y+22, r16	; 0x16
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
   17b0c:	8f 8a       	std	Y+23, r8	; 0x17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
   17b0e:	98 8e       	std	Y+24, r9	; 0x18
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
   17b10:	a9 8e       	std	Y+25, r10	; 0x19
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
   17b12:	3a 8e       	std	Y+26, r3	; 0x1a
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:410
   17b14:	ce 01       	movw	r24, r28
   17b16:	45 96       	adiw	r24, 0x15	; 21
   17b18:	0e 94 c8 67 	call	0xcf90	; 0xcf90 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:411
    *now = rtc->now();
   17b1c:	ce 01       	movw	r24, r28
   17b1e:	45 96       	adiw	r24, 0x15	; 21
   17b20:	0e 94 39 67 	call	0xce72	; 0xce72 <RTC_DS1307::now()>
   17b24:	87 e0       	ldi	r24, 0x07	; 7
   17b26:	fe 01       	movw	r30, r28
   17b28:	75 96       	adiw	r30, 0x15	; 21
   17b2a:	d6 01       	movw	r26, r12
   17b2c:	01 90       	ld	r0, Z+
   17b2e:	0d 92       	st	X+, r0
   17b30:	8a 95       	dec	r24
   17b32:	e1 f7       	brne	.-8      	; 0x17b2c <ntp_update(NTPClient*, RTC_DS1307*, unsigned char, DateTime*) [clone .constprop.147]+0x174>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:412
    ret = 1;
   17b34:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
   17b36:	f7 01       	movw	r30, r14
   17b38:	80 81       	ld	r24, Z
   17b3a:	91 81       	ldd	r25, Z+1	; 0x01
   17b3c:	dc 01       	movw	r26, r24
   17b3e:	ed 91       	ld	r30, X+
   17b40:	fc 91       	ld	r31, X
   17b42:	02 88       	ldd	r0, Z+18	; 0x12
   17b44:	f3 89       	ldd	r31, Z+19	; 0x13
   17b46:	e0 2d       	mov	r30, r0
   17b48:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
   17b4a:	f7 01       	movw	r30, r14
   17b4c:	12 82       	std	Z+2, r1	; 0x02
_Z10ntp_updateP9NTPClientP10RTC_DS1307hP8DateTime.constprop.147():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:416
  }
  timeClient->end();
  return ret;
}
   17b4e:	81 2f       	mov	r24, r17
   17b50:	6b 96       	adiw	r28, 0x1b	; 27
   17b52:	0f b6       	in	r0, 0x3f	; 63
   17b54:	f8 94       	cli
   17b56:	de bf       	out	0x3e, r29	; 62
   17b58:	0f be       	out	0x3f, r0	; 63
   17b5a:	cd bf       	out	0x3d, r28	; 61
   17b5c:	df 91       	pop	r29
   17b5e:	cf 91       	pop	r28
   17b60:	1f 91       	pop	r17
   17b62:	0f 91       	pop	r16
   17b64:	ff 90       	pop	r15
   17b66:	ef 90       	pop	r14
   17b68:	df 90       	pop	r13
   17b6a:	cf 90       	pop	r12
   17b6c:	bf 90       	pop	r11
   17b6e:	af 90       	pop	r10
   17b70:	9f 90       	pop	r9
   17b72:	8f 90       	pop	r8
   17b74:	7f 90       	pop	r7
   17b76:	6f 90       	pop	r6
   17b78:	5f 90       	pop	r5
   17b7a:	4f 90       	pop	r4
   17b7c:	3f 90       	pop	r3
   17b7e:	08 95       	ret

00017b80 <DateTime::DateTime(unsigned long) [clone .constprop.146]>:
_ZN8DateTimeC2Em.constprop.146():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:74

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   17b80:	dc 01       	movw	r26, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:77
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   17b82:	80 e1       	ldi	r24, 0x10	; 16
   17b84:	15 96       	adiw	r26, 0x05	; 5
   17b86:	8c 93       	st	X, r24
   17b88:	15 97       	sbiw	r26, 0x05	; 5
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:79
    t /= 60;
    mm = t % 60;
   17b8a:	8c e1       	ldi	r24, 0x1C	; 28
   17b8c:	14 96       	adiw	r26, 0x04	; 4
   17b8e:	8c 93       	st	X, r24
   17b90:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:81
    t /= 60;
    hh = t % 24;
   17b92:	86 e0       	ldi	r24, 0x06	; 6
   17b94:	13 96       	adiw	r26, 0x03	; 3
   17b96:	8c 93       	st	X, r24
   17b98:	13 97       	sbiw	r26, 0x03	; 3
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   17b9a:	1c 92       	st	X, r1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:82
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   17b9c:	81 e6       	ldi	r24, 0x61	; 97
   17b9e:	97 e9       	ldi	r25, 0x97	; 151
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   17ba0:	63 e9       	ldi	r22, 0x93	; 147
   17ba2:	7e ef       	ldi	r23, 0xFE	; 254
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:85
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
        leap = yOff % 4 == 0;
   17ba4:	4c 91       	ld	r20, X
   17ba6:	54 2f       	mov	r21, r20
   17ba8:	53 70       	andi	r21, 0x03	; 3
   17baa:	21 e0       	ldi	r18, 0x01	; 1
   17bac:	09 f0       	breq	.+2      	; 0x17bb0 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x30>
   17bae:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:86
        if (days < 365 + leap)
   17bb0:	30 e0       	ldi	r19, 0x00	; 0
   17bb2:	f9 01       	movw	r30, r18
   17bb4:	e3 59       	subi	r30, 0x93	; 147
   17bb6:	fe 4f       	sbci	r31, 0xFE	; 254
   17bb8:	8e 17       	cp	r24, r30
   17bba:	9f 07       	cpc	r25, r31
   17bbc:	40 f0       	brcs	.+16     	; 0x17bce <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x4e>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:88
            break;
        days -= 365 + leap;
   17bbe:	fb 01       	movw	r30, r22
   17bc0:	e2 1b       	sub	r30, r18
   17bc2:	f3 0b       	sbc	r31, r19
   17bc4:	8e 0f       	add	r24, r30
   17bc6:	9f 1f       	adc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:84
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   17bc8:	4f 5f       	subi	r20, 0xFF	; 255
   17bca:	4c 93       	st	X, r20
   17bcc:	eb cf       	rjmp	.-42     	; 0x17ba4 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x24>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   17bce:	21 e0       	ldi	r18, 0x01	; 1
   17bd0:	11 96       	adiw	r26, 0x01	; 1
   17bd2:	2c 93       	st	X, r18
   17bd4:	11 97       	sbiw	r26, 0x01	; 1
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:91
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   17bd6:	11 96       	adiw	r26, 0x01	; 1
   17bd8:	2c 91       	ld	r18, X
   17bda:	11 97       	sbiw	r26, 0x01	; 1
   17bdc:	62 2f       	mov	r22, r18
   17bde:	61 50       	subi	r22, 0x01	; 1
   17be0:	77 0b       	sbc	r23, r23
   17be2:	fb 01       	movw	r30, r22
   17be4:	e8 5a       	subi	r30, 0xA8	; 168
   17be6:	f7 47       	sbci	r31, 0x77	; 119
   17be8:	e4 91       	lpm	r30, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:92
        if (leap && m == 2)
   17bea:	51 11       	cpse	r21, r1
   17bec:	03 c0       	rjmp	.+6      	; 0x17bf4 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
   17bee:	22 30       	cpi	r18, 0x02	; 2
   17bf0:	09 f4       	brne	.+2      	; 0x17bf4 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x74>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:93
            ++daysPerMonth;
   17bf2:	ef 5f       	subi	r30, 0xFF	; 255
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:94
        if (days < daysPerMonth)
   17bf4:	f0 e0       	ldi	r31, 0x00	; 0
   17bf6:	8e 17       	cp	r24, r30
   17bf8:	9f 07       	cpc	r25, r31
   17bfa:	20 f0       	brcs	.+8      	; 0x17c04 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x84>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:96
            break;
        days -= daysPerMonth;
   17bfc:	8e 1b       	sub	r24, r30
   17bfe:	9f 0b       	sbc	r25, r31
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:90
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   17c00:	2f 5f       	subi	r18, 0xFF	; 255
   17c02:	e6 cf       	rjmp	.-52     	; 0x17bd0 <DateTime::DateTime(unsigned long) [clone .constprop.146]+0x50>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:98
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   17c04:	8f 5f       	subi	r24, 0xFF	; 255
   17c06:	12 96       	adiw	r26, 0x02	; 2
   17c08:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:99
}
   17c0a:	08 95       	ret

00017c0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>:
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:635





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   17c0c:	2f 92       	push	r2
   17c0e:	3f 92       	push	r3
   17c10:	4f 92       	push	r4
   17c12:	5f 92       	push	r5
   17c14:	6f 92       	push	r6
   17c16:	7f 92       	push	r7
   17c18:	8f 92       	push	r8
   17c1a:	9f 92       	push	r9
   17c1c:	af 92       	push	r10
   17c1e:	bf 92       	push	r11
   17c20:	cf 92       	push	r12
   17c22:	df 92       	push	r13
   17c24:	ef 92       	push	r14
   17c26:	ff 92       	push	r15
   17c28:	0f 93       	push	r16
   17c2a:	1f 93       	push	r17
   17c2c:	cf 93       	push	r28
   17c2e:	df 93       	push	r29
   17c30:	cd b7       	in	r28, 0x3d	; 61
   17c32:	de b7       	in	r29, 0x3e	; 62
   17c34:	c3 5e       	subi	r28, 0xE3	; 227
   17c36:	d1 09       	sbc	r29, r1
   17c38:	0f b6       	in	r0, 0x3f	; 63
   17c3a:	f8 94       	cli
   17c3c:	de bf       	out	0x3e, r29	; 62
   17c3e:	0f be       	out	0x3f, r0	; 63
   17c40:	cd bf       	out	0x3d, r28	; 61
   17c42:	a8 2e       	mov	r10, r24
   17c44:	ca 53       	subi	r28, 0x3A	; 58
   17c46:	df 4f       	sbci	r29, 0xFF	; 255
   17c48:	79 83       	std	Y+1, r23	; 0x01
   17c4a:	68 83       	st	Y, r22
   17c4c:	c6 5c       	subi	r28, 0xC6	; 198
   17c4e:	d0 40       	sbci	r29, 0x00	; 0
   17c50:	c8 53       	subi	r28, 0x38	; 56
   17c52:	df 4f       	sbci	r29, 0xFF	; 255
   17c54:	59 83       	std	Y+1, r21	; 0x01
   17c56:	48 83       	st	Y, r20
   17c58:	c8 5c       	subi	r28, 0xC8	; 200
   17c5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:668
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
   17c5c:	ce 01       	movw	r24, r28
   17c5e:	8f 54       	subi	r24, 0x4F	; 79
   17c60:	9f 4f       	sbci	r25, 0xFF	; 255
   17c62:	0e 94 48 a4 	call	0x14890	; 0x14890 <MenuHistoryGetMenu(unsigned char*)>
   17c66:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:670

  global_x = pgm_read_word(&current->x);
   17c68:	8c 01       	movw	r16, r24
   17c6a:	03 52       	subi	r16, 0x23	; 35
   17c6c:	1d 4f       	sbci	r17, 0xFD	; 253
   17c6e:	f8 01       	movw	r30, r16
   17c70:	25 91       	lpm	r18, Z+
   17c72:	34 91       	lpm	r19, Z
   17c74:	c8 54       	subi	r28, 0x48	; 72
   17c76:	df 4f       	sbci	r29, 0xFF	; 255
   17c78:	39 83       	std	Y+1, r19	; 0x01
   17c7a:	28 83       	st	Y, r18
   17c7c:	c8 5b       	subi	r28, 0xB8	; 184
   17c7e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:671
  global_y = pgm_read_word(&current->y);
   17c80:	7c 01       	movw	r14, r24
   17c82:	31 e2       	ldi	r19, 0x21	; 33
   17c84:	e3 1a       	sub	r14, r19
   17c86:	3d ef       	ldi	r19, 0xFD	; 253
   17c88:	f3 0a       	sbc	r15, r19
   17c8a:	f7 01       	movw	r30, r14
   17c8c:	45 91       	lpm	r20, Z+
   17c8e:	54 91       	lpm	r21, Z
   17c90:	c6 54       	subi	r28, 0x46	; 70
   17c92:	df 4f       	sbci	r29, 0xFF	; 255
   17c94:	59 83       	std	Y+1, r21	; 0x01
   17c96:	48 83       	st	Y, r20
   17c98:	ca 5b       	subi	r28, 0xBA	; 186
   17c9a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:674


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
   17c9c:	fc 01       	movw	r30, r24
   17c9e:	e7 51       	subi	r30, 0x17	; 23
   17ca0:	fd 4f       	sbci	r31, 0xFD	; 253
   17ca2:	25 91       	lpm	r18, Z+
   17ca4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:675
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   17ca6:	6c 01       	movw	r12, r24
   17ca8:	54 e2       	ldi	r21, 0x24	; 36
   17caa:	c5 1a       	sub	r12, r21
   17cac:	5d ef       	ldi	r21, 0xFD	; 253
   17cae:	d5 0a       	sbc	r13, r21
   17cb0:	f6 01       	movw	r30, r12
   17cb2:	84 91       	lpm	r24, Z
   17cb4:	cf 54       	subi	r28, 0x4F	; 79
   17cb6:	df 4f       	sbci	r29, 0xFF	; 255
   17cb8:	68 81       	ld	r22, Y
   17cba:	c1 5b       	subi	r28, 0xB1	; 177
   17cbc:	d0 40       	sbci	r29, 0x00	; 0
   17cbe:	70 e0       	ldi	r23, 0x00	; 0
   17cc0:	4f ef       	ldi	r20, 0xFF	; 255
   17cc2:	90 e0       	ldi	r25, 0x00	; 0
   17cc4:	f9 01       	movw	r30, r18
   17cc6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:677
  if (rdr == 0)
    cbi(redraw_class, 0);
   17cc8:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:676
  global_y = pgm_read_word(&current->y);


  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
   17cca:	88 23       	and	r24, r24
   17ccc:	11 f0       	breq	.+4      	; 0x17cd2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:679
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
   17cce:	bb 24       	eor	r11, r11
   17cd0:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:681
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
   17cd2:	f3 01       	movw	r30, r6
   17cd4:	e5 51       	subi	r30, 0x15	; 21
   17cd6:	fd 4f       	sbci	r31, 0xFD	; 253
   17cd8:	25 91       	lpm	r18, Z+
   17cda:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:682
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   17cdc:	f6 01       	movw	r30, r12
   17cde:	84 91       	lpm	r24, Z
   17ce0:	cf 54       	subi	r28, 0x4F	; 79
   17ce2:	df 4f       	sbci	r29, 0xFF	; 255
   17ce4:	68 81       	ld	r22, Y
   17ce6:	c1 5b       	subi	r28, 0xB1	; 177
   17ce8:	d0 40       	sbci	r29, 0x00	; 0
   17cea:	70 e0       	ldi	r23, 0x00	; 0
   17cec:	4f ef       	ldi	r20, 0xFF	; 255
   17cee:	90 e0       	ldi	r25, 0x00	; 0
   17cf0:	f9 01       	movw	r30, r18
   17cf2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:683
  if (rdr == 0)
   17cf4:	81 11       	cpse	r24, r1
   17cf6:	3e c1       	rjmp	.+636    	; 0x17f74 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x368>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:684
    cbi(redraw_class, 1);
   17cf8:	e8 94       	clt
   17cfa:	b1 f8       	bld	r11, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:688
  else
    sbi(redraw_class, 1);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
   17cfc:	f3 01       	movw	r30, r6
   17cfe:	e3 51       	subi	r30, 0x13	; 19
   17d00:	fd 4f       	sbci	r31, 0xFD	; 253
   17d02:	25 91       	lpm	r18, Z+
   17d04:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:689
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   17d06:	f6 01       	movw	r30, r12
   17d08:	84 91       	lpm	r24, Z
   17d0a:	cf 54       	subi	r28, 0x4F	; 79
   17d0c:	df 4f       	sbci	r29, 0xFF	; 255
   17d0e:	68 81       	ld	r22, Y
   17d10:	c1 5b       	subi	r28, 0xB1	; 177
   17d12:	d0 40       	sbci	r29, 0x00	; 0
   17d14:	70 e0       	ldi	r23, 0x00	; 0
   17d16:	4f ef       	ldi	r20, 0xFF	; 255
   17d18:	90 e0       	ldi	r25, 0x00	; 0
   17d1a:	f9 01       	movw	r30, r18
   17d1c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:690
  if (rdr == 0)
   17d1e:	81 11       	cpse	r24, r1
   17d20:	2c c1       	rjmp	.+600    	; 0x17f7a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x36e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:691
    cbi(redraw_class, 2);
   17d22:	e8 94       	clt
   17d24:	b2 f8       	bld	r11, 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:695
  else
    sbi(redraw_class, 2);
  ///
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
   17d26:	f3 01       	movw	r30, r6
   17d28:	e1 51       	subi	r30, 0x11	; 17
   17d2a:	fd 4f       	sbci	r31, 0xFD	; 253
   17d2c:	25 91       	lpm	r18, Z+
   17d2e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:696
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
   17d30:	f6 01       	movw	r30, r12
   17d32:	84 91       	lpm	r24, Z
   17d34:	cf 54       	subi	r28, 0x4F	; 79
   17d36:	df 4f       	sbci	r29, 0xFF	; 255
   17d38:	68 81       	ld	r22, Y
   17d3a:	c1 5b       	subi	r28, 0xB1	; 177
   17d3c:	d0 40       	sbci	r29, 0x00	; 0
   17d3e:	70 e0       	ldi	r23, 0x00	; 0
   17d40:	4f ef       	ldi	r20, 0xFF	; 255
   17d42:	90 e0       	ldi	r25, 0x00	; 0
   17d44:	f9 01       	movw	r30, r18
   17d46:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:697
  if (rdr == 0)
   17d48:	81 11       	cpse	r24, r1
   17d4a:	1a c1       	rjmp	.+564    	; 0x17f80 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x374>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:698
    cbi(redraw_class, 3);
   17d4c:	8b 2d       	mov	r24, r11
   17d4e:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:702
  else
    sbi(redraw_class, 3);
  ///
  if (redraw == false)
   17d50:	a1 10       	cpse	r10, r1
   17d52:	19 c1       	rjmp	.+562    	; 0x17f86 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x37a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:703
    cbi(redraw_class, 4);
   17d54:	8f 7e       	andi	r24, 0xEF	; 239
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:707
  else
    sbi(redraw_class, 4);
  /////
  if (display_redraw_once == 0)
   17d56:	90 91 b6 0c 	lds	r25, 0x0CB6	; 0x800cb6 <display_redraw_once>
   17d5a:	91 11       	cpse	r25, r1
   17d5c:	16 c1       	rjmp	.+556    	; 0x17f8a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x37e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:709
  {
    display_redraw_once = 1;
   17d5e:	91 e0       	ldi	r25, 0x01	; 1
   17d60:	90 93 b6 0c 	sts	0x0CB6, r25	; 0x800cb6 <display_redraw_once>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:710
    sbi(redraw_class, 5);
   17d64:	80 62       	ori	r24, 0x20	; 32
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:714
  }
  else
  {
    cbi(redraw_class, 5);
   17d66:	c1 53       	subi	r28, 0x31	; 49
   17d68:	df 4f       	sbci	r29, 0xFF	; 255
   17d6a:	88 83       	st	Y, r24
   17d6c:	cf 5c       	subi	r28, 0xCF	; 207
   17d6e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:717
  }
  /////
  rdr = pgm_read_byte(&current->redraw_class);
   17d70:	f3 01       	movw	r30, r6
   17d72:	e8 51       	subi	r30, 0x18	; 24
   17d74:	fd 4f       	sbci	r31, 0xFD	; 253
   17d76:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:718
  if (enable_redraw(rdr, redraw_class) == true)
   17d78:	c1 53       	subi	r28, 0x31	; 49
   17d7a:	df 4f       	sbci	r29, 0xFF	; 255
   17d7c:	68 81       	ld	r22, Y
   17d7e:	cf 5c       	subi	r28, 0xCF	; 207
   17d80:	d0 40       	sbci	r29, 0x00	; 0
   17d82:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   17d86:	88 23       	and	r24, r24
   17d88:	d9 f0       	breq	.+54     	; 0x17dc0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:720
  {
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
   17d8a:	f3 01       	movw	r30, r6
   17d8c:	65 91       	lpm	r22, Z+
   17d8e:	74 91       	lpm	r23, Z
   17d90:	ce 01       	movw	r24, r28
   17d92:	01 96       	adiw	r24, 0x01	; 1
   17d94:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:721
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
   17d98:	f7 01       	movw	r30, r14
   17d9a:	45 91       	lpm	r20, Z+
   17d9c:	54 91       	lpm	r21, Z
   17d9e:	f8 01       	movw	r30, r16
   17da0:	65 91       	lpm	r22, Z+
   17da2:	74 91       	lpm	r23, Z
   17da4:	4b 5f       	subi	r20, 0xFB	; 251
   17da6:	5f 4f       	sbci	r21, 0xFF	; 255
   17da8:	6b 5f       	subi	r22, 0xFB	; 251
   17daa:	7f 4f       	sbci	r23, 0xFF	; 255
   17dac:	ee 24       	eor	r14, r14
   17dae:	ea 94       	dec	r14
   17db0:	fe 2c       	mov	r15, r14
   17db2:	10 e0       	ldi	r17, 0x00	; 0
   17db4:	00 e0       	ldi	r16, 0x00	; 0
   17db6:	22 e0       	ldi	r18, 0x02	; 2
   17db8:	ce 01       	movw	r24, r28
   17dba:	01 96       	adiw	r24, 0x01	; 1
   17dbc:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:635





bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
   17dc0:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:725
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  ///
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   17dc2:	13 01       	movw	r2, r6
   17dc4:	fa e2       	ldi	r31, 0x2A	; 42
   17dc6:	2f 1a       	sub	r2, r31
   17dc8:	fd ef       	ldi	r31, 0xFD	; 253
   17dca:	3f 0a       	sbc	r3, r31
   17dcc:	b3 e1       	ldi	r27, 0x13	; 19
   17dce:	5b 2e       	mov	r5, r27
   17dd0:	f1 01       	movw	r30, r2
   17dd2:	84 91       	lpm	r24, Z
   17dd4:	b8 16       	cp	r11, r24
   17dd6:	08 f0       	brcs	.+2      	; 0x17dda <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ce>
   17dd8:	da c0       	rjmp	.+436    	; 0x17f8e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x382>
   17dda:	b5 9c       	mul	r11, r5
   17ddc:	40 01       	movw	r8, r0
   17dde:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:728
  {
    function_1 = &current->function_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&function_1->enable_show);
   17de0:	f4 01       	movw	r30, r8
   17de2:	e2 5d       	subi	r30, 0xD2	; 210
   17de4:	fe 4f       	sbci	r31, 0xFE	; 254
   17de6:	e6 0d       	add	r30, r6
   17de8:	f7 1d       	adc	r31, r7
   17dea:	25 91       	lpm	r18, Z+
   17dec:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:729
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
   17dee:	84 01       	movw	r16, r8
   17df0:	0d 5d       	subi	r16, 0xDD	; 221
   17df2:	1e 4f       	sbci	r17, 0xFE	; 254
   17df4:	06 0d       	add	r16, r6
   17df6:	17 1d       	adc	r17, r7
   17df8:	f8 01       	movw	r30, r16
   17dfa:	84 91       	lpm	r24, Z
   17dfc:	cf 54       	subi	r28, 0x4F	; 79
   17dfe:	df 4f       	sbci	r29, 0xFF	; 255
   17e00:	68 81       	ld	r22, Y
   17e02:	c1 5b       	subi	r28, 0xB1	; 177
   17e04:	d0 40       	sbci	r29, 0x00	; 0
   17e06:	70 e0       	ldi	r23, 0x00	; 0
   17e08:	4b 2d       	mov	r20, r11
   17e0a:	90 e0       	ldi	r25, 0x00	; 0
   17e0c:	f9 01       	movw	r30, r18
   17e0e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:730
    if (active == 0) continue;
   17e10:	88 23       	and	r24, r24
   17e12:	09 f4       	brne	.+2      	; 0x17e16 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x20a>
   17e14:	ad c0       	rjmp	.+346    	; 0x17f70 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x364>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:731
    rdr = pgm_read_byte(&function_1->redraw_class);
   17e16:	f4 01       	movw	r30, r8
   17e18:	e5 5d       	subi	r30, 0xD5	; 213
   17e1a:	fe 4f       	sbci	r31, 0xFE	; 254
   17e1c:	e6 0d       	add	r30, r6
   17e1e:	f7 1d       	adc	r31, r7
   17e20:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:732
    if (enable_redraw(rdr, redraw_class) == true)
   17e22:	c1 53       	subi	r28, 0x31	; 49
   17e24:	df 4f       	sbci	r29, 0xFF	; 255
   17e26:	68 81       	ld	r22, Y
   17e28:	cf 5c       	subi	r28, 0xCF	; 207
   17e2a:	d0 40       	sbci	r29, 0x00	; 0
   17e2c:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   17e30:	88 23       	and	r24, r24
   17e32:	09 f4       	brne	.+2      	; 0x17e36 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x22a>
   17e34:	4b c0       	rjmp	.+150    	; 0x17ecc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:734
    {
      strcpy_P(str1, (char*)pgm_read_word(&function_1->name));
   17e36:	f4 01       	movw	r30, r8
   17e38:	e0 5d       	subi	r30, 0xD0	; 208
   17e3a:	fe 4f       	sbci	r31, 0xFE	; 254
   17e3c:	e6 0d       	add	r30, r6
   17e3e:	f7 1d       	adc	r31, r7
   17e40:	65 91       	lpm	r22, Z+
   17e42:	74 91       	lpm	r23, Z
   17e44:	ce 01       	movw	r24, r28
   17e46:	01 96       	adiw	r24, 0x01	; 1
   17e48:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:735
      fnt_coordinate_xy =  (fptr_coordinate_xy*)pgm_read_word(&function_1->fnt_coordinate_xy);
   17e4c:	f4 01       	movw	r30, r8
   17e4e:	eb 5d       	subi	r30, 0xDB	; 219
   17e50:	fe 4f       	sbci	r31, 0xFE	; 254
   17e52:	e6 0d       	add	r30, r6
   17e54:	f7 1d       	adc	r31, r7
   17e56:	a5 91       	lpm	r26, Z+
   17e58:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:736
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_word(&function_1->args), menu_args1, str1);
   17e5a:	f8 01       	movw	r30, r16
   17e5c:	05 91       	lpm	r16, Z+
   17e5e:	14 91       	lpm	r17, Z
   17e60:	f4 01       	movw	r30, r8
   17e62:	e7 5d       	subi	r30, 0xD7	; 215
   17e64:	fe 4f       	sbci	r31, 0xFE	; 254
   17e66:	e6 0d       	add	r30, r6
   17e68:	f7 1d       	adc	r31, r7
   17e6a:	25 91       	lpm	r18, Z+
   17e6c:	34 91       	lpm	r19, Z
   17e6e:	f4 01       	movw	r30, r8
   17e70:	e9 5d       	subi	r30, 0xD9	; 217
   17e72:	fe 4f       	sbci	r31, 0xFE	; 254
   17e74:	e6 0d       	add	r30, r6
   17e76:	f7 1d       	adc	r31, r7
   17e78:	45 91       	lpm	r20, Z+
   17e7a:	54 91       	lpm	r21, Z
   17e7c:	f4 01       	movw	r30, r8
   17e7e:	ef 5d       	subi	r30, 0xDF	; 223
   17e80:	fe 4f       	sbci	r31, 0xFE	; 254
   17e82:	e6 0d       	add	r30, r6
   17e84:	f7 1d       	adc	r31, r7
   17e86:	65 91       	lpm	r22, Z+
   17e88:	74 91       	lpm	r23, Z
   17e8a:	f4 01       	movw	r30, r8
   17e8c:	e1 5e       	subi	r30, 0xE1	; 225
   17e8e:	fe 4f       	sbci	r31, 0xFE	; 254
   17e90:	e6 0d       	add	r30, r6
   17e92:	f7 1d       	adc	r31, r7
   17e94:	85 91       	lpm	r24, Z+
   17e96:	94 91       	lpm	r25, Z
   17e98:	c6 54       	subi	r28, 0x46	; 70
   17e9a:	df 4f       	sbci	r29, 0xFF	; 255
   17e9c:	e8 81       	ld	r30, Y
   17e9e:	f9 81       	ldd	r31, Y+1	; 0x01
   17ea0:	ca 5b       	subi	r28, 0xBA	; 186
   17ea2:	d0 40       	sbci	r29, 0x00	; 0
   17ea4:	6e 0f       	add	r22, r30
   17ea6:	7f 1f       	adc	r23, r31
   17ea8:	fe 01       	movw	r30, r28
   17eaa:	31 96       	adiw	r30, 0x01	; 1
   17eac:	6f 01       	movw	r12, r30
   17eae:	cf 54       	subi	r28, 0x4F	; 79
   17eb0:	df 4f       	sbci	r29, 0xFF	; 255
   17eb2:	e8 80       	ld	r14, Y
   17eb4:	c1 5b       	subi	r28, 0xB1	; 177
   17eb6:	d0 40       	sbci	r29, 0x00	; 0
   17eb8:	c8 54       	subi	r28, 0x48	; 72
   17eba:	df 4f       	sbci	r29, 0xFF	; 255
   17ebc:	e8 81       	ld	r30, Y
   17ebe:	f9 81       	ldd	r31, Y+1	; 0x01
   17ec0:	c8 5b       	subi	r28, 0xB8	; 184
   17ec2:	d0 40       	sbci	r29, 0x00	; 0
   17ec4:	8e 0f       	add	r24, r30
   17ec6:	9f 1f       	adc	r25, r31
   17ec8:	fd 01       	movw	r30, r26
   17eca:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:738
    }
    if (click_x > 0 && click_y > 0)
   17ecc:	ca 53       	subi	r28, 0x3A	; 58
   17ece:	df 4f       	sbci	r29, 0xFF	; 255
   17ed0:	28 81       	ld	r18, Y
   17ed2:	39 81       	ldd	r19, Y+1	; 0x01
   17ed4:	c6 5c       	subi	r28, 0xC6	; 198
   17ed6:	d0 40       	sbci	r29, 0x00	; 0
   17ed8:	23 2b       	or	r18, r19
   17eda:	09 f4       	brne	.+2      	; 0x17ede <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2d2>
   17edc:	49 c0       	rjmp	.+146    	; 0x17f70 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x364>
   17ede:	c8 53       	subi	r28, 0x38	; 56
   17ee0:	df 4f       	sbci	r29, 0xFF	; 255
   17ee2:	48 81       	ld	r20, Y
   17ee4:	59 81       	ldd	r21, Y+1	; 0x01
   17ee6:	c8 5c       	subi	r28, 0xC8	; 200
   17ee8:	d0 40       	sbci	r29, 0x00	; 0
   17eea:	45 2b       	or	r20, r21
   17eec:	09 f4       	brne	.+2      	; 0x17ef0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2e4>
   17eee:	40 c0       	rjmp	.+128    	; 0x17f70 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x364>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:739
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
   17ef0:	f4 01       	movw	r30, r8
   17ef2:	e7 5d       	subi	r30, 0xD7	; 215
   17ef4:	fe 4f       	sbci	r31, 0xFE	; 254
   17ef6:	e6 0d       	add	r30, r6
   17ef8:	f7 1d       	adc	r31, r7
   17efa:	25 91       	lpm	r18, Z+
   17efc:	34 91       	lpm	r19, Z
   17efe:	f4 01       	movw	r30, r8
   17f00:	e9 5d       	subi	r30, 0xD9	; 217
   17f02:	fe 4f       	sbci	r31, 0xFE	; 254
   17f04:	e6 0d       	add	r30, r6
   17f06:	f7 1d       	adc	r31, r7
   17f08:	45 91       	lpm	r20, Z+
   17f0a:	54 91       	lpm	r21, Z
   17f0c:	f4 01       	movw	r30, r8
   17f0e:	ef 5d       	subi	r30, 0xDF	; 223
   17f10:	fe 4f       	sbci	r31, 0xFE	; 254
   17f12:	e6 0d       	add	r30, r6
   17f14:	f7 1d       	adc	r31, r7
   17f16:	65 91       	lpm	r22, Z+
   17f18:	74 91       	lpm	r23, Z
   17f1a:	f4 01       	movw	r30, r8
   17f1c:	e1 5e       	subi	r30, 0xE1	; 225
   17f1e:	fe 4f       	sbci	r31, 0xFE	; 254
   17f20:	e6 0d       	add	r30, r6
   17f22:	f7 1d       	adc	r31, r7
   17f24:	85 91       	lpm	r24, Z+
   17f26:	94 91       	lpm	r25, Z
   17f28:	c6 54       	subi	r28, 0x46	; 70
   17f2a:	df 4f       	sbci	r29, 0xFF	; 255
   17f2c:	e8 81       	ld	r30, Y
   17f2e:	f9 81       	ldd	r31, Y+1	; 0x01
   17f30:	ca 5b       	subi	r28, 0xBA	; 186
   17f32:	d0 40       	sbci	r29, 0x00	; 0
   17f34:	6e 0f       	add	r22, r30
   17f36:	7f 1f       	adc	r23, r31
   17f38:	c8 53       	subi	r28, 0x38	; 56
   17f3a:	df 4f       	sbci	r29, 0xFF	; 255
   17f3c:	e8 80       	ld	r14, Y
   17f3e:	f9 80       	ldd	r15, Y+1	; 0x01
   17f40:	c8 5c       	subi	r28, 0xC8	; 200
   17f42:	d0 40       	sbci	r29, 0x00	; 0
   17f44:	ca 53       	subi	r28, 0x3A	; 58
   17f46:	df 4f       	sbci	r29, 0xFF	; 255
   17f48:	08 81       	ld	r16, Y
   17f4a:	19 81       	ldd	r17, Y+1	; 0x01
   17f4c:	c6 5c       	subi	r28, 0xC6	; 198
   17f4e:	d0 40       	sbci	r29, 0x00	; 0
   17f50:	c8 54       	subi	r28, 0x48	; 72
   17f52:	df 4f       	sbci	r29, 0xFF	; 255
   17f54:	e8 81       	ld	r30, Y
   17f56:	f9 81       	ldd	r31, Y+1	; 0x01
   17f58:	c8 5b       	subi	r28, 0xB8	; 184
   17f5a:	d0 40       	sbci	r29, 0x00	; 0
   17f5c:	8e 0f       	add	r24, r30
   17f5e:	9f 1f       	adc	r25, r31
   17f60:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   17f64:	88 23       	and	r24, r24
   17f66:	21 f0       	breq	.+8      	; 0x17f70 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x364>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:744
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
   17f68:	87 ee       	ldi	r24, 0xE7	; 231
   17f6a:	98 e0       	ldi	r25, 0x08	; 8
   17f6c:	0e 94 6b fb 	call	0x1f6d6	; 0x1f6d6 <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:725
    strcpy_P(str1, (char*)pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  ///
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
   17f70:	b3 94       	inc	r11
   17f72:	2e cf       	rjmp	.-420    	; 0x17dd0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1c4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:686
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
   17f74:	68 94       	set
   17f76:	b1 f8       	bld	r11, 1
   17f78:	c1 ce       	rjmp	.-638    	; 0x17cfc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:693
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
   17f7a:	68 94       	set
   17f7c:	b2 f8       	bld	r11, 2
   17f7e:	d3 ce       	rjmp	.-602    	; 0x17d26 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x11a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:700
  rfnt = (ret_fptr*)pgm_read_word(&current->redraw_class_3);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
   17f80:	8b 2d       	mov	r24, r11
   17f82:	88 60       	ori	r24, 0x08	; 8
   17f84:	e5 ce       	rjmp	.-566    	; 0x17d50 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x144>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:705
  ///
  if (redraw == false)
    cbi(redraw_class, 4);
  else
    sbi(redraw_class, 4);
   17f86:	80 61       	ori	r24, 0x10	; 16
   17f88:	e6 ce       	rjmp	.-564    	; 0x17d56 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:714
    display_redraw_once = 1;
    sbi(redraw_class, 5);
  }
  else
  {
    cbi(redraw_class, 5);
   17f8a:	8f 7d       	andi	r24, 0xDF	; 223
   17f8c:	ec ce       	rjmp	.-552    	; 0x17d66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x15a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:751
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   17f8e:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:637



bool draw_menu(bool redraw, uint8_t click_type, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
   17f90:	c4 53       	subi	r28, 0x34	; 52
   17f92:	df 4f       	sbci	r29, 0xFF	; 255
   17f94:	18 82       	st	Y, r1
   17f96:	cc 5c       	subi	r28, 0xCC	; 204
   17f98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:751
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   17f9a:	93 01       	movw	r18, r6
   17f9c:	2c 52       	subi	r18, 0x2C	; 44
   17f9e:	3d 4f       	sbci	r19, 0xFD	; 253
   17fa0:	ca 54       	subi	r28, 0x4A	; 74
   17fa2:	df 4f       	sbci	r29, 0xFF	; 255
   17fa4:	39 83       	std	Y+1, r19	; 0x01
   17fa6:	28 83       	st	Y, r18
   17fa8:	c6 5b       	subi	r28, 0xB6	; 182
   17faa:	d0 40       	sbci	r29, 0x00	; 0
   17fac:	ca 54       	subi	r28, 0x4A	; 74
   17fae:	df 4f       	sbci	r29, 0xFF	; 255
   17fb0:	e8 81       	ld	r30, Y
   17fb2:	f9 81       	ldd	r31, Y+1	; 0x01
   17fb4:	c6 5b       	subi	r28, 0xB6	; 182
   17fb6:	d0 40       	sbci	r29, 0x00	; 0
   17fb8:	84 91       	lpm	r24, Z
   17fba:	98 16       	cp	r9, r24
   17fbc:	08 f0       	brcs	.+2      	; 0x17fc0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3b4>
   17fbe:	d9 c0       	rjmp	.+434    	; 0x18172 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x566>
   17fc0:	89 2d       	mov	r24, r9
   17fc2:	90 e0       	ldi	r25, 0x00	; 0
   17fc4:	01 96       	adiw	r24, 0x01	; 1
   17fc6:	f1 e1       	ldi	r31, 0x11	; 17
   17fc8:	f8 9f       	mul	r31, r24
   17fca:	20 01       	movw	r4, r0
   17fcc:	f9 9f       	mul	r31, r25
   17fce:	50 0c       	add	r5, r0
   17fd0:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:754
  {
    button_1 = &current->button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_1->enable_show);
   17fd2:	f3 01       	movw	r30, r6
   17fd4:	e4 0d       	add	r30, r4
   17fd6:	f5 1d       	adc	r31, r5
   17fd8:	25 91       	lpm	r18, Z+
   17fda:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:755
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, idx);
   17fdc:	12 01       	movw	r2, r4
   17fde:	44 e0       	ldi	r20, 0x04	; 4
   17fe0:	24 1a       	sub	r2, r20
   17fe2:	31 08       	sbc	r3, r1
   17fe4:	26 0c       	add	r2, r6
   17fe6:	37 1c       	adc	r3, r7
   17fe8:	f1 01       	movw	r30, r2
   17fea:	84 91       	lpm	r24, Z
   17fec:	cf 54       	subi	r28, 0x4F	; 79
   17fee:	df 4f       	sbci	r29, 0xFF	; 255
   17ff0:	68 81       	ld	r22, Y
   17ff2:	c1 5b       	subi	r28, 0xB1	; 177
   17ff4:	d0 40       	sbci	r29, 0x00	; 0
   17ff6:	70 e0       	ldi	r23, 0x00	; 0
   17ff8:	49 2d       	mov	r20, r9
   17ffa:	90 e0       	ldi	r25, 0x00	; 0
   17ffc:	f9 01       	movw	r30, r18
   17ffe:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:756
    if (active == 0) continue;
   18000:	88 23       	and	r24, r24
   18002:	09 f4       	brne	.+2      	; 0x18006 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3fa>
   18004:	b4 c0       	rjmp	.+360    	; 0x1816e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x562>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:757
    rdr = pgm_read_byte(&button_1->redraw_class);
   18006:	f2 01       	movw	r30, r4
   18008:	31 97       	sbiw	r30, 0x01	; 1
   1800a:	e6 0d       	add	r30, r6
   1800c:	f7 1d       	adc	r31, r7
   1800e:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:758
    if (enable_redraw(rdr, redraw_class) == true)
   18010:	c1 53       	subi	r28, 0x31	; 49
   18012:	df 4f       	sbci	r29, 0xFF	; 255
   18014:	68 81       	ld	r22, Y
   18016:	cf 5c       	subi	r28, 0xCF	; 207
   18018:	d0 40       	sbci	r29, 0x00	; 0
   1801a:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   1801e:	88 23       	and	r24, r24
   18020:	09 f4       	brne	.+2      	; 0x18024 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x418>
   18022:	43 c0       	rjmp	.+134    	; 0x180aa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x49e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:760
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_1->name));
   18024:	f2 01       	movw	r30, r4
   18026:	3f 97       	sbiw	r30, 0x0f	; 15
   18028:	e6 0d       	add	r30, r6
   1802a:	f7 1d       	adc	r31, r7
   1802c:	65 91       	lpm	r22, Z+
   1802e:	74 91       	lpm	r23, Z
   18030:	ce 01       	movw	r24, r28
   18032:	8f 57       	subi	r24, 0x7F	; 127
   18034:	9f 4f       	sbci	r25, 0xFF	; 255
   18036:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:761
      str1[0] = 0;
   1803a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:762
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
   1803c:	f2 01       	movw	r30, r4
   1803e:	35 97       	sbiw	r30, 0x05	; 5
   18040:	e6 0d       	add	r30, r6
   18042:	f7 1d       	adc	r31, r7
   18044:	e4 90       	lpm	r14, Z
   18046:	04 91       	lpm	r16, Z
   18048:	f2 01       	movw	r30, r4
   1804a:	37 97       	sbiw	r30, 0x07	; 7
   1804c:	e6 0d       	add	r30, r6
   1804e:	f7 1d       	adc	r31, r7
   18050:	25 91       	lpm	r18, Z+
   18052:	34 91       	lpm	r19, Z
   18054:	f2 01       	movw	r30, r4
   18056:	39 97       	sbiw	r30, 0x09	; 9
   18058:	e6 0d       	add	r30, r6
   1805a:	f7 1d       	adc	r31, r7
   1805c:	45 91       	lpm	r20, Z+
   1805e:	54 91       	lpm	r21, Z
   18060:	f2 01       	movw	r30, r4
   18062:	3b 97       	sbiw	r30, 0x0b	; 11
   18064:	e6 0d       	add	r30, r6
   18066:	f7 1d       	adc	r31, r7
   18068:	65 91       	lpm	r22, Z+
   1806a:	74 91       	lpm	r23, Z
   1806c:	f2 01       	movw	r30, r4
   1806e:	3d 97       	sbiw	r30, 0x0d	; 13
   18070:	e6 0d       	add	r30, r6
   18072:	f7 1d       	adc	r31, r7
   18074:	85 91       	lpm	r24, Z+
   18076:	94 91       	lpm	r25, Z
   18078:	c6 54       	subi	r28, 0x46	; 70
   1807a:	df 4f       	sbci	r29, 0xFF	; 255
   1807c:	e8 81       	ld	r30, Y
   1807e:	f9 81       	ldd	r31, Y+1	; 0x01
   18080:	ca 5b       	subi	r28, 0xBA	; 186
   18082:	d0 40       	sbci	r29, 0x00	; 0
   18084:	6e 0f       	add	r22, r30
   18086:	7f 1f       	adc	r23, r31
   18088:	81 2c       	mov	r8, r1
   1808a:	fe 01       	movw	r30, r28
   1808c:	31 96       	adiw	r30, 0x01	; 1
   1808e:	5f 01       	movw	r10, r30
   18090:	e0 58       	subi	r30, 0x80	; 128
   18092:	ff 4f       	sbci	r31, 0xFF	; 255
   18094:	6f 01       	movw	r12, r30
   18096:	c8 54       	subi	r28, 0x48	; 72
   18098:	df 4f       	sbci	r29, 0xFF	; 255
   1809a:	e8 81       	ld	r30, Y
   1809c:	f9 81       	ldd	r31, Y+1	; 0x01
   1809e:	c8 5b       	subi	r28, 0xB8	; 184
   180a0:	d0 40       	sbci	r29, 0x00	; 0
   180a2:	8e 0f       	add	r24, r30
   180a4:	9f 1f       	adc	r25, r31
   180a6:	0e 94 2c a3 	call	0x14658	; 0x14658 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:764
    }
    if (click_x > 0 && click_y > 0)
   180aa:	ca 53       	subi	r28, 0x3A	; 58
   180ac:	df 4f       	sbci	r29, 0xFF	; 255
   180ae:	28 81       	ld	r18, Y
   180b0:	39 81       	ldd	r19, Y+1	; 0x01
   180b2:	c6 5c       	subi	r28, 0xC6	; 198
   180b4:	d0 40       	sbci	r29, 0x00	; 0
   180b6:	23 2b       	or	r18, r19
   180b8:	09 f4       	brne	.+2      	; 0x180bc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4b0>
   180ba:	59 c0       	rjmp	.+178    	; 0x1816e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x562>
   180bc:	c8 53       	subi	r28, 0x38	; 56
   180be:	df 4f       	sbci	r29, 0xFF	; 255
   180c0:	48 81       	ld	r20, Y
   180c2:	59 81       	ldd	r21, Y+1	; 0x01
   180c4:	c8 5c       	subi	r28, 0xC8	; 200
   180c6:	d0 40       	sbci	r29, 0x00	; 0
   180c8:	45 2b       	or	r20, r21
   180ca:	09 f4       	brne	.+2      	; 0x180ce <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x4c2>
   180cc:	50 c0       	rjmp	.+160    	; 0x1816e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x562>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:765
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
   180ce:	f2 01       	movw	r30, r4
   180d0:	37 97       	sbiw	r30, 0x07	; 7
   180d2:	e6 0d       	add	r30, r6
   180d4:	f7 1d       	adc	r31, r7
   180d6:	25 91       	lpm	r18, Z+
   180d8:	34 91       	lpm	r19, Z
   180da:	f2 01       	movw	r30, r4
   180dc:	39 97       	sbiw	r30, 0x09	; 9
   180de:	e6 0d       	add	r30, r6
   180e0:	f7 1d       	adc	r31, r7
   180e2:	45 91       	lpm	r20, Z+
   180e4:	54 91       	lpm	r21, Z
   180e6:	f2 01       	movw	r30, r4
   180e8:	3b 97       	sbiw	r30, 0x0b	; 11
   180ea:	e6 0d       	add	r30, r6
   180ec:	f7 1d       	adc	r31, r7
   180ee:	65 91       	lpm	r22, Z+
   180f0:	74 91       	lpm	r23, Z
   180f2:	f2 01       	movw	r30, r4
   180f4:	3d 97       	sbiw	r30, 0x0d	; 13
   180f6:	e6 0d       	add	r30, r6
   180f8:	f7 1d       	adc	r31, r7
   180fa:	85 91       	lpm	r24, Z+
   180fc:	94 91       	lpm	r25, Z
   180fe:	c6 54       	subi	r28, 0x46	; 70
   18100:	df 4f       	sbci	r29, 0xFF	; 255
   18102:	e8 81       	ld	r30, Y
   18104:	f9 81       	ldd	r31, Y+1	; 0x01
   18106:	ca 5b       	subi	r28, 0xBA	; 186
   18108:	d0 40       	sbci	r29, 0x00	; 0
   1810a:	6e 0f       	add	r22, r30
   1810c:	7f 1f       	adc	r23, r31
   1810e:	c8 53       	subi	r28, 0x38	; 56
   18110:	df 4f       	sbci	r29, 0xFF	; 255
   18112:	e8 80       	ld	r14, Y
   18114:	f9 80       	ldd	r15, Y+1	; 0x01
   18116:	c8 5c       	subi	r28, 0xC8	; 200
   18118:	d0 40       	sbci	r29, 0x00	; 0
   1811a:	ca 53       	subi	r28, 0x3A	; 58
   1811c:	df 4f       	sbci	r29, 0xFF	; 255
   1811e:	08 81       	ld	r16, Y
   18120:	19 81       	ldd	r17, Y+1	; 0x01
   18122:	c6 5c       	subi	r28, 0xC6	; 198
   18124:	d0 40       	sbci	r29, 0x00	; 0
   18126:	c8 54       	subi	r28, 0x48	; 72
   18128:	df 4f       	sbci	r29, 0xFF	; 255
   1812a:	e8 81       	ld	r30, Y
   1812c:	f9 81       	ldd	r31, Y+1	; 0x01
   1812e:	c8 5b       	subi	r28, 0xB8	; 184
   18130:	d0 40       	sbci	r29, 0x00	; 0
   18132:	8e 0f       	add	r24, r30
   18134:	9f 1f       	adc	r25, r31
   18136:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1813a:	18 2f       	mov	r17, r24
   1813c:	88 23       	and	r24, r24
   1813e:	b9 f0       	breq	.+46     	; 0x1816e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x562>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:767
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
   18140:	f2 01       	movw	r30, r4
   18142:	33 97       	sbiw	r30, 0x03	; 3
   18144:	e6 0d       	add	r30, r6
   18146:	f7 1d       	adc	r31, r7
   18148:	25 91       	lpm	r18, Z+
   1814a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:768
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
   1814c:	f1 01       	movw	r30, r2
   1814e:	84 91       	lpm	r24, Z
   18150:	cf 54       	subi	r28, 0x4F	; 79
   18152:	df 4f       	sbci	r29, 0xFF	; 255
   18154:	68 81       	ld	r22, Y
   18156:	c1 5b       	subi	r28, 0xB1	; 177
   18158:	d0 40       	sbci	r29, 0x00	; 0
   1815a:	70 e0       	ldi	r23, 0x00	; 0
   1815c:	49 2d       	mov	r20, r9
   1815e:	90 e0       	ldi	r25, 0x00	; 0
   18160:	f9 01       	movw	r30, r18
   18162:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:769
        ret = true;
   18164:	c4 53       	subi	r28, 0x34	; 52
   18166:	df 4f       	sbci	r29, 0xFF	; 255
   18168:	18 83       	st	Y, r17
   1816a:	cc 5c       	subi	r28, 0xCC	; 204
   1816c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:751
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
   1816e:	93 94       	inc	r9
   18170:	1d cf       	rjmp	.-454    	; 0x17fac <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x3a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:772
        fntargs =  (fptr_args*)pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   18172:	c4 53       	subi	r28, 0x34	; 52
   18174:	df 4f       	sbci	r29, 0xFF	; 255
   18176:	f8 81       	ld	r31, Y
   18178:	cc 5c       	subi	r28, 0xCC	; 204
   1817a:	d0 40       	sbci	r29, 0x00	; 0
   1817c:	f1 11       	cpse	r31, r1
   1817e:	0c 94 00 d0 	jmp	0x1a000	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:775
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   18182:	91 2c       	mov	r9, r1
   18184:	93 01       	movw	r18, r6
   18186:	2b 52       	subi	r18, 0x2B	; 43
   18188:	3d 4f       	sbci	r19, 0xFD	; 253
   1818a:	c4 54       	subi	r28, 0x44	; 68
   1818c:	df 4f       	sbci	r29, 0xFF	; 255
   1818e:	39 83       	std	Y+1, r19	; 0x01
   18190:	28 83       	st	Y, r18
   18192:	cc 5b       	subi	r28, 0xBC	; 188
   18194:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:784
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   18196:	1e 01       	movw	r2, r28
   18198:	31 e8       	ldi	r19, 0x81	; 129
   1819a:	23 0e       	add	r2, r19
   1819c:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:775
      }
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   1819e:	c4 54       	subi	r28, 0x44	; 68
   181a0:	df 4f       	sbci	r29, 0xFF	; 255
   181a2:	e8 81       	ld	r30, Y
   181a4:	f9 81       	ldd	r31, Y+1	; 0x01
   181a6:	cc 5b       	subi	r28, 0xBC	; 188
   181a8:	d0 40       	sbci	r29, 0x00	; 0
   181aa:	84 91       	lpm	r24, Z
   181ac:	98 16       	cp	r9, r24
   181ae:	08 f0       	brcs	.+2      	; 0x181b2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5a6>
   181b0:	26 c1       	rjmp	.+588    	; 0x183fe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7f2>
   181b2:	f7 e1       	ldi	r31, 0x17	; 23
   181b4:	9f 9e       	mul	r9, r31
   181b6:	20 01       	movw	r4, r0
   181b8:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:778
  {
    button_2 = &current->button_2[idx];
    rfnt = (ret_fptr*)pgm_read_word(&button_2->enable_show);
   181ba:	f2 01       	movw	r30, r4
   181bc:	ef 53       	subi	r30, 0x3F	; 63
   181be:	ff 4f       	sbci	r31, 0xFF	; 255
   181c0:	e6 0d       	add	r30, r6
   181c2:	f7 1d       	adc	r31, r7
   181c4:	25 91       	lpm	r18, Z+
   181c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:779
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
   181c8:	c2 01       	movw	r24, r4
   181ca:	85 54       	subi	r24, 0x45	; 69
   181cc:	9f 4f       	sbci	r25, 0xFF	; 255
   181ce:	a3 01       	movw	r20, r6
   181d0:	48 0f       	add	r20, r24
   181d2:	59 1f       	adc	r21, r25
   181d4:	ca 54       	subi	r28, 0x4A	; 74
   181d6:	df 4f       	sbci	r29, 0xFF	; 255
   181d8:	59 83       	std	Y+1, r21	; 0x01
   181da:	48 83       	st	Y, r20
   181dc:	c6 5b       	subi	r28, 0xB6	; 182
   181de:	d0 40       	sbci	r29, 0x00	; 0
   181e0:	fa 01       	movw	r30, r20
   181e2:	84 91       	lpm	r24, Z
   181e4:	cf 54       	subi	r28, 0x4F	; 79
   181e6:	df 4f       	sbci	r29, 0xFF	; 255
   181e8:	68 81       	ld	r22, Y
   181ea:	c1 5b       	subi	r28, 0xB1	; 177
   181ec:	d0 40       	sbci	r29, 0x00	; 0
   181ee:	70 e0       	ldi	r23, 0x00	; 0
   181f0:	49 2d       	mov	r20, r9
   181f2:	90 e0       	ldi	r25, 0x00	; 0
   181f4:	f9 01       	movw	r30, r18
   181f6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:780
    if (active == 0) continue;
   181f8:	88 23       	and	r24, r24
   181fa:	09 f4       	brne	.+2      	; 0x181fe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x5f2>
   181fc:	fe c0       	rjmp	.+508    	; 0x183fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:781
    rdr = pgm_read_byte(&button_2->redraw_class);
   181fe:	f2 01       	movw	r30, r4
   18200:	e0 54       	subi	r30, 0x40	; 64
   18202:	ff 4f       	sbci	r31, 0xFF	; 255
   18204:	e6 0d       	add	r30, r6
   18206:	f7 1d       	adc	r31, r7
   18208:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:782
    if (enable_redraw(rdr, redraw_class) == true)
   1820a:	c1 53       	subi	r28, 0x31	; 49
   1820c:	df 4f       	sbci	r29, 0xFF	; 255
   1820e:	68 81       	ld	r22, Y
   18210:	cf 5c       	subi	r28, 0xCF	; 207
   18212:	d0 40       	sbci	r29, 0x00	; 0
   18214:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   18218:	88 23       	and	r24, r24
   1821a:	09 f4       	brne	.+2      	; 0x1821e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x612>
   1821c:	82 c0       	rjmp	.+260    	; 0x18322 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x716>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:784
    {
      strcpy_P(str2, (char*)pgm_read_word(&button_2->name));
   1821e:	f2 01       	movw	r30, r4
   18220:	e4 55       	subi	r30, 0x54	; 84
   18222:	ff 4f       	sbci	r31, 0xFF	; 255
   18224:	e6 0d       	add	r30, r6
   18226:	f7 1d       	adc	r31, r7
   18228:	65 91       	lpm	r22, Z+
   1822a:	74 91       	lpm	r23, Z
   1822c:	c1 01       	movw	r24, r2
   1822e:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:785
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
   18232:	f2 01       	movw	r30, r4
   18234:	e2 54       	subi	r30, 0x42	; 66
   18236:	ff 4f       	sbci	r31, 0xFF	; 255
   18238:	e6 0d       	add	r30, r6
   1823a:	f7 1d       	adc	r31, r7
   1823c:	25 91       	lpm	r18, Z+
   1823e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:786
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
   18240:	ca 54       	subi	r28, 0x4A	; 74
   18242:	df 4f       	sbci	r29, 0xFF	; 255
   18244:	e8 81       	ld	r30, Y
   18246:	f9 81       	ldd	r31, Y+1	; 0x01
   18248:	c6 5b       	subi	r28, 0xB6	; 182
   1824a:	d0 40       	sbci	r29, 0x00	; 0
   1824c:	84 91       	lpm	r24, Z
   1824e:	cf 54       	subi	r28, 0x4F	; 79
   18250:	df 4f       	sbci	r29, 0xFF	; 255
   18252:	68 81       	ld	r22, Y
   18254:	c1 5b       	subi	r28, 0xB1	; 177
   18256:	d0 40       	sbci	r29, 0x00	; 0
   18258:	70 e0       	ldi	r23, 0x00	; 0
   1825a:	49 2d       	mov	r20, r9
   1825c:	90 e0       	ldi	r25, 0x00	; 0
   1825e:	f9 01       	movw	r30, r18
   18260:	19 95       	eicall
   18262:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:788
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   18264:	60 e2       	ldi	r22, 0x20	; 32
   18266:	c1 53       	subi	r28, 0x31	; 49
   18268:	df 4f       	sbci	r29, 0xFF	; 255
   1826a:	88 81       	ld	r24, Y
   1826c:	cf 5c       	subi	r28, 0xCF	; 207
   1826e:	d0 40       	sbci	r29, 0x00	; 0
   18270:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   18274:	88 23       	and	r24, r24
   18276:	21 f0       	breq	.+8      	; 0x18280 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x674>
   18278:	f2 e0       	ldi	r31, 0x02	; 2
   1827a:	8f 12       	cpse	r8, r31
   1827c:	01 c0       	rjmp	.+2      	; 0x18280 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x674>
   1827e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:789
      str1[0] = 0;
   18280:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:794
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
   18282:	f2 01       	movw	r30, r4
   18284:	e7 54       	subi	r30, 0x47	; 71
   18286:	ff 4f       	sbci	r31, 0xFF	; 255
   18288:	e6 0d       	add	r30, r6
   1828a:	f7 1d       	adc	r31, r7
   1828c:	a5 90       	lpm	r10, Z+
   1828e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:793
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
   18290:	f2 01       	movw	r30, r4
   18292:	e9 54       	subi	r30, 0x49	; 73
   18294:	ff 4f       	sbci	r31, 0xFF	; 255
   18296:	e6 0d       	add	r30, r6
   18298:	f7 1d       	adc	r31, r7
   1829a:	c5 90       	lpm	r12, Z+
   1829c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:792
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
   1829e:	82 01       	movw	r16, r4
   182a0:	0a 54       	subi	r16, 0x4A	; 74
   182a2:	1f 4f       	sbci	r17, 0xFF	; 255
   182a4:	06 0d       	add	r16, r6
   182a6:	17 1d       	adc	r17, r7
   182a8:	f8 01       	movw	r30, r16
   182aa:	04 91       	lpm	r16, Z
   182ac:	f2 01       	movw	r30, r4
   182ae:	ec 54       	subi	r30, 0x4C	; 76
   182b0:	ff 4f       	sbci	r31, 0xFF	; 255
   182b2:	e6 0d       	add	r30, r6
   182b4:	f7 1d       	adc	r31, r7
   182b6:	25 91       	lpm	r18, Z+
   182b8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:791
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
   182ba:	f2 01       	movw	r30, r4
   182bc:	ee 54       	subi	r30, 0x4E	; 78
   182be:	ff 4f       	sbci	r31, 0xFF	; 255
   182c0:	e6 0d       	add	r30, r6
   182c2:	f7 1d       	adc	r31, r7
   182c4:	45 91       	lpm	r20, Z+
   182c6:	54 91       	lpm	r21, Z
   182c8:	f2 01       	movw	r30, r4
   182ca:	e0 55       	subi	r30, 0x50	; 80
   182cc:	ff 4f       	sbci	r31, 0xFF	; 255
   182ce:	e6 0d       	add	r30, r6
   182d0:	f7 1d       	adc	r31, r7
   182d2:	65 91       	lpm	r22, Z+
   182d4:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:790
      rfnt = (ret_fptr*)pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
      if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
   182d6:	f2 01       	movw	r30, r4
   182d8:	e2 55       	subi	r30, 0x52	; 82
   182da:	ff 4f       	sbci	r31, 0xFF	; 255
   182dc:	e6 0d       	add	r30, r6
   182de:	f7 1d       	adc	r31, r7
   182e0:	85 91       	lpm	r24, Z+
   182e2:	94 91       	lpm	r25, Z
   182e4:	c6 54       	subi	r28, 0x46	; 70
   182e6:	df 4f       	sbci	r29, 0xFF	; 255
   182e8:	e8 81       	ld	r30, Y
   182ea:	f9 81       	ldd	r31, Y+1	; 0x01
   182ec:	ca 5b       	subi	r28, 0xBA	; 186
   182ee:	d0 40       	sbci	r29, 0x00	; 0
   182f0:	6e 0f       	add	r22, r30
   182f2:	7f 1f       	adc	r23, r31
   182f4:	e1 e0       	ldi	r30, 0x01	; 1
   182f6:	f0 e0       	ldi	r31, 0x00	; 0
   182f8:	ec 0f       	add	r30, r28
   182fa:	fd 1f       	adc	r31, r29
   182fc:	ff 93       	push	r31
   182fe:	ef 93       	push	r30
   18300:	3f 92       	push	r3
   18302:	2f 92       	push	r2
   18304:	e1 2c       	mov	r14, r1
   18306:	c8 54       	subi	r28, 0x48	; 72
   18308:	df 4f       	sbci	r29, 0xFF	; 255
   1830a:	e8 81       	ld	r30, Y
   1830c:	f9 81       	ldd	r31, Y+1	; 0x01
   1830e:	c8 5b       	subi	r28, 0xB8	; 184
   18310:	d0 40       	sbci	r29, 0x00	; 0
   18312:	8e 0f       	add	r24, r30
   18314:	9f 1f       	adc	r25, r31
   18316:	0e 94 1d a2 	call	0x1443a	; 0x1443a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
   1831a:	0f 90       	pop	r0
   1831c:	0f 90       	pop	r0
   1831e:	0f 90       	pop	r0
   18320:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:796
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
   18322:	ca 53       	subi	r28, 0x3A	; 58
   18324:	df 4f       	sbci	r29, 0xFF	; 255
   18326:	28 81       	ld	r18, Y
   18328:	39 81       	ldd	r19, Y+1	; 0x01
   1832a:	c6 5c       	subi	r28, 0xC6	; 198
   1832c:	d0 40       	sbci	r29, 0x00	; 0
   1832e:	23 2b       	or	r18, r19
   18330:	09 f4       	brne	.+2      	; 0x18334 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x728>
   18332:	63 c0       	rjmp	.+198    	; 0x183fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7ee>
   18334:	c8 53       	subi	r28, 0x38	; 56
   18336:	df 4f       	sbci	r29, 0xFF	; 255
   18338:	48 81       	ld	r20, Y
   1833a:	59 81       	ldd	r21, Y+1	; 0x01
   1833c:	c8 5c       	subi	r28, 0xC8	; 200
   1833e:	d0 40       	sbci	r29, 0x00	; 0
   18340:	45 2b       	or	r20, r21
   18342:	09 f4       	brne	.+2      	; 0x18346 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x73a>
   18344:	5a c0       	rjmp	.+180    	; 0x183fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:797
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
   18346:	f2 01       	movw	r30, r4
   18348:	ec 54       	subi	r30, 0x4C	; 76
   1834a:	ff 4f       	sbci	r31, 0xFF	; 255
   1834c:	e6 0d       	add	r30, r6
   1834e:	f7 1d       	adc	r31, r7
   18350:	25 91       	lpm	r18, Z+
   18352:	34 91       	lpm	r19, Z
   18354:	f2 01       	movw	r30, r4
   18356:	ee 54       	subi	r30, 0x4E	; 78
   18358:	ff 4f       	sbci	r31, 0xFF	; 255
   1835a:	e6 0d       	add	r30, r6
   1835c:	f7 1d       	adc	r31, r7
   1835e:	45 91       	lpm	r20, Z+
   18360:	54 91       	lpm	r21, Z
   18362:	f2 01       	movw	r30, r4
   18364:	e0 55       	subi	r30, 0x50	; 80
   18366:	ff 4f       	sbci	r31, 0xFF	; 255
   18368:	e6 0d       	add	r30, r6
   1836a:	f7 1d       	adc	r31, r7
   1836c:	65 91       	lpm	r22, Z+
   1836e:	74 91       	lpm	r23, Z
   18370:	f2 01       	movw	r30, r4
   18372:	e2 55       	subi	r30, 0x52	; 82
   18374:	ff 4f       	sbci	r31, 0xFF	; 255
   18376:	e6 0d       	add	r30, r6
   18378:	f7 1d       	adc	r31, r7
   1837a:	85 91       	lpm	r24, Z+
   1837c:	94 91       	lpm	r25, Z
   1837e:	c6 54       	subi	r28, 0x46	; 70
   18380:	df 4f       	sbci	r29, 0xFF	; 255
   18382:	e8 81       	ld	r30, Y
   18384:	f9 81       	ldd	r31, Y+1	; 0x01
   18386:	ca 5b       	subi	r28, 0xBA	; 186
   18388:	d0 40       	sbci	r29, 0x00	; 0
   1838a:	6e 0f       	add	r22, r30
   1838c:	7f 1f       	adc	r23, r31
   1838e:	c8 53       	subi	r28, 0x38	; 56
   18390:	df 4f       	sbci	r29, 0xFF	; 255
   18392:	e8 80       	ld	r14, Y
   18394:	f9 80       	ldd	r15, Y+1	; 0x01
   18396:	c8 5c       	subi	r28, 0xC8	; 200
   18398:	d0 40       	sbci	r29, 0x00	; 0
   1839a:	ca 53       	subi	r28, 0x3A	; 58
   1839c:	df 4f       	sbci	r29, 0xFF	; 255
   1839e:	08 81       	ld	r16, Y
   183a0:	19 81       	ldd	r17, Y+1	; 0x01
   183a2:	c6 5c       	subi	r28, 0xC6	; 198
   183a4:	d0 40       	sbci	r29, 0x00	; 0
   183a6:	c8 54       	subi	r28, 0x48	; 72
   183a8:	df 4f       	sbci	r29, 0xFF	; 255
   183aa:	e8 81       	ld	r30, Y
   183ac:	f9 81       	ldd	r31, Y+1	; 0x01
   183ae:	c8 5b       	subi	r28, 0xB8	; 184
   183b0:	d0 40       	sbci	r29, 0x00	; 0
   183b2:	8e 0f       	add	r24, r30
   183b4:	9f 1f       	adc	r25, r31
   183b6:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   183ba:	18 2f       	mov	r17, r24
   183bc:	88 23       	and	r24, r24
   183be:	e9 f0       	breq	.+58     	; 0x183fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x7ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:799
      {
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
   183c0:	f2 01       	movw	r30, r4
   183c2:	e4 54       	subi	r30, 0x44	; 68
   183c4:	ff 4f       	sbci	r31, 0xFF	; 255
   183c6:	e6 0d       	add	r30, r6
   183c8:	f7 1d       	adc	r31, r7
   183ca:	25 91       	lpm	r18, Z+
   183cc:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:800
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
   183ce:	ca 54       	subi	r28, 0x4A	; 74
   183d0:	df 4f       	sbci	r29, 0xFF	; 255
   183d2:	e8 81       	ld	r30, Y
   183d4:	f9 81       	ldd	r31, Y+1	; 0x01
   183d6:	c6 5b       	subi	r28, 0xB6	; 182
   183d8:	d0 40       	sbci	r29, 0x00	; 0
   183da:	84 91       	lpm	r24, Z
   183dc:	cf 54       	subi	r28, 0x4F	; 79
   183de:	df 4f       	sbci	r29, 0xFF	; 255
   183e0:	68 81       	ld	r22, Y
   183e2:	c1 5b       	subi	r28, 0xB1	; 177
   183e4:	d0 40       	sbci	r29, 0x00	; 0
   183e6:	70 e0       	ldi	r23, 0x00	; 0
   183e8:	49 2d       	mov	r20, r9
   183ea:	90 e0       	ldi	r25, 0x00	; 0
   183ec:	f9 01       	movw	r30, r18
   183ee:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:801
        ret = true;
   183f0:	c4 53       	subi	r28, 0x34	; 52
   183f2:	df 4f       	sbci	r29, 0xFF	; 255
   183f4:	18 83       	st	Y, r17
   183f6:	cc 5c       	subi	r28, 0xCC	; 204
   183f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:775
      }
  }
  if (ret == true)  goto draw_menu_end;
  ///
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
   183fa:	93 94       	inc	r9
   183fc:	d0 ce       	rjmp	.-608    	; 0x1819e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x592>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:804
        fntargs =  (fptr_args*)pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   183fe:	c4 53       	subi	r28, 0x34	; 52
   18400:	df 4f       	sbci	r29, 0xFF	; 255
   18402:	f8 81       	ld	r31, Y
   18404:	cc 5c       	subi	r28, 0xCC	; 204
   18406:	d0 40       	sbci	r29, 0x00	; 0
   18408:	f1 11       	cpse	r31, r1
   1840a:	0c 94 00 d0 	jmp	0x1a000	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:807
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   1840e:	ca 54       	subi	r28, 0x4A	; 74
   18410:	df 4f       	sbci	r29, 0xFF	; 255
   18412:	18 82       	st	Y, r1
   18414:	c6 5b       	subi	r28, 0xB6	; 182
   18416:	d0 40       	sbci	r29, 0x00	; 0
   18418:	93 01       	movw	r18, r6
   1841a:	29 52       	subi	r18, 0x29	; 41
   1841c:	3d 4f       	sbci	r19, 0xFD	; 253
   1841e:	cc 53       	subi	r28, 0x3C	; 60
   18420:	df 4f       	sbci	r29, 0xFF	; 255
   18422:	39 83       	std	Y+1, r19	; 0x01
   18424:	28 83       	st	Y, r18
   18426:	c4 5c       	subi	r28, 0xC4	; 196
   18428:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:813
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   1842a:	4e 01       	movw	r8, r28
   1842c:	31 e8       	ldi	r19, 0x81	; 129
   1842e:	83 0e       	add	r8, r19
   18430:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:818
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   18432:	ae 01       	movw	r20, r28
   18434:	4f 5f       	subi	r20, 0xFF	; 255
   18436:	5f 4f       	sbci	r21, 0xFF	; 255
   18438:	cc 54       	subi	r28, 0x4C	; 76
   1843a:	df 4f       	sbci	r29, 0xFF	; 255
   1843c:	59 83       	std	Y+1, r21	; 0x01
   1843e:	48 83       	st	Y, r20
   18440:	c4 5b       	subi	r28, 0xB4	; 180
   18442:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:807
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   18444:	cc 53       	subi	r28, 0x3C	; 60
   18446:	df 4f       	sbci	r29, 0xFF	; 255
   18448:	e8 81       	ld	r30, Y
   1844a:	f9 81       	ldd	r31, Y+1	; 0x01
   1844c:	c4 5c       	subi	r28, 0xC4	; 196
   1844e:	d0 40       	sbci	r29, 0x00	; 0
   18450:	84 91       	lpm	r24, Z
   18452:	ca 54       	subi	r28, 0x4A	; 74
   18454:	df 4f       	sbci	r29, 0xFF	; 255
   18456:	f8 81       	ld	r31, Y
   18458:	c6 5b       	subi	r28, 0xB6	; 182
   1845a:	d0 40       	sbci	r29, 0x00	; 0
   1845c:	f8 17       	cp	r31, r24
   1845e:	08 f0       	brcs	.+2      	; 0x18462 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x856>
   18460:	d1 c1       	rjmp	.+930    	; 0x18804 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbf8>
   18462:	27 e1       	ldi	r18, 0x17	; 23
   18464:	f2 9f       	mul	r31, r18
   18466:	60 01       	movw	r12, r0
   18468:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:810
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
   1846a:	f6 01       	movw	r30, r12
   1846c:	ec 56       	subi	r30, 0x6C	; 108
   1846e:	fe 4f       	sbci	r31, 0xFE	; 254
   18470:	e6 0d       	add	r30, r6
   18472:	f7 1d       	adc	r31, r7
   18474:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:811
    if (enable_redraw(rdr, redraw_class) == true)
   18476:	c1 53       	subi	r28, 0x31	; 49
   18478:	df 4f       	sbci	r29, 0xFF	; 255
   1847a:	68 81       	ld	r22, Y
   1847c:	cf 5c       	subi	r28, 0xCF	; 207
   1847e:	d0 40       	sbci	r29, 0x00	; 0
   18480:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   18484:	88 23       	and	r24, r24
   18486:	09 f4       	brne	.+2      	; 0x1848a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x87e>
   18488:	42 c1       	rjmp	.+644    	; 0x1870e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb02>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:813
    {
      strcpy_P(str2, (char*)pgm_read_word(&switch_1->name));
   1848a:	f6 01       	movw	r30, r12
   1848c:	e2 58       	subi	r30, 0x82	; 130
   1848e:	fe 4f       	sbci	r31, 0xFE	; 254
   18490:	e6 0d       	add	r30, r6
   18492:	f7 1d       	adc	r31, r7
   18494:	65 91       	lpm	r22, Z+
   18496:	74 91       	lpm	r23, Z
   18498:	c4 01       	movw	r24, r8
   1849a:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:814
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
   1849e:	f6 01       	movw	r30, r12
   184a0:	e0 57       	subi	r30, 0x70	; 112
   184a2:	fe 4f       	sbci	r31, 0xFE	; 254
   184a4:	e6 0d       	add	r30, r6
   184a6:	f7 1d       	adc	r31, r7
   184a8:	25 91       	lpm	r18, Z+
   184aa:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:815
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
   184ac:	f6 01       	movw	r30, r12
   184ae:	ee 56       	subi	r30, 0x6E	; 110
   184b0:	fe 4f       	sbci	r31, 0xFE	; 254
   184b2:	e6 0d       	add	r30, r6
   184b4:	f7 1d       	adc	r31, r7
   184b6:	e5 90       	lpm	r14, Z+
   184b8:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:816
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   184ba:	86 01       	movw	r16, r12
   184bc:	03 57       	subi	r16, 0x73	; 115
   184be:	1e 4f       	sbci	r17, 0xFE	; 254
   184c0:	06 0d       	add	r16, r6
   184c2:	17 1d       	adc	r17, r7
   184c4:	f8 01       	movw	r30, r16
   184c6:	84 91       	lpm	r24, Z
   184c8:	cf 54       	subi	r28, 0x4F	; 79
   184ca:	df 4f       	sbci	r29, 0xFF	; 255
   184cc:	68 81       	ld	r22, Y
   184ce:	c1 5b       	subi	r28, 0xB1	; 177
   184d0:	d0 40       	sbci	r29, 0x00	; 0
   184d2:	70 e0       	ldi	r23, 0x00	; 0
   184d4:	ca 54       	subi	r28, 0x4A	; 74
   184d6:	df 4f       	sbci	r29, 0xFF	; 255
   184d8:	48 81       	ld	r20, Y
   184da:	c6 5b       	subi	r28, 0xB6	; 182
   184dc:	d0 40       	sbci	r29, 0x00	; 0
   184de:	90 e0       	ldi	r25, 0x00	; 0
   184e0:	f9 01       	movw	r30, r18
   184e2:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:817
      str3[0] = 0;
   184e4:	cf 55       	subi	r28, 0x5F	; 95
   184e6:	df 4f       	sbci	r29, 0xFF	; 255
   184e8:	18 82       	st	Y, r1
   184ea:	c1 5a       	subi	r28, 0xA1	; 161
   184ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:818
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
   184ee:	f8 01       	movw	r30, r16
   184f0:	44 91       	lpm	r20, Z
   184f2:	84 91       	lpm	r24, Z
   184f4:	8e 01       	movw	r16, r28
   184f6:	0f 55       	subi	r16, 0x5F	; 95
   184f8:	1f 4f       	sbci	r17, 0xFF	; 255
   184fa:	9e 01       	movw	r18, r28
   184fc:	2f 5f       	subi	r18, 0xFF	; 255
   184fe:	3f 4f       	sbci	r19, 0xFF	; 255
   18500:	cf 54       	subi	r28, 0x4F	; 79
   18502:	df 4f       	sbci	r29, 0xFF	; 255
   18504:	68 81       	ld	r22, Y
   18506:	c1 5b       	subi	r28, 0xB1	; 177
   18508:	d0 40       	sbci	r29, 0x00	; 0
   1850a:	f7 01       	movw	r30, r14
   1850c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:823
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
   1850e:	f6 01       	movw	r30, r12
   18510:	e8 57       	subi	r30, 0x78	; 120
   18512:	fe 4f       	sbci	r31, 0xFE	; 254
   18514:	e6 0d       	add	r30, r6
   18516:	f7 1d       	adc	r31, r7
   18518:	25 91       	lpm	r18, Z+
   1851a:	34 91       	lpm	r19, Z
   1851c:	c4 54       	subi	r28, 0x44	; 68
   1851e:	df 4f       	sbci	r29, 0xFF	; 255
   18520:	39 83       	std	Y+1, r19	; 0x01
   18522:	28 83       	st	Y, r18
   18524:	cc 5b       	subi	r28, 0xBC	; 188
   18526:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:822
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
   18528:	f6 01       	movw	r30, r12
   1852a:	ea 57       	subi	r30, 0x7A	; 122
   1852c:	fe 4f       	sbci	r31, 0xFE	; 254
   1852e:	e6 0d       	add	r30, r6
   18530:	f7 1d       	adc	r31, r7
   18532:	45 90       	lpm	r4, Z+
   18534:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:821
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
   18536:	f6 01       	movw	r30, r12
   18538:	ec 57       	subi	r30, 0x7C	; 124
   1853a:	fe 4f       	sbci	r31, 0xFE	; 254
   1853c:	e6 0d       	add	r30, r6
   1853e:	f7 1d       	adc	r31, r7
   18540:	85 91       	lpm	r24, Z+
   18542:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:820
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
   18544:	f6 01       	movw	r30, r12
   18546:	ee 57       	subi	r30, 0x7E	; 126
   18548:	fe 4f       	sbci	r31, 0xFE	; 254
   1854a:	e6 0d       	add	r30, r6
   1854c:	f7 1d       	adc	r31, r7
   1854e:	25 90       	lpm	r2, Z+
   18550:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:819
      rfnt = (ret_fptr*)pgm_read_word(&switch_1->get_status_fnt);
      gss = (ret_string_fptr*)pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, pgm_read_byte(&switch_1->args), str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
   18552:	c6 54       	subi	r28, 0x46	; 70
   18554:	df 4f       	sbci	r29, 0xFF	; 255
   18556:	48 81       	ld	r20, Y
   18558:	59 81       	ldd	r21, Y+1	; 0x01
   1855a:	ca 5b       	subi	r28, 0xBA	; 186
   1855c:	d0 40       	sbci	r29, 0x00	; 0
   1855e:	24 0e       	add	r2, r20
   18560:	35 1e       	adc	r3, r21
   18562:	f6 01       	movw	r30, r12
   18564:	e0 58       	subi	r30, 0x80	; 128
   18566:	fe 4f       	sbci	r31, 0xFE	; 254
   18568:	e6 0d       	add	r30, r6
   1856a:	f7 1d       	adc	r31, r7
   1856c:	a5 90       	lpm	r10, Z+
   1856e:	b4 90       	lpm	r11, Z
   18570:	c8 54       	subi	r28, 0x48	; 72
   18572:	df 4f       	sbci	r29, 0xFF	; 255
   18574:	68 81       	ld	r22, Y
   18576:	79 81       	ldd	r23, Y+1	; 0x01
   18578:	c8 5b       	subi	r28, 0xB8	; 184
   1857a:	d0 40       	sbci	r29, 0x00	; 0
   1857c:	a6 0e       	add	r10, r22
   1857e:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
   18580:	10 92 c4 0f 	sts	0x0FC4, r1	; 0x800fc4 <my_lcd+0xb>
   18584:	10 92 c3 0f 	sts	0x0FC3, r1	; 0x800fc3 <my_lcd+0xa>
   18588:	10 e0       	ldi	r17, 0x00	; 0
   1858a:	00 e0       	ldi	r16, 0x00	; 0
   1858c:	55 24       	eor	r5, r5
   1858e:	fc 01       	movw	r30, r24
   18590:	ff 27       	eor	r31, r31
   18592:	c2 54       	subi	r28, 0x42	; 66
   18594:	df 4f       	sbci	r29, 0xFF	; 255
   18596:	f9 83       	std	Y+1, r31	; 0x01
   18598:	e8 83       	st	Y, r30
   1859a:	ce 5b       	subi	r28, 0xBE	; 190
   1859c:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
   1859e:	91 01       	movw	r18, r2
   185a0:	24 0d       	add	r18, r4
   185a2:	35 1d       	adc	r19, r5
   185a4:	c6 53       	subi	r28, 0x36	; 54
   185a6:	df 4f       	sbci	r29, 0xFF	; 255
   185a8:	39 83       	std	Y+1, r19	; 0x01
   185aa:	28 83       	st	Y, r18
   185ac:	ca 5c       	subi	r28, 0xCA	; 202
   185ae:	d0 40       	sbci	r29, 0x00	; 0
   185b0:	7f 01       	movw	r14, r30
   185b2:	ea 0c       	add	r14, r10
   185b4:	fb 1c       	adc	r15, r11
   185b6:	c6 53       	subi	r28, 0x36	; 54
   185b8:	df 4f       	sbci	r29, 0xFF	; 255
   185ba:	28 81       	ld	r18, Y
   185bc:	39 81       	ldd	r19, Y+1	; 0x01
   185be:	ca 5c       	subi	r28, 0xCA	; 202
   185c0:	d0 40       	sbci	r29, 0x00	; 0
   185c2:	20 1b       	sub	r18, r16
   185c4:	31 0b       	sbc	r19, r17
   185c6:	a7 01       	movw	r20, r14
   185c8:	40 1b       	sub	r20, r16
   185ca:	51 0b       	sbc	r21, r17
   185cc:	b1 01       	movw	r22, r2
   185ce:	60 0f       	add	r22, r16
   185d0:	71 1f       	adc	r23, r17
   185d2:	c5 01       	movw	r24, r10
   185d4:	80 0f       	add	r24, r16
   185d6:	91 1f       	adc	r25, r17
   185d8:	0e 94 b1 b6 	call	0x16d62	; 0x16d62 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.225]>
   185dc:	0f 5f       	subi	r16, 0xFF	; 255
   185de:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
   185e0:	03 30       	cpi	r16, 0x03	; 3
   185e2:	11 05       	cpc	r17, r1
   185e4:	41 f7       	brne	.-48     	; 0x185b6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x9aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4507
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
   185e6:	f4 01       	movw	r30, r8
   185e8:	01 90       	ld	r0, Z+
   185ea:	00 20       	and	r0, r0
   185ec:	e9 f7       	brne	.-6      	; 0x185e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x9dc>
   185ee:	31 97       	sbiw	r30, 0x01	; 1
   185f0:	e8 19       	sub	r30, r8
   185f2:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
   185f4:	c4 54       	subi	r28, 0x44	; 68
   185f6:	df 4f       	sbci	r29, 0xFF	; 255
   185f8:	88 81       	ld	r24, Y
   185fa:	cc 5b       	subi	r28, 0xBC	; 188
   185fc:	d0 40       	sbci	r29, 0x00	; 0
   185fe:	88 0f       	add	r24, r24
   18600:	c4 54       	subi	r28, 0x44	; 68
   18602:	df 4f       	sbci	r29, 0xFF	; 255
   18604:	38 81       	ld	r19, Y
   18606:	cc 5b       	subi	r28, 0xBC	; 188
   18608:	d0 40       	sbci	r29, 0x00	; 0
   1860a:	83 0f       	add	r24, r19
   1860c:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4509
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   1860e:	a2 01       	movw	r20, r4
   18610:	48 1b       	sub	r20, r24
   18612:	51 09       	sbc	r21, r1
   18614:	57 ff       	sbrs	r21, 7
   18616:	02 c0       	rjmp	.+4      	; 0x1861c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa10>
   18618:	4d 5f       	subi	r20, 0xFD	; 253
   1861a:	5f 4f       	sbci	r21, 0xFF	; 255
   1861c:	55 95       	asr	r21
   1861e:	47 95       	ror	r20
   18620:	55 95       	asr	r21
   18622:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   18624:	42 0d       	add	r20, r2
   18626:	53 2d       	mov	r21, r3
   18628:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   1862a:	66 e0       	ldi	r22, 0x06	; 6
   1862c:	e6 9f       	mul	r30, r22
   1862e:	f0 01       	movw	r30, r0
   18630:	11 24       	eor	r1, r1
   18632:	c4 54       	subi	r28, 0x44	; 68
   18634:	df 4f       	sbci	r29, 0xFF	; 255
   18636:	78 81       	ld	r23, Y
   18638:	cc 5b       	subi	r28, 0xBC	; 188
   1863a:	d0 40       	sbci	r29, 0x00	; 0
   1863c:	7e 9f       	mul	r23, r30
   1863e:	c0 01       	movw	r24, r0
   18640:	7f 9f       	mul	r23, r31
   18642:	90 0d       	add	r25, r0
   18644:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
   18646:	99 27       	eor	r25, r25
   18648:	c2 54       	subi	r28, 0x42	; 66
   1864a:	df 4f       	sbci	r29, 0xFF	; 255
   1864c:	68 81       	ld	r22, Y
   1864e:	79 81       	ldd	r23, Y+1	; 0x01
   18650:	ce 5b       	subi	r28, 0xBE	; 190
   18652:	d0 40       	sbci	r29, 0x00	; 0
   18654:	68 1b       	sub	r22, r24
   18656:	79 0b       	sbc	r23, r25
   18658:	77 ff       	sbrs	r23, 7
   1865a:	02 c0       	rjmp	.+4      	; 0x18660 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa54>
   1865c:	6f 5f       	subi	r22, 0xFF	; 255
   1865e:	7f 4f       	sbci	r23, 0xFF	; 255
   18660:	75 95       	asr	r23
   18662:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
   18664:	6a 0d       	add	r22, r10
   18666:	7b 2d       	mov	r23, r11
   18668:	71 1d       	adc	r23, r1
   1866a:	ee 24       	eor	r14, r14
   1866c:	ea 94       	dec	r14
   1866e:	fe 2c       	mov	r15, r14
   18670:	10 e0       	ldi	r17, 0x00	; 0
   18672:	00 e0       	ldi	r16, 0x00	; 0
   18674:	c4 54       	subi	r28, 0x44	; 68
   18676:	df 4f       	sbci	r29, 0xFF	; 255
   18678:	28 81       	ld	r18, Y
   1867a:	cc 5b       	subi	r28, 0xBC	; 188
   1867c:	d0 40       	sbci	r29, 0x00	; 0
   1867e:	c4 01       	movw	r24, r8
   18680:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4512
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
   18684:	cc 54       	subi	r28, 0x4C	; 76
   18686:	df 4f       	sbci	r29, 0xFF	; 255
   18688:	e8 81       	ld	r30, Y
   1868a:	f9 81       	ldd	r31, Y+1	; 0x01
   1868c:	c4 5b       	subi	r28, 0xB4	; 180
   1868e:	d0 40       	sbci	r29, 0x00	; 0
   18690:	01 90       	ld	r0, Z+
   18692:	00 20       	and	r0, r0
   18694:	e9 f7       	brne	.-6      	; 0x18690 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xa84>
   18696:	31 97       	sbiw	r30, 0x01	; 1
   18698:	cc 54       	subi	r28, 0x4C	; 76
   1869a:	df 4f       	sbci	r29, 0xFF	; 255
   1869c:	88 81       	ld	r24, Y
   1869e:	99 81       	ldd	r25, Y+1	; 0x01
   186a0:	c4 5b       	subi	r28, 0xB4	; 180
   186a2:	d0 40       	sbci	r29, 0x00	; 0
   186a4:	e8 1b       	sub	r30, r24
   186a6:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
   186a8:	a2 01       	movw	r20, r4
   186aa:	46 50       	subi	r20, 0x06	; 6
   186ac:	51 09       	sbc	r21, r1
   186ae:	57 ff       	sbrs	r21, 7
   186b0:	02 c0       	rjmp	.+4      	; 0x186b6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xaaa>
   186b2:	4d 5f       	subi	r20, 0xFD	; 253
   186b4:	5f 4f       	sbci	r21, 0xFF	; 255
   186b6:	55 95       	asr	r21
   186b8:	47 95       	ror	r20
   186ba:	55 95       	asr	r21
   186bc:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   186be:	55 27       	eor	r21, r21
   186c0:	ca 01       	movw	r24, r20
   186c2:	88 0f       	add	r24, r24
   186c4:	99 1f       	adc	r25, r25
   186c6:	48 0f       	add	r20, r24
   186c8:	59 1f       	adc	r21, r25
   186ca:	42 0d       	add	r20, r2
   186cc:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1730
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
   186ce:	96 e0       	ldi	r25, 0x06	; 6
   186d0:	e9 9f       	mul	r30, r25
   186d2:	f0 01       	movw	r30, r0
   186d4:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4513
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
   186d6:	ff 27       	eor	r31, r31
   186d8:	c2 54       	subi	r28, 0x42	; 66
   186da:	df 4f       	sbci	r29, 0xFF	; 255
   186dc:	68 81       	ld	r22, Y
   186de:	79 81       	ldd	r23, Y+1	; 0x01
   186e0:	ce 5b       	subi	r28, 0xBE	; 190
   186e2:	d0 40       	sbci	r29, 0x00	; 0
   186e4:	6e 1b       	sub	r22, r30
   186e6:	7f 0b       	sbc	r23, r31
   186e8:	77 ff       	sbrs	r23, 7
   186ea:	02 c0       	rjmp	.+4      	; 0x186f0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xae4>
   186ec:	6f 5f       	subi	r22, 0xFF	; 255
   186ee:	7f 4f       	sbci	r23, 0xFF	; 255
   186f0:	75 95       	asr	r23
   186f2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4515
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
   186f4:	6a 0d       	add	r22, r10
   186f6:	7b 2d       	mov	r23, r11
   186f8:	71 1d       	adc	r23, r1
   186fa:	ee 24       	eor	r14, r14
   186fc:	ea 94       	dec	r14
   186fe:	fe 2c       	mov	r15, r14
   18700:	10 e0       	ldi	r17, 0x00	; 0
   18702:	00 e0       	ldi	r16, 0x00	; 0
   18704:	21 e0       	ldi	r18, 0x01	; 1
   18706:	ce 01       	movw	r24, r28
   18708:	01 96       	adiw	r24, 0x01	; 1
   1870a:	0e 94 fd b9 	call	0x173fa	; 0x173fa <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.169]>
_Z9draw_menubhjj.constprop.141():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:826
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
   1870e:	ca 53       	subi	r28, 0x3A	; 58
   18710:	df 4f       	sbci	r29, 0xFF	; 255
   18712:	e8 81       	ld	r30, Y
   18714:	f9 81       	ldd	r31, Y+1	; 0x01
   18716:	c6 5c       	subi	r28, 0xC6	; 198
   18718:	d0 40       	sbci	r29, 0x00	; 0
   1871a:	ef 2b       	or	r30, r31
   1871c:	09 f4       	brne	.+2      	; 0x18720 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb14>
   1871e:	66 c0       	rjmp	.+204    	; 0x187ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbe0>
   18720:	c8 53       	subi	r28, 0x38	; 56
   18722:	df 4f       	sbci	r29, 0xFF	; 255
   18724:	28 81       	ld	r18, Y
   18726:	39 81       	ldd	r19, Y+1	; 0x01
   18728:	c8 5c       	subi	r28, 0xC8	; 200
   1872a:	d0 40       	sbci	r29, 0x00	; 0
   1872c:	23 2b       	or	r18, r19
   1872e:	09 f4       	brne	.+2      	; 0x18732 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xb26>
   18730:	5d c0       	rjmp	.+186    	; 0x187ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:827
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
   18732:	f6 01       	movw	r30, r12
   18734:	ea 57       	subi	r30, 0x7A	; 122
   18736:	fe 4f       	sbci	r31, 0xFE	; 254
   18738:	e6 0d       	add	r30, r6
   1873a:	f7 1d       	adc	r31, r7
   1873c:	25 91       	lpm	r18, Z+
   1873e:	34 91       	lpm	r19, Z
   18740:	f6 01       	movw	r30, r12
   18742:	ec 57       	subi	r30, 0x7C	; 124
   18744:	fe 4f       	sbci	r31, 0xFE	; 254
   18746:	e6 0d       	add	r30, r6
   18748:	f7 1d       	adc	r31, r7
   1874a:	45 91       	lpm	r20, Z+
   1874c:	54 91       	lpm	r21, Z
   1874e:	f6 01       	movw	r30, r12
   18750:	ee 57       	subi	r30, 0x7E	; 126
   18752:	fe 4f       	sbci	r31, 0xFE	; 254
   18754:	e6 0d       	add	r30, r6
   18756:	f7 1d       	adc	r31, r7
   18758:	65 91       	lpm	r22, Z+
   1875a:	74 91       	lpm	r23, Z
   1875c:	f6 01       	movw	r30, r12
   1875e:	e0 58       	subi	r30, 0x80	; 128
   18760:	fe 4f       	sbci	r31, 0xFE	; 254
   18762:	e6 0d       	add	r30, r6
   18764:	f7 1d       	adc	r31, r7
   18766:	85 91       	lpm	r24, Z+
   18768:	94 91       	lpm	r25, Z
   1876a:	c6 54       	subi	r28, 0x46	; 70
   1876c:	df 4f       	sbci	r29, 0xFF	; 255
   1876e:	e8 81       	ld	r30, Y
   18770:	f9 81       	ldd	r31, Y+1	; 0x01
   18772:	ca 5b       	subi	r28, 0xBA	; 186
   18774:	d0 40       	sbci	r29, 0x00	; 0
   18776:	6e 0f       	add	r22, r30
   18778:	7f 1f       	adc	r23, r31
   1877a:	c8 53       	subi	r28, 0x38	; 56
   1877c:	df 4f       	sbci	r29, 0xFF	; 255
   1877e:	e8 80       	ld	r14, Y
   18780:	f9 80       	ldd	r15, Y+1	; 0x01
   18782:	c8 5c       	subi	r28, 0xC8	; 200
   18784:	d0 40       	sbci	r29, 0x00	; 0
   18786:	ca 53       	subi	r28, 0x3A	; 58
   18788:	df 4f       	sbci	r29, 0xFF	; 255
   1878a:	08 81       	ld	r16, Y
   1878c:	19 81       	ldd	r17, Y+1	; 0x01
   1878e:	c6 5c       	subi	r28, 0xC6	; 198
   18790:	d0 40       	sbci	r29, 0x00	; 0
   18792:	c8 54       	subi	r28, 0x48	; 72
   18794:	df 4f       	sbci	r29, 0xFF	; 255
   18796:	e8 81       	ld	r30, Y
   18798:	f9 81       	ldd	r31, Y+1	; 0x01
   1879a:	c8 5b       	subi	r28, 0xB8	; 184
   1879c:	d0 40       	sbci	r29, 0x00	; 0
   1879e:	8e 0f       	add	r24, r30
   187a0:	9f 1f       	adc	r25, r31
   187a2:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   187a6:	18 2f       	mov	r17, r24
   187a8:	88 23       	and	r24, r24
   187aa:	01 f1       	breq	.+64     	; 0x187ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xbe0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:829
      {
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
   187ac:	f6 01       	movw	r30, r12
   187ae:	e2 57       	subi	r30, 0x72	; 114
   187b0:	fe 4f       	sbci	r31, 0xFE	; 254
   187b2:	e6 0d       	add	r30, r6
   187b4:	f7 1d       	adc	r31, r7
   187b6:	25 91       	lpm	r18, Z+
   187b8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:830
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
   187ba:	f6 01       	movw	r30, r12
   187bc:	e3 57       	subi	r30, 0x73	; 115
   187be:	fe 4f       	sbci	r31, 0xFE	; 254
   187c0:	e6 0d       	add	r30, r6
   187c2:	f7 1d       	adc	r31, r7
   187c4:	84 91       	lpm	r24, Z
   187c6:	cf 54       	subi	r28, 0x4F	; 79
   187c8:	df 4f       	sbci	r29, 0xFF	; 255
   187ca:	68 81       	ld	r22, Y
   187cc:	c1 5b       	subi	r28, 0xB1	; 177
   187ce:	d0 40       	sbci	r29, 0x00	; 0
   187d0:	70 e0       	ldi	r23, 0x00	; 0
   187d2:	ca 54       	subi	r28, 0x4A	; 74
   187d4:	df 4f       	sbci	r29, 0xFF	; 255
   187d6:	48 81       	ld	r20, Y
   187d8:	c6 5b       	subi	r28, 0xB6	; 182
   187da:	d0 40       	sbci	r29, 0x00	; 0
   187dc:	90 e0       	ldi	r25, 0x00	; 0
   187de:	f9 01       	movw	r30, r18
   187e0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:831
        ret = true;
   187e2:	c4 53       	subi	r28, 0x34	; 52
   187e4:	df 4f       	sbci	r29, 0xFF	; 255
   187e6:	18 83       	st	Y, r17
   187e8:	cc 5c       	subi	r28, 0xCC	; 204
   187ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:807
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
   187ec:	ca 54       	subi	r28, 0x4A	; 74
   187ee:	df 4f       	sbci	r29, 0xFF	; 255
   187f0:	f8 81       	ld	r31, Y
   187f2:	c6 5b       	subi	r28, 0xB6	; 182
   187f4:	d0 40       	sbci	r29, 0x00	; 0
   187f6:	ff 5f       	subi	r31, 0xFF	; 255
   187f8:	ca 54       	subi	r28, 0x4A	; 74
   187fa:	df 4f       	sbci	r29, 0xFF	; 255
   187fc:	f8 83       	st	Y, r31
   187fe:	c6 5b       	subi	r28, 0xB6	; 182
   18800:	d0 40       	sbci	r29, 0x00	; 0
   18802:	20 ce       	rjmp	.-960    	; 0x18444 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x838>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:834
        fntargs =  (fptr_args*)pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   18804:	c4 53       	subi	r28, 0x34	; 52
   18806:	df 4f       	sbci	r29, 0xFF	; 255
   18808:	28 81       	ld	r18, Y
   1880a:	cc 5c       	subi	r28, 0xCC	; 204
   1880c:	d0 40       	sbci	r29, 0x00	; 0
   1880e:	21 11       	cpse	r18, r1
   18810:	0c 94 00 d0 	jmp	0x1a000	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:837
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   18814:	51 2c       	mov	r5, r1
   18816:	43 01       	movw	r8, r6
   18818:	37 e2       	ldi	r19, 0x27	; 39
   1881a:	83 1a       	sub	r8, r19
   1881c:	3d ef       	ldi	r19, 0xFD	; 253
   1881e:	93 0a       	sbc	r9, r19
   18820:	f4 01       	movw	r30, r8
   18822:	84 91       	lpm	r24, Z
   18824:	58 16       	cp	r5, r24
   18826:	08 f0       	brcs	.+2      	; 0x1882a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc1e>
   18828:	d6 c0       	rjmp	.+428    	; 0x189d6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdca>
   1882a:	f0 e1       	ldi	r31, 0x10	; 16
   1882c:	5f 9e       	mul	r5, r31
   1882e:	60 01       	movw	r12, r0
   18830:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:840
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = (ret_fptr*)pgm_read_word(&symbol_button_1->enable_show);
   18832:	f6 01       	movw	r30, r12
   18834:	e1 50       	subi	r30, 0x01	; 1
   18836:	fe 4f       	sbci	r31, 0xFE	; 254
   18838:	e6 0d       	add	r30, r6
   1883a:	f7 1d       	adc	r31, r7
   1883c:	25 91       	lpm	r18, Z+
   1883e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:841
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   18840:	56 01       	movw	r10, r12
   18842:	45 e0       	ldi	r20, 0x05	; 5
   18844:	a4 1a       	sub	r10, r20
   18846:	4e ef       	ldi	r20, 0xFE	; 254
   18848:	b4 0a       	sbc	r11, r20
   1884a:	a6 0c       	add	r10, r6
   1884c:	b7 1c       	adc	r11, r7
   1884e:	f5 01       	movw	r30, r10
   18850:	84 91       	lpm	r24, Z
   18852:	cf 54       	subi	r28, 0x4F	; 79
   18854:	df 4f       	sbci	r29, 0xFF	; 255
   18856:	68 81       	ld	r22, Y
   18858:	c1 5b       	subi	r28, 0xB1	; 177
   1885a:	d0 40       	sbci	r29, 0x00	; 0
   1885c:	70 e0       	ldi	r23, 0x00	; 0
   1885e:	45 2d       	mov	r20, r5
   18860:	90 e0       	ldi	r25, 0x00	; 0
   18862:	f9 01       	movw	r30, r18
   18864:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:842
    if (active == 0) continue;
   18866:	88 23       	and	r24, r24
   18868:	09 f4       	brne	.+2      	; 0x1886c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc60>
   1886a:	b3 c0       	rjmp	.+358    	; 0x189d2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:843
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
   1886c:	f6 01       	movw	r30, r12
   1886e:	e2 50       	subi	r30, 0x02	; 2
   18870:	fe 4f       	sbci	r31, 0xFE	; 254
   18872:	e6 0d       	add	r30, r6
   18874:	f7 1d       	adc	r31, r7
   18876:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:844
    if (enable_redraw(rdr, redraw_class) == true)
   18878:	c1 53       	subi	r28, 0x31	; 49
   1887a:	df 4f       	sbci	r29, 0xFF	; 255
   1887c:	68 81       	ld	r22, Y
   1887e:	cf 5c       	subi	r28, 0xCF	; 207
   18880:	d0 40       	sbci	r29, 0x00	; 0
   18882:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   18886:	88 23       	and	r24, r24
   18888:	09 f4       	brne	.+2      	; 0x1888c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc80>
   1888a:	3c c0       	rjmp	.+120    	; 0x18904 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xcf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:848
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
   1888c:	f6 01       	movw	r30, r12
   1888e:	ef 50       	subi	r30, 0x0F	; 15
   18890:	fe 4f       	sbci	r31, 0xFE	; 254
   18892:	e6 0d       	add	r30, r6
   18894:	f7 1d       	adc	r31, r7
   18896:	e5 90       	lpm	r14, Z+
   18898:	f4 90       	lpm	r15, Z
   1889a:	f6 01       	movw	r30, r12
   1889c:	e6 50       	subi	r30, 0x06	; 6
   1889e:	fe 4f       	sbci	r31, 0xFE	; 254
   188a0:	e6 0d       	add	r30, r6
   188a2:	f7 1d       	adc	r31, r7
   188a4:	05 91       	lpm	r16, Z+
   188a6:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:847
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
   188a8:	f6 01       	movw	r30, r12
   188aa:	e8 50       	subi	r30, 0x08	; 8
   188ac:	fe 4f       	sbci	r31, 0xFE	; 254
   188ae:	e6 0d       	add	r30, r6
   188b0:	f7 1d       	adc	r31, r7
   188b2:	25 91       	lpm	r18, Z+
   188b4:	34 91       	lpm	r19, Z
   188b6:	f6 01       	movw	r30, r12
   188b8:	ea 50       	subi	r30, 0x0A	; 10
   188ba:	fe 4f       	sbci	r31, 0xFE	; 254
   188bc:	e6 0d       	add	r30, r6
   188be:	f7 1d       	adc	r31, r7
   188c0:	45 91       	lpm	r20, Z+
   188c2:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:846
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
   188c4:	f6 01       	movw	r30, r12
   188c6:	ec 50       	subi	r30, 0x0C	; 12
   188c8:	fe 4f       	sbci	r31, 0xFE	; 254
   188ca:	e6 0d       	add	r30, r6
   188cc:	f7 1d       	adc	r31, r7
   188ce:	65 91       	lpm	r22, Z+
   188d0:	74 91       	lpm	r23, Z
   188d2:	f6 01       	movw	r30, r12
   188d4:	ee 50       	subi	r30, 0x0E	; 14
   188d6:	fe 4f       	sbci	r31, 0xFE	; 254
   188d8:	e6 0d       	add	r30, r6
   188da:	f7 1d       	adc	r31, r7
   188dc:	85 91       	lpm	r24, Z+
   188de:	94 91       	lpm	r25, Z
   188e0:	c6 54       	subi	r28, 0x46	; 70
   188e2:	df 4f       	sbci	r29, 0xFF	; 255
   188e4:	e8 81       	ld	r30, Y
   188e6:	f9 81       	ldd	r31, Y+1	; 0x01
   188e8:	ca 5b       	subi	r28, 0xBA	; 186
   188ea:	d0 40       	sbci	r29, 0x00	; 0
   188ec:	6e 0f       	add	r22, r30
   188ee:	7f 1f       	adc	r23, r31
   188f0:	c8 54       	subi	r28, 0x48	; 72
   188f2:	df 4f       	sbci	r29, 0xFF	; 255
   188f4:	e8 81       	ld	r30, Y
   188f6:	f9 81       	ldd	r31, Y+1	; 0x01
   188f8:	c8 5b       	subi	r28, 0xB8	; 184
   188fa:	d0 40       	sbci	r29, 0x00	; 0
   188fc:	8e 0f       	add	r24, r30
   188fe:	9f 1f       	adc	r25, r31
   18900:	0e 94 97 a1 	call	0x1432e	; 0x1432e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:850
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
   18904:	ca 53       	subi	r28, 0x3A	; 58
   18906:	df 4f       	sbci	r29, 0xFF	; 255
   18908:	28 81       	ld	r18, Y
   1890a:	39 81       	ldd	r19, Y+1	; 0x01
   1890c:	c6 5c       	subi	r28, 0xC6	; 198
   1890e:	d0 40       	sbci	r29, 0x00	; 0
   18910:	23 2b       	or	r18, r19
   18912:	09 f4       	brne	.+2      	; 0x18916 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd0a>
   18914:	5e c0       	rjmp	.+188    	; 0x189d2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc6>
   18916:	c8 53       	subi	r28, 0x38	; 56
   18918:	df 4f       	sbci	r29, 0xFF	; 255
   1891a:	48 81       	ld	r20, Y
   1891c:	59 81       	ldd	r21, Y+1	; 0x01
   1891e:	c8 5c       	subi	r28, 0xC8	; 200
   18920:	d0 40       	sbci	r29, 0x00	; 0
   18922:	45 2b       	or	r20, r21
   18924:	09 f4       	brne	.+2      	; 0x18928 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xd1c>
   18926:	55 c0       	rjmp	.+170    	; 0x189d2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:851
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
   18928:	f6 01       	movw	r30, r12
   1892a:	e8 50       	subi	r30, 0x08	; 8
   1892c:	fe 4f       	sbci	r31, 0xFE	; 254
   1892e:	e6 0d       	add	r30, r6
   18930:	f7 1d       	adc	r31, r7
   18932:	25 91       	lpm	r18, Z+
   18934:	34 91       	lpm	r19, Z
   18936:	f6 01       	movw	r30, r12
   18938:	ea 50       	subi	r30, 0x0A	; 10
   1893a:	fe 4f       	sbci	r31, 0xFE	; 254
   1893c:	e6 0d       	add	r30, r6
   1893e:	f7 1d       	adc	r31, r7
   18940:	45 91       	lpm	r20, Z+
   18942:	54 91       	lpm	r21, Z
   18944:	f6 01       	movw	r30, r12
   18946:	ec 50       	subi	r30, 0x0C	; 12
   18948:	fe 4f       	sbci	r31, 0xFE	; 254
   1894a:	e6 0d       	add	r30, r6
   1894c:	f7 1d       	adc	r31, r7
   1894e:	65 91       	lpm	r22, Z+
   18950:	74 91       	lpm	r23, Z
   18952:	f6 01       	movw	r30, r12
   18954:	ee 50       	subi	r30, 0x0E	; 14
   18956:	fe 4f       	sbci	r31, 0xFE	; 254
   18958:	e6 0d       	add	r30, r6
   1895a:	f7 1d       	adc	r31, r7
   1895c:	85 91       	lpm	r24, Z+
   1895e:	94 91       	lpm	r25, Z
   18960:	c6 54       	subi	r28, 0x46	; 70
   18962:	df 4f       	sbci	r29, 0xFF	; 255
   18964:	e8 81       	ld	r30, Y
   18966:	f9 81       	ldd	r31, Y+1	; 0x01
   18968:	ca 5b       	subi	r28, 0xBA	; 186
   1896a:	d0 40       	sbci	r29, 0x00	; 0
   1896c:	6e 0f       	add	r22, r30
   1896e:	7f 1f       	adc	r23, r31
   18970:	c8 53       	subi	r28, 0x38	; 56
   18972:	df 4f       	sbci	r29, 0xFF	; 255
   18974:	e8 80       	ld	r14, Y
   18976:	f9 80       	ldd	r15, Y+1	; 0x01
   18978:	c8 5c       	subi	r28, 0xC8	; 200
   1897a:	d0 40       	sbci	r29, 0x00	; 0
   1897c:	ca 53       	subi	r28, 0x3A	; 58
   1897e:	df 4f       	sbci	r29, 0xFF	; 255
   18980:	08 81       	ld	r16, Y
   18982:	19 81       	ldd	r17, Y+1	; 0x01
   18984:	c6 5c       	subi	r28, 0xC6	; 198
   18986:	d0 40       	sbci	r29, 0x00	; 0
   18988:	c8 54       	subi	r28, 0x48	; 72
   1898a:	df 4f       	sbci	r29, 0xFF	; 255
   1898c:	e8 81       	ld	r30, Y
   1898e:	f9 81       	ldd	r31, Y+1	; 0x01
   18990:	c8 5b       	subi	r28, 0xB8	; 184
   18992:	d0 40       	sbci	r29, 0x00	; 0
   18994:	8e 0f       	add	r24, r30
   18996:	9f 1f       	adc	r25, r31
   18998:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1899c:	18 2f       	mov	r17, r24
   1899e:	88 23       	and	r24, r24
   189a0:	c1 f0       	breq	.+48     	; 0x189d2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:853
      {
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
   189a2:	f6 01       	movw	r30, r12
   189a4:	e4 50       	subi	r30, 0x04	; 4
   189a6:	fe 4f       	sbci	r31, 0xFE	; 254
   189a8:	e6 0d       	add	r30, r6
   189aa:	f7 1d       	adc	r31, r7
   189ac:	25 91       	lpm	r18, Z+
   189ae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:854
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
   189b0:	f5 01       	movw	r30, r10
   189b2:	84 91       	lpm	r24, Z
   189b4:	cf 54       	subi	r28, 0x4F	; 79
   189b6:	df 4f       	sbci	r29, 0xFF	; 255
   189b8:	68 81       	ld	r22, Y
   189ba:	c1 5b       	subi	r28, 0xB1	; 177
   189bc:	d0 40       	sbci	r29, 0x00	; 0
   189be:	70 e0       	ldi	r23, 0x00	; 0
   189c0:	45 2d       	mov	r20, r5
   189c2:	90 e0       	ldi	r25, 0x00	; 0
   189c4:	f9 01       	movw	r30, r18
   189c6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:855
        ret = true;
   189c8:	c4 53       	subi	r28, 0x34	; 52
   189ca:	df 4f       	sbci	r29, 0xFF	; 255
   189cc:	18 83       	st	Y, r17
   189ce:	cc 5c       	subi	r28, 0xCC	; 204
   189d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:837
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
   189d2:	53 94       	inc	r5
   189d4:	25 cf       	rjmp	.-438    	; 0x18820 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xc14>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:858
        fntargs =  (fptr_args*)pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
   189d6:	c4 53       	subi	r28, 0x34	; 52
   189d8:	df 4f       	sbci	r29, 0xFF	; 255
   189da:	f8 81       	ld	r31, Y
   189dc:	cc 5c       	subi	r28, 0xCC	; 204
   189de:	d0 40       	sbci	r29, 0x00	; 0
   189e0:	f1 11       	cpse	r31, r1
   189e2:	0c 94 00 d0 	jmp	0x1a000	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:861
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   189e6:	51 2c       	mov	r5, r1
   189e8:	93 01       	movw	r18, r6
   189ea:	26 52       	subi	r18, 0x26	; 38
   189ec:	3d 4f       	sbci	r19, 0xFD	; 253
   189ee:	cc 52       	subi	r28, 0x2C	; 44
   189f0:	df 4f       	sbci	r29, 0xFF	; 255
   189f2:	39 83       	std	Y+1, r19	; 0x01
   189f4:	28 83       	st	Y, r18
   189f6:	c4 5d       	subi	r28, 0xD4	; 212
   189f8:	d0 40       	sbci	r29, 0x00	; 0
   189fa:	cc 52       	subi	r28, 0x2C	; 44
   189fc:	df 4f       	sbci	r29, 0xFF	; 255
   189fe:	e8 81       	ld	r30, Y
   18a00:	f9 81       	ldd	r31, Y+1	; 0x01
   18a02:	c4 5d       	subi	r28, 0xD4	; 212
   18a04:	d0 40       	sbci	r29, 0x00	; 0
   18a06:	84 91       	lpm	r24, Z
   18a08:	58 16       	cp	r5, r24
   18a0a:	08 f0       	brcs	.+2      	; 0x18a0e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe02>
   18a0c:	60 c3       	rjmp	.+1728   	; 0x190ce <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14c2>
   18a0e:	f7 e1       	ldi	r31, 0x17	; 23
   18a10:	5f 9e       	mul	r5, r31
   18a12:	60 01       	movw	r12, r0
   18a14:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:864
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
   18a16:	f6 01       	movw	r30, r12
   18a18:	e9 57       	subi	r30, 0x79	; 121
   18a1a:	fd 4f       	sbci	r31, 0xFD	; 253
   18a1c:	e6 0d       	add	r30, r6
   18a1e:	f7 1d       	adc	r31, r7
   18a20:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:865
    if (enable_redraw(rdr, redraw_class) == true)
   18a22:	c1 53       	subi	r28, 0x31	; 49
   18a24:	df 4f       	sbci	r29, 0xFF	; 255
   18a26:	68 81       	ld	r22, Y
   18a28:	cf 5c       	subi	r28, 0xCF	; 207
   18a2a:	d0 40       	sbci	r29, 0x00	; 0
   18a2c:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   18a30:	88 23       	and	r24, r24
   18a32:	09 f4       	brne	.+2      	; 0x18a36 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xe2a>
   18a34:	98 c1       	rjmp	.+816    	; 0x18d66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x115a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:867
    {
      loop_i = 0;
   18a36:	ce 54       	subi	r28, 0x4E	; 78
   18a38:	df 4f       	sbci	r29, 0xFF	; 255
   18a3a:	18 82       	st	Y, r1
   18a3c:	c2 5b       	subi	r28, 0xB2	; 178
   18a3e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:870
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   18a40:	f6 01       	movw	r30, r12
   18a42:	eb 57       	subi	r30, 0x7B	; 123
   18a44:	fd 4f       	sbci	r31, 0xFD	; 253
   18a46:	e6 0d       	add	r30, r6
   18a48:	f7 1d       	adc	r31, r7
   18a4a:	25 91       	lpm	r18, Z+
   18a4c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:871
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   18a4e:	c6 01       	movw	r24, r12
   18a50:	80 58       	subi	r24, 0x80	; 128
   18a52:	9d 4f       	sbci	r25, 0xFD	; 253
   18a54:	a3 01       	movw	r20, r6
   18a56:	48 0f       	add	r20, r24
   18a58:	59 1f       	adc	r21, r25
   18a5a:	ca 54       	subi	r28, 0x4A	; 74
   18a5c:	df 4f       	sbci	r29, 0xFF	; 255
   18a5e:	59 83       	std	Y+1, r21	; 0x01
   18a60:	48 83       	st	Y, r20
   18a62:	c6 5b       	subi	r28, 0xB6	; 182
   18a64:	d0 40       	sbci	r29, 0x00	; 0
   18a66:	fa 01       	movw	r30, r20
   18a68:	84 91       	lpm	r24, Z
   18a6a:	cf 54       	subi	r28, 0x4F	; 79
   18a6c:	df 4f       	sbci	r29, 0xFF	; 255
   18a6e:	68 81       	ld	r22, Y
   18a70:	c1 5b       	subi	r28, 0xB1	; 177
   18a72:	d0 40       	sbci	r29, 0x00	; 0
   18a74:	70 e0       	ldi	r23, 0x00	; 0
   18a76:	40 e0       	ldi	r20, 0x00	; 0
   18a78:	90 e0       	ldi	r25, 0x00	; 0
   18a7a:	f9 01       	movw	r30, r18
   18a7c:	19 95       	eicall
   18a7e:	cd 54       	subi	r28, 0x4D	; 77
   18a80:	df 4f       	sbci	r29, 0xFF	; 255
   18a82:	88 83       	st	Y, r24
   18a84:	c3 5b       	subi	r28, 0xB3	; 179
   18a86:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:872
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
   18a88:	f6 01       	movw	r30, r12
   18a8a:	ef 57       	subi	r30, 0x7F	; 127
   18a8c:	fd 4f       	sbci	r31, 0xFD	; 253
   18a8e:	e6 0d       	add	r30, r6
   18a90:	f7 1d       	adc	r31, r7
   18a92:	25 91       	lpm	r18, Z+
   18a94:	34 91       	lpm	r19, Z
   18a96:	ce 52       	subi	r28, 0x2E	; 46
   18a98:	df 4f       	sbci	r29, 0xFF	; 255
   18a9a:	39 83       	std	Y+1, r19	; 0x01
   18a9c:	28 83       	st	Y, r18
   18a9e:	c2 5d       	subi	r28, 0xD2	; 210
   18aa0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18aa2:	46 01       	movw	r8, r12
   18aa4:	3f e8       	ldi	r19, 0x8F	; 143
   18aa6:	83 1a       	sub	r8, r19
   18aa8:	3d ef       	ldi	r19, 0xFD	; 253
   18aaa:	93 0a       	sbc	r9, r19
   18aac:	86 0c       	add	r8, r6
   18aae:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:876
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18ab0:	56 01       	movw	r10, r12
   18ab2:	4d e8       	ldi	r20, 0x8D	; 141
   18ab4:	a4 1a       	sub	r10, r20
   18ab6:	4d ef       	ldi	r20, 0xFD	; 253
   18ab8:	b4 0a       	sbc	r11, r20
   18aba:	a6 0c       	add	r10, r6
   18abc:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:877
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   18abe:	16 01       	movw	r2, r12
   18ac0:	54 e8       	ldi	r21, 0x84	; 132
   18ac2:	25 1a       	sub	r2, r21
   18ac4:	5d ef       	ldi	r21, 0xFD	; 253
   18ac6:	35 0a       	sbc	r3, r21
   18ac8:	26 0c       	add	r2, r6
   18aca:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   18acc:	c6 01       	movw	r24, r12
   18ace:	85 58       	subi	r24, 0x85	; 133
   18ad0:	9d 4f       	sbci	r25, 0xFD	; 253
   18ad2:	b3 01       	movw	r22, r6
   18ad4:	68 0f       	add	r22, r24
   18ad6:	79 1f       	adc	r23, r25
   18ad8:	c4 54       	subi	r28, 0x44	; 68
   18ada:	df 4f       	sbci	r29, 0xFF	; 255
   18adc:	79 83       	std	Y+1, r23	; 0x01
   18ade:	68 83       	st	Y, r22
   18ae0:	cc 5b       	subi	r28, 0xBC	; 188
   18ae2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:884
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   18ae4:	01 97       	sbiw	r24, 0x01	; 1
   18ae6:	f3 01       	movw	r30, r6
   18ae8:	e8 0f       	add	r30, r24
   18aea:	f9 1f       	adc	r31, r25
   18aec:	c2 54       	subi	r28, 0x42	; 66
   18aee:	df 4f       	sbci	r29, 0xFF	; 255
   18af0:	f9 83       	std	Y+1, r31	; 0x01
   18af2:	e8 83       	st	Y, r30
   18af4:	ce 5b       	subi	r28, 0xBE	; 190
   18af6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:892
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   18af8:	03 96       	adiw	r24, 0x03	; 3
   18afa:	93 01       	movw	r18, r6
   18afc:	28 0f       	add	r18, r24
   18afe:	39 1f       	adc	r19, r25
   18b00:	cc 53       	subi	r28, 0x3C	; 60
   18b02:	df 4f       	sbci	r29, 0xFF	; 255
   18b04:	39 83       	std	Y+1, r19	; 0x01
   18b06:	28 83       	st	Y, r18
   18b08:	c4 5c       	subi	r28, 0xC4	; 196
   18b0a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:900
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   18b0c:	04 97       	sbiw	r24, 0x04	; 4
   18b0e:	a3 01       	movw	r20, r6
   18b10:	48 0f       	add	r20, r24
   18b12:	59 1f       	adc	r21, r25
   18b14:	c6 53       	subi	r28, 0x36	; 54
   18b16:	df 4f       	sbci	r29, 0xFF	; 255
   18b18:	59 83       	std	Y+1, r21	; 0x01
   18b1a:	48 83       	st	Y, r20
   18b1c:	ca 5c       	subi	r28, 0xCA	; 202
   18b1e:	d0 40       	sbci	r29, 0x00	; 0
   18b20:	02 97       	sbiw	r24, 0x02	; 2
   18b22:	b3 01       	movw	r22, r6
   18b24:	68 0f       	add	r22, r24
   18b26:	79 1f       	adc	r23, r25
   18b28:	c3 53       	subi	r28, 0x33	; 51
   18b2a:	df 4f       	sbci	r29, 0xFF	; 255
   18b2c:	79 83       	std	Y+1, r23	; 0x01
   18b2e:	68 83       	st	Y, r22
   18b30:	cd 5c       	subi	r28, 0xCD	; 205
   18b32:	d0 40       	sbci	r29, 0x00	; 0
   18b34:	02 97       	sbiw	r24, 0x02	; 2
   18b36:	f3 01       	movw	r30, r6
   18b38:	e8 0f       	add	r30, r24
   18b3a:	f9 1f       	adc	r31, r25
   18b3c:	c0 53       	subi	r28, 0x30	; 48
   18b3e:	df 4f       	sbci	r29, 0xFF	; 255
   18b40:	f9 83       	std	Y+1, r31	; 0x01
   18b42:	e8 83       	st	Y, r30
   18b44:	c0 5d       	subi	r28, 0xD0	; 208
   18b46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:869
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   18b48:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:868
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
   18b4a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:873
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
   18b4c:	ce 54       	subi	r28, 0x4E	; 78
   18b4e:	df 4f       	sbci	r29, 0xFF	; 255
   18b50:	88 81       	ld	r24, Y
   18b52:	c2 5b       	subi	r28, 0xB2	; 178
   18b54:	d0 40       	sbci	r29, 0x00	; 0
   18b56:	cd 54       	subi	r28, 0x4D	; 77
   18b58:	df 4f       	sbci	r29, 0xFF	; 255
   18b5a:	98 81       	ld	r25, Y
   18b5c:	c3 5b       	subi	r28, 0xB3	; 179
   18b5e:	d0 40       	sbci	r29, 0x00	; 0
   18b60:	89 17       	cp	r24, r25
   18b62:	08 f0       	brcs	.+2      	; 0x18b66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf5a>
   18b64:	00 c1       	rjmp	.+512    	; 0x18d66 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x115a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18b66:	f4 01       	movw	r30, r8
   18b68:	45 91       	lpm	r20, Z+
   18b6a:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:876
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18b6c:	f5 01       	movw	r30, r10
   18b6e:	25 91       	lpm	r18, Z+
   18b70:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:877
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   18b72:	f1 01       	movw	r30, r2
   18b74:	94 91       	lpm	r25, Z
   18b76:	99 23       	and	r25, r25
   18b78:	09 f4       	brne	.+2      	; 0x18b7c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf70>
   18b7a:	b7 c0       	rjmp	.+366    	; 0x18cea <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x10de>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:876
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18b7c:	c6 54       	subi	r28, 0x46	; 70
   18b7e:	df 4f       	sbci	r29, 0xFF	; 255
   18b80:	68 81       	ld	r22, Y
   18b82:	79 81       	ldd	r23, Y+1	; 0x01
   18b84:	ca 5b       	subi	r28, 0xBA	; 186
   18b86:	d0 40       	sbci	r29, 0x00	; 0
   18b88:	62 0f       	add	r22, r18
   18b8a:	73 1f       	adc	r23, r19
   18b8c:	ce 53       	subi	r28, 0x3E	; 62
   18b8e:	df 4f       	sbci	r29, 0xFF	; 255
   18b90:	79 83       	std	Y+1, r23	; 0x01
   18b92:	68 83       	st	Y, r22
   18b94:	c2 5c       	subi	r28, 0xC2	; 194
   18b96:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:882
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   18b98:	f1 01       	movw	r30, r2
   18b9a:	94 91       	lpm	r25, Z
   18b9c:	91 30       	cpi	r25, 0x01	; 1
   18b9e:	09 f4       	brne	.+2      	; 0x18ba2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf96>
   18ba0:	c3 c0       	rjmp	.+390    	; 0x18d28 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x111c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:875
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18ba2:	c8 54       	subi	r28, 0x48	; 72
   18ba4:	df 4f       	sbci	r29, 0xFF	; 255
   18ba6:	28 81       	ld	r18, Y
   18ba8:	39 81       	ldd	r19, Y+1	; 0x01
   18baa:	c8 5b       	subi	r28, 0xB8	; 184
   18bac:	d0 40       	sbci	r29, 0x00	; 0
   18bae:	24 0f       	add	r18, r20
   18bb0:	35 1f       	adc	r19, r21
   18bb2:	c0 54       	subi	r28, 0x40	; 64
   18bb4:	df 4f       	sbci	r29, 0xFF	; 255
   18bb6:	39 83       	std	Y+1, r19	; 0x01
   18bb8:	28 83       	st	Y, r18
   18bba:	c0 5c       	subi	r28, 0xC0	; 192
   18bbc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:887
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   18bbe:	f1 01       	movw	r30, r2
   18bc0:	94 91       	lpm	r25, Z
   18bc2:	92 30       	cpi	r25, 0x02	; 2
   18bc4:	09 f0       	breq	.+2      	; 0x18bc8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfbc>
   18bc6:	46 c0       	rjmp	.+140    	; 0x18c54 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:889
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   18bc8:	f4 01       	movw	r30, r8
   18bca:	25 91       	lpm	r18, Z+
   18bcc:	34 91       	lpm	r19, Z
   18bce:	c2 54       	subi	r28, 0x42	; 66
   18bd0:	df 4f       	sbci	r29, 0xFF	; 255
   18bd2:	e8 81       	ld	r30, Y
   18bd4:	f9 81       	ldd	r31, Y+1	; 0x01
   18bd6:	ce 5b       	subi	r28, 0xBE	; 190
   18bd8:	d0 40       	sbci	r29, 0x00	; 0
   18bda:	94 91       	lpm	r25, Z
   18bdc:	c8 54       	subi	r28, 0x48	; 72
   18bde:	df 4f       	sbci	r29, 0xFF	; 255
   18be0:	48 81       	ld	r20, Y
   18be2:	59 81       	ldd	r21, Y+1	; 0x01
   18be4:	c8 5b       	subi	r28, 0xB8	; 184
   18be6:	d0 40       	sbci	r29, 0x00	; 0
   18be8:	24 0f       	add	r18, r20
   18bea:	35 1f       	adc	r19, r21
   18bec:	b9 01       	movw	r22, r18
   18bee:	9f 9d       	mul	r25, r15
   18bf0:	60 0d       	add	r22, r0
   18bf2:	71 1d       	adc	r23, r1
   18bf4:	11 24       	eor	r1, r1
   18bf6:	c0 54       	subi	r28, 0x40	; 64
   18bf8:	df 4f       	sbci	r29, 0xFF	; 255
   18bfa:	79 83       	std	Y+1, r23	; 0x01
   18bfc:	68 83       	st	Y, r22
   18bfe:	c0 5c       	subi	r28, 0xC0	; 192
   18c00:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:890
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   18c02:	f5 01       	movw	r30, r10
   18c04:	25 91       	lpm	r18, Z+
   18c06:	34 91       	lpm	r19, Z
   18c08:	c4 54       	subi	r28, 0x44	; 68
   18c0a:	df 4f       	sbci	r29, 0xFF	; 255
   18c0c:	e8 81       	ld	r30, Y
   18c0e:	f9 81       	ldd	r31, Y+1	; 0x01
   18c10:	cc 5b       	subi	r28, 0xBC	; 188
   18c12:	d0 40       	sbci	r29, 0x00	; 0
   18c14:	94 91       	lpm	r25, Z
   18c16:	c6 54       	subi	r28, 0x46	; 70
   18c18:	df 4f       	sbci	r29, 0xFF	; 255
   18c1a:	48 81       	ld	r20, Y
   18c1c:	59 81       	ldd	r21, Y+1	; 0x01
   18c1e:	ca 5b       	subi	r28, 0xBA	; 186
   18c20:	d0 40       	sbci	r29, 0x00	; 0
   18c22:	24 0f       	add	r18, r20
   18c24:	35 1f       	adc	r19, r21
   18c26:	b9 01       	movw	r22, r18
   18c28:	94 9d       	mul	r25, r4
   18c2a:	60 0d       	add	r22, r0
   18c2c:	71 1d       	adc	r23, r1
   18c2e:	11 24       	eor	r1, r1
   18c30:	ce 53       	subi	r28, 0x3E	; 62
   18c32:	df 4f       	sbci	r29, 0xFF	; 255
   18c34:	79 83       	std	Y+1, r23	; 0x01
   18c36:	68 83       	st	Y, r22
   18c38:	c2 5c       	subi	r28, 0xC2	; 194
   18c3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:891
          loop_t++;
   18c3c:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:892
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   18c3e:	cc 53       	subi	r28, 0x3C	; 60
   18c40:	df 4f       	sbci	r29, 0xFF	; 255
   18c42:	e8 81       	ld	r30, Y
   18c44:	f9 81       	ldd	r31, Y+1	; 0x01
   18c46:	c4 5c       	subi	r28, 0xC4	; 196
   18c48:	d0 40       	sbci	r29, 0x00	; 0
   18c4a:	94 91       	lpm	r25, Z
   18c4c:	f9 16       	cp	r15, r25
   18c4e:	10 f0       	brcs	.+4      	; 0x18c54 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:895
          {
            loop_t = 0;
            loop_r++;
   18c50:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:894
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   18c52:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:898
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_symbol_1->args), str1, str2);
   18c54:	ca 54       	subi	r28, 0x4A	; 74
   18c56:	df 4f       	sbci	r29, 0xFF	; 255
   18c58:	e8 81       	ld	r30, Y
   18c5a:	f9 81       	ldd	r31, Y+1	; 0x01
   18c5c:	c6 5b       	subi	r28, 0xB6	; 182
   18c5e:	d0 40       	sbci	r29, 0x00	; 0
   18c60:	44 91       	lpm	r20, Z
   18c62:	8e 01       	movw	r16, r28
   18c64:	0f 57       	subi	r16, 0x7F	; 127
   18c66:	1f 4f       	sbci	r17, 0xFF	; 255
   18c68:	9e 01       	movw	r18, r28
   18c6a:	2f 5f       	subi	r18, 0xFF	; 255
   18c6c:	3f 4f       	sbci	r19, 0xFF	; 255
   18c6e:	cf 54       	subi	r28, 0x4F	; 79
   18c70:	df 4f       	sbci	r29, 0xFF	; 255
   18c72:	68 81       	ld	r22, Y
   18c74:	c1 5b       	subi	r28, 0xB1	; 177
   18c76:	d0 40       	sbci	r29, 0x00	; 0
   18c78:	ce 52       	subi	r28, 0x2E	; 46
   18c7a:	df 4f       	sbci	r29, 0xFF	; 255
   18c7c:	e8 81       	ld	r30, Y
   18c7e:	f9 81       	ldd	r31, Y+1	; 0x01
   18c80:	c2 5d       	subi	r28, 0xD2	; 210
   18c82:	d0 40       	sbci	r29, 0x00	; 0
   18c84:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:900
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
   18c86:	c6 53       	subi	r28, 0x36	; 54
   18c88:	df 4f       	sbci	r29, 0xFF	; 255
   18c8a:	e8 81       	ld	r30, Y
   18c8c:	f9 81       	ldd	r31, Y+1	; 0x01
   18c8e:	ca 5c       	subi	r28, 0xCA	; 202
   18c90:	d0 40       	sbci	r29, 0x00	; 0
   18c92:	04 91       	lpm	r16, Z
   18c94:	c3 53       	subi	r28, 0x33	; 51
   18c96:	df 4f       	sbci	r29, 0xFF	; 255
   18c98:	e8 81       	ld	r30, Y
   18c9a:	f9 81       	ldd	r31, Y+1	; 0x01
   18c9c:	cd 5c       	subi	r28, 0xCD	; 205
   18c9e:	d0 40       	sbci	r29, 0x00	; 0
   18ca0:	25 91       	lpm	r18, Z+
   18ca2:	34 91       	lpm	r19, Z
   18ca4:	c0 53       	subi	r28, 0x30	; 48
   18ca6:	df 4f       	sbci	r29, 0xFF	; 255
   18ca8:	e8 81       	ld	r30, Y
   18caa:	f9 81       	ldd	r31, Y+1	; 0x01
   18cac:	c0 5d       	subi	r28, 0xD0	; 208
   18cae:	d0 40       	sbci	r29, 0x00	; 0
   18cb0:	45 91       	lpm	r20, Z+
   18cb2:	54 91       	lpm	r21, Z
   18cb4:	e9 80       	ldd	r14, Y+1	; 0x01
   18cb6:	ce 53       	subi	r28, 0x3E	; 62
   18cb8:	df 4f       	sbci	r29, 0xFF	; 255
   18cba:	68 81       	ld	r22, Y
   18cbc:	79 81       	ldd	r23, Y+1	; 0x01
   18cbe:	c2 5c       	subi	r28, 0xC2	; 194
   18cc0:	d0 40       	sbci	r29, 0x00	; 0
   18cc2:	c0 54       	subi	r28, 0x40	; 64
   18cc4:	df 4f       	sbci	r29, 0xFF	; 255
   18cc6:	88 81       	ld	r24, Y
   18cc8:	99 81       	ldd	r25, Y+1	; 0x01
   18cca:	c0 5c       	subi	r28, 0xC0	; 192
   18ccc:	d0 40       	sbci	r29, 0x00	; 0
   18cce:	0e 94 97 a1 	call	0x1432e	; 0x1432e <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:901
        loop_i++;
   18cd2:	ce 54       	subi	r28, 0x4E	; 78
   18cd4:	df 4f       	sbci	r29, 0xFF	; 255
   18cd6:	88 81       	ld	r24, Y
   18cd8:	c2 5b       	subi	r28, 0xB2	; 178
   18cda:	d0 40       	sbci	r29, 0x00	; 0
   18cdc:	8f 5f       	subi	r24, 0xFF	; 255
   18cde:	ce 54       	subi	r28, 0x4E	; 78
   18ce0:	df 4f       	sbci	r29, 0xFF	; 255
   18ce2:	88 83       	st	Y, r24
   18ce4:	c2 5b       	subi	r28, 0xB2	; 178
   18ce6:	d0 40       	sbci	r29, 0x00	; 0
   18ce8:	31 cf       	rjmp	.-414    	; 0x18b4c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:879
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   18cea:	f5 01       	movw	r30, r10
   18cec:	25 91       	lpm	r18, Z+
   18cee:	34 91       	lpm	r19, Z
   18cf0:	c4 54       	subi	r28, 0x44	; 68
   18cf2:	df 4f       	sbci	r29, 0xFF	; 255
   18cf4:	e8 81       	ld	r30, Y
   18cf6:	f9 81       	ldd	r31, Y+1	; 0x01
   18cf8:	cc 5b       	subi	r28, 0xBC	; 188
   18cfa:	d0 40       	sbci	r29, 0x00	; 0
   18cfc:	94 91       	lpm	r25, Z
   18cfe:	c6 54       	subi	r28, 0x46	; 70
   18d00:	df 4f       	sbci	r29, 0xFF	; 255
   18d02:	68 81       	ld	r22, Y
   18d04:	79 81       	ldd	r23, Y+1	; 0x01
   18d06:	ca 5b       	subi	r28, 0xBA	; 186
   18d08:	d0 40       	sbci	r29, 0x00	; 0
   18d0a:	26 0f       	add	r18, r22
   18d0c:	37 1f       	adc	r19, r23
   18d0e:	f9 01       	movw	r30, r18
   18d10:	9f 9d       	mul	r25, r15
   18d12:	e0 0d       	add	r30, r0
   18d14:	f1 1d       	adc	r31, r1
   18d16:	11 24       	eor	r1, r1
   18d18:	ce 53       	subi	r28, 0x3E	; 62
   18d1a:	df 4f       	sbci	r29, 0xFF	; 255
   18d1c:	f9 83       	std	Y+1, r31	; 0x01
   18d1e:	e8 83       	st	Y, r30
   18d20:	c2 5c       	subi	r28, 0xC2	; 194
   18d22:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:880
          loop_t++;
   18d24:	f3 94       	inc	r15
   18d26:	38 cf       	rjmp	.-400    	; 0x18b98 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xf8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:884
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   18d28:	f4 01       	movw	r30, r8
   18d2a:	25 91       	lpm	r18, Z+
   18d2c:	34 91       	lpm	r19, Z
   18d2e:	c2 54       	subi	r28, 0x42	; 66
   18d30:	df 4f       	sbci	r29, 0xFF	; 255
   18d32:	e8 81       	ld	r30, Y
   18d34:	f9 81       	ldd	r31, Y+1	; 0x01
   18d36:	ce 5b       	subi	r28, 0xBE	; 190
   18d38:	d0 40       	sbci	r29, 0x00	; 0
   18d3a:	94 91       	lpm	r25, Z
   18d3c:	c8 54       	subi	r28, 0x48	; 72
   18d3e:	df 4f       	sbci	r29, 0xFF	; 255
   18d40:	48 81       	ld	r20, Y
   18d42:	59 81       	ldd	r21, Y+1	; 0x01
   18d44:	c8 5b       	subi	r28, 0xB8	; 184
   18d46:	d0 40       	sbci	r29, 0x00	; 0
   18d48:	24 0f       	add	r18, r20
   18d4a:	35 1f       	adc	r19, r21
   18d4c:	b9 01       	movw	r22, r18
   18d4e:	9f 9d       	mul	r25, r15
   18d50:	60 0d       	add	r22, r0
   18d52:	71 1d       	adc	r23, r1
   18d54:	11 24       	eor	r1, r1
   18d56:	c0 54       	subi	r28, 0x40	; 64
   18d58:	df 4f       	sbci	r29, 0xFF	; 255
   18d5a:	79 83       	std	Y+1, r23	; 0x01
   18d5c:	68 83       	st	Y, r22
   18d5e:	c0 5c       	subi	r28, 0xC0	; 192
   18d60:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:885
          loop_t++;
   18d62:	f3 94       	inc	r15
   18d64:	2c cf       	rjmp	.-424    	; 0x18bbe <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xfb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:904
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   18d66:	ca 53       	subi	r28, 0x3A	; 58
   18d68:	df 4f       	sbci	r29, 0xFF	; 255
   18d6a:	28 81       	ld	r18, Y
   18d6c:	39 81       	ldd	r19, Y+1	; 0x01
   18d6e:	c6 5c       	subi	r28, 0xC6	; 198
   18d70:	d0 40       	sbci	r29, 0x00	; 0
   18d72:	23 2b       	or	r18, r19
   18d74:	09 f4       	brne	.+2      	; 0x18d78 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x116c>
   18d76:	69 c1       	rjmp	.+722    	; 0x1904a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143e>
   18d78:	c8 53       	subi	r28, 0x38	; 56
   18d7a:	df 4f       	sbci	r29, 0xFF	; 255
   18d7c:	48 81       	ld	r20, Y
   18d7e:	59 81       	ldd	r21, Y+1	; 0x01
   18d80:	c8 5c       	subi	r28, 0xC8	; 200
   18d82:	d0 40       	sbci	r29, 0x00	; 0
   18d84:	45 2b       	or	r20, r21
   18d86:	09 f4       	brne	.+2      	; 0x18d8a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x117e>
   18d88:	60 c1       	rjmp	.+704    	; 0x1904a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:906
    {
      loop_i = 0;
   18d8a:	ce 54       	subi	r28, 0x4E	; 78
   18d8c:	df 4f       	sbci	r29, 0xFF	; 255
   18d8e:	18 82       	st	Y, r1
   18d90:	c2 5b       	subi	r28, 0xB2	; 178
   18d92:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:909
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
   18d94:	f6 01       	movw	r30, r12
   18d96:	eb 57       	subi	r30, 0x7B	; 123
   18d98:	fd 4f       	sbci	r31, 0xFD	; 253
   18d9a:	e6 0d       	add	r30, r6
   18d9c:	f7 1d       	adc	r31, r7
   18d9e:	25 91       	lpm	r18, Z+
   18da0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:910
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   18da2:	c6 01       	movw	r24, r12
   18da4:	80 58       	subi	r24, 0x80	; 128
   18da6:	9d 4f       	sbci	r25, 0xFD	; 253
   18da8:	b3 01       	movw	r22, r6
   18daa:	68 0f       	add	r22, r24
   18dac:	79 1f       	adc	r23, r25
   18dae:	c4 54       	subi	r28, 0x44	; 68
   18db0:	df 4f       	sbci	r29, 0xFF	; 255
   18db2:	79 83       	std	Y+1, r23	; 0x01
   18db4:	68 83       	st	Y, r22
   18db6:	cc 5b       	subi	r28, 0xBC	; 188
   18db8:	d0 40       	sbci	r29, 0x00	; 0
   18dba:	fb 01       	movw	r30, r22
   18dbc:	84 91       	lpm	r24, Z
   18dbe:	cf 54       	subi	r28, 0x4F	; 79
   18dc0:	df 4f       	sbci	r29, 0xFF	; 255
   18dc2:	68 81       	ld	r22, Y
   18dc4:	c1 5b       	subi	r28, 0xB1	; 177
   18dc6:	d0 40       	sbci	r29, 0x00	; 0
   18dc8:	70 e0       	ldi	r23, 0x00	; 0
   18dca:	40 e0       	ldi	r20, 0x00	; 0
   18dcc:	90 e0       	ldi	r25, 0x00	; 0
   18dce:	f9 01       	movw	r30, r18
   18dd0:	19 95       	eicall
   18dd2:	c2 54       	subi	r28, 0x42	; 66
   18dd4:	df 4f       	sbci	r29, 0xFF	; 255
   18dd6:	88 83       	st	Y, r24
   18dd8:	ce 5b       	subi	r28, 0xBE	; 190
   18dda:	d0 40       	sbci	r29, 0x00	; 0
   18ddc:	cd 54       	subi	r28, 0x4D	; 77
   18dde:	df 4f       	sbci	r29, 0xFF	; 255
   18de0:	88 83       	st	Y, r24
   18de2:	c3 5b       	subi	r28, 0xB3	; 179
   18de4:	d0 40       	sbci	r29, 0x00	; 0
   18de6:	ce 54       	subi	r28, 0x4E	; 78
   18de8:	df 4f       	sbci	r29, 0xFF	; 255
   18dea:	a8 80       	ld	r10, Y
   18dec:	c2 5b       	subi	r28, 0xB2	; 178
   18dee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:913
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18df0:	16 01       	movw	r2, r12
   18df2:	ff e8       	ldi	r31, 0x8F	; 143
   18df4:	2f 1a       	sub	r2, r31
   18df6:	fd ef       	ldi	r31, 0xFD	; 253
   18df8:	3f 0a       	sbc	r3, r31
   18dfa:	26 0c       	add	r2, r6
   18dfc:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18dfe:	46 01       	movw	r8, r12
   18e00:	2d e8       	ldi	r18, 0x8D	; 141
   18e02:	82 1a       	sub	r8, r18
   18e04:	2d ef       	ldi	r18, 0xFD	; 253
   18e06:	92 0a       	sbc	r9, r18
   18e08:	86 0c       	add	r8, r6
   18e0a:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:915
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   18e0c:	c6 01       	movw	r24, r12
   18e0e:	84 58       	subi	r24, 0x84	; 132
   18e10:	9d 4f       	sbci	r25, 0xFD	; 253
   18e12:	a3 01       	movw	r20, r6
   18e14:	48 0f       	add	r20, r24
   18e16:	59 1f       	adc	r21, r25
   18e18:	ca 54       	subi	r28, 0x4A	; 74
   18e1a:	df 4f       	sbci	r29, 0xFF	; 255
   18e1c:	59 83       	std	Y+1, r21	; 0x01
   18e1e:	48 83       	st	Y, r20
   18e20:	c6 5b       	subi	r28, 0xB6	; 182
   18e22:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   18e24:	01 97       	sbiw	r24, 0x01	; 1
   18e26:	b3 01       	movw	r22, r6
   18e28:	68 0f       	add	r22, r24
   18e2a:	79 1f       	adc	r23, r25
   18e2c:	cc 53       	subi	r28, 0x3C	; 60
   18e2e:	df 4f       	sbci	r29, 0xFF	; 255
   18e30:	79 83       	std	Y+1, r23	; 0x01
   18e32:	68 83       	st	Y, r22
   18e34:	c4 5c       	subi	r28, 0xC4	; 196
   18e36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:922
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   18e38:	01 97       	sbiw	r24, 0x01	; 1
   18e3a:	f3 01       	movw	r30, r6
   18e3c:	e8 0f       	add	r30, r24
   18e3e:	f9 1f       	adc	r31, r25
   18e40:	c6 53       	subi	r28, 0x36	; 54
   18e42:	df 4f       	sbci	r29, 0xFF	; 255
   18e44:	f9 83       	std	Y+1, r31	; 0x01
   18e46:	e8 83       	st	Y, r30
   18e48:	ca 5c       	subi	r28, 0xCA	; 202
   18e4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:930
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   18e4c:	03 96       	adiw	r24, 0x03	; 3
   18e4e:	93 01       	movw	r18, r6
   18e50:	28 0f       	add	r18, r24
   18e52:	39 1f       	adc	r19, r25
   18e54:	c3 53       	subi	r28, 0x33	; 51
   18e56:	df 4f       	sbci	r29, 0xFF	; 255
   18e58:	39 83       	std	Y+1, r19	; 0x01
   18e5a:	28 83       	st	Y, r18
   18e5c:	cd 5c       	subi	r28, 0xCD	; 205
   18e5e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   18e60:	06 97       	sbiw	r24, 0x06	; 6
   18e62:	a3 01       	movw	r20, r6
   18e64:	48 0f       	add	r20, r24
   18e66:	59 1f       	adc	r21, r25
   18e68:	c0 53       	subi	r28, 0x30	; 48
   18e6a:	df 4f       	sbci	r29, 0xFF	; 255
   18e6c:	59 83       	std	Y+1, r21	; 0x01
   18e6e:	48 83       	st	Y, r20
   18e70:	c0 5d       	subi	r28, 0xD0	; 208
   18e72:	d0 40       	sbci	r29, 0x00	; 0
   18e74:	02 97       	sbiw	r24, 0x02	; 2
   18e76:	b3 01       	movw	r22, r6
   18e78:	68 0f       	add	r22, r24
   18e7a:	79 1f       	adc	r23, r25
   18e7c:	ce 52       	subi	r28, 0x2E	; 46
   18e7e:	df 4f       	sbci	r29, 0xFF	; 255
   18e80:	79 83       	std	Y+1, r23	; 0x01
   18e82:	68 83       	st	Y, r22
   18e84:	c2 5d       	subi	r28, 0xD2	; 210
   18e86:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:908
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
   18e88:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:907
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
   18e8a:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:911
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
   18e8c:	c2 54       	subi	r28, 0x42	; 66
   18e8e:	df 4f       	sbci	r29, 0xFF	; 255
   18e90:	78 81       	ld	r23, Y
   18e92:	ce 5b       	subi	r28, 0xBE	; 190
   18e94:	d0 40       	sbci	r29, 0x00	; 0
   18e96:	a7 16       	cp	r10, r23
   18e98:	08 f0       	brcs	.+2      	; 0x18e9c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1290>
   18e9a:	d7 c0       	rjmp	.+430    	; 0x1904a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x143e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:913
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18e9c:	f1 01       	movw	r30, r2
   18e9e:	25 91       	lpm	r18, Z+
   18ea0:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18ea2:	f4 01       	movw	r30, r8
   18ea4:	85 91       	lpm	r24, Z+
   18ea6:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:915
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
   18ea8:	ca 54       	subi	r28, 0x4A	; 74
   18eaa:	df 4f       	sbci	r29, 0xFF	; 255
   18eac:	e8 81       	ld	r30, Y
   18eae:	f9 81       	ldd	r31, Y+1	; 0x01
   18eb0:	c6 5b       	subi	r28, 0xB6	; 182
   18eb2:	d0 40       	sbci	r29, 0x00	; 0
   18eb4:	44 91       	lpm	r20, Z
   18eb6:	44 23       	and	r20, r20
   18eb8:	09 f4       	brne	.+2      	; 0x18ebc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12b0>
   18eba:	cb c0       	rjmp	.+406    	; 0x19052 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1446>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:914
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
   18ebc:	c6 54       	subi	r28, 0x46	; 70
   18ebe:	df 4f       	sbci	r29, 0xFF	; 255
   18ec0:	48 81       	ld	r20, Y
   18ec2:	59 81       	ldd	r21, Y+1	; 0x01
   18ec4:	ca 5b       	subi	r28, 0xBA	; 186
   18ec6:	d0 40       	sbci	r29, 0x00	; 0
   18ec8:	48 0f       	add	r20, r24
   18eca:	59 1f       	adc	r21, r25
   18ecc:	ce 53       	subi	r28, 0x3E	; 62
   18ece:	df 4f       	sbci	r29, 0xFF	; 255
   18ed0:	59 83       	std	Y+1, r21	; 0x01
   18ed2:	48 83       	st	Y, r20
   18ed4:	c2 5c       	subi	r28, 0xC2	; 194
   18ed6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:920
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
   18ed8:	ca 54       	subi	r28, 0x4A	; 74
   18eda:	df 4f       	sbci	r29, 0xFF	; 255
   18edc:	e8 81       	ld	r30, Y
   18ede:	f9 81       	ldd	r31, Y+1	; 0x01
   18ee0:	c6 5b       	subi	r28, 0xB6	; 182
   18ee2:	d0 40       	sbci	r29, 0x00	; 0
   18ee4:	84 91       	lpm	r24, Z
   18ee6:	81 30       	cpi	r24, 0x01	; 1
   18ee8:	09 f4       	brne	.+2      	; 0x18eec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12e0>
   18eea:	d2 c0       	rjmp	.+420    	; 0x19090 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1484>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:913
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
   18eec:	c8 54       	subi	r28, 0x48	; 72
   18eee:	df 4f       	sbci	r29, 0xFF	; 255
   18ef0:	48 81       	ld	r20, Y
   18ef2:	59 81       	ldd	r21, Y+1	; 0x01
   18ef4:	c8 5b       	subi	r28, 0xB8	; 184
   18ef6:	d0 40       	sbci	r29, 0x00	; 0
   18ef8:	42 0f       	add	r20, r18
   18efa:	53 1f       	adc	r21, r19
   18efc:	c0 54       	subi	r28, 0x40	; 64
   18efe:	df 4f       	sbci	r29, 0xFF	; 255
   18f00:	59 83       	std	Y+1, r21	; 0x01
   18f02:	48 83       	st	Y, r20
   18f04:	c0 5c       	subi	r28, 0xC0	; 192
   18f06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:925
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
   18f08:	ca 54       	subi	r28, 0x4A	; 74
   18f0a:	df 4f       	sbci	r29, 0xFF	; 255
   18f0c:	e8 81       	ld	r30, Y
   18f0e:	f9 81       	ldd	r31, Y+1	; 0x01
   18f10:	c6 5b       	subi	r28, 0xB6	; 182
   18f12:	d0 40       	sbci	r29, 0x00	; 0
   18f14:	84 91       	lpm	r24, Z
   18f16:	82 30       	cpi	r24, 0x02	; 2
   18f18:	09 f0       	breq	.+2      	; 0x18f1c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1310>
   18f1a:	46 c0       	rjmp	.+140    	; 0x18fa8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x139c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:927
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   18f1c:	f1 01       	movw	r30, r2
   18f1e:	85 91       	lpm	r24, Z+
   18f20:	94 91       	lpm	r25, Z
   18f22:	c6 53       	subi	r28, 0x36	; 54
   18f24:	df 4f       	sbci	r29, 0xFF	; 255
   18f26:	e8 81       	ld	r30, Y
   18f28:	f9 81       	ldd	r31, Y+1	; 0x01
   18f2a:	ca 5c       	subi	r28, 0xCA	; 202
   18f2c:	d0 40       	sbci	r29, 0x00	; 0
   18f2e:	24 91       	lpm	r18, Z
   18f30:	c8 54       	subi	r28, 0x48	; 72
   18f32:	df 4f       	sbci	r29, 0xFF	; 255
   18f34:	48 81       	ld	r20, Y
   18f36:	59 81       	ldd	r21, Y+1	; 0x01
   18f38:	c8 5b       	subi	r28, 0xB8	; 184
   18f3a:	d0 40       	sbci	r29, 0x00	; 0
   18f3c:	84 0f       	add	r24, r20
   18f3e:	95 1f       	adc	r25, r21
   18f40:	bc 01       	movw	r22, r24
   18f42:	2b 9d       	mul	r18, r11
   18f44:	60 0d       	add	r22, r0
   18f46:	71 1d       	adc	r23, r1
   18f48:	11 24       	eor	r1, r1
   18f4a:	c0 54       	subi	r28, 0x40	; 64
   18f4c:	df 4f       	sbci	r29, 0xFF	; 255
   18f4e:	79 83       	std	Y+1, r23	; 0x01
   18f50:	68 83       	st	Y, r22
   18f52:	c0 5c       	subi	r28, 0xC0	; 192
   18f54:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:928
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
   18f56:	f4 01       	movw	r30, r8
   18f58:	85 91       	lpm	r24, Z+
   18f5a:	94 91       	lpm	r25, Z
   18f5c:	cc 53       	subi	r28, 0x3C	; 60
   18f5e:	df 4f       	sbci	r29, 0xFF	; 255
   18f60:	e8 81       	ld	r30, Y
   18f62:	f9 81       	ldd	r31, Y+1	; 0x01
   18f64:	c4 5c       	subi	r28, 0xC4	; 196
   18f66:	d0 40       	sbci	r29, 0x00	; 0
   18f68:	24 91       	lpm	r18, Z
   18f6a:	c6 54       	subi	r28, 0x46	; 70
   18f6c:	df 4f       	sbci	r29, 0xFF	; 255
   18f6e:	48 81       	ld	r20, Y
   18f70:	59 81       	ldd	r21, Y+1	; 0x01
   18f72:	ca 5b       	subi	r28, 0xBA	; 186
   18f74:	d0 40       	sbci	r29, 0x00	; 0
   18f76:	84 0f       	add	r24, r20
   18f78:	95 1f       	adc	r25, r21
   18f7a:	bc 01       	movw	r22, r24
   18f7c:	24 9d       	mul	r18, r4
   18f7e:	60 0d       	add	r22, r0
   18f80:	71 1d       	adc	r23, r1
   18f82:	11 24       	eor	r1, r1
   18f84:	ce 53       	subi	r28, 0x3E	; 62
   18f86:	df 4f       	sbci	r29, 0xFF	; 255
   18f88:	79 83       	std	Y+1, r23	; 0x01
   18f8a:	68 83       	st	Y, r22
   18f8c:	c2 5c       	subi	r28, 0xC2	; 194
   18f8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:929
          loop_t++;
   18f90:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:930
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
   18f92:	c3 53       	subi	r28, 0x33	; 51
   18f94:	df 4f       	sbci	r29, 0xFF	; 255
   18f96:	e8 81       	ld	r30, Y
   18f98:	f9 81       	ldd	r31, Y+1	; 0x01
   18f9a:	cd 5c       	subi	r28, 0xCD	; 205
   18f9c:	d0 40       	sbci	r29, 0x00	; 0
   18f9e:	84 91       	lpm	r24, Z
   18fa0:	b8 16       	cp	r11, r24
   18fa2:	10 f0       	brcs	.+4      	; 0x18fa8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x139c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:933
          {
            loop_t = 0;
            loop_r++;
   18fa4:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:932
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
   18fa6:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   18fa8:	c0 53       	subi	r28, 0x30	; 48
   18faa:	df 4f       	sbci	r29, 0xFF	; 255
   18fac:	e8 81       	ld	r30, Y
   18fae:	f9 81       	ldd	r31, Y+1	; 0x01
   18fb0:	c0 5d       	subi	r28, 0xD0	; 208
   18fb2:	d0 40       	sbci	r29, 0x00	; 0
   18fb4:	25 91       	lpm	r18, Z+
   18fb6:	34 91       	lpm	r19, Z
   18fb8:	ce 52       	subi	r28, 0x2E	; 46
   18fba:	df 4f       	sbci	r29, 0xFF	; 255
   18fbc:	e8 81       	ld	r30, Y
   18fbe:	f9 81       	ldd	r31, Y+1	; 0x01
   18fc0:	c2 5d       	subi	r28, 0xD2	; 210
   18fc2:	d0 40       	sbci	r29, 0x00	; 0
   18fc4:	45 91       	lpm	r20, Z+
   18fc6:	54 91       	lpm	r21, Z
   18fc8:	c8 53       	subi	r28, 0x38	; 56
   18fca:	df 4f       	sbci	r29, 0xFF	; 255
   18fcc:	e8 80       	ld	r14, Y
   18fce:	f9 80       	ldd	r15, Y+1	; 0x01
   18fd0:	c8 5c       	subi	r28, 0xC8	; 200
   18fd2:	d0 40       	sbci	r29, 0x00	; 0
   18fd4:	ca 53       	subi	r28, 0x3A	; 58
   18fd6:	df 4f       	sbci	r29, 0xFF	; 255
   18fd8:	08 81       	ld	r16, Y
   18fda:	19 81       	ldd	r17, Y+1	; 0x01
   18fdc:	c6 5c       	subi	r28, 0xC6	; 198
   18fde:	d0 40       	sbci	r29, 0x00	; 0
   18fe0:	ce 53       	subi	r28, 0x3E	; 62
   18fe2:	df 4f       	sbci	r29, 0xFF	; 255
   18fe4:	68 81       	ld	r22, Y
   18fe6:	79 81       	ldd	r23, Y+1	; 0x01
   18fe8:	c2 5c       	subi	r28, 0xC2	; 194
   18fea:	d0 40       	sbci	r29, 0x00	; 0
   18fec:	c0 54       	subi	r28, 0x40	; 64
   18fee:	df 4f       	sbci	r29, 0xFF	; 255
   18ff0:	88 81       	ld	r24, Y
   18ff2:	99 81       	ldd	r25, Y+1	; 0x01
   18ff4:	c0 5c       	subi	r28, 0xC0	; 192
   18ff6:	d0 40       	sbci	r29, 0x00	; 0
   18ff8:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18ffc:	18 2f       	mov	r17, r24
   18ffe:	81 e0       	ldi	r24, 0x01	; 1
   19000:	8a 0d       	add	r24, r10
   19002:	11 23       	and	r17, r17
   19004:	21 f1       	breq	.+72     	; 0x1904e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1442>
   19006:	ce 54       	subi	r28, 0x4E	; 78
   19008:	df 4f       	sbci	r29, 0xFF	; 255
   1900a:	a8 82       	st	Y, r10
   1900c:	c2 5b       	subi	r28, 0xB2	; 178
   1900e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:938
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
   19010:	f6 01       	movw	r30, r12
   19012:	ed 57       	subi	r30, 0x7D	; 125
   19014:	fd 4f       	sbci	r31, 0xFD	; 253
   19016:	e6 0d       	add	r30, r6
   19018:	f7 1d       	adc	r31, r7
   1901a:	25 91       	lpm	r18, Z+
   1901c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:939
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
   1901e:	c4 54       	subi	r28, 0x44	; 68
   19020:	df 4f       	sbci	r29, 0xFF	; 255
   19022:	e8 81       	ld	r30, Y
   19024:	f9 81       	ldd	r31, Y+1	; 0x01
   19026:	cc 5b       	subi	r28, 0xBC	; 188
   19028:	d0 40       	sbci	r29, 0x00	; 0
   1902a:	84 91       	lpm	r24, Z
   1902c:	cf 54       	subi	r28, 0x4F	; 79
   1902e:	df 4f       	sbci	r29, 0xFF	; 255
   19030:	68 81       	ld	r22, Y
   19032:	c1 5b       	subi	r28, 0xB1	; 177
   19034:	d0 40       	sbci	r29, 0x00	; 0
   19036:	70 e0       	ldi	r23, 0x00	; 0
   19038:	4a 2d       	mov	r20, r10
   1903a:	90 e0       	ldi	r25, 0x00	; 0
   1903c:	f9 01       	movw	r30, r18
   1903e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:940
          ret = true;
   19040:	c4 53       	subi	r28, 0x34	; 52
   19042:	df 4f       	sbci	r29, 0xFF	; 255
   19044:	18 83       	st	Y, r17
   19046:	cc 5c       	subi	r28, 0xCC	; 204
   19048:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:861
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
   1904a:	53 94       	inc	r5
   1904c:	d6 cc       	rjmp	.-1620   	; 0x189fa <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0xdee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:936
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
   1904e:	a8 2e       	mov	r10, r24
   19050:	1d cf       	rjmp	.-454    	; 0x18e8c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1280>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:917
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
   19052:	f4 01       	movw	r30, r8
   19054:	85 91       	lpm	r24, Z+
   19056:	94 91       	lpm	r25, Z
   19058:	cc 53       	subi	r28, 0x3C	; 60
   1905a:	df 4f       	sbci	r29, 0xFF	; 255
   1905c:	e8 81       	ld	r30, Y
   1905e:	f9 81       	ldd	r31, Y+1	; 0x01
   19060:	c4 5c       	subi	r28, 0xC4	; 196
   19062:	d0 40       	sbci	r29, 0x00	; 0
   19064:	44 91       	lpm	r20, Z
   19066:	c6 54       	subi	r28, 0x46	; 70
   19068:	df 4f       	sbci	r29, 0xFF	; 255
   1906a:	68 81       	ld	r22, Y
   1906c:	79 81       	ldd	r23, Y+1	; 0x01
   1906e:	ca 5b       	subi	r28, 0xBA	; 186
   19070:	d0 40       	sbci	r29, 0x00	; 0
   19072:	86 0f       	add	r24, r22
   19074:	97 1f       	adc	r25, r23
   19076:	fc 01       	movw	r30, r24
   19078:	4b 9d       	mul	r20, r11
   1907a:	e0 0d       	add	r30, r0
   1907c:	f1 1d       	adc	r31, r1
   1907e:	11 24       	eor	r1, r1
   19080:	ce 53       	subi	r28, 0x3E	; 62
   19082:	df 4f       	sbci	r29, 0xFF	; 255
   19084:	f9 83       	std	Y+1, r31	; 0x01
   19086:	e8 83       	st	Y, r30
   19088:	c2 5c       	subi	r28, 0xC2	; 194
   1908a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:918
          loop_t++;
   1908c:	b3 94       	inc	r11
   1908e:	24 cf       	rjmp	.-440    	; 0x18ed8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:922
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
   19090:	f1 01       	movw	r30, r2
   19092:	85 91       	lpm	r24, Z+
   19094:	94 91       	lpm	r25, Z
   19096:	c6 53       	subi	r28, 0x36	; 54
   19098:	df 4f       	sbci	r29, 0xFF	; 255
   1909a:	e8 81       	ld	r30, Y
   1909c:	f9 81       	ldd	r31, Y+1	; 0x01
   1909e:	ca 5c       	subi	r28, 0xCA	; 202
   190a0:	d0 40       	sbci	r29, 0x00	; 0
   190a2:	24 91       	lpm	r18, Z
   190a4:	c8 54       	subi	r28, 0x48	; 72
   190a6:	df 4f       	sbci	r29, 0xFF	; 255
   190a8:	48 81       	ld	r20, Y
   190aa:	59 81       	ldd	r21, Y+1	; 0x01
   190ac:	c8 5b       	subi	r28, 0xB8	; 184
   190ae:	d0 40       	sbci	r29, 0x00	; 0
   190b0:	84 0f       	add	r24, r20
   190b2:	95 1f       	adc	r25, r21
   190b4:	bc 01       	movw	r22, r24
   190b6:	2b 9d       	mul	r18, r11
   190b8:	60 0d       	add	r22, r0
   190ba:	71 1d       	adc	r23, r1
   190bc:	11 24       	eor	r1, r1
   190be:	c0 54       	subi	r28, 0x40	; 64
   190c0:	df 4f       	sbci	r29, 0xFF	; 255
   190c2:	79 83       	std	Y+1, r23	; 0x01
   190c4:	68 83       	st	Y, r22
   190c6:	c0 5c       	subi	r28, 0xC0	; 192
   190c8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:923
          loop_t++;
   190ca:	b3 94       	inc	r11
   190cc:	1d cf       	rjmp	.-454    	; 0x18f08 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x12fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:947
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   190ce:	c4 53       	subi	r28, 0x34	; 52
   190d0:	df 4f       	sbci	r29, 0xFF	; 255
   190d2:	f8 81       	ld	r31, Y
   190d4:	cc 5c       	subi	r28, 0xCC	; 204
   190d6:	d0 40       	sbci	r29, 0x00	; 0
   190d8:	f1 11       	cpse	r31, r1
   190da:	0c 94 00 d0 	jmp	0x1a000	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   190de:	91 2c       	mov	r9, r1
   190e0:	93 01       	movw	r18, r6
   190e2:	28 52       	subi	r18, 0x28	; 40
   190e4:	3d 4f       	sbci	r19, 0xFD	; 253
   190e6:	cc 52       	subi	r28, 0x2C	; 44
   190e8:	df 4f       	sbci	r29, 0xFF	; 255
   190ea:	39 83       	std	Y+1, r19	; 0x01
   190ec:	28 83       	st	Y, r18
   190ee:	c4 5d       	subi	r28, 0xD4	; 212
   190f0:	d0 40       	sbci	r29, 0x00	; 0
   190f2:	cc 52       	subi	r28, 0x2C	; 44
   190f4:	df 4f       	sbci	r29, 0xFF	; 255
   190f6:	e8 81       	ld	r30, Y
   190f8:	f9 81       	ldd	r31, Y+1	; 0x01
   190fa:	c4 5d       	subi	r28, 0xD4	; 212
   190fc:	d0 40       	sbci	r29, 0x00	; 0
   190fe:	84 91       	lpm	r24, Z
   19100:	98 16       	cp	r9, r24
   19102:	08 f0       	brcs	.+2      	; 0x19106 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14fa>
   19104:	14 c3       	rjmp	.+1576   	; 0x1972e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b22>
   19106:	f7 e1       	ldi	r31, 0x17	; 23
   19108:	9f 9e       	mul	r9, r31
   1910a:	20 01       	movw	r4, r0
   1910c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:953
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
   1910e:	f2 01       	movw	r30, r4
   19110:	e7 52       	subi	r30, 0x27	; 39
   19112:	fe 4f       	sbci	r31, 0xFE	; 254
   19114:	e6 0d       	add	r30, r6
   19116:	f7 1d       	adc	r31, r7
   19118:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:954
    if (enable_redraw(rdr, redraw_class) == true)
   1911a:	c1 53       	subi	r28, 0x31	; 49
   1911c:	df 4f       	sbci	r29, 0xFF	; 255
   1911e:	68 81       	ld	r22, Y
   19120:	cf 5c       	subi	r28, 0xCF	; 207
   19122:	d0 40       	sbci	r29, 0x00	; 0
   19124:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   19128:	88 23       	and	r24, r24
   1912a:	09 f4       	brne	.+2      	; 0x1912e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1522>
   1912c:	83 c1       	rjmp	.+774    	; 0x19434 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1828>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:956
    {
      loop_i = 0;
   1912e:	ce 54       	subi	r28, 0x4E	; 78
   19130:	df 4f       	sbci	r29, 0xFF	; 255
   19132:	18 82       	st	Y, r1
   19134:	c2 5b       	subi	r28, 0xB2	; 178
   19136:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:958
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   19138:	f2 01       	movw	r30, r4
   1913a:	e9 52       	subi	r30, 0x29	; 41
   1913c:	fe 4f       	sbci	r31, 0xFE	; 254
   1913e:	e6 0d       	add	r30, r6
   19140:	f7 1d       	adc	r31, r7
   19142:	25 91       	lpm	r18, Z+
   19144:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:959
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   19146:	c2 01       	movw	r24, r4
   19148:	8e 52       	subi	r24, 0x2E	; 46
   1914a:	9e 4f       	sbci	r25, 0xFE	; 254
   1914c:	a3 01       	movw	r20, r6
   1914e:	48 0f       	add	r20, r24
   19150:	59 1f       	adc	r21, r25
   19152:	ca 54       	subi	r28, 0x4A	; 74
   19154:	df 4f       	sbci	r29, 0xFF	; 255
   19156:	59 83       	std	Y+1, r21	; 0x01
   19158:	48 83       	st	Y, r20
   1915a:	c6 5b       	subi	r28, 0xB6	; 182
   1915c:	d0 40       	sbci	r29, 0x00	; 0
   1915e:	fa 01       	movw	r30, r20
   19160:	84 91       	lpm	r24, Z
   19162:	cf 54       	subi	r28, 0x4F	; 79
   19164:	df 4f       	sbci	r29, 0xFF	; 255
   19166:	68 81       	ld	r22, Y
   19168:	c1 5b       	subi	r28, 0xB1	; 177
   1916a:	d0 40       	sbci	r29, 0x00	; 0
   1916c:	70 e0       	ldi	r23, 0x00	; 0
   1916e:	40 e0       	ldi	r20, 0x00	; 0
   19170:	90 e0       	ldi	r25, 0x00	; 0
   19172:	f9 01       	movw	r30, r18
   19174:	19 95       	eicall
   19176:	cd 54       	subi	r28, 0x4D	; 77
   19178:	df 4f       	sbci	r29, 0xFF	; 255
   1917a:	88 83       	st	Y, r24
   1917c:	c3 5b       	subi	r28, 0xB3	; 179
   1917e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:960
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);
   19180:	f2 01       	movw	r30, r4
   19182:	ed 52       	subi	r30, 0x2D	; 45
   19184:	fe 4f       	sbci	r31, 0xFE	; 254
   19186:	e6 0d       	add	r30, r6
   19188:	f7 1d       	adc	r31, r7
   1918a:	25 91       	lpm	r18, Z+
   1918c:	34 91       	lpm	r19, Z
   1918e:	ca 52       	subi	r28, 0x2A	; 42
   19190:	df 4f       	sbci	r29, 0xFF	; 255
   19192:	39 83       	std	Y+1, r19	; 0x01
   19194:	28 83       	st	Y, r18
   19196:	c6 5d       	subi	r28, 0xD6	; 214
   19198:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:962

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   1919a:	f2 01       	movw	r30, r4
   1919c:	ef 52       	subi	r30, 0x2F	; 47
   1919e:	fe 4f       	sbci	r31, 0xFE	; 254
   191a0:	e6 0d       	add	r30, r6
   191a2:	f7 1d       	adc	r31, r7
   191a4:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:963
      if (slider_active != MENU_SLIDER_OFF)
   191a6:	4f 3f       	cpi	r20, 0xFF	; 255
   191a8:	b9 f0       	breq	.+46     	; 0x191d8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x15cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:964
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   191aa:	f2 01       	movw	r30, r4
   191ac:	e1 53       	subi	r30, 0x31	; 49
   191ae:	fe 4f       	sbci	r31, 0xFE	; 254
   191b0:	e6 0d       	add	r30, r6
   191b2:	f7 1d       	adc	r31, r7
   191b4:	24 91       	lpm	r18, Z
   191b6:	f2 01       	movw	r30, r4
   191b8:	e0 53       	subi	r30, 0x30	; 48
   191ba:	fe 4f       	sbci	r31, 0xFE	; 254
   191bc:	e6 0d       	add	r30, r6
   191be:	f7 1d       	adc	r31, r7
   191c0:	e4 91       	lpm	r30, Z
   191c2:	2e 9f       	mul	r18, r30
   191c4:	20 2d       	mov	r18, r0
   191c6:	11 24       	eor	r1, r1
   191c8:	be 01       	movw	r22, r28
   191ca:	6d 54       	subi	r22, 0x4D	; 77
   191cc:	7f 4f       	sbci	r23, 0xFF	; 255
   191ce:	ce 01       	movw	r24, r28
   191d0:	8e 54       	subi	r24, 0x4E	; 78
   191d2:	9f 4f       	sbci	r25, 0xFF	; 255
   191d4:	0e 94 13 a4 	call	0x14826	; 0x14826 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:967
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   191d8:	c2 01       	movw	r24, r4
   191da:	8d 53       	subi	r24, 0x3D	; 61
   191dc:	9e 4f       	sbci	r25, 0xFE	; 254
   191de:	a3 01       	movw	r20, r6
   191e0:	48 0f       	add	r20, r24
   191e2:	59 1f       	adc	r21, r25
   191e4:	c4 54       	subi	r28, 0x44	; 68
   191e6:	df 4f       	sbci	r29, 0xFF	; 255
   191e8:	59 83       	std	Y+1, r21	; 0x01
   191ea:	48 83       	st	Y, r20
   191ec:	cc 5b       	subi	r28, 0xBC	; 188
   191ee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:968
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   191f0:	12 01       	movw	r2, r4
   191f2:	5b e3       	ldi	r21, 0x3B	; 59
   191f4:	25 1a       	sub	r2, r21
   191f6:	5e ef       	ldi	r21, 0xFE	; 254
   191f8:	35 0a       	sbc	r3, r21
   191fa:	26 0c       	add	r2, r6
   191fc:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:969
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   191fe:	0b 96       	adiw	r24, 0x0b	; 11
   19200:	b3 01       	movw	r22, r6
   19202:	68 0f       	add	r22, r24
   19204:	79 1f       	adc	r23, r25
   19206:	c2 54       	subi	r28, 0x42	; 66
   19208:	df 4f       	sbci	r29, 0xFF	; 255
   1920a:	79 83       	std	Y+1, r23	; 0x01
   1920c:	68 83       	st	Y, r22
   1920e:	ce 5b       	subi	r28, 0xBE	; 190
   19210:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:970
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   19212:	01 97       	sbiw	r24, 0x01	; 1
   19214:	f3 01       	movw	r30, r6
   19216:	e8 0f       	add	r30, r24
   19218:	f9 1f       	adc	r31, r25
   1921a:	c6 53       	subi	r28, 0x36	; 54
   1921c:	df 4f       	sbci	r29, 0xFF	; 255
   1921e:	f9 83       	std	Y+1, r31	; 0x01
   19220:	e8 83       	st	Y, r30
   19222:	ca 5c       	subi	r28, 0xCA	; 202
   19224:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   19226:	01 97       	sbiw	r24, 0x01	; 1
   19228:	93 01       	movw	r18, r6
   1922a:	28 0f       	add	r18, r24
   1922c:	39 1f       	adc	r19, r25
   1922e:	c3 53       	subi	r28, 0x33	; 51
   19230:	df 4f       	sbci	r29, 0xFF	; 255
   19232:	39 83       	std	Y+1, r19	; 0x01
   19234:	28 83       	st	Y, r18
   19236:	cd 5c       	subi	r28, 0xCD	; 205
   19238:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:974
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   1923a:	01 97       	sbiw	r24, 0x01	; 1
   1923c:	a3 01       	movw	r20, r6
   1923e:	48 0f       	add	r20, r24
   19240:	59 1f       	adc	r21, r25
   19242:	cc 53       	subi	r28, 0x3C	; 60
   19244:	df 4f       	sbci	r29, 0xFF	; 255
   19246:	59 83       	std	Y+1, r21	; 0x01
   19248:	48 83       	st	Y, r20
   1924a:	c4 5c       	subi	r28, 0xC4	; 196
   1924c:	d0 40       	sbci	r29, 0x00	; 0
   1924e:	02 97       	sbiw	r24, 0x02	; 2
   19250:	b3 01       	movw	r22, r6
   19252:	68 0f       	add	r22, r24
   19254:	79 1f       	adc	r23, r25
   19256:	c0 53       	subi	r28, 0x30	; 48
   19258:	df 4f       	sbci	r29, 0xFF	; 255
   1925a:	79 83       	std	Y+1, r23	; 0x01
   1925c:	68 83       	st	Y, r22
   1925e:	c0 5d       	subi	r28, 0xD0	; 208
   19260:	d0 40       	sbci	r29, 0x00	; 0
   19262:	02 97       	sbiw	r24, 0x02	; 2
   19264:	f3 01       	movw	r30, r6
   19266:	e8 0f       	add	r30, r24
   19268:	f9 1f       	adc	r31, r25
   1926a:	ce 52       	subi	r28, 0x2E	; 46
   1926c:	df 4f       	sbci	r29, 0xFF	; 255
   1926e:	f9 83       	std	Y+1, r31	; 0x01
   19270:	e8 83       	st	Y, r30
   19272:	c2 5d       	subi	r28, 0xD2	; 210
   19274:	d0 40       	sbci	r29, 0x00	; 0
   19276:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:965
      gss = (ret_string_fptr*)pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   19278:	ce 54       	subi	r28, 0x4E	; 78
   1927a:	df 4f       	sbci	r29, 0xFF	; 255
   1927c:	88 81       	ld	r24, Y
   1927e:	c2 5b       	subi	r28, 0xB2	; 178
   19280:	d0 40       	sbci	r29, 0x00	; 0
   19282:	cd 54       	subi	r28, 0x4D	; 77
   19284:	df 4f       	sbci	r29, 0xFF	; 255
   19286:	98 81       	ld	r25, Y
   19288:	c3 5b       	subi	r28, 0xB3	; 179
   1928a:	d0 40       	sbci	r29, 0x00	; 0
   1928c:	89 17       	cp	r24, r25
   1928e:	08 f0       	brcs	.+2      	; 0x19292 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1686>
   19290:	d1 c0       	rjmp	.+418    	; 0x19434 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1828>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:967
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19292:	c4 54       	subi	r28, 0x44	; 68
   19294:	df 4f       	sbci	r29, 0xFF	; 255
   19296:	e8 81       	ld	r30, Y
   19298:	f9 81       	ldd	r31, Y+1	; 0x01
   1929a:	cc 5b       	subi	r28, 0xBC	; 188
   1929c:	d0 40       	sbci	r29, 0x00	; 0
   1929e:	45 91       	lpm	r20, Z+
   192a0:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:968
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   192a2:	f1 01       	movw	r30, r2
   192a4:	25 91       	lpm	r18, Z+
   192a6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:969
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   192a8:	c2 54       	subi	r28, 0x42	; 66
   192aa:	df 4f       	sbci	r29, 0xFF	; 255
   192ac:	e8 81       	ld	r30, Y
   192ae:	f9 81       	ldd	r31, Y+1	; 0x01
   192b0:	ce 5b       	subi	r28, 0xBE	; 190
   192b2:	d0 40       	sbci	r29, 0x00	; 0
   192b4:	94 91       	lpm	r25, Z
   192b6:	99 23       	and	r25, r25
   192b8:	09 f4       	brne	.+2      	; 0x192bc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16b0>
   192ba:	7b c0       	rjmp	.+246    	; 0x193b2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x17a6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:968
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   192bc:	c6 54       	subi	r28, 0x46	; 70
   192be:	df 4f       	sbci	r29, 0xFF	; 255
   192c0:	68 81       	ld	r22, Y
   192c2:	79 81       	ldd	r23, Y+1	; 0x01
   192c4:	ca 5b       	subi	r28, 0xBA	; 186
   192c6:	d0 40       	sbci	r29, 0x00	; 0
   192c8:	62 0f       	add	r22, r18
   192ca:	73 1f       	adc	r23, r19
   192cc:	ce 53       	subi	r28, 0x3E	; 62
   192ce:	df 4f       	sbci	r29, 0xFF	; 255
   192d0:	79 83       	std	Y+1, r23	; 0x01
   192d2:	68 83       	st	Y, r22
   192d4:	c2 5c       	subi	r28, 0xC2	; 194
   192d6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:971
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   192d8:	c2 54       	subi	r28, 0x42	; 66
   192da:	df 4f       	sbci	r29, 0xFF	; 255
   192dc:	e8 81       	ld	r30, Y
   192de:	f9 81       	ldd	r31, Y+1	; 0x01
   192e0:	ce 5b       	subi	r28, 0xBE	; 190
   192e2:	d0 40       	sbci	r29, 0x00	; 0
   192e4:	94 91       	lpm	r25, Z
   192e6:	91 30       	cpi	r25, 0x01	; 1
   192e8:	09 f4       	brne	.+2      	; 0x192ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16e0>
   192ea:	81 c0       	rjmp	.+258    	; 0x193ee <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x17e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:967
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   192ec:	c8 54       	subi	r28, 0x48	; 72
   192ee:	df 4f       	sbci	r29, 0xFF	; 255
   192f0:	28 81       	ld	r18, Y
   192f2:	39 81       	ldd	r19, Y+1	; 0x01
   192f4:	c8 5b       	subi	r28, 0xB8	; 184
   192f6:	d0 40       	sbci	r29, 0x00	; 0
   192f8:	24 0f       	add	r18, r20
   192fa:	35 1f       	adc	r19, r21
   192fc:	c0 54       	subi	r28, 0x40	; 64
   192fe:	df 4f       	sbci	r29, 0xFF	; 255
   19300:	39 83       	std	Y+1, r19	; 0x01
   19302:	28 83       	st	Y, r18
   19304:	c0 5c       	subi	r28, 0xC0	; 192
   19306:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:973
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_button_1->args) , str1, str2);
   19308:	ca 54       	subi	r28, 0x4A	; 74
   1930a:	df 4f       	sbci	r29, 0xFF	; 255
   1930c:	e8 81       	ld	r30, Y
   1930e:	f9 81       	ldd	r31, Y+1	; 0x01
   19310:	c6 5b       	subi	r28, 0xB6	; 182
   19312:	d0 40       	sbci	r29, 0x00	; 0
   19314:	44 91       	lpm	r20, Z
   19316:	8e 01       	movw	r16, r28
   19318:	0f 57       	subi	r16, 0x7F	; 127
   1931a:	1f 4f       	sbci	r17, 0xFF	; 255
   1931c:	9e 01       	movw	r18, r28
   1931e:	2f 5f       	subi	r18, 0xFF	; 255
   19320:	3f 4f       	sbci	r19, 0xFF	; 255
   19322:	cf 54       	subi	r28, 0x4F	; 79
   19324:	df 4f       	sbci	r29, 0xFF	; 255
   19326:	68 81       	ld	r22, Y
   19328:	c1 5b       	subi	r28, 0xB1	; 177
   1932a:	d0 40       	sbci	r29, 0x00	; 0
   1932c:	ca 52       	subi	r28, 0x2A	; 42
   1932e:	df 4f       	sbci	r29, 0xFF	; 255
   19330:	e8 81       	ld	r30, Y
   19332:	f9 81       	ldd	r31, Y+1	; 0x01
   19334:	c6 5d       	subi	r28, 0xD6	; 214
   19336:	d0 40       	sbci	r29, 0x00	; 0
   19338:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:974
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
   1933a:	cc 53       	subi	r28, 0x3C	; 60
   1933c:	df 4f       	sbci	r29, 0xFF	; 255
   1933e:	e8 81       	ld	r30, Y
   19340:	f9 81       	ldd	r31, Y+1	; 0x01
   19342:	c4 5c       	subi	r28, 0xC4	; 196
   19344:	d0 40       	sbci	r29, 0x00	; 0
   19346:	e4 90       	lpm	r14, Z
   19348:	04 91       	lpm	r16, Z
   1934a:	c0 53       	subi	r28, 0x30	; 48
   1934c:	df 4f       	sbci	r29, 0xFF	; 255
   1934e:	e8 81       	ld	r30, Y
   19350:	f9 81       	ldd	r31, Y+1	; 0x01
   19352:	c0 5d       	subi	r28, 0xD0	; 208
   19354:	d0 40       	sbci	r29, 0x00	; 0
   19356:	25 91       	lpm	r18, Z+
   19358:	34 91       	lpm	r19, Z
   1935a:	ce 52       	subi	r28, 0x2E	; 46
   1935c:	df 4f       	sbci	r29, 0xFF	; 255
   1935e:	e8 81       	ld	r30, Y
   19360:	f9 81       	ldd	r31, Y+1	; 0x01
   19362:	c2 5d       	subi	r28, 0xD2	; 210
   19364:	d0 40       	sbci	r29, 0x00	; 0
   19366:	45 91       	lpm	r20, Z+
   19368:	54 91       	lpm	r21, Z
   1936a:	88 24       	eor	r8, r8
   1936c:	83 94       	inc	r8
   1936e:	be 01       	movw	r22, r28
   19370:	6f 57       	subi	r22, 0x7F	; 127
   19372:	7f 4f       	sbci	r23, 0xFF	; 255
   19374:	5b 01       	movw	r10, r22
   19376:	ce 01       	movw	r24, r28
   19378:	01 96       	adiw	r24, 0x01	; 1
   1937a:	6c 01       	movw	r12, r24
   1937c:	ce 53       	subi	r28, 0x3E	; 62
   1937e:	df 4f       	sbci	r29, 0xFF	; 255
   19380:	68 81       	ld	r22, Y
   19382:	79 81       	ldd	r23, Y+1	; 0x01
   19384:	c2 5c       	subi	r28, 0xC2	; 194
   19386:	d0 40       	sbci	r29, 0x00	; 0
   19388:	c0 54       	subi	r28, 0x40	; 64
   1938a:	df 4f       	sbci	r29, 0xFF	; 255
   1938c:	88 81       	ld	r24, Y
   1938e:	99 81       	ldd	r25, Y+1	; 0x01
   19390:	c0 5c       	subi	r28, 0xC0	; 192
   19392:	d0 40       	sbci	r29, 0x00	; 0
   19394:	0e 94 2c a3 	call	0x14658	; 0x14658 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:975
        loop_t++;
   19398:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:976
        loop_i++;
   1939a:	ce 54       	subi	r28, 0x4E	; 78
   1939c:	df 4f       	sbci	r29, 0xFF	; 255
   1939e:	88 81       	ld	r24, Y
   193a0:	c2 5b       	subi	r28, 0xB2	; 178
   193a2:	d0 40       	sbci	r29, 0x00	; 0
   193a4:	8f 5f       	subi	r24, 0xFF	; 255
   193a6:	ce 54       	subi	r28, 0x4E	; 78
   193a8:	df 4f       	sbci	r29, 0xFF	; 255
   193aa:	88 83       	st	Y, r24
   193ac:	c2 5b       	subi	r28, 0xB2	; 178
   193ae:	d0 40       	sbci	r29, 0x00	; 0
   193b0:	63 cf       	rjmp	.-314    	; 0x19278 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x166c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:970
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   193b2:	f1 01       	movw	r30, r2
   193b4:	25 91       	lpm	r18, Z+
   193b6:	34 91       	lpm	r19, Z
   193b8:	c6 53       	subi	r28, 0x36	; 54
   193ba:	df 4f       	sbci	r29, 0xFF	; 255
   193bc:	e8 81       	ld	r30, Y
   193be:	f9 81       	ldd	r31, Y+1	; 0x01
   193c0:	ca 5c       	subi	r28, 0xCA	; 202
   193c2:	d0 40       	sbci	r29, 0x00	; 0
   193c4:	94 91       	lpm	r25, Z
   193c6:	c6 54       	subi	r28, 0x46	; 70
   193c8:	df 4f       	sbci	r29, 0xFF	; 255
   193ca:	68 81       	ld	r22, Y
   193cc:	79 81       	ldd	r23, Y+1	; 0x01
   193ce:	ca 5b       	subi	r28, 0xBA	; 186
   193d0:	d0 40       	sbci	r29, 0x00	; 0
   193d2:	26 0f       	add	r18, r22
   193d4:	37 1f       	adc	r19, r23
   193d6:	f9 01       	movw	r30, r18
   193d8:	9f 9d       	mul	r25, r15
   193da:	e0 0d       	add	r30, r0
   193dc:	f1 1d       	adc	r31, r1
   193de:	11 24       	eor	r1, r1
   193e0:	ce 53       	subi	r28, 0x3E	; 62
   193e2:	df 4f       	sbci	r29, 0xFF	; 255
   193e4:	f9 83       	std	Y+1, r31	; 0x01
   193e6:	e8 83       	st	Y, r30
   193e8:	c2 5c       	subi	r28, 0xC2	; 194
   193ea:	d0 40       	sbci	r29, 0x00	; 0
   193ec:	75 cf       	rjmp	.-278    	; 0x192d8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16cc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:972
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   193ee:	c4 54       	subi	r28, 0x44	; 68
   193f0:	df 4f       	sbci	r29, 0xFF	; 255
   193f2:	e8 81       	ld	r30, Y
   193f4:	f9 81       	ldd	r31, Y+1	; 0x01
   193f6:	cc 5b       	subi	r28, 0xBC	; 188
   193f8:	d0 40       	sbci	r29, 0x00	; 0
   193fa:	25 91       	lpm	r18, Z+
   193fc:	34 91       	lpm	r19, Z
   193fe:	c3 53       	subi	r28, 0x33	; 51
   19400:	df 4f       	sbci	r29, 0xFF	; 255
   19402:	e8 81       	ld	r30, Y
   19404:	f9 81       	ldd	r31, Y+1	; 0x01
   19406:	cd 5c       	subi	r28, 0xCD	; 205
   19408:	d0 40       	sbci	r29, 0x00	; 0
   1940a:	94 91       	lpm	r25, Z
   1940c:	c8 54       	subi	r28, 0x48	; 72
   1940e:	df 4f       	sbci	r29, 0xFF	; 255
   19410:	48 81       	ld	r20, Y
   19412:	59 81       	ldd	r21, Y+1	; 0x01
   19414:	c8 5b       	subi	r28, 0xB8	; 184
   19416:	d0 40       	sbci	r29, 0x00	; 0
   19418:	24 0f       	add	r18, r20
   1941a:	35 1f       	adc	r19, r21
   1941c:	b9 01       	movw	r22, r18
   1941e:	9f 9d       	mul	r25, r15
   19420:	60 0d       	add	r22, r0
   19422:	71 1d       	adc	r23, r1
   19424:	11 24       	eor	r1, r1
   19426:	c0 54       	subi	r28, 0x40	; 64
   19428:	df 4f       	sbci	r29, 0xFF	; 255
   1942a:	79 83       	std	Y+1, r23	; 0x01
   1942c:	68 83       	st	Y, r22
   1942e:	c0 5c       	subi	r28, 0xC0	; 192
   19430:	d0 40       	sbci	r29, 0x00	; 0
   19432:	6a cf       	rjmp	.-300    	; 0x19308 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x16fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:979
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
   19434:	ca 53       	subi	r28, 0x3A	; 58
   19436:	df 4f       	sbci	r29, 0xFF	; 255
   19438:	e8 81       	ld	r30, Y
   1943a:	f9 81       	ldd	r31, Y+1	; 0x01
   1943c:	c6 5c       	subi	r28, 0xC6	; 198
   1943e:	d0 40       	sbci	r29, 0x00	; 0
   19440:	ef 2b       	or	r30, r31
   19442:	09 f4       	brne	.+2      	; 0x19446 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x183a>
   19444:	51 c1       	rjmp	.+674    	; 0x196e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1adc>
   19446:	c8 53       	subi	r28, 0x38	; 56
   19448:	df 4f       	sbci	r29, 0xFF	; 255
   1944a:	28 81       	ld	r18, Y
   1944c:	39 81       	ldd	r19, Y+1	; 0x01
   1944e:	c8 5c       	subi	r28, 0xC8	; 200
   19450:	d0 40       	sbci	r29, 0x00	; 0
   19452:	23 2b       	or	r18, r19
   19454:	09 f4       	brne	.+2      	; 0x19458 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x184c>
   19456:	48 c1       	rjmp	.+656    	; 0x196e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1adc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:981
    {
      loop_i = 0;
   19458:	ce 54       	subi	r28, 0x4E	; 78
   1945a:	df 4f       	sbci	r29, 0xFF	; 255
   1945c:	18 82       	st	Y, r1
   1945e:	c2 5b       	subi	r28, 0xB2	; 178
   19460:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:983
      loop_t = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_button_1->function_for_max_items);
   19462:	f2 01       	movw	r30, r4
   19464:	e9 52       	subi	r30, 0x29	; 41
   19466:	fe 4f       	sbci	r31, 0xFE	; 254
   19468:	e6 0d       	add	r30, r6
   1946a:	f7 1d       	adc	r31, r7
   1946c:	25 91       	lpm	r18, Z+
   1946e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:984
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   19470:	c2 01       	movw	r24, r4
   19472:	8e 52       	subi	r24, 0x2E	; 46
   19474:	9e 4f       	sbci	r25, 0xFE	; 254
   19476:	a3 01       	movw	r20, r6
   19478:	48 0f       	add	r20, r24
   1947a:	59 1f       	adc	r21, r25
   1947c:	ca 54       	subi	r28, 0x4A	; 74
   1947e:	df 4f       	sbci	r29, 0xFF	; 255
   19480:	59 83       	std	Y+1, r21	; 0x01
   19482:	48 83       	st	Y, r20
   19484:	c6 5b       	subi	r28, 0xB6	; 182
   19486:	d0 40       	sbci	r29, 0x00	; 0
   19488:	fa 01       	movw	r30, r20
   1948a:	84 91       	lpm	r24, Z
   1948c:	cf 54       	subi	r28, 0x4F	; 79
   1948e:	df 4f       	sbci	r29, 0xFF	; 255
   19490:	68 81       	ld	r22, Y
   19492:	c1 5b       	subi	r28, 0xB1	; 177
   19494:	d0 40       	sbci	r29, 0x00	; 0
   19496:	70 e0       	ldi	r23, 0x00	; 0
   19498:	40 e0       	ldi	r20, 0x00	; 0
   1949a:	90 e0       	ldi	r25, 0x00	; 0
   1949c:	f9 01       	movw	r30, r18
   1949e:	19 95       	eicall
   194a0:	cd 54       	subi	r28, 0x4D	; 77
   194a2:	df 4f       	sbci	r29, 0xFF	; 255
   194a4:	88 83       	st	Y, r24
   194a6:	c3 5b       	subi	r28, 0xB3	; 179
   194a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:986

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
   194aa:	f2 01       	movw	r30, r4
   194ac:	ef 52       	subi	r30, 0x2F	; 47
   194ae:	fe 4f       	sbci	r31, 0xFE	; 254
   194b0:	e6 0d       	add	r30, r6
   194b2:	f7 1d       	adc	r31, r7
   194b4:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:987
      if (slider_active != MENU_SLIDER_OFF)
   194b6:	4f 3f       	cpi	r20, 0xFF	; 255
   194b8:	b9 f0       	breq	.+46     	; 0x194e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x18dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:988
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
   194ba:	f2 01       	movw	r30, r4
   194bc:	e1 53       	subi	r30, 0x31	; 49
   194be:	fe 4f       	sbci	r31, 0xFE	; 254
   194c0:	e6 0d       	add	r30, r6
   194c2:	f7 1d       	adc	r31, r7
   194c4:	24 91       	lpm	r18, Z
   194c6:	f2 01       	movw	r30, r4
   194c8:	e0 53       	subi	r30, 0x30	; 48
   194ca:	fe 4f       	sbci	r31, 0xFE	; 254
   194cc:	e6 0d       	add	r30, r6
   194ce:	f7 1d       	adc	r31, r7
   194d0:	e4 91       	lpm	r30, Z
   194d2:	2e 9f       	mul	r18, r30
   194d4:	20 2d       	mov	r18, r0
   194d6:	11 24       	eor	r1, r1
   194d8:	be 01       	movw	r22, r28
   194da:	6d 54       	subi	r22, 0x4D	; 77
   194dc:	7f 4f       	sbci	r23, 0xFF	; 255
   194de:	ce 01       	movw	r24, r28
   194e0:	8e 54       	subi	r24, 0x4E	; 78
   194e2:	9f 4f       	sbci	r25, 0xFF	; 255
   194e4:	0e 94 13 a4 	call	0x14826	; 0x14826 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   194e8:	ce 54       	subi	r28, 0x4E	; 78
   194ea:	df 4f       	sbci	r29, 0xFF	; 255
   194ec:	a8 80       	ld	r10, Y
   194ee:	c2 5b       	subi	r28, 0xB2	; 178
   194f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989
      while (loop_i < loop_cnt)
   194f2:	cd 54       	subi	r28, 0x4D	; 77
   194f4:	df 4f       	sbci	r29, 0xFF	; 255
   194f6:	88 80       	ld	r8, Y
   194f8:	c3 5b       	subi	r28, 0xB3	; 179
   194fa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:991
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   194fc:	c2 01       	movw	r24, r4
   194fe:	8d 53       	subi	r24, 0x3D	; 61
   19500:	9e 4f       	sbci	r25, 0xFE	; 254
   19502:	93 01       	movw	r18, r6
   19504:	28 0f       	add	r18, r24
   19506:	39 1f       	adc	r19, r25
   19508:	c4 54       	subi	r28, 0x44	; 68
   1950a:	df 4f       	sbci	r29, 0xFF	; 255
   1950c:	39 83       	std	Y+1, r19	; 0x01
   1950e:	28 83       	st	Y, r18
   19510:	cc 5b       	subi	r28, 0xBC	; 188
   19512:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   19514:	12 01       	movw	r2, r4
   19516:	3b e3       	ldi	r19, 0x3B	; 59
   19518:	23 1a       	sub	r2, r19
   1951a:	3e ef       	ldi	r19, 0xFE	; 254
   1951c:	33 0a       	sbc	r3, r19
   1951e:	26 0c       	add	r2, r6
   19520:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:993
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   19522:	0b 96       	adiw	r24, 0x0b	; 11
   19524:	a3 01       	movw	r20, r6
   19526:	48 0f       	add	r20, r24
   19528:	59 1f       	adc	r21, r25
   1952a:	c2 54       	subi	r28, 0x42	; 66
   1952c:	df 4f       	sbci	r29, 0xFF	; 255
   1952e:	59 83       	std	Y+1, r21	; 0x01
   19530:	48 83       	st	Y, r20
   19532:	ce 5b       	subi	r28, 0xBE	; 190
   19534:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   19536:	01 97       	sbiw	r24, 0x01	; 1
   19538:	b3 01       	movw	r22, r6
   1953a:	68 0f       	add	r22, r24
   1953c:	79 1f       	adc	r23, r25
   1953e:	cc 53       	subi	r28, 0x3C	; 60
   19540:	df 4f       	sbci	r29, 0xFF	; 255
   19542:	79 83       	std	Y+1, r23	; 0x01
   19544:	68 83       	st	Y, r22
   19546:	c4 5c       	subi	r28, 0xC4	; 196
   19548:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   1954a:	01 97       	sbiw	r24, 0x01	; 1
   1954c:	f3 01       	movw	r30, r6
   1954e:	e8 0f       	add	r30, r24
   19550:	f9 1f       	adc	r31, r25
   19552:	c6 53       	subi	r28, 0x36	; 54
   19554:	df 4f       	sbci	r29, 0xFF	; 255
   19556:	f9 83       	std	Y+1, r31	; 0x01
   19558:	e8 83       	st	Y, r30
   1955a:	ca 5c       	subi	r28, 0xCA	; 202
   1955c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   1955e:	03 97       	sbiw	r24, 0x03	; 3
   19560:	93 01       	movw	r18, r6
   19562:	28 0f       	add	r18, r24
   19564:	39 1f       	adc	r19, r25
   19566:	c3 53       	subi	r28, 0x33	; 51
   19568:	df 4f       	sbci	r29, 0xFF	; 255
   1956a:	39 83       	std	Y+1, r19	; 0x01
   1956c:	28 83       	st	Y, r18
   1956e:	cd 5c       	subi	r28, 0xCD	; 205
   19570:	d0 40       	sbci	r29, 0x00	; 0
   19572:	02 97       	sbiw	r24, 0x02	; 2
   19574:	a3 01       	movw	r20, r6
   19576:	48 0f       	add	r20, r24
   19578:	59 1f       	adc	r21, r25
   1957a:	c0 53       	subi	r28, 0x30	; 48
   1957c:	df 4f       	sbci	r29, 0xFF	; 255
   1957e:	59 83       	std	Y+1, r21	; 0x01
   19580:	48 83       	st	Y, r20
   19582:	c0 5d       	subi	r28, 0xD0	; 208
   19584:	d0 40       	sbci	r29, 0x00	; 0
   19586:	d1 2c       	mov	r13, r1
   19588:	c1 2c       	mov	r12, r1
   1958a:	ba 2c       	mov	r11, r10
   1958c:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:989
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
   1958e:	b8 14       	cp	r11, r8
   19590:	08 f0       	brcs	.+2      	; 0x19594 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1988>
   19592:	aa c0       	rjmp	.+340    	; 0x196e8 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1adc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:991
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   19594:	c4 54       	subi	r28, 0x44	; 68
   19596:	df 4f       	sbci	r29, 0xFF	; 255
   19598:	e8 81       	ld	r30, Y
   1959a:	f9 81       	ldd	r31, Y+1	; 0x01
   1959c:	cc 5b       	subi	r28, 0xBC	; 188
   1959e:	d0 40       	sbci	r29, 0x00	; 0
   195a0:	25 91       	lpm	r18, Z+
   195a2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   195a4:	f1 01       	movw	r30, r2
   195a6:	85 91       	lpm	r24, Z+
   195a8:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:993
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
   195aa:	c2 54       	subi	r28, 0x42	; 66
   195ac:	df 4f       	sbci	r29, 0xFF	; 255
   195ae:	e8 81       	ld	r30, Y
   195b0:	f9 81       	ldd	r31, Y+1	; 0x01
   195b2:	ce 5b       	subi	r28, 0xBE	; 190
   195b4:	d0 40       	sbci	r29, 0x00	; 0
   195b6:	44 91       	lpm	r20, Z
   195b8:	44 23       	and	r20, r20
   195ba:	09 f4       	brne	.+2      	; 0x195be <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19b2>
   195bc:	97 c0       	rjmp	.+302    	; 0x196ec <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ae0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:992
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
   195be:	c6 54       	subi	r28, 0x46	; 70
   195c0:	df 4f       	sbci	r29, 0xFF	; 255
   195c2:	48 81       	ld	r20, Y
   195c4:	59 81       	ldd	r21, Y+1	; 0x01
   195c6:	ca 5b       	subi	r28, 0xBA	; 186
   195c8:	d0 40       	sbci	r29, 0x00	; 0
   195ca:	48 0f       	add	r20, r24
   195cc:	59 1f       	adc	r21, r25
   195ce:	ce 53       	subi	r28, 0x3E	; 62
   195d0:	df 4f       	sbci	r29, 0xFF	; 255
   195d2:	59 83       	std	Y+1, r21	; 0x01
   195d4:	48 83       	st	Y, r20
   195d6:	c2 5c       	subi	r28, 0xC2	; 194
   195d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   195da:	c2 54       	subi	r28, 0x42	; 66
   195dc:	df 4f       	sbci	r29, 0xFF	; 255
   195de:	e8 81       	ld	r30, Y
   195e0:	f9 81       	ldd	r31, Y+1	; 0x01
   195e2:	ce 5b       	subi	r28, 0xBE	; 190
   195e4:	d0 40       	sbci	r29, 0x00	; 0
   195e6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:991
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
   195e8:	c8 54       	subi	r28, 0x48	; 72
   195ea:	df 4f       	sbci	r29, 0xFF	; 255
   195ec:	48 81       	ld	r20, Y
   195ee:	59 81       	ldd	r21, Y+1	; 0x01
   195f0:	c8 5b       	subi	r28, 0xB8	; 184
   195f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:995
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
   195f4:	81 30       	cpi	r24, 0x01	; 1
   195f6:	e9 f4       	brne	.+58     	; 0x19632 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:996
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
   195f8:	c4 54       	subi	r28, 0x44	; 68
   195fa:	df 4f       	sbci	r29, 0xFF	; 255
   195fc:	e8 81       	ld	r30, Y
   195fe:	f9 81       	ldd	r31, Y+1	; 0x01
   19600:	cc 5b       	subi	r28, 0xBC	; 188
   19602:	d0 40       	sbci	r29, 0x00	; 0
   19604:	85 91       	lpm	r24, Z+
   19606:	94 91       	lpm	r25, Z
   19608:	c6 53       	subi	r28, 0x36	; 54
   1960a:	df 4f       	sbci	r29, 0xFF	; 255
   1960c:	e8 81       	ld	r30, Y
   1960e:	f9 81       	ldd	r31, Y+1	; 0x01
   19610:	ca 5c       	subi	r28, 0xCA	; 202
   19612:	d0 40       	sbci	r29, 0x00	; 0
   19614:	44 91       	lpm	r20, Z
   19616:	c8 54       	subi	r28, 0x48	; 72
   19618:	df 4f       	sbci	r29, 0xFF	; 255
   1961a:	28 81       	ld	r18, Y
   1961c:	39 81       	ldd	r19, Y+1	; 0x01
   1961e:	c8 5b       	subi	r28, 0xB8	; 184
   19620:	d0 40       	sbci	r29, 0x00	; 0
   19622:	82 0f       	add	r24, r18
   19624:	93 1f       	adc	r25, r19
   19626:	4c 9d       	mul	r20, r12
   19628:	90 01       	movw	r18, r0
   1962a:	4d 9d       	mul	r20, r13
   1962c:	30 0d       	add	r19, r0
   1962e:	11 24       	eor	r1, r1
   19630:	ac 01       	movw	r20, r24
   19632:	42 0f       	add	r20, r18
   19634:	53 1f       	adc	r21, r19
   19636:	c0 54       	subi	r28, 0x40	; 64
   19638:	df 4f       	sbci	r29, 0xFF	; 255
   1963a:	59 83       	std	Y+1, r21	; 0x01
   1963c:	48 83       	st	Y, r20
   1963e:	c0 5c       	subi	r28, 0xC0	; 192
   19640:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:997
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
   19642:	c3 53       	subi	r28, 0x33	; 51
   19644:	df 4f       	sbci	r29, 0xFF	; 255
   19646:	e8 81       	ld	r30, Y
   19648:	f9 81       	ldd	r31, Y+1	; 0x01
   1964a:	cd 5c       	subi	r28, 0xCD	; 205
   1964c:	d0 40       	sbci	r29, 0x00	; 0
   1964e:	25 91       	lpm	r18, Z+
   19650:	34 91       	lpm	r19, Z
   19652:	c0 53       	subi	r28, 0x30	; 48
   19654:	df 4f       	sbci	r29, 0xFF	; 255
   19656:	e8 81       	ld	r30, Y
   19658:	f9 81       	ldd	r31, Y+1	; 0x01
   1965a:	c0 5d       	subi	r28, 0xD0	; 208
   1965c:	d0 40       	sbci	r29, 0x00	; 0
   1965e:	45 91       	lpm	r20, Z+
   19660:	54 91       	lpm	r21, Z
   19662:	c8 53       	subi	r28, 0x38	; 56
   19664:	df 4f       	sbci	r29, 0xFF	; 255
   19666:	e8 80       	ld	r14, Y
   19668:	f9 80       	ldd	r15, Y+1	; 0x01
   1966a:	c8 5c       	subi	r28, 0xC8	; 200
   1966c:	d0 40       	sbci	r29, 0x00	; 0
   1966e:	ca 53       	subi	r28, 0x3A	; 58
   19670:	df 4f       	sbci	r29, 0xFF	; 255
   19672:	08 81       	ld	r16, Y
   19674:	19 81       	ldd	r17, Y+1	; 0x01
   19676:	c6 5c       	subi	r28, 0xC6	; 198
   19678:	d0 40       	sbci	r29, 0x00	; 0
   1967a:	ce 53       	subi	r28, 0x3E	; 62
   1967c:	df 4f       	sbci	r29, 0xFF	; 255
   1967e:	68 81       	ld	r22, Y
   19680:	79 81       	ldd	r23, Y+1	; 0x01
   19682:	c2 5c       	subi	r28, 0xC2	; 194
   19684:	d0 40       	sbci	r29, 0x00	; 0
   19686:	c0 54       	subi	r28, 0x40	; 64
   19688:	df 4f       	sbci	r29, 0xFF	; 255
   1968a:	88 81       	ld	r24, Y
   1968c:	99 81       	ldd	r25, Y+1	; 0x01
   1968e:	c0 5c       	subi	r28, 0xC0	; 192
   19690:	d0 40       	sbci	r29, 0x00	; 0
   19692:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19696:	18 2f       	mov	r17, r24
   19698:	5f ef       	ldi	r21, 0xFF	; 255
   1969a:	c5 1a       	sub	r12, r21
   1969c:	d5 0a       	sbc	r13, r21
   1969e:	88 23       	and	r24, r24
   196a0:	09 f4       	brne	.+2      	; 0x196a4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1a98>
   196a2:	73 cf       	rjmp	.-282    	; 0x1958a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x197e>
   196a4:	ce 54       	subi	r28, 0x4E	; 78
   196a6:	df 4f       	sbci	r29, 0xFF	; 255
   196a8:	b8 82       	st	Y, r11
   196aa:	c2 5b       	subi	r28, 0xB2	; 178
   196ac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:999
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_button_1->dyn_button_onclick);
   196ae:	f2 01       	movw	r30, r4
   196b0:	eb 52       	subi	r30, 0x2B	; 43
   196b2:	fe 4f       	sbci	r31, 0xFE	; 254
   196b4:	e6 0d       	add	r30, r6
   196b6:	f7 1d       	adc	r31, r7
   196b8:	25 91       	lpm	r18, Z+
   196ba:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1000
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
   196bc:	ca 54       	subi	r28, 0x4A	; 74
   196be:	df 4f       	sbci	r29, 0xFF	; 255
   196c0:	e8 81       	ld	r30, Y
   196c2:	f9 81       	ldd	r31, Y+1	; 0x01
   196c4:	c6 5b       	subi	r28, 0xB6	; 182
   196c6:	d0 40       	sbci	r29, 0x00	; 0
   196c8:	84 91       	lpm	r24, Z
   196ca:	cf 54       	subi	r28, 0x4F	; 79
   196cc:	df 4f       	sbci	r29, 0xFF	; 255
   196ce:	68 81       	ld	r22, Y
   196d0:	c1 5b       	subi	r28, 0xB1	; 177
   196d2:	d0 40       	sbci	r29, 0x00	; 0
   196d4:	70 e0       	ldi	r23, 0x00	; 0
   196d6:	4b 2d       	mov	r20, r11
   196d8:	90 e0       	ldi	r25, 0x00	; 0
   196da:	f9 01       	movw	r30, r18
   196dc:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1001
          ret = true;
   196de:	c4 53       	subi	r28, 0x34	; 52
   196e0:	df 4f       	sbci	r29, 0xFF	; 255
   196e2:	18 83       	st	Y, r17
   196e4:	cc 5c       	subi	r28, 0xCC	; 204
   196e6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:950
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
   196e8:	93 94       	inc	r9
   196ea:	03 cd       	rjmp	.-1530   	; 0x190f2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x14e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:994
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
   196ec:	f1 01       	movw	r30, r2
   196ee:	85 91       	lpm	r24, Z+
   196f0:	94 91       	lpm	r25, Z
   196f2:	cc 53       	subi	r28, 0x3C	; 60
   196f4:	df 4f       	sbci	r29, 0xFF	; 255
   196f6:	e8 81       	ld	r30, Y
   196f8:	f9 81       	ldd	r31, Y+1	; 0x01
   196fa:	c4 5c       	subi	r28, 0xC4	; 196
   196fc:	d0 40       	sbci	r29, 0x00	; 0
   196fe:	64 91       	lpm	r22, Z
   19700:	c6 54       	subi	r28, 0x46	; 70
   19702:	df 4f       	sbci	r29, 0xFF	; 255
   19704:	48 81       	ld	r20, Y
   19706:	59 81       	ldd	r21, Y+1	; 0x01
   19708:	ca 5b       	subi	r28, 0xBA	; 186
   1970a:	d0 40       	sbci	r29, 0x00	; 0
   1970c:	84 0f       	add	r24, r20
   1970e:	95 1f       	adc	r25, r21
   19710:	6c 9d       	mul	r22, r12
   19712:	a0 01       	movw	r20, r0
   19714:	6d 9d       	mul	r22, r13
   19716:	50 0d       	add	r21, r0
   19718:	11 24       	eor	r1, r1
   1971a:	bc 01       	movw	r22, r24
   1971c:	64 0f       	add	r22, r20
   1971e:	75 1f       	adc	r23, r21
   19720:	ce 53       	subi	r28, 0x3E	; 62
   19722:	df 4f       	sbci	r29, 0xFF	; 255
   19724:	79 83       	std	Y+1, r23	; 0x01
   19726:	68 83       	st	Y, r22
   19728:	c2 5c       	subi	r28, 0xC2	; 194
   1972a:	d0 40       	sbci	r29, 0x00	; 0
   1972c:	56 cf       	rjmp	.-340    	; 0x195da <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x19ce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1009
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
   1972e:	c4 53       	subi	r28, 0x34	; 52
   19730:	df 4f       	sbci	r29, 0xFF	; 255
   19732:	f8 81       	ld	r31, Y
   19734:	cc 5c       	subi	r28, 0xCC	; 204
   19736:	d0 40       	sbci	r29, 0x00	; 0
   19738:	f1 11       	cpse	r31, r1
   1973a:	62 c4       	rjmp	.+2244   	; 0x1a000 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1011
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   1973c:	ca 54       	subi	r28, 0x4A	; 74
   1973e:	df 4f       	sbci	r29, 0xFF	; 255
   19740:	18 82       	st	Y, r1
   19742:	c6 5b       	subi	r28, 0xB6	; 182
   19744:	d0 40       	sbci	r29, 0x00	; 0
   19746:	93 01       	movw	r18, r6
   19748:	25 52       	subi	r18, 0x25	; 37
   1974a:	3d 4f       	sbci	r19, 0xFD	; 253
   1974c:	c0 52       	subi	r28, 0x20	; 32
   1974e:	df 4f       	sbci	r29, 0xFF	; 255
   19750:	39 83       	std	Y+1, r19	; 0x01
   19752:	28 83       	st	Y, r18
   19754:	c0 5e       	subi	r28, 0xE0	; 224
   19756:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1051
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   19758:	ae 01       	movw	r20, r28
   1975a:	4f 57       	subi	r20, 0x7F	; 127
   1975c:	5f 4f       	sbci	r21, 0xFF	; 255
   1975e:	cc 54       	subi	r28, 0x4C	; 76
   19760:	df 4f       	sbci	r29, 0xFF	; 255
   19762:	59 83       	std	Y+1, r21	; 0x01
   19764:	48 83       	st	Y, r20
   19766:	c4 5b       	subi	r28, 0xB4	; 180
   19768:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1011
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   1976a:	c0 52       	subi	r28, 0x20	; 32
   1976c:	df 4f       	sbci	r29, 0xFF	; 255
   1976e:	e8 81       	ld	r30, Y
   19770:	f9 81       	ldd	r31, Y+1	; 0x01
   19772:	c0 5e       	subi	r28, 0xE0	; 224
   19774:	d0 40       	sbci	r29, 0x00	; 0
   19776:	84 91       	lpm	r24, Z
   19778:	ca 54       	subi	r28, 0x4A	; 74
   1977a:	df 4f       	sbci	r29, 0xFF	; 255
   1977c:	f8 81       	ld	r31, Y
   1977e:	c6 5b       	subi	r28, 0xB6	; 182
   19780:	d0 40       	sbci	r29, 0x00	; 0
   19782:	f8 17       	cp	r31, r24
   19784:	08 f0       	brcs	.+2      	; 0x19788 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b7c>
   19786:	42 c4       	rjmp	.+2180   	; 0x1a00c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2400>
   19788:	2e e1       	ldi	r18, 0x1E	; 30
   1978a:	f2 9f       	mul	r31, r18
   1978c:	20 01       	movw	r4, r0
   1978e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1014
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
   19790:	f2 01       	movw	r30, r4
   19792:	ed 52       	subi	r30, 0x2D	; 45
   19794:	fd 4f       	sbci	r31, 0xFD	; 253
   19796:	e6 0d       	add	r30, r6
   19798:	f7 1d       	adc	r31, r7
   1979a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1015
    if (enable_redraw(rdr, redraw_class) == true)
   1979c:	c1 53       	subi	r28, 0x31	; 49
   1979e:	df 4f       	sbci	r29, 0xFF	; 255
   197a0:	68 81       	ld	r22, Y
   197a2:	cf 5c       	subi	r28, 0xCF	; 207
   197a4:	d0 40       	sbci	r29, 0x00	; 0
   197a6:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   197aa:	88 23       	and	r24, r24
   197ac:	09 f4       	brne	.+2      	; 0x197b0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1ba4>
   197ae:	56 c2       	rjmp	.+1196   	; 0x19c5c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2050>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1017
    {
      loop_i = 0;
   197b0:	ce 54       	subi	r28, 0x4E	; 78
   197b2:	df 4f       	sbci	r29, 0xFF	; 255
   197b4:	18 82       	st	Y, r1
   197b6:	c2 5b       	subi	r28, 0xB2	; 178
   197b8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1020
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   197ba:	f2 01       	movw	r30, r4
   197bc:	e1 53       	subi	r30, 0x31	; 49
   197be:	fd 4f       	sbci	r31, 0xFD	; 253
   197c0:	e6 0d       	add	r30, r6
   197c2:	f7 1d       	adc	r31, r7
   197c4:	25 91       	lpm	r18, Z+
   197c6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1021
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   197c8:	c2 01       	movw	r24, r4
   197ca:	86 53       	subi	r24, 0x36	; 54
   197cc:	9d 4f       	sbci	r25, 0xFD	; 253
   197ce:	a3 01       	movw	r20, r6
   197d0:	48 0f       	add	r20, r24
   197d2:	59 1f       	adc	r21, r25
   197d4:	c4 54       	subi	r28, 0x44	; 68
   197d6:	df 4f       	sbci	r29, 0xFF	; 255
   197d8:	59 83       	std	Y+1, r21	; 0x01
   197da:	48 83       	st	Y, r20
   197dc:	cc 5b       	subi	r28, 0xBC	; 188
   197de:	d0 40       	sbci	r29, 0x00	; 0
   197e0:	fa 01       	movw	r30, r20
   197e2:	84 91       	lpm	r24, Z
   197e4:	cf 54       	subi	r28, 0x4F	; 79
   197e6:	df 4f       	sbci	r29, 0xFF	; 255
   197e8:	68 81       	ld	r22, Y
   197ea:	c1 5b       	subi	r28, 0xB1	; 177
   197ec:	d0 40       	sbci	r29, 0x00	; 0
   197ee:	70 e0       	ldi	r23, 0x00	; 0
   197f0:	40 e0       	ldi	r20, 0x00	; 0
   197f2:	90 e0       	ldi	r25, 0x00	; 0
   197f4:	f9 01       	movw	r30, r18
   197f6:	19 95       	eicall
   197f8:	cd 54       	subi	r28, 0x4D	; 77
   197fa:	df 4f       	sbci	r29, 0xFF	; 255
   197fc:	88 83       	st	Y, r24
   197fe:	c3 5b       	subi	r28, 0xB3	; 179
   19800:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1022
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
   19802:	f2 01       	movw	r30, r4
   19804:	e5 53       	subi	r30, 0x35	; 53
   19806:	fd 4f       	sbci	r31, 0xFD	; 253
   19808:	e6 0d       	add	r30, r6
   1980a:	f7 1d       	adc	r31, r7
   1980c:	25 91       	lpm	r18, Z+
   1980e:	34 91       	lpm	r19, Z
   19810:	ce 51       	subi	r28, 0x1E	; 30
   19812:	df 4f       	sbci	r29, 0xFF	; 255
   19814:	39 83       	std	Y+1, r19	; 0x01
   19816:	28 83       	st	Y, r18
   19818:	c2 5e       	subi	r28, 0xE2	; 226
   1981a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1023
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   1981c:	f2 01       	movw	r30, r4
   1981e:	e7 53       	subi	r30, 0x37	; 55
   19820:	fd 4f       	sbci	r31, 0xFD	; 253
   19822:	e6 0d       	add	r30, r6
   19824:	f7 1d       	adc	r31, r7
   19826:	44 91       	lpm	r20, Z
   19828:	c2 01       	movw	r24, r4
   1982a:	89 53       	subi	r24, 0x39	; 57
   1982c:	9d 4f       	sbci	r25, 0xFD	; 253
   1982e:	b3 01       	movw	r22, r6
   19830:	68 0f       	add	r22, r24
   19832:	79 1f       	adc	r23, r25
   19834:	c0 53       	subi	r28, 0x30	; 48
   19836:	df 4f       	sbci	r29, 0xFF	; 255
   19838:	79 83       	std	Y+1, r23	; 0x01
   1983a:	68 83       	st	Y, r22
   1983c:	c0 5d       	subi	r28, 0xD0	; 208
   1983e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1024
      if (slider_active != MENU_SLIDER_OFF)
   19840:	4f 3f       	cpi	r20, 0xFF	; 255
   19842:	99 f0       	breq	.+38     	; 0x1986a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1c5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1025
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   19844:	fb 01       	movw	r30, r22
   19846:	24 91       	lpm	r18, Z
   19848:	f2 01       	movw	r30, r4
   1984a:	e8 53       	subi	r30, 0x38	; 56
   1984c:	fd 4f       	sbci	r31, 0xFD	; 253
   1984e:	e6 0d       	add	r30, r6
   19850:	f7 1d       	adc	r31, r7
   19852:	e4 91       	lpm	r30, Z
   19854:	2e 9f       	mul	r18, r30
   19856:	20 2d       	mov	r18, r0
   19858:	11 24       	eor	r1, r1
   1985a:	be 01       	movw	r22, r28
   1985c:	6d 54       	subi	r22, 0x4D	; 77
   1985e:	7f 4f       	sbci	r23, 0xFF	; 255
   19860:	ce 01       	movw	r24, r28
   19862:	8e 54       	subi	r24, 0x4E	; 78
   19864:	9f 4f       	sbci	r25, 0xFF	; 255
   19866:	0e 94 13 a4 	call	0x14826	; 0x14826 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1028
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   1986a:	c2 01       	movw	r24, r4
   1986c:	8a 53       	subi	r24, 0x3A	; 58
   1986e:	9d 4f       	sbci	r25, 0xFD	; 253
   19870:	93 01       	movw	r18, r6
   19872:	28 0f       	add	r18, r24
   19874:	39 1f       	adc	r19, r25
   19876:	c2 54       	subi	r28, 0x42	; 66
   19878:	df 4f       	sbci	r29, 0xFF	; 255
   1987a:	39 83       	std	Y+1, r19	; 0x01
   1987c:	28 83       	st	Y, r18
   1987e:	ce 5b       	subi	r28, 0xBE	; 190
   19880:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1030
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19882:	40 97       	sbiw	r24, 0x10	; 16
   19884:	a3 01       	movw	r20, r6
   19886:	48 0f       	add	r20, r24
   19888:	59 1f       	adc	r21, r25
   1988a:	cc 53       	subi	r28, 0x3C	; 60
   1988c:	df 4f       	sbci	r29, 0xFF	; 255
   1988e:	59 83       	std	Y+1, r21	; 0x01
   19890:	48 83       	st	Y, r20
   19892:	c4 5c       	subi	r28, 0xC4	; 196
   19894:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   19896:	12 01       	movw	r2, r4
   19898:	58 e4       	ldi	r21, 0x48	; 72
   1989a:	25 1a       	sub	r2, r21
   1989c:	5d ef       	ldi	r21, 0xFD	; 253
   1989e:	35 0a       	sbc	r3, r21
   198a0:	26 0c       	add	r2, r6
   198a2:	37 1c       	adc	r3, r7
   198a4:	0f 96       	adiw	r24, 0x0f	; 15
   198a6:	b3 01       	movw	r22, r6
   198a8:	68 0f       	add	r22, r24
   198aa:	79 1f       	adc	r23, r25
   198ac:	c6 53       	subi	r28, 0x36	; 54
   198ae:	df 4f       	sbci	r29, 0xFF	; 255
   198b0:	79 83       	std	Y+1, r23	; 0x01
   198b2:	68 83       	st	Y, r22
   198b4:	ca 5c       	subi	r28, 0xCA	; 202
   198b6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   198b8:	01 97       	sbiw	r24, 0x01	; 1
   198ba:	f3 01       	movw	r30, r6
   198bc:	e8 0f       	add	r30, r24
   198be:	f9 1f       	adc	r31, r25
   198c0:	c3 53       	subi	r28, 0x33	; 51
   198c2:	df 4f       	sbci	r29, 0xFF	; 255
   198c4:	f9 83       	std	Y+1, r31	; 0x01
   198c6:	e8 83       	st	Y, r30
   198c8:	cd 5c       	subi	r28, 0xCD	; 205
   198ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1052
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   198cc:	0d 96       	adiw	r24, 0x0d	; 13
   198ce:	93 01       	movw	r18, r6
   198d0:	28 0f       	add	r18, r24
   198d2:	39 1f       	adc	r19, r25
   198d4:	ce 52       	subi	r28, 0x2E	; 46
   198d6:	df 4f       	sbci	r29, 0xFF	; 255
   198d8:	39 83       	std	Y+1, r19	; 0x01
   198da:	28 83       	st	Y, r18
   198dc:	c2 5d       	subi	r28, 0xD2	; 210
   198de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   198e0:	0f 97       	sbiw	r24, 0x0f	; 15
   198e2:	a3 01       	movw	r20, r6
   198e4:	48 0f       	add	r20, r24
   198e6:	59 1f       	adc	r21, r25
   198e8:	cc 52       	subi	r28, 0x2C	; 44
   198ea:	df 4f       	sbci	r29, 0xFF	; 255
   198ec:	59 83       	std	Y+1, r21	; 0x01
   198ee:	48 83       	st	Y, r20
   198f0:	c4 5d       	subi	r28, 0xD4	; 212
   198f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1058
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   198f4:	02 97       	sbiw	r24, 0x02	; 2
   198f6:	b3 01       	movw	r22, r6
   198f8:	68 0f       	add	r22, r24
   198fa:	79 1f       	adc	r23, r25
   198fc:	ca 52       	subi	r28, 0x2A	; 42
   198fe:	df 4f       	sbci	r29, 0xFF	; 255
   19900:	79 83       	std	Y+1, r23	; 0x01
   19902:	68 83       	st	Y, r22
   19904:	c6 5d       	subi	r28, 0xD6	; 214
   19906:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   19908:	01 97       	sbiw	r24, 0x01	; 1
   1990a:	f3 01       	movw	r30, r6
   1990c:	e8 0f       	add	r30, r24
   1990e:	f9 1f       	adc	r31, r25
   19910:	c8 52       	subi	r28, 0x28	; 40
   19912:	df 4f       	sbci	r29, 0xFF	; 255
   19914:	f9 83       	std	Y+1, r31	; 0x01
   19916:	e8 83       	st	Y, r30
   19918:	c8 5d       	subi	r28, 0xD8	; 216
   1991a:	d0 40       	sbci	r29, 0x00	; 0
   1991c:	01 97       	sbiw	r24, 0x01	; 1
   1991e:	93 01       	movw	r18, r6
   19920:	28 0f       	add	r18, r24
   19922:	39 1f       	adc	r19, r25
   19924:	c6 52       	subi	r28, 0x26	; 38
   19926:	df 4f       	sbci	r29, 0xFF	; 255
   19928:	39 83       	std	Y+1, r19	; 0x01
   1992a:	28 83       	st	Y, r18
   1992c:	ca 5d       	subi	r28, 0xDA	; 218
   1992e:	d0 40       	sbci	r29, 0x00	; 0
   19930:	02 97       	sbiw	r24, 0x02	; 2
   19932:	a3 01       	movw	r20, r6
   19934:	48 0f       	add	r20, r24
   19936:	59 1f       	adc	r21, r25
   19938:	c4 52       	subi	r28, 0x24	; 36
   1993a:	df 4f       	sbci	r29, 0xFF	; 255
   1993c:	59 83       	std	Y+1, r21	; 0x01
   1993e:	48 83       	st	Y, r20
   19940:	cc 5d       	subi	r28, 0xDC	; 220
   19942:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   19944:	02 97       	sbiw	r24, 0x02	; 2
   19946:	b3 01       	movw	r22, r6
   19948:	68 0f       	add	r22, r24
   1994a:	79 1f       	adc	r23, r25
   1994c:	c2 52       	subi	r28, 0x22	; 34
   1994e:	df 4f       	sbci	r29, 0xFF	; 255
   19950:	79 83       	std	Y+1, r23	; 0x01
   19952:	68 83       	st	Y, r22
   19954:	ce 5d       	subi	r28, 0xDE	; 222
   19956:	d0 40       	sbci	r29, 0x00	; 0
   19958:	91 2c       	mov	r9, r1
   1995a:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1026
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = (ret_string_fptr*)pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   1995c:	ce 54       	subi	r28, 0x4E	; 78
   1995e:	df 4f       	sbci	r29, 0xFF	; 255
   19960:	88 81       	ld	r24, Y
   19962:	c2 5b       	subi	r28, 0xB2	; 178
   19964:	d0 40       	sbci	r29, 0x00	; 0
   19966:	cd 54       	subi	r28, 0x4D	; 77
   19968:	df 4f       	sbci	r29, 0xFF	; 255
   1996a:	98 81       	ld	r25, Y
   1996c:	c3 5b       	subi	r28, 0xB3	; 179
   1996e:	d0 40       	sbci	r29, 0x00	; 0
   19970:	89 17       	cp	r24, r25
   19972:	08 f0       	brcs	.+2      	; 0x19976 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d6a>
   19974:	73 c1       	rjmp	.+742    	; 0x19c5c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2050>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1028
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   19976:	c2 54       	subi	r28, 0x42	; 66
   19978:	df 4f       	sbci	r29, 0xFF	; 255
   1997a:	e8 81       	ld	r30, Y
   1997c:	f9 81       	ldd	r31, Y+1	; 0x01
   1997e:	ce 5b       	subi	r28, 0xBE	; 190
   19980:	d0 40       	sbci	r29, 0x00	; 0
   19982:	94 91       	lpm	r25, Z
   19984:	91 11       	cpse	r25, r1
   19986:	34 c0       	rjmp	.+104    	; 0x199f0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1de4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1030
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19988:	cc 53       	subi	r28, 0x3C	; 60
   1998a:	df 4f       	sbci	r29, 0xFF	; 255
   1998c:	e8 81       	ld	r30, Y
   1998e:	f9 81       	ldd	r31, Y+1	; 0x01
   19990:	c4 5c       	subi	r28, 0xC4	; 196
   19992:	d0 40       	sbci	r29, 0x00	; 0
   19994:	25 91       	lpm	r18, Z+
   19996:	34 91       	lpm	r19, Z
   19998:	c8 54       	subi	r28, 0x48	; 72
   1999a:	df 4f       	sbci	r29, 0xFF	; 255
   1999c:	48 81       	ld	r20, Y
   1999e:	59 81       	ldd	r21, Y+1	; 0x01
   199a0:	c8 5b       	subi	r28, 0xB8	; 184
   199a2:	d0 40       	sbci	r29, 0x00	; 0
   199a4:	42 0f       	add	r20, r18
   199a6:	53 1f       	adc	r21, r19
   199a8:	c0 54       	subi	r28, 0x40	; 64
   199aa:	df 4f       	sbci	r29, 0xFF	; 255
   199ac:	59 83       	std	Y+1, r21	; 0x01
   199ae:	48 83       	st	Y, r20
   199b0:	c0 5c       	subi	r28, 0xC0	; 192
   199b2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1031
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   199b4:	f1 01       	movw	r30, r2
   199b6:	25 91       	lpm	r18, Z+
   199b8:	34 91       	lpm	r19, Z
   199ba:	c6 53       	subi	r28, 0x36	; 54
   199bc:	df 4f       	sbci	r29, 0xFF	; 255
   199be:	e8 81       	ld	r30, Y
   199c0:	f9 81       	ldd	r31, Y+1	; 0x01
   199c2:	ca 5c       	subi	r28, 0xCA	; 202
   199c4:	d0 40       	sbci	r29, 0x00	; 0
   199c6:	94 91       	lpm	r25, Z
   199c8:	c6 54       	subi	r28, 0x46	; 70
   199ca:	df 4f       	sbci	r29, 0xFF	; 255
   199cc:	48 81       	ld	r20, Y
   199ce:	59 81       	ldd	r21, Y+1	; 0x01
   199d0:	ca 5b       	subi	r28, 0xBA	; 186
   199d2:	d0 40       	sbci	r29, 0x00	; 0
   199d4:	24 0f       	add	r18, r20
   199d6:	35 1f       	adc	r19, r21
   199d8:	b9 01       	movw	r22, r18
   199da:	9f 9d       	mul	r25, r15
   199dc:	60 0d       	add	r22, r0
   199de:	71 1d       	adc	r23, r1
   199e0:	11 24       	eor	r1, r1
   199e2:	ce 53       	subi	r28, 0x3E	; 62
   199e4:	df 4f       	sbci	r29, 0xFF	; 255
   199e6:	79 83       	std	Y+1, r23	; 0x01
   199e8:	68 83       	st	Y, r22
   199ea:	c2 5c       	subi	r28, 0xC2	; 194
   199ec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1032
          loop_t++;
   199ee:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1034
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   199f0:	c2 54       	subi	r28, 0x42	; 66
   199f2:	df 4f       	sbci	r29, 0xFF	; 255
   199f4:	e8 81       	ld	r30, Y
   199f6:	f9 81       	ldd	r31, Y+1	; 0x01
   199f8:	ce 5b       	subi	r28, 0xBE	; 190
   199fa:	d0 40       	sbci	r29, 0x00	; 0
   199fc:	94 91       	lpm	r25, Z
   199fe:	91 30       	cpi	r25, 0x01	; 1
   19a00:	09 f0       	breq	.+2      	; 0x19a04 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1df8>
   19a02:	34 c0       	rjmp	.+104    	; 0x19a6c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1036
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   19a04:	f1 01       	movw	r30, r2
   19a06:	25 91       	lpm	r18, Z+
   19a08:	34 91       	lpm	r19, Z
   19a0a:	c6 54       	subi	r28, 0x46	; 70
   19a0c:	df 4f       	sbci	r29, 0xFF	; 255
   19a0e:	48 81       	ld	r20, Y
   19a10:	59 81       	ldd	r21, Y+1	; 0x01
   19a12:	ca 5b       	subi	r28, 0xBA	; 186
   19a14:	d0 40       	sbci	r29, 0x00	; 0
   19a16:	42 0f       	add	r20, r18
   19a18:	53 1f       	adc	r21, r19
   19a1a:	ce 53       	subi	r28, 0x3E	; 62
   19a1c:	df 4f       	sbci	r29, 0xFF	; 255
   19a1e:	59 83       	std	Y+1, r21	; 0x01
   19a20:	48 83       	st	Y, r20
   19a22:	c2 5c       	subi	r28, 0xC2	; 194
   19a24:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1037
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19a26:	cc 53       	subi	r28, 0x3C	; 60
   19a28:	df 4f       	sbci	r29, 0xFF	; 255
   19a2a:	e8 81       	ld	r30, Y
   19a2c:	f9 81       	ldd	r31, Y+1	; 0x01
   19a2e:	c4 5c       	subi	r28, 0xC4	; 196
   19a30:	d0 40       	sbci	r29, 0x00	; 0
   19a32:	25 91       	lpm	r18, Z+
   19a34:	34 91       	lpm	r19, Z
   19a36:	c3 53       	subi	r28, 0x33	; 51
   19a38:	df 4f       	sbci	r29, 0xFF	; 255
   19a3a:	e8 81       	ld	r30, Y
   19a3c:	f9 81       	ldd	r31, Y+1	; 0x01
   19a3e:	cd 5c       	subi	r28, 0xCD	; 205
   19a40:	d0 40       	sbci	r29, 0x00	; 0
   19a42:	94 91       	lpm	r25, Z
   19a44:	c8 54       	subi	r28, 0x48	; 72
   19a46:	df 4f       	sbci	r29, 0xFF	; 255
   19a48:	48 81       	ld	r20, Y
   19a4a:	59 81       	ldd	r21, Y+1	; 0x01
   19a4c:	c8 5b       	subi	r28, 0xB8	; 184
   19a4e:	d0 40       	sbci	r29, 0x00	; 0
   19a50:	24 0f       	add	r18, r20
   19a52:	35 1f       	adc	r19, r21
   19a54:	b9 01       	movw	r22, r18
   19a56:	9f 9d       	mul	r25, r15
   19a58:	60 0d       	add	r22, r0
   19a5a:	71 1d       	adc	r23, r1
   19a5c:	11 24       	eor	r1, r1
   19a5e:	c0 54       	subi	r28, 0x40	; 64
   19a60:	df 4f       	sbci	r29, 0xFF	; 255
   19a62:	79 83       	std	Y+1, r23	; 0x01
   19a64:	68 83       	st	Y, r22
   19a66:	c0 5c       	subi	r28, 0xC0	; 192
   19a68:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1038
          loop_t++;
   19a6a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1040
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   19a6c:	c2 54       	subi	r28, 0x42	; 66
   19a6e:	df 4f       	sbci	r29, 0xFF	; 255
   19a70:	e8 81       	ld	r30, Y
   19a72:	f9 81       	ldd	r31, Y+1	; 0x01
   19a74:	ce 5b       	subi	r28, 0xBE	; 190
   19a76:	d0 40       	sbci	r29, 0x00	; 0
   19a78:	94 91       	lpm	r25, Z
   19a7a:	92 30       	cpi	r25, 0x02	; 2
   19a7c:	09 f0       	breq	.+2      	; 0x19a80 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1e74>
   19a7e:	4b c0       	rjmp	.+150    	; 0x19b16 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1042
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19a80:	cc 53       	subi	r28, 0x3C	; 60
   19a82:	df 4f       	sbci	r29, 0xFF	; 255
   19a84:	e8 81       	ld	r30, Y
   19a86:	f9 81       	ldd	r31, Y+1	; 0x01
   19a88:	c4 5c       	subi	r28, 0xC4	; 196
   19a8a:	d0 40       	sbci	r29, 0x00	; 0
   19a8c:	25 91       	lpm	r18, Z+
   19a8e:	34 91       	lpm	r19, Z
   19a90:	c3 53       	subi	r28, 0x33	; 51
   19a92:	df 4f       	sbci	r29, 0xFF	; 255
   19a94:	e8 81       	ld	r30, Y
   19a96:	f9 81       	ldd	r31, Y+1	; 0x01
   19a98:	cd 5c       	subi	r28, 0xCD	; 205
   19a9a:	d0 40       	sbci	r29, 0x00	; 0
   19a9c:	94 91       	lpm	r25, Z
   19a9e:	c8 54       	subi	r28, 0x48	; 72
   19aa0:	df 4f       	sbci	r29, 0xFF	; 255
   19aa2:	48 81       	ld	r20, Y
   19aa4:	59 81       	ldd	r21, Y+1	; 0x01
   19aa6:	c8 5b       	subi	r28, 0xB8	; 184
   19aa8:	d0 40       	sbci	r29, 0x00	; 0
   19aaa:	24 0f       	add	r18, r20
   19aac:	35 1f       	adc	r19, r21
   19aae:	b9 01       	movw	r22, r18
   19ab0:	9f 9d       	mul	r25, r15
   19ab2:	60 0d       	add	r22, r0
   19ab4:	71 1d       	adc	r23, r1
   19ab6:	11 24       	eor	r1, r1
   19ab8:	c0 54       	subi	r28, 0x40	; 64
   19aba:	df 4f       	sbci	r29, 0xFF	; 255
   19abc:	79 83       	std	Y+1, r23	; 0x01
   19abe:	68 83       	st	Y, r22
   19ac0:	c0 5c       	subi	r28, 0xC0	; 192
   19ac2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1043
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   19ac4:	f1 01       	movw	r30, r2
   19ac6:	25 91       	lpm	r18, Z+
   19ac8:	34 91       	lpm	r19, Z
   19aca:	c6 53       	subi	r28, 0x36	; 54
   19acc:	df 4f       	sbci	r29, 0xFF	; 255
   19ace:	e8 81       	ld	r30, Y
   19ad0:	f9 81       	ldd	r31, Y+1	; 0x01
   19ad2:	ca 5c       	subi	r28, 0xCA	; 202
   19ad4:	d0 40       	sbci	r29, 0x00	; 0
   19ad6:	94 91       	lpm	r25, Z
   19ad8:	c6 54       	subi	r28, 0x46	; 70
   19ada:	df 4f       	sbci	r29, 0xFF	; 255
   19adc:	48 81       	ld	r20, Y
   19ade:	59 81       	ldd	r21, Y+1	; 0x01
   19ae0:	ca 5b       	subi	r28, 0xBA	; 186
   19ae2:	d0 40       	sbci	r29, 0x00	; 0
   19ae4:	24 0f       	add	r18, r20
   19ae6:	35 1f       	adc	r19, r21
   19ae8:	b9 01       	movw	r22, r18
   19aea:	99 9d       	mul	r25, r9
   19aec:	60 0d       	add	r22, r0
   19aee:	71 1d       	adc	r23, r1
   19af0:	11 24       	eor	r1, r1
   19af2:	ce 53       	subi	r28, 0x3E	; 62
   19af4:	df 4f       	sbci	r29, 0xFF	; 255
   19af6:	79 83       	std	Y+1, r23	; 0x01
   19af8:	68 83       	st	Y, r22
   19afa:	c2 5c       	subi	r28, 0xC2	; 194
   19afc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1044
          loop_t++;
   19afe:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1045
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
   19b00:	c0 53       	subi	r28, 0x30	; 48
   19b02:	df 4f       	sbci	r29, 0xFF	; 255
   19b04:	e8 81       	ld	r30, Y
   19b06:	f9 81       	ldd	r31, Y+1	; 0x01
   19b08:	c0 5d       	subi	r28, 0xD0	; 208
   19b0a:	d0 40       	sbci	r29, 0x00	; 0
   19b0c:	94 91       	lpm	r25, Z
   19b0e:	f9 16       	cp	r15, r25
   19b10:	10 f0       	brcs	.+4      	; 0x19b16 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f0a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1048
          {
            loop_t = 0;
            loop_r++;
   19b12:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1047
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
   19b14:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1051
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
   19b16:	c4 54       	subi	r28, 0x44	; 68
   19b18:	df 4f       	sbci	r29, 0xFF	; 255
   19b1a:	e8 81       	ld	r30, Y
   19b1c:	f9 81       	ldd	r31, Y+1	; 0x01
   19b1e:	cc 5b       	subi	r28, 0xBC	; 188
   19b20:	d0 40       	sbci	r29, 0x00	; 0
   19b22:	44 91       	lpm	r20, Z
   19b24:	8e 01       	movw	r16, r28
   19b26:	0f 57       	subi	r16, 0x7F	; 127
   19b28:	1f 4f       	sbci	r17, 0xFF	; 255
   19b2a:	9e 01       	movw	r18, r28
   19b2c:	2f 5f       	subi	r18, 0xFF	; 255
   19b2e:	3f 4f       	sbci	r19, 0xFF	; 255
   19b30:	cf 54       	subi	r28, 0x4F	; 79
   19b32:	df 4f       	sbci	r29, 0xFF	; 255
   19b34:	68 81       	ld	r22, Y
   19b36:	c1 5b       	subi	r28, 0xB1	; 177
   19b38:	d0 40       	sbci	r29, 0x00	; 0
   19b3a:	ce 51       	subi	r28, 0x1E	; 30
   19b3c:	df 4f       	sbci	r29, 0xFF	; 255
   19b3e:	e8 81       	ld	r30, Y
   19b40:	f9 81       	ldd	r31, Y+1	; 0x01
   19b42:	c2 5e       	subi	r28, 0xE2	; 226
   19b44:	d0 40       	sbci	r29, 0x00	; 0
   19b46:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1052
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
   19b48:	ce 52       	subi	r28, 0x2E	; 46
   19b4a:	df 4f       	sbci	r29, 0xFF	; 255
   19b4c:	e8 81       	ld	r30, Y
   19b4e:	f9 81       	ldd	r31, Y+1	; 0x01
   19b50:	c2 5d       	subi	r28, 0xD2	; 210
   19b52:	d0 40       	sbci	r29, 0x00	; 0
   19b54:	25 91       	lpm	r18, Z+
   19b56:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1053
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   19b58:	c4 54       	subi	r28, 0x44	; 68
   19b5a:	df 4f       	sbci	r29, 0xFF	; 255
   19b5c:	e8 81       	ld	r30, Y
   19b5e:	f9 81       	ldd	r31, Y+1	; 0x01
   19b60:	cc 5b       	subi	r28, 0xBC	; 188
   19b62:	d0 40       	sbci	r29, 0x00	; 0
   19b64:	84 91       	lpm	r24, Z
   19b66:	cf 54       	subi	r28, 0x4F	; 79
   19b68:	df 4f       	sbci	r29, 0xFF	; 255
   19b6a:	68 81       	ld	r22, Y
   19b6c:	c1 5b       	subi	r28, 0xB1	; 177
   19b6e:	d0 40       	sbci	r29, 0x00	; 0
   19b70:	70 e0       	ldi	r23, 0x00	; 0
   19b72:	ce 54       	subi	r28, 0x4E	; 78
   19b74:	df 4f       	sbci	r29, 0xFF	; 255
   19b76:	48 81       	ld	r20, Y
   19b78:	c2 5b       	subi	r28, 0xB2	; 178
   19b7a:	d0 40       	sbci	r29, 0x00	; 0
   19b7c:	90 e0       	ldi	r25, 0x00	; 0
   19b7e:	f9 01       	movw	r30, r18
   19b80:	19 95       	eicall
   19b82:	88 2e       	mov	r8, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1055
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
   19b84:	60 e2       	ldi	r22, 0x20	; 32
   19b86:	c1 53       	subi	r28, 0x31	; 49
   19b88:	df 4f       	sbci	r29, 0xFF	; 255
   19b8a:	88 81       	ld	r24, Y
   19b8c:	cf 5c       	subi	r28, 0xCF	; 207
   19b8e:	d0 40       	sbci	r29, 0x00	; 0
   19b90:	0e 94 f7 b3 	call	0x167ee	; 0x167ee <enable_redraw(unsigned char, unsigned char)>
   19b94:	88 23       	and	r24, r24
   19b96:	21 f0       	breq	.+8      	; 0x19ba0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f94>
   19b98:	f2 e0       	ldi	r31, 0x02	; 2
   19b9a:	8f 12       	cpse	r8, r31
   19b9c:	01 c0       	rjmp	.+2      	; 0x19ba0 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1f94>
   19b9e:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1059
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
   19ba0:	cc 52       	subi	r28, 0x2C	; 44
   19ba2:	df 4f       	sbci	r29, 0xFF	; 255
   19ba4:	e8 81       	ld	r30, Y
   19ba6:	f9 81       	ldd	r31, Y+1	; 0x01
   19ba8:	c4 5d       	subi	r28, 0xD4	; 212
   19baa:	d0 40       	sbci	r29, 0x00	; 0
   19bac:	a5 90       	lpm	r10, Z+
   19bae:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1058
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
   19bb0:	ca 52       	subi	r28, 0x2A	; 42
   19bb2:	df 4f       	sbci	r29, 0xFF	; 255
   19bb4:	e8 81       	ld	r30, Y
   19bb6:	f9 81       	ldd	r31, Y+1	; 0x01
   19bb8:	c6 5d       	subi	r28, 0xD6	; 214
   19bba:	d0 40       	sbci	r29, 0x00	; 0
   19bbc:	c5 90       	lpm	r12, Z+
   19bbe:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1057
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
   19bc0:	c8 52       	subi	r28, 0x28	; 40
   19bc2:	df 4f       	sbci	r29, 0xFF	; 255
   19bc4:	e8 81       	ld	r30, Y
   19bc6:	f9 81       	ldd	r31, Y+1	; 0x01
   19bc8:	c8 5d       	subi	r28, 0xD8	; 216
   19bca:	d0 40       	sbci	r29, 0x00	; 0
   19bcc:	e4 90       	lpm	r14, Z
   19bce:	c6 52       	subi	r28, 0x26	; 38
   19bd0:	df 4f       	sbci	r29, 0xFF	; 255
   19bd2:	e8 81       	ld	r30, Y
   19bd4:	f9 81       	ldd	r31, Y+1	; 0x01
   19bd6:	ca 5d       	subi	r28, 0xDA	; 218
   19bd8:	d0 40       	sbci	r29, 0x00	; 0
   19bda:	04 91       	lpm	r16, Z
   19bdc:	c4 52       	subi	r28, 0x24	; 36
   19bde:	df 4f       	sbci	r29, 0xFF	; 255
   19be0:	e8 81       	ld	r30, Y
   19be2:	f9 81       	ldd	r31, Y+1	; 0x01
   19be4:	cc 5d       	subi	r28, 0xDC	; 220
   19be6:	d0 40       	sbci	r29, 0x00	; 0
   19be8:	25 91       	lpm	r18, Z+
   19bea:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1056
        ((ret_string_fptr)gss)(loop_i, menu_args1, pgm_read_byte(&dyn_select_box_1->args), str1, str2);
        rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        /// pro REDRAW_ONCE, kdyz mi vyjde stev 2, to je neni na tlacitku zadna zmena, tak vykresli jako neaktivni, bez teto podminky, by se nic neukazalo
        if ((enable_redraw(redraw_class, (1 << REDRAW_ONCE)) == true) && (state == 2)) state = 0;
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
   19bec:	c2 52       	subi	r28, 0x22	; 34
   19bee:	df 4f       	sbci	r29, 0xFF	; 255
   19bf0:	e8 81       	ld	r30, Y
   19bf2:	f9 81       	ldd	r31, Y+1	; 0x01
   19bf4:	ce 5d       	subi	r28, 0xDE	; 222
   19bf6:	d0 40       	sbci	r29, 0x00	; 0
   19bf8:	45 91       	lpm	r20, Z+
   19bfa:	54 91       	lpm	r21, Z
   19bfc:	cb 54       	subi	r28, 0x4B	; 75
   19bfe:	df 4f       	sbci	r29, 0xFF	; 255
   19c00:	f8 81       	ld	r31, Y
   19c02:	c5 5b       	subi	r28, 0xB5	; 181
   19c04:	d0 40       	sbci	r29, 0x00	; 0
   19c06:	ff 93       	push	r31
   19c08:	cc 54       	subi	r28, 0x4C	; 76
   19c0a:	df 4f       	sbci	r29, 0xFF	; 255
   19c0c:	68 81       	ld	r22, Y
   19c0e:	c4 5b       	subi	r28, 0xB4	; 180
   19c10:	d0 40       	sbci	r29, 0x00	; 0
   19c12:	6f 93       	push	r22
   19c14:	81 e0       	ldi	r24, 0x01	; 1
   19c16:	90 e0       	ldi	r25, 0x00	; 0
   19c18:	8c 0f       	add	r24, r28
   19c1a:	9d 1f       	adc	r25, r29
   19c1c:	9f 93       	push	r25
   19c1e:	8f 93       	push	r24
   19c20:	ce 53       	subi	r28, 0x3E	; 62
   19c22:	df 4f       	sbci	r29, 0xFF	; 255
   19c24:	68 81       	ld	r22, Y
   19c26:	79 81       	ldd	r23, Y+1	; 0x01
   19c28:	c2 5c       	subi	r28, 0xC2	; 194
   19c2a:	d0 40       	sbci	r29, 0x00	; 0
   19c2c:	c0 54       	subi	r28, 0x40	; 64
   19c2e:	df 4f       	sbci	r29, 0xFF	; 255
   19c30:	88 81       	ld	r24, Y
   19c32:	99 81       	ldd	r25, Y+1	; 0x01
   19c34:	c0 5c       	subi	r28, 0xC0	; 192
   19c36:	d0 40       	sbci	r29, 0x00	; 0
   19c38:	0e 94 1d a2 	call	0x1443a	; 0x1443a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1060
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
   19c3c:	ce 54       	subi	r28, 0x4E	; 78
   19c3e:	df 4f       	sbci	r29, 0xFF	; 255
   19c40:	88 81       	ld	r24, Y
   19c42:	c2 5b       	subi	r28, 0xB2	; 178
   19c44:	d0 40       	sbci	r29, 0x00	; 0
   19c46:	8f 5f       	subi	r24, 0xFF	; 255
   19c48:	ce 54       	subi	r28, 0x4E	; 78
   19c4a:	df 4f       	sbci	r29, 0xFF	; 255
   19c4c:	88 83       	st	Y, r24
   19c4e:	c2 5b       	subi	r28, 0xB2	; 178
   19c50:	d0 40       	sbci	r29, 0x00	; 0
   19c52:	0f 90       	pop	r0
   19c54:	0f 90       	pop	r0
   19c56:	0f 90       	pop	r0
   19c58:	0f 90       	pop	r0
   19c5a:	80 ce       	rjmp	.-768    	; 0x1995c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1d50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1063
      }
    }
    if (click_x > 0 && click_y > 0)
   19c5c:	ca 53       	subi	r28, 0x3A	; 58
   19c5e:	df 4f       	sbci	r29, 0xFF	; 255
   19c60:	e8 81       	ld	r30, Y
   19c62:	f9 81       	ldd	r31, Y+1	; 0x01
   19c64:	c6 5c       	subi	r28, 0xC6	; 198
   19c66:	d0 40       	sbci	r29, 0x00	; 0
   19c68:	ef 2b       	or	r30, r31
   19c6a:	09 f4       	brne	.+2      	; 0x19c6e <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2062>
   19c6c:	bb c1       	rjmp	.+886    	; 0x19fe4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d8>
   19c6e:	c8 53       	subi	r28, 0x38	; 56
   19c70:	df 4f       	sbci	r29, 0xFF	; 255
   19c72:	28 81       	ld	r18, Y
   19c74:	39 81       	ldd	r19, Y+1	; 0x01
   19c76:	c8 5c       	subi	r28, 0xC8	; 200
   19c78:	d0 40       	sbci	r29, 0x00	; 0
   19c7a:	23 2b       	or	r18, r19
   19c7c:	09 f4       	brne	.+2      	; 0x19c80 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2074>
   19c7e:	b2 c1       	rjmp	.+868    	; 0x19fe4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1065
    {
      loop_i = 0;
   19c80:	ce 54       	subi	r28, 0x4E	; 78
   19c82:	df 4f       	sbci	r29, 0xFF	; 255
   19c84:	18 82       	st	Y, r1
   19c86:	c2 5b       	subi	r28, 0xB2	; 178
   19c88:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1068
      loop_t = 0;
      loop_r = 0;
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
   19c8a:	f2 01       	movw	r30, r4
   19c8c:	e1 53       	subi	r30, 0x31	; 49
   19c8e:	fd 4f       	sbci	r31, 0xFD	; 253
   19c90:	e6 0d       	add	r30, r6
   19c92:	f7 1d       	adc	r31, r7
   19c94:	25 91       	lpm	r18, Z+
   19c96:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1069
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   19c98:	c2 01       	movw	r24, r4
   19c9a:	86 53       	subi	r24, 0x36	; 54
   19c9c:	9d 4f       	sbci	r25, 0xFD	; 253
   19c9e:	a3 01       	movw	r20, r6
   19ca0:	48 0f       	add	r20, r24
   19ca2:	59 1f       	adc	r21, r25
   19ca4:	c2 54       	subi	r28, 0x42	; 66
   19ca6:	df 4f       	sbci	r29, 0xFF	; 255
   19ca8:	59 83       	std	Y+1, r21	; 0x01
   19caa:	48 83       	st	Y, r20
   19cac:	ce 5b       	subi	r28, 0xBE	; 190
   19cae:	d0 40       	sbci	r29, 0x00	; 0
   19cb0:	fa 01       	movw	r30, r20
   19cb2:	84 91       	lpm	r24, Z
   19cb4:	cf 54       	subi	r28, 0x4F	; 79
   19cb6:	df 4f       	sbci	r29, 0xFF	; 255
   19cb8:	68 81       	ld	r22, Y
   19cba:	c1 5b       	subi	r28, 0xB1	; 177
   19cbc:	d0 40       	sbci	r29, 0x00	; 0
   19cbe:	70 e0       	ldi	r23, 0x00	; 0
   19cc0:	40 e0       	ldi	r20, 0x00	; 0
   19cc2:	90 e0       	ldi	r25, 0x00	; 0
   19cc4:	f9 01       	movw	r30, r18
   19cc6:	19 95       	eicall
   19cc8:	cd 54       	subi	r28, 0x4D	; 77
   19cca:	df 4f       	sbci	r29, 0xFF	; 255
   19ccc:	88 83       	st	Y, r24
   19cce:	c3 5b       	subi	r28, 0xB3	; 179
   19cd0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1070
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
   19cd2:	f2 01       	movw	r30, r4
   19cd4:	e7 53       	subi	r30, 0x37	; 55
   19cd6:	fd 4f       	sbci	r31, 0xFD	; 253
   19cd8:	e6 0d       	add	r30, r6
   19cda:	f7 1d       	adc	r31, r7
   19cdc:	44 91       	lpm	r20, Z
   19cde:	c2 01       	movw	r24, r4
   19ce0:	89 53       	subi	r24, 0x39	; 57
   19ce2:	9d 4f       	sbci	r25, 0xFD	; 253
   19ce4:	93 01       	movw	r18, r6
   19ce6:	28 0f       	add	r18, r24
   19ce8:	39 1f       	adc	r19, r25
   19cea:	c3 53       	subi	r28, 0x33	; 51
   19cec:	df 4f       	sbci	r29, 0xFF	; 255
   19cee:	39 83       	std	Y+1, r19	; 0x01
   19cf0:	28 83       	st	Y, r18
   19cf2:	cd 5c       	subi	r28, 0xCD	; 205
   19cf4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1071
      if (slider_active != MENU_SLIDER_OFF)
   19cf6:	4f 3f       	cpi	r20, 0xFF	; 255
   19cf8:	99 f0       	breq	.+38     	; 0x19d20 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2114>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1072
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
   19cfa:	f9 01       	movw	r30, r18
   19cfc:	24 91       	lpm	r18, Z
   19cfe:	f2 01       	movw	r30, r4
   19d00:	e8 53       	subi	r30, 0x38	; 56
   19d02:	fd 4f       	sbci	r31, 0xFD	; 253
   19d04:	e6 0d       	add	r30, r6
   19d06:	f7 1d       	adc	r31, r7
   19d08:	e4 91       	lpm	r30, Z
   19d0a:	2e 9f       	mul	r18, r30
   19d0c:	20 2d       	mov	r18, r0
   19d0e:	11 24       	eor	r1, r1
   19d10:	be 01       	movw	r22, r28
   19d12:	6d 54       	subi	r22, 0x4D	; 77
   19d14:	7f 4f       	sbci	r23, 0xFF	; 255
   19d16:	ce 01       	movw	r24, r28
   19d18:	8e 54       	subi	r24, 0x4E	; 78
   19d1a:	9f 4f       	sbci	r25, 0xFF	; 255
   19d1c:	0e 94 13 a4 	call	0x14826	; 0x14826 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
   19d20:	ce 54       	subi	r28, 0x4E	; 78
   19d22:	df 4f       	sbci	r29, 0xFF	; 255
   19d24:	88 80       	ld	r8, Y
   19d26:	c2 5b       	subi	r28, 0xB2	; 178
   19d28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
      while (loop_i < loop_cnt)
   19d2a:	cd 54       	subi	r28, 0x4D	; 77
   19d2c:	df 4f       	sbci	r29, 0xFF	; 255
   19d2e:	28 80       	ld	r2, Y
   19d30:	c3 5b       	subi	r28, 0xB3	; 179
   19d32:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   19d34:	c2 01       	movw	r24, r4
   19d36:	8a 53       	subi	r24, 0x3A	; 58
   19d38:	9d 4f       	sbci	r25, 0xFD	; 253
   19d3a:	93 01       	movw	r18, r6
   19d3c:	28 0f       	add	r18, r24
   19d3e:	39 1f       	adc	r19, r25
   19d40:	c4 54       	subi	r28, 0x44	; 68
   19d42:	df 4f       	sbci	r29, 0xFF	; 255
   19d44:	39 83       	std	Y+1, r19	; 0x01
   19d46:	28 83       	st	Y, r18
   19d48:	cc 5b       	subi	r28, 0xBC	; 188
   19d4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1077
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19d4c:	62 01       	movw	r12, r4
   19d4e:	3a e4       	ldi	r19, 0x4A	; 74
   19d50:	c3 1a       	sub	r12, r19
   19d52:	3d ef       	ldi	r19, 0xFD	; 253
   19d54:	d3 0a       	sbc	r13, r19
   19d56:	c6 0c       	add	r12, r6
   19d58:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   19d5a:	52 01       	movw	r10, r4
   19d5c:	48 e4       	ldi	r20, 0x48	; 72
   19d5e:	a4 1a       	sub	r10, r20
   19d60:	4d ef       	ldi	r20, 0xFD	; 253
   19d62:	b4 0a       	sbc	r11, r20
   19d64:	a6 0c       	add	r10, r6
   19d66:	b7 1c       	adc	r11, r7
   19d68:	01 97       	sbiw	r24, 0x01	; 1
   19d6a:	b3 01       	movw	r22, r6
   19d6c:	68 0f       	add	r22, r24
   19d6e:	79 1f       	adc	r23, r25
   19d70:	cc 53       	subi	r28, 0x3C	; 60
   19d72:	df 4f       	sbci	r29, 0xFF	; 255
   19d74:	79 83       	std	Y+1, r23	; 0x01
   19d76:	68 83       	st	Y, r22
   19d78:	c4 5c       	subi	r28, 0xC4	; 196
   19d7a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19d7c:	01 97       	sbiw	r24, 0x01	; 1
   19d7e:	f3 01       	movw	r30, r6
   19d80:	e8 0f       	add	r30, r24
   19d82:	f9 1f       	adc	r31, r25
   19d84:	c6 53       	subi	r28, 0x36	; 54
   19d86:	df 4f       	sbci	r29, 0xFF	; 255
   19d88:	f9 83       	std	Y+1, r31	; 0x01
   19d8a:	e8 83       	st	Y, r30
   19d8c:	ca 5c       	subi	r28, 0xCA	; 202
   19d8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1098
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   19d90:	08 97       	sbiw	r24, 0x08	; 8
   19d92:	93 01       	movw	r18, r6
   19d94:	28 0f       	add	r18, r24
   19d96:	39 1f       	adc	r19, r25
   19d98:	c0 53       	subi	r28, 0x30	; 48
   19d9a:	df 4f       	sbci	r29, 0xFF	; 255
   19d9c:	39 83       	std	Y+1, r19	; 0x01
   19d9e:	28 83       	st	Y, r18
   19da0:	c0 5d       	subi	r28, 0xD0	; 208
   19da2:	d0 40       	sbci	r29, 0x00	; 0
   19da4:	02 97       	sbiw	r24, 0x02	; 2
   19da6:	a3 01       	movw	r20, r6
   19da8:	48 0f       	add	r20, r24
   19daa:	59 1f       	adc	r21, r25
   19dac:	ce 52       	subi	r28, 0x2E	; 46
   19dae:	df 4f       	sbci	r29, 0xFF	; 255
   19db0:	59 83       	std	Y+1, r21	; 0x01
   19db2:	48 83       	st	Y, r20
   19db4:	c2 5d       	subi	r28, 0xD2	; 210
   19db6:	d0 40       	sbci	r29, 0x00	; 0
   19db8:	31 2c       	mov	r3, r1
   19dba:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1073
      rfnt = (ret_fptr*)pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
   19dbc:	82 14       	cp	r8, r2
   19dbe:	08 f0       	brcs	.+2      	; 0x19dc2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x21b6>
   19dc0:	11 c1       	rjmp	.+546    	; 0x19fe4 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23d8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1075
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
   19dc2:	c4 54       	subi	r28, 0x44	; 68
   19dc4:	df 4f       	sbci	r29, 0xFF	; 255
   19dc6:	e8 81       	ld	r30, Y
   19dc8:	f9 81       	ldd	r31, Y+1	; 0x01
   19dca:	cc 5b       	subi	r28, 0xBC	; 188
   19dcc:	d0 40       	sbci	r29, 0x00	; 0
   19dce:	84 91       	lpm	r24, Z
   19dd0:	81 11       	cpse	r24, r1
   19dd2:	2f c0       	rjmp	.+94     	; 0x19e32 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2226>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1077
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
   19dd4:	f6 01       	movw	r30, r12
   19dd6:	85 91       	lpm	r24, Z+
   19dd8:	94 91       	lpm	r25, Z
   19dda:	c8 54       	subi	r28, 0x48	; 72
   19ddc:	df 4f       	sbci	r29, 0xFF	; 255
   19dde:	28 81       	ld	r18, Y
   19de0:	39 81       	ldd	r19, Y+1	; 0x01
   19de2:	c8 5b       	subi	r28, 0xB8	; 184
   19de4:	d0 40       	sbci	r29, 0x00	; 0
   19de6:	28 0f       	add	r18, r24
   19de8:	39 1f       	adc	r19, r25
   19dea:	c0 54       	subi	r28, 0x40	; 64
   19dec:	df 4f       	sbci	r29, 0xFF	; 255
   19dee:	39 83       	std	Y+1, r19	; 0x01
   19df0:	28 83       	st	Y, r18
   19df2:	c0 5c       	subi	r28, 0xC0	; 192
   19df4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1078
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
   19df6:	f5 01       	movw	r30, r10
   19df8:	85 91       	lpm	r24, Z+
   19dfa:	94 91       	lpm	r25, Z
   19dfc:	cc 53       	subi	r28, 0x3C	; 60
   19dfe:	df 4f       	sbci	r29, 0xFF	; 255
   19e00:	e8 81       	ld	r30, Y
   19e02:	f9 81       	ldd	r31, Y+1	; 0x01
   19e04:	c4 5c       	subi	r28, 0xC4	; 196
   19e06:	d0 40       	sbci	r29, 0x00	; 0
   19e08:	24 91       	lpm	r18, Z
   19e0a:	c6 54       	subi	r28, 0x46	; 70
   19e0c:	df 4f       	sbci	r29, 0xFF	; 255
   19e0e:	48 81       	ld	r20, Y
   19e10:	59 81       	ldd	r21, Y+1	; 0x01
   19e12:	ca 5b       	subi	r28, 0xBA	; 186
   19e14:	d0 40       	sbci	r29, 0x00	; 0
   19e16:	84 0f       	add	r24, r20
   19e18:	95 1f       	adc	r25, r21
   19e1a:	bc 01       	movw	r22, r24
   19e1c:	29 9d       	mul	r18, r9
   19e1e:	60 0d       	add	r22, r0
   19e20:	71 1d       	adc	r23, r1
   19e22:	11 24       	eor	r1, r1
   19e24:	ce 53       	subi	r28, 0x3E	; 62
   19e26:	df 4f       	sbci	r29, 0xFF	; 255
   19e28:	79 83       	std	Y+1, r23	; 0x01
   19e2a:	68 83       	st	Y, r22
   19e2c:	c2 5c       	subi	r28, 0xC2	; 194
   19e2e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1079
          loop_t++;
   19e30:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1081
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
   19e32:	c4 54       	subi	r28, 0x44	; 68
   19e34:	df 4f       	sbci	r29, 0xFF	; 255
   19e36:	e8 81       	ld	r30, Y
   19e38:	f9 81       	ldd	r31, Y+1	; 0x01
   19e3a:	cc 5b       	subi	r28, 0xBC	; 188
   19e3c:	d0 40       	sbci	r29, 0x00	; 0
   19e3e:	84 91       	lpm	r24, Z
   19e40:	81 30       	cpi	r24, 0x01	; 1
   19e42:	79 f5       	brne	.+94     	; 0x19ea2 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2296>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1083
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
   19e44:	f5 01       	movw	r30, r10
   19e46:	85 91       	lpm	r24, Z+
   19e48:	94 91       	lpm	r25, Z
   19e4a:	c6 54       	subi	r28, 0x46	; 70
   19e4c:	df 4f       	sbci	r29, 0xFF	; 255
   19e4e:	28 81       	ld	r18, Y
   19e50:	39 81       	ldd	r19, Y+1	; 0x01
   19e52:	ca 5b       	subi	r28, 0xBA	; 186
   19e54:	d0 40       	sbci	r29, 0x00	; 0
   19e56:	28 0f       	add	r18, r24
   19e58:	39 1f       	adc	r19, r25
   19e5a:	ce 53       	subi	r28, 0x3E	; 62
   19e5c:	df 4f       	sbci	r29, 0xFF	; 255
   19e5e:	39 83       	std	Y+1, r19	; 0x01
   19e60:	28 83       	st	Y, r18
   19e62:	c2 5c       	subi	r28, 0xC2	; 194
   19e64:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1084
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19e66:	f6 01       	movw	r30, r12
   19e68:	85 91       	lpm	r24, Z+
   19e6a:	94 91       	lpm	r25, Z
   19e6c:	c6 53       	subi	r28, 0x36	; 54
   19e6e:	df 4f       	sbci	r29, 0xFF	; 255
   19e70:	e8 81       	ld	r30, Y
   19e72:	f9 81       	ldd	r31, Y+1	; 0x01
   19e74:	ca 5c       	subi	r28, 0xCA	; 202
   19e76:	d0 40       	sbci	r29, 0x00	; 0
   19e78:	24 91       	lpm	r18, Z
   19e7a:	c8 54       	subi	r28, 0x48	; 72
   19e7c:	df 4f       	sbci	r29, 0xFF	; 255
   19e7e:	48 81       	ld	r20, Y
   19e80:	59 81       	ldd	r21, Y+1	; 0x01
   19e82:	c8 5b       	subi	r28, 0xB8	; 184
   19e84:	d0 40       	sbci	r29, 0x00	; 0
   19e86:	84 0f       	add	r24, r20
   19e88:	95 1f       	adc	r25, r21
   19e8a:	bc 01       	movw	r22, r24
   19e8c:	29 9d       	mul	r18, r9
   19e8e:	60 0d       	add	r22, r0
   19e90:	71 1d       	adc	r23, r1
   19e92:	11 24       	eor	r1, r1
   19e94:	c0 54       	subi	r28, 0x40	; 64
   19e96:	df 4f       	sbci	r29, 0xFF	; 255
   19e98:	79 83       	std	Y+1, r23	; 0x01
   19e9a:	68 83       	st	Y, r22
   19e9c:	c0 5c       	subi	r28, 0xC0	; 192
   19e9e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1085
          loop_t++;
   19ea0:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1087
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
   19ea2:	c4 54       	subi	r28, 0x44	; 68
   19ea4:	df 4f       	sbci	r29, 0xFF	; 255
   19ea6:	e8 81       	ld	r30, Y
   19ea8:	f9 81       	ldd	r31, Y+1	; 0x01
   19eaa:	cc 5b       	subi	r28, 0xBC	; 188
   19eac:	d0 40       	sbci	r29, 0x00	; 0
   19eae:	84 91       	lpm	r24, Z
   19eb0:	82 30       	cpi	r24, 0x02	; 2
   19eb2:	09 f0       	breq	.+2      	; 0x19eb6 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x22aa>
   19eb4:	46 c0       	rjmp	.+140    	; 0x19f42 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1089
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
   19eb6:	f6 01       	movw	r30, r12
   19eb8:	85 91       	lpm	r24, Z+
   19eba:	94 91       	lpm	r25, Z
   19ebc:	c6 53       	subi	r28, 0x36	; 54
   19ebe:	df 4f       	sbci	r29, 0xFF	; 255
   19ec0:	e8 81       	ld	r30, Y
   19ec2:	f9 81       	ldd	r31, Y+1	; 0x01
   19ec4:	ca 5c       	subi	r28, 0xCA	; 202
   19ec6:	d0 40       	sbci	r29, 0x00	; 0
   19ec8:	24 91       	lpm	r18, Z
   19eca:	c8 54       	subi	r28, 0x48	; 72
   19ecc:	df 4f       	sbci	r29, 0xFF	; 255
   19ece:	48 81       	ld	r20, Y
   19ed0:	59 81       	ldd	r21, Y+1	; 0x01
   19ed2:	c8 5b       	subi	r28, 0xB8	; 184
   19ed4:	d0 40       	sbci	r29, 0x00	; 0
   19ed6:	84 0f       	add	r24, r20
   19ed8:	95 1f       	adc	r25, r21
   19eda:	bc 01       	movw	r22, r24
   19edc:	29 9d       	mul	r18, r9
   19ede:	60 0d       	add	r22, r0
   19ee0:	71 1d       	adc	r23, r1
   19ee2:	11 24       	eor	r1, r1
   19ee4:	c0 54       	subi	r28, 0x40	; 64
   19ee6:	df 4f       	sbci	r29, 0xFF	; 255
   19ee8:	79 83       	std	Y+1, r23	; 0x01
   19eea:	68 83       	st	Y, r22
   19eec:	c0 5c       	subi	r28, 0xC0	; 192
   19eee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1090
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
   19ef0:	f5 01       	movw	r30, r10
   19ef2:	85 91       	lpm	r24, Z+
   19ef4:	94 91       	lpm	r25, Z
   19ef6:	cc 53       	subi	r28, 0x3C	; 60
   19ef8:	df 4f       	sbci	r29, 0xFF	; 255
   19efa:	e8 81       	ld	r30, Y
   19efc:	f9 81       	ldd	r31, Y+1	; 0x01
   19efe:	c4 5c       	subi	r28, 0xC4	; 196
   19f00:	d0 40       	sbci	r29, 0x00	; 0
   19f02:	24 91       	lpm	r18, Z
   19f04:	c6 54       	subi	r28, 0x46	; 70
   19f06:	df 4f       	sbci	r29, 0xFF	; 255
   19f08:	48 81       	ld	r20, Y
   19f0a:	59 81       	ldd	r21, Y+1	; 0x01
   19f0c:	ca 5b       	subi	r28, 0xBA	; 186
   19f0e:	d0 40       	sbci	r29, 0x00	; 0
   19f10:	84 0f       	add	r24, r20
   19f12:	95 1f       	adc	r25, r21
   19f14:	bc 01       	movw	r22, r24
   19f16:	23 9d       	mul	r18, r3
   19f18:	60 0d       	add	r22, r0
   19f1a:	71 1d       	adc	r23, r1
   19f1c:	11 24       	eor	r1, r1
   19f1e:	ce 53       	subi	r28, 0x3E	; 62
   19f20:	df 4f       	sbci	r29, 0xFF	; 255
   19f22:	79 83       	std	Y+1, r23	; 0x01
   19f24:	68 83       	st	Y, r22
   19f26:	c2 5c       	subi	r28, 0xC2	; 194
   19f28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1091
          loop_t++;
   19f2a:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1092
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
   19f2c:	c3 53       	subi	r28, 0x33	; 51
   19f2e:	df 4f       	sbci	r29, 0xFF	; 255
   19f30:	e8 81       	ld	r30, Y
   19f32:	f9 81       	ldd	r31, Y+1	; 0x01
   19f34:	cd 5c       	subi	r28, 0xCD	; 205
   19f36:	d0 40       	sbci	r29, 0x00	; 0
   19f38:	84 91       	lpm	r24, Z
   19f3a:	98 16       	cp	r9, r24
   19f3c:	10 f0       	brcs	.+4      	; 0x19f42 <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x2336>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1095
          {
            loop_t = 0;
            loop_r++;
   19f3e:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1094
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
   19f40:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1098
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   19f42:	c0 53       	subi	r28, 0x30	; 48
   19f44:	df 4f       	sbci	r29, 0xFF	; 255
   19f46:	e8 81       	ld	r30, Y
   19f48:	f9 81       	ldd	r31, Y+1	; 0x01
   19f4a:	c0 5d       	subi	r28, 0xD0	; 208
   19f4c:	d0 40       	sbci	r29, 0x00	; 0
   19f4e:	25 91       	lpm	r18, Z+
   19f50:	34 91       	lpm	r19, Z
   19f52:	ce 52       	subi	r28, 0x2E	; 46
   19f54:	df 4f       	sbci	r29, 0xFF	; 255
   19f56:	e8 81       	ld	r30, Y
   19f58:	f9 81       	ldd	r31, Y+1	; 0x01
   19f5a:	c2 5d       	subi	r28, 0xD2	; 210
   19f5c:	d0 40       	sbci	r29, 0x00	; 0
   19f5e:	45 91       	lpm	r20, Z+
   19f60:	54 91       	lpm	r21, Z
   19f62:	c8 53       	subi	r28, 0x38	; 56
   19f64:	df 4f       	sbci	r29, 0xFF	; 255
   19f66:	e8 80       	ld	r14, Y
   19f68:	f9 80       	ldd	r15, Y+1	; 0x01
   19f6a:	c8 5c       	subi	r28, 0xC8	; 200
   19f6c:	d0 40       	sbci	r29, 0x00	; 0
   19f6e:	ca 53       	subi	r28, 0x3A	; 58
   19f70:	df 4f       	sbci	r29, 0xFF	; 255
   19f72:	08 81       	ld	r16, Y
   19f74:	19 81       	ldd	r17, Y+1	; 0x01
   19f76:	c6 5c       	subi	r28, 0xC6	; 198
   19f78:	d0 40       	sbci	r29, 0x00	; 0
   19f7a:	ce 53       	subi	r28, 0x3E	; 62
   19f7c:	df 4f       	sbci	r29, 0xFF	; 255
   19f7e:	68 81       	ld	r22, Y
   19f80:	79 81       	ldd	r23, Y+1	; 0x01
   19f82:	c2 5c       	subi	r28, 0xC2	; 194
   19f84:	d0 40       	sbci	r29, 0x00	; 0
   19f86:	c0 54       	subi	r28, 0x40	; 64
   19f88:	df 4f       	sbci	r29, 0xFF	; 255
   19f8a:	88 81       	ld	r24, Y
   19f8c:	99 81       	ldd	r25, Y+1	; 0x01
   19f8e:	c0 5c       	subi	r28, 0xC0	; 192
   19f90:	d0 40       	sbci	r29, 0x00	; 0
   19f92:	0e 94 7c a1 	call	0x142f8	; 0x142f8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19f96:	18 2f       	mov	r17, r24
   19f98:	81 e0       	ldi	r24, 0x01	; 1
   19f9a:	88 0d       	add	r24, r8
   19f9c:	11 23       	and	r17, r17
   19f9e:	71 f1       	breq	.+92     	; 0x19ffc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x23f0>
   19fa0:	ce 54       	subi	r28, 0x4E	; 78
   19fa2:	df 4f       	sbci	r29, 0xFF	; 255
   19fa4:	88 82       	st	Y, r8
   19fa6:	c2 5b       	subi	r28, 0xB2	; 178
   19fa8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1100
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
   19faa:	f2 01       	movw	r30, r4
   19fac:	e3 53       	subi	r30, 0x33	; 51
   19fae:	fd 4f       	sbci	r31, 0xFD	; 253
   19fb0:	e6 0d       	add	r30, r6
   19fb2:	f7 1d       	adc	r31, r7
   19fb4:	25 91       	lpm	r18, Z+
   19fb6:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1101
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
   19fb8:	c2 54       	subi	r28, 0x42	; 66
   19fba:	df 4f       	sbci	r29, 0xFF	; 255
   19fbc:	e8 81       	ld	r30, Y
   19fbe:	f9 81       	ldd	r31, Y+1	; 0x01
   19fc0:	ce 5b       	subi	r28, 0xBE	; 190
   19fc2:	d0 40       	sbci	r29, 0x00	; 0
   19fc4:	84 91       	lpm	r24, Z
   19fc6:	cf 54       	subi	r28, 0x4F	; 79
   19fc8:	df 4f       	sbci	r29, 0xFF	; 255
   19fca:	68 81       	ld	r22, Y
   19fcc:	c1 5b       	subi	r28, 0xB1	; 177
   19fce:	d0 40       	sbci	r29, 0x00	; 0
   19fd0:	70 e0       	ldi	r23, 0x00	; 0
   19fd2:	48 2d       	mov	r20, r8
   19fd4:	90 e0       	ldi	r25, 0x00	; 0
   19fd6:	f9 01       	movw	r30, r18
   19fd8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1102
          ret = true;
   19fda:	c4 53       	subi	r28, 0x34	; 52
   19fdc:	df 4f       	sbci	r29, 0xFF	; 255
   19fde:	18 83       	st	Y, r17
   19fe0:	cc 5c       	subi	r28, 0xCC	; 204
   19fe2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1011
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
   19fe4:	ca 54       	subi	r28, 0x4A	; 74
   19fe6:	df 4f       	sbci	r29, 0xFF	; 255
   19fe8:	f8 81       	ld	r31, Y
   19fea:	c6 5b       	subi	r28, 0xB6	; 182
   19fec:	d0 40       	sbci	r29, 0x00	; 0
   19fee:	ff 5f       	subi	r31, 0xFF	; 255
   19ff0:	ca 54       	subi	r28, 0x4A	; 74
   19ff2:	df 4f       	sbci	r29, 0xFF	; 255
   19ff4:	f8 83       	st	Y, r31
   19ff6:	c6 5b       	subi	r28, 0xB6	; 182
   19ff8:	d0 40       	sbci	r29, 0x00	; 0
   19ffa:	b7 cb       	rjmp	.-2194   	; 0x1976a <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x1b5e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1098
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
   19ffc:	88 2e       	mov	r8, r24
   19ffe:	de ce       	rjmp	.-580    	; 0x19dbc <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]+0x21b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1102
        {
          fntargs =  (fptr_args*)pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
   1a000:	21 e0       	ldi	r18, 0x01	; 1
   1a002:	c4 53       	subi	r28, 0x34	; 52
   1a004:	df 4f       	sbci	r29, 0xFF	; 255
   1a006:	28 83       	st	Y, r18
   1a008:	cc 5c       	subi	r28, 0xCC	; 204
   1a00a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1113
  }


draw_menu_end:
  return ret;
}
   1a00c:	c4 53       	subi	r28, 0x34	; 52
   1a00e:	df 4f       	sbci	r29, 0xFF	; 255
   1a010:	88 81       	ld	r24, Y
   1a012:	cc 5c       	subi	r28, 0xCC	; 204
   1a014:	d0 40       	sbci	r29, 0x00	; 0
   1a016:	cd 51       	subi	r28, 0x1D	; 29
   1a018:	df 4f       	sbci	r29, 0xFF	; 255
   1a01a:	0f b6       	in	r0, 0x3f	; 63
   1a01c:	f8 94       	cli
   1a01e:	de bf       	out	0x3e, r29	; 62
   1a020:	0f be       	out	0x3f, r0	; 63
   1a022:	cd bf       	out	0x3d, r28	; 61
   1a024:	df 91       	pop	r29
   1a026:	cf 91       	pop	r28
   1a028:	1f 91       	pop	r17
   1a02a:	0f 91       	pop	r16
   1a02c:	ff 90       	pop	r15
   1a02e:	ef 90       	pop	r14
   1a030:	df 90       	pop	r13
   1a032:	cf 90       	pop	r12
   1a034:	bf 90       	pop	r11
   1a036:	af 90       	pop	r10
   1a038:	9f 90       	pop	r9
   1a03a:	8f 90       	pop	r8
   1a03c:	7f 90       	pop	r7
   1a03e:	6f 90       	pop	r6
   1a040:	5f 90       	pop	r5
   1a042:	4f 90       	pop	r4
   1a044:	3f 90       	pop	r3
   1a046:	2f 90       	pop	r2
   1a048:	08 95       	ret

0001a04a <log_error(PubSubClient*, char*) [clone .constprop.125]>:
_Z9log_errorP12PubSubClientPc.constprop.125():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:451
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   1a04a:	0f 93       	push	r16
   1a04c:	1f 93       	push	r17
   1a04e:	cf 93       	push	r28
   1a050:	df 93       	push	r29
   1a052:	00 d0       	rcall	.+0      	; 0x1a054 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xa>
   1a054:	00 d0       	rcall	.+0      	; 0x1a056 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xc>
   1a056:	00 d0       	rcall	.+0      	; 0x1a058 <log_error(PubSubClient*, char*) [clone .constprop.125]+0xe>
   1a058:	cd b7       	in	r28, 0x3d	; 61
   1a05a:	de b7       	in	r29, 0x3e	; 62
   1a05c:	8c 01       	movw	r16, r24
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:454
{
  char topic[9];
  strcpy(topic, "log-app");
   1a05e:	64 ef       	ldi	r22, 0xF4	; 244
   1a060:	78 e0       	ldi	r23, 0x08	; 8
   1a062:	ce 01       	movw	r24, r28
   1a064:	01 96       	adiw	r24, 0x01	; 1
   1a066:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:455
  send_mqtt_general_payload(mqtt_client, topic, log);
   1a06a:	a8 01       	movw	r20, r16
   1a06c:	be 01       	movw	r22, r28
   1a06e:	6f 5f       	subi	r22, 0xFF	; 255
   1a070:	7f 4f       	sbci	r23, 0xFF	; 255
   1a072:	8f e2       	ldi	r24, 0x2F	; 47
   1a074:	90 e1       	ldi	r25, 0x10	; 16
   1a076:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:456
}
   1a07a:	29 96       	adiw	r28, 0x09	; 9
   1a07c:	0f b6       	in	r0, 0x3f	; 63
   1a07e:	f8 94       	cli
   1a080:	de bf       	out	0x3e, r29	; 62
   1a082:	0f be       	out	0x3f, r0	; 63
   1a084:	cd bf       	out	0x3d, r28	; 61
   1a086:	df 91       	pop	r29
   1a088:	cf 91       	pop	r28
   1a08a:	1f 91       	pop	r17
   1a08c:	0f 91       	pop	r16
   1a08e:	08 95       	ret

0001a090 <RF24::csn(bool) [clone .constprop.111]>:
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:15
#include "RF24_config.h"
#include "RF24.h"

/****************************************************************************/

void RF24::csn(bool mode)
   1a090:	cf 93       	push	r28
   1a092:	df 93       	push	r29
setBitOrder():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:296

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
   1a094:	9c b5       	in	r25, 0x2c	; 44
   1a096:	9f 7d       	andi	r25, 0xDF	; 223
   1a098:	9c bd       	out	0x2c, r25	; 44
setDataMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:301
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
   1a09a:	9c b5       	in	r25, 0x2c	; 44
   1a09c:	93 7f       	andi	r25, 0xF3	; 243
   1a09e:	9c bd       	out	0x2c, r25	; 44
setClockDivider():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:306
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
   1a0a0:	9c b5       	in	r25, 0x2c	; 44
   1a0a2:	9c 7f       	andi	r25, 0xFC	; 252
   1a0a4:	9c bd       	out	0x2c, r25	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/SPI/src/SPI.h:307
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
   1a0a6:	9d b5       	in	r25, 0x2d	; 45
   1a0a8:	91 60       	ori	r25, 0x01	; 1
   1a0aa:	9d bd       	out	0x2d, r25	; 45
_ZN4RF243csnEb.constprop.111():
/home/saric/Arduino/libraries/RF24/RF24.cpp:69
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
   1a0ac:	c1 e1       	ldi	r28, 0x11	; 17
   1a0ae:	d0 e1       	ldi	r29, 0x10	; 16
   1a0b0:	68 2f       	mov	r22, r24
   1a0b2:	8a 81       	ldd	r24, Y+2	; 0x02
   1a0b4:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	delayMicroseconds(csDelay);
   1a0b8:	8c 89       	ldd	r24, Y+20	; 0x14
   1a0ba:	9d 89       	ldd	r25, Y+21	; 0x15
/home/saric/Arduino/libraries/RF24/RF24.cpp:73
#endif

}
   1a0bc:	df 91       	pop	r29
   1a0be:	cf 91       	pop	r28
/home/saric/Arduino/libraries/RF24/RF24.cpp:70
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
	delayMicroseconds(csDelay);
   1a0c0:	0c 94 d3 62 	jmp	0xc5a6	; 0xc5a6 <delayMicroseconds>

0001a0c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.108]>:
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:204
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
   1a0c4:	cf 93       	push	r28
   1a0c6:	df 93       	push	r29
   1a0c8:	c8 2f       	mov	r28, r24
   1a0ca:	d6 2f       	mov	r29, r22
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a0cc:	80 e0       	ldi	r24, 0x00	; 0
   1a0ce:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:223
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
   1a0d2:	8c 2f       	mov	r24, r28
   1a0d4:	80 62       	ori	r24, 0x20	; 32
   1a0d6:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1a0da:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:224
  _SPI.transfer(value);
   1a0dc:	8d 2f       	mov	r24, r29
   1a0de:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a0e2:	81 e0       	ldi	r24, 0x01	; 1
   1a0e4:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2414write_registerEhh.constprop.108():
/home/saric/Arduino/libraries/RF24/RF24.cpp:230
  endTransaction();

  #endif

  return status;
}
   1a0e8:	8c 2f       	mov	r24, r28
   1a0ea:	df 91       	pop	r29
   1a0ec:	cf 91       	pop	r28
   1a0ee:	08 95       	ret

0001a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>:
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:141
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
   1a0f0:	cf 93       	push	r28
   1a0f2:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a0f4:	80 e0       	ldi	r24, 0x00	; 0
   1a0f6:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:161
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   1a0fa:	8c 2f       	mov	r24, r28
   1a0fc:	8f 71       	andi	r24, 0x1F	; 31
   1a0fe:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/RF24/RF24.cpp:162
  result = _SPI.transfer(0xff);
   1a102:	8f ef       	ldi	r24, 0xFF	; 255
   1a104:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1a108:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a10a:	81 e0       	ldi	r24, 0x01	; 1
   1a10c:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2413read_registerEh.constprop.107():
/home/saric/Arduino/libraries/RF24/RF24.cpp:168
  endTransaction();

  #endif

  return result;
}
   1a110:	8c 2f       	mov	r24, r28
   1a112:	cf 91       	pop	r28
   1a114:	08 95       	ret

0001a116 <RF24::spiTrans(unsigned char) [clone .constprop.105]>:
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:350
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
   1a116:	cf 93       	push	r28
   1a118:	c8 2f       	mov	r28, r24
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1a11a:	80 e0       	ldi	r24, 0x00	; 0
   1a11c:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:355
uint8_t RF24::spiTrans(uint8_t cmd){

  uint8_t status;
  
  beginTransaction();
  status = _SPI.transfer( cmd );
   1a120:	8c 2f       	mov	r24, r28
   1a122:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1a126:	c8 2f       	mov	r28, r24
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1a128:	81 e0       	ldi	r24, 0x01	; 1
   1a12a:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF248spiTransEh.constprop.105():
/home/saric/Arduino/libraries/RF24/RF24.cpp:359
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
   1a12e:	8c 2f       	mov	r24, r28
   1a130:	cf 91       	pop	r28
   1a132:	08 95       	ret

0001a134 <PubSubClient::loop() [clone .constprop.95]>:
_ZN12PubSubClient4loopEv.constprop.95():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   1a134:	3f 92       	push	r3
   1a136:	4f 92       	push	r4
   1a138:	5f 92       	push	r5
   1a13a:	6f 92       	push	r6
   1a13c:	7f 92       	push	r7
   1a13e:	8f 92       	push	r8
   1a140:	9f 92       	push	r9
   1a142:	af 92       	push	r10
   1a144:	bf 92       	push	r11
   1a146:	cf 92       	push	r12
   1a148:	df 92       	push	r13
   1a14a:	ef 92       	push	r14
   1a14c:	ff 92       	push	r15
   1a14e:	0f 93       	push	r16
   1a150:	1f 93       	push	r17
   1a152:	cf 93       	push	r28
   1a154:	df 93       	push	r29
   1a156:	1f 92       	push	r1
   1a158:	cd b7       	in	r28, 0x3d	; 61
   1a15a:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1a15c:	4d b6       	in	r4, 0x3d	; 61
   1a15e:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   1a160:	8f e2       	ldi	r24, 0x2F	; 47
   1a162:	90 e1       	ldi	r25, 0x10	; 16
   1a164:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   1a168:	98 2e       	mov	r9, r24
   1a16a:	88 23       	and	r24, r24
   1a16c:	09 f4       	brne	.+2      	; 0x1a170 <PubSubClient::loop() [clone .constprop.95]+0x3c>
   1a16e:	45 c0       	rjmp	.+138    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   1a170:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1a174:	6b 01       	movw	r12, r22
   1a176:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   1a178:	80 91 37 12 	lds	r24, 0x1237	; 0x801237 <mqtt_client+0x208>
   1a17c:	90 91 38 12 	lds	r25, 0x1238	; 0x801238 <mqtt_client+0x209>
   1a180:	a0 91 39 12 	lds	r26, 0x1239	; 0x801239 <mqtt_client+0x20a>
   1a184:	b0 91 3a 12 	lds	r27, 0x123A	; 0x80123a <mqtt_client+0x20b>
   1a188:	a7 01       	movw	r20, r14
   1a18a:	96 01       	movw	r18, r12
   1a18c:	28 1b       	sub	r18, r24
   1a18e:	39 0b       	sbc	r19, r25
   1a190:	4a 0b       	sbc	r20, r26
   1a192:	5b 0b       	sbc	r21, r27
   1a194:	da 01       	movw	r26, r20
   1a196:	c9 01       	movw	r24, r18
   1a198:	89 39       	cpi	r24, 0x99	; 153
   1a19a:	9a 43       	sbci	r25, 0x3A	; 58
   1a19c:	a1 05       	cpc	r26, r1
   1a19e:	b1 05       	cpc	r27, r1
   1a1a0:	b0 f4       	brcc	.+44     	; 0x1a1ce <PubSubClient::loop() [clone .constprop.95]+0x9a>
   1a1a2:	80 91 33 12 	lds	r24, 0x1233	; 0x801233 <mqtt_client+0x204>
   1a1a6:	90 91 34 12 	lds	r25, 0x1234	; 0x801234 <mqtt_client+0x205>
   1a1aa:	a0 91 35 12 	lds	r26, 0x1235	; 0x801235 <mqtt_client+0x206>
   1a1ae:	b0 91 36 12 	lds	r27, 0x1236	; 0x801236 <mqtt_client+0x207>
   1a1b2:	a7 01       	movw	r20, r14
   1a1b4:	96 01       	movw	r18, r12
   1a1b6:	28 1b       	sub	r18, r24
   1a1b8:	39 0b       	sbc	r19, r25
   1a1ba:	4a 0b       	sbc	r20, r26
   1a1bc:	5b 0b       	sbc	r21, r27
   1a1be:	da 01       	movw	r26, r20
   1a1c0:	c9 01       	movw	r24, r18
   1a1c2:	89 39       	cpi	r24, 0x99	; 153
   1a1c4:	9a 43       	sbci	r25, 0x3A	; 58
   1a1c6:	a1 05       	cpc	r26, r1
   1a1c8:	b1 05       	cpc	r27, r1
   1a1ca:	08 f4       	brcc	.+2      	; 0x1a1ce <PubSubClient::loop() [clone .constprop.95]+0x9a>
   1a1cc:	52 c0       	rjmp	.+164    	; 0x1a272 <PubSubClient::loop() [clone .constprop.95]+0x13e>
   1a1ce:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1a1d2:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   1a1d6:	20 91 3b 12 	lds	r18, 0x123B	; 0x80123b <mqtt_client+0x20c>
   1a1da:	22 23       	and	r18, r18
   1a1dc:	39 f1       	breq	.+78     	; 0x1a22c <PubSubClient::loop() [clone .constprop.95]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   1a1de:	2c ef       	ldi	r18, 0xFC	; 252
   1a1e0:	3f ef       	ldi	r19, 0xFF	; 255
   1a1e2:	30 93 4b 12 	sts	0x124B, r19	; 0x80124b <mqtt_client+0x21c>
   1a1e6:	20 93 4a 12 	sts	0x124A, r18	; 0x80124a <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1a1ea:	dc 01       	movw	r26, r24
   1a1ec:	ed 91       	ld	r30, X+
   1a1ee:	fc 91       	ld	r31, X
   1a1f0:	04 88       	ldd	r0, Z+20	; 0x14
   1a1f2:	f5 89       	ldd	r31, Z+21	; 0x15
   1a1f4:	e0 2d       	mov	r30, r0
   1a1f6:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   1a1f8:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1a1fa:	89 2d       	mov	r24, r9
   1a1fc:	0f b6       	in	r0, 0x3f	; 63
   1a1fe:	f8 94       	cli
   1a200:	5e be       	out	0x3e, r5	; 62
   1a202:	0f be       	out	0x3f, r0	; 63
   1a204:	4d be       	out	0x3d, r4	; 61
   1a206:	0f 90       	pop	r0
   1a208:	df 91       	pop	r29
   1a20a:	cf 91       	pop	r28
   1a20c:	1f 91       	pop	r17
   1a20e:	0f 91       	pop	r16
   1a210:	ff 90       	pop	r15
   1a212:	ef 90       	pop	r14
   1a214:	df 90       	pop	r13
   1a216:	cf 90       	pop	r12
   1a218:	bf 90       	pop	r11
   1a21a:	af 90       	pop	r10
   1a21c:	9f 90       	pop	r9
   1a21e:	8f 90       	pop	r8
   1a220:	7f 90       	pop	r7
   1a222:	6f 90       	pop	r6
   1a224:	5f 90       	pop	r5
   1a226:	4f 90       	pop	r4
   1a228:	3f 90       	pop	r3
   1a22a:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1a22c:	20 ec       	ldi	r18, 0xC0	; 192
   1a22e:	20 93 31 10 	sts	0x1031, r18	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   1a232:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   1a236:	dc 01       	movw	r26, r24
   1a238:	ed 91       	ld	r30, X+
   1a23a:	fc 91       	ld	r31, X
   1a23c:	02 80       	ldd	r0, Z+2	; 0x02
   1a23e:	f3 81       	ldd	r31, Z+3	; 0x03
   1a240:	e0 2d       	mov	r30, r0
   1a242:	42 e0       	ldi	r20, 0x02	; 2
   1a244:	50 e0       	ldi	r21, 0x00	; 0
   1a246:	61 e3       	ldi	r22, 0x31	; 49
   1a248:	70 e1       	ldi	r23, 0x10	; 16
   1a24a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1a24c:	c0 92 33 12 	sts	0x1233, r12	; 0x801233 <mqtt_client+0x204>
   1a250:	d0 92 34 12 	sts	0x1234, r13	; 0x801234 <mqtt_client+0x205>
   1a254:	e0 92 35 12 	sts	0x1235, r14	; 0x801235 <mqtt_client+0x206>
   1a258:	f0 92 36 12 	sts	0x1236, r15	; 0x801236 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1a25c:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <mqtt_client+0x208>
   1a260:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <mqtt_client+0x209>
   1a264:	e0 92 39 12 	sts	0x1239, r14	; 0x801239 <mqtt_client+0x20a>
   1a268:	f0 92 3a 12 	sts	0x123A, r15	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1a26c:	81 e0       	ldi	r24, 0x01	; 1
   1a26e:	80 93 3b 12 	sts	0x123B, r24	; 0x80123b <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   1a272:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1a276:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   1a27a:	dc 01       	movw	r26, r24
   1a27c:	ed 91       	ld	r30, X+
   1a27e:	fc 91       	ld	r31, X
   1a280:	00 84       	ldd	r0, Z+8	; 0x08
   1a282:	f1 85       	ldd	r31, Z+9	; 0x09
   1a284:	e0 2d       	mov	r30, r0
   1a286:	19 95       	eicall
   1a288:	89 2b       	or	r24, r25
   1a28a:	09 f4       	brne	.+2      	; 0x1a28e <PubSubClient::loop() [clone .constprop.95]+0x15a>
   1a28c:	b6 cf       	rjmp	.-148    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   1a28e:	ce 01       	movw	r24, r28
   1a290:	01 96       	adiw	r24, 0x01	; 1
   1a292:	0e 94 b3 ba 	call	0x17566	; 0x17566 <PubSubClient::readPacket(unsigned char*) [clone .constprop.158]>
   1a296:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   1a298:	89 2b       	or	r24, r25
   1a29a:	09 f4       	brne	.+2      	; 0x1a29e <PubSubClient::loop() [clone .constprop.95]+0x16a>
   1a29c:	ae cf       	rjmp	.-164    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   1a29e:	c0 92 37 12 	sts	0x1237, r12	; 0x801237 <mqtt_client+0x208>
   1a2a2:	d0 92 38 12 	sts	0x1238, r13	; 0x801238 <mqtt_client+0x209>
   1a2a6:	e0 92 39 12 	sts	0x1239, r14	; 0x801239 <mqtt_client+0x20a>
   1a2aa:	f0 92 3a 12 	sts	0x123A, r15	; 0x80123a <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   1a2ae:	80 90 31 10 	lds	r8, 0x1031	; 0x801031 <mqtt_client+0x2>
   1a2b2:	88 2d       	mov	r24, r8
   1a2b4:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   1a2b6:	80 33       	cpi	r24, 0x30	; 48
   1a2b8:	09 f0       	breq	.+2      	; 0x1a2bc <PubSubClient::loop() [clone .constprop.95]+0x188>
   1a2ba:	83 c0       	rjmp	.+262    	; 0x1a3c2 <PubSubClient::loop() [clone .constprop.95]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   1a2bc:	a0 90 3c 12 	lds	r10, 0x123C	; 0x80123c <mqtt_client+0x20d>
   1a2c0:	b0 90 3d 12 	lds	r11, 0x123D	; 0x80123d <mqtt_client+0x20e>
   1a2c4:	a1 14       	cp	r10, r1
   1a2c6:	b1 04       	cpc	r11, r1
   1a2c8:	09 f4       	brne	.+2      	; 0x1a2cc <PubSubClient::loop() [clone .constprop.95]+0x198>
   1a2ca:	97 cf       	rjmp	.-210    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   1a2cc:	6d b6       	in	r6, 0x3d	; 61
   1a2ce:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   1a2d0:	69 81       	ldd	r22, Y+1	; 0x01
   1a2d2:	70 e0       	ldi	r23, 0x00	; 0
   1a2d4:	fb 01       	movw	r30, r22
   1a2d6:	e1 5d       	subi	r30, 0xD1	; 209
   1a2d8:	ff 4e       	sbci	r31, 0xEF	; 239
   1a2da:	23 81       	ldd	r18, Z+3	; 0x03
   1a2dc:	30 e0       	ldi	r19, 0x00	; 0
   1a2de:	32 2f       	mov	r19, r18
   1a2e0:	22 27       	eor	r18, r18
   1a2e2:	84 81       	ldd	r24, Z+4	; 0x04
   1a2e4:	28 0f       	add	r18, r24
   1a2e6:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   1a2e8:	c9 01       	movw	r24, r18
   1a2ea:	01 96       	adiw	r24, 0x01	; 1
   1a2ec:	ed b7       	in	r30, 0x3d	; 61
   1a2ee:	fe b7       	in	r31, 0x3e	; 62
   1a2f0:	e8 1b       	sub	r30, r24
   1a2f2:	f9 0b       	sbc	r31, r25
   1a2f4:	0f b6       	in	r0, 0x3f	; 63
   1a2f6:	f8 94       	cli
   1a2f8:	fe bf       	out	0x3e, r31	; 62
   1a2fa:	0f be       	out	0x3f, r0	; 63
   1a2fc:	ed bf       	out	0x3d, r30	; 61
   1a2fe:	8d b7       	in	r24, 0x3d	; 61
   1a300:	9e b7       	in	r25, 0x3e	; 62
   1a302:	01 96       	adiw	r24, 0x01	; 1
   1a304:	db 01       	movw	r26, r22
   1a306:	ac 5c       	subi	r26, 0xCC	; 204
   1a308:	bf 4e       	sbci	r27, 0xEF	; 239
   1a30a:	fc 01       	movw	r30, r24
   1a30c:	8c 01       	movw	r16, r24
   1a30e:	02 0f       	add	r16, r18
   1a310:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   1a312:	e0 17       	cp	r30, r16
   1a314:	f1 07       	cpc	r31, r17
   1a316:	19 f0       	breq	.+6      	; 0x1a31e <PubSubClient::loop() [clone .constprop.95]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   1a318:	3d 90       	ld	r3, X+
   1a31a:	31 92       	st	Z+, r3
   1a31c:	fa cf       	rjmp	.-12     	; 0x1a312 <PubSubClient::loop() [clone .constprop.95]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   1a31e:	10 82       	st	Z, r1
   1a320:	da 01       	movw	r26, r20
   1a322:	a6 1b       	sub	r26, r22
   1a324:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   1a326:	f8 2d       	mov	r31, r8
   1a328:	f6 70       	andi	r31, 0x06	; 6
   1a32a:	8f 2e       	mov	r8, r31
   1a32c:	42 e0       	ldi	r20, 0x02	; 2
   1a32e:	f4 13       	cpse	r31, r20
   1a330:	3c c0       	rjmp	.+120    	; 0x1a3aa <PubSubClient::loop() [clone .constprop.95]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   1a332:	62 0f       	add	r22, r18
   1a334:	73 1f       	adc	r23, r19
   1a336:	fb 01       	movw	r30, r22
   1a338:	e1 5d       	subi	r30, 0xD1	; 209
   1a33a:	ff 4e       	sbci	r31, 0xEF	; 239
   1a33c:	45 81       	ldd	r20, Z+5	; 0x05
   1a33e:	50 e0       	ldi	r21, 0x00	; 0
   1a340:	54 2f       	mov	r21, r20
   1a342:	44 27       	eor	r20, r20
   1a344:	06 81       	ldd	r16, Z+6	; 0x06
   1a346:	04 0f       	add	r16, r20
   1a348:	15 2f       	mov	r17, r21
   1a34a:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1a34c:	ad 01       	movw	r20, r26
   1a34e:	42 1b       	sub	r20, r18
   1a350:	53 0b       	sbc	r21, r19
   1a352:	45 50       	subi	r20, 0x05	; 5
   1a354:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   1a356:	6a 5c       	subi	r22, 0xCA	; 202
   1a358:	7f 4e       	sbci	r23, 0xEF	; 239
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1a35a:	f5 01       	movw	r30, r10
   1a35c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   1a35e:	80 e4       	ldi	r24, 0x40	; 64
   1a360:	80 93 31 10 	sts	0x1031, r24	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   1a364:	80 92 32 10 	sts	0x1032, r8	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   1a368:	10 93 33 10 	sts	0x1033, r17	; 0x801033 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1a36c:	00 93 34 10 	sts	0x1034, r16	; 0x801034 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   1a370:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1a374:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   1a378:	dc 01       	movw	r26, r24
   1a37a:	ed 91       	ld	r30, X+
   1a37c:	fc 91       	ld	r31, X
   1a37e:	02 80       	ldd	r0, Z+2	; 0x02
   1a380:	f3 81       	ldd	r31, Z+3	; 0x03
   1a382:	e0 2d       	mov	r30, r0
   1a384:	44 e0       	ldi	r20, 0x04	; 4
   1a386:	50 e0       	ldi	r21, 0x00	; 0
   1a388:	61 e3       	ldi	r22, 0x31	; 49
   1a38a:	70 e1       	ldi	r23, 0x10	; 16
   1a38c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   1a38e:	c0 92 33 12 	sts	0x1233, r12	; 0x801233 <mqtt_client+0x204>
   1a392:	d0 92 34 12 	sts	0x1234, r13	; 0x801234 <mqtt_client+0x205>
   1a396:	e0 92 35 12 	sts	0x1235, r14	; 0x801235 <mqtt_client+0x206>
   1a39a:	f0 92 36 12 	sts	0x1236, r15	; 0x801236 <mqtt_client+0x207>
   1a39e:	0f b6       	in	r0, 0x3f	; 63
   1a3a0:	f8 94       	cli
   1a3a2:	7e be       	out	0x3e, r7	; 62
   1a3a4:	0f be       	out	0x3f, r0	; 63
   1a3a6:	6d be       	out	0x3d, r6	; 61
   1a3a8:	28 cf       	rjmp	.-432    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   1a3aa:	ad 01       	movw	r20, r26
   1a3ac:	42 1b       	sub	r20, r18
   1a3ae:	53 0b       	sbc	r21, r19
   1a3b0:	43 50       	subi	r20, 0x03	; 3
   1a3b2:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   1a3b4:	62 0f       	add	r22, r18
   1a3b6:	73 1f       	adc	r23, r19
   1a3b8:	6c 5c       	subi	r22, 0xCC	; 204
   1a3ba:	7f 4e       	sbci	r23, 0xEF	; 239
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   1a3bc:	f5 01       	movw	r30, r10
   1a3be:	19 95       	eicall
   1a3c0:	ee cf       	rjmp	.-36     	; 0x1a39e <PubSubClient::loop() [clone .constprop.95]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   1a3c2:	80 3c       	cpi	r24, 0xC0	; 192
   1a3c4:	a9 f4       	brne	.+42     	; 0x1a3f0 <PubSubClient::loop() [clone .constprop.95]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   1a3c6:	80 ed       	ldi	r24, 0xD0	; 208
   1a3c8:	80 93 31 10 	sts	0x1031, r24	; 0x801031 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   1a3cc:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   1a3d0:	80 91 2f 10 	lds	r24, 0x102F	; 0x80102f <mqtt_client>
   1a3d4:	90 91 30 10 	lds	r25, 0x1030	; 0x801030 <mqtt_client+0x1>
   1a3d8:	dc 01       	movw	r26, r24
   1a3da:	ed 91       	ld	r30, X+
   1a3dc:	fc 91       	ld	r31, X
   1a3de:	02 80       	ldd	r0, Z+2	; 0x02
   1a3e0:	f3 81       	ldd	r31, Z+3	; 0x03
   1a3e2:	e0 2d       	mov	r30, r0
   1a3e4:	42 e0       	ldi	r20, 0x02	; 2
   1a3e6:	50 e0       	ldi	r21, 0x00	; 0
   1a3e8:	61 e3       	ldi	r22, 0x31	; 49
   1a3ea:	70 e1       	ldi	r23, 0x10	; 16
   1a3ec:	19 95       	eicall
   1a3ee:	05 cf       	rjmp	.-502    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   1a3f0:	80 3d       	cpi	r24, 0xD0	; 208
   1a3f2:	09 f0       	breq	.+2      	; 0x1a3f6 <PubSubClient::loop() [clone .constprop.95]+0x2c2>
   1a3f4:	02 cf       	rjmp	.-508    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   1a3f6:	10 92 3b 12 	sts	0x123B, r1	; 0x80123b <mqtt_client+0x20c>
   1a3fa:	ff ce       	rjmp	.-514    	; 0x1a1fa <PubSubClient::loop() [clone .constprop.95]+0xc6>

0001a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   1a3fc:	cf 93       	push	r28
   1a3fe:	c8 2f       	mov	r28, r24
   1a400:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   1a402:	61 e0       	ldi	r22, 0x01	; 1
   1a404:	70 e0       	ldi	r23, 0x00	; 0
   1a406:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   1a40a:	61 e0       	ldi	r22, 0x01	; 1
   1a40c:	70 e0       	ldi	r23, 0x00	; 0
   1a40e:	8c 2f       	mov	r24, r28
   1a410:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.91():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   1a414:	81 11       	cpse	r24, r1
   1a416:	f9 cf       	rjmp	.-14     	; 0x1a40a <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   1a418:	cf 91       	pop	r28
   1a41a:	08 95       	ret

0001a41c <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]>:
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   1a41c:	0f 93       	push	r16
   1a41e:	1f 93       	push	r17
   1a420:	cf 93       	push	r28
   1a422:	df 93       	push	r29
   1a424:	c8 2f       	mov	r28, r24
   1a426:	d6 2f       	mov	r29, r22
   1a428:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   1a42a:	0e 94 e6 81 	call	0x103cc	; 0x103cc <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   1a42e:	4d 2f       	mov	r20, r29
   1a430:	70 e0       	ldi	r23, 0x00	; 0
   1a432:	60 e0       	ldi	r22, 0x00	; 0
   1a434:	8c 2f       	mov	r24, r28
   1a436:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   1a43a:	01 15       	cp	r16, r1
   1a43c:	11 05       	cpc	r17, r1
   1a43e:	b9 f0       	breq	.+46     	; 0x1a46e <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   1a440:	41 2f       	mov	r20, r17
   1a442:	64 e0       	ldi	r22, 0x04	; 4
   1a444:	70 e0       	ldi	r23, 0x00	; 0
   1a446:	8c 2f       	mov	r24, r28
   1a448:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1a44c:	40 2f       	mov	r20, r16
   1a44e:	65 e0       	ldi	r22, 0x05	; 5
   1a450:	70 e0       	ldi	r23, 0x00	; 0
   1a452:	8c 2f       	mov	r24, r28
   1a454:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.90():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   1a458:	61 e0       	ldi	r22, 0x01	; 1
   1a45a:	70 e0       	ldi	r23, 0x00	; 0
   1a45c:	8c 2f       	mov	r24, r28
   1a45e:	0e 94 fe d1 	call	0x1a3fc	; 0x1a3fc <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.91]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   1a462:	81 e0       	ldi	r24, 0x01	; 1
   1a464:	df 91       	pop	r29
   1a466:	cf 91       	pop	r28
   1a468:	1f 91       	pop	r17
   1a46a:	0f 91       	pop	r16
   1a46c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   1a46e:	00 91 82 12 	lds	r16, 0x1282	; 0x801282 <local_port>
   1a472:	10 91 83 12 	lds	r17, 0x1283	; 0x801283 <local_port+0x1>
   1a476:	0f 5f       	subi	r16, 0xFF	; 255
   1a478:	1f 4f       	sbci	r17, 0xFF	; 255
   1a47a:	10 93 83 12 	sts	0x1283, r17	; 0x801283 <local_port+0x1>
   1a47e:	00 93 82 12 	sts	0x1282, r16	; 0x801282 <local_port>
   1a482:	de cf       	rjmp	.-68     	; 0x1a440 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.90]+0x24>

0001a484 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   1a484:	8f 92       	push	r8
   1a486:	9f 92       	push	r9
   1a488:	af 92       	push	r10
   1a48a:	bf 92       	push	r11
   1a48c:	cf 92       	push	r12
   1a48e:	df 92       	push	r13
   1a490:	ef 92       	push	r14
   1a492:	ff 92       	push	r15
   1a494:	0f 93       	push	r16
   1a496:	1f 93       	push	r17
   1a498:	cf 93       	push	r28
   1a49a:	5c 01       	movw	r10, r24
   1a49c:	6b 01       	movw	r12, r22
   1a49e:	7a 01       	movw	r14, r20
   1a4a0:	89 01       	movw	r16, r18
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   1a4a2:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <Ethernet+0xc>
   1a4a6:	80 93 b4 0c 	sts	0x0CB4, r24	; 0x800cb4 <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   1a4aa:	68 ee       	ldi	r22, 0xE8	; 232
   1a4ac:	73 e0       	ldi	r23, 0x03	; 3
   1a4ae:	80 e0       	ldi	r24, 0x00	; 0
   1a4b0:	90 e0       	ldi	r25, 0x00	; 0
   1a4b2:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   1a4b6:	61 e0       	ldi	r22, 0x01	; 1
   1a4b8:	80 91 b4 0c 	lds	r24, 0x0CB4	; 0x800cb4 <SPI_CS>
   1a4bc:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   1a4c0:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1a4c4:	60 e0       	ldi	r22, 0x00	; 0
   1a4c6:	90 e0       	ldi	r25, 0x00	; 0
   1a4c8:	80 e0       	ldi	r24, 0x00	; 0
   1a4ca:	0e 94 6b 81 	call	0x102d6	; 0x102d6 <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   1a4ce:	48 2f       	mov	r20, r24
   1a4d0:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1a4d2:	64 e0       	ldi	r22, 0x04	; 4
   1a4d4:	90 e0       	ldi	r25, 0x00	; 0
   1a4d6:	80 e0       	ldi	r24, 0x00	; 0
   1a4d8:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1a4dc:	cc e0       	ldi	r28, 0x0C	; 12
   1a4de:	88 e0       	ldi	r24, 0x08	; 8
   1a4e0:	88 2e       	mov	r8, r24
   1a4e2:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1a4e4:	42 e0       	ldi	r20, 0x02	; 2
   1a4e6:	6c 2f       	mov	r22, r28
   1a4e8:	8e e1       	ldi	r24, 0x1E	; 30
   1a4ea:	90 e0       	ldi	r25, 0x00	; 0
   1a4ec:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   1a4f0:	42 e0       	ldi	r20, 0x02	; 2
   1a4f2:	6c 2f       	mov	r22, r28
   1a4f4:	8f e1       	ldi	r24, 0x1F	; 31
   1a4f6:	90 e0       	ldi	r25, 0x00	; 0
   1a4f8:	0e 94 bc 81 	call	0x10378	; 0x10378 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   1a4fc:	81 e0       	ldi	r24, 0x01	; 1
   1a4fe:	88 1a       	sub	r8, r24
   1a500:	91 08       	sbc	r9, r1
   1a502:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   1a504:	81 14       	cp	r8, r1
   1a506:	91 04       	cpc	r9, r1
   1a508:	69 f7       	brne	.-38     	; 0x1a4e4 <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.86]+0x60>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   1a50a:	26 e0       	ldi	r18, 0x06	; 6
   1a50c:	30 e0       	ldi	r19, 0x00	; 0
   1a50e:	49 e1       	ldi	r20, 0x19	; 25
   1a510:	5e e0       	ldi	r21, 0x0E	; 14
   1a512:	64 e0       	ldi	r22, 0x04	; 4
   1a514:	89 e0       	ldi	r24, 0x09	; 9
   1a516:	90 e0       	ldi	r25, 0x00	; 0
   1a518:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   1a51c:	a5 01       	movw	r20, r10
   1a51e:	4e 5f       	subi	r20, 0xFE	; 254
   1a520:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   1a522:	24 e0       	ldi	r18, 0x04	; 4
   1a524:	30 e0       	ldi	r19, 0x00	; 0
   1a526:	64 e0       	ldi	r22, 0x04	; 4
   1a528:	8f e0       	ldi	r24, 0x0F	; 15
   1a52a:	90 e0       	ldi	r25, 0x00	; 0
   1a52c:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   1a530:	a7 01       	movw	r20, r14
   1a532:	4e 5f       	subi	r20, 0xFE	; 254
   1a534:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   1a536:	24 e0       	ldi	r18, 0x04	; 4
   1a538:	30 e0       	ldi	r19, 0x00	; 0
   1a53a:	64 e0       	ldi	r22, 0x04	; 4
   1a53c:	81 e0       	ldi	r24, 0x01	; 1
   1a53e:	90 e0       	ldi	r25, 0x00	; 0
   1a540:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:40
   1a544:	a8 01       	movw	r20, r16
   1a546:	4e 5f       	subi	r20, 0xFE	; 254
   1a548:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   1a54a:	24 e0       	ldi	r18, 0x04	; 4
   1a54c:	30 e0       	ldi	r19, 0x00	; 0
   1a54e:	64 e0       	ldi	r22, 0x04	; 4
   1a550:	85 e0       	ldi	r24, 0x05	; 5
   1a552:	90 e0       	ldi	r25, 0x00	; 0
   1a554:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1a558:	f6 01       	movw	r30, r12
   1a55a:	82 81       	ldd	r24, Z+2	; 0x02
   1a55c:	93 81       	ldd	r25, Z+3	; 0x03
   1a55e:	a4 81       	ldd	r26, Z+4	; 0x04
   1a560:	b5 81       	ldd	r27, Z+5	; 0x05
   1a562:	80 93 06 0e 	sts	0x0E06, r24	; 0x800e06 <Ethernet+0x2>
   1a566:	90 93 07 0e 	sts	0x0E07, r25	; 0x800e07 <Ethernet+0x3>
   1a56a:	a0 93 08 0e 	sts	0x0E08, r26	; 0x800e08 <Ethernet+0x4>
   1a56e:	b0 93 09 0e 	sts	0x0E09, r27	; 0x800e09 <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.86():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   1a572:	cf 91       	pop	r28
   1a574:	1f 91       	pop	r17
   1a576:	0f 91       	pop	r16
   1a578:	ff 90       	pop	r15
   1a57a:	ef 90       	pop	r14
   1a57c:	df 90       	pop	r13
   1a57e:	cf 90       	pop	r12
   1a580:	bf 90       	pop	r11
   1a582:	af 90       	pop	r10
   1a584:	9f 90       	pop	r9
   1a586:	8f 90       	pop	r8
   1a588:	08 95       	ret

0001a58a <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>:
_ZN13LCDWIKI_TOUCH11TP_SetOnOffEh.constprop.85():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
uint8_t LCDWIKI_TOUCH::TP_GetBacklight(void)
{
return backlight;
}

void LCDWIKI_TOUCH::TP_SetOnOff(uint8_t mode)
   1a58a:	1f 93       	push	r17
   1a58c:	cf 93       	push	r28
   1a58e:	df 93       	push	r29
   1a590:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
{
onoff_mode = mode;
   1a592:	c6 e9       	ldi	r28, 0x96	; 150
   1a594:	df e0       	ldi	r29, 0x0F	; 15
   1a596:	88 8b       	std	Y+16, r24	; 0x10
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:77
TCS_LOW;
   1a598:	e9 89       	ldd	r30, Y+17	; 0x11
   1a59a:	fa 89       	ldd	r31, Y+18	; 0x12
   1a59c:	90 81       	ld	r25, Z
   1a59e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1a5a0:	80 95       	com	r24
   1a5a2:	89 23       	and	r24, r25
   1a5a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:78
SDCS_LOW;
   1a5a6:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a5a8:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a5aa:	90 81       	ld	r25, Z
   1a5ac:	8a a1       	ldd	r24, Y+34	; 0x22
   1a5ae:	80 95       	com	r24
   1a5b0:	89 23       	and	r24, r25
   1a5b2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:79
delay_hus(200);
   1a5b4:	68 ec       	ldi	r22, 0xC8	; 200
   1a5b6:	70 e0       	ldi	r23, 0x00	; 0
   1a5b8:	80 e0       	ldi	r24, 0x00	; 0
   1a5ba:	90 e0       	ldi	r25, 0x00	; 0
   1a5bc:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:80
TCS_HIGH;
   1a5c0:	e9 89       	ldd	r30, Y+17	; 0x11
   1a5c2:	fa 89       	ldd	r31, Y+18	; 0x12
   1a5c4:	80 81       	ld	r24, Z
   1a5c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a5c8:	89 2b       	or	r24, r25
   1a5ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:81
SDCS_HIGH;
   1a5cc:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1a5ce:	fc 8d       	ldd	r31, Y+28	; 0x1c
   1a5d0:	80 81       	ld	r24, Z
   1a5d2:	9a a1       	ldd	r25, Y+34	; 0x22
   1a5d4:	89 2b       	or	r24, r25
   1a5d6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
TP_Write_Byte_LowSpeed(SET_ON_OFF);
   1a5d8:	86 e5       	ldi	r24, 0x56	; 86
   1a5da:	0e 94 67 b4 	call	0x168ce	; 0x168ce <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
TP_Write_Byte_LowSpeed(mode);
   1a5de:	81 2f       	mov	r24, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84
}
   1a5e0:	df 91       	pop	r29
   1a5e2:	cf 91       	pop	r28
   1a5e4:	1f 91       	pop	r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:83
SDCS_LOW;
delay_hus(200);
TCS_HIGH;
SDCS_HIGH;
TP_Write_Byte_LowSpeed(SET_ON_OFF);
TP_Write_Byte_LowSpeed(mode);
   1a5e6:	0c 94 67 b4 	jmp	0x168ce	; 0x168ce <LCDWIKI_TOUCH::TP_Write_Byte_LowSpeed(unsigned char) [clone .constprop.231]>

0001a5ea <EEPROM_CAT25::endCommand() [clone .constprop.80]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.80():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1a5ea:	61 e0       	ldi	r22, 0x01	; 1
   1a5ec:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   1a5f0:	0c 94 58 62 	jmp	0xc4b0	; 0xc4b0 <digitalWrite>

0001a5f4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   1a5f4:	cf 93       	push	r28
   1a5f6:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   1a5f8:	60 e0       	ldi	r22, 0x00	; 0
   1a5fa:	80 91 75 0e 	lds	r24, 0x0E75	; 0x800e75 <SROM+0xa>
   1a5fe:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   1a602:	6c 2f       	mov	r22, r28
   1a604:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1a608:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1a60c:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   1a610:	c2 50       	subi	r28, 0x02	; 2
   1a612:	c2 30       	cpi	r28, 0x02	; 2
   1a614:	a8 f5       	brcc	.+106    	; 0x1a680 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   1a616:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   1a61a:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   1a61e:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   1a622:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   1a626:	01 97       	sbiw	r24, 0x01	; 1
   1a628:	a1 40       	sbci	r26, 0x01	; 1
   1a62a:	b1 05       	cpc	r27, r1
   1a62c:	38 f0       	brcs	.+14     	; 0x1a63c <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   1a62e:	60 e0       	ldi	r22, 0x00	; 0
   1a630:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1a634:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1a638:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   1a63c:	80 91 6f 0e 	lds	r24, 0x0E6F	; 0x800e6f <SROM+0x4>
   1a640:	90 91 70 0e 	lds	r25, 0x0E70	; 0x800e70 <SROM+0x5>
   1a644:	a0 91 71 0e 	lds	r26, 0x0E71	; 0x800e71 <SROM+0x6>
   1a648:	b0 91 72 0e 	lds	r27, 0x0E72	; 0x800e72 <SROM+0x7>
   1a64c:	81 30       	cpi	r24, 0x01	; 1
   1a64e:	91 40       	sbci	r25, 0x01	; 1
   1a650:	a1 05       	cpc	r26, r1
   1a652:	b1 05       	cpc	r27, r1
   1a654:	68 f0       	brcs	.+26     	; 0x1a670 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
   1a656:	80 91 6d 0e 	lds	r24, 0x0E6D	; 0x800e6d <SROM+0x2>
   1a65a:	90 91 6e 0e 	lds	r25, 0x0E6E	; 0x800e6e <SROM+0x3>
   1a65e:	0b 97       	sbiw	r24, 0x0b	; 11
   1a660:	39 f0       	breq	.+14     	; 0x1a670 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   1a662:	60 e0       	ldi	r22, 0x00	; 0
   1a664:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1a668:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1a66c:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1a670:	60 e0       	ldi	r22, 0x00	; 0
   1a672:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1a676:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1a67a:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   1a67c:	0c 94 65 8a 	jmp	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.78():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1a680:	cf 91       	pop	r28
   1a682:	08 95       	ret

0001a684 <EEPROM_CAT25::getStatusRegister() [clone .constprop.77]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.77():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   1a684:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   1a686:	85 e0       	ldi	r24, 0x05	; 5
   1a688:	0e 94 fa d2 	call	0x1a5f4	; 0x1a5f4 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.78]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   1a68c:	6f ef       	ldi	r22, 0xFF	; 255
   1a68e:	80 91 6b 0e 	lds	r24, 0x0E6B	; 0x800e6b <SROM>
   1a692:	90 91 6c 0e 	lds	r25, 0x0E6C	; 0x800e6c <SROM+0x1>
   1a696:	0e 94 65 8a 	call	0x114ca	; 0x114ca <SoftSPIB::transfer(unsigned char)>
   1a69a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   1a69c:	0e 94 f5 d2 	call	0x1a5ea	; 0x1a5ea <EEPROM_CAT25::endCommand() [clone .constprop.80]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   1a6a0:	8c 2f       	mov	r24, r28
   1a6a2:	cf 91       	pop	r28
   1a6a4:	08 95       	ret

0001a6a6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   1a6a6:	0f 93       	push	r16
   1a6a8:	1f 93       	push	r17
   1a6aa:	cf 93       	push	r28
   1a6ac:	df 93       	push	r29
   1a6ae:	00 d0       	rcall	.+0      	; 0x1a6b0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xa>
   1a6b0:	00 d0       	rcall	.+0      	; 0x1a6b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0xc>
   1a6b2:	cd b7       	in	r28, 0x3d	; 61
   1a6b4:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   1a6b6:	48 2f       	mov	r20, r24
   1a6b8:	43 70       	andi	r20, 0x03	; 3
   1a6ba:	50 e0       	ldi	r21, 0x00	; 0
   1a6bc:	50 93 d0 0f 	sts	0x0FD0, r21	; 0x800fd0 <my_lcd+0x17>
   1a6c0:	40 93 cf 0f 	sts	0x0FCF, r20	; 0x800fcf <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   1a6c4:	28 2f       	mov	r18, r24
   1a6c6:	21 70       	andi	r18, 0x01	; 1
   1a6c8:	80 ff       	sbrs	r24, 0
   1a6ca:	3d c1       	rjmp	.+634    	; 0x1a946 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2a0>
   1a6cc:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   1a6d0:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
   1a6d4:	90 93 cc 0f 	sts	0x0FCC, r25	; 0x800fcc <my_lcd+0x13>
   1a6d8:	80 93 cb 0f 	sts	0x0FCB, r24	; 0x800fcb <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   1a6dc:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <my_lcd+0xe>
   1a6e0:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <my_lcd+0xf>
   1a6e4:	21 11       	cpse	r18, r1
   1a6e6:	04 c0       	rjmp	.+8      	; 0x1a6f0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4a>
   1a6e8:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   1a6ec:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
   1a6f0:	90 93 ce 0f 	sts	0x0FCE, r25	; 0x800fce <my_lcd+0x15>
   1a6f4:	80 93 cd 0f 	sts	0x0FCD, r24	; 0x800fcd <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   1a6f8:	a0 91 e7 0f 	lds	r26, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1a6fc:	b0 91 e8 0f 	lds	r27, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1a700:	8c 91       	ld	r24, X
   1a702:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   1a706:	89 23       	and	r24, r25
   1a708:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   1a70a:	40 91 d1 0f 	lds	r20, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   1a70e:	50 91 d2 0f 	lds	r21, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   1a712:	80 91 cf 0f 	lds	r24, 0x0FCF	; 0x800fcf <my_lcd+0x16>
   1a716:	90 91 d0 0f 	lds	r25, 0x0FD0	; 0x800fd0 <my_lcd+0x17>
   1a71a:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a71e:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a722:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   1a726:	41 15       	cp	r20, r1
   1a728:	51 05       	cpc	r21, r1
   1a72a:	09 f0       	breq	.+2      	; 0x1a72e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x88>
   1a72c:	13 c1       	rjmp	.+550    	; 0x1a954 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2ae>
   1a72e:	01 97       	sbiw	r24, 0x01	; 1
   1a730:	83 30       	cpi	r24, 0x03	; 3
   1a732:	91 05       	cpc	r25, r1
   1a734:	08 f0       	brcs	.+2      	; 0x1a738 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x92>
   1a736:	0c c1       	rjmp	.+536    	; 0x1a950 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2aa>
   1a738:	88 0f       	add	r24, r24
   1a73a:	99 1f       	adc	r25, r25
   1a73c:	fc 01       	movw	r30, r24
   1a73e:	ee 5a       	subi	r30, 0xAE	; 174
   1a740:	fd 4f       	sbci	r31, 0xFD	; 253
   1a742:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   1a744:	30 91 e1 0f 	lds	r19, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1a748:	40 91 e2 0f 	lds	r20, 0x0FE2	; 0x800fe2 <my_lcd+0x29>
   1a74c:	8c 91       	ld	r24, X
   1a74e:	28 23       	and	r18, r24
   1a750:	2c 93       	st	X, r18
   1a752:	42 b9       	out	0x02, r20	; 2
   1a754:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a758:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a75c:	80 81       	ld	r24, Z
   1a75e:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a762:	82 23       	and	r24, r18
   1a764:	80 83       	st	Z, r24
   1a766:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a76a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a76e:	80 81       	ld	r24, Z
   1a770:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a774:	82 2b       	or	r24, r18
   1a776:	80 83       	st	Z, r24
   1a778:	32 b9       	out	0x02, r19	; 2
   1a77a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a77e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a782:	80 81       	ld	r24, Z
   1a784:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a788:	82 23       	and	r24, r18
   1a78a:	80 83       	st	Z, r24
   1a78c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a790:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a794:	80 81       	ld	r24, Z
   1a796:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a79a:	82 2b       	or	r24, r18
   1a79c:	80 83       	st	Z, r24
   1a79e:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a7a2:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a7a6:	80 81       	ld	r24, Z
   1a7a8:	20 91 f0 0f 	lds	r18, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1a7ac:	82 2b       	or	r24, r18
   1a7ae:	80 83       	st	Z, r24
   1a7b0:	80 e1       	ldi	r24, 0x10	; 16
   1a7b2:	82 b9       	out	0x02, r24	; 2
   1a7b4:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a7b8:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a7bc:	80 81       	ld	r24, Z
   1a7be:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a7c2:	82 23       	and	r24, r18
   1a7c4:	80 83       	st	Z, r24
   1a7c6:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a7ca:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a7ce:	80 81       	ld	r24, Z
   1a7d0:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a7d4:	82 2b       	or	r24, r18
   1a7d6:	80 83       	st	Z, r24
   1a7d8:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1a7da:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a7de:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a7e2:	80 81       	ld	r24, Z
   1a7e4:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a7e8:	89 23       	and	r24, r25
   1a7ea:	80 83       	st	Z, r24
   1a7ec:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a7f0:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a7f4:	80 81       	ld	r24, Z
   1a7f6:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a7fa:	89 2b       	or	r24, r25
   1a7fc:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   1a7fe:	00 91 cd 0f 	lds	r16, 0x0FCD	; 0x800fcd <my_lcd+0x14>
   1a802:	10 91 ce 0f 	lds	r17, 0x0FCE	; 0x800fce <my_lcd+0x15>
   1a806:	01 50       	subi	r16, 0x01	; 1
   1a808:	11 09       	sbc	r17, r1
   1a80a:	20 91 cb 0f 	lds	r18, 0x0FCB	; 0x800fcb <my_lcd+0x12>
   1a80e:	30 91 cc 0f 	lds	r19, 0x0FCC	; 0x800fcc <my_lcd+0x13>
   1a812:	21 50       	subi	r18, 0x01	; 1
   1a814:	31 09       	sbc	r19, r1
   1a816:	50 e0       	ldi	r21, 0x00	; 0
   1a818:	40 e0       	ldi	r20, 0x00	; 0
   1a81a:	70 e0       	ldi	r23, 0x00	; 0
   1a81c:	60 e0       	ldi	r22, 0x00	; 0
   1a81e:	89 eb       	ldi	r24, 0xB9	; 185
   1a820:	9f e0       	ldi	r25, 0x0F	; 15
   1a822:	0e 94 bd 8b 	call	0x1177a	; 0x1177a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   1a826:	80 91 d1 0f 	lds	r24, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   1a82a:	90 91 d2 0f 	lds	r25, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   1a82e:	89 2b       	or	r24, r25
   1a830:	09 f0       	breq	.+2      	; 0x1a834 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x18e>
   1a832:	9e c1       	rjmp	.+828    	; 0x1ab70 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   1a834:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a838:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a83c:	80 81       	ld	r24, Z
   1a83e:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   1a842:	89 23       	and	r24, r25
   1a844:	80 83       	st	Z, r24
   1a846:	80 91 dd 0f 	lds	r24, 0x0FDD	; 0x800fdd <my_lcd+0x24>
   1a84a:	82 b9       	out	0x02, r24	; 2
   1a84c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a850:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a854:	80 81       	ld	r24, Z
   1a856:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a85a:	89 23       	and	r24, r25
   1a85c:	80 83       	st	Z, r24
   1a85e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a862:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a866:	80 81       	ld	r24, Z
   1a868:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a86c:	89 2b       	or	r24, r25
   1a86e:	80 83       	st	Z, r24
   1a870:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a874:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a878:	80 81       	ld	r24, Z
   1a87a:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1a87e:	89 2b       	or	r24, r25
   1a880:	80 83       	st	Z, r24
   1a882:	83 e0       	ldi	r24, 0x03	; 3
   1a884:	82 b9       	out	0x02, r24	; 2
   1a886:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a88a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a88e:	80 81       	ld	r24, Z
   1a890:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a894:	89 23       	and	r24, r25
   1a896:	80 83       	st	Z, r24
   1a898:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a89c:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a8a0:	80 81       	ld	r24, Z
   1a8a2:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a8a6:	89 2b       	or	r24, r25
   1a8a8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   1a8aa:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a8ae:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a8b2:	80 81       	ld	r24, Z
   1a8b4:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   1a8b8:	89 23       	and	r24, r25
   1a8ba:	80 83       	st	Z, r24
   1a8bc:	80 91 df 0f 	lds	r24, 0x0FDF	; 0x800fdf <my_lcd+0x26>
   1a8c0:	82 b9       	out	0x02, r24	; 2
   1a8c2:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a8c6:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a8ca:	80 81       	ld	r24, Z
   1a8cc:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a8d0:	89 23       	and	r24, r25
   1a8d2:	80 83       	st	Z, r24
   1a8d4:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a8d8:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a8dc:	80 81       	ld	r24, Z
   1a8de:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a8e2:	89 2b       	or	r24, r25
   1a8e4:	80 83       	st	Z, r24
   1a8e6:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a8ea:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a8ee:	80 81       	ld	r24, Z
   1a8f0:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1a8f4:	89 2b       	or	r24, r25
   1a8f6:	80 83       	st	Z, r24
   1a8f8:	12 b8       	out	0x02, r1	; 2
   1a8fa:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a8fe:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a902:	80 81       	ld	r24, Z
   1a904:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a908:	89 23       	and	r24, r25
   1a90a:	80 83       	st	Z, r24
   1a90c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a910:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a914:	80 81       	ld	r24, Z
   1a916:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a91a:	89 2b       	or	r24, r25
   1a91c:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.65():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   1a91e:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1a922:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1a926:	80 81       	ld	r24, Z
   1a928:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   1a92c:	89 2b       	or	r24, r25
   1a92e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   1a930:	26 96       	adiw	r28, 0x06	; 6
   1a932:	0f b6       	in	r0, 0x3f	; 63
   1a934:	f8 94       	cli
   1a936:	de bf       	out	0x3e, r29	; 62
   1a938:	0f be       	out	0x3f, r0	; 63
   1a93a:	cd bf       	out	0x3d, r28	; 61
   1a93c:	df 91       	pop	r29
   1a93e:	cf 91       	pop	r28
   1a940:	1f 91       	pop	r17
   1a942:	0f 91       	pop	r16
   1a944:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   1a946:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <my_lcd+0xe>
   1a94a:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <my_lcd+0xf>
   1a94e:	c2 ce       	rjmp	.-636    	; 0x1a6d4 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   1a950:	90 e3       	ldi	r25, 0x30	; 48
   1a952:	f8 ce       	rjmp	.-528    	; 0x1a744 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   1a954:	46 30       	cpi	r20, 0x06	; 6
   1a956:	51 05       	cpc	r21, r1
   1a958:	99 f5       	brne	.+102    	; 0x1a9c0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   1a95a:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1a95c:	81 30       	cpi	r24, 0x01	; 1
   1a95e:	91 05       	cpc	r25, r1
   1a960:	51 f0       	breq	.+20     	; 0x1a976 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   1a962:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1a964:	81 30       	cpi	r24, 0x01	; 1
   1a966:	91 05       	cpc	r25, r1
   1a968:	30 f0       	brcs	.+12     	; 0x1a976 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   1a96a:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   1a96c:	82 30       	cpi	r24, 0x02	; 2
   1a96e:	91 05       	cpc	r25, r1
   1a970:	11 f0       	breq	.+4      	; 0x1a976 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
   1a972:	03 97       	sbiw	r24, 0x03	; 3
   1a974:	19 f1       	breq	.+70     	; 0x1a9bc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   1a976:	8c 91       	ld	r24, X
   1a978:	28 23       	and	r18, r24
   1a97a:	2c 93       	st	X, r18
   1a97c:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1a980:	82 b9       	out	0x02, r24	; 2
   1a982:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a986:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a98a:	8c 91       	ld	r24, X
   1a98c:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a990:	89 23       	and	r24, r25
   1a992:	8c 93       	st	X, r24
   1a994:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a998:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a99c:	8c 91       	ld	r24, X
   1a99e:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1a9a2:	89 2b       	or	r24, r25
   1a9a4:	8c 93       	st	X, r24
   1a9a6:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1a9aa:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1a9ae:	8c 91       	ld	r24, X
   1a9b0:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1a9b4:	89 2b       	or	r24, r25
   1a9b6:	8c 93       	st	X, r24
   1a9b8:	f2 b9       	out	0x02, r31	; 2
   1a9ba:	0f cf       	rjmp	.-482    	; 0x1a7da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   1a9bc:	f0 e6       	ldi	r31, 0x60	; 96
   1a9be:	db cf       	rjmp	.-74     	; 0x1a976 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   1a9c0:	48 30       	cpi	r20, 0x08	; 8
   1a9c2:	51 05       	cpc	r21, r1
   1a9c4:	99 f5       	brne	.+102    	; 0x1aa2c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   1a9c6:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1a9c8:	81 30       	cpi	r24, 0x01	; 1
   1a9ca:	91 05       	cpc	r25, r1
   1a9cc:	51 f0       	breq	.+20     	; 0x1a9e2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   1a9ce:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1a9d0:	81 30       	cpi	r24, 0x01	; 1
   1a9d2:	91 05       	cpc	r25, r1
   1a9d4:	30 f0       	brcs	.+12     	; 0x1a9e2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   1a9d6:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   1a9d8:	82 30       	cpi	r24, 0x02	; 2
   1a9da:	91 05       	cpc	r25, r1
   1a9dc:	11 f0       	breq	.+4      	; 0x1a9e2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
   1a9de:	03 97       	sbiw	r24, 0x03	; 3
   1a9e0:	19 f1       	breq	.+70     	; 0x1aa28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1a9e2:	8c 91       	ld	r24, X
   1a9e4:	28 23       	and	r18, r24
   1a9e6:	2c 93       	st	X, r18
   1a9e8:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1a9ec:	82 b9       	out	0x02, r24	; 2
   1a9ee:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1a9f2:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1a9f6:	8c 91       	ld	r24, X
   1a9f8:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1a9fc:	89 23       	and	r24, r25
   1a9fe:	8c 93       	st	X, r24
   1aa00:	a0 91 eb 0f 	lds	r26, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aa04:	b0 91 ec 0f 	lds	r27, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aa08:	8c 91       	ld	r24, X
   1aa0a:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1aa0e:	89 2b       	or	r24, r25
   1aa10:	8c 93       	st	X, r24
   1aa12:	a0 91 e9 0f 	lds	r26, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1aa16:	b0 91 ea 0f 	lds	r27, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1aa1a:	8c 91       	ld	r24, X
   1aa1c:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1aa20:	89 2b       	or	r24, r25
   1aa22:	8c 93       	st	X, r24
   1aa24:	e2 b9       	out	0x02, r30	; 2
   1aa26:	d9 ce       	rjmp	.-590    	; 0x1a7da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   1aa28:	e8 e2       	ldi	r30, 0x28	; 40
   1aa2a:	db cf       	rjmp	.-74     	; 0x1a9e2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   1aa2c:	45 30       	cpi	r20, 0x05	; 5
   1aa2e:	51 05       	cpc	r21, r1
   1aa30:	a1 f5       	brne	.+104    	; 0x1aa9a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   1aa32:	81 30       	cpi	r24, 0x01	; 1
   1aa34:	91 05       	cpc	r25, r1
   1aa36:	49 f1       	breq	.+82     	; 0x1aa8a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e4>
   1aa38:	70 f1       	brcs	.+92     	; 0x1aa96 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3f0>
   1aa3a:	82 30       	cpi	r24, 0x02	; 2
   1aa3c:	91 05       	cpc	r25, r1
   1aa3e:	39 f1       	breq	.+78     	; 0x1aa8e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3e8>
   1aa40:	03 97       	sbiw	r24, 0x03	; 3
   1aa42:	39 f1       	breq	.+78     	; 0x1aa92 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1aa44:	8c 91       	ld	r24, X
   1aa46:	28 23       	and	r18, r24
   1aa48:	2c 93       	st	X, r18
   1aa4a:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1aa4e:	82 b9       	out	0x02, r24	; 2
   1aa50:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aa54:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aa58:	80 81       	ld	r24, Z
   1aa5a:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1aa5e:	89 23       	and	r24, r25
   1aa60:	80 83       	st	Z, r24
   1aa62:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aa66:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aa6a:	80 81       	ld	r24, Z
   1aa6c:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1aa70:	89 2b       	or	r24, r25
   1aa72:	80 83       	st	Z, r24
   1aa74:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1aa78:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1aa7c:	80 81       	ld	r24, Z
   1aa7e:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1aa82:	89 2b       	or	r24, r25
   1aa84:	80 83       	st	Z, r24
   1aa86:	72 b9       	out	0x02, r23	; 2
   1aa88:	a8 ce       	rjmp	.-688    	; 0x1a7da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   1aa8a:	78 e7       	ldi	r23, 0x78	; 120
   1aa8c:	db cf       	rjmp	.-74     	; 0x1aa44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   1aa8e:	78 ec       	ldi	r23, 0xC8	; 200
   1aa90:	d9 cf       	rjmp	.-78     	; 0x1aa44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1aa92:	78 ea       	ldi	r23, 0xA8	; 168
   1aa94:	d7 cf       	rjmp	.-82     	; 0x1aa44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   1aa96:	78 e0       	ldi	r23, 0x08	; 8
   1aa98:	d5 cf       	rjmp	.-86     	; 0x1aa44 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   1aa9a:	47 30       	cpi	r20, 0x07	; 7
   1aa9c:	51 05       	cpc	r21, r1
   1aa9e:	a1 f5       	brne	.+104    	; 0x1ab08 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   1aaa0:	81 30       	cpi	r24, 0x01	; 1
   1aaa2:	91 05       	cpc	r25, r1
   1aaa4:	49 f1       	breq	.+82     	; 0x1aaf8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x452>
   1aaa6:	70 f1       	brcs	.+92     	; 0x1ab04 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45e>
   1aaa8:	82 30       	cpi	r24, 0x02	; 2
   1aaaa:	91 05       	cpc	r25, r1
   1aaac:	39 f1       	breq	.+78     	; 0x1aafc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x456>
   1aaae:	03 97       	sbiw	r24, 0x03	; 3
   1aab0:	39 f1       	breq	.+78     	; 0x1ab00 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1aab2:	8c 91       	ld	r24, X
   1aab4:	28 23       	and	r18, r24
   1aab6:	2c 93       	st	X, r18
   1aab8:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1aabc:	82 b9       	out	0x02, r24	; 2
   1aabe:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aac2:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aac6:	80 81       	ld	r24, Z
   1aac8:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1aacc:	89 23       	and	r24, r25
   1aace:	80 83       	st	Z, r24
   1aad0:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aad4:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aad8:	80 81       	ld	r24, Z
   1aada:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1aade:	89 2b       	or	r24, r25
   1aae0:	80 83       	st	Z, r24
   1aae2:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1aae6:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1aaea:	80 81       	ld	r24, Z
   1aaec:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1aaf0:	89 2b       	or	r24, r25
   1aaf2:	80 83       	st	Z, r24
   1aaf4:	62 b9       	out	0x02, r22	; 2
   1aaf6:	71 ce       	rjmp	.-798    	; 0x1a7da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   1aaf8:	68 ea       	ldi	r22, 0xA8	; 168
   1aafa:	db cf       	rjmp	.-74     	; 0x1aab2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   1aafc:	68 e1       	ldi	r22, 0x18	; 24
   1aafe:	d9 cf       	rjmp	.-78     	; 0x1aab2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1ab00:	68 e7       	ldi	r22, 0x78	; 120
   1ab02:	d7 cf       	rjmp	.-82     	; 0x1aab2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   1ab04:	68 ec       	ldi	r22, 0xC8	; 200
   1ab06:	d5 cf       	rjmp	.-86     	; 0x1aab2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   1ab08:	81 30       	cpi	r24, 0x01	; 1
   1ab0a:	91 05       	cpc	r25, r1
   1ab0c:	49 f1       	breq	.+82     	; 0x1ab60 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4ba>
   1ab0e:	70 f1       	brcs	.+92     	; 0x1ab6c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c6>
   1ab10:	82 30       	cpi	r24, 0x02	; 2
   1ab12:	91 05       	cpc	r25, r1
   1ab14:	39 f1       	breq	.+78     	; 0x1ab64 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4be>
   1ab16:	03 97       	sbiw	r24, 0x03	; 3
   1ab18:	39 f1       	breq	.+78     	; 0x1ab68 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   1ab1a:	8c 91       	ld	r24, X
   1ab1c:	28 23       	and	r18, r24
   1ab1e:	2c 93       	st	X, r18
   1ab20:	80 91 e1 0f 	lds	r24, 0x0FE1	; 0x800fe1 <my_lcd+0x28>
   1ab24:	82 b9       	out	0x02, r24	; 2
   1ab26:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ab2a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ab2e:	80 81       	ld	r24, Z
   1ab30:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1ab34:	89 23       	and	r24, r25
   1ab36:	80 83       	st	Z, r24
   1ab38:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ab3c:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ab40:	80 81       	ld	r24, Z
   1ab42:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1ab46:	89 2b       	or	r24, r25
   1ab48:	80 83       	st	Z, r24
   1ab4a:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1ab4e:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1ab52:	80 81       	ld	r24, Z
   1ab54:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1ab58:	89 2b       	or	r24, r25
   1ab5a:	80 83       	st	Z, r24
   1ab5c:	32 b9       	out	0x02, r19	; 2
   1ab5e:	3d ce       	rjmp	.-902    	; 0x1a7da <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   1ab60:	38 e2       	ldi	r19, 0x28	; 40
   1ab62:	db cf       	rjmp	.-74     	; 0x1ab1a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   1ab64:	38 e9       	ldi	r19, 0x98	; 152
   1ab66:	d9 cf       	rjmp	.-78     	; 0x1ab1a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1ab68:	38 ef       	ldi	r19, 0xF8	; 248
   1ab6a:	d7 cf       	rjmp	.-82     	; 0x1ab1a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   1ab6c:	38 e4       	ldi	r19, 0x48	; 72
   1ab6e:	d5 cf       	rjmp	.-86     	; 0x1ab1a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   1ab70:	80 91 c9 0f 	lds	r24, 0x0FC9	; 0x800fc9 <my_lcd+0x10>
   1ab74:	90 91 ca 0f 	lds	r25, 0x0FCA	; 0x800fca <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   1ab78:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   1ab7a:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   1ab7c:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   1ab7e:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   1ab80:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   1ab82:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   1ab84:	60 91 dd 0f 	lds	r22, 0x0FDD	; 0x800fdd <my_lcd+0x24>
   1ab88:	70 91 de 0f 	lds	r23, 0x0FDE	; 0x800fde <my_lcd+0x25>
   1ab8c:	26 e0       	ldi	r18, 0x06	; 6
   1ab8e:	ae 01       	movw	r20, r28
   1ab90:	4f 5f       	subi	r20, 0xFF	; 255
   1ab92:	5f 4f       	sbci	r21, 0xFF	; 255
   1ab94:	89 eb       	ldi	r24, 0xB9	; 185
   1ab96:	9f e0       	ldi	r25, 0x0F	; 15
   1ab98:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   1ab9c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   1ab9e:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   1aba0:	60 91 df 0f 	lds	r22, 0x0FDF	; 0x800fdf <my_lcd+0x26>
   1aba4:	70 91 e0 0f 	lds	r23, 0x0FE0	; 0x800fe0 <my_lcd+0x27>
   1aba8:	22 e0       	ldi	r18, 0x02	; 2
   1abaa:	ae 01       	movw	r20, r28
   1abac:	4f 5f       	subi	r20, 0xFF	; 255
   1abae:	5f 4f       	sbci	r21, 0xFF	; 255
   1abb0:	89 eb       	ldi	r24, 0xB9	; 185
   1abb2:	9f e0       	ldi	r25, 0x0F	; 15
   1abb4:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   1abb8:	80 91 d1 0f 	lds	r24, 0x0FD1	; 0x800fd1 <my_lcd+0x18>
   1abbc:	90 91 d2 0f 	lds	r25, 0x0FD2	; 0x800fd2 <my_lcd+0x19>
   1abc0:	01 97       	sbiw	r24, 0x01	; 1
   1abc2:	61 f4       	brne	.+24     	; 0x1abdc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   1abc4:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   1abc6:	21 e0       	ldi	r18, 0x01	; 1
   1abc8:	ae 01       	movw	r20, r28
   1abca:	4f 5f       	subi	r20, 0xFF	; 255
   1abcc:	5f 4f       	sbci	r21, 0xFF	; 255
   1abce:	61 e0       	ldi	r22, 0x01	; 1
   1abd0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   1abd2:	89 eb       	ldi	r24, 0xB9	; 185
   1abd4:	9f e0       	ldi	r25, 0x0F	; 15
   1abd6:	0e 94 40 8b 	call	0x11680	; 0x11680 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1abda:	a1 ce       	rjmp	.-702    	; 0x1a91e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x278>
   1abdc:	20 e0       	ldi	r18, 0x00	; 0
   1abde:	50 e0       	ldi	r21, 0x00	; 0
   1abe0:	40 e0       	ldi	r20, 0x00	; 0
   1abe2:	63 e1       	ldi	r22, 0x13	; 19
   1abe4:	70 e0       	ldi	r23, 0x00	; 0
   1abe6:	f5 cf       	rjmp	.-22     	; 0x1abd2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.65]+0x52c>

0001abe8 <LCDWIKI_KBV::reset() [clone .constprop.62]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.62():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   1abe8:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1abec:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1abf0:	80 81       	ld	r24, Z
   1abf2:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   1abf6:	89 2b       	or	r24, r25
   1abf8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   1abfa:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   1abfe:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1ac02:	80 81       	ld	r24, Z
   1ac04:	90 91 f2 0f 	lds	r25, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   1ac08:	89 2b       	or	r24, r25
   1ac0a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   1ac0c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ac10:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ac14:	80 81       	ld	r24, Z
   1ac16:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1ac1a:	89 2b       	or	r24, r25
   1ac1c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   1ac1e:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <my_lcd+0x3e>
   1ac22:	88 23       	and	r24, r24
   1ac24:	71 f0       	breq	.+28     	; 0x1ac42 <LCDWIKI_KBV::reset() [clone .constprop.62]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   1ac26:	60 e0       	ldi	r22, 0x00	; 0
   1ac28:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   1ac2c:	62 e0       	ldi	r22, 0x02	; 2
   1ac2e:	70 e0       	ldi	r23, 0x00	; 0
   1ac30:	80 e0       	ldi	r24, 0x00	; 0
   1ac32:	90 e0       	ldi	r25, 0x00	; 0
   1ac34:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   1ac38:	61 e0       	ldi	r22, 0x01	; 1
   1ac3a:	80 91 f7 0f 	lds	r24, 0x0FF7	; 0x800ff7 <my_lcd+0x3e>
   1ac3e:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1ac42:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1ac46:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1ac4a:	80 81       	ld	r24, Z
   1ac4c:	90 91 f3 0f 	lds	r25, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   1ac50:	89 23       	and	r24, r25
   1ac52:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1ac54:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1ac58:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1ac5c:	80 81       	ld	r24, Z
   1ac5e:	90 91 f4 0f 	lds	r25, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   1ac62:	89 23       	and	r24, r25
   1ac64:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   1ac66:	12 b8       	out	0x02, r1	; 2
   1ac68:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ac6c:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ac70:	80 81       	ld	r24, Z
   1ac72:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1ac76:	89 23       	and	r24, r25
   1ac78:	80 83       	st	Z, r24
   1ac7a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ac7e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ac82:	80 81       	ld	r24, Z
   1ac84:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1ac88:	89 2b       	or	r24, r25
   1ac8a:	80 83       	st	Z, r24
   1ac8c:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   1ac8e:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ac92:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ac96:	90 81       	ld	r25, Z
   1ac98:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1ac9c:	92 23       	and	r25, r18
   1ac9e:	90 83       	st	Z, r25
   1aca0:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1aca4:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1aca8:	90 81       	ld	r25, Z
   1acaa:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1acae:	92 2b       	or	r25, r18
   1acb0:	90 83       	st	Z, r25
   1acb2:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   1acb4:	61 f7       	brne	.-40     	; 0x1ac8e <LCDWIKI_KBV::reset() [clone .constprop.62]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   1acb6:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1acba:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1acbe:	80 81       	ld	r24, Z
   1acc0:	90 91 ef 0f 	lds	r25, 0x0FEF	; 0x800fef <my_lcd+0x36>
   1acc4:	89 2b       	or	r24, r25
   1acc6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   1acc8:	08 95       	ret

0001acca <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.60():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   1acca:	cf 93       	push	r28
   1accc:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   1acce:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1acd2:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1acd6:	90 81       	ld	r25, Z
   1acd8:	20 91 f3 0f 	lds	r18, 0x0FF3	; 0x800ff3 <my_lcd+0x3a>
   1acdc:	92 23       	and	r25, r18
   1acde:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   1ace0:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1ace4:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1ace8:	90 81       	ld	r25, Z
   1acea:	20 91 f4 0f 	lds	r18, 0x0FF4	; 0x800ff4 <my_lcd+0x3b>
   1acee:	92 23       	and	r25, r18
   1acf0:	90 83       	st	Z, r25
   1acf2:	12 b8       	out	0x02, r1	; 2
   1acf4:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1acf8:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1acfc:	90 81       	ld	r25, Z
   1acfe:	20 91 f5 0f 	lds	r18, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1ad02:	92 23       	and	r25, r18
   1ad04:	90 83       	st	Z, r25
   1ad06:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ad0a:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ad0e:	90 81       	ld	r25, Z
   1ad10:	20 91 f1 0f 	lds	r18, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1ad14:	92 2b       	or	r25, r18
   1ad16:	90 83       	st	Z, r25
   1ad18:	82 b9       	out	0x02, r24	; 2
   1ad1a:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ad1e:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ad22:	80 81       	ld	r24, Z
   1ad24:	90 91 f5 0f 	lds	r25, 0x0FF5	; 0x800ff5 <my_lcd+0x3c>
   1ad28:	89 23       	and	r24, r25
   1ad2a:	80 83       	st	Z, r24
   1ad2c:	e0 91 eb 0f 	lds	r30, 0x0FEB	; 0x800feb <my_lcd+0x32>
   1ad30:	f0 91 ec 0f 	lds	r31, 0x0FEC	; 0x800fec <my_lcd+0x33>
   1ad34:	80 81       	ld	r24, Z
   1ad36:	90 91 f1 0f 	lds	r25, 0x0FF1	; 0x800ff1 <my_lcd+0x38>
   1ad3a:	89 2b       	or	r24, r25
   1ad3c:	80 83       	st	Z, r24
   1ad3e:	e0 91 e9 0f 	lds	r30, 0x0FE9	; 0x800fe9 <my_lcd+0x30>
   1ad42:	f0 91 ea 0f 	lds	r31, 0x0FEA	; 0x800fea <my_lcd+0x31>
   1ad46:	80 81       	ld	r24, Z
   1ad48:	90 91 f0 0f 	lds	r25, 0x0FF0	; 0x800ff0 <my_lcd+0x37>
   1ad4c:	89 2b       	or	r24, r25
   1ad4e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   1ad50:	81 b1       	in	r24, 0x01	; 1
   1ad52:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1ad54:	61 e0       	ldi	r22, 0x01	; 1
   1ad56:	70 e0       	ldi	r23, 0x00	; 0
   1ad58:	80 e0       	ldi	r24, 0x00	; 0
   1ad5a:	90 e0       	ldi	r25, 0x00	; 0
   1ad5c:	0e 94 de 62 	call	0xc5bc	; 0xc5bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   1ad60:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   1ad64:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1ad68:	80 81       	ld	r24, Z
   1ad6a:	90 91 f6 0f 	lds	r25, 0x0FF6	; 0x800ff6 <my_lcd+0x3d>
   1ad6e:	89 23       	and	r24, r25
   1ad70:	80 83       	st	Z, r24
   1ad72:	20 b1       	in	r18, 0x00	; 0
   1ad74:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   1ad78:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1ad7c:	90 81       	ld	r25, Z
   1ad7e:	80 91 f2 0f 	lds	r24, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   1ad82:	98 2b       	or	r25, r24
   1ad84:	90 83       	st	Z, r25
   1ad86:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   1ad8a:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1ad8e:	90 81       	ld	r25, Z
   1ad90:	80 91 f6 0f 	lds	r24, 0x0FF6	; 0x800ff6 <my_lcd+0x3d>
   1ad94:	98 23       	and	r25, r24
   1ad96:	90 83       	st	Z, r25
   1ad98:	80 b1       	in	r24, 0x00	; 0
   1ad9a:	e0 91 ed 0f 	lds	r30, 0x0FED	; 0x800fed <my_lcd+0x34>
   1ad9e:	f0 91 ee 0f 	lds	r31, 0x0FEE	; 0x800fee <my_lcd+0x35>
   1ada2:	90 81       	ld	r25, Z
   1ada4:	30 91 f2 0f 	lds	r19, 0x0FF2	; 0x800ff2 <my_lcd+0x39>
   1ada8:	93 2b       	or	r25, r19
   1adaa:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   1adac:	c1 30       	cpi	r28, 0x01	; 1
   1adae:	79 f0       	breq	.+30     	; 0x1adce <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   1adb0:	e0 91 e7 0f 	lds	r30, 0x0FE7	; 0x800fe7 <my_lcd+0x2e>
   1adb4:	f0 91 e8 0f 	lds	r31, 0x0FE8	; 0x800fe8 <my_lcd+0x2f>
   1adb8:	90 81       	ld	r25, Z
   1adba:	30 91 ef 0f 	lds	r19, 0x0FEF	; 0x800fef <my_lcd+0x36>
   1adbe:	93 2b       	or	r25, r19
   1adc0:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   1adc2:	91 b1       	in	r25, 0x01	; 1
   1adc4:	9f ef       	ldi	r25, 0xFF	; 255
   1adc6:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   1adc8:	92 2f       	mov	r25, r18
   1adca:	cf 91       	pop	r28
   1adcc:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   1adce:	c0 e0       	ldi	r28, 0x00	; 0
   1add0:	c7 cf       	rjmp	.-114    	; 0x1ad60 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.60]+0x96>

0001add2 <TwoWire::begin() [clone .constprop.54]>:
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   1add2:	10 92 04 0d 	sts	0x0D04, r1	; 0x800d04 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1add6:	10 92 03 0d 	sts	0x0D03, r1	; 0x800d03 <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   1adda:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   1adde:	10 92 1a 0d 	sts	0x0D1A, r1	; 0x800d1a <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   1ade2:	10 92 64 0d 	sts	0x0D64, r1	; 0x800d64 <twi_state.lto_priv.272>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1ade6:	81 e0       	ldi	r24, 0x01	; 1
   1ade8:	80 93 63 0d 	sts	0x0D63, r24	; 0x800d63 <twi_sendStop.lto_priv.270>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   1adec:	10 92 5e 0d 	sts	0x0D5E, r1	; 0x800d5e <twi_inRepStart.lto_priv.271>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   1adf0:	61 e0       	ldi	r22, 0x01	; 1
   1adf2:	83 e1       	ldi	r24, 0x13	; 19
   1adf4:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   1adf8:	61 e0       	ldi	r22, 0x01	; 1
   1adfa:	82 e1       	ldi	r24, 0x12	; 18
   1adfc:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   1ae00:	e9 eb       	ldi	r30, 0xB9	; 185
   1ae02:	f0 e0       	ldi	r31, 0x00	; 0
   1ae04:	80 81       	ld	r24, Z
   1ae06:	8e 7f       	andi	r24, 0xFE	; 254
   1ae08:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   1ae0a:	80 81       	ld	r24, Z
   1ae0c:	8d 7f       	andi	r24, 0xFD	; 253
   1ae0e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   1ae10:	88 e4       	ldi	r24, 0x48	; 72
   1ae12:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   1ae16:	85 e4       	ldi	r24, 0x45	; 69
   1ae18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   1ae1c:	8c e2       	ldi	r24, 0x2C	; 44
   1ae1e:	98 e4       	ldi	r25, 0x48	; 72
   1ae20:	90 93 b3 0c 	sts	0x0CB3, r25	; 0x800cb3 <twi_onSlaveTransmit.lto_priv.275+0x1>
   1ae24:	80 93 b2 0c 	sts	0x0CB2, r24	; 0x800cb2 <twi_onSlaveTransmit.lto_priv.275>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   1ae28:	8d e2       	ldi	r24, 0x2D	; 45
   1ae2a:	98 e4       	ldi	r25, 0x48	; 72
   1ae2c:	90 93 b1 0c 	sts	0x0CB1, r25	; 0x800cb1 <twi_onSlaveReceive.lto_priv.274+0x1>
   1ae30:	80 93 b0 0c 	sts	0x0CB0, r24	; 0x800cb0 <twi_onSlaveReceive.lto_priv.274>
_ZN7TwoWire5beginEv.constprop.54():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   1ae34:	08 95       	ret

0001ae36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:183
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   1ae36:	bf 92       	push	r11
   1ae38:	cf 92       	push	r12
   1ae3a:	df 92       	push	r13
   1ae3c:	ef 92       	push	r14
   1ae3e:	ff 92       	push	r15
   1ae40:	0f 93       	push	r16
   1ae42:	1f 93       	push	r17
   1ae44:	cf 93       	push	r28
   1ae46:	df 93       	push	r29
   1ae48:	00 d0       	rcall	.+0      	; 0x1ae4a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x14>
   1ae4a:	00 d0       	rcall	.+0      	; 0x1ae4c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x16>
   1ae4c:	00 d0       	rcall	.+0      	; 0x1ae4e <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x18>
   1ae4e:	1f 92       	push	r1
   1ae50:	cd b7       	in	r28, 0x3d	; 61
   1ae52:	de b7       	in	r29, 0x3e	; 62
   1ae54:	b8 2e       	mov	r11, r24
   1ae56:	8e 01       	movw	r16, r28
   1ae58:	0f 5f       	subi	r16, 0xFF	; 255
   1ae5a:	1f 4f       	sbci	r17, 0xFF	; 255
   1ae5c:	7e 01       	movw	r14, r28
   1ae5e:	8b e0       	ldi	r24, 0x0B	; 11
   1ae60:	e8 0e       	add	r14, r24
   1ae62:	f1 1c       	adc	r15, r1
   1ae64:	68 01       	movw	r12, r16
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:153

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   1ae66:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   1ae6a:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   1ae6e:	90 81       	ld	r25, Z
   1ae70:	80 91 b3 0f 	lds	r24, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   1ae74:	80 95       	com	r24
   1ae76:	89 23       	and	r24, r25
   1ae78:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:154
	TCLK_LOW;           
   1ae7a:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1ae7e:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1ae82:	90 81       	ld	r25, Z
   1ae84:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1ae88:	80 95       	com	r24
   1ae8a:	89 23       	and	r24, r25
   1ae8c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:155
	TDIN_LOW;
   1ae8e:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   1ae92:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   1ae96:	90 81       	ld	r25, Z
   1ae98:	80 91 b6 0f 	lds	r24, 0x0FB6	; 0x800fb6 <my_touch+0x20>
   1ae9c:	80 95       	com	r24
   1ae9e:	89 23       	and	r24, r25
   1aea0:	80 83       	st	Z, r24
   1aea2:	28 e0       	ldi	r18, 0x08	; 8
   1aea4:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:130
}


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   1aea6:	90 e8       	ldi	r25, 0x80	; 128
   1aea8:	e0 91 ad 0f 	lds	r30, 0x0FAD	; 0x800fad <my_touch+0x17>
   1aeac:	f0 91 ae 0f 	lds	r31, 0x0FAE	; 0x800fae <my_touch+0x18>
   1aeb0:	80 91 b6 0f 	lds	r24, 0x0FB6	; 0x800fb6 <my_touch+0x20>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:133
	while(val)
	{
		if(data&val)
   1aeb4:	4b 2d       	mov	r20, r11
   1aeb6:	49 23       	and	r20, r25
   1aeb8:	09 f4       	brne	.+2      	; 0x1aebc <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x86>
   1aeba:	af c0       	rjmp	.+350    	; 0x1b01a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:135
		{
			TDIN_HIGH; 
   1aebc:	40 81       	ld	r20, Z
   1aebe:	84 2b       	or	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		}
		else
		{
			TDIN_LOW;
   1aec0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:141
		}
		TCLK_LOW;
   1aec2:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1aec6:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1aeca:	40 81       	ld	r20, Z
   1aecc:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1aed0:	80 95       	com	r24
   1aed2:	84 23       	and	r24, r20
   1aed4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:143
		//delay_hus(30);
		TCLK_HIGH;
   1aed6:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1aeda:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1aede:	80 81       	ld	r24, Z
   1aee0:	40 91 b4 0f 	lds	r20, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1aee4:	84 2b       	or	r24, r20
   1aee6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:145
		//delay_hus(30);
		val >>= 1;
   1aee8:	96 95       	lsr	r25
   1aeea:	21 50       	subi	r18, 0x01	; 1
   1aeec:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131


void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   1aeee:	e1 f6       	brne	.-72     	; 0x1aea8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x72>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:158
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_hus(6);              
	TCLK_LOW; 
   1aef0:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1aef4:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1aef8:	90 81       	ld	r25, Z
   1aefa:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1aefe:	80 95       	com	r24
   1af00:	89 23       	and	r24, r25
   1af02:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:159
	delay_hus(1); 
   1af04:	61 e0       	ldi	r22, 0x01	; 1
   1af06:	70 e0       	ldi	r23, 0x00	; 0
   1af08:	80 e0       	ldi	r24, 0x00	; 0
   1af0a:	90 e0       	ldi	r25, 0x00	; 0
   1af0c:	0e 94 2e 8b 	call	0x1165c	; 0x1165c <delay_hus(unsigned long)>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:160
	TCLK_HIGH;
   1af10:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1af14:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1af18:	80 81       	ld	r24, Z
   1af1a:	90 91 b4 0f 	lds	r25, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1af1e:	89 2b       	or	r24, r25
   1af20:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:161
	TCLK_LOW;
   1af22:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1af26:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1af2a:	90 81       	ld	r25, Z
   1af2c:	80 91 b4 0f 	lds	r24, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1af30:	80 95       	com	r24
   1af32:	89 23       	and	r24, r25
   1af34:	80 83       	st	Z, r24
   1af36:	30 e1       	ldi	r19, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1af38:	90 e0       	ldi	r25, 0x00	; 0
   1af3a:	80 e0       	ldi	r24, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:164
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   1af3c:	88 0f       	add	r24, r24
   1af3e:	99 1f       	adc	r25, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:165
	    TCLK_LOW;	    
   1af40:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1af44:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1af48:	40 81       	ld	r20, Z
   1af4a:	20 91 b4 0f 	lds	r18, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1af4e:	20 95       	com	r18
   1af50:	24 23       	and	r18, r20
   1af52:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:166
	    TCLK_HIGH;
   1af54:	e0 91 a9 0f 	lds	r30, 0x0FA9	; 0x800fa9 <my_touch+0x13>
   1af58:	f0 91 aa 0f 	lds	r31, 0x0FAA	; 0x800faa <my_touch+0x14>
   1af5c:	20 81       	ld	r18, Z
   1af5e:	40 91 b4 0f 	lds	r20, 0x0FB4	; 0x800fb4 <my_touch+0x1e>
   1af62:	24 2b       	or	r18, r20
   1af64:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:167
	    if(TDOUT_STATE)
   1af66:	e0 91 ab 0f 	lds	r30, 0x0FAB	; 0x800fab <my_touch+0x15>
   1af6a:	f0 91 ac 0f 	lds	r31, 0x0FAC	; 0x800fac <my_touch+0x16>
   1af6e:	20 81       	ld	r18, Z
   1af70:	40 91 b5 0f 	lds	r20, 0x0FB5	; 0x800fb5 <my_touch+0x1f>
   1af74:	24 23       	and	r18, r20
   1af76:	09 f0       	breq	.+2      	; 0x1af7a <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x144>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:169
	    {
	         num += 1;                  
   1af78:	01 96       	adiw	r24, 0x01	; 1
   1af7a:	31 50       	subi	r19, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:162
	//delay_hus(6);              
	TCLK_LOW; 
	delay_hus(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   1af7c:	f9 f6       	brne	.-66     	; 0x1af3c <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x106>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:177
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
       TCS_HIGH;   
   1af7e:	e0 91 a7 0f 	lds	r30, 0x0FA7	; 0x800fa7 <my_touch+0x11>
   1af82:	f0 91 a8 0f 	lds	r31, 0x0FA8	; 0x800fa8 <my_touch+0x12>
   1af86:	20 81       	ld	r18, Z
   1af88:	30 91 b3 0f 	lds	r19, 0x0FB3	; 0x800fb3 <my_touch+0x1d>
   1af8c:	23 2b       	or	r18, r19
   1af8e:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:176
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   1af90:	24 e0       	ldi	r18, 0x04	; 4
   1af92:	96 95       	lsr	r25
   1af94:	87 95       	ror	r24
   1af96:	2a 95       	dec	r18
   1af98:	e1 f7       	brne	.-8      	; 0x1af92 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x15c>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.48():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:191
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   1af9a:	d6 01       	movw	r26, r12
   1af9c:	8d 93       	st	X+, r24
   1af9e:	9d 93       	st	X+, r25
   1afa0:	6d 01       	movw	r12, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:189
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   1afa2:	ae 15       	cp	r26, r14
   1afa4:	bf 05       	cpc	r27, r15
   1afa6:	09 f0       	breq	.+2      	; 0x1afaa <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x174>
   1afa8:	5e cf       	rjmp	.-324    	; 0x1ae66 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x30>
   1afaa:	c8 01       	movw	r24, r16
   1afac:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:151
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   1afae:	f8 01       	movw	r30, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:197
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   1afb0:	d8 01       	movw	r26, r16
   1afb2:	2d 91       	ld	r18, X+
   1afb4:	3c 91       	ld	r19, X
   1afb6:	11 97       	sbiw	r26, 0x01	; 1
   1afb8:	42 81       	ldd	r20, Z+2	; 0x02
   1afba:	53 81       	ldd	r21, Z+3	; 0x03
   1afbc:	42 17       	cp	r20, r18
   1afbe:	53 07       	cpc	r21, r19
   1afc0:	20 f4       	brcc	.+8      	; 0x1afca <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x194>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:200
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   1afc2:	4d 93       	st	X+, r20
   1afc4:	5c 93       	st	X, r21
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
             	buf[j]=temp;
   1afc6:	33 83       	std	Z+3, r19	; 0x03
   1afc8:	22 83       	std	Z+2, r18	; 0x02
   1afca:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:195
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   1afcc:	8e 17       	cp	r24, r30
   1afce:	9f 07       	cpc	r25, r31
   1afd0:	79 f7       	brne	.-34     	; 0x1afb0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x17a>
   1afd2:	0e 5f       	subi	r16, 0xFE	; 254
   1afd4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:193
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   1afd6:	08 17       	cp	r16, r24
   1afd8:	19 07       	cpc	r17, r25
   1afda:	49 f7       	brne	.-46     	; 0x1afae <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x178>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:207
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   1afdc:	8b 81       	ldd	r24, Y+3	; 0x03
   1afde:	9c 81       	ldd	r25, Y+4	; 0x04
   1afe0:	2d 81       	ldd	r18, Y+5	; 0x05
   1afe2:	3e 81       	ldd	r19, Y+6	; 0x06
   1afe4:	82 0f       	add	r24, r18
   1afe6:	93 1f       	adc	r25, r19
   1afe8:	2f 81       	ldd	r18, Y+7	; 0x07
   1afea:	38 85       	ldd	r19, Y+8	; 0x08
   1afec:	82 0f       	add	r24, r18
   1afee:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:209
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   1aff0:	63 e0       	ldi	r22, 0x03	; 3
   1aff2:	70 e0       	ldi	r23, 0x00	; 0
   1aff4:	0e 94 88 f8 	call	0x1f110	; 0x1f110 <__udivmodhi4>
   1aff8:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:211
	return temp;   
} 
   1affa:	2a 96       	adiw	r28, 0x0a	; 10
   1affc:	0f b6       	in	r0, 0x3f	; 63
   1affe:	f8 94       	cli
   1b000:	de bf       	out	0x3e, r29	; 62
   1b002:	0f be       	out	0x3f, r0	; 63
   1b004:	cd bf       	out	0x3d, r28	; 61
   1b006:	df 91       	pop	r29
   1b008:	cf 91       	pop	r28
   1b00a:	1f 91       	pop	r17
   1b00c:	0f 91       	pop	r16
   1b00e:	ff 90       	pop	r15
   1b010:	ef 90       	pop	r14
   1b012:	df 90       	pop	r13
   1b014:	cf 90       	pop	r12
   1b016:	bf 90       	pop	r11
   1b018:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:139
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   1b01a:	40 81       	ld	r20, Z
   1b01c:	80 95       	com	r24
   1b01e:	84 23       	and	r24, r20
   1b020:	4f cf       	rjmp	.-354    	; 0x1aec0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]+0x8a>

0001b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>:
_ZN4RF2419print_byte_registerEPKchh.constprop.38():
/home/saric/Arduino/libraries/RF24/RF24.cpp:395
          );
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
   1b022:	ff 92       	push	r15
   1b024:	0f 93       	push	r16
   1b026:	1f 93       	push	r17
   1b028:	cf 93       	push	r28
   1b02a:	df 93       	push	r29
   1b02c:	c6 2f       	mov	r28, r22
   1b02e:	d4 2f       	mov	r29, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:402
  //char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  //printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   1b030:	9f 93       	push	r25
   1b032:	8f 93       	push	r24
   1b034:	82 e5       	ldi	r24, 0x52	; 82
   1b036:	98 e8       	ldi	r25, 0x88	; 136
   1b038:	9f 93       	push	r25
   1b03a:	8f 93       	push	r24
   1b03c:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b040:	dc 0f       	add	r29, r28
   1b042:	0f 90       	pop	r0
   1b044:	0f 90       	pop	r0
   1b046:	0f 90       	pop	r0
   1b048:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
  #endif
  while (qty--)
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   1b04a:	0a e4       	ldi	r16, 0x4A	; 74
   1b04c:	18 e8       	ldi	r17, 0x88	; 136
/home/saric/Arduino/libraries/RF24/RF24.cpp:404
  #if defined (RF24_LINUX)
    printf("%s\t =", name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1b04e:	cd 17       	cp	r28, r29
   1b050:	91 f0       	breq	.+36     	; 0x1b076 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x54>
/home/saric/Arduino/libraries/RF24/RF24.cpp:405
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
   1b052:	ff 24       	eor	r15, r15
   1b054:	f3 94       	inc	r15
   1b056:	fc 0e       	add	r15, r28
   1b058:	8c 2f       	mov	r24, r28
   1b05a:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   1b05e:	1f 92       	push	r1
   1b060:	8f 93       	push	r24
   1b062:	1f 93       	push	r17
   1b064:	0f 93       	push	r16
   1b066:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b06a:	0f 90       	pop	r0
   1b06c:	0f 90       	pop	r0
   1b06e:	0f 90       	pop	r0
   1b070:	0f 90       	pop	r0
   1b072:	cf 2d       	mov	r28, r15
   1b074:	ec cf       	rjmp	.-40     	; 0x1b04e <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]+0x2c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:406
  printf_P(PSTR("\r\n"));
   1b076:	87 e4       	ldi	r24, 0x47	; 71
   1b078:	98 e8       	ldi	r25, 0x88	; 136
   1b07a:	9f 93       	push	r25
   1b07c:	8f 93       	push	r24
   1b07e:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b082:	0f 90       	pop	r0
   1b084:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:407
}
   1b086:	df 91       	pop	r29
   1b088:	cf 91       	pop	r28
   1b08a:	1f 91       	pop	r17
   1b08c:	0f 91       	pop	r16
   1b08e:	ff 90       	pop	r15
   1b090:	08 95       	ret

0001b092 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>:
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:411

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
   1b092:	2f 92       	push	r2
   1b094:	3f 92       	push	r3
   1b096:	4f 92       	push	r4
   1b098:	5f 92       	push	r5
   1b09a:	6f 92       	push	r6
   1b09c:	7f 92       	push	r7
   1b09e:	8f 92       	push	r8
   1b0a0:	9f 92       	push	r9
   1b0a2:	af 92       	push	r10
   1b0a4:	bf 92       	push	r11
   1b0a6:	cf 92       	push	r12
   1b0a8:	df 92       	push	r13
   1b0aa:	ef 92       	push	r14
   1b0ac:	ff 92       	push	r15
   1b0ae:	0f 93       	push	r16
   1b0b0:	1f 93       	push	r17
   1b0b2:	cf 93       	push	r28
   1b0b4:	df 93       	push	r29
   1b0b6:	1f 92       	push	r1
   1b0b8:	cd b7       	in	r28, 0x3d	; 61
   1b0ba:	de b7       	in	r29, 0x3e	; 62
   1b0bc:	96 2e       	mov	r9, r22
   1b0be:	34 2e       	mov	r3, r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
}
   1b0c0:	4d b6       	in	r4, 0x3d	; 61
   1b0c2:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:417
{

  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
   1b0c4:	9f 93       	push	r25
   1b0c6:	8f 93       	push	r24
   1b0c8:	81 e4       	ldi	r24, 0x41	; 65
   1b0ca:	98 e8       	ldi	r25, 0x88	; 136
   1b0cc:	9f 93       	push	r25
   1b0ce:	8f 93       	push	r24
   1b0d0:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b0d4:	39 0c       	add	r3, r9
   1b0d6:	0f 90       	pop	r0
   1b0d8:	0f 90       	pop	r0
   1b0da:	0f 90       	pop	r0
   1b0dc:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1b0de:	8d e3       	ldi	r24, 0x3D	; 61
   1b0e0:	c8 2e       	mov	r12, r24
   1b0e2:	88 e8       	ldi	r24, 0x88	; 136
   1b0e4:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
   1b0e6:	98 e3       	ldi	r25, 0x38	; 56
   1b0e8:	a9 2e       	mov	r10, r25
   1b0ea:	98 e8       	ldi	r25, 0x88	; 136
   1b0ec:	b9 2e       	mov	r11, r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:419
  #if defined (RF24_LINUX)
    printf("%s\t =",name);
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
   1b0ee:	93 14       	cp	r9, r3
   1b0f0:	09 f4       	brne	.+2      	; 0x1b0f4 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x62>
   1b0f2:	4c c0       	rjmp	.+152    	; 0x1b18c <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xfa>
/home/saric/Arduino/libraries/RF24/RF24.cpp:428

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }
   1b0f4:	6d b6       	in	r6, 0x3d	; 61
   1b0f6:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/RF24/RF24.cpp:421
  #else
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
   1b0f8:	20 90 1f 10 	lds	r2, 0x101F	; 0x80101f <radio+0xe>
   1b0fc:	02 2d       	mov	r16, r2
   1b0fe:	10 e0       	ldi	r17, 0x00	; 0
   1b100:	8d b7       	in	r24, 0x3d	; 61
   1b102:	9e b7       	in	r25, 0x3e	; 62
   1b104:	80 1b       	sub	r24, r16
   1b106:	91 0b       	sbc	r25, r17
   1b108:	0f b6       	in	r0, 0x3f	; 63
   1b10a:	f8 94       	cli
   1b10c:	9e bf       	out	0x3e, r25	; 62
   1b10e:	0f be       	out	0x3f, r0	; 63
   1b110:	8d bf       	out	0x3d, r24	; 61
   1b112:	ed b7       	in	r30, 0x3d	; 61
   1b114:	fe b7       	in	r31, 0x3e	; 62
   1b116:	31 96       	adiw	r30, 0x01	; 1
   1b118:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    read_register(reg++,buffer,sizeof buffer);
   1b11a:	f1 e0       	ldi	r31, 0x01	; 1
   1b11c:	f9 0d       	add	r31, r9
   1b11e:	f9 83       	std	Y+1, r31	; 0x01
beginTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:89

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
    #endif
    csn(LOW);
   1b120:	80 e0       	ldi	r24, 0x00	; 0
   1b122:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
read_register():
/home/saric/Arduino/libraries/RF24/RF24.cpp:128
  endTransaction(); //unlocks mutex and setting csn high

#else

  beginTransaction();
  status = _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
   1b126:	89 2d       	mov	r24, r9
   1b128:	8f 71       	andi	r24, 0x1F	; 31
   1b12a:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1b12e:	47 01       	movw	r8, r14
/home/saric/Arduino/libraries/RF24/RF24.cpp:129
  while ( len-- ){
   1b130:	2a 94       	dec	r2
   1b132:	8f ef       	ldi	r24, 0xFF	; 255
   1b134:	28 16       	cp	r2, r24
   1b136:	31 f0       	breq	.+12     	; 0x1b144 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xb2>
/home/saric/Arduino/libraries/RF24/RF24.cpp:130
    *buf++ = _SPI.transfer(0xff);
   1b138:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1b13c:	f4 01       	movw	r30, r8
   1b13e:	81 93       	st	Z+, r24
   1b140:	4f 01       	movw	r8, r30
   1b142:	f6 cf       	rjmp	.-20     	; 0x1b130 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x9e>
endTransaction():
/home/saric/Arduino/libraries/RF24/RF24.cpp:95
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
   1b144:	81 e0       	ldi	r24, 0x01	; 1
   1b146:	0e 94 48 d0 	call	0x1a090	; 0x1a090 <RF24::csn(bool) [clone .constprop.111]>
_ZN4RF2422print_address_registerEPKchh.constprop.36():
/home/saric/Arduino/libraries/RF24/RF24.cpp:424
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
   1b14a:	df 92       	push	r13
   1b14c:	cf 92       	push	r12
   1b14e:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:425
    uint8_t* bufptr = buffer + sizeof buffer;
   1b152:	0e 0d       	add	r16, r14
   1b154:	1f 1d       	adc	r17, r15
   1b156:	0f 90       	pop	r0
   1b158:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:426
    while( --bufptr >= buffer )
   1b15a:	01 50       	subi	r16, 0x01	; 1
   1b15c:	11 09       	sbc	r17, r1
   1b15e:	0e 15       	cp	r16, r14
   1b160:	1f 05       	cpc	r17, r15
   1b162:	68 f0       	brcs	.+26     	; 0x1b17e <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xec>
/home/saric/Arduino/libraries/RF24/RF24.cpp:427
      printf_P(PSTR("%02x"),*bufptr);
   1b164:	f8 01       	movw	r30, r16
   1b166:	80 81       	ld	r24, Z
   1b168:	1f 92       	push	r1
   1b16a:	8f 93       	push	r24
   1b16c:	bf 92       	push	r11
   1b16e:	af 92       	push	r10
   1b170:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b174:	0f 90       	pop	r0
   1b176:	0f 90       	pop	r0
   1b178:	0f 90       	pop	r0
   1b17a:	0f 90       	pop	r0
   1b17c:	ee cf       	rjmp	.-36     	; 0x1b15a <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0xc8>
   1b17e:	0f b6       	in	r0, 0x3f	; 63
   1b180:	f8 94       	cli
   1b182:	7e be       	out	0x3e, r7	; 62
   1b184:	0f be       	out	0x3f, r0	; 63
   1b186:	6d be       	out	0x3d, r6	; 61
/home/saric/Arduino/libraries/RF24/RF24.cpp:422
    printf_P(PSTR(PRIPSTR"\t ="),name);
  #endif
  while (qty--)
  {
    uint8_t buffer[addr_width];
    read_register(reg++,buffer,sizeof buffer);
   1b188:	99 80       	ldd	r9, Y+1	; 0x01
   1b18a:	b1 cf       	rjmp	.-158    	; 0x1b0ee <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]+0x5c>
/home/saric/Arduino/libraries/RF24/RF24.cpp:430
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
   1b18c:	85 e3       	ldi	r24, 0x35	; 53
   1b18e:	98 e8       	ldi	r25, 0x88	; 136
   1b190:	9f 93       	push	r25
   1b192:	8f 93       	push	r24
   1b194:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1b198:	0f 90       	pop	r0
   1b19a:	0f 90       	pop	r0
/home/saric/Arduino/libraries/RF24/RF24.cpp:431
}
   1b19c:	0f b6       	in	r0, 0x3f	; 63
   1b19e:	f8 94       	cli
   1b1a0:	5e be       	out	0x3e, r5	; 62
   1b1a2:	0f be       	out	0x3f, r0	; 63
   1b1a4:	4d be       	out	0x3d, r4	; 61
   1b1a6:	0f 90       	pop	r0
   1b1a8:	df 91       	pop	r29
   1b1aa:	cf 91       	pop	r28
   1b1ac:	1f 91       	pop	r17
   1b1ae:	0f 91       	pop	r16
   1b1b0:	ff 90       	pop	r15
   1b1b2:	ef 90       	pop	r14
   1b1b4:	df 90       	pop	r13
   1b1b6:	cf 90       	pop	r12
   1b1b8:	bf 90       	pop	r11
   1b1ba:	af 90       	pop	r10
   1b1bc:	9f 90       	pop	r9
   1b1be:	8f 90       	pop	r8
   1b1c0:	7f 90       	pop	r7
   1b1c2:	6f 90       	pop	r6
   1b1c4:	5f 90       	pop	r5
   1b1c6:	4f 90       	pop	r4
   1b1c8:	3f 90       	pop	r3
   1b1ca:	2f 90       	pop	r2
   1b1cc:	08 95       	ret

0001b1ce <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   1b1ce:	af 92       	push	r10
   1b1d0:	bf 92       	push	r11
   1b1d2:	cf 92       	push	r12
   1b1d4:	df 92       	push	r13
   1b1d6:	ef 92       	push	r14
   1b1d8:	ff 92       	push	r15
   1b1da:	0f 93       	push	r16
   1b1dc:	1f 93       	push	r17
   1b1de:	cf 93       	push	r28
   1b1e0:	df 93       	push	r29
   1b1e2:	f8 2e       	mov	r15, r24
   1b1e4:	5b 01       	movw	r10, r22
   1b1e6:	6a 01       	movw	r12, r20
   1b1e8:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   1b1ea:	68 e2       	ldi	r22, 0x28	; 40
   1b1ec:	70 e0       	ldi	r23, 0x00	; 0
   1b1ee:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   1b1f2:	08 2f       	mov	r16, r24
   1b1f4:	10 e0       	ldi	r17, 0x00	; 0
   1b1f6:	10 2f       	mov	r17, r16
   1b1f8:	00 27       	eor	r16, r16
   1b1fa:	69 e2       	ldi	r22, 0x29	; 41
   1b1fc:	70 e0       	ldi	r23, 0x00	; 0
   1b1fe:	8f 2d       	mov	r24, r15
   1b200:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   1b204:	e8 01       	movw	r28, r16
   1b206:	c8 0f       	add	r28, r24
   1b208:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   1b20a:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <wiznet_SPI_settings>
   1b20e:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <wiznet_SPI_settings+0x1>
   1b212:	0e 94 68 81 	call	0x102d0	; 0x102d0 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1b216:	0e 94 5b 81 	call	0x102b6	; 0x102b6 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   1b21a:	8d 2f       	mov	r24, r29
   1b21c:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   1b220:	8c 2f       	mov	r24, r28
   1b222:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1b226:	8f 2d       	mov	r24, r15
   1b228:	82 95       	swap	r24
   1b22a:	88 0f       	add	r24, r24
   1b22c:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   1b22e:	88 5e       	subi	r24, 0xE8	; 232
   1b230:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1b234:	85 01       	movw	r16, r10
   1b236:	ac 0c       	add	r10, r12
   1b238:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   1b23a:	80 e0       	ldi	r24, 0x00	; 0
   1b23c:	0e 94 61 81 	call	0x102c2	; 0x102c2 <SPIClass::transfer(unsigned char)>
   1b240:	f8 01       	movw	r30, r16
   1b242:	81 93       	st	Z+, r24
   1b244:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   1b246:	ea 15       	cp	r30, r10
   1b248:	fb 05       	cpc	r31, r11
   1b24a:	b9 f7       	brne	.-18     	; 0x1b23a <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   1b24c:	0e 94 56 81 	call	0x102ac	; 0x102ac <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:158
    SPI.endTransaction();
   1b250:	0e 94 60 81 	call	0x102c0	; 0x102c0 <SPIClass::endTransaction()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   1b254:	e1 10       	cpse	r14, r1
   1b256:	18 c0       	rjmp	.+48     	; 0x1b288 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.31]+0xba>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   1b258:	cc 0d       	add	r28, r12
   1b25a:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1b25c:	4d 2f       	mov	r20, r29
   1b25e:	68 e2       	ldi	r22, 0x28	; 40
   1b260:	70 e0       	ldi	r23, 0x00	; 0
   1b262:	8f 2d       	mov	r24, r15
   1b264:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1b268:	4c 2f       	mov	r20, r28
   1b26a:	69 e2       	ldi	r22, 0x29	; 41
   1b26c:	70 e0       	ldi	r23, 0x00	; 0
   1b26e:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   1b270:	df 91       	pop	r29
   1b272:	cf 91       	pop	r28
   1b274:	1f 91       	pop	r17
   1b276:	0f 91       	pop	r16
   1b278:	ff 90       	pop	r15
   1b27a:	ef 90       	pop	r14
   1b27c:	df 90       	pop	r13
   1b27e:	cf 90       	pop	r12
   1b280:	bf 90       	pop	r11
   1b282:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   1b284:	0c 94 dd 81 	jmp	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.31():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   1b288:	df 91       	pop	r29
   1b28a:	cf 91       	pop	r28
   1b28c:	1f 91       	pop	r17
   1b28e:	0f 91       	pop	r16
   1b290:	ff 90       	pop	r15
   1b292:	ef 90       	pop	r14
   1b294:	df 90       	pop	r13
   1b296:	cf 90       	pop	r12
   1b298:	bf 90       	pop	r11
   1b29a:	af 90       	pop	r10
   1b29c:	08 95       	ret

0001b29e <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.30():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55
    } 
    while (val != val1);
    return val;
}

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   1b29e:	ff 92       	push	r15
   1b2a0:	0f 93       	push	r16
   1b2a2:	1f 93       	push	r17
   1b2a4:	cf 93       	push	r28
   1b2a6:	df 93       	push	r29
   1b2a8:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   1b2aa:	10 e0       	ldi	r17, 0x00	; 0
   1b2ac:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   1b2ae:	8f 2d       	mov	r24, r15
   1b2b0:	0e 94 50 82 	call	0x104a0	; 0x104a0 <W5500Class::readSnRX_RSR(unsigned char)>
   1b2b4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1b2b6:	89 2b       	or	r24, r25
   1b2b8:	21 f0       	breq	.+8      	; 0x1b2c2 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   1b2ba:	8f 2d       	mov	r24, r15
   1b2bc:	0e 94 50 82 	call	0x104a0	; 0x104a0 <W5500Class::readSnRX_RSR(unsigned char)>
   1b2c0:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   1b2c2:	c0 17       	cp	r28, r16
   1b2c4:	d1 07       	cpc	r29, r17
   1b2c6:	99 f7       	brne	.-26     	; 0x1b2ae <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.30]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   1b2c8:	ce 01       	movw	r24, r28
   1b2ca:	df 91       	pop	r29
   1b2cc:	cf 91       	pop	r28
   1b2ce:	1f 91       	pop	r17
   1b2d0:	0f 91       	pop	r16
   1b2d2:	ff 90       	pop	r15
   1b2d4:	08 95       	ret

0001b2d6 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.27]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   1b2d6:	bf 92       	push	r11
   1b2d8:	cf 92       	push	r12
   1b2da:	df 92       	push	r13
   1b2dc:	ef 92       	push	r14
   1b2de:	ff 92       	push	r15
   1b2e0:	0f 93       	push	r16
   1b2e2:	1f 93       	push	r17
   1b2e4:	cf 93       	push	r28
   1b2e6:	df 93       	push	r29
   1b2e8:	b8 2e       	mov	r11, r24
   1b2ea:	6b 01       	movw	r12, r22
   1b2ec:	7a 01       	movw	r14, r20
   1b2ee:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   1b2f0:	64 e2       	ldi	r22, 0x24	; 36
   1b2f2:	70 e0       	ldi	r23, 0x00	; 0
   1b2f4:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   1b2f8:	c8 2f       	mov	r28, r24
   1b2fa:	65 e2       	ldi	r22, 0x25	; 37
   1b2fc:	70 e0       	ldi	r23, 0x00	; 0
   1b2fe:	8b 2d       	mov	r24, r11
   1b300:	0e 94 47 82 	call	0x1048e	; 0x1048e <W5500Class::readSn(unsigned char, unsigned int)>
   1b304:	d0 e0       	ldi	r29, 0x00	; 0
   1b306:	dc 2f       	mov	r29, r28
   1b308:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   1b30a:	8c 0d       	add	r24, r12
   1b30c:	9d 2d       	mov	r25, r13
   1b30e:	91 1d       	adc	r25, r1
   1b310:	c8 0f       	add	r28, r24
   1b312:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   1b314:	6b 2d       	mov	r22, r11
   1b316:	62 95       	swap	r22
   1b318:	66 0f       	add	r22, r22
   1b31a:	60 7e       	andi	r22, 0xE0	; 224
   1b31c:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   1b31e:	98 01       	movw	r18, r16
   1b320:	a7 01       	movw	r20, r14
   1b322:	ce 01       	movw	r24, r28
   1b324:	0e 94 8a 81 	call	0x10314	; 0x10314 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   1b328:	c0 0f       	add	r28, r16
   1b32a:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1b32c:	4d 2f       	mov	r20, r29
   1b32e:	64 e2       	ldi	r22, 0x24	; 36
   1b330:	70 e0       	ldi	r23, 0x00	; 0
   1b332:	8b 2d       	mov	r24, r11
   1b334:	0e 94 dd 81 	call	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1b338:	4c 2f       	mov	r20, r28
   1b33a:	65 e2       	ldi	r22, 0x25	; 37
   1b33c:	70 e0       	ldi	r23, 0x00	; 0
   1b33e:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   1b340:	df 91       	pop	r29
   1b342:	cf 91       	pop	r28
   1b344:	1f 91       	pop	r17
   1b346:	0f 91       	pop	r16
   1b348:	ff 90       	pop	r15
   1b34a:	ef 90       	pop	r14
   1b34c:	df 90       	pop	r13
   1b34e:	cf 90       	pop	r12
   1b350:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1b352:	0c 94 dd 81 	jmp	0x103ba	; 0x103ba <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

0001b356 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1b356:	ff 92       	push	r15
   1b358:	0f 93       	push	r16
   1b35a:	1f 93       	push	r17
   1b35c:	cf 93       	push	r28
   1b35e:	df 93       	push	r29
   1b360:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   1b362:	10 e0       	ldi	r17, 0x00	; 0
   1b364:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1b366:	8f 2d       	mov	r24, r15
   1b368:	0e 94 68 82 	call	0x104d0	; 0x104d0 <W5500Class::readSnTX_FSR(unsigned char)>
   1b36c:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   1b36e:	89 2b       	or	r24, r25
   1b370:	21 f0       	breq	.+8      	; 0x1b37a <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   1b372:	8f 2d       	mov	r24, r15
   1b374:	0e 94 68 82 	call	0x104d0	; 0x104d0 <W5500Class::readSnTX_FSR(unsigned char)>
   1b378:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   1b37a:	c0 17       	cp	r28, r16
   1b37c:	d1 07       	cpc	r29, r17
   1b37e:	99 f7       	brne	.-26     	; 0x1b366 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.26]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   1b380:	ce 01       	movw	r24, r28
   1b382:	df 91       	pop	r29
   1b384:	cf 91       	pop	r28
   1b386:	1f 91       	pop	r17
   1b388:	0f 91       	pop	r16
   1b38a:	ff 90       	pop	r15
   1b38c:	08 95       	ret

0001b38e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
   1b38e:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
   1b390:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1b392:	a8 0f       	add	r26, r24
   1b394:	b9 2f       	mov	r27, r25
   1b396:	b1 1d       	adc	r27, r1
   1b398:	a3 5a       	subi	r26, 0xA3	; 163
   1b39a:	bf 4f       	sbci	r27, 0xFF	; 255
   1b39c:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
   1b39e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b3a0:	90 e0       	ldi	r25, 0x00	; 0
   1b3a2:	01 96       	adiw	r24, 0x01	; 1
   1b3a4:	8f 73       	andi	r24, 0x3F	; 63
   1b3a6:	99 27       	eor	r25, r25
   1b3a8:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
   1b3aa:	a6 89       	ldd	r26, Z+22	; 0x16
   1b3ac:	b7 89       	ldd	r27, Z+23	; 0x17
   1b3ae:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
   1b3b0:	a0 89       	ldd	r26, Z+16	; 0x10
   1b3b2:	b1 89       	ldd	r27, Z+17	; 0x11
   1b3b4:	8c 91       	ld	r24, X
   1b3b6:	80 64       	ori	r24, 0x40	; 64
   1b3b8:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
   1b3ba:	93 8d       	ldd	r25, Z+27	; 0x1b
   1b3bc:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b3be:	98 13       	cpse	r25, r24
   1b3c0:	06 c0       	rjmp	.+12     	; 0x1b3ce <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
   1b3c2:	02 88       	ldd	r0, Z+18	; 0x12
   1b3c4:	f3 89       	ldd	r31, Z+19	; 0x13
   1b3c6:	e0 2d       	mov	r30, r0
   1b3c8:	80 81       	ld	r24, Z
   1b3ca:	8f 7d       	andi	r24, 0xDF	; 223
   1b3cc:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
   1b3ce:	08 95       	ret

0001b3d0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
   1b3d0:	ef 92       	push	r14
   1b3d2:	ff 92       	push	r15
   1b3d4:	0f 93       	push	r16
   1b3d6:	1f 93       	push	r17
   1b3d8:	cf 93       	push	r28
   1b3da:	df 93       	push	r29
   1b3dc:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
   1b3de:	81 e0       	ldi	r24, 0x01	; 1
   1b3e0:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
   1b3e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1b3e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1b3e6:	98 13       	cpse	r25, r24
   1b3e8:	16 c0       	rjmp	.+44     	; 0x1b416 <HardwareSerial::write(unsigned char)+0x46>
   1b3ea:	e8 89       	ldd	r30, Y+16	; 0x10
   1b3ec:	f9 89       	ldd	r31, Y+17	; 0x11
   1b3ee:	80 81       	ld	r24, Z
   1b3f0:	85 ff       	sbrs	r24, 5
   1b3f2:	11 c0       	rjmp	.+34     	; 0x1b416 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
   1b3f4:	ee 89       	ldd	r30, Y+22	; 0x16
   1b3f6:	ff 89       	ldd	r31, Y+23	; 0x17
   1b3f8:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
   1b3fa:	e8 89       	ldd	r30, Y+16	; 0x10
   1b3fc:	f9 89       	ldd	r31, Y+17	; 0x11
   1b3fe:	80 81       	ld	r24, Z
   1b400:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
   1b402:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
   1b404:	81 e0       	ldi	r24, 0x01	; 1
   1b406:	90 e0       	ldi	r25, 0x00	; 0
   1b408:	df 91       	pop	r29
   1b40a:	cf 91       	pop	r28
   1b40c:	1f 91       	pop	r17
   1b40e:	0f 91       	pop	r16
   1b410:	ff 90       	pop	r15
   1b412:	ef 90       	pop	r14
   1b414:	08 95       	ret
   1b416:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
   1b418:	0b 8d       	ldd	r16, Y+27	; 0x1b
   1b41a:	10 e0       	ldi	r17, 0x00	; 0
   1b41c:	0f 5f       	subi	r16, 0xFF	; 255
   1b41e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b420:	0f 73       	andi	r16, 0x3F	; 63
   1b422:	11 27       	eor	r17, r17
   1b424:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
   1b426:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1b428:	8e 11       	cpse	r24, r14
   1b42a:	0c c0       	rjmp	.+24     	; 0x1b444 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
   1b42c:	0f b6       	in	r0, 0x3f	; 63
   1b42e:	07 fc       	sbrc	r0, 7
   1b430:	fa cf       	rjmp	.-12     	; 0x1b426 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
   1b432:	e8 89       	ldd	r30, Y+16	; 0x10
   1b434:	f9 89       	ldd	r31, Y+17	; 0x11
   1b436:	80 81       	ld	r24, Z
   1b438:	85 ff       	sbrs	r24, 5
   1b43a:	f5 cf       	rjmp	.-22     	; 0x1b426 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
   1b43c:	ce 01       	movw	r24, r28
   1b43e:	0e 94 c7 d9 	call	0x1b38e	; 0x1b38e <HardwareSerial::_tx_udr_empty_irq()>
   1b442:	f1 cf       	rjmp	.-30     	; 0x1b426 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
   1b444:	eb 8d       	ldd	r30, Y+27	; 0x1b
   1b446:	ec 0f       	add	r30, r28
   1b448:	fd 2f       	mov	r31, r29
   1b44a:	f1 1d       	adc	r31, r1
   1b44c:	e3 5a       	subi	r30, 0xA3	; 163
   1b44e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b450:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
   1b452:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
   1b454:	ea 89       	ldd	r30, Y+18	; 0x12
   1b456:	fb 89       	ldd	r31, Y+19	; 0x13
   1b458:	80 81       	ld	r24, Z
   1b45a:	80 62       	ori	r24, 0x20	; 32
   1b45c:	d2 cf       	rjmp	.-92     	; 0x1b402 <HardwareSerial::write(unsigned char)+0x32>

0001b45e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
   1b45e:	cf 93       	push	r28
   1b460:	df 93       	push	r29
   1b462:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
   1b464:	88 8d       	ldd	r24, Y+24	; 0x18
   1b466:	88 23       	and	r24, r24
   1b468:	b9 f0       	breq	.+46     	; 0x1b498 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
   1b46a:	aa 89       	ldd	r26, Y+18	; 0x12
   1b46c:	bb 89       	ldd	r27, Y+19	; 0x13
   1b46e:	e8 89       	ldd	r30, Y+16	; 0x10
   1b470:	f9 89       	ldd	r31, Y+17	; 0x11
   1b472:	8c 91       	ld	r24, X
   1b474:	85 fd       	sbrc	r24, 5
   1b476:	03 c0       	rjmp	.+6      	; 0x1b47e <HardwareSerial::flush()+0x20>
   1b478:	80 81       	ld	r24, Z
   1b47a:	86 fd       	sbrc	r24, 6
   1b47c:	0d c0       	rjmp	.+26     	; 0x1b498 <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
   1b47e:	0f b6       	in	r0, 0x3f	; 63
   1b480:	07 fc       	sbrc	r0, 7
   1b482:	f7 cf       	rjmp	.-18     	; 0x1b472 <HardwareSerial::flush()+0x14>
   1b484:	8c 91       	ld	r24, X
   1b486:	85 ff       	sbrs	r24, 5
   1b488:	f2 cf       	rjmp	.-28     	; 0x1b46e <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
   1b48a:	80 81       	ld	r24, Z
   1b48c:	85 ff       	sbrs	r24, 5
   1b48e:	ed cf       	rjmp	.-38     	; 0x1b46a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
   1b490:	ce 01       	movw	r24, r28
   1b492:	0e 94 c7 d9 	call	0x1b38e	; 0x1b38e <HardwareSerial::_tx_udr_empty_irq()>
   1b496:	e9 cf       	rjmp	.-46     	; 0x1b46a <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
   1b498:	df 91       	pop	r29
   1b49a:	cf 91       	pop	r28
   1b49c:	08 95       	ret

0001b49e <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]>:
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   1b49e:	1f 93       	push	r17
   1b4a0:	cf 93       	push	r28
   1b4a2:	df 93       	push	r29
   1b4a4:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1b4a6:	91 e2       	ldi	r25, 0x21	; 33
   1b4a8:	89 9f       	mul	r24, r25
   1b4aa:	e0 01       	movw	r28, r0
   1b4ac:	11 24       	eor	r1, r1
   1b4ae:	c8 5a       	subi	r28, 0xA8	; 168
   1b4b0:	de 4f       	sbci	r29, 0xFE	; 254
   1b4b2:	ce 01       	movw	r24, r28
   1b4b4:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1b4b8:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   1b4ba:	11 11       	cpse	r17, r1
   1b4bc:	07 c0       	rjmp	.+14     	; 0x1b4cc <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x2e>
   1b4be:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1b4c0:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   1b4c2:	df 91       	pop	r29
   1b4c4:	cf 91       	pop	r28
   1b4c6:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   1b4c8:	0c 94 1b 6a 	jmp	0xd436	; 0xd436 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.262]>
_Z28thermostat_ring_update_biteshhh.constprop.224():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   1b4cc:	61 60       	ori	r22, 0x01	; 1
   1b4ce:	f8 cf       	rjmp	.-16     	; 0x1b4c0 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.224]+0x22>

0001b4d0 <localtime>:
localtime():
   1b4d0:	6f e6       	ldi	r22, 0x6F	; 111
   1b4d2:	74 e1       	ldi	r23, 0x14	; 20
   1b4d4:	0e 94 6f da 	call	0x1b4de	; 0x1b4de <localtime_r>
   1b4d8:	8f e6       	ldi	r24, 0x6F	; 111
   1b4da:	94 e1       	ldi	r25, 0x14	; 20
   1b4dc:	08 95       	ret

0001b4de <localtime_r>:
localtime_r():
   1b4de:	cf 92       	push	r12
   1b4e0:	df 92       	push	r13
   1b4e2:	ef 92       	push	r14
   1b4e4:	ff 92       	push	r15
   1b4e6:	0f 93       	push	r16
   1b4e8:	1f 93       	push	r17
   1b4ea:	cf 93       	push	r28
   1b4ec:	df 93       	push	r29
   1b4ee:	00 d0       	rcall	.+0      	; 0x1b4f0 <localtime_r+0x12>
   1b4f0:	1f 92       	push	r1
   1b4f2:	cd b7       	in	r28, 0x3d	; 61
   1b4f4:	de b7       	in	r29, 0x3e	; 62
   1b4f6:	6c 01       	movw	r12, r24
   1b4f8:	7b 01       	movw	r14, r22
   1b4fa:	e0 91 85 14 	lds	r30, 0x1485	; 0x801485 <__dst_ptr>
   1b4fe:	f0 91 86 14 	lds	r31, 0x1486	; 0x801486 <__dst_ptr+0x1>
   1b502:	0f ef       	ldi	r16, 0xFF	; 255
   1b504:	1f ef       	ldi	r17, 0xFF	; 255
   1b506:	30 97       	sbiw	r30, 0x00	; 0
   1b508:	21 f0       	breq	.+8      	; 0x1b512 <localtime_r+0x34>
   1b50a:	6b e7       	ldi	r22, 0x7B	; 123
   1b50c:	74 e1       	ldi	r23, 0x14	; 20
   1b50e:	19 95       	eicall
   1b510:	8c 01       	movw	r16, r24
   1b512:	f6 01       	movw	r30, r12
   1b514:	80 81       	ld	r24, Z
   1b516:	91 81       	ldd	r25, Z+1	; 0x01
   1b518:	a2 81       	ldd	r26, Z+2	; 0x02
   1b51a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b51c:	40 91 7b 14 	lds	r20, 0x147B	; 0x80147b <__utc_offset>
   1b520:	50 91 7c 14 	lds	r21, 0x147C	; 0x80147c <__utc_offset+0x1>
   1b524:	60 91 7d 14 	lds	r22, 0x147D	; 0x80147d <__utc_offset+0x2>
   1b528:	70 91 7e 14 	lds	r23, 0x147E	; 0x80147e <__utc_offset+0x3>
   1b52c:	84 0f       	add	r24, r20
   1b52e:	95 1f       	adc	r25, r21
   1b530:	a6 1f       	adc	r26, r22
   1b532:	b7 1f       	adc	r27, r23
   1b534:	10 16       	cp	r1, r16
   1b536:	11 06       	cpc	r1, r17
   1b538:	cc f0       	brlt	.+50     	; 0x1b56c <localtime_r+0x8e>
   1b53a:	89 83       	std	Y+1, r24	; 0x01
   1b53c:	9a 83       	std	Y+2, r25	; 0x02
   1b53e:	ab 83       	std	Y+3, r26	; 0x03
   1b540:	bc 83       	std	Y+4, r27	; 0x04
   1b542:	b7 01       	movw	r22, r14
   1b544:	ce 01       	movw	r24, r28
   1b546:	01 96       	adiw	r24, 0x01	; 1
   1b548:	0e 94 c0 da 	call	0x1b580	; 0x1b580 <gmtime_r>
   1b54c:	f7 01       	movw	r30, r14
   1b54e:	13 87       	std	Z+11, r17	; 0x0b
   1b550:	02 87       	std	Z+10, r16	; 0x0a
   1b552:	0f 90       	pop	r0
   1b554:	0f 90       	pop	r0
   1b556:	0f 90       	pop	r0
   1b558:	0f 90       	pop	r0
   1b55a:	df 91       	pop	r29
   1b55c:	cf 91       	pop	r28
   1b55e:	1f 91       	pop	r17
   1b560:	0f 91       	pop	r16
   1b562:	ff 90       	pop	r15
   1b564:	ef 90       	pop	r14
   1b566:	df 90       	pop	r13
   1b568:	cf 90       	pop	r12
   1b56a:	08 95       	ret
   1b56c:	a8 01       	movw	r20, r16
   1b56e:	01 2e       	mov	r0, r17
   1b570:	00 0c       	add	r0, r0
   1b572:	66 0b       	sbc	r22, r22
   1b574:	77 0b       	sbc	r23, r23
   1b576:	84 0f       	add	r24, r20
   1b578:	95 1f       	adc	r25, r21
   1b57a:	a6 1f       	adc	r26, r22
   1b57c:	b7 1f       	adc	r27, r23
   1b57e:	dd cf       	rjmp	.-70     	; 0x1b53a <localtime_r+0x5c>

0001b580 <gmtime_r>:
gmtime_r():
   1b580:	cf 92       	push	r12
   1b582:	df 92       	push	r13
   1b584:	ef 92       	push	r14
   1b586:	ff 92       	push	r15
   1b588:	0f 93       	push	r16
   1b58a:	1f 93       	push	r17
   1b58c:	cf 93       	push	r28
   1b58e:	df 93       	push	r29
   1b590:	00 d0       	rcall	.+0      	; 0x1b592 <gmtime_r+0x12>
   1b592:	00 d0       	rcall	.+0      	; 0x1b594 <gmtime_r+0x14>
   1b594:	1f 92       	push	r1
   1b596:	1f 92       	push	r1
   1b598:	cd b7       	in	r28, 0x3d	; 61
   1b59a:	de b7       	in	r29, 0x3e	; 62
   1b59c:	8b 01       	movw	r16, r22
   1b59e:	fc 01       	movw	r30, r24
   1b5a0:	60 81       	ld	r22, Z
   1b5a2:	71 81       	ldd	r23, Z+1	; 0x01
   1b5a4:	82 81       	ldd	r24, Z+2	; 0x02
   1b5a6:	93 81       	ldd	r25, Z+3	; 0x03
   1b5a8:	20 e8       	ldi	r18, 0x80	; 128
   1b5aa:	31 e5       	ldi	r19, 0x51	; 81
   1b5ac:	41 e0       	ldi	r20, 0x01	; 1
   1b5ae:	50 e0       	ldi	r21, 0x00	; 0
   1b5b0:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   1b5b4:	69 01       	movw	r12, r18
   1b5b6:	7a 01       	movw	r14, r20
   1b5b8:	2c e3       	ldi	r18, 0x3C	; 60
   1b5ba:	30 e0       	ldi	r19, 0x00	; 0
   1b5bc:	40 e0       	ldi	r20, 0x00	; 0
   1b5be:	50 e0       	ldi	r21, 0x00	; 0
   1b5c0:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1b5c4:	29 83       	std	Y+1, r18	; 0x01
   1b5c6:	3a 83       	std	Y+2, r19	; 0x02
   1b5c8:	4b 83       	std	Y+3, r20	; 0x03
   1b5ca:	5c 83       	std	Y+4, r21	; 0x04
   1b5cc:	89 81       	ldd	r24, Y+1	; 0x01
   1b5ce:	9a 81       	ldd	r25, Y+2	; 0x02
   1b5d0:	ab 81       	ldd	r26, Y+3	; 0x03
   1b5d2:	bc 81       	ldd	r27, Y+4	; 0x04
   1b5d4:	f8 01       	movw	r30, r16
   1b5d6:	60 83       	st	Z, r22
   1b5d8:	6c e3       	ldi	r22, 0x3C	; 60
   1b5da:	70 e0       	ldi	r23, 0x00	; 0
   1b5dc:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b5e0:	dc 01       	movw	r26, r24
   1b5e2:	f8 01       	movw	r30, r16
   1b5e4:	a1 83       	std	Z+1, r26	; 0x01
   1b5e6:	62 83       	std	Z+2, r22	; 0x02
   1b5e8:	c6 01       	movw	r24, r12
   1b5ea:	06 96       	adiw	r24, 0x06	; 6
   1b5ec:	67 e0       	ldi	r22, 0x07	; 7
   1b5ee:	70 e0       	ldi	r23, 0x00	; 0
   1b5f0:	0e 94 88 f8 	call	0x1f110	; 0x1f110 <__udivmodhi4>
   1b5f4:	84 83       	std	Z+4, r24	; 0x04
   1b5f6:	2d ea       	ldi	r18, 0xAD	; 173
   1b5f8:	3e e8       	ldi	r19, 0x8E	; 142
   1b5fa:	40 e0       	ldi	r20, 0x00	; 0
   1b5fc:	50 e0       	ldi	r21, 0x00	; 0
   1b5fe:	c7 01       	movw	r24, r14
   1b600:	b6 01       	movw	r22, r12
   1b602:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1b606:	29 83       	std	Y+1, r18	; 0x01
   1b608:	3a 83       	std	Y+2, r19	; 0x02
   1b60a:	6d 83       	std	Y+5, r22	; 0x05
   1b60c:	7e 83       	std	Y+6, r23	; 0x06
   1b60e:	8f 83       	std	Y+7, r24	; 0x07
   1b610:	98 87       	std	Y+8, r25	; 0x08
   1b612:	89 81       	ldd	r24, Y+1	; 0x01
   1b614:	9a 81       	ldd	r25, Y+2	; 0x02
   1b616:	24 e6       	ldi	r18, 0x64	; 100
   1b618:	28 9f       	mul	r18, r24
   1b61a:	60 01       	movw	r12, r0
   1b61c:	29 9f       	mul	r18, r25
   1b61e:	d0 0c       	add	r13, r0
   1b620:	11 24       	eor	r1, r1
   1b622:	6d 81       	ldd	r22, Y+5	; 0x05
   1b624:	7e 81       	ldd	r23, Y+6	; 0x06
   1b626:	8f 81       	ldd	r24, Y+7	; 0x07
   1b628:	98 85       	ldd	r25, Y+8	; 0x08
   1b62a:	25 eb       	ldi	r18, 0xB5	; 181
   1b62c:	35 e0       	ldi	r19, 0x05	; 5
   1b62e:	40 e0       	ldi	r20, 0x00	; 0
   1b630:	50 e0       	ldi	r21, 0x00	; 0
   1b632:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1b636:	29 83       	std	Y+1, r18	; 0x01
   1b638:	3a 83       	std	Y+2, r19	; 0x02
   1b63a:	6d 83       	std	Y+5, r22	; 0x05
   1b63c:	7e 83       	std	Y+6, r23	; 0x06
   1b63e:	e9 80       	ldd	r14, Y+1	; 0x01
   1b640:	fa 80       	ldd	r15, Y+2	; 0x02
   1b642:	ee 0c       	add	r14, r14
   1b644:	ff 1c       	adc	r15, r15
   1b646:	ee 0c       	add	r14, r14
   1b648:	ff 1c       	adc	r15, r15
   1b64a:	ec 0c       	add	r14, r12
   1b64c:	fd 1c       	adc	r15, r13
   1b64e:	8d 81       	ldd	r24, Y+5	; 0x05
   1b650:	9e 81       	ldd	r25, Y+6	; 0x06
   1b652:	f5 e6       	ldi	r31, 0x65	; 101
   1b654:	ef 16       	cp	r14, r31
   1b656:	f1 04       	cpc	r15, r1
   1b658:	08 f4       	brcc	.+2      	; 0x1b65c <gmtime_r+0xdc>
   1b65a:	3f c0       	rjmp	.+126    	; 0x1b6da <gmtime_r+0x15a>
   1b65c:	01 96       	adiw	r24, 0x01	; 1
   1b65e:	21 e0       	ldi	r18, 0x01	; 1
   1b660:	30 e0       	ldi	r19, 0x00	; 0
   1b662:	a9 01       	movw	r20, r18
   1b664:	44 59       	subi	r20, 0x94	; 148
   1b666:	5e 4f       	sbci	r21, 0xFE	; 254
   1b668:	48 17       	cp	r20, r24
   1b66a:	59 07       	cpc	r21, r25
   1b66c:	60 f4       	brcc	.+24     	; 0x1b686 <gmtime_r+0x106>
   1b66e:	6d e6       	ldi	r22, 0x6D	; 109
   1b670:	71 e0       	ldi	r23, 0x01	; 1
   1b672:	82 1b       	sub	r24, r18
   1b674:	93 0b       	sbc	r25, r19
   1b676:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b67a:	dc 01       	movw	r26, r24
   1b67c:	e6 0e       	add	r14, r22
   1b67e:	f7 1e       	adc	r15, r23
   1b680:	cd 01       	movw	r24, r26
   1b682:	30 e0       	ldi	r19, 0x00	; 0
   1b684:	20 e0       	ldi	r18, 0x00	; 0
   1b686:	44 e6       	ldi	r20, 0x64	; 100
   1b688:	e4 0e       	add	r14, r20
   1b68a:	f1 1c       	adc	r15, r1
   1b68c:	f8 01       	movw	r30, r16
   1b68e:	f7 82       	std	Z+7, r15	; 0x07
   1b690:	e6 82       	std	Z+6, r14	; 0x06
   1b692:	91 87       	std	Z+9, r25	; 0x09
   1b694:	80 87       	std	Z+8, r24	; 0x08
   1b696:	25 5c       	subi	r18, 0xC5	; 197
   1b698:	3f 4f       	sbci	r19, 0xFF	; 255
   1b69a:	82 17       	cp	r24, r18
   1b69c:	93 07       	cpc	r25, r19
   1b69e:	38 f5       	brcc	.+78     	; 0x1b6ee <gmtime_r+0x16e>
   1b6a0:	6f e1       	ldi	r22, 0x1F	; 31
   1b6a2:	70 e0       	ldi	r23, 0x00	; 0
   1b6a4:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b6a8:	dc 01       	movw	r26, r24
   1b6aa:	f8 01       	movw	r30, r16
   1b6ac:	65 83       	std	Z+5, r22	; 0x05
   1b6ae:	a3 83       	std	Z+3, r26	; 0x03
   1b6b0:	f8 01       	movw	r30, r16
   1b6b2:	13 86       	std	Z+11, r1	; 0x0b
   1b6b4:	12 86       	std	Z+10, r1	; 0x0a
   1b6b6:	83 81       	ldd	r24, Z+3	; 0x03
   1b6b8:	8f 5f       	subi	r24, 0xFF	; 255
   1b6ba:	83 83       	std	Z+3, r24	; 0x03
   1b6bc:	28 96       	adiw	r28, 0x08	; 8
   1b6be:	0f b6       	in	r0, 0x3f	; 63
   1b6c0:	f8 94       	cli
   1b6c2:	de bf       	out	0x3e, r29	; 62
   1b6c4:	0f be       	out	0x3f, r0	; 63
   1b6c6:	cd bf       	out	0x3d, r28	; 61
   1b6c8:	df 91       	pop	r29
   1b6ca:	cf 91       	pop	r28
   1b6cc:	1f 91       	pop	r17
   1b6ce:	0f 91       	pop	r16
   1b6d0:	ff 90       	pop	r15
   1b6d2:	ef 90       	pop	r14
   1b6d4:	df 90       	pop	r13
   1b6d6:	cf 90       	pop	r12
   1b6d8:	08 95       	ret
   1b6da:	51 e0       	ldi	r21, 0x01	; 1
   1b6dc:	40 e0       	ldi	r20, 0x00	; 0
   1b6de:	24 e6       	ldi	r18, 0x64	; 100
   1b6e0:	e2 16       	cp	r14, r18
   1b6e2:	f1 04       	cpc	r15, r1
   1b6e4:	09 f4       	brne	.+2      	; 0x1b6e8 <gmtime_r+0x168>
   1b6e6:	50 e0       	ldi	r21, 0x00	; 0
   1b6e8:	25 2f       	mov	r18, r21
   1b6ea:	34 2f       	mov	r19, r20
   1b6ec:	ba cf       	rjmp	.-140    	; 0x1b662 <gmtime_r+0xe2>
   1b6ee:	69 e9       	ldi	r22, 0x99	; 153
   1b6f0:	70 e0       	ldi	r23, 0x00	; 0
   1b6f2:	82 1b       	sub	r24, r18
   1b6f4:	93 0b       	sbc	r25, r19
   1b6f6:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b6fa:	dc 01       	movw	r26, r24
   1b6fc:	26 2f       	mov	r18, r22
   1b6fe:	22 0f       	add	r18, r18
   1b700:	22 0f       	add	r18, r18
   1b702:	f2 2e       	mov	r15, r18
   1b704:	f6 0e       	add	r15, r22
   1b706:	6d e3       	ldi	r22, 0x3D	; 61
   1b708:	70 e0       	ldi	r23, 0x00	; 0
   1b70a:	cd 01       	movw	r24, r26
   1b70c:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b710:	dc 01       	movw	r26, r24
   1b712:	e6 2e       	mov	r14, r22
   1b714:	ee 0c       	add	r14, r14
   1b716:	6f e1       	ldi	r22, 0x1F	; 31
   1b718:	70 e0       	ldi	r23, 0x00	; 0
   1b71a:	cd 01       	movw	r24, r26
   1b71c:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1b720:	dc 01       	movw	r26, r24
   1b722:	22 e0       	ldi	r18, 0x02	; 2
   1b724:	26 0f       	add	r18, r22
   1b726:	2f 0d       	add	r18, r15
   1b728:	2e 0d       	add	r18, r14
   1b72a:	f8 01       	movw	r30, r16
   1b72c:	25 83       	std	Z+5, r18	; 0x05
   1b72e:	bf cf       	rjmp	.-130    	; 0x1b6ae <gmtime_r+0x12e>

0001b730 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1b730:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1b732:	80 81       	ld	r24, Z
   1b734:	91 81       	ldd	r25, Z+1	; 0x01
   1b736:	87 30       	cpi	r24, 0x07	; 7
   1b738:	91 05       	cpc	r25, r1
   1b73a:	38 f4       	brcc	.+14     	; 0x1b74a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   1b73c:	85 30       	cpi	r24, 0x05	; 5
   1b73e:	91 05       	cpc	r25, r1
   1b740:	88 f4       	brcc	.+34     	; 0x1b764 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1b742:	03 97       	sbiw	r24, 0x03	; 3
   1b744:	a0 f4       	brcc	.+40     	; 0x1b76e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1b746:	80 e0       	ldi	r24, 0x00	; 0
   1b748:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   1b74a:	87 30       	cpi	r24, 0x07	; 7
   1b74c:	91 05       	cpc	r25, r1
   1b74e:	61 f0       	breq	.+24     	; 0x1b768 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   1b750:	0a 97       	sbiw	r24, 0x0a	; 10
   1b752:	c9 f7       	brne	.-14     	; 0x1b746 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   1b754:	62 81       	ldd	r22, Z+2	; 0x02
   1b756:	73 81       	ldd	r23, Z+3	; 0x03
   1b758:	84 81       	ldd	r24, Z+4	; 0x04
   1b75a:	95 81       	ldd	r25, Z+5	; 0x05
   1b75c:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
   1b760:	86 2f       	mov	r24, r22
   1b762:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   1b764:	82 81       	ldd	r24, Z+2	; 0x02
   1b766:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   1b768:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1b76a:	81 95       	neg	r24
   1b76c:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   1b76e:	02 80       	ldd	r0, Z+2	; 0x02
   1b770:	f3 81       	ldd	r31, Z+3	; 0x03
   1b772:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   1b774:	30 97       	sbiw	r30, 0x00	; 0
   1b776:	39 f3       	breq	.-50     	; 0x1b746 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   1b778:	80 81       	ld	r24, Z
   1b77a:	84 37       	cpi	r24, 0x74	; 116
   1b77c:	c9 f0       	breq	.+50     	; 0x1b7b0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   1b77e:	8b 32       	cpi	r24, 0x2B	; 43
   1b780:	89 f0       	breq	.+34     	; 0x1b7a4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   1b782:	8d 32       	cpi	r24, 0x2D	; 45
   1b784:	81 f4       	brne	.+32     	; 0x1b7a6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   1b786:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   1b788:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   1b78a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   1b78c:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   1b78e:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   1b790:	30 ed       	ldi	r19, 0xD0	; 208
   1b792:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   1b794:	3a 30       	cpi	r19, 0x0A	; 10
   1b796:	48 f4       	brcc	.+18     	; 0x1b7aa <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   1b798:	82 9f       	mul	r24, r18
   1b79a:	60 0d       	add	r22, r0
   1b79c:	11 24       	eor	r1, r1
   1b79e:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   1b7a0:	80 53       	subi	r24, 0x30	; 48
   1b7a2:	f5 cf       	rjmp	.-22     	; 0x1b78e <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   1b7a4:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   1b7a6:	90 e0       	ldi	r25, 0x00	; 0
   1b7a8:	f0 cf       	rjmp	.-32     	; 0x1b78a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   1b7aa:	91 11       	cpse	r25, r1
   1b7ac:	de cf       	rjmp	.-68     	; 0x1b76a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   1b7ae:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   1b7b0:	81 e0       	ldi	r24, 0x01	; 1
   1b7b2:	fd cf       	rjmp	.-6      	; 0x1b7ae <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

0001b7b4 <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1b7b4:	cf 93       	push	r28
   1b7b6:	df 93       	push	r29
   1b7b8:	cd b7       	in	r28, 0x3d	; 61
   1b7ba:	de b7       	in	r29, 0x3e	; 62
   1b7bc:	cc 5b       	subi	r28, 0xBC	; 188
   1b7be:	d1 09       	sbc	r29, r1
   1b7c0:	0f b6       	in	r0, 0x3f	; 63
   1b7c2:	f8 94       	cli
   1b7c4:	de bf       	out	0x3e, r29	; 62
   1b7c6:	0f be       	out	0x3f, r0	; 63
   1b7c8:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   1b7ca:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   1b7cc:	84 b5       	in	r24, 0x24	; 36
   1b7ce:	83 60       	ori	r24, 0x03	; 3
   1b7d0:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1b7d2:	85 b5       	in	r24, 0x25	; 37
   1b7d4:	83 60       	ori	r24, 0x03	; 3
   1b7d6:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   1b7d8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   1b7dc:	81 60       	ori	r24, 0x01	; 1
   1b7de:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1b7e2:	82 e0       	ldi	r24, 0x02	; 2
   1b7e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   1b7e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   1b7ec:	81 60       	ori	r24, 0x01	; 1
   1b7ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1b7f2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   1b7f6:	81 60       	ori	r24, 0x01	; 1
   1b7f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   1b7fc:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   1b800:	84 60       	ori	r24, 0x04	; 4
   1b802:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   1b806:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1b80a:	81 60       	ori	r24, 0x01	; 1
   1b80c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1b810:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1b814:	83 60       	ori	r24, 0x03	; 3
   1b816:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   1b81a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1b81e:	81 60       	ori	r24, 0x01	; 1
   1b820:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1b824:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   1b828:	83 60       	ori	r24, 0x03	; 3
   1b82a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   1b82e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1b832:	81 60       	ori	r24, 0x01	; 1
   1b834:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   1b838:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   1b83c:	83 60       	ori	r24, 0x03	; 3
   1b83e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   1b842:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1b846:	81 60       	ori	r24, 0x01	; 1
   1b848:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   1b84c:	87 e8       	ldi	r24, 0x87	; 135
   1b84e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   1b852:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   1b856:	0e 94 6d a5 	call	0x14ada	; 0x14ada <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

        strcpy(payload, tds.name);
   1b85a:	21 e4       	ldi	r18, 0x41	; 65
   1b85c:	30 e0       	ldi	r19, 0x00	; 0
   1b85e:	2c 0f       	add	r18, r28
   1b860:	3d 1f       	adc	r19, r29
   1b862:	24 5f       	subi	r18, 0xF4	; 244
   1b864:	3f 4f       	sbci	r19, 0xFF	; 255
   1b866:	c5 54       	subi	r28, 0x45	; 69
   1b868:	df 4f       	sbci	r29, 0xFF	; 255
   1b86a:	39 83       	std	Y+1, r19	; 0x01
   1b86c:	28 83       	st	Y, r18
   1b86e:	cb 5b       	subi	r28, 0xBB	; 187
   1b870:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3900
  long mil;
  uint16_t click_x, click_y;



  load_now = millis();
   1b872:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1b876:	cb 54       	subi	r28, 0x4B	; 75
   1b878:	df 4f       	sbci	r29, 0xFF	; 255
   1b87a:	68 83       	st	Y, r22
   1b87c:	79 83       	std	Y+1, r23	; 0x01
   1b87e:	8a 83       	std	Y+2, r24	; 0x02
   1b880:	9b 83       	std	Y+3, r25	; 0x03
   1b882:	c5 5b       	subi	r28, 0xB5	; 181
   1b884:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3901
  if (mqtt_reconnect() == 0)
   1b886:	0e 94 10 a0 	call	0x14020	; 0x14020 <mqtt_reconnect()>
   1b88a:	81 11       	cpse	r24, r1
   1b88c:	8a c0       	rjmp	.+276    	; 0x1b9a2 <main+0x1ee>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3140
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   1b88e:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
   1b892:	8f 7d       	andi	r24, 0xDF	; 223
   1b894:	80 93 82 0c 	sts	0x0C82, r24	; 0x800c82 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3906
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1b898:	0e 94 9a d0 	call	0x1a134	; 0x1a134 <PubSubClient::loop() [clone .constprop.95]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3909


  if (ethClient1.connected())
   1b89c:	87 e6       	ldi	r24, 0x67	; 103
   1b89e:	92 e1       	ldi	r25, 0x12	; 18
   1b8a0:	0e 94 8a 82 	call	0x10514	; 0x10514 <EthernetClient::connected()>
   1b8a4:	88 23       	and	r24, r24
   1b8a6:	21 f0       	breq	.+8      	; 0x1b8b0 <main+0xfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3910
    ethClient1.stop();
   1b8a8:	87 e6       	ldi	r24, 0x67	; 103
   1b8aa:	92 e1       	ldi	r25, 0x12	; 18
   1b8ac:	0e 94 ad 82 	call	0x1055a	; 0x1055a <EthernetClient::stop()>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:53
  }
}

EthernetClient EthernetServer::available()
{
  accept();
   1b8b0:	89 e2       	ldi	r24, 0x29	; 41
   1b8b2:	90 e1       	ldi	r25, 0x10	; 16
   1b8b4:	0e 94 ef 82 	call	0x105de	; 0x105de <EthernetServer::accept()>
   1b8b8:	1a e6       	ldi	r17, 0x6A	; 106
   1b8ba:	a1 2e       	mov	r10, r17
   1b8bc:	1b e0       	ldi	r17, 0x0B	; 11
   1b8be:	b1 2e       	mov	r11, r17
   1b8c0:	10 e0       	ldi	r17, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1b8c2:	08 ee       	ldi	r16, 0xE8	; 232
   1b8c4:	40 2e       	mov	r4, r16
   1b8c6:	03 e0       	ldi	r16, 0x03	; 3
   1b8c8:	50 2e       	mov	r5, r16
   1b8ca:	61 2c       	mov	r6, r1
   1b8cc:	71 2c       	mov	r7, r1
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
uint16_t EthernetClient::_srcport = 1024;

EthernetClient::EthernetClient() : _sock(MAX_SOCK_NUM) {
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
   1b8ce:	80 ed       	ldi	r24, 0xD0	; 208
   1b8d0:	88 2e       	mov	r8, r24
   1b8d2:	82 e0       	ldi	r24, 0x02	; 2
   1b8d4:	98 2e       	mov	r9, r24
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
   1b8d6:	1c 82       	std	Y+4, r1	; 0x04
   1b8d8:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
   1b8da:	4d 82       	std	Y+5, r4	; 0x05
   1b8dc:	5e 82       	std	Y+6, r5	; 0x06
   1b8de:	6f 82       	std	Y+7, r6	; 0x07
   1b8e0:	78 86       	std	Y+8, r7	; 0x08
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1b8e2:	9a 82       	std	Y+2, r9	; 0x02
   1b8e4:	89 82       	std	Y+1, r8	; 0x01
   1b8e6:	1d 87       	std	Y+13, r17	; 0x0d
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1b8e8:	f5 01       	movw	r30, r10
   1b8ea:	21 91       	ld	r18, Z+
   1b8ec:	31 91       	ld	r19, Z+
   1b8ee:	5f 01       	movw	r10, r30
   1b8f0:	80 91 2d 10 	lds	r24, 0x102D	; 0x80102d <http_server+0x4>
   1b8f4:	90 91 2e 10 	lds	r25, 0x102E	; 0x80102e <http_server+0x5>
   1b8f8:	28 17       	cp	r18, r24
   1b8fa:	39 07       	cpc	r19, r25
   1b8fc:	09 f0       	breq	.+2      	; 0x1b900 <main+0x14c>
   1b8fe:	5c c0       	rjmp	.+184    	; 0x1b9b8 <main+0x204>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
        (client.status() == SnSR::ESTABLISHED ||
   1b900:	ce 01       	movw	r24, r28
   1b902:	01 96       	adiw	r24, 0x01	; 1
   1b904:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:57
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
   1b908:	87 31       	cpi	r24, 0x17	; 23
   1b90a:	09 f0       	breq	.+2      	; 0x1b90e <main+0x15a>
   1b90c:	4e c0       	rjmp	.+156    	; 0x1b9aa <main+0x1f6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:60
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
      if (client.available()) {
   1b90e:	ce 01       	movw	r24, r28
   1b910:	01 96       	adiw	r24, 0x01	; 1
   1b912:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <EthernetClient::available()>
   1b916:	89 2b       	or	r24, r25
   1b918:	09 f4       	brne	.+2      	; 0x1b91c <main+0x168>
   1b91a:	4e c0       	rjmp	.+156    	; 0x1b9b8 <main+0x204>
_ZN5PrintC2EOS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
   1b91c:	8b 81       	ldd	r24, Y+3	; 0x03
   1b91e:	9c 81       	ldd	r25, Y+4	; 0x04
   1b920:	c7 56       	subi	r28, 0x67	; 103
   1b922:	df 4f       	sbci	r29, 0xFF	; 255
   1b924:	99 83       	std	Y+1, r25	; 0x01
   1b926:	88 83       	st	Y, r24
   1b928:	c9 59       	subi	r28, 0x99	; 153
   1b92a:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
   1b92c:	8d 81       	ldd	r24, Y+5	; 0x05
   1b92e:	9e 81       	ldd	r25, Y+6	; 0x06
   1b930:	af 81       	ldd	r26, Y+7	; 0x07
   1b932:	b8 85       	ldd	r27, Y+8	; 0x08
   1b934:	c5 56       	subi	r28, 0x65	; 101
   1b936:	df 4f       	sbci	r29, 0xFF	; 255
   1b938:	88 83       	st	Y, r24
   1b93a:	99 83       	std	Y+1, r25	; 0x01
   1b93c:	aa 83       	std	Y+2, r26	; 0x02
   1b93e:	bb 83       	std	Y+3, r27	; 0x03
   1b940:	cb 59       	subi	r28, 0x9B	; 155
   1b942:	d0 40       	sbci	r29, 0x00	; 0
   1b944:	89 85       	ldd	r24, Y+9	; 0x09
   1b946:	9a 85       	ldd	r25, Y+10	; 0x0a
   1b948:	ab 85       	ldd	r26, Y+11	; 0x0b
   1b94a:	bc 85       	ldd	r27, Y+12	; 0x0c
   1b94c:	c1 56       	subi	r28, 0x61	; 97
   1b94e:	df 4f       	sbci	r29, 0xFF	; 255
   1b950:	88 83       	st	Y, r24
   1b952:	99 83       	std	Y+1, r25	; 0x01
   1b954:	aa 83       	std	Y+2, r26	; 0x02
   1b956:	bb 83       	std	Y+3, r27	; 0x03
   1b958:	cf 59       	subi	r28, 0x9F	; 159
   1b95a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:8
#include "Arduino.h"	
#include "Print.h"
#include "Client.h"
#include "IPAddress.h"

class EthernetClient : public Client {
   1b95c:	80 ed       	ldi	r24, 0xD0	; 208
   1b95e:	92 e0       	ldi	r25, 0x02	; 2
   1b960:	c9 56       	subi	r28, 0x69	; 105
   1b962:	df 4f       	sbci	r29, 0xFF	; 255
   1b964:	99 83       	std	Y+1, r25	; 0x01
   1b966:	88 83       	st	Y, r24
   1b968:	c7 59       	subi	r28, 0x97	; 151
   1b96a:	d0 40       	sbci	r29, 0x00	; 0
   1b96c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1b96e:	cd 55       	subi	r28, 0x5D	; 93
   1b970:	df 4f       	sbci	r29, 0xFF	; 255
   1b972:	88 83       	st	Y, r24
   1b974:	c3 5a       	subi	r28, 0xA3	; 163
   1b976:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3914


  EthernetClient http_client = http_server.available();
  if (http_client.connected())
   1b978:	ce 01       	movw	r24, r28
   1b97a:	89 56       	subi	r24, 0x69	; 105
   1b97c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b97e:	0e 94 8a 82 	call	0x10514	; 0x10514 <EthernetClient::connected()>
   1b982:	88 23       	and	r24, r24
   1b984:	09 f4       	brne	.+2      	; 0x1b988 <main+0x1d4>
   1b986:	45 c0       	rjmp	.+138    	; 0x1ba12 <main+0x25e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3916
  {
    while (http_client.available())
   1b988:	ce 01       	movw	r24, r28
   1b98a:	89 56       	subi	r24, 0x69	; 105
   1b98c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b98e:	0e 94 6b 56 	call	0xacd6	; 0xacd6 <EthernetClient::available()>
   1b992:	89 2b       	or	r24, r25
   1b994:	a9 f1       	breq	.+106    	; 0x1ba00 <main+0x24c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3917
      http_client.read();
   1b996:	ce 01       	movw	r24, r28
   1b998:	89 56       	subi	r24, 0x69	; 105
   1b99a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b99c:	0e 94 43 84 	call	0x10886	; 0x10886 <EthernetClient::read()>
   1b9a0:	f3 cf       	rjmp	.-26     	; 0x1b988 <main+0x1d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3904

  load_now = millis();
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);
   1b9a2:	85 e0       	ldi	r24, 0x05	; 5
   1b9a4:	0e 94 be 50 	call	0xa17c	; 0xa17c <selftest_set_0(unsigned char)>
   1b9a8:	77 cf       	rjmp	.-274    	; 0x1b898 <main+0xe4>
available():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:59

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
         client.status() == SnSR::CLOSE_WAIT)) {
   1b9aa:	ce 01       	movw	r24, r28
   1b9ac:	01 96       	adiw	r24, 0x01	; 1
   1b9ae:	0e 94 80 82 	call	0x10500	; 0x10500 <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:58
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
    EthernetClient client(sock);
    if (EthernetClass::_server_port[sock] == _port &&
        (client.status() == SnSR::ESTABLISHED ||
   1b9b2:	8c 31       	cpi	r24, 0x1C	; 28
   1b9b4:	09 f4       	brne	.+2      	; 0x1b9b8 <main+0x204>
   1b9b6:	ab cf       	rjmp	.-170    	; 0x1b90e <main+0x15a>
   1b9b8:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetServer.cpp:55

EthernetClient EthernetServer::available()
{
  accept();

  for (int sock = 0; sock < MAX_SOCK_NUM; sock++) {
   1b9ba:	18 30       	cpi	r17, 0x08	; 8
   1b9bc:	09 f0       	breq	.+2      	; 0x1b9c0 <main+0x20c>
   1b9be:	8b cf       	rjmp	.-234    	; 0x1b8d6 <main+0x122>
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   1b9c0:	c7 56       	subi	r28, 0x67	; 103
   1b9c2:	df 4f       	sbci	r29, 0xFF	; 255
   1b9c4:	19 82       	std	Y+1, r1	; 0x01
   1b9c6:	18 82       	st	Y, r1
   1b9c8:	c9 59       	subi	r28, 0x99	; 153
   1b9ca:	d0 40       	sbci	r29, 0x00	; 0
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
   1b9cc:	88 ee       	ldi	r24, 0xE8	; 232
   1b9ce:	93 e0       	ldi	r25, 0x03	; 3
   1b9d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b9d2:	b0 e0       	ldi	r27, 0x00	; 0
   1b9d4:	c5 56       	subi	r28, 0x65	; 101
   1b9d6:	df 4f       	sbci	r29, 0xFF	; 255
   1b9d8:	88 83       	st	Y, r24
   1b9da:	99 83       	std	Y+1, r25	; 0x01
   1b9dc:	aa 83       	std	Y+2, r26	; 0x02
   1b9de:	bb 83       	std	Y+3, r27	; 0x03
   1b9e0:	cb 59       	subi	r28, 0x9B	; 155
   1b9e2:	d0 40       	sbci	r29, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:20
   1b9e4:	80 ed       	ldi	r24, 0xD0	; 208
   1b9e6:	92 e0       	ldi	r25, 0x02	; 2
   1b9e8:	c9 56       	subi	r28, 0x69	; 105
   1b9ea:	df 4f       	sbci	r29, 0xFF	; 255
   1b9ec:	99 83       	std	Y+1, r25	; 0x01
   1b9ee:	88 83       	st	Y, r24
   1b9f0:	c7 59       	subi	r28, 0x97	; 151
   1b9f2:	d0 40       	sbci	r29, 0x00	; 0
   1b9f4:	cd 55       	subi	r28, 0x5D	; 93
   1b9f6:	df 4f       	sbci	r29, 0xFF	; 255
   1b9f8:	18 83       	st	Y, r17
   1b9fa:	c3 5a       	subi	r28, 0xA3	; 163
   1b9fc:	d0 40       	sbci	r29, 0x00	; 0
   1b9fe:	bc cf       	rjmp	.-136    	; 0x1b978 <main+0x1c4>
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   1ba00:	44 e0       	ldi	r20, 0x04	; 4
   1ba02:	50 e0       	ldi	r21, 0x00	; 0
   1ba04:	66 e4       	ldi	r22, 0x46	; 70
   1ba06:	77 e0       	ldi	r23, 0x07	; 7
   1ba08:	ce 01       	movw	r24, r28
   1ba0a:	89 56       	subi	r24, 0x69	; 105
   1ba0c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ba0e:	0e 94 c7 88 	call	0x1118e	; 0x1118e <EthernetClient::write(unsigned char const*, unsigned int)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3926





  if (scan_rf_net_enable == 2)
   1ba12:	80 91 af 0c 	lds	r24, 0x0CAF	; 0x800caf <scan_rf_net_enable>
   1ba16:	82 30       	cpi	r24, 0x02	; 2
   1ba18:	09 f0       	breq	.+2      	; 0x1ba1c <main+0x268>
   1ba1a:	da c0       	rjmp	.+436    	; 0x1bbd0 <main+0x41c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3928
  {
    scan_rf_net_enable = 0;
   1ba1c:	10 92 af 0c 	sts	0x0CAF, r1	; 0x800caf <scan_rf_net_enable>
get_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:365

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(RF24_NOP);
   1ba20:	8f ef       	ldi	r24, 0xFF	; 255
   1ba22:	0e 94 8b d0 	call	0x1a116	; 0x1a116 <RF24::spiTrans(unsigned char) [clone .constprop.105]>
print_status():
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1ba26:	28 2f       	mov	r18, r24
   1ba28:	30 e0       	ldi	r19, 0x00	; 0
   1ba2a:	98 2f       	mov	r25, r24
   1ba2c:	91 70       	andi	r25, 0x01	; 1
   1ba2e:	1f 92       	push	r1
   1ba30:	9f 93       	push	r25
/home/saric/Arduino/libraries/RF24/RF24.cpp:377
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0x07),
   1ba32:	a9 01       	movw	r20, r18
   1ba34:	55 95       	asr	r21
   1ba36:	47 95       	ror	r20
/home/saric/Arduino/libraries/RF24/RF24.cpp:372

/****************************************************************************/
#if !defined (MINIMAL)
void RF24::print_status(uint8_t status)
{
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
   1ba38:	47 70       	andi	r20, 0x07	; 7
   1ba3a:	55 27       	eor	r21, r21
   1ba3c:	5f 93       	push	r21
   1ba3e:	4f 93       	push	r20
   1ba40:	84 fb       	bst	r24, 4
   1ba42:	99 27       	eor	r25, r25
   1ba44:	90 f9       	bld	r25, 0
   1ba46:	1f 92       	push	r1
   1ba48:	9f 93       	push	r25
   1ba4a:	85 fb       	bst	r24, 5
   1ba4c:	99 27       	eor	r25, r25
   1ba4e:	90 f9       	bld	r25, 0
   1ba50:	1f 92       	push	r1
   1ba52:	9f 93       	push	r25
   1ba54:	86 fb       	bst	r24, 6
   1ba56:	22 27       	eor	r18, r18
   1ba58:	20 f9       	bld	r18, 0
   1ba5a:	1f 92       	push	r1
   1ba5c:	2f 93       	push	r18
   1ba5e:	1f 92       	push	r1
   1ba60:	8f 93       	push	r24
   1ba62:	86 eb       	ldi	r24, 0xB6	; 182
   1ba64:	96 e8       	ldi	r25, 0x86	; 134
   1ba66:	9f 93       	push	r25
   1ba68:	8f 93       	push	r24
   1ba6a:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:567
 
#endif //Linux

  print_status(get_status());

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
   1ba6e:	42 e0       	ldi	r20, 0x02	; 2
   1ba70:	6a e0       	ldi	r22, 0x0A	; 10
   1ba72:	81 eb       	ldi	r24, 0xB1	; 177
   1ba74:	97 e8       	ldi	r25, 0x87	; 135
   1ba76:	0e 94 49 d8 	call	0x1b092	; 0x1b092 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:568
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
   1ba7a:	44 e0       	ldi	r20, 0x04	; 4
   1ba7c:	6c e0       	ldi	r22, 0x0C	; 12
   1ba7e:	84 ea       	ldi	r24, 0xA4	; 164
   1ba80:	97 e8       	ldi	r25, 0x87	; 135
   1ba82:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:569
  print_address_register(PSTR("TX_ADDR\t"),TX_ADDR);
   1ba86:	41 e0       	ldi	r20, 0x01	; 1
   1ba88:	60 e1       	ldi	r22, 0x10	; 16
   1ba8a:	8b e9       	ldi	r24, 0x9B	; 155
   1ba8c:	97 e8       	ldi	r25, 0x87	; 135
   1ba8e:	0e 94 49 d8 	call	0x1b092	; 0x1b092 <RF24::print_address_register(char const*, unsigned char, unsigned char) [clone .constprop.36]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:571

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
   1ba92:	46 e0       	ldi	r20, 0x06	; 6
   1ba94:	61 e1       	ldi	r22, 0x11	; 17
   1ba96:	80 e9       	ldi	r24, 0x90	; 144
   1ba98:	97 e8       	ldi	r25, 0x87	; 135
   1ba9a:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:572
  print_byte_register(PSTR("EN_AA\t"),EN_AA);
   1ba9e:	41 e0       	ldi	r20, 0x01	; 1
   1baa0:	61 e0       	ldi	r22, 0x01	; 1
   1baa2:	89 e8       	ldi	r24, 0x89	; 137
   1baa4:	97 e8       	ldi	r25, 0x87	; 135
   1baa6:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:573
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
   1baaa:	41 e0       	ldi	r20, 0x01	; 1
   1baac:	62 e0       	ldi	r22, 0x02	; 2
   1baae:	8f e7       	ldi	r24, 0x7F	; 127
   1bab0:	97 e8       	ldi	r25, 0x87	; 135
   1bab2:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:574
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
   1bab6:	41 e0       	ldi	r20, 0x01	; 1
   1bab8:	65 e0       	ldi	r22, 0x05	; 5
   1baba:	88 e7       	ldi	r24, 0x78	; 120
   1babc:	97 e8       	ldi	r25, 0x87	; 135
   1babe:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:575
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
   1bac2:	41 e0       	ldi	r20, 0x01	; 1
   1bac4:	66 e0       	ldi	r22, 0x06	; 6
   1bac6:	8f e6       	ldi	r24, 0x6F	; 111
   1bac8:	97 e8       	ldi	r25, 0x87	; 135
   1baca:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:576
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
   1bace:	41 e0       	ldi	r20, 0x01	; 1
   1bad0:	60 e0       	ldi	r22, 0x00	; 0
   1bad2:	87 e6       	ldi	r24, 0x67	; 103
   1bad4:	97 e8       	ldi	r25, 0x87	; 135
   1bad6:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:577
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
   1bada:	42 e0       	ldi	r20, 0x02	; 2
   1badc:	6c e1       	ldi	r22, 0x1C	; 28
   1bade:	89 e5       	ldi	r24, 0x59	; 89
   1bae0:	97 e8       	ldi	r25, 0x87	; 135
   1bae2:	0e 94 11 d8 	call	0x1b022	; 0x1b022 <RF24::print_byte_register(char const*, unsigned char, unsigned char) [clone .constprop.38]>
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1512
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
   1bae6:	86 e0       	ldi	r24, 0x06	; 6
   1bae8:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   1baec:	88 72       	andi	r24, 0x28	; 40
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1baee:	0f b6       	in	r0, 0x3f	; 63
   1baf0:	f8 94       	cli
   1baf2:	de bf       	out	0x3e, r29	; 62
   1baf4:	0f be       	out	0x3f, r0	; 63
   1baf6:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1baf8:	e2 e0       	ldi	r30, 0x02	; 2
   1bafa:	f0 e0       	ldi	r31, 0x00	; 0
getDataRate():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1516
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));

  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
   1bafc:	80 32       	cpi	r24, 0x20	; 32
   1bafe:	39 f0       	breq	.+14     	; 0x1bb0e <main+0x35a>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1521
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
   1bb00:	21 e0       	ldi	r18, 0x01	; 1
   1bb02:	90 e0       	ldi	r25, 0x00	; 0
   1bb04:	88 30       	cpi	r24, 0x08	; 8
   1bb06:	09 f0       	breq	.+2      	; 0x1bb0a <main+0x356>
   1bb08:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1519
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
   1bb0a:	e2 2f       	mov	r30, r18
   1bb0c:	f9 2f       	mov	r31, r25
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:579
  print_byte_register(PSTR("RF_CH\t"),RF_CH);
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
   1bb0e:	ee 0f       	add	r30, r30
   1bb10:	ff 1f       	adc	r31, r31
   1bb12:	ed 5a       	subi	r30, 0xAD	; 173
   1bb14:	f8 47       	sbci	r31, 0x78	; 120
   1bb16:	85 91       	lpm	r24, Z+
   1bb18:	94 91       	lpm	r25, Z
   1bb1a:	9f 93       	push	r25
   1bb1c:	8f 93       	push	r24
   1bb1e:	81 e4       	ldi	r24, 0x41	; 65
   1bb20:	97 e8       	ldi	r25, 0x87	; 135
   1bb22:	9f 93       	push	r25
   1bb24:	8f 93       	push	r24
   1bb26:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
/home/saric/Arduino/libraries/RF24/RF24.cpp:580
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
   1bb2a:	e0 91 17 10 	lds	r30, 0x1017	; 0x801017 <radio+0x6>
   1bb2e:	f0 e0       	ldi	r31, 0x00	; 0
   1bb30:	ee 0f       	add	r30, r30
   1bb32:	ff 1f       	adc	r31, r31
   1bb34:	e3 5c       	subi	r30, 0xC3	; 195
   1bb36:	f8 47       	sbci	r31, 0x78	; 120
   1bb38:	85 91       	lpm	r24, Z+
   1bb3a:	94 91       	lpm	r25, Z
   1bb3c:	9f 93       	push	r25
   1bb3e:	8f 93       	push	r24
   1bb40:	8e e2       	ldi	r24, 0x2E	; 46
   1bb42:	97 e8       	ldi	r25, 0x87	; 135
   1bb44:	9f 93       	push	r25
   1bb46:	8f 93       	push	r24
   1bb48:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1563

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
   1bb4c:	80 e0       	ldi	r24, 0x00	; 0
   1bb4e:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   1bb52:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/RF24/RF24.cpp:1564
  uint8_t AA = read_register(EN_AA);
   1bb54:	81 e0       	ldi	r24, 0x01	; 1
   1bb56:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  if ( config & _BV(EN_CRC ) || AA)
   1bb5a:	0f b6       	in	r0, 0x3f	; 63
   1bb5c:	f8 94       	cli
   1bb5e:	de bf       	out	0x3e, r29	; 62
   1bb60:	0f be       	out	0x3f, r0	; 63
   1bb62:	cd bf       	out	0x3d, r28	; 61
   1bb64:	13 fd       	sbrc	r17, 3
   1bb66:	04 c0       	rjmp	.+8      	; 0x1bb70 <main+0x3bc>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1561

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
   1bb68:	f0 e0       	ldi	r31, 0x00	; 0
   1bb6a:	e0 e0       	ldi	r30, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1566
  
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
   1bb6c:	88 23       	and	r24, r24
   1bb6e:	31 f0       	breq	.+12     	; 0x1bb7c <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1569
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
   1bb70:	e2 e0       	ldi	r30, 0x02	; 2
   1bb72:	f0 e0       	ldi	r31, 0x00	; 0
getCRCLength():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1568
  uint8_t config = read_register(NRF_CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
  uint8_t AA = read_register(EN_AA);
  
  if ( config & _BV(EN_CRC ) || AA)
  {
    if ( config & _BV(CRCO) )
   1bb74:	12 fd       	sbrc	r17, 2
   1bb76:	02 c0       	rjmp	.+4      	; 0x1bb7c <main+0x3c8>
main():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1571
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
   1bb78:	e1 e0       	ldi	r30, 0x01	; 1
   1bb7a:	f0 e0       	ldi	r31, 0x00	; 0
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:581
  print_byte_register(PSTR("CONFIG\t"),NRF_CONFIG);
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
   1bb7c:	ee 0f       	add	r30, r30
   1bb7e:	ff 1f       	adc	r31, r31
   1bb80:	e8 5d       	subi	r30, 0xD8	; 216
   1bb82:	f8 47       	sbci	r31, 0x78	; 120
   1bb84:	85 91       	lpm	r24, Z+
   1bb86:	94 91       	lpm	r25, Z
   1bb88:	9f 93       	push	r25
   1bb8a:	8f 93       	push	r24
   1bb8c:	85 e1       	ldi	r24, 0x15	; 21
   1bb8e:	97 e8       	ldi	r25, 0x87	; 135
   1bb90:	9f 93       	push	r25
   1bb92:	8f 93       	push	r24
   1bb94:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
getPALevel():
/home/saric/Arduino/libraries/RF24/RF24.cpp:1454
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
   1bb98:	86 e0       	ldi	r24, 0x06	; 6
   1bb9a:	0e 94 78 d0 	call	0x1a0f0	; 0x1a0f0 <RF24::read_register(unsigned char) [clone .constprop.107]>
   1bb9e:	e8 2f       	mov	r30, r24
   1bba0:	f0 e0       	ldi	r31, 0x00	; 0
   1bba2:	f5 95       	asr	r31
   1bba4:	e7 95       	ror	r30
   1bba6:	e3 70       	andi	r30, 0x03	; 3
printDetails():
/home/saric/Arduino/libraries/RF24/RF24.cpp:582
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);

  printf_P(PSTR("Data Rate\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
  printf_P(PSTR("Model\t\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
  printf_P(PSTR("CRC Length\t = " PRIPSTR "\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
  printf_P(PSTR("PA Power\t = " PRIPSTR "\r\n"),  pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
   1bba8:	f0 e0       	ldi	r31, 0x00	; 0
   1bbaa:	ee 0f       	add	r30, r30
   1bbac:	ff 1f       	adc	r31, r31
   1bbae:	e3 5f       	subi	r30, 0xF3	; 243
   1bbb0:	f8 47       	sbci	r31, 0x78	; 120
   1bbb2:	85 91       	lpm	r24, Z+
   1bbb4:	94 91       	lpm	r25, Z
   1bbb6:	9f 93       	push	r25
   1bbb8:	8f 93       	push	r24
   1bbba:	8c ef       	ldi	r24, 0xFC	; 252
   1bbbc:	96 e8       	ldi	r25, 0x86	; 134
   1bbbe:	9f 93       	push	r25
   1bbc0:	8f 93       	push	r24
   1bbc2:	0e 94 4f ef 	call	0x1de9e	; 0x1de9e <printf_P>
   1bbc6:	0f b6       	in	r0, 0x3f	; 63
   1bbc8:	f8 94       	cli
   1bbca:	de bf       	out	0x3e, r29	; 62
   1bbcc:	0f be       	out	0x3f, r0	; 63
   1bbce:	cd bf       	out	0x3d, r28	; 61
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3935
  }


  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) >= 10000)
   1bbd0:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1bbd4:	00 91 ab 0c 	lds	r16, 0x0CAB	; 0x800cab <milis_10s>
   1bbd8:	10 91 ac 0c 	lds	r17, 0x0CAC	; 0x800cac <milis_10s+0x1>
   1bbdc:	20 91 ad 0c 	lds	r18, 0x0CAD	; 0x800cad <milis_10s+0x2>
   1bbe0:	30 91 ae 0c 	lds	r19, 0x0CAE	; 0x800cae <milis_10s+0x3>
   1bbe4:	ab 01       	movw	r20, r22
   1bbe6:	bc 01       	movw	r22, r24
   1bbe8:	40 1b       	sub	r20, r16
   1bbea:	51 0b       	sbc	r21, r17
   1bbec:	62 0b       	sbc	r22, r18
   1bbee:	73 0b       	sbc	r23, r19
   1bbf0:	40 31       	cpi	r20, 0x10	; 16
   1bbf2:	57 42       	sbci	r21, 0x27	; 39
   1bbf4:	61 05       	cpc	r22, r1
   1bbf6:	71 05       	cpc	r23, r1
   1bbf8:	08 f4       	brcc	.+2      	; 0x1bbfc <main+0x448>
   1bbfa:	3f c7       	rjmp	.+3710   	; 0x1ca7a <main+0x12c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
  {
    milis_10s += 10000;
   1bbfc:	d9 01       	movw	r26, r18
   1bbfe:	c8 01       	movw	r24, r16
   1bc00:	80 5f       	subi	r24, 0xF0	; 240
   1bc02:	98 4d       	sbci	r25, 0xD8	; 216
   1bc04:	af 4f       	sbci	r26, 0xFF	; 255
   1bc06:	bf 4f       	sbci	r27, 0xFF	; 255
   1bc08:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <milis_10s>
   1bc0c:	90 93 ac 0c 	sts	0x0CAC, r25	; 0x800cac <milis_10s+0x1>
   1bc10:	a0 93 ad 0c 	sts	0x0CAD, r26	; 0x800cad <milis_10s+0x2>
   1bc14:	b0 93 ae 0c 	sts	0x0CAE, r27	; 0x800cae <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
    menu_redraw10s = 1;
   1bc18:	81 e0       	ldi	r24, 0x01	; 1
   1bc1a:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2772
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   1bc1e:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bc22:	4a e0       	ldi	r20, 0x0A	; 10
   1bc24:	fe 01       	movw	r30, r28
   1bc26:	31 96       	adiw	r30, 0x01	; 1
   1bc28:	5f 01       	movw	r10, r30
   1bc2a:	bf 01       	movw	r22, r30
   1bc2c:	90 e0       	ldi	r25, 0x00	; 0
   1bc2e:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2773
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   1bc32:	a5 01       	movw	r20, r10
   1bc34:	6b e4       	ldi	r22, 0x4B	; 75
   1bc36:	77 e0       	ldi	r23, 0x07	; 7
   1bc38:	8f e2       	ldi	r24, 0x2F	; 47
   1bc3a:	90 e1       	ldi	r25, 0x10	; 16
   1bc3c:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1bc40:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1bc42:	3b e0       	ldi	r19, 0x0B	; 11
   1bc44:	f3 2e       	mov	r15, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1bc46:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <Global_HWwirenum>
   1bc4a:	18 17       	cp	r17, r24
   1bc4c:	b0 f5       	brcc	.+108    	; 0x1bcba <main+0x506>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1bc4e:	1f 9d       	mul	r17, r15
   1bc50:	c0 01       	movw	r24, r0
   1bc52:	11 24       	eor	r1, r1
   1bc54:	9c 01       	movw	r18, r24
   1bc56:	22 54       	subi	r18, 0x42	; 66
   1bc58:	33 4f       	sbci	r19, 0xF3	; 243
   1bc5a:	49 01       	movw	r8, r18
   1bc5c:	00 e1       	ldi	r16, 0x10	; 16
   1bc5e:	28 e0       	ldi	r18, 0x08	; 8
   1bc60:	a4 01       	movw	r20, r8
   1bc62:	6a e3       	ldi	r22, 0x3A	; 58
   1bc64:	c5 01       	movw	r24, r10
   1bc66:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2777
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   1bc6a:	95 01       	movw	r18, r10
   1bc6c:	47 e5       	ldi	r20, 0x57	; 87
   1bc6e:	57 e0       	ldi	r21, 0x07	; 7
   1bc70:	61 2f       	mov	r22, r17
   1bc72:	8b e5       	ldi	r24, 0x5B	; 91
   1bc74:	97 e0       	ldi	r25, 0x07	; 7
   1bc76:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   1bc7a:	f4 01       	movw	r30, r8
   1bc7c:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bc7e:	4a e0       	ldi	r20, 0x0A	; 10
   1bc80:	b5 01       	movw	r22, r10
   1bc82:	90 e0       	ldi	r25, 0x00	; 0
   1bc84:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2780
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   1bc88:	95 01       	movw	r18, r10
   1bc8a:	41 e6       	ldi	r20, 0x61	; 97
   1bc8c:	57 e0       	ldi	r21, 0x07	; 7
   1bc8e:	61 2f       	mov	r22, r17
   1bc90:	8b e5       	ldi	r24, 0x5B	; 91
   1bc92:	97 e0       	ldi	r25, 0x07	; 7
   1bc94:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2782
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   1bc98:	f4 01       	movw	r30, r8
   1bc9a:	82 85       	ldd	r24, Z+10	; 0x0a
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bc9c:	4a e0       	ldi	r20, 0x0A	; 10
   1bc9e:	b5 01       	movw	r22, r10
   1bca0:	90 e0       	ldi	r25, 0x00	; 0
   1bca2:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   1bca6:	95 01       	movw	r18, r10
   1bca8:	4a e6       	ldi	r20, 0x6A	; 106
   1bcaa:	57 e0       	ldi	r21, 0x07	; 7
   1bcac:	61 2f       	mov	r22, r17
   1bcae:	8b e5       	ldi	r24, 0x5B	; 91
   1bcb0:	97 e0       	ldi	r25, 0x07	; 7
   1bcb2:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1bcb6:	1f 5f       	subi	r17, 0xFF	; 255
   1bcb8:	c6 cf       	rjmp	.-116    	; 0x1bc46 <main+0x492>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:319
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   1bcba:	8f e2       	ldi	r24, 0x2F	; 47
   1bcbc:	90 e1       	ldi	r25, 0x10	; 16
   1bcbe:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   1bcc2:	88 23       	and	r24, r24
   1bcc4:	09 f4       	brne	.+2      	; 0x1bcc8 <main+0x514>
   1bcc6:	95 c0       	rjmp	.+298    	; 0x1bdf2 <main+0x63e>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:321
  {
    strcpy_P(str_topic, status_mqtt_send);
   1bcc8:	67 e1       	ldi	r22, 0x17	; 23
   1bcca:	78 e8       	ldi	r23, 0x88	; 136
   1bccc:	ce 01       	movw	r24, r28
   1bcce:	8f 5b       	subi	r24, 0xBF	; 191
   1bcd0:	9f 4f       	sbci	r25, 0xFF	; 255
   1bcd2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bcd6:	4a e0       	ldi	r20, 0x0A	; 10
   1bcd8:	b5 01       	movw	r22, r10
   1bcda:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <mqtt_send_message>
   1bcde:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <mqtt_send_message+0x1>
   1bce2:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:323
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   1bce6:	10 92 bb 0c 	sts	0x0CBB, r1	; 0x800cbb <mqtt_send_message+0x1>
   1bcea:	10 92 ba 0c 	sts	0x0CBA, r1	; 0x800cba <mqtt_send_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:324
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bcee:	a5 01       	movw	r20, r10
   1bcf0:	be 01       	movw	r22, r28
   1bcf2:	6f 5b       	subi	r22, 0xBF	; 191
   1bcf4:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcf6:	8f e2       	ldi	r24, 0x2F	; 47
   1bcf8:	90 e1       	ldi	r25, 0x10	; 16
   1bcfa:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:326
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1bcfe:	65 e0       	ldi	r22, 0x05	; 5
   1bd00:	78 e8       	ldi	r23, 0x88	; 136
   1bd02:	ce 01       	movw	r24, r28
   1bd04:	8f 5b       	subi	r24, 0xBF	; 191
   1bd06:	9f 4f       	sbci	r25, 0xFF	; 255
   1bd08:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bd0c:	4a e0       	ldi	r20, 0x0A	; 10
   1bd0e:	b5 01       	movw	r22, r10
   1bd10:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <mqtt_error>
   1bd14:	90 91 bd 0c 	lds	r25, 0x0CBD	; 0x800cbd <mqtt_error+0x1>
   1bd18:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:328
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bd1c:	a5 01       	movw	r20, r10
   1bd1e:	be 01       	movw	r22, r28
   1bd20:	6f 5b       	subi	r22, 0xBF	; 191
   1bd22:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd24:	8f e2       	ldi	r24, 0x2F	; 47
   1bd26:	90 e1       	ldi	r25, 0x10	; 16
   1bd28:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:330
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   1bd2c:	61 ef       	ldi	r22, 0xF1	; 241
   1bd2e:	77 e8       	ldi	r23, 0x87	; 135
   1bd30:	ce 01       	movw	r24, r28
   1bd32:	8f 5b       	subi	r24, 0xBF	; 191
   1bd34:	9f 4f       	sbci	r25, 0xFF	; 255
   1bd36:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bd3a:	4a e0       	ldi	r20, 0x0A	; 10
   1bd3c:	b5 01       	movw	r22, r10
   1bd3e:	80 91 7c 0b 	lds	r24, 0x0B7C	; 0x800b7c <mqtt_receive_message>
   1bd42:	90 91 7d 0b 	lds	r25, 0x0B7D	; 0x800b7d <mqtt_receive_message+0x1>
   1bd46:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:332
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   1bd4a:	10 92 7d 0b 	sts	0x0B7D, r1	; 0x800b7d <mqtt_receive_message+0x1>
   1bd4e:	10 92 7c 0b 	sts	0x0B7C, r1	; 0x800b7c <mqtt_receive_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:333
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bd52:	a5 01       	movw	r20, r10
   1bd54:	be 01       	movw	r22, r28
   1bd56:	6f 5b       	subi	r22, 0xBF	; 191
   1bd58:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd5a:	8f e2       	ldi	r24, 0x2F	; 47
   1bd5c:	90 e1       	ldi	r25, 0x10	; 16
   1bd5e:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:335
    ///
    strcpy_P(str_topic, status_mqtt_process);
   1bd62:	6d ed       	ldi	r22, 0xDD	; 221
   1bd64:	77 e8       	ldi	r23, 0x87	; 135
   1bd66:	ce 01       	movw	r24, r28
   1bd68:	8f 5b       	subi	r24, 0xBF	; 191
   1bd6a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bd6c:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bd70:	4a e0       	ldi	r20, 0x0A	; 10
   1bd72:	b5 01       	movw	r22, r10
   1bd74:	80 91 7a 0b 	lds	r24, 0x0B7A	; 0x800b7a <mqtt_process_message>
   1bd78:	90 91 7b 0b 	lds	r25, 0x0B7B	; 0x800b7b <mqtt_process_message+0x1>
   1bd7c:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:337
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   1bd80:	10 92 7b 0b 	sts	0x0B7B, r1	; 0x800b7b <mqtt_process_message+0x1>
   1bd84:	10 92 7a 0b 	sts	0x0B7A, r1	; 0x800b7a <mqtt_process_message>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:338
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bd88:	a5 01       	movw	r20, r10
   1bd8a:	be 01       	movw	r22, r28
   1bd8c:	6f 5b       	subi	r22, 0xBF	; 191
   1bd8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd90:	8f e2       	ldi	r24, 0x2F	; 47
   1bd92:	90 e1       	ldi	r25, 0x10	; 16
   1bd94:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:340

    payload[0] = 0;
   1bd98:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:341
    createString(payload, '.', device.myIP, 4, 10);
   1bd9a:	0a e0       	ldi	r16, 0x0A	; 10
   1bd9c:	24 e0       	ldi	r18, 0x04	; 4
   1bd9e:	4f e1       	ldi	r20, 0x1F	; 31
   1bda0:	5e e0       	ldi	r21, 0x0E	; 14
   1bda2:	6e e2       	ldi	r22, 0x2E	; 46
   1bda4:	c5 01       	movw	r24, r10
   1bda6:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:342
    strcpy_P(str_topic, network_ip);
   1bdaa:	62 ed       	ldi	r22, 0xD2	; 210
   1bdac:	77 e8       	ldi	r23, 0x87	; 135
   1bdae:	ce 01       	movw	r24, r28
   1bdb0:	8f 5b       	subi	r24, 0xBF	; 191
   1bdb2:	9f 4f       	sbci	r25, 0xFF	; 255
   1bdb4:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:343
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bdb8:	a5 01       	movw	r20, r10
   1bdba:	be 01       	movw	r22, r28
   1bdbc:	6f 5b       	subi	r22, 0xBF	; 191
   1bdbe:	7f 4f       	sbci	r23, 0xFF	; 255
   1bdc0:	8f e2       	ldi	r24, 0x2F	; 47
   1bdc2:	90 e1       	ldi	r25, 0x10	; 16
   1bdc4:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:345

    strcpy_P(str_topic, status_know_devices);
   1bdc8:	6e eb       	ldi	r22, 0xBE	; 190
   1bdca:	77 e8       	ldi	r23, 0x87	; 135
   1bdcc:	ce 01       	movw	r24, r28
   1bdce:	8f 5b       	subi	r24, 0xBF	; 191
   1bdd0:	9f 4f       	sbci	r25, 0xFF	; 255
   1bdd2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bdd6:	4a e0       	ldi	r20, 0x0A	; 10
   1bdd8:	b5 01       	movw	r22, r10
   1bdda:	90 e0       	ldi	r25, 0x00	; 0
   1bddc:	80 e0       	ldi	r24, 0x00	; 0
   1bdde:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:347
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1bde2:	a5 01       	movw	r20, r10
   1bde4:	be 01       	movw	r22, r28
   1bde6:	6f 5b       	subi	r22, 0xBF	; 191
   1bde8:	7f 4f       	sbci	r23, 0xFF	; 255
   1bdea:	8f e2       	ldi	r24, 0x2F	; 47
   1bdec:	90 e1       	ldi	r25, 0x10	; 16
   1bdee:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_41303/sketch/saric_mqtt_network.cpp:349
  }
  mqtt_error = 0;
   1bdf2:	10 92 bd 0c 	sts	0x0CBD, r1	; 0x800cbd <mqtt_error+0x1>
   1bdf6:	10 92 bc 0c 	sts	0x0CBC, r1	; 0x800cbc <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2792
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1bdfa:	8f e2       	ldi	r24, 0x2F	; 47
   1bdfc:	90 e1       	ldi	r25, 0x10	; 16
   1bdfe:	0e 94 cc 68 	call	0xd198	; 0xd198 <PubSubClient::connected()>
   1be02:	88 23       	and	r24, r24
   1be04:	09 f4       	brne	.+2      	; 0x1be08 <main+0x654>
   1be06:	70 c1       	rjmp	.+736    	; 0x1c0e8 <main+0x934>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
  {
    strcpy(str_topic, "status/uptime");
   1be08:	62 e7       	ldi	r22, 0x72	; 114
   1be0a:	77 e0       	ldi	r23, 0x07	; 7
   1be0c:	ce 01       	movw	r24, r28
   1be0e:	8f 5b       	subi	r24, 0xBF	; 191
   1be10:	9f 4f       	sbci	r25, 0xFF	; 255
   1be12:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2795
    sprintf(payload, "%ld", uptime);
   1be16:	80 91 9b 0c 	lds	r24, 0x0C9B	; 0x800c9b <uptime+0x3>
   1be1a:	8f 93       	push	r24
   1be1c:	80 91 9a 0c 	lds	r24, 0x0C9A	; 0x800c9a <uptime+0x2>
   1be20:	8f 93       	push	r24
   1be22:	80 91 99 0c 	lds	r24, 0x0C99	; 0x800c99 <uptime+0x1>
   1be26:	8f 93       	push	r24
   1be28:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1be2c:	8f 93       	push	r24
   1be2e:	80 e8       	ldi	r24, 0x80	; 128
   1be30:	97 e0       	ldi	r25, 0x07	; 7
   1be32:	9f 93       	push	r25
   1be34:	8f 93       	push	r24
   1be36:	bf 92       	push	r11
   1be38:	af 92       	push	r10
   1be3a:	0e 94 96 fb 	call	0x1f72c	; 0x1f72c <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1be3e:	a5 01       	movw	r20, r10
   1be40:	be 01       	movw	r22, r28
   1be42:	6f 5b       	subi	r22, 0xBF	; 191
   1be44:	7f 4f       	sbci	r23, 0xFF	; 255
   1be46:	8f e2       	ldi	r24, 0x2F	; 47
   1be48:	90 e1       	ldi	r25, 0x10	; 16
   1be4a:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2798
    ///
    strcpy(str_topic, "status/brigthness");
   1be4e:	64 e8       	ldi	r22, 0x84	; 132
   1be50:	77 e0       	ldi	r23, 0x07	; 7
   1be52:	ce 01       	movw	r24, r28
   1be54:	8f 5b       	subi	r24, 0xBF	; 191
   1be56:	9f 4f       	sbci	r25, 0xFF	; 255
   1be58:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
    itoa(brigthness_display_values, payload, 10);
   1be5c:	80 91 87 0b 	lds	r24, 0x0B87	; 0x800b87 <brigthness_display_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1be60:	4a e0       	ldi	r20, 0x0A	; 10
   1be62:	b5 01       	movw	r22, r10
   1be64:	90 e0       	ldi	r25, 0x00	; 0
   1be66:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1be6a:	a5 01       	movw	r20, r10
   1be6c:	be 01       	movw	r22, r28
   1be6e:	6f 5b       	subi	r22, 0xBF	; 191
   1be70:	7f 4f       	sbci	r23, 0xFF	; 255
   1be72:	8f e2       	ldi	r24, 0x2F	; 47
   1be74:	90 e1       	ldi	r25, 0x10	; 16
   1be76:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2802
    ///
    strcpy(str_topic, "status/light");
   1be7a:	66 e9       	ldi	r22, 0x96	; 150
   1be7c:	77 e0       	ldi	r23, 0x07	; 7
   1be7e:	ce 01       	movw	r24, r28
   1be80:	8f 5b       	subi	r24, 0xBF	; 191
   1be82:	9f 4f       	sbci	r25, 0xFF	; 255
   1be84:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1be88:	4a e0       	ldi	r20, 0x0A	; 10
   1be8a:	b5 01       	movw	r22, r10
   1be8c:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   1be90:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1be94:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2804
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1be98:	a5 01       	movw	r20, r10
   1be9a:	be 01       	movw	r22, r28
   1be9c:	6f 5b       	subi	r22, 0xBF	; 191
   1be9e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bea0:	8f e2       	ldi	r24, 0x2F	; 47
   1bea2:	90 e1       	ldi	r25, 0x10	; 16
   1bea4:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
    ///
    strcpy(str_topic, "status/auto_brigthness");
   1bea8:	63 ea       	ldi	r22, 0xA3	; 163
   1beaa:	77 e0       	ldi	r23, 0x07	; 7
   1beac:	ce 01       	movw	r24, r28
   1beae:	8f 5b       	subi	r24, 0xBF	; 191
   1beb0:	9f 4f       	sbci	r25, 0xFF	; 255
   1beb2:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
    itoa(brigthness_display_auto_values, payload, 10);
   1beb6:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1beba:	4a e0       	ldi	r20, 0x0A	; 10
   1bebc:	b5 01       	movw	r22, r10
   1bebe:	90 e0       	ldi	r25, 0x00	; 0
   1bec0:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2808
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bec4:	a5 01       	movw	r20, r10
   1bec6:	be 01       	movw	r22, r28
   1bec8:	6f 5b       	subi	r22, 0xBF	; 191
   1beca:	7f 4f       	sbci	r23, 0xFF	; 255
   1becc:	8f e2       	ldi	r24, 0x2F	; 47
   1bece:	90 e1       	ldi	r25, 0x10	; 16
   1bed0:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2810
    ///
    strcpy(str_topic, "status/load_min");
   1bed4:	6a eb       	ldi	r22, 0xBA	; 186
   1bed6:	77 e0       	ldi	r23, 0x07	; 7
   1bed8:	ce 01       	movw	r24, r28
   1beda:	8f 5b       	subi	r24, 0xBF	; 191
   1bedc:	9f 4f       	sbci	r25, 0xFF	; 255
   1bede:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bee2:	4a e0       	ldi	r20, 0x0A	; 10
   1bee4:	b5 01       	movw	r22, r10
   1bee6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <load_min>
   1beea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <load_min+0x1>
   1beee:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2812
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bef2:	a5 01       	movw	r20, r10
   1bef4:	be 01       	movw	r22, r28
   1bef6:	6f 5b       	subi	r22, 0xBF	; 191
   1bef8:	7f 4f       	sbci	r23, 0xFF	; 255
   1befa:	8f e2       	ldi	r24, 0x2F	; 47
   1befc:	90 e1       	ldi	r25, 0x10	; 16
   1befe:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2814
    ///
    strcpy(str_topic, "status/load_max");
   1bf02:	6a ec       	ldi	r22, 0xCA	; 202
   1bf04:	77 e0       	ldi	r23, 0x07	; 7
   1bf06:	ce 01       	movw	r24, r28
   1bf08:	8f 5b       	subi	r24, 0xBF	; 191
   1bf0a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf0c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bf10:	4a e0       	ldi	r20, 0x0A	; 10
   1bf12:	b5 01       	movw	r22, r10
   1bf14:	80 91 85 0c 	lds	r24, 0x0C85	; 0x800c85 <load_max>
   1bf18:	90 91 86 0c 	lds	r25, 0x0C86	; 0x800c86 <load_max+0x1>
   1bf1c:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2816
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bf20:	a5 01       	movw	r20, r10
   1bf22:	be 01       	movw	r22, r28
   1bf24:	6f 5b       	subi	r22, 0xBF	; 191
   1bf26:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf28:	8f e2       	ldi	r24, 0x2F	; 47
   1bf2a:	90 e1       	ldi	r25, 0x10	; 16
   1bf2c:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2818
    ///
    load_max = 0;
   1bf30:	10 92 85 0c 	sts	0x0C85, r1	; 0x800c85 <load_max>
   1bf34:	10 92 86 0c 	sts	0x0C86, r1	; 0x800c86 <load_max+0x1>
   1bf38:	10 92 87 0c 	sts	0x0C87, r1	; 0x800c87 <load_max+0x2>
   1bf3c:	10 92 88 0c 	sts	0x0C88, r1	; 0x800c88 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2819
    load_min = 0xffffffff;
   1bf40:	8f ef       	ldi	r24, 0xFF	; 255
   1bf42:	9f ef       	ldi	r25, 0xFF	; 255
   1bf44:	dc 01       	movw	r26, r24
   1bf46:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1bf4a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1bf4e:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1bf52:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2821
    ///
    strcpy(str_topic, "status/default_ring");
   1bf56:	6a ed       	ldi	r22, 0xDA	; 218
   1bf58:	77 e0       	ldi	r23, 0x07	; 7
   1bf5a:	ce 01       	movw	r24, r28
   1bf5c:	8f 5b       	subi	r24, 0xBF	; 191
   1bf5e:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf60:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2822
    itoa(default_ring, payload, 10);
   1bf64:	80 91 86 0b 	lds	r24, 0x0B86	; 0x800b86 <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bf68:	4a e0       	ldi	r20, 0x0A	; 10
   1bf6a:	b5 01       	movw	r22, r10
   1bf6c:	90 e0       	ldi	r25, 0x00	; 0
   1bf6e:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2823
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bf72:	a5 01       	movw	r20, r10
   1bf74:	be 01       	movw	r22, r28
   1bf76:	6f 5b       	subi	r22, 0xBF	; 191
   1bf78:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf7a:	8f e2       	ldi	r24, 0x2F	; 47
   1bf7c:	90 e1       	ldi	r25, 0x10	; 16
   1bf7e:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
    ///
    strcpy(str_topic, "status/selftest");
   1bf82:	6e ee       	ldi	r22, 0xEE	; 238
   1bf84:	77 e0       	ldi	r23, 0x07	; 7
   1bf86:	ce 01       	movw	r24, r28
   1bf88:	8f 5b       	subi	r24, 0xBF	; 191
   1bf8a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bf8c:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
    itoa(selftest_data, payload, 10);
   1bf90:	80 91 82 0c 	lds	r24, 0x0C82	; 0x800c82 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bf94:	4a e0       	ldi	r20, 0x0A	; 10
   1bf96:	b5 01       	movw	r22, r10
   1bf98:	90 e0       	ldi	r25, 0x00	; 0
   1bf9a:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bf9e:	a5 01       	movw	r20, r10
   1bfa0:	be 01       	movw	r22, r28
   1bfa2:	6f 5b       	subi	r22, 0xBF	; 191
   1bfa4:	7f 4f       	sbci	r23, 0xFF	; 255
   1bfa6:	8f e2       	ldi	r24, 0x2F	; 47
   1bfa8:	90 e1       	ldi	r25, 0x10	; 16
   1bfaa:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2829

    strcpy(str_topic, "status/rtds/count");
   1bfae:	6e ef       	ldi	r22, 0xFE	; 254
   1bfb0:	77 e0       	ldi	r23, 0x07	; 7
   1bfb2:	ce 01       	movw	r24, r28
   1bfb4:	8f 5b       	subi	r24, 0xBF	; 191
   1bfb6:	9f 4f       	sbci	r25, 0xFF	; 255
   1bfb8:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2830
    itoa(use_rtds, payload, 10);
   1bfbc:	80 91 91 0c 	lds	r24, 0x0C91	; 0x800c91 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bfc0:	4a e0       	ldi	r20, 0x0A	; 10
   1bfc2:	b5 01       	movw	r22, r10
   1bfc4:	90 e0       	ldi	r25, 0x00	; 0
   1bfc6:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2831
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1bfca:	a5 01       	movw	r20, r10
   1bfcc:	be 01       	movw	r22, r28
   1bfce:	6f 5b       	subi	r22, 0xBF	; 191
   1bfd0:	7f 4f       	sbci	r23, 0xFF	; 255
   1bfd2:	8f e2       	ldi	r24, 0x2F	; 47
   1bfd4:	90 e1       	ldi	r25, 0x10	; 16
   1bfd6:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
int8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   1bfda:	81 e0       	ldi	r24, 0x01	; 1
   1bfdc:	90 e0       	ldi	r25, 0x00	; 0
   1bfde:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1bfe2:	4a e0       	ldi	r20, 0x0A	; 10
   1bfe4:	b5 01       	movw	r22, r10
   1bfe6:	08 2e       	mov	r0, r24
   1bfe8:	00 0c       	add	r0, r0
   1bfea:	99 0b       	sbc	r25, r25
   1bfec:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1bff0:	a5 01       	movw	r20, r10
   1bff2:	60 e1       	ldi	r22, 0x10	; 16
   1bff4:	78 e0       	ldi	r23, 0x08	; 8
   1bff6:	8f e2       	ldi	r24, 0x2F	; 47
   1bff8:	90 e1       	ldi	r25, 0x10	; 16
   1bffa:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1bffe:	80 91 84 0b 	lds	r24, 0x0B84	; 0x800b84 <tritri>
   1c002:	90 91 85 0b 	lds	r25, 0x0B85	; 0x800b85 <tritri+0x1>
   1c006:	25 e0       	ldi	r18, 0x05	; 5
   1c008:	28 9f       	mul	r18, r24
   1c00a:	b0 01       	movw	r22, r0
   1c00c:	29 9f       	mul	r18, r25
   1c00e:	70 0d       	add	r23, r0
   1c010:	11 24       	eor	r1, r1
   1c012:	90 e0       	ldi	r25, 0x00	; 0
   1c014:	80 e0       	ldi	r24, 0x00	; 0
   1c016:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1c01a:	20 e0       	ldi	r18, 0x00	; 0
   1c01c:	30 e0       	ldi	r19, 0x00	; 0
   1c01e:	4a e7       	ldi	r20, 0x7A	; 122
   1c020:	54 e4       	ldi	r21, 0x44	; 68
   1c022:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2840
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   1c026:	85 01       	movw	r16, r10
   1c028:	22 e0       	ldi	r18, 0x02	; 2
   1c02a:	44 e0       	ldi	r20, 0x04	; 4
   1c02c:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2841
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   1c030:	a5 01       	movw	r20, r10
   1c032:	60 e2       	ldi	r22, 0x20	; 32
   1c034:	78 e0       	ldi	r23, 0x08	; 8
   1c036:	8f e2       	ldi	r24, 0x2F	; 47
   1c038:	90 e1       	ldi	r25, 0x10	; 16
   1c03a:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1c03e:	60 91 82 0b 	lds	r22, 0x0B82	; 0x800b82 <petnula>
   1c042:	70 91 83 0b 	lds	r23, 0x0B83	; 0x800b83 <petnula+0x1>
   1c046:	23 e0       	ldi	r18, 0x03	; 3
   1c048:	66 0f       	add	r22, r22
   1c04a:	77 1f       	adc	r23, r23
   1c04c:	2a 95       	dec	r18
   1c04e:	e1 f7       	brne	.-8      	; 0x1c048 <main+0x894>
   1c050:	90 e0       	ldi	r25, 0x00	; 0
   1c052:	80 e0       	ldi	r24, 0x00	; 0
   1c054:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1c058:	20 e0       	ldi	r18, 0x00	; 0
   1c05a:	30 e0       	ldi	r19, 0x00	; 0
   1c05c:	4a e7       	ldi	r20, 0x7A	; 122
   1c05e:	54 e4       	ldi	r21, 0x44	; 68
   1c060:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2843
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   1c064:	22 e0       	ldi	r18, 0x02	; 2
   1c066:	44 e0       	ldi	r20, 0x04	; 4
   1c068:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2844
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   1c06c:	a5 01       	movw	r20, r10
   1c06e:	63 e3       	ldi	r22, 0x33	; 51
   1c070:	78 e0       	ldi	r23, 0x08	; 8
   1c072:	8f e2       	ldi	r24, 0x2F	; 47
   1c074:	90 e1       	ldi	r25, 0x10	; 16
   1c076:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3175
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   1c07a:	80 91 80 0b 	lds	r24, 0x0B80	; 0x800b80 <dvanact>
   1c07e:	90 91 81 0b 	lds	r25, 0x0B81	; 0x800b81 <dvanact+0x1>
   1c082:	29 e3       	ldi	r18, 0x39	; 57
   1c084:	28 9f       	mul	r18, r24
   1c086:	b0 01       	movw	r22, r0
   1c088:	29 9f       	mul	r18, r25
   1c08a:	70 0d       	add	r23, r0
   1c08c:	11 24       	eor	r1, r1
   1c08e:	90 e0       	ldi	r25, 0x00	; 0
   1c090:	80 e0       	ldi	r24, 0x00	; 0
   1c092:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1c096:	20 e0       	ldi	r18, 0x00	; 0
   1c098:	30 e0       	ldi	r19, 0x00	; 0
   1c09a:	4a e7       	ldi	r20, 0x7A	; 122
   1c09c:	54 e4       	ldi	r21, 0x44	; 68
   1c09e:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2846
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   1c0a2:	22 e0       	ldi	r18, 0x02	; 2
   1c0a4:	44 e0       	ldi	r20, 0x04	; 4
   1c0a6:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2847
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   1c0aa:	a5 01       	movw	r20, r10
   1c0ac:	66 e4       	ldi	r22, 0x46	; 70
   1c0ae:	78 e0       	ldi	r23, 0x08	; 8
   1c0b0:	8f e2       	ldi	r24, 0x2F	; 47
   1c0b2:	90 e1       	ldi	r25, 0x10	; 16
   1c0b4:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1c0b8:	60 91 7e 0b 	lds	r22, 0x0B7E	; 0x800b7e <proud>
   1c0bc:	70 91 7f 0b 	lds	r23, 0x0B7F	; 0x800b7f <proud+0x1>
   1c0c0:	90 e0       	ldi	r25, 0x00	; 0
   1c0c2:	80 e0       	ldi	r24, 0x00	; 0
   1c0c4:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2849
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1c0c8:	22 e0       	ldi	r18, 0x02	; 2
   1c0ca:	44 e0       	ldi	r20, 0x04	; 4
   1c0cc:	0e 94 43 ed 	call	0x1da86	; 0x1da86 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2850
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   1c0d0:	a5 01       	movw	r20, r10
   1c0d2:	69 e5       	ldi	r22, 0x59	; 89
   1c0d4:	78 e0       	ldi	r23, 0x08	; 8
   1c0d6:	8f e2       	ldi	r24, 0x2F	; 47
   1c0d8:	90 e1       	ldi	r25, 0x10	; 16
   1c0da:	0e 94 43 91 	call	0x12286	; 0x12286 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
   1c0de:	0f b6       	in	r0, 0x3f	; 63
   1c0e0:	f8 94       	cli
   1c0e2:	de bf       	out	0x3e, r29	; 62
   1c0e4:	0f be       	out	0x3f, r0	; 63
   1c0e6:	cd bf       	out	0x3d, r28	; 61
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1c0e8:	9c e5       	ldi	r25, 0x5C	; 92
   1c0ea:	89 2e       	mov	r8, r25
   1c0ec:	99 24       	eor	r9, r9
   1c0ee:	93 94       	inc	r9
   1c0f0:	10 e0       	ldi	r17, 0x00	; 0
   1c0f2:	00 e0       	ldi	r16, 0x00	; 0
   1c0f4:	70 2e       	mov	r7, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2870
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   1c0f6:	80 2f       	mov	r24, r16
   1c0f8:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
   1c0fc:	8f 3f       	cpi	r24, 0xFF	; 255
   1c0fe:	09 f4       	brne	.+2      	; 0x1c102 <main+0x94e>
   1c100:	c6 c0       	rjmp	.+396    	; 0x1c28e <main+0xada>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2872
    {
      thermostat_ring_get_name(idx, payload);
   1c102:	b5 01       	movw	r22, r10
   1c104:	80 2f       	mov	r24, r16
   1c106:	0e 94 ba 71 	call	0xe374	; 0xe374 <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2873
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   1c10a:	95 01       	movw	r18, r10
   1c10c:	4a ee       	ldi	r20, 0xEA	; 234
   1c10e:	53 e0       	ldi	r21, 0x03	; 3
   1c110:	60 2f       	mov	r22, r16
   1c112:	89 ee       	ldi	r24, 0xE9	; 233
   1c114:	97 e0       	ldi	r25, 0x07	; 7
   1c116:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2874
      itoa(thermostat_ring_get_active(idx), payload, 10);
   1c11a:	80 2f       	mov	r24, r16
   1c11c:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c120:	4a e0       	ldi	r20, 0x0A	; 10
   1c122:	b5 01       	movw	r22, r10
   1c124:	90 e0       	ldi	r25, 0x00	; 0
   1c126:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   1c12a:	95 01       	movw	r18, r10
   1c12c:	44 ef       	ldi	r20, 0xF4	; 244
   1c12e:	53 e0       	ldi	r21, 0x03	; 3
   1c130:	60 2f       	mov	r22, r16
   1c132:	89 ee       	ldi	r24, 0xE9	; 233
   1c134:	97 e0       	ldi	r25, 0x07	; 7
   1c136:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1c13a:	c4 01       	movw	r24, r8
   1c13c:	01 97       	sbiw	r24, 0x01	; 1
   1c13e:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c142:	4a e0       	ldi	r20, 0x0A	; 10
   1c144:	b5 01       	movw	r22, r10
   1c146:	90 e0       	ldi	r25, 0x00	; 0
   1c148:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2877
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   1c14c:	95 01       	movw	r18, r10
   1c14e:	41 ea       	ldi	r20, 0xA1	; 161
   1c150:	56 e0       	ldi	r21, 0x06	; 6
   1c152:	60 2f       	mov	r22, r16
   1c154:	89 ee       	ldi	r24, 0xE9	; 233
   1c156:	97 e0       	ldi	r25, 0x07	; 7
   1c158:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2878
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   1c15c:	80 2f       	mov	r24, r16
   1c15e:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c162:	4a e0       	ldi	r20, 0x0A	; 10
   1c164:	b5 01       	movw	r22, r10
   1c166:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2879
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   1c16a:	95 01       	movw	r18, r10
   1c16c:	47 e9       	ldi	r20, 0x97	; 151
   1c16e:	56 e0       	ldi	r21, 0x06	; 6
   1c170:	60 2f       	mov	r22, r16
   1c172:	89 ee       	ldi	r24, 0xE9	; 233
   1c174:	97 e0       	ldi	r25, 0x07	; 7
   1c176:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2880
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   1c17a:	80 2f       	mov	r24, r16
   1c17c:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c180:	4a e0       	ldi	r20, 0x0A	; 10
   1c182:	b5 01       	movw	r22, r10
   1c184:	90 e0       	ldi	r25, 0x00	; 0
   1c186:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2881
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1c18a:	95 01       	movw	r18, r10
   1c18c:	4a eb       	ldi	r20, 0xBA	; 186
   1c18e:	56 e0       	ldi	r21, 0x06	; 6
   1c190:	60 2f       	mov	r22, r16
   1c192:	89 ee       	ldi	r24, 0xE9	; 233
   1c194:	97 e0       	ldi	r25, 0x07	; 7
   1c196:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2882
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1c19a:	80 2f       	mov	r24, r16
   1c19c:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3241
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   1c1a0:	60 e7       	ldi	r22, 0x70	; 112
   1c1a2:	78 e0       	ldi	r23, 0x08	; 8
   1c1a4:	88 23       	and	r24, r24
   1c1a6:	a1 f0       	breq	.+40     	; 0x1c1d0 <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1c1a8:	6f ec       	ldi	r22, 0xCF	; 207
   1c1aa:	78 e0       	ldi	r23, 0x08	; 8
   1c1ac:	81 30       	cpi	r24, 0x01	; 1
   1c1ae:	81 f0       	breq	.+32     	; 0x1c1d0 <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3243
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   1c1b0:	6d ea       	ldi	r22, 0xAD	; 173
   1c1b2:	75 e0       	ldi	r23, 0x05	; 5
   1c1b4:	83 30       	cpi	r24, 0x03	; 3
   1c1b6:	61 f0       	breq	.+24     	; 0x1c1d0 <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1c1b8:	64 eb       	ldi	r22, 0xB4	; 180
   1c1ba:	75 e0       	ldi	r23, 0x05	; 5
   1c1bc:	82 30       	cpi	r24, 0x02	; 2
   1c1be:	41 f0       	breq	.+16     	; 0x1c1d0 <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   1c1c0:	6f eb       	ldi	r22, 0xBF	; 191
   1c1c2:	78 e0       	ldi	r23, 0x08	; 8
   1c1c4:	84 30       	cpi	r24, 0x04	; 4
   1c1c6:	21 f0       	breq	.+8      	; 0x1c1d0 <main+0xa1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3246
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1c1c8:	86 30       	cpi	r24, 0x06	; 6
   1c1ca:	29 f4       	brne	.+10     	; 0x1c1d6 <main+0xa22>
   1c1cc:	69 eb       	ldi	r22, 0xB9	; 185
   1c1ce:	75 e0       	ldi	r23, 0x05	; 5
   1c1d0:	c5 01       	movw	r24, r10
   1c1d2:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2883
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1c1d6:	95 01       	movw	r18, r10
   1c1d8:	45 eb       	ldi	r20, 0xB5	; 181
   1c1da:	56 e0       	ldi	r21, 0x06	; 6
   1c1dc:	67 2d       	mov	r22, r7
   1c1de:	89 ee       	ldi	r24, 0xE9	; 233
   1c1e0:	97 e0       	ldi	r25, 0x07	; 7
   1c1e2:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   1c1e6:	f8 01       	movw	r30, r16
   1c1e8:	e3 57       	subi	r30, 0x73	; 115
   1c1ea:	f4 4f       	sbci	r31, 0xF4	; 244
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2884
      itoa(thermostat_ring_get_state(idx), payload, 10);
   1c1ec:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c1ee:	4a e0       	ldi	r20, 0x0A	; 10
   1c1f0:	b5 01       	movw	r22, r10
   1c1f2:	90 e0       	ldi	r25, 0x00	; 0
   1c1f4:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2885
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   1c1f8:	95 01       	movw	r18, r10
   1c1fa:	44 e7       	ldi	r20, 0x74	; 116
   1c1fc:	58 e0       	ldi	r21, 0x08	; 8
   1c1fe:	67 2d       	mov	r22, r7
   1c200:	89 ee       	ldi	r24, 0xE9	; 233
   1c202:	97 e0       	ldi	r25, 0x07	; 7
   1c204:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1c208:	c4 01       	movw	r24, r8
   1c20a:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c20e:	4a e0       	ldi	r20, 0x0A	; 10
   1c210:	b5 01       	movw	r22, r10
   1c212:	90 e0       	ldi	r25, 0x00	; 0
   1c214:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2887
      itoa(thermostat_ring_get_asociate_tds(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "input", payload);
   1c218:	95 01       	movw	r18, r10
   1c21a:	4f eb       	ldi	r20, 0xBF	; 191
   1c21c:	56 e0       	ldi	r21, 0x06	; 6
   1c21e:	67 2d       	mov	r22, r7
   1c220:	89 ee       	ldi	r24, 0xE9	; 233
   1c222:	97 e0       	ldi	r25, 0x07	; 7
   1c224:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1c228:	c4 01       	movw	r24, r8
   1c22a:	03 96       	adiw	r24, 0x03	; 3
   1c22c:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c230:	4a e0       	ldi	r20, 0x0A	; 10
   1c232:	b5 01       	movw	r22, r10
   1c234:	90 e0       	ldi	r25, 0x00	; 0
   1c236:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   1c23a:	95 01       	movw	r18, r10
   1c23c:	45 ec       	ldi	r20, 0xC5	; 197
   1c23e:	56 e0       	ldi	r21, 0x06	; 6
   1c240:	67 2d       	mov	r22, r7
   1c242:	89 ee       	ldi	r24, 0xE9	; 233
   1c244:	97 e0       	ldi	r25, 0x07	; 7
   1c246:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
thermostat_ring_get_status_data():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   1c24a:	c4 01       	movw	r24, r8
   1c24c:	04 97       	sbiw	r24, 0x04	; 4
   1c24e:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c252:	4a e0       	ldi	r20, 0x0A	; 10
   1c254:	b5 01       	movw	r22, r10
   1c256:	90 e0       	ldi	r25, 0x00	; 0
   1c258:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2892

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   1c25c:	95 01       	movw	r18, r10
   1c25e:	4b e7       	ldi	r20, 0x7B	; 123
   1c260:	58 e0       	ldi	r21, 0x08	; 8
   1c262:	67 2d       	mov	r22, r7
   1c264:	89 ee       	ldi	r24, 0xE9	; 233
   1c266:	97 e0       	ldi	r25, 0x07	; 7
   1c268:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2894

      itoa(last_output_update[idx], payload, 10);
   1c26c:	f8 01       	movw	r30, r16
   1c26e:	e8 57       	subi	r30, 0x78	; 120
   1c270:	f4 4f       	sbci	r31, 0xF4	; 244
   1c272:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c274:	4a e0       	ldi	r20, 0x0A	; 10
   1c276:	b5 01       	movw	r22, r10
   1c278:	90 e0       	ldi	r25, 0x00	; 0
   1c27a:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2895
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   1c27e:	95 01       	movw	r18, r10
   1c280:	48 e8       	ldi	r20, 0x88	; 136
   1c282:	58 e0       	ldi	r21, 0x08	; 8
   1c284:	67 2d       	mov	r22, r7
   1c286:	89 ee       	ldi	r24, 0xE9	; 233
   1c288:	97 e0       	ldi	r25, 0x07	; 7
   1c28a:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1c28e:	0f 5f       	subi	r16, 0xFF	; 255
   1c290:	1f 4f       	sbci	r17, 0xFF	; 255
   1c292:	31 e2       	ldi	r19, 0x21	; 33
   1c294:	83 0e       	add	r8, r19
   1c296:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2868
  /thermctl-out/XXXXX/ring/ID/output
*/
void send_mqtt_ring(void)
{
  char payload[64];
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1c298:	41 e0       	ldi	r20, 0x01	; 1
   1c29a:	84 16       	cp	r8, r20
   1c29c:	42 e0       	ldi	r20, 0x02	; 2
   1c29e:	94 06       	cpc	r9, r20
   1c2a0:	09 f0       	breq	.+2      	; 0x1c2a4 <main+0xaf0>
   1c2a2:	28 cf       	rjmp	.-432    	; 0x1c0f4 <main+0x940>
   1c2a4:	be ec       	ldi	r27, 0xCE	; 206
   1c2a6:	6b 2e       	mov	r6, r27
   1c2a8:	bb e0       	ldi	r27, 0x0B	; 11
   1c2aa:	7b 2e       	mov	r7, r27
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1c2ac:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1 && status_tds18s20[id].online == True)
      {
        tt = status_tds18s20[id].temp / 10;
   1c2ae:	0a e0       	ldi	r16, 0x0A	; 10
   1c2b0:	80 2e       	mov	r8, r16
   1c2b2:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
        tt = status_tds18s20[id].online;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
        payload[0] = 0;
        createString(payload, ':', tds.rom, 8, 16);
   1c2b4:	81 e4       	ldi	r24, 0x41	; 65
   1c2b6:	48 2e       	mov	r4, r24
   1c2b8:	51 2c       	mov	r5, r1
   1c2ba:	4c 0e       	add	r4, r28
   1c2bc:	5d 1e       	adc	r5, r29
   1c2be:	5f ef       	ldi	r21, 0xFF	; 255
   1c2c0:	45 1a       	sub	r4, r21
   1c2c2:	55 0a       	sbc	r5, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   1c2c4:	be 01       	movw	r22, r28
   1c2c6:	6f 5b       	subi	r22, 0xBF	; 191
   1c2c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2ca:	81 2f       	mov	r24, r17
   1c2cc:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1c2d0:	81 30       	cpi	r24, 0x01	; 1
   1c2d2:	09 f0       	breq	.+2      	; 0x1c2d6 <main+0xb22>
   1c2d4:	ab c0       	rjmp	.+342    	; 0x1c42c <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
      if (tds.used == 1 && status_tds18s20[id].online == True)
   1c2d6:	22 96       	adiw	r28, 0x02	; 2
   1c2d8:	8f ad       	ldd	r24, Y+63	; 0x3f
   1c2da:	22 97       	sbiw	r28, 0x02	; 2
   1c2dc:	81 30       	cpi	r24, 0x01	; 1
   1c2de:	09 f0       	breq	.+2      	; 0x1c2e2 <main+0xb2e>
   1c2e0:	a5 c0       	rjmp	.+330    	; 0x1c42c <main+0xc78>
   1c2e2:	f3 01       	movw	r30, r6
   1c2e4:	83 8d       	ldd	r24, Z+27	; 0x1b
   1c2e6:	81 30       	cpi	r24, 0x01	; 1
   1c2e8:	09 f0       	breq	.+2      	; 0x1c2ec <main+0xb38>
   1c2ea:	a0 c0       	rjmp	.+320    	; 0x1c42c <main+0xc78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2918
      {
        tt = status_tds18s20[id].temp / 10;
   1c2ec:	85 81       	ldd	r24, Z+5	; 0x05
   1c2ee:	96 81       	ldd	r25, Z+6	; 0x06
   1c2f0:	b4 01       	movw	r22, r8
   1c2f2:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1c2f6:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c2f8:	4a e0       	ldi	r20, 0x0A	; 10
   1c2fa:	b5 01       	movw	r22, r10
   1c2fc:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2920
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   1c300:	95 01       	movw	r18, r10
   1c302:	46 e9       	ldi	r20, 0x96	; 150
   1c304:	58 e0       	ldi	r21, 0x08	; 8
   1c306:	61 2f       	mov	r22, r17
   1c308:	80 ef       	ldi	r24, 0xF0	; 240
   1c30a:	93 e0       	ldi	r25, 0x03	; 3
   1c30c:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1c310:	30 e0       	ldi	r19, 0x00	; 0
   1c312:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2921
        avg = 0;
   1c314:	60 e0       	ldi	r22, 0x00	; 0
   1c316:	70 e0       	ldi	r23, 0x00	; 0
   1c318:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
        for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   1c31a:	f9 01       	movw	r30, r18
   1c31c:	ee 0f       	add	r30, r30
   1c31e:	ff 1f       	adc	r31, r31
   1c320:	e6 0d       	add	r30, r6
   1c322:	f7 1d       	adc	r31, r7
   1c324:	c7 80       	ldd	r12, Z+7	; 0x07
   1c326:	d0 84       	ldd	r13, Z+8	; 0x08
   1c328:	0d 2c       	mov	r0, r13
   1c32a:	00 0c       	add	r0, r0
   1c32c:	ee 08       	sbc	r14, r14
   1c32e:	ff 08       	sbc	r15, r15
   1c330:	6c 0d       	add	r22, r12
   1c332:	7d 1d       	adc	r23, r13
   1c334:	8e 1d       	adc	r24, r14
   1c336:	9f 1d       	adc	r25, r15
   1c338:	2f 5f       	subi	r18, 0xFF	; 255
   1c33a:	3f 4f       	sbci	r19, 0xFF	; 255
   1c33c:	2a 30       	cpi	r18, 0x0A	; 10
   1c33e:	31 05       	cpc	r19, r1
   1c340:	61 f7       	brne	.-40     	; 0x1c31a <main+0xb66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
        avg = avg / MAX_AVG_TEMP;
        avg = avg / 10;
   1c342:	24 e6       	ldi	r18, 0x64	; 100
   1c344:	30 e0       	ldi	r19, 0x00	; 0
   1c346:	40 e0       	ldi	r20, 0x00	; 0
   1c348:	50 e0       	ldi	r21, 0x00	; 0
   1c34a:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1c34e:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c350:	4a e0       	ldi	r20, 0x0A	; 10
   1c352:	b5 01       	movw	r22, r10
   1c354:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2926
        itoa(avg, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   1c358:	95 01       	movw	r18, r10
   1c35a:	4b e9       	ldi	r20, 0x9B	; 155
   1c35c:	58 e0       	ldi	r21, 0x08	; 8
   1c35e:	61 2f       	mov	r22, r17
   1c360:	80 ef       	ldi	r24, 0xF0	; 240
   1c362:	93 e0       	ldi	r25, 0x03	; 3
   1c364:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928

        strcpy(payload, tds.name);
   1c368:	c5 54       	subi	r28, 0x45	; 69
   1c36a:	df 4f       	sbci	r29, 0xFF	; 255
   1c36c:	68 81       	ld	r22, Y
   1c36e:	79 81       	ldd	r23, Y+1	; 0x01
   1c370:	cb 5b       	subi	r28, 0xBB	; 187
   1c372:	d0 40       	sbci	r29, 0x00	; 0
   1c374:	c5 01       	movw	r24, r10
   1c376:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   1c37a:	95 01       	movw	r18, r10
   1c37c:	4a ee       	ldi	r20, 0xEA	; 234
   1c37e:	53 e0       	ldi	r21, 0x03	; 3
   1c380:	61 2f       	mov	r22, r17
   1c382:	80 ef       	ldi	r24, 0xF0	; 240
   1c384:	93 e0       	ldi	r25, 0x03	; 3
   1c386:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c38a:	4a e0       	ldi	r20, 0x0A	; 10
   1c38c:	b5 01       	movw	r22, r10
   1c38e:	2d 96       	adiw	r28, 0x0d	; 13
   1c390:	8e ad       	ldd	r24, Y+62	; 0x3e
   1c392:	9f ad       	ldd	r25, Y+63	; 0x3f
   1c394:	2d 97       	sbiw	r28, 0x0d	; 13
   1c396:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2932
        tt = tds.offset;
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   1c39a:	95 01       	movw	r18, r10
   1c39c:	49 e1       	ldi	r20, 0x19	; 25
   1c39e:	58 e0       	ldi	r21, 0x08	; 8
   1c3a0:	61 2f       	mov	r22, r17
   1c3a2:	80 ef       	ldi	r24, 0xF0	; 240
   1c3a4:	93 e0       	ldi	r25, 0x03	; 3
   1c3a6:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2933
        tt = status_tds18s20[id].online;
   1c3aa:	f3 01       	movw	r30, r6
   1c3ac:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c3ae:	4a e0       	ldi	r20, 0x0A	; 10
   1c3b0:	b5 01       	movw	r22, r10
   1c3b2:	90 e0       	ldi	r25, 0x00	; 0
   1c3b4:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   1c3b8:	95 01       	movw	r18, r10
   1c3ba:	44 ea       	ldi	r20, 0xA4	; 164
   1c3bc:	58 e0       	ldi	r21, 0x08	; 8
   1c3be:	61 2f       	mov	r22, r17
   1c3c0:	80 ef       	ldi	r24, 0xF0	; 240
   1c3c2:	93 e0       	ldi	r25, 0x03	; 3
   1c3c4:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2936
        payload[0] = 0;
   1c3c8:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
        createString(payload, ':', tds.rom, 8, 16);
   1c3ca:	00 e1       	ldi	r16, 0x10	; 16
   1c3cc:	28 e0       	ldi	r18, 0x08	; 8
   1c3ce:	a2 01       	movw	r20, r4
   1c3d0:	6a e3       	ldi	r22, 0x3A	; 58
   1c3d2:	c5 01       	movw	r24, r10
   1c3d4:	0e 94 3b 7e 	call	0xfc76	; 0xfc76 <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2938
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   1c3d8:	95 01       	movw	r18, r10
   1c3da:	47 e5       	ldi	r20, 0x57	; 87
   1c3dc:	57 e0       	ldi	r21, 0x07	; 7
   1c3de:	61 2f       	mov	r22, r17
   1c3e0:	80 ef       	ldi	r24, 0xF0	; 240
   1c3e2:	93 e0       	ldi	r25, 0x03	; 3
   1c3e4:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2939
        tt = tds.period;
   1c3e8:	66 96       	adiw	r28, 0x16	; 22
   1c3ea:	8f ad       	ldd	r24, Y+63	; 0x3f
   1c3ec:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c3ee:	4a e0       	ldi	r20, 0x0A	; 10
   1c3f0:	b5 01       	movw	r22, r10
   1c3f2:	90 e0       	ldi	r25, 0x00	; 0
   1c3f4:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2941
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   1c3f8:	95 01       	movw	r18, r10
   1c3fa:	40 e9       	ldi	r20, 0x90	; 144
   1c3fc:	56 e0       	ldi	r21, 0x06	; 6
   1c3fe:	61 2f       	mov	r22, r17
   1c400:	80 ef       	ldi	r24, 0xF0	; 240
   1c402:	93 e0       	ldi	r25, 0x03	; 3
   1c404:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943

        tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   1c408:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1c40c:	f3 01       	movw	r30, r6
   1c40e:	94 8d       	ldd	r25, Z+28	; 0x1c
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c410:	4a e0       	ldi	r20, 0x0A	; 10
   1c412:	b5 01       	movw	r22, r10
   1c414:	89 1b       	sub	r24, r25
   1c416:	99 0b       	sbc	r25, r25
   1c418:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
        itoa(tt, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   1c41c:	95 01       	movw	r18, r10
   1c41e:	4b ea       	ldi	r20, 0xAB	; 171
   1c420:	58 e0       	ldi	r21, 0x08	; 8
   1c422:	61 2f       	mov	r22, r17
   1c424:	80 ef       	ldi	r24, 0xF0	; 240
   1c426:	93 e0       	ldi	r25, 0x03	; 3
   1c428:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2914
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1c42c:	1f 5f       	subi	r17, 0xFF	; 255
   1c42e:	fe e1       	ldi	r31, 0x1E	; 30
   1c430:	6f 0e       	add	r6, r31
   1c432:	71 1c       	adc	r7, r1
   1c434:	16 30       	cpi	r17, 0x06	; 6
   1c436:	09 f0       	breq	.+2      	; 0x1c43a <main+0xc86>
   1c438:	45 cf       	rjmp	.-374    	; 0x1c2c4 <main+0xb10>
   1c43a:	51 2c       	mov	r5, r1
   1c43c:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1c43e:	91 2c       	mov	r9, r1
   1c440:	9e 01       	movw	r18, r28
   1c442:	2f 5f       	subi	r18, 0xFF	; 255
   1c444:	3f 4f       	sbci	r19, 0xFF	; 255
   1c446:	19 01       	movw	r2, r18
   1c448:	ae 01       	movw	r20, r28
   1c44a:	45 5f       	subi	r20, 0xF5	; 245
   1c44c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c44e:	c1 55       	subi	r28, 0x51	; 81
   1c450:	df 4f       	sbci	r29, 0xFF	; 255
   1c452:	59 83       	std	Y+1, r21	; 0x01
   1c454:	48 83       	st	Y, r20
   1c456:	cf 5a       	subi	r28, 0xAF	; 175
   1c458:	d0 40       	sbci	r29, 0x00	; 0
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1c45a:	f6 e0       	ldi	r31, 0x06	; 6
   1c45c:	8f 2e       	mov	r8, r31
thermostat_program_get_active():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:291
  }
}
//// globalni povoleni programu a nastaveni rezimu
uint8_t thermostat_program_get_active(uint8_t program_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
   1c45e:	c2 01       	movw	r24, r4
   1c460:	8f 50       	subi	r24, 0x0F	; 15
   1c462:	9e 4f       	sbci	r25, 0xFE	; 254
   1c464:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1c468:	f8 2e       	mov	r15, r24
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
  {
    act = thermostat_program_get_active(idx);
    if ( act != PROG_FREE)
   1c46a:	5f ef       	ldi	r21, 0xFF	; 255
   1c46c:	85 17       	cp	r24, r21
   1c46e:	09 f4       	brne	.+2      	; 0x1c472 <main+0xcbe>
   1c470:	0a c1       	rjmp	.+532    	; 0x1c686 <main+0xed2>
   1c472:	81 01       	movw	r16, r2
thermostat_program_get_name():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:274
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    t = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name);
   1c474:	32 01       	movw	r6, r4
   1c476:	62 18       	sub	r6, r2
   1c478:	73 08       	sbc	r7, r3
   1c47a:	6c ec       	ldi	r22, 0xCC	; 204
   1c47c:	66 1a       	sub	r6, r22
   1c47e:	6d ef       	ldi	r22, 0xFD	; 253
   1c480:	76 0a       	sbc	r7, r22
   1c482:	c3 01       	movw	r24, r6
   1c484:	80 0f       	add	r24, r16
   1c486:	91 1f       	adc	r25, r17
   1c488:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:275
    name[i] = t;
   1c48c:	f8 01       	movw	r30, r16
   1c48e:	81 93       	st	Z+, r24
   1c490:	8f 01       	movw	r16, r30
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:276
    if (t == 0) break;
   1c492:	88 23       	and	r24, r24
   1c494:	49 f0       	breq	.+18     	; 0x1c4a8 <main+0xcf4>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:272
//// NASTAVENI PROGRAMU /////////////////////////////////
//// ziska pojmenovani programu
void thermostat_program_get_name(uint8_t program_id, char *name)
{
  uint8_t t = 0;
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
   1c496:	c1 55       	subi	r28, 0x51	; 81
   1c498:	df 4f       	sbci	r29, 0xFF	; 255
   1c49a:	28 81       	ld	r18, Y
   1c49c:	39 81       	ldd	r19, Y+1	; 0x01
   1c49e:	cf 5a       	subi	r28, 0xAF	; 175
   1c4a0:	d0 40       	sbci	r29, 0x00	; 0
   1c4a2:	2e 17       	cp	r18, r30
   1c4a4:	3f 07       	cpc	r19, r31
   1c4a6:	69 f7       	brne	.-38     	; 0x1c482 <main+0xcce>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2968
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
   1c4a8:	95 01       	movw	r18, r10
   1c4aa:	4a ee       	ldi	r20, 0xEA	; 234
   1c4ac:	53 e0       	ldi	r21, 0x03	; 3
   1c4ae:	69 2d       	mov	r22, r9
   1c4b0:	84 eb       	ldi	r24, 0xB4	; 180
   1c4b2:	98 e0       	ldi	r25, 0x08	; 8
   1c4b4:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c4b8:	4a e0       	ldi	r20, 0x0A	; 10
   1c4ba:	b5 01       	movw	r22, r10
   1c4bc:	8f 2d       	mov	r24, r15
   1c4be:	90 e0       	ldi	r25, 0x00	; 0
   1c4c0:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
   1c4c4:	95 01       	movw	r18, r10
   1c4c6:	44 ef       	ldi	r20, 0xF4	; 244
   1c4c8:	53 e0       	ldi	r21, 0x03	; 3
   1c4ca:	69 2d       	mov	r22, r9
   1c4cc:	84 eb       	ldi	r24, 0xB4	; 180
   1c4ce:	98 e0       	ldi	r25, 0x08	; 8
   1c4d0:	0e 94 96 bb 	call	0x1772c	; 0x1772c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.153]>
   1c4d4:	71 2c       	mov	r7, r1
   1c4d6:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1c4d8:	a2 01       	movw	r20, r4
   1c4da:	4e 50       	subi	r20, 0x0E	; 14
   1c4dc:	5e 4f       	sbci	r21, 0xFE	; 254
   1c4de:	cd 54       	subi	r28, 0x4D	; 77
   1c4e0:	df 4f       	sbci	r29, 0xFF	; 255
   1c4e2:	59 83       	std	Y+1, r21	; 0x01
   1c4e4:	48 83       	st	Y, r20
   1c4e6:	c3 5b       	subi	r28, 0xB3	; 179
   1c4e8:	d0 40       	sbci	r29, 0x00	; 0
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2973
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
      {
        thermostat_program_get_time(idx, progid, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1c4ea:	be 01       	movw	r22, r28
   1c4ec:	6f 57       	subi	r22, 0x7F	; 127
   1c4ee:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4f0:	6b 01       	movw	r12, r22
   1c4f2:	ce 01       	movw	r24, r28
   1c4f4:	8c 55       	subi	r24, 0x5C	; 92
   1c4f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4f8:	7c 01       	movw	r14, r24
   1c4fa:	8e 01       	movw	r16, r28
   1c4fc:	04 55       	subi	r16, 0x54	; 84
   1c4fe:	1f 4f       	sbci	r17, 0xFF	; 255
   1c500:	9e 01       	movw	r18, r28
   1c502:	23 55       	subi	r18, 0x53	; 83
   1c504:	3f 4f       	sbci	r19, 0xFF	; 255
   1c506:	ae 01       	movw	r20, r28
   1c508:	42 55       	subi	r20, 0x52	; 82
   1c50a:	5f 4f       	sbci	r21, 0xFF	; 255
   1c50c:	66 2d       	mov	r22, r6
   1c50e:	89 2d       	mov	r24, r9
   1c510:	0e 94 0e 70 	call	0xe01c	; 0xe01c <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
        if (active == 1)
   1c514:	cf 57       	subi	r28, 0x7F	; 127
   1c516:	df 4f       	sbci	r29, 0xFF	; 255
   1c518:	88 81       	ld	r24, Y
   1c51a:	c1 58       	subi	r28, 0x81	; 129
   1c51c:	d0 40       	sbci	r29, 0x00	; 0
   1c51e:	81 30       	cpi	r24, 0x01	; 1
   1c520:	09 f0       	breq	.+2      	; 0x1c524 <main+0xd70>
   1c522:	a9 c0       	rjmp	.+338    	; 0x1c676 <main+0xec2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
        {
          itoa(start_hour, tmp1, 10);
   1c524:	c2 55       	subi	r28, 0x52	; 82
   1c526:	df 4f       	sbci	r29, 0xFF	; 255
   1c528:	88 81       	ld	r24, Y
   1c52a:	ce 5a       	subi	r28, 0xAE	; 174
   1c52c:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c52e:	4a e0       	ldi	r20, 0x0A	; 10
   1c530:	be 01       	movw	r22, r28
   1c532:	6f 5b       	subi	r22, 0xBF	; 191
   1c534:	7f 4f       	sbci	r23, 0xFF	; 255
   1c536:	90 e0       	ldi	r25, 0x00	; 0
   1c538:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
          strcpy(payload, tmp1);
   1c53c:	be 01       	movw	r22, r28
   1c53e:	6f 5b       	subi	r22, 0xBF	; 191
   1c540:	7f 4f       	sbci	r23, 0xFF	; 255
   1c542:	c5 01       	movw	r24, r10
   1c544:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2978
          strcat(payload, ",");
   1c548:	6e e5       	ldi	r22, 0x5E	; 94
   1c54a:	75 e0       	ldi	r23, 0x05	; 5
   1c54c:	c5 01       	movw	r24, r10
   1c54e:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
          itoa(start_min, tmp1, 10);
   1c552:	c3 55       	subi	r28, 0x53	; 83
   1c554:	df 4f       	sbci	r29, 0xFF	; 255
   1c556:	88 81       	ld	r24, Y
   1c558:	cd 5a       	subi	r28, 0xAD	; 173
   1c55a:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c55c:	4a e0       	ldi	r20, 0x0A	; 10
   1c55e:	be 01       	movw	r22, r28
   1c560:	6f 5b       	subi	r22, 0xBF	; 191
   1c562:	7f 4f       	sbci	r23, 0xFF	; 255
   1c564:	90 e0       	ldi	r25, 0x00	; 0
   1c566:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
          strcat(payload, tmp1);
   1c56a:	be 01       	movw	r22, r28
   1c56c:	6f 5b       	subi	r22, 0xBF	; 191
   1c56e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c570:	c5 01       	movw	r24, r10
   1c572:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
          strcat(payload, ",");
   1c576:	6e e5       	ldi	r22, 0x5E	; 94
   1c578:	75 e0       	ldi	r23, 0x05	; 5
   1c57a:	c5 01       	movw	r24, r10
   1c57c:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
          itoa(stop_hour, tmp1, 10);
   1c580:	c4 55       	subi	r28, 0x54	; 84
   1c582:	df 4f       	sbci	r29, 0xFF	; 255
   1c584:	88 81       	ld	r24, Y
   1c586:	cc 5a       	subi	r28, 0xAC	; 172
   1c588:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c58a:	4a e0       	ldi	r20, 0x0A	; 10
   1c58c:	be 01       	movw	r22, r28
   1c58e:	6f 5b       	subi	r22, 0xBF	; 191
   1c590:	7f 4f       	sbci	r23, 0xFF	; 255
   1c592:	90 e0       	ldi	r25, 0x00	; 0
   1c594:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2983
          strcat(payload, tmp1);
   1c598:	be 01       	movw	r22, r28
   1c59a:	6f 5b       	subi	r22, 0xBF	; 191
   1c59c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c59e:	c5 01       	movw	r24, r10
   1c5a0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2984
          strcat(payload, ",");
   1c5a4:	6e e5       	ldi	r22, 0x5E	; 94
   1c5a6:	75 e0       	ldi	r23, 0x05	; 5
   1c5a8:	c5 01       	movw	r24, r10
   1c5aa:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2985
          itoa(stop_min, tmp1, 10);
   1c5ae:	cc 55       	subi	r28, 0x5C	; 92
   1c5b0:	df 4f       	sbci	r29, 0xFF	; 255
   1c5b2:	88 81       	ld	r24, Y
   1c5b4:	c4 5a       	subi	r28, 0xA4	; 164
   1c5b6:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c5b8:	4a e0       	ldi	r20, 0x0A	; 10
   1c5ba:	be 01       	movw	r22, r28
   1c5bc:	6f 5b       	subi	r22, 0xBF	; 191
   1c5be:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5c0:	90 e0       	ldi	r25, 0x00	; 0
   1c5c2:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2986
          strcat(payload, tmp1);
   1c5c6:	be 01       	movw	r22, r28
   1c5c8:	6f 5b       	subi	r22, 0xBF	; 191
   1c5ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5cc:	c5 01       	movw	r24, r10
   1c5ce:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2987
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "time", payload);
   1c5d2:	95 01       	movw	r18, r10
   1c5d4:	45 ee       	ldi	r20, 0xE5	; 229
   1c5d6:	56 e0       	ldi	r21, 0x06	; 6
   1c5d8:	66 2d       	mov	r22, r6
   1c5da:	89 2d       	mov	r24, r9
   1c5dc:	0e 94 1f bc 	call	0x1783e	; 0x1783e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
          itoa(active, tmp1, 10);
   1c5e0:	cf 57       	subi	r28, 0x7F	; 127
   1c5e2:	df 4f       	sbci	r29, 0xFF	; 255
   1c5e4:	88 81       	ld	r24, Y
   1c5e6:	c1 58       	subi	r28, 0x81	; 129
   1c5e8:	d0 40       	sbci	r29, 0x00	; 0
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c5ea:	4a e0       	ldi	r20, 0x0A	; 10
   1c5ec:	be 01       	movw	r22, r28
   1c5ee:	6f 5b       	subi	r22, 0xBF	; 191
   1c5f0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5f2:	90 e0       	ldi	r25, 0x00	; 0
   1c5f4:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
          strcpy(payload, tmp1);
   1c5f8:	be 01       	movw	r22, r28
   1c5fa:	6f 5b       	subi	r22, 0xBF	; 191
   1c5fc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5fe:	c5 01       	movw	r24, r10
   1c600:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "active", payload);
   1c604:	95 01       	movw	r18, r10
   1c606:	44 ef       	ldi	r20, 0xF4	; 244
   1c608:	53 e0       	ldi	r21, 0x03	; 3
   1c60a:	66 2d       	mov	r22, r6
   1c60c:	89 2d       	mov	r24, r9
   1c60e:	0e 94 1f bc 	call	0x1783e	; 0x1783e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
          itoa(thermostat_program_get_threshold(idx, progid), tmp1, 10);
   1c612:	66 2d       	mov	r22, r6
   1c614:	89 2d       	mov	r24, r9
   1c616:	0e 94 ec 6f 	call	0xdfd8	; 0xdfd8 <thermostat_program_get_threshold(unsigned char, unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c61a:	4a e0       	ldi	r20, 0x0A	; 10
   1c61c:	be 01       	movw	r22, r28
   1c61e:	6f 5b       	subi	r22, 0xBF	; 191
   1c620:	7f 4f       	sbci	r23, 0xFF	; 255
   1c622:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2992
          strcpy(payload, tmp1);
   1c626:	be 01       	movw	r22, r28
   1c628:	6f 5b       	subi	r22, 0xBF	; 191
   1c62a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c62c:	c5 01       	movw	r24, r10
   1c62e:	0e 94 47 fb 	call	0x1f68e	; 0x1f68e <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "threshold", payload);
   1c632:	95 01       	movw	r18, r10
   1c634:	47 e9       	ldi	r20, 0x97	; 151
   1c636:	56 e0       	ldi	r21, 0x06	; 6
   1c638:	66 2d       	mov	r22, r6
   1c63a:	89 2d       	mov	r24, r9
   1c63c:	0e 94 1f bc 	call	0x1783e	; 0x1783e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
   1c640:	86 9c       	mul	r8, r6
   1c642:	c0 01       	movw	r24, r0
   1c644:	87 9c       	mul	r8, r7
   1c646:	90 0d       	add	r25, r0
   1c648:	11 24       	eor	r1, r1
   1c64a:	cd 54       	subi	r28, 0x4D	; 77
   1c64c:	df 4f       	sbci	r29, 0xFF	; 255
   1c64e:	e8 81       	ld	r30, Y
   1c650:	f9 81       	ldd	r31, Y+1	; 0x01
   1c652:	c3 5b       	subi	r28, 0xB3	; 179
   1c654:	d0 40       	sbci	r29, 0x00	; 0
   1c656:	8e 0f       	add	r24, r30
   1c658:	9f 1f       	adc	r25, r31
   1c65a:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1c65e:	4a e0       	ldi	r20, 0x0A	; 10
   1c660:	b5 01       	movw	r22, r10
   1c662:	90 e0       	ldi	r25, 0x00	; 0
   1c664:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
send_mqtt_program():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
          itoa(thermostat_program_get_week(idx, progid), payload, 10);
          send_mqtt_message_prefix_id_idx_topic_payload(&mqtt_client, "prog_interval", idx, progid, "week", payload);
   1c668:	95 01       	movw	r18, r10
   1c66a:	49 eb       	ldi	r20, 0xB9	; 185
   1c66c:	58 e0       	ldi	r21, 0x08	; 8
   1c66e:	66 2d       	mov	r22, r6
   1c670:	89 2d       	mov	r24, r9
   1c672:	0e 94 1f bc 	call	0x1783e	; 0x1783e <send_mqtt_message_prefix_id_idx_topic_payload(PubSubClient*, char*, unsigned char, unsigned char, char*, char*) [clone .constprop.151]>
   1c676:	ff ef       	ldi	r31, 0xFF	; 255
   1c678:	6f 1a       	sub	r6, r31
   1c67a:	7f 0a       	sbc	r7, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2971
    {
      thermostat_program_get_name(idx, payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "name", payload);
      itoa(act, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "prog", idx, "active", payload);
      for (uint8_t progid = 0 ; progid < MAX_PROGRAM_INTERVAL; progid++)
   1c67c:	2b e0       	ldi	r18, 0x0B	; 11
   1c67e:	62 16       	cp	r6, r18
   1c680:	71 04       	cpc	r7, r1
   1c682:	09 f0       	breq	.+2      	; 0x1c686 <main+0xed2>
   1c684:	32 cf       	rjmp	.-412    	; 0x1c4ea <main+0xd36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
{
  char payload[64];
  char tmp1[6];
  uint8_t act = 0;
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
   1c686:	93 94       	inc	r9
   1c688:	3d e4       	ldi	r19, 0x4D	; 77
   1c68a:	43 0e       	add	r4, r19
   1c68c:	51 1c       	adc	r5, r1
   1c68e:	48 e0       	ldi	r20, 0x08	; 8
   1c690:	94 12       	cpse	r9, r20
   1c692:	e5 ce       	rjmp	.-566    	; 0x1c45e <main+0xcaa>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3276
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
  uint8_t te = 0;
  uint8_t prg = 0;
  uint8_t act;
  uint8_t active = 0;
   1c694:	c2 55       	subi	r28, 0x52	; 82
   1c696:	df 4f       	sbci	r29, 0xFF	; 255
   1c698:	18 82       	st	Y, r1
   1c69a:	ce 5a       	subi	r28, 0xAE	; 174
   1c69c:	d0 40       	sbci	r29, 0x00	; 0
   1c69e:	7c e5       	ldi	r23, 0x5C	; 92
   1c6a0:	27 2e       	mov	r2, r23
   1c6a2:	33 24       	eor	r3, r3
   1c6a4:	33 94       	inc	r3
   1c6a6:	51 2c       	mov	r5, r1
   1c6a8:	41 2c       	mov	r4, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3272
{
  uint8_t tdsid = 0;
  uint8_t tmode = 0;
  uint8_t tout = 0;
  int16_t thresh = 0;
  uint8_t pwm = 200; // start hodnota
   1c6aa:	e8 ec       	ldi	r30, 0xC8	; 200
   1c6ac:	9e 2e       	mov	r9, r30
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   1c6ae:	c1 01       	movw	r24, r2
   1c6b0:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1c6b4:	a8 2e       	mov	r10, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3283


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
  {
    tdsid = thermostat_ring_get_asociate_tds(tix);
    tmode = thermostat_ring_get_mode(tix);
   1c6b6:	84 2d       	mov	r24, r4
   1c6b8:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <thermostat_ring_get_mode(unsigned char)>
   1c6bc:	78 2e       	mov	r7, r24
thermostat_ring_get_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   1c6be:	c1 01       	movw	r24, r2
   1c6c0:	03 96       	adiw	r24, 0x03	; 3
   1c6c2:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1c6c6:	b8 2e       	mov	r11, r24
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3285
    tout = thermostat_ring_get_output(tix);
    thresh = thermostat_ring_get_mezni(tix);
   1c6c8:	84 2d       	mov	r24, r4
   1c6ca:	0e 94 69 70 	call	0xe0d2	; 0xe0d2 <thermostat_ring_get_mezni(unsigned char)>
   1c6ce:	cd 54       	subi	r28, 0x4D	; 77
   1c6d0:	df 4f       	sbci	r29, 0xFF	; 255
   1c6d2:	99 83       	std	Y+1, r25	; 0x01
   1c6d4:	88 83       	st	Y, r24
   1c6d6:	c3 5b       	subi	r28, 0xB3	; 179
   1c6d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
    if (tmode == TERM_MODE_PROG)
   1c6da:	52 e0       	ldi	r21, 0x02	; 2
   1c6dc:	75 12       	cpse	r7, r21
   1c6de:	1c c5       	rjmp	.+2616   	; 0x1d118 <main+0x1964>
thermostat_ring_get_program_id():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   1c6e0:	c1 01       	movw	r24, r2
   1c6e2:	01 97       	sbiw	r24, 0x01	; 1
   1c6e4:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1c6e8:	88 2e       	mov	r8, r24
dayOfTheWeek():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:178
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
   1c6ea:	90 91 75 12 	lds	r25, 0x1275	; 0x801275 <now+0x1>
   1c6ee:	e8 e5       	ldi	r30, 0x58	; 88
   1c6f0:	f8 e8       	ldi	r31, 0x88	; 136
main():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1c6f2:	81 e0       	ldi	r24, 0x01	; 1
date2days():
   1c6f4:	89 17       	cp	r24, r25
   1c6f6:	20 f4       	brcc	.+8      	; 0x1c700 <main+0xf4c>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:60
        days += pgm_read_byte(daysInMonth + i - 1);
   1c6f8:	24 91       	lpm	r18, Z
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:59
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   1c6fa:	8f 5f       	subi	r24, 0xFF	; 255
   1c6fc:	31 96       	adiw	r30, 0x01	; 1
   1c6fe:	fa cf       	rjmp	.-12     	; 0x1c6f4 <main+0xf40>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:392
{
  uint8_t ret = PROG_FREE;
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
   1c700:	6f ef       	ldi	r22, 0xFF	; 255
   1c702:	86 16       	cp	r8, r22
   1c704:	09 f4       	brne	.+2      	; 0x1c708 <main+0xf54>
   1c706:	7f c0       	rjmp	.+254    	; 0x1c806 <main+0x1052>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1c708:	7d e4       	ldi	r23, 0x4D	; 77
   1c70a:	87 9e       	mul	r8, r23
   1c70c:	c0 01       	movw	r24, r0
   1c70e:	11 24       	eor	r1, r1
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:402
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
   1c710:	40 91 77 12 	lds	r20, 0x1277	; 0x801277 <now+0x3>
   1c714:	20 91 78 12 	lds	r18, 0x1278	; 0x801278 <now+0x4>
   1c718:	30 e0       	ldi	r19, 0x00	; 0
   1c71a:	f9 01       	movw	r30, r18
   1c71c:	5c e3       	ldi	r21, 0x3C	; 60
   1c71e:	45 9f       	mul	r20, r21
   1c720:	e0 0d       	add	r30, r0
   1c722:	f1 1d       	adc	r31, r1
   1c724:	11 24       	eor	r1, r1
   1c726:	cf 54       	subi	r28, 0x4F	; 79
   1c728:	df 4f       	sbci	r29, 0xFF	; 255
   1c72a:	f9 83       	std	Y+1, r31	; 0x01
   1c72c:	e8 83       	st	Y, r30
   1c72e:	c1 5b       	subi	r28, 0xB1	; 177
   1c730:	d0 40       	sbci	r29, 0x00	; 0
   1c732:	71 2c       	mov	r7, r1
   1c734:	61 2c       	mov	r6, r1
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1c736:	bc 01       	movw	r22, r24
   1c738:	6e 50       	subi	r22, 0x0E	; 14
   1c73a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c73c:	c7 54       	subi	r28, 0x47	; 71
   1c73e:	df 4f       	sbci	r29, 0xFF	; 255
   1c740:	79 83       	std	Y+1, r23	; 0x01
   1c742:	68 83       	st	Y, r22
   1c744:	c9 5b       	subi	r28, 0xB9	; 185
   1c746:	d0 40       	sbci	r29, 0x00	; 0
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:396
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
   1c748:	ce 01       	movw	r24, r28
   1c74a:	01 96       	adiw	r24, 0x01	; 1
   1c74c:	6c 01       	movw	r12, r24
   1c74e:	fe 01       	movw	r30, r28
   1c750:	ef 5b       	subi	r30, 0xBF	; 191
   1c752:	ff 4f       	sbci	r31, 0xFF	; 255
   1c754:	7f 01       	movw	r14, r30
   1c756:	8e 01       	movw	r16, r28
   1c758:	0c 55       	subi	r16, 0x5C	; 92
   1c75a:	1f 4f       	sbci	r17, 0xFF	; 255
   1c75c:	9e 01       	movw	r18, r28
   1c75e:	24 55       	subi	r18, 0x54	; 84
   1c760:	3f 4f       	sbci	r19, 0xFF	; 255
   1c762:	ae 01       	movw	r20, r28
   1c764:	43 55       	subi	r20, 0x53	; 83
   1c766:	5f 4f       	sbci	r21, 0xFF	; 255
   1c768:	66 2d       	mov	r22, r6
   1c76a:	88 2d       	mov	r24, r8
   1c76c:	0e 94 0e 70 	call	0xe01c	; 0xe01c <thermostat_program_get_time(unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:397
      if (active == 1)
   1c770:	89 81       	ldd	r24, Y+1	; 0x01
   1c772:	81 30       	cpi	r24, 0x01	; 1
   1c774:	09 f0       	breq	.+2      	; 0x1c778 <main+0xfc4>
   1c776:	c7 c4       	rjmp	.+2446   	; 0x1d106 <main+0x1952>
thermostat_program_get_week():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:366
}

//// ziska jakych dnech program plati
uint8_t thermostat_program_get_week(uint8_t program_id, uint8_t interval_id)
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
   1c778:	f6 e0       	ldi	r31, 0x06	; 6
   1c77a:	f6 9d       	mul	r31, r6
   1c77c:	c0 01       	movw	r24, r0
   1c77e:	f7 9d       	mul	r31, r7
   1c780:	90 0d       	add	r25, r0
   1c782:	11 24       	eor	r1, r1
   1c784:	c7 54       	subi	r28, 0x47	; 71
   1c786:	df 4f       	sbci	r29, 0xFF	; 255
   1c788:	28 81       	ld	r18, Y
   1c78a:	39 81       	ldd	r19, Y+1	; 0x01
   1c78c:	c9 5b       	subi	r28, 0xB9	; 185
   1c78e:	d0 40       	sbci	r29, 0x00	; 0
   1c790:	82 0f       	add	r24, r18
   1c792:	93 1f       	adc	r25, r19
   1c794:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:400
    {
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
   1c798:	c3 55       	subi	r28, 0x53	; 83
   1c79a:	df 4f       	sbci	r29, 0xFF	; 255
   1c79c:	98 81       	ld	r25, Y
   1c79e:	cd 5a       	subi	r28, 0xAD	; 173
   1c7a0:	d0 40       	sbci	r29, 0x00	; 0
   1c7a2:	c4 55       	subi	r28, 0x54	; 84
   1c7a4:	df 4f       	sbci	r29, 0xFF	; 255
   1c7a6:	28 81       	ld	r18, Y
   1c7a8:	cc 5a       	subi	r28, 0xAC	; 172
   1c7aa:	d0 40       	sbci	r29, 0x00	; 0
   1c7ac:	30 e0       	ldi	r19, 0x00	; 0
   1c7ae:	4c e3       	ldi	r20, 0x3C	; 60
   1c7b0:	94 9f       	mul	r25, r20
   1c7b2:	20 0d       	add	r18, r0
   1c7b4:	31 1d       	adc	r19, r1
   1c7b6:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_stop = stop_hour * 60 + stop_min;
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1c7b8:	cf 54       	subi	r28, 0x4F	; 79
   1c7ba:	df 4f       	sbci	r29, 0xFF	; 255
   1c7bc:	68 81       	ld	r22, Y
   1c7be:	79 81       	ldd	r23, Y+1	; 0x01
   1c7c0:	c1 5b       	subi	r28, 0xB1	; 177
   1c7c2:	d0 40       	sbci	r29, 0x00	; 0
   1c7c4:	62 17       	cp	r22, r18
   1c7c6:	73 07       	cpc	r23, r19
   1c7c8:	0c f4       	brge	.+2      	; 0x1c7cc <main+0x1018>
   1c7ca:	9d c4       	rjmp	.+2362   	; 0x1d106 <main+0x1952>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:401
      thermostat_program_get_time(program, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
      if (active == 1)
      {
        week = thermostat_program_get_week(program, interval_id);
        t_start = start_hour * 60 + start_min;
        t_stop = stop_hour * 60 + stop_min;
   1c7cc:	cc 55       	subi	r28, 0x5C	; 92
   1c7ce:	df 4f       	sbci	r29, 0xFF	; 255
   1c7d0:	98 81       	ld	r25, Y
   1c7d2:	c4 5a       	subi	r28, 0xA4	; 164
   1c7d4:	d0 40       	sbci	r29, 0x00	; 0
   1c7d6:	22 96       	adiw	r28, 0x02	; 2
   1c7d8:	2f ad       	ldd	r18, Y+63	; 0x3f
   1c7da:	22 97       	sbiw	r28, 0x02	; 2
   1c7dc:	30 e0       	ldi	r19, 0x00	; 0
   1c7de:	94 9f       	mul	r25, r20
   1c7e0:	20 0d       	add	r18, r0
   1c7e2:	31 1d       	adc	r19, r1
   1c7e4:	11 24       	eor	r1, r1
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:403
        t_now = now_hour * 60 + now_minute;
        if (t_now >= t_start && t_now < t_stop && (week & (1 << now_dayweek) != 0))
   1c7e6:	62 17       	cp	r22, r18
   1c7e8:	73 07       	cpc	r23, r19
   1c7ea:	0c f0       	brlt	.+2      	; 0x1c7ee <main+0x103a>
   1c7ec:	8c c4       	rjmp	.+2328   	; 0x1d106 <main+0x1952>
   1c7ee:	80 ff       	sbrs	r24, 0
   1c7f0:	8a c4       	rjmp	.+2324   	; 0x1d106 <main+0x1952>
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:405
        {
          *threshold = thermostat_program_get_threshold(program, interval_id);
   1c7f2:	66 2d       	mov	r22, r6
   1c7f4:	88 2d       	mov	r24, r8
   1c7f6:	0e 94 ec 6f 	call	0xdfd8	; 0xdfd8 <thermostat_program_get_threshold(unsigned char, unsigned char)>
   1c7fa:	cd 54       	subi	r28, 0x4D	; 77
   1c7fc:	df 4f       	sbci	r29, 0xFF	; 255
   1c7fe:	99 83       	std	Y+1, r25	; 0x01
   1c800:	88 83       	st	Y, r24
   1c802:	c3 5b       	subi	r28, 0xB3	; 179
   1c804:	d0 40       	sbci	r29, 0x00	; 0
thermostat_ring_set_state():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
   1c806:	f2 01       	movw	r30, r4
   1c808:	e3 57       	subi	r30, 0x73	; 115
   1c80a:	f4 4f       	sbci	r31, 0xF4	; 244
   1c80c:	10 82       	st	Z, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3303
            thermostat_ring_set_state(tix, TERM_STAV_STOP);
            thermostat_ring_set_power(tix, 0);
          }
        case PROG_NO_INTERVAL:
          {
            tmode = TERM_MODE_OFF;
   1c80e:	71 2c       	mov	r7, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3339

      thermostat_pid_setdirection_reverse(tix);
    }


    if (tdsid < HW_ONEWIRE_MAXROMS )
   1c810:	f5 e0       	ldi	r31, 0x05	; 5
   1c812:	fa 15       	cp	r31, r10
   1c814:	08 f4       	brcc	.+2      	; 0x1c818 <main+0x1064>
   1c816:	56 c0       	rjmp	.+172    	; 0x1c8c4 <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3341
    {
      if (get_tds18s20(tdsid, &tds) == 1)
   1c818:	be 01       	movw	r22, r28
   1c81a:	6f 57       	subi	r22, 0x7F	; 127
   1c81c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c81e:	8a 2d       	mov	r24, r10
   1c820:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
   1c824:	81 30       	cpi	r24, 0x01	; 1
   1c826:	09 f0       	breq	.+2      	; 0x1c82a <main+0x1076>
   1c828:	4d c0       	rjmp	.+154    	; 0x1c8c4 <main+0x1110>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
        if (tds.used == 1 && status_tds18s20[tdsid].online == True)
   1c82a:	cf 57       	subi	r28, 0x7F	; 127
   1c82c:	df 4f       	sbci	r29, 0xFF	; 255
   1c82e:	88 81       	ld	r24, Y
   1c830:	c1 58       	subi	r28, 0x81	; 129
   1c832:	d0 40       	sbci	r29, 0x00	; 0
   1c834:	81 30       	cpi	r24, 0x01	; 1
   1c836:	09 f0       	breq	.+2      	; 0x1c83a <main+0x1086>
   1c838:	91 c4       	rjmp	.+2338   	; 0x1d15c <main+0x19a8>
   1c83a:	2e e1       	ldi	r18, 0x1E	; 30
   1c83c:	a2 9e       	mul	r10, r18
   1c83e:	f0 01       	movw	r30, r0
   1c840:	11 24       	eor	r1, r1
   1c842:	e2 53       	subi	r30, 0x32	; 50
   1c844:	f4 4f       	sbci	r31, 0xF4	; 244
   1c846:	83 8d       	ldd	r24, Z+27	; 0x1b
   1c848:	81 30       	cpi	r24, 0x01	; 1
   1c84a:	09 f0       	breq	.+2      	; 0x1c84e <main+0x109a>
   1c84c:	87 c4       	rjmp	.+2318   	; 0x1d15c <main+0x19a8>
   1c84e:	82 01       	movw	r16, r4
   1c850:	00 0f       	add	r16, r16
   1c852:	11 1f       	adc	r17, r17
   1c854:	00 0f       	add	r16, r16
   1c856:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1c858:	a8 01       	movw	r20, r16
   1c85a:	4e 56       	subi	r20, 0x6E	; 110
   1c85c:	54 4f       	sbci	r21, 0xF4	; 244
   1c85e:	4a 01       	movw	r8, r20
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
        {
          thermostat_pid_input(tix, status_tds18s20[tdsid].temp / 100.0);
   1c860:	65 81       	ldd	r22, Z+5	; 0x05
   1c862:	76 81       	ldd	r23, Z+6	; 0x06
   1c864:	07 2e       	mov	r0, r23
   1c866:	00 0c       	add	r0, r0
   1c868:	88 0b       	sbc	r24, r24
   1c86a:	99 0b       	sbc	r25, r25
   1c86c:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1c870:	20 e0       	ldi	r18, 0x00	; 0
   1c872:	30 e0       	ldi	r19, 0x00	; 0
   1c874:	48 ec       	ldi	r20, 0xC8	; 200
   1c876:	52 e4       	ldi	r21, 0x42	; 66
   1c878:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1c87c:	f4 01       	movw	r30, r8
   1c87e:	60 83       	st	Z, r22
   1c880:	71 83       	std	Z+1, r23	; 0x01
   1c882:	82 83       	std	Z+2, r24	; 0x02
   1c884:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1c886:	98 01       	movw	r18, r16
   1c888:	2a 55       	subi	r18, 0x5A	; 90
   1c88a:	34 4f       	sbci	r19, 0xF4	; 244
   1c88c:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
          thermostat_pid_setpoint(tix, thresh);
   1c88e:	cd 54       	subi	r28, 0x4D	; 77
   1c890:	df 4f       	sbci	r29, 0xFF	; 255
   1c892:	48 81       	ld	r20, Y
   1c894:	59 81       	ldd	r21, Y+1	; 0x01
   1c896:	c3 5b       	subi	r28, 0xB3	; 179
   1c898:	d0 40       	sbci	r29, 0x00	; 0
   1c89a:	ba 01       	movw	r22, r20
   1c89c:	55 0f       	add	r21, r21
   1c89e:	88 0b       	sbc	r24, r24
   1c8a0:	99 0b       	sbc	r25, r25
   1c8a2:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1c8a6:	f4 01       	movw	r30, r8
   1c8a8:	60 83       	st	Z, r22
   1c8aa:	71 83       	std	Z+1, r23	; 0x01
   1c8ac:	82 83       	std	Z+2, r24	; 0x02
   1c8ae:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1c8b0:	f8 01       	movw	r30, r16
   1c8b2:	e6 54       	subi	r30, 0x46	; 70
   1c8b4:	f4 4f       	sbci	r31, 0xF4	; 244
   1c8b6:	60 81       	ld	r22, Z
   1c8b8:	71 81       	ldd	r23, Z+1	; 0x01
   1c8ba:	82 81       	ldd	r24, Z+2	; 0x02
   1c8bc:	93 81       	ldd	r25, Z+3	; 0x03
   1c8be:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
   1c8c2:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3358
          thermostat_ring_set_power(tix, pwm);
        }
    }


    if (tdsid >= HW_ONEWIRE_MAXROMS && tdsid < HW_ONEWIRE_MAXROMS + MAX_RTDS)
   1c8c4:	1a ef       	ldi	r17, 0xFA	; 250
   1c8c6:	1a 0d       	add	r17, r10
   1c8c8:	1a 30       	cpi	r17, 0x0A	; 10
   1c8ca:	08 f0       	brcs	.+2      	; 0x1c8ce <main+0x111a>
   1c8cc:	56 c0       	rjmp	.+172    	; 0x1c97a <main+0x11c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3361
    {
      act = tdsid - HW_ONEWIRE_MAXROMS;
      remote_tds_get_active(act , &active);
   1c8ce:	be 01       	movw	r22, r28
   1c8d0:	62 55       	subi	r22, 0x52	; 82
   1c8d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8d4:	81 2f       	mov	r24, r17
   1c8d6:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363

      if (active == 1 && remote_tds_get_last_update(act) < 180 && remote_tds_get_type(act) == RTDS_REMOTE_TYPE_TEMP)
   1c8da:	c2 55       	subi	r28, 0x52	; 82
   1c8dc:	df 4f       	sbci	r29, 0xFF	; 255
   1c8de:	88 81       	ld	r24, Y
   1c8e0:	ce 5a       	subi	r28, 0xAE	; 174
   1c8e2:	d0 40       	sbci	r29, 0x00	; 0
   1c8e4:	81 30       	cpi	r24, 0x01	; 1
   1c8e6:	09 f0       	breq	.+2      	; 0x1c8ea <main+0x1136>
   1c8e8:	59 c5       	rjmp	.+2738   	; 0x1d39c <main+0x1be8>
   1c8ea:	81 2f       	mov	r24, r17
   1c8ec:	0e 94 1a 53 	call	0xa634	; 0xa634 <remote_tds_get_last_update(unsigned char)>
   1c8f0:	84 3b       	cpi	r24, 0xB4	; 180
   1c8f2:	08 f0       	brcs	.+2      	; 0x1c8f6 <main+0x1142>
   1c8f4:	53 c5       	rjmp	.+2726   	; 0x1d39c <main+0x1be8>
   1c8f6:	81 2f       	mov	r24, r17
   1c8f8:	0e 94 2a 53 	call	0xa654	; 0xa654 <remote_tds_get_type(unsigned char)>
   1c8fc:	81 30       	cpi	r24, 0x01	; 1
   1c8fe:	09 f0       	breq	.+2      	; 0x1c902 <main+0x114e>
   1c900:	4d c5       	rjmp	.+2714   	; 0x1d39c <main+0x1be8>
remote_tds_get_data():
   1c902:	81 2f       	mov	r24, r17
   1c904:	0e 94 f4 52 	call	0xa5e8	; 0xa5e8 <remote_tds_get_data(unsigned char) [clone .part.31]>
   1c908:	82 01       	movw	r16, r4
   1c90a:	00 0f       	add	r16, r16
   1c90c:	11 1f       	adc	r17, r17
   1c90e:	00 0f       	add	r16, r16
   1c910:	11 1f       	adc	r17, r17
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
  return PID_p[idx];
}

void thermostat_pid_input(uint8_t idx, double value)
{
  PID_Input[idx] = value;
   1c912:	98 01       	movw	r18, r16
   1c914:	2e 56       	subi	r18, 0x6E	; 110
   1c916:	34 4f       	sbci	r19, 0xF4	; 244
   1c918:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3365
      {
        thermostat_pid_input(tix, remote_tds_get_data(act) / 1000.0);
   1c91a:	bc 01       	movw	r22, r24
   1c91c:	99 0f       	add	r25, r25
   1c91e:	88 0b       	sbc	r24, r24
   1c920:	99 0b       	sbc	r25, r25
   1c922:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1c926:	20 e0       	ldi	r18, 0x00	; 0
   1c928:	30 e0       	ldi	r19, 0x00	; 0
   1c92a:	4a e7       	ldi	r20, 0x7A	; 122
   1c92c:	54 e4       	ldi	r21, 0x44	; 68
   1c92e:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
thermostat_pid_input():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:70
   1c932:	f4 01       	movw	r30, r8
   1c934:	60 83       	st	Z, r22
   1c936:	71 83       	std	Z+1, r23	; 0x01
   1c938:	82 83       	std	Z+2, r24	; 0x02
   1c93a:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_setpoint():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:75
}

void thermostat_pid_setpoint(uint8_t idx, double value)
{
  PID_Setpoint[idx] = value;
   1c93c:	98 01       	movw	r18, r16
   1c93e:	2a 55       	subi	r18, 0x5A	; 90
   1c940:	34 4f       	sbci	r19, 0xF4	; 244
   1c942:	49 01       	movw	r8, r18
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3366
        thermostat_pid_setpoint(tix, thresh);
   1c944:	cd 54       	subi	r28, 0x4D	; 77
   1c946:	df 4f       	sbci	r29, 0xFF	; 255
   1c948:	48 81       	ld	r20, Y
   1c94a:	59 81       	ldd	r21, Y+1	; 0x01
   1c94c:	c3 5b       	subi	r28, 0xB3	; 179
   1c94e:	d0 40       	sbci	r29, 0x00	; 0
   1c950:	ba 01       	movw	r22, r20
   1c952:	55 0f       	add	r21, r21
   1c954:	88 0b       	sbc	r24, r24
   1c956:	99 0b       	sbc	r25, r25
   1c958:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1c95c:	f4 01       	movw	r30, r8
   1c95e:	60 83       	st	Z, r22
   1c960:	71 83       	std	Z+1, r23	; 0x01
   1c962:	82 83       	std	Z+2, r24	; 0x02
   1c964:	93 83       	std	Z+3, r25	; 0x03
thermostat_pid_output():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:80
}

uint8_t thermostat_pid_output(uint8_t idx)
{
  return PID_Output[idx];
   1c966:	f8 01       	movw	r30, r16
   1c968:	e6 54       	subi	r30, 0x46	; 70
   1c96a:	f4 4f       	sbci	r31, 0xF4	; 244
   1c96c:	60 81       	ld	r22, Z
   1c96e:	71 81       	ldd	r23, Z+1	; 0x01
   1c970:	82 81       	ldd	r24, Z+2	; 0x02
   1c972:	93 81       	ldd	r25, Z+3	; 0x03
   1c974:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
   1c978:	96 2e       	mov	r9, r22
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3399
        else
        blink_led_off(LED_DOWN_I);
      */
    }

    if (tmode == TERM_MODE_OFF)
   1c97a:	71 10       	cpse	r7, r1
   1c97c:	f3 c3       	rjmp	.+2022   	; 0x1d164 <main+0x19b0>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1c97e:	ff ef       	ldi	r31, 0xFF	; 255
   1c980:	6e ef       	ldi	r22, 0xFE	; 254
   1c982:	bf 12       	cpse	r11, r31
   1c984:	f7 c3       	rjmp	.+2030   	; 0x1d174 <main+0x19c0>
   1c986:	8f ef       	ldi	r24, 0xFF	; 255
   1c988:	48 1a       	sub	r4, r24
   1c98a:	58 0a       	sbc	r5, r24
   1c98c:	91 e2       	ldi	r25, 0x21	; 33
   1c98e:	29 0e       	add	r2, r25
   1c990:	31 1c       	adc	r3, r1
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3280
  uint8_t act;
  uint8_t active = 0;
  struct_DDS18s20 tds;


  for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
   1c992:	e5 e0       	ldi	r30, 0x05	; 5
   1c994:	4e 16       	cp	r4, r30
   1c996:	51 04       	cpc	r5, r1
   1c998:	09 f0       	breq	.+2      	; 0x1c99c <main+0x11e8>
   1c99a:	89 ce       	rjmp	.-750    	; 0x1c6ae <main+0xefa>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1c99c:	10 e0       	ldi	r17, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3948
      if (thermostat_ring_get_active(idx) != RING_FREE)
   1c99e:	81 2f       	mov	r24, r17
   1c9a0:	0e 94 c3 70 	call	0xe186	; 0xe186 <thermostat_ring_get_active(unsigned char)>
   1c9a4:	8f 3f       	cpi	r24, 0xFF	; 255
   1c9a6:	19 f0       	breq	.+6      	; 0x1c9ae <main+0x11fa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3949
        mqtt_send_pid_variable(idx);
   1c9a8:	81 2f       	mov	r24, r17
   1c9aa:	0e 94 b1 54 	call	0xa962	; 0xa962 <mqtt_send_pid_variable(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3947
    send_device_status();
    send_mqtt_ring();
    send_mqtt_tds();
    send_mqtt_program();
    thermostat();
    for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   1c9ae:	1f 5f       	subi	r17, 0xFF	; 255
   1c9b0:	15 30       	cpi	r17, 0x05	; 5
   1c9b2:	a9 f7       	brne	.-22     	; 0x1c99e <main+0x11ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3950
      if (thermostat_ring_get_active(idx) != RING_FREE)
        mqtt_send_pid_variable(idx);
    send_mqtt_remote_tds_status();
   1c9b4:	0e 94 93 7c 	call	0xf926	; 0xf926 <send_mqtt_remote_tds_status()>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
   1c9b8:	e0 91 0f 10 	lds	r30, 0x100F	; 0x80100f <lm75_temp+0xb>
   1c9bc:	f0 91 10 10 	lds	r31, 0x1010	; 0x801010 <lm75_temp+0xc>
   1c9c0:	04 80       	ldd	r0, Z+4	; 0x04
   1c9c2:	f5 81       	ldd	r31, Z+5	; 0x05
   1c9c4:	e0 2d       	mov	r30, r0
   1c9c6:	80 81       	ld	r24, Z
   1c9c8:	0e 94 1c b8 	call	0x17038	; 0x17038 <Temperature_LM75_Derived::readIntegerTemperatureRegister(unsigned char) [clone .constprop.196]>
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
   1c9cc:	bc 01       	movw	r22, r24
   1c9ce:	99 0f       	add	r25, r25
   1c9d0:	88 0b       	sbc	r24, r24
   1c9d2:	99 0b       	sbc	r25, r25
   1c9d4:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1c9d8:	9b 01       	movw	r18, r22
   1c9da:	ac 01       	movw	r20, r24
   1c9dc:	60 91 0b 10 	lds	r22, 0x100B	; 0x80100b <lm75_temp+0x7>
   1c9e0:	70 91 0c 10 	lds	r23, 0x100C	; 0x80100c <lm75_temp+0x8>
   1c9e4:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <lm75_temp+0x9>
   1c9e8:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <lm75_temp+0xa>
   1c9ec:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3956
    //send_network_config(&mqtt_client);
    //send_light_controler();
    //send_know_device();
    //send_mesh_status();
    ///
    internal_temp = lm75_temp.readTemperatureC();
   1c9f0:	60 93 a6 0c 	sts	0x0CA6, r22	; 0x800ca6 <internal_temp>
   1c9f4:	70 93 a7 0c 	sts	0x0CA7, r23	; 0x800ca7 <internal_temp+0x1>
   1c9f8:	80 93 a8 0c 	sts	0x0CA8, r24	; 0x800ca8 <internal_temp+0x2>
   1c9fc:	90 93 a9 0c 	sts	0x0CA9, r25	; 0x800ca9 <internal_temp+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3958
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
   1ca00:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1ca04:	87 ff       	sbrs	r24, 7
   1ca06:	39 c0       	rjmp	.+114    	; 0x1ca7a <main+0x12c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1ca08:	00 91 a1 0c 	lds	r16, 0x0CA1	; 0x800ca1 <light_max>
   1ca0c:	10 91 a2 0c 	lds	r17, 0x0CA2	; 0x800ca2 <light_max+0x1>
   1ca10:	60 91 a3 0c 	lds	r22, 0x0CA3	; 0x800ca3 <light_curr>
   1ca14:	70 91 a4 0c 	lds	r23, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1ca18:	60 1b       	sub	r22, r16
   1ca1a:	71 0b       	sbc	r23, r17
   1ca1c:	90 e0       	ldi	r25, 0x00	; 0
   1ca1e:	80 e0       	ldi	r24, 0x00	; 0
   1ca20:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1ca24:	4b 01       	movw	r8, r22
   1ca26:	5c 01       	movw	r10, r24
   1ca28:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <light_min>
   1ca2c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <light_min+0x1>
   1ca30:	08 1b       	sub	r16, r24
   1ca32:	19 0b       	sbc	r17, r25
   1ca34:	b8 01       	movw	r22, r16
   1ca36:	90 e0       	ldi	r25, 0x00	; 0
   1ca38:	80 e0       	ldi	r24, 0x00	; 0
   1ca3a:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1ca3e:	9b 01       	movw	r18, r22
   1ca40:	ac 01       	movw	r20, r24
   1ca42:	c5 01       	movw	r24, r10
   1ca44:	b4 01       	movw	r22, r8
   1ca46:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
   1ca4a:	20 e0       	ldi	r18, 0x00	; 0
   1ca4c:	30 e0       	ldi	r19, 0x00	; 0
   1ca4e:	48 e4       	ldi	r20, 0x48	; 72
   1ca50:	53 e4       	ldi	r21, 0x43	; 67
   1ca52:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
   1ca56:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3961
      if (brigthness_display_auto_values > 200)
   1ca5a:	69 3c       	cpi	r22, 0xC9	; 201
   1ca5c:	08 f0       	brcs	.+2      	; 0x1ca60 <main+0x12ac>
   1ca5e:	c8 c3       	rjmp	.+1936   	; 0x1d1f0 <main+0x1a3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3960
    ///
    internal_temp = lm75_temp.readTemperatureC();
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
   1ca60:	60 93 a0 0c 	sts	0x0CA0, r22	; 0x800ca0 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3963
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
      if (brigthness_display_auto_values < 5)
   1ca64:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
   1ca68:	85 30       	cpi	r24, 0x05	; 5
   1ca6a:	18 f4       	brcc	.+6      	; 0x1ca72 <main+0x12be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3964
        brigthness_display_auto_values = 5;
   1ca6c:	85 e0       	ldi	r24, 0x05	; 5
   1ca6e:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <brigthness_display_auto_values>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3965
      my_touch.TP_SetBacklight(brigthness_display_auto_values);
   1ca72:	80 91 a0 0c 	lds	r24, 0x0CA0	; 0x800ca0 <brigthness_display_auto_values>
   1ca76:	0e 94 3b b6 	call	0x16c76	; 0x16c76 <LCDWIKI_TOUCH::TP_SetBacklight(unsigned char) [clone .constprop.230]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3970
    }

  }

  if ((millis() - milis_1s) >= 1000)
   1ca7a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1ca7e:	00 91 9c 0c 	lds	r16, 0x0C9C	; 0x800c9c <milis_1s>
   1ca82:	10 91 9d 0c 	lds	r17, 0x0C9D	; 0x800c9d <milis_1s+0x1>
   1ca86:	20 91 9e 0c 	lds	r18, 0x0C9E	; 0x800c9e <milis_1s+0x2>
   1ca8a:	30 91 9f 0c 	lds	r19, 0x0C9F	; 0x800c9f <milis_1s+0x3>
   1ca8e:	ab 01       	movw	r20, r22
   1ca90:	bc 01       	movw	r22, r24
   1ca92:	40 1b       	sub	r20, r16
   1ca94:	51 0b       	sbc	r21, r17
   1ca96:	62 0b       	sbc	r22, r18
   1ca98:	73 0b       	sbc	r23, r19
   1ca9a:	48 3e       	cpi	r20, 0xE8	; 232
   1ca9c:	53 40       	sbci	r21, 0x03	; 3
   1ca9e:	61 05       	cpc	r22, r1
   1caa0:	71 05       	cpc	r23, r1
   1caa2:	08 f4       	brcc	.+2      	; 0x1caa6 <main+0x12f2>
   1caa4:	65 c1       	rjmp	.+714    	; 0x1cd70 <main+0x15bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3972
  {
    milis_1s += 1000;
   1caa6:	d9 01       	movw	r26, r18
   1caa8:	c8 01       	movw	r24, r16
   1caaa:	88 51       	subi	r24, 0x18	; 24
   1caac:	9c 4f       	sbci	r25, 0xFC	; 252
   1caae:	af 4f       	sbci	r26, 0xFF	; 255
   1cab0:	bf 4f       	sbci	r27, 0xFF	; 255
   1cab2:	80 93 9c 0c 	sts	0x0C9C, r24	; 0x800c9c <milis_1s>
   1cab6:	90 93 9d 0c 	sts	0x0C9D, r25	; 0x800c9d <milis_1s+0x1>
   1caba:	a0 93 9e 0c 	sts	0x0C9E, r26	; 0x800c9e <milis_1s+0x2>
   1cabe:	b0 93 9f 0c 	sts	0x0C9F, r27	; 0x800c9f <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3973
    uptime++;
   1cac2:	80 91 98 0c 	lds	r24, 0x0C98	; 0x800c98 <uptime>
   1cac6:	90 91 99 0c 	lds	r25, 0x0C99	; 0x800c99 <uptime+0x1>
   1caca:	a0 91 9a 0c 	lds	r26, 0x0C9A	; 0x800c9a <uptime+0x2>
   1cace:	b0 91 9b 0c 	lds	r27, 0x0C9B	; 0x800c9b <uptime+0x3>
   1cad2:	01 96       	adiw	r24, 0x01	; 1
   1cad4:	a1 1d       	adc	r26, r1
   1cad6:	b1 1d       	adc	r27, r1
   1cad8:	80 93 98 0c 	sts	0x0C98, r24	; 0x800c98 <uptime>
   1cadc:	90 93 99 0c 	sts	0x0C99, r25	; 0x800c99 <uptime+0x1>
   1cae0:	a0 93 9a 0c 	sts	0x0C9A, r26	; 0x800c9a <uptime+0x2>
   1cae4:	b0 93 9b 0c 	sts	0x0C9B, r27	; 0x800c9b <uptime+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3974
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
   1cae8:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1caec:	86 ff       	sbrs	r24, 6
   1caee:	0a c0       	rjmp	.+20     	; 0x1cb04 <main+0x1350>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3976
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
   1caf0:	80 91 96 0c 	lds	r24, 0x0C96	; 0x800c96 <display_auto_shutdown_now>
   1caf4:	90 91 97 0c 	lds	r25, 0x0C97	; 0x800c97 <display_auto_shutdown>
   1caf8:	89 17       	cp	r24, r25
   1cafa:	08 f0       	brcs	.+2      	; 0x1cafe <main+0x134a>
   1cafc:	7d c3       	rjmp	.+1786   	; 0x1d1f8 <main+0x1a44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3977
        display_auto_shutdown_now++;
   1cafe:	8f 5f       	subi	r24, 0xFF	; 255
   1cb00:	80 93 96 0c 	sts	0x0C96, r24	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
      else
        my_touch.TP_SetOnOff(LED_OFF);
    }

    mereni_hwwire(uptime);
   1cb04:	80 90 98 0c 	lds	r8, 0x0C98	; 0x800c98 <uptime>
   1cb08:	90 90 99 0c 	lds	r9, 0x0C99	; 0x800c99 <uptime+0x1>
   1cb0c:	be ec       	ldi	r27, 0xCE	; 206
   1cb0e:	ab 2e       	mov	r10, r27
   1cb10:	bb e0       	ldi	r27, 0x0B	; 11
   1cb12:	bb 2e       	mov	r11, r27
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1cb14:	71 2c       	mov	r7, r1
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1cb16:	99 24       	eor	r9, r9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1cb18:	1e e1       	ldi	r17, 0x1E	; 30
   1cb1a:	41 2e       	mov	r4, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   1cb1c:	be 01       	movw	r22, r28
   1cb1e:	6f 5f       	subi	r22, 0xFF	; 255
   1cb20:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb22:	87 2d       	mov	r24, r7
   1cb24:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) >= tds.period))
   1cb28:	19 81       	ldd	r17, Y+1	; 0x01
   1cb2a:	11 30       	cpi	r17, 0x01	; 1
   1cb2c:	09 f0       	breq	.+2      	; 0x1cb30 <main+0x137c>
   1cb2e:	e8 c0       	rjmp	.+464    	; 0x1cd00 <main+0x154c>
   1cb30:	f5 01       	movw	r30, r10
   1cb32:	84 8d       	ldd	r24, Z+28	; 0x1c
   1cb34:	9d 89       	ldd	r25, Y+21	; 0x15
   1cb36:	94 01       	movw	r18, r8
   1cb38:	28 1b       	sub	r18, r24
   1cb3a:	31 09       	sbc	r19, r1
   1cb3c:	92 17       	cp	r25, r18
   1cb3e:	13 06       	cpc	r1, r19
   1cb40:	11 f0       	breq	.+4      	; 0x1cb46 <main+0x1392>
   1cb42:	08 f0       	brcs	.+2      	; 0x1cb46 <main+0x1392>
   1cb44:	dd c0       	rjmp	.+442    	; 0x1cd00 <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:275
    {
      status_tds18s20[w].period_now += tds.period;
   1cb46:	89 0f       	add	r24, r25
   1cb48:	84 8f       	std	Z+28, r24	; 0x1c
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:276
      if (status_tds18s20[w].wait == false)
   1cb4a:	85 8d       	ldd	r24, Z+29	; 0x1d
   1cb4c:	81 11       	cpse	r24, r1
   1cb4e:	0f c0       	rjmp	.+30     	; 0x1cb6e <main+0x13ba>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:278
      {
        owReset(tds.assigned_ds2482);
   1cb50:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb52:	0e 94 03 67 	call	0xce06	; 0xce06 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:279
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1cb56:	be 01       	movw	r22, r28
   1cb58:	6e 5f       	subi	r22, 0xFE	; 254
   1cb5a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb5c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb5e:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:280
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   1cb62:	64 e4       	ldi	r22, 0x44	; 68
   1cb64:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb66:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:281
        status_tds18s20[w].wait = true;
   1cb6a:	f5 01       	movw	r30, r10
   1cb6c:	15 8f       	std	Z+29, r17	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:283
      }
      if (status_tds18s20[w].wait == true)
   1cb6e:	f5 01       	movw	r30, r10
   1cb70:	55 8c       	ldd	r5, Z+29	; 0x1d
   1cb72:	f1 e0       	ldi	r31, 0x01	; 1
   1cb74:	5f 12       	cpse	r5, r31
   1cb76:	c4 c0       	rjmp	.+392    	; 0x1cd00 <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:285
      {
        owReset(tds.assigned_ds2482);
   1cb78:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb7a:	0e 94 03 67 	call	0xce06	; 0xce06 <ds2482owReset(unsigned char)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:286
        owMatchRom(tds.assigned_ds2482, tds.rom);
   1cb7e:	be 01       	movw	r22, r28
   1cb80:	6e 5f       	subi	r22, 0xFE	; 254
   1cb82:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb84:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb86:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:287
        owReadByte(tds.assigned_ds2482, &t);
   1cb8a:	be 01       	movw	r22, r28
   1cb8c:	6f 57       	subi	r22, 0x7F	; 127
   1cb8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb90:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cb92:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:288
        if (t != 0) 
   1cb96:	cf 57       	subi	r28, 0x7F	; 127
   1cb98:	df 4f       	sbci	r29, 0xFF	; 255
   1cb9a:	88 81       	ld	r24, Y
   1cb9c:	c1 58       	subi	r28, 0x81	; 129
   1cb9e:	d0 40       	sbci	r29, 0x00	; 0
   1cba0:	88 23       	and	r24, r24
   1cba2:	09 f4       	brne	.+2      	; 0x1cba6 <main+0x13f2>
   1cba4:	ad c0       	rjmp	.+346    	; 0x1cd00 <main+0x154c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:290
        {
          status_tds18s20[w].wait = false;
   1cba6:	f5 01       	movw	r30, r10
   1cba8:	15 8e       	std	Z+29, r1	; 0x1d
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:291
          status = owReset(tds.assigned_ds2482);
   1cbaa:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cbac:	0e 94 03 67 	call	0xce06	; 0xce06 <ds2482owReset(unsigned char)>
   1cbb0:	18 2f       	mov	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:292
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   1cbb2:	be 01       	movw	r22, r28
   1cbb4:	6e 5f       	subi	r22, 0xFE	; 254
   1cbb6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbb8:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cbba:	0e 94 e4 66 	call	0xcdc8	; 0xcdc8 <owMatchRom(unsigned char, unsigned char*)>
   1cbbe:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:293
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   1cbc0:	6e eb       	ldi	r22, 0xBE	; 190
   1cbc2:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cbc4:	0e 94 ab 66 	call	0xcd56	; 0xcd56 <ds2482owWriteByte(unsigned char, unsigned char)>
   1cbc8:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:294
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   1cbca:	be 01       	movw	r22, r28
   1cbcc:	6f 5b       	subi	r22, 0xBF	; 191
   1cbce:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbd0:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cbd2:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cbd6:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:295
          status_tds18s20[w].tempL = e;
   1cbd8:	22 96       	adiw	r28, 0x02	; 2
   1cbda:	6f ac       	ldd	r6, Y+63	; 0x3f
   1cbdc:	22 97       	sbiw	r28, 0x02	; 2
   1cbde:	f5 01       	movw	r30, r10
   1cbe0:	60 82       	st	Z, r6
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:296
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   1cbe2:	be 01       	movw	r22, r28
   1cbe4:	6f 5b       	subi	r22, 0xBF	; 191
   1cbe6:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbe8:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cbea:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cbee:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:297
          status_tds18s20[w].tempH = e;
   1cbf0:	22 96       	adiw	r28, 0x02	; 2
   1cbf2:	0f ad       	ldd	r16, Y+63	; 0x3f
   1cbf4:	22 97       	sbiw	r28, 0x02	; 2
   1cbf6:	f5 01       	movw	r30, r10
   1cbf8:	01 83       	std	Z+1, r16	; 0x01
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   1cbfa:	be 01       	movw	r22, r28
   1cbfc:	6f 5b       	subi	r22, 0xBF	; 191
   1cbfe:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc00:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc02:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc06:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   1cc08:	be 01       	movw	r22, r28
   1cc0a:	6f 5b       	subi	r22, 0xBF	; 191
   1cc0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc0e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc10:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc14:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   1cc16:	be 01       	movw	r22, r28
   1cc18:	6f 5b       	subi	r22, 0xBF	; 191
   1cc1a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc1c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc1e:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc22:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   1cc24:	be 01       	movw	r22, r28
   1cc26:	6f 5b       	subi	r22, 0xBF	; 191
   1cc28:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc2a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc2c:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc30:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:302
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   1cc32:	be 01       	movw	r22, r28
   1cc34:	6f 5b       	subi	r22, 0xBF	; 191
   1cc36:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc38:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc3a:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc3e:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:303
          status_tds18s20[w].CR = e; //count remain
   1cc40:	22 96       	adiw	r28, 0x02	; 2
   1cc42:	8f ad       	ldd	r24, Y+63	; 0x3f
   1cc44:	22 97       	sbiw	r28, 0x02	; 2
   1cc46:	f5 01       	movw	r30, r10
   1cc48:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:304
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   1cc4a:	be 01       	movw	r22, r28
   1cc4c:	6f 5b       	subi	r22, 0xBF	; 191
   1cc4e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc50:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc52:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
   1cc56:	18 0f       	add	r17, r24
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:305
          status_tds18s20[w].CP = e; // count per
   1cc58:	22 96       	adiw	r28, 0x02	; 2
   1cc5a:	3f ac       	ldd	r3, Y+63	; 0x3f
   1cc5c:	22 97       	sbiw	r28, 0x02	; 2
   1cc5e:	f5 01       	movw	r30, r10
   1cc60:	33 82       	std	Z+3, r3	; 0x03
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1cc62:	be 01       	movw	r22, r28
   1cc64:	6f 5b       	subi	r22, 0xBF	; 191
   1cc66:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc68:	8a 85       	ldd	r24, Y+10	; 0x0a
   1cc6a:	0e 94 4f 66 	call	0xcc9e	; 0xcc9e <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
   1cc6e:	22 96       	adiw	r28, 0x02	; 2
   1cc70:	9f ad       	ldd	r25, Y+63	; 0x3f
   1cc72:	22 97       	sbiw	r28, 0x02	; 2
   1cc74:	f5 01       	movw	r30, r10
   1cc76:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:306
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   1cc78:	81 0f       	add	r24, r17
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:308
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   1cc7a:	09 f0       	breq	.+2      	; 0x1cc7e <main+0x14ca>
   1cc7c:	c1 c2       	rjmp	.+1410   	; 0x1d200 <main+0x1a4c>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1cc7e:	63 2d       	mov	r22, r3
   1cc80:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:310
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   1cc82:	10 e0       	ldi	r17, 0x00	; 0
   1cc84:	10 2f       	mov	r17, r16
   1cc86:	00 27       	eor	r16, r16
   1cc88:	11 0f       	add	r17, r17
   1cc8a:	11 0f       	add	r17, r17
   1cc8c:	11 0f       	add	r17, r17
   1cc8e:	f8 e0       	ldi	r31, 0x08	; 8
   1cc90:	6f 9e       	mul	r6, r31
   1cc92:	c0 01       	movw	r24, r0
   1cc94:	11 24       	eor	r1, r1
   1cc96:	08 2b       	or	r16, r24
   1cc98:	19 2b       	or	r17, r25
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   1cc9a:	f3 e0       	ldi	r31, 0x03	; 3
   1cc9c:	00 0f       	add	r16, r16
   1cc9e:	11 1f       	adc	r17, r17
   1cca0:	fa 95       	dec	r31
   1cca2:	e1 f7       	brne	.-8      	; 0x1cc9c <main+0x14e8>
   1cca4:	00 78       	andi	r16, 0x80	; 128
   1cca6:	8b 85       	ldd	r24, Y+11	; 0x0b
   1cca8:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ccaa:	40 97       	sbiw	r24, 0x10	; 16
   1ccac:	08 0f       	add	r16, r24
   1ccae:	19 1f       	adc	r17, r25
   1ccb0:	cf 57       	subi	r28, 0x7F	; 127
   1ccb2:	df 4f       	sbci	r29, 0xFF	; 255
   1ccb4:	e8 81       	ld	r30, Y
   1ccb6:	c1 58       	subi	r28, 0x81	; 129
   1ccb8:	d0 40       	sbci	r29, 0x00	; 0
   1ccba:	4e 9e       	mul	r4, r30
   1ccbc:	f0 01       	movw	r30, r0
   1ccbe:	11 24       	eor	r1, r1
   1ccc0:	e2 53       	subi	r30, 0x32	; 50
   1ccc2:	f4 4f       	sbci	r31, 0xF4	; 244
   1ccc4:	82 81       	ldd	r24, Z+2	; 0x02
   1ccc6:	9b 01       	movw	r18, r22
   1ccc8:	28 1b       	sub	r18, r24
   1ccca:	31 09       	sbc	r19, r1
   1cccc:	c9 01       	movw	r24, r18
   1ccce:	96 95       	lsr	r25
   1ccd0:	98 2f       	mov	r25, r24
   1ccd2:	88 27       	eor	r24, r24
   1ccd4:	97 95       	ror	r25
   1ccd6:	87 95       	ror	r24
   1ccd8:	0e 94 9c f8 	call	0x1f138	; 0x1f138 <__divmodhi4>
   1ccdc:	06 0f       	add	r16, r22
   1ccde:	17 1f       	adc	r17, r23
   1cce0:	f5 01       	movw	r30, r10
   1cce2:	16 83       	std	Z+6, r17	; 0x06
   1cce4:	05 83       	std	Z+5, r16	; 0x05
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:312
            status_tds18s20[w].online = True;
   1cce6:	53 8e       	std	Z+27, r5	; 0x1b
   1cce8:	89 e0       	ldi	r24, 0x09	; 9
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:313
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   1ccea:	27 89       	ldd	r18, Z+23	; 0x17
   1ccec:	30 8d       	ldd	r19, Z+24	; 0x18
   1ccee:	32 8f       	std	Z+26, r19	; 0x1a
   1ccf0:	21 8f       	std	Z+25, r18	; 0x19
   1ccf2:	81 50       	subi	r24, 0x01	; 1
   1ccf4:	32 97       	sbiw	r30, 0x02	; 2
   1ccf6:	81 11       	cpse	r24, r1
   1ccf8:	f8 cf       	rjmp	.-16     	; 0x1ccea <main+0x1536>
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   1ccfa:	f5 01       	movw	r30, r10
   1ccfc:	10 87       	std	Z+8, r17	; 0x08
   1ccfe:	07 83       	std	Z+7, r16	; 0x07
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   1cd00:	73 94       	inc	r7
   1cd02:	fe e1       	ldi	r31, 0x1E	; 30
   1cd04:	af 0e       	add	r10, r31
   1cd06:	b1 1c       	adc	r11, r1
   1cd08:	26 e0       	ldi	r18, 0x06	; 6
   1cd0a:	72 12       	cpse	r7, r18
   1cd0c:	07 cf       	rjmp	.-498    	; 0x1cb1c <main+0x1368>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1cd0e:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
    if (get_tds18s20(id, &tds) == 1)
   1cd10:	be 01       	movw	r22, r28
   1cd12:	6f 5f       	subi	r22, 0xFF	; 255
   1cd14:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd16:	81 2f       	mov	r24, r17
   1cd18:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   1cd1c:	1f 5f       	subi	r17, 0xFF	; 255
   1cd1e:	16 30       	cpi	r17, 0x06	; 6
   1cd20:	b9 f7       	brne	.-18     	; 0x1cd10 <main+0x155c>
   1cd22:	56 e6       	ldi	r21, 0x66	; 102
   1cd24:	85 2e       	mov	r8, r21
   1cd26:	91 2c       	mov	r9, r1
   1cd28:	a1 2c       	mov	r10, r1
   1cd2a:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1cd2c:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1977
  {
    remote_tds_get_active(idx, &active);
   1cd2e:	be 01       	movw	r22, r28
   1cd30:	6f 5f       	subi	r22, 0xFF	; 255
   1cd32:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd34:	81 2f       	mov	r24, r17
   1cd36:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1978
    if (active == 1)
   1cd3a:	89 81       	ldd	r24, Y+1	; 0x01
   1cd3c:	81 30       	cpi	r24, 0x01	; 1
   1cd3e:	61 f4       	brne	.+24     	; 0x1cd58 <main+0x15a4>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1965
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   1cd40:	c5 01       	movw	r24, r10
   1cd42:	b4 01       	movw	r22, r8
   1cd44:	0e 94 76 b7 	call	0x16eec	; 0x16eec <SRAM_23LC::readByte(unsigned long) [clone .constprop.216]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
    if (last < 250)
   1cd48:	8a 3f       	cpi	r24, 0xFA	; 250
   1cd4a:	08 f4       	brcc	.+2      	; 0x1cd4e <main+0x159a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
      last++;
   1cd4c:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1968
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   1cd4e:	48 2f       	mov	r20, r24
   1cd50:	c5 01       	movw	r24, r10
   1cd52:	b4 01       	movw	r22, r8
   1cd54:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.218]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1975
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1cd58:	1f 5f       	subi	r17, 0xFF	; 255
   1cd5a:	34 e0       	ldi	r19, 0x04	; 4
   1cd5c:	83 0e       	add	r8, r19
   1cd5e:	91 1c       	adc	r9, r1
   1cd60:	a1 1c       	adc	r10, r1
   1cd62:	b1 1c       	adc	r11, r1
   1cd64:	4e e8       	ldi	r20, 0x8E	; 142
   1cd66:	84 16       	cp	r8, r20
   1cd68:	91 04       	cpc	r9, r1
   1cd6a:	a1 04       	cpc	r10, r1
   1cd6c:	b1 04       	cpc	r11, r1
   1cd6e:	f9 f6       	brne	.-66     	; 0x1cd2e <main+0x157a>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3988
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) >= 500)
   1cd70:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1cd74:	00 91 92 0c 	lds	r16, 0x0C92	; 0x800c92 <milis_05s>
   1cd78:	10 91 93 0c 	lds	r17, 0x0C93	; 0x800c93 <milis_05s+0x1>
   1cd7c:	20 91 94 0c 	lds	r18, 0x0C94	; 0x800c94 <milis_05s+0x2>
   1cd80:	30 91 95 0c 	lds	r19, 0x0C95	; 0x800c95 <milis_05s+0x3>
   1cd84:	ab 01       	movw	r20, r22
   1cd86:	bc 01       	movw	r22, r24
   1cd88:	40 1b       	sub	r20, r16
   1cd8a:	51 0b       	sbc	r21, r17
   1cd8c:	62 0b       	sbc	r22, r18
   1cd8e:	73 0b       	sbc	r23, r19
   1cd90:	44 3f       	cpi	r20, 0xF4	; 244
   1cd92:	51 40       	sbci	r21, 0x01	; 1
   1cd94:	61 05       	cpc	r22, r1
   1cd96:	71 05       	cpc	r23, r1
   1cd98:	08 f4       	brcc	.+2      	; 0x1cd9c <main+0x15e8>
   1cd9a:	47 c0       	rjmp	.+142    	; 0x1ce2a <main+0x1676>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3990
  {
    milis_05s += 500;
   1cd9c:	d9 01       	movw	r26, r18
   1cd9e:	c8 01       	movw	r24, r16
   1cda0:	8c 50       	subi	r24, 0x0C	; 12
   1cda2:	9e 4f       	sbci	r25, 0xFE	; 254
   1cda4:	af 4f       	sbci	r26, 0xFF	; 255
   1cda6:	bf 4f       	sbci	r27, 0xFF	; 255
   1cda8:	80 93 92 0c 	sts	0x0C92, r24	; 0x800c92 <milis_05s>
   1cdac:	90 93 93 0c 	sts	0x0C93, r25	; 0x800c93 <milis_05s+0x1>
   1cdb0:	a0 93 94 0c 	sts	0x0C94, r26	; 0x800c94 <milis_05s+0x2>
   1cdb4:	b0 93 95 0c 	sts	0x0C95, r27	; 0x800c95 <milis_05s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3991
    now = rtc.now();
   1cdb8:	ce 01       	movw	r24, r28
   1cdba:	01 96       	adiw	r24, 0x01	; 1
   1cdbc:	0e 94 39 67 	call	0xce72	; 0xce72 <RTC_DS1307::now()>
   1cdc0:	87 e0       	ldi	r24, 0x07	; 7
   1cdc2:	fe 01       	movw	r30, r28
   1cdc4:	31 96       	adiw	r30, 0x01	; 1
   1cdc6:	a4 e7       	ldi	r26, 0x74	; 116
   1cdc8:	b2 e1       	ldi	r27, 0x12	; 18
   1cdca:	01 90       	ld	r0, Z+
   1cdcc:	0d 92       	st	X+, r0
   1cdce:	8a 95       	dec	r24
   1cdd0:	e1 f7       	brne	.-8      	; 0x1cdca <main+0x1616>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3159
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   1cdd2:	0e 94 c5 bc 	call	0x1798a	; 0x1798a <RTC_DS1307::isrunning() [clone .constprop.149]>
   1cdd6:	90 91 82 0c 	lds	r25, 0x0C82	; 0x800c82 <selftest_data>
   1cdda:	81 11       	cpse	r24, r1
   1cddc:	13 c2       	rjmp	.+1062   	; 0x1d204 <main+0x1a50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
    sbi(selftest_data, SELFTEST_ERR_RTC);
   1cdde:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3162
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1cde0:	90 93 82 0c 	sts	0x0C82, r25	; 0x800c82 <selftest_data>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4696
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   1cde4:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4695
//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   1cde6:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4697
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1cde8:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4699
  {
    remote_tds_get_active(idx, &active);
   1cdea:	be 01       	movw	r22, r28
   1cdec:	6f 5f       	subi	r22, 0xFF	; 255
   1cdee:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdf0:	81 2f       	mov	r24, r17
   1cdf2:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4700
    if (active == 1) cnt++;
   1cdf6:	89 81       	ldd	r24, Y+1	; 0x01
   1cdf8:	81 30       	cpi	r24, 0x01	; 1
   1cdfa:	09 f4       	brne	.+2      	; 0x1cdfe <main+0x164a>
   1cdfc:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4697
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   1cdfe:	1f 5f       	subi	r17, 0xFF	; 255
   1ce00:	1a 30       	cpi	r17, 0x0A	; 10
   1ce02:	99 f7       	brne	.-26     	; 0x1cdea <main+0x1636>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3995
    milis_05s += 500;
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;

    use_rtds = count_use_rtds();
   1ce04:	00 93 91 0c 	sts	0x0C91, r16	; 0x800c91 <use_rtds>
   1ce08:	08 ec       	ldi	r16, 0xC8	; 200
   1ce0a:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   1ce0c:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   1ce0e:	c8 01       	movw	r24, r16
   1ce10:	0e 94 b8 6f 	call	0xdf70	; 0xdf70 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.261]>
   1ce14:	81 30       	cpi	r24, 0x01	; 1
   1ce16:	09 f4       	brne	.+2      	; 0x1ce1a <main+0x1666>
   1ce18:	b3 94       	inc	r11
   1ce1a:	0a 5e       	subi	r16, 0xEA	; 234
   1ce1c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   1ce1e:	0c 34       	cpi	r16, 0x4C	; 76
   1ce20:	91 e0       	ldi	r25, 0x01	; 1
   1ce22:	19 07       	cpc	r17, r25
   1ce24:	a1 f7       	brne	.-24     	; 0x1ce0e <main+0x165a>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3996
    use_tds = count_use_tds();
   1ce26:	b0 92 90 0c 	sts	0x0C90, r11	; 0x800c90 <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4002
  }



  /// kazdych 100ms
  if ((millis() - milis_005s) >= 50 )
   1ce2a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1ce2e:	00 91 8c 0c 	lds	r16, 0x0C8C	; 0x800c8c <milis_005s>
   1ce32:	10 91 8d 0c 	lds	r17, 0x0C8D	; 0x800c8d <milis_005s+0x1>
   1ce36:	20 91 8e 0c 	lds	r18, 0x0C8E	; 0x800c8e <milis_005s+0x2>
   1ce3a:	30 91 8f 0c 	lds	r19, 0x0C8F	; 0x800c8f <milis_005s+0x3>
   1ce3e:	ab 01       	movw	r20, r22
   1ce40:	bc 01       	movw	r22, r24
   1ce42:	40 1b       	sub	r20, r16
   1ce44:	51 0b       	sbc	r21, r17
   1ce46:	62 0b       	sbc	r22, r18
   1ce48:	73 0b       	sbc	r23, r19
   1ce4a:	42 33       	cpi	r20, 0x32	; 50
   1ce4c:	51 05       	cpc	r21, r1
   1ce4e:	61 05       	cpc	r22, r1
   1ce50:	71 05       	cpc	r23, r1
   1ce52:	a8 f1       	brcs	.+106    	; 0x1cebe <main+0x170a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4004
  {
    milis_005s += 50;
   1ce54:	d9 01       	movw	r26, r18
   1ce56:	c8 01       	movw	r24, r16
   1ce58:	c2 96       	adiw	r24, 0x32	; 50
   1ce5a:	a1 1d       	adc	r26, r1
   1ce5c:	b1 1d       	adc	r27, r1
   1ce5e:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <milis_005s>
   1ce62:	90 93 8d 0c 	sts	0x0C8D, r25	; 0x800c8d <milis_005s+0x1>
   1ce66:	a0 93 8e 0c 	sts	0x0C8E, r26	; 0x800c8e <milis_005s+0x2>
   1ce6a:	b0 93 8f 0c 	sts	0x0C8F, r27	; 0x800c8f <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4007

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1ce6e:	80 91 8b 0c 	lds	r24, 0x0C8B	; 0x800c8b <a2d_run_now>
   1ce72:	81 30       	cpi	r24, 0x01	; 1
   1ce74:	21 f5       	brne	.+72     	; 0x1cebe <main+0x170a>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   1ce76:	30 91 83 0c 	lds	r19, 0x0C83	; 0x800c83 <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1ce7a:	20 91 84 0c 	lds	r18, 0x0C84	; 0x800c84 <a2d_index>
   1ce7e:	90 e0       	ldi	r25, 0x00	; 0
   1ce80:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   1ce82:	61 e0       	ldi	r22, 0x01	; 1
   1ce84:	70 e0       	ldi	r23, 0x00	; 0
   1ce86:	ab 01       	movw	r20, r22
   1ce88:	08 2e       	mov	r0, r24
   1ce8a:	01 c0       	rjmp	.+2      	; 0x1ce8e <main+0x16da>
   1ce8c:	44 0f       	add	r20, r20
   1ce8e:	0a 94       	dec	r0
   1ce90:	ea f7       	brpl	.-6      	; 0x1ce8c <main+0x16d8>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   1ce92:	e3 2f       	mov	r30, r19
   1ce94:	e4 23       	and	r30, r20
   1ce96:	09 f4       	brne	.+2      	; 0x1ce9a <main+0x16e6>
   1ce98:	b7 c1       	rjmp	.+878    	; 0x1d208 <main+0x1a54>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   1ce9a:	e2 2f       	mov	r30, r18
   1ce9c:	e4 23       	and	r30, r20
   1ce9e:	09 f0       	breq	.+2      	; 0x1cea2 <main+0x16ee>
   1cea0:	b3 c1       	rjmp	.+870    	; 0x1d208 <main+0x1a54>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   1cea2:	24 2b       	or	r18, r20
   1cea4:	20 93 84 0c 	sts	0x0C84, r18	; 0x800c84 <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   1cea8:	0e 94 e3 47 	call	0x8fc6	; 0x8fc6 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4010
    {
      a2d_start_process();
      a2d_run_now = 0;
   1ceac:	10 92 8b 0c 	sts	0x0C8B, r1	; 0x800c8b <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4011
      if (a2d_done() == 0) a2d_run_now = 1;
   1ceb0:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <a2d_index>
   1ceb4:	81 11       	cpse	r24, r1
   1ceb6:	03 c0       	rjmp	.+6      	; 0x1cebe <main+0x170a>
   1ceb8:	81 e0       	ldi	r24, 0x01	; 1
   1ceba:	80 93 8b 0c 	sts	0x0C8B, r24	; 0x800c8b <a2d_run_now>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:255
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
   1cebe:	e0 91 af 0f 	lds	r30, 0x0FAF	; 0x800faf <my_touch+0x19>
   1cec2:	f0 91 b0 0f 	lds	r31, 0x0FB0	; 0x800fb0 <my_touch+0x1a>
   1cec6:	80 81       	ld	r24, Z
   1cec8:	90 91 b7 0f 	lds	r25, 0x0FB7	; 0x800fb7 <my_touch+0x21>
   1cecc:	89 23       	and	r24, r25
   1cece:	09 f0       	breq	.+2      	; 0x1ced2 <main+0x171e>
   1ced0:	1e c2       	rjmp	.+1084   	; 0x1d30e <main+0x1b5a>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1ced2:	80 ed       	ldi	r24, 0xD0	; 208
   1ced4:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1ced8:	3c 01       	movw	r6, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1ceda:	80 e9       	ldi	r24, 0x90	; 144
   1cedc:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1cee0:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:216
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
   1cee2:	80 ed       	ldi	r24, 0xD0	; 208
   1cee4:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1cee8:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:217
        ytemp=TP_Read_XY(CMD_RDY);
   1ceea:	80 e9       	ldi	r24, 0x90	; 144
   1ceec:	0e 94 1b d7 	call	0x1ae36	; 0x1ae36 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.48]>
   1cef0:	4c 01       	movw	r8, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:240
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
   1cef2:	60 16       	cp	r6, r16
   1cef4:	71 06       	cpc	r7, r17
   1cef6:	48 f0       	brcs	.+18     	; 0x1cf0a <main+0x1756>
   1cef8:	c8 01       	movw	r24, r16
   1cefa:	c2 96       	adiw	r24, 0x32	; 50
   1cefc:	68 16       	cp	r6, r24
   1cefe:	79 06       	cpc	r7, r25
   1cf00:	50 f0       	brcs	.+20     	; 0x1cf16 <main+0x1762>
   1cf02:	06 15       	cp	r16, r6
   1cf04:	17 05       	cpc	r17, r7
   1cf06:	08 f4       	brcc	.+2      	; 0x1cf0a <main+0x1756>
   1cf08:	51 c0       	rjmp	.+162    	; 0x1cfac <main+0x17f8>
   1cf0a:	c3 01       	movw	r24, r6
   1cf0c:	c2 96       	adiw	r24, 0x32	; 50
   1cf0e:	08 17       	cp	r16, r24
   1cf10:	19 07       	cpc	r17, r25
   1cf12:	08 f0       	brcs	.+2      	; 0x1cf16 <main+0x1762>
   1cf14:	4b c0       	rjmp	.+150    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:241
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
   1cf16:	a8 14       	cp	r10, r8
   1cf18:	b9 04       	cpc	r11, r9
   1cf1a:	48 f0       	brcs	.+18     	; 0x1cf2e <main+0x177a>
   1cf1c:	c4 01       	movw	r24, r8
   1cf1e:	c2 96       	adiw	r24, 0x32	; 50
   1cf20:	a8 16       	cp	r10, r24
   1cf22:	b9 06       	cpc	r11, r25
   1cf24:	48 f0       	brcs	.+18     	; 0x1cf38 <main+0x1784>
   1cf26:	8a 14       	cp	r8, r10
   1cf28:	9b 04       	cpc	r9, r11
   1cf2a:	08 f4       	brcc	.+2      	; 0x1cf2e <main+0x177a>
   1cf2c:	3f c0       	rjmp	.+126    	; 0x1cfac <main+0x17f8>
   1cf2e:	c5 01       	movw	r24, r10
   1cf30:	c2 96       	adiw	r24, 0x32	; 50
   1cf32:	88 16       	cp	r8, r24
   1cf34:	99 06       	cpc	r9, r25
   1cf36:	d0 f5       	brcc	.+116    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:243
    {
        *x=(x1+x2)/2;
   1cf38:	60 0e       	add	r6, r16
   1cf3a:	71 1e       	adc	r7, r17
   1cf3c:	93 01       	movw	r18, r6
   1cf3e:	36 95       	lsr	r19
   1cf40:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
   1cf42:	a4 e5       	ldi	r26, 0x54	; 84
   1cf44:	b3 e0       	ldi	r27, 0x03	; 3
   1cf46:	0e 94 fc f8 	call	0x1f1f8	; 0x1f1f8 <__umulhisi3>
   1cf4a:	20 e1       	ldi	r18, 0x10	; 16
   1cf4c:	42 2e       	mov	r4, r18
   1cf4e:	27 e2       	ldi	r18, 0x27	; 39
   1cf50:	52 2e       	mov	r5, r18
   1cf52:	61 2c       	mov	r6, r1
   1cf54:	71 2c       	mov	r7, r1
   1cf56:	a3 01       	movw	r20, r6
   1cf58:	92 01       	movw	r18, r4
   1cf5a:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1cf5e:	89 01       	movw	r16, r18
   1cf60:	0e 50       	subi	r16, 0x0E	; 14
   1cf62:	11 09       	sbc	r17, r1
   1cf64:	10 93 9b 0f 	sts	0x0F9B, r17	; 0x800f9b <my_touch+0x5>
   1cf68:	00 93 9a 0f 	sts	0x0F9A, r16	; 0x800f9a <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
   1cf6c:	a8 0c       	add	r10, r8
   1cf6e:	b9 1c       	adc	r11, r9
   1cf70:	95 01       	movw	r18, r10
   1cf72:	36 95       	lsr	r19
   1cf74:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:271
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
   1cf76:	a4 e0       	ldi	r26, 0x04	; 4
   1cf78:	b5 e0       	ldi	r27, 0x05	; 5
   1cf7a:	0e 94 fc f8 	call	0x1f1f8	; 0x1f1f8 <__umulhisi3>
   1cf7e:	a3 01       	movw	r20, r6
   1cf80:	92 01       	movw	r18, r4
   1cf82:	0e 94 d2 f8 	call	0x1f1a4	; 0x1f1a4 <__divmodsi4>
   1cf86:	2e 51       	subi	r18, 0x1E	; 30
   1cf88:	31 09       	sbc	r19, r1
   1cf8a:	30 93 9d 0f 	sts	0x0F9D, r19	; 0x800f9d <my_touch+0x7>
   1cf8e:	20 93 9c 0f 	sts	0x0F9C, r18	; 0x800f9c <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:272
			switch(touch_rotation)
   1cf92:	80 91 a3 0f 	lds	r24, 0x0FA3	; 0x800fa3 <my_touch+0xd>
   1cf96:	81 30       	cpi	r24, 0x01	; 1
   1cf98:	09 f4       	brne	.+2      	; 0x1cf9c <main+0x17e8>
   1cf9a:	6f c1       	rjmp	.+734    	; 0x1d27a <main+0x1ac6>
   1cf9c:	08 f4       	brcc	.+2      	; 0x1cfa0 <main+0x17ec>
   1cf9e:	3c c1       	rjmp	.+632    	; 0x1d218 <main+0x1a64>
   1cfa0:	82 30       	cpi	r24, 0x02	; 2
   1cfa2:	09 f4       	brne	.+2      	; 0x1cfa6 <main+0x17f2>
   1cfa4:	9b c1       	rjmp	.+822    	; 0x1d2dc <main+0x1b28>
   1cfa6:	83 30       	cpi	r24, 0x03	; 3
   1cfa8:	09 f4       	brne	.+2      	; 0x1cfac <main+0x17f8>
   1cfaa:	a4 c1       	rjmp	.+840    	; 0x1d2f4 <main+0x1b40>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:384
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
   1cfac:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1cfb0:	87 fd       	sbrc	r24, 7
   1cfb2:	13 c0       	rjmp	.+38     	; 0x1cfda <main+0x1826>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:386
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
   1cfb4:	80 ec       	ldi	r24, 0xC0	; 192
   1cfb6:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:387
			x0=x;
   1cfba:	80 91 9a 0f 	lds	r24, 0x0F9A	; 0x800f9a <my_touch+0x4>
   1cfbe:	90 91 9b 0f 	lds	r25, 0x0F9B	; 0x800f9b <my_touch+0x5>
   1cfc2:	90 93 97 0f 	sts	0x0F97, r25	; 0x800f97 <my_touch+0x1>
   1cfc6:	80 93 96 0f 	sts	0x0F96, r24	; 0x800f96 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:388
			y0=y;  	   			 
   1cfca:	80 91 9c 0f 	lds	r24, 0x0F9C	; 0x800f9c <my_touch+0x6>
   1cfce:	90 91 9d 0f 	lds	r25, 0x0F9D	; 0x800f9d <my_touch+0x7>
   1cfd2:	90 93 99 0f 	sts	0x0F99, r25	; 0x800f99 <my_touch+0x3>
   1cfd6:	80 93 98 0f 	sts	0x0F98, r24	; 0x800f98 <my_touch+0x2>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4017
    }
  }

  ///display_touch_click
  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State() & TP_PRES_DOWN)
   1cfda:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1cfde:	87 ff       	sbrs	r24, 7
   1cfe0:	b1 c1       	rjmp	.+866    	; 0x1d344 <main+0x1b90>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
  {
    click_x = my_touch.x;
   1cfe2:	00 91 9a 0f 	lds	r16, 0x0F9A	; 0x800f9a <my_touch+0x4>
   1cfe6:	10 91 9b 0f 	lds	r17, 0x0F9B	; 0x800f9b <my_touch+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4020
    click_y = my_touch.y;
   1cfea:	e0 90 9c 0f 	lds	r14, 0x0F9C	; 0x800f9c <my_touch+0x6>
   1cfee:	f0 90 9d 0f 	lds	r15, 0x0F9D	; 0x800f9d <my_touch+0x7>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4021
    click_on_display = 1;
   1cff2:	81 e0       	ldi	r24, 0x01	; 1
   1cff4:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <click_on_display>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
    click_y = 0;
    click_on_display = 0;
  }


  if (click_on_display == 1 && click_on_display_last == 0)
   1cff8:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <click_on_display>
   1cffc:	81 30       	cpi	r24, 0x01	; 1
   1cffe:	99 f4       	brne	.+38     	; 0x1d026 <main+0x1872>
   1d000:	80 91 89 0c 	lds	r24, 0x0C89	; 0x800c89 <click_on_display_last>
   1d004:	81 11       	cpse	r24, r1
   1d006:	0f c0       	rjmp	.+30     	; 0x1d026 <main+0x1872>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
  {
    click_time = millis();
   1d008:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
    display_auto_shutdown_now = 0;
   1d00c:	10 92 96 0c 	sts	0x0C96, r1	; 0x800c96 <display_auto_shutdown_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
    if (((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0) && my_touch.TP_GetOnOff() == 0)
   1d010:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <brigthness_display_mode>
   1d014:	86 ff       	sbrs	r24, 6
   1d016:	07 c0       	rjmp	.+14     	; 0x1d026 <main+0x1872>
   1d018:	80 91 a6 0f 	lds	r24, 0x0FA6	; 0x800fa6 <my_touch+0x10>
   1d01c:	81 11       	cpse	r24, r1
   1d01e:	03 c0       	rjmp	.+6      	; 0x1d026 <main+0x1872>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4037
    {
      my_touch.TP_SetOnOff(LED_ON);
   1d020:	81 e0       	ldi	r24, 0x01	; 1
   1d022:	0e 94 c5 d2 	call	0x1a58a	; 0x1a58a <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4046
  if (click_on_display == 1 && click_on_display_last == 1)
  {

  }

  click_on_display_last = click_on_display;
   1d026:	80 91 8a 0c 	lds	r24, 0x0C8A	; 0x800c8a <click_on_display>
   1d02a:	80 93 89 0c 	sts	0x0C89, r24	; 0x800c89 <click_on_display_last>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4049


  if (draw_menu(false, 0, click_x, click_y) == true)
   1d02e:	a7 01       	movw	r20, r14
   1d030:	b8 01       	movw	r22, r16
   1d032:	80 e0       	ldi	r24, 0x00	; 0
   1d034:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
   1d038:	88 23       	and	r24, r24
   1d03a:	39 f0       	breq	.+14     	; 0x1d04a <main+0x1896>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4051
  {
    draw_menu(true, 0, 0, 0);
   1d03c:	50 e0       	ldi	r21, 0x00	; 0
   1d03e:	40 e0       	ldi	r20, 0x00	; 0
   1d040:	70 e0       	ldi	r23, 0x00	; 0
   1d042:	60 e0       	ldi	r22, 0x00	; 0
   1d044:	81 e0       	ldi	r24, 0x01	; 1
   1d046:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <draw_menu(bool, unsigned char, unsigned int, unsigned int) [clone .constprop.141]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4068
      draw_menu(true);
    }
    }
  */

  load = millis() - load_now;
   1d04a:	0e 94 11 63 	call	0xc622	; 0xc622 <millis>
   1d04e:	dc 01       	movw	r26, r24
   1d050:	cb 01       	movw	r24, r22
   1d052:	cb 54       	subi	r28, 0x4B	; 75
   1d054:	df 4f       	sbci	r29, 0xFF	; 255
   1d056:	28 81       	ld	r18, Y
   1d058:	39 81       	ldd	r19, Y+1	; 0x01
   1d05a:	4a 81       	ldd	r20, Y+2	; 0x02
   1d05c:	5b 81       	ldd	r21, Y+3	; 0x03
   1d05e:	c5 5b       	subi	r28, 0xB5	; 181
   1d060:	d0 40       	sbci	r29, 0x00	; 0
   1d062:	82 1b       	sub	r24, r18
   1d064:	93 0b       	sbc	r25, r19
   1d066:	a4 0b       	sbc	r26, r20
   1d068:	b5 0b       	sbc	r27, r21
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4069
  if (load < load_min) load_min = load;
   1d06a:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <load_min>
   1d06e:	10 91 03 02 	lds	r17, 0x0203	; 0x800203 <load_min+0x1>
   1d072:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <load_min+0x2>
   1d076:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <load_min+0x3>
   1d07a:	80 17       	cp	r24, r16
   1d07c:	91 07       	cpc	r25, r17
   1d07e:	a2 07       	cpc	r26, r18
   1d080:	b3 07       	cpc	r27, r19
   1d082:	44 f4       	brge	.+16     	; 0x1d094 <main+0x18e0>
   1d084:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <load_min>
   1d088:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <load_min+0x1>
   1d08c:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <load_min+0x2>
   1d090:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4070
  if (load > load_max) load_max = load;
   1d094:	00 91 85 0c 	lds	r16, 0x0C85	; 0x800c85 <load_max>
   1d098:	10 91 86 0c 	lds	r17, 0x0C86	; 0x800c86 <load_max+0x1>
   1d09c:	20 91 87 0c 	lds	r18, 0x0C87	; 0x800c87 <load_max+0x2>
   1d0a0:	30 91 88 0c 	lds	r19, 0x0C88	; 0x800c88 <load_max+0x3>
   1d0a4:	08 17       	cp	r16, r24
   1d0a6:	19 07       	cpc	r17, r25
   1d0a8:	2a 07       	cpc	r18, r26
   1d0aa:	3b 07       	cpc	r19, r27
   1d0ac:	44 f4       	brge	.+16     	; 0x1d0be <main+0x190a>
   1d0ae:	80 93 85 0c 	sts	0x0C85, r24	; 0x800c85 <load_max>
   1d0b2:	90 93 86 0c 	sts	0x0C86, r25	; 0x800c86 <load_max+0x1>
   1d0b6:	a0 93 87 0c 	sts	0x0C87, r26	; 0x800c87 <load_max+0x2>
   1d0ba:	b0 93 88 0c 	sts	0x0C88, r27	; 0x800c88 <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4073

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   1d0be:	80 91 a3 0c 	lds	r24, 0x0CA3	; 0x800ca3 <light_curr>
   1d0c2:	90 91 a4 0c 	lds	r25, 0x0CA4	; 0x800ca4 <light_curr+0x1>
   1d0c6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <light_min>
   1d0ca:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <light_min+0x1>
   1d0ce:	82 17       	cp	r24, r18
   1d0d0:	93 07       	cpc	r25, r19
   1d0d2:	20 f4       	brcc	.+8      	; 0x1d0dc <main+0x1928>
   1d0d4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <light_min+0x1>
   1d0d8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4074
  if (light_curr > light_max) light_max = light_curr;
   1d0dc:	20 91 a1 0c 	lds	r18, 0x0CA1	; 0x800ca1 <light_max>
   1d0e0:	30 91 a2 0c 	lds	r19, 0x0CA2	; 0x800ca2 <light_max+0x1>
   1d0e4:	28 17       	cp	r18, r24
   1d0e6:	39 07       	cpc	r19, r25
   1d0e8:	20 f4       	brcc	.+8      	; 0x1d0f2 <main+0x193e>
   1d0ea:	90 93 a2 0c 	sts	0x0CA2, r25	; 0x800ca2 <light_max+0x1>
   1d0ee:	80 93 a1 0c 	sts	0x0CA1, r24	; 0x800ca1 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.1.0/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   1d0f2:	8c e4       	ldi	r24, 0x4C	; 76
   1d0f4:	94 eb       	ldi	r25, 0xB4	; 180
   1d0f6:	89 2b       	or	r24, r25
   1d0f8:	11 f4       	brne	.+4      	; 0x1d0fe <main+0x194a>
   1d0fa:	0c 94 39 dc 	jmp	0x1b872	; 0x1b872 <main+0xbe>
   1d0fe:	0e 94 4c b4 	call	0x16898	; 0x16898 <serialEventRun()>
   1d102:	0c 94 39 dc 	jmp	0x1b872	; 0x1b872 <main+0xbe>
   1d106:	7f ef       	ldi	r23, 0xFF	; 255
   1d108:	67 1a       	sub	r6, r23
   1d10a:	77 0a       	sbc	r7, r23
thermostat_running():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:394
  uint8_t start_hour, start_min, stop_hour, stop_min, active, week;
  int16_t t_start, t_stop, t_now;
  /// pokud neni vybrany zadny program, tak nic nedelam
  if (program != PROG_FREE)
  {
    for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
   1d10c:	8b e0       	ldi	r24, 0x0B	; 11
   1d10e:	68 16       	cp	r6, r24
   1d110:	71 04       	cpc	r7, r1
   1d112:	09 f0       	breq	.+2      	; 0x1d116 <main+0x1962>
   1d114:	19 cb       	rjmp	.-2510   	; 0x1c748 <main+0xf94>
   1d116:	77 cb       	rjmp	.-2322   	; 0x1c806 <main+0x1052>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
            break;
          }
        default: break;
      }
    }
    if (tmode == TERM_MODE_MAN_HEAT)
   1d118:	93 e0       	ldi	r25, 0x03	; 3
   1d11a:	79 12       	cpse	r7, r25
   1d11c:	10 c0       	rjmp	.+32     	; 0x1d13e <main+0x198a>
thermostat_pid_setdirection_direct():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:50
  }
}

void thermostat_pid_setdirection_direct(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(DIRECT);
   1d11e:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   1d122:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   1d126:	c2 01       	movw	r24, r4
   1d128:	88 0f       	add	r24, r24
   1d12a:	99 1f       	adc	r25, r25
   1d12c:	e8 0f       	add	r30, r24
   1d12e:	f9 1f       	adc	r31, r25
   1d130:	70 e0       	ldi	r23, 0x00	; 0
   1d132:	60 e0       	ldi	r22, 0x00	; 0
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
}

void thermostat_pid_setdirection_reverse(uint8_t idx)
{
  array_pids[idx]->SetControllerDirection(REVERSE);
   1d134:	80 81       	ld	r24, Z
   1d136:	91 81       	ldd	r25, Z+1	; 0x01
   1d138:	0e 94 ad 48 	call	0x915a	; 0x915a <PID::SetControllerDirection(int)>
   1d13c:	69 cb       	rjmp	.-2350   	; 0x1c810 <main+0x105c>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3332
    {

      thermostat_pid_setdirection_direct(tix);
    }

    if (tmode == TERM_MODE_MAN_COOL)
   1d13e:	e5 e0       	ldi	r30, 0x05	; 5
   1d140:	7e 12       	cpse	r7, r30
   1d142:	66 cb       	rjmp	.-2356   	; 0x1c810 <main+0x105c>
thermostat_pid_setdirection_reverse():
/tmp/arduino_build_41303/sketch/saric_thermostat.cpp:55
   1d144:	e0 91 17 0e 	lds	r30, 0x0E17	; 0x800e17 <array_pids>
   1d148:	f0 91 18 0e 	lds	r31, 0x0E18	; 0x800e18 <array_pids+0x1>
   1d14c:	c2 01       	movw	r24, r4
   1d14e:	88 0f       	add	r24, r24
   1d150:	99 1f       	adc	r25, r25
   1d152:	e8 0f       	add	r30, r24
   1d154:	f9 1f       	adc	r31, r25
   1d156:	61 e0       	ldi	r22, 0x01	; 1
   1d158:	70 e0       	ldi	r23, 0x00	; 0
   1d15a:	ec cf       	rjmp	.-40     	; 0x1d134 <main+0x1980>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
          pwm = 0;
   1d15c:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
          pwm = thermostat_pid_output(tix);
          thermostat_ring_set_power(tix, pwm);
        }
        else
        {
          tmode = TERM_MODE_ERR;
   1d15e:	3e ef       	ldi	r19, 0xFE	; 254
   1d160:	73 2e       	mov	r7, r19
   1d162:	b0 cb       	rjmp	.-2208   	; 0x1c8c4 <main+0x1110>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3404
    if (tmode == TERM_MODE_OFF)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_OFF);
      thermostat_ring_set_power(tix, 0);
    }
    if (tmode == TERM_MODE_MAX)
   1d164:	21 e0       	ldi	r18, 0x01	; 1
   1d166:	72 12       	cpse	r7, r18
   1d168:	09 c0       	rjmp	.+18     	; 0x1d17c <main+0x19c8>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d16a:	3f ef       	ldi	r19, 0xFF	; 255
   1d16c:	6a e0       	ldi	r22, 0x0A	; 10
   1d16e:	b3 16       	cp	r11, r19
   1d170:	09 f4       	brne	.+2      	; 0x1d174 <main+0x19c0>
   1d172:	09 cc       	rjmp	.-2030   	; 0x1c986 <main+0x11d2>
   1d174:	8b 2d       	mov	r24, r11
   1d176:	0e 94 cd 69 	call	0xd39a	; 0xd39a <mqtt_publis_output(unsigned char, unsigned char) [clone .part.35]>
   1d17a:	05 cc       	rjmp	.-2038   	; 0x1c986 <main+0x11d2>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
    if (tmode == TERM_MODE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_HEAT_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_CLIMATE_MAX)
   1d17c:	44 e0       	ldi	r20, 0x04	; 4
   1d17e:	74 12       	cpse	r7, r20
   1d180:	06 c0       	rjmp	.+12     	; 0x1d18e <main+0x19da>
mqtt_publis_output():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
void mqtt_publis_output(uint8_t idx, uint8_t state)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d182:	5f ef       	ldi	r21, 0xFF	; 255
   1d184:	b5 16       	cp	r11, r21
   1d186:	09 f4       	brne	.+2      	; 0x1d18a <main+0x19d6>
   1d188:	fe cb       	rjmp	.-2052   	; 0x1c986 <main+0x11d2>
   1d18a:	6b e0       	ldi	r22, 0x0B	; 11
   1d18c:	f3 cf       	rjmp	.-26     	; 0x1d174 <main+0x19c0>
thermostat():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3414
    if (tmode == TERM_MODE_CLIMATE_MAX)
    {
      mqtt_publis_output(tout, POWER_OUTPUT_COOL_MAX);
      thermostat_ring_set_power(tix, 255);
    }
    if (tmode == TERM_MODE_MAN_HEAT || tmode == TERM_MODE_MAN_COOL || tmode == TERM_MODE_FAN || tmode == TERM_MODE_ERR)
   1d18e:	63 e0       	ldi	r22, 0x03	; 3
   1d190:	76 16       	cp	r7, r22
   1d192:	09 f4       	brne	.+2      	; 0x1d196 <main+0x19e2>
   1d194:	de c0       	rjmp	.+444    	; 0x1d352 <main+0x1b9e>
   1d196:	8b ef       	ldi	r24, 0xFB	; 251
   1d198:	87 0d       	add	r24, r7
   1d19a:	82 30       	cpi	r24, 0x02	; 2
   1d19c:	08 f4       	brcc	.+2      	; 0x1d1a0 <main+0x19ec>
   1d19e:	00 c1       	rjmp	.+512    	; 0x1d3a0 <main+0x1bec>
   1d1a0:	7e ef       	ldi	r23, 0xFE	; 254
   1d1a2:	77 12       	cpse	r7, r23
   1d1a4:	f0 cb       	rjmp	.-2080   	; 0x1c986 <main+0x11d2>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d1a6:	4f ef       	ldi	r20, 0xFF	; 255
   1d1a8:	b4 16       	cp	r11, r20
   1d1aa:	09 f4       	brne	.+2      	; 0x1d1ae <main+0x19fa>
   1d1ac:	ec cb       	rjmp	.-2088   	; 0x1c986 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
  {
    strcpy_P(str_topic, termbig_header_in);
   1d1ae:	68 e2       	ldi	r22, 0x28	; 40
   1d1b0:	78 e8       	ldi	r23, 0x88	; 136
   1d1b2:	ce 01       	movw	r24, r28
   1d1b4:	8f 5b       	subi	r24, 0xBF	; 191
   1d1b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1b8:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
    strcat(str_topic, "power-output/");
   1d1bc:	69 e8       	ldi	r22, 0x89	; 137
   1d1be:	73 e0       	ldi	r23, 0x03	; 3
   1d1c0:	ce 01       	movw	r24, r28
   1d1c2:	8f 5b       	subi	r24, 0xBF	; 191
   1d1c4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1c6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d1ca:	4a e0       	ldi	r20, 0x0A	; 10
   1d1cc:	be 01       	movw	r22, r28
   1d1ce:	6c 55       	subi	r22, 0x5C	; 92
   1d1d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1d2:	8b 2d       	mov	r24, r11
   1d1d4:	90 e0       	ldi	r25, 0x00	; 0
   1d1d6:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d1da:	be 01       	movw	r22, r28
   1d1dc:	6c 55       	subi	r22, 0x5C	; 92
   1d1de:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1e0:	ce 01       	movw	r24, r28
   1d1e2:	8f 5b       	subi	r24, 0xBF	; 191
   1d1e4:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1e6:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3104
    if (mode == TERM_MODE_MAN_COOL)
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
   1d1ea:	64 ed       	ldi	r22, 0xD4	; 212
   1d1ec:	78 e0       	ldi	r23, 0x08	; 8
   1d1ee:	01 c1       	rjmp	.+514    	; 0x1d3f2 <main+0x1c3e>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
    ///
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_STATUS_BIT)) != 0) // Automatika
    {
      brigthness_display_auto_values = (float) (light_curr - light_max) / (light_max - light_min) * 200;
      if (brigthness_display_auto_values > 200)
        brigthness_display_auto_values = 200;
   1d1f0:	88 ec       	ldi	r24, 0xC8	; 200
   1d1f2:	80 93 a0 0c 	sts	0x0CA0, r24	; 0x800ca0 <brigthness_display_auto_values>
   1d1f6:	36 cc       	rjmp	.-1940   	; 0x1ca64 <main+0x12b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3979
    if ((brigthness_display_mode & (1 << DISPLAY_MODE_AUTO_SHUTDOWN_DISPLAY)) != 0)
    {
      if (display_auto_shutdown > display_auto_shutdown_now)
        display_auto_shutdown_now++;
      else
        my_touch.TP_SetOnOff(LED_OFF);
   1d1f8:	80 e0       	ldi	r24, 0x00	; 0
   1d1fa:	0e 94 c5 d2 	call	0x1a58a	; 0x1a58a <LCDWIKI_TOUCH::TP_SetOnOff(unsigned char) [clone .constprop.85]>
   1d1fe:	82 cc       	rjmp	.-1788   	; 0x1cb04 <main+0x1350>
mereni_hwwire():
/tmp/arduino_build_41303/sketch/saric_tds_function.cpp:320
            
          }

          else
          {
            status_tds18s20[w].online = False;
   1d200:	13 8e       	std	Z+27, r1	; 0x1b
   1d202:	7e cd       	rjmp	.-1284   	; 0x1cd00 <main+0x154c>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3162
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1d204:	9e 7f       	andi	r25, 0xFE	; 254
   1d206:	ec cd       	rjmp	.-1064   	; 0x1cde0 <main+0x162c>
   1d208:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   1d20a:	88 30       	cpi	r24, 0x08	; 8
   1d20c:	91 05       	cpc	r25, r1
   1d20e:	09 f0       	breq	.+2      	; 0x1d212 <main+0x1a5e>
   1d210:	3a ce       	rjmp	.-908    	; 0x1ce86 <main+0x16d2>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1d212:	10 92 84 0c 	sts	0x0C84, r1	; 0x800c84 <a2d_index>
   1d216:	4a ce       	rjmp	.-876    	; 0x1ceac <main+0x16f8>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:275
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
   1d218:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1d21c:	88 23       	and	r24, r24
   1d21e:	09 f4       	brne	.+2      	; 0x1d222 <main+0x1a6e>
   1d220:	c5 ce       	rjmp	.-630    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:279
					{
						break;
					}
					else if(lcd_rotation == 1)
   1d222:	81 30       	cpi	r24, 0x01	; 1
   1d224:	59 f4       	brne	.+22     	; 0x1d23c <main+0x1a88>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:349
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1d226:	30 93 9b 0f 	sts	0x0F9B, r19	; 0x800f9b <my_touch+0x5>
   1d22a:	20 93 9a 0f 	sts	0x0F9A, r18	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1d22e:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <my_touch+0xa>
   1d232:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <my_touch+0xb>
   1d236:	80 1b       	sub	r24, r16
   1d238:	91 0b       	sbc	r25, r17
   1d23a:	3d c0       	rjmp	.+122    	; 0x1d2b6 <main+0x1b02>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:287
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1d23c:	82 30       	cpi	r24, 0x02	; 2
   1d23e:	59 f4       	brne	.+22     	; 0x1d256 <main+0x1aa2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
   1d240:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1d244:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1d248:	80 1b       	sub	r24, r16
   1d24a:	91 0b       	sbc	r25, r17
   1d24c:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1d250:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1d254:	2a c0       	rjmp	.+84     	; 0x1d2aa <main+0x1af6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:292
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1d256:	83 30       	cpi	r24, 0x03	; 3
   1d258:	09 f0       	breq	.+2      	; 0x1d25c <main+0x1aa8>
   1d25a:	a8 ce       	rjmp	.-688    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:338
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
   1d25c:	10 93 9d 0f 	sts	0x0F9D, r17	; 0x800f9d <my_touch+0x7>
   1d260:	00 93 9c 0f 	sts	0x0F9C, r16	; 0x800f9c <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:339
						x = wid-x;
   1d264:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1d268:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1d26c:	82 1b       	sub	r24, r18
   1d26e:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1d270:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1d274:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1d278:	99 ce       	rjmp	.-718    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:302
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
   1d27a:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1d27e:	81 11       	cpse	r24, r1
   1d280:	07 c0       	rjmp	.+14     	; 0x1d290 <main+0x1adc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:370
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
   1d282:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1d286:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1d28a:	80 1b       	sub	r24, r16
   1d28c:	91 0b       	sbc	r25, r17
   1d28e:	f0 cf       	rjmp	.-32     	; 0x1d270 <main+0x1abc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:306
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
   1d290:	81 30       	cpi	r24, 0x01	; 1
   1d292:	49 f4       	brne	.+18     	; 0x1d2a6 <main+0x1af2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:376
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
   1d294:	30 93 9b 0f 	sts	0x0F9B, r19	; 0x800f9b <my_touch+0x5>
   1d298:	20 93 9a 0f 	sts	0x0F9A, r18	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:377
						y=tmp;
   1d29c:	10 93 9d 0f 	sts	0x0F9D, r17	; 0x800f9d <my_touch+0x7>
   1d2a0:	00 93 9c 0f 	sts	0x0F9C, r16	; 0x800f9c <my_touch+0x6>
   1d2a4:	83 ce       	rjmp	.-762    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:313
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
   1d2a6:	82 30       	cpi	r24, 0x02	; 2
   1d2a8:	59 f4       	brne	.+22     	; 0x1d2c0 <main+0x1b0c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:357
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
   1d2aa:	80 91 a0 0f 	lds	r24, 0x0FA0	; 0x800fa0 <my_touch+0xa>
   1d2ae:	90 91 a1 0f 	lds	r25, 0x0FA1	; 0x800fa1 <my_touch+0xb>
   1d2b2:	82 1b       	sub	r24, r18
   1d2b4:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:366
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
   1d2b6:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_touch+0x7>
   1d2ba:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_touch+0x6>
   1d2be:	76 ce       	rjmp	.-788    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
   1d2c0:	83 30       	cpi	r24, 0x03	; 3
   1d2c2:	09 f0       	breq	.+2      	; 0x1d2c6 <main+0x1b12>
   1d2c4:	73 ce       	rjmp	.-794    	; 0x1cfac <main+0x17f8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:365
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
   1d2c6:	80 91 9e 0f 	lds	r24, 0x0F9E	; 0x800f9e <my_touch+0x8>
   1d2ca:	90 91 9f 0f 	lds	r25, 0x0F9F	; 0x800f9f <my_touch+0x9>
   1d2ce:	82 1b       	sub	r24, r18
   1d2d0:	93 0b       	sbc	r25, r19
   1d2d2:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1d2d6:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
   1d2da:	a9 cf       	rjmp	.-174    	; 0x1d22e <main+0x1a7a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:328
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
   1d2dc:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1d2e0:	88 23       	and	r24, r24
   1d2e2:	09 f4       	brne	.+2      	; 0x1d2e6 <main+0x1b32>
   1d2e4:	ad cf       	rjmp	.-166    	; 0x1d240 <main+0x1a8c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1d2e6:	81 30       	cpi	r24, 0x01	; 1
   1d2e8:	09 f4       	brne	.+2      	; 0x1d2ec <main+0x1b38>
   1d2ea:	b8 cf       	rjmp	.-144    	; 0x1d25c <main+0x1aa8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:345
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
   1d2ec:	83 30       	cpi	r24, 0x03	; 3
   1d2ee:	09 f0       	breq	.+2      	; 0x1d2f2 <main+0x1b3e>
   1d2f0:	5d ce       	rjmp	.-838    	; 0x1cfac <main+0x17f8>
   1d2f2:	99 cf       	rjmp	.-206    	; 0x1d226 <main+0x1a72>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:355
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
   1d2f4:	80 91 a4 0f 	lds	r24, 0x0FA4	; 0x800fa4 <my_touch+0xe>
   1d2f8:	88 23       	and	r24, r24
   1d2fa:	b9 f2       	breq	.-82     	; 0x1d2aa <main+0x1af6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:359
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
   1d2fc:	81 30       	cpi	r24, 0x01	; 1
   1d2fe:	19 f3       	breq	.-58     	; 0x1d2c6 <main+0x1b12>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:368
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
   1d300:	82 30       	cpi	r24, 0x02	; 2
   1d302:	09 f4       	brne	.+2      	; 0x1d306 <main+0x1b52>
   1d304:	be cf       	rjmp	.-132    	; 0x1d282 <main+0x1ace>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:372
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
   1d306:	83 30       	cpi	r24, 0x03	; 3
   1d308:	09 f0       	breq	.+2      	; 0x1d30c <main+0x1b58>
   1d30a:	50 ce       	rjmp	.-864    	; 0x1cfac <main+0x17f8>
   1d30c:	c3 cf       	rjmp	.-122    	; 0x1d294 <main+0x1ae0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:393
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
   1d30e:	80 91 a2 0f 	lds	r24, 0x0FA2	; 0x800fa2 <my_touch+0xc>
   1d312:	87 ff       	sbrs	r24, 7
   1d314:	04 c0       	rjmp	.+8      	; 0x1d31e <main+0x1b6a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:395
		{
			touch_statue&=~(1<<7);
   1d316:	8f 77       	andi	r24, 0x7F	; 127
   1d318:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <my_touch+0xc>
   1d31c:	5e ce       	rjmp	.-836    	; 0x1cfda <main+0x1826>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:399
		}
		else
		{
			x0=0;
   1d31e:	10 92 97 0f 	sts	0x0F97, r1	; 0x800f97 <my_touch+0x1>
   1d322:	10 92 96 0f 	sts	0x0F96, r1	; 0x800f96 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:400
			y0=0;
   1d326:	10 92 99 0f 	sts	0x0F99, r1	; 0x800f99 <my_touch+0x3>
   1d32a:	10 92 98 0f 	sts	0x0F98, r1	; 0x800f98 <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:401
			x=0xffff;
   1d32e:	8f ef       	ldi	r24, 0xFF	; 255
   1d330:	9f ef       	ldi	r25, 0xFF	; 255
   1d332:	90 93 9b 0f 	sts	0x0F9B, r25	; 0x800f9b <my_touch+0x5>
   1d336:	80 93 9a 0f 	sts	0x0F9A, r24	; 0x800f9a <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:402
			y=0xffff;
   1d33a:	90 93 9d 0f 	sts	0x0F9D, r25	; 0x800f9d <my_touch+0x7>
   1d33e:	80 93 9c 0f 	sts	0x0F9C, r24	; 0x800f9c <my_touch+0x6>
   1d342:	4b ce       	rjmp	.-874    	; 0x1cfda <main+0x1826>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4027
  }
  else
  {
    click_x = 0;
    click_y = 0;
    click_on_display = 0;
   1d344:	10 92 8a 0c 	sts	0x0C8A, r1	; 0x800c8a <click_on_display>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4026
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
    click_y = 0;
   1d348:	f1 2c       	mov	r15, r1
   1d34a:	e1 2c       	mov	r14, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1d34c:	10 e0       	ldi	r17, 0x00	; 0
   1d34e:	00 e0       	ldi	r16, 0x00	; 0
   1d350:	53 ce       	rjmp	.-858    	; 0x1cff8 <main+0x1844>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d352:	3f ef       	ldi	r19, 0xFF	; 255
   1d354:	b3 16       	cp	r11, r19
   1d356:	09 f4       	brne	.+2      	; 0x1d35a <main+0x1ba6>
   1d358:	16 cb       	rjmp	.-2516   	; 0x1c986 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
  {
    strcpy_P(str_topic, termbig_header_in);
   1d35a:	68 e2       	ldi	r22, 0x28	; 40
   1d35c:	78 e8       	ldi	r23, 0x88	; 136
   1d35e:	ce 01       	movw	r24, r28
   1d360:	8f 5b       	subi	r24, 0xBF	; 191
   1d362:	9f 4f       	sbci	r25, 0xFF	; 255
   1d364:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
    strcat(str_topic, "power-output/");
   1d368:	69 e8       	ldi	r22, 0x89	; 137
   1d36a:	73 e0       	ldi	r23, 0x03	; 3
   1d36c:	ce 01       	movw	r24, r28
   1d36e:	8f 5b       	subi	r24, 0xBF	; 191
   1d370:	9f 4f       	sbci	r25, 0xFF	; 255
   1d372:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d376:	4a e0       	ldi	r20, 0x0A	; 10
   1d378:	be 01       	movw	r22, r28
   1d37a:	6c 55       	subi	r22, 0x5C	; 92
   1d37c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d37e:	8b 2d       	mov	r24, r11
   1d380:	90 e0       	ldi	r25, 0x00	; 0
   1d382:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d386:	be 01       	movw	r22, r28
   1d388:	6c 55       	subi	r22, 0x5C	; 92
   1d38a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d38c:	ce 01       	movw	r24, r28
   1d38e:	8f 5b       	subi	r24, 0xBF	; 191
   1d390:	9f 4f       	sbci	r25, 0xFF	; 255
   1d392:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
   1d396:	6e ec       	ldi	r22, 0xCE	; 206
   1d398:	78 e0       	ldi	r23, 0x08	; 8
   1d39a:	2b c0       	rjmp	.+86     	; 0x1d3f2 <main+0x1c3e>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4025
    click_y = my_touch.y;
    click_on_display = 1;
  }
  else
  {
    click_x = 0;
   1d39c:	91 2c       	mov	r9, r1
   1d39e:	03 cf       	rjmp	.-506    	; 0x1d1a6 <main+0x19f2>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3091
void mqtt_publis_output_pwm(uint8_t idx, uint8_t mode, uint8_t pwm)
{
  char str_topic[64];
  char payload[64];
  char str1[8];
  if (idx != 255)
   1d3a0:	6f ef       	ldi	r22, 0xFF	; 255
   1d3a2:	b6 16       	cp	r11, r22
   1d3a4:	09 f4       	brne	.+2      	; 0x1d3a8 <main+0x1bf4>
   1d3a6:	ef ca       	rjmp	.-2594   	; 0x1c986 <main+0x11d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
  {
    strcpy_P(str_topic, termbig_header_in);
   1d3a8:	68 e2       	ldi	r22, 0x28	; 40
   1d3aa:	78 e8       	ldi	r23, 0x88	; 136
   1d3ac:	ce 01       	movw	r24, r28
   1d3ae:	8f 5b       	subi	r24, 0xBF	; 191
   1d3b0:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3b2:	0e 94 9a ee 	call	0x1dd34	; 0x1dd34 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
    strcat(str_topic, "power-output/");
   1d3b6:	69 e8       	ldi	r22, 0x89	; 137
   1d3b8:	73 e0       	ldi	r23, 0x03	; 3
   1d3ba:	ce 01       	movw	r24, r28
   1d3bc:	8f 5b       	subi	r24, 0xBF	; 191
   1d3be:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3c0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d3c4:	4a e0       	ldi	r20, 0x0A	; 10
   1d3c6:	be 01       	movw	r22, r28
   1d3c8:	6c 55       	subi	r22, 0x5C	; 92
   1d3ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3cc:	8b 2d       	mov	r24, r11
   1d3ce:	90 e0       	ldi	r25, 0x00	; 0
   1d3d0:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
   1d3d4:	be 01       	movw	r22, r28
   1d3d6:	6c 55       	subi	r22, 0x5C	; 92
   1d3d8:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3da:	ce 01       	movw	r24, r28
   1d3dc:	8f 5b       	subi	r24, 0xBF	; 191
   1d3de:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3e0:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1d3e4:	55 e0       	ldi	r21, 0x05	; 5
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
      strcat(str_topic, "/cool");
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1d3e6:	64 ec       	ldi	r22, 0xC4	; 196
   1d3e8:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    strcat(str_topic, "power-output/");
    itoa(idx, str1, 10);
    strcat(str_topic, str1);
    if (mode == TERM_MODE_MAN_HEAT)
      strcat(str_topic, "/heat");
    if (mode == TERM_MODE_MAN_COOL)
   1d3ea:	75 12       	cpse	r7, r21
   1d3ec:	02 c0       	rjmp	.+4      	; 0x1d3f2 <main+0x1c3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3100
      strcat(str_topic, "/cool");
   1d3ee:	6e eb       	ldi	r22, 0xBE	; 190
   1d3f0:	78 e0       	ldi	r23, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
    if (mode == TERM_MODE_FAN)
      strcat(str_topic, "/fan");
   1d3f2:	ce 01       	movw	r24, r28
   1d3f4:	8f 5b       	subi	r24, 0xBF	; 191
   1d3f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3f8:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3105
    if (mode == TERM_MODE_ERR)
      strcat(str_topic, "/err");
    strcat(str_topic, "/pwm");
   1d3fc:	69 ec       	ldi	r22, 0xC9	; 201
   1d3fe:	78 e0       	ldi	r23, 0x08	; 8
   1d400:	ce 01       	movw	r24, r28
   1d402:	8f 5b       	subi	r24, 0xBF	; 191
   1d404:	9f 4f       	sbci	r25, 0xFF	; 255
   1d406:	0e 94 28 fb 	call	0x1f650	; 0x1f650 <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/stdlib.h:439
   1d40a:	4a e0       	ldi	r20, 0x0A	; 10
   1d40c:	be 01       	movw	r22, r28
   1d40e:	6f 5f       	subi	r22, 0xFF	; 255
   1d410:	7f 4f       	sbci	r23, 0xFF	; 255
   1d412:	89 2d       	mov	r24, r9
   1d414:	90 e0       	ldi	r25, 0x00	; 0
   1d416:	0e 94 d7 ee 	call	0x1ddae	; 0x1ddae <__itoa_ncheck>
mqtt_publis_output_pwm():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
    itoa(pwm, payload, 10);
    mqtt_client.publish(str_topic, payload);
   1d41a:	ae 01       	movw	r20, r28
   1d41c:	4f 5f       	subi	r20, 0xFF	; 255
   1d41e:	5f 4f       	sbci	r21, 0xFF	; 255
   1d420:	be 01       	movw	r22, r28
   1d422:	6f 5b       	subi	r22, 0xBF	; 191
   1d424:	7f 4f       	sbci	r23, 0xFF	; 255
   1d426:	8f e2       	ldi	r24, 0x2F	; 47
   1d428:	90 e1       	ldi	r25, 0x10	; 16
   1d42a:	0e 94 70 69 	call	0xd2e0	; 0xd2e0 <PubSubClient::publish(char const*, char const*)>
   1d42e:	ab ca       	rjmp	.-2730   	; 0x1c986 <main+0x11d2>

0001d430 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7404():
   1d430:	4f 92       	push	r4
   1d432:	5f 92       	push	r5
   1d434:	6f 92       	push	r6
   1d436:	7f 92       	push	r7
   1d438:	af 92       	push	r10
   1d43a:	bf 92       	push	r11
   1d43c:	cf 92       	push	r12
   1d43e:	df 92       	push	r13
   1d440:	ef 92       	push	r14
   1d442:	ff 92       	push	r15
   1d444:	0f 93       	push	r16
   1d446:	1f 93       	push	r17
   1d448:	cf 93       	push	r28
   1d44a:	df 93       	push	r29
   1d44c:	e5 e6       	ldi	r30, 0x65	; 101
   1d44e:	fd e0       	ldi	r31, 0x0D	; 13
   1d450:	13 82       	std	Z+3, r1	; 0x03
   1d452:	12 82       	std	Z+2, r1	; 0x02
   1d454:	88 ee       	ldi	r24, 0xE8	; 232
   1d456:	48 2e       	mov	r4, r24
   1d458:	83 e0       	ldi	r24, 0x03	; 3
   1d45a:	58 2e       	mov	r5, r24
   1d45c:	61 2c       	mov	r6, r1
   1d45e:	71 2c       	mov	r7, r1
   1d460:	44 82       	std	Z+4, r4	; 0x04
   1d462:	55 82       	std	Z+5, r5	; 0x05
   1d464:	66 82       	std	Z+6, r6	; 0x06
   1d466:	77 82       	std	Z+7, r7	; 0x07
   1d468:	8c e5       	ldi	r24, 0x5C	; 92
   1d46a:	92 e0       	ldi	r25, 0x02	; 2
   1d46c:	91 83       	std	Z+1, r25	; 0x01
   1d46e:	80 83       	st	Z, r24
   1d470:	85 ec       	ldi	r24, 0xC5	; 197
   1d472:	90 e0       	ldi	r25, 0x00	; 0
   1d474:	95 87       	std	Z+13, r25	; 0x0d
   1d476:	84 87       	std	Z+12, r24	; 0x0c
   1d478:	84 ec       	ldi	r24, 0xC4	; 196
   1d47a:	90 e0       	ldi	r25, 0x00	; 0
   1d47c:	97 87       	std	Z+15, r25	; 0x0f
   1d47e:	86 87       	std	Z+14, r24	; 0x0e
   1d480:	80 ec       	ldi	r24, 0xC0	; 192
   1d482:	90 e0       	ldi	r25, 0x00	; 0
   1d484:	91 8b       	std	Z+17, r25	; 0x11
   1d486:	80 8b       	std	Z+16, r24	; 0x10
   1d488:	81 ec       	ldi	r24, 0xC1	; 193
   1d48a:	90 e0       	ldi	r25, 0x00	; 0
   1d48c:	93 8b       	std	Z+19, r25	; 0x13
   1d48e:	82 8b       	std	Z+18, r24	; 0x12
   1d490:	82 ec       	ldi	r24, 0xC2	; 194
   1d492:	90 e0       	ldi	r25, 0x00	; 0
   1d494:	95 8b       	std	Z+21, r25	; 0x15
   1d496:	84 8b       	std	Z+20, r24	; 0x14
   1d498:	86 ec       	ldi	r24, 0xC6	; 198
   1d49a:	90 e0       	ldi	r25, 0x00	; 0
   1d49c:	97 8b       	std	Z+23, r25	; 0x17
   1d49e:	86 8b       	std	Z+22, r24	; 0x16
   1d4a0:	11 8e       	std	Z+25, r1	; 0x19
   1d4a2:	12 8e       	std	Z+26, r1	; 0x1a
   1d4a4:	13 8e       	std	Z+27, r1	; 0x1b
   1d4a6:	14 8e       	std	Z+28, r1	; 0x1c
   1d4a8:	ee e8       	ldi	r30, 0x8E	; 142
   1d4aa:	f2 e1       	ldi	r31, 0x12	; 18
   1d4ac:	c2 ef       	ldi	r28, 0xF2	; 242
   1d4ae:	d2 e0       	ldi	r29, 0x02	; 2
   1d4b0:	d1 83       	std	Z+1, r29	; 0x01
   1d4b2:	c0 83       	st	Z, r28
   1d4b4:	12 82       	std	Z+2, r1	; 0x02
   1d4b6:	13 82       	std	Z+3, r1	; 0x03
   1d4b8:	14 82       	std	Z+4, r1	; 0x04
   1d4ba:	15 82       	std	Z+5, r1	; 0x05
   1d4bc:	98 ef       	ldi	r25, 0xF8	; 248
   1d4be:	e9 2e       	mov	r14, r25
   1d4c0:	9f e0       	ldi	r25, 0x0F	; 15
   1d4c2:	f9 2e       	mov	r15, r25
   1d4c4:	f7 01       	movw	r30, r14
   1d4c6:	13 82       	std	Z+3, r1	; 0x03
   1d4c8:	12 82       	std	Z+2, r1	; 0x02
   1d4ca:	44 82       	std	Z+4, r4	; 0x04
   1d4cc:	55 82       	std	Z+5, r5	; 0x05
   1d4ce:	66 82       	std	Z+6, r6	; 0x06
   1d4d0:	77 82       	std	Z+7, r7	; 0x07
   1d4d2:	8e e6       	ldi	r24, 0x6E	; 110
   1d4d4:	92 e0       	ldi	r25, 0x02	; 2
   1d4d6:	91 83       	std	Z+1, r25	; 0x01
   1d4d8:	80 83       	st	Z, r24
   1d4da:	e4 e9       	ldi	r30, 0x94	; 148
   1d4dc:	f2 e1       	ldi	r31, 0x12	; 18
   1d4de:	d1 83       	std	Z+1, r29	; 0x01
   1d4e0:	c0 83       	st	Z, r28
   1d4e2:	12 82       	std	Z+2, r1	; 0x02
   1d4e4:	13 82       	std	Z+3, r1	; 0x03
   1d4e6:	14 82       	std	Z+4, r1	; 0x04
   1d4e8:	15 82       	std	Z+5, r1	; 0x05
   1d4ea:	e2 e0       	ldi	r30, 0x02	; 2
   1d4ec:	fe e0       	ldi	r31, 0x0E	; 14
   1d4ee:	80 e5       	ldi	r24, 0x50	; 80
   1d4f0:	80 83       	st	Z, r24
   1d4f2:	aa 24       	eor	r10, r10
   1d4f4:	a3 94       	inc	r10
   1d4f6:	a1 82       	std	Z+1, r10	; 0x01
   1d4f8:	ea e9       	ldi	r30, 0x9A	; 154
   1d4fa:	f2 e1       	ldi	r31, 0x12	; 18
   1d4fc:	d1 83       	std	Z+1, r29	; 0x01
   1d4fe:	c0 83       	st	Z, r28
   1d500:	12 82       	std	Z+2, r1	; 0x02
   1d502:	13 82       	std	Z+3, r1	; 0x03
   1d504:	14 82       	std	Z+4, r1	; 0x04
   1d506:	15 82       	std	Z+5, r1	; 0x05
   1d508:	e0 ea       	ldi	r30, 0xA0	; 160
   1d50a:	f2 e1       	ldi	r31, 0x12	; 18
   1d50c:	d1 83       	std	Z+1, r29	; 0x01
   1d50e:	c0 83       	st	Z, r28
   1d510:	12 82       	std	Z+2, r1	; 0x02
   1d512:	13 82       	std	Z+3, r1	; 0x03
   1d514:	14 82       	std	Z+4, r1	; 0x04
   1d516:	15 82       	std	Z+5, r1	; 0x05
   1d518:	e6 ea       	ldi	r30, 0xA6	; 166
   1d51a:	f2 e1       	ldi	r31, 0x12	; 18
   1d51c:	d1 83       	std	Z+1, r29	; 0x01
   1d51e:	c0 83       	st	Z, r28
   1d520:	12 82       	std	Z+2, r1	; 0x02
   1d522:	13 82       	std	Z+3, r1	; 0x03
   1d524:	14 82       	std	Z+4, r1	; 0x04
   1d526:	15 82       	std	Z+5, r1	; 0x05
   1d528:	ec ea       	ldi	r30, 0xAC	; 172
   1d52a:	f2 e1       	ldi	r31, 0x12	; 18
   1d52c:	d1 83       	std	Z+1, r29	; 0x01
   1d52e:	c0 83       	st	Z, r28
   1d530:	12 82       	std	Z+2, r1	; 0x02
   1d532:	13 82       	std	Z+3, r1	; 0x03
   1d534:	14 82       	std	Z+4, r1	; 0x04
   1d536:	15 82       	std	Z+5, r1	; 0x05
   1d538:	e2 eb       	ldi	r30, 0xB2	; 178
   1d53a:	f2 e1       	ldi	r31, 0x12	; 18
   1d53c:	d1 83       	std	Z+1, r29	; 0x01
   1d53e:	c0 83       	st	Z, r28
   1d540:	12 82       	std	Z+2, r1	; 0x02
   1d542:	13 82       	std	Z+3, r1	; 0x03
   1d544:	14 82       	std	Z+4, r1	; 0x04
   1d546:	15 82       	std	Z+5, r1	; 0x05
   1d548:	e4 e0       	ldi	r30, 0x04	; 4
   1d54a:	fe e0       	ldi	r31, 0x0E	; 14
   1d54c:	d1 83       	std	Z+1, r29	; 0x01
   1d54e:	c0 83       	st	Z, r28
   1d550:	12 82       	std	Z+2, r1	; 0x02
   1d552:	13 82       	std	Z+3, r1	; 0x03
   1d554:	14 82       	std	Z+4, r1	; 0x04
   1d556:	15 82       	std	Z+5, r1	; 0x05
   1d558:	13 86       	std	Z+11, r1	; 0x0b
   1d55a:	12 86       	std	Z+10, r1	; 0x0a
   1d55c:	2a e0       	ldi	r18, 0x0A	; 10
   1d55e:	b2 2e       	mov	r11, r18
   1d560:	b4 86       	std	Z+12, r11	; 0x0c
   1d562:	e1 e1       	ldi	r30, 0x11	; 17
   1d564:	fe e0       	ldi	r31, 0x0E	; 14
   1d566:	d1 83       	std	Z+1, r29	; 0x01
   1d568:	c0 83       	st	Z, r28
   1d56a:	12 82       	std	Z+2, r1	; 0x02
   1d56c:	13 82       	std	Z+3, r1	; 0x03
   1d56e:	14 82       	std	Z+4, r1	; 0x04
   1d570:	15 82       	std	Z+5, r1	; 0x05
   1d572:	e8 eb       	ldi	r30, 0xB8	; 184
   1d574:	f2 e1       	ldi	r31, 0x12	; 18
   1d576:	d1 83       	std	Z+1, r29	; 0x01
   1d578:	c0 83       	st	Z, r28
   1d57a:	12 82       	std	Z+2, r1	; 0x02
   1d57c:	13 82       	std	Z+3, r1	; 0x03
   1d57e:	14 82       	std	Z+4, r1	; 0x04
   1d580:	15 82       	std	Z+5, r1	; 0x05
   1d582:	8a e0       	ldi	r24, 0x0A	; 10
   1d584:	90 e0       	ldi	r25, 0x00	; 0
   1d586:	0e 94 0d f3 	call	0x1e61a	; 0x1e61a <malloc>
   1d58a:	90 93 18 0e 	sts	0x0E18, r25	; 0x800e18 <array_pids+0x1>
   1d58e:	80 93 17 0e 	sts	0x0E17, r24	; 0x800e17 <array_pids>
   1d592:	ee eb       	ldi	r30, 0xBE	; 190
   1d594:	f2 e1       	ldi	r31, 0x12	; 18
   1d596:	d1 83       	std	Z+1, r29	; 0x01
   1d598:	c0 83       	st	Z, r28
   1d59a:	12 82       	std	Z+2, r1	; 0x02
   1d59c:	13 82       	std	Z+3, r1	; 0x03
   1d59e:	14 82       	std	Z+4, r1	; 0x04
   1d5a0:	15 82       	std	Z+5, r1	; 0x05
   1d5a2:	e4 ec       	ldi	r30, 0xC4	; 196
   1d5a4:	f2 e1       	ldi	r31, 0x12	; 18
   1d5a6:	d1 83       	std	Z+1, r29	; 0x01
   1d5a8:	c0 83       	st	Z, r28
   1d5aa:	12 82       	std	Z+2, r1	; 0x02
   1d5ac:	13 82       	std	Z+3, r1	; 0x03
   1d5ae:	14 82       	std	Z+4, r1	; 0x04
   1d5b0:	15 82       	std	Z+5, r1	; 0x05
   1d5b2:	8b e5       	ldi	r24, 0x5B	; 91
   1d5b4:	97 e0       	ldi	r25, 0x07	; 7
   1d5b6:	90 93 3e 0e 	sts	0x0E3E, r25	; 0x800e3e <device+0x25>
   1d5ba:	80 93 3d 0e 	sts	0x0E3D, r24	; 0x800e3d <device+0x24>
   1d5be:	e1 e6       	ldi	r30, 0x61	; 97
   1d5c0:	f4 e1       	ldi	r31, 0x14	; 20
   1d5c2:	d1 83       	std	Z+1, r29	; 0x01
   1d5c4:	c0 83       	st	Z, r28
   1d5c6:	12 82       	std	Z+2, r1	; 0x02
   1d5c8:	13 82       	std	Z+3, r1	; 0x03
   1d5ca:	14 82       	std	Z+4, r1	; 0x04
   1d5cc:	15 82       	std	Z+5, r1	; 0x05
   1d5ce:	0b e7       	ldi	r16, 0x7B	; 123
   1d5d0:	12 e1       	ldi	r17, 0x12	; 18
   1d5d2:	88 e1       	ldi	r24, 0x18	; 24
   1d5d4:	f8 01       	movw	r30, r16
   1d5d6:	84 83       	std	Z+4, r24	; 0x04
   1d5d8:	8a e1       	ldi	r24, 0x1A	; 26
   1d5da:	83 83       	std	Z+3, r24	; 0x03
   1d5dc:	89 e1       	ldi	r24, 0x19	; 25
   1d5de:	85 83       	std	Z+5, r24	; 0x05
   1d5e0:	82 e0       	ldi	r24, 0x02	; 2
   1d5e2:	82 83       	std	Z+2, r24	; 0x02
   1d5e4:	10 82       	st	Z, r1
   1d5e6:	11 82       	std	Z+1, r1	; 0x01
   1d5e8:	16 82       	std	Z+6, r1	; 0x06
   1d5ea:	60 e0       	ldi	r22, 0x00	; 0
   1d5ec:	89 e1       	ldi	r24, 0x19	; 25
   1d5ee:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
   1d5f2:	84 e7       	ldi	r24, 0x74	; 116
   1d5f4:	92 e1       	ldi	r25, 0x12	; 18
   1d5f6:	0e 94 c0 bd 	call	0x17b80	; 0x17b80 <DateTime::DateTime(unsigned long) [clone .constprop.146]>
   1d5fa:	a4 e5       	ldi	r26, 0x54	; 84
   1d5fc:	b4 e1       	ldi	r27, 0x14	; 20
   1d5fe:	13 96       	adiw	r26, 0x03	; 3
   1d600:	1c 92       	st	X, r1
   1d602:	1e 92       	st	-X, r1
   1d604:	12 97       	sbiw	r26, 0x02	; 2
   1d606:	14 96       	adiw	r26, 0x04	; 4
   1d608:	4d 92       	st	X+, r4
   1d60a:	5d 92       	st	X+, r5
   1d60c:	6d 92       	st	X+, r6
   1d60e:	7c 92       	st	X, r7
   1d610:	17 97       	sbiw	r26, 0x07	; 7
   1d612:	20 ed       	ldi	r18, 0xD0	; 208
   1d614:	32 e0       	ldi	r19, 0x02	; 2
   1d616:	11 96       	adiw	r26, 0x01	; 1
   1d618:	3c 93       	st	X, r19
   1d61a:	2e 93       	st	-X, r18
   1d61c:	88 e0       	ldi	r24, 0x08	; 8
   1d61e:	1c 96       	adiw	r26, 0x0c	; 12
   1d620:	8c 93       	st	X, r24
   1d622:	1c 97       	sbiw	r26, 0x0c	; 12
   1d624:	e7 e6       	ldi	r30, 0x67	; 103
   1d626:	f2 e1       	ldi	r31, 0x12	; 18
   1d628:	13 82       	std	Z+3, r1	; 0x03
   1d62a:	12 82       	std	Z+2, r1	; 0x02
   1d62c:	44 82       	std	Z+4, r4	; 0x04
   1d62e:	55 82       	std	Z+5, r5	; 0x05
   1d630:	66 82       	std	Z+6, r6	; 0x06
   1d632:	77 82       	std	Z+7, r7	; 0x07
   1d634:	31 83       	std	Z+1, r19	; 0x01
   1d636:	20 83       	st	Z, r18
   1d638:	84 87       	std	Z+12, r24	; 0x0c
   1d63a:	ec e4       	ldi	r30, 0x4C	; 76
   1d63c:	f2 e1       	ldi	r31, 0x12	; 18
   1d63e:	13 82       	std	Z+3, r1	; 0x03
   1d640:	12 82       	std	Z+2, r1	; 0x02
   1d642:	44 82       	std	Z+4, r4	; 0x04
   1d644:	55 82       	std	Z+5, r5	; 0x05
   1d646:	66 82       	std	Z+6, r6	; 0x06
   1d648:	77 82       	std	Z+7, r7	; 0x07
   1d64a:	28 ea       	ldi	r18, 0xA8	; 168
   1d64c:	32 e0       	ldi	r19, 0x02	; 2
   1d64e:	31 83       	std	Z+1, r19	; 0x01
   1d650:	20 83       	st	Z, r18
   1d652:	84 87       	std	Z+12, r24	; 0x0c
   1d654:	d0 8b       	std	Z+16, r29	; 0x10
   1d656:	c7 87       	std	Z+15, r28	; 0x0f
   1d658:	11 8a       	std	Z+17, r1	; 0x11
   1d65a:	12 8a       	std	Z+18, r1	; 0x12
   1d65c:	13 8a       	std	Z+19, r1	; 0x13
   1d65e:	14 8a       	std	Z+20, r1	; 0x14
   1d660:	d0 93 3f 12 	sts	0x123F, r29	; 0x80123f <mqtt_client+0x210>
   1d664:	c0 93 3e 12 	sts	0x123E, r28	; 0x80123e <mqtt_client+0x20f>
   1d668:	10 92 40 12 	sts	0x1240, r1	; 0x801240 <mqtt_client+0x211>
   1d66c:	10 92 41 12 	sts	0x1241, r1	; 0x801241 <mqtt_client+0x212>
   1d670:	10 92 42 12 	sts	0x1242, r1	; 0x801242 <mqtt_client+0x213>
   1d674:	10 92 43 12 	sts	0x1243, r1	; 0x801243 <mqtt_client+0x214>
   1d678:	cc 24       	eor	r12, r12
   1d67a:	ca 94       	dec	r12
   1d67c:	dc 2c       	mov	r13, r12
   1d67e:	d0 92 4b 12 	sts	0x124B, r13	; 0x80124b <mqtt_client+0x21c>
   1d682:	c0 92 4a 12 	sts	0x124A, r12	; 0x80124a <mqtt_client+0x21b>
   1d686:	b0 93 30 10 	sts	0x1030, r27	; 0x801030 <mqtt_client+0x1>
   1d68a:	a0 93 2f 10 	sts	0x102F, r26	; 0x80102f <mqtt_client>
   1d68e:	10 92 49 12 	sts	0x1249, r1	; 0x801249 <mqtt_client+0x21a>
   1d692:	10 92 48 12 	sts	0x1248, r1	; 0x801248 <mqtt_client+0x219>
   1d696:	e9 e2       	ldi	r30, 0x29	; 41
   1d698:	f0 e1       	ldi	r31, 0x10	; 16
   1d69a:	13 82       	std	Z+3, r1	; 0x03
   1d69c:	12 82       	std	Z+2, r1	; 0x02
   1d69e:	8a e9       	ldi	r24, 0x9A	; 154
   1d6a0:	92 e0       	ldi	r25, 0x02	; 2
   1d6a2:	91 83       	std	Z+1, r25	; 0x01
   1d6a4:	80 83       	st	Z, r24
   1d6a6:	80 e5       	ldi	r24, 0x50	; 80
   1d6a8:	90 e0       	ldi	r25, 0x00	; 0
   1d6aa:	95 83       	std	Z+5, r25	; 0x05
   1d6ac:	84 83       	std	Z+4, r24	; 0x04
   1d6ae:	e1 e1       	ldi	r30, 0x11	; 17
   1d6b0:	f0 e1       	ldi	r31, 0x10	; 16
   1d6b2:	83 e0       	ldi	r24, 0x03	; 3
   1d6b4:	90 e0       	ldi	r25, 0x00	; 0
   1d6b6:	91 83       	std	Z+1, r25	; 0x01
   1d6b8:	80 83       	st	Z, r24
   1d6ba:	82 e0       	ldi	r24, 0x02	; 2
   1d6bc:	90 e0       	ldi	r25, 0x00	; 0
   1d6be:	93 83       	std	Z+3, r25	; 0x03
   1d6c0:	82 83       	std	Z+2, r24	; 0x02
   1d6c2:	16 82       	std	Z+6, r1	; 0x06
   1d6c4:	80 e2       	ldi	r24, 0x20	; 32
   1d6c6:	87 83       	std	Z+7, r24	; 0x07
   1d6c8:	10 86       	std	Z+8, r1	; 0x08
   1d6ca:	85 e0       	ldi	r24, 0x05	; 5
   1d6cc:	86 87       	std	Z+14, r24	; 0x0e
   1d6ce:	85 e0       	ldi	r24, 0x05	; 5
   1d6d0:	90 e0       	ldi	r25, 0x00	; 0
   1d6d2:	a0 e0       	ldi	r26, 0x00	; 0
   1d6d4:	b0 e0       	ldi	r27, 0x00	; 0
   1d6d6:	84 8b       	std	Z+20, r24	; 0x14
   1d6d8:	95 8b       	std	Z+21, r25	; 0x15
   1d6da:	a6 8b       	std	Z+22, r26	; 0x16
   1d6dc:	b7 8b       	std	Z+23, r27	; 0x17
   1d6de:	11 86       	std	Z+9, r1	; 0x09
   1d6e0:	a2 ee       	ldi	r26, 0xE2	; 226
   1d6e2:	b2 e1       	ldi	r27, 0x12	; 18
   1d6e4:	d0 96       	adiw	r26, 0x30	; 48
   1d6e6:	fc 93       	st	X, r31
   1d6e8:	ee 93       	st	-X, r30
   1d6ea:	9f 97       	sbiw	r26, 0x2f	; 47
   1d6ec:	87 e1       	ldi	r24, 0x17	; 23
   1d6ee:	93 e1       	ldi	r25, 0x13	; 19
   1d6f0:	90 93 b2 13 	sts	0x13B2, r25	; 0x8013b2 <network+0xd0>
   1d6f4:	80 93 b1 13 	sts	0x13B1, r24	; 0x8013b1 <network+0xcf>
   1d6f8:	8f eb       	ldi	r24, 0xBF	; 191
   1d6fa:	93 e1       	ldi	r25, 0x13	; 19
   1d6fc:	90 93 be 13 	sts	0x13BE, r25	; 0x8013be <network+0xdc>
   1d700:	80 93 bd 13 	sts	0x13BD, r24	; 0x8013bd <network+0xdb>
   1d704:	83 eb       	ldi	r24, 0xB3	; 179
   1d706:	93 e1       	ldi	r25, 0x13	; 19
   1d708:	98 96       	adiw	r26, 0x28	; 40
   1d70a:	9c 93       	st	X, r25
   1d70c:	8e 93       	st	-X, r24
   1d70e:	97 97       	sbiw	r26, 0x27	; 39
   1d710:	9b 96       	adiw	r26, 0x2b	; 43
   1d712:	1d 92       	st	X+, r1
   1d714:	1d 92       	st	X+, r1
   1d716:	1d 92       	st	X+, r1
   1d718:	1c 92       	st	X, r1
   1d71a:	9e 97       	sbiw	r26, 0x2e	; 46
   1d71c:	9a 96       	adiw	r26, 0x2a	; 42
   1d71e:	1c 92       	st	X, r1
   1d720:	9a 97       	sbiw	r26, 0x2a	; 42
   1d722:	99 96       	adiw	r26, 0x29	; 41
   1d724:	1c 92       	st	X, r1
   1d726:	99 97       	sbiw	r26, 0x29	; 41
   1d728:	1c 92       	st	X, r1
   1d72a:	ca ec       	ldi	r28, 0xCA	; 202
   1d72c:	d2 e1       	ldi	r29, 0x12	; 18
   1d72e:	ff 83       	std	Y+7, r31	; 0x07
   1d730:	ee 83       	std	Y+6, r30	; 0x06
   1d732:	b9 87       	std	Y+9, r27	; 0x09
   1d734:	a8 87       	std	Y+8, r26	; 0x08
   1d736:	c4 e0       	ldi	r28, 0x04	; 4
   1d738:	d0 e1       	ldi	r29, 0x10	; 16
   1d73a:	f9 82       	std	Y+1, r15	; 0x01
   1d73c:	e8 82       	st	Y, r14
   1d73e:	88 e4       	ldi	r24, 0x48	; 72
   1d740:	8a 83       	std	Y+2, r24	; 0x02
   1d742:	ec e0       	ldi	r30, 0x0C	; 12
   1d744:	f2 e0       	ldi	r31, 0x02	; 2
   1d746:	fc 87       	std	Y+12, r31	; 0x0c
   1d748:	eb 87       	std	Y+11, r30	; 0x0b
   1d74a:	91 81       	ldd	r25, Z+1	; 0x01
   1d74c:	9b 83       	std	Y+3, r25	; 0x03
   1d74e:	80 81       	ld	r24, Z
   1d750:	89 1b       	sub	r24, r25
   1d752:	99 0b       	sbc	r25, r25
   1d754:	ee 24       	eor	r14, r14
   1d756:	e3 94       	inc	r14
   1d758:	f1 2c       	mov	r15, r1
   1d75a:	97 01       	movw	r18, r14
   1d75c:	02 c0       	rjmp	.+4      	; 0x1d762 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404+0x332>
   1d75e:	22 0f       	add	r18, r18
   1d760:	33 1f       	adc	r19, r19
   1d762:	8a 95       	dec	r24
   1d764:	e2 f7       	brpl	.-8      	; 0x1d75e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404+0x32e>
   1d766:	c9 01       	movw	r24, r18
   1d768:	91 95       	neg	r25
   1d76a:	81 95       	neg	r24
   1d76c:	91 09       	sbc	r25, r1
   1d76e:	9d 83       	std	Y+5, r25	; 0x05
   1d770:	8c 83       	std	Y+4, r24	; 0x04
   1d772:	82 81       	ldd	r24, Z+2	; 0x02
   1d774:	8e 83       	std	Y+6, r24	; 0x06
   1d776:	b7 01       	movw	r22, r14
   1d778:	02 c0       	rjmp	.+4      	; 0x1d77e <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404+0x34e>
   1d77a:	66 0f       	add	r22, r22
   1d77c:	77 1f       	adc	r23, r23
   1d77e:	8a 95       	dec	r24
   1d780:	e2 f7       	brpl	.-8      	; 0x1d77a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7404+0x34a>
   1d782:	07 2e       	mov	r0, r23
   1d784:	00 0c       	add	r0, r0
   1d786:	88 0b       	sbc	r24, r24
   1d788:	99 0b       	sbc	r25, r25
   1d78a:	0e 94 45 f7 	call	0x1ee8a	; 0x1ee8a <__floatsisf>
   1d78e:	9b 01       	movw	r18, r22
   1d790:	ac 01       	movw	r20, r24
   1d792:	60 e0       	ldi	r22, 0x00	; 0
   1d794:	70 e0       	ldi	r23, 0x00	; 0
   1d796:	80 e8       	ldi	r24, 0x80	; 128
   1d798:	9f e3       	ldi	r25, 0x3F	; 63
   1d79a:	0e 94 78 f9 	call	0x1f2f0	; 0x1f2f0 <__divsf3>
   1d79e:	6f 83       	std	Y+7, r22	; 0x07
   1d7a0:	78 87       	std	Y+8, r23	; 0x08
   1d7a2:	89 87       	std	Y+9, r24	; 0x09
   1d7a4:	9a 87       	std	Y+10, r25	; 0x0a
   1d7a6:	c9 eb       	ldi	r28, 0xB9	; 185
   1d7a8:	df e0       	ldi	r29, 0x0F	; 15
   1d7aa:	80 e0       	ldi	r24, 0x00	; 0
   1d7ac:	98 ef       	ldi	r25, 0xF8	; 248
   1d7ae:	99 87       	std	Y+9, r25	; 0x09
   1d7b0:	88 87       	std	Y+8, r24	; 0x08
   1d7b2:	20 ee       	ldi	r18, 0xE0	; 224
   1d7b4:	37 e0       	ldi	r19, 0x07	; 7
   1d7b6:	3f 83       	std	Y+7, r19	; 0x07
   1d7b8:	2e 83       	std	Y+6, r18	; 0x06
   1d7ba:	9b 87       	std	Y+11, r25	; 0x0b
   1d7bc:	8a 87       	std	Y+10, r24	; 0x0a
   1d7be:	ac 86       	std	Y+12, r10	; 0x0c
   1d7c0:	1d 86       	std	Y+13, r1	; 0x0d
   1d7c2:	86 e8       	ldi	r24, 0x86	; 134
   1d7c4:	92 e0       	ldi	r25, 0x02	; 2
   1d7c6:	99 83       	std	Y+1, r25	; 0x01
   1d7c8:	88 83       	st	Y, r24
   1d7ca:	82 e2       	ldi	r24, 0x22	; 34
   1d7cc:	8e af       	std	Y+62, r24	; 0x3e
   1d7ce:	e6 ed       	ldi	r30, 0xD6	; 214
   1d7d0:	fd e8       	ldi	r31, 0x8D	; 141
   1d7d2:	e4 91       	lpm	r30, Z
   1d7d4:	f0 e0       	ldi	r31, 0x00	; 0
   1d7d6:	ee 0f       	add	r30, r30
   1d7d8:	ff 1f       	adc	r31, r31
   1d7da:	eb 55       	subi	r30, 0x5B	; 91
   1d7dc:	f2 47       	sbci	r31, 0x72	; 114
   1d7de:	a5 91       	lpm	r26, Z+
   1d7e0:	b4 91       	lpm	r27, Z
   1d7e2:	bf a7       	std	Y+47, r27	; 0x2f
   1d7e4:	ae a7       	std	Y+46, r26	; 0x2e
   1d7e6:	e8 ed       	ldi	r30, 0xD8	; 216
   1d7e8:	fd e8       	ldi	r31, 0x8D	; 141
   1d7ea:	e4 91       	lpm	r30, Z
   1d7ec:	f0 e0       	ldi	r31, 0x00	; 0
   1d7ee:	ee 0f       	add	r30, r30
   1d7f0:	ff 1f       	adc	r31, r31
   1d7f2:	eb 55       	subi	r30, 0x5B	; 91
   1d7f4:	f2 47       	sbci	r31, 0x72	; 114
   1d7f6:	85 91       	lpm	r24, Z+
   1d7f8:	94 91       	lpm	r25, Z
   1d7fa:	99 ab       	std	Y+49, r25	; 0x31
   1d7fc:	88 ab       	std	Y+48, r24	; 0x30
   1d7fe:	e9 ed       	ldi	r30, 0xD9	; 217
   1d800:	fd e8       	ldi	r31, 0x8D	; 141
   1d802:	e4 91       	lpm	r30, Z
   1d804:	f0 e0       	ldi	r31, 0x00	; 0
   1d806:	ee 0f       	add	r30, r30
   1d808:	ff 1f       	adc	r31, r31
   1d80a:	eb 55       	subi	r30, 0x5B	; 91
   1d80c:	f2 47       	sbci	r31, 0x72	; 114
   1d80e:	85 91       	lpm	r24, Z+
   1d810:	94 91       	lpm	r25, Z
   1d812:	9b ab       	std	Y+51, r25	; 0x33
   1d814:	8a ab       	std	Y+50, r24	; 0x32
   1d816:	e5 ed       	ldi	r30, 0xD5	; 213
   1d818:	fd e8       	ldi	r31, 0x8D	; 141
   1d81a:	e4 91       	lpm	r30, Z
   1d81c:	f0 e0       	ldi	r31, 0x00	; 0
   1d81e:	ee 0f       	add	r30, r30
   1d820:	ff 1f       	adc	r31, r31
   1d822:	eb 55       	subi	r30, 0x5B	; 91
   1d824:	f2 47       	sbci	r31, 0x72	; 114
   1d826:	85 91       	lpm	r24, Z+
   1d828:	94 91       	lpm	r25, Z
   1d82a:	9d ab       	std	Y+53, r25	; 0x35
   1d82c:	8c ab       	std	Y+52, r24	; 0x34
   1d82e:	e0 e9       	ldi	r30, 0x90	; 144
   1d830:	fd e8       	ldi	r31, 0x8D	; 141
   1d832:	84 91       	lpm	r24, Z
   1d834:	8e ab       	std	Y+54, r24	; 0x36
   1d836:	e2 e9       	ldi	r30, 0x92	; 146
   1d838:	fd e8       	ldi	r31, 0x8D	; 141
   1d83a:	24 91       	lpm	r18, Z
   1d83c:	2f ab       	std	Y+55, r18	; 0x37
   1d83e:	e3 e9       	ldi	r30, 0x93	; 147
   1d840:	fd e8       	ldi	r31, 0x8D	; 141
   1d842:	94 91       	lpm	r25, Z
   1d844:	98 af       	std	Y+56, r25	; 0x38
   1d846:	ef e8       	ldi	r30, 0x8F	; 143
   1d848:	fd e8       	ldi	r31, 0x8D	; 141
   1d84a:	e4 91       	lpm	r30, Z
   1d84c:	e9 af       	std	Y+57, r30	; 0x39
   1d84e:	38 2f       	mov	r19, r24
   1d850:	30 95       	com	r19
   1d852:	3a af       	std	Y+58, r19	; 0x3a
   1d854:	20 95       	com	r18
   1d856:	2b af       	std	Y+59, r18	; 0x3b
   1d858:	90 95       	com	r25
   1d85a:	9c af       	std	Y+60, r25	; 0x3c
   1d85c:	e0 95       	com	r30
   1d85e:	ed af       	std	Y+61, r30	; 0x3d
   1d860:	ec 91       	ld	r30, X
   1d862:	e8 2b       	or	r30, r24
   1d864:	ec 93       	st	X, r30
   1d866:	e8 a9       	ldd	r30, Y+48	; 0x30
   1d868:	f9 a9       	ldd	r31, Y+49	; 0x31
   1d86a:	80 81       	ld	r24, Z
   1d86c:	9f a9       	ldd	r25, Y+55	; 0x37
   1d86e:	89 2b       	or	r24, r25
   1d870:	80 83       	st	Z, r24
   1d872:	ea a9       	ldd	r30, Y+50	; 0x32
   1d874:	fb a9       	ldd	r31, Y+51	; 0x33
   1d876:	80 81       	ld	r24, Z
   1d878:	98 ad       	ldd	r25, Y+56	; 0x38
   1d87a:	89 2b       	or	r24, r25
   1d87c:	80 83       	st	Z, r24
   1d87e:	ec a9       	ldd	r30, Y+52	; 0x34
   1d880:	fd a9       	ldd	r31, Y+53	; 0x35
   1d882:	80 81       	ld	r24, Z
   1d884:	99 ad       	ldd	r25, Y+57	; 0x39
   1d886:	89 2b       	or	r24, r25
   1d888:	80 83       	st	Z, r24
   1d88a:	61 e0       	ldi	r22, 0x01	; 1
   1d88c:	81 e2       	ldi	r24, 0x21	; 33
   1d88e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d892:	61 e0       	ldi	r22, 0x01	; 1
   1d894:	83 e2       	ldi	r24, 0x23	; 35
   1d896:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d89a:	61 e0       	ldi	r22, 0x01	; 1
   1d89c:	84 e2       	ldi	r24, 0x24	; 36
   1d89e:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d8a2:	61 e0       	ldi	r22, 0x01	; 1
   1d8a4:	80 e2       	ldi	r24, 0x20	; 32
   1d8a6:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d8aa:	61 e0       	ldi	r22, 0x01	; 1
   1d8ac:	82 e2       	ldi	r24, 0x22	; 34
   1d8ae:	0e 94 58 62 	call	0xc4b0	; 0xc4b0 <digitalWrite>
   1d8b2:	61 e0       	ldi	r22, 0x01	; 1
   1d8b4:	82 e2       	ldi	r24, 0x22	; 34
   1d8b6:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d8ba:	1f 8a       	std	Y+23, r1	; 0x17
   1d8bc:	1e 8a       	std	Y+22, r1	; 0x16
   1d8be:	86 e9       	ldi	r24, 0x96	; 150
   1d8c0:	97 e7       	ldi	r25, 0x77	; 119
   1d8c2:	9b 8f       	std	Y+27, r25	; 0x1b
   1d8c4:	8a 8f       	std	Y+26, r24	; 0x1a
   1d8c6:	20 e4       	ldi	r18, 0x40	; 64
   1d8c8:	31 e0       	ldi	r19, 0x01	; 1
   1d8ca:	3f 87       	std	Y+15, r19	; 0x0f
   1d8cc:	2e 87       	std	Y+14, r18	; 0x0e
   1d8ce:	80 ee       	ldi	r24, 0xE0	; 224
   1d8d0:	91 e0       	ldi	r25, 0x01	; 1
   1d8d2:	99 8b       	std	Y+17, r25	; 0x11
   1d8d4:	88 8b       	std	Y+16, r24	; 0x10
   1d8d6:	41 b1       	in	r20, 0x01	; 1
   1d8d8:	4f ef       	ldi	r20, 0xFF	; 255
   1d8da:	41 b9       	out	0x01, r20	; 1
   1d8dc:	3b 8b       	std	Y+19, r19	; 0x13
   1d8de:	2a 8b       	std	Y+18, r18	; 0x12
   1d8e0:	9d 8b       	std	Y+21, r25	; 0x15
   1d8e2:	8c 8b       	std	Y+20, r24	; 0x14
   1d8e4:	e1 ed       	ldi	r30, 0xD1	; 209
   1d8e6:	fd e8       	ldi	r31, 0x8D	; 141
   1d8e8:	e4 91       	lpm	r30, Z
   1d8ea:	f0 e0       	ldi	r31, 0x00	; 0
   1d8ec:	ee 0f       	add	r30, r30
   1d8ee:	ff 1f       	adc	r31, r31
   1d8f0:	eb 55       	subi	r30, 0x5B	; 91
   1d8f2:	f2 47       	sbci	r31, 0x72	; 114
   1d8f4:	85 91       	lpm	r24, Z+
   1d8f6:	94 91       	lpm	r25, Z
   1d8f8:	c6 e9       	ldi	r28, 0x96	; 150
   1d8fa:	df e0       	ldi	r29, 0x0F	; 15
   1d8fc:	9a 8b       	std	Y+18, r25	; 0x12
   1d8fe:	89 8b       	std	Y+17, r24	; 0x11
   1d900:	e0 ed       	ldi	r30, 0xD0	; 208
   1d902:	fd e8       	ldi	r31, 0x8D	; 141
   1d904:	e4 91       	lpm	r30, Z
   1d906:	f0 e0       	ldi	r31, 0x00	; 0
   1d908:	ee 0f       	add	r30, r30
   1d90a:	ff 1f       	adc	r31, r31
   1d90c:	eb 55       	subi	r30, 0x5B	; 91
   1d90e:	f2 47       	sbci	r31, 0x72	; 114
   1d910:	85 91       	lpm	r24, Z+
   1d912:	94 91       	lpm	r25, Z
   1d914:	9c 8b       	std	Y+20, r25	; 0x14
   1d916:	8b 8b       	std	Y+19, r24	; 0x13
   1d918:	e2 ed       	ldi	r30, 0xD2	; 210
   1d91a:	fd e8       	ldi	r31, 0x8D	; 141
   1d91c:	e4 91       	lpm	r30, Z
   1d91e:	f0 e0       	ldi	r31, 0x00	; 0
   1d920:	ee 0f       	add	r30, r30
   1d922:	ff 1f       	adc	r31, r31
   1d924:	e1 5a       	subi	r30, 0xA1	; 161
   1d926:	f2 47       	sbci	r31, 0x72	; 114
   1d928:	85 91       	lpm	r24, Z+
   1d92a:	94 91       	lpm	r25, Z
   1d92c:	9e 8b       	std	Y+22, r25	; 0x16
   1d92e:	8d 8b       	std	Y+21, r24	; 0x15
   1d930:	e3 ed       	ldi	r30, 0xD3	; 211
   1d932:	fd e8       	ldi	r31, 0x8D	; 141
   1d934:	e4 91       	lpm	r30, Z
   1d936:	f0 e0       	ldi	r31, 0x00	; 0
   1d938:	ee 0f       	add	r30, r30
   1d93a:	ff 1f       	adc	r31, r31
   1d93c:	eb 55       	subi	r30, 0x5B	; 91
   1d93e:	f2 47       	sbci	r31, 0x72	; 114
   1d940:	85 91       	lpm	r24, Z+
   1d942:	94 91       	lpm	r25, Z
   1d944:	98 8f       	std	Y+24, r25	; 0x18
   1d946:	8f 8b       	std	Y+23, r24	; 0x17
   1d948:	ec eb       	ldi	r30, 0xBC	; 188
   1d94a:	fd e8       	ldi	r31, 0x8D	; 141
   1d94c:	e4 91       	lpm	r30, Z
   1d94e:	f0 e0       	ldi	r31, 0x00	; 0
   1d950:	ee 0f       	add	r30, r30
   1d952:	ff 1f       	adc	r31, r31
   1d954:	e1 5a       	subi	r30, 0xA1	; 161
   1d956:	f2 47       	sbci	r31, 0x72	; 114
   1d958:	85 91       	lpm	r24, Z+
   1d95a:	94 91       	lpm	r25, Z
   1d95c:	9a 8f       	std	Y+26, r25	; 0x1a
   1d95e:	89 8f       	std	Y+25, r24	; 0x19
   1d960:	e4 ed       	ldi	r30, 0xD4	; 212
   1d962:	fd e8       	ldi	r31, 0x8D	; 141
   1d964:	e4 91       	lpm	r30, Z
   1d966:	f0 e0       	ldi	r31, 0x00	; 0
   1d968:	ee 0f       	add	r30, r30
   1d96a:	ff 1f       	adc	r31, r31
   1d96c:	eb 55       	subi	r30, 0x5B	; 91
   1d96e:	f2 47       	sbci	r31, 0x72	; 114
   1d970:	85 91       	lpm	r24, Z+
   1d972:	94 91       	lpm	r25, Z
   1d974:	9c 8f       	std	Y+28, r25	; 0x1c
   1d976:	8b 8f       	std	Y+27, r24	; 0x1b
   1d978:	eb e8       	ldi	r30, 0x8B	; 139
   1d97a:	fd e8       	ldi	r31, 0x8D	; 141
   1d97c:	e4 91       	lpm	r30, Z
   1d97e:	ed 8f       	std	Y+29, r30	; 0x1d
   1d980:	ea e8       	ldi	r30, 0x8A	; 138
   1d982:	fd e8       	ldi	r31, 0x8D	; 141
   1d984:	e4 91       	lpm	r30, Z
   1d986:	ee 8f       	std	Y+30, r30	; 0x1e
   1d988:	ec e8       	ldi	r30, 0x8C	; 140
   1d98a:	fd e8       	ldi	r31, 0x8D	; 141
   1d98c:	e4 91       	lpm	r30, Z
   1d98e:	ef 8f       	std	Y+31, r30	; 0x1f
   1d990:	ed e8       	ldi	r30, 0x8D	; 141
   1d992:	fd e8       	ldi	r31, 0x8D	; 141
   1d994:	e4 91       	lpm	r30, Z
   1d996:	e8 a3       	std	Y+32, r30	; 0x20
   1d998:	e6 e7       	ldi	r30, 0x76	; 118
   1d99a:	fd e8       	ldi	r31, 0x8D	; 141
   1d99c:	e4 91       	lpm	r30, Z
   1d99e:	e9 a3       	std	Y+33, r30	; 0x21
   1d9a0:	ee e8       	ldi	r30, 0x8E	; 142
   1d9a2:	fd e8       	ldi	r31, 0x8D	; 141
   1d9a4:	e4 91       	lpm	r30, Z
   1d9a6:	ea a3       	std	Y+34, r30	; 0x22
   1d9a8:	61 e0       	ldi	r22, 0x01	; 1
   1d9aa:	8c e1       	ldi	r24, 0x1C	; 28
   1d9ac:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9b0:	61 e0       	ldi	r22, 0x01	; 1
   1d9b2:	8b e1       	ldi	r24, 0x1B	; 27
   1d9b4:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9b8:	60 e0       	ldi	r22, 0x00	; 0
   1d9ba:	8d e1       	ldi	r24, 0x1D	; 29
   1d9bc:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9c0:	61 e0       	ldi	r22, 0x01	; 1
   1d9c2:	8e e1       	ldi	r24, 0x1E	; 30
   1d9c4:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9c8:	60 e0       	ldi	r22, 0x00	; 0
   1d9ca:	87 e0       	ldi	r24, 0x07	; 7
   1d9cc:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9d0:	61 e0       	ldi	r22, 0x01	; 1
   1d9d2:	8f e1       	ldi	r24, 0x1F	; 31
   1d9d4:	0e 94 86 62 	call	0xc50c	; 0xc50c <pinMode>
   1d9d8:	1c 86       	std	Y+12, r1	; 0x0c
   1d9da:	1d 86       	std	Y+13, r1	; 0x0d
   1d9dc:	1e 86       	std	Y+14, r1	; 0x0e
   1d9de:	1f 86       	std	Y+15, r1	; 0x0f
   1d9e0:	18 8a       	std	Y+16, r1	; 0x10
   1d9e2:	19 86       	std	Y+9, r1	; 0x09
   1d9e4:	18 86       	std	Y+8, r1	; 0x08
   1d9e6:	1b 86       	std	Y+11, r1	; 0x0b
   1d9e8:	1a 86       	std	Y+10, r1	; 0x0a
   1d9ea:	19 82       	std	Y+1, r1	; 0x01
   1d9ec:	18 82       	st	Y, r1
   1d9ee:	1b 82       	std	Y+3, r1	; 0x03
   1d9f0:	1a 82       	std	Y+2, r1	; 0x02
   1d9f2:	dd 82       	std	Y+5, r13	; 0x05
   1d9f4:	cc 82       	std	Y+4, r12	; 0x04
   1d9f6:	df 82       	std	Y+7, r13	; 0x07
   1d9f8:	ce 82       	std	Y+6, r12	; 0x06
   1d9fa:	e7 e8       	ldi	r30, 0x87	; 135
   1d9fc:	fe e0       	ldi	r31, 0x0E	; 14
   1d9fe:	b0 82       	st	Z, r11
   1da00:	80 e9       	ldi	r24, 0x90	; 144
   1da02:	9e e0       	ldi	r25, 0x0E	; 14
   1da04:	94 83       	std	Z+4, r25	; 0x04
   1da06:	83 83       	std	Z+3, r24	; 0x03
   1da08:	80 e0       	ldi	r24, 0x00	; 0
   1da0a:	91 e0       	ldi	r25, 0x01	; 1
   1da0c:	96 83       	std	Z+6, r25	; 0x06
   1da0e:	85 83       	std	Z+5, r24	; 0x05
   1da10:	10 86       	std	Z+8, r1	; 0x08
   1da12:	17 82       	std	Z+7, r1	; 0x07
   1da14:	20 e8       	ldi	r18, 0x80	; 128
   1da16:	32 e0       	ldi	r19, 0x02	; 2
   1da18:	32 83       	std	Z+2, r19	; 0x02
   1da1a:	21 83       	std	Z+1, r18	; 0x01
   1da1c:	10 92 91 0f 	sts	0x0F91, r1	; 0x800f91 <doc+0x10a>
   1da20:	10 92 90 0f 	sts	0x0F90, r1	; 0x800f90 <doc+0x109>
   1da24:	ea e7       	ldi	r30, 0x7A	; 122
   1da26:	fe e0       	ldi	r31, 0x0E	; 14
   1da28:	40 e0       	ldi	r20, 0x00	; 0
   1da2a:	50 e0       	ldi	r21, 0x00	; 0
   1da2c:	62 e0       	ldi	r22, 0x02	; 2
   1da2e:	70 e0       	ldi	r23, 0x00	; 0
   1da30:	44 83       	std	Z+4, r20	; 0x04
   1da32:	55 83       	std	Z+5, r21	; 0x05
   1da34:	66 83       	std	Z+6, r22	; 0x06
   1da36:	77 83       	std	Z+7, r23	; 0x07
   1da38:	f3 82       	std	Z+3, r15	; 0x03
   1da3a:	e2 82       	std	Z+2, r14	; 0x02
   1da3c:	11 83       	std	Z+1, r17	; 0x01
   1da3e:	00 83       	st	Z, r16
   1da40:	26 e1       	ldi	r18, 0x16	; 22
   1da42:	20 87       	std	Z+8, r18	; 0x08
   1da44:	eb e6       	ldi	r30, 0x6B	; 107
   1da46:	fe e0       	ldi	r31, 0x0E	; 14
   1da48:	40 e0       	ldi	r20, 0x00	; 0
   1da4a:	50 e0       	ldi	r21, 0x00	; 0
   1da4c:	64 e0       	ldi	r22, 0x04	; 4
   1da4e:	70 e0       	ldi	r23, 0x00	; 0
   1da50:	44 83       	std	Z+4, r20	; 0x04
   1da52:	55 83       	std	Z+5, r21	; 0x05
   1da54:	66 83       	std	Z+6, r22	; 0x06
   1da56:	77 83       	std	Z+7, r23	; 0x07
   1da58:	91 87       	std	Z+9, r25	; 0x09
   1da5a:	80 87       	std	Z+8, r24	; 0x08
   1da5c:	13 82       	std	Z+3, r1	; 0x03
   1da5e:	12 82       	std	Z+2, r1	; 0x02
   1da60:	11 83       	std	Z+1, r17	; 0x01
   1da62:	00 83       	st	Z, r16
   1da64:	87 e1       	ldi	r24, 0x17	; 23
   1da66:	82 87       	std	Z+10, r24	; 0x0a
   1da68:	df 91       	pop	r29
   1da6a:	cf 91       	pop	r28
   1da6c:	1f 91       	pop	r17
   1da6e:	0f 91       	pop	r16
   1da70:	ff 90       	pop	r15
   1da72:	ef 90       	pop	r14
   1da74:	df 90       	pop	r13
   1da76:	cf 90       	pop	r12
   1da78:	bf 90       	pop	r11
   1da7a:	af 90       	pop	r10
   1da7c:	7f 90       	pop	r7
   1da7e:	6f 90       	pop	r6
   1da80:	5f 90       	pop	r5
   1da82:	4f 90       	pop	r4
   1da84:	08 95       	ret

0001da86 <dtostrf>:
dtostrf():
   1da86:	ef 92       	push	r14
   1da88:	0f 93       	push	r16
   1da8a:	1f 93       	push	r17
   1da8c:	cf 93       	push	r28
   1da8e:	df 93       	push	r29
   1da90:	e8 01       	movw	r28, r16
   1da92:	34 e0       	ldi	r19, 0x04	; 4
   1da94:	47 fd       	sbrc	r20, 7
   1da96:	34 e1       	ldi	r19, 0x14	; 20
   1da98:	04 2e       	mov	r0, r20
   1da9a:	00 0c       	add	r0, r0
   1da9c:	55 0b       	sbc	r21, r21
   1da9e:	57 ff       	sbrs	r21, 7
   1daa0:	03 c0       	rjmp	.+6      	; 0x1daa8 <dtostrf+0x22>
   1daa2:	51 95       	neg	r21
   1daa4:	41 95       	neg	r20
   1daa6:	51 09       	sbc	r21, r1
   1daa8:	e3 2e       	mov	r14, r19
   1daaa:	02 2f       	mov	r16, r18
   1daac:	24 2f       	mov	r18, r20
   1daae:	ae 01       	movw	r20, r28
   1dab0:	0e 94 94 f1 	call	0x1e328	; 0x1e328 <dtoa_prf>
   1dab4:	ce 01       	movw	r24, r28
   1dab6:	df 91       	pop	r29
   1dab8:	cf 91       	pop	r28
   1daba:	1f 91       	pop	r17
   1dabc:	0f 91       	pop	r16
   1dabe:	ef 90       	pop	r14
   1dac0:	08 95       	ret

0001dac2 <strtoul>:
strtoul():
   1dac2:	3f 92       	push	r3
   1dac4:	4f 92       	push	r4
   1dac6:	5f 92       	push	r5
   1dac8:	6f 92       	push	r6
   1daca:	7f 92       	push	r7
   1dacc:	8f 92       	push	r8
   1dace:	9f 92       	push	r9
   1dad0:	af 92       	push	r10
   1dad2:	bf 92       	push	r11
   1dad4:	cf 92       	push	r12
   1dad6:	df 92       	push	r13
   1dad8:	ef 92       	push	r14
   1dada:	ff 92       	push	r15
   1dadc:	0f 93       	push	r16
   1dade:	1f 93       	push	r17
   1dae0:	cf 93       	push	r28
   1dae2:	df 93       	push	r29
   1dae4:	5c 01       	movw	r10, r24
   1dae6:	6b 01       	movw	r12, r22
   1dae8:	7a 01       	movw	r14, r20
   1daea:	61 15       	cp	r22, r1
   1daec:	71 05       	cpc	r23, r1
   1daee:	19 f0       	breq	.+6      	; 0x1daf6 <strtoul+0x34>
   1daf0:	fb 01       	movw	r30, r22
   1daf2:	91 83       	std	Z+1, r25	; 0x01
   1daf4:	80 83       	st	Z, r24
   1daf6:	e1 14       	cp	r14, r1
   1daf8:	f1 04       	cpc	r15, r1
   1dafa:	49 f0       	breq	.+18     	; 0x1db0e <strtoul+0x4c>
   1dafc:	c7 01       	movw	r24, r14
   1dafe:	02 97       	sbiw	r24, 0x02	; 2
   1db00:	83 97       	sbiw	r24, 0x23	; 35
   1db02:	28 f0       	brcs	.+10     	; 0x1db0e <strtoul+0x4c>
   1db04:	60 e0       	ldi	r22, 0x00	; 0
   1db06:	70 e0       	ldi	r23, 0x00	; 0
   1db08:	cb 01       	movw	r24, r22
   1db0a:	9b c0       	rjmp	.+310    	; 0x1dc42 <strtoul+0x180>
   1db0c:	5e 01       	movw	r10, r28
   1db0e:	e5 01       	movw	r28, r10
   1db10:	21 96       	adiw	r28, 0x01	; 1
   1db12:	f5 01       	movw	r30, r10
   1db14:	10 81       	ld	r17, Z
   1db16:	81 2f       	mov	r24, r17
   1db18:	90 e0       	ldi	r25, 0x00	; 0
   1db1a:	0e 94 86 ee 	call	0x1dd0c	; 0x1dd0c <isspace>
   1db1e:	89 2b       	or	r24, r25
   1db20:	a9 f7       	brne	.-22     	; 0x1db0c <strtoul+0x4a>
   1db22:	1d 32       	cpi	r17, 0x2D	; 45
   1db24:	09 f0       	breq	.+2      	; 0x1db28 <strtoul+0x66>
   1db26:	5c c0       	rjmp	.+184    	; 0x1dbe0 <strtoul+0x11e>
   1db28:	21 96       	adiw	r28, 0x01	; 1
   1db2a:	f5 01       	movw	r30, r10
   1db2c:	11 81       	ldd	r17, Z+1	; 0x01
   1db2e:	01 e0       	ldi	r16, 0x01	; 1
   1db30:	e1 14       	cp	r14, r1
   1db32:	f1 04       	cpc	r15, r1
   1db34:	09 f4       	brne	.+2      	; 0x1db38 <strtoul+0x76>
   1db36:	bb c0       	rjmp	.+374    	; 0x1dcae <strtoul+0x1ec>
   1db38:	f0 e1       	ldi	r31, 0x10	; 16
   1db3a:	ef 16       	cp	r14, r31
   1db3c:	f1 04       	cpc	r15, r1
   1db3e:	09 f0       	breq	.+2      	; 0x1db42 <strtoul+0x80>
   1db40:	9b c0       	rjmp	.+310    	; 0x1dc78 <strtoul+0x1b6>
   1db42:	10 33       	cpi	r17, 0x30	; 48
   1db44:	41 f4       	brne	.+16     	; 0x1db56 <strtoul+0x94>
   1db46:	88 81       	ld	r24, Y
   1db48:	8f 7d       	andi	r24, 0xDF	; 223
   1db4a:	88 35       	cpi	r24, 0x58	; 88
   1db4c:	09 f0       	breq	.+2      	; 0x1db50 <strtoul+0x8e>
   1db4e:	8f c0       	rjmp	.+286    	; 0x1dc6e <strtoul+0x1ac>
   1db50:	19 81       	ldd	r17, Y+1	; 0x01
   1db52:	22 96       	adiw	r28, 0x02	; 2
   1db54:	02 60       	ori	r16, 0x02	; 2
   1db56:	e0 e1       	ldi	r30, 0x10	; 16
   1db58:	ee 2e       	mov	r14, r30
   1db5a:	f1 2c       	mov	r15, r1
   1db5c:	88 24       	eor	r8, r8
   1db5e:	8a 94       	dec	r8
   1db60:	98 2c       	mov	r9, r8
   1db62:	a8 2c       	mov	r10, r8
   1db64:	ff e0       	ldi	r31, 0x0F	; 15
   1db66:	bf 2e       	mov	r11, r31
   1db68:	20 e0       	ldi	r18, 0x00	; 0
   1db6a:	60 e0       	ldi	r22, 0x00	; 0
   1db6c:	70 e0       	ldi	r23, 0x00	; 0
   1db6e:	cb 01       	movw	r24, r22
   1db70:	27 01       	movw	r4, r14
   1db72:	0f 2c       	mov	r0, r15
   1db74:	00 0c       	add	r0, r0
   1db76:	66 08       	sbc	r6, r6
   1db78:	77 08       	sbc	r7, r7
   1db7a:	fe 01       	movw	r30, r28
   1db7c:	50 ed       	ldi	r21, 0xD0	; 208
   1db7e:	35 2e       	mov	r3, r21
   1db80:	31 0e       	add	r3, r17
   1db82:	39 e0       	ldi	r19, 0x09	; 9
   1db84:	33 15       	cp	r19, r3
   1db86:	68 f4       	brcc	.+26     	; 0x1dba2 <strtoul+0xe0>
   1db88:	3f eb       	ldi	r19, 0xBF	; 191
   1db8a:	31 0f       	add	r19, r17
   1db8c:	49 ec       	ldi	r20, 0xC9	; 201
   1db8e:	34 2e       	mov	r3, r20
   1db90:	3a 31       	cpi	r19, 0x1A	; 26
   1db92:	30 f0       	brcs	.+12     	; 0x1dba0 <strtoul+0xde>
   1db94:	3f e9       	ldi	r19, 0x9F	; 159
   1db96:	31 0f       	add	r19, r17
   1db98:	3a 31       	cpi	r19, 0x1A	; 26
   1db9a:	b0 f5       	brcc	.+108    	; 0x1dc08 <strtoul+0x146>
   1db9c:	39 ea       	ldi	r19, 0xA9	; 169
   1db9e:	33 2e       	mov	r3, r19
   1dba0:	31 0e       	add	r3, r17
   1dba2:	3e 14       	cp	r3, r14
   1dba4:	1f 04       	cpc	r1, r15
   1dba6:	84 f5       	brge	.+96     	; 0x1dc08 <strtoul+0x146>
   1dba8:	2f 3f       	cpi	r18, 0xFF	; 255
   1dbaa:	b9 f0       	breq	.+46     	; 0x1dbda <strtoul+0x118>
   1dbac:	86 16       	cp	r8, r22
   1dbae:	97 06       	cpc	r9, r23
   1dbb0:	a8 06       	cpc	r10, r24
   1dbb2:	b9 06       	cpc	r11, r25
   1dbb4:	38 f1       	brcs	.+78     	; 0x1dc04 <strtoul+0x142>
   1dbb6:	a3 01       	movw	r20, r6
   1dbb8:	92 01       	movw	r18, r4
   1dbba:	0e 94 78 f8 	call	0x1f0f0	; 0x1f0f0 <__mulsi3>
   1dbbe:	23 2d       	mov	r18, r3
   1dbc0:	30 e0       	ldi	r19, 0x00	; 0
   1dbc2:	50 e0       	ldi	r21, 0x00	; 0
   1dbc4:	40 e0       	ldi	r20, 0x00	; 0
   1dbc6:	62 0f       	add	r22, r18
   1dbc8:	73 1f       	adc	r23, r19
   1dbca:	84 1f       	adc	r24, r20
   1dbcc:	95 1f       	adc	r25, r21
   1dbce:	62 17       	cp	r22, r18
   1dbd0:	73 07       	cpc	r23, r19
   1dbd2:	84 07       	cpc	r24, r20
   1dbd4:	95 07       	cpc	r25, r21
   1dbd6:	b0 f0       	brcs	.+44     	; 0x1dc04 <strtoul+0x142>
   1dbd8:	21 e0       	ldi	r18, 0x01	; 1
   1dbda:	21 96       	adiw	r28, 0x01	; 1
   1dbdc:	10 81       	ld	r17, Z
   1dbde:	cd cf       	rjmp	.-102    	; 0x1db7a <strtoul+0xb8>
   1dbe0:	1b 32       	cpi	r17, 0x2B	; 43
   1dbe2:	21 f4       	brne	.+8      	; 0x1dbec <strtoul+0x12a>
   1dbe4:	e5 01       	movw	r28, r10
   1dbe6:	22 96       	adiw	r28, 0x02	; 2
   1dbe8:	f5 01       	movw	r30, r10
   1dbea:	11 81       	ldd	r17, Z+1	; 0x01
   1dbec:	00 e0       	ldi	r16, 0x00	; 0
   1dbee:	a0 cf       	rjmp	.-192    	; 0x1db30 <strtoul+0x6e>
   1dbf0:	78 e0       	ldi	r23, 0x08	; 8
   1dbf2:	e7 2e       	mov	r14, r23
   1dbf4:	f1 2c       	mov	r15, r1
   1dbf6:	88 24       	eor	r8, r8
   1dbf8:	8a 94       	dec	r8
   1dbfa:	98 2c       	mov	r9, r8
   1dbfc:	a8 2c       	mov	r10, r8
   1dbfe:	6f e1       	ldi	r22, 0x1F	; 31
   1dc00:	b6 2e       	mov	r11, r22
   1dc02:	b2 cf       	rjmp	.-156    	; 0x1db68 <strtoul+0xa6>
   1dc04:	2f ef       	ldi	r18, 0xFF	; 255
   1dc06:	e9 cf       	rjmp	.-46     	; 0x1dbda <strtoul+0x118>
   1dc08:	c1 14       	cp	r12, r1
   1dc0a:	d1 04       	cpc	r13, r1
   1dc0c:	31 f0       	breq	.+12     	; 0x1dc1a <strtoul+0x158>
   1dc0e:	22 23       	and	r18, r18
   1dc10:	51 f1       	breq	.+84     	; 0x1dc66 <strtoul+0x1a4>
   1dc12:	21 97       	sbiw	r28, 0x01	; 1
   1dc14:	f6 01       	movw	r30, r12
   1dc16:	d1 83       	std	Z+1, r29	; 0x01
   1dc18:	c0 83       	st	Z, r28
   1dc1a:	00 ff       	sbrs	r16, 0
   1dc1c:	07 c0       	rjmp	.+14     	; 0x1dc2c <strtoul+0x16a>
   1dc1e:	90 95       	com	r25
   1dc20:	80 95       	com	r24
   1dc22:	70 95       	com	r23
   1dc24:	61 95       	neg	r22
   1dc26:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc28:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc2a:	9f 4f       	sbci	r25, 0xFF	; 255
   1dc2c:	2f 3f       	cpi	r18, 0xFF	; 255
   1dc2e:	49 f4       	brne	.+18     	; 0x1dc42 <strtoul+0x180>
   1dc30:	82 e2       	ldi	r24, 0x22	; 34
   1dc32:	90 e0       	ldi	r25, 0x00	; 0
   1dc34:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <errno+0x1>
   1dc38:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <errno>
   1dc3c:	6f ef       	ldi	r22, 0xFF	; 255
   1dc3e:	7f ef       	ldi	r23, 0xFF	; 255
   1dc40:	cb 01       	movw	r24, r22
   1dc42:	df 91       	pop	r29
   1dc44:	cf 91       	pop	r28
   1dc46:	1f 91       	pop	r17
   1dc48:	0f 91       	pop	r16
   1dc4a:	ff 90       	pop	r15
   1dc4c:	ef 90       	pop	r14
   1dc4e:	df 90       	pop	r13
   1dc50:	cf 90       	pop	r12
   1dc52:	bf 90       	pop	r11
   1dc54:	af 90       	pop	r10
   1dc56:	9f 90       	pop	r9
   1dc58:	8f 90       	pop	r8
   1dc5a:	7f 90       	pop	r7
   1dc5c:	6f 90       	pop	r6
   1dc5e:	5f 90       	pop	r5
   1dc60:	4f 90       	pop	r4
   1dc62:	3f 90       	pop	r3
   1dc64:	08 95       	ret
   1dc66:	01 ff       	sbrs	r16, 1
   1dc68:	d8 cf       	rjmp	.-80     	; 0x1dc1a <strtoul+0x158>
   1dc6a:	22 97       	sbiw	r28, 0x02	; 2
   1dc6c:	d3 cf       	rjmp	.-90     	; 0x1dc14 <strtoul+0x152>
   1dc6e:	10 e3       	ldi	r17, 0x30	; 48
   1dc70:	e1 14       	cp	r14, r1
   1dc72:	f1 04       	cpc	r15, r1
   1dc74:	09 f4       	brne	.+2      	; 0x1dc78 <strtoul+0x1b6>
   1dc76:	bc cf       	rjmp	.-136    	; 0x1dbf0 <strtoul+0x12e>
   1dc78:	3a e0       	ldi	r19, 0x0A	; 10
   1dc7a:	e3 16       	cp	r14, r19
   1dc7c:	f1 04       	cpc	r15, r1
   1dc7e:	e9 f0       	breq	.+58     	; 0x1dcba <strtoul+0x1f8>
   1dc80:	80 e1       	ldi	r24, 0x10	; 16
   1dc82:	e8 16       	cp	r14, r24
   1dc84:	f1 04       	cpc	r15, r1
   1dc86:	09 f4       	brne	.+2      	; 0x1dc8a <strtoul+0x1c8>
   1dc88:	66 cf       	rjmp	.-308    	; 0x1db56 <strtoul+0x94>
   1dc8a:	e8 e0       	ldi	r30, 0x08	; 8
   1dc8c:	ee 16       	cp	r14, r30
   1dc8e:	f1 04       	cpc	r15, r1
   1dc90:	09 f4       	brne	.+2      	; 0x1dc94 <strtoul+0x1d2>
   1dc92:	b1 cf       	rjmp	.-158    	; 0x1dbf6 <strtoul+0x134>
   1dc94:	6f ef       	ldi	r22, 0xFF	; 255
   1dc96:	7f ef       	ldi	r23, 0xFF	; 255
   1dc98:	cb 01       	movw	r24, r22
   1dc9a:	97 01       	movw	r18, r14
   1dc9c:	0f 2c       	mov	r0, r15
   1dc9e:	00 0c       	add	r0, r0
   1dca0:	44 0b       	sbc	r20, r20
   1dca2:	55 0b       	sbc	r21, r21
   1dca4:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
   1dca8:	49 01       	movw	r8, r18
   1dcaa:	5a 01       	movw	r10, r20
   1dcac:	5d cf       	rjmp	.-326    	; 0x1db68 <strtoul+0xa6>
   1dcae:	10 33       	cpi	r17, 0x30	; 48
   1dcb0:	09 f4       	brne	.+2      	; 0x1dcb4 <strtoul+0x1f2>
   1dcb2:	49 cf       	rjmp	.-366    	; 0x1db46 <strtoul+0x84>
   1dcb4:	9a e0       	ldi	r25, 0x0A	; 10
   1dcb6:	e9 2e       	mov	r14, r25
   1dcb8:	f1 2c       	mov	r15, r1
   1dcba:	89 e9       	ldi	r24, 0x99	; 153
   1dcbc:	88 2e       	mov	r8, r24
   1dcbe:	98 2c       	mov	r9, r8
   1dcc0:	a8 2c       	mov	r10, r8
   1dcc2:	89 e1       	ldi	r24, 0x19	; 25
   1dcc4:	b8 2e       	mov	r11, r24
   1dcc6:	50 cf       	rjmp	.-352    	; 0x1db68 <strtoul+0xa6>

0001dcc8 <atof>:
atof():
   1dcc8:	66 27       	eor	r22, r22
   1dcca:	77 27       	eor	r23, r23
   1dccc:	0c 94 32 f4 	jmp	0x1e864	; 0x1e864 <strtod>

0001dcd0 <atoi>:
atoi():
   1dcd0:	fc 01       	movw	r30, r24
   1dcd2:	88 27       	eor	r24, r24
   1dcd4:	99 27       	eor	r25, r25
   1dcd6:	e8 94       	clt
   1dcd8:	21 91       	ld	r18, Z+
   1dcda:	20 32       	cpi	r18, 0x20	; 32
   1dcdc:	e9 f3       	breq	.-6      	; 0x1dcd8 <atoi+0x8>
   1dcde:	29 30       	cpi	r18, 0x09	; 9
   1dce0:	10 f0       	brcs	.+4      	; 0x1dce6 <atoi+0x16>
   1dce2:	2e 30       	cpi	r18, 0x0E	; 14
   1dce4:	c8 f3       	brcs	.-14     	; 0x1dcd8 <atoi+0x8>
   1dce6:	2b 32       	cpi	r18, 0x2B	; 43
   1dce8:	41 f0       	breq	.+16     	; 0x1dcfa <atoi+0x2a>
   1dcea:	2d 32       	cpi	r18, 0x2D	; 45
   1dcec:	39 f4       	brne	.+14     	; 0x1dcfc <atoi+0x2c>
   1dcee:	68 94       	set
   1dcf0:	04 c0       	rjmp	.+8      	; 0x1dcfa <atoi+0x2a>
   1dcf2:	0e 94 e2 ee 	call	0x1ddc4	; 0x1ddc4 <__mulhi_const_10>
   1dcf6:	82 0f       	add	r24, r18
   1dcf8:	91 1d       	adc	r25, r1
   1dcfa:	21 91       	ld	r18, Z+
   1dcfc:	20 53       	subi	r18, 0x30	; 48
   1dcfe:	2a 30       	cpi	r18, 0x0A	; 10
   1dd00:	c0 f3       	brcs	.-16     	; 0x1dcf2 <atoi+0x22>
   1dd02:	1e f4       	brtc	.+6      	; 0x1dd0a <atoi+0x3a>
   1dd04:	90 95       	com	r25
   1dd06:	81 95       	neg	r24
   1dd08:	9f 4f       	sbci	r25, 0xFF	; 255
   1dd0a:	08 95       	ret

0001dd0c <isspace>:
isspace():
   1dd0c:	91 11       	cpse	r25, r1
   1dd0e:	0c 94 68 f6 	jmp	0x1ecd0	; 0x1ecd0 <__ctype_isfalse>
   1dd12:	80 32       	cpi	r24, 0x20	; 32
   1dd14:	19 f0       	breq	.+6      	; 0x1dd1c <isspace+0x10>
   1dd16:	89 50       	subi	r24, 0x09	; 9
   1dd18:	85 50       	subi	r24, 0x05	; 5
   1dd1a:	c8 f7       	brcc	.-14     	; 0x1dd0e <isspace+0x2>
   1dd1c:	08 95       	ret

0001dd1e <strcat_P>:
strcat_P():
   1dd1e:	fb 01       	movw	r30, r22
   1dd20:	dc 01       	movw	r26, r24
   1dd22:	0d 90       	ld	r0, X+
   1dd24:	00 20       	and	r0, r0
   1dd26:	e9 f7       	brne	.-6      	; 0x1dd22 <strcat_P+0x4>
   1dd28:	11 97       	sbiw	r26, 0x01	; 1
   1dd2a:	05 90       	lpm	r0, Z+
   1dd2c:	0d 92       	st	X+, r0
   1dd2e:	00 20       	and	r0, r0
   1dd30:	e1 f7       	brne	.-8      	; 0x1dd2a <strcat_P+0xc>
   1dd32:	08 95       	ret

0001dd34 <strcpy_P>:
strcpy_P():
   1dd34:	fb 01       	movw	r30, r22
   1dd36:	dc 01       	movw	r26, r24
   1dd38:	05 90       	lpm	r0, Z+
   1dd3a:	0d 92       	st	X+, r0
   1dd3c:	00 20       	and	r0, r0
   1dd3e:	e1 f7       	brne	.-8      	; 0x1dd38 <strcpy_P+0x4>
   1dd40:	08 95       	ret

0001dd42 <strtok>:
strtok():
   1dd42:	47 e6       	ldi	r20, 0x67	; 103
   1dd44:	54 e1       	ldi	r21, 0x14	; 20
   1dd46:	0c 94 a5 ee 	jmp	0x1dd4a	; 0x1dd4a <strtok_r>

0001dd4a <strtok_r>:
strtok_r():
   1dd4a:	fa 01       	movw	r30, r20
   1dd4c:	a1 91       	ld	r26, Z+
   1dd4e:	b0 81       	ld	r27, Z
   1dd50:	00 97       	sbiw	r24, 0x00	; 0
   1dd52:	19 f4       	brne	.+6      	; 0x1dd5a <strtok_r+0x10>
   1dd54:	10 97       	sbiw	r26, 0x00	; 0
   1dd56:	e1 f0       	breq	.+56     	; 0x1dd90 <strtok_r+0x46>
   1dd58:	cd 01       	movw	r24, r26
   1dd5a:	dc 01       	movw	r26, r24
   1dd5c:	cd 01       	movw	r24, r26
   1dd5e:	0d 90       	ld	r0, X+
   1dd60:	00 20       	and	r0, r0
   1dd62:	11 f4       	brne	.+4      	; 0x1dd68 <strtok_r+0x1e>
   1dd64:	c0 01       	movw	r24, r0
   1dd66:	13 c0       	rjmp	.+38     	; 0x1dd8e <strtok_r+0x44>
   1dd68:	fb 01       	movw	r30, r22
   1dd6a:	21 91       	ld	r18, Z+
   1dd6c:	22 23       	and	r18, r18
   1dd6e:	19 f0       	breq	.+6      	; 0x1dd76 <strtok_r+0x2c>
   1dd70:	20 15       	cp	r18, r0
   1dd72:	d9 f7       	brne	.-10     	; 0x1dd6a <strtok_r+0x20>
   1dd74:	f3 cf       	rjmp	.-26     	; 0x1dd5c <strtok_r+0x12>
   1dd76:	fb 01       	movw	r30, r22
   1dd78:	21 91       	ld	r18, Z+
   1dd7a:	20 15       	cp	r18, r0
   1dd7c:	19 f4       	brne	.+6      	; 0x1dd84 <strtok_r+0x3a>
   1dd7e:	1e 92       	st	-X, r1
   1dd80:	11 96       	adiw	r26, 0x01	; 1
   1dd82:	06 c0       	rjmp	.+12     	; 0x1dd90 <strtok_r+0x46>
   1dd84:	22 23       	and	r18, r18
   1dd86:	c1 f7       	brne	.-16     	; 0x1dd78 <strtok_r+0x2e>
   1dd88:	0d 90       	ld	r0, X+
   1dd8a:	00 20       	and	r0, r0
   1dd8c:	a1 f7       	brne	.-24     	; 0x1dd76 <strtok_r+0x2c>
   1dd8e:	d0 01       	movw	r26, r0
   1dd90:	fa 01       	movw	r30, r20
   1dd92:	a1 93       	st	Z+, r26
   1dd94:	b0 83       	st	Z, r27
   1dd96:	08 95       	ret

0001dd98 <itoa>:
itoa():
   1dd98:	45 32       	cpi	r20, 0x25	; 37
   1dd9a:	51 05       	cpc	r21, r1
   1dd9c:	20 f4       	brcc	.+8      	; 0x1dda6 <itoa+0xe>
   1dd9e:	42 30       	cpi	r20, 0x02	; 2
   1dda0:	10 f0       	brcs	.+4      	; 0x1dda6 <itoa+0xe>
   1dda2:	0c 94 d7 ee 	jmp	0x1ddae	; 0x1ddae <__itoa_ncheck>
   1dda6:	fb 01       	movw	r30, r22
   1dda8:	10 82       	st	Z, r1
   1ddaa:	cb 01       	movw	r24, r22
   1ddac:	08 95       	ret

0001ddae <__itoa_ncheck>:
__itoa_ncheck():
   1ddae:	bb 27       	eor	r27, r27
   1ddb0:	4a 30       	cpi	r20, 0x0A	; 10
   1ddb2:	31 f4       	brne	.+12     	; 0x1ddc0 <__itoa_ncheck+0x12>
   1ddb4:	99 23       	and	r25, r25
   1ddb6:	22 f4       	brpl	.+8      	; 0x1ddc0 <__itoa_ncheck+0x12>
   1ddb8:	bd e2       	ldi	r27, 0x2D	; 45
   1ddba:	90 95       	com	r25
   1ddbc:	81 95       	neg	r24
   1ddbe:	9f 4f       	sbci	r25, 0xFF	; 255
   1ddc0:	0c 94 eb ee 	jmp	0x1ddd6	; 0x1ddd6 <__utoa_common>

0001ddc4 <__mulhi_const_10>:
__mulhi_const_10():
   1ddc4:	7a e0       	ldi	r23, 0x0A	; 10
   1ddc6:	97 9f       	mul	r25, r23
   1ddc8:	90 2d       	mov	r25, r0
   1ddca:	87 9f       	mul	r24, r23
   1ddcc:	80 2d       	mov	r24, r0
   1ddce:	91 0d       	add	r25, r1
   1ddd0:	11 24       	eor	r1, r1
   1ddd2:	08 95       	ret

0001ddd4 <__utoa_ncheck>:
__utoa_ncheck():
   1ddd4:	bb 27       	eor	r27, r27

0001ddd6 <__utoa_common>:
   1ddd6:	fb 01       	movw	r30, r22
   1ddd8:	55 27       	eor	r21, r21
   1ddda:	aa 27       	eor	r26, r26
   1dddc:	88 0f       	add	r24, r24
   1ddde:	99 1f       	adc	r25, r25
   1dde0:	aa 1f       	adc	r26, r26
   1dde2:	a4 17       	cp	r26, r20
   1dde4:	10 f0       	brcs	.+4      	; 0x1ddea <__utoa_common+0x14>
   1dde6:	a4 1b       	sub	r26, r20
   1dde8:	83 95       	inc	r24
   1ddea:	50 51       	subi	r21, 0x10	; 16
   1ddec:	b9 f7       	brne	.-18     	; 0x1dddc <__utoa_common+0x6>
   1ddee:	a0 5d       	subi	r26, 0xD0	; 208
   1ddf0:	aa 33       	cpi	r26, 0x3A	; 58
   1ddf2:	08 f0       	brcs	.+2      	; 0x1ddf6 <__utoa_common+0x20>
   1ddf4:	a9 5d       	subi	r26, 0xD9	; 217
   1ddf6:	a1 93       	st	Z+, r26
   1ddf8:	00 97       	sbiw	r24, 0x00	; 0
   1ddfa:	79 f7       	brne	.-34     	; 0x1ddda <__utoa_common+0x4>
   1ddfc:	b1 11       	cpse	r27, r1
   1ddfe:	b1 93       	st	Z+, r27
   1de00:	11 92       	st	Z+, r1
   1de02:	cb 01       	movw	r24, r22
   1de04:	0c 94 a0 f6 	jmp	0x1ed40	; 0x1ed40 <strrev>

0001de08 <fdevopen>:
fdevopen():
   1de08:	0f 93       	push	r16
   1de0a:	1f 93       	push	r17
   1de0c:	cf 93       	push	r28
   1de0e:	df 93       	push	r29
   1de10:	00 97       	sbiw	r24, 0x00	; 0
   1de12:	59 f4       	brne	.+22     	; 0x1de2a <fdevopen+0x22>
   1de14:	61 15       	cp	r22, r1
   1de16:	71 05       	cpc	r23, r1
   1de18:	41 f4       	brne	.+16     	; 0x1de2a <fdevopen+0x22>
   1de1a:	f0 e0       	ldi	r31, 0x00	; 0
   1de1c:	e0 e0       	ldi	r30, 0x00	; 0
   1de1e:	cf 01       	movw	r24, r30
   1de20:	df 91       	pop	r29
   1de22:	cf 91       	pop	r28
   1de24:	1f 91       	pop	r17
   1de26:	0f 91       	pop	r16
   1de28:	08 95       	ret
   1de2a:	8b 01       	movw	r16, r22
   1de2c:	ec 01       	movw	r28, r24
   1de2e:	6e e0       	ldi	r22, 0x0E	; 14
   1de30:	70 e0       	ldi	r23, 0x00	; 0
   1de32:	81 e0       	ldi	r24, 0x01	; 1
   1de34:	90 e0       	ldi	r25, 0x00	; 0
   1de36:	0e 94 78 f1 	call	0x1e2f0	; 0x1e2f0 <calloc>
   1de3a:	fc 01       	movw	r30, r24
   1de3c:	89 2b       	or	r24, r25
   1de3e:	69 f3       	breq	.-38     	; 0x1de1a <fdevopen+0x12>
   1de40:	80 e8       	ldi	r24, 0x80	; 128
   1de42:	83 83       	std	Z+3, r24	; 0x03
   1de44:	01 15       	cp	r16, r1
   1de46:	11 05       	cpc	r17, r1
   1de48:	71 f0       	breq	.+28     	; 0x1de66 <fdevopen+0x5e>
   1de4a:	13 87       	std	Z+11, r17	; 0x0b
   1de4c:	02 87       	std	Z+10, r16	; 0x0a
   1de4e:	81 e8       	ldi	r24, 0x81	; 129
   1de50:	83 83       	std	Z+3, r24	; 0x03
   1de52:	80 91 69 14 	lds	r24, 0x1469	; 0x801469 <__iob>
   1de56:	90 91 6a 14 	lds	r25, 0x146A	; 0x80146a <__iob+0x1>
   1de5a:	89 2b       	or	r24, r25
   1de5c:	21 f4       	brne	.+8      	; 0x1de66 <fdevopen+0x5e>
   1de5e:	f0 93 6a 14 	sts	0x146A, r31	; 0x80146a <__iob+0x1>
   1de62:	e0 93 69 14 	sts	0x1469, r30	; 0x801469 <__iob>
   1de66:	20 97       	sbiw	r28, 0x00	; 0
   1de68:	d1 f2       	breq	.-76     	; 0x1de1e <fdevopen+0x16>
   1de6a:	d1 87       	std	Z+9, r29	; 0x09
   1de6c:	c0 87       	std	Z+8, r28	; 0x08
   1de6e:	83 81       	ldd	r24, Z+3	; 0x03
   1de70:	82 60       	ori	r24, 0x02	; 2
   1de72:	83 83       	std	Z+3, r24	; 0x03
   1de74:	80 91 6b 14 	lds	r24, 0x146B	; 0x80146b <__iob+0x2>
   1de78:	90 91 6c 14 	lds	r25, 0x146C	; 0x80146c <__iob+0x3>
   1de7c:	89 2b       	or	r24, r25
   1de7e:	79 f6       	brne	.-98     	; 0x1de1e <fdevopen+0x16>
   1de80:	f0 93 6c 14 	sts	0x146C, r31	; 0x80146c <__iob+0x3>
   1de84:	e0 93 6b 14 	sts	0x146B, r30	; 0x80146b <__iob+0x2>
   1de88:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <__iob+0x4>
   1de8c:	90 91 6e 14 	lds	r25, 0x146E	; 0x80146e <__iob+0x5>
   1de90:	89 2b       	or	r24, r25
   1de92:	29 f6       	brne	.-118    	; 0x1de1e <fdevopen+0x16>
   1de94:	f0 93 6e 14 	sts	0x146E, r31	; 0x80146e <__iob+0x5>
   1de98:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <__iob+0x4>
   1de9c:	c0 cf       	rjmp	.-128    	; 0x1de1e <fdevopen+0x16>

0001de9e <printf_P>:
printf_P():
   1de9e:	0f 93       	push	r16
   1dea0:	1f 93       	push	r17
   1dea2:	cf 93       	push	r28
   1dea4:	df 93       	push	r29
   1dea6:	cd b7       	in	r28, 0x3d	; 61
   1dea8:	de b7       	in	r29, 0x3e	; 62
   1deaa:	ae 01       	movw	r20, r28
   1deac:	48 5f       	subi	r20, 0xF8	; 248
   1deae:	5f 4f       	sbci	r21, 0xFF	; 255
   1deb0:	da 01       	movw	r26, r20
   1deb2:	6d 91       	ld	r22, X+
   1deb4:	7d 91       	ld	r23, X+
   1deb6:	ad 01       	movw	r20, r26
   1deb8:	09 e6       	ldi	r16, 0x69	; 105
   1deba:	14 e1       	ldi	r17, 0x14	; 20
   1debc:	f8 01       	movw	r30, r16
   1debe:	82 81       	ldd	r24, Z+2	; 0x02
   1dec0:	93 81       	ldd	r25, Z+3	; 0x03
   1dec2:	dc 01       	movw	r26, r24
   1dec4:	13 96       	adiw	r26, 0x03	; 3
   1dec6:	2c 91       	ld	r18, X
   1dec8:	13 97       	sbiw	r26, 0x03	; 3
   1deca:	28 60       	ori	r18, 0x08	; 8
   1decc:	13 96       	adiw	r26, 0x03	; 3
   1dece:	2c 93       	st	X, r18
   1ded0:	0e 94 76 ef 	call	0x1deec	; 0x1deec <vfprintf>
   1ded4:	d8 01       	movw	r26, r16
   1ded6:	12 96       	adiw	r26, 0x02	; 2
   1ded8:	ed 91       	ld	r30, X+
   1deda:	fc 91       	ld	r31, X
   1dedc:	23 81       	ldd	r18, Z+3	; 0x03
   1dede:	27 7f       	andi	r18, 0xF7	; 247
   1dee0:	23 83       	std	Z+3, r18	; 0x03
   1dee2:	df 91       	pop	r29
   1dee4:	cf 91       	pop	r28
   1dee6:	1f 91       	pop	r17
   1dee8:	0f 91       	pop	r16
   1deea:	08 95       	ret

0001deec <vfprintf>:
vfprintf():
   1deec:	2f 92       	push	r2
   1deee:	3f 92       	push	r3
   1def0:	4f 92       	push	r4
   1def2:	5f 92       	push	r5
   1def4:	6f 92       	push	r6
   1def6:	7f 92       	push	r7
   1def8:	8f 92       	push	r8
   1defa:	9f 92       	push	r9
   1defc:	af 92       	push	r10
   1defe:	bf 92       	push	r11
   1df00:	cf 92       	push	r12
   1df02:	df 92       	push	r13
   1df04:	ef 92       	push	r14
   1df06:	ff 92       	push	r15
   1df08:	0f 93       	push	r16
   1df0a:	1f 93       	push	r17
   1df0c:	cf 93       	push	r28
   1df0e:	df 93       	push	r29
   1df10:	00 d0       	rcall	.+0      	; 0x1df12 <vfprintf+0x26>
   1df12:	00 d0       	rcall	.+0      	; 0x1df14 <vfprintf+0x28>
   1df14:	00 d0       	rcall	.+0      	; 0x1df16 <vfprintf+0x2a>
   1df16:	1f 92       	push	r1
   1df18:	1f 92       	push	r1
   1df1a:	cd b7       	in	r28, 0x3d	; 61
   1df1c:	de b7       	in	r29, 0x3e	; 62
   1df1e:	7c 01       	movw	r14, r24
   1df20:	3b 01       	movw	r6, r22
   1df22:	8a 01       	movw	r16, r20
   1df24:	fc 01       	movw	r30, r24
   1df26:	17 82       	std	Z+7, r1	; 0x07
   1df28:	16 82       	std	Z+6, r1	; 0x06
   1df2a:	83 81       	ldd	r24, Z+3	; 0x03
   1df2c:	81 ff       	sbrs	r24, 1
   1df2e:	dd c1       	rjmp	.+954    	; 0x1e2ea <vfprintf+0x3fe>
   1df30:	ce 01       	movw	r24, r28
   1df32:	01 96       	adiw	r24, 0x01	; 1
   1df34:	5c 01       	movw	r10, r24
   1df36:	f7 01       	movw	r30, r14
   1df38:	93 81       	ldd	r25, Z+3	; 0x03
   1df3a:	f3 01       	movw	r30, r6
   1df3c:	93 fd       	sbrc	r25, 3
   1df3e:	85 91       	lpm	r24, Z+
   1df40:	93 ff       	sbrs	r25, 3
   1df42:	81 91       	ld	r24, Z+
   1df44:	3f 01       	movw	r6, r30
   1df46:	88 23       	and	r24, r24
   1df48:	09 f4       	brne	.+2      	; 0x1df4c <vfprintf+0x60>
   1df4a:	53 c1       	rjmp	.+678    	; 0x1e1f2 <vfprintf+0x306>
   1df4c:	85 32       	cpi	r24, 0x25	; 37
   1df4e:	39 f4       	brne	.+14     	; 0x1df5e <vfprintf+0x72>
   1df50:	93 fd       	sbrc	r25, 3
   1df52:	85 91       	lpm	r24, Z+
   1df54:	93 ff       	sbrs	r25, 3
   1df56:	81 91       	ld	r24, Z+
   1df58:	3f 01       	movw	r6, r30
   1df5a:	85 32       	cpi	r24, 0x25	; 37
   1df5c:	29 f4       	brne	.+10     	; 0x1df68 <vfprintf+0x7c>
   1df5e:	b7 01       	movw	r22, r14
   1df60:	90 e0       	ldi	r25, 0x00	; 0
   1df62:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1df66:	e7 cf       	rjmp	.-50     	; 0x1df36 <vfprintf+0x4a>
   1df68:	91 2c       	mov	r9, r1
   1df6a:	21 2c       	mov	r2, r1
   1df6c:	31 2c       	mov	r3, r1
   1df6e:	ff e1       	ldi	r31, 0x1F	; 31
   1df70:	f3 15       	cp	r31, r3
   1df72:	38 f0       	brcs	.+14     	; 0x1df82 <vfprintf+0x96>
   1df74:	8b 32       	cpi	r24, 0x2B	; 43
   1df76:	11 f1       	breq	.+68     	; 0x1dfbc <vfprintf+0xd0>
   1df78:	90 f4       	brcc	.+36     	; 0x1df9e <vfprintf+0xb2>
   1df7a:	80 32       	cpi	r24, 0x20	; 32
   1df7c:	09 f1       	breq	.+66     	; 0x1dfc0 <vfprintf+0xd4>
   1df7e:	83 32       	cpi	r24, 0x23	; 35
   1df80:	29 f1       	breq	.+74     	; 0x1dfcc <vfprintf+0xe0>
   1df82:	37 fc       	sbrc	r3, 7
   1df84:	3c c0       	rjmp	.+120    	; 0x1dffe <vfprintf+0x112>
   1df86:	20 ed       	ldi	r18, 0xD0	; 208
   1df88:	28 0f       	add	r18, r24
   1df8a:	2a 30       	cpi	r18, 0x0A	; 10
   1df8c:	50 f5       	brcc	.+84     	; 0x1dfe2 <vfprintf+0xf6>
   1df8e:	36 fe       	sbrs	r3, 6
   1df90:	20 c0       	rjmp	.+64     	; 0x1dfd2 <vfprintf+0xe6>
   1df92:	8a e0       	ldi	r24, 0x0A	; 10
   1df94:	98 9e       	mul	r9, r24
   1df96:	20 0d       	add	r18, r0
   1df98:	11 24       	eor	r1, r1
   1df9a:	92 2e       	mov	r9, r18
   1df9c:	06 c0       	rjmp	.+12     	; 0x1dfaa <vfprintf+0xbe>
   1df9e:	8d 32       	cpi	r24, 0x2D	; 45
   1dfa0:	91 f0       	breq	.+36     	; 0x1dfc6 <vfprintf+0xda>
   1dfa2:	80 33       	cpi	r24, 0x30	; 48
   1dfa4:	71 f7       	brne	.-36     	; 0x1df82 <vfprintf+0x96>
   1dfa6:	68 94       	set
   1dfa8:	30 f8       	bld	r3, 0
   1dfaa:	f3 01       	movw	r30, r6
   1dfac:	93 fd       	sbrc	r25, 3
   1dfae:	85 91       	lpm	r24, Z+
   1dfb0:	93 ff       	sbrs	r25, 3
   1dfb2:	81 91       	ld	r24, Z+
   1dfb4:	3f 01       	movw	r6, r30
   1dfb6:	81 11       	cpse	r24, r1
   1dfb8:	da cf       	rjmp	.-76     	; 0x1df6e <vfprintf+0x82>
   1dfba:	21 c0       	rjmp	.+66     	; 0x1dffe <vfprintf+0x112>
   1dfbc:	68 94       	set
   1dfbe:	31 f8       	bld	r3, 1
   1dfc0:	68 94       	set
   1dfc2:	32 f8       	bld	r3, 2
   1dfc4:	f2 cf       	rjmp	.-28     	; 0x1dfaa <vfprintf+0xbe>
   1dfc6:	68 94       	set
   1dfc8:	33 f8       	bld	r3, 3
   1dfca:	ef cf       	rjmp	.-34     	; 0x1dfaa <vfprintf+0xbe>
   1dfcc:	68 94       	set
   1dfce:	34 f8       	bld	r3, 4
   1dfd0:	ec cf       	rjmp	.-40     	; 0x1dfaa <vfprintf+0xbe>
   1dfd2:	ea e0       	ldi	r30, 0x0A	; 10
   1dfd4:	2e 9e       	mul	r2, r30
   1dfd6:	20 0d       	add	r18, r0
   1dfd8:	11 24       	eor	r1, r1
   1dfda:	22 2e       	mov	r2, r18
   1dfdc:	68 94       	set
   1dfde:	35 f8       	bld	r3, 5
   1dfe0:	e4 cf       	rjmp	.-56     	; 0x1dfaa <vfprintf+0xbe>
   1dfe2:	8e 32       	cpi	r24, 0x2E	; 46
   1dfe4:	29 f4       	brne	.+10     	; 0x1dff0 <vfprintf+0x104>
   1dfe6:	36 fc       	sbrc	r3, 6
   1dfe8:	04 c1       	rjmp	.+520    	; 0x1e1f2 <vfprintf+0x306>
   1dfea:	68 94       	set
   1dfec:	36 f8       	bld	r3, 6
   1dfee:	dd cf       	rjmp	.-70     	; 0x1dfaa <vfprintf+0xbe>
   1dff0:	8c 36       	cpi	r24, 0x6C	; 108
   1dff2:	19 f4       	brne	.+6      	; 0x1dffa <vfprintf+0x10e>
   1dff4:	68 94       	set
   1dff6:	37 f8       	bld	r3, 7
   1dff8:	d8 cf       	rjmp	.-80     	; 0x1dfaa <vfprintf+0xbe>
   1dffa:	88 36       	cpi	r24, 0x68	; 104
   1dffc:	b1 f2       	breq	.-84     	; 0x1dfaa <vfprintf+0xbe>
   1dffe:	98 2f       	mov	r25, r24
   1e000:	9f 7d       	andi	r25, 0xDF	; 223
   1e002:	95 54       	subi	r25, 0x45	; 69
   1e004:	93 30       	cpi	r25, 0x03	; 3
   1e006:	e0 f0       	brcs	.+56     	; 0x1e040 <vfprintf+0x154>
   1e008:	83 36       	cpi	r24, 0x63	; 99
   1e00a:	a1 f1       	breq	.+104    	; 0x1e074 <vfprintf+0x188>
   1e00c:	83 37       	cpi	r24, 0x73	; 115
   1e00e:	c1 f1       	breq	.+112    	; 0x1e080 <vfprintf+0x194>
   1e010:	83 35       	cpi	r24, 0x53	; 83
   1e012:	09 f0       	breq	.+2      	; 0x1e016 <vfprintf+0x12a>
   1e014:	63 c0       	rjmp	.+198    	; 0x1e0dc <vfprintf+0x1f0>
   1e016:	28 01       	movw	r4, r16
   1e018:	f2 e0       	ldi	r31, 0x02	; 2
   1e01a:	4f 0e       	add	r4, r31
   1e01c:	51 1c       	adc	r5, r1
   1e01e:	f8 01       	movw	r30, r16
   1e020:	c0 80       	ld	r12, Z
   1e022:	d1 80       	ldd	r13, Z+1	; 0x01
   1e024:	69 2d       	mov	r22, r9
   1e026:	70 e0       	ldi	r23, 0x00	; 0
   1e028:	36 fc       	sbrc	r3, 6
   1e02a:	02 c0       	rjmp	.+4      	; 0x1e030 <vfprintf+0x144>
   1e02c:	6f ef       	ldi	r22, 0xFF	; 255
   1e02e:	7f ef       	ldi	r23, 0xFF	; 255
   1e030:	c6 01       	movw	r24, r12
   1e032:	0e 94 83 f6 	call	0x1ed06	; 0x1ed06 <strnlen_P>
   1e036:	4c 01       	movw	r8, r24
   1e038:	68 94       	set
   1e03a:	37 f8       	bld	r3, 7
   1e03c:	82 01       	movw	r16, r4
   1e03e:	0a c0       	rjmp	.+20     	; 0x1e054 <vfprintf+0x168>
   1e040:	0c 5f       	subi	r16, 0xFC	; 252
   1e042:	1f 4f       	sbci	r17, 0xFF	; 255
   1e044:	ff e3       	ldi	r31, 0x3F	; 63
   1e046:	f9 83       	std	Y+1, r31	; 0x01
   1e048:	88 24       	eor	r8, r8
   1e04a:	83 94       	inc	r8
   1e04c:	91 2c       	mov	r9, r1
   1e04e:	65 01       	movw	r12, r10
   1e050:	e8 94       	clt
   1e052:	37 f8       	bld	r3, 7
   1e054:	33 fe       	sbrs	r3, 3
   1e056:	2d c0       	rjmp	.+90     	; 0x1e0b2 <vfprintf+0x1c6>
   1e058:	52 2c       	mov	r5, r2
   1e05a:	81 14       	cp	r8, r1
   1e05c:	91 04       	cpc	r9, r1
   1e05e:	71 f5       	brne	.+92     	; 0x1e0bc <vfprintf+0x1d0>
   1e060:	55 20       	and	r5, r5
   1e062:	09 f4       	brne	.+2      	; 0x1e066 <vfprintf+0x17a>
   1e064:	68 cf       	rjmp	.-304    	; 0x1df36 <vfprintf+0x4a>
   1e066:	b7 01       	movw	r22, r14
   1e068:	80 e2       	ldi	r24, 0x20	; 32
   1e06a:	90 e0       	ldi	r25, 0x00	; 0
   1e06c:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e070:	5a 94       	dec	r5
   1e072:	f6 cf       	rjmp	.-20     	; 0x1e060 <vfprintf+0x174>
   1e074:	f8 01       	movw	r30, r16
   1e076:	80 81       	ld	r24, Z
   1e078:	89 83       	std	Y+1, r24	; 0x01
   1e07a:	0e 5f       	subi	r16, 0xFE	; 254
   1e07c:	1f 4f       	sbci	r17, 0xFF	; 255
   1e07e:	e4 cf       	rjmp	.-56     	; 0x1e048 <vfprintf+0x15c>
   1e080:	28 01       	movw	r4, r16
   1e082:	f2 e0       	ldi	r31, 0x02	; 2
   1e084:	4f 0e       	add	r4, r31
   1e086:	51 1c       	adc	r5, r1
   1e088:	f8 01       	movw	r30, r16
   1e08a:	c0 80       	ld	r12, Z
   1e08c:	d1 80       	ldd	r13, Z+1	; 0x01
   1e08e:	69 2d       	mov	r22, r9
   1e090:	70 e0       	ldi	r23, 0x00	; 0
   1e092:	36 fc       	sbrc	r3, 6
   1e094:	02 c0       	rjmp	.+4      	; 0x1e09a <vfprintf+0x1ae>
   1e096:	6f ef       	ldi	r22, 0xFF	; 255
   1e098:	7f ef       	ldi	r23, 0xFF	; 255
   1e09a:	c6 01       	movw	r24, r12
   1e09c:	0e 94 95 f6 	call	0x1ed2a	; 0x1ed2a <strnlen>
   1e0a0:	4c 01       	movw	r8, r24
   1e0a2:	82 01       	movw	r16, r4
   1e0a4:	d5 cf       	rjmp	.-86     	; 0x1e050 <vfprintf+0x164>
   1e0a6:	b7 01       	movw	r22, r14
   1e0a8:	80 e2       	ldi	r24, 0x20	; 32
   1e0aa:	90 e0       	ldi	r25, 0x00	; 0
   1e0ac:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e0b0:	2a 94       	dec	r2
   1e0b2:	28 14       	cp	r2, r8
   1e0b4:	19 04       	cpc	r1, r9
   1e0b6:	09 f0       	breq	.+2      	; 0x1e0ba <vfprintf+0x1ce>
   1e0b8:	b0 f7       	brcc	.-20     	; 0x1e0a6 <vfprintf+0x1ba>
   1e0ba:	ce cf       	rjmp	.-100    	; 0x1e058 <vfprintf+0x16c>
   1e0bc:	f6 01       	movw	r30, r12
   1e0be:	37 fc       	sbrc	r3, 7
   1e0c0:	85 91       	lpm	r24, Z+
   1e0c2:	37 fe       	sbrs	r3, 7
   1e0c4:	81 91       	ld	r24, Z+
   1e0c6:	6f 01       	movw	r12, r30
   1e0c8:	b7 01       	movw	r22, r14
   1e0ca:	90 e0       	ldi	r25, 0x00	; 0
   1e0cc:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e0d0:	51 10       	cpse	r5, r1
   1e0d2:	5a 94       	dec	r5
   1e0d4:	f1 e0       	ldi	r31, 0x01	; 1
   1e0d6:	8f 1a       	sub	r8, r31
   1e0d8:	91 08       	sbc	r9, r1
   1e0da:	bf cf       	rjmp	.-130    	; 0x1e05a <vfprintf+0x16e>
   1e0dc:	84 36       	cpi	r24, 0x64	; 100
   1e0de:	19 f0       	breq	.+6      	; 0x1e0e6 <vfprintf+0x1fa>
   1e0e0:	89 36       	cpi	r24, 0x69	; 105
   1e0e2:	09 f0       	breq	.+2      	; 0x1e0e6 <vfprintf+0x1fa>
   1e0e4:	77 c0       	rjmp	.+238    	; 0x1e1d4 <vfprintf+0x2e8>
   1e0e6:	f8 01       	movw	r30, r16
   1e0e8:	37 fe       	sbrs	r3, 7
   1e0ea:	6b c0       	rjmp	.+214    	; 0x1e1c2 <vfprintf+0x2d6>
   1e0ec:	60 81       	ld	r22, Z
   1e0ee:	71 81       	ldd	r23, Z+1	; 0x01
   1e0f0:	82 81       	ldd	r24, Z+2	; 0x02
   1e0f2:	93 81       	ldd	r25, Z+3	; 0x03
   1e0f4:	0c 5f       	subi	r16, 0xFC	; 252
   1e0f6:	1f 4f       	sbci	r17, 0xFF	; 255
   1e0f8:	f3 2d       	mov	r31, r3
   1e0fa:	ff 76       	andi	r31, 0x6F	; 111
   1e0fc:	3f 2e       	mov	r3, r31
   1e0fe:	97 ff       	sbrs	r25, 7
   1e100:	09 c0       	rjmp	.+18     	; 0x1e114 <vfprintf+0x228>
   1e102:	90 95       	com	r25
   1e104:	80 95       	com	r24
   1e106:	70 95       	com	r23
   1e108:	61 95       	neg	r22
   1e10a:	7f 4f       	sbci	r23, 0xFF	; 255
   1e10c:	8f 4f       	sbci	r24, 0xFF	; 255
   1e10e:	9f 4f       	sbci	r25, 0xFF	; 255
   1e110:	68 94       	set
   1e112:	37 f8       	bld	r3, 7
   1e114:	2a e0       	ldi	r18, 0x0A	; 10
   1e116:	30 e0       	ldi	r19, 0x00	; 0
   1e118:	a5 01       	movw	r20, r10
   1e11a:	0e 94 e0 f6 	call	0x1edc0	; 0x1edc0 <__ultoa_invert>
   1e11e:	c8 2e       	mov	r12, r24
   1e120:	ca 18       	sub	r12, r10
   1e122:	8c 2c       	mov	r8, r12
   1e124:	43 2c       	mov	r4, r3
   1e126:	36 fe       	sbrs	r3, 6
   1e128:	0c c0       	rjmp	.+24     	; 0x1e142 <vfprintf+0x256>
   1e12a:	e8 94       	clt
   1e12c:	40 f8       	bld	r4, 0
   1e12e:	c9 14       	cp	r12, r9
   1e130:	40 f4       	brcc	.+16     	; 0x1e142 <vfprintf+0x256>
   1e132:	34 fe       	sbrs	r3, 4
   1e134:	05 c0       	rjmp	.+10     	; 0x1e140 <vfprintf+0x254>
   1e136:	32 fc       	sbrc	r3, 2
   1e138:	03 c0       	rjmp	.+6      	; 0x1e140 <vfprintf+0x254>
   1e13a:	f3 2d       	mov	r31, r3
   1e13c:	fe 7e       	andi	r31, 0xEE	; 238
   1e13e:	4f 2e       	mov	r4, r31
   1e140:	89 2c       	mov	r8, r9
   1e142:	44 fe       	sbrs	r4, 4
   1e144:	aa c0       	rjmp	.+340    	; 0x1e29a <vfprintf+0x3ae>
   1e146:	fe 01       	movw	r30, r28
   1e148:	ec 0d       	add	r30, r12
   1e14a:	f1 1d       	adc	r31, r1
   1e14c:	80 81       	ld	r24, Z
   1e14e:	80 33       	cpi	r24, 0x30	; 48
   1e150:	09 f0       	breq	.+2      	; 0x1e154 <vfprintf+0x268>
   1e152:	9c c0       	rjmp	.+312    	; 0x1e28c <vfprintf+0x3a0>
   1e154:	24 2d       	mov	r18, r4
   1e156:	29 7e       	andi	r18, 0xE9	; 233
   1e158:	42 2e       	mov	r4, r18
   1e15a:	84 2d       	mov	r24, r4
   1e15c:	88 70       	andi	r24, 0x08	; 8
   1e15e:	58 2e       	mov	r5, r24
   1e160:	43 fc       	sbrc	r4, 3
   1e162:	aa c0       	rjmp	.+340    	; 0x1e2b8 <vfprintf+0x3cc>
   1e164:	40 fe       	sbrs	r4, 0
   1e166:	a4 c0       	rjmp	.+328    	; 0x1e2b0 <vfprintf+0x3c4>
   1e168:	9c 2c       	mov	r9, r12
   1e16a:	82 14       	cp	r8, r2
   1e16c:	18 f4       	brcc	.+6      	; 0x1e174 <vfprintf+0x288>
   1e16e:	2c 0c       	add	r2, r12
   1e170:	92 2c       	mov	r9, r2
   1e172:	98 18       	sub	r9, r8
   1e174:	44 fe       	sbrs	r4, 4
   1e176:	a6 c0       	rjmp	.+332    	; 0x1e2c4 <vfprintf+0x3d8>
   1e178:	b7 01       	movw	r22, r14
   1e17a:	80 e3       	ldi	r24, 0x30	; 48
   1e17c:	90 e0       	ldi	r25, 0x00	; 0
   1e17e:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e182:	42 fe       	sbrs	r4, 2
   1e184:	09 c0       	rjmp	.+18     	; 0x1e198 <vfprintf+0x2ac>
   1e186:	88 e7       	ldi	r24, 0x78	; 120
   1e188:	90 e0       	ldi	r25, 0x00	; 0
   1e18a:	41 fe       	sbrs	r4, 1
   1e18c:	02 c0       	rjmp	.+4      	; 0x1e192 <vfprintf+0x2a6>
   1e18e:	88 e5       	ldi	r24, 0x58	; 88
   1e190:	90 e0       	ldi	r25, 0x00	; 0
   1e192:	b7 01       	movw	r22, r14
   1e194:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e198:	c9 14       	cp	r12, r9
   1e19a:	08 f4       	brcc	.+2      	; 0x1e19e <vfprintf+0x2b2>
   1e19c:	9f c0       	rjmp	.+318    	; 0x1e2dc <vfprintf+0x3f0>
   1e19e:	ca 94       	dec	r12
   1e1a0:	d1 2c       	mov	r13, r1
   1e1a2:	9f ef       	ldi	r25, 0xFF	; 255
   1e1a4:	c9 1a       	sub	r12, r25
   1e1a6:	d9 0a       	sbc	r13, r25
   1e1a8:	ca 0c       	add	r12, r10
   1e1aa:	db 1c       	adc	r13, r11
   1e1ac:	f6 01       	movw	r30, r12
   1e1ae:	82 91       	ld	r24, -Z
   1e1b0:	6f 01       	movw	r12, r30
   1e1b2:	b7 01       	movw	r22, r14
   1e1b4:	90 e0       	ldi	r25, 0x00	; 0
   1e1b6:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e1ba:	ac 14       	cp	r10, r12
   1e1bc:	bd 04       	cpc	r11, r13
   1e1be:	b1 f7       	brne	.-20     	; 0x1e1ac <vfprintf+0x2c0>
   1e1c0:	4f cf       	rjmp	.-354    	; 0x1e060 <vfprintf+0x174>
   1e1c2:	60 81       	ld	r22, Z
   1e1c4:	71 81       	ldd	r23, Z+1	; 0x01
   1e1c6:	07 2e       	mov	r0, r23
   1e1c8:	00 0c       	add	r0, r0
   1e1ca:	88 0b       	sbc	r24, r24
   1e1cc:	99 0b       	sbc	r25, r25
   1e1ce:	0e 5f       	subi	r16, 0xFE	; 254
   1e1d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1e1d2:	92 cf       	rjmp	.-220    	; 0x1e0f8 <vfprintf+0x20c>
   1e1d4:	d3 2c       	mov	r13, r3
   1e1d6:	e8 94       	clt
   1e1d8:	d4 f8       	bld	r13, 4
   1e1da:	2a e0       	ldi	r18, 0x0A	; 10
   1e1dc:	30 e0       	ldi	r19, 0x00	; 0
   1e1de:	85 37       	cpi	r24, 0x75	; 117
   1e1e0:	e1 f1       	breq	.+120    	; 0x1e25a <vfprintf+0x36e>
   1e1e2:	23 2d       	mov	r18, r3
   1e1e4:	29 7f       	andi	r18, 0xF9	; 249
   1e1e6:	d2 2e       	mov	r13, r18
   1e1e8:	8f 36       	cpi	r24, 0x6F	; 111
   1e1ea:	a9 f1       	breq	.+106    	; 0x1e256 <vfprintf+0x36a>
   1e1ec:	f0 f4       	brcc	.+60     	; 0x1e22a <vfprintf+0x33e>
   1e1ee:	88 35       	cpi	r24, 0x58	; 88
   1e1f0:	51 f1       	breq	.+84     	; 0x1e246 <vfprintf+0x35a>
   1e1f2:	f7 01       	movw	r30, r14
   1e1f4:	86 81       	ldd	r24, Z+6	; 0x06
   1e1f6:	97 81       	ldd	r25, Z+7	; 0x07
   1e1f8:	2b 96       	adiw	r28, 0x0b	; 11
   1e1fa:	0f b6       	in	r0, 0x3f	; 63
   1e1fc:	f8 94       	cli
   1e1fe:	de bf       	out	0x3e, r29	; 62
   1e200:	0f be       	out	0x3f, r0	; 63
   1e202:	cd bf       	out	0x3d, r28	; 61
   1e204:	df 91       	pop	r29
   1e206:	cf 91       	pop	r28
   1e208:	1f 91       	pop	r17
   1e20a:	0f 91       	pop	r16
   1e20c:	ff 90       	pop	r15
   1e20e:	ef 90       	pop	r14
   1e210:	df 90       	pop	r13
   1e212:	cf 90       	pop	r12
   1e214:	bf 90       	pop	r11
   1e216:	af 90       	pop	r10
   1e218:	9f 90       	pop	r9
   1e21a:	8f 90       	pop	r8
   1e21c:	7f 90       	pop	r7
   1e21e:	6f 90       	pop	r6
   1e220:	5f 90       	pop	r5
   1e222:	4f 90       	pop	r4
   1e224:	3f 90       	pop	r3
   1e226:	2f 90       	pop	r2
   1e228:	08 95       	ret
   1e22a:	80 37       	cpi	r24, 0x70	; 112
   1e22c:	49 f0       	breq	.+18     	; 0x1e240 <vfprintf+0x354>
   1e22e:	88 37       	cpi	r24, 0x78	; 120
   1e230:	01 f7       	brne	.-64     	; 0x1e1f2 <vfprintf+0x306>
   1e232:	d4 fe       	sbrs	r13, 4
   1e234:	02 c0       	rjmp	.+4      	; 0x1e23a <vfprintf+0x34e>
   1e236:	68 94       	set
   1e238:	d2 f8       	bld	r13, 2
   1e23a:	20 e1       	ldi	r18, 0x10	; 16
   1e23c:	30 e0       	ldi	r19, 0x00	; 0
   1e23e:	0d c0       	rjmp	.+26     	; 0x1e25a <vfprintf+0x36e>
   1e240:	68 94       	set
   1e242:	d4 f8       	bld	r13, 4
   1e244:	f6 cf       	rjmp	.-20     	; 0x1e232 <vfprintf+0x346>
   1e246:	34 fe       	sbrs	r3, 4
   1e248:	03 c0       	rjmp	.+6      	; 0x1e250 <vfprintf+0x364>
   1e24a:	82 2f       	mov	r24, r18
   1e24c:	86 60       	ori	r24, 0x06	; 6
   1e24e:	d8 2e       	mov	r13, r24
   1e250:	20 e1       	ldi	r18, 0x10	; 16
   1e252:	32 e0       	ldi	r19, 0x02	; 2
   1e254:	02 c0       	rjmp	.+4      	; 0x1e25a <vfprintf+0x36e>
   1e256:	28 e0       	ldi	r18, 0x08	; 8
   1e258:	30 e0       	ldi	r19, 0x00	; 0
   1e25a:	f8 01       	movw	r30, r16
   1e25c:	d7 fe       	sbrs	r13, 7
   1e25e:	0f c0       	rjmp	.+30     	; 0x1e27e <vfprintf+0x392>
   1e260:	60 81       	ld	r22, Z
   1e262:	71 81       	ldd	r23, Z+1	; 0x01
   1e264:	82 81       	ldd	r24, Z+2	; 0x02
   1e266:	93 81       	ldd	r25, Z+3	; 0x03
   1e268:	0c 5f       	subi	r16, 0xFC	; 252
   1e26a:	1f 4f       	sbci	r17, 0xFF	; 255
   1e26c:	a5 01       	movw	r20, r10
   1e26e:	0e 94 e0 f6 	call	0x1edc0	; 0x1edc0 <__ultoa_invert>
   1e272:	c8 2e       	mov	r12, r24
   1e274:	ca 18       	sub	r12, r10
   1e276:	3d 2c       	mov	r3, r13
   1e278:	e8 94       	clt
   1e27a:	37 f8       	bld	r3, 7
   1e27c:	52 cf       	rjmp	.-348    	; 0x1e122 <vfprintf+0x236>
   1e27e:	60 81       	ld	r22, Z
   1e280:	71 81       	ldd	r23, Z+1	; 0x01
   1e282:	90 e0       	ldi	r25, 0x00	; 0
   1e284:	80 e0       	ldi	r24, 0x00	; 0
   1e286:	0e 5f       	subi	r16, 0xFE	; 254
   1e288:	1f 4f       	sbci	r17, 0xFF	; 255
   1e28a:	f0 cf       	rjmp	.-32     	; 0x1e26c <vfprintf+0x380>
   1e28c:	42 fc       	sbrc	r4, 2
   1e28e:	02 c0       	rjmp	.+4      	; 0x1e294 <vfprintf+0x3a8>
   1e290:	83 94       	inc	r8
   1e292:	63 cf       	rjmp	.-314    	; 0x1e15a <vfprintf+0x26e>
   1e294:	83 94       	inc	r8
   1e296:	83 94       	inc	r8
   1e298:	60 cf       	rjmp	.-320    	; 0x1e15a <vfprintf+0x26e>
   1e29a:	84 2d       	mov	r24, r4
   1e29c:	86 78       	andi	r24, 0x86	; 134
   1e29e:	09 f4       	brne	.+2      	; 0x1e2a2 <vfprintf+0x3b6>
   1e2a0:	5c cf       	rjmp	.-328    	; 0x1e15a <vfprintf+0x26e>
   1e2a2:	f6 cf       	rjmp	.-20     	; 0x1e290 <vfprintf+0x3a4>
   1e2a4:	b7 01       	movw	r22, r14
   1e2a6:	80 e2       	ldi	r24, 0x20	; 32
   1e2a8:	90 e0       	ldi	r25, 0x00	; 0
   1e2aa:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e2ae:	83 94       	inc	r8
   1e2b0:	82 14       	cp	r8, r2
   1e2b2:	c0 f3       	brcs	.-16     	; 0x1e2a4 <vfprintf+0x3b8>
   1e2b4:	51 2c       	mov	r5, r1
   1e2b6:	5e cf       	rjmp	.-324    	; 0x1e174 <vfprintf+0x288>
   1e2b8:	52 2c       	mov	r5, r2
   1e2ba:	58 18       	sub	r5, r8
   1e2bc:	82 14       	cp	r8, r2
   1e2be:	08 f4       	brcc	.+2      	; 0x1e2c2 <vfprintf+0x3d6>
   1e2c0:	59 cf       	rjmp	.-334    	; 0x1e174 <vfprintf+0x288>
   1e2c2:	f8 cf       	rjmp	.-16     	; 0x1e2b4 <vfprintf+0x3c8>
   1e2c4:	84 2d       	mov	r24, r4
   1e2c6:	86 78       	andi	r24, 0x86	; 134
   1e2c8:	09 f4       	brne	.+2      	; 0x1e2cc <vfprintf+0x3e0>
   1e2ca:	66 cf       	rjmp	.-308    	; 0x1e198 <vfprintf+0x2ac>
   1e2cc:	8b e2       	ldi	r24, 0x2B	; 43
   1e2ce:	41 fe       	sbrs	r4, 1
   1e2d0:	80 e2       	ldi	r24, 0x20	; 32
   1e2d2:	47 fc       	sbrc	r4, 7
   1e2d4:	8d e2       	ldi	r24, 0x2D	; 45
   1e2d6:	b7 01       	movw	r22, r14
   1e2d8:	90 e0       	ldi	r25, 0x00	; 0
   1e2da:	5c cf       	rjmp	.-328    	; 0x1e194 <vfprintf+0x2a8>
   1e2dc:	b7 01       	movw	r22, r14
   1e2de:	80 e3       	ldi	r24, 0x30	; 48
   1e2e0:	90 e0       	ldi	r25, 0x00	; 0
   1e2e2:	0e 94 b0 f6 	call	0x1ed60	; 0x1ed60 <fputc>
   1e2e6:	9a 94       	dec	r9
   1e2e8:	57 cf       	rjmp	.-338    	; 0x1e198 <vfprintf+0x2ac>
   1e2ea:	8f ef       	ldi	r24, 0xFF	; 255
   1e2ec:	9f ef       	ldi	r25, 0xFF	; 255
   1e2ee:	84 cf       	rjmp	.-248    	; 0x1e1f8 <vfprintf+0x30c>

0001e2f0 <calloc>:
calloc():
   1e2f0:	0f 93       	push	r16
   1e2f2:	1f 93       	push	r17
   1e2f4:	cf 93       	push	r28
   1e2f6:	df 93       	push	r29
   1e2f8:	86 9f       	mul	r24, r22
   1e2fa:	80 01       	movw	r16, r0
   1e2fc:	87 9f       	mul	r24, r23
   1e2fe:	10 0d       	add	r17, r0
   1e300:	96 9f       	mul	r25, r22
   1e302:	10 0d       	add	r17, r0
   1e304:	11 24       	eor	r1, r1
   1e306:	c8 01       	movw	r24, r16
   1e308:	0e 94 0d f3 	call	0x1e61a	; 0x1e61a <malloc>
   1e30c:	ec 01       	movw	r28, r24
   1e30e:	00 97       	sbiw	r24, 0x00	; 0
   1e310:	29 f0       	breq	.+10     	; 0x1e31c <calloc+0x2c>
   1e312:	a8 01       	movw	r20, r16
   1e314:	70 e0       	ldi	r23, 0x00	; 0
   1e316:	60 e0       	ldi	r22, 0x00	; 0
   1e318:	0e 94 8e f6 	call	0x1ed1c	; 0x1ed1c <memset>
   1e31c:	ce 01       	movw	r24, r28
   1e31e:	df 91       	pop	r29
   1e320:	cf 91       	pop	r28
   1e322:	1f 91       	pop	r17
   1e324:	0f 91       	pop	r16
   1e326:	08 95       	ret

0001e328 <dtoa_prf>:
dtoa_prf():
   1e328:	8f 92       	push	r8
   1e32a:	9f 92       	push	r9
   1e32c:	af 92       	push	r10
   1e32e:	bf 92       	push	r11
   1e330:	cf 92       	push	r12
   1e332:	df 92       	push	r13
   1e334:	ef 92       	push	r14
   1e336:	ff 92       	push	r15
   1e338:	0f 93       	push	r16
   1e33a:	1f 93       	push	r17
   1e33c:	cf 93       	push	r28
   1e33e:	df 93       	push	r29
   1e340:	00 d0       	rcall	.+0      	; 0x1e342 <dtoa_prf+0x1a>
   1e342:	00 d0       	rcall	.+0      	; 0x1e344 <dtoa_prf+0x1c>
   1e344:	00 d0       	rcall	.+0      	; 0x1e346 <dtoa_prf+0x1e>
   1e346:	cd b7       	in	r28, 0x3d	; 61
   1e348:	de b7       	in	r29, 0x3e	; 62
   1e34a:	6a 01       	movw	r12, r20
   1e34c:	f2 2e       	mov	r15, r18
   1e34e:	b0 2e       	mov	r11, r16
   1e350:	10 2f       	mov	r17, r16
   1e352:	fb e3       	ldi	r31, 0x3B	; 59
   1e354:	af 2e       	mov	r10, r31
   1e356:	a0 16       	cp	r10, r16
   1e358:	08 f4       	brcc	.+2      	; 0x1e35c <dtoa_prf+0x34>
   1e35a:	1b e3       	ldi	r17, 0x3B	; 59
   1e35c:	1f 5f       	subi	r17, 0xFF	; 255
   1e35e:	01 2f       	mov	r16, r17
   1e360:	27 e0       	ldi	r18, 0x07	; 7
   1e362:	ae 01       	movw	r20, r28
   1e364:	4f 5f       	subi	r20, 0xFF	; 255
   1e366:	5f 4f       	sbci	r21, 0xFF	; 255
   1e368:	0e 94 90 f5 	call	0x1eb20	; 0x1eb20 <__ftoa_engine>
   1e36c:	bc 01       	movw	r22, r24
   1e36e:	89 81       	ldd	r24, Y+1	; 0x01
   1e370:	98 2f       	mov	r25, r24
   1e372:	99 70       	andi	r25, 0x09	; 9
   1e374:	91 30       	cpi	r25, 0x01	; 1
   1e376:	09 f4       	brne	.+2      	; 0x1e37a <dtoa_prf+0x52>
   1e378:	4e c0       	rjmp	.+156    	; 0x1e416 <dtoa_prf+0xee>
   1e37a:	9b e2       	ldi	r25, 0x2B	; 43
   1e37c:	e1 fc       	sbrc	r14, 1
   1e37e:	04 c0       	rjmp	.+8      	; 0x1e388 <dtoa_prf+0x60>
   1e380:	9e 2d       	mov	r25, r14
   1e382:	91 70       	andi	r25, 0x01	; 1
   1e384:	e0 fc       	sbrc	r14, 0
   1e386:	49 c0       	rjmp	.+146    	; 0x1e41a <dtoa_prf+0xf2>
   1e388:	5e 2d       	mov	r21, r14
   1e38a:	50 71       	andi	r21, 0x10	; 16
   1e38c:	e8 2f       	mov	r30, r24
   1e38e:	e8 70       	andi	r30, 0x08	; 8
   1e390:	83 ff       	sbrs	r24, 3
   1e392:	55 c0       	rjmp	.+170    	; 0x1e43e <dtoa_prf+0x116>
   1e394:	84 e0       	ldi	r24, 0x04	; 4
   1e396:	91 11       	cpse	r25, r1
   1e398:	01 c0       	rjmp	.+2      	; 0x1e39c <dtoa_prf+0x74>
   1e39a:	83 e0       	ldi	r24, 0x03	; 3
   1e39c:	ef 2d       	mov	r30, r15
   1e39e:	e8 1b       	sub	r30, r24
   1e3a0:	8f 15       	cp	r24, r15
   1e3a2:	08 f0       	brcs	.+2      	; 0x1e3a6 <dtoa_prf+0x7e>
   1e3a4:	e0 e0       	ldi	r30, 0x00	; 0
   1e3a6:	d6 01       	movw	r26, r12
   1e3a8:	8e 2f       	mov	r24, r30
   1e3aa:	20 e2       	ldi	r18, 0x20	; 32
   1e3ac:	55 23       	and	r21, r21
   1e3ae:	c9 f1       	breq	.+114    	; 0x1e422 <dtoa_prf+0xfa>
   1e3b0:	99 23       	and	r25, r25
   1e3b2:	29 f0       	breq	.+10     	; 0x1e3be <dtoa_prf+0x96>
   1e3b4:	d6 01       	movw	r26, r12
   1e3b6:	9c 93       	st	X, r25
   1e3b8:	c6 01       	movw	r24, r12
   1e3ba:	01 96       	adiw	r24, 0x01	; 1
   1e3bc:	6c 01       	movw	r12, r24
   1e3be:	96 01       	movw	r18, r12
   1e3c0:	2d 5f       	subi	r18, 0xFD	; 253
   1e3c2:	3f 4f       	sbci	r19, 0xFF	; 255
   1e3c4:	e2 fe       	sbrs	r14, 2
   1e3c6:	33 c0       	rjmp	.+102    	; 0x1e42e <dtoa_prf+0x106>
   1e3c8:	8e e4       	ldi	r24, 0x4E	; 78
   1e3ca:	d6 01       	movw	r26, r12
   1e3cc:	8c 93       	st	X, r24
   1e3ce:	91 e4       	ldi	r25, 0x41	; 65
   1e3d0:	11 96       	adiw	r26, 0x01	; 1
   1e3d2:	9c 93       	st	X, r25
   1e3d4:	11 97       	sbiw	r26, 0x01	; 1
   1e3d6:	12 96       	adiw	r26, 0x02	; 2
   1e3d8:	8c 93       	st	X, r24
   1e3da:	d9 01       	movw	r26, r18
   1e3dc:	8e 2f       	mov	r24, r30
   1e3de:	90 e2       	ldi	r25, 0x20	; 32
   1e3e0:	81 11       	cpse	r24, r1
   1e3e2:	2a c0       	rjmp	.+84     	; 0x1e438 <dtoa_prf+0x110>
   1e3e4:	e2 0f       	add	r30, r18
   1e3e6:	f3 2f       	mov	r31, r19
   1e3e8:	f1 1d       	adc	r31, r1
   1e3ea:	10 82       	st	Z, r1
   1e3ec:	8e ef       	ldi	r24, 0xFE	; 254
   1e3ee:	9f ef       	ldi	r25, 0xFF	; 255
   1e3f0:	29 96       	adiw	r28, 0x09	; 9
   1e3f2:	0f b6       	in	r0, 0x3f	; 63
   1e3f4:	f8 94       	cli
   1e3f6:	de bf       	out	0x3e, r29	; 62
   1e3f8:	0f be       	out	0x3f, r0	; 63
   1e3fa:	cd bf       	out	0x3d, r28	; 61
   1e3fc:	df 91       	pop	r29
   1e3fe:	cf 91       	pop	r28
   1e400:	1f 91       	pop	r17
   1e402:	0f 91       	pop	r16
   1e404:	ff 90       	pop	r15
   1e406:	ef 90       	pop	r14
   1e408:	df 90       	pop	r13
   1e40a:	cf 90       	pop	r12
   1e40c:	bf 90       	pop	r11
   1e40e:	af 90       	pop	r10
   1e410:	9f 90       	pop	r9
   1e412:	8f 90       	pop	r8
   1e414:	08 95       	ret
   1e416:	9d e2       	ldi	r25, 0x2D	; 45
   1e418:	b7 cf       	rjmp	.-146    	; 0x1e388 <dtoa_prf+0x60>
   1e41a:	90 e2       	ldi	r25, 0x20	; 32
   1e41c:	b5 cf       	rjmp	.-150    	; 0x1e388 <dtoa_prf+0x60>
   1e41e:	2d 93       	st	X+, r18
   1e420:	81 50       	subi	r24, 0x01	; 1
   1e422:	81 11       	cpse	r24, r1
   1e424:	fc cf       	rjmp	.-8      	; 0x1e41e <dtoa_prf+0xf6>
   1e426:	ce 0e       	add	r12, r30
   1e428:	d1 1c       	adc	r13, r1
   1e42a:	e0 e0       	ldi	r30, 0x00	; 0
   1e42c:	c1 cf       	rjmp	.-126    	; 0x1e3b0 <dtoa_prf+0x88>
   1e42e:	8e e6       	ldi	r24, 0x6E	; 110
   1e430:	d6 01       	movw	r26, r12
   1e432:	8c 93       	st	X, r24
   1e434:	91 e6       	ldi	r25, 0x61	; 97
   1e436:	cc cf       	rjmp	.-104    	; 0x1e3d0 <dtoa_prf+0xa8>
   1e438:	9d 93       	st	X+, r25
   1e43a:	81 50       	subi	r24, 0x01	; 1
   1e43c:	d1 cf       	rjmp	.-94     	; 0x1e3e0 <dtoa_prf+0xb8>
   1e43e:	48 2f       	mov	r20, r24
   1e440:	44 70       	andi	r20, 0x04	; 4
   1e442:	82 ff       	sbrs	r24, 2
   1e444:	3d c0       	rjmp	.+122    	; 0x1e4c0 <dtoa_prf+0x198>
   1e446:	84 e0       	ldi	r24, 0x04	; 4
   1e448:	91 11       	cpse	r25, r1
   1e44a:	01 c0       	rjmp	.+2      	; 0x1e44e <dtoa_prf+0x126>
   1e44c:	83 e0       	ldi	r24, 0x03	; 3
   1e44e:	8f 15       	cp	r24, r15
   1e450:	10 f4       	brcc	.+4      	; 0x1e456 <dtoa_prf+0x12e>
   1e452:	ef 2d       	mov	r30, r15
   1e454:	e8 1b       	sub	r30, r24
   1e456:	d6 01       	movw	r26, r12
   1e458:	8e 2f       	mov	r24, r30
   1e45a:	20 e2       	ldi	r18, 0x20	; 32
   1e45c:	55 23       	and	r21, r21
   1e45e:	09 f1       	breq	.+66     	; 0x1e4a2 <dtoa_prf+0x17a>
   1e460:	99 23       	and	r25, r25
   1e462:	29 f0       	breq	.+10     	; 0x1e46e <dtoa_prf+0x146>
   1e464:	d6 01       	movw	r26, r12
   1e466:	9c 93       	st	X, r25
   1e468:	c6 01       	movw	r24, r12
   1e46a:	01 96       	adiw	r24, 0x01	; 1
   1e46c:	6c 01       	movw	r12, r24
   1e46e:	96 01       	movw	r18, r12
   1e470:	2d 5f       	subi	r18, 0xFD	; 253
   1e472:	3f 4f       	sbci	r19, 0xFF	; 255
   1e474:	e2 fe       	sbrs	r14, 2
   1e476:	1b c0       	rjmp	.+54     	; 0x1e4ae <dtoa_prf+0x186>
   1e478:	89 e4       	ldi	r24, 0x49	; 73
   1e47a:	d6 01       	movw	r26, r12
   1e47c:	8c 93       	st	X, r24
   1e47e:	8e e4       	ldi	r24, 0x4E	; 78
   1e480:	11 96       	adiw	r26, 0x01	; 1
   1e482:	8c 93       	st	X, r24
   1e484:	11 97       	sbiw	r26, 0x01	; 1
   1e486:	86 e4       	ldi	r24, 0x46	; 70
   1e488:	12 96       	adiw	r26, 0x02	; 2
   1e48a:	8c 93       	st	X, r24
   1e48c:	d9 01       	movw	r26, r18
   1e48e:	8e 2f       	mov	r24, r30
   1e490:	90 e2       	ldi	r25, 0x20	; 32
   1e492:	88 23       	and	r24, r24
   1e494:	09 f4       	brne	.+2      	; 0x1e498 <dtoa_prf+0x170>
   1e496:	a6 cf       	rjmp	.-180    	; 0x1e3e4 <dtoa_prf+0xbc>
   1e498:	9d 93       	st	X+, r25
   1e49a:	81 50       	subi	r24, 0x01	; 1
   1e49c:	fa cf       	rjmp	.-12     	; 0x1e492 <dtoa_prf+0x16a>
   1e49e:	2d 93       	st	X+, r18
   1e4a0:	81 50       	subi	r24, 0x01	; 1
   1e4a2:	81 11       	cpse	r24, r1
   1e4a4:	fc cf       	rjmp	.-8      	; 0x1e49e <dtoa_prf+0x176>
   1e4a6:	ce 0e       	add	r12, r30
   1e4a8:	d1 1c       	adc	r13, r1
   1e4aa:	e0 e0       	ldi	r30, 0x00	; 0
   1e4ac:	d9 cf       	rjmp	.-78     	; 0x1e460 <dtoa_prf+0x138>
   1e4ae:	89 e6       	ldi	r24, 0x69	; 105
   1e4b0:	d6 01       	movw	r26, r12
   1e4b2:	8c 93       	st	X, r24
   1e4b4:	8e e6       	ldi	r24, 0x6E	; 110
   1e4b6:	11 96       	adiw	r26, 0x01	; 1
   1e4b8:	8c 93       	st	X, r24
   1e4ba:	11 97       	sbiw	r26, 0x01	; 1
   1e4bc:	86 e6       	ldi	r24, 0x66	; 102
   1e4be:	e4 cf       	rjmp	.-56     	; 0x1e488 <dtoa_prf+0x160>
   1e4c0:	9b 01       	movw	r18, r22
   1e4c2:	77 ff       	sbrs	r23, 7
   1e4c4:	02 c0       	rjmp	.+4      	; 0x1e4ca <dtoa_prf+0x1a2>
   1e4c6:	30 e0       	ldi	r19, 0x00	; 0
   1e4c8:	20 e0       	ldi	r18, 0x00	; 0
   1e4ca:	a1 e0       	ldi	r26, 0x01	; 1
   1e4cc:	b0 e0       	ldi	r27, 0x00	; 0
   1e4ce:	91 11       	cpse	r25, r1
   1e4d0:	02 c0       	rjmp	.+4      	; 0x1e4d6 <dtoa_prf+0x1ae>
   1e4d2:	b0 e0       	ldi	r27, 0x00	; 0
   1e4d4:	a0 e0       	ldi	r26, 0x00	; 0
   1e4d6:	f9 01       	movw	r30, r18
   1e4d8:	31 96       	adiw	r30, 0x01	; 1
   1e4da:	ae 0f       	add	r26, r30
   1e4dc:	bf 1f       	adc	r27, r31
   1e4de:	8b 2c       	mov	r8, r11
   1e4e0:	91 2c       	mov	r9, r1
   1e4e2:	bb 20       	and	r11, r11
   1e4e4:	09 f4       	brne	.+2      	; 0x1e4e8 <dtoa_prf+0x1c0>
   1e4e6:	61 c0       	rjmp	.+194    	; 0x1e5aa <dtoa_prf+0x282>
   1e4e8:	54 01       	movw	r10, r8
   1e4ea:	ef ef       	ldi	r30, 0xFF	; 255
   1e4ec:	ae 1a       	sub	r10, r30
   1e4ee:	be 0a       	sbc	r11, r30
   1e4f0:	aa 0d       	add	r26, r10
   1e4f2:	bb 1d       	adc	r27, r11
   1e4f4:	fa 16       	cp	r15, r26
   1e4f6:	1b 06       	cpc	r1, r27
   1e4f8:	19 f0       	breq	.+6      	; 0x1e500 <dtoa_prf+0x1d8>
   1e4fa:	14 f0       	brlt	.+4      	; 0x1e500 <dtoa_prf+0x1d8>
   1e4fc:	4f 2d       	mov	r20, r15
   1e4fe:	4a 1b       	sub	r20, r26
   1e500:	51 11       	cpse	r21, r1
   1e502:	88 c0       	rjmp	.+272    	; 0x1e614 <dtoa_prf+0x2ec>
   1e504:	e3 fc       	sbrc	r14, 3
   1e506:	59 c0       	rjmp	.+178    	; 0x1e5ba <dtoa_prf+0x292>
   1e508:	76 01       	movw	r14, r12
   1e50a:	a4 2f       	mov	r26, r20
   1e50c:	b0 e2       	ldi	r27, 0x20	; 32
   1e50e:	a1 11       	cpse	r26, r1
   1e510:	4f c0       	rjmp	.+158    	; 0x1e5b0 <dtoa_prf+0x288>
   1e512:	c4 0e       	add	r12, r20
   1e514:	d1 1c       	adc	r13, r1
   1e516:	99 23       	and	r25, r25
   1e518:	09 f4       	brne	.+2      	; 0x1e51c <dtoa_prf+0x1f4>
   1e51a:	5b c0       	rjmp	.+182    	; 0x1e5d2 <dtoa_prf+0x2aa>
   1e51c:	40 e0       	ldi	r20, 0x00	; 0
   1e51e:	d6 01       	movw	r26, r12
   1e520:	11 96       	adiw	r26, 0x01	; 1
   1e522:	f6 01       	movw	r30, r12
   1e524:	90 83       	st	Z, r25
   1e526:	6d 01       	movw	r12, r26
   1e528:	55 23       	and	r21, r21
   1e52a:	09 f4       	brne	.+2      	; 0x1e52e <dtoa_prf+0x206>
   1e52c:	48 c0       	rjmp	.+144    	; 0x1e5be <dtoa_prf+0x296>
   1e52e:	01 2f       	mov	r16, r17
   1e530:	06 0f       	add	r16, r22
   1e532:	9a 81       	ldd	r25, Y+2	; 0x02
   1e534:	58 2f       	mov	r21, r24
   1e536:	50 71       	andi	r21, 0x10	; 16
   1e538:	84 ff       	sbrs	r24, 4
   1e53a:	03 c0       	rjmp	.+6      	; 0x1e542 <dtoa_prf+0x21a>
   1e53c:	91 33       	cpi	r25, 0x31	; 49
   1e53e:	09 f4       	brne	.+2      	; 0x1e542 <dtoa_prf+0x21a>
   1e540:	01 50       	subi	r16, 0x01	; 1
   1e542:	10 16       	cp	r1, r16
   1e544:	0c f0       	brlt	.+2      	; 0x1e548 <dtoa_prf+0x220>
   1e546:	47 c0       	rjmp	.+142    	; 0x1e5d6 <dtoa_prf+0x2ae>
   1e548:	09 30       	cpi	r16, 0x09	; 9
   1e54a:	08 f0       	brcs	.+2      	; 0x1e54e <dtoa_prf+0x226>
   1e54c:	08 e0       	ldi	r16, 0x08	; 8
   1e54e:	ee e2       	ldi	r30, 0x2E	; 46
   1e550:	fe 2e       	mov	r15, r30
   1e552:	5b 01       	movw	r10, r22
   1e554:	a0 1a       	sub	r10, r16
   1e556:	b1 08       	sbc	r11, r1
   1e558:	85 01       	movw	r16, r10
   1e55a:	91 94       	neg	r9
   1e55c:	81 94       	neg	r8
   1e55e:	91 08       	sbc	r9, r1
   1e560:	2f 3f       	cpi	r18, 0xFF	; 255
   1e562:	32 07       	cpc	r19, r18
   1e564:	29 f4       	brne	.+10     	; 0x1e570 <dtoa_prf+0x248>
   1e566:	d6 01       	movw	r26, r12
   1e568:	fc 92       	st	X, r15
   1e56a:	f6 01       	movw	r30, r12
   1e56c:	31 96       	adiw	r30, 0x01	; 1
   1e56e:	6f 01       	movw	r12, r30
   1e570:	62 17       	cp	r22, r18
   1e572:	73 07       	cpc	r23, r19
   1e574:	94 f1       	brlt	.+100    	; 0x1e5da <dtoa_prf+0x2b2>
   1e576:	02 17       	cp	r16, r18
   1e578:	13 07       	cpc	r17, r19
   1e57a:	7c f5       	brge	.+94     	; 0x1e5da <dtoa_prf+0x2b2>
   1e57c:	db 01       	movw	r26, r22
   1e57e:	a2 1b       	sub	r26, r18
   1e580:	b3 0b       	sbc	r27, r19
   1e582:	aa 24       	eor	r10, r10
   1e584:	a3 94       	inc	r10
   1e586:	b1 2c       	mov	r11, r1
   1e588:	ac 0e       	add	r10, r28
   1e58a:	bd 1e       	adc	r11, r29
   1e58c:	aa 0d       	add	r26, r10
   1e58e:	bb 1d       	adc	r27, r11
   1e590:	11 96       	adiw	r26, 0x01	; 1
   1e592:	8c 91       	ld	r24, X
   1e594:	21 50       	subi	r18, 0x01	; 1
   1e596:	31 09       	sbc	r19, r1
   1e598:	d6 01       	movw	r26, r12
   1e59a:	11 96       	adiw	r26, 0x01	; 1
   1e59c:	28 15       	cp	r18, r8
   1e59e:	39 05       	cpc	r19, r9
   1e5a0:	f4 f0       	brlt	.+60     	; 0x1e5de <dtoa_prf+0x2b6>
   1e5a2:	f6 01       	movw	r30, r12
   1e5a4:	80 83       	st	Z, r24
   1e5a6:	6d 01       	movw	r12, r26
   1e5a8:	db cf       	rjmp	.-74     	; 0x1e560 <dtoa_prf+0x238>
   1e5aa:	b1 2c       	mov	r11, r1
   1e5ac:	a1 2c       	mov	r10, r1
   1e5ae:	a0 cf       	rjmp	.-192    	; 0x1e4f0 <dtoa_prf+0x1c8>
   1e5b0:	f7 01       	movw	r30, r14
   1e5b2:	b1 93       	st	Z+, r27
   1e5b4:	7f 01       	movw	r14, r30
   1e5b6:	a1 50       	subi	r26, 0x01	; 1
   1e5b8:	aa cf       	rjmp	.-172    	; 0x1e50e <dtoa_prf+0x1e6>
   1e5ba:	91 11       	cpse	r25, r1
   1e5bc:	b0 cf       	rjmp	.-160    	; 0x1e51e <dtoa_prf+0x1f6>
   1e5be:	d6 01       	movw	r26, r12
   1e5c0:	94 2f       	mov	r25, r20
   1e5c2:	50 e3       	ldi	r21, 0x30	; 48
   1e5c4:	02 c0       	rjmp	.+4      	; 0x1e5ca <dtoa_prf+0x2a2>
   1e5c6:	5d 93       	st	X+, r21
   1e5c8:	91 50       	subi	r25, 0x01	; 1
   1e5ca:	91 11       	cpse	r25, r1
   1e5cc:	fc cf       	rjmp	.-8      	; 0x1e5c6 <dtoa_prf+0x29e>
   1e5ce:	c4 0e       	add	r12, r20
   1e5d0:	d1 1c       	adc	r13, r1
   1e5d2:	40 e0       	ldi	r20, 0x00	; 0
   1e5d4:	ac cf       	rjmp	.-168    	; 0x1e52e <dtoa_prf+0x206>
   1e5d6:	01 e0       	ldi	r16, 0x01	; 1
   1e5d8:	ba cf       	rjmp	.-140    	; 0x1e54e <dtoa_prf+0x226>
   1e5da:	80 e3       	ldi	r24, 0x30	; 48
   1e5dc:	db cf       	rjmp	.-74     	; 0x1e594 <dtoa_prf+0x26c>
   1e5de:	62 17       	cp	r22, r18
   1e5e0:	73 07       	cpc	r23, r19
   1e5e2:	31 f4       	brne	.+12     	; 0x1e5f0 <dtoa_prf+0x2c8>
   1e5e4:	96 33       	cpi	r25, 0x36	; 54
   1e5e6:	88 f4       	brcc	.+34     	; 0x1e60a <dtoa_prf+0x2e2>
   1e5e8:	95 33       	cpi	r25, 0x35	; 53
   1e5ea:	11 f4       	brne	.+4      	; 0x1e5f0 <dtoa_prf+0x2c8>
   1e5ec:	55 23       	and	r21, r21
   1e5ee:	69 f0       	breq	.+26     	; 0x1e60a <dtoa_prf+0x2e2>
   1e5f0:	f6 01       	movw	r30, r12
   1e5f2:	80 83       	st	Z, r24
   1e5f4:	fd 01       	movw	r30, r26
   1e5f6:	84 2f       	mov	r24, r20
   1e5f8:	90 e2       	ldi	r25, 0x20	; 32
   1e5fa:	81 11       	cpse	r24, r1
   1e5fc:	08 c0       	rjmp	.+16     	; 0x1e60e <dtoa_prf+0x2e6>
   1e5fe:	a4 0f       	add	r26, r20
   1e600:	b1 1d       	adc	r27, r1
   1e602:	1c 92       	st	X, r1
   1e604:	90 e0       	ldi	r25, 0x00	; 0
   1e606:	80 e0       	ldi	r24, 0x00	; 0
   1e608:	f3 ce       	rjmp	.-538    	; 0x1e3f0 <dtoa_prf+0xc8>
   1e60a:	81 e3       	ldi	r24, 0x31	; 49
   1e60c:	f1 cf       	rjmp	.-30     	; 0x1e5f0 <dtoa_prf+0x2c8>
   1e60e:	91 93       	st	Z+, r25
   1e610:	81 50       	subi	r24, 0x01	; 1
   1e612:	f3 cf       	rjmp	.-26     	; 0x1e5fa <dtoa_prf+0x2d2>
   1e614:	91 11       	cpse	r25, r1
   1e616:	83 cf       	rjmp	.-250    	; 0x1e51e <dtoa_prf+0x1f6>
   1e618:	8a cf       	rjmp	.-236    	; 0x1e52e <dtoa_prf+0x206>

0001e61a <malloc>:
malloc():
   1e61a:	0f 93       	push	r16
   1e61c:	1f 93       	push	r17
   1e61e:	cf 93       	push	r28
   1e620:	df 93       	push	r29
   1e622:	82 30       	cpi	r24, 0x02	; 2
   1e624:	91 05       	cpc	r25, r1
   1e626:	10 f4       	brcc	.+4      	; 0x1e62c <malloc+0x12>
   1e628:	82 e0       	ldi	r24, 0x02	; 2
   1e62a:	90 e0       	ldi	r25, 0x00	; 0
   1e62c:	e0 91 83 14 	lds	r30, 0x1483	; 0x801483 <__flp>
   1e630:	f0 91 84 14 	lds	r31, 0x1484	; 0x801484 <__flp+0x1>
   1e634:	30 e0       	ldi	r19, 0x00	; 0
   1e636:	20 e0       	ldi	r18, 0x00	; 0
   1e638:	b0 e0       	ldi	r27, 0x00	; 0
   1e63a:	a0 e0       	ldi	r26, 0x00	; 0
   1e63c:	30 97       	sbiw	r30, 0x00	; 0
   1e63e:	99 f4       	brne	.+38     	; 0x1e666 <malloc+0x4c>
   1e640:	21 15       	cp	r18, r1
   1e642:	31 05       	cpc	r19, r1
   1e644:	09 f4       	brne	.+2      	; 0x1e648 <malloc+0x2e>
   1e646:	4a c0       	rjmp	.+148    	; 0x1e6dc <malloc+0xc2>
   1e648:	28 1b       	sub	r18, r24
   1e64a:	39 0b       	sbc	r19, r25
   1e64c:	24 30       	cpi	r18, 0x04	; 4
   1e64e:	31 05       	cpc	r19, r1
   1e650:	d8 f5       	brcc	.+118    	; 0x1e6c8 <malloc+0xae>
   1e652:	8a 81       	ldd	r24, Y+2	; 0x02
   1e654:	9b 81       	ldd	r25, Y+3	; 0x03
   1e656:	61 15       	cp	r22, r1
   1e658:	71 05       	cpc	r23, r1
   1e65a:	89 f1       	breq	.+98     	; 0x1e6be <malloc+0xa4>
   1e65c:	fb 01       	movw	r30, r22
   1e65e:	93 83       	std	Z+3, r25	; 0x03
   1e660:	82 83       	std	Z+2, r24	; 0x02
   1e662:	fe 01       	movw	r30, r28
   1e664:	11 c0       	rjmp	.+34     	; 0x1e688 <malloc+0x6e>
   1e666:	40 81       	ld	r20, Z
   1e668:	51 81       	ldd	r21, Z+1	; 0x01
   1e66a:	02 81       	ldd	r16, Z+2	; 0x02
   1e66c:	13 81       	ldd	r17, Z+3	; 0x03
   1e66e:	48 17       	cp	r20, r24
   1e670:	59 07       	cpc	r21, r25
   1e672:	e0 f0       	brcs	.+56     	; 0x1e6ac <malloc+0x92>
   1e674:	48 17       	cp	r20, r24
   1e676:	59 07       	cpc	r21, r25
   1e678:	99 f4       	brne	.+38     	; 0x1e6a0 <malloc+0x86>
   1e67a:	10 97       	sbiw	r26, 0x00	; 0
   1e67c:	61 f0       	breq	.+24     	; 0x1e696 <malloc+0x7c>
   1e67e:	12 96       	adiw	r26, 0x02	; 2
   1e680:	0c 93       	st	X, r16
   1e682:	12 97       	sbiw	r26, 0x02	; 2
   1e684:	13 96       	adiw	r26, 0x03	; 3
   1e686:	1c 93       	st	X, r17
   1e688:	32 96       	adiw	r30, 0x02	; 2
   1e68a:	cf 01       	movw	r24, r30
   1e68c:	df 91       	pop	r29
   1e68e:	cf 91       	pop	r28
   1e690:	1f 91       	pop	r17
   1e692:	0f 91       	pop	r16
   1e694:	08 95       	ret
   1e696:	00 93 83 14 	sts	0x1483, r16	; 0x801483 <__flp>
   1e69a:	10 93 84 14 	sts	0x1484, r17	; 0x801484 <__flp+0x1>
   1e69e:	f4 cf       	rjmp	.-24     	; 0x1e688 <malloc+0x6e>
   1e6a0:	21 15       	cp	r18, r1
   1e6a2:	31 05       	cpc	r19, r1
   1e6a4:	51 f0       	breq	.+20     	; 0x1e6ba <malloc+0xa0>
   1e6a6:	42 17       	cp	r20, r18
   1e6a8:	53 07       	cpc	r21, r19
   1e6aa:	38 f0       	brcs	.+14     	; 0x1e6ba <malloc+0xa0>
   1e6ac:	a9 01       	movw	r20, r18
   1e6ae:	db 01       	movw	r26, r22
   1e6b0:	9a 01       	movw	r18, r20
   1e6b2:	bd 01       	movw	r22, r26
   1e6b4:	df 01       	movw	r26, r30
   1e6b6:	f8 01       	movw	r30, r16
   1e6b8:	c1 cf       	rjmp	.-126    	; 0x1e63c <malloc+0x22>
   1e6ba:	ef 01       	movw	r28, r30
   1e6bc:	f9 cf       	rjmp	.-14     	; 0x1e6b0 <malloc+0x96>
   1e6be:	90 93 84 14 	sts	0x1484, r25	; 0x801484 <__flp+0x1>
   1e6c2:	80 93 83 14 	sts	0x1483, r24	; 0x801483 <__flp>
   1e6c6:	cd cf       	rjmp	.-102    	; 0x1e662 <malloc+0x48>
   1e6c8:	fe 01       	movw	r30, r28
   1e6ca:	e2 0f       	add	r30, r18
   1e6cc:	f3 1f       	adc	r31, r19
   1e6ce:	81 93       	st	Z+, r24
   1e6d0:	91 93       	st	Z+, r25
   1e6d2:	22 50       	subi	r18, 0x02	; 2
   1e6d4:	31 09       	sbc	r19, r1
   1e6d6:	39 83       	std	Y+1, r19	; 0x01
   1e6d8:	28 83       	st	Y, r18
   1e6da:	d7 cf       	rjmp	.-82     	; 0x1e68a <malloc+0x70>
   1e6dc:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1e6e0:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1e6e4:	23 2b       	or	r18, r19
   1e6e6:	41 f4       	brne	.+16     	; 0x1e6f8 <malloc+0xde>
   1e6e8:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__malloc_heap_start>
   1e6ec:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__malloc_heap_start+0x1>
   1e6f0:	30 93 82 14 	sts	0x1482, r19	; 0x801482 <__brkval+0x1>
   1e6f4:	20 93 81 14 	sts	0x1481, r18	; 0x801481 <__brkval>
   1e6f8:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_end>
   1e6fc:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1e700:	21 15       	cp	r18, r1
   1e702:	31 05       	cpc	r19, r1
   1e704:	41 f4       	brne	.+16     	; 0x1e716 <malloc+0xfc>
   1e706:	2d b7       	in	r18, 0x3d	; 61
   1e708:	3e b7       	in	r19, 0x3e	; 62
   1e70a:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1e70e:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1e712:	24 1b       	sub	r18, r20
   1e714:	35 0b       	sbc	r19, r21
   1e716:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <__brkval>
   1e71a:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <__brkval+0x1>
   1e71e:	e2 17       	cp	r30, r18
   1e720:	f3 07       	cpc	r31, r19
   1e722:	a0 f4       	brcc	.+40     	; 0x1e74c <malloc+0x132>
   1e724:	2e 1b       	sub	r18, r30
   1e726:	3f 0b       	sbc	r19, r31
   1e728:	28 17       	cp	r18, r24
   1e72a:	39 07       	cpc	r19, r25
   1e72c:	78 f0       	brcs	.+30     	; 0x1e74c <malloc+0x132>
   1e72e:	ac 01       	movw	r20, r24
   1e730:	4e 5f       	subi	r20, 0xFE	; 254
   1e732:	5f 4f       	sbci	r21, 0xFF	; 255
   1e734:	24 17       	cp	r18, r20
   1e736:	35 07       	cpc	r19, r21
   1e738:	48 f0       	brcs	.+18     	; 0x1e74c <malloc+0x132>
   1e73a:	4e 0f       	add	r20, r30
   1e73c:	5f 1f       	adc	r21, r31
   1e73e:	50 93 82 14 	sts	0x1482, r21	; 0x801482 <__brkval+0x1>
   1e742:	40 93 81 14 	sts	0x1481, r20	; 0x801481 <__brkval>
   1e746:	81 93       	st	Z+, r24
   1e748:	91 93       	st	Z+, r25
   1e74a:	9f cf       	rjmp	.-194    	; 0x1e68a <malloc+0x70>
   1e74c:	f0 e0       	ldi	r31, 0x00	; 0
   1e74e:	e0 e0       	ldi	r30, 0x00	; 0
   1e750:	9c cf       	rjmp	.-200    	; 0x1e68a <malloc+0x70>

0001e752 <free>:
free():
   1e752:	cf 93       	push	r28
   1e754:	df 93       	push	r29
   1e756:	00 97       	sbiw	r24, 0x00	; 0
   1e758:	e9 f0       	breq	.+58     	; 0x1e794 <free+0x42>
   1e75a:	fc 01       	movw	r30, r24
   1e75c:	32 97       	sbiw	r30, 0x02	; 2
   1e75e:	13 82       	std	Z+3, r1	; 0x03
   1e760:	12 82       	std	Z+2, r1	; 0x02
   1e762:	a0 91 83 14 	lds	r26, 0x1483	; 0x801483 <__flp>
   1e766:	b0 91 84 14 	lds	r27, 0x1484	; 0x801484 <__flp+0x1>
   1e76a:	ed 01       	movw	r28, r26
   1e76c:	30 e0       	ldi	r19, 0x00	; 0
   1e76e:	20 e0       	ldi	r18, 0x00	; 0
   1e770:	10 97       	sbiw	r26, 0x00	; 0
   1e772:	a1 f4       	brne	.+40     	; 0x1e79c <free+0x4a>
   1e774:	20 81       	ld	r18, Z
   1e776:	31 81       	ldd	r19, Z+1	; 0x01
   1e778:	82 0f       	add	r24, r18
   1e77a:	93 1f       	adc	r25, r19
   1e77c:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1e780:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1e784:	28 17       	cp	r18, r24
   1e786:	39 07       	cpc	r19, r25
   1e788:	09 f0       	breq	.+2      	; 0x1e78c <free+0x3a>
   1e78a:	61 c0       	rjmp	.+194    	; 0x1e84e <free+0xfc>
   1e78c:	f0 93 82 14 	sts	0x1482, r31	; 0x801482 <__brkval+0x1>
   1e790:	e0 93 81 14 	sts	0x1481, r30	; 0x801481 <__brkval>
   1e794:	df 91       	pop	r29
   1e796:	cf 91       	pop	r28
   1e798:	08 95       	ret
   1e79a:	ea 01       	movw	r28, r20
   1e79c:	ce 17       	cp	r28, r30
   1e79e:	df 07       	cpc	r29, r31
   1e7a0:	e8 f5       	brcc	.+122    	; 0x1e81c <free+0xca>
   1e7a2:	4a 81       	ldd	r20, Y+2	; 0x02
   1e7a4:	5b 81       	ldd	r21, Y+3	; 0x03
   1e7a6:	9e 01       	movw	r18, r28
   1e7a8:	41 15       	cp	r20, r1
   1e7aa:	51 05       	cpc	r21, r1
   1e7ac:	b1 f7       	brne	.-20     	; 0x1e79a <free+0x48>
   1e7ae:	e9 01       	movw	r28, r18
   1e7b0:	fb 83       	std	Y+3, r31	; 0x03
   1e7b2:	ea 83       	std	Y+2, r30	; 0x02
   1e7b4:	49 91       	ld	r20, Y+
   1e7b6:	59 91       	ld	r21, Y+
   1e7b8:	c4 0f       	add	r28, r20
   1e7ba:	d5 1f       	adc	r29, r21
   1e7bc:	ec 17       	cp	r30, r28
   1e7be:	fd 07       	cpc	r31, r29
   1e7c0:	61 f4       	brne	.+24     	; 0x1e7da <free+0x88>
   1e7c2:	80 81       	ld	r24, Z
   1e7c4:	91 81       	ldd	r25, Z+1	; 0x01
   1e7c6:	02 96       	adiw	r24, 0x02	; 2
   1e7c8:	84 0f       	add	r24, r20
   1e7ca:	95 1f       	adc	r25, r21
   1e7cc:	e9 01       	movw	r28, r18
   1e7ce:	99 83       	std	Y+1, r25	; 0x01
   1e7d0:	88 83       	st	Y, r24
   1e7d2:	82 81       	ldd	r24, Z+2	; 0x02
   1e7d4:	93 81       	ldd	r25, Z+3	; 0x03
   1e7d6:	9b 83       	std	Y+3, r25	; 0x03
   1e7d8:	8a 83       	std	Y+2, r24	; 0x02
   1e7da:	f0 e0       	ldi	r31, 0x00	; 0
   1e7dc:	e0 e0       	ldi	r30, 0x00	; 0
   1e7de:	12 96       	adiw	r26, 0x02	; 2
   1e7e0:	8d 91       	ld	r24, X+
   1e7e2:	9c 91       	ld	r25, X
   1e7e4:	13 97       	sbiw	r26, 0x03	; 3
   1e7e6:	00 97       	sbiw	r24, 0x00	; 0
   1e7e8:	b9 f5       	brne	.+110    	; 0x1e858 <free+0x106>
   1e7ea:	2d 91       	ld	r18, X+
   1e7ec:	3c 91       	ld	r19, X
   1e7ee:	11 97       	sbiw	r26, 0x01	; 1
   1e7f0:	cd 01       	movw	r24, r26
   1e7f2:	02 96       	adiw	r24, 0x02	; 2
   1e7f4:	82 0f       	add	r24, r18
   1e7f6:	93 1f       	adc	r25, r19
   1e7f8:	20 91 81 14 	lds	r18, 0x1481	; 0x801481 <__brkval>
   1e7fc:	30 91 82 14 	lds	r19, 0x1482	; 0x801482 <__brkval+0x1>
   1e800:	28 17       	cp	r18, r24
   1e802:	39 07       	cpc	r19, r25
   1e804:	39 f6       	brne	.-114    	; 0x1e794 <free+0x42>
   1e806:	30 97       	sbiw	r30, 0x00	; 0
   1e808:	51 f5       	brne	.+84     	; 0x1e85e <free+0x10c>
   1e80a:	10 92 84 14 	sts	0x1484, r1	; 0x801484 <__flp+0x1>
   1e80e:	10 92 83 14 	sts	0x1483, r1	; 0x801483 <__flp>
   1e812:	b0 93 82 14 	sts	0x1482, r27	; 0x801482 <__brkval+0x1>
   1e816:	a0 93 81 14 	sts	0x1481, r26	; 0x801481 <__brkval>
   1e81a:	bc cf       	rjmp	.-136    	; 0x1e794 <free+0x42>
   1e81c:	d3 83       	std	Z+3, r29	; 0x03
   1e81e:	c2 83       	std	Z+2, r28	; 0x02
   1e820:	40 81       	ld	r20, Z
   1e822:	51 81       	ldd	r21, Z+1	; 0x01
   1e824:	84 0f       	add	r24, r20
   1e826:	95 1f       	adc	r25, r21
   1e828:	c8 17       	cp	r28, r24
   1e82a:	d9 07       	cpc	r29, r25
   1e82c:	61 f4       	brne	.+24     	; 0x1e846 <free+0xf4>
   1e82e:	4e 5f       	subi	r20, 0xFE	; 254
   1e830:	5f 4f       	sbci	r21, 0xFF	; 255
   1e832:	88 81       	ld	r24, Y
   1e834:	99 81       	ldd	r25, Y+1	; 0x01
   1e836:	48 0f       	add	r20, r24
   1e838:	59 1f       	adc	r21, r25
   1e83a:	51 83       	std	Z+1, r21	; 0x01
   1e83c:	40 83       	st	Z, r20
   1e83e:	8a 81       	ldd	r24, Y+2	; 0x02
   1e840:	9b 81       	ldd	r25, Y+3	; 0x03
   1e842:	93 83       	std	Z+3, r25	; 0x03
   1e844:	82 83       	std	Z+2, r24	; 0x02
   1e846:	21 15       	cp	r18, r1
   1e848:	31 05       	cpc	r19, r1
   1e84a:	09 f0       	breq	.+2      	; 0x1e84e <free+0xfc>
   1e84c:	b0 cf       	rjmp	.-160    	; 0x1e7ae <free+0x5c>
   1e84e:	f0 93 84 14 	sts	0x1484, r31	; 0x801484 <__flp+0x1>
   1e852:	e0 93 83 14 	sts	0x1483, r30	; 0x801483 <__flp>
   1e856:	9e cf       	rjmp	.-196    	; 0x1e794 <free+0x42>
   1e858:	fd 01       	movw	r30, r26
   1e85a:	dc 01       	movw	r26, r24
   1e85c:	c0 cf       	rjmp	.-128    	; 0x1e7de <free+0x8c>
   1e85e:	13 82       	std	Z+3, r1	; 0x03
   1e860:	12 82       	std	Z+2, r1	; 0x02
   1e862:	d7 cf       	rjmp	.-82     	; 0x1e812 <free+0xc0>

0001e864 <strtod>:
strtod():
   1e864:	8f 92       	push	r8
   1e866:	9f 92       	push	r9
   1e868:	af 92       	push	r10
   1e86a:	bf 92       	push	r11
   1e86c:	cf 92       	push	r12
   1e86e:	df 92       	push	r13
   1e870:	ef 92       	push	r14
   1e872:	ff 92       	push	r15
   1e874:	0f 93       	push	r16
   1e876:	1f 93       	push	r17
   1e878:	cf 93       	push	r28
   1e87a:	df 93       	push	r29
   1e87c:	5c 01       	movw	r10, r24
   1e87e:	7b 01       	movw	r14, r22
   1e880:	61 15       	cp	r22, r1
   1e882:	71 05       	cpc	r23, r1
   1e884:	19 f0       	breq	.+6      	; 0x1e88c <strtod+0x28>
   1e886:	db 01       	movw	r26, r22
   1e888:	8d 93       	st	X+, r24
   1e88a:	9c 93       	st	X, r25
   1e88c:	85 01       	movw	r16, r10
   1e88e:	0f 5f       	subi	r16, 0xFF	; 255
   1e890:	1f 4f       	sbci	r17, 0xFF	; 255
   1e892:	f5 01       	movw	r30, r10
   1e894:	d0 81       	ld	r29, Z
   1e896:	8d 2f       	mov	r24, r29
   1e898:	90 e0       	ldi	r25, 0x00	; 0
   1e89a:	0e 94 86 ee 	call	0x1dd0c	; 0x1dd0c <isspace>
   1e89e:	6c 01       	movw	r12, r24
   1e8a0:	89 2b       	or	r24, r25
   1e8a2:	b9 f5       	brne	.+110    	; 0x1e912 <strtod+0xae>
   1e8a4:	dd 32       	cpi	r29, 0x2D	; 45
   1e8a6:	b9 f5       	brne	.+110    	; 0x1e916 <strtod+0xb2>
   1e8a8:	0f 5f       	subi	r16, 0xFF	; 255
   1e8aa:	1f 4f       	sbci	r17, 0xFF	; 255
   1e8ac:	d5 01       	movw	r26, r10
   1e8ae:	11 96       	adiw	r26, 0x01	; 1
   1e8b0:	dc 91       	ld	r29, X
   1e8b2:	c1 e0       	ldi	r28, 0x01	; 1
   1e8b4:	58 01       	movw	r10, r16
   1e8b6:	f1 e0       	ldi	r31, 0x01	; 1
   1e8b8:	af 1a       	sub	r10, r31
   1e8ba:	b1 08       	sbc	r11, r1
   1e8bc:	43 e0       	ldi	r20, 0x03	; 3
   1e8be:	50 e0       	ldi	r21, 0x00	; 0
   1e8c0:	60 e6       	ldi	r22, 0x60	; 96
   1e8c2:	74 e0       	ldi	r23, 0x04	; 4
   1e8c4:	c5 01       	movw	r24, r10
   1e8c6:	0e 94 6b f6 	call	0x1ecd6	; 0x1ecd6 <strncasecmp_P>
   1e8ca:	89 2b       	or	r24, r25
   1e8cc:	69 f5       	brne	.+90     	; 0x1e928 <strtod+0xc4>
   1e8ce:	68 01       	movw	r12, r16
   1e8d0:	82 e0       	ldi	r24, 0x02	; 2
   1e8d2:	c8 0e       	add	r12, r24
   1e8d4:	d1 1c       	adc	r13, r1
   1e8d6:	45 e0       	ldi	r20, 0x05	; 5
   1e8d8:	50 e0       	ldi	r21, 0x00	; 0
   1e8da:	6b e5       	ldi	r22, 0x5B	; 91
   1e8dc:	74 e0       	ldi	r23, 0x04	; 4
   1e8de:	c6 01       	movw	r24, r12
   1e8e0:	0e 94 6b f6 	call	0x1ecd6	; 0x1ecd6 <strncasecmp_P>
   1e8e4:	89 2b       	or	r24, r25
   1e8e6:	21 f4       	brne	.+8      	; 0x1e8f0 <strtod+0x8c>
   1e8e8:	68 01       	movw	r12, r16
   1e8ea:	97 e0       	ldi	r25, 0x07	; 7
   1e8ec:	c9 0e       	add	r12, r25
   1e8ee:	d1 1c       	adc	r13, r1
   1e8f0:	e1 14       	cp	r14, r1
   1e8f2:	f1 04       	cpc	r15, r1
   1e8f4:	19 f0       	breq	.+6      	; 0x1e8fc <strtod+0x98>
   1e8f6:	d7 01       	movw	r26, r14
   1e8f8:	cd 92       	st	X+, r12
   1e8fa:	dc 92       	st	X, r13
   1e8fc:	60 e0       	ldi	r22, 0x00	; 0
   1e8fe:	70 e0       	ldi	r23, 0x00	; 0
   1e900:	80 e8       	ldi	r24, 0x80	; 128
   1e902:	9f ef       	ldi	r25, 0xFF	; 255
   1e904:	c1 11       	cpse	r28, r1
   1e906:	ff c0       	rjmp	.+510    	; 0x1eb06 <strtod+0x2a2>
   1e908:	60 e0       	ldi	r22, 0x00	; 0
   1e90a:	70 e0       	ldi	r23, 0x00	; 0
   1e90c:	80 e8       	ldi	r24, 0x80	; 128
   1e90e:	9f e7       	ldi	r25, 0x7F	; 127
   1e910:	fa c0       	rjmp	.+500    	; 0x1eb06 <strtod+0x2a2>
   1e912:	58 01       	movw	r10, r16
   1e914:	bb cf       	rjmp	.-138    	; 0x1e88c <strtod+0x28>
   1e916:	db 32       	cpi	r29, 0x2B	; 43
   1e918:	29 f4       	brne	.+10     	; 0x1e924 <strtod+0xc0>
   1e91a:	85 01       	movw	r16, r10
   1e91c:	0e 5f       	subi	r16, 0xFE	; 254
   1e91e:	1f 4f       	sbci	r17, 0xFF	; 255
   1e920:	f5 01       	movw	r30, r10
   1e922:	d1 81       	ldd	r29, Z+1	; 0x01
   1e924:	c0 e0       	ldi	r28, 0x00	; 0
   1e926:	c6 cf       	rjmp	.-116    	; 0x1e8b4 <strtod+0x50>
   1e928:	43 e0       	ldi	r20, 0x03	; 3
   1e92a:	50 e0       	ldi	r21, 0x00	; 0
   1e92c:	68 e5       	ldi	r22, 0x58	; 88
   1e92e:	74 e0       	ldi	r23, 0x04	; 4
   1e930:	c5 01       	movw	r24, r10
   1e932:	0e 94 6b f6 	call	0x1ecd6	; 0x1ecd6 <strncasecmp_P>
   1e936:	89 2b       	or	r24, r25
   1e938:	e9 f0       	breq	.+58     	; 0x1e974 <strtod+0x110>
   1e93a:	f8 01       	movw	r30, r16
   1e93c:	10 e0       	ldi	r17, 0x00	; 0
   1e93e:	00 e0       	ldi	r16, 0x00	; 0
   1e940:	20 e0       	ldi	r18, 0x00	; 0
   1e942:	30 e0       	ldi	r19, 0x00	; 0
   1e944:	a9 01       	movw	r20, r18
   1e946:	5f 01       	movw	r10, r30
   1e948:	b0 ed       	ldi	r27, 0xD0	; 208
   1e94a:	8b 2e       	mov	r8, r27
   1e94c:	8d 0e       	add	r8, r29
   1e94e:	89 e0       	ldi	r24, 0x09	; 9
   1e950:	88 15       	cp	r24, r8
   1e952:	c8 f1       	brcs	.+114    	; 0x1e9c6 <strtod+0x162>
   1e954:	9c 2e       	mov	r9, r28
   1e956:	68 94       	set
   1e958:	91 f8       	bld	r9, 1
   1e95a:	8c 2f       	mov	r24, r28
   1e95c:	88 70       	andi	r24, 0x08	; 8
   1e95e:	c2 ff       	sbrs	r28, 2
   1e960:	16 c0       	rjmp	.+44     	; 0x1e98e <strtod+0x12a>
   1e962:	81 11       	cpse	r24, r1
   1e964:	02 c0       	rjmp	.+4      	; 0x1e96a <strtod+0x106>
   1e966:	0f 5f       	subi	r16, 0xFF	; 255
   1e968:	1f 4f       	sbci	r17, 0xFF	; 255
   1e96a:	31 96       	adiw	r30, 0x01	; 1
   1e96c:	d5 01       	movw	r26, r10
   1e96e:	dc 91       	ld	r29, X
   1e970:	c9 2d       	mov	r28, r9
   1e972:	e9 cf       	rjmp	.-46     	; 0x1e946 <strtod+0xe2>
   1e974:	e1 14       	cp	r14, r1
   1e976:	f1 04       	cpc	r15, r1
   1e978:	29 f0       	breq	.+10     	; 0x1e984 <strtod+0x120>
   1e97a:	0e 5f       	subi	r16, 0xFE	; 254
   1e97c:	1f 4f       	sbci	r17, 0xFF	; 255
   1e97e:	f7 01       	movw	r30, r14
   1e980:	11 83       	std	Z+1, r17	; 0x01
   1e982:	00 83       	st	Z, r16
   1e984:	60 e0       	ldi	r22, 0x00	; 0
   1e986:	70 e0       	ldi	r23, 0x00	; 0
   1e988:	80 ec       	ldi	r24, 0xC0	; 192
   1e98a:	9f e7       	ldi	r25, 0x7F	; 127
   1e98c:	bc c0       	rjmp	.+376    	; 0x1eb06 <strtod+0x2a2>
   1e98e:	88 23       	and	r24, r24
   1e990:	11 f0       	breq	.+4      	; 0x1e996 <strtod+0x132>
   1e992:	01 50       	subi	r16, 0x01	; 1
   1e994:	11 09       	sbc	r17, r1
   1e996:	a5 e0       	ldi	r26, 0x05	; 5
   1e998:	b0 e0       	ldi	r27, 0x00	; 0
   1e99a:	0e 94 f1 f8 	call	0x1f1e2	; 0x1f1e2 <__muluhisi3>
   1e99e:	9b 01       	movw	r18, r22
   1e9a0:	ac 01       	movw	r20, r24
   1e9a2:	22 0f       	add	r18, r18
   1e9a4:	33 1f       	adc	r19, r19
   1e9a6:	44 1f       	adc	r20, r20
   1e9a8:	55 1f       	adc	r21, r21
   1e9aa:	28 0d       	add	r18, r8
   1e9ac:	31 1d       	adc	r19, r1
   1e9ae:	41 1d       	adc	r20, r1
   1e9b0:	51 1d       	adc	r21, r1
   1e9b2:	28 39       	cpi	r18, 0x98	; 152
   1e9b4:	99 e9       	ldi	r25, 0x99	; 153
   1e9b6:	39 07       	cpc	r19, r25
   1e9b8:	49 07       	cpc	r20, r25
   1e9ba:	99 e1       	ldi	r25, 0x19	; 25
   1e9bc:	59 07       	cpc	r21, r25
   1e9be:	a8 f2       	brcs	.-86     	; 0x1e96a <strtod+0x106>
   1e9c0:	c6 60       	ori	r28, 0x06	; 6
   1e9c2:	9c 2e       	mov	r9, r28
   1e9c4:	d2 cf       	rjmp	.-92     	; 0x1e96a <strtod+0x106>
   1e9c6:	ae ef       	ldi	r26, 0xFE	; 254
   1e9c8:	8a 12       	cpse	r8, r26
   1e9ca:	06 c0       	rjmp	.+12     	; 0x1e9d8 <strtod+0x174>
   1e9cc:	c3 fd       	sbrc	r28, 3
   1e9ce:	3c c0       	rjmp	.+120    	; 0x1ea48 <strtod+0x1e4>
   1e9d0:	9c 2e       	mov	r9, r28
   1e9d2:	68 94       	set
   1e9d4:	93 f8       	bld	r9, 3
   1e9d6:	c9 cf       	rjmp	.-110    	; 0x1e96a <strtod+0x106>
   1e9d8:	df 7d       	andi	r29, 0xDF	; 223
   1e9da:	d5 34       	cpi	r29, 0x45	; 69
   1e9dc:	a9 f5       	brne	.+106    	; 0x1ea48 <strtod+0x1e4>
   1e9de:	80 81       	ld	r24, Z
   1e9e0:	8d 32       	cpi	r24, 0x2D	; 45
   1e9e2:	39 f4       	brne	.+14     	; 0x1e9f2 <strtod+0x18e>
   1e9e4:	c0 61       	ori	r28, 0x10	; 16
   1e9e6:	df 01       	movw	r26, r30
   1e9e8:	12 96       	adiw	r26, 0x02	; 2
   1e9ea:	81 81       	ldd	r24, Z+1	; 0x01
   1e9ec:	62 e0       	ldi	r22, 0x02	; 2
   1e9ee:	70 e0       	ldi	r23, 0x00	; 0
   1e9f0:	06 c0       	rjmp	.+12     	; 0x1e9fe <strtod+0x19a>
   1e9f2:	df 01       	movw	r26, r30
   1e9f4:	8b 32       	cpi	r24, 0x2B	; 43
   1e9f6:	c1 f3       	breq	.-16     	; 0x1e9e8 <strtod+0x184>
   1e9f8:	11 96       	adiw	r26, 0x01	; 1
   1e9fa:	61 e0       	ldi	r22, 0x01	; 1
   1e9fc:	70 e0       	ldi	r23, 0x00	; 0
   1e9fe:	80 53       	subi	r24, 0x30	; 48
   1ea00:	5d 01       	movw	r10, r26
   1ea02:	a6 1a       	sub	r10, r22
   1ea04:	b7 0a       	sbc	r11, r23
   1ea06:	8a 30       	cpi	r24, 0x0A	; 10
   1ea08:	f8 f4       	brcc	.+62     	; 0x1ea48 <strtod+0x1e4>
   1ea0a:	e0 e8       	ldi	r30, 0x80	; 128
   1ea0c:	ce 16       	cp	r12, r30
   1ea0e:	ec e0       	ldi	r30, 0x0C	; 12
   1ea10:	de 06       	cpc	r13, r30
   1ea12:	5c f4       	brge	.+22     	; 0x1ea2a <strtod+0x1c6>
   1ea14:	b6 01       	movw	r22, r12
   1ea16:	66 0f       	add	r22, r22
   1ea18:	77 1f       	adc	r23, r23
   1ea1a:	66 0f       	add	r22, r22
   1ea1c:	77 1f       	adc	r23, r23
   1ea1e:	c6 0e       	add	r12, r22
   1ea20:	d7 1e       	adc	r13, r23
   1ea22:	cc 0c       	add	r12, r12
   1ea24:	dd 1c       	adc	r13, r13
   1ea26:	c8 0e       	add	r12, r24
   1ea28:	d1 1c       	adc	r13, r1
   1ea2a:	5d 01       	movw	r10, r26
   1ea2c:	ff ef       	ldi	r31, 0xFF	; 255
   1ea2e:	af 1a       	sub	r10, r31
   1ea30:	bf 0a       	sbc	r11, r31
   1ea32:	8c 91       	ld	r24, X
   1ea34:	80 53       	subi	r24, 0x30	; 48
   1ea36:	8a 30       	cpi	r24, 0x0A	; 10
   1ea38:	a8 f1       	brcs	.+106    	; 0x1eaa4 <strtod+0x240>
   1ea3a:	c4 ff       	sbrs	r28, 4
   1ea3c:	03 c0       	rjmp	.+6      	; 0x1ea44 <strtod+0x1e0>
   1ea3e:	d1 94       	neg	r13
   1ea40:	c1 94       	neg	r12
   1ea42:	d1 08       	sbc	r13, r1
   1ea44:	0c 0d       	add	r16, r12
   1ea46:	1d 1d       	adc	r17, r13
   1ea48:	c1 ff       	sbrs	r28, 1
   1ea4a:	09 c0       	rjmp	.+18     	; 0x1ea5e <strtod+0x1fa>
   1ea4c:	e1 14       	cp	r14, r1
   1ea4e:	f1 04       	cpc	r15, r1
   1ea50:	31 f0       	breq	.+12     	; 0x1ea5e <strtod+0x1fa>
   1ea52:	81 e0       	ldi	r24, 0x01	; 1
   1ea54:	a8 1a       	sub	r10, r24
   1ea56:	b1 08       	sbc	r11, r1
   1ea58:	d7 01       	movw	r26, r14
   1ea5a:	ad 92       	st	X+, r10
   1ea5c:	bc 92       	st	X, r11
   1ea5e:	ca 01       	movw	r24, r20
   1ea60:	b9 01       	movw	r22, r18
   1ea62:	0e 94 43 f7 	call	0x1ee86	; 0x1ee86 <__floatunsisf>
   1ea66:	c3 70       	andi	r28, 0x03	; 3
   1ea68:	c3 30       	cpi	r28, 0x03	; 3
   1ea6a:	09 f4       	brne	.+2      	; 0x1ea6e <strtod+0x20a>
   1ea6c:	90 58       	subi	r25, 0x80	; 128
   1ea6e:	4b 01       	movw	r8, r22
   1ea70:	5c 01       	movw	r10, r24
   1ea72:	20 e0       	ldi	r18, 0x00	; 0
   1ea74:	30 e0       	ldi	r19, 0x00	; 0
   1ea76:	a9 01       	movw	r20, r18
   1ea78:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
   1ea7c:	88 23       	and	r24, r24
   1ea7e:	09 f4       	brne	.+2      	; 0x1ea82 <strtod+0x21e>
   1ea80:	40 c0       	rjmp	.+128    	; 0x1eb02 <strtod+0x29e>
   1ea82:	cf e8       	ldi	r28, 0x8F	; 143
   1ea84:	d4 e0       	ldi	r29, 0x04	; 4
   1ea86:	17 ff       	sbrs	r17, 7
   1ea88:	05 c0       	rjmp	.+10     	; 0x1ea94 <strtod+0x230>
   1ea8a:	11 95       	neg	r17
   1ea8c:	01 95       	neg	r16
   1ea8e:	11 09       	sbc	r17, r1
   1ea90:	c7 e7       	ldi	r28, 0x77	; 119
   1ea92:	d4 e0       	ldi	r29, 0x04	; 4
   1ea94:	6e 01       	movw	r12, r28
   1ea96:	b8 e1       	ldi	r27, 0x18	; 24
   1ea98:	cb 1a       	sub	r12, r27
   1ea9a:	d1 08       	sbc	r13, r1
   1ea9c:	80 e2       	ldi	r24, 0x20	; 32
   1ea9e:	e8 2e       	mov	r14, r24
   1eaa0:	f1 2c       	mov	r15, r1
   1eaa2:	0f c0       	rjmp	.+30     	; 0x1eac2 <strtod+0x25e>
   1eaa4:	d5 01       	movw	r26, r10
   1eaa6:	b1 cf       	rjmp	.-158    	; 0x1ea0a <strtod+0x1a6>
   1eaa8:	fe 01       	movw	r30, r28
   1eaaa:	25 91       	lpm	r18, Z+
   1eaac:	35 91       	lpm	r19, Z+
   1eaae:	45 91       	lpm	r20, Z+
   1eab0:	54 91       	lpm	r21, Z
   1eab2:	0e 19       	sub	r16, r14
   1eab4:	1f 09       	sbc	r17, r15
   1eab6:	c5 01       	movw	r24, r10
   1eab8:	b4 01       	movw	r22, r8
   1eaba:	0e 94 a4 f7 	call	0x1ef48	; 0x1ef48 <__mulsf3>
   1eabe:	4b 01       	movw	r8, r22
   1eac0:	5c 01       	movw	r10, r24
   1eac2:	d5 01       	movw	r26, r10
   1eac4:	c4 01       	movw	r24, r8
   1eac6:	0e 15       	cp	r16, r14
   1eac8:	1f 05       	cpc	r17, r15
   1eaca:	74 f7       	brge	.-36     	; 0x1eaa8 <strtod+0x244>
   1eacc:	24 97       	sbiw	r28, 0x04	; 4
   1eace:	f5 94       	asr	r15
   1ead0:	e7 94       	ror	r14
   1ead2:	cc 16       	cp	r12, r28
   1ead4:	dd 06       	cpc	r13, r29
   1ead6:	a9 f7       	brne	.-22     	; 0x1eac2 <strtod+0x25e>
   1ead8:	8a 2f       	mov	r24, r26
   1eada:	88 0f       	add	r24, r24
   1eadc:	8b 2f       	mov	r24, r27
   1eade:	88 1f       	adc	r24, r24
   1eae0:	8f 3f       	cpi	r24, 0xFF	; 255
   1eae2:	49 f0       	breq	.+18     	; 0x1eaf6 <strtod+0x292>
   1eae4:	20 e0       	ldi	r18, 0x00	; 0
   1eae6:	30 e0       	ldi	r19, 0x00	; 0
   1eae8:	a9 01       	movw	r20, r18
   1eaea:	c5 01       	movw	r24, r10
   1eaec:	b4 01       	movw	r22, r8
   1eaee:	0e 94 3e f7 	call	0x1ee7c	; 0x1ee7c <__cmpsf2>
   1eaf2:	81 11       	cpse	r24, r1
   1eaf4:	06 c0       	rjmp	.+12     	; 0x1eb02 <strtod+0x29e>
   1eaf6:	82 e2       	ldi	r24, 0x22	; 34
   1eaf8:	90 e0       	ldi	r25, 0x00	; 0
   1eafa:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <errno+0x1>
   1eafe:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <errno>
   1eb02:	c5 01       	movw	r24, r10
   1eb04:	b4 01       	movw	r22, r8
   1eb06:	df 91       	pop	r29
   1eb08:	cf 91       	pop	r28
   1eb0a:	1f 91       	pop	r17
   1eb0c:	0f 91       	pop	r16
   1eb0e:	ff 90       	pop	r15
   1eb10:	ef 90       	pop	r14
   1eb12:	df 90       	pop	r13
   1eb14:	cf 90       	pop	r12
   1eb16:	bf 90       	pop	r11
   1eb18:	af 90       	pop	r10
   1eb1a:	9f 90       	pop	r9
   1eb1c:	8f 90       	pop	r8
   1eb1e:	08 95       	ret

0001eb20 <__ftoa_engine>:
__ftoa_engine():
   1eb20:	28 30       	cpi	r18, 0x08	; 8
   1eb22:	08 f0       	brcs	.+2      	; 0x1eb26 <__ftoa_engine+0x6>
   1eb24:	27 e0       	ldi	r18, 0x07	; 7
   1eb26:	33 27       	eor	r19, r19
   1eb28:	da 01       	movw	r26, r20
   1eb2a:	99 0f       	add	r25, r25
   1eb2c:	31 1d       	adc	r19, r1
   1eb2e:	87 fd       	sbrc	r24, 7
   1eb30:	91 60       	ori	r25, 0x01	; 1
   1eb32:	00 96       	adiw	r24, 0x00	; 0
   1eb34:	61 05       	cpc	r22, r1
   1eb36:	71 05       	cpc	r23, r1
   1eb38:	39 f4       	brne	.+14     	; 0x1eb48 <__ftoa_engine+0x28>
   1eb3a:	32 60       	ori	r19, 0x02	; 2
   1eb3c:	2e 5f       	subi	r18, 0xFE	; 254
   1eb3e:	3d 93       	st	X+, r19
   1eb40:	30 e3       	ldi	r19, 0x30	; 48
   1eb42:	2a 95       	dec	r18
   1eb44:	e1 f7       	brne	.-8      	; 0x1eb3e <__ftoa_engine+0x1e>
   1eb46:	08 95       	ret
   1eb48:	9f 3f       	cpi	r25, 0xFF	; 255
   1eb4a:	30 f0       	brcs	.+12     	; 0x1eb58 <__ftoa_engine+0x38>
   1eb4c:	80 38       	cpi	r24, 0x80	; 128
   1eb4e:	71 05       	cpc	r23, r1
   1eb50:	61 05       	cpc	r22, r1
   1eb52:	09 f0       	breq	.+2      	; 0x1eb56 <__ftoa_engine+0x36>
   1eb54:	3c 5f       	subi	r19, 0xFC	; 252
   1eb56:	3c 5f       	subi	r19, 0xFC	; 252
   1eb58:	3d 93       	st	X+, r19
   1eb5a:	91 30       	cpi	r25, 0x01	; 1
   1eb5c:	08 f0       	brcs	.+2      	; 0x1eb60 <__ftoa_engine+0x40>
   1eb5e:	80 68       	ori	r24, 0x80	; 128
   1eb60:	91 1d       	adc	r25, r1
   1eb62:	df 93       	push	r29
   1eb64:	cf 93       	push	r28
   1eb66:	1f 93       	push	r17
   1eb68:	0f 93       	push	r16
   1eb6a:	ff 92       	push	r15
   1eb6c:	ef 92       	push	r14
   1eb6e:	19 2f       	mov	r17, r25
   1eb70:	98 7f       	andi	r25, 0xF8	; 248
   1eb72:	96 95       	lsr	r25
   1eb74:	e9 2f       	mov	r30, r25
   1eb76:	96 95       	lsr	r25
   1eb78:	96 95       	lsr	r25
   1eb7a:	e9 0f       	add	r30, r25
   1eb7c:	ff 27       	eor	r31, r31
   1eb7e:	e3 51       	subi	r30, 0x13	; 19
   1eb80:	fb 4f       	sbci	r31, 0xFB	; 251
   1eb82:	99 27       	eor	r25, r25
   1eb84:	33 27       	eor	r19, r19
   1eb86:	ee 24       	eor	r14, r14
   1eb88:	ff 24       	eor	r15, r15
   1eb8a:	a7 01       	movw	r20, r14
   1eb8c:	e7 01       	movw	r28, r14
   1eb8e:	05 90       	lpm	r0, Z+
   1eb90:	08 94       	sec
   1eb92:	07 94       	ror	r0
   1eb94:	28 f4       	brcc	.+10     	; 0x1eba0 <__ftoa_engine+0x80>
   1eb96:	36 0f       	add	r19, r22
   1eb98:	e7 1e       	adc	r14, r23
   1eb9a:	f8 1e       	adc	r15, r24
   1eb9c:	49 1f       	adc	r20, r25
   1eb9e:	51 1d       	adc	r21, r1
   1eba0:	66 0f       	add	r22, r22
   1eba2:	77 1f       	adc	r23, r23
   1eba4:	88 1f       	adc	r24, r24
   1eba6:	99 1f       	adc	r25, r25
   1eba8:	06 94       	lsr	r0
   1ebaa:	a1 f7       	brne	.-24     	; 0x1eb94 <__ftoa_engine+0x74>
   1ebac:	05 90       	lpm	r0, Z+
   1ebae:	07 94       	ror	r0
   1ebb0:	28 f4       	brcc	.+10     	; 0x1ebbc <__ftoa_engine+0x9c>
   1ebb2:	e7 0e       	add	r14, r23
   1ebb4:	f8 1e       	adc	r15, r24
   1ebb6:	49 1f       	adc	r20, r25
   1ebb8:	56 1f       	adc	r21, r22
   1ebba:	c1 1d       	adc	r28, r1
   1ebbc:	77 0f       	add	r23, r23
   1ebbe:	88 1f       	adc	r24, r24
   1ebc0:	99 1f       	adc	r25, r25
   1ebc2:	66 1f       	adc	r22, r22
   1ebc4:	06 94       	lsr	r0
   1ebc6:	a1 f7       	brne	.-24     	; 0x1ebb0 <__ftoa_engine+0x90>
   1ebc8:	05 90       	lpm	r0, Z+
   1ebca:	07 94       	ror	r0
   1ebcc:	28 f4       	brcc	.+10     	; 0x1ebd8 <__ftoa_engine+0xb8>
   1ebce:	f8 0e       	add	r15, r24
   1ebd0:	49 1f       	adc	r20, r25
   1ebd2:	56 1f       	adc	r21, r22
   1ebd4:	c7 1f       	adc	r28, r23
   1ebd6:	d1 1d       	adc	r29, r1
   1ebd8:	88 0f       	add	r24, r24
   1ebda:	99 1f       	adc	r25, r25
   1ebdc:	66 1f       	adc	r22, r22
   1ebde:	77 1f       	adc	r23, r23
   1ebe0:	06 94       	lsr	r0
   1ebe2:	a1 f7       	brne	.-24     	; 0x1ebcc <__ftoa_engine+0xac>
   1ebe4:	05 90       	lpm	r0, Z+
   1ebe6:	07 94       	ror	r0
   1ebe8:	20 f4       	brcc	.+8      	; 0x1ebf2 <__ftoa_engine+0xd2>
   1ebea:	49 0f       	add	r20, r25
   1ebec:	56 1f       	adc	r21, r22
   1ebee:	c7 1f       	adc	r28, r23
   1ebf0:	d8 1f       	adc	r29, r24
   1ebf2:	99 0f       	add	r25, r25
   1ebf4:	66 1f       	adc	r22, r22
   1ebf6:	77 1f       	adc	r23, r23
   1ebf8:	88 1f       	adc	r24, r24
   1ebfa:	06 94       	lsr	r0
   1ebfc:	a9 f7       	brne	.-22     	; 0x1ebe8 <__ftoa_engine+0xc8>
   1ebfe:	84 91       	lpm	r24, Z
   1ec00:	10 95       	com	r17
   1ec02:	17 70       	andi	r17, 0x07	; 7
   1ec04:	41 f0       	breq	.+16     	; 0x1ec16 <__ftoa_engine+0xf6>
   1ec06:	d6 95       	lsr	r29
   1ec08:	c7 95       	ror	r28
   1ec0a:	57 95       	ror	r21
   1ec0c:	47 95       	ror	r20
   1ec0e:	f7 94       	ror	r15
   1ec10:	e7 94       	ror	r14
   1ec12:	1a 95       	dec	r17
   1ec14:	c1 f7       	brne	.-16     	; 0x1ec06 <__ftoa_engine+0xe6>
   1ec16:	e3 e9       	ldi	r30, 0x93	; 147
   1ec18:	f4 e0       	ldi	r31, 0x04	; 4
   1ec1a:	68 94       	set
   1ec1c:	15 90       	lpm	r1, Z+
   1ec1e:	15 91       	lpm	r17, Z+
   1ec20:	35 91       	lpm	r19, Z+
   1ec22:	65 91       	lpm	r22, Z+
   1ec24:	95 91       	lpm	r25, Z+
   1ec26:	05 90       	lpm	r0, Z+
   1ec28:	7f e2       	ldi	r23, 0x2F	; 47
   1ec2a:	73 95       	inc	r23
   1ec2c:	e1 18       	sub	r14, r1
   1ec2e:	f1 0a       	sbc	r15, r17
   1ec30:	43 0b       	sbc	r20, r19
   1ec32:	56 0b       	sbc	r21, r22
   1ec34:	c9 0b       	sbc	r28, r25
   1ec36:	d0 09       	sbc	r29, r0
   1ec38:	c0 f7       	brcc	.-16     	; 0x1ec2a <__ftoa_engine+0x10a>
   1ec3a:	e1 0c       	add	r14, r1
   1ec3c:	f1 1e       	adc	r15, r17
   1ec3e:	43 1f       	adc	r20, r19
   1ec40:	56 1f       	adc	r21, r22
   1ec42:	c9 1f       	adc	r28, r25
   1ec44:	d0 1d       	adc	r29, r0
   1ec46:	7e f4       	brtc	.+30     	; 0x1ec66 <__ftoa_engine+0x146>
   1ec48:	70 33       	cpi	r23, 0x30	; 48
   1ec4a:	11 f4       	brne	.+4      	; 0x1ec50 <__ftoa_engine+0x130>
   1ec4c:	8a 95       	dec	r24
   1ec4e:	e6 cf       	rjmp	.-52     	; 0x1ec1c <__ftoa_engine+0xfc>
   1ec50:	e8 94       	clt
   1ec52:	01 50       	subi	r16, 0x01	; 1
   1ec54:	30 f0       	brcs	.+12     	; 0x1ec62 <__ftoa_engine+0x142>
   1ec56:	08 0f       	add	r16, r24
   1ec58:	0a f4       	brpl	.+2      	; 0x1ec5c <__ftoa_engine+0x13c>
   1ec5a:	00 27       	eor	r16, r16
   1ec5c:	02 17       	cp	r16, r18
   1ec5e:	08 f4       	brcc	.+2      	; 0x1ec62 <__ftoa_engine+0x142>
   1ec60:	20 2f       	mov	r18, r16
   1ec62:	23 95       	inc	r18
   1ec64:	02 2f       	mov	r16, r18
   1ec66:	7a 33       	cpi	r23, 0x3A	; 58
   1ec68:	28 f0       	brcs	.+10     	; 0x1ec74 <__ftoa_engine+0x154>
   1ec6a:	79 e3       	ldi	r23, 0x39	; 57
   1ec6c:	7d 93       	st	X+, r23
   1ec6e:	2a 95       	dec	r18
   1ec70:	e9 f7       	brne	.-6      	; 0x1ec6c <__ftoa_engine+0x14c>
   1ec72:	10 c0       	rjmp	.+32     	; 0x1ec94 <__ftoa_engine+0x174>
   1ec74:	7d 93       	st	X+, r23
   1ec76:	2a 95       	dec	r18
   1ec78:	89 f6       	brne	.-94     	; 0x1ec1c <__ftoa_engine+0xfc>
   1ec7a:	06 94       	lsr	r0
   1ec7c:	97 95       	ror	r25
   1ec7e:	67 95       	ror	r22
   1ec80:	37 95       	ror	r19
   1ec82:	17 95       	ror	r17
   1ec84:	17 94       	ror	r1
   1ec86:	e1 18       	sub	r14, r1
   1ec88:	f1 0a       	sbc	r15, r17
   1ec8a:	43 0b       	sbc	r20, r19
   1ec8c:	56 0b       	sbc	r21, r22
   1ec8e:	c9 0b       	sbc	r28, r25
   1ec90:	d0 09       	sbc	r29, r0
   1ec92:	98 f0       	brcs	.+38     	; 0x1ecba <__ftoa_engine+0x19a>
   1ec94:	23 95       	inc	r18
   1ec96:	7e 91       	ld	r23, -X
   1ec98:	73 95       	inc	r23
   1ec9a:	7a 33       	cpi	r23, 0x3A	; 58
   1ec9c:	08 f0       	brcs	.+2      	; 0x1eca0 <__ftoa_engine+0x180>
   1ec9e:	70 e3       	ldi	r23, 0x30	; 48
   1eca0:	7c 93       	st	X, r23
   1eca2:	20 13       	cpse	r18, r16
   1eca4:	b8 f7       	brcc	.-18     	; 0x1ec94 <__ftoa_engine+0x174>
   1eca6:	7e 91       	ld	r23, -X
   1eca8:	70 61       	ori	r23, 0x10	; 16
   1ecaa:	7d 93       	st	X+, r23
   1ecac:	30 f0       	brcs	.+12     	; 0x1ecba <__ftoa_engine+0x19a>
   1ecae:	83 95       	inc	r24
   1ecb0:	71 e3       	ldi	r23, 0x31	; 49
   1ecb2:	7d 93       	st	X+, r23
   1ecb4:	70 e3       	ldi	r23, 0x30	; 48
   1ecb6:	2a 95       	dec	r18
   1ecb8:	e1 f7       	brne	.-8      	; 0x1ecb2 <__ftoa_engine+0x192>
   1ecba:	11 24       	eor	r1, r1
   1ecbc:	ef 90       	pop	r14
   1ecbe:	ff 90       	pop	r15
   1ecc0:	0f 91       	pop	r16
   1ecc2:	1f 91       	pop	r17
   1ecc4:	cf 91       	pop	r28
   1ecc6:	df 91       	pop	r29
   1ecc8:	99 27       	eor	r25, r25
   1ecca:	87 fd       	sbrc	r24, 7
   1eccc:	90 95       	com	r25
   1ecce:	08 95       	ret

0001ecd0 <__ctype_isfalse>:
__ctype_isfalse():
   1ecd0:	99 27       	eor	r25, r25
   1ecd2:	88 27       	eor	r24, r24

0001ecd4 <__ctype_istrue>:
__ctype_istrue():
   1ecd4:	08 95       	ret

0001ecd6 <strncasecmp_P>:
strncasecmp_P():
   1ecd6:	fb 01       	movw	r30, r22
   1ecd8:	dc 01       	movw	r26, r24
   1ecda:	41 50       	subi	r20, 0x01	; 1
   1ecdc:	50 40       	sbci	r21, 0x00	; 0
   1ecde:	88 f0       	brcs	.+34     	; 0x1ed02 <strncasecmp_P+0x2c>
   1ece0:	8d 91       	ld	r24, X+
   1ece2:	81 34       	cpi	r24, 0x41	; 65
   1ece4:	1c f0       	brlt	.+6      	; 0x1ecec <strncasecmp_P+0x16>
   1ece6:	8b 35       	cpi	r24, 0x5B	; 91
   1ece8:	0c f4       	brge	.+2      	; 0x1ecec <strncasecmp_P+0x16>
   1ecea:	80 5e       	subi	r24, 0xE0	; 224
   1ecec:	65 91       	lpm	r22, Z+
   1ecee:	61 34       	cpi	r22, 0x41	; 65
   1ecf0:	1c f0       	brlt	.+6      	; 0x1ecf8 <strncasecmp_P+0x22>
   1ecf2:	6b 35       	cpi	r22, 0x5B	; 91
   1ecf4:	0c f4       	brge	.+2      	; 0x1ecf8 <strncasecmp_P+0x22>
   1ecf6:	60 5e       	subi	r22, 0xE0	; 224
   1ecf8:	86 1b       	sub	r24, r22
   1ecfa:	61 11       	cpse	r22, r1
   1ecfc:	71 f3       	breq	.-36     	; 0x1ecda <strncasecmp_P+0x4>
   1ecfe:	99 0b       	sbc	r25, r25
   1ed00:	08 95       	ret
   1ed02:	88 1b       	sub	r24, r24
   1ed04:	fc cf       	rjmp	.-8      	; 0x1ecfe <strncasecmp_P+0x28>

0001ed06 <strnlen_P>:
strnlen_P():
   1ed06:	fc 01       	movw	r30, r24
   1ed08:	05 90       	lpm	r0, Z+
   1ed0a:	61 50       	subi	r22, 0x01	; 1
   1ed0c:	70 40       	sbci	r23, 0x00	; 0
   1ed0e:	01 10       	cpse	r0, r1
   1ed10:	d8 f7       	brcc	.-10     	; 0x1ed08 <strnlen_P+0x2>
   1ed12:	80 95       	com	r24
   1ed14:	90 95       	com	r25
   1ed16:	8e 0f       	add	r24, r30
   1ed18:	9f 1f       	adc	r25, r31
   1ed1a:	08 95       	ret

0001ed1c <memset>:
memset():
   1ed1c:	dc 01       	movw	r26, r24
   1ed1e:	01 c0       	rjmp	.+2      	; 0x1ed22 <memset+0x6>
   1ed20:	6d 93       	st	X+, r22
   1ed22:	41 50       	subi	r20, 0x01	; 1
   1ed24:	50 40       	sbci	r21, 0x00	; 0
   1ed26:	e0 f7       	brcc	.-8      	; 0x1ed20 <memset+0x4>
   1ed28:	08 95       	ret

0001ed2a <strnlen>:
strnlen():
   1ed2a:	fc 01       	movw	r30, r24
   1ed2c:	61 50       	subi	r22, 0x01	; 1
   1ed2e:	70 40       	sbci	r23, 0x00	; 0
   1ed30:	01 90       	ld	r0, Z+
   1ed32:	01 10       	cpse	r0, r1
   1ed34:	d8 f7       	brcc	.-10     	; 0x1ed2c <strnlen+0x2>
   1ed36:	80 95       	com	r24
   1ed38:	90 95       	com	r25
   1ed3a:	8e 0f       	add	r24, r30
   1ed3c:	9f 1f       	adc	r25, r31
   1ed3e:	08 95       	ret

0001ed40 <strrev>:
strrev():
   1ed40:	dc 01       	movw	r26, r24
   1ed42:	fc 01       	movw	r30, r24
   1ed44:	67 2f       	mov	r22, r23
   1ed46:	71 91       	ld	r23, Z+
   1ed48:	77 23       	and	r23, r23
   1ed4a:	e1 f7       	brne	.-8      	; 0x1ed44 <strrev+0x4>
   1ed4c:	32 97       	sbiw	r30, 0x02	; 2
   1ed4e:	04 c0       	rjmp	.+8      	; 0x1ed58 <strrev+0x18>
   1ed50:	7c 91       	ld	r23, X
   1ed52:	6d 93       	st	X+, r22
   1ed54:	70 83       	st	Z, r23
   1ed56:	62 91       	ld	r22, -Z
   1ed58:	ae 17       	cp	r26, r30
   1ed5a:	bf 07       	cpc	r27, r31
   1ed5c:	c8 f3       	brcs	.-14     	; 0x1ed50 <strrev+0x10>
   1ed5e:	08 95       	ret

0001ed60 <fputc>:
fputc():
   1ed60:	0f 93       	push	r16
   1ed62:	1f 93       	push	r17
   1ed64:	cf 93       	push	r28
   1ed66:	df 93       	push	r29
   1ed68:	18 2f       	mov	r17, r24
   1ed6a:	09 2f       	mov	r16, r25
   1ed6c:	eb 01       	movw	r28, r22
   1ed6e:	8b 81       	ldd	r24, Y+3	; 0x03
   1ed70:	81 fd       	sbrc	r24, 1
   1ed72:	09 c0       	rjmp	.+18     	; 0x1ed86 <fputc+0x26>
   1ed74:	1f ef       	ldi	r17, 0xFF	; 255
   1ed76:	0f ef       	ldi	r16, 0xFF	; 255
   1ed78:	81 2f       	mov	r24, r17
   1ed7a:	90 2f       	mov	r25, r16
   1ed7c:	df 91       	pop	r29
   1ed7e:	cf 91       	pop	r28
   1ed80:	1f 91       	pop	r17
   1ed82:	0f 91       	pop	r16
   1ed84:	08 95       	ret
   1ed86:	82 ff       	sbrs	r24, 2
   1ed88:	14 c0       	rjmp	.+40     	; 0x1edb2 <fputc+0x52>
   1ed8a:	2e 81       	ldd	r18, Y+6	; 0x06
   1ed8c:	3f 81       	ldd	r19, Y+7	; 0x07
   1ed8e:	8c 81       	ldd	r24, Y+4	; 0x04
   1ed90:	9d 81       	ldd	r25, Y+5	; 0x05
   1ed92:	28 17       	cp	r18, r24
   1ed94:	39 07       	cpc	r19, r25
   1ed96:	3c f4       	brge	.+14     	; 0x1eda6 <fputc+0x46>
   1ed98:	e8 81       	ld	r30, Y
   1ed9a:	f9 81       	ldd	r31, Y+1	; 0x01
   1ed9c:	cf 01       	movw	r24, r30
   1ed9e:	01 96       	adiw	r24, 0x01	; 1
   1eda0:	99 83       	std	Y+1, r25	; 0x01
   1eda2:	88 83       	st	Y, r24
   1eda4:	10 83       	st	Z, r17
   1eda6:	8e 81       	ldd	r24, Y+6	; 0x06
   1eda8:	9f 81       	ldd	r25, Y+7	; 0x07
   1edaa:	01 96       	adiw	r24, 0x01	; 1
   1edac:	9f 83       	std	Y+7, r25	; 0x07
   1edae:	8e 83       	std	Y+6, r24	; 0x06
   1edb0:	e3 cf       	rjmp	.-58     	; 0x1ed78 <fputc+0x18>
   1edb2:	e8 85       	ldd	r30, Y+8	; 0x08
   1edb4:	f9 85       	ldd	r31, Y+9	; 0x09
   1edb6:	81 2f       	mov	r24, r17
   1edb8:	19 95       	eicall
   1edba:	89 2b       	or	r24, r25
   1edbc:	a1 f3       	breq	.-24     	; 0x1eda6 <fputc+0x46>
   1edbe:	da cf       	rjmp	.-76     	; 0x1ed74 <fputc+0x14>

0001edc0 <__ultoa_invert>:
__ultoa_invert():
   1edc0:	fa 01       	movw	r30, r20
   1edc2:	aa 27       	eor	r26, r26
   1edc4:	28 30       	cpi	r18, 0x08	; 8
   1edc6:	51 f1       	breq	.+84     	; 0x1ee1c <__ultoa_invert+0x5c>
   1edc8:	20 31       	cpi	r18, 0x10	; 16
   1edca:	81 f1       	breq	.+96     	; 0x1ee2c <__ultoa_invert+0x6c>
   1edcc:	e8 94       	clt
   1edce:	6f 93       	push	r22
   1edd0:	6e 7f       	andi	r22, 0xFE	; 254
   1edd2:	6e 5f       	subi	r22, 0xFE	; 254
   1edd4:	7f 4f       	sbci	r23, 0xFF	; 255
   1edd6:	8f 4f       	sbci	r24, 0xFF	; 255
   1edd8:	9f 4f       	sbci	r25, 0xFF	; 255
   1edda:	af 4f       	sbci	r26, 0xFF	; 255
   1eddc:	b1 e0       	ldi	r27, 0x01	; 1
   1edde:	3e d0       	rcall	.+124    	; 0x1ee5c <__ultoa_invert+0x9c>
   1ede0:	b4 e0       	ldi	r27, 0x04	; 4
   1ede2:	3c d0       	rcall	.+120    	; 0x1ee5c <__ultoa_invert+0x9c>
   1ede4:	67 0f       	add	r22, r23
   1ede6:	78 1f       	adc	r23, r24
   1ede8:	89 1f       	adc	r24, r25
   1edea:	9a 1f       	adc	r25, r26
   1edec:	a1 1d       	adc	r26, r1
   1edee:	68 0f       	add	r22, r24
   1edf0:	79 1f       	adc	r23, r25
   1edf2:	8a 1f       	adc	r24, r26
   1edf4:	91 1d       	adc	r25, r1
   1edf6:	a1 1d       	adc	r26, r1
   1edf8:	6a 0f       	add	r22, r26
   1edfa:	71 1d       	adc	r23, r1
   1edfc:	81 1d       	adc	r24, r1
   1edfe:	91 1d       	adc	r25, r1
   1ee00:	a1 1d       	adc	r26, r1
   1ee02:	20 d0       	rcall	.+64     	; 0x1ee44 <__ultoa_invert+0x84>
   1ee04:	09 f4       	brne	.+2      	; 0x1ee08 <__ultoa_invert+0x48>
   1ee06:	68 94       	set
   1ee08:	3f 91       	pop	r19
   1ee0a:	2a e0       	ldi	r18, 0x0A	; 10
   1ee0c:	26 9f       	mul	r18, r22
   1ee0e:	11 24       	eor	r1, r1
   1ee10:	30 19       	sub	r19, r0
   1ee12:	30 5d       	subi	r19, 0xD0	; 208
   1ee14:	31 93       	st	Z+, r19
   1ee16:	de f6       	brtc	.-74     	; 0x1edce <__ultoa_invert+0xe>
   1ee18:	cf 01       	movw	r24, r30
   1ee1a:	08 95       	ret
   1ee1c:	46 2f       	mov	r20, r22
   1ee1e:	47 70       	andi	r20, 0x07	; 7
   1ee20:	40 5d       	subi	r20, 0xD0	; 208
   1ee22:	41 93       	st	Z+, r20
   1ee24:	b3 e0       	ldi	r27, 0x03	; 3
   1ee26:	0f d0       	rcall	.+30     	; 0x1ee46 <__ultoa_invert+0x86>
   1ee28:	c9 f7       	brne	.-14     	; 0x1ee1c <__ultoa_invert+0x5c>
   1ee2a:	f6 cf       	rjmp	.-20     	; 0x1ee18 <__ultoa_invert+0x58>
   1ee2c:	46 2f       	mov	r20, r22
   1ee2e:	4f 70       	andi	r20, 0x0F	; 15
   1ee30:	40 5d       	subi	r20, 0xD0	; 208
   1ee32:	4a 33       	cpi	r20, 0x3A	; 58
   1ee34:	18 f0       	brcs	.+6      	; 0x1ee3c <__ultoa_invert+0x7c>
   1ee36:	49 5d       	subi	r20, 0xD9	; 217
   1ee38:	31 fd       	sbrc	r19, 1
   1ee3a:	40 52       	subi	r20, 0x20	; 32
   1ee3c:	41 93       	st	Z+, r20
   1ee3e:	02 d0       	rcall	.+4      	; 0x1ee44 <__ultoa_invert+0x84>
   1ee40:	a9 f7       	brne	.-22     	; 0x1ee2c <__ultoa_invert+0x6c>
   1ee42:	ea cf       	rjmp	.-44     	; 0x1ee18 <__ultoa_invert+0x58>
   1ee44:	b4 e0       	ldi	r27, 0x04	; 4
   1ee46:	a6 95       	lsr	r26
   1ee48:	97 95       	ror	r25
   1ee4a:	87 95       	ror	r24
   1ee4c:	77 95       	ror	r23
   1ee4e:	67 95       	ror	r22
   1ee50:	ba 95       	dec	r27
   1ee52:	c9 f7       	brne	.-14     	; 0x1ee46 <__ultoa_invert+0x86>
   1ee54:	00 97       	sbiw	r24, 0x00	; 0
   1ee56:	61 05       	cpc	r22, r1
   1ee58:	71 05       	cpc	r23, r1
   1ee5a:	08 95       	ret
   1ee5c:	9b 01       	movw	r18, r22
   1ee5e:	ac 01       	movw	r20, r24
   1ee60:	0a 2e       	mov	r0, r26
   1ee62:	06 94       	lsr	r0
   1ee64:	57 95       	ror	r21
   1ee66:	47 95       	ror	r20
   1ee68:	37 95       	ror	r19
   1ee6a:	27 95       	ror	r18
   1ee6c:	ba 95       	dec	r27
   1ee6e:	c9 f7       	brne	.-14     	; 0x1ee62 <__ultoa_invert+0xa2>
   1ee70:	62 0f       	add	r22, r18
   1ee72:	73 1f       	adc	r23, r19
   1ee74:	84 1f       	adc	r24, r20
   1ee76:	95 1f       	adc	r25, r21
   1ee78:	a0 1d       	adc	r26, r0
   1ee7a:	08 95       	ret

0001ee7c <__cmpsf2>:
__cmpsf2():
   1ee7c:	0e 94 80 f7 	call	0x1ef00	; 0x1ef00 <__fp_cmp>
   1ee80:	08 f4       	brcc	.+2      	; 0x1ee84 <__cmpsf2+0x8>
   1ee82:	81 e0       	ldi	r24, 0x01	; 1
   1ee84:	08 95       	ret

0001ee86 <__floatunsisf>:
__floatunsisf():
   1ee86:	e8 94       	clt
   1ee88:	09 c0       	rjmp	.+18     	; 0x1ee9c <__floatsisf+0x12>

0001ee8a <__floatsisf>:
   1ee8a:	97 fb       	bst	r25, 7
   1ee8c:	3e f4       	brtc	.+14     	; 0x1ee9c <__floatsisf+0x12>
   1ee8e:	90 95       	com	r25
   1ee90:	80 95       	com	r24
   1ee92:	70 95       	com	r23
   1ee94:	61 95       	neg	r22
   1ee96:	7f 4f       	sbci	r23, 0xFF	; 255
   1ee98:	8f 4f       	sbci	r24, 0xFF	; 255
   1ee9a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ee9c:	99 23       	and	r25, r25
   1ee9e:	a9 f0       	breq	.+42     	; 0x1eeca <__floatsisf+0x40>
   1eea0:	f9 2f       	mov	r31, r25
   1eea2:	96 e9       	ldi	r25, 0x96	; 150
   1eea4:	bb 27       	eor	r27, r27
   1eea6:	93 95       	inc	r25
   1eea8:	f6 95       	lsr	r31
   1eeaa:	87 95       	ror	r24
   1eeac:	77 95       	ror	r23
   1eeae:	67 95       	ror	r22
   1eeb0:	b7 95       	ror	r27
   1eeb2:	f1 11       	cpse	r31, r1
   1eeb4:	f8 cf       	rjmp	.-16     	; 0x1eea6 <__floatsisf+0x1c>
   1eeb6:	fa f4       	brpl	.+62     	; 0x1eef6 <__floatsisf+0x6c>
   1eeb8:	bb 0f       	add	r27, r27
   1eeba:	11 f4       	brne	.+4      	; 0x1eec0 <__floatsisf+0x36>
   1eebc:	60 ff       	sbrs	r22, 0
   1eebe:	1b c0       	rjmp	.+54     	; 0x1eef6 <__floatsisf+0x6c>
   1eec0:	6f 5f       	subi	r22, 0xFF	; 255
   1eec2:	7f 4f       	sbci	r23, 0xFF	; 255
   1eec4:	8f 4f       	sbci	r24, 0xFF	; 255
   1eec6:	9f 4f       	sbci	r25, 0xFF	; 255
   1eec8:	16 c0       	rjmp	.+44     	; 0x1eef6 <__floatsisf+0x6c>
   1eeca:	88 23       	and	r24, r24
   1eecc:	11 f0       	breq	.+4      	; 0x1eed2 <__floatsisf+0x48>
   1eece:	96 e9       	ldi	r25, 0x96	; 150
   1eed0:	11 c0       	rjmp	.+34     	; 0x1eef4 <__floatsisf+0x6a>
   1eed2:	77 23       	and	r23, r23
   1eed4:	21 f0       	breq	.+8      	; 0x1eede <__floatsisf+0x54>
   1eed6:	9e e8       	ldi	r25, 0x8E	; 142
   1eed8:	87 2f       	mov	r24, r23
   1eeda:	76 2f       	mov	r23, r22
   1eedc:	05 c0       	rjmp	.+10     	; 0x1eee8 <__floatsisf+0x5e>
   1eede:	66 23       	and	r22, r22
   1eee0:	71 f0       	breq	.+28     	; 0x1eefe <__floatsisf+0x74>
   1eee2:	96 e8       	ldi	r25, 0x86	; 134
   1eee4:	86 2f       	mov	r24, r22
   1eee6:	70 e0       	ldi	r23, 0x00	; 0
   1eee8:	60 e0       	ldi	r22, 0x00	; 0
   1eeea:	2a f0       	brmi	.+10     	; 0x1eef6 <__floatsisf+0x6c>
   1eeec:	9a 95       	dec	r25
   1eeee:	66 0f       	add	r22, r22
   1eef0:	77 1f       	adc	r23, r23
   1eef2:	88 1f       	adc	r24, r24
   1eef4:	da f7       	brpl	.-10     	; 0x1eeec <__floatsisf+0x62>
   1eef6:	88 0f       	add	r24, r24
   1eef8:	96 95       	lsr	r25
   1eefa:	87 95       	ror	r24
   1eefc:	97 f9       	bld	r25, 7
   1eefe:	08 95       	ret

0001ef00 <__fp_cmp>:
__fp_cmp():
   1ef00:	99 0f       	add	r25, r25
   1ef02:	00 08       	sbc	r0, r0
   1ef04:	55 0f       	add	r21, r21
   1ef06:	aa 0b       	sbc	r26, r26
   1ef08:	e0 e8       	ldi	r30, 0x80	; 128
   1ef0a:	fe ef       	ldi	r31, 0xFE	; 254
   1ef0c:	16 16       	cp	r1, r22
   1ef0e:	17 06       	cpc	r1, r23
   1ef10:	e8 07       	cpc	r30, r24
   1ef12:	f9 07       	cpc	r31, r25
   1ef14:	c0 f0       	brcs	.+48     	; 0x1ef46 <__fp_cmp+0x46>
   1ef16:	12 16       	cp	r1, r18
   1ef18:	13 06       	cpc	r1, r19
   1ef1a:	e4 07       	cpc	r30, r20
   1ef1c:	f5 07       	cpc	r31, r21
   1ef1e:	98 f0       	brcs	.+38     	; 0x1ef46 <__fp_cmp+0x46>
   1ef20:	62 1b       	sub	r22, r18
   1ef22:	73 0b       	sbc	r23, r19
   1ef24:	84 0b       	sbc	r24, r20
   1ef26:	95 0b       	sbc	r25, r21
   1ef28:	39 f4       	brne	.+14     	; 0x1ef38 <__fp_cmp+0x38>
   1ef2a:	0a 26       	eor	r0, r26
   1ef2c:	61 f0       	breq	.+24     	; 0x1ef46 <__fp_cmp+0x46>
   1ef2e:	23 2b       	or	r18, r19
   1ef30:	24 2b       	or	r18, r20
   1ef32:	25 2b       	or	r18, r21
   1ef34:	21 f4       	brne	.+8      	; 0x1ef3e <__fp_cmp+0x3e>
   1ef36:	08 95       	ret
   1ef38:	0a 26       	eor	r0, r26
   1ef3a:	09 f4       	brne	.+2      	; 0x1ef3e <__fp_cmp+0x3e>
   1ef3c:	a1 40       	sbci	r26, 0x01	; 1
   1ef3e:	a6 95       	lsr	r26
   1ef40:	8f ef       	ldi	r24, 0xFF	; 255
   1ef42:	81 1d       	adc	r24, r1
   1ef44:	81 1d       	adc	r24, r1
   1ef46:	08 95       	ret

0001ef48 <__mulsf3>:
__mulsf3():
   1ef48:	0e 94 b7 f7 	call	0x1ef6e	; 0x1ef6e <__mulsf3x>
   1ef4c:	0c 94 28 f8 	jmp	0x1f050	; 0x1f050 <__fp_round>
   1ef50:	0e 94 1a f8 	call	0x1f034	; 0x1f034 <__fp_pscA>
   1ef54:	38 f0       	brcs	.+14     	; 0x1ef64 <__mulsf3+0x1c>
   1ef56:	0e 94 21 f8 	call	0x1f042	; 0x1f042 <__fp_pscB>
   1ef5a:	20 f0       	brcs	.+8      	; 0x1ef64 <__mulsf3+0x1c>
   1ef5c:	95 23       	and	r25, r21
   1ef5e:	11 f0       	breq	.+4      	; 0x1ef64 <__mulsf3+0x1c>
   1ef60:	0c 94 11 f8 	jmp	0x1f022	; 0x1f022 <__fp_inf>
   1ef64:	0c 94 17 f8 	jmp	0x1f02e	; 0x1f02e <__fp_nan>
   1ef68:	11 24       	eor	r1, r1
   1ef6a:	0c 94 5c f8 	jmp	0x1f0b8	; 0x1f0b8 <__fp_szero>

0001ef6e <__mulsf3x>:
__mulsf3x():
   1ef6e:	0e 94 39 f8 	call	0x1f072	; 0x1f072 <__fp_split3>
   1ef72:	70 f3       	brcs	.-36     	; 0x1ef50 <__mulsf3+0x8>

0001ef74 <__mulsf3_pse>:
   1ef74:	95 9f       	mul	r25, r21
   1ef76:	c1 f3       	breq	.-16     	; 0x1ef68 <__mulsf3+0x20>
   1ef78:	95 0f       	add	r25, r21
   1ef7a:	50 e0       	ldi	r21, 0x00	; 0
   1ef7c:	55 1f       	adc	r21, r21
   1ef7e:	62 9f       	mul	r22, r18
   1ef80:	f0 01       	movw	r30, r0
   1ef82:	72 9f       	mul	r23, r18
   1ef84:	bb 27       	eor	r27, r27
   1ef86:	f0 0d       	add	r31, r0
   1ef88:	b1 1d       	adc	r27, r1
   1ef8a:	63 9f       	mul	r22, r19
   1ef8c:	aa 27       	eor	r26, r26
   1ef8e:	f0 0d       	add	r31, r0
   1ef90:	b1 1d       	adc	r27, r1
   1ef92:	aa 1f       	adc	r26, r26
   1ef94:	64 9f       	mul	r22, r20
   1ef96:	66 27       	eor	r22, r22
   1ef98:	b0 0d       	add	r27, r0
   1ef9a:	a1 1d       	adc	r26, r1
   1ef9c:	66 1f       	adc	r22, r22
   1ef9e:	82 9f       	mul	r24, r18
   1efa0:	22 27       	eor	r18, r18
   1efa2:	b0 0d       	add	r27, r0
   1efa4:	a1 1d       	adc	r26, r1
   1efa6:	62 1f       	adc	r22, r18
   1efa8:	73 9f       	mul	r23, r19
   1efaa:	b0 0d       	add	r27, r0
   1efac:	a1 1d       	adc	r26, r1
   1efae:	62 1f       	adc	r22, r18
   1efb0:	83 9f       	mul	r24, r19
   1efb2:	a0 0d       	add	r26, r0
   1efb4:	61 1d       	adc	r22, r1
   1efb6:	22 1f       	adc	r18, r18
   1efb8:	74 9f       	mul	r23, r20
   1efba:	33 27       	eor	r19, r19
   1efbc:	a0 0d       	add	r26, r0
   1efbe:	61 1d       	adc	r22, r1
   1efc0:	23 1f       	adc	r18, r19
   1efc2:	84 9f       	mul	r24, r20
   1efc4:	60 0d       	add	r22, r0
   1efc6:	21 1d       	adc	r18, r1
   1efc8:	82 2f       	mov	r24, r18
   1efca:	76 2f       	mov	r23, r22
   1efcc:	6a 2f       	mov	r22, r26
   1efce:	11 24       	eor	r1, r1
   1efd0:	9f 57       	subi	r25, 0x7F	; 127
   1efd2:	50 40       	sbci	r21, 0x00	; 0
   1efd4:	9a f0       	brmi	.+38     	; 0x1effc <__mulsf3_pse+0x88>
   1efd6:	f1 f0       	breq	.+60     	; 0x1f014 <__mulsf3_pse+0xa0>
   1efd8:	88 23       	and	r24, r24
   1efda:	4a f0       	brmi	.+18     	; 0x1efee <__mulsf3_pse+0x7a>
   1efdc:	ee 0f       	add	r30, r30
   1efde:	ff 1f       	adc	r31, r31
   1efe0:	bb 1f       	adc	r27, r27
   1efe2:	66 1f       	adc	r22, r22
   1efe4:	77 1f       	adc	r23, r23
   1efe6:	88 1f       	adc	r24, r24
   1efe8:	91 50       	subi	r25, 0x01	; 1
   1efea:	50 40       	sbci	r21, 0x00	; 0
   1efec:	a9 f7       	brne	.-22     	; 0x1efd8 <__mulsf3_pse+0x64>
   1efee:	9e 3f       	cpi	r25, 0xFE	; 254
   1eff0:	51 05       	cpc	r21, r1
   1eff2:	80 f0       	brcs	.+32     	; 0x1f014 <__mulsf3_pse+0xa0>
   1eff4:	0c 94 11 f8 	jmp	0x1f022	; 0x1f022 <__fp_inf>
   1eff8:	0c 94 5c f8 	jmp	0x1f0b8	; 0x1f0b8 <__fp_szero>
   1effc:	5f 3f       	cpi	r21, 0xFF	; 255
   1effe:	e4 f3       	brlt	.-8      	; 0x1eff8 <__mulsf3_pse+0x84>
   1f000:	98 3e       	cpi	r25, 0xE8	; 232
   1f002:	d4 f3       	brlt	.-12     	; 0x1eff8 <__mulsf3_pse+0x84>
   1f004:	86 95       	lsr	r24
   1f006:	77 95       	ror	r23
   1f008:	67 95       	ror	r22
   1f00a:	b7 95       	ror	r27
   1f00c:	f7 95       	ror	r31
   1f00e:	e7 95       	ror	r30
   1f010:	9f 5f       	subi	r25, 0xFF	; 255
   1f012:	c1 f7       	brne	.-16     	; 0x1f004 <__mulsf3_pse+0x90>
   1f014:	fe 2b       	or	r31, r30
   1f016:	88 0f       	add	r24, r24
   1f018:	91 1d       	adc	r25, r1
   1f01a:	96 95       	lsr	r25
   1f01c:	87 95       	ror	r24
   1f01e:	97 f9       	bld	r25, 7
   1f020:	08 95       	ret

0001f022 <__fp_inf>:
   1f022:	97 f9       	bld	r25, 7
   1f024:	9f 67       	ori	r25, 0x7F	; 127
   1f026:	80 e8       	ldi	r24, 0x80	; 128
   1f028:	70 e0       	ldi	r23, 0x00	; 0
   1f02a:	60 e0       	ldi	r22, 0x00	; 0
   1f02c:	08 95       	ret

0001f02e <__fp_nan>:
   1f02e:	9f ef       	ldi	r25, 0xFF	; 255
   1f030:	80 ec       	ldi	r24, 0xC0	; 192
   1f032:	08 95       	ret

0001f034 <__fp_pscA>:
   1f034:	00 24       	eor	r0, r0
   1f036:	0a 94       	dec	r0
   1f038:	16 16       	cp	r1, r22
   1f03a:	17 06       	cpc	r1, r23
   1f03c:	18 06       	cpc	r1, r24
   1f03e:	09 06       	cpc	r0, r25
__fp_pscA():
   1f040:	08 95       	ret

0001f042 <__fp_pscB>:
__fp_pscB():
   1f042:	00 24       	eor	r0, r0
   1f044:	0a 94       	dec	r0
   1f046:	12 16       	cp	r1, r18
   1f048:	13 06       	cpc	r1, r19
   1f04a:	14 06       	cpc	r1, r20
   1f04c:	05 06       	cpc	r0, r21
   1f04e:	08 95       	ret

0001f050 <__fp_round>:
__fp_round():
   1f050:	09 2e       	mov	r0, r25
   1f052:	03 94       	inc	r0
   1f054:	00 0c       	add	r0, r0
   1f056:	11 f4       	brne	.+4      	; 0x1f05c <__fp_round+0xc>
   1f058:	88 23       	and	r24, r24
   1f05a:	52 f0       	brmi	.+20     	; 0x1f070 <__fp_round+0x20>
   1f05c:	bb 0f       	add	r27, r27
   1f05e:	40 f4       	brcc	.+16     	; 0x1f070 <__fp_round+0x20>
   1f060:	bf 2b       	or	r27, r31
   1f062:	11 f4       	brne	.+4      	; 0x1f068 <__fp_round+0x18>
   1f064:	60 ff       	sbrs	r22, 0
   1f066:	04 c0       	rjmp	.+8      	; 0x1f070 <__fp_round+0x20>
   1f068:	6f 5f       	subi	r22, 0xFF	; 255
   1f06a:	7f 4f       	sbci	r23, 0xFF	; 255
   1f06c:	8f 4f       	sbci	r24, 0xFF	; 255
   1f06e:	9f 4f       	sbci	r25, 0xFF	; 255
   1f070:	08 95       	ret

0001f072 <__fp_split3>:
__fp_split3():
   1f072:	57 fd       	sbrc	r21, 7
   1f074:	90 58       	subi	r25, 0x80	; 128
   1f076:	44 0f       	add	r20, r20
   1f078:	55 1f       	adc	r21, r21
   1f07a:	59 f0       	breq	.+22     	; 0x1f092 <__fp_splitA+0x10>
   1f07c:	5f 3f       	cpi	r21, 0xFF	; 255
   1f07e:	71 f0       	breq	.+28     	; 0x1f09c <__fp_splitA+0x1a>
   1f080:	47 95       	ror	r20

0001f082 <__fp_splitA>:
   1f082:	88 0f       	add	r24, r24
   1f084:	97 fb       	bst	r25, 7
   1f086:	99 1f       	adc	r25, r25
   1f088:	61 f0       	breq	.+24     	; 0x1f0a2 <__fp_splitA+0x20>
   1f08a:	9f 3f       	cpi	r25, 0xFF	; 255
   1f08c:	79 f0       	breq	.+30     	; 0x1f0ac <__fp_splitA+0x2a>
   1f08e:	87 95       	ror	r24
   1f090:	08 95       	ret
   1f092:	12 16       	cp	r1, r18
   1f094:	13 06       	cpc	r1, r19
   1f096:	14 06       	cpc	r1, r20
   1f098:	55 1f       	adc	r21, r21
   1f09a:	f2 cf       	rjmp	.-28     	; 0x1f080 <__fp_split3+0xe>
   1f09c:	46 95       	lsr	r20
   1f09e:	f1 df       	rcall	.-30     	; 0x1f082 <__fp_splitA>
   1f0a0:	08 c0       	rjmp	.+16     	; 0x1f0b2 <__fp_splitA+0x30>
   1f0a2:	16 16       	cp	r1, r22
   1f0a4:	17 06       	cpc	r1, r23
   1f0a6:	18 06       	cpc	r1, r24
   1f0a8:	99 1f       	adc	r25, r25
   1f0aa:	f1 cf       	rjmp	.-30     	; 0x1f08e <__fp_splitA+0xc>
   1f0ac:	86 95       	lsr	r24
   1f0ae:	71 05       	cpc	r23, r1
   1f0b0:	61 05       	cpc	r22, r1
   1f0b2:	08 94       	sec
   1f0b4:	08 95       	ret

0001f0b6 <__fp_zero>:
__fp_zero():
   1f0b6:	e8 94       	clt

0001f0b8 <__fp_szero>:
   1f0b8:	bb 27       	eor	r27, r27
   1f0ba:	66 27       	eor	r22, r22
   1f0bc:	77 27       	eor	r23, r23
   1f0be:	cb 01       	movw	r24, r22
   1f0c0:	97 f9       	bld	r25, 7
   1f0c2:	08 95       	ret

0001f0c4 <eeprom_read_byte>:
eeprom_read_byte():
   1f0c4:	f9 99       	sbic	0x1f, 1	; 31
   1f0c6:	fe cf       	rjmp	.-4      	; 0x1f0c4 <eeprom_read_byte>
   1f0c8:	92 bd       	out	0x22, r25	; 34
   1f0ca:	81 bd       	out	0x21, r24	; 33
   1f0cc:	f8 9a       	sbi	0x1f, 0	; 31
   1f0ce:	99 27       	eor	r25, r25
   1f0d0:	80 b5       	in	r24, 0x20	; 32
   1f0d2:	08 95       	ret

0001f0d4 <eeprom_write_byte>:
eeprom_write_byte():
   1f0d4:	26 2f       	mov	r18, r22

0001f0d6 <eeprom_write_r18>:
   1f0d6:	f9 99       	sbic	0x1f, 1	; 31
   1f0d8:	fe cf       	rjmp	.-4      	; 0x1f0d6 <eeprom_write_r18>
   1f0da:	1f ba       	out	0x1f, r1	; 31
   1f0dc:	92 bd       	out	0x22, r25	; 34
   1f0de:	81 bd       	out	0x21, r24	; 33
   1f0e0:	20 bd       	out	0x20, r18	; 32
   1f0e2:	0f b6       	in	r0, 0x3f	; 63
   1f0e4:	f8 94       	cli
   1f0e6:	fa 9a       	sbi	0x1f, 2	; 31
   1f0e8:	f9 9a       	sbi	0x1f, 1	; 31
   1f0ea:	0f be       	out	0x3f, r0	; 63
   1f0ec:	01 96       	adiw	r24, 0x01	; 1
   1f0ee:	08 95       	ret

0001f0f0 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1f0f0:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   1f0f2:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   1f0f4:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   1f0f6:	0e 94 f1 f8 	call	0x1f1e2	; 0x1f1e2 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   1f0fa:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1f0fc:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1f0fe:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1f100:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   1f102:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   1f104:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   1f106:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   1f108:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   1f10a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   1f10c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   1f10e:	08 95       	ret

0001f110 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   1f110:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   1f112:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   1f114:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   1f116:	07 c0       	rjmp	.+14     	; 0x1f126 <__udivmodhi4_ep>

0001f118 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   1f118:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   1f11a:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   1f11c:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   1f11e:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   1f120:	10 f0       	brcs	.+4      	; 0x1f126 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   1f122:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   1f124:	b7 0b       	sbc	r27, r23

0001f126 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   1f126:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   1f128:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   1f12a:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   1f12c:	a9 f7       	brne	.-22     	; 0x1f118 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   1f12e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   1f130:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   1f132:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   1f134:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   1f136:	08 95       	ret

0001f138 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   1f138:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   1f13a:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   1f13c:	16 f4       	brtc	.+4      	; 0x1f142 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   1f13e:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   1f140:	07 d0       	rcall	.+14     	; 0x1f150 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   1f142:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   1f144:	09 d0       	rcall	.+18     	; 0x1f158 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   1f146:	0e 94 88 f8 	call	0x1f110	; 0x1f110 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   1f14a:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   1f14c:	05 d0       	rcall	.+10     	; 0x1f158 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   1f14e:	3e f4       	brtc	.+14     	; 0x1f15e <__divmodhi4_exit>

0001f150 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   1f150:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   1f152:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   1f154:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   1f156:	08 95       	ret

0001f158 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   1f158:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   1f15a:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   1f15c:	7f 4f       	sbci	r23, 0xFF	; 255

0001f15e <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   1f15e:	08 95       	ret

0001f160 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   1f160:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   1f162:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   1f164:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   1f166:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   1f168:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   1f16a:	0d c0       	rjmp	.+26     	; 0x1f186 <__udivmodsi4_ep>

0001f16c <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1f16c:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1f16e:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1f170:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   1f172:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   1f174:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   1f176:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   1f178:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   1f17a:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1f17c:	20 f0       	brcs	.+8      	; 0x1f186 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1f17e:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1f180:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   1f182:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   1f184:	f5 0b       	sbc	r31, r21

0001f186 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   1f186:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   1f188:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   1f18a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1f18c:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1f18e:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1f190:	69 f7       	brne	.-38     	; 0x1f16c <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   1f192:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   1f194:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   1f196:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   1f198:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   1f19a:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1f19c:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1f19e:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1f1a0:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   1f1a2:	08 95       	ret

0001f1a4 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   1f1a4:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   1f1a6:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   1f1a8:	1e f4       	brtc	.+6      	; 0x1f1b0 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   1f1aa:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1f1ac:	0e 94 e9 f8 	call	0x1f1d2	; 0x1f1d2 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1f1b0:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   1f1b2:	07 d0       	rcall	.+14     	; 0x1f1c2 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   1f1b4:	0e 94 b0 f8 	call	0x1f160	; 0x1f160 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   1f1b8:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   1f1ba:	03 d0       	rcall	.+6      	; 0x1f1c2 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1f1bc:	4e f4       	brtc	.+18     	; 0x1f1d0 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1f1be:	0c 94 e9 f8 	jmp	0x1f1d2	; 0x1f1d2 <__negsi2>

0001f1c2 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   1f1c2:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   1f1c4:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   1f1c6:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   1f1c8:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   1f1ca:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1f1cc:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1f1ce:	5f 4f       	sbci	r21, 0xFF	; 255

0001f1d0 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1f1d0:	08 95       	ret

0001f1d2 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   1f1d2:	90 95       	com	r25
   1f1d4:	80 95       	com	r24
   1f1d6:	70 95       	com	r23
   1f1d8:	61 95       	neg	r22
   1f1da:	7f 4f       	sbci	r23, 0xFF	; 255
   1f1dc:	8f 4f       	sbci	r24, 0xFF	; 255
   1f1de:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1f1e0:	08 95       	ret

0001f1e2 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   1f1e2:	0e 94 fc f8 	call	0x1f1f8	; 0x1f1f8 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   1f1e6:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   1f1e8:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   1f1ea:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1f1ec:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1f1ee:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1f1f0:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   1f1f2:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   1f1f4:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   1f1f6:	08 95       	ret

0001f1f8 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   1f1f8:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   1f1fa:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1f1fc:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1f1fe:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1f200:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   1f202:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   1f204:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   1f206:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   1f208:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   1f20a:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   1f20c:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   1f20e:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   1f210:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   1f212:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   1f214:	08 95       	ret

0001f216 <__subsf3>:
__subsf3():
   1f216:	50 58       	subi	r21, 0x80	; 128

0001f218 <__addsf3>:
   1f218:	bb 27       	eor	r27, r27
   1f21a:	aa 27       	eor	r26, r26
   1f21c:	0e 94 23 f9 	call	0x1f246	; 0x1f246 <__addsf3x>
   1f220:	0c 94 28 f8 	jmp	0x1f050	; 0x1f050 <__fp_round>
__addsf3():
   1f224:	0e 94 1a f8 	call	0x1f034	; 0x1f034 <__fp_pscA>
   1f228:	38 f0       	brcs	.+14     	; 0x1f238 <__addsf3+0x20>
   1f22a:	0e 94 21 f8 	call	0x1f042	; 0x1f042 <__fp_pscB>
   1f22e:	20 f0       	brcs	.+8      	; 0x1f238 <__addsf3+0x20>
   1f230:	39 f4       	brne	.+14     	; 0x1f240 <__addsf3+0x28>
   1f232:	9f 3f       	cpi	r25, 0xFF	; 255
   1f234:	19 f4       	brne	.+6      	; 0x1f23c <__addsf3+0x24>
   1f236:	26 f4       	brtc	.+8      	; 0x1f240 <__addsf3+0x28>
   1f238:	0c 94 17 f8 	jmp	0x1f02e	; 0x1f02e <__fp_nan>
   1f23c:	0e f4       	brtc	.+2      	; 0x1f240 <__addsf3+0x28>
   1f23e:	e0 95       	com	r30
   1f240:	e7 fb       	bst	r30, 7
   1f242:	0c 94 11 f8 	jmp	0x1f022	; 0x1f022 <__fp_inf>

0001f246 <__addsf3x>:
__addsf3x():
   1f246:	e9 2f       	mov	r30, r25
   1f248:	0e 94 39 f8 	call	0x1f072	; 0x1f072 <__fp_split3>
   1f24c:	58 f3       	brcs	.-42     	; 0x1f224 <__addsf3+0xc>
   1f24e:	ba 17       	cp	r27, r26
   1f250:	62 07       	cpc	r22, r18
   1f252:	73 07       	cpc	r23, r19
   1f254:	84 07       	cpc	r24, r20
   1f256:	95 07       	cpc	r25, r21
   1f258:	20 f0       	brcs	.+8      	; 0x1f262 <__addsf3x+0x1c>
   1f25a:	79 f4       	brne	.+30     	; 0x1f27a <__addsf3x+0x34>
   1f25c:	a6 f5       	brtc	.+104    	; 0x1f2c6 <__addsf3x+0x80>
   1f25e:	0c 94 5b f8 	jmp	0x1f0b6	; 0x1f0b6 <__fp_zero>
   1f262:	0e f4       	brtc	.+2      	; 0x1f266 <__addsf3x+0x20>
   1f264:	e0 95       	com	r30
   1f266:	0b 2e       	mov	r0, r27
   1f268:	ba 2f       	mov	r27, r26
   1f26a:	a0 2d       	mov	r26, r0
   1f26c:	0b 01       	movw	r0, r22
   1f26e:	b9 01       	movw	r22, r18
   1f270:	90 01       	movw	r18, r0
   1f272:	0c 01       	movw	r0, r24
   1f274:	ca 01       	movw	r24, r20
   1f276:	a0 01       	movw	r20, r0
   1f278:	11 24       	eor	r1, r1
   1f27a:	ff 27       	eor	r31, r31
   1f27c:	59 1b       	sub	r21, r25
   1f27e:	99 f0       	breq	.+38     	; 0x1f2a6 <__addsf3x+0x60>
   1f280:	59 3f       	cpi	r21, 0xF9	; 249
   1f282:	50 f4       	brcc	.+20     	; 0x1f298 <__addsf3x+0x52>
   1f284:	50 3e       	cpi	r21, 0xE0	; 224
   1f286:	68 f1       	brcs	.+90     	; 0x1f2e2 <__addsf3x+0x9c>
   1f288:	1a 16       	cp	r1, r26
   1f28a:	f0 40       	sbci	r31, 0x00	; 0
   1f28c:	a2 2f       	mov	r26, r18
   1f28e:	23 2f       	mov	r18, r19
   1f290:	34 2f       	mov	r19, r20
   1f292:	44 27       	eor	r20, r20
   1f294:	58 5f       	subi	r21, 0xF8	; 248
   1f296:	f3 cf       	rjmp	.-26     	; 0x1f27e <__addsf3x+0x38>
   1f298:	46 95       	lsr	r20
   1f29a:	37 95       	ror	r19
   1f29c:	27 95       	ror	r18
   1f29e:	a7 95       	ror	r26
   1f2a0:	f0 40       	sbci	r31, 0x00	; 0
   1f2a2:	53 95       	inc	r21
   1f2a4:	c9 f7       	brne	.-14     	; 0x1f298 <__addsf3x+0x52>
   1f2a6:	7e f4       	brtc	.+30     	; 0x1f2c6 <__addsf3x+0x80>
   1f2a8:	1f 16       	cp	r1, r31
   1f2aa:	ba 0b       	sbc	r27, r26
   1f2ac:	62 0b       	sbc	r22, r18
   1f2ae:	73 0b       	sbc	r23, r19
   1f2b0:	84 0b       	sbc	r24, r20
   1f2b2:	ba f0       	brmi	.+46     	; 0x1f2e2 <__addsf3x+0x9c>
   1f2b4:	91 50       	subi	r25, 0x01	; 1
   1f2b6:	a1 f0       	breq	.+40     	; 0x1f2e0 <__addsf3x+0x9a>
   1f2b8:	ff 0f       	add	r31, r31
   1f2ba:	bb 1f       	adc	r27, r27
   1f2bc:	66 1f       	adc	r22, r22
   1f2be:	77 1f       	adc	r23, r23
   1f2c0:	88 1f       	adc	r24, r24
   1f2c2:	c2 f7       	brpl	.-16     	; 0x1f2b4 <__addsf3x+0x6e>
   1f2c4:	0e c0       	rjmp	.+28     	; 0x1f2e2 <__addsf3x+0x9c>
   1f2c6:	ba 0f       	add	r27, r26
   1f2c8:	62 1f       	adc	r22, r18
   1f2ca:	73 1f       	adc	r23, r19
   1f2cc:	84 1f       	adc	r24, r20
   1f2ce:	48 f4       	brcc	.+18     	; 0x1f2e2 <__addsf3x+0x9c>
   1f2d0:	87 95       	ror	r24
   1f2d2:	77 95       	ror	r23
   1f2d4:	67 95       	ror	r22
   1f2d6:	b7 95       	ror	r27
   1f2d8:	f7 95       	ror	r31
   1f2da:	9e 3f       	cpi	r25, 0xFE	; 254
   1f2dc:	08 f0       	brcs	.+2      	; 0x1f2e0 <__addsf3x+0x9a>
   1f2de:	b0 cf       	rjmp	.-160    	; 0x1f240 <__addsf3+0x28>
   1f2e0:	93 95       	inc	r25
   1f2e2:	88 0f       	add	r24, r24
   1f2e4:	08 f0       	brcs	.+2      	; 0x1f2e8 <__addsf3x+0xa2>
   1f2e6:	99 27       	eor	r25, r25
   1f2e8:	ee 0f       	add	r30, r30
   1f2ea:	97 95       	ror	r25
   1f2ec:	87 95       	ror	r24
   1f2ee:	08 95       	ret

0001f2f0 <__divsf3>:
   1f2f0:	0e 94 8c f9 	call	0x1f318	; 0x1f318 <__divsf3x>
   1f2f4:	0c 94 28 f8 	jmp	0x1f050	; 0x1f050 <__fp_round>
   1f2f8:	0e 94 21 f8 	call	0x1f042	; 0x1f042 <__fp_pscB>
   1f2fc:	58 f0       	brcs	.+22     	; 0x1f314 <__divsf3+0x24>
   1f2fe:	0e 94 1a f8 	call	0x1f034	; 0x1f034 <__fp_pscA>
   1f302:	40 f0       	brcs	.+16     	; 0x1f314 <__divsf3+0x24>
   1f304:	29 f4       	brne	.+10     	; 0x1f310 <__divsf3+0x20>
   1f306:	5f 3f       	cpi	r21, 0xFF	; 255
   1f308:	29 f0       	breq	.+10     	; 0x1f314 <__divsf3+0x24>
   1f30a:	0c 94 11 f8 	jmp	0x1f022	; 0x1f022 <__fp_inf>
   1f30e:	51 11       	cpse	r21, r1
   1f310:	0c 94 5c f8 	jmp	0x1f0b8	; 0x1f0b8 <__fp_szero>
__divsf3():
   1f314:	0c 94 17 f8 	jmp	0x1f02e	; 0x1f02e <__fp_nan>

0001f318 <__divsf3x>:
__divsf3x():
   1f318:	0e 94 39 f8 	call	0x1f072	; 0x1f072 <__fp_split3>
   1f31c:	68 f3       	brcs	.-38     	; 0x1f2f8 <__divsf3+0x8>

0001f31e <__divsf3_pse>:
   1f31e:	99 23       	and	r25, r25
   1f320:	b1 f3       	breq	.-20     	; 0x1f30e <__divsf3+0x1e>
   1f322:	55 23       	and	r21, r21
   1f324:	91 f3       	breq	.-28     	; 0x1f30a <__divsf3+0x1a>
   1f326:	95 1b       	sub	r25, r21
   1f328:	55 0b       	sbc	r21, r21
   1f32a:	bb 27       	eor	r27, r27
   1f32c:	aa 27       	eor	r26, r26
   1f32e:	62 17       	cp	r22, r18
   1f330:	73 07       	cpc	r23, r19
   1f332:	84 07       	cpc	r24, r20
   1f334:	38 f0       	brcs	.+14     	; 0x1f344 <__divsf3_pse+0x26>
   1f336:	9f 5f       	subi	r25, 0xFF	; 255
   1f338:	5f 4f       	sbci	r21, 0xFF	; 255
   1f33a:	22 0f       	add	r18, r18
   1f33c:	33 1f       	adc	r19, r19
   1f33e:	44 1f       	adc	r20, r20
   1f340:	aa 1f       	adc	r26, r26
   1f342:	a9 f3       	breq	.-22     	; 0x1f32e <__divsf3_pse+0x10>
   1f344:	35 d0       	rcall	.+106    	; 0x1f3b0 <__divsf3_pse+0x92>
   1f346:	0e 2e       	mov	r0, r30
   1f348:	3a f0       	brmi	.+14     	; 0x1f358 <__divsf3_pse+0x3a>
   1f34a:	e0 e8       	ldi	r30, 0x80	; 128
   1f34c:	32 d0       	rcall	.+100    	; 0x1f3b2 <__divsf3_pse+0x94>
   1f34e:	91 50       	subi	r25, 0x01	; 1
   1f350:	50 40       	sbci	r21, 0x00	; 0
   1f352:	e6 95       	lsr	r30
   1f354:	00 1c       	adc	r0, r0
   1f356:	ca f7       	brpl	.-14     	; 0x1f34a <__divsf3_pse+0x2c>
   1f358:	2b d0       	rcall	.+86     	; 0x1f3b0 <__divsf3_pse+0x92>
   1f35a:	fe 2f       	mov	r31, r30
   1f35c:	29 d0       	rcall	.+82     	; 0x1f3b0 <__divsf3_pse+0x92>
   1f35e:	66 0f       	add	r22, r22
   1f360:	77 1f       	adc	r23, r23
   1f362:	88 1f       	adc	r24, r24
   1f364:	bb 1f       	adc	r27, r27
   1f366:	26 17       	cp	r18, r22
   1f368:	37 07       	cpc	r19, r23
   1f36a:	48 07       	cpc	r20, r24
   1f36c:	ab 07       	cpc	r26, r27
   1f36e:	b0 e8       	ldi	r27, 0x80	; 128
   1f370:	09 f0       	breq	.+2      	; 0x1f374 <__divsf3_pse+0x56>
   1f372:	bb 0b       	sbc	r27, r27
   1f374:	80 2d       	mov	r24, r0
   1f376:	bf 01       	movw	r22, r30
   1f378:	ff 27       	eor	r31, r31
   1f37a:	93 58       	subi	r25, 0x83	; 131
   1f37c:	5f 4f       	sbci	r21, 0xFF	; 255
   1f37e:	3a f0       	brmi	.+14     	; 0x1f38e <__divsf3_pse+0x70>
   1f380:	9e 3f       	cpi	r25, 0xFE	; 254
   1f382:	51 05       	cpc	r21, r1
   1f384:	78 f0       	brcs	.+30     	; 0x1f3a4 <__divsf3_pse+0x86>
   1f386:	0c 94 11 f8 	jmp	0x1f022	; 0x1f022 <__fp_inf>
   1f38a:	0c 94 5c f8 	jmp	0x1f0b8	; 0x1f0b8 <__fp_szero>
   1f38e:	5f 3f       	cpi	r21, 0xFF	; 255
   1f390:	e4 f3       	brlt	.-8      	; 0x1f38a <__divsf3_pse+0x6c>
   1f392:	98 3e       	cpi	r25, 0xE8	; 232
   1f394:	d4 f3       	brlt	.-12     	; 0x1f38a <__divsf3_pse+0x6c>
   1f396:	86 95       	lsr	r24
   1f398:	77 95       	ror	r23
   1f39a:	67 95       	ror	r22
   1f39c:	b7 95       	ror	r27
   1f39e:	f7 95       	ror	r31
   1f3a0:	9f 5f       	subi	r25, 0xFF	; 255
   1f3a2:	c9 f7       	brne	.-14     	; 0x1f396 <__divsf3_pse+0x78>
   1f3a4:	88 0f       	add	r24, r24
   1f3a6:	91 1d       	adc	r25, r1
   1f3a8:	96 95       	lsr	r25
   1f3aa:	87 95       	ror	r24
   1f3ac:	97 f9       	bld	r25, 7
   1f3ae:	08 95       	ret
   1f3b0:	e1 e0       	ldi	r30, 0x01	; 1
   1f3b2:	66 0f       	add	r22, r22
   1f3b4:	77 1f       	adc	r23, r23
   1f3b6:	88 1f       	adc	r24, r24
   1f3b8:	bb 1f       	adc	r27, r27
   1f3ba:	62 17       	cp	r22, r18
   1f3bc:	73 07       	cpc	r23, r19
   1f3be:	84 07       	cpc	r24, r20
   1f3c0:	ba 07       	cpc	r27, r26
   1f3c2:	20 f0       	brcs	.+8      	; 0x1f3cc <__divsf3_pse+0xae>
   1f3c4:	62 1b       	sub	r22, r18
   1f3c6:	73 0b       	sbc	r23, r19
   1f3c8:	84 0b       	sbc	r24, r20
   1f3ca:	ba 0b       	sbc	r27, r26
   1f3cc:	ee 1f       	adc	r30, r30
   1f3ce:	88 f7       	brcc	.-30     	; 0x1f3b2 <__divsf3_pse+0x94>
   1f3d0:	e0 95       	com	r30
   1f3d2:	08 95       	ret

0001f3d4 <__fixsfsi>:
   1f3d4:	0e 94 f1 f9 	call	0x1f3e2	; 0x1f3e2 <__fixunssfsi>
   1f3d8:	68 94       	set
   1f3da:	b1 11       	cpse	r27, r1
   1f3dc:	0c 94 5c f8 	jmp	0x1f0b8	; 0x1f0b8 <__fp_szero>
   1f3e0:	08 95       	ret

0001f3e2 <__fixunssfsi>:
   1f3e2:	0e 94 41 f8 	call	0x1f082	; 0x1f082 <__fp_splitA>
   1f3e6:	88 f0       	brcs	.+34     	; 0x1f40a <__fixunssfsi+0x28>
   1f3e8:	9f 57       	subi	r25, 0x7F	; 127
   1f3ea:	98 f0       	brcs	.+38     	; 0x1f412 <__fixunssfsi+0x30>
   1f3ec:	b9 2f       	mov	r27, r25
   1f3ee:	99 27       	eor	r25, r25
   1f3f0:	b7 51       	subi	r27, 0x17	; 23
   1f3f2:	b0 f0       	brcs	.+44     	; 0x1f420 <__fixunssfsi+0x3e>
__fixunssfsi():
   1f3f4:	e1 f0       	breq	.+56     	; 0x1f42e <__fixunssfsi+0x4c>
   1f3f6:	66 0f       	add	r22, r22
   1f3f8:	77 1f       	adc	r23, r23
   1f3fa:	88 1f       	adc	r24, r24
   1f3fc:	99 1f       	adc	r25, r25
   1f3fe:	1a f0       	brmi	.+6      	; 0x1f406 <__fixunssfsi+0x24>
   1f400:	ba 95       	dec	r27
   1f402:	c9 f7       	brne	.-14     	; 0x1f3f6 <__fixunssfsi+0x14>
   1f404:	14 c0       	rjmp	.+40     	; 0x1f42e <__fixunssfsi+0x4c>
   1f406:	b1 30       	cpi	r27, 0x01	; 1
   1f408:	91 f0       	breq	.+36     	; 0x1f42e <__fixunssfsi+0x4c>
   1f40a:	0e 94 5b f8 	call	0x1f0b6	; 0x1f0b6 <__fp_zero>
   1f40e:	b1 e0       	ldi	r27, 0x01	; 1
   1f410:	08 95       	ret
   1f412:	0c 94 5b f8 	jmp	0x1f0b6	; 0x1f0b6 <__fp_zero>
   1f416:	67 2f       	mov	r22, r23
   1f418:	78 2f       	mov	r23, r24
   1f41a:	88 27       	eor	r24, r24
   1f41c:	b8 5f       	subi	r27, 0xF8	; 248
   1f41e:	39 f0       	breq	.+14     	; 0x1f42e <__fixunssfsi+0x4c>
   1f420:	b9 3f       	cpi	r27, 0xF9	; 249
   1f422:	cc f3       	brlt	.-14     	; 0x1f416 <__fixunssfsi+0x34>
   1f424:	86 95       	lsr	r24
   1f426:	77 95       	ror	r23
   1f428:	67 95       	ror	r22
   1f42a:	b3 95       	inc	r27
   1f42c:	d9 f7       	brne	.-10     	; 0x1f424 <__fixunssfsi+0x42>
   1f42e:	3e f4       	brtc	.+14     	; 0x1f43e <__fixunssfsi+0x5c>
   1f430:	90 95       	com	r25
   1f432:	80 95       	com	r24
   1f434:	70 95       	com	r23
   1f436:	61 95       	neg	r22
   1f438:	7f 4f       	sbci	r23, 0xFF	; 255
   1f43a:	8f 4f       	sbci	r24, 0xFF	; 255
   1f43c:	9f 4f       	sbci	r25, 0xFF	; 255
   1f43e:	08 95       	ret

0001f440 <__gesf2>:
__gesf2():
   1f440:	0e 94 80 f7 	call	0x1ef00	; 0x1ef00 <__fp_cmp>
   1f444:	08 f4       	brcc	.+2      	; 0x1f448 <__gesf2+0x8>
   1f446:	8f ef       	ldi	r24, 0xFF	; 255
   1f448:	08 95       	ret

0001f44a <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   1f44a:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   1f44c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   1f44e:	04 c0       	rjmp	.+8      	; 0x1f458 <__udivmodqi4_ep>

0001f450 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   1f450:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   1f452:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   1f454:	08 f0       	brcs	.+2      	; 0x1f458 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   1f456:	96 1b       	sub	r25, r22

0001f458 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   1f458:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   1f45a:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   1f45c:	c9 f7       	brne	.-14     	; 0x1f450 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   1f45e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   1f460:	08 95       	ret

0001f462 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   1f462:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   1f464:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   1f466:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   1f468:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   1f46a:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   1f46c:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   1f46e:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   1f470:	19 94       	eijmp

0001f472 <realloc>:
realloc():
   1f472:	4f 92       	push	r4
   1f474:	5f 92       	push	r5
   1f476:	6f 92       	push	r6
   1f478:	7f 92       	push	r7
   1f47a:	8f 92       	push	r8
   1f47c:	9f 92       	push	r9
   1f47e:	af 92       	push	r10
   1f480:	bf 92       	push	r11
   1f482:	cf 92       	push	r12
   1f484:	df 92       	push	r13
   1f486:	ef 92       	push	r14
   1f488:	ff 92       	push	r15
   1f48a:	0f 93       	push	r16
   1f48c:	1f 93       	push	r17
   1f48e:	cf 93       	push	r28
   1f490:	df 93       	push	r29
   1f492:	8c 01       	movw	r16, r24
   1f494:	00 97       	sbiw	r24, 0x00	; 0
   1f496:	99 f4       	brne	.+38     	; 0x1f4be <realloc+0x4c>
   1f498:	cb 01       	movw	r24, r22
   1f49a:	df 91       	pop	r29
   1f49c:	cf 91       	pop	r28
   1f49e:	1f 91       	pop	r17
   1f4a0:	0f 91       	pop	r16
   1f4a2:	ff 90       	pop	r15
   1f4a4:	ef 90       	pop	r14
   1f4a6:	df 90       	pop	r13
   1f4a8:	cf 90       	pop	r12
   1f4aa:	bf 90       	pop	r11
   1f4ac:	af 90       	pop	r10
   1f4ae:	9f 90       	pop	r9
   1f4b0:	8f 90       	pop	r8
   1f4b2:	7f 90       	pop	r7
   1f4b4:	6f 90       	pop	r6
   1f4b6:	5f 90       	pop	r5
   1f4b8:	4f 90       	pop	r4
   1f4ba:	0c 94 0d f3 	jmp	0x1e61a	; 0x1e61a <malloc>
   1f4be:	fc 01       	movw	r30, r24
   1f4c0:	e6 0f       	add	r30, r22
   1f4c2:	f7 1f       	adc	r31, r23
   1f4c4:	9c 01       	movw	r18, r24
   1f4c6:	22 50       	subi	r18, 0x02	; 2
   1f4c8:	31 09       	sbc	r19, r1
   1f4ca:	e2 17       	cp	r30, r18
   1f4cc:	f3 07       	cpc	r31, r19
   1f4ce:	08 f4       	brcc	.+2      	; 0x1f4d2 <realloc+0x60>
   1f4d0:	ae c0       	rjmp	.+348    	; 0x1f62e <realloc+0x1bc>
   1f4d2:	d9 01       	movw	r26, r18
   1f4d4:	cd 91       	ld	r28, X+
   1f4d6:	dc 91       	ld	r29, X
   1f4d8:	11 97       	sbiw	r26, 0x01	; 1
   1f4da:	c6 17       	cp	r28, r22
   1f4dc:	d7 07       	cpc	r29, r23
   1f4de:	20 f1       	brcs	.+72     	; 0x1f528 <realloc+0xb6>
   1f4e0:	c5 30       	cpi	r28, 0x05	; 5
   1f4e2:	d1 05       	cpc	r29, r1
   1f4e4:	78 f0       	brcs	.+30     	; 0x1f504 <realloc+0x92>
   1f4e6:	ce 01       	movw	r24, r28
   1f4e8:	04 97       	sbiw	r24, 0x04	; 4
   1f4ea:	86 17       	cp	r24, r22
   1f4ec:	97 07       	cpc	r25, r23
   1f4ee:	50 f0       	brcs	.+20     	; 0x1f504 <realloc+0x92>
   1f4f0:	c6 1b       	sub	r28, r22
   1f4f2:	d7 0b       	sbc	r29, r23
   1f4f4:	22 97       	sbiw	r28, 0x02	; 2
   1f4f6:	c1 93       	st	Z+, r28
   1f4f8:	d1 93       	st	Z+, r29
   1f4fa:	6d 93       	st	X+, r22
   1f4fc:	7c 93       	st	X, r23
   1f4fe:	cf 01       	movw	r24, r30
   1f500:	0e 94 a9 f3 	call	0x1e752	; 0x1e752 <free>
   1f504:	c8 01       	movw	r24, r16
   1f506:	df 91       	pop	r29
   1f508:	cf 91       	pop	r28
   1f50a:	1f 91       	pop	r17
   1f50c:	0f 91       	pop	r16
   1f50e:	ff 90       	pop	r15
   1f510:	ef 90       	pop	r14
   1f512:	df 90       	pop	r13
   1f514:	cf 90       	pop	r12
   1f516:	bf 90       	pop	r11
   1f518:	af 90       	pop	r10
   1f51a:	9f 90       	pop	r9
   1f51c:	8f 90       	pop	r8
   1f51e:	7f 90       	pop	r7
   1f520:	6f 90       	pop	r6
   1f522:	5f 90       	pop	r5
   1f524:	4f 90       	pop	r4
   1f526:	08 95       	ret
   1f528:	5b 01       	movw	r10, r22
   1f52a:	ac 1a       	sub	r10, r28
   1f52c:	bd 0a       	sbc	r11, r29
   1f52e:	4c 01       	movw	r8, r24
   1f530:	8c 0e       	add	r8, r28
   1f532:	9d 1e       	adc	r9, r29
   1f534:	a0 91 83 14 	lds	r26, 0x1483	; 0x801483 <__flp>
   1f538:	b0 91 84 14 	lds	r27, 0x1484	; 0x801484 <__flp+0x1>
   1f53c:	51 2c       	mov	r5, r1
   1f53e:	41 2c       	mov	r4, r1
   1f540:	f1 2c       	mov	r15, r1
   1f542:	e1 2c       	mov	r14, r1
   1f544:	10 97       	sbiw	r26, 0x00	; 0
   1f546:	31 f5       	brne	.+76     	; 0x1f594 <realloc+0x122>
   1f548:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <__brkval>
   1f54c:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <__brkval+0x1>
   1f550:	88 15       	cp	r24, r8
   1f552:	99 05       	cpc	r25, r9
   1f554:	09 f0       	breq	.+2      	; 0x1f558 <realloc+0xe6>
   1f556:	5c c0       	rjmp	.+184    	; 0x1f610 <realloc+0x19e>
   1f558:	46 16       	cp	r4, r22
   1f55a:	57 06       	cpc	r5, r23
   1f55c:	08 f0       	brcs	.+2      	; 0x1f560 <realloc+0xee>
   1f55e:	58 c0       	rjmp	.+176    	; 0x1f610 <realloc+0x19e>
   1f560:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__malloc_heap_end>
   1f564:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__malloc_heap_end+0x1>
   1f568:	00 97       	sbiw	r24, 0x00	; 0
   1f56a:	41 f4       	brne	.+16     	; 0x1f57c <realloc+0x10a>
   1f56c:	8d b7       	in	r24, 0x3d	; 61
   1f56e:	9e b7       	in	r25, 0x3e	; 62
   1f570:	40 91 16 02 	lds	r20, 0x0216	; 0x800216 <__malloc_margin>
   1f574:	50 91 17 02 	lds	r21, 0x0217	; 0x800217 <__malloc_margin+0x1>
   1f578:	84 1b       	sub	r24, r20
   1f57a:	95 0b       	sbc	r25, r21
   1f57c:	e8 17       	cp	r30, r24
   1f57e:	f9 07       	cpc	r31, r25
   1f580:	08 f0       	brcs	.+2      	; 0x1f584 <realloc+0x112>
   1f582:	55 c0       	rjmp	.+170    	; 0x1f62e <realloc+0x1bc>
   1f584:	f0 93 82 14 	sts	0x1482, r31	; 0x801482 <__brkval+0x1>
   1f588:	e0 93 81 14 	sts	0x1481, r30	; 0x801481 <__brkval>
   1f58c:	f9 01       	movw	r30, r18
   1f58e:	71 83       	std	Z+1, r23	; 0x01
   1f590:	60 83       	st	Z, r22
   1f592:	b8 cf       	rjmp	.-144    	; 0x1f504 <realloc+0x92>
   1f594:	8d 91       	ld	r24, X+
   1f596:	9c 91       	ld	r25, X
   1f598:	11 97       	sbiw	r26, 0x01	; 1
   1f59a:	12 96       	adiw	r26, 0x02	; 2
   1f59c:	6c 90       	ld	r6, X
   1f59e:	12 97       	sbiw	r26, 0x02	; 2
   1f5a0:	13 96       	adiw	r26, 0x03	; 3
   1f5a2:	7c 90       	ld	r7, X
   1f5a4:	13 97       	sbiw	r26, 0x03	; 3
   1f5a6:	a8 15       	cp	r26, r8
   1f5a8:	b9 05       	cpc	r27, r9
   1f5aa:	59 f5       	brne	.+86     	; 0x1f602 <realloc+0x190>
   1f5ac:	6c 01       	movw	r12, r24
   1f5ae:	42 e0       	ldi	r20, 0x02	; 2
   1f5b0:	c4 0e       	add	r12, r20
   1f5b2:	d1 1c       	adc	r13, r1
   1f5b4:	ca 14       	cp	r12, r10
   1f5b6:	db 04       	cpc	r13, r11
   1f5b8:	20 f1       	brcs	.+72     	; 0x1f602 <realloc+0x190>
   1f5ba:	ac 01       	movw	r20, r24
   1f5bc:	4a 19       	sub	r20, r10
   1f5be:	5b 09       	sbc	r21, r11
   1f5c0:	da 01       	movw	r26, r20
   1f5c2:	12 96       	adiw	r26, 0x02	; 2
   1f5c4:	15 97       	sbiw	r26, 0x05	; 5
   1f5c6:	80 f0       	brcs	.+32     	; 0x1f5e8 <realloc+0x176>
   1f5c8:	62 82       	std	Z+2, r6	; 0x02
   1f5ca:	73 82       	std	Z+3, r7	; 0x03
   1f5cc:	51 83       	std	Z+1, r21	; 0x01
   1f5ce:	40 83       	st	Z, r20
   1f5d0:	d9 01       	movw	r26, r18
   1f5d2:	6d 93       	st	X+, r22
   1f5d4:	7c 93       	st	X, r23
   1f5d6:	e1 14       	cp	r14, r1
   1f5d8:	f1 04       	cpc	r15, r1
   1f5da:	71 f0       	breq	.+28     	; 0x1f5f8 <realloc+0x186>
   1f5dc:	d7 01       	movw	r26, r14
   1f5de:	13 96       	adiw	r26, 0x03	; 3
   1f5e0:	fc 93       	st	X, r31
   1f5e2:	ee 93       	st	-X, r30
   1f5e4:	12 97       	sbiw	r26, 0x02	; 2
   1f5e6:	8e cf       	rjmp	.-228    	; 0x1f504 <realloc+0x92>
   1f5e8:	22 96       	adiw	r28, 0x02	; 2
   1f5ea:	8c 0f       	add	r24, r28
   1f5ec:	9d 1f       	adc	r25, r29
   1f5ee:	f9 01       	movw	r30, r18
   1f5f0:	91 83       	std	Z+1, r25	; 0x01
   1f5f2:	80 83       	st	Z, r24
   1f5f4:	f3 01       	movw	r30, r6
   1f5f6:	ef cf       	rjmp	.-34     	; 0x1f5d6 <realloc+0x164>
   1f5f8:	f0 93 84 14 	sts	0x1484, r31	; 0x801484 <__flp+0x1>
   1f5fc:	e0 93 83 14 	sts	0x1483, r30	; 0x801483 <__flp>
   1f600:	81 cf       	rjmp	.-254    	; 0x1f504 <realloc+0x92>
   1f602:	48 16       	cp	r4, r24
   1f604:	59 06       	cpc	r5, r25
   1f606:	08 f4       	brcc	.+2      	; 0x1f60a <realloc+0x198>
   1f608:	2c 01       	movw	r4, r24
   1f60a:	7d 01       	movw	r14, r26
   1f60c:	d3 01       	movw	r26, r6
   1f60e:	9a cf       	rjmp	.-204    	; 0x1f544 <realloc+0xd2>
   1f610:	cb 01       	movw	r24, r22
   1f612:	0e 94 0d f3 	call	0x1e61a	; 0x1e61a <malloc>
   1f616:	7c 01       	movw	r14, r24
   1f618:	00 97       	sbiw	r24, 0x00	; 0
   1f61a:	49 f0       	breq	.+18     	; 0x1f62e <realloc+0x1bc>
   1f61c:	ae 01       	movw	r20, r28
   1f61e:	b8 01       	movw	r22, r16
   1f620:	0e 94 1f fb 	call	0x1f63e	; 0x1f63e <memcpy>
   1f624:	c8 01       	movw	r24, r16
   1f626:	0e 94 a9 f3 	call	0x1e752	; 0x1e752 <free>
   1f62a:	87 01       	movw	r16, r14
   1f62c:	6b cf       	rjmp	.-298    	; 0x1f504 <realloc+0x92>
   1f62e:	10 e0       	ldi	r17, 0x00	; 0
   1f630:	00 e0       	ldi	r16, 0x00	; 0
   1f632:	68 cf       	rjmp	.-304    	; 0x1f504 <realloc+0x92>

0001f634 <abort>:
abort():
   1f634:	81 e0       	ldi	r24, 0x01	; 1
   1f636:	90 e0       	ldi	r25, 0x00	; 0
   1f638:	f8 94       	cli
   1f63a:	0c 94 c6 fb 	jmp	0x1f78c	; 0x1f78c <_exit>

0001f63e <memcpy>:
memcpy():
   1f63e:	fb 01       	movw	r30, r22
   1f640:	dc 01       	movw	r26, r24
   1f642:	02 c0       	rjmp	.+4      	; 0x1f648 <memcpy+0xa>
   1f644:	01 90       	ld	r0, Z+
   1f646:	0d 92       	st	X+, r0
   1f648:	41 50       	subi	r20, 0x01	; 1
   1f64a:	50 40       	sbci	r21, 0x00	; 0
   1f64c:	d8 f7       	brcc	.-10     	; 0x1f644 <memcpy+0x6>
   1f64e:	08 95       	ret

0001f650 <strcat>:
strcat():
   1f650:	fb 01       	movw	r30, r22
   1f652:	dc 01       	movw	r26, r24
   1f654:	0d 90       	ld	r0, X+
   1f656:	00 20       	and	r0, r0
   1f658:	e9 f7       	brne	.-6      	; 0x1f654 <strcat+0x4>
   1f65a:	11 97       	sbiw	r26, 0x01	; 1
   1f65c:	01 90       	ld	r0, Z+
   1f65e:	0d 92       	st	X+, r0
   1f660:	00 20       	and	r0, r0
   1f662:	e1 f7       	brne	.-8      	; 0x1f65c <strcat+0xc>
   1f664:	08 95       	ret

0001f666 <strchr>:
strchr():
   1f666:	fc 01       	movw	r30, r24
   1f668:	81 91       	ld	r24, Z+
   1f66a:	86 17       	cp	r24, r22
   1f66c:	21 f0       	breq	.+8      	; 0x1f676 <strchr+0x10>
   1f66e:	88 23       	and	r24, r24
   1f670:	d9 f7       	brne	.-10     	; 0x1f668 <strchr+0x2>
   1f672:	99 27       	eor	r25, r25
   1f674:	08 95       	ret
   1f676:	31 97       	sbiw	r30, 0x01	; 1
   1f678:	cf 01       	movw	r24, r30
   1f67a:	08 95       	ret

0001f67c <strcmp>:
strcmp():
   1f67c:	fb 01       	movw	r30, r22
   1f67e:	dc 01       	movw	r26, r24
   1f680:	8d 91       	ld	r24, X+
   1f682:	01 90       	ld	r0, Z+
   1f684:	80 19       	sub	r24, r0
   1f686:	01 10       	cpse	r0, r1
   1f688:	d9 f3       	breq	.-10     	; 0x1f680 <strcmp+0x4>
   1f68a:	99 0b       	sbc	r25, r25
   1f68c:	08 95       	ret

0001f68e <strcpy>:
strcpy():
   1f68e:	fb 01       	movw	r30, r22
   1f690:	dc 01       	movw	r26, r24
   1f692:	01 90       	ld	r0, Z+
   1f694:	0d 92       	st	X+, r0
   1f696:	00 20       	and	r0, r0
   1f698:	e1 f7       	brne	.-8      	; 0x1f692 <strcpy+0x4>
   1f69a:	08 95       	ret

0001f69c <strncmp>:
strncmp():
   1f69c:	fb 01       	movw	r30, r22
   1f69e:	dc 01       	movw	r26, r24
   1f6a0:	41 50       	subi	r20, 0x01	; 1
   1f6a2:	50 40       	sbci	r21, 0x00	; 0
   1f6a4:	30 f0       	brcs	.+12     	; 0x1f6b2 <strncmp+0x16>
   1f6a6:	8d 91       	ld	r24, X+
   1f6a8:	01 90       	ld	r0, Z+
   1f6aa:	80 19       	sub	r24, r0
   1f6ac:	19 f4       	brne	.+6      	; 0x1f6b4 <strncmp+0x18>
   1f6ae:	00 20       	and	r0, r0
   1f6b0:	b9 f7       	brne	.-18     	; 0x1f6a0 <strncmp+0x4>
   1f6b2:	88 1b       	sub	r24, r24
   1f6b4:	99 0b       	sbc	r25, r25
   1f6b6:	08 95       	ret

0001f6b8 <strncpy>:
strncpy():
   1f6b8:	fb 01       	movw	r30, r22
   1f6ba:	dc 01       	movw	r26, r24
   1f6bc:	41 50       	subi	r20, 0x01	; 1
   1f6be:	50 40       	sbci	r21, 0x00	; 0
   1f6c0:	48 f0       	brcs	.+18     	; 0x1f6d4 <strncpy+0x1c>
   1f6c2:	01 90       	ld	r0, Z+
   1f6c4:	0d 92       	st	X+, r0
   1f6c6:	00 20       	and	r0, r0
   1f6c8:	c9 f7       	brne	.-14     	; 0x1f6bc <strncpy+0x4>
   1f6ca:	01 c0       	rjmp	.+2      	; 0x1f6ce <strncpy+0x16>
   1f6cc:	1d 92       	st	X+, r1
   1f6ce:	41 50       	subi	r20, 0x01	; 1
   1f6d0:	50 40       	sbci	r21, 0x00	; 0
   1f6d2:	e0 f7       	brcc	.-8      	; 0x1f6cc <strncpy+0x14>
   1f6d4:	08 95       	ret

0001f6d6 <puts>:
puts():
   1f6d6:	0f 93       	push	r16
   1f6d8:	1f 93       	push	r17
   1f6da:	cf 93       	push	r28
   1f6dc:	df 93       	push	r29
   1f6de:	e0 91 6b 14 	lds	r30, 0x146B	; 0x80146b <__iob+0x2>
   1f6e2:	f0 91 6c 14 	lds	r31, 0x146C	; 0x80146c <__iob+0x3>
   1f6e6:	23 81       	ldd	r18, Z+3	; 0x03
   1f6e8:	ec 01       	movw	r28, r24
   1f6ea:	10 e0       	ldi	r17, 0x00	; 0
   1f6ec:	00 e0       	ldi	r16, 0x00	; 0
   1f6ee:	21 fd       	sbrc	r18, 1
   1f6f0:	08 c0       	rjmp	.+16     	; 0x1f702 <puts+0x2c>
   1f6f2:	0f ef       	ldi	r16, 0xFF	; 255
   1f6f4:	1f ef       	ldi	r17, 0xFF	; 255
   1f6f6:	14 c0       	rjmp	.+40     	; 0x1f720 <puts+0x4a>
   1f6f8:	19 95       	eicall
   1f6fa:	89 2b       	or	r24, r25
   1f6fc:	11 f0       	breq	.+4      	; 0x1f702 <puts+0x2c>
   1f6fe:	0f ef       	ldi	r16, 0xFF	; 255
   1f700:	1f ef       	ldi	r17, 0xFF	; 255
   1f702:	89 91       	ld	r24, Y+
   1f704:	60 91 6b 14 	lds	r22, 0x146B	; 0x80146b <__iob+0x2>
   1f708:	70 91 6c 14 	lds	r23, 0x146C	; 0x80146c <__iob+0x3>
   1f70c:	db 01       	movw	r26, r22
   1f70e:	18 96       	adiw	r26, 0x08	; 8
   1f710:	ed 91       	ld	r30, X+
   1f712:	fc 91       	ld	r31, X
   1f714:	81 11       	cpse	r24, r1
   1f716:	f0 cf       	rjmp	.-32     	; 0x1f6f8 <puts+0x22>
   1f718:	8a e0       	ldi	r24, 0x0A	; 10
   1f71a:	19 95       	eicall
   1f71c:	89 2b       	or	r24, r25
   1f71e:	49 f7       	brne	.-46     	; 0x1f6f2 <puts+0x1c>
   1f720:	c8 01       	movw	r24, r16
   1f722:	df 91       	pop	r29
   1f724:	cf 91       	pop	r28
   1f726:	1f 91       	pop	r17
   1f728:	0f 91       	pop	r16
   1f72a:	08 95       	ret

0001f72c <sprintf>:
sprintf():
   1f72c:	0f 93       	push	r16
   1f72e:	1f 93       	push	r17
   1f730:	cf 93       	push	r28
   1f732:	df 93       	push	r29
   1f734:	cd b7       	in	r28, 0x3d	; 61
   1f736:	de b7       	in	r29, 0x3e	; 62
   1f738:	2e 97       	sbiw	r28, 0x0e	; 14
   1f73a:	0f b6       	in	r0, 0x3f	; 63
   1f73c:	f8 94       	cli
   1f73e:	de bf       	out	0x3e, r29	; 62
   1f740:	0f be       	out	0x3f, r0	; 63
   1f742:	cd bf       	out	0x3d, r28	; 61
   1f744:	0e 89       	ldd	r16, Y+22	; 0x16
   1f746:	1f 89       	ldd	r17, Y+23	; 0x17
   1f748:	86 e0       	ldi	r24, 0x06	; 6
   1f74a:	8c 83       	std	Y+4, r24	; 0x04
   1f74c:	1a 83       	std	Y+2, r17	; 0x02
   1f74e:	09 83       	std	Y+1, r16	; 0x01
   1f750:	8f ef       	ldi	r24, 0xFF	; 255
   1f752:	9f e7       	ldi	r25, 0x7F	; 127
   1f754:	9e 83       	std	Y+6, r25	; 0x06
   1f756:	8d 83       	std	Y+5, r24	; 0x05
   1f758:	ae 01       	movw	r20, r28
   1f75a:	46 5e       	subi	r20, 0xE6	; 230
   1f75c:	5f 4f       	sbci	r21, 0xFF	; 255
   1f75e:	68 8d       	ldd	r22, Y+24	; 0x18
   1f760:	79 8d       	ldd	r23, Y+25	; 0x19
   1f762:	ce 01       	movw	r24, r28
   1f764:	01 96       	adiw	r24, 0x01	; 1
   1f766:	0e 94 76 ef 	call	0x1deec	; 0x1deec <vfprintf>
   1f76a:	2f 81       	ldd	r18, Y+7	; 0x07
   1f76c:	38 85       	ldd	r19, Y+8	; 0x08
   1f76e:	02 0f       	add	r16, r18
   1f770:	13 1f       	adc	r17, r19
   1f772:	f8 01       	movw	r30, r16
   1f774:	10 82       	st	Z, r1
   1f776:	2e 96       	adiw	r28, 0x0e	; 14
   1f778:	0f b6       	in	r0, 0x3f	; 63
   1f77a:	f8 94       	cli
   1f77c:	de bf       	out	0x3e, r29	; 62
   1f77e:	0f be       	out	0x3f, r0	; 63
   1f780:	cd bf       	out	0x3d, r28	; 61
   1f782:	df 91       	pop	r29
   1f784:	cf 91       	pop	r28
   1f786:	1f 91       	pop	r17
   1f788:	0f 91       	pop	r16
   1f78a:	08 95       	ret

0001f78c <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   1f78c:	f8 94       	cli

0001f78e <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   1f78e:	ff cf       	rjmp	.-2      	; 0x1f78e <__stop_program>
