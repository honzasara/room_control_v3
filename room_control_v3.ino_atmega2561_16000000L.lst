
/tmp/arduino_build_832911/room_control_v3.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__ctors_end>
       4:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
       8:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
       c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      10:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      14:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      18:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      1c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      20:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      24:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      28:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      2c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      30:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      34:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      38:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      3c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      40:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      44:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      48:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      4c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      50:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      54:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      58:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      5c:	0c 94 ae 8d 	jmp	0x11b5c	; 0x11b5c <__vector_23>
      60:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      64:	0c 94 22 8e 	jmp	0x11c44	; 0x11c44 <__vector_25>
      68:	0c 94 f8 8d 	jmp	0x11bf0	; 0x11bf0 <__vector_26>
      6c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      70:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      74:	0c 94 58 8e 	jmp	0x11cb0	; 0x11cb0 <__vector_29>
      78:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      7c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      80:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      84:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      88:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      8c:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      90:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      94:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      98:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      9c:	0c 94 d6 8f 	jmp	0x11fac	; 0x11fac <__vector_39>
      a0:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      a4:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      a8:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      ac:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      b0:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      b4:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      b8:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      bc:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      c0:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      c4:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>
      c8:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <__bad_interrupt>

000000cc <__trampolines_start>:
__trampolines_start():
      cc:	0c 94 15 30 	jmp	0x602a	; 0x602a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      d0:	0c 94 c3 26 	jmp	0x4d86	; 0x4d86 <EthernetClient::read()>
      d4:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <get_function_budik_text_state(unsigned char, unsigned char, char*, char*)>
      d8:	0c 94 3a 55 	jmp	0xaa74	; 0xaa74 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
      dc:	0c 94 c5 24 	jmp	0x498a	; 0x498a <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
      e0:	0c 94 2a 60 	jmp	0xc054	; 0xc054 <click_rtds_subscribe(unsigned char, unsigned char)>
      e4:	0c 94 c1 89 	jmp	0x11382	; 0x11382 <turnOffPWM.lto_priv.233+0xc6>
      e8:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <display_function_set_variable_minus()>
      ec:	0c 94 15 53 	jmp	0xa62a	; 0xa62a <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>
      f0:	0c 94 db 7e 	jmp	0xfdb6	; 0xfdb6 <HardwareSerial::availableForWrite()>
      f4:	0c 94 bf 24 	jmp	0x497e	; 0x497e <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>
      f8:	0c 94 ac 7e 	jmp	0xfd58	; 0xfd58 <TwoWire::read()>
      fc:	0c 94 d1 37 	jmp	0x6fa2	; 0x6fa2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
     100:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
     104:	0c 94 f9 59 	jmp	0xb3f2	; 0xb3f2 <menu_tds_save_name(unsigned char, unsigned char)>
     108:	0c 94 44 80 	jmp	0x10088	; 0x10088 <TwoWire::flush()>
     10c:	0c 94 ea 7e 	jmp	0xfdd4	; 0xfdd4 <HardwareSerial::read()>
     110:	0c 94 b5 99 	jmp	0x1336a	; 0x1336a <EthernetUDP::read()>
     114:	0c 94 fd 80 	jmp	0x101fa	; 0x101fa <EthernetClient::operator==(EthernetClient const&)>
     118:	0c 94 b6 89 	jmp	0x1136c	; 0x1136c <turnOffPWM.lto_priv.233+0xb0>
     11c:	0c 94 e1 30 	jmp	0x61c2	; 0x61c2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     120:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <display_function_vertical_slider_inc(unsigned char, unsigned char)>
     124:	0c 94 39 54 	jmp	0xa872	; 0xa872 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>
     128:	0c 94 ed 53 	jmp	0xa7da	; 0xa7da <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>
     12c:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <menu_redraw_time05s(unsigned char, unsigned char)>
     130:	0c 94 a9 54 	jmp	0xa952	; 0xa952 <button_get_default_ring_labels(unsigned char, unsigned char, char*, char*)>
     134:	0c 94 b7 2b 	jmp	0x576e	; 0x576e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>
     138:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <click_keyboard_type(unsigned char, unsigned char)>
     13c:	0c 94 c3 32 	jmp	0x6586	; 0x6586 <EthernetClient::connect(IPAddress, unsigned int)>
     140:	0c 94 8c 9a 	jmp	0x13518	; 0x13518 <EthernetUDP::begin(unsigned int)>
     144:	0c 94 d9 7e 	jmp	0xfdb2	; 0xfdb2 <TwoWire::onRequestService()>
     148:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <LCDWIKI_KBV::Get_Height() const>
     14c:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>
     150:	0c 94 8c 55 	jmp	0xab18	; 0xab18 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>
     154:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <EthernetUDP::read(char*, unsigned int)>
     158:	0c 94 61 54 	jmp	0xa8c2	; 0xa8c2 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>
     15c:	0c 94 fa 5f 	jmp	0xbff4	; 0xbff4 <menu_rtds_create_name(unsigned char, unsigned char)>
     160:	0c 94 bb 80 	jmp	0x10176	; 0x10176 <EthernetUDP::flush()>
     164:	0c 94 2c 5a 	jmp	0xb458	; 0xb458 <menu_tds_save_period(unsigned char, unsigned char)>
     168:	0c 94 b4 59 	jmp	0xb368	; 0xb368 <display_menu_tds_set_offset(unsigned char, unsigned char)>
     16c:	0c 94 7c 89 	jmp	0x112f8	; 0x112f8 <turnOffPWM.lto_priv.233+0x3c>
     170:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     174:	0c 94 e7 80 	jmp	0x101ce	; 0x101ce <EthernetUDP::remotePort()>
     178:	0c 94 b9 57 	jmp	0xaf72	; 0xaf72 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     17c:	0c 94 be 89 	jmp	0x1137c	; 0x1137c <turnOffPWM.lto_priv.233+0xc0>
     180:	0c 94 d2 24 	jmp	0x49a4	; 0x49a4 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>
     184:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <EthernetClient::operator!=(EthernetClient const&)>
     188:	0c 94 ff 31 	jmp	0x63fe	; 0x63fe <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>
     18c:	0c 94 41 25 	jmp	0x4a82	; 0x4a82 <a2d_complete(unsigned char, unsigned int)>
     190:	0c 94 5e 56 	jmp	0xacbc	; 0xacbc <tds_associate(unsigned char)>
     194:	0c 94 ba 89 	jmp	0x11374	; 0x11374 <turnOffPWM.lto_priv.233+0xb8>
     198:	0c 94 4d 54 	jmp	0xa89a	; 0xa89a <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>
     19c:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>
     1a0:	0c 94 e3 80 	jmp	0x101c6	; 0x101c6 <EthernetUDP::available()>
     1a4:	0c 94 94 89 	jmp	0x11328	; 0x11328 <turnOffPWM.lto_priv.233+0x6c>
     1a8:	0c 94 8a 89 	jmp	0x11314	; 0x11314 <turnOffPWM.lto_priv.233+0x58>
     1ac:	0c 94 7b 5b 	jmp	0xb6f6	; 0xb6f6 <click_rtds_add_sensor(unsigned char, unsigned char)>
     1b0:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1b4:	0c 94 eb 80 	jmp	0x101d6	; 0x101d6 <EthernetUDP::remoteIP()>
     1b8:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <LCDWIKI_KBV::Get_Width() const>
     1bc:	0c 94 3a 32 	jmp	0x6474	; 0x6474 <click_dialog_button_yes(unsigned char, unsigned char)>
     1c0:	0c 94 80 26 	jmp	0x4d00	; 0x4d00 <display_enable_show(unsigned char, unsigned char)>
     1c4:	0c 94 a8 89 	jmp	0x11350	; 0x11350 <turnOffPWM.lto_priv.233+0x94>
     1c8:	0c 94 39 9b 	jmp	0x13672	; 0x13672 <EthernetClient::connected()>
     1cc:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <menu_redraw_change_term_mode(unsigned char, unsigned char)>
     1d0:	0c 94 15 20 	jmp	0x402a	; 0x402a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
     1d4:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)>
     1d8:	0c 94 38 59 	jmp	0xb270	; 0xb270 <display_menu_tds_set_name(unsigned char, unsigned char)>
     1dc:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>
     1e0:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>
     1e4:	0c 94 9a 5c 	jmp	0xb934	; 0xb934 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1e8:	0c 94 dd 50 	jmp	0xa1ba	; 0xa1ba <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>
     1ec:	0c 94 21 54 	jmp	0xa842	; 0xa842 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>
     1f0:	0c 94 fc 5a 	jmp	0xb5f8	; 0xb5f8 <printf_via_mqtt(char, __file*)>
     1f4:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     1f8:	0c 94 b0 89 	jmp	0x11360	; 0x11360 <turnOffPWM.lto_priv.233+0xa4>
     1fc:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>
     200:	0c 94 90 89 	jmp	0x11320	; 0x11320 <turnOffPWM.lto_priv.233+0x64>
     204:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <get_function_budik_enabled(unsigned char)>
     208:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <EthernetClient::write(unsigned char const*, unsigned int)>
     20c:	0c 94 39 7f 	jmp	0xfe72	; 0xfe72 <HardwareSerial::write(unsigned char)>
     210:	0c 94 e9 54 	jmp	0xa9d2	; 0xa9d2 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, char*, char*)>
     214:	0c 94 f1 2b 	jmp	0x57e2	; 0x57e2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>
     218:	0c 94 0c 7f 	jmp	0xfe18	; 0xfe18 <HardwareSerial::available()>
     21c:	0c 94 38 57 	jmp	0xae70	; 0xae70 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>
     220:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>
     224:	0c 94 9a 89 	jmp	0x11334	; 0x11334 <turnOffPWM.lto_priv.233+0x78>
     228:	0c 94 71 59 	jmp	0xb2e2	; 0xb2e2 <display_menu_tds_set_period(unsigned char, unsigned char)>
     22c:	0c 94 54 5a 	jmp	0xb4a8	; 0xb4a8 <menu_tds_save_offset(unsigned char, unsigned char)>
     230:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>
     234:	0c 94 c7 9a 	jmp	0x1358e	; 0x1358e <EthernetUDP::endPacket()>
     238:	0c 94 a2 89 	jmp	0x11344	; 0x11344 <turnOffPWM.lto_priv.233+0x88>
     23c:	0c 94 6d 5c 	jmp	0xb8da	; 0xb8da <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>
     240:	0c 94 04 32 	jmp	0x6408	; 0x6408 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>
     244:	0c 94 81 80 	jmp	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
     248:	0c 94 26 32 	jmp	0x644c	; 0x644c <MenuHistoryPrevMenu()>
     24c:	0c 94 ce 58 	jmp	0xb19c	; 0xb19c <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     250:	0c 94 97 2c 	jmp	0x592e	; 0x592e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     254:	0c 94 8f 5f 	jmp	0xbf1e	; 0xbf1e <menu_rtds_update_name(unsigned char, unsigned char)>
     258:	0c 94 54 80 	jmp	0x100a8	; 0x100a8 <TwoWire::write(unsigned char const*, unsigned int)>
     25c:	0c 94 35 7e 	jmp	0xfc6a	; 0xfc6a <display_menu_rtds_update_name(unsigned char, unsigned char)>
     260:	0c 94 df 99 	jmp	0x133be	; 0x133be <EthernetUDP::parsePacket()>
     264:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <EthernetClient::flush()>
     268:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>
     26c:	0c 94 96 99 	jmp	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
     270:	0c 94 bd 51 	jmp	0xa37a	; 0xa37a <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>
     274:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <EthernetClient::available()>
     278:	0c 94 a1 20 	jmp	0x4142	; 0x4142 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>
     27c:	0c 94 53 53 	jmp	0xa6a6	; 0xa6a6 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>
     280:	0c 94 47 32 	jmp	0x648e	; 0x648e <serial_putc(char, __file*)>
     284:	0c 94 84 26 	jmp	0x4d08	; 0x4d08 <nullfce()>
     288:	0c 94 82 89 	jmp	0x11304	; 0x11304 <turnOffPWM.lto_priv.233+0x48>
     28c:	0c 94 30 32 	jmp	0x6460	; 0x6460 <dialog_set_variable_button_click(unsigned char, unsigned char)>
     290:	0c 94 5c 9b 	jmp	0x136b8	; 0x136b8 <EthernetClient::stop()>
     294:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <display_function_vertical_slider_dec(unsigned char, unsigned char)>
     298:	0c 94 da 7e 	jmp	0xfdb4	; 0xfdb4 <TwoWire::onReceiveService(unsigned char*, int)>
     29c:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     2a0:	0c 94 07 51 	jmp	0xa20e	; 0xa20e <helper_thermostat_set_mezni(int, unsigned char)>
     2a4:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <display_function_set_variable_plus()>
     2a8:	0c 94 30 9a 	jmp	0x13460	; 0x13460 <EthernetUDP::peek()>
     2ac:	0c 94 08 9d 	jmp	0x13a10	; 0x13a10 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064>
     2b0:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>
     2b4:	0c 94 2d 57 	jmp	0xae5a	; 0xae5a <click_tds_deassociate_onewire(unsigned char, unsigned char)>
     2b8:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <EthernetClient::peek()>
     2bc:	0c 94 86 89 	jmp	0x1130c	; 0x1130c <turnOffPWM.lto_priv.233+0x50>
     2c0:	0c 94 ba 9a 	jmp	0x13574	; 0x13574 <EthernetUDP::stop()>
     2c4:	0c 94 9a 53 	jmp	0xa734	; 0xa734 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)>
     2c8:	0c 94 cd 80 	jmp	0x1019a	; 0x1019a <EthernetUDP::write(unsigned char)>
     2cc:	0c 94 c2 89 	jmp	0x11384	; 0x11384 <turnOffPWM.lto_priv.233+0xc8>
     2d0:	0c 94 bf 26 	jmp	0x4d7e	; 0x4d7e <EthernetClient::read(unsigned char*, unsigned int)>
     2d4:	0c 94 e2 35 	jmp	0x6bc4	; 0x6bc4 <EthernetClient::connect(char const*, unsigned int)>
     2d8:	0c 94 e7 31 	jmp	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
     2dc:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>
     2e0:	0c 94 fe 7e 	jmp	0xfdfc	; 0xfdfc <HardwareSerial::peek()>
     2e4:	0c 94 70 53 	jmp	0xa6e0	; 0xa6e0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>
     2e8:	0c 94 48 5b 	jmp	0xb690	; 0xb690 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>
     2ec:	0c 94 45 80 	jmp	0x1008a	; 0x1008a <TwoWire::peek()>
     2f0:	0c 94 9e 89 	jmp	0x1133c	; 0x1133c <turnOffPWM.lto_priv.233+0x80>
     2f4:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <Print::availableForWrite()>
     2f8:	0c 94 d2 7e 	jmp	0xfda4	; 0xfda4 <TwoWire::available()>
     2fc:	0c 94 ac 89 	jmp	0x11358	; 0x11358 <turnOffPWM.lto_priv.233+0x9c>
     300:	0c 94 f0 9a 	jmp	0x135e0	; 0x135e0 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
     304:	0c 94 fb 80 	jmp	0x101f6	; 0x101f6 <UDP::beginMulticast(IPAddress, unsigned int)>
     308:	0c 94 80 7f 	jmp	0xff00	; 0xff00 <HardwareSerial::flush()>
     30c:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>
     310:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <EthernetClient::write(unsigned char)>
     314:	0c 94 b0 5d 	jmp	0xbb60	; 0xbb60 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
     318:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <display_element_set_string_del_char(unsigned char, unsigned char)>
     31c:	0c 94 60 53 	jmp	0xa6c0	; 0xa6c0 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>
     320:	0c 94 b1 98 	jmp	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
     324:	0c 94 c1 82 	jmp	0x10582	; 0x10582 <IPAddress::printTo(Print&) const>
     328:	0c 94 2d 60 	jmp	0xc05a	; 0xc05a <mqtt_callback(char*, unsigned char*, unsigned int)>
     32c:	0c 94 ed 5b 	jmp	0xb7da	; 0xb7da <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)>
     330:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <menu_redraw_update_temp(unsigned char, unsigned char)>
     334:	0c 94 3d 83 	jmp	0x1067a	; 0x1067a <EthernetUDP::beginPacket(char const*, unsigned int)>
     338:	0c 94 0a 2c 	jmp	0x5814	; 0x5814 <click_keyboard_number(unsigned char, unsigned char, unsigned char)>
     33c:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <returnnullfceargs(unsigned int, unsigned int)>
     340:	0c 94 08 81 	jmp	0x10210	; 0x10210 <EthernetClient::operator bool()>
     344:	0c 94 e6 7f 	jmp	0xffcc	; 0xffcc <Print::write(unsigned char const*, unsigned int)>

00000348 <__trampolines_end>:
__trampolines_end():
     348:	4e 41       	sbci	r20, 0x1E	; 30
     34a:	4e 49       	Address 0x000000000000034a is out of bounds.
.word	0xffff	; ????

0000034b <pstr_inity>:
     34b:	49 4e 49 54 59                                      INITY

00000350 <pstr_inf>:
     350:	49 4e 46                                            INF

00000353 <pwr_m10>:
     353:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     363:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000036b <pwr_p10>:
     36b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     37b:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     38b:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     39b:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3ab:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     3bb:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     3cb:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     3db:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     3eb:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     3fb:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     40b:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     41b:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     42b:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     43b:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     44b:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     45b:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     46b:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     47b:	3d 27                                               ='

0000047d <text_select_term_default_ring>:
     47d:	56 79 62 65 72 20 76 79 63 68 6f 7a 69 68 6f 20     Vyber vychoziho 
     48d:	72 65 67 75 6c 61 74 6f 72 75 00                    regulatoru.

00000498 <text_select_term_mode>:
     498:	56 79 62 65 72 20 6d 6f 64 75 20 72 65 67 75 6c     Vyber modu regul
     4a8:	61 74 6f 72 75 00                                   atoru.

000004ae <text_nastavit_pid>:
     4ae:	50 49 44 20 76 6f 6c 62 79 00                       PID volby.

000004b8 <text_assocoivat_output>:
     4b8:	4e 61 73 74 61 76 69 74 20 76 79 73 74 75 70 00     Nastavit vystup.

000004c8 <text_assocoivat>:
     4c8:	4e 61 73 74 61 76 69 74 20 63 69 64 6c 6f 00        Nastavit cidlo.

000004d7 <ring_text_setup>:
     4d7:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

000004e1 <nastaveni_rtds_subscribe>:
     4e1:	4d 51 54 54 20 70 72 69 68 6c 61 73 65 6e 69 00     MQTT prihlaseni.

000004f1 <text_rtds_novy>:
     4f1:	50 72 69 64 61 74 20 6e 6f 76 65 20 76 7a 64 61     Pridat nove vzda
     501:	6c 65 6e 65 20 63 69 64 6c 6f 00                    lene cidlo.

0000050c <text_button_mode_cool>:
     50c:	43 68 6c 61 7a 65 6e 69 00                          Chlazeni.

00000515 <text_button_mode_heat>:
     515:	54 6f 70 65 6e 69 00                                Topeni.

0000051c <nastaveni_ring_text>:
     51c:	4e 61 73 74 61 76 65 6e 69 20 72 65 67 75 6c 61     Nastaveni regula
     52c:	74 6f 72 75 00                                      toru.

00000531 <text_no>:
     531:	4e 65 00                                            Ne.

00000534 <text_yes>:
     534:	41 6e 6f 00                                         Ano.

00000538 <text_special_case>:
     538:	40 00                                               @.

0000053a <text_lower_case>:
     53a:	61 00                                               a.

0000053c <text_upper_case>:
     53c:	41 00                                               A.

0000053e <text_delete_char>:
     53e:	53 6d 61 7a 20 7a 6e 61 6b 00                       Smaz znak.

00000548 <text_klavesnice>:
     548:	4b 6c 61 76 65 73 6e 69 63 65 00                    Klavesnice.

00000553 <text_zrusit>:
     553:	5a 72 75 73 69 74 00                                Zrusit.

0000055a <text_ulozit>:
     55a:	55 6c 6f 7a 69 74 00                                Ulozit.

00000561 <text_upozorneni>:
     561:	55 70 6f 7a 6f 72 6e 65 6e 69 00                    Upozorneni.

0000056c <nastaveni_tds_offset>:
     56c:	4e 61 73 74 61 76 69 74 20 6f 66 66 73 65 74 00     Nastavit offset.

0000057c <nastaveni_name_sensor>:
     57c:	4e 61 73 74 61 76 69 74 20 6e 61 7a 65 76 00        Nastavit nazev.

0000058b <nastaveni_delete_sensor>:
     58b:	56 79 6d 61 7a 61 74 20 63 69 64 6c 6f 00           Vymazat cidlo.

00000599 <text_tds_sensors>:
     599:	56 6c 61 73 74 6e 6f 73 74 69 20 6c 6f 6b 61 6c     Vlastnosti lokal
     5a9:	6e 69 68 6f 20 63 69 64 6c 61 00                    niho cidla.

000005b4 <budik_text>:
     5b4:	42 75 64 69 6b 00                                   Budik.

000005ba <text_select_default_temp>:
     5ba:	56 79 62 65 72 20 7a 6f 62 72 61 7a 65 6e 69 20     Vyber zobrazeni 
     5ca:	74 65 70 6c 6f 6d 65 72 75 00                       teplomeru.

000005d4 <button_zpet>:
     5d4:	5a 70 65 74 00                                      Zpet.

000005d9 <nastaveni_default>:
     5d9:	52 65 73 65 74 20 6e 61 73 74 61 76 65 6e 69 00     Reset nastaveni.

000005e9 <nastaveni_nrf>:
     5e9:	4e 52 46 20 70 72 69 70 6f 6a 65 6e 69 00           NRF pripojeni.

000005f7 <nastaveni_site>:
     5f7:	4e 61 73 74 61 76 65 6e 69 20 73 69 74 65 00        Nastaveni site.

00000606 <nastaveni_text>:
     606:	4e 61 73 74 61 76 65 6e 69 00                       Nastaveni.

00000610 <funkce_text>:
     610:	46 75 6e 6b 63 65 00                                Funkce.

00000617 <regulator_text>:
     617:	52 65 67 75 6c 61 74 6f 72 00                       Regulator.

00000621 <Menu_All>:
     621:	06 06 04 f1 33 17 06 22 01 96 00 aa 00 28 00 02     ....3..".....(..
     631:	05 e7 31 08 80 26 10 06 22 01 5a 00 aa 00 28 00     ..1..&..".Z...(.
     641:	02 01 e7 31 08 80 26 06 06 22 01 1e 00 aa 00 28     ...1..&..".....(
     651:	00 02 02 e7 31 08 80 26 00 00 00 00 00 00 00 00     ....1..&........
	...
     6cd:	00 00 00 af 35 0a 00 dc 00 52 00 3c 00 03 9a d6     ....5....R.<....
     6dd:	ff ff 00 39 54 4d 54 0a 80 26 95 35 64 00 dc 00     ...9TMT..&.5d...
     6ed:	52 00 3c 00 03 00 f8 ff ff 01 39 54 4d 54 0a 80     R.<.......9TMT..
     6fd:	26 7b 35 be 00 dc 00 52 00 3c 00 03 1f 00 ff ff     &{5....R.<......
     70d:	07 39 54 4d 54 0a 80 26 5f 35 18 01 dc 00 52 00     .9TMT..&_5....R.
     71d:	3c 00 03 e0 ff ff ff 02 39 54 4d 54 0a 80 26 47     <.......9TMT..&G
     72d:	35 72 01 dc 00 52 00 3c 00 03 e0 07 ff ff 08 39     5r...R.<.......9
     73d:	54 4d 54 0a 80 26 0a 00 82 00 00 b0 5d 00 00 00     TMT..&......]...
     74d:	00 0c 84 26 80 26 18 01 22 01 00 e1 30 00 00 00     ...&.&.."...0...
     75d:	00 0c 84 26 80 26 0a 00 1e 00 00 97 2c 00 00 00     ...&.&......,...
     76d:	00 09 84 26 80 26 00 00 00 00 00 00 00 00 00 00     ...&.&..........
	...
     869:	03 05 03 00 00 00 00 00 00 00 00 00 00 e0 01 40     ...............@
     879:	01 01 ff ff 08 7a 25 71 25 68 25 82 26 06 06 f7     .....z%q%h%.&...
     889:	05 0a 00 28 00 be 00 28 00 02 00 84 26 08 80 26     ...(...(....&..&
     899:	e9 05 0a 00 64 00 be 00 28 00 02 00 84 26 08 80     ....d...(....&..
     8a9:	26 d9 05 0a 00 a0 00 be 00 28 00 02 00 84 26 08     &........(....&.
     8b9:	80 26 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32     .&........(...&2
     8c9:	08 80 26 b9 34 18 01 64 00 be 00 28 00 02 06 e7     ..&.4..d...(....
     8d9:	31 08 80 26 c8 34 18 01 28 00 be 00 28 00 02 03     1..&.4..(...(...
     8e9:	e7 31 08 80 26 ba 05 18 01 a0 00 be 00 28 00 01     .1..&........(..
     8f9:	08 e7 31 08 80 26 00 00 00 00 00 00 00 00 00 00     ..1..&..........
	...
     9a5:	18 01 22 01 00 e1 30 00 00 00 00 0c 84 26 80 26     .."...0......&.&
	...
     ac9:	00 00 07 00 01 00 00 00 00 00 02 00 00 00 00 e0     ................
     ad9:	01 40 01 01 ff ff 08 82 26 82 26 82 26 82 26 10     .@......&.&.&.&.
     ae9:	06 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32 08     .........(...&2.
     af9:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
     c05:	00 00 18 01 22 01 00 e1 30 00 00 00 00 0c 84 26     ...."...0......&
     c15:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
     c35:	00 00 b4 05 0a 00 28 00 be 00 78 00 02 00 00 00     ......(...x.....
     c45:	00 01 84 26 b5 25 f7 26 08 00 00 00 00 00 00 00     ...&.%.&........
	...
     d2d:	01 00 01 01 00 00 00 00 01 00 00 00 00 e0 01 40     ...............@
     d3d:	01 01 ff ff 08 82 26 82 26 82 26 82 26 c8 34 d4     ......&.&.&.&.4.
     d4d:	05 0a 00 dc 00 be 00 28 00 02 00 26 32 08 80 26     .......(...&2..&
	...
     e69:	18 01 22 01 00 e1 30 00 00 00 00 0c 84 26 80 26     .."...0......&.&
     e79:	9a 01 48 00 00 0f 2f 28 00 7e 00 08 84 26 80 26     ..H.../(.~...&.&
     e89:	dc 00 14 00 00 1d 2d f0 00 f0 00 08 84 26 80 26     ......-......&.&
	...
     edd:	00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03 01 00     ...#...7..<<....
     eed:	01 38 57 04 32 c5 24 08 00 00 00 00 00 00 00 00     .8W.2.$.........
	...
     f09:	00 00 00 2b 9a 01 1e 00 28 00 28 00 02 00 24 25     ...+....(.(...$%
     f19:	08 80 26 2d 9a 01 c8 00 28 00 28 00 02 00 30 25     ..&-....(.(...0%
     f29:	08 80 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     f8d:	00 00 01 00 03 00 01 02 00 00 03 00 00 00 00 e0     ................
     f9d:	01 40 01 01 ff ff 08 82 26 82 26 82 26 82 26 99     .@......&.&.&.&.
     fad:	05 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32 08     .........(...&2.
     fbd:	80 26 8b 05 18 01 be 00 be 00 28 00 02 00 2d 57     .&........(...-W
     fcd:	08 80 26 3f 34 18 01 8c 00 be 00 28 00 02 00 71     ..&?4......(...q
     fdd:	59 08 80 26 7c 05 18 01 5a 00 be 00 28 00 02 00     Y..&|...Z...(...
     fed:	38 59 08 80 26 6c 05 18 01 28 00 be 00 28 00 02     8Y..&l...(...(..
     ffd:	00 b4 59 08 80 26 00 00 00 00 00 00 00 00 00 00     ..Y..&..........
	...
    10c9:	00 00 18 01 22 01 00 e1 30 00 00 00 00 0c 84 26     ...."...0......&
    10d9:	80 26 14 00 14 00 00 b9 57 00 00 00 00 08 84 26     .&......W......&
    10e9:	80 26 14 00 14 00 00 ce 58 00 00 00 00 0c 84 26     .&......X......&
    10f9:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    11f1:	05 00 03 00 00 00 00 00 04 00 00 00 00 e0 01 40     ...............@
    1201:	01 01 ff ff 08 82 26 82 26 82 26 82 26 61 05 5a     ......&.&.&.&a.Z
    1211:	05 0a 00 c8 00 82 00 28 00 02 00 30 32 08 80 26     .......(...02..&
    1221:	53 05 96 00 c8 00 82 00 28 00 02 00 26 32 08 80     S.......(...&2..
    1231:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    132d:	64 00 2d 00 00 15 30 b4 00 28 00 08 84 26 80 26     d.-...0..(...&.&
	...
    13cd:	00 00 00 2b 3c 00 2d 00 28 00 28 00 02 00 b7 25     ...+<.-.(.(....%
    13dd:	08 80 26 2d 18 01 2d 00 28 00 28 00 02 00 d9 25     ..&-..-.(.(....%
    13ed:	08 80 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
    1451:	00 00 02 00 01 00 00 02 00 00 66 0a 00 0a 00 cc     ..........f.....
    1461:	01 04 01 06 e0 ff 08 82 26 82 26 82 26 82 26 48     ........&.&.&.&H
    1471:	05 5a 05 0a 00 c8 00 82 00 28 00 02 00 30 32 08     .Z.......(...02.
    1481:	80 26 53 05 96 00 c8 00 82 00 28 00 02 00 26 32     .&S.......(...&2
    1491:	08 80 26 3e 05 2c 01 c8 00 82 00 28 00 02 00 cc     ..&>.,.....(....
    14a1:	2b 08 80 26 3c 05 40 01 23 00 28 00 28 00 02 00     +..&<.@.#.(.(...
    14b1:	83 25 08 80 26 3a 05 6d 01 23 00 28 00 28 00 02     .%..&:.m.#.(.(..
    14c1:	01 83 25 08 80 26 38 05 9a 01 23 00 28 00 28 00     ..%..&8...#.(.(.
    14d1:	02 02 83 25 08 80 26 00 00 00 00 00 00 00 00 00     ...%..&.........
	...
    158d:	00 00 0a 00 23 00 00 8f 2f 2c 01 28 00 08 84 26     ....#.../,.(...&
    159d:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    1651:	00 0a 00 50 00 1e 00 1e 00 02 28 28 02 0a 00 00     ...P......((....
    1661:	03 8d 25 f1 2b 86 25 08 00 00 00 00 00 00 00 00     ..%.+.%.........
	...
    16b5:	06 00 01 00 00 00 01 00 67 0a 00 0a 00 cc 01 04     ........g.......
    16c5:	01 06 e0 ff 08 82 26 82 26 82 26 82 26 61 05 5a     ......&.&.&.&a.Z
    16d5:	05 0a 00 c8 00 82 00 28 00 02 00 30 32 08 80 26     .......(...02..&
    16e5:	53 05 96 00 c8 00 82 00 28 00 02 00 26 32 08 80     S.......(...&2..
    16f5:	26 3e 05 2c 01 c8 00 82 00 28 00 02 00 cc 2b 08     &>.,.....(....+.
    1705:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    17f1:	0a 00 23 00 00 8f 2f 2c 01 28 00 08 84 26 80 26     ..#.../,.(...&.&
	...
    18b1:	00 00 00 0a 00 3c 00 1e 00 1e 00 02 28 28 02 09     .....<......((..
    18c1:	00 00 02 a9 25 0a 2c b3 25 08 00 00 00 00 00 00     ....%.,.%.......
	...
    1915:	00 00 03 00 01 00 00 00 01 00 65 0a 00 0a 00 cc     ..........e.....
    1925:	01 04 01 06 e0 ff 08 82 26 82 26 82 26 82 26 61     ........&.&.&.&a
    1935:	05 34 05 1e 00 3c 00 64 00 28 00 02 00 3a 32 08     .4...<.d.(...:2.
    1945:	80 26 31 05 fa 00 3c 00 64 00 28 00 02 00 26 32     .&1...<.d.(...&2
    1955:	08 80 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
    1a51:	00 00 14 00 23 00 00 b7 2b 00 00 00 00 08 84 26     ....#...+......&
    1a61:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    1b79:	02 00 01 00 00 00 00 00 64 32 00 32 00 7c 01 8c     ........d2.2.|..
    1b89:	00 06 e0 ff 08 82 26 82 26 82 26 82 26 17 06 d4     ......&.&.&.&...
    1b99:	05 0a 00 dc 00 be 00 28 00 02 00 26 32 08 80 26     .......(...&2..&
    1ba9:	1c 05 0a 00 a0 00 be 00 28 00 01 09 e7 31 08 80     ........(....1..
    1bb9:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    1c41:	00 15 05 f0 00 5a 00 64 00 28 00 01 00 f8 ff ff     .....Z.d.(......
    1c51:	03 21 54 8c 55 0a 60 53 0c 05 68 01 5a 00 64 00     .!T.U.`S..h.Z.d.
    1c61:	28 00 01 1f 00 ff ff 05 21 54 8c 55 0a 60 53 00     (.......!T.U.`S.
	...
    1cb5:	18 01 22 01 00 e1 30 00 00 00 00 0c 84 26 80 26     .."...0......&.&
    1cc5:	8c 00 05 00 00 3a 55 00 00 00 00 08 84 26 80 26     .....:U......&.&
    1cd5:	18 01 28 00 00 da 30 8c 00 28 00 08 84 26 60 53     ..(...0..(...&`S
	...
    1d29:	00 0a 00 28 00 be 00 28 00 01 01 01 00 01 01 00     ...(...(........
    1d39:	01 a9 54 ff 31 67 25 08 0a 00 64 00 be 00 28 00     ..T.1g%...d...(.
    1d49:	01 01 01 00 01 01 00 01 9a 53 fa 31 67 25 08 2b     .........S.1g%.+
    1d59:	a4 01 28 00 28 00 28 00 02 00 b7 25 08 60 53 2d     ..(.(.(....%.`S-
    1d69:	f0 00 28 00 28 00 28 00 02 00 d9 25 08 60 53 00     ..(.(.(....%.`S.
	...
    1dd9:	00 00 02 02 03 00 02 02 00 00 05 00 00 00 00 e0     ................
    1de9:	01 40 01 01 ff ff 08 82 26 82 26 82 26 ed 53 b9     .@......&.&.&.S.
    1df9:	34 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32 08     4........(...&2.
    1e09:	80 26 f1 04 0a 00 28 00 be 00 28 00 01 00 7b 5b     .&....(...(...{[
    1e19:	08 80 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
    1f15:	00 00 dc 00 14 00 00 1d 2d f0 00 f0 00 08 84 26     ........-......&
    1f25:	80 26 18 01 22 01 00 e1 30 00 00 00 00 0c 84 26     .&.."...0......&
    1f35:	80 26 9a 01 48 00 01 0f 2f 28 00 7e 00 08 84 26     .&..H.../(.~...&
    1f45:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    1f89:	00 00 00 e6 00 23 00 aa 00 37 00 01 3c 3c 00 03     .....#...7..<<..
    1f99:	01 01 04 6d 5c 48 5b d2 24 08 00 00 00 00 00 00     ...m\H[.$.......
	...
    1fb9:	00 2b 9a 01 1e 00 28 00 28 00 02 01 24 25 08 80     .+....(.(...$%..
    1fc9:	26 2d 9a 01 c8 00 28 00 28 00 02 01 30 25 08 80     &-....(.(...0%..
    1fd9:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    203d:	02 00 03 00 01 02 00 00 06 00 00 00 00 e0 01 40     ...............@
    204d:	01 01 ff ff 08 82 26 82 26 82 26 82 26 b9 34 d4     ......&.&.&.&.4.
    205d:	05 0a 00 dc 00 be 00 28 00 02 00 26 32 08 80 26     .......(...&2..&
    206d:	8b 05 18 01 5a 00 be 00 28 00 02 00 53 53 08 80     ....Z...(...SS..
    207d:	26 7c 05 18 01 28 00 be 00 28 00 02 00 35 7e 08     &|...(...(...5~.
    208d:	80 26 e1 04 18 01 8c 00 be 00 28 00 02 00 2a 60     .&........(...*`
    209d:	08 80 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
    2179:	14 00 14 00 00 9a 5c 00 00 00 00 0c 84 26 80 26     ......\......&.&
	...
    229d:	00 00 04 00 01 00 00 00 00 00 07 00 00 00 00 e0     ................
    22ad:	01 40 01 01 ff ff 08 82 26 82 26 82 26 82 26 ba     .@......&.&.&.&.
    22bd:	05 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32 08     .........(...&2.
    22cd:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    23d9:	00 00 18 01 22 01 00 e1 30 00 00 00 00 0c 84 26     ...."...0......&
    23e9:	80 26 9a 01 48 00 02 0f 2f 28 00 56 00 08 84 26     .&..H.../(.V...&
    23f9:	80 26 05 00 1e 00 00 1d 2d cc 01 b4 00 08 84 26     .&......-......&
    2409:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    247d:	00 2b 9a 01 1e 00 28 00 28 00 02 02 24 25 08 80     .+....(.(...$%..
    248d:	26 2d 9a 01 a0 00 28 00 28 00 02 02 30 25 08 80     &-....(.(...0%..
    249d:	26 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     &...............
	...
    24e1:	00 00 0a 00 28 00 78 00 3c 00 01 01 e0 07 ff ff     ....(.x.<.......
    24f1:	82 50 02 03 02 02 00 ed 5b 15 53 bf 24 b9 24 08     .P......[.S.$.$.
    2501:	01 00 03 00 00 02 00 01 08 00 00 00 00 e0 01 40     ...............@
    2511:	01 01 ff ff 08 82 26 82 26 82 26 82 26 d7 04 d4     ......&.&.&.&...
    2521:	05 0a 00 dc 00 be 00 28 00 02 00 26 32 08 80 26     .......(...&2..&
    2531:	7c 05 18 01 28 00 be 00 28 00 01 00 84 26 08 80     |...(...(....&..
    2541:	26 c8 04 18 01 64 00 be 00 28 00 01 00 84 26 08     &....d...(....&.
    2551:	80 26 b8 04 18 01 a0 00 be 00 28 00 01 00 84 26     .&........(....&
    2561:	08 80 26 ae 04 18 01 dc 00 be 00 28 00 01 00 84     ..&........(....
    2571:	26 08 80 26 00 00 00 00 00 00 00 00 00 00 00 00     &..&............
	...
    263d:	18 01 22 01 00 e1 30 00 00 00 00 0c 84 26 80 26     .."...0......&.&
    264d:	8c 00 05 00 00 3a 55 00 00 00 00 08 84 26 80 26     .....:U......&.&
	...
    2761:	00 00 05 00 02 00 00 00 00 00 09 00 00 00 00 e0     ................
    2771:	01 40 01 01 ff ff 08 82 26 82 26 82 26 82 26 98     .@......&.&.&.&.
    2781:	04 d4 05 0a 00 dc 00 be 00 28 00 02 00 26 32 08     .........(...&2.
    2791:	80 26 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .&..............
	...
    29a5:	00 00 e6 00 28 00 c8 00 28 00 02 01 e0 07 ff ff     ....(...(.......
    29b5:	01 32 00 05 01 ff 05 03 27 dd 50 67 25 70 53 08     .2......'.Pg%pS.
    29c5:	01 00 00 00 00 00 00 01 68 0a 00 0a 00 cc 01 2c     ........h......,
    29d5:	01 06 e0 ff 08 82 26 82 26 82 26 82 26 7d 04 d4     ......&.&.&.&}..
    29e5:	05 0a 00 dc 00 be 00 28 00 02 00 26 32 08 80 26     .......(...&2..&
	...
    2c09:	0a 00 28 00 78 00 32 00 02 01 e0 07 ff ff 82 3c     ..(.x.2........<
    2c19:	02 03 03 ff 05 e9 54 61 54 67 25 b3 24 08 01 00     ......TaTg%.$...
    2c29:	00 00 00 00 00 01 0a 0a 00 0a 00 cc 01 2c 01 06     .............,..
    2c39:	e0 ff 08 82 26 82 26 82 26 82 26 00 00 00 00 00     ....&.&.&.&.....
	...

00003108 <keyboad_number_char_special>:
    3108:	30 31 32 33 34 35 36 37 38 39 21 40 23 24 25 5e     0123456789!@#$%^
    3118:	26 2a 7c 2b 2d 5f 3f 2c 2e 2f                       &*|+-_?,./

00003122 <keyboad_number_char_lower>:
    3122:	61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70     abcdefghijklmnop
    3132:	71 72 73 74 75 76 77 78 79 7a                       qrstuvwxyz

0000313c <keyboad_number_char_upper>:
    313c:	41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50     ABCDEFGHIJKLMNOP
    314c:	51 52 53 54 55 56 57 58 59 5a                       QRSTUVWXYZ

00003156 <network_name>:
    3156:	6e 65 74 77 6f 72 6b 2f 6e 61 6d 65 00              network/name.

00003163 <network_mqtt_key>:
    3163:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 6b 65 79     network/mqtt_key
	...

00003174 <network_mqtt_user>:
    3174:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 75 73 65     network/mqtt_use
    3184:	72 00                                               r.

00003186 <network_mqtt_port>:
    3186:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 70 6f 72     network/mqtt_por
    3196:	74 00                                               t.

00003198 <network_mqtt_host>:
    3198:	6e 65 74 77 6f 72 6b 2f 6d 71 74 74 5f 68 6f 73     network/mqtt_hos
    31a8:	74 00                                               t.

000031aa <network_ntp>:
    31aa:	6e 65 74 77 6f 72 6b 2f 6e 74 70 00                 network/ntp.

000031b6 <network_dns>:
    31b6:	6e 65 74 77 6f 72 6b 2f 64 6e 73 00                 network/dns.

000031c2 <network_gw>:
    31c2:	6e 65 74 77 6f 72 6b 2f 67 77 00                    network/gw.

000031cd <network_netmask>:
    31cd:	6e 65 74 77 6f 72 6b 2f 6e 65 74 6d 61 73 6b 00     network/netmask.

000031dd <network_mac>:
    31dd:	6e 65 74 77 6f 72 6b 2f 6d 61 63 00                 network/mac.

000031e9 <global_time_offset>:
    31e9:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 5f     global/time/ntp_
    31f9:	6f 66 66 73 65 74 00                                offset.

00003200 <global_time_ntp>:
    3200:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 6e 74 70 00     global/time/ntp.

00003210 <global_time_set>:
    3210:	67 6c 6f 62 61 6c 2f 74 69 6d 65 2f 73 65 74 00     global/time/set.

00003220 <termbig_header_out>:
    3220:	2f 74 65 72 6d 62 69 67 2d 6f 75 74 2f 00           /termbig-out/.

0000322e <termbig_subscribe>:
    322e:	2f 63 74 6c 2f 74 65 72 6d 62 69 67 2f 73 75 62     /ctl/termbig/sub
    323e:	73 63 72 69 62 65 00                                scribe.

00003245 <thermctl_subscribe>:
    3245:	2f 63 74 6c 2f 74 68 65 72 6d 63 74 6c 2f 73 75     /ctl/thermctl/su
    3255:	62 73 63 72 69 62 65 00                             bscribe.

0000325d <lightctl_header_out>:
    325d:	2f 6c 69 67 68 74 63 74 6c 2d 6f 75 74 2f 00        /lightctl-out/.

0000326c <thermctl_header_in>:
    326c:	2f 74 68 65 72 6d 63 74 6c 2d 69 6e 2f 00           /thermctl-in/.

0000327a <LCDWIKI_KBV::start(unsigned int)::ST7796S_regValues>:
    327a:	f0 01 c3 f0 01 96 36 01 68 3a 01 05 b0 01 80 53     ......6.h:.....S
    328a:	01 2c 51 01 14 b6 02 20 02 b5 04 02 03 00 04 b1     .,Q.... ........
    329a:	02 80 10 b4 01 00 b7 01 c6 c5 01 24 e4 01 31 e8     ...........$..1.
    32aa:	08 40 8a 00 00 29 19 a5 33 c2 00 a7 00 e0 0e f0     .@...)..3.......
    32ba:	09 13 12 12 2b 3c 44 4b 1b 18 17 1d 21 e1 0e f0     ....+<DK....!...
    32ca:	09 13 0c 0d 27 3b 44 4d 0b 17 17 1d 21 36 01 ec     ....';DM....!6..
    32da:	f0 01 c3 f0 01 69 13 00 11 00 29 00                 .....i....).

000032e6 <text_rtc_cas>:
    32e6:	52 54 43 20 76 6e 69 74 72 6e 69 20 68 6f 64 69     RTC vnitrni hodi
    32f6:	6e 79 00                                            ny.

000032f9 <text_ntp_cas>:
    32f9:	4e 54 50 20 69 6e 74 65 72 6e 65 74 6f 76 79 20     NTP internetovy 
    3309:	63 61 73 00                                         cas.

0000330d <text_pid_regulator>:
    330d:	50 49 44 20 72 65 67 75 6c 61 74 6f 72 00           PID regulator.

0000331b <text_nrf_rozhrani>:
    331b:	4e 52 46 20 72 6f 7a 68 72 61 6e 69 00              NRF rozhrani.

00003328 <text_rest_rozhrani>:
    3328:	52 45 53 54 20 41 50 49 20 72 6f 7a 68 72 61 6e     REST API rozhran
    3338:	69 00                                               i.

0000333a <thermctl_header_out>:
    333a:	2f 74 68 65 72 6d 63 74 6c 2d 6f 75 74 2f 00        /thermctl-out/.

00003349 <text_mqtt_rozhrani>:
    3349:	4d 51 54 54 20 72 6f 7a 68 72 61 6e 69 00           MQTT rozhrani.

00003357 <text_ethernet_rozhrani>:
    3357:	45 74 68 65 72 6e 65 74 20 72 6f 7a 68 72 61 6e     Ethernet rozhran
    3367:	69 00                                               i.

00003369 <text_onewire_hledam>:
    3369:	31 77 69 72 65 20 68 6c 65 64 61 6d 00              1wire hledam.

00003376 <text_onewire_rozhrani>:
    3376:	31 77 69 72 65 20 72 6f 7a 68 72 61 6e 69 00        1wire rozhrani.

00003385 <text_touchscreen>:
    3385:	74 6f 75 63 68 73 63 72 65 65 6e 00                 touchscreen.

00003391 <text_nastaveni_systemu>:
    3391:	6e 61 73 74 61 76 65 6e 69 20 73 79 73 74 65 6d     nastaveni system
    33a1:	75 00                                               u.

000033a3 <text_test_eeprom>:
    33a3:	54 65 73 74 20 53 50 49 2d 45 45 50 52 4f 4d 00     Test SPI-EEPROM.

000033b3 <text_ok>:
    33b3:	4f 4b 00                                            OK.

000033b6 <text_test_ram>:
    33b6:	54 65 73 74 20 53 50 49 2d 52 41 4d 00              Test SPI-RAM.

000033c3 <text_bezny_start>:
    33c3:	42 65 7a 6e 79 20 73 74 61 72 74 00                 Bezny start.

000033cf <text_vychozi_nastaveni>:
    33cf:	56 79 63 68 6f 7a 69 20 6e 61 73 74 61 76 65 6e     Vychozi nastaven
    33df:	69 00                                               i.

000033e1 <text_vnitrni_ochrany>:
    33e1:	56 6e 69 74 72 6e 69 20 6f 63 68 72 61 6e 79 00     Vnitrni ochrany.

000033f1 <term_title>:
    33f1:	50 6f 6b 6f 6a 6f 76 79 20 72 65 67 75 6c 61 74     Pokojovy regulat
    3401:	6f 72 20 76 33 00                                   or v3.

00003407 <regulator_default_text>:
    3407:	56 79 63 68 6f 7a 69 20 72 65 67 75 6c 61 74 6f     Vychozi regulato
    3417:	72 3a 00                                            r:.

0000341a <current_time>:
    341a:	41 6b 74 75 61 6c 6e 69 20 63 61 73 00              Aktualni cas.

00003427 <current_temp>:
    3427:	41 6b 74 75 61 6c 6e 69 20 74 65 70 6c 6f 74 61     Aktualni teplota
    3437:	3a 00                                               :.

00003439 <text_err>:
    3439:	45 72 72 6f 72 00                                   Error.

0000343f <nastaveni_tds_period>:
    343f:	4d 65 72 69 63 69 20 70 65 72 69 6f 64 61 00        Merici perioda.

0000344e <temp_offset_short>:
    344e:	6f 66 66 73 65 74 3a 00                             offset:.

00003456 <text_online>:
    3456:	4f 6e 6c 69 6e 65 00                                Online.

0000345d <text_last_update>:
    345d:	50 6f 73 6c 65 64 6e 69 20 61 6b 74 75 61 6c 69     Posledni aktuali
    346d:	7a 61 63 65 3a 00                                   zace:.

00003473 <current_temp_short>:
    3473:	74 65 70 6c 6f 74 61 3a 00                          teplota:.

0000347c <text_nazev>:
    347c:	4e 61 7a 65 76 3a 00                                Nazev:.

00003483 <text_nastavit_tds>:
    3483:	4e 61 73 74 61 76 69 74 20 54 44 53 20 63 69 64     Nastavit TDS cid
    3493:	6c 6f 00                                            lo.

00003496 <text_not_used>:
    3496:	4e 65 6e 69 20 70 6f 75 7a 69 74 6f 00              Neni pouzito.

000034a3 <text_associovat_tds>:
    34a3:	50 72 69 72 61 64 69 74 20 6e 6f 76 65 20 63 69     Priradit nove ci
    34b3:	64 6c 6f 00                                         dlo.

000034b7 <text_rtds_prefix>:
    34b7:	2f 00                                               /.

000034b9 <nastaveni_rtds>:
    34b9:	56 7a 64 61 6c 65 6e 65 20 63 69 64 6c 61 00        Vzdalene cidla.

000034c8 <nastaveni_onewire>:
    34c8:	4c 6f 6b 61 6c 6e 69 20 63 69 64 6c 61 00           Lokalni cidla.

000034d6 <text_term_do_activate>:
    34d6:	41 6b 74 69 76 6f 76 61 74 20 6e 6f 76 79 20 72     Aktivovat novy r
    34e6:	65 67 75 6c 61 74 6f 72 3f 00                       egulator?.

000034f0 <text_term_deactive>:
    34f0:	4e 65 61 6b 74 69 76 6e 69 00                       Neaktivni.

000034fa <text_term_active>:
    34fa:	41 6b 74 69 76 6e 69 00                             Aktivni.

00003502 <text_change_default_ring>:
    3502:	5a 6d 65 6e 69 74 20 76 79 63 68 6f 7a 69 20 72     Zmenit vychozi r
    3512:	65 67 75 6c 61 74 6f 72 75 00                       egulatoru.

0000351c <text_button_term_fan>:
    351c:	46 41 4e 00                                         FAN.

00003520 <text_current_ring_mode>:
    3520:	41 6b 74 75 61 6c 6e 69 20 6d 6f 64 20 72 65 67     Aktualni mod reg
    3530:	75 6c 61 74 6f 72 75 00                             ulatoru.

00003538 <text_button_term_man_comment>:
    3538:	52 75 63 6e 69 20 6f 76 6c 61 64 61 6e 69 00        Rucni ovladani.

00003547 <text_button_term_man>:
    3547:	4d 41 4e 00                                         MAN.

0000354b <text_button_term_prog_comment>:
    354b:	41 75 74 6f 6d 61 74 69 63 6b 79 20 70 72 6f 67     Automaticky prog
    355b:	72 61 6d 00                                         ram.

0000355f <text_button_term_prog>:
    355f:	50 52 4f 47 00                                      PROG.

00003564 <text_button_term_min_comment>:
    3564:	43 68 6c 61 7a 65 6e 69 2c 20 62 65 7a 20 72 65     Chlazeni, bez re
    3574:	67 75 6c 61 63 65 00                                gulace.

0000357b <text_button_term_min>:
    357b:	4d 49 4e 00                                         MIN.

0000357f <text_button_term_max_comment>:
    357f:	5a 61 70 6e 75 74 6f 2c 20 62 65 7a 20 72 65 67     Zapnuto, bez reg
    358f:	75 6c 61 63 65 00                                   ulace.

00003595 <text_button_term_max>:
    3595:	4d 41 58 00                                         MAX.

00003599 <text_button_term_off_comment>:
    3599:	56 79 70 6e 75 74 6f 2c 20 6f 63 68 72 61 6e 6e     Vypnuto, ochrann
    35a9:	79 20 6d 6f 64 00                                   y mod.

000035af <text_button_term_off>:
    35af:	4f 46 46 00                                         OFF.

000035b3 <status_know_devices>:
    35b3:	73 74 61 74 75 73 2f 6b 6e 6f 77 5f 64 65 76 69     status/know_devi
    35c3:	63 65 73 00                                         ces.

000035c7 <_ZL10network_ip.lto_priv.232>:
    35c7:	6e 65 74 77 6f 72 6b 2f 69 70 00                    network/ip.

000035d2 <status_mqtt_process>:
    35d2:	73 74 61 74 75 73 2f 6d 71 74 74 2f 70 72 6f 63     status/mqtt/proc
    35e2:	65 73 73 00                                         ess.

000035e6 <status_mqtt_receive>:
    35e6:	73 74 61 74 75 73 2f 6d 71 74 74 2f 72 65 63 65     status/mqtt/rece
    35f6:	69 76 65 00                                         ive.

000035fa <status_mqtt_error>:
    35fa:	73 74 61 74 75 73 2f 6d 71 74 74 2f 65 72 72 6f     status/mqtt/erro
    360a:	72 00                                               r.

0000360c <status_mqtt_send>:
    360c:	73 74 61 74 75 73 2f 6d 71 74 74 2f 73 65 6e 64     status/mqtt/send
	...

0000361d <port_to_mode_PGM>:
    361d:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.

0000362d <digital_pin_to_timer_PGM>:
    362d:	00 00 00 0a 0b 0c 00 00 00 00 00 00 08 04 05 06     ................
	...
    3661:	00 03                                               ..

00003663 <lcd_font>:
    3663:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    3673:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    3683:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    3693:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    36a3:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    36b3:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    36c3:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    36d3:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    36e3:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    36f3:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    3703:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    3713:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    3723:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    3733:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    3743:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    3753:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    3763:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    3773:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    3783:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    3793:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    37a3:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    37b3:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    37c3:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    37d3:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    37e3:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    37f3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    3803:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    3813:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    3823:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    3833:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    3843:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    3853:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    3863:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    3873:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    3883:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    3893:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    38a3:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    38b3:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    38c3:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    38d3:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    38e3:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    38f3:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
    3903:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    3913:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    3923:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
    3933:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    3943:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
    3953:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
    3963:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
    3973:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    3983:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    3993:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    39a3:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    39b3:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    39c3:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    39d3:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
    39e3:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
    39f3:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
    3a03:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
    3a13:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
    3a23:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
    3a33:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
    3a43:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
    3a53:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
    3a63:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
    3a73:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
    3a83:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
    3a93:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
    3aa3:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
    3ab3:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
    3ac3:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
    3ad3:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
    3ae3:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
    3af3:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
    3b03:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
    3b13:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
    3b23:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
    3b33:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
    3b43:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
    3b53:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00003b5e <port_to_input_PGM>:
    3b5e:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.

00003b6e <digital_pin_to_bit_mask_PGM>:
    3b6e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
    3b7e:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
    3b8e:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
    3b9e:	08 10 20 40 80 20                                   .. @. 

00003ba4 <port_to_output_PGM>:
    3ba4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.

00003bb4 <digital_pin_to_port_PGM>:
    3bb4:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
    3bc4:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
    3bd4:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
    3be4:	06 06 06 06 06 07                                   ......

00003bea <daysInMonth>:
    3bea:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

00003bf6 <__ctors_start>:
__ctors_start():
    3bf6:	08 9d       	mul	r16, r8

00003bf8 <__ctors_end>:
__dtors_end():
    3bf8:	11 24       	eor	r1, r1
    3bfa:	1f be       	out	0x3f, r1	; 63
    3bfc:	cf ef       	ldi	r28, 0xFF	; 255
    3bfe:	d1 e2       	ldi	r29, 0x21	; 33
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	00 e0       	ldi	r16, 0x00	; 0
    3c06:	0c bf       	out	0x3c, r16	; 60

00003c08 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
    3c08:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
    3c0a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
    3c0c:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
    3c0e:	e6 e5       	ldi	r30, 0x56	; 86
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
    3c10:	ff e6       	ldi	r31, 0x6F	; 111
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
    3c12:	01 e0       	ldi	r16, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
    3c14:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
    3c18:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
    3c1a:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
    3c1c:	a0 35       	cpi	r26, 0x50	; 80
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
    3c1e:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
    3c20:	d9 f7       	brne	.-10     	; 0x3c18 <__do_copy_data+0x10>

00003c22 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    3c22:	23 e1       	ldi	r18, 0x13	; 19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    3c24:	a0 e5       	ldi	r26, 0x50	; 80
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    3c26:	b8 e0       	ldi	r27, 0x08	; 8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    3c28:	01 c0       	rjmp	.+2      	; 0x3c2c <.do_clear_bss_start>

00003c2a <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    3c2a:	1d 92       	st	X+, r1

00003c2c <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    3c2c:	af 33       	cpi	r26, 0x3F	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    3c2e:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    3c30:	e1 f7       	brne	.-8      	; 0x3c2a <.do_clear_bss_loop>

00003c32 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    3c32:	1d e1       	ldi	r17, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    3c34:	cc ef       	ldi	r28, 0xFC	; 252
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    3c36:	dd e1       	ldi	r29, 0x1D	; 29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
    3c38:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    3c3a:	06 c0       	rjmp	.+12     	; 0x3c48 <__do_global_ctors+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    3c3c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
    3c3e:	01 09       	sbc	r16, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
    3c40:	80 2f       	mov	r24, r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    3c42:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    3c44:	0e 94 00 b6 	call	0x16c00	; 0x16c00 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    3c48:	cb 3f       	cpi	r28, 0xFB	; 251
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    3c4a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
    3c4e:	08 07       	cpc	r16, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    3c50:	a9 f7       	brne	.-22     	; 0x3c3c <__do_global_ctors+0xa>
    3c52:	0e 94 17 a1 	call	0x1422e	; 0x1422e <main>
    3c56:	0c 94 a9 b7 	jmp	0x16f52	; 0x16f52 <_exit>

00003c5a <__bad_interrupt>:
__vector_38():
    3c5a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003c5e <EthernetClient::flush()>:
_ZN14EthernetClient5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:124
  return b;
}

void EthernetClient::flush() {
  ::flush(_sock);
}
    3c5e:	08 95       	ret

00003c60 <EthernetClient::write(unsigned char)>:
_ZN14EthernetClient5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:73
  }

  return 1;
}

size_t EthernetClient::write(uint8_t b) {
    3c60:	cf 93       	push	r28
    3c62:	df 93       	push	r29
    3c64:	1f 92       	push	r1
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:74
  return write(&b, 1);
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	ed 91       	ld	r30, X+
    3c70:	fc 91       	ld	r31, X
    3c72:	02 80       	ldd	r0, Z+2	; 0x02
    3c74:	f3 81       	ldd	r31, Z+3	; 0x03
    3c76:	e0 2d       	mov	r30, r0
    3c78:	41 e0       	ldi	r20, 0x01	; 1
    3c7a:	50 e0       	ldi	r21, 0x00	; 0
    3c7c:	be 01       	movw	r22, r28
    3c7e:	6f 5f       	subi	r22, 0xFF	; 255
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:75
}
    3c84:	0f 90       	pop	r0
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	08 95       	ret

00003c8c <EthernetClient::operator!=(EthernetClient const&)>:
_ZN14EthernetClientneERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.h:28
  virtual void flush();
  virtual void stop();
  virtual uint8_t connected();
  virtual operator bool();
  virtual bool operator==(const EthernetClient&);
  virtual bool operator!=(const EthernetClient& rhs) { return !this->operator==(rhs); };
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	ed 91       	ld	r30, X+
    3c90:	fc 91       	ld	r31, X
    3c92:	02 8c       	ldd	r0, Z+26	; 0x1a
    3c94:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3c96:	e0 2d       	mov	r30, r0
    3c98:	19 95       	eicall
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	89 27       	eor	r24, r25
    3c9e:	08 95       	ret

00003ca0 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	08 95       	ret

00003ca6 <EthernetUDP::read(char*, unsigned int)>:
_ZN11EthernetUDP4readEPcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:94
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	ed 91       	ld	r30, X+
    3caa:	fc 91       	ld	r31, X
    3cac:	04 8c       	ldd	r0, Z+28	; 0x1c
    3cae:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3cb0:	e0 2d       	mov	r30, r0
    3cb2:	19 94       	eijmp

00003cb4 <LCDWIKI_KBV::Get_Height() const>:
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:744

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
}
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	84 89       	ldd	r24, Z+20	; 0x14
    3cb8:	95 89       	ldd	r25, Z+21	; 0x15
    3cba:	08 95       	ret

00003cbc <LCDWIKI_KBV::Get_Width() const>:
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:738

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
}
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	82 89       	ldd	r24, Z+18	; 0x12
    3cc0:	93 89       	ldd	r25, Z+19	; 0x13
    3cc2:	08 95       	ret

00003cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Fill_RectEiiiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:623
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_KBV::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    3cc4:	4f 92       	push	r4
    3cc6:	5f 92       	push	r5
    3cc8:	6f 92       	push	r6
    3cca:	7f 92       	push	r7
    3ccc:	8f 92       	push	r8
    3cce:	9f 92       	push	r9
    3cd0:	af 92       	push	r10
    3cd2:	bf 92       	push	r11
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	ec 01       	movw	r28, r24
    3ce6:	5a 01       	movw	r10, r20
    3ce8:	27 01       	movw	r4, r14
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:625
	int16_t end;
	if (w < 0) 
    3cea:	37 ff       	sbrs	r19, 7
    3cec:	05 c0       	rjmp	.+10     	; 0x3cf8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    3cee:	62 0f       	add	r22, r18
    3cf0:	73 1f       	adc	r23, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:627
	{
        w = -w;
    3cf2:	31 95       	neg	r19
    3cf4:	21 95       	neg	r18
    3cf6:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:630
        x -= w;
    }                           //+ve w
    end = x + w;
    3cf8:	7b 01       	movw	r14, r22
    3cfa:	e2 0e       	add	r14, r18
    3cfc:	f3 1e       	adc	r15, r19
    3cfe:	6b 01       	movw	r12, r22
    3d00:	77 ff       	sbrs	r23, 7
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3d04:	d1 2c       	mov	r13, r1
    3d06:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:635
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    3d08:	e8 81       	ld	r30, Y
    3d0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d0c:	06 84       	ldd	r0, Z+14	; 0x0e
    3d0e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d10:	e0 2d       	mov	r30, r0
    3d12:	ce 01       	movw	r24, r28
    3d14:	19 95       	eicall
    3d16:	8e 15       	cp	r24, r14
    3d18:	9f 05       	cpc	r25, r15
    3d1a:	44 f4       	brge	.+16     	; 0x3d2c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x68>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:637
    {
        end = Get_Width();
    3d1c:	e8 81       	ld	r30, Y
    3d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d20:	06 84       	ldd	r0, Z+14	; 0x0e
    3d22:	f7 85       	ldd	r31, Z+15	; 0x0f
    3d24:	e0 2d       	mov	r30, r0
    3d26:	ce 01       	movw	r24, r28
    3d28:	19 95       	eicall
    3d2a:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:639
    }
    w = end - x;
    3d2c:	47 01       	movw	r8, r14
    3d2e:	8c 18       	sub	r8, r12
    3d30:	9d 08       	sbc	r9, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:640
    if (h < 0) 
    3d32:	17 ff       	sbrs	r17, 7
    3d34:	05 c0       	rjmp	.+10     	; 0x3d40 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3d36:	a0 0e       	add	r10, r16
    3d38:	b1 1e       	adc	r11, r17
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:642
	{
        h = -h;
    3d3a:	11 95       	neg	r17
    3d3c:	01 95       	neg	r16
    3d3e:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:645
        y -= h;
    }                           //+ve h
    end = y + h;
    3d40:	0a 0d       	add	r16, r10
    3d42:	1b 1d       	adc	r17, r11
    3d44:	b7 fe       	sbrs	r11, 7
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3d48:	b1 2c       	mov	r11, r1
    3d4a:	a1 2c       	mov	r10, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:650
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    3d4c:	e8 81       	ld	r30, Y
    3d4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d50:	04 84       	ldd	r0, Z+12	; 0x0c
    3d52:	f5 85       	ldd	r31, Z+13	; 0x0d
    3d54:	e0 2d       	mov	r30, r0
    3d56:	ce 01       	movw	r24, r28
    3d58:	19 95       	eicall
    3d5a:	80 17       	cp	r24, r16
    3d5c:	91 07       	cpc	r25, r17
    3d5e:	44 f4       	brge	.+16     	; 0x3d70 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0xac>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:652
    {
        end = Get_Height();
    3d60:	e8 81       	ld	r30, Y
    3d62:	f9 81       	ldd	r31, Y+1	; 0x01
    3d64:	04 84       	ldd	r0, Z+12	; 0x0c
    3d66:	f5 85       	ldd	r31, Z+13	; 0x0d
    3d68:	e0 2d       	mov	r30, r0
    3d6a:	ce 01       	movw	r24, r28
    3d6c:	19 95       	eicall
    3d6e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:654
    }
    h = end - y;
    3d70:	38 01       	movw	r6, r16
    3d72:	6a 18       	sub	r6, r10
    3d74:	7b 08       	sbc	r7, r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:655
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);//set area
    3d76:	01 50       	subi	r16, 0x01	; 1
    3d78:	11 09       	sbc	r17, r1
    3d7a:	97 01       	movw	r18, r14
    3d7c:	21 50       	subi	r18, 0x01	; 1
    3d7e:	31 09       	sbc	r19, r1
    3d80:	e8 81       	ld	r30, Y
    3d82:	f9 81       	ldd	r31, Y+1	; 0x01
    3d84:	06 80       	ldd	r0, Z+6	; 0x06
    3d86:	f7 81       	ldd	r31, Z+7	; 0x07
    3d88:	e0 2d       	mov	r30, r0
    3d8a:	a5 01       	movw	r20, r10
    3d8c:	b6 01       	movw	r22, r12
    3d8e:	ce 01       	movw	r24, r28
    3d90:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:656
	CS_ACTIVE;
    3d92:	ee a5       	ldd	r30, Y+46	; 0x2e
    3d94:	ff a5       	ldd	r31, Y+47	; 0x2f
    3d96:	80 81       	ld	r24, Z
    3d98:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d9a:	89 23       	and	r24, r25
    3d9c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:657
    if(lcd_driver == ID_932X)
    3d9e:	88 8d       	ldd	r24, Y+24	; 0x18
    3da0:	99 8d       	ldd	r25, Y+25	; 0x19
    3da2:	89 2b       	or	r24, r25
    3da4:	c9 f4       	brne	.+50     	; 0x3dd8 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x114>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:659
	{
		writeCmd8(ILI932X_START_OSC);
    3da6:	e8 a9       	ldd	r30, Y+48	; 0x30
    3da8:	f9 a9       	ldd	r31, Y+49	; 0x31
    3daa:	80 81       	ld	r24, Z
    3dac:	9b ad       	ldd	r25, Y+59	; 0x3b
    3dae:	89 23       	and	r24, r25
    3db0:	80 83       	st	Z, r24
    3db2:	12 b8       	out	0x02, r1	; 2
    3db4:	ea a9       	ldd	r30, Y+50	; 0x32
    3db6:	fb a9       	ldd	r31, Y+51	; 0x33
    3db8:	80 81       	ld	r24, Z
    3dba:	9c ad       	ldd	r25, Y+60	; 0x3c
    3dbc:	89 23       	and	r24, r25
    3dbe:	80 83       	st	Z, r24
    3dc0:	ea a9       	ldd	r30, Y+50	; 0x32
    3dc2:	fb a9       	ldd	r31, Y+51	; 0x33
    3dc4:	80 81       	ld	r24, Z
    3dc6:	98 ad       	ldd	r25, Y+56	; 0x38
    3dc8:	89 2b       	or	r24, r25
    3dca:	80 83       	st	Z, r24
    3dcc:	e8 a9       	ldd	r30, Y+48	; 0x30
    3dce:	f9 a9       	ldd	r31, Y+49	; 0x31
    3dd0:	80 81       	ld	r24, Z
    3dd2:	9f a9       	ldd	r25, Y+55	; 0x37
    3dd4:	89 2b       	or	r24, r25
    3dd6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:662
			
	}
	writeCmd8(CC);	
    3dd8:	e8 a9       	ldd	r30, Y+48	; 0x30
    3dda:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ddc:	80 81       	ld	r24, Z
    3dde:	9b ad       	ldd	r25, Y+59	; 0x3b
    3de0:	89 23       	and	r24, r25
    3de2:	80 83       	st	Z, r24
    3de4:	88 a1       	ldd	r24, Y+32	; 0x20
    3de6:	82 b9       	out	0x02, r24	; 2
    3de8:	ea a9       	ldd	r30, Y+50	; 0x32
    3dea:	fb a9       	ldd	r31, Y+51	; 0x33
    3dec:	80 81       	ld	r24, Z
    3dee:	9c ad       	ldd	r25, Y+60	; 0x3c
    3df0:	89 23       	and	r24, r25
    3df2:	80 83       	st	Z, r24
    3df4:	ea a9       	ldd	r30, Y+50	; 0x32
    3df6:	fb a9       	ldd	r31, Y+51	; 0x33
    3df8:	80 81       	ld	r24, Z
    3dfa:	98 ad       	ldd	r25, Y+56	; 0x38
    3dfc:	89 2b       	or	r24, r25
    3dfe:	80 83       	st	Z, r24
    3e00:	e8 a9       	ldd	r30, Y+48	; 0x30
    3e02:	f9 a9       	ldd	r31, Y+49	; 0x31
    3e04:	80 81       	ld	r24, Z
    3e06:	9f a9       	ldd	r25, Y+55	; 0x37
    3e08:	89 2b       	or	r24, r25
    3e0a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:663
	if (h > w) 
    3e0c:	86 14       	cp	r8, r6
    3e0e:	97 04       	cpc	r9, r7
    3e10:	2c f0       	brlt	.+10     	; 0x3e1c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
    3e12:	96 2d       	mov	r25, r6
    3e14:	87 2d       	mov	r24, r7
    3e16:	34 01       	movw	r6, r8
    3e18:	89 2e       	mov	r8, r25
    3e1a:	98 2e       	mov	r9, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:669
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    3e1c:	18 14       	cp	r1, r8
    3e1e:	19 04       	cpc	r1, r9
    3e20:	0c f5       	brge	.+66     	; 0x3e64 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1a0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:671
	{
		end = w;
    3e22:	c3 01       	movw	r24, r6
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:674
		do 
		{
   			writeData16(color);//set color data
    3e24:	52 b8       	out	0x02, r5	; 2
    3e26:	ea a9       	ldd	r30, Y+50	; 0x32
    3e28:	fb a9       	ldd	r31, Y+51	; 0x33
    3e2a:	20 81       	ld	r18, Z
    3e2c:	3c ad       	ldd	r19, Y+60	; 0x3c
    3e2e:	23 23       	and	r18, r19
    3e30:	20 83       	st	Z, r18
    3e32:	ea a9       	ldd	r30, Y+50	; 0x32
    3e34:	fb a9       	ldd	r31, Y+51	; 0x33
    3e36:	20 81       	ld	r18, Z
    3e38:	38 ad       	ldd	r19, Y+56	; 0x38
    3e3a:	23 2b       	or	r18, r19
    3e3c:	20 83       	st	Z, r18
    3e3e:	42 b8       	out	0x02, r4	; 2
    3e40:	ea a9       	ldd	r30, Y+50	; 0x32
    3e42:	fb a9       	ldd	r31, Y+51	; 0x33
    3e44:	20 81       	ld	r18, Z
    3e46:	3c ad       	ldd	r19, Y+60	; 0x3c
    3e48:	23 23       	and	r18, r19
    3e4a:	20 83       	st	Z, r18
    3e4c:	ea a9       	ldd	r30, Y+50	; 0x32
    3e4e:	fb a9       	ldd	r31, Y+51	; 0x33
    3e50:	20 81       	ld	r18, Z
    3e52:	38 ad       	ldd	r19, Y+56	; 0x38
    3e54:	23 2b       	or	r18, r19
    3e56:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:675
        } while (--end != 0);
    3e58:	01 97       	sbiw	r24, 0x01	; 1
    3e5a:	21 f7       	brne	.-56     	; 0x3e24 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x160>
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	88 1a       	sub	r8, r24
    3e60:	91 08       	sbc	r9, r1
    3e62:	dc cf       	rjmp	.-72     	; 0x3e1c <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x158>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:677
	}
	if(lcd_driver == ID_932X)
    3e64:	88 8d       	ldd	r24, Y+24	; 0x18
    3e66:	99 8d       	ldd	r25, Y+25	; 0x19
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	51 f5       	brne	.+84     	; 0x3ec0 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1fc>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:679
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    3e6c:	0c 89       	ldd	r16, Y+20	; 0x14
    3e6e:	1d 89       	ldd	r17, Y+21	; 0x15
    3e70:	01 50       	subi	r16, 0x01	; 1
    3e72:	11 09       	sbc	r17, r1
    3e74:	2a 89       	ldd	r18, Y+18	; 0x12
    3e76:	3b 89       	ldd	r19, Y+19	; 0x13
    3e78:	21 50       	subi	r18, 0x01	; 1
    3e7a:	31 09       	sbc	r19, r1
    3e7c:	e8 81       	ld	r30, Y
    3e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e80:	06 80       	ldd	r0, Z+6	; 0x06
    3e82:	f7 81       	ldd	r31, Z+7	; 0x07
    3e84:	e0 2d       	mov	r30, r0
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	40 e0       	ldi	r20, 0x00	; 0
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	ce 01       	movw	r24, r28
    3e90:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:685
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    3e92:	ee a5       	ldd	r30, Y+46	; 0x2e
    3e94:	ff a5       	ldd	r31, Y+47	; 0x2f
    3e96:	80 81       	ld	r24, Z
    3e98:	9e a9       	ldd	r25, Y+54	; 0x36
    3e9a:	89 2b       	or	r24, r25
    3e9c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:686
}
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	bf 90       	pop	r11
    3eb0:	af 90       	pop	r10
    3eb2:	9f 90       	pop	r9
    3eb4:	8f 90       	pop	r8
    3eb6:	7f 90       	pop	r7
    3eb8:	6f 90       	pop	r6
    3eba:	5f 90       	pop	r5
    3ebc:	4f 90       	pop	r4
    3ebe:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:681
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	39 f7       	brne	.-50     	; 0x3e92 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>
    3ec4:	ee a5       	ldd	r30, Y+46	; 0x2e
    3ec6:	ff a5       	ldd	r31, Y+47	; 0x2f
Set_LR():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:408
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_KBV::Set_LR(void)
{
	CS_ACTIVE;
    3ec8:	80 81       	ld	r24, Z
    3eca:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ecc:	89 23       	and	r24, r25
    3ece:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:409
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    3ed0:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ed2:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ed4:	80 81       	ld	r24, Z
    3ed6:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ed8:	89 23       	and	r24, r25
    3eda:	80 83       	st	Z, r24
    3edc:	84 e0       	ldi	r24, 0x04	; 4
    3ede:	82 b9       	out	0x02, r24	; 2
    3ee0:	ea a9       	ldd	r30, Y+50	; 0x32
    3ee2:	fb a9       	ldd	r31, Y+51	; 0x33
    3ee4:	80 81       	ld	r24, Z
    3ee6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ee8:	89 23       	and	r24, r25
    3eea:	80 83       	st	Z, r24
    3eec:	ea a9       	ldd	r30, Y+50	; 0x32
    3eee:	fb a9       	ldd	r31, Y+51	; 0x33
    3ef0:	80 81       	ld	r24, Z
    3ef2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ef4:	89 2b       	or	r24, r25
    3ef6:	80 83       	st	Z, r24
    3ef8:	e8 a9       	ldd	r30, Y+48	; 0x30
    3efa:	f9 a9       	ldd	r31, Y+49	; 0x31
    3efc:	80 81       	ld	r24, Z
    3efe:	9f a9       	ldd	r25, Y+55	; 0x37
    3f00:	89 2b       	or	r24, r25
    3f02:	80 83       	st	Z, r24
    3f04:	8a 89       	ldd	r24, Y+18	; 0x12
    3f06:	9b 89       	ldd	r25, Y+19	; 0x13
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	92 b9       	out	0x02, r25	; 2
    3f0c:	ea a9       	ldd	r30, Y+50	; 0x32
    3f0e:	fb a9       	ldd	r31, Y+51	; 0x33
    3f10:	80 81       	ld	r24, Z
    3f12:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f14:	89 23       	and	r24, r25
    3f16:	80 83       	st	Z, r24
    3f18:	ea a9       	ldd	r30, Y+50	; 0x32
    3f1a:	fb a9       	ldd	r31, Y+51	; 0x33
    3f1c:	80 81       	ld	r24, Z
    3f1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3f20:	89 2b       	or	r24, r25
    3f22:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:410
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    3f24:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f26:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f28:	80 81       	ld	r24, Z
    3f2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f2c:	89 23       	and	r24, r25
    3f2e:	80 83       	st	Z, r24
    3f30:	85 e0       	ldi	r24, 0x05	; 5
    3f32:	82 b9       	out	0x02, r24	; 2
    3f34:	ea a9       	ldd	r30, Y+50	; 0x32
    3f36:	fb a9       	ldd	r31, Y+51	; 0x33
    3f38:	80 81       	ld	r24, Z
    3f3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f3c:	89 23       	and	r24, r25
    3f3e:	80 83       	st	Z, r24
    3f40:	ea a9       	ldd	r30, Y+50	; 0x32
    3f42:	fb a9       	ldd	r31, Y+51	; 0x33
    3f44:	80 81       	ld	r24, Z
    3f46:	98 ad       	ldd	r25, Y+56	; 0x38
    3f48:	89 2b       	or	r24, r25
    3f4a:	80 83       	st	Z, r24
    3f4c:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f4e:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f50:	80 81       	ld	r24, Z
    3f52:	9f a9       	ldd	r25, Y+55	; 0x37
    3f54:	89 2b       	or	r24, r25
    3f56:	80 83       	st	Z, r24
    3f58:	8a 89       	ldd	r24, Y+18	; 0x12
    3f5a:	81 50       	subi	r24, 0x01	; 1
    3f5c:	82 b9       	out	0x02, r24	; 2
    3f5e:	ea a9       	ldd	r30, Y+50	; 0x32
    3f60:	fb a9       	ldd	r31, Y+51	; 0x33
    3f62:	80 81       	ld	r24, Z
    3f64:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f66:	89 23       	and	r24, r25
    3f68:	80 83       	st	Z, r24
    3f6a:	ea a9       	ldd	r30, Y+50	; 0x32
    3f6c:	fb a9       	ldd	r31, Y+51	; 0x33
    3f6e:	80 81       	ld	r24, Z
    3f70:	98 ad       	ldd	r25, Y+56	; 0x38
    3f72:	89 2b       	or	r24, r25
    3f74:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:411
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    3f76:	e8 a9       	ldd	r30, Y+48	; 0x30
    3f78:	f9 a9       	ldd	r31, Y+49	; 0x31
    3f7a:	80 81       	ld	r24, Z
    3f7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f7e:	89 23       	and	r24, r25
    3f80:	80 83       	st	Z, r24
    3f82:	88 e0       	ldi	r24, 0x08	; 8
    3f84:	82 b9       	out	0x02, r24	; 2
    3f86:	ea a9       	ldd	r30, Y+50	; 0x32
    3f88:	fb a9       	ldd	r31, Y+51	; 0x33
    3f8a:	80 81       	ld	r24, Z
    3f8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f8e:	89 23       	and	r24, r25
    3f90:	80 83       	st	Z, r24
    3f92:	ea a9       	ldd	r30, Y+50	; 0x32
    3f94:	fb a9       	ldd	r31, Y+51	; 0x33
    3f96:	80 81       	ld	r24, Z
    3f98:	98 ad       	ldd	r25, Y+56	; 0x38
    3f9a:	89 2b       	or	r24, r25
    3f9c:	80 83       	st	Z, r24
    3f9e:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fa0:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fa2:	80 81       	ld	r24, Z
    3fa4:	9f a9       	ldd	r25, Y+55	; 0x37
    3fa6:	89 2b       	or	r24, r25
    3fa8:	80 83       	st	Z, r24
    3faa:	8c 89       	ldd	r24, Y+20	; 0x14
    3fac:	9d 89       	ldd	r25, Y+21	; 0x15
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	92 b9       	out	0x02, r25	; 2
    3fb2:	ea a9       	ldd	r30, Y+50	; 0x32
    3fb4:	fb a9       	ldd	r31, Y+51	; 0x33
    3fb6:	80 81       	ld	r24, Z
    3fb8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fba:	89 23       	and	r24, r25
    3fbc:	80 83       	st	Z, r24
    3fbe:	ea a9       	ldd	r30, Y+50	; 0x32
    3fc0:	fb a9       	ldd	r31, Y+51	; 0x33
    3fc2:	80 81       	ld	r24, Z
    3fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    3fc6:	89 2b       	or	r24, r25
    3fc8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:412
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    3fca:	e8 a9       	ldd	r30, Y+48	; 0x30
    3fcc:	f9 a9       	ldd	r31, Y+49	; 0x31
    3fce:	80 81       	ld	r24, Z
    3fd0:	9b ad       	ldd	r25, Y+59	; 0x3b
    3fd2:	89 23       	and	r24, r25
    3fd4:	80 83       	st	Z, r24
    3fd6:	89 e0       	ldi	r24, 0x09	; 9
    3fd8:	82 b9       	out	0x02, r24	; 2
    3fda:	ea a9       	ldd	r30, Y+50	; 0x32
    3fdc:	fb a9       	ldd	r31, Y+51	; 0x33
    3fde:	80 81       	ld	r24, Z
    3fe0:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fe2:	89 23       	and	r24, r25
    3fe4:	80 83       	st	Z, r24
    3fe6:	ea a9       	ldd	r30, Y+50	; 0x32
    3fe8:	fb a9       	ldd	r31, Y+51	; 0x33
    3fea:	80 81       	ld	r24, Z
    3fec:	98 ad       	ldd	r25, Y+56	; 0x38
    3fee:	89 2b       	or	r24, r25
    3ff0:	80 83       	st	Z, r24
    3ff2:	e8 a9       	ldd	r30, Y+48	; 0x30
    3ff4:	f9 a9       	ldd	r31, Y+49	; 0x31
    3ff6:	80 81       	ld	r24, Z
    3ff8:	9f a9       	ldd	r25, Y+55	; 0x37
    3ffa:	89 2b       	or	r24, r25
    3ffc:	80 83       	st	Z, r24
    3ffe:	8c 89       	ldd	r24, Y+20	; 0x14
    4000:	81 50       	subi	r24, 0x01	; 1
    4002:	82 b9       	out	0x02, r24	; 2
    4004:	ea a9       	ldd	r30, Y+50	; 0x32
    4006:	fb a9       	ldd	r31, Y+51	; 0x33
    4008:	80 81       	ld	r24, Z
    400a:	9c ad       	ldd	r25, Y+60	; 0x3c
    400c:	89 23       	and	r24, r25
    400e:	80 83       	st	Z, r24
    4010:	ea a9       	ldd	r30, Y+50	; 0x32
    4012:	fb a9       	ldd	r31, Y+51	; 0x33
    4014:	80 81       	ld	r24, Z
    4016:	98 ad       	ldd	r25, Y+56	; 0x38
    4018:	89 2b       	or	r24, r25
    401a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:413
	CS_IDLE;
    401c:	ee a5       	ldd	r30, Y+46	; 0x2e
    401e:	ff a5       	ldd	r31, Y+47	; 0x2f
    4020:	80 81       	ld	r24, Z
    4022:	9e a9       	ldd	r25, Y+54	; 0x36
    4024:	89 2b       	or	r24, r25
    4026:	80 83       	st	Z, r24
    4028:	34 cf       	rjmp	.-408    	; 0x3e92 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)+0x1ce>

0000402a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_KBV9Draw_PixeEiij():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:610
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_KBV::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    402a:	af 92       	push	r10
    402c:	bf 92       	push	r11
    402e:	cf 92       	push	r12
    4030:	df 92       	push	r13
    4032:	ef 92       	push	r14
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:611
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    403e:	77 fd       	sbrc	r23, 7
    4040:	75 c0       	rjmp	.+234    	; 0x412c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4042:	57 fd       	sbrc	r21, 7
    4044:	73 c0       	rjmp	.+230    	; 0x412c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4046:	c3 2e       	mov	r12, r19
    4048:	d2 2e       	mov	r13, r18
    404a:	5a 01       	movw	r10, r20
    404c:	7b 01       	movw	r14, r22
    404e:	ec 01       	movw	r28, r24
    4050:	e8 81       	ld	r30, Y
    4052:	f9 81       	ldd	r31, Y+1	; 0x01
    4054:	06 84       	ldd	r0, Z+14	; 0x0e
    4056:	f7 85       	ldd	r31, Z+15	; 0x0f
    4058:	e0 2d       	mov	r30, r0
    405a:	19 95       	eicall
    405c:	8e 15       	cp	r24, r14
    405e:	9f 05       	cpc	r25, r15
    4060:	0c f4       	brge	.+2      	; 0x4064 <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x3a>
    4062:	64 c0       	rjmp	.+200    	; 0x412c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
    4064:	e8 81       	ld	r30, Y
    4066:	f9 81       	ldd	r31, Y+1	; 0x01
    4068:	04 84       	ldd	r0, Z+12	; 0x0c
    406a:	f5 85       	ldd	r31, Z+13	; 0x0d
    406c:	e0 2d       	mov	r30, r0
    406e:	ce 01       	movw	r24, r28
    4070:	19 95       	eicall
    4072:	8a 15       	cp	r24, r10
    4074:	9b 05       	cpc	r25, r11
    4076:	0c f4       	brge	.+2      	; 0x407a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x50>
    4078:	59 c0       	rjmp	.+178    	; 0x412c <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)+0x102>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:615
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    407a:	e8 81       	ld	r30, Y
    407c:	f9 81       	ldd	r31, Y+1	; 0x01
    407e:	06 80       	ldd	r0, Z+6	; 0x06
    4080:	f7 81       	ldd	r31, Z+7	; 0x07
    4082:	e0 2d       	mov	r30, r0
    4084:	85 01       	movw	r16, r10
    4086:	97 01       	movw	r18, r14
    4088:	a5 01       	movw	r20, r10
    408a:	b7 01       	movw	r22, r14
    408c:	ce 01       	movw	r24, r28
    408e:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:616
	CS_ACTIVE;
    4090:	ee a5       	ldd	r30, Y+46	; 0x2e
    4092:	ff a5       	ldd	r31, Y+47	; 0x2f
    4094:	80 81       	ld	r24, Z
    4096:	9a ad       	ldd	r25, Y+58	; 0x3a
    4098:	89 23       	and	r24, r25
    409a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:617
	writeCmdData16(CC, color);
    409c:	98 a1       	ldd	r25, Y+32	; 0x20
    409e:	29 a1       	ldd	r18, Y+33	; 0x21
    40a0:	e8 a9       	ldd	r30, Y+48	; 0x30
    40a2:	f9 a9       	ldd	r31, Y+49	; 0x31
    40a4:	80 81       	ld	r24, Z
    40a6:	3b ad       	ldd	r19, Y+59	; 0x3b
    40a8:	83 23       	and	r24, r19
    40aa:	80 83       	st	Z, r24
    40ac:	22 b9       	out	0x02, r18	; 2
    40ae:	ea a9       	ldd	r30, Y+50	; 0x32
    40b0:	fb a9       	ldd	r31, Y+51	; 0x33
    40b2:	80 81       	ld	r24, Z
    40b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    40b6:	82 23       	and	r24, r18
    40b8:	80 83       	st	Z, r24
    40ba:	ea a9       	ldd	r30, Y+50	; 0x32
    40bc:	fb a9       	ldd	r31, Y+51	; 0x33
    40be:	80 81       	ld	r24, Z
    40c0:	28 ad       	ldd	r18, Y+56	; 0x38
    40c2:	82 2b       	or	r24, r18
    40c4:	80 83       	st	Z, r24
    40c6:	92 b9       	out	0x02, r25	; 2
    40c8:	ea a9       	ldd	r30, Y+50	; 0x32
    40ca:	fb a9       	ldd	r31, Y+51	; 0x33
    40cc:	80 81       	ld	r24, Z
    40ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    40d0:	89 23       	and	r24, r25
    40d2:	80 83       	st	Z, r24
    40d4:	ea a9       	ldd	r30, Y+50	; 0x32
    40d6:	fb a9       	ldd	r31, Y+51	; 0x33
    40d8:	80 81       	ld	r24, Z
    40da:	98 ad       	ldd	r25, Y+56	; 0x38
    40dc:	89 2b       	or	r24, r25
    40de:	80 83       	st	Z, r24
    40e0:	e8 a9       	ldd	r30, Y+48	; 0x30
    40e2:	f9 a9       	ldd	r31, Y+49	; 0x31
    40e4:	80 81       	ld	r24, Z
    40e6:	9f a9       	ldd	r25, Y+55	; 0x37
    40e8:	89 2b       	or	r24, r25
    40ea:	80 83       	st	Z, r24
    40ec:	c2 b8       	out	0x02, r12	; 2
    40ee:	ea a9       	ldd	r30, Y+50	; 0x32
    40f0:	fb a9       	ldd	r31, Y+51	; 0x33
    40f2:	80 81       	ld	r24, Z
    40f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    40f6:	89 23       	and	r24, r25
    40f8:	80 83       	st	Z, r24
    40fa:	ea a9       	ldd	r30, Y+50	; 0x32
    40fc:	fb a9       	ldd	r31, Y+51	; 0x33
    40fe:	80 81       	ld	r24, Z
    4100:	98 ad       	ldd	r25, Y+56	; 0x38
    4102:	89 2b       	or	r24, r25
    4104:	80 83       	st	Z, r24
    4106:	d2 b8       	out	0x02, r13	; 2
    4108:	ea a9       	ldd	r30, Y+50	; 0x32
    410a:	fb a9       	ldd	r31, Y+51	; 0x33
    410c:	80 81       	ld	r24, Z
    410e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4110:	89 23       	and	r24, r25
    4112:	80 83       	st	Z, r24
    4114:	ea a9       	ldd	r30, Y+50	; 0x32
    4116:	fb a9       	ldd	r31, Y+51	; 0x33
    4118:	80 81       	ld	r24, Z
    411a:	98 ad       	ldd	r25, Y+56	; 0x38
    411c:	89 2b       	or	r24, r25
    411e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:618
	CS_IDLE;
    4120:	ee a5       	ldd	r30, Y+46	; 0x2e
    4122:	ff a5       	ldd	r31, Y+47	; 0x2f
    4124:	80 81       	ld	r24, Z
    4126:	9e a9       	ldd	r25, Y+54	; 0x36
    4128:	89 2b       	or	r24, r25
    412a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:619
}
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	ff 90       	pop	r15
    4136:	ef 90       	pop	r14
    4138:	df 90       	pop	r13
    413a:	cf 90       	pop	r12
    413c:	bf 90       	pop	r11
    413e:	af 90       	pop	r10
    4140:	08 95       	ret

00004142 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_KBV9Read_GRAMEiiPjii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:518
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_KBV::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    4142:	7f 92       	push	r7
    4144:	8f 92       	push	r8
    4146:	9f 92       	push	r9
    4148:	af 92       	push	r10
    414a:	bf 92       	push	r11
    414c:	cf 92       	push	r12
    414e:	df 92       	push	r13
    4150:	ef 92       	push	r14
    4152:	ff 92       	push	r15
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	cf 93       	push	r28
    415a:	df 93       	push	r29
    415c:	ec 01       	movw	r28, r24
    415e:	59 01       	movw	r10, r18
    4160:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:520
	uint16_t ret, dummy;
    int16_t n = w * h;
    4162:	0e 9d       	mul	r16, r14
    4164:	60 01       	movw	r12, r0
    4166:	0f 9d       	mul	r16, r15
    4168:	d0 0c       	add	r13, r0
    416a:	1e 9d       	mul	r17, r14
    416c:	d0 0c       	add	r13, r0
    416e:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:522
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    4170:	87 01       	movw	r16, r14
    4172:	04 0f       	add	r16, r20
    4174:	15 1f       	adc	r17, r21
    4176:	01 50       	subi	r16, 0x01	; 1
    4178:	11 09       	sbc	r17, r1
    417a:	26 0f       	add	r18, r22
    417c:	37 1f       	adc	r19, r23
    417e:	21 50       	subi	r18, 0x01	; 1
    4180:	31 09       	sbc	r19, r1
    4182:	e8 81       	ld	r30, Y
    4184:	f9 81       	ldd	r31, Y+1	; 0x01
    4186:	06 80       	ldd	r0, Z+6	; 0x06
    4188:	f7 81       	ldd	r31, Z+7	; 0x07
    418a:	e0 2d       	mov	r30, r0
    418c:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    418e:	77 24       	eor	r7, r7
    4190:	7a 94       	dec	r7
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:523
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    4192:	1c 14       	cp	r1, r12
    4194:	1d 04       	cpc	r1, r13
    4196:	0c f0       	brlt	.+2      	; 0x419a <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x58>
    4198:	0a c1       	rjmp	.+532    	; 0x43ae <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x26c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:525
	{
        CS_ACTIVE;
    419a:	ee a5       	ldd	r30, Y+46	; 0x2e
    419c:	ff a5       	ldd	r31, Y+47	; 0x2f
    419e:	80 81       	ld	r24, Z
    41a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    41a2:	89 23       	and	r24, r25
    41a4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:526
		writeCmd16(RC);
    41a6:	e8 a9       	ldd	r30, Y+48	; 0x30
    41a8:	f9 a9       	ldd	r31, Y+49	; 0x31
    41aa:	80 81       	ld	r24, Z
    41ac:	9b ad       	ldd	r25, Y+59	; 0x3b
    41ae:	89 23       	and	r24, r25
    41b0:	80 83       	st	Z, r24
    41b2:	9a a1       	ldd	r25, Y+34	; 0x22
    41b4:	8b a1       	ldd	r24, Y+35	; 0x23
    41b6:	82 b9       	out	0x02, r24	; 2
    41b8:	ea a9       	ldd	r30, Y+50	; 0x32
    41ba:	fb a9       	ldd	r31, Y+51	; 0x33
    41bc:	80 81       	ld	r24, Z
    41be:	2c ad       	ldd	r18, Y+60	; 0x3c
    41c0:	82 23       	and	r24, r18
    41c2:	80 83       	st	Z, r24
    41c4:	ea a9       	ldd	r30, Y+50	; 0x32
    41c6:	fb a9       	ldd	r31, Y+51	; 0x33
    41c8:	80 81       	ld	r24, Z
    41ca:	28 ad       	ldd	r18, Y+56	; 0x38
    41cc:	82 2b       	or	r24, r18
    41ce:	80 83       	st	Z, r24
    41d0:	92 b9       	out	0x02, r25	; 2
    41d2:	ea a9       	ldd	r30, Y+50	; 0x32
    41d4:	fb a9       	ldd	r31, Y+51	; 0x33
    41d6:	80 81       	ld	r24, Z
    41d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    41da:	89 23       	and	r24, r25
    41dc:	80 83       	st	Z, r24
    41de:	ea a9       	ldd	r30, Y+50	; 0x32
    41e0:	fb a9       	ldd	r31, Y+51	; 0x33
    41e2:	80 81       	ld	r24, Z
    41e4:	98 ad       	ldd	r25, Y+56	; 0x38
    41e6:	89 2b       	or	r24, r25
    41e8:	80 83       	st	Z, r24
    41ea:	e8 a9       	ldd	r30, Y+48	; 0x30
    41ec:	f9 a9       	ldd	r31, Y+49	; 0x31
    41ee:	80 81       	ld	r24, Z
    41f0:	9f a9       	ldd	r25, Y+55	; 0x37
    41f2:	89 2b       	or	r24, r25
    41f4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:527
        setReadDir();
    41f6:	81 b1       	in	r24, 0x01	; 1
    41f8:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:528
		if(lcd_driver == ID_932X)
    41fa:	88 8d       	ldd	r24, Y+24	; 0x18
    41fc:	99 8d       	ldd	r25, Y+25	; 0x19
    41fe:	89 2b       	or	r24, r25
    4200:	09 f0       	breq	.+2      	; 0x4204 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc2>
    4202:	67 c0       	rjmp	.+206    	; 0x42d2 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x190>
    4204:	f5 01       	movw	r30, r10
    4206:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4208:	42 e0       	ldi	r20, 0x02	; 2
    420a:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:534
				{
					read8(r);
    420c:	ac a9       	ldd	r26, Y+52	; 0x34
    420e:	bd a9       	ldd	r27, Y+53	; 0x35
    4210:	2c 91       	ld	r18, X
    4212:	3d ad       	ldd	r19, Y+61	; 0x3d
    4214:	23 23       	and	r18, r19
    4216:	2c 93       	st	X, r18
    4218:	20 b1       	in	r18, 0x00	; 0
    421a:	ac a9       	ldd	r26, Y+52	; 0x34
    421c:	bd a9       	ldd	r27, Y+53	; 0x35
    421e:	2c 91       	ld	r18, X
    4220:	39 ad       	ldd	r19, Y+57	; 0x39
    4222:	23 2b       	or	r18, r19
    4224:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:535
					read8(r);
    4226:	ac a9       	ldd	r26, Y+52	; 0x34
    4228:	bd a9       	ldd	r27, Y+53	; 0x35
    422a:	2c 91       	ld	r18, X
    422c:	3d ad       	ldd	r19, Y+61	; 0x3d
    422e:	23 23       	and	r18, r19
    4230:	2c 93       	st	X, r18
    4232:	20 b1       	in	r18, 0x00	; 0
    4234:	ac a9       	ldd	r26, Y+52	; 0x34
    4236:	bd a9       	ldd	r27, Y+53	; 0x35
    4238:	2c 91       	ld	r18, X
    423a:	39 ad       	ldd	r19, Y+57	; 0x39
    423c:	23 2b       	or	r18, r19
    423e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:536
					read8(r);
    4240:	ac a9       	ldd	r26, Y+52	; 0x34
    4242:	bd a9       	ldd	r27, Y+53	; 0x35
    4244:	2c 91       	ld	r18, X
    4246:	3d ad       	ldd	r19, Y+61	; 0x3d
    4248:	23 23       	and	r18, r19
    424a:	2c 93       	st	X, r18
    424c:	20 b1       	in	r18, 0x00	; 0
    424e:	ac a9       	ldd	r26, Y+52	; 0x34
    4250:	bd a9       	ldd	r27, Y+53	; 0x35
    4252:	3c 91       	ld	r19, X
    4254:	69 ad       	ldd	r22, Y+57	; 0x39
    4256:	36 2b       	or	r19, r22
    4258:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:537
					read8(g);
    425a:	ac a9       	ldd	r26, Y+52	; 0x34
    425c:	bd a9       	ldd	r27, Y+53	; 0x35
    425e:	3c 91       	ld	r19, X
    4260:	6d ad       	ldd	r22, Y+61	; 0x3d
    4262:	36 23       	and	r19, r22
    4264:	3c 93       	st	X, r19
    4266:	60 b1       	in	r22, 0x00	; 0
    4268:	ac a9       	ldd	r26, Y+52	; 0x34
    426a:	bd a9       	ldd	r27, Y+53	; 0x35
    426c:	3c 91       	ld	r19, X
    426e:	79 ad       	ldd	r23, Y+57	; 0x39
    4270:	37 2b       	or	r19, r23
    4272:	3c 93       	st	X, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    4274:	41 30       	cpi	r20, 0x01	; 1
    4276:	51 05       	cpc	r21, r1
    4278:	49 f5       	brne	.+82     	; 0x42cc <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x18a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:539
					read8(r);
					read8(r);
					read8(r);
					read8(g);
				}
				*block++ = (r<<8 | g);
    427a:	32 2f       	mov	r19, r18
    427c:	26 2f       	mov	r18, r22
    427e:	21 93       	st	Z+, r18
    4280:	31 93       	st	Z+, r19
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:540
				n--;
    4282:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:530
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    4284:	09 f0       	breq	.+2      	; 0x4288 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x146>
    4286:	c0 cf       	rjmp	.-128    	; 0x4208 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xc6>
    4288:	cc 0c       	add	r12, r12
    428a:	dd 1c       	adc	r13, r13
    428c:	ac 0c       	add	r10, r12
    428e:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:542
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    4290:	0c 89       	ldd	r16, Y+20	; 0x14
    4292:	1d 89       	ldd	r17, Y+21	; 0x15
    4294:	01 50       	subi	r16, 0x01	; 1
    4296:	11 09       	sbc	r17, r1
    4298:	2a 89       	ldd	r18, Y+18	; 0x12
    429a:	3b 89       	ldd	r19, Y+19	; 0x13
    429c:	21 50       	subi	r18, 0x01	; 1
    429e:	31 09       	sbc	r19, r1
    42a0:	e8 81       	ld	r30, Y
    42a2:	f9 81       	ldd	r31, Y+1	; 0x01
    42a4:	06 80       	ldd	r0, Z+6	; 0x06
    42a6:	f7 81       	ldd	r31, Z+7	; 0x07
    42a8:	e0 2d       	mov	r30, r0
    42aa:	50 e0       	ldi	r21, 0x00	; 0
    42ac:	40 e0       	ldi	r20, 0x00	; 0
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	ce 01       	movw	r24, r28
    42b4:	19 95       	eicall
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:565
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    42b6:	ee a5       	ldd	r30, Y+46	; 0x2e
    42b8:	ff a5       	ldd	r31, Y+47	; 0x2f
    42ba:	80 81       	ld	r24, Z
    42bc:	9e a9       	ldd	r25, Y+54	; 0x36
    42be:	89 2b       	or	r24, r25
    42c0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:566
        setWriteDir();
    42c2:	81 b1       	in	r24, 0x01	; 1
    42c4:	71 b8       	out	0x01, r7	; 1
    42c6:	d1 2c       	mov	r13, r1
    42c8:	c1 2c       	mov	r12, r1
    42ca:	63 cf       	rjmp	.-314    	; 0x4192 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x50>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:532
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
    42cc:	41 e0       	ldi	r20, 0x01	; 1
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	9d cf       	rjmp	.-198    	; 0x420c <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0xca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:546
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    42d2:	ec a9       	ldd	r30, Y+52	; 0x34
    42d4:	fd a9       	ldd	r31, Y+53	; 0x35
    42d6:	80 81       	ld	r24, Z
    42d8:	9d ad       	ldd	r25, Y+61	; 0x3d
    42da:	89 23       	and	r24, r25
    42dc:	80 83       	st	Z, r24
    42de:	80 b1       	in	r24, 0x00	; 0
    42e0:	ec a9       	ldd	r30, Y+52	; 0x34
    42e2:	fd a9       	ldd	r31, Y+53	; 0x35
    42e4:	80 81       	ld	r24, Z
    42e6:	99 ad       	ldd	r25, Y+57	; 0x39
    42e8:	89 2b       	or	r24, r25
    42ea:	80 83       	st	Z, r24
    42ec:	75 01       	movw	r14, r10
    42ee:	86 01       	movw	r16, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:549
        	while (n) 
			{
				if(R24BIT == 1)
    42f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    42f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    42f4:	81 30       	cpi	r24, 0x01	; 1
    42f6:	91 05       	cpc	r25, r1
    42f8:	d9 f5       	brne	.+118    	; 0x4370 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x22e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:551
				{
        			read8(r);
    42fa:	ec a9       	ldd	r30, Y+52	; 0x34
    42fc:	fd a9       	ldd	r31, Y+53	; 0x35
    42fe:	80 81       	ld	r24, Z
    4300:	9d ad       	ldd	r25, Y+61	; 0x3d
    4302:	89 23       	and	r24, r25
    4304:	80 83       	st	Z, r24
    4306:	60 b1       	in	r22, 0x00	; 0
    4308:	ec a9       	ldd	r30, Y+52	; 0x34
    430a:	fd a9       	ldd	r31, Y+53	; 0x35
    430c:	80 81       	ld	r24, Z
    430e:	99 ad       	ldd	r25, Y+57	; 0x39
    4310:	89 2b       	or	r24, r25
    4312:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:552
         			read8(g);
    4314:	ec a9       	ldd	r30, Y+52	; 0x34
    4316:	fd a9       	ldd	r31, Y+53	; 0x35
    4318:	80 81       	ld	r24, Z
    431a:	9d ad       	ldd	r25, Y+61	; 0x3d
    431c:	89 23       	and	r24, r25
    431e:	80 83       	st	Z, r24
    4320:	40 b1       	in	r20, 0x00	; 0
    4322:	ec a9       	ldd	r30, Y+52	; 0x34
    4324:	fd a9       	ldd	r31, Y+53	; 0x35
    4326:	80 81       	ld	r24, Z
    4328:	99 ad       	ldd	r25, Y+57	; 0x39
    432a:	89 2b       	or	r24, r25
    432c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:553
        			read8(b);
    432e:	ec a9       	ldd	r30, Y+52	; 0x34
    4330:	fd a9       	ldd	r31, Y+53	; 0x35
    4332:	80 81       	ld	r24, Z
    4334:	9d ad       	ldd	r25, Y+61	; 0x3d
    4336:	89 23       	and	r24, r25
    4338:	80 83       	st	Z, r24
    433a:	20 b1       	in	r18, 0x00	; 0
    433c:	ec a9       	ldd	r30, Y+52	; 0x34
    433e:	fd a9       	ldd	r31, Y+53	; 0x35
    4340:	80 81       	ld	r24, Z
    4342:	99 ad       	ldd	r25, Y+57	; 0x39
    4344:	89 2b       	or	r24, r25
    4346:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:554
            		ret = Color_To_565(r, g, b);
    4348:	e8 81       	ld	r30, Y
    434a:	f9 81       	ldd	r31, Y+1	; 0x01
    434c:	01 90       	ld	r0, Z+
    434e:	f0 81       	ld	r31, Z
    4350:	e0 2d       	mov	r30, r0
    4352:	ce 01       	movw	r24, r28
    4354:	19 95       	eicall
    4356:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:560
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    4358:	f7 01       	movw	r30, r14
    435a:	81 92       	st	Z+, r8
    435c:	91 92       	st	Z+, r9
    435e:	7f 01       	movw	r14, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:561
            	n--;
    4360:	01 50       	subi	r16, 0x01	; 1
    4362:	11 09       	sbc	r17, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:547
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    4364:	29 f6       	brne	.-118    	; 0x42f0 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x1ae>
    4366:	cc 0c       	add	r12, r12
    4368:	dd 1c       	adc	r13, r13
    436a:	ac 0c       	add	r10, r12
    436c:	bd 1c       	adc	r11, r13
    436e:	a3 cf       	rjmp	.-186    	; 0x42b6 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x174>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:556
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    4370:	89 2b       	or	r24, r25
    4372:	91 f7       	brne	.-28     	; 0x4358 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:558
				{
					read16(ret);
    4374:	ec a9       	ldd	r30, Y+52	; 0x34
    4376:	fd a9       	ldd	r31, Y+53	; 0x35
    4378:	80 81       	ld	r24, Z
    437a:	9d ad       	ldd	r25, Y+61	; 0x3d
    437c:	89 23       	and	r24, r25
    437e:	80 83       	st	Z, r24
    4380:	80 b0       	in	r8, 0x00	; 0
    4382:	ec a9       	ldd	r30, Y+52	; 0x34
    4384:	fd a9       	ldd	r31, Y+53	; 0x35
    4386:	80 81       	ld	r24, Z
    4388:	99 ad       	ldd	r25, Y+57	; 0x39
    438a:	89 2b       	or	r24, r25
    438c:	80 83       	st	Z, r24
    438e:	ec a9       	ldd	r30, Y+52	; 0x34
    4390:	fd a9       	ldd	r31, Y+53	; 0x35
    4392:	80 81       	ld	r24, Z
    4394:	9d ad       	ldd	r25, Y+61	; 0x3d
    4396:	89 23       	and	r24, r25
    4398:	80 83       	st	Z, r24
    439a:	90 b1       	in	r25, 0x00	; 0
    439c:	ec a9       	ldd	r30, Y+52	; 0x34
    439e:	fd a9       	ldd	r31, Y+53	; 0x35
    43a0:	80 81       	ld	r24, Z
    43a2:	29 ad       	ldd	r18, Y+57	; 0x39
    43a4:	82 2b       	or	r24, r18
    43a6:	80 83       	st	Z, r24
    43a8:	98 2c       	mov	r9, r8
    43aa:	89 2e       	mov	r8, r25
    43ac:	d5 cf       	rjmp	.-86     	; 0x4358 <LCDWIKI_KBV::Read_GRAM(int, int, unsigned int*, int, int)+0x216>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:569
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	df 90       	pop	r13
    43c0:	cf 90       	pop	r12
    43c2:	bf 90       	pop	r11
    43c4:	af 90       	pop	r10
    43c6:	9f 90       	pop	r9
    43c8:	8f 90       	pop	r8
    43ca:	7f 90       	pop	r7
    43cc:	08 95       	ret

000043ce <LCDWIKI_KBV::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_KBV12Color_To_565Ehhh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:487
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_KBV::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
    43ce:	38 e0       	ldi	r19, 0x08	; 8
    43d0:	43 9f       	mul	r20, r19
    43d2:	c0 01       	movw	r24, r0
    43d4:	11 24       	eor	r1, r1
    43d6:	80 7e       	andi	r24, 0xE0	; 224
    43d8:	97 70       	andi	r25, 0x07	; 7
    43da:	26 95       	lsr	r18
    43dc:	26 95       	lsr	r18
    43de:	26 95       	lsr	r18
    43e0:	82 2b       	or	r24, r18
    43e2:	70 e0       	ldi	r23, 0x00	; 0
    43e4:	76 2f       	mov	r23, r22
    43e6:	66 27       	eor	r22, r22
    43e8:	66 27       	eor	r22, r22
    43ea:	78 7f       	andi	r23, 0xF8	; 248
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:488
}
    43ec:	86 2b       	or	r24, r22
    43ee:	97 2b       	or	r25, r23
    43f0:	08 95       	ret

000043f2 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_KBV14Push_Any_ColorEPjibh():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:418
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_KBV::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    43f2:	0f 93       	push	r16
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	dc 01       	movw	r26, r24
    43fa:	01 70       	andi	r16, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:423
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    43fc:	9e 96       	adiw	r26, 0x2e	; 46
    43fe:	ed 91       	ld	r30, X+
    4400:	fc 91       	ld	r31, X
    4402:	9f 97       	sbiw	r26, 0x2f	; 47
    4404:	80 81       	ld	r24, Z
    4406:	da 96       	adiw	r26, 0x3a	; 58
    4408:	9c 91       	ld	r25, X
    440a:	da 97       	sbiw	r26, 0x3a	; 58
    440c:	89 23       	and	r24, r25
    440e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:424
    if (first) 
    4410:	22 23       	and	r18, r18
    4412:	09 f4       	brne	.+2      	; 0x4416 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x24>
    4414:	5b c0       	rjmp	.+182    	; 0x44cc <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xda>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:426
	{  
		if(lcd_driver == ID_932X)
    4416:	58 96       	adiw	r26, 0x18	; 24
    4418:	8d 91       	ld	r24, X+
    441a:	9c 91       	ld	r25, X
    441c:	59 97       	sbiw	r26, 0x19	; 25
    441e:	89 2b       	or	r24, r25
    4420:	49 f5       	brne	.+82     	; 0x4474 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x82>
    4422:	d0 96       	adiw	r26, 0x30	; 48
    4424:	ed 91       	ld	r30, X+
    4426:	fc 91       	ld	r31, X
    4428:	d1 97       	sbiw	r26, 0x31	; 49
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:428
		{
			writeCmd8(ILI932X_START_OSC);
    442a:	80 81       	ld	r24, Z
    442c:	db 96       	adiw	r26, 0x3b	; 59
    442e:	9c 91       	ld	r25, X
    4430:	db 97       	sbiw	r26, 0x3b	; 59
    4432:	89 23       	and	r24, r25
    4434:	80 83       	st	Z, r24
    4436:	12 b8       	out	0x02, r1	; 2
    4438:	d2 96       	adiw	r26, 0x32	; 50
    443a:	ed 91       	ld	r30, X+
    443c:	fc 91       	ld	r31, X
    443e:	d3 97       	sbiw	r26, 0x33	; 51
    4440:	80 81       	ld	r24, Z
    4442:	dc 96       	adiw	r26, 0x3c	; 60
    4444:	9c 91       	ld	r25, X
    4446:	dc 97       	sbiw	r26, 0x3c	; 60
    4448:	89 23       	and	r24, r25
    444a:	80 83       	st	Z, r24
    444c:	d2 96       	adiw	r26, 0x32	; 50
    444e:	ed 91       	ld	r30, X+
    4450:	fc 91       	ld	r31, X
    4452:	d3 97       	sbiw	r26, 0x33	; 51
    4454:	80 81       	ld	r24, Z
    4456:	d8 96       	adiw	r26, 0x38	; 56
    4458:	9c 91       	ld	r25, X
    445a:	d8 97       	sbiw	r26, 0x38	; 56
    445c:	89 2b       	or	r24, r25
    445e:	80 83       	st	Z, r24
    4460:	d0 96       	adiw	r26, 0x30	; 48
    4462:	ed 91       	ld	r30, X+
    4464:	fc 91       	ld	r31, X
    4466:	d1 97       	sbiw	r26, 0x31	; 49
    4468:	80 81       	ld	r24, Z
    446a:	d7 96       	adiw	r26, 0x37	; 55
    446c:	9c 91       	ld	r25, X
    446e:	d7 97       	sbiw	r26, 0x37	; 55
    4470:	89 2b       	or	r24, r25
    4472:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:431
			
		}
		writeCmd8(CC);			
    4474:	d0 96       	adiw	r26, 0x30	; 48
    4476:	ed 91       	ld	r30, X+
    4478:	fc 91       	ld	r31, X
    447a:	d1 97       	sbiw	r26, 0x31	; 49
    447c:	80 81       	ld	r24, Z
    447e:	db 96       	adiw	r26, 0x3b	; 59
    4480:	9c 91       	ld	r25, X
    4482:	db 97       	sbiw	r26, 0x3b	; 59
    4484:	89 23       	and	r24, r25
    4486:	80 83       	st	Z, r24
    4488:	90 96       	adiw	r26, 0x20	; 32
    448a:	8c 91       	ld	r24, X
    448c:	90 97       	sbiw	r26, 0x20	; 32
    448e:	82 b9       	out	0x02, r24	; 2
    4490:	d2 96       	adiw	r26, 0x32	; 50
    4492:	ed 91       	ld	r30, X+
    4494:	fc 91       	ld	r31, X
    4496:	d3 97       	sbiw	r26, 0x33	; 51
    4498:	80 81       	ld	r24, Z
    449a:	dc 96       	adiw	r26, 0x3c	; 60
    449c:	9c 91       	ld	r25, X
    449e:	dc 97       	sbiw	r26, 0x3c	; 60
    44a0:	89 23       	and	r24, r25
    44a2:	80 83       	st	Z, r24
    44a4:	d2 96       	adiw	r26, 0x32	; 50
    44a6:	ed 91       	ld	r30, X+
    44a8:	fc 91       	ld	r31, X
    44aa:	d3 97       	sbiw	r26, 0x33	; 51
    44ac:	80 81       	ld	r24, Z
    44ae:	d8 96       	adiw	r26, 0x38	; 56
    44b0:	9c 91       	ld	r25, X
    44b2:	d8 97       	sbiw	r26, 0x38	; 56
    44b4:	89 2b       	or	r24, r25
    44b6:	80 83       	st	Z, r24
    44b8:	d0 96       	adiw	r26, 0x30	; 48
    44ba:	ed 91       	ld	r30, X+
    44bc:	fc 91       	ld	r31, X
    44be:	d1 97       	sbiw	r26, 0x31	; 49
    44c0:	80 81       	ld	r24, Z
    44c2:	d7 96       	adiw	r26, 0x37	; 55
    44c4:	9c 91       	ld	r25, X
    44c6:	d7 97       	sbiw	r26, 0x37	; 55
    44c8:	89 2b       	or	r24, r25
    44ca:	80 83       	st	Z, r24
    44cc:	eb 01       	movw	r28, r22
    44ce:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:433
    }
    while (n-- > 0) 
    44d0:	18 16       	cp	r1, r24
    44d2:	19 06       	cpc	r1, r25
    44d4:	bc f5       	brge	.+110    	; 0x4544 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x152>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:435
	{
        if (isconst) 
    44d6:	00 23       	and	r16, r16
    44d8:	91 f1       	breq	.+100    	; 0x453e <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x14c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:437
		{
			color = pgm_read_word(block++);		
    44da:	fe 01       	movw	r30, r28
    44dc:	45 91       	lpm	r20, Z+
    44de:	54 91       	lpm	r21, Z
    44e0:	34 2f       	mov	r19, r20
    44e2:	25 2f       	mov	r18, r21
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:444
		else 
		{
			color = (*block++);			

		}		
        writeData16(color);
    44e4:	22 b9       	out	0x02, r18	; 2
    44e6:	d2 96       	adiw	r26, 0x32	; 50
    44e8:	ed 91       	ld	r30, X+
    44ea:	fc 91       	ld	r31, X
    44ec:	d3 97       	sbiw	r26, 0x33	; 51
    44ee:	20 81       	ld	r18, Z
    44f0:	dc 96       	adiw	r26, 0x3c	; 60
    44f2:	4c 91       	ld	r20, X
    44f4:	dc 97       	sbiw	r26, 0x3c	; 60
    44f6:	24 23       	and	r18, r20
    44f8:	20 83       	st	Z, r18
    44fa:	d2 96       	adiw	r26, 0x32	; 50
    44fc:	ed 91       	ld	r30, X+
    44fe:	fc 91       	ld	r31, X
    4500:	d3 97       	sbiw	r26, 0x33	; 51
    4502:	20 81       	ld	r18, Z
    4504:	d8 96       	adiw	r26, 0x38	; 56
    4506:	4c 91       	ld	r20, X
    4508:	d8 97       	sbiw	r26, 0x38	; 56
    450a:	24 2b       	or	r18, r20
    450c:	20 83       	st	Z, r18
    450e:	32 b9       	out	0x02, r19	; 2
    4510:	d2 96       	adiw	r26, 0x32	; 50
    4512:	ed 91       	ld	r30, X+
    4514:	fc 91       	ld	r31, X
    4516:	d3 97       	sbiw	r26, 0x33	; 51
    4518:	20 81       	ld	r18, Z
    451a:	dc 96       	adiw	r26, 0x3c	; 60
    451c:	3c 91       	ld	r19, X
    451e:	dc 97       	sbiw	r26, 0x3c	; 60
    4520:	23 23       	and	r18, r19
    4522:	20 83       	st	Z, r18
    4524:	d2 96       	adiw	r26, 0x32	; 50
    4526:	ed 91       	ld	r30, X+
    4528:	fc 91       	ld	r31, X
    452a:	d3 97       	sbiw	r26, 0x33	; 51
    452c:	20 81       	ld	r18, Z
    452e:	d8 96       	adiw	r26, 0x38	; 56
    4530:	3c 91       	ld	r19, X
    4532:	d8 97       	sbiw	r26, 0x38	; 56
    4534:	23 2b       	or	r18, r19
    4536:	20 83       	st	Z, r18
    4538:	22 96       	adiw	r28, 0x02	; 2
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	c9 cf       	rjmp	.-110    	; 0x44d0 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xde>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:441
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    453e:	38 81       	ld	r19, Y
    4540:	29 81       	ldd	r18, Y+1	; 0x01
    4542:	d0 cf       	rjmp	.-96     	; 0x44e4 <LCDWIKI_KBV::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xf2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:446

		}		
        writeData16(color);
    }
    CS_IDLE;
    4544:	9e 96       	adiw	r26, 0x2e	; 46
    4546:	ed 91       	ld	r30, X+
    4548:	fc 91       	ld	r31, X
    454a:	9f 97       	sbiw	r26, 0x2f	; 47
    454c:	80 81       	ld	r24, Z
    454e:	d6 96       	adiw	r26, 0x36	; 54
    4550:	9c 91       	ld	r25, X
    4552:	89 2b       	or	r24, r25
    4554:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:447
}
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	0f 91       	pop	r16
    455c:	08 95       	ret

0000455e <thermostat_ring_update_pid_parameters(unsigned char)>:
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:218




void thermostat_ring_update_pid_parameters(uint8_t idx)
{
    455e:	2f 92       	push	r2
    4560:	3f 92       	push	r3
    4562:	4f 92       	push	r4
    4564:	5f 92       	push	r5
    4566:	6f 92       	push	r6
    4568:	7f 92       	push	r7
    456a:	8f 92       	push	r8
    456c:	9f 92       	push	r9
    456e:	af 92       	push	r10
    4570:	bf 92       	push	r11
    4572:	cf 92       	push	r12
    4574:	df 92       	push	r13
    4576:	ef 92       	push	r14
    4578:	ff 92       	push	r15
    457a:	0f 93       	push	r16
    457c:	1f 93       	push	r17
    457e:	cf 93       	push	r28
    4580:	df 93       	push	r29
    4582:	00 d0       	rcall	.+0      	; 0x4584 <thermostat_ring_update_pid_parameters(unsigned char)+0x26>
    4584:	00 d0       	rcall	.+0      	; 0x4586 <thermostat_ring_update_pid_parameters(unsigned char)+0x28>
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
  array_pids[idx]->SetTunings(PID_p[idx], PID_i[idx], PID_d[idx]);
    458a:	28 2e       	mov	r2, r24
    458c:	31 2c       	mov	r3, r1
    458e:	c1 01       	movw	r24, r2
    4590:	88 0f       	add	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	e0 91 19 0c 	lds	r30, 0x0C19	; 0x800c19 <array_pids>
    4598:	f0 91 1a 0c 	lds	r31, 0x0C1A	; 0x800c1a <array_pids+0x1>
    459c:	e8 0f       	add	r30, r24
    459e:	f9 1f       	adc	r31, r25
    45a0:	80 81       	ld	r24, Z
    45a2:	91 81       	ldd	r25, Z+1	; 0x01
    45a4:	9e 83       	std	Y+6, r25	; 0x06
    45a6:	8d 83       	std	Y+5, r24	; 0x05
    45a8:	81 01       	movw	r16, r2
    45aa:	00 0f       	add	r16, r16
    45ac:	11 1f       	adc	r17, r17
    45ae:	00 0f       	add	r16, r16
    45b0:	11 1f       	adc	r17, r17
    45b2:	f8 01       	movw	r30, r16
    45b4:	ed 58       	subi	r30, 0x8D	; 141
    45b6:	f6 4f       	sbci	r31, 0xF6	; 246
    45b8:	40 80       	ld	r4, Z
    45ba:	51 80       	ldd	r5, Z+1	; 0x01
    45bc:	62 80       	ldd	r6, Z+2	; 0x02
    45be:	73 80       	ldd	r7, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;
    45c0:	20 e0       	ldi	r18, 0x00	; 0
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	a9 01       	movw	r20, r18
    45c6:	c3 01       	movw	r24, r6
    45c8:	b2 01       	movw	r22, r4
    45ca:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    45ce:	87 fd       	sbrc	r24, 7
    45d0:	97 c0       	rjmp	.+302    	; 0x4700 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    45d2:	f8 01       	movw	r30, r16
    45d4:	e9 57       	subi	r30, 0x79	; 121
    45d6:	f6 4f       	sbci	r31, 0xF6	; 246
    45d8:	80 80       	ld	r8, Z
    45da:	91 80       	ldd	r9, Z+1	; 0x01
    45dc:	a2 80       	ldd	r10, Z+2	; 0x02
    45de:	b3 80       	ldd	r11, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	a9 01       	movw	r20, r18
    45e6:	c5 01       	movw	r24, r10
    45e8:	b4 01       	movw	r22, r8
    45ea:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    45ee:	87 fd       	sbrc	r24, 7
    45f0:	87 c0       	rjmp	.+270    	; 0x4700 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:219
    45f2:	f8 01       	movw	r30, r16
    45f4:	e5 56       	subi	r30, 0x65	; 101
    45f6:	f6 4f       	sbci	r31, 0xF6	; 246
    45f8:	c0 80       	ld	r12, Z
    45fa:	d1 80       	ldd	r13, Z+1	; 0x01
    45fc:	e2 80       	ldd	r14, Z+2	; 0x02
    45fe:	f3 80       	ldd	r15, Z+3	; 0x03
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:104
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	a9 01       	movw	r20, r18
    4606:	c7 01       	movw	r24, r14
    4608:	b6 01       	movw	r22, r12
    460a:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    460e:	87 fd       	sbrc	r24, 7
    4610:	77 c0       	rjmp	.+238    	; 0x4700 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107

   pOn = POn;
   pOnE = POn == P_ON_E;
    4612:	81 e0       	ldi	r24, 0x01	; 1
    4614:	ed 81       	ldd	r30, Y+5	; 0x05
    4616:	fe 81       	ldd	r31, Y+6	; 0x06
    4618:	22 8d       	ldd	r18, Z+26	; 0x1a
    461a:	33 8d       	ldd	r19, Z+27	; 0x1b
    461c:	21 30       	cpi	r18, 0x01	; 1
    461e:	31 05       	cpc	r19, r1
    4620:	09 f0       	breq	.+2      	; 0x4624 <thermostat_ring_update_pid_parameters(unsigned char)+0xc6>
    4622:	80 e0       	ldi	r24, 0x00	; 0
    4624:	ed 81       	ldd	r30, Y+5	; 0x05
    4626:	fe 81       	ldd	r31, Y+6	; 0x06
    4628:	83 af       	std	Z+59, r24	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    462a:	40 82       	st	Z, r4
    462c:	51 82       	std	Z+1, r5	; 0x01
    462e:	62 82       	std	Z+2, r6	; 0x02
    4630:	73 82       	std	Z+3, r7	; 0x03
    4632:	84 82       	std	Z+4, r8	; 0x04
    4634:	95 82       	std	Z+5, r9	; 0x05
    4636:	a6 82       	std	Z+6, r10	; 0x06
    4638:	b7 82       	std	Z+7, r11	; 0x07
    463a:	c0 86       	std	Z+8, r12	; 0x08
    463c:	d1 86       	std	Z+9, r13	; 0x09
    463e:	e2 86       	std	Z+10, r14	; 0x0a
    4640:	f3 86       	std	Z+11, r15	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:111

   double SampleTimeInSec = ((double)SampleTime)/1000;
    4642:	66 a5       	ldd	r22, Z+46	; 0x2e
    4644:	77 a5       	ldd	r23, Z+47	; 0x2f
    4646:	80 a9       	ldd	r24, Z+48	; 0x30
    4648:	91 a9       	ldd	r25, Z+49	; 0x31
    464a:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	4a e7       	ldi	r20, 0x7A	; 122
    4654:	54 e4       	ldi	r21, 0x44	; 68
    4656:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
    465a:	69 83       	std	Y+1, r22	; 0x01
    465c:	7a 83       	std	Y+2, r23	; 0x02
    465e:	8b 83       	std	Y+3, r24	; 0x03
    4660:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112
   kp = Kp;
    4662:	ed 81       	ldd	r30, Y+5	; 0x05
    4664:	fe 81       	ldd	r31, Y+6	; 0x06
    4666:	44 86       	std	Z+12, r4	; 0x0c
    4668:	55 86       	std	Z+13, r5	; 0x0d
    466a:	66 86       	std	Z+14, r6	; 0x0e
    466c:	77 86       	std	Z+15, r7	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    466e:	9b 01       	movw	r18, r22
    4670:	ac 01       	movw	r20, r24
    4672:	c5 01       	movw	r24, r10
    4674:	b4 01       	movw	r22, r8
    4676:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
    467a:	4b 01       	movw	r8, r22
    467c:	5c 01       	movw	r10, r24
    467e:	ed 81       	ldd	r30, Y+5	; 0x05
    4680:	fe 81       	ldd	r31, Y+6	; 0x06
    4682:	80 8a       	std	Z+16, r8	; 0x10
    4684:	91 8a       	std	Z+17, r9	; 0x11
    4686:	a2 8a       	std	Z+18, r10	; 0x12
    4688:	b3 8a       	std	Z+19, r11	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    468a:	29 81       	ldd	r18, Y+1	; 0x01
    468c:	3a 81       	ldd	r19, Y+2	; 0x02
    468e:	4b 81       	ldd	r20, Y+3	; 0x03
    4690:	5c 81       	ldd	r21, Y+4	; 0x04
    4692:	c7 01       	movw	r24, r14
    4694:	b6 01       	movw	r22, r12
    4696:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
    469a:	6b 01       	movw	r12, r22
    469c:	7c 01       	movw	r14, r24
    469e:	ed 81       	ldd	r30, Y+5	; 0x05
    46a0:	fe 81       	ldd	r31, Y+6	; 0x06
    46a2:	c4 8a       	std	Z+20, r12	; 0x14
    46a4:	d5 8a       	std	Z+21, r13	; 0x15
    46a6:	e6 8a       	std	Z+22, r14	; 0x16
    46a8:	f7 8a       	std	Z+23, r15	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:116

  if(controllerDirection == REVERSE)
    46aa:	80 8d       	ldd	r24, Z+24	; 0x18
    46ac:	91 8d       	ldd	r25, Z+25	; 0x19
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	39 f5       	brne	.+78     	; 0x4700 <thermostat_ring_update_pid_parameters(unsigned char)+0x1a2>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:118
   {
      kp = (0 - kp);
    46b2:	a3 01       	movw	r20, r6
    46b4:	92 01       	movw	r18, r4
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	cb 01       	movw	r24, r22
    46bc:	0e 94 da b4 	call	0x169b4	; 0x169b4 <__subsf3>
    46c0:	ed 81       	ldd	r30, Y+5	; 0x05
    46c2:	fe 81       	ldd	r31, Y+6	; 0x06
    46c4:	64 87       	std	Z+12, r22	; 0x0c
    46c6:	75 87       	std	Z+13, r23	; 0x0d
    46c8:	86 87       	std	Z+14, r24	; 0x0e
    46ca:	97 87       	std	Z+15, r25	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:119
      ki = (0 - ki);
    46cc:	a5 01       	movw	r20, r10
    46ce:	94 01       	movw	r18, r8
    46d0:	60 e0       	ldi	r22, 0x00	; 0
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	cb 01       	movw	r24, r22
    46d6:	0e 94 da b4 	call	0x169b4	; 0x169b4 <__subsf3>
    46da:	ed 81       	ldd	r30, Y+5	; 0x05
    46dc:	fe 81       	ldd	r31, Y+6	; 0x06
    46de:	60 8b       	std	Z+16, r22	; 0x10
    46e0:	71 8b       	std	Z+17, r23	; 0x11
    46e2:	82 8b       	std	Z+18, r24	; 0x12
    46e4:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:120
      kd = (0 - kd);
    46e6:	a7 01       	movw	r20, r14
    46e8:	96 01       	movw	r18, r12
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	70 e0       	ldi	r23, 0x00	; 0
    46ee:	cb 01       	movw	r24, r22
    46f0:	0e 94 da b4 	call	0x169b4	; 0x169b4 <__subsf3>
    46f4:	ed 81       	ldd	r30, Y+5	; 0x05
    46f6:	fe 81       	ldd	r31, Y+6	; 0x06
    46f8:	64 8b       	std	Z+20, r22	; 0x14
    46fa:	75 8b       	std	Z+21, r23	; 0x15
    46fc:	86 8b       	std	Z+22, r24	; 0x16
    46fe:	97 8b       	std	Z+23, r25	; 0x17
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:220
  array_pids[idx]->SetSampleTime(PID_time[idx]);
    4700:	f1 01       	movw	r30, r2
    4702:	e1 55       	subi	r30, 0x51	; 81
    4704:	f6 4f       	sbci	r31, 0xF6	; 246
    4706:	10 81       	ld	r17, Z
    4708:	61 2f       	mov	r22, r17
    470a:	70 e0       	ldi	r23, 0x00	; 0
SetSampleTime():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:136
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
    470c:	61 15       	cp	r22, r1
    470e:	71 05       	cpc	r23, r1
    4710:	f1 f1       	breq	.+124    	; 0x478e <thermostat_ring_update_pid_parameters(unsigned char)+0x230>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
   {
      double ratio  = (double)NewSampleTime
    4712:	07 2e       	mov	r0, r23
    4714:	00 0c       	add	r0, r0
    4716:	88 0b       	sbc	r24, r24
    4718:	99 0b       	sbc	r25, r25
    471a:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    471e:	6b 01       	movw	r12, r22
    4720:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:139
                      / (double)SampleTime;
    4722:	ed 81       	ldd	r30, Y+5	; 0x05
    4724:	fe 81       	ldd	r31, Y+6	; 0x06
    4726:	66 a5       	ldd	r22, Z+46	; 0x2e
    4728:	77 a5       	ldd	r23, Z+47	; 0x2f
    472a:	80 a9       	ldd	r24, Z+48	; 0x30
    472c:	91 a9       	ldd	r25, Z+49	; 0x31
    472e:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    4732:	9b 01       	movw	r18, r22
    4734:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:138
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
   if (NewSampleTime > 0)
   {
      double ratio  = (double)NewSampleTime
    4736:	c7 01       	movw	r24, r14
    4738:	b6 01       	movw	r22, r12
    473a:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
    473e:	6b 01       	movw	r12, r22
    4740:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PID/PID_v1.cpp:140
                      / (double)SampleTime;
      ki *= ratio;
    4742:	ac 01       	movw	r20, r24
    4744:	9b 01       	movw	r18, r22
    4746:	ed 81       	ldd	r30, Y+5	; 0x05
    4748:	fe 81       	ldd	r31, Y+6	; 0x06
    474a:	60 89       	ldd	r22, Z+16	; 0x10
    474c:	71 89       	ldd	r23, Z+17	; 0x11
    474e:	82 89       	ldd	r24, Z+18	; 0x12
    4750:	93 89       	ldd	r25, Z+19	; 0x13
    4752:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
    4756:	ed 81       	ldd	r30, Y+5	; 0x05
    4758:	fe 81       	ldd	r31, Y+6	; 0x06
    475a:	60 8b       	std	Z+16, r22	; 0x10
    475c:	71 8b       	std	Z+17, r23	; 0x11
    475e:	82 8b       	std	Z+18, r24	; 0x12
    4760:	93 8b       	std	Z+19, r25	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:141
      kd /= ratio;
    4762:	a7 01       	movw	r20, r14
    4764:	96 01       	movw	r18, r12
    4766:	64 89       	ldd	r22, Z+20	; 0x14
    4768:	75 89       	ldd	r23, Z+21	; 0x15
    476a:	86 89       	ldd	r24, Z+22	; 0x16
    476c:	97 89       	ldd	r25, Z+23	; 0x17
    476e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
    4772:	ed 81       	ldd	r30, Y+5	; 0x05
    4774:	fe 81       	ldd	r31, Y+6	; 0x06
    4776:	64 8b       	std	Z+20, r22	; 0x14
    4778:	75 8b       	std	Z+21, r23	; 0x15
    477a:	86 8b       	std	Z+22, r24	; 0x16
    477c:	97 8b       	std	Z+23, r25	; 0x17
/home/saric/Arduino/libraries/PID/PID_v1.cpp:142
      SampleTime = (unsigned long)NewSampleTime;
    477e:	81 2f       	mov	r24, r17
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	b0 e0       	ldi	r27, 0x00	; 0
    4784:	a0 e0       	ldi	r26, 0x00	; 0
    4786:	86 a7       	std	Z+46, r24	; 0x2e
    4788:	97 a7       	std	Z+47, r25	; 0x2f
    478a:	a0 ab       	std	Z+48, r26	; 0x30
    478c:	b1 ab       	std	Z+49, r27	; 0x31
_Z37thermostat_ring_update_pid_parametersh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:221
}
    478e:	26 96       	adiw	r28, 0x06	; 6
    4790:	0f b6       	in	r0, 0x3f	; 63
    4792:	f8 94       	cli
    4794:	de bf       	out	0x3e, r29	; 62
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	cd bf       	out	0x3d, r28	; 61
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	1f 91       	pop	r17
    47a0:	0f 91       	pop	r16
    47a2:	ff 90       	pop	r15
    47a4:	ef 90       	pop	r14
    47a6:	df 90       	pop	r13
    47a8:	cf 90       	pop	r12
    47aa:	bf 90       	pop	r11
    47ac:	af 90       	pop	r10
    47ae:	9f 90       	pop	r9
    47b0:	8f 90       	pop	r8
    47b2:	7f 90       	pop	r7
    47b4:	6f 90       	pop	r6
    47b6:	5f 90       	pop	r5
    47b8:	4f 90       	pop	r4
    47ba:	3f 90       	pop	r3
    47bc:	2f 90       	pop	r2
    47be:	08 95       	ret

000047c0 <tds_compare_rom(unsigned char*, unsigned char*)>:
_Z15tds_compare_romPhS_():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:163
  }
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
    47c0:	fb 01       	movw	r30, r22
    47c2:	9c 01       	movw	r18, r24
    47c4:	28 5f       	subi	r18, 0xF8	; 248
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:166
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    47c8:	dc 01       	movw	r26, r24
    47ca:	5d 91       	ld	r21, X+
    47cc:	cd 01       	movw	r24, r26
    47ce:	41 91       	ld	r20, Z+
    47d0:	54 13       	cpse	r21, r20
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <tds_compare_rom(unsigned char*, unsigned char*)+0x1e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:165

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
  for (uint8_t r = 0; r < 8; r++)
    47d4:	a2 17       	cp	r26, r18
    47d6:	b3 07       	cpc	r27, r19
    47d8:	b9 f7       	brne	.-18     	; 0x47c8 <tds_compare_rom(unsigned char*, unsigned char*)+0x8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:164
}

/// funkce pro porovnani rom
bool tds_compare_rom(uint8_t *rom1, uint8_t *rom2)
{
  bool ret = True;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:168
  for (uint8_t r = 0; r < 8; r++)
    if (rom1[r] != rom2[r])
    {
      ret = False;
    47de:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:172
      break;
    }
  return ret;
}
    47e0:	08 95       	ret

000047e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    47e2:	80 33       	cpi	r24, 0x30	; 48
    47e4:	9c f0       	brlt	.+38     	; 0x480c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    47e6:	8a 33       	cpi	r24, 0x3A	; 58
    47e8:	24 f0       	brlt	.+8      	; 0x47f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
    47ea:	8f 35       	cpi	r24, 0x5F	; 95
    47ec:	24 f0       	brlt	.+8      	; 0x47f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x14>
    47ee:	8b 37       	cpi	r24, 0x7B	; 123
    47f0:	24 f4       	brge	.+8      	; 0x47fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x18>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    47f2:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:271
  }
    47f4:	08 95       	ret
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE9isBetweenEccc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:265
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    47f6:	81 34       	cpi	r24, 0x41	; 65
    47f8:	4c f0       	brlt	.+18     	; 0x480c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x2a>
    47fa:	8b 35       	cpi	r24, 0x5B	; 91
    47fc:	d4 f3       	brlt	.-12     	; 0x47f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE22canBeInNonQuotedStringEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:270
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    47fe:	93 ed       	ldi	r25, 0xD3	; 211
    4800:	98 0f       	add	r25, r24
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	92 30       	cpi	r25, 0x02	; 2
    4806:	b0 f3       	brcs	.-20     	; 0x47f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x12>
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	08 95       	ret
    480c:	8b 32       	cpi	r24, 0x2B	; 43
    480e:	b9 f7       	brne	.-18     	; 0x47fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x1c>
    4810:	f0 cf       	rjmp	.-32     	; 0x47f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)+0x10>

00004812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:47
  }

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    4812:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:48
    if (!_loaded) {
    4814:	80 85       	ldd	r24, Z+8	; 0x08
    4816:	81 11       	cpse	r24, r1
    4818:	0a c0       	rjmp	.+20     	; 0x482e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()+0x1c>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcE4readEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:19
 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}

  char read() {
    return static_cast<char>(*_ptr++);
    481a:	a2 81       	ldd	r26, Z+2	; 0x02
    481c:	b3 81       	ldd	r27, Z+3	; 0x03
    481e:	cd 01       	movw	r24, r26
    4820:	01 96       	adiw	r24, 0x01	; 1
    4822:	93 83       	std	Z+3, r25	; 0x03
    4824:	82 83       	std	Z+2, r24	; 0x02
    4826:	8c 91       	ld	r24, X
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE7currentEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:52
      if (_reader.ended())
        _current = 0;
      else
        _current = _reader.read();
    4828:	87 83       	std	Z+7, r24	; 0x07
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:53
      _loaded = true;
    482a:	81 e0       	ldi	r24, 0x01	; 1
    482c:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:56
    }
    return _current;
  }
    482e:	87 81       	ldd	r24, Z+7	; 0x07
    4830:	08 95       	ret

00004832 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:182
    if (err) return err;
    variant.set(value);
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char **result) {
    4832:	df 92       	push	r13
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	ec 01       	movw	r28, r24
    4842:	7b 01       	movw	r14, r22
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    4844:	0c 81       	ldd	r16, Y+4	; 0x04
    4846:	1d 81       	ldd	r17, Y+5	; 0x05
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:186
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char stopChar = current();
    4848:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    484c:	d8 2e       	mov	r13, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    484e:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:190

    char stopChar = current();

    move();
    for (;;) {
      char c = current();
    4850:	ce 01       	movw	r24, r28
    4852:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4856:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:192

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
    4858:	d8 16       	cp	r13, r24
    485a:	89 f1       	breq	.+98     	; 0x48be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x8c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:194

      if (c == '\0') return DeserializationError::IncompleteInput;
    485c:	81 11       	cpse	r24, r1
    485e:	0a c0       	rjmp	.+20     	; 0x4874 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x42>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:212
    }

    *result = str.c_str();
    if (*result == NULL) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }
    4864:	df 91       	pop	r29
    4866:	cf 91       	pop	r28
    4868:	1f 91       	pop	r17
    486a:	0f 91       	pop	r16
    486c:	ff 90       	pop	r15
    486e:	ef 90       	pop	r14
    4870:	df 90       	pop	r13
    4872:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:196
      move();
      if (c == stopChar) break;

      if (c == '\0') return DeserializationError::IncompleteInput;

      if (c == '\\') {
    4874:	8c 35       	cpi	r24, 0x5C	; 92
    4876:	d1 f4       	brne	.+52     	; 0x48ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x7a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:197
        c = current();
    4878:	ce 01       	movw	r24, r28
    487a:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:198
        if (c == '\0') return DeserializationError::IncompleteInput;
    487e:	88 23       	and	r24, r24
    4880:	79 f3       	breq	.-34     	; 0x4860 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x2e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:199
        if (c == 'u') return DeserializationError::NotSupported;
    4882:	85 37       	cpi	r24, 0x75	; 117
    4884:	19 f4       	brne	.+6      	; 0x488c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5a>
    4886:	84 e0       	ldi	r24, 0x04	; 4
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	ec cf       	rjmp	.-40     	; 0x4864 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:23
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    488c:	e8 ee       	ldi	r30, 0xE8	; 232
    488e:	f2 e0       	ldi	r31, 0x02	; 2
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:25
    for (;;) {
      if (p[0] == '\0') return c;
    4890:	90 81       	ld	r25, Z
    4892:	99 23       	and	r25, r25
    4894:	51 f0       	breq	.+20     	; 0x48aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:26
      if (p[0] == c) return p[1];
    4896:	89 13       	cpse	r24, r25
    4898:	06 c0       	rjmp	.+12     	; 0x48a6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x74>
    489a:	81 81       	ldd	r24, Z+1	; 0x01
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:202
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
    489c:	81 11       	cpse	r24, r1
    489e:	05 c0       	rjmp	.+10     	; 0x48aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x78>
    48a0:	82 e0       	ldi	r24, 0x02	; 2
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	df cf       	rjmp	.-66     	; 0x4864 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
unescapeChar():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/./EscapeSequence.hpp:27
      p += 2;
    48a6:	32 96       	adiw	r30, 0x02	; 2
    48a8:	f3 cf       	rjmp	.-26     	; 0x4890 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x5e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    48aa:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    48ac:	ec 81       	ldd	r30, Y+4	; 0x04
    48ae:	fd 81       	ldd	r31, Y+5	; 0x05
    48b0:	9f 01       	movw	r18, r30
    48b2:	2f 5f       	subi	r18, 0xFF	; 255
    48b4:	3f 4f       	sbci	r19, 0xFF	; 255
    48b6:	3d 83       	std	Y+5, r19	; 0x05
    48b8:	2c 83       	std	Y+4, r18	; 0x04
    48ba:	80 83       	st	Z, r24
    48bc:	c9 cf       	rjmp	.-110    	; 0x4850 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x1e>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    48be:	ec 81       	ldd	r30, Y+4	; 0x04
    48c0:	fd 81       	ldd	r31, Y+5	; 0x05
    48c2:	cf 01       	movw	r24, r30
    48c4:	01 96       	adiw	r24, 0x01	; 1
    48c6:	9d 83       	std	Y+5, r25	; 0x05
    48c8:	8c 83       	std	Y+4, r24	; 0x04
    48ca:	10 82       	st	Z, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE17parseQuotedStringEPPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:209
      }

      str.append(c);
    }

    *result = str.c_str();
    48cc:	f7 01       	movw	r30, r14
    48ce:	11 83       	std	Z+1, r17	; 0x01
    48d0:	00 83       	st	Z, r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:210
    if (*result == NULL) return DeserializationError::NoMemory;
    48d2:	83 e0       	ldi	r24, 0x03	; 3
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	01 2b       	or	r16, r17
    48d8:	29 f2       	breq	.-118    	; 0x4864 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:211
    return DeserializationError::Ok;
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	c2 cf       	rjmp	.-124    	; 0x4864 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)+0x32>

000048e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:277

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    48e0:	1f 93       	push	r17
    48e2:	cf 93       	push	r28
    48e4:	df 93       	push	r29
    48e6:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    for (;;) {
      switch (current()) {
    48e8:	ce 01       	movw	r24, r28
    48ea:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    48ee:	8b 30       	cpi	r24, 0x0B	; 11
    48f0:	3c f4       	brge	.+14     	; 0x4900 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x20>
    48f2:	89 30       	cpi	r24, 0x09	; 9
    48f4:	5c f4       	brge	.+22     	; 0x490c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    48f6:	88 23       	and	r24, r24
    48f8:	e9 f0       	breq	.+58     	; 0x4934 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:331
              return DeserializationError::InvalidInput;
          }
          break;

        default:
          return DeserializationError::Ok;
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	1c c0       	rjmp	.+56     	; 0x4938 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:279
    return c == '\'' || c == '\"';
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    4900:	80 32       	cpi	r24, 0x20	; 32
    4902:	21 f0       	breq	.+8      	; 0x490c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
    4904:	8f 32       	cpi	r24, 0x2F	; 47
    4906:	21 f0       	breq	.+8      	; 0x4910 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x30>
    4908:	8d 30       	cpi	r24, 0x0D	; 13
    490a:	b9 f7       	brne	.-18     	; 0x48fa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x1a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    490c:	18 86       	std	Y+8, r1	; 0x08
    490e:	ec cf       	rjmp	.-40     	; 0x48e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>
    4910:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:295
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
    4912:	ce 01       	movw	r24, r28
    4914:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4918:	8a 32       	cpi	r24, 0x2A	; 42
    491a:	29 f0       	breq	.+10     	; 0x4926 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x46>
    491c:	8f 32       	cpi	r24, 0x2F	; 47
    491e:	d1 f0       	breq	.+52     	; 0x4954 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:326
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
    4920:	82 e0       	ldi	r24, 0x02	; 2
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	09 c0       	rjmp	.+18     	; 0x4938 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x58>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4926:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:299
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
    4928:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:301
              for (;;) {
                char c = current();
    492a:	ce 01       	movw	r24, r28
    492c:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:302
                if (c == '\0') return DeserializationError::IncompleteInput;
    4930:	81 11       	cpse	r24, r1
    4932:	06 c0       	rjmp	.+12     	; 0x4940 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x60>
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:334

        default:
          return DeserializationError::Ok;
      }
    }
  }
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	1f 91       	pop	r17
    493e:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:303
              move();  // skip '*'
              bool wasStar = false;
              for (;;) {
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
    4940:	8f 32       	cpi	r24, 0x2F	; 47
    4942:	11 f4       	brne	.+4      	; 0x4948 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x68>
    4944:	11 11       	cpse	r17, r1
    4946:	e2 cf       	rjmp	.-60     	; 0x490c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x2c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:307
                  move();
                  break;
                }
                wasStar = c == '*';
    4948:	11 e0       	ldi	r17, 0x01	; 1
    494a:	8a 32       	cpi	r24, 0x2A	; 42
    494c:	09 f0       	breq	.+2      	; 0x4950 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x70>
    494e:	10 e0       	ldi	r17, 0x00	; 0
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4950:	18 86       	std	Y+8, r1	; 0x08
    4952:	eb cf       	rjmp	.-42     	; 0x492a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x4a>
    4954:	18 86       	std	Y+8, r1	; 0x08
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE21skipSpacesAndCommentsEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:318
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
    4956:	ce 01       	movw	r24, r28
    4958:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:319
                if (c == '\0') return DeserializationError::IncompleteInput;
    495c:	88 23       	and	r24, r24
    495e:	51 f3       	breq	.-44     	; 0x4934 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x54>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:320
                if (c == '\n') break;
    4960:	8a 30       	cpi	r24, 0x0A	; 10
    4962:	c1 f7       	brne	.-16     	; 0x4954 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x74>
    4964:	c1 cf       	rjmp	.-126    	; 0x48e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()+0x8>

00004966 <button_get_term_ring_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_ring_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5564
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_ring_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (args3 == default_ring)
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	90 91 0a 0a 	lds	r25, 0x0A0A	; 0x800a0a <default_ring>
    496c:	94 13       	cpse	r25, r20
    496e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5567
    return 1;
  return 0;
}
    4970:	08 95       	ret

00004972 <button_get_show_default_temp_active(unsigned int, unsigned int, unsigned char)>:
_Z35button_get_show_default_temp_activejjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5538


uint8_t button_get_show_default_temp_active(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t ret = 0;
  if (default_show_temp == args3)
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	90 91 be 08 	lds	r25, 0x08BE	; 0x8008be <default_show_temp>
    4978:	94 13       	cpse	r25, r20
    497a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5542
    ret = 1;

  return ret;
}
    497c:	08 95       	ret

0000497e <button_get_show_default_temp_max_items(unsigned int, unsigned int, unsigned char)>:
_Z38button_get_show_default_temp_max_itemsjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5531
}
//////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci soucet vsech cidel v systemu
uint8_t button_get_show_default_temp_max_items(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return use_tds + use_rtds;
    497e:	90 91 cf 0a 	lds	r25, 0x0ACF	; 0x800acf <use_tds>
    4982:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <use_rtds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5532
}
    4986:	89 0f       	add	r24, r25
    4988:	08 95       	ret

0000498a <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z41get_function_one_wire_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5306
  }
}

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
    498a:	eb eb       	ldi	r30, 0xBB	; 187
    498c:	f9 e0       	ldi	r31, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5307
  uint8_t active = 0;
    498e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5309
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    if (w_rom[cnt].used == 1) active++;
    4990:	91 85       	ldd	r25, Z+9	; 0x09
    4992:	91 30       	cpi	r25, 0x01	; 1
    4994:	09 f4       	brne	.+2      	; 0x4998 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0xe>
    4996:	8f 5f       	subi	r24, 0xFF	; 255
    4998:	3b 96       	adiw	r30, 0x0b	; 11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5308

/// funkce, ktera vraci pocet dynamickych polozek 1w
uint8_t get_function_one_wire_last_index_for_menu(uint16_t idx, uint16_t args2, uint8_t args3)
{
  uint8_t active = 0;
  for (uint8_t cnt = 0; cnt < HW_ONEWIRE_MAXROMS; cnt++)
    499a:	99 e0       	ldi	r25, 0x09	; 9
    499c:	ed 3f       	cpi	r30, 0xFD	; 253
    499e:	f9 07       	cpc	r31, r25
    49a0:	b9 f7       	brne	.-18     	; 0x4990 <get_function_one_wire_last_index_for_menu(unsigned int, unsigned int, unsigned char)+0x6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5311
    if (w_rom[cnt].used == 1) active++;
  return active;
}
    49a2:	08 95       	ret

000049a4 <get_function_rtds_last_index_for_menu(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_rtds_last_index_for_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5222
/// funkce vraci pocet obsazenych rtds snimacu
uint8_t get_function_rtds_last_index_for_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return MAX_RTDS;
  //return use_rtds;
}
    49a4:	8a e0       	ldi	r24, 0x0A	; 10
    49a6:	08 95       	ret

000049a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5198
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
    49a8:	ef 92       	push	r14
    49aa:	ff 92       	push	r15
    49ac:	0f 93       	push	r16
    49ae:	1f 93       	push	r17
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    49b0:	80 17       	cp	r24, r16
    49b2:	91 07       	cpc	r25, r17
    49b4:	74 f4       	brge	.+28     	; 0x49d2 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    49b6:	84 0f       	add	r24, r20
    49b8:	95 1f       	adc	r25, r21
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    49ba:	08 17       	cp	r16, r24
    49bc:	19 07       	cpc	r17, r25
    49be:	4c f4       	brge	.+18     	; 0x49d2 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
    49c0:	6e 15       	cp	r22, r14
    49c2:	7f 05       	cpc	r23, r15
    49c4:	34 f4       	brge	.+12     	; 0x49d2 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2a>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5200
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
    49c6:	62 0f       	add	r22, r18
    49c8:	73 1f       	adc	r23, r19
is_pressed():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2626
}
/*************************************************************************************************************************/
/// funkce, ktera vraci jestli byla udalost v danem okne
boolean is_pressed(int16_t x1, int16_t y1, int16_t x2, int16_t y2, int16_t px, int16_t py)
{
  if ((px > x1 && px < x2) && (py > y1 && py < y2))
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	e6 16       	cp	r14, r22
    49ce:	f7 06       	cpc	r15, r23
    49d0:	0c f0       	brlt	.+2      	; 0x49d4 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
_Z18button_click_touchjjjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5199
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
}
/////
bool button_click_touch(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint16_t click_x, uint16_t click_y)
{
  bool ret = false;
    49d2:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5205
  if (is_pressed(x, y, x + size_x, y + size_y, click_x, click_y) == true)
  {
    ret = true;
  }
  return ret;
}
    49d4:	1f 91       	pop	r17
    49d6:	0f 91       	pop	r16
    49d8:	ff 90       	pop	r15
    49da:	ef 90       	pop	r14
    49dc:	08 95       	ret

000049de <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_Z30process_display_element_sliderPhS_hh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5055
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    menu_slider_data_current[args1]--;
}
///
void process_display_element_slider(uint8_t *start, uint8_t *stop, uint8_t args, uint8_t max_element)
{
    49de:	cf 93       	push	r28
    49e0:	df 93       	push	r29
    49e2:	fc 01       	movw	r30, r24
    49e4:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5056
  if (max_element > 0)
    49e6:	22 23       	and	r18, r18
    49e8:	09 f1       	breq	.+66     	; 0x4a2c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5058
  {
    menu_slider_data_max = *stop;
    49ea:	98 81       	ld	r25, Y
    49ec:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <menu_slider_data_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5059
    menu_slider_data_min = *start;
    49f0:	80 81       	ld	r24, Z
    49f2:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <menu_slider_data_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5060
    menu_slider_data_max_element = max_element;
    49f6:	20 93 a7 08 	sts	0x08A7, r18	; 0x8008a7 <menu_slider_data_max_element>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5062
    ///
    *start = menu_slider_data_current[args];
    49fa:	a4 2f       	mov	r26, r20
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	ae 55       	subi	r26, 0x5E	; 94
    4a00:	b7 4f       	sbci	r27, 0xF7	; 247
    4a02:	3c 91       	ld	r19, X
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5063
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    4a04:	62 2f       	mov	r22, r18
    4a06:	70 e0       	ldi	r23, 0x00	; 0
    4a08:	49 2f       	mov	r20, r25
    4a0a:	50 e0       	ldi	r21, 0x00	; 0
    4a0c:	db 01       	movw	r26, r22
    4a0e:	a3 0f       	add	r26, r19
    4a10:	b1 1d       	adc	r27, r1
    4a12:	4a 17       	cp	r20, r26
    4a14:	5b 07       	cpc	r21, r27
    4a16:	6c f0       	brlt	.+26     	; 0x4a32 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5062
  {
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    4a18:	30 83       	st	Z, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5065
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
    4a1a:	80 81       	ld	r24, Z
    4a1c:	98 17       	cp	r25, r24
    4a1e:	08 f4       	brcc	.+2      	; 0x4a22 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5066
      *start = menu_slider_data_max;
    4a20:	90 83       	st	Z, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5069
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
    4a22:	29 17       	cp	r18, r25
    4a24:	78 f4       	brcc	.+30     	; 0x4a44 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5068
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
      *start = menu_slider_data_max - max_element;
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    4a26:	80 81       	ld	r24, Z
    4a28:	28 0f       	add	r18, r24
    4a2a:	28 83       	st	Y, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5072
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
  }
}
    4a2c:	df 91       	pop	r29
    4a2e:	cf 91       	pop	r28
    4a30:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5063
    menu_slider_data_max = *stop;
    menu_slider_data_min = *start;
    menu_slider_data_max_element = max_element;
    ///
    *start = menu_slider_data_current[args];
    if (*start + max_element > menu_slider_data_max && menu_slider_data_max - menu_slider_data_min > menu_slider_data_max_element)
    4a32:	48 1b       	sub	r20, r24
    4a34:	51 09       	sbc	r21, r1
    4a36:	64 17       	cp	r22, r20
    4a38:	75 07       	cpc	r23, r21
    4a3a:	74 f7       	brge	.-36     	; 0x4a18 <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5064
      *start = menu_slider_data_max - max_element;
    4a3c:	89 2f       	mov	r24, r25
    4a3e:	82 1b       	sub	r24, r18
    4a40:	80 83       	st	Z, r24
    4a42:	eb cf       	rjmp	.-42     	; 0x4a1a <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5070
    if (*start > menu_slider_data_max)
      *start = menu_slider_data_max;
    ///
    *stop = *start + max_element;
    if (menu_slider_data_max <= max_element)
      *stop = menu_slider_data_max;
    4a44:	98 83       	st	Y, r25
    4a46:	f2 cf       	rjmp	.-28     	; 0x4a2c <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)+0x4e>

00004a48 <display_function_vertical_slider_dec(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_dechh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5050
    menu_slider_data_current[args1]++;
}
///
void display_function_vertical_slider_dec(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] > menu_slider_data_min)
    4a48:	e8 2f       	mov	r30, r24
    4a4a:	f0 e0       	ldi	r31, 0x00	; 0
    4a4c:	ee 55       	subi	r30, 0x5E	; 94
    4a4e:	f7 4f       	sbci	r31, 0xF7	; 247
    4a50:	80 81       	ld	r24, Z
    4a52:	90 91 a8 08 	lds	r25, 0x08A8	; 0x8008a8 <menu_slider_data_min>
    4a56:	98 17       	cp	r25, r24
    4a58:	10 f4       	brcc	.+4      	; 0x4a5e <display_function_vertical_slider_dec(unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5051
    menu_slider_data_current[args1]--;
    4a5a:	81 50       	subi	r24, 0x01	; 1
    4a5c:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5052
}
    4a5e:	08 95       	ret

00004a60 <display_function_vertical_slider_inc(unsigned char, unsigned char)>:
_Z36display_function_vertical_slider_inchh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5044
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
}
///
void display_function_vertical_slider_inc(uint8_t args1, uint8_t args2)
{
  if (menu_slider_data_current[args1] < (menu_slider_data_max - menu_slider_data_max_element))
    4a60:	e8 2f       	mov	r30, r24
    4a62:	f0 e0       	ldi	r31, 0x00	; 0
    4a64:	ee 55       	subi	r30, 0x5E	; 94
    4a66:	f7 4f       	sbci	r31, 0xF7	; 247
    4a68:	80 81       	ld	r24, Z
    4a6a:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <menu_slider_data_max>
    4a6e:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <menu_slider_data_max_element>
    4a72:	29 1b       	sub	r18, r25
    4a74:	33 0b       	sbc	r19, r19
    4a76:	82 17       	cp	r24, r18
    4a78:	13 06       	cpc	r1, r19
    4a7a:	14 f4       	brge	.+4      	; 0x4a80 <display_function_vertical_slider_inc(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5045
    menu_slider_data_current[args1]++;
    4a7c:	8f 5f       	subi	r24, 0xFF	; 255
    4a7e:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5046
}
    4a80:	08 95       	ret

00004a82 <a2d_complete(unsigned char, unsigned int)>:
_Z12a2d_completehj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3936
}
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
    4a82:	83 30       	cpi	r24, 0x03	; 3
    4a84:	41 f4       	brne	.+16     	; 0x4a96 <a2d_complete(unsigned char, unsigned int)+0x14>
    4a86:	70 93 03 0a 	sts	0x0A03, r23	; 0x800a03 <proud+0x1>
    4a8a:	60 93 02 0a 	sts	0x0A02, r22	; 0x800a02 <proud>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3941
  if (channel == A_TRIV ) tritri = data;
  if (channel == A_PETV) petnula = data;
  if (channel == A_DVANACTV) dvanact = data;
  if (channel == A_LIGHT) light_curr = data;
  a2d_run_now = 1;
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3942
}
    4a94:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3937
/*************************************************************************************************************************/
/////  zde resim, zpracovani zmerenych dat ///////////////////////////////////////////////////
void a2d_complete(uint8_t channel, uint16_t data)
{
  if (channel == A_PROUD) proud = data;
  if (channel == A_TRIV ) tritri = data;
    4a96:	86 30       	cpi	r24, 0x06	; 6
    4a98:	29 f4       	brne	.+10     	; 0x4aa4 <a2d_complete(unsigned char, unsigned int)+0x22>
    4a9a:	70 93 09 0a 	sts	0x0A09, r23	; 0x800a09 <tritri+0x1>
    4a9e:	60 93 08 0a 	sts	0x0A08, r22	; 0x800a08 <tritri>
    4aa2:	f5 cf       	rjmp	.-22     	; 0x4a8e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3938
  if (channel == A_PETV) petnula = data;
    4aa4:	85 30       	cpi	r24, 0x05	; 5
    4aa6:	29 f4       	brne	.+10     	; 0x4ab2 <a2d_complete(unsigned char, unsigned int)+0x30>
    4aa8:	70 93 07 0a 	sts	0x0A07, r23	; 0x800a07 <petnula+0x1>
    4aac:	60 93 06 0a 	sts	0x0A06, r22	; 0x800a06 <petnula>
    4ab0:	ee cf       	rjmp	.-36     	; 0x4a8e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3939
  if (channel == A_DVANACTV) dvanact = data;
    4ab2:	84 30       	cpi	r24, 0x04	; 4
    4ab4:	29 f4       	brne	.+10     	; 0x4ac0 <a2d_complete(unsigned char, unsigned int)+0x3e>
    4ab6:	70 93 05 0a 	sts	0x0A05, r23	; 0x800a05 <dvanact+0x1>
    4aba:	60 93 04 0a 	sts	0x0A04, r22	; 0x800a04 <dvanact>
    4abe:	e7 cf       	rjmp	.-50     	; 0x4a8e <a2d_complete(unsigned char, unsigned int)+0xc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3940
  if (channel == A_LIGHT) light_curr = data;
    4ac0:	87 30       	cpi	r24, 0x07	; 7
    4ac2:	29 f7       	brne	.-54     	; 0x4a8e <a2d_complete(unsigned char, unsigned int)+0xc>
    4ac4:	70 93 cd 0a 	sts	0x0ACD, r23	; 0x800acd <light_curr+0x1>
    4ac8:	60 93 cc 0a 	sts	0x0ACC, r22	; 0x800acc <light_curr>
    4acc:	e0 cf       	rjmp	.-64     	; 0x4a8e <a2d_complete(unsigned char, unsigned int)+0xc>

00004ace <get_function_return_args_1(unsigned int, unsigned int, unsigned char)>:
_Z26get_function_return_args_1jjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2590


uint8_t get_function_return_args_1(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return args1;
}
    4ace:	08 95       	ret

00004ad0 <menu_redraw_update_temp(unsigned char, unsigned char)>:
_Z23menu_redraw_update_temphh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2578
  return 0;
}

uint8_t menu_redraw_update_temp(uint8_t args1, uint8_t args2)
{
  if (menu_redraw10s == 1)
    4ad0:	80 91 d6 0a 	lds	r24, 0x0AD6	; 0x800ad6 <menu_redraw10s>
    4ad4:	81 30       	cpi	r24, 0x01	; 1
    4ad6:	19 f4       	brne	.+6      	; 0x4ade <menu_redraw_update_temp(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2580
  {
    menu_redraw10s = 0;
    4ad8:	10 92 d6 0a 	sts	0x0AD6, r1	; 0x800ad6 <menu_redraw10s>
    4adc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2583
    return 1;
  }
  return 0;
    4ade:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2584
}
    4ae0:	08 95       	ret

00004ae2 <menu_redraw_change_term_mode(unsigned char, unsigned char)>:
_Z28menu_redraw_change_term_modehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2568
  return 0;
}

uint8_t menu_redraw_change_term_mode(uint8_t args1, uint8_t args2)
{
  if (change_term_mode == 1)
    4ae2:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <change_term_mode>
    4ae6:	81 30       	cpi	r24, 0x01	; 1
    4ae8:	19 f4       	brne	.+6      	; 0x4af0 <menu_redraw_change_term_mode(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2570
  {
    change_term_mode = 0;
    4aea:	10 92 ed 08 	sts	0x08ED, r1	; 0x8008ed <change_term_mode>
    4aee:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2573
    return 1;
  }
  return 0;
    4af0:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2574
}
    4af2:	08 95       	ret

00004af4 <menu_redraw_time05s(unsigned char, unsigned char)>:
_Z19menu_redraw_time05shh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2558
}


uint8_t menu_redraw_time05s(uint8_t args1, uint8_t args2)
{
  if (menu_redraw05s == 1)
    4af4:	80 91 d1 0a 	lds	r24, 0x0AD1	; 0x800ad1 <menu_redraw05s>
    4af8:	81 30       	cpi	r24, 0x01	; 1
    4afa:	19 f4       	brne	.+6      	; 0x4b02 <menu_redraw_time05s(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2560
  {
    menu_redraw05s = 0;
    4afc:	10 92 d1 0a 	sts	0x0AD1, r1	; 0x800ad1 <menu_redraw05s>
    4b00:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2563
    return 1;
  }
  return 0;
    4b02:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2564
}
    4b04:	08 95       	ret

00004b06 <click_keyboard_type(unsigned char, unsigned char)>:
_Z19click_keyboard_typehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2523
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}

void click_keyboard_type(uint8_t args1, uint8_t args2)
{
  dialog_set_string_keyboard_type = args1;
    4b06:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <dialog_set_string_keyboard_type>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2524
}
    4b0a:	08 95       	ret

00004b0c <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z35get_function_keyboard_alfa_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2513
  display_element_set_string_add_char(znak);
}
/// vraci pocet prvku pro zobrazeni
uint8_t get_function_keyboard_alfa_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4b0c:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <dialog_set_string_keyboard_type>
    4b10:	83 30       	cpi	r24, 0x03	; 3
    4b12:	08 f0       	brcs	.+2      	; 0x4b16 <get_function_keyboard_alfa_max_keys(unsigned int, unsigned int, unsigned char)+0xa>
    4b14:	08 95       	ret
    4b16:	8a e1       	ldi	r24, 0x1A	; 26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2519
    return KEYBOARD_SIZE_CHAR_UPPER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    return KEYBOARD_SIZE_CHAR_LOWER;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    return KEYBOARD_SIZE_CHAR_SPECIAL;
}
    4b18:	08 95       	ret

00004b1a <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)>:
_Z31get_function_keyboard_alfa_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2484

/////
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    4b1a:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <dialog_set_string_keyboard_type>
    4b1e:	91 11       	cpse	r25, r1
    4b20:	0a c0       	rjmp	.+20     	; 0x4b36 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x1c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2485
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
    4b22:	e8 2f       	mov	r30, r24
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	e4 5c       	subi	r30, 0xC4	; 196
    4b28:	fe 4c       	sbci	r31, 0xCE	; 206
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4b2a:	e4 91       	lpm	r30, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2490
  line1[0] = znak;
    4b2c:	da 01       	movw	r26, r20
    4b2e:	ec 93       	st	X, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2491
  line2[0] = 0;
    4b30:	f9 01       	movw	r30, r18
    4b32:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2492
}
    4b34:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2486
void get_function_keyboard_alfa_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args1]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    4b36:	91 30       	cpi	r25, 0x01	; 1
    4b38:	29 f4       	brne	.+10     	; 0x4b44 <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2487
    znak = pgm_read_byte(&keyboad_number_char_lower[args1]);
    4b3a:	e8 2f       	mov	r30, r24
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	ee 5d       	subi	r30, 0xDE	; 222
    4b40:	fe 4c       	sbci	r31, 0xCE	; 206
    4b42:	f3 cf       	rjmp	.-26     	; 0x4b2a <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2488
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    4b44:	92 30       	cpi	r25, 0x02	; 2
    4b46:	91 f7       	brne	.-28     	; 0x4b2c <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2489
    znak = pgm_read_byte(&keyboad_number_char_special[args1]);
    4b48:	e8 2f       	mov	r30, r24
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	e8 5f       	subi	r30, 0xF8	; 248
    4b4e:	fe 4c       	sbci	r31, 0xCE	; 206
    4b50:	ec cf       	rjmp	.-40     	; 0x4b2a <get_function_keyboard_alfa_char(unsigned char, unsigned char, char*, char*)+0x10>

00004b52 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)>:
_Z33get_function_keyboard_number_charhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4b52:	8a 30       	cpi	r24, 0x0A	; 10
    4b54:	31 f0       	breq	.+12     	; 0x4b62 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2475
   args1 - index prvku
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
    4b56:	80 5d       	subi	r24, 0xD0	; 208
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
  if (args1 == 10) line1[0] = '.';
    4b58:	fa 01       	movw	r30, r20
    4b5a:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2477
  line2[0] = 0;
    4b5c:	f9 01       	movw	r30, r18
    4b5e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2478
}
    4b60:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2476
   args2
*/
void get_function_keyboard_number_char(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  line1[0] = '0' + args1;
  if (args1 == 10) line1[0] = '.';
    4b62:	8e e2       	ldi	r24, 0x2E	; 46
    4b64:	f9 cf       	rjmp	.-14     	; 0x4b58 <get_function_keyboard_number_char(unsigned char, unsigned char, char*, char*)+0x6>

00004b66 <get_function_keyboard_number_max_keys(unsigned int, unsigned int, unsigned char)>:
_Z37get_function_keyboard_number_max_keysjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2455
//////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci pocet polozek dynamickeho menu
uint8_t get_function_keyboard_number_max_keys(uint16_t args1, uint16_t args2, uint8_t args3)
{
  return 11;
}
    4b66:	8b e0       	ldi	r24, 0x0B	; 11
    4b68:	08 95       	ret

00004b6a <get_function_budik_enabled(unsigned char)>:
_Z26get_function_budik_enabledh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2437
   funkce pro nastaveni budiku
*/
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	08 95       	ret

00004b6e <display_function_set_variable_plus()>:
_Z34display_function_set_variable_plusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2314
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable_plus(void)
{
  if ((menu_dialog_set_variable_now + menu_dialog_set_variable_step) <= menu_dialog_set_variable_max)
    4b6e:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <menu_dialog_set_variable_step>
    4b72:	20 91 9e 08 	lds	r18, 0x089E	; 0x80089e <menu_dialog_set_variable_now>
    4b76:	30 91 9f 08 	lds	r19, 0x089F	; 0x80089f <menu_dialog_set_variable_now+0x1>
    4b7a:	82 0f       	add	r24, r18
    4b7c:	93 2f       	mov	r25, r19
    4b7e:	91 1d       	adc	r25, r1
    4b80:	20 91 53 08 	lds	r18, 0x0853	; 0x800853 <menu_dialog_set_variable_max>
    4b84:	30 91 54 08 	lds	r19, 0x0854	; 0x800854 <menu_dialog_set_variable_max+0x1>
    4b88:	28 17       	cp	r18, r24
    4b8a:	39 07       	cpc	r19, r25
    4b8c:	8c f0       	brlt	.+34     	; 0x4bb0 <display_function_set_variable_plus()+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2316
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now + menu_dialog_set_variable_step;
    4b8e:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <menu_dialog_set_variable_now+0x1>
    4b92:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2317
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4b96:	20 91 50 08 	lds	r18, 0x0850	; 0x800850 <__data_end>
    4b9a:	21 30       	cpi	r18, 0x01	; 1
    4b9c:	49 f4       	brne	.+18     	; 0x4bb0 <display_function_set_variable_plus()+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2318
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
    4b9e:	60 91 51 08 	lds	r22, 0x0851	; 0x800851 <menu_dialog_set_variable_args>
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	e0 91 ab 08 	lds	r30, 0x08AB	; 0x8008ab <dialog_save_variable_function>
    4ba8:	f0 91 ac 08 	lds	r31, 0x08AC	; 0x8008ac <dialog_save_variable_function+0x1>
    4bac:	40 e0       	ldi	r20, 0x00	; 0
    4bae:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2320
  }
}
    4bb0:	08 95       	ret

00004bb2 <display_function_set_variable_minus()>:
_Z35display_function_set_variable_minusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2305
  return menu_dialog_set_variable_now;
}

void display_function_set_variable_minus(void)
{
  if (menu_dialog_set_variable_now - menu_dialog_set_variable_step >= menu_dialog_set_variable_min)
    4bb2:	20 91 52 08 	lds	r18, 0x0852	; 0x800852 <menu_dialog_set_variable_step>
    4bb6:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <menu_dialog_set_variable_now>
    4bba:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <menu_dialog_set_variable_now+0x1>
    4bbe:	82 1b       	sub	r24, r18
    4bc0:	91 09       	sbc	r25, r1
    4bc2:	20 91 55 08 	lds	r18, 0x0855	; 0x800855 <menu_dialog_set_variable_min>
    4bc6:	30 91 56 08 	lds	r19, 0x0856	; 0x800856 <menu_dialog_set_variable_min+0x1>
    4bca:	82 17       	cp	r24, r18
    4bcc:	93 07       	cpc	r25, r19
    4bce:	8c f0       	brlt	.+34     	; 0x4bf2 <display_function_set_variable_minus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2307
  {
    menu_dialog_set_variable_now = menu_dialog_set_variable_now - menu_dialog_set_variable_step;
    4bd0:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <menu_dialog_set_variable_now+0x1>
    4bd4:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2308
    if (menu_dialog_set_variable_update_now == H_TRUE)
    4bd8:	20 91 50 08 	lds	r18, 0x0850	; 0x800850 <__data_end>
    4bdc:	21 30       	cpi	r18, 0x01	; 1
    4bde:	49 f4       	brne	.+18     	; 0x4bf2 <display_function_set_variable_minus()+0x40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2309
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
    4be0:	60 91 51 08 	lds	r22, 0x0851	; 0x800851 <menu_dialog_set_variable_args>
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	e0 91 ab 08 	lds	r30, 0x08AB	; 0x8008ab <dialog_save_variable_function>
    4bea:	f0 91 ac 08 	lds	r31, 0x08AC	; 0x8008ac <dialog_save_variable_function+0x1>
    4bee:	40 e0       	ldi	r20, 0x00	; 0
    4bf0:	19 94       	eijmp
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2311
  }
}
    4bf2:	08 95       	ret

00004bf4 <MenuHistoryGetMenu(unsigned char*)>:
_Z18MenuHistoryGetMenuPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2233
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
    4bf4:	ff 92       	push	r15
    4bf6:	0f 93       	push	r16
    4bf8:	1f 93       	push	r17
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	dc 01       	movw	r26, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c00:	20 91 ec 08 	lds	r18, 0x08EC	; 0x8008ec <MenuHistoryIndex>
    4c04:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	61 e2       	ldi	r22, 0x21	; 33
    4c0a:	76 e0       	ldi	r23, 0x06	; 6
    4c0c:	c2 e6       	ldi	r28, 0x62	; 98
    4c0e:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c10:	89 01       	movw	r16, r18
    4c12:	08 5a       	subi	r16, 0xA8	; 168
    4c14:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4c16:	fb 01       	movw	r30, r22
    4c18:	84 91       	lpm	r24, Z
    4c1a:	98 17       	cp	r25, r24
    4c1c:	e8 f4       	brcc	.+58     	; 0x4c58 <MenuHistoryGetMenu(unsigned char*)+0x64>
    4c1e:	9c 9f       	mul	r25, r28
    4c20:	a0 01       	movw	r20, r0
    4c22:	9d 9f       	mul	r25, r29
    4c24:	50 0d       	add	r21, r0
    4c26:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2238
  {
    menus = &Menu_All.ListMenu1[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c28:	fa 01       	movw	r30, r20
    4c2a:	ef 58       	subi	r30, 0x8F	; 143
    4c2c:	f7 4f       	sbci	r31, 0xF7	; 247
    4c2e:	f4 90       	lpm	r15, Z
    4c30:	f8 01       	movw	r30, r16
    4c32:	80 81       	ld	r24, Z
    4c34:	8f 11       	cpse	r24, r15
    4c36:	0e c0       	rjmp	.+28     	; 0x4c54 <MenuHistoryGetMenu(unsigned char*)+0x60>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2237
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
  {
    menus = &Menu_All.ListMenu1[idx];
    4c38:	4c 5d       	subi	r20, 0xDC	; 220
    4c3a:	59 4f       	sbci	r21, 0xF9	; 249
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2259
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
    4c3c:	2e 51       	subi	r18, 0x1E	; 30
    4c3e:	37 4f       	sbci	r19, 0xF7	; 247
    4c40:	f9 01       	movw	r30, r18
    4c42:	20 81       	ld	r18, Z
    4c44:	2c 93       	st	X, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2263
      return menus;
    }
  }
}
    4c46:	ca 01       	movw	r24, r20
    4c48:	df 91       	pop	r29
    4c4a:	cf 91       	pop	r28
    4c4c:	1f 91       	pop	r17
    4c4e:	0f 91       	pop	r16
    4c50:	ff 90       	pop	r15
    4c52:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2235
}
///
Menu1 *MenuHistoryGetMenu(uint8_t *args1)
{
  Menu1 *menus;
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu1); idx++)
    4c54:	9f 5f       	subi	r25, 0xFF	; 255
    4c56:	df cf       	rjmp	.-66     	; 0x4c16 <MenuHistoryGetMenu(unsigned char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2244
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	62 e2       	ldi	r22, 0x22	; 34
    4c5c:	76 e0       	ldi	r23, 0x06	; 6
    4c5e:	c2 e6       	ldi	r28, 0x62	; 98
    4c60:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c62:	89 01       	movw	r16, r18
    4c64:	08 5a       	subi	r16, 0xA8	; 168
    4c66:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2244
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c68:	fb 01       	movw	r30, r22
    4c6a:	84 91       	lpm	r24, Z
    4c6c:	98 17       	cp	r25, r24
    4c6e:	90 f4       	brcc	.+36     	; 0x4c94 <MenuHistoryGetMenu(unsigned char*)+0xa0>
    4c70:	9c 9f       	mul	r25, r28
    4c72:	a0 01       	movw	r20, r0
    4c74:	9d 9f       	mul	r25, r29
    4c76:	50 0d       	add	r21, r0
    4c78:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2247
  {
    menus = &Menu_All.ListMenu2[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c7a:	fa 01       	movw	r30, r20
    4c7c:	e3 54       	subi	r30, 0x43	; 67
    4c7e:	f9 4e       	sbci	r31, 0xE9	; 233
    4c80:	f4 90       	lpm	r15, Z
    4c82:	f8 01       	movw	r30, r16
    4c84:	80 81       	ld	r24, Z
    4c86:	8f 11       	cpse	r24, r15
    4c88:	03 c0       	rjmp	.+6      	; 0x4c90 <MenuHistoryGetMenu(unsigned char*)+0x9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2246
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
  {
    menus = &Menu_All.ListMenu2[idx];
    4c8a:	40 59       	subi	r20, 0x90	; 144
    4c8c:	5b 4e       	sbci	r21, 0xEB	; 235
    4c8e:	d6 cf       	rjmp	.-84     	; 0x4c3c <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2244
    {
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }
  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu2); idx++)
    4c90:	9f 5f       	subi	r25, 0xFF	; 255
    4c92:	ea cf       	rjmp	.-44     	; 0x4c68 <MenuHistoryGetMenu(unsigned char*)+0x74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	63 e2       	ldi	r22, 0x23	; 35
    4c98:	76 e0       	ldi	r23, 0x06	; 6
    4c9a:	c2 e6       	ldi	r28, 0x62	; 98
    4c9c:	d2 e0       	ldi	r29, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4c9e:	89 01       	movw	r16, r18
    4ca0:	08 5a       	subi	r16, 0xA8	; 168
    4ca2:	17 4f       	sbci	r17, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4ca4:	fb 01       	movw	r30, r22
    4ca6:	84 91       	lpm	r24, Z
    4ca8:	98 17       	cp	r25, r24
    4caa:	68 f6       	brcc	.-102    	; 0x4c46 <MenuHistoryGetMenu(unsigned char*)+0x52>
    4cac:	9c 9f       	mul	r25, r28
    4cae:	a0 01       	movw	r20, r0
    4cb0:	9d 9f       	mul	r25, r29
    4cb2:	50 0d       	add	r21, r0
    4cb4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2257
  {
    menus = &Menu_All.ListMenu3[idx];
    if (pgm_read_byte(&menus->idx) == MenuHistory[MenuHistoryIndex])
    4cb6:	fa 01       	movw	r30, r20
    4cb8:	e7 5f       	subi	r30, 0xF7	; 247
    4cba:	fa 4d       	sbci	r31, 0xDA	; 218
    4cbc:	f4 90       	lpm	r15, Z
    4cbe:	f8 01       	movw	r30, r16
    4cc0:	80 81       	ld	r24, Z
    4cc2:	8f 11       	cpse	r24, r15
    4cc4:	03 c0       	rjmp	.+6      	; 0x4ccc <MenuHistoryGetMenu(unsigned char*)+0xd8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2256
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
  {
    menus = &Menu_All.ListMenu3[idx];
    4cc6:	44 54       	subi	r20, 0x44	; 68
    4cc8:	5d 4d       	sbci	r21, 0xDD	; 221
    4cca:	b8 cf       	rjmp	.-144    	; 0x4c3c <MenuHistoryGetMenu(unsigned char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2254
      *args1 = Global_menu_args1[MenuHistoryIndex];
      return menus;
    }
  }

  for (uint8_t idx = 0; idx < pgm_read_byte(&Menu_All.len_menu3); idx++)
    4ccc:	9f 5f       	subi	r25, 0xFF	; 255
    4cce:	ea cf       	rjmp	.-44     	; 0x4ca4 <MenuHistoryGetMenu(unsigned char*)+0xb0>

00004cd0 <enable_redraw(unsigned char, unsigned char)>:
_Z13enable_redrawhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1664




bool enable_redraw(uint8_t mask, uint8_t data)
{
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1668
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
  {
    uint8_t v = (1 << i);
    4cd4:	e1 e0       	ldi	r30, 0x01	; 1
    4cd6:	f0 e0       	ldi	r31, 0x00	; 0
    4cd8:	af 01       	movw	r20, r30
    4cda:	02 2e       	mov	r0, r18
    4cdc:	01 c0       	rjmp	.+2      	; 0x4ce0 <enable_redraw(unsigned char, unsigned char)+0x10>
    4cde:	44 0f       	add	r20, r20
    4ce0:	0a 94       	dec	r0
    4ce2:	ea f7       	brpl	.-6      	; 0x4cde <enable_redraw(unsigned char, unsigned char)+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1669
    if ( (mask & v) != 0 )
    4ce4:	98 2f       	mov	r25, r24
    4ce6:	94 23       	and	r25, r20
    4ce8:	11 f0       	breq	.+4      	; 0x4cee <enable_redraw(unsigned char, unsigned char)+0x1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1670
      if ( (data & v) != 0)
    4cea:	46 23       	and	r20, r22
    4cec:	39 f4       	brne	.+14     	; 0x4cfc <enable_redraw(unsigned char, unsigned char)+0x2c>
    4cee:	2f 5f       	subi	r18, 0xFF	; 255
    4cf0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1666


bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
  for (uint8_t i = 0; i < 8; i++)
    4cf2:	28 30       	cpi	r18, 0x08	; 8
    4cf4:	31 05       	cpc	r19, r1
    4cf6:	81 f7       	brne	.-32     	; 0x4cd8 <enable_redraw(unsigned char, unsigned char)+0x8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1665



bool enable_redraw(uint8_t mask, uint8_t data)
{
  bool ret = false;
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
    4cfa:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1672
  {
    uint8_t v = (1 << i);
    if ( (mask & v) != 0 )
      if ( (data & v) != 0)
      {
        ret = true;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1677
        break;
      }
  }
  return ret;
}
    4cfe:	08 95       	ret

00004d00 <display_enable_show(unsigned char, unsigned char)>:
_Z19display_enable_showhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1652
  return 0;
}
uint8_t display_enable_show(uint8_t args1, uint8_t args2)
{
  return 1;
}
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	08 95       	ret

00004d04 <returnnullfceargs(unsigned int, unsigned int)>:
_Z17returnnullfceargsjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1648
void nullfce(void) {};
void nullfceargs(uint16_t args1, uint16_t args2) {};
uint8_t returnnullfceargs(uint16_t args1, uint16_t args2)
{
  return 0;
}
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	08 95       	ret

00004d08 <nullfce()>:
_Z7nullfcev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1643





void nullfce(void) {};
    4d08:	08 95       	ret

00004d0a <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)>:
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:57
  size_t size() const {
    return _size;
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    4d0a:	fc 01       	movw	r30, r24
_ZNK11ArduinoJson9Internals20StaticMemoryPoolBase8canAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:82
  void alignNextAlloc() {
    _size = round_size_up(_size);
  }

  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
    4d0c:	86 81       	ldd	r24, Z+6	; 0x06
    4d0e:	97 81       	ldd	r25, Z+7	; 0x07
    4d10:	68 0f       	add	r22, r24
    4d12:	79 1f       	adc	r23, r25
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4d14:	24 81       	ldd	r18, Z+4	; 0x04
    4d16:	35 81       	ldd	r19, Z+5	; 0x05
    4d18:	26 17       	cp	r18, r22
    4d1a:	37 07       	cpc	r19, r23
    4d1c:	38 f0       	brcs	.+14     	; 0x4d2c <ArduinoJson::Internals::StaticMemoryPoolBase::alloc(unsigned int)+0x22>
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase7doAllocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:86
  bool canAlloc(size_t bytes) const {
    return _size + bytes <= _capacity;
  }

  void* doAlloc(size_t bytes) {
    void* p = &_buffer[_size];
    4d1e:	22 81       	ldd	r18, Z+2	; 0x02
    4d20:	33 81       	ldd	r19, Z+3	; 0x03
    4d22:	82 0f       	add	r24, r18
    4d24:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:87
    _size += bytes;
    4d26:	77 83       	std	Z+7, r23	; 0x07
    4d28:	66 83       	std	Z+6, r22	; 0x06
    4d2a:	08 95       	ret
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5allocEj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:59
  }

  // Allocates the specified amount of bytes in the memoryPool
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    if (!canAlloc(bytes)) return NULL;
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:61
    return doAlloc(bytes);
  }
    4d30:	08 95       	ret

00004d32 <EthernetClient::peek()>:
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:113

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
}

int EthernetClient::peek() {
    4d32:	0f 93       	push	r16
    4d34:	1f 93       	push	r17
    4d36:	cf 93       	push	r28
    4d38:	df 93       	push	r29
    4d3a:	1f 92       	push	r1
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:116
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    4d42:	dc 01       	movw	r26, r24
    4d44:	ed 91       	ld	r30, X+
    4d46:	fc 91       	ld	r31, X
    4d48:	00 84       	ldd	r0, Z+8	; 0x08
    4d4a:	f1 85       	ldd	r31, Z+9	; 0x09
    4d4c:	e0 2d       	mov	r30, r0
    4d4e:	19 95       	eicall
    4d50:	89 2b       	or	r24, r25
    4d52:	91 f0       	breq	.+36     	; 0x4d78 <EthernetClient::peek()+0x46>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
    4d54:	21 e0       	ldi	r18, 0x01	; 1
    4d56:	41 e0       	ldi	r20, 0x01	; 1
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	be 01       	movw	r22, r28
    4d5c:	6f 5f       	subi	r22, 0xFF	; 255
    4d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d60:	f8 01       	movw	r30, r16
    4d62:	84 85       	ldd	r24, Z+12	; 0x0c
    4d64:	0e 94 f3 98 	call	0x131e6	; 0x131e6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN14EthernetClient4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:119
    return -1;
  ::peek(_sock, &b);
  return b;
    4d68:	89 81       	ldd	r24, Y+1	; 0x01
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:120
}
    4d6c:	0f 90       	pop	r0
    4d6e:	df 91       	pop	r29
    4d70:	cf 91       	pop	r28
    4d72:	1f 91       	pop	r17
    4d74:	0f 91       	pop	r16
    4d76:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:117

int EthernetClient::peek() {
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must
  if (!available())
    return -1;
    4d78:	8f ef       	ldi	r24, 0xFF	; 255
    4d7a:	9f ef       	ldi	r25, 0xFF	; 255
    4d7c:	f7 cf       	rjmp	.-18     	; 0x4d6c <EthernetClient::peek()+0x3a>

00004d7e <EthernetClient::read(unsigned char*, unsigned int)>:
_ZN14EthernetClient4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:110
    return -1;
  }
}

int EthernetClient::read(uint8_t *buf, size_t size) {
  return recv(_sock, buf, size);
    4d7e:	fc 01       	movw	r30, r24
    4d80:	84 85       	ldd	r24, Z+12	; 0x0c
    4d82:	0c 94 59 99 	jmp	0x132b2	; 0x132b2 <recv(unsigned char, unsigned char*, int)>

00004d86 <EthernetClient::read()>:
_ZN14EthernetClient4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:95
  if (_sock != MAX_SOCK_NUM)
    return w5500.getRXReceivedSize(_sock);
  return 0;
}

int EthernetClient::read() {
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	1f 92       	push	r1
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:97
  uint8_t b;
  if ( recv(_sock, &b, 1) > 0 )
    4d90:	41 e0       	ldi	r20, 0x01	; 1
    4d92:	50 e0       	ldi	r21, 0x00	; 0
    4d94:	be 01       	movw	r22, r28
    4d96:	6f 5f       	subi	r22, 0xFF	; 255
    4d98:	7f 4f       	sbci	r23, 0xFF	; 255
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	84 85       	ldd	r24, Z+12	; 0x0c
    4d9e:	0e 94 59 99 	call	0x132b2	; 0x132b2 <recv(unsigned char, unsigned char*, int)>
    4da2:	18 16       	cp	r1, r24
    4da4:	19 06       	cpc	r1, r25
    4da6:	34 f4       	brge	.+12     	; 0x4db4 <EthernetClient::read()+0x2e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:100
  {
    // recv worked
    return b;
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:107
  else
  {
    // No data available
    return -1;
  }
}
    4dac:	0f 90       	pop	r0
    4dae:	df 91       	pop	r29
    4db0:	cf 91       	pop	r28
    4db2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:105
    return b;
  }
  else
  {
    // No data available
    return -1;
    4db4:	8f ef       	ldi	r24, 0xFF	; 255
    4db6:	9f ef       	ldi	r25, 0xFF	; 255
    4db8:	f9 cf       	rjmp	.-14     	; 0x4dac <EthernetClient::read()+0x26>

00004dba <EthernetClient::available()>:
_ZN14EthernetClient9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:90
  }
  return size;
}

int EthernetClient::available() {
  if (_sock != MAX_SOCK_NUM)
    4dba:	fc 01       	movw	r30, r24
    4dbc:	84 85       	ldd	r24, Z+12	; 0x0c
    4dbe:	88 30       	cpi	r24, 0x08	; 8
    4dc0:	11 f0       	breq	.+4      	; 0x4dc6 <EthernetClient::available()+0xc>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:91
    return w5500.getRXReceivedSize(_sock);
    4dc2:	0c 94 42 89 	jmp	0x11284	; 0x11284 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:93
  return 0;
}
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	80 e0       	ldi	r24, 0x00	; 0
    4dca:	08 95       	ret

00004dcc <SoftSPIB::begin()>:
_ZN8SoftSPIB5beginEv():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:15
    _ckp = 0;
    _order = MSBFIRST;
    digitalWrite(_sck, _ckp ? HIGH : LOW);
}

void SoftSPIB::begin() {
    4dcc:	cf 93       	push	r28
    4dce:	df 93       	push	r29
    4dd0:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:16
    pinMode(_mosi, OUTPUT);
    4dd2:	61 e0       	ldi	r22, 0x01	; 1
    4dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    4dd6:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:17
    pinMode(_miso, INPUT);
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dde:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
    pinMode(_sck, OUTPUT);
    4de2:	61 e0       	ldi	r22, 0x01	; 1
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:19
}
    4de6:	df 91       	pop	r29
    4de8:	cf 91       	pop	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:18
}

void SoftSPIB::begin() {
    pinMode(_mosi, OUTPUT);
    pinMode(_miso, INPUT);
    pinMode(_sck, OUTPUT);
    4dea:	0c 94 22 8b 	jmp	0x11644	; 0x11644 <pinMode>

00004dee <get_function_budik_text_state(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_budik_text_statehhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2439
uint8_t get_function_budik_enabled(uint8_t args)
{
  return 1;
}
void get_function_budik_text_state(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	ca 01       	movw	r24, r20
    4df4:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2440
  strcpy(line1, "Zapnuto 06:45");
    4df6:	63 ef       	ldi	r22, 0xF3	; 243
    4df8:	72 e0       	ldi	r23, 0x02	; 2
    4dfa:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2441
  line2[0] = 0;
    4dfe:	18 82       	st	Y, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2442
}
    4e00:	df 91       	pop	r29
    4e02:	cf 91       	pop	r28
    4e04:	08 95       	ret

00004e06 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)>:
_Z27button_get_term_mode_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5770
   off,max,min,prog,man
   line1 ... kratke pojmenovani modu
   line2 ... komentar
*/
void button_get_term_mode_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	68 2f       	mov	r22, r24
    4e0c:	ca 01       	movw	r24, r20
    4e0e:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5771
  if (args1 == 0)
    4e10:	61 11       	cpse	r22, r1
    4e12:	0b c0       	rjmp	.+22     	; 0x4e2a <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5773
  {
    strcpy_P(line1, text_button_term_off);
    4e14:	6f ea       	ldi	r22, 0xAF	; 175
    4e16:	75 e3       	ldi	r23, 0x35	; 53
    4e18:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5774
    strcpy_P(line2, text_button_term_off_comment);
    4e1c:	69 e9       	ldi	r22, 0x99	; 153
    4e1e:	75 e3       	ldi	r23, 0x35	; 53
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    4e20:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
  }
}
    4e22:	df 91       	pop	r29
    4e24:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
    strcpy_P(line2, text_button_term_prog_comment);
  }
  if (args1 == 4)
  {
    strcpy_P(line1, text_button_term_man);
    strcpy_P(line2, text_button_term_man_comment);
    4e26:	0c 94 90 aa 	jmp	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5776
  if (args1 == 0)
  {
    strcpy_P(line1, text_button_term_off);
    strcpy_P(line2, text_button_term_off_comment);
  }
  if (args1 == 1)
    4e2a:	61 30       	cpi	r22, 0x01	; 1
    4e2c:	39 f4       	brne	.+14     	; 0x4e3c <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x36>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5778
  {
    strcpy_P(line1, text_button_term_max);
    4e2e:	65 e9       	ldi	r22, 0x95	; 149
    4e30:	75 e3       	ldi	r23, 0x35	; 53
    4e32:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5779
    strcpy_P(line2, text_button_term_max_comment);
    4e36:	6f e7       	ldi	r22, 0x7F	; 127
    4e38:	75 e3       	ldi	r23, 0x35	; 53
    4e3a:	f2 cf       	rjmp	.-28     	; 0x4e20 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5781
  }
  if (args1 == 2)
    4e3c:	62 30       	cpi	r22, 0x02	; 2
    4e3e:	39 f4       	brne	.+14     	; 0x4e4e <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5783
  {
    strcpy_P(line1, text_button_term_min);
    4e40:	6b e7       	ldi	r22, 0x7B	; 123
    4e42:	75 e3       	ldi	r23, 0x35	; 53
    4e44:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5784
    strcpy_P(line2, text_button_term_min_comment);
    4e48:	64 e6       	ldi	r22, 0x64	; 100
    4e4a:	75 e3       	ldi	r23, 0x35	; 53
    4e4c:	e9 cf       	rjmp	.-46     	; 0x4e20 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5786
  }
  if (args1 == 3)
    4e4e:	63 30       	cpi	r22, 0x03	; 3
    4e50:	39 f4       	brne	.+14     	; 0x4e60 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x5a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5788
  {
    strcpy_P(line1, text_button_term_prog);
    4e52:	6f e5       	ldi	r22, 0x5F	; 95
    4e54:	75 e3       	ldi	r23, 0x35	; 53
    4e56:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5789
    strcpy_P(line2, text_button_term_prog_comment);
    4e5a:	6b e4       	ldi	r22, 0x4B	; 75
    4e5c:	75 e3       	ldi	r23, 0x35	; 53
    4e5e:	e0 cf       	rjmp	.-64     	; 0x4e20 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5791
  }
  if (args1 == 4)
    4e60:	64 30       	cpi	r22, 0x04	; 4
    4e62:	39 f4       	brne	.+14     	; 0x4e72 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x6c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5793
  {
    strcpy_P(line1, text_button_term_man);
    4e64:	67 e4       	ldi	r22, 0x47	; 71
    4e66:	75 e3       	ldi	r23, 0x35	; 53
    4e68:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5794
    strcpy_P(line2, text_button_term_man_comment);
    4e6c:	68 e3       	ldi	r22, 0x38	; 56
    4e6e:	75 e3       	ldi	r23, 0x35	; 53
    4e70:	d7 cf       	rjmp	.-82     	; 0x4e20 <button_get_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x1a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5796
  }
}
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	08 95       	ret

00004e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>:
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:294
  template <typename TStringRef>
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    4e78:	0f 93       	push	r16
    4e7a:	1f 93       	push	r17
    4e7c:	cf 93       	push	r28
    4e7e:	df 93       	push	r29
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
    if (!_data) return 0;
    4e80:	00 97       	sbiw	r24, 0x00	; 0
    4e82:	01 f1       	breq	.+64     	; 0x4ec4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
    4e84:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:296
    Internals::Slot* slot = _data->head;
    4e86:	fc 01       	movw	r30, r24
    4e88:	c0 81       	ld	r28, Z
    4e8a:	d1 81       	ldd	r29, Z+1	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:297
    while (slot) {
    4e8c:	20 97       	sbiw	r28, 0x00	; 0
    4e8e:	d1 f0       	breq	.+52     	; 0x4ec4 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x4c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:298
      if (Internals::makeString(key).equals(slot->key)) break;
    4e90:	6a 85       	ldd	r22, Y+10	; 0x0a
    4e92:	7b 85       	ldd	r23, Y+11	; 0x0b
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:16
 public:
  ZeroTerminatedRamString(const char* str) : _str(str) {}

  bool equals(const char* expected) const {
    const char* actual = reinterpret_cast<const char*>(_str);
    if (!actual || !expected) return actual == expected;
    4e94:	01 15       	cp	r16, r1
    4e96:	11 05       	cpc	r17, r1
    4e98:	19 f0       	breq	.+6      	; 0x4ea0 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x28>
    4e9a:	61 15       	cp	r22, r1
    4e9c:	71 05       	cpc	r23, r1
    4e9e:	49 f4       	brne	.+18     	; 0x4eb2 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x3a>
    4ea0:	06 17       	cp	r16, r22
    4ea2:	17 07       	cpc	r17, r23
    4ea4:	59 f4       	brne	.+22     	; 0x4ebc <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x44>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:302
      slot = slot->next;
    }
    return slot;
  }
    4ea6:	ce 01       	movw	r24, r28
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	1f 91       	pop	r17
    4eae:	0f 91       	pop	r16
    4eb0:	08 95       	ret
equals():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Strings/ZeroTerminatedRamString.hpp:17
    return strcmp(actual, expected) == 0;
    4eb2:	c8 01       	movw	r24, r16
    4eb4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    4eb8:	89 2b       	or	r24, r25
    4eba:	a9 f3       	breq	.-22     	; 0x4ea6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>
_ZN11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_.isra.35():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:299
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    Internals::Slot* slot = _data->head;
    while (slot) {
      if (Internals::makeString(key).equals(slot->key)) break;
      slot = slot->next;
    4ebc:	0e 80       	ldd	r0, Y+6	; 0x06
    4ebe:	df 81       	ldd	r29, Y+7	; 0x07
    4ec0:	c0 2d       	mov	r28, r0
    4ec2:	e4 cf       	rjmp	.-56     	; 0x4e8c <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x14>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:295
  FORCE_INLINE JsonObject createNestedObject_impl(TStringRef key);

  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  Internals::Slot* findSlot(TStringRef key) {
    if (!_data) return 0;
    4ec4:	d0 e0       	ldi	r29, 0x00	; 0
    4ec6:	c0 e0       	ldi	r28, 0x00	; 0
    4ec8:	ee cf       	rjmp	.-36     	; 0x4ea6 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]+0x2e>

00004eca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>:
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:28
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(JsonVariant variant) {
    4eca:	4f 92       	push	r4
    4ecc:	5f 92       	push	r5
    4ece:	6f 92       	push	r6
    4ed0:	7f 92       	push	r7
    4ed2:	8f 92       	push	r8
    4ed4:	9f 92       	push	r9
    4ed6:	af 92       	push	r10
    4ed8:	bf 92       	push	r11
    4eda:	df 92       	push	r13
    4edc:	ef 92       	push	r14
    4ede:	ff 92       	push	r15
    4ee0:	0f 93       	push	r16
    4ee2:	1f 93       	push	r17
    4ee4:	cf 93       	push	r28
    4ee6:	df 93       	push	r29
    4ee8:	cd b7       	in	r28, 0x3d	; 61
    4eea:	de b7       	in	r29, 0x3e	; 62
    4eec:	c4 54       	subi	r28, 0x44	; 68
    4eee:	d1 09       	sbc	r29, r1
    4ef0:	0f b6       	in	r0, 0x3f	; 63
    4ef2:	f8 94       	cli
    4ef4:	de bf       	out	0x3e, r29	; 62
    4ef6:	0f be       	out	0x3f, r0	; 63
    4ef8:	cd bf       	out	0x3d, r28	; 61
    4efa:	8c 01       	movw	r16, r24
    4efc:	4a 01       	movw	r8, r20
    4efe:	5b 01       	movw	r10, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:29
    DeserializationError err = skipSpacesAndComments();
    4f00:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:30
    if (err) return err;
    4f04:	00 97       	sbiw	r24, 0x00	; 0
    4f06:	09 f0       	breq	.+2      	; 0x4f0a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40>
    4f08:	b0 c0       	rjmp	.+352    	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:32

    switch (current()) {
    4f0a:	c8 01       	movw	r24, r16
    4f0c:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f10:	75 01       	movw	r14, r10
    4f12:	8b 35       	cpi	r24, 0x5B	; 91
    4f14:	49 f1       	breq	.+82     	; 0x4f68 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x9e>
    4f16:	8b 37       	cpi	r24, 0x7B	; 123
    4f18:	09 f4       	brne	.+2      	; 0x4f1c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x52>
    4f1a:	d2 c0       	rjmp	.+420    	; 0x50c0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1f6>
parseValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:159
      if (err) return err;
    }
  }

  DeserializationError parseValue(JsonVariant variant) {
    if (isQuote(current())) {
    4f1c:	c8 01       	movw	r24, r16
    4f1e:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    4f22:	87 32       	cpi	r24, 0x27	; 39
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e>
    4f26:	eb c1       	rjmp	.+982    	; 0x52fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
    4f28:	82 32       	cpi	r24, 0x22	; 34
    4f2a:	09 f4       	brne	.+2      	; 0x4f2e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64>
    4f2c:	e8 c1       	rjmp	.+976    	; 0x52fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x434>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:240

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    4f2e:	c8 01       	movw	r24, r16
    4f30:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f34:	b8 2e       	mov	r11, r24
    4f36:	ce 01       	movw	r24, r28
    4f38:	01 96       	adiw	r24, 0x01	; 1
    4f3a:	4c 01       	movw	r8, r24
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:238
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(JsonVariant result) {
    char buffer[64];
    uint8_t n = 0;
    4f3c:	d1 2c       	mov	r13, r1
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:241

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    4f3e:	8b 2d       	mov	r24, r11
    4f40:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    4f44:	88 23       	and	r24, r24
    4f46:	09 f4       	brne	.+2      	; 0x4f4a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x80>
    4f48:	f5 c1       	rjmp	.+1002   	; 0x5334 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
    4f4a:	bf e3       	ldi	r27, 0x3F	; 63
    4f4c:	db 16       	cp	r13, r27
    4f4e:	09 f4       	brne	.+2      	; 0x4f52 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x88>
    4f50:	f1 c1       	rjmp	.+994    	; 0x5334 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x46a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f52:	f8 01       	movw	r30, r16
    4f54:	10 86       	std	Z+8, r1	; 0x08
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:243
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
    4f56:	d3 94       	inc	r13
    4f58:	d4 01       	movw	r26, r8
    4f5a:	bd 92       	st	X+, r11
    4f5c:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:244
      c = current();
    4f5e:	c8 01       	movw	r24, r16
    4f60:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f64:	b8 2e       	mov	r11, r24
    4f66:	eb cf       	rjmp	.-42     	; 0x4f3e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74>
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:69
    move();
    return true;
  }

  DeserializationError parseArray(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    4f68:	d8 01       	movw	r26, r16
    4f6a:	16 96       	adiw	r26, 0x06	; 6
    4f6c:	8c 91       	ld	r24, X
    4f6e:	88 23       	and	r24, r24
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xaa>
    4f72:	c1 c1       	rjmp	.+898    	; 0x52f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:78

template <typename T>
inline typename Internals::enable_if<Internals::is_same<T, JsonArray>::value,
                                     JsonArray>::type
JsonVariant::to() {
  if (!_data) return JsonArray();
    4f74:	a1 14       	cp	r10, r1
    4f76:	b1 04       	cpc	r11, r1
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xb2>
    4f7a:	2d c1       	rjmp	.+602    	; 0x51d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
_ZN11ArduinoJson9Internals15JsonVariantData7toArrayEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:70
  void setNull() {
    type = JSON_NULL;
  }

  JsonArrayData *toArray() {
    type = JSON_ARRAY;
    4f7c:	88 e0       	ldi	r24, 0x08	; 8
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	f5 01       	movw	r30, r10
    4f82:	91 83       	std	Z+1, r25	; 0x01
    4f84:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:71
    content.asArray.head = 0;
    4f86:	13 82       	std	Z+3, r1	; 0x03
    4f88:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:72
    content.asArray.tail = 0;
    4f8a:	15 82       	std	Z+5, r1	; 0x05
    4f8c:	14 82       	std	Z+4, r1	; 0x04
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4f8e:	c8 01       	movw	r24, r16
    4f90:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4f94:	8b 35       	cpi	r24, 0x5B	; 91
    4f96:	09 f0       	breq	.+2      	; 0x4f9a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xd0>
    4f98:	ef c0       	rjmp	.+478    	; 0x5178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    4f9a:	d8 01       	movw	r26, r16
    4f9c:	18 96       	adiw	r26, 0x08	; 8
    4f9e:	1c 92       	st	X, r1
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:78

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    4fa6:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:79
    if (err) return err;
    4fa8:	89 2b       	or	r24, r25
    4faa:	09 f0       	breq	.+2      	; 0x4fae <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xe4>
    4fac:	5d c0       	rjmp	.+186    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    4fae:	c8 01       	movw	r24, r16
    4fb0:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    4fb4:	8d 35       	cpi	r24, 0x5D	; 93
    4fb6:	09 f4       	brne	.+2      	; 0x4fba <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf0>
    4fb8:	55 c0       	rjmp	.+170    	; 0x5064 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19a>
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
  }

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    4fba:	8c e0       	ldi	r24, 0x0C	; 12
    4fbc:	d8 2e       	mov	r13, r24
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
namespace Internals {

class AllocableInMemoryPool {
 public:
  void *operator new(size_t n, MemoryPool *memoryPool) NOEXCEPT {
    return memoryPool->alloc(n);
    4fbe:	d4 01       	movw	r26, r8
    4fc0:	ed 91       	ld	r30, X+
    4fc2:	fc 91       	ld	r31, X
    4fc4:	01 90       	ld	r0, Z+
    4fc6:	f0 81       	ld	r31, Z
    4fc8:	e0 2d       	mov	r30, r0
    4fca:	6c e0       	ldi	r22, 0x0C	; 12
    4fcc:	70 e0       	ldi	r23, 0x00	; 0
    4fce:	c4 01       	movw	r24, r8
    4fd0:	19 95       	eicall
    4fd2:	fc 01       	movw	r30, r24
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:57
    4fd4:	00 97       	sbiw	r24, 0x00	; 0
    4fd6:	09 f4       	brne	.+2      	; 0x4fda <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x110>
    4fd8:	64 c0       	rjmp	.+200    	; 0x50a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1d8>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	2d 2d       	mov	r18, r13
    4fde:	1d 92       	st	X+, r1
    4fe0:	2a 95       	dec	r18
    4fe2:	e9 f7       	brne	.-6      	; 0x4fde <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x114>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    4fe4:	11 82       	std	Z+1, r1	; 0x01
    4fe6:	10 82       	st	Z, r1
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:62
    if (!slot) return JsonVariant();

    slot->next = 0;

    if (_data->tail) {
    4fe8:	d7 01       	movw	r26, r14
    4fea:	14 96       	adiw	r26, 0x04	; 4
    4fec:	8d 91       	ld	r24, X+
    4fee:	9c 91       	ld	r25, X
    4ff0:	15 97       	sbiw	r26, 0x05	; 5
    4ff2:	00 97       	sbiw	r24, 0x00	; 0
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x12e>
    4ff6:	50 c0       	rjmp	.+160    	; 0x5098 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ce>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:63
      slot->prev = _data->tail;
    4ff8:	91 87       	std	Z+9, r25	; 0x09
    4ffa:	80 87       	std	Z+8, r24	; 0x08
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:64
      _data->tail->next = slot;
    4ffc:	14 96       	adiw	r26, 0x04	; 4
    4ffe:	8d 91       	ld	r24, X+
    5000:	9c 91       	ld	r25, X
    5002:	dc 01       	movw	r26, r24
    5004:	17 96       	adiw	r26, 0x07	; 7
    5006:	fc 93       	st	X, r31
    5008:	ee 93       	st	-X, r30
    500a:	16 97       	sbiw	r26, 0x06	; 6
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:65
      _data->tail = slot;
    500c:	d7 01       	movw	r26, r14
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:69
    } else {
      slot->prev = 0;
      _data->head = slot;
      _data->tail = slot;
    500e:	15 96       	adiw	r26, 0x05	; 5
    5010:	fc 93       	st	X, r31
    5012:	ee 93       	st	-X, r30
    5014:	14 97       	sbiw	r26, 0x04	; 4
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:79
  return JsonArray(_memoryPool, _data->toArray());
    5016:	98 2d       	mov	r25, r8
    5018:	89 2d       	mov	r24, r9
    501a:	49 2e       	mov	r4, r25
    501c:	58 2e       	mov	r5, r24
    501e:	3f 01       	movw	r6, r30
parseArray():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:88

    // Read each value
    for (;;) {
      // Allocate slot in array
      JsonVariant value = array.add();
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5020:	ef 2b       	or	r30, r31
    5022:	09 f4       	brne	.+2      	; 0x5026 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x15c>
    5024:	d8 c0       	rjmp	.+432    	; 0x51d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:91

      // 1 - Parse value
      _nestingLimit--;
    5026:	f8 01       	movw	r30, r16
    5028:	86 81       	ldd	r24, Z+6	; 0x06
    502a:	81 50       	subi	r24, 0x01	; 1
    502c:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:92
      err = parse(value);
    502e:	b3 01       	movw	r22, r6
    5030:	a2 01       	movw	r20, r4
    5032:	c8 01       	movw	r24, r16
    5034:	0e 94 65 27 	call	0x4eca	; 0x4eca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    5038:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:93
      _nestingLimit++;
    503a:	d8 01       	movw	r26, r16
    503c:	16 96       	adiw	r26, 0x06	; 6
    503e:	8c 91       	ld	r24, X
    5040:	16 97       	sbiw	r26, 0x06	; 6
    5042:	8f 5f       	subi	r24, 0xFF	; 255
    5044:	16 96       	adiw	r26, 0x06	; 6
    5046:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:94
      if (err) return err;
    5048:	a1 14       	cp	r10, r1
    504a:	b1 04       	cpc	r11, r1
    504c:	69 f4       	brne	.+26     	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:97

      // 2 - Skip spaces
      err = skipSpacesAndComments();
    504e:	c8 01       	movw	r24, r16
    5050:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5054:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:98
      if (err) return err;
    5056:	89 2b       	or	r24, r25
    5058:	39 f4       	brne	.+14     	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    505a:	c8 01       	movw	r24, r16
    505c:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5060:	8d 35       	cpi	r24, 0x5D	; 93
    5062:	21 f5       	brne	.+72     	; 0x50ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1e2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5064:	f8 01       	movw	r30, r16
    5066:	10 86       	std	Z+8, r1	; 0x08
    5068:	c5 01       	movw	r24, r10
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:42
        return parseObject(variant);

      default:
        return parseValue(variant);
    }
  }
    506a:	cc 5b       	subi	r28, 0xBC	; 188
    506c:	df 4f       	sbci	r29, 0xFF	; 255
    506e:	0f b6       	in	r0, 0x3f	; 63
    5070:	f8 94       	cli
    5072:	de bf       	out	0x3e, r29	; 62
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	cd bf       	out	0x3d, r28	; 61
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	ff 90       	pop	r15
    5082:	ef 90       	pop	r14
    5084:	df 90       	pop	r13
    5086:	bf 90       	pop	r11
    5088:	af 90       	pop	r10
    508a:	9f 90       	pop	r9
    508c:	8f 90       	pop	r8
    508e:	7f 90       	pop	r7
    5090:	6f 90       	pop	r6
    5092:	5f 90       	pop	r5
    5094:	4f 90       	pop	r4
    5096:	08 95       	ret
add():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:68
      slot->prev = _data->tail;
      _data->tail->next = slot;
      _data->tail = slot;
    } else {
      slot->prev = 0;
      _data->head = slot;
    5098:	13 96       	adiw	r26, 0x03	; 3
    509a:	fc 93       	st	X, r31
    509c:	ee 93       	st	-X, r30
    509e:	12 97       	sbiw	r26, 0x02	; 2
    50a0:	b6 cf       	rjmp	.-148    	; 0x500e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x144>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonArray.hpp:58

  JsonVariant add() {
    if (!_data) return JsonVariant();

    Internals::Slot* slot = new (_memoryPool) Internals::Slot();
    if (!slot) return JsonVariant();
    50a2:	f0 e0       	ldi	r31, 0x00	; 0
    50a4:	e0 e0       	ldi	r30, 0x00	; 0
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	b7 cf       	rjmp	.-146    	; 0x501a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x150>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    50ac:	c8 01       	movw	r24, r16
    50ae:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50b2:	8c 32       	cpi	r24, 0x2C	; 44
    50b4:	09 f0       	breq	.+2      	; 0x50b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1ee>
    50b6:	60 c0       	rjmp	.+192    	; 0x5178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    50b8:	d8 01       	movw	r26, r16
    50ba:	18 96       	adiw	r26, 0x08	; 8
    50bc:	1c 92       	st	X, r1
    50be:	7f cf       	rjmp	.-258    	; 0x4fbe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0xf4>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    50c0:	f8 01       	movw	r30, r16
    50c2:	86 81       	ldd	r24, Z+6	; 0x06
    50c4:	88 23       	and	r24, r24
    50c6:	09 f4       	brne	.+2      	; 0x50ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x200>
    50c8:	16 c1       	rjmp	.+556    	; 0x52f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42c>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:86

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonObject>::value,
                              JsonObject>::type
JsonVariant::to() {
  if (!_data) return JsonObject();
    50ca:	a1 14       	cp	r10, r1
    50cc:	b1 04       	cpc	r11, r1
    50ce:	09 f4       	brne	.+2      	; 0x50d2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x208>
    50d0:	82 c0       	rjmp	.+260    	; 0x51d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
    50d2:	34 01       	movw	r6, r8
_ZN11ArduinoJson9Internals15JsonVariantData8toObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:77
    content.asArray.tail = 0;
    return &content.asArray;
  }

  JsonObjectData *toObject() {
    type = JSON_OBJECT;
    50d4:	89 e0       	ldi	r24, 0x09	; 9
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	d5 01       	movw	r26, r10
    50da:	11 96       	adiw	r26, 0x01	; 1
    50dc:	9c 93       	st	X, r25
    50de:	8e 93       	st	-X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:78
    content.asObject.head = 0;
    50e0:	13 96       	adiw	r26, 0x03	; 3
    50e2:	1c 92       	st	X, r1
    50e4:	1e 92       	st	-X, r1
    50e6:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:79
    content.asObject.tail = 0;
    50e8:	15 96       	adiw	r26, 0x05	; 5
    50ea:	1c 92       	st	X, r1
    50ec:	1e 92       	st	-X, r1
    50ee:	14 97       	sbiw	r26, 0x04	; 4
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:80
    return &content.asObject;
    50f0:	45 01       	movw	r8, r10
    50f2:	b2 e0       	ldi	r27, 0x02	; 2
    50f4:	8b 0e       	add	r8, r27
    50f6:	91 1c       	adc	r9, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    50f8:	c8 01       	movw	r24, r16
    50fa:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    50fe:	8b 37       	cpi	r24, 0x7B	; 123
    5100:	d9 f5       	brne	.+118    	; 0x5178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5102:	f8 01       	movw	r30, r16
    5104:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:116

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    5106:	c8 01       	movw	r24, r16
    5108:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    510c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:117
    if (err) return err;
    510e:	89 2b       	or	r24, r25
    5110:	09 f0       	breq	.+2      	; 0x5114 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x24a>
    5112:	aa cf       	rjmp	.-172    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    5114:	c8 01       	movw	r24, r16
    5116:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    511a:	8d 37       	cpi	r24, 0x7D	; 125
    511c:	09 f4       	brne	.+2      	; 0x5120 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x256>
    511e:	9c c0       	rjmp	.+312    	; 0x5258 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    if (!slot) {
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5120:	bc e0       	ldi	r27, 0x0C	; 12
    5122:	5b 2e       	mov	r5, r27
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:167
      return parseNumericValue(variant);
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
    5124:	c8 01       	movw	r24, r16
    5126:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
isQuote():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:274
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    512a:	87 32       	cpi	r24, 0x27	; 39
    512c:	79 f0       	breq	.+30     	; 0x514c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
    512e:	82 32       	cpi	r24, 0x22	; 34
    5130:	69 f0       	breq	.+26     	; 0x514c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x282>
_ZN11ArduinoJson9Internals11StringMoverIcE6StringC2EPPc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:15
template <typename TChar>
class StringMover {
 public:
  class String {
   public:
    String(TChar** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
    5132:	f8 01       	movw	r30, r16
    5134:	a4 80       	ldd	r10, Z+4	; 0x04
    5136:	b5 80       	ldd	r11, Z+5	; 0x05
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:218

  DeserializationError parseNonQuotedString(const char **result) {
    typename remove_reference<TStringStorage>::type::String str =
        _stringStorage.startString();

    char c = current();
    5138:	c8 01       	movw	r24, r16
    513a:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    513e:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:219
    if (c == '\0') return DeserializationError::IncompleteInput;
    5140:	81 11       	cpse	r24, r1
    5142:	1e c0       	rjmp	.+60     	; 0x5180 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2b6>
    5144:	aa 24       	eor	r10, r10
    5146:	a3 94       	inc	r10
    5148:	b1 2c       	mov	r11, r1
    514a:	8e cf       	rjmp	.-228    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseKey():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:168
    }
  }

  DeserializationError parseKey(const char **key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
    514c:	be 01       	movw	r22, r28
    514e:	6f 5f       	subi	r22, 0xFF	; 255
    5150:	7f 4f       	sbci	r23, 0xFF	; 255
    5152:	c8 01       	movw	r24, r16
    5154:	0e 94 19 24 	call	0x4832	; 0x4832 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
    5158:	5c 01       	movw	r10, r24
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Read each key value pair
    for (;;) {
      // Parse key
      const char *key;
      err = parseKey(&key);
      if (err) return err;
    515a:	89 2b       	or	r24, r25
    515c:	09 f0       	breq	.+2      	; 0x5160 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
    515e:	84 cf       	rjmp	.-248    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:130

      // Skip spaces
      err = skipSpacesAndComments();
    5160:	c8 01       	movw	r24, r16
    5162:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5166:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:131
      if (err) return err;  // Colon
    5168:	89 2b       	or	r24, r25
    516a:	09 f0       	breq	.+2      	; 0x516e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2a4>
    516c:	7d cf       	rjmp	.-262    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    516e:	c8 01       	movw	r24, r16
    5170:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5174:	8a 33       	cpi	r24, 0x3A	; 58
    5176:	99 f1       	breq	.+102    	; 0x51de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x314>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:113

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;
    5178:	72 e0       	ldi	r23, 0x02	; 2
    517a:	a7 2e       	mov	r10, r23
    517c:	b1 2c       	mov	r11, r1
    517e:	74 cf       	rjmp	.-280    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:221
        _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
    5180:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    5184:	88 23       	and	r24, r24
    5186:	c1 f3       	breq	.-16     	; 0x5178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5188:	d8 01       	movw	r26, r16
    518a:	18 96       	adiw	r26, 0x08	; 8
    518c:	1c 92       	st	X, r1
    518e:	18 97       	sbiw	r26, 0x08	; 8
_ZN11ArduinoJson9Internals11StringMoverIcE6String6appendEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:18

    void append(char c) {
      *(*_writePtr)++ = TChar(c);
    5190:	14 96       	adiw	r26, 0x04	; 4
    5192:	ed 91       	ld	r30, X+
    5194:	fc 91       	ld	r31, X
    5196:	15 97       	sbiw	r26, 0x05	; 5
    5198:	cf 01       	movw	r24, r30
    519a:	01 96       	adiw	r24, 0x01	; 1
    519c:	15 96       	adiw	r26, 0x05	; 5
    519e:	9c 93       	st	X, r25
    51a0:	8e 93       	st	-X, r24
    51a2:	14 97       	sbiw	r26, 0x04	; 4
    51a4:	d0 82       	st	Z, r13
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:225

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        str.append(c);
        c = current();
    51a6:	c8 01       	movw	r24, r16
    51a8:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    51ac:	d8 2e       	mov	r13, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:226
      } while (canBeInNonQuotedString(c));
    51ae:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::canBeInNonQuotedString(char)>
    51b2:	81 11       	cpse	r24, r1
    51b4:	e9 cf       	rjmp	.-46     	; 0x5188 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2be>
c_str():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/../StringStorage/./StringMover.hpp:22
    }

    const char* c_str() const {
      *(*_writePtr)++ = 0;
    51b6:	d8 01       	movw	r26, r16
    51b8:	14 96       	adiw	r26, 0x04	; 4
    51ba:	ed 91       	ld	r30, X+
    51bc:	fc 91       	ld	r31, X
    51be:	15 97       	sbiw	r26, 0x05	; 5
    51c0:	cf 01       	movw	r24, r30
    51c2:	01 96       	adiw	r24, 0x01	; 1
    51c4:	15 96       	adiw	r26, 0x05	; 5
    51c6:	9c 93       	st	X, r25
    51c8:	8e 93       	st	-X, r24
    51ca:	14 97       	sbiw	r26, 0x04	; 4
    51cc:	10 82       	st	Z, r1
parseNonQuotedString():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:231
    } else {
      return DeserializationError::InvalidInput;
    }

    *result = str.c_str();
    51ce:	ba 82       	std	Y+2, r11	; 0x02
    51d0:	a9 82       	std	Y+1, r10	; 0x01
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:232
    if (*result == NULL) return DeserializationError::NoMemory;
    51d2:	ab 28       	or	r10, r11
    51d4:	29 f6       	brne	.-118    	; 0x5160 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x296>
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:110

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    JsonObject object = variant.to<JsonObject>();
    if (object.isNull()) return DeserializationError::NoMemory;
    51d6:	e3 e0       	ldi	r30, 0x03	; 3
    51d8:	ae 2e       	mov	r10, r30
    51da:	b1 2c       	mov	r11, r1
    51dc:	45 cf       	rjmp	.-374    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    51de:	f8 01       	movw	r30, r16
    51e0:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Allocate slot in object
      JsonVariant value = object.set(key);
    51e2:	a9 80       	ldd	r10, Y+1	; 0x01
    51e4:	ba 80       	ldd	r11, Y+2	; 0x02
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:342
  template <typename TStringRef>
  FORCE_INLINE JsonVariant set_impl(TStringRef key) {
    if (!_data) return JsonVariant();

    // ignore null key
    if (Internals::makeString(key).is_null()) return JsonVariant();
    51e6:	a1 14       	cp	r10, r1
    51e8:	b1 04       	cpc	r11, r1
    51ea:	d1 f5       	brne	.+116    	; 0x5260 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x396>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	20 e0       	ldi	r18, 0x00	; 0
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:135
    51f4:	22 96       	adiw	r28, 0x02	; 2
    51f6:	3f af       	std	Y+63, r19	; 0x3f
    51f8:	22 97       	sbiw	r28, 0x02	; 2
    51fa:	23 96       	adiw	r28, 0x03	; 3
    51fc:	2f af       	std	Y+63, r18	; 0x3f
    51fe:	23 97       	sbiw	r28, 0x03	; 3
    5200:	25 96       	adiw	r28, 0x05	; 5
    5202:	9f af       	std	Y+63, r25	; 0x3f
    5204:	8e af       	std	Y+62, r24	; 0x3e
    5206:	25 97       	sbiw	r28, 0x05	; 5
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:136
      if (value.isInvalid()) return DeserializationError::NoMemory;
    5208:	89 2b       	or	r24, r25
    520a:	29 f3       	breq	.-54     	; 0x51d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x30c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:139

      // Parse value
      _nestingLimit--;
    520c:	d8 01       	movw	r26, r16
    520e:	16 96       	adiw	r26, 0x06	; 6
    5210:	8c 91       	ld	r24, X
    5212:	16 97       	sbiw	r26, 0x06	; 6
    5214:	81 50       	subi	r24, 0x01	; 1
    5216:	16 96       	adiw	r26, 0x06	; 6
    5218:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:140
      err = parse(value);
    521a:	25 96       	adiw	r28, 0x05	; 5
    521c:	4c ad       	ldd	r20, Y+60	; 0x3c
    521e:	5d ad       	ldd	r21, Y+61	; 0x3d
    5220:	6e ad       	ldd	r22, Y+62	; 0x3e
    5222:	7f ad       	ldd	r23, Y+63	; 0x3f
    5224:	25 97       	sbiw	r28, 0x05	; 5
    5226:	c8 01       	movw	r24, r16
    5228:	0e 94 65 27 	call	0x4eca	; 0x4eca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
    522c:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:141
      _nestingLimit++;
    522e:	f8 01       	movw	r30, r16
    5230:	86 81       	ldd	r24, Z+6	; 0x06
    5232:	8f 5f       	subi	r24, 0xFF	; 255
    5234:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:142
      if (err) return err;
    5236:	a1 14       	cp	r10, r1
    5238:	b1 04       	cpc	r11, r1
    523a:	09 f0       	breq	.+2      	; 0x523e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x374>
    523c:	15 cf       	rjmp	.-470    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:145

      // Skip spaces
      err = skipSpacesAndComments();
    523e:	c8 01       	movw	r24, r16
    5240:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    5244:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:146
      if (err) return err;
    5246:	89 2b       	or	r24, r25
    5248:	09 f0       	breq	.+2      	; 0x524c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x382>
    524a:	0e cf       	rjmp	.-484    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    524c:	c8 01       	movw	r24, r16
    524e:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    5252:	8d 37       	cpi	r24, 0x7D	; 125
    5254:	09 f0       	breq	.+2      	; 0x5258 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x38e>
    5256:	3f c0       	rjmp	.+126    	; 0x52d6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x40c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    5258:	d8 01       	movw	r26, r16
    525a:	18 96       	adiw	r26, 0x08	; 8
    525c:	1c 92       	st	X, r1
    525e:	04 cf       	rjmp	.-504    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:345

    // search a matching key
    Internals::Slot* slot = findSlot<TStringRef>(key);
    5260:	b5 01       	movw	r22, r10
    5262:	c4 01       	movw	r24, r8
    5264:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:346
    if (!slot) {
    5268:	00 97       	sbiw	r24, 0x00	; 0
    526a:	49 f5       	brne	.+82     	; 0x52be <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3f4>
operator new():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Memory/AllocableInMemoryPool.hpp:15
    526c:	d3 01       	movw	r26, r6
    526e:	ed 91       	ld	r30, X+
    5270:	fc 91       	ld	r31, X
    5272:	01 90       	ld	r0, Z+
    5274:	f0 81       	ld	r31, Z
    5276:	e0 2d       	mov	r30, r0
    5278:	6c e0       	ldi	r22, 0x0C	; 12
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	c3 01       	movw	r24, r6
    527e:	19 95       	eicall
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:348
      // add the key
      slot = new (_memoryPool) Internals::Slot();
    5280:	00 97       	sbiw	r24, 0x00	; 0
    5282:	09 f4       	brne	.+2      	; 0x5286 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3bc>
    5284:	b3 cf       	rjmp	.-154    	; 0x51ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x322>
    5286:	fc 01       	movw	r30, r24
    5288:	25 2d       	mov	r18, r5
    528a:	11 92       	st	Z+, r1
    528c:	2a 95       	dec	r18
    528e:	e9 f7       	brne	.-6      	; 0x528a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3c0>
_ZN11ArduinoJson9Internals15JsonVariantDataC2Ev():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:20
struct JsonVariantData {
  JsonVariantType type;
  JsonVariantContent content;

  JsonVariantData() {
    type = JSON_NULL;
    5290:	dc 01       	movw	r26, r24
    5292:	1d 92       	st	X+, r1
    5294:	1c 92       	st	X, r1
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:353
      if (!slot) return JsonVariant();

      slot->next = 0;

      if (_data->tail) {
    5296:	d7 01       	movw	r26, r14
    5298:	14 96       	adiw	r26, 0x04	; 4
    529a:	ed 91       	ld	r30, X+
    529c:	fc 91       	ld	r31, X
    529e:	15 97       	sbiw	r26, 0x05	; 5
    52a0:	30 97       	sbiw	r30, 0x00	; 0
    52a2:	81 f0       	breq	.+32     	; 0x52c4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3fa>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:354
        slot->prev = _data->tail;
    52a4:	dc 01       	movw	r26, r24
    52a6:	19 96       	adiw	r26, 0x09	; 9
    52a8:	fc 93       	st	X, r31
    52aa:	ee 93       	st	-X, r30
    52ac:	18 97       	sbiw	r26, 0x08	; 8
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:355
        _data->tail->next = slot;
    52ae:	97 83       	std	Z+7, r25	; 0x07
    52b0:	86 83       	std	Z+6, r24	; 0x06
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:356
        _data->tail = slot;
    52b2:	f7 01       	movw	r30, r14
    52b4:	95 83       	std	Z+5, r25	; 0x05
    52b6:	84 83       	std	Z+4, r24	; 0x04
_ZN11ArduinoJson10JsonObject7set_keyEPNS_9Internals4SlotEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:370

    return JsonVariant(_memoryPool, &slot->value);
  }

  FORCE_INLINE bool set_key(Internals::Slot* slot, const char* key) {
    slot->key = key;
    52b8:	fc 01       	movw	r30, r24
    52ba:	b3 86       	std	Z+11, r11	; 0x0b
    52bc:	a2 86       	std	Z+10, r10	; 0x0a
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:87
  return JsonObject(_memoryPool, _data->toObject());
    52be:	36 2d       	mov	r19, r6
    52c0:	27 2d       	mov	r18, r7
    52c2:	98 cf       	rjmp	.-208    	; 0x51f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x32a>
_ZN11ArduinoJson10JsonObject8set_implIPKcEENS_11JsonVariantET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:359
        slot->prev = _data->tail;
        _data->tail->next = slot;
        _data->tail = slot;
      } else {
        slot->prev = 0;
        _data->head = slot;
    52c4:	13 96       	adiw	r26, 0x03	; 3
    52c6:	9c 93       	st	X, r25
    52c8:	8e 93       	st	-X, r24
    52ca:	12 97       	sbiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:360
        _data->tail = slot;
    52cc:	15 96       	adiw	r26, 0x05	; 5
    52ce:	9c 93       	st	X, r25
    52d0:	8e 93       	st	-X, r24
    52d2:	14 97       	sbiw	r26, 0x04	; 4
    52d4:	f1 cf       	rjmp	.-30     	; 0x52b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x3ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE3eatEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:63
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
    52d6:	c8 01       	movw	r24, r16
    52d8:	0e 94 09 24 	call	0x4812	; 0x4812 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::current()>
    52dc:	8c 32       	cpi	r24, 0x2C	; 44
    52de:	09 f0       	breq	.+2      	; 0x52e2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x418>
    52e0:	4b cf       	rjmp	.-362    	; 0x5178 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x2ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE4moveEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:59
    }
    return _current;
  }

  void move() {
    _loaded = false;
    52e2:	f8 01       	movw	r30, r16
    52e4:	10 86       	std	Z+8, r1	; 0x08
parseObject():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:153
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
    52e6:	c8 01       	movw	r24, r16
    52e8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::skipSpacesAndComments()>
    52ec:	5c 01       	movw	r10, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:154
      if (err) return err;
    52ee:	89 2b       	or	r24, r25
    52f0:	09 f4       	brne	.+2      	; 0x52f4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x42a>
    52f2:	18 cf       	rjmp	.-464    	; 0x5124 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x25a>
    52f4:	b9 ce       	rjmp	.-654    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:107
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(JsonVariant variant) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
    52f6:	f5 e0       	ldi	r31, 0x05	; 5
    52f8:	af 2e       	mov	r10, r31
    52fa:	b1 2c       	mov	r11, r1
    52fc:	b5 ce       	rjmp	.-662    	; 0x5068 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x19e>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:176
    }
  }

  DeserializationError parseStringValue(JsonVariant variant) {
    const char *value;
    DeserializationError err = parseQuotedString(&value);
    52fe:	be 01       	movw	r22, r28
    5300:	6f 5f       	subi	r22, 0xFF	; 255
    5302:	7f 4f       	sbci	r23, 0xFF	; 255
    5304:	c8 01       	movw	r24, r16
    5306:	0e 94 19 24 	call	0x4832	; 0x4832 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parseQuotedString(char const**)>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:177
    if (err) return err;
    530a:	00 97       	sbiw	r24, 0x00	; 0
    530c:	09 f0       	breq	.+2      	; 0x5310 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x446>
    530e:	ad ce       	rjmp	.-678    	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson11JsonVariant3setEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:154
    }
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) {
    if (!_data) return false;
    5310:	e1 14       	cp	r14, r1
    5312:	f1 04       	cpc	r15, r1
    5314:	61 f0       	breq	.+24     	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE16parseStringValueENS_11JsonVariantE.isra.43():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:178
    variant.set(value);
    5316:	89 81       	ldd	r24, Y+1	; 0x01
    5318:	9a 81       	ldd	r25, Y+2	; 0x02
_ZN11ArduinoJson9Internals15JsonVariantData15setLinkedStringEPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:49
    type = JSON_OWNED_STRING;
    content.asString = value;
  }

  void setLinkedString(const char *value) {
    type = JSON_LINKED_STRING;
    531a:	23 e0       	ldi	r18, 0x03	; 3
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	d7 01       	movw	r26, r14
    5320:	11 96       	adiw	r26, 0x01	; 1
    5322:	3c 93       	st	X, r19
    5324:	2e 93       	st	-X, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:50
    content.asString = value;
    5326:	13 96       	adiw	r26, 0x03	; 3
    5328:	9c 93       	st	X, r25
    532a:	8e 93       	st	-X, r24
    532c:	12 97       	sbiw	r26, 0x02	; 2
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:261
    } else if (!strcmp(buffer, "null")) {
      // already null
    } else {
      return DeserializationError::InvalidInput;
    }
    return DeserializationError::Ok;
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	9b ce       	rjmp	.-714    	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:246
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
    5334:	e1 e0       	ldi	r30, 0x01	; 1
    5336:	f0 e0       	ldi	r31, 0x00	; 0
    5338:	ec 0f       	add	r30, r28
    533a:	fd 1f       	adc	r31, r29
    533c:	ed 0d       	add	r30, r13
    533e:	f1 1d       	adc	r31, r1
    5340:	10 82       	st	Z, r1
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:13

namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
    5342:	19 81       	ldd	r17, Y+1	; 0x01
    5344:	11 23       	and	r17, r17
    5346:	09 f4       	brne	.+2      	; 0x534a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x480>
    5348:	51 c0       	rjmp	.+162    	; 0x53ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
  if (issign(*s)) s++;
    534a:	fe 01       	movw	r30, r28
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    534c:	1d 32       	cpi	r17, 0x2D	; 45
    534e:	71 f1       	breq	.+92     	; 0x53ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5350:	1b 32       	cpi	r17, 0x2B	; 43
    5352:	61 f1       	breq	.+88     	; 0x53ac <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e2>
    5354:	31 96       	adiw	r30, 0x01	; 1
isInteger():
  while (isdigit(*s)) s++;
    5356:	81 91       	ld	r24, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5358:	90 ed       	ldi	r25, 0xD0	; 208
    535a:	98 0f       	add	r25, r24
isInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:15
    535c:	9a 30       	cpi	r25, 0x0A	; 10
    535e:	d8 f3       	brcs	.-10     	; 0x5356 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:248

    if (isInteger(buffer)) {
    5360:	81 11       	cpse	r24, r1
    5362:	44 c0       	rjmp	.+136    	; 0x53ec <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x522>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5364:	14 37       	cpi	r17, 0x74	; 116
    5366:	09 f4       	brne	.+2      	; 0x536a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4a0>
    5368:	dd c1       	rjmp	.+954    	; 0x5724 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x85a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    536a:	1b 32       	cpi	r17, 0x2B	; 43
    536c:	09 f1       	breq	.+66     	; 0x53b0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e6>
    536e:	1d 32       	cpi	r17, 0x2D	; 45
    5370:	19 f1       	breq	.+70     	; 0x53b8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ee>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    5372:	10 e0       	ldi	r17, 0x00	; 0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  switch (*s) {
    5374:	fe 01       	movw	r30, r28
    5376:	31 96       	adiw	r30, 0x01	; 1
    5378:	20 e0       	ldi	r18, 0x00	; 0
    537a:	30 e0       	ldi	r19, 0x00	; 0
    537c:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    537e:	01 91       	ld	r16, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5380:	80 ed       	ldi	r24, 0xD0	; 208
    5382:	80 0f       	add	r24, r16
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    5384:	8a 30       	cpi	r24, 0x0A	; 10
    5386:	d0 f4       	brcc	.+52     	; 0x53bc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f2>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    5388:	aa e0       	ldi	r26, 0x0A	; 10
    538a:	b0 e0       	ldi	r27, 0x00	; 0
    538c:	0e 94 c0 b4 	call	0x16980	; 0x16980 <__muluhisi3>
    5390:	20 2f       	mov	r18, r16
    5392:	00 0f       	add	r16, r16
    5394:	33 0b       	sbc	r19, r19
    5396:	20 53       	subi	r18, 0x30	; 48
    5398:	31 09       	sbc	r19, r1
    539a:	03 2e       	mov	r0, r19
    539c:	00 0c       	add	r0, r0
    539e:	44 0b       	sbc	r20, r20
    53a0:	55 0b       	sbc	r21, r21
    53a2:	26 0f       	add	r18, r22
    53a4:	37 1f       	adc	r19, r23
    53a6:	48 1f       	adc	r20, r24
    53a8:	59 1f       	adc	r21, r25
    53aa:	e9 cf       	rjmp	.-46     	; 0x537e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4b4>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isInteger.hpp:14
namespace ArduinoJson {
namespace Internals {

inline bool isInteger(const char* s) {
  if (!s || !*s) return false;
  if (issign(*s)) s++;
    53ac:	32 96       	adiw	r30, 0x02	; 2
    53ae:	d3 cf       	rjmp	.-90     	; 0x5356 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x48c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    53b0:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26

  switch (*s) {
    case '-':
      negative_result = true;
      s++;
    53b2:	fe 01       	movw	r30, r28
    53b4:	32 96       	adiw	r30, 0x02	; 2
    53b6:	e0 cf       	rjmp	.-64     	; 0x5378 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4ae>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    53b8:	11 e0       	ldi	r17, 0x01	; 1
    53ba:	fb cf       	rjmp	.-10     	; 0x53b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4e8>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    53bc:	11 23       	and	r17, r17
    53be:	09 f4       	brne	.+2      	; 0x53c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x4f8>
    53c0:	b5 c1       	rjmp	.+874    	; 0x572c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x862>
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    53c2:	e1 14       	cp	r14, r1
    53c4:	f1 04       	cpc	r15, r1
    53c6:	09 f4       	brne	.+2      	; 0x53ca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x500>
    53c8:	b2 cf       	rjmp	.-156    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    53ca:	87 e0       	ldi	r24, 0x07	; 7
    53cc:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:71
    if (value >= 0)
    53ce:	21 15       	cp	r18, r1
    53d0:	31 05       	cpc	r19, r1
    53d2:	41 05       	cpc	r20, r1
    53d4:	51 05       	cpc	r21, r1
    53d6:	11 f4       	brne	.+4      	; 0x53dc <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x512>
_ZN11ArduinoJson9Internals15JsonVariantData17setPostiveIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:39
    content.asInteger = value;
  }

  void setPostiveInteger(JsonUInt value) {
    type = JSON_POSITIVE_INTEGER;
    53d8:	86 e0       	ldi	r24, 0x06	; 6
    53da:	90 e0       	ldi	r25, 0x00	; 0
_ZN11ArduinoJson9Internals15JsonVariantData18setNegativeIntegerEm():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:34
    type = JSON_FLOAT;
    content.asFloat = value;
  }

  void setNegativeInteger(JsonUInt value) {
    type = JSON_NEGATIVE_INTEGER;
    53dc:	f7 01       	movw	r30, r14
    53de:	91 83       	std	Z+1, r25	; 0x01
    53e0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:35
    content.asInteger = value;
    53e2:	22 83       	std	Z+2, r18	; 0x02
    53e4:	33 83       	std	Z+3, r19	; 0x03
    53e6:	44 83       	std	Z+4, r20	; 0x04
    53e8:	55 83       	std	Z+5, r21	; 0x05
    53ea:	a1 cf       	rjmp	.-190    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:16
namespace Internals {

inline bool isFloat(const char* s) {
  if (!s) return false;

  if (!strcmp(s, "NaN")) return true;
    53ec:	61 e0       	ldi	r22, 0x01	; 1
    53ee:	73 e0       	ldi	r23, 0x03	; 3
    53f0:	ce 01       	movw	r24, r28
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    53f8:	89 2b       	or	r24, r25
    53fa:	09 f4       	brne	.+2      	; 0x53fe <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x534>
    53fc:	46 c0       	rjmp	.+140    	; 0x548a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
  if (issign(*s)) s++;
    53fe:	5e 01       	movw	r10, r28
    5400:	f2 e0       	ldi	r31, 0x02	; 2
    5402:	af 0e       	add	r10, r31
    5404:	b1 1c       	adc	r11, r1
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    5406:	1d 32       	cpi	r17, 0x2D	; 45
    5408:	49 f0       	breq	.+18     	; 0x541c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
    540a:	fe 01       	movw	r30, r28
    540c:	31 96       	adiw	r30, 0x01	; 1
    540e:	5f 01       	movw	r10, r30
    5410:	1b 32       	cpi	r17, 0x2B	; 43
    5412:	21 f4       	brne	.+8      	; 0x541c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x552>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:17
    5414:	5e 01       	movw	r10, r28
    5416:	22 e0       	ldi	r18, 0x02	; 2
    5418:	a2 0e       	add	r10, r18
    541a:	b1 1c       	adc	r11, r1
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:18
  if (!strcmp(s, "Infinity")) return true;
    541c:	65 e0       	ldi	r22, 0x05	; 5
    541e:	73 e0       	ldi	r23, 0x03	; 3
    5420:	c5 01       	movw	r24, r10
    5422:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    5426:	89 2b       	or	r24, r25
    5428:	81 f1       	breq	.+96     	; 0x548a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c0>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:19
  if (*s == '\0') return false;
    542a:	d5 01       	movw	r26, r10
    542c:	8c 91       	ld	r24, X
    542e:	88 23       	and	r24, r24
    5430:	09 f4       	brne	.+2      	; 0x5434 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
    5432:	3b c1       	rjmp	.+630    	; 0x56aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5434:	fd 01       	movw	r30, r26
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21

  while (isdigit(*s)) s++;
    5436:	8d 91       	ld	r24, X+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    5438:	90 ed       	ldi	r25, 0xD0	; 208
    543a:	98 0f       	add	r25, r24
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:21
    543c:	9a 30       	cpi	r25, 0x0A	; 10
    543e:	d0 f3       	brcs	.-12     	; 0x5434 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x56a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:23

  if (*s == '.') {
    5440:	8e 32       	cpi	r24, 0x2E	; 46
    5442:	41 f4       	brne	.+16     	; 0x5454 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x58a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:24
    s++;
    5444:	9d 01       	movw	r18, r26
    5446:	f9 01       	movw	r30, r18
    5448:	2f 5f       	subi	r18, 0xFF	; 255
    544a:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    544c:	80 81       	ld	r24, Z
    544e:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:25
    while (isdigit(*s)) s++;
    5450:	8a 30       	cpi	r24, 0x0A	; 10
    5452:	c8 f3       	brcs	.-14     	; 0x5446 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x57c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:28
  }

  if (*s == 'e' || *s == 'E') {
    5454:	80 81       	ld	r24, Z
    5456:	8f 7d       	andi	r24, 0xDF	; 223
    5458:	85 34       	cpi	r24, 0x45	; 69
    545a:	a1 f4       	brne	.+40     	; 0x5484 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ba>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    s++;
    if (issign(*s)) s++;
    545c:	81 81       	ldd	r24, Z+1	; 0x01
issign():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:15
}

inline bool issign(char c) {
  return '-' == c || c == '+';
    545e:	8d 32       	cpi	r24, 0x2D	; 45
    5460:	09 f4       	brne	.+2      	; 0x5464 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x59a>
    5462:	57 c0       	rjmp	.+174    	; 0x5512 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
    5464:	8b 32       	cpi	r24, 0x2B	; 43
    5466:	09 f4       	brne	.+2      	; 0x546a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a0>
    5468:	54 c0       	rjmp	.+168    	; 0x5512 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x648>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:29
    s++;
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    546a:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11

namespace ArduinoJson {
namespace Internals {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
    546c:	80 81       	ld	r24, Z
    546e:	80 53       	subi	r24, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:31
    if (issign(*s)) s++;
    if (!isdigit(*s)) return false;
    5470:	8a 30       	cpi	r24, 0x0A	; 10
    5472:	08 f0       	brcs	.+2      	; 0x5476 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ac>
    5474:	1a c1       	rjmp	.+564    	; 0x56aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
    5476:	cf 01       	movw	r24, r30
    5478:	fc 01       	movw	r30, r24
    547a:	01 96       	adiw	r24, 0x01	; 1
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    547c:	20 81       	ld	r18, Z
    547e:	20 53       	subi	r18, 0x30	; 48
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:32
    while (isdigit(*s)) s++;
    5480:	2a 30       	cpi	r18, 0x0A	; 10
    5482:	d0 f3       	brcs	.-12     	; 0x5478 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5ae>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:250
      result.set(parseInteger<JsonInteger>(buffer));
    } else if (isFloat(buffer)) {
    5484:	80 81       	ld	r24, Z
    5486:	81 11       	cpse	r24, r1
    5488:	10 c1       	rjmp	.+544    	; 0x56aa <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7e0>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    548a:	1b 32       	cpi	r17, 0x2B	; 43
    548c:	09 f4       	brne	.+2      	; 0x5490 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5c6>
    548e:	43 c0       	rjmp	.+134    	; 0x5516 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x64c>
    5490:	1d 32       	cpi	r17, 0x2D	; 45
    5492:	09 f0       	breq	.+2      	; 0x5496 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5cc>
    5494:	47 c0       	rjmp	.+142    	; 0x5524 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x65a>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
    case '-':
      negative_result = true;
      s++;
    5496:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:25
  if (!s) return 0;  // NULL

  bool negative_result = false;
  switch (*s) {
    case '-':
      negative_result = true;
    5498:	dd 24       	eor	r13, r13
    549a:	d3 94       	inc	r13
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:26
      s++;
    549c:	5e 01       	movw	r10, r28
    549e:	b2 e0       	ldi	r27, 0x02	; 2
    54a0:	ab 0e       	add	r10, r27
    54a2:	b1 1c       	adc	r11, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:33
    case '+':
      s++;
      break;
  }

  if (*s == 't') return 1;  // true
    54a4:	60 e0       	ldi	r22, 0x00	; 0
    54a6:	70 e0       	ldi	r23, 0x00	; 0
    54a8:	80 e8       	ldi	r24, 0x80	; 128
    54aa:	9f e3       	ldi	r25, 0x3F	; 63
parseFloat():
    54ac:	14 37       	cpi	r17, 0x74	; 116
    54ae:	09 f4       	brne	.+2      	; 0x54b2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5e8>
    54b0:	d2 c0       	rjmp	.+420    	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:34
  if (*s == 'n' || *s == 'N') return traits::nan();
    54b2:	1f 7d       	andi	r17, 0xDF	; 223
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    54b4:	60 e0       	ldi	r22, 0x00	; 0
    54b6:	70 e0       	ldi	r23, 0x00	; 0
    54b8:	80 ec       	ldi	r24, 0xC0	; 192
    54ba:	9f e7       	ldi	r25, 0x7F	; 127
parseFloat():
    54bc:	1e 34       	cpi	r17, 0x4E	; 78
    54be:	09 f4       	brne	.+2      	; 0x54c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5f8>
    54c0:	ca c0       	rjmp	.+404    	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:35
  if (*s == 'i' || *s == 'I')
    54c2:	19 34       	cpi	r17, 0x49	; 73
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5fe>
    54c6:	97 c0       	rjmp	.+302    	; 0x55f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:39
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
    54c8:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:38
  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();

  mantissa_t mantissa = 0;
    54ca:	20 e0       	ldi	r18, 0x00	; 0
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	a9 01       	movw	r20, r18
    54d0:	f5 01       	movw	r30, r10
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
  exponent_t exponent_offset = 0;

  while (isdigit(*s)) {
    54d2:	d5 01       	movw	r26, r10
    54d4:	1d 91       	ld	r17, X+
    54d6:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    54d8:	80 ed       	ldi	r24, 0xD0	; 208
    54da:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:41
    54dc:	8a 30       	cpi	r24, 0x0A	; 10
    54de:	48 f5       	brcc	.+82     	; 0x5532 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x668>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:42
    if (mantissa < traits::mantissa_max / 10)
    54e0:	2c 3c       	cpi	r18, 0xCC	; 204
    54e2:	bc ec       	ldi	r27, 0xCC	; 204
    54e4:	3b 07       	cpc	r19, r27
    54e6:	bc e0       	ldi	r27, 0x0C	; 12
    54e8:	4b 07       	cpc	r20, r27
    54ea:	51 05       	cpc	r21, r1
    54ec:	04 f5       	brge	.+64     	; 0x552e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x664>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:43
      mantissa = mantissa * 10 + (*s - '0');
    54ee:	aa e0       	ldi	r26, 0x0A	; 10
    54f0:	b0 e0       	ldi	r27, 0x00	; 0
    54f2:	0e 94 c0 b4 	call	0x16980	; 0x16980 <__muluhisi3>
    54f6:	21 2f       	mov	r18, r17
    54f8:	11 0f       	add	r17, r17
    54fa:	33 0b       	sbc	r19, r19
    54fc:	20 53       	subi	r18, 0x30	; 48
    54fe:	31 09       	sbc	r19, r1
    5500:	03 2e       	mov	r0, r19
    5502:	00 0c       	add	r0, r0
    5504:	44 0b       	sbc	r20, r20
    5506:	55 0b       	sbc	r21, r21
    5508:	26 0f       	add	r18, r22
    550a:	37 1f       	adc	r19, r23
    550c:	48 1f       	adc	r20, r24
    550e:	59 1f       	adc	r21, r25
    5510:	df cf       	rjmp	.-66     	; 0x54d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
isFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Numbers/isFloat.hpp:30
    while (isdigit(*s)) s++;
  }

  if (*s == 'e' || *s == 'E') {
    s++;
    if (issign(*s)) s++;
    5512:	32 96       	adiw	r30, 0x02	; 2
    5514:	ab cf       	rjmp	.-170    	; 0x546c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5a2>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    5516:	1a 81       	ldd	r17, Y+2	; 0x02
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5518:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    551a:	5e 01       	movw	r10, r28
    551c:	e2 e0       	ldi	r30, 0x02	; 2
    551e:	ae 0e       	add	r10, r30
    5520:	b1 1c       	adc	r11, r1
    5522:	c0 cf       	rjmp	.-128    	; 0x54a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:22
  typedef typename traits::mantissa_type mantissa_t;
  typedef typename traits::exponent_type exponent_t;

  if (!s) return 0;  // NULL

  bool negative_result = false;
    5524:	d1 2c       	mov	r13, r1
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:23
  switch (*s) {
    5526:	ce 01       	movw	r24, r28
    5528:	01 96       	adiw	r24, 0x01	; 1
    552a:	5c 01       	movw	r10, r24
    552c:	bb cf       	rjmp	.-138    	; 0x54a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x5da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:45

  while (isdigit(*s)) {
    if (mantissa < traits::mantissa_max / 10)
      mantissa = mantissa * 10 + (*s - '0');
    else
      exponent_offset++;
    552e:	0f 5f       	subi	r16, 0xFF	; 255
    5530:	cf cf       	rjmp	.-98     	; 0x54d0 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x606>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:49
    s++;
  }

  if (*s == '.') {
    5532:	1e 32       	cpi	r17, 0x2E	; 46
    5534:	31 f5       	brne	.+76     	; 0x5582 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:50
    s++;
    5536:	5f 01       	movw	r10, r30
    5538:	8f ef       	ldi	r24, 0xFF	; 255
    553a:	a8 1a       	sub	r10, r24
    553c:	b8 0a       	sbc	r11, r24
    553e:	f5 01       	movw	r30, r10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    while (isdigit(*s)) {
    5540:	d5 01       	movw	r26, r10
    5542:	1d 91       	ld	r17, X+
    5544:	5d 01       	movw	r10, r26
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    5546:	80 ed       	ldi	r24, 0xD0	; 208
    5548:	81 0f       	add	r24, r17
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:51
    554a:	8a 30       	cpi	r24, 0x0A	; 10
    554c:	d0 f4       	brcc	.+52     	; 0x5582 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6b8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:52
      if (mantissa < traits::mantissa_max / 10) {
    554e:	2c 3c       	cpi	r18, 0xCC	; 204
    5550:	bc ec       	ldi	r27, 0xCC	; 204
    5552:	3b 07       	cpc	r19, r27
    5554:	bc e0       	ldi	r27, 0x0C	; 12
    5556:	4b 07       	cpc	r20, r27
    5558:	51 05       	cpc	r21, r1
    555a:	8c f7       	brge	.-30     	; 0x553e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:53
        mantissa = mantissa * 10 + (*s - '0');
    555c:	aa e0       	ldi	r26, 0x0A	; 10
    555e:	b0 e0       	ldi	r27, 0x00	; 0
    5560:	0e 94 c0 b4 	call	0x16980	; 0x16980 <__muluhisi3>
    5564:	21 2f       	mov	r18, r17
    5566:	11 0f       	add	r17, r17
    5568:	33 0b       	sbc	r19, r19
    556a:	20 53       	subi	r18, 0x30	; 48
    556c:	31 09       	sbc	r19, r1
    556e:	03 2e       	mov	r0, r19
    5570:	00 0c       	add	r0, r0
    5572:	44 0b       	sbc	r20, r20
    5574:	55 0b       	sbc	r21, r21
    5576:	26 0f       	add	r18, r22
    5578:	37 1f       	adc	r19, r23
    557a:	48 1f       	adc	r20, r24
    557c:	59 1f       	adc	r21, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:54
        exponent_offset--;
    557e:	01 50       	subi	r16, 0x01	; 1
    5580:	de cf       	rjmp	.-68     	; 0x553e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x674>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:61
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    5582:	80 81       	ld	r24, Z
    5584:	8f 7d       	andi	r24, 0xDF	; 223
    5586:	00 2e       	mov	r0, r16
    5588:	00 0c       	add	r0, r0
    558a:	11 0b       	sbc	r17, r17
    558c:	85 34       	cpi	r24, 0x45	; 69
    558e:	09 f0       	breq	.+2      	; 0x5592 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6c8>
    5590:	70 c0       	rjmp	.+224    	; 0x5672 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7a8>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:64
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
    5592:	81 81       	ldd	r24, Z+1	; 0x01
    5594:	8d 32       	cpi	r24, 0x2D	; 45
    5596:	41 f5       	brne	.+80     	; 0x55e8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x71e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:66
      negative_exponent = true;
      s++;
    5598:	32 96       	adiw	r30, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:65
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
    559a:	b1 e0       	ldi	r27, 0x01	; 1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	80 e0       	ldi	r24, 0x00	; 0
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
    55a0:	6a e0       	ldi	r22, 0x0A	; 10
    55a2:	b6 2e       	mov	r11, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
    55a4:	a1 91       	ld	r26, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    55a6:	60 ed       	ldi	r22, 0xD0	; 208
    55a8:	6a 0f       	add	r22, r26
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:71
    55aa:	6a 30       	cpi	r22, 0x0A	; 10
    55ac:	78 f5       	brcc	.+94     	; 0x560c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x742>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:72
      exponent = exponent * 10 + (*s - '0');
    55ae:	b8 9e       	mul	r11, r24
    55b0:	b0 01       	movw	r22, r0
    55b2:	b9 9e       	mul	r11, r25
    55b4:	70 0d       	add	r23, r0
    55b6:	11 24       	eor	r1, r1
    55b8:	8a 2f       	mov	r24, r26
    55ba:	aa 0f       	add	r26, r26
    55bc:	99 0b       	sbc	r25, r25
    55be:	c0 97       	sbiw	r24, 0x30	; 48
    55c0:	86 0f       	add	r24, r22
    55c2:	97 1f       	adc	r25, r23
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:73
      if (exponent + exponent_offset > traits::exponent_max) {
    55c4:	b8 01       	movw	r22, r16
    55c6:	68 0f       	add	r22, r24
    55c8:	79 1f       	adc	r23, r25
    55ca:	67 32       	cpi	r22, 0x27	; 39
    55cc:	71 05       	cpc	r23, r1
    55ce:	54 f3       	brlt	.-44     	; 0x55a4 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6da>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:74
        if (negative_exponent)
    55d0:	bb 23       	and	r27, r27
    55d2:	89 f0       	breq	.+34     	; 0x55f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x72c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:75
          return negative_result ? -0.0f : 0.0f;
    55d4:	60 e0       	ldi	r22, 0x00	; 0
    55d6:	70 e0       	ldi	r23, 0x00	; 0
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	90 e8       	ldi	r25, 0x80	; 128
parseFloat():
    55dc:	d1 10       	cpse	r13, r1
    55de:	3b c0       	rjmp	.+118    	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
    55e0:	60 e0       	ldi	r22, 0x00	; 0
    55e2:	70 e0       	ldi	r23, 0x00	; 0
    55e4:	cb 01       	movw	r24, r22
    55e6:	37 c0       	rjmp	.+110    	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:67
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
    55e8:	8b 32       	cpi	r24, 0x2B	; 43
    55ea:	19 f0       	breq	.+6      	; 0x55f2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x728>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:62
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    55ec:	31 96       	adiw	r30, 0x01	; 1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:63
    bool negative_exponent = false;
    55ee:	b0 e0       	ldi	r27, 0x00	; 0
    55f0:	d5 cf       	rjmp	.-86     	; 0x559c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x6d2>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:68
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
    55f2:	32 96       	adiw	r30, 0x02	; 2
    55f4:	fc cf       	rjmp	.-8      	; 0x55ee <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x724>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    55f6:	60 e0       	ldi	r22, 0x00	; 0
    55f8:	70 e0       	ldi	r23, 0x00	; 0
    55fa:	80 e8       	ldi	r24, 0x80	; 128
    55fc:	9f ef       	ldi	r25, 0xFF	; 255
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:77
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
          return negative_result ? -0.0f : 0.0f;
        else
          return negative_result ? -traits::inf() : traits::inf();
    55fe:	d1 10       	cpse	r13, r1
    5600:	2a c0       	rjmp	.+84     	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:36
  }

  if (*s == 't') return 1;  // true
  if (*s == 'n' || *s == 'N') return traits::nan();
  if (*s == 'i' || *s == 'I')
    return negative_result ? -traits::inf() : traits::inf();
    5602:	60 e0       	ldi	r22, 0x00	; 0
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	80 e8       	ldi	r24, 0x80	; 128
    5608:	9f e7       	ldi	r25, 0x7F	; 127
    560a:	25 c0       	rjmp	.+74     	; 0x5656 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x78c>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:81
        else
          return negative_result ? -traits::inf() : traits::inf();
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
    560c:	bb 23       	and	r27, r27
    560e:	19 f0       	breq	.+6      	; 0x5616 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
    5610:	91 95       	neg	r25
    5612:	81 95       	neg	r24
    5614:	91 09       	sbc	r25, r1
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:83
  }
  exponent += exponent_offset;
    5616:	08 0f       	add	r16, r24
    5618:	19 1f       	adc	r17, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:85

  T result = traits::make_float(static_cast<T>(mantissa), exponent);
    561a:	ca 01       	movw	r24, r20
    561c:	b9 01       	movw	r22, r18
    561e:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:123
  typedef int8_t exponent_type;
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
    5622:	10 16       	cp	r1, r16
    5624:	11 06       	cpc	r1, r17
    5626:	44 f5       	brge	.+80     	; 0x5678 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7ae>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
      for (uint8_t index = 0; e != 0; index++) {
    5628:	b1 2c       	mov	r11, r1
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    562a:	00 ff       	sbrs	r16, 0
    562c:	0c c0       	rjmp	.+24     	; 0x5646 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x77c>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24positiveBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:140
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
    static T factors[] = {1e1f, 1e2f, 1e4f, 1e8f, 1e16f, 1e32f};
    return factors[index];
    562e:	24 e0       	ldi	r18, 0x04	; 4
    5630:	b2 9e       	mul	r11, r18
    5632:	f0 01       	movw	r30, r0
    5634:	11 24       	eor	r1, r1
    5636:	e8 5c       	subi	r30, 0xC8	; 200
    5638:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:125

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
    563a:	20 81       	ld	r18, Z
    563c:	31 81       	ldd	r19, Z+1	; 0x01
    563e:	42 81       	ldd	r20, Z+2	; 0x02
    5640:	53 81       	ldd	r21, Z+3	; 0x03
    5642:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:126
        e >>= 1;
    5646:	15 95       	asr	r17
    5648:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:124
  static const exponent_type exponent_max = 38;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
    564a:	b3 94       	inc	r11
    564c:	01 15       	cp	r16, r1
    564e:	11 05       	cpc	r17, r1
    5650:	61 f7       	brne	.-40     	; 0x562a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x760>
parseFloat():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:87

  return negative_result ? -result : result;
    5652:	d1 10       	cpse	r13, r1
    5654:	90 58       	subi	r25, 0x80	; 128
_ZN11ArduinoJson11JsonVariant3setIfEEbT_PNS_9Internals9enable_ifIXsrNS3_17is_floating_pointIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:54
  // set(float value);
  template <typename T>
  FORCE_INLINE bool set(
      T value, typename Internals::enable_if<
                   Internals::is_floating_point<T>::value>::type * = 0) {
    if (!_data) return false;
    5656:	e1 14       	cp	r14, r1
    5658:	f1 04       	cpc	r15, r1
    565a:	09 f4       	brne	.+2      	; 0x565e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x794>
    565c:	68 ce       	rjmp	.-816    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData8setFloatEf():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:29
    type = JSON_BOOLEAN;
    content.asInteger = static_cast<JsonUInt>(value);
  }

  void setFloat(JsonFloat value) {
    type = JSON_FLOAT;
    565e:	2a e0       	ldi	r18, 0x0A	; 10
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	f7 01       	movw	r30, r14
    5664:	31 83       	std	Z+1, r19	; 0x01
    5666:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:30
    content.asFloat = value;
    5668:	62 83       	std	Z+2, r22	; 0x02
    566a:	73 83       	std	Z+3, r23	; 0x03
    566c:	84 83       	std	Z+4, r24	; 0x04
    566e:	95 83       	std	Z+5, r25	; 0x05
    5670:	5e ce       	rjmp	.-836    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseFloat.hpp:60
      }
      s++;
    }
  }

  int exponent = 0;
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	80 e0       	ldi	r24, 0x00	; 0
    5676:	cf cf       	rjmp	.-98     	; 0x5616 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x74c>
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:129
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
    5678:	11 95       	neg	r17
    567a:	01 95       	neg	r16
    567c:	11 09       	sbc	r17, r1
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
      for (uint8_t index = 0; e != 0; index++) {
    567e:	b1 2c       	mov	r11, r1
make_float():
    5680:	01 15       	cp	r16, r1
    5682:	11 05       	cpc	r17, r1
    5684:	31 f3       	breq	.-52     	; 0x5652 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x788>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    5686:	00 ff       	sbrs	r16, 0
    5688:	0c c0       	rjmp	.+24     	; 0x56a2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7d8>
_ZN11ArduinoJson9Internals11FloatTraitsIfLj4EE24negativeBinaryPowerOfTenEi():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:145
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
    static T factors[] = {1e-1f, 1e-2f, 1e-4f, 1e-8f, 1e-16f, 1e-32f};
    return factors[index];
    568a:	a4 e0       	ldi	r26, 0x04	; 4
    568c:	ba 9e       	mul	r11, r26
    568e:	f0 01       	movw	r30, r0
    5690:	11 24       	eor	r1, r1
    5692:	e0 5e       	subi	r30, 0xE0	; 224
    5694:	fd 4f       	sbci	r31, 0xFD	; 253
make_float():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:131
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
    5696:	20 81       	ld	r18, Z
    5698:	31 81       	ldd	r19, Z+1	; 0x01
    569a:	42 81       	ldd	r20, Z+2	; 0x02
    569c:	53 81       	ldd	r21, Z+3	; 0x03
    569e:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:132
        e >>= 1;
    56a2:	15 95       	asr	r17
    56a4:	07 95       	ror	r16
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Numbers/FloatTraits.hpp:130
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = -e;
      for (uint8_t index = 0; e != 0; index++) {
    56a6:	b3 94       	inc	r11
    56a8:	eb cf       	rjmp	.-42     	; 0x5680 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7b6>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:252
      result.set(parseFloat<JsonFloat>(buffer));
    } else if (!strcmp(buffer, "true")) {
    56aa:	6e e0       	ldi	r22, 0x0E	; 14
    56ac:	73 e0       	ldi	r23, 0x03	; 3
    56ae:	ce 01       	movw	r24, r28
    56b0:	01 96       	adiw	r24, 0x01	; 1
    56b2:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    56b6:	89 2b       	or	r24, r25
    56b8:	91 f4       	brne	.+36     	; 0x56de <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x814>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
  // Creates an uninitialized JsonVariant
  FORCE_INLINE JsonVariant() : _memoryPool(0), _data(0) {}

  // set(bool value)
  FORCE_INLINE bool set(bool value) {
    if (!_data) return false;
    56ba:	e1 14       	cp	r14, r1
    56bc:	f1 04       	cpc	r15, r1
    56be:	09 f4       	brne	.+2      	; 0x56c2 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x7f8>
    56c0:	36 ce       	rjmp	.-916    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    56c2:	85 e0       	ldi	r24, 0x05	; 5
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	f7 01       	movw	r30, r14
    56c8:	91 83       	std	Z+1, r25	; 0x01
    56ca:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	a0 e0       	ldi	r26, 0x00	; 0
    56d2:	b0 e0       	ldi	r27, 0x00	; 0
    56d4:	82 83       	std	Z+2, r24	; 0x02
    56d6:	93 83       	std	Z+3, r25	; 0x03
    56d8:	a4 83       	std	Z+4, r26	; 0x04
    56da:	b5 83       	std	Z+5, r27	; 0x05
    56dc:	28 ce       	rjmp	.-944    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:254
      result.set(true);
    } else if (!strcmp(buffer, "false")) {
    56de:	63 e1       	ldi	r22, 0x13	; 19
    56e0:	73 e0       	ldi	r23, 0x03	; 3
    56e2:	ce 01       	movw	r24, r28
    56e4:	01 96       	adiw	r24, 0x01	; 1
    56e6:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    56ea:	89 2b       	or	r24, r25
    56ec:	79 f4       	brne	.+30     	; 0x570c <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x842>
_ZN11ArduinoJson11JsonVariant3setEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:43
    56ee:	e1 14       	cp	r14, r1
    56f0:	f1 04       	cpc	r15, r1
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x82c>
    56f4:	1c ce       	rjmp	.-968    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
_ZN11ArduinoJson9Internals15JsonVariantData10setBooleanEb():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:24
  JsonVariantData() {
    type = JSON_NULL;
  }

  void setBoolean(bool value) {
    type = JSON_BOOLEAN;
    56f6:	85 e0       	ldi	r24, 0x05	; 5
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	d7 01       	movw	r26, r14
    56fc:	8d 93       	st	X+, r24
    56fe:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:25
    content.asInteger = static_cast<JsonUInt>(value);
    5700:	f7 01       	movw	r30, r14
    5702:	12 82       	std	Z+2, r1	; 0x02
    5704:	13 82       	std	Z+3, r1	; 0x03
    5706:	14 82       	std	Z+4, r1	; 0x04
    5708:	15 82       	std	Z+5, r1	; 0x05
    570a:	11 ce       	rjmp	.-990    	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
parseNumericValue():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:256
      result.set(false);
    } else if (!strcmp(buffer, "null")) {
    570c:	69 e1       	ldi	r22, 0x19	; 25
    570e:	73 e0       	ldi	r23, 0x03	; 3
    5710:	ce 01       	movw	r24, r28
    5712:	01 96       	adiw	r24, 0x01	; 1
    5714:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    5718:	89 2b       	or	r24, r25
    571a:	09 f4       	brne	.+2      	; 0x571e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x854>
    571c:	08 ce       	rjmp	.-1008   	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:259
      // already null
    } else {
      return DeserializationError::InvalidInput;
    571e:	82 e0       	ldi	r24, 0x02	; 2
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	a3 cc       	rjmp	.-1722   	; 0x506a <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x1a0>
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEE5parseENS_11JsonVariantE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
    5724:	21 e0       	ldi	r18, 0x01	; 1
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	40 e0       	ldi	r20, 0x00	; 0
    572a:	50 e0       	ldi	r21, 0x00	; 0
_ZN11ArduinoJson11JsonVariant3setIlEEbT_PNS_9Internals9enable_ifIXaasrNS3_11is_integralIS2_EE5valuesrNS3_9is_signedIS2_EE5valueEvE4typeE():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:70
  FORCE_INLINE bool set(
      T value,
      typename Internals::enable_if<Internals::is_integral<T>::value &&
                                    Internals::is_signed<T>::value>::type * =
          0) {
    if (!_data) return false;
    572c:	e1 14       	cp	r14, r1
    572e:	f1 04       	cpc	r15, r1
    5730:	09 f0       	breq	.+2      	; 0x5734 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x86a>
    5732:	52 ce       	rjmp	.-860    	; 0x53d8 <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x50e>
    5734:	fc cd       	rjmp	.-1032   	; 0x532e <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)+0x464>

00005736 <remote_tds_get_data(unsigned char) [clone .part.26]>:
_Z19remote_tds_get_datah.part.26():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2794
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2799
{
  int temp = 0;
  if (idx < MAX_RTDS)
  {
    temp = SRAM.readByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx)) << 8;
    573a:	93 e0       	ldi	r25, 0x03	; 3
    573c:	89 9f       	mul	r24, r25
    573e:	e0 01       	movw	r28, r0
    5740:	11 24       	eor	r1, r1
    5742:	be 01       	movw	r22, r28
    5744:	6b 59       	subi	r22, 0x9B	; 155
    5746:	7f 4f       	sbci	r23, 0xFF	; 255
    5748:	07 2e       	mov	r0, r23
    574a:	00 0c       	add	r0, r0
    574c:	88 0b       	sbc	r24, r24
    574e:	99 0b       	sbc	r25, r25
    5750:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2800
    temp = temp = SRAM.readByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx));
    5754:	be 01       	movw	r22, r28
    5756:	6c 59       	subi	r22, 0x9C	; 156
    5758:	7f 4f       	sbci	r23, 0xFF	; 255
    575a:	07 2e       	mov	r0, r23
    575c:	00 0c       	add	r0, r0
    575e:	88 0b       	sbc	r24, r24
    5760:	99 0b       	sbc	r25, r25
    5762:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2803
  }
  return temp;
}
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	df 91       	pop	r29
    576a:	cf 91       	pop	r28
    576c:	08 95       	ret

0000576e <display_element_dialog_show_text(unsigned int, unsigned int, unsigned int, unsigned int)>:
_Z32display_element_dialog_show_textjjjj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4880
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
}
/////
void display_element_dialog_show_text(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y)
{
    576e:	ef 92       	push	r14
    5770:	ff 92       	push	r15
    5772:	0f 93       	push	r16
    5774:	1f 93       	push	r17
    5776:	ab 01       	movw	r20, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4881
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
    5778:	ee 24       	eor	r14, r14
    577a:	ea 94       	dec	r14
    577c:	fe 2c       	mov	r15, r14
    577e:	10 e0       	ldi	r17, 0x00	; 0
    5780:	00 e0       	ldi	r16, 0x00	; 0
    5782:	22 e0       	ldi	r18, 0x02	; 2
    5784:	bc 01       	movw	r22, r24
    5786:	8f eb       	ldi	r24, 0xBF	; 191
    5788:	98 e0       	ldi	r25, 0x08	; 8
    578a:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4882
}
    578e:	1f 91       	pop	r17
    5790:	0f 91       	pop	r16
    5792:	ff 90       	pop	r15
    5794:	ef 90       	pop	r14
    5796:	08 95       	ret

00005798 <display_element_set_string_del_char(unsigned char, unsigned char)>:
_Z35display_element_set_string_del_charhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2362
  }
}

void display_element_set_string_del_char(uint8_t args1, uint8_t args2)
{
  uint8_t len = strlen(dialog_set_string);
    5798:	8d ea       	ldi	r24, 0xAD	; 173
    579a:	98 e0       	ldi	r25, 0x08	; 8
    579c:	fc 01       	movw	r30, r24
    579e:	01 90       	ld	r0, Z+
    57a0:	00 20       	and	r0, r0
    57a2:	e9 f7       	brne	.-6      	; 0x579e <display_element_set_string_del_char(unsigned char, unsigned char)+0x6>
    57a4:	cf 01       	movw	r24, r30
    57a6:	8e 5a       	subi	r24, 0xAE	; 174
    57a8:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2363
  if (len > 0)
    57aa:	88 23       	and	r24, r24
    57ac:	29 f0       	breq	.+10     	; 0x57b8 <display_element_set_string_del_char(unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2364
    dialog_set_string[len - 1] = 0;
    57ae:	99 27       	eor	r25, r25
    57b0:	fc 01       	movw	r30, r24
    57b2:	e4 55       	subi	r30, 0x54	; 84
    57b4:	f7 4f       	sbci	r31, 0xF7	; 247
    57b6:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2365
}
    57b8:	08 95       	ret

000057ba <display_element_set_string_add_char(char)>:
_Z35display_element_set_string_add_charc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2352
  strcpy(str, dialog_set_string);
}

void display_element_set_string_add_char(char znak)
{
  uint8_t len = strlen(dialog_set_string);
    57ba:	ed ea       	ldi	r30, 0xAD	; 173
    57bc:	f8 e0       	ldi	r31, 0x08	; 8
    57be:	01 90       	ld	r0, Z+
    57c0:	00 20       	and	r0, r0
    57c2:	e9 f7       	brne	.-6      	; 0x57be <display_element_set_string_add_char(char)+0x4>
    57c4:	ee 5a       	subi	r30, 0xAE	; 174
    57c6:	f8 40       	sbci	r31, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2353
  if (len  < dialog_set_string_max_length - 1)
    57c8:	ff 27       	eor	r31, r31
    57ca:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <dialog_set_string_max_length>
    57ce:	21 50       	subi	r18, 0x01	; 1
    57d0:	33 0b       	sbc	r19, r19
    57d2:	e2 17       	cp	r30, r18
    57d4:	f3 07       	cpc	r31, r19
    57d6:	24 f4       	brge	.+8      	; 0x57e0 <display_element_set_string_add_char(char)+0x26>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2355
  {
    dialog_set_string[len] = znak;
    57d8:	e3 55       	subi	r30, 0x53	; 83
    57da:	f7 4f       	sbci	r31, 0xF7	; 247
    57dc:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2356
    dialog_set_string[len + 1] = 0;
    57de:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2358
  }
}
    57e0:	08 95       	ret

000057e2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)>:
_Z19click_keyboard_alfahhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2501
   args3 ... index prvku
*/
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    57e2:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <dialog_set_string_keyboard_type>
    57e6:	91 11       	cpse	r25, r1
    57e8:	07 c0       	rjmp	.+14     	; 0x57f8 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2502
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
    57ea:	e4 2f       	mov	r30, r20
    57ec:	f0 e0       	ldi	r31, 0x00	; 0
    57ee:	e4 5c       	subi	r30, 0xC4	; 196
    57f0:	fe 4c       	sbci	r31, 0xCE	; 206
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    57f2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2508
  ///
  display_element_set_string_add_char(znak);
    57f4:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <display_element_set_string_add_char(char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2503
void click_keyboard_alfa(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_UPPER)
    znak = pgm_read_byte(&keyboad_number_char_upper[args3]);
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_LOWER)
    57f8:	91 30       	cpi	r25, 0x01	; 1
    57fa:	29 f4       	brne	.+10     	; 0x5806 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2504
    znak = pgm_read_byte(&keyboad_number_char_lower[args3]);
    57fc:	e4 2f       	mov	r30, r20
    57fe:	f0 e0       	ldi	r31, 0x00	; 0
    5800:	ee 5d       	subi	r30, 0xDE	; 222
    5802:	fe 4c       	sbci	r31, 0xCE	; 206
    5804:	f6 cf       	rjmp	.-20     	; 0x57f2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2505
  if (dialog_set_string_keyboard_type == KEYBOARD_TYPE_SPECIAL)
    5806:	92 30       	cpi	r25, 0x02	; 2
    5808:	a9 f7       	brne	.-22     	; 0x57f4 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2506
    znak = pgm_read_byte(&keyboad_number_char_special[args3]);
    580a:	e4 2f       	mov	r30, r20
    580c:	f0 e0       	ldi	r31, 0x00	; 0
    580e:	e8 5f       	subi	r30, 0xF8	; 248
    5810:	fe 4c       	sbci	r31, 0xCE	; 206
    5812:	ef cf       	rjmp	.-34     	; 0x57f2 <click_keyboard_alfa(unsigned char, unsigned char, unsigned char)+0x10>

00005814 <click_keyboard_number(unsigned char, unsigned char, unsigned char)>:
_Z21click_keyboard_numberhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2464
   args3 ... index prvku
*/
void click_keyboard_number(uint8_t args1, uint8_t args2, uint8_t args3)
{
  char znak;
  znak = '0' + args3;
    5814:	80 e3       	ldi	r24, 0x30	; 48
    5816:	84 0f       	add	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2465
  if (args3 == 10) znak = '.';
    5818:	4a 30       	cpi	r20, 0x0A	; 10
    581a:	09 f4       	brne	.+2      	; 0x581e <click_keyboard_number(unsigned char, unsigned char, unsigned char)+0xa>
    581c:	8e e2       	ldi	r24, 0x2E	; 46
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2466
  display_element_set_string_add_char(znak);
    581e:	0c 94 dd 2b 	jmp	0x57ba	; 0x57ba <display_element_set_string_add_char(char)>

00005822 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>:
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5182
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
}
/////////////////////
/// typ_button_3 ////
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
    5822:	2f 92       	push	r2
    5824:	3f 92       	push	r3
    5826:	4f 92       	push	r4
    5828:	5f 92       	push	r5
    582a:	6f 92       	push	r6
    582c:	7f 92       	push	r7
    582e:	9f 92       	push	r9
    5830:	af 92       	push	r10
    5832:	bf 92       	push	r11
    5834:	cf 92       	push	r12
    5836:	df 92       	push	r13
    5838:	ef 92       	push	r14
    583a:	ff 92       	push	r15
    583c:	0f 93       	push	r16
    583e:	1f 93       	push	r17
    5840:	cf 93       	push	r28
    5842:	df 93       	push	r29
    5844:	00 d0       	rcall	.+0      	; 0x5846 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x24>
    5846:	1f 92       	push	r1
    5848:	1f 92       	push	r1
    584a:	cd b7       	in	r28, 0x3d	; 61
    584c:	de b7       	in	r29, 0x3e	; 62
    584e:	6c 01       	movw	r12, r24
    5850:	5b 01       	movw	r10, r22
    5852:	1a 01       	movw	r2, r20
    5854:	29 01       	movw	r4, r18
    5856:	90 2e       	mov	r9, r16
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    5858:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    585c:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    5860:	10 e0       	ldi	r17, 0x00	; 0
    5862:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5187
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5864:	3b 01       	movw	r6, r22
    5866:	62 0e       	add	r6, r18
    5868:	73 1e       	adc	r7, r19
    586a:	84 0f       	add	r24, r20
    586c:	95 1f       	adc	r25, r21
    586e:	9d 83       	std	Y+5, r25	; 0x05
    5870:	8c 83       	std	Y+4, r24	; 0x04
    5872:	93 01       	movw	r18, r6
    5874:	20 1b       	sub	r18, r16
    5876:	31 0b       	sbc	r19, r17
    5878:	4c 81       	ldd	r20, Y+4	; 0x04
    587a:	5d 81       	ldd	r21, Y+5	; 0x05
    587c:	40 1b       	sub	r20, r16
    587e:	51 0b       	sbc	r21, r17
    5880:	b5 01       	movw	r22, r10
    5882:	60 0f       	add	r22, r16
    5884:	71 1f       	adc	r23, r17
    5886:	c6 01       	movw	r24, r12
    5888:	80 0f       	add	r24, r16
    588a:	91 1f       	adc	r25, r17
    588c:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5890:	0f 5f       	subi	r16, 0xFF	; 255
    5892:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5186
void button_click_3(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t char_size, char znak)
{
  uint8_t posx , posy, tmpy, tmpx;
  char str1[3];
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5894:	03 30       	cpi	r16, 0x03	; 3
    5896:	11 05       	cpc	r17, r1
    5898:	61 f7       	brne	.-40     	; 0x5872 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5188
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
    589a:	e9 82       	std	Y+1, r14	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5189
  str1[1] = 0;
    589c:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5191
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
    589e:	ce 01       	movw	r24, r28
    58a0:	01 96       	adiw	r24, 0x01	; 1
    58a2:	fc 01       	movw	r30, r24
    58a4:	01 90       	ld	r0, Z+
    58a6:	00 20       	and	r0, r0
    58a8:	e9 f7       	brne	.-6      	; 0x58a4 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)+0x82>
    58aa:	31 97       	sbiw	r30, 0x01	; 1
    58ac:	e8 1b       	sub	r30, r24
    58ae:	f9 0b       	sbc	r31, r25
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    58b0:	29 2d       	mov	r18, r9
    58b2:	22 0f       	add	r18, r18
    58b4:	29 0d       	add	r18, r9
    58b6:	22 0f       	add	r18, r18
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5193
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    58b8:	a2 01       	movw	r20, r4
    58ba:	42 1b       	sub	r20, r18
    58bc:	51 09       	sbc	r21, r1
    58be:	56 95       	lsr	r21
    58c0:	47 95       	ror	r20
    58c2:	56 95       	lsr	r21
    58c4:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5194
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    58c6:	4a 0d       	add	r20, r10
    58c8:	5b 2d       	mov	r21, r11
    58ca:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    58cc:	26 e0       	ldi	r18, 0x06	; 6
    58ce:	e2 9f       	mul	r30, r18
    58d0:	f0 01       	movw	r30, r0
    58d2:	11 24       	eor	r1, r1
    58d4:	9e 9e       	mul	r9, r30
    58d6:	90 01       	movw	r18, r0
    58d8:	9f 9e       	mul	r9, r31
    58da:	30 0d       	add	r19, r0
    58dc:	11 24       	eor	r1, r1
_Z14button_click_3jjjjhc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5192
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  str1[0] = znak;
  str1[1] = 0;
  tmpy = show_string_size_hight(char_size);
  tmpx = show_string_size_width(strlen(str1), char_size);
  posx = (size_x - tmpx) / 2;
    58de:	33 27       	eor	r19, r19
    58e0:	b1 01       	movw	r22, r2
    58e2:	62 1b       	sub	r22, r18
    58e4:	73 0b       	sbc	r23, r19
    58e6:	76 95       	lsr	r23
    58e8:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5194
  posy = (size_y - tmpy) / 4;
  show_string(str1, x + posx, y + posy, char_size, BLACK, WHITE, 0);
    58ea:	6c 0d       	add	r22, r12
    58ec:	7d 2d       	mov	r23, r13
    58ee:	71 1d       	adc	r23, r1
    58f0:	ee 24       	eor	r14, r14
    58f2:	ea 94       	dec	r14
    58f4:	fe 2c       	mov	r15, r14
    58f6:	10 e0       	ldi	r17, 0x00	; 0
    58f8:	00 e0       	ldi	r16, 0x00	; 0
    58fa:	29 2d       	mov	r18, r9
    58fc:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5195
}
    5900:	0f 90       	pop	r0
    5902:	0f 90       	pop	r0
    5904:	0f 90       	pop	r0
    5906:	0f 90       	pop	r0
    5908:	0f 90       	pop	r0
    590a:	df 91       	pop	r29
    590c:	cf 91       	pop	r28
    590e:	1f 91       	pop	r17
    5910:	0f 91       	pop	r16
    5912:	ff 90       	pop	r15
    5914:	ef 90       	pop	r14
    5916:	df 90       	pop	r13
    5918:	cf 90       	pop	r12
    591a:	bf 90       	pop	r11
    591c:	af 90       	pop	r10
    591e:	9f 90       	pop	r9
    5920:	7f 90       	pop	r7
    5922:	6f 90       	pop	r6
    5924:	5f 90       	pop	r5
    5926:	4f 90       	pop	r4
    5928:	3f 90       	pop	r3
    592a:	2f 90       	pop	r2
    592c:	08 95       	ret

0000592e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4816
}


/// funkce pro zobrazeni casu
void display_element_show_time_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    592e:	8f 92       	push	r8
    5930:	9f 92       	push	r9
    5932:	af 92       	push	r10
    5934:	bf 92       	push	r11
    5936:	cf 92       	push	r12
    5938:	df 92       	push	r13
    593a:	ef 92       	push	r14
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
    5946:	cd b7       	in	r28, 0x3d	; 61
    5948:	de b7       	in	r29, 0x3e	; 62
    594a:	68 97       	sbiw	r28, 0x18	; 24
    594c:	0f b6       	in	r0, 0x3f	; 63
    594e:	f8 94       	cli
    5950:	de bf       	out	0x3e, r29	; 62
    5952:	0f be       	out	0x3f, r0	; 63
    5954:	cd bf       	out	0x3d, r28	; 61
    5956:	5c 01       	movw	r10, r24
    5958:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4819
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
    595a:	6a e1       	ldi	r22, 0x1A	; 26
    595c:	74 e3       	ldi	r23, 0x34	; 52
    595e:	ce 01       	movw	r24, r28
    5960:	01 96       	adiw	r24, 0x01	; 1
    5962:	6c 01       	movw	r12, r24
    5964:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4821
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
    5968:	a4 01       	movw	r20, r8
    596a:	4b 5f       	subi	r20, 0xFB	; 251
    596c:	5f 4f       	sbci	r21, 0xFF	; 255
    596e:	b5 01       	movw	r22, r10
    5970:	61 5b       	subi	r22, 0xB1	; 177
    5972:	7f 4f       	sbci	r23, 0xFF	; 255
    5974:	ee 24       	eor	r14, r14
    5976:	ea 94       	dec	r14
    5978:	fe 2c       	mov	r15, r14
    597a:	10 e0       	ldi	r17, 0x00	; 0
    597c:	00 e0       	ldi	r16, 0x00	; 0
    597e:	21 e0       	ldi	r18, 0x01	; 1
    5980:	c6 01       	movw	r24, r12
    5982:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    5986:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4822
  char str1[24];
  uint16_t pos = 0;
  strcpy_P(str1, current_time);
  pos = (244 - show_string_size_width(16, 1)) / 2;
  show_string(str1, x + pos + 5, y + 5, 1, BLACK, WHITE, 0);
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    598a:	80 fd       	sbrc	r24, 0
    598c:	50 c0       	rjmp	.+160    	; 0x5a2e <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x100>
    598e:	90 91 4a 10 	lds	r25, 0x104A	; 0x80104a <now+0x4>
    5992:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <now+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4824
  {
    if (uptime % 2 )
    5996:	20 91 d2 0a 	lds	r18, 0x0AD2	; 0x800ad2 <uptime>
    599a:	20 ff       	sbrs	r18, 0
    599c:	41 c0       	rjmp	.+130    	; 0x5a20 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xf2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4825
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    599e:	1f 92       	push	r1
    59a0:	9f 93       	push	r25
    59a2:	1f 92       	push	r1
    59a4:	8f 93       	push	r24
    59a6:	8e e1       	ldi	r24, 0x1E	; 30
    59a8:	93 e0       	ldi	r25, 0x03	; 3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    59aa:	9f 93       	push	r25
    59ac:	8f 93       	push	r24
    59ae:	df 92       	push	r13
    59b0:	cf 92       	push	r12
    59b2:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	0f be       	out	0x3f, r0	; 63
    59be:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    59c0:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    59c4:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z27display_element_show_time_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4834
  else
  {
    strcpy(str1, "--:--");
  }
  my_lcd.Set_Draw_color(BLACK);
  show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    59c8:	a4 01       	movw	r20, r8
    59ca:	4c 5e       	subi	r20, 0xEC	; 236
    59cc:	5f 4f       	sbci	r21, 0xFF	; 255
    59ce:	b5 01       	movw	r22, r10
    59d0:	6c 5f       	subi	r22, 0xFC	; 252
    59d2:	7f 4f       	sbci	r23, 0xFF	; 255
    59d4:	ee 24       	eor	r14, r14
    59d6:	ea 94       	dec	r14
    59d8:	fe 2c       	mov	r15, r14
    59da:	10 e0       	ldi	r17, 0x00	; 0
    59dc:	00 e0       	ldi	r16, 0x00	; 0
    59de:	28 e0       	ldi	r18, 0x08	; 8
    59e0:	c6 01       	movw	r24, r12
    59e2:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4835
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    59e6:	94 01       	movw	r18, r8
    59e8:	2c 5a       	subi	r18, 0xAC	; 172
    59ea:	3f 4f       	sbci	r19, 0xFF	; 255
    59ec:	a5 01       	movw	r20, r10
    59ee:	4c 50       	subi	r20, 0x0C	; 12
    59f0:	5f 4f       	sbci	r21, 0xFF	; 255
    59f2:	b4 01       	movw	r22, r8
    59f4:	c5 01       	movw	r24, r10
    59f6:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4836
}
    59fa:	68 96       	adiw	r28, 0x18	; 24
    59fc:	0f b6       	in	r0, 0x3f	; 63
    59fe:	f8 94       	cli
    5a00:	de bf       	out	0x3e, r29	; 62
    5a02:	0f be       	out	0x3f, r0	; 63
    5a04:	cd bf       	out	0x3d, r28	; 61
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	1f 91       	pop	r17
    5a0c:	0f 91       	pop	r16
    5a0e:	ff 90       	pop	r15
    5a10:	ef 90       	pop	r14
    5a12:	df 90       	pop	r13
    5a14:	cf 90       	pop	r12
    5a16:	bf 90       	pop	r11
    5a18:	af 90       	pop	r10
    5a1a:	9f 90       	pop	r9
    5a1c:	8f 90       	pop	r8
    5a1e:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4827
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
  {
    if (uptime % 2 )
      sprintf(str1, "%02d:%02d", now.hour(), now.minute());
    else
      sprintf(str1, "%02d %02d", now.hour(), now.minute());
    5a20:	1f 92       	push	r1
    5a22:	9f 93       	push	r25
    5a24:	1f 92       	push	r1
    5a26:	8f 93       	push	r24
    5a28:	88 e2       	ldi	r24, 0x28	; 40
    5a2a:	93 e0       	ldi	r25, 0x03	; 3
    5a2c:	be cf       	rjmp	.-132    	; 0x59aa <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4831
  }
  else
  {
    strcpy(str1, "--:--");
    5a2e:	62 e3       	ldi	r22, 0x32	; 50
    5a30:	73 e0       	ldi	r23, 0x03	; 3
    5a32:	c6 01       	movw	r24, r12
    5a34:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
    5a38:	c3 cf       	rjmp	.-122    	; 0x59c0 <display_element_show_time_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>

00005a3a <display_element_rectangle(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z25display_element_rectanglejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4786
}


void display_element_rectangle(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
    5a3a:	26 0f       	add	r18, r22
    5a3c:	37 1f       	adc	r19, r23
    5a3e:	48 0f       	add	r20, r24
    5a40:	59 1f       	adc	r21, r25
    5a42:	0c 94 c6 83 	jmp	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>

00005a46 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>:
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5115
  }
}
///////////////////////
/// typ tlacitka 2 ////
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{
    5a46:	2f 92       	push	r2
    5a48:	3f 92       	push	r3
    5a4a:	4f 92       	push	r4
    5a4c:	5f 92       	push	r5
    5a4e:	6f 92       	push	r6
    5a50:	7f 92       	push	r7
    5a52:	8f 92       	push	r8
    5a54:	9f 92       	push	r9
    5a56:	af 92       	push	r10
    5a58:	bf 92       	push	r11
    5a5a:	cf 92       	push	r12
    5a5c:	df 92       	push	r13
    5a5e:	ef 92       	push	r14
    5a60:	ff 92       	push	r15
    5a62:	0f 93       	push	r16
    5a64:	1f 93       	push	r17
    5a66:	cf 93       	push	r28
    5a68:	df 93       	push	r29
    5a6a:	00 d0       	rcall	.+0      	; 0x5a6c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x26>
    5a6c:	1f 92       	push	r1
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	2c 01       	movw	r4, r24
    5a74:	3b 01       	movw	r6, r22
    5a76:	0a 83       	std	Y+2, r16	; 0x02
    5a78:	eb 82       	std	Y+3, r14	; 0x03
    5a7a:	3a 2c       	mov	r3, r10
    5a7c:	2b 2c       	mov	r2, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5128
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    5a7e:	31 e0       	ldi	r19, 0x01	; 1
    5a80:	83 12       	cpse	r8, r19
    5a82:	02 c0       	rjmp	.+4      	; 0x5a88 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5129
    back_color = color_active;
    5a84:	3c 2c       	mov	r3, r12
    5a86:	2d 2c       	mov	r2, r13
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5a88:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    5a8c:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    5a90:	10 e0       	ldi	r17, 0x00	; 0
    5a92:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5132
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5a94:	a2 2e       	mov	r10, r18
    5a96:	b1 2c       	mov	r11, r1
    5a98:	84 2e       	mov	r8, r20
    5a9a:	91 2c       	mov	r9, r1
    5a9c:	65 01       	movw	r12, r10
    5a9e:	c6 0c       	add	r12, r6
    5aa0:	d7 1c       	adc	r13, r7
    5aa2:	74 01       	movw	r14, r8
    5aa4:	e4 0c       	add	r14, r4
    5aa6:	f5 1c       	adc	r15, r5
    5aa8:	96 01       	movw	r18, r12
    5aaa:	20 1b       	sub	r18, r16
    5aac:	31 0b       	sbc	r19, r17
    5aae:	a7 01       	movw	r20, r14
    5ab0:	40 1b       	sub	r20, r16
    5ab2:	51 0b       	sbc	r21, r17
    5ab4:	b3 01       	movw	r22, r6
    5ab6:	60 0f       	add	r22, r16
    5ab8:	71 1f       	adc	r23, r17
    5aba:	c2 01       	movw	r24, r4
    5abc:	80 0f       	add	r24, r16
    5abe:	91 1f       	adc	r25, r17
    5ac0:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5ac4:	0f 5f       	subi	r16, 0xFF	; 255
    5ac6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5131
  uint8_t druhy = 0;
  back_color = color_inactive;
  if (state == 1)
    back_color = color_active;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5ac8:	03 30       	cpi	r16, 0x03	; 3
    5aca:	11 05       	cpc	r17, r1
    5acc:	69 f7       	brne	.-38     	; 0x5aa8 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x62>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ace:	30 92 c0 0d 	sts	0x0DC0, r3	; 0x800dc0 <my_lcd+0xa>
    5ad2:	20 92 c1 0d 	sts	0x0DC1, r2	; 0x800dc1 <my_lcd+0xb>
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5134
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(back_color);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5ad6:	93 01       	movw	r18, r6
    5ad8:	23 50       	subi	r18, 0x03	; 3
    5ada:	31 09       	sbc	r19, r1
    5adc:	2a 0d       	add	r18, r10
    5ade:	3b 1d       	adc	r19, r11
    5ae0:	a2 01       	movw	r20, r4
    5ae2:	43 50       	subi	r20, 0x03	; 3
    5ae4:	51 09       	sbc	r21, r1
    5ae6:	48 0d       	add	r20, r8
    5ae8:	59 1d       	adc	r21, r9
    5aea:	b3 01       	movw	r22, r6
    5aec:	6d 5f       	subi	r22, 0xFD	; 253
    5aee:	7f 4f       	sbci	r23, 0xFF	; 255
    5af0:	c2 01       	movw	r24, r4
    5af2:	03 96       	adiw	r24, 0x03	; 3
    5af4:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5135
  if (strlen(line1) > 0)
    5af8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5afa:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5afc:	80 81       	ld	r24, Z
    5afe:	88 23       	and	r24, r24
    5b00:	09 f4       	brne	.+2      	; 0x5b04 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xbe>
    5b02:	a1 c0       	rjmp	.+322    	; 0x5c46 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5137
  {
    prvni = 1;
    5b04:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5138
    num_lines_const = 2;
    5b06:	f2 e0       	ldi	r31, 0x02	; 2
    5b08:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5140
  }
  if (strlen(line2) > 0)
    5b0a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5b0c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5b0e:	90 81       	ld	r25, Z
    5b10:	99 23       	and	r25, r25
    5b12:	09 f4       	brne	.+2      	; 0x5b16 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xd0>
    5b14:	9b c0       	rjmp	.+310    	; 0x5c4c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x206>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5143
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
    5b16:	f9 81       	ldd	r31, Y+1	; 0x01
    5b18:	fe 5f       	subi	r31, 0xFE	; 254
    5b1a:	f9 83       	std	Y+1, r31	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5142
    prvni = 1;
    num_lines_const = 2;
  }
  if (strlen(line2) > 0)
  {
    druhy = 1;
    5b1c:	21 e0       	ldi	r18, 0x01	; 1
    5b1e:	2c 83       	std	Y+4, r18	; 0x04
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5119
void button_click_2(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size_1, uint8_t font_size_2, uint16_t color_active , uint16_t color_inactive, uint8_t state, char *line1, char *line2)
{

  uint16_t back_color;
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5b20:	d1 2c       	mov	r13, r1
    5b22:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5145
  if (strlen(line2) > 0)
  {
    druhy = 1;
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
    5b24:	81 30       	cpi	r24, 0x01	; 1
    5b26:	d1 f5       	brne	.+116    	; 0x5b9c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x156>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5147
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5b28:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5b2a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    5b2c:	01 90       	ld	r0, Z+
    5b2e:	00 20       	and	r0, r0
    5b30:	e9 f7       	brne	.-6      	; 0x5b2c <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xe6>
    5b32:	9f 01       	movw	r18, r30
    5b34:	21 50       	subi	r18, 0x01	; 1
    5b36:	31 09       	sbc	r19, r1
    5b38:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5b3a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5b3c:	24 1b       	sub	r18, r20
    5b3e:	35 0b       	sbc	r19, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5b40:	8a 81       	ldd	r24, Y+2	; 0x02
    5b42:	88 0f       	add	r24, r24
    5b44:	5a 81       	ldd	r21, Y+2	; 0x02
    5b46:	85 0f       	add	r24, r21
    5b48:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5149
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5b4a:	f5 01       	movw	r30, r10
    5b4c:	e8 1b       	sub	r30, r24
    5b4e:	f1 09       	sbc	r31, r1
    5b50:	cf 01       	movw	r24, r30
    5b52:	f9 81       	ldd	r31, Y+1	; 0x01
    5b54:	6f 2f       	mov	r22, r31
    5b56:	70 e0       	ldi	r23, 0x00	; 0
    5b58:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
    5b5c:	6b 01       	movw	r12, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    5b5e:	a3 01       	movw	r20, r6
    5b60:	41 50       	subi	r20, 0x01	; 1
    5b62:	51 09       	sbc	r21, r1
    5b64:	46 0f       	add	r20, r22
    5b66:	57 1f       	adc	r21, r23
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5b68:	66 e0       	ldi	r22, 0x06	; 6
    5b6a:	26 9f       	mul	r18, r22
    5b6c:	90 01       	movw	r18, r0
    5b6e:	11 24       	eor	r1, r1
    5b70:	ea 81       	ldd	r30, Y+2	; 0x02
    5b72:	e2 9f       	mul	r30, r18
    5b74:	c0 01       	movw	r24, r0
    5b76:	e3 9f       	mul	r30, r19
    5b78:	90 0d       	add	r25, r0
    5b7a:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5148
    num_lines_const = num_lines_const + 2;
  }
  if (prvni == 1)
  {
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5b7c:	b4 01       	movw	r22, r8
    5b7e:	68 1b       	sub	r22, r24
    5b80:	79 0b       	sbc	r23, r25
    5b82:	76 95       	lsr	r23
    5b84:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5150
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
    5b86:	64 0d       	add	r22, r4
    5b88:	75 1d       	adc	r23, r5
    5b8a:	e3 2c       	mov	r14, r3
    5b8c:	f2 2c       	mov	r15, r2
    5b8e:	10 e0       	ldi	r17, 0x00	; 0
    5b90:	00 e0       	ldi	r16, 0x00	; 0
    5b92:	2e 2f       	mov	r18, r30
    5b94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5b96:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b98:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5152
  }
  if (druhy == 1)
    5b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    5b9e:	f1 30       	cpi	r31, 0x01	; 1
    5ba0:	d9 f5       	brne	.+118    	; 0x5c18 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x1d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5154
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5ba2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5ba4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5ba6:	01 90       	ld	r0, Z+
    5ba8:	00 20       	and	r0, r0
    5baa:	e9 f7       	brne	.-6      	; 0x5ba6 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0x160>
    5bac:	31 97       	sbiw	r30, 0x01	; 1
    5bae:	2c 8d       	ldd	r18, Y+28	; 0x1c
    5bb0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    5bb2:	e2 1b       	sub	r30, r18
    5bb4:	f3 0b       	sbc	r31, r19
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb8:	88 0f       	add	r24, r24
    5bba:	3b 81       	ldd	r19, Y+3	; 0x03
    5bbc:	83 0f       	add	r24, r19
    5bbe:	88 0f       	add	r24, r24
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5156
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    5bc0:	a5 01       	movw	r20, r10
    5bc2:	48 1b       	sub	r20, r24
    5bc4:	51 09       	sbc	r21, r1
    5bc6:	ca 01       	movw	r24, r20
    5bc8:	88 0f       	add	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	59 81       	ldd	r21, Y+1	; 0x01
    5bce:	65 2f       	mov	r22, r21
    5bd0:	70 e0       	ldi	r23, 0x00	; 0
    5bd2:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5157
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	68 1a       	sub	r6, r24
    5bda:	71 08       	sbc	r7, r1
    5bdc:	66 0e       	add	r6, r22
    5bde:	77 1e       	adc	r7, r23
    5be0:	a3 01       	movw	r20, r6
    5be2:	4c 0d       	add	r20, r12
    5be4:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5be6:	96 e0       	ldi	r25, 0x06	; 6
    5be8:	e9 9f       	mul	r30, r25
    5bea:	f0 01       	movw	r30, r0
    5bec:	11 24       	eor	r1, r1
    5bee:	3e 9f       	mul	r19, r30
    5bf0:	c0 01       	movw	r24, r0
    5bf2:	3f 9f       	mul	r19, r31
    5bf4:	90 0d       	add	r25, r0
    5bf6:	11 24       	eor	r1, r1
_Z14button_click_2jjhhhhjjhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5155
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, back_color, 0);
  }
  if (druhy == 1)
  {
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5bf8:	b4 01       	movw	r22, r8
    5bfa:	68 1b       	sub	r22, r24
    5bfc:	79 0b       	sbc	r23, r25
    5bfe:	76 95       	lsr	r23
    5c00:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5157
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) * 2 / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, back_color, 0);
    5c02:	64 0d       	add	r22, r4
    5c04:	75 1d       	adc	r23, r5
    5c06:	e3 2c       	mov	r14, r3
    5c08:	f2 2c       	mov	r15, r2
    5c0a:	10 e0       	ldi	r17, 0x00	; 0
    5c0c:	00 e0       	ldi	r16, 0x00	; 0
    5c0e:	23 2f       	mov	r18, r19
    5c10:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5c12:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5c14:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5159
  }
}
    5c18:	0f 90       	pop	r0
    5c1a:	0f 90       	pop	r0
    5c1c:	0f 90       	pop	r0
    5c1e:	0f 90       	pop	r0
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	1f 91       	pop	r17
    5c26:	0f 91       	pop	r16
    5c28:	ff 90       	pop	r15
    5c2a:	ef 90       	pop	r14
    5c2c:	df 90       	pop	r13
    5c2e:	cf 90       	pop	r12
    5c30:	bf 90       	pop	r11
    5c32:	af 90       	pop	r10
    5c34:	9f 90       	pop	r9
    5c36:	8f 90       	pop	r8
    5c38:	7f 90       	pop	r7
    5c3a:	6f 90       	pop	r6
    5c3c:	5f 90       	pop	r5
    5c3e:	4f 90       	pop	r4
    5c40:	3f 90       	pop	r3
    5c42:	2f 90       	pop	r2
    5c44:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5125
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  uint8_t prvni = 0;
    5c46:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5124
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5c48:	19 82       	std	Y+1, r1	; 0x01
    5c4a:	5f cf       	rjmp	.-322    	; 0x5b0a <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xc4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5126
  uint8_t prvni = 0;
  uint8_t druhy = 0;
    5c4c:	1c 82       	std	Y+4, r1	; 0x04
    5c4e:	68 cf       	rjmp	.-304    	; 0x5b20 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)+0xda>

00005c50 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>:
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5079
//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
    5c50:	2f 92       	push	r2
    5c52:	3f 92       	push	r3
    5c54:	4f 92       	push	r4
    5c56:	5f 92       	push	r5
    5c58:	6f 92       	push	r6
    5c5a:	7f 92       	push	r7
    5c5c:	8f 92       	push	r8
    5c5e:	9f 92       	push	r9
    5c60:	af 92       	push	r10
    5c62:	bf 92       	push	r11
    5c64:	cf 92       	push	r12
    5c66:	df 92       	push	r13
    5c68:	ef 92       	push	r14
    5c6a:	ff 92       	push	r15
    5c6c:	0f 93       	push	r16
    5c6e:	1f 93       	push	r17
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	00 d0       	rcall	.+0      	; 0x5c76 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x26>
    5c76:	1f 92       	push	r1
    5c78:	1f 92       	push	r1
    5c7a:	cd b7       	in	r28, 0x3d	; 61
    5c7c:	de b7       	in	r29, 0x3e	; 62
    5c7e:	2c 01       	movw	r4, r24
    5c80:	3b 01       	movw	r6, r22
    5c82:	5a 83       	std	Y+2, r21	; 0x02
    5c84:	49 83       	std	Y+1, r20	; 0x01
    5c86:	19 01       	movw	r2, r18
    5c88:	90 2e       	mov	r9, r16
    5c8a:	eb 82       	std	Y+3, r14	; 0x03
    5c8c:	dd 82       	std	Y+5, r13	; 0x05
    5c8e:	cc 82       	std	Y+4, r12	; 0x04
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5c90:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    5c94:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    5c98:	10 e0       	ldi	r17, 0x00	; 0
    5c9a:	00 e0       	ldi	r16, 0x00	; 0
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5089
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5c9c:	6b 01       	movw	r12, r22
    5c9e:	c2 0e       	add	r12, r18
    5ca0:	d3 1e       	adc	r13, r19
    5ca2:	7a 01       	movw	r14, r20
    5ca4:	e8 0e       	add	r14, r24
    5ca6:	f9 1e       	adc	r15, r25
    5ca8:	96 01       	movw	r18, r12
    5caa:	20 1b       	sub	r18, r16
    5cac:	31 0b       	sbc	r19, r17
    5cae:	a7 01       	movw	r20, r14
    5cb0:	40 1b       	sub	r20, r16
    5cb2:	51 0b       	sbc	r21, r17
    5cb4:	b8 01       	movw	r22, r16
    5cb6:	66 0d       	add	r22, r6
    5cb8:	77 1d       	adc	r23, r7
    5cba:	c8 01       	movw	r24, r16
    5cbc:	84 0d       	add	r24, r4
    5cbe:	95 1d       	adc	r25, r5
    5cc0:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5cc4:	0f 5f       	subi	r16, 0xFF	; 255
    5cc6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5088
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5cc8:	03 30       	cpi	r16, 0x03	; 3
    5cca:	11 05       	cpc	r17, r1
    5ccc:	69 f7       	brne	.-38     	; 0x5ca8 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x58>
    5cce:	91 01       	movw	r18, r2
    5cd0:	23 50       	subi	r18, 0x03	; 3
    5cd2:	31 09       	sbc	r19, r1
    5cd4:	49 81       	ldd	r20, Y+1	; 0x01
    5cd6:	5a 81       	ldd	r21, Y+2	; 0x02
    5cd8:	43 50       	subi	r20, 0x03	; 3
    5cda:	51 09       	sbc	r21, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5090
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  if (clean == 1)
    5cdc:	61 e0       	ldi	r22, 0x01	; 1
    5cde:	86 12       	cpse	r8, r22
    5ce0:	11 c0       	rjmp	.+34     	; 0x5d04 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xb4>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5ce2:	8f ef       	ldi	r24, 0xFF	; 255
    5ce4:	9f ef       	ldi	r25, 0xFF	; 255
    5ce6:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    5cea:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5093
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5cee:	26 0d       	add	r18, r6
    5cf0:	37 1d       	adc	r19, r7
    5cf2:	44 0d       	add	r20, r4
    5cf4:	55 1d       	adc	r21, r5
    5cf6:	b3 01       	movw	r22, r6
    5cf8:	6d 5f       	subi	r22, 0xFD	; 253
    5cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    5cfc:	c2 01       	movw	r24, r4
    5cfe:	03 96       	adiw	r24, 0x03	; 3
    5d00:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5095
  }
  if (strlen(line1) > 0)
    5d04:	ec 81       	ldd	r30, Y+4	; 0x04
    5d06:	fd 81       	ldd	r31, Y+5	; 0x05
    5d08:	80 81       	ld	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5086
  uint16_t posy1 = 0;;
  uint16_t posx2 = 0;
  uint16_t posy2 = 0;
  uint16_t tmp1 = 0;
  uint16_t tmp2 = 0;
  uint8_t num_lines_const = 0;
    5d0a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5081
//////////////////////////////////////////////////////////
/// typ tlacitka 1 ////
void button_click_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t font_size_1, uint8_t font_size_2, char *line1, char *line2, uint8_t clean)
{
  uint16_t posx1 = 0;
  uint16_t posy1 = 0;;
    5d0c:	d1 2c       	mov	r13, r1
    5d0e:	c1 2c       	mov	r12, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5095
  if (clean == 1)
  {
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
    5d10:	88 23       	and	r24, r24
    5d12:	91 f1       	breq	.+100    	; 0x5d78 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x128>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5098
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    5d14:	01 90       	ld	r0, Z+
    5d16:	00 20       	and	r0, r0
    5d18:	e9 f7       	brne	.-6      	; 0x5d14 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0xc4>
    5d1a:	31 97       	sbiw	r30, 0x01	; 1
    5d1c:	4c 81       	ldd	r20, Y+4	; 0x04
    5d1e:	5d 81       	ldd	r21, Y+5	; 0x05
    5d20:	e4 1b       	sub	r30, r20
    5d22:	f5 0b       	sbc	r31, r21
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5d24:	89 2d       	mov	r24, r9
    5d26:	88 0f       	add	r24, r24
    5d28:	89 0d       	add	r24, r9
    5d2a:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5100
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    5d2c:	61 01       	movw	r12, r2
    5d2e:	c8 1a       	sub	r12, r24
    5d30:	d1 08       	sbc	r13, r1
    5d32:	d6 94       	lsr	r13
    5d34:	c7 94       	ror	r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5101
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5d36:	a3 01       	movw	r20, r6
    5d38:	41 50       	subi	r20, 0x01	; 1
    5d3a:	51 09       	sbc	r21, r1
    5d3c:	4c 0d       	add	r20, r12
    5d3e:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5d40:	66 e0       	ldi	r22, 0x06	; 6
    5d42:	e6 9f       	mul	r30, r22
    5d44:	f0 01       	movw	r30, r0
    5d46:	11 24       	eor	r1, r1
    5d48:	9e 9e       	mul	r9, r30
    5d4a:	c0 01       	movw	r24, r0
    5d4c:	9f 9e       	mul	r9, r31
    5d4e:	90 0d       	add	r25, r0
    5d50:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5099
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    5d52:	69 81       	ldd	r22, Y+1	; 0x01
    5d54:	7a 81       	ldd	r23, Y+2	; 0x02
    5d56:	68 1b       	sub	r22, r24
    5d58:	79 0b       	sbc	r23, r25
    5d5a:	76 95       	lsr	r23
    5d5c:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5101
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
    5d5e:	64 0d       	add	r22, r4
    5d60:	75 1d       	adc	r23, r5
    5d62:	ee 24       	eor	r14, r14
    5d64:	ea 94       	dec	r14
    5d66:	fe 2c       	mov	r15, r14
    5d68:	10 e0       	ldi	r17, 0x00	; 0
    5d6a:	00 e0       	ldi	r16, 0x00	; 0
    5d6c:	29 2d       	mov	r18, r9
    5d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    5d70:	9d 81       	ldd	r25, Y+5	; 0x05
    5d72:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5097
    my_lcd.Set_Draw_color(WHITE);
    my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  }
  if (strlen(line1) > 0)
  {
    num_lines_const = 2;
    5d76:	62 e0       	ldi	r22, 0x02	; 2
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5103
    tmp1 = show_string_size_width(strlen(line1), font_size_1);
    posx1 = (size_x - tmp1) / 2;
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
    5d78:	f5 01       	movw	r30, r10
    5d7a:	80 81       	ld	r24, Z
    5d7c:	88 23       	and	r24, r24
    5d7e:	b9 f1       	breq	.+110    	; 0x5dee <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x19e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5106
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    5d80:	01 90       	ld	r0, Z+
    5d82:	00 20       	and	r0, r0
    5d84:	e9 f7       	brne	.-6      	; 0x5d80 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)+0x130>
    5d86:	9f 01       	movw	r18, r30
    5d88:	21 50       	subi	r18, 0x01	; 1
    5d8a:	31 09       	sbc	r19, r1
    5d8c:	2a 19       	sub	r18, r10
    5d8e:	3b 09       	sbc	r19, r11
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    5d90:	8b 81       	ldd	r24, Y+3	; 0x03
    5d92:	88 0f       	add	r24, r24
    5d94:	fb 81       	ldd	r31, Y+3	; 0x03
    5d96:	8f 0f       	add	r24, r31
    5d98:	88 0f       	add	r24, r24
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5108
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5d9a:	a1 01       	movw	r20, r2
    5d9c:	48 1b       	sub	r20, r24
    5d9e:	51 09       	sbc	r21, r1
    5da0:	ca 01       	movw	r24, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5105
    posy1 = (size_y - show_string_size_hight(font_size_1)) / num_lines_const;
    show_string(line1, x + posx1 , y + posy1 - 1 , font_size_1, BLACK, WHITE, 0);
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    5da2:	6e 5f       	subi	r22, 0xFE	; 254
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5108
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    5da4:	70 e0       	ldi	r23, 0x00	; 0
    5da6:	0e 94 57 b4 	call	0x168ae	; 0x168ae <__udivmodhi4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5109
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5daa:	51 e0       	ldi	r21, 0x01	; 1
    5dac:	65 1a       	sub	r6, r21
    5dae:	71 08       	sbc	r7, r1
    5db0:	c6 0c       	add	r12, r6
    5db2:	d7 1c       	adc	r13, r7
    5db4:	ab 01       	movw	r20, r22
    5db6:	4c 0d       	add	r20, r12
    5db8:	5d 1d       	adc	r21, r13
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5dba:	66 e0       	ldi	r22, 0x06	; 6
    5dbc:	26 9f       	mul	r18, r22
    5dbe:	90 01       	movw	r18, r0
    5dc0:	11 24       	eor	r1, r1
    5dc2:	f2 9f       	mul	r31, r18
    5dc4:	c0 01       	movw	r24, r0
    5dc6:	f3 9f       	mul	r31, r19
    5dc8:	90 0d       	add	r25, r0
    5dca:	11 24       	eor	r1, r1
_Z14button_click_1jjjjhhPcS_h():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5107
  }
  if (strlen(line2) > 0)
  {
    num_lines_const = num_lines_const + 2;
    tmp2 = show_string_size_width(strlen(line2), font_size_2);
    posx2 = (size_x - tmp2) / 2;
    5dcc:	69 81       	ldd	r22, Y+1	; 0x01
    5dce:	7a 81       	ldd	r23, Y+2	; 0x02
    5dd0:	68 1b       	sub	r22, r24
    5dd2:	79 0b       	sbc	r23, r25
    5dd4:	76 95       	lsr	r23
    5dd6:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5109
    posy2 = posy1 + ((size_y - show_string_size_hight(font_size_2)) / num_lines_const);
    show_string(line2, x + posx2 , y + posy2 - 1 , font_size_2, BLACK, WHITE, 0);
    5dd8:	64 0d       	add	r22, r4
    5dda:	75 1d       	adc	r23, r5
    5ddc:	ee 24       	eor	r14, r14
    5dde:	ea 94       	dec	r14
    5de0:	fe 2c       	mov	r15, r14
    5de2:	10 e0       	ldi	r17, 0x00	; 0
    5de4:	00 e0       	ldi	r16, 0x00	; 0
    5de6:	2f 2f       	mov	r18, r31
    5de8:	c5 01       	movw	r24, r10
    5dea:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5111
  }
}
    5dee:	0f 90       	pop	r0
    5df0:	0f 90       	pop	r0
    5df2:	0f 90       	pop	r0
    5df4:	0f 90       	pop	r0
    5df6:	0f 90       	pop	r0
    5df8:	df 91       	pop	r29
    5dfa:	cf 91       	pop	r28
    5dfc:	1f 91       	pop	r17
    5dfe:	0f 91       	pop	r16
    5e00:	ff 90       	pop	r15
    5e02:	ef 90       	pop	r14
    5e04:	df 90       	pop	r13
    5e06:	cf 90       	pop	r12
    5e08:	bf 90       	pop	r11
    5e0a:	af 90       	pop	r10
    5e0c:	9f 90       	pop	r9
    5e0e:	8f 90       	pop	r8
    5e10:	7f 90       	pop	r7
    5e12:	6f 90       	pop	r6
    5e14:	5f 90       	pop	r5
    5e16:	4f 90       	pop	r4
    5e18:	3f 90       	pop	r3
    5e1a:	2f 90       	pop	r2
    5e1c:	08 95       	ret

00005e1e <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5030
///
/*
   dynamicke posouvani v menu
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5e1e:	4f 92       	push	r4
    5e20:	5f 92       	push	r5
    5e22:	6f 92       	push	r6
    5e24:	7f 92       	push	r7
    5e26:	8f 92       	push	r8
    5e28:	9f 92       	push	r9
    5e2a:	af 92       	push	r10
    5e2c:	bf 92       	push	r11
    5e2e:	cf 92       	push	r12
    5e30:	df 92       	push	r13
    5e32:	ef 92       	push	r14
    5e34:	ff 92       	push	r15
    5e36:	0f 93       	push	r16
    5e38:	cf 93       	push	r28
    5e3a:	df 93       	push	r29
    5e3c:	ec 01       	movw	r28, r24
    5e3e:	6b 01       	movw	r12, r22
    5e40:	2a 01       	movw	r4, r20
    5e42:	59 01       	movw	r10, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5e44:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    5e48:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    5e4c:	f1 2c       	mov	r15, r1
    5e4e:	e1 2c       	mov	r14, r1
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5034
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5e50:	3b 01       	movw	r6, r22
    5e52:	62 0e       	add	r6, r18
    5e54:	73 1e       	adc	r7, r19
    5e56:	4c 01       	movw	r8, r24
    5e58:	84 0e       	add	r8, r20
    5e5a:	95 1e       	adc	r9, r21
    5e5c:	93 01       	movw	r18, r6
    5e5e:	2e 19       	sub	r18, r14
    5e60:	3f 09       	sbc	r19, r15
    5e62:	a4 01       	movw	r20, r8
    5e64:	4e 19       	sub	r20, r14
    5e66:	5f 09       	sbc	r21, r15
    5e68:	b7 01       	movw	r22, r14
    5e6a:	6c 0d       	add	r22, r12
    5e6c:	7d 1d       	adc	r23, r13
    5e6e:	c7 01       	movw	r24, r14
    5e70:	8c 0f       	add	r24, r28
    5e72:	9d 1f       	adc	r25, r29
    5e74:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5e78:	8f ef       	ldi	r24, 0xFF	; 255
    5e7a:	e8 1a       	sub	r14, r24
    5e7c:	f8 0a       	sbc	r15, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5033
*/
void display_element_vertical_slider(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint8_t sy;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5e7e:	83 e0       	ldi	r24, 0x03	; 3
    5e80:	e8 16       	cp	r14, r24
    5e82:	f1 04       	cpc	r15, r1
    5e84:	59 f7       	brne	.-42     	; 0x5e5c <display_element_vertical_slider(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3e>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5e86:	8f ef       	ldi	r24, 0xFF	; 255
    5e88:	9f ef       	ldi	r25, 0xFF	; 255
    5e8a:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    5e8e:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5036
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5e92:	83 e0       	ldi	r24, 0x03	; 3
    5e94:	48 1a       	sub	r4, r24
    5e96:	51 08       	sbc	r5, r1
    5e98:	4c 0e       	add	r4, r28
    5e9a:	5d 1e       	adc	r5, r29
    5e9c:	23 96       	adiw	r28, 0x03	; 3
    5e9e:	95 01       	movw	r18, r10
    5ea0:	23 50       	subi	r18, 0x03	; 3
    5ea2:	31 09       	sbc	r19, r1
    5ea4:	2c 0d       	add	r18, r12
    5ea6:	3d 1d       	adc	r19, r13
    5ea8:	b6 01       	movw	r22, r12
    5eaa:	6d 5f       	subi	r22, 0xFD	; 253
    5eac:	7f 4f       	sbci	r23, 0xFF	; 255
    5eae:	a2 01       	movw	r20, r4
    5eb0:	ce 01       	movw	r24, r28
    5eb2:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5037
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
    5eb6:	60 91 a9 08 	lds	r22, 0x08A9	; 0x8008a9 <menu_slider_data_max>
    5eba:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <menu_slider_data_max_element>
    5ebe:	68 1b       	sub	r22, r24
    5ec0:	77 0b       	sbc	r23, r23
    5ec2:	6f 5f       	subi	r22, 0xFF	; 255
    5ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec6:	c5 01       	movw	r24, r10
    5ec8:	0e 94 57 b4 	call	0x168ae	; 0x168ae <__udivmodhi4>
    5ecc:	e0 2f       	mov	r30, r16
    5ece:	f0 e0       	ldi	r31, 0x00	; 0
    5ed0:	ee 55       	subi	r30, 0x5E	; 94
    5ed2:	f7 4f       	sbci	r31, 0xF7	; 247
    5ed4:	80 81       	ld	r24, Z
    5ed6:	86 9f       	mul	r24, r22
    5ed8:	60 2d       	mov	r22, r0
    5eda:	11 24       	eor	r1, r1
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5edc:	8a e9       	ldi	r24, 0x9A	; 154
    5ede:	96 ed       	ldi	r25, 0xD6	; 214
    5ee0:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    5ee4:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z31display_element_vertical_sliderjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5039
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5ee8:	6c 0d       	add	r22, r12
    5eea:	7d 2d       	mov	r23, r13
    5eec:	71 1d       	adc	r23, r1
    5eee:	9b 01       	movw	r18, r22
    5ef0:	26 5f       	subi	r18, 0xF6	; 246
    5ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef4:	6b 5f       	subi	r22, 0xFB	; 251
    5ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ef8:	a2 01       	movw	r20, r4
    5efa:	ce 01       	movw	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5040
}
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	0f 91       	pop	r16
    5f02:	ff 90       	pop	r15
    5f04:	ef 90       	pop	r14
    5f06:	df 90       	pop	r13
    5f08:	cf 90       	pop	r12
    5f0a:	bf 90       	pop	r11
    5f0c:	af 90       	pop	r10
    5f0e:	9f 90       	pop	r9
    5f10:	8f 90       	pop	r8
    5f12:	7f 90       	pop	r7
    5f14:	6f 90       	pop	r6
    5f16:	5f 90       	pop	r5
    5f18:	4f 90       	pop	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5039
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
  sy = (size_y / (menu_slider_data_max - menu_slider_data_max_element + 1)) * menu_slider_data_current[args1];
  my_lcd.Set_Draw_color(GRAY);
  my_lcd.Fill_Rectangle(x + 3, y + sy + 5, x + size_x - 3, y + sy + 10);
    5f1a:	0c 94 1f 84 	jmp	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>

00005f1e <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5009
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
}
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    5f1e:	6f 92       	push	r6
    5f20:	7f 92       	push	r7
    5f22:	8f 92       	push	r8
    5f24:	9f 92       	push	r9
    5f26:	af 92       	push	r10
    5f28:	bf 92       	push	r11
    5f2a:	cf 92       	push	r12
    5f2c:	df 92       	push	r13
    5f2e:	ef 92       	push	r14
    5f30:	ff 92       	push	r15
    5f32:	0f 93       	push	r16
    5f34:	1f 93       	push	r17
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
    5f3a:	6c 01       	movw	r12, r24
    5f3c:	8b 01       	movw	r16, r22
    5f3e:	3a 01       	movw	r6, r20
    5f40:	e9 01       	movw	r28, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f42:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    5f46:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    5f4a:	f1 2c       	mov	r15, r1
    5f4c:	e1 2c       	mov	r14, r1
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5013
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    5f4e:	4b 01       	movw	r8, r22
    5f50:	82 0e       	add	r8, r18
    5f52:	93 1e       	adc	r9, r19
    5f54:	5c 01       	movw	r10, r24
    5f56:	a4 0e       	add	r10, r20
    5f58:	b5 1e       	adc	r11, r21
    5f5a:	94 01       	movw	r18, r8
    5f5c:	2e 19       	sub	r18, r14
    5f5e:	3f 09       	sbc	r19, r15
    5f60:	a5 01       	movw	r20, r10
    5f62:	4e 19       	sub	r20, r14
    5f64:	5f 09       	sbc	r21, r15
    5f66:	b7 01       	movw	r22, r14
    5f68:	60 0f       	add	r22, r16
    5f6a:	71 1f       	adc	r23, r17
    5f6c:	c7 01       	movw	r24, r14
    5f6e:	8c 0d       	add	r24, r12
    5f70:	9d 1d       	adc	r25, r13
    5f72:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    5f76:	2f ef       	ldi	r18, 0xFF	; 255
    5f78:	e2 1a       	sub	r14, r18
    5f7a:	f2 0a       	sbc	r15, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5012
//////////////
void display_element_dialog_set_string(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  uint16_t tmp1, posx1, posy1;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    5f7c:	83 e0       	ldi	r24, 0x03	; 3
    5f7e:	e8 16       	cp	r14, r24
    5f80:	f1 04       	cpc	r15, r1
    5f82:	59 f7       	brne	.-42     	; 0x5f5a <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5f84:	8f ef       	ldi	r24, 0xFF	; 255
    5f86:	9f ef       	ldi	r25, 0xFF	; 255
    5f88:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    5f8c:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5015
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    5f90:	9e 01       	movw	r18, r28
    5f92:	23 50       	subi	r18, 0x03	; 3
    5f94:	31 09       	sbc	r19, r1
    5f96:	20 0f       	add	r18, r16
    5f98:	31 1f       	adc	r19, r17
    5f9a:	a3 01       	movw	r20, r6
    5f9c:	43 50       	subi	r20, 0x03	; 3
    5f9e:	51 09       	sbc	r21, r1
    5fa0:	4c 0d       	add	r20, r12
    5fa2:	5d 1d       	adc	r21, r13
    5fa4:	b8 01       	movw	r22, r16
    5fa6:	6d 5f       	subi	r22, 0xFD	; 253
    5fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5faa:	c6 01       	movw	r24, r12
    5fac:	03 96       	adiw	r24, 0x03	; 3
    5fae:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    5fb2:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    5fb6:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5018

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
    5fba:	8d ea       	ldi	r24, 0xAD	; 173
    5fbc:	98 e0       	ldi	r25, 0x08	; 8
    5fbe:	fc 01       	movw	r30, r24
    5fc0:	01 90       	ld	r0, Z+
    5fc2:	00 20       	and	r0, r0
    5fc4:	e9 f7       	brne	.-6      	; 0x5fc0 <display_element_dialog_set_string(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa2>
    5fc6:	cf 01       	movw	r24, r30
    5fc8:	8e 5a       	subi	r24, 0xAE	; 174
    5fca:	98 40       	sbci	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5020
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    5fcc:	ae 01       	movw	r20, r28
    5fce:	4c 50       	subi	r20, 0x0C	; 12
    5fd0:	51 09       	sbc	r21, r1
    5fd2:	56 95       	lsr	r21
    5fd4:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5fd6:	01 50       	subi	r16, 0x01	; 1
    5fd8:	11 09       	sbc	r17, r1
    5fda:	40 0f       	add	r20, r16
    5fdc:	51 1f       	adc	r21, r17
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    5fde:	f6 e0       	ldi	r31, 0x06	; 6
    5fe0:	8f 9f       	mul	r24, r31
    5fe2:	c0 01       	movw	r24, r0
    5fe4:	11 24       	eor	r1, r1
    5fe6:	88 0f       	add	r24, r24
    5fe8:	99 1f       	adc	r25, r25
_Z33display_element_dialog_set_stringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5019
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);

  my_lcd.Set_Draw_color(BLACK);
  tmp1 = show_string_size_width(strlen(dialog_set_string), 2);
  posx1 = (size_x - tmp1) / 2;
    5fea:	b3 01       	movw	r22, r6
    5fec:	68 1b       	sub	r22, r24
    5fee:	79 0b       	sbc	r23, r25
    5ff0:	76 95       	lsr	r23
    5ff2:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5021
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(dialog_set_string, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    5ff4:	6c 0d       	add	r22, r12
    5ff6:	7d 1d       	adc	r23, r13
    5ff8:	ee 24       	eor	r14, r14
    5ffa:	ea 94       	dec	r14
    5ffc:	fe 2c       	mov	r15, r14
    5ffe:	10 e0       	ldi	r17, 0x00	; 0
    6000:	00 e0       	ldi	r16, 0x00	; 0
    6002:	22 e0       	ldi	r18, 0x02	; 2
    6004:	8d ea       	ldi	r24, 0xAD	; 173
    6006:	98 e0       	ldi	r25, 0x08	; 8
    6008:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5022
}
    600c:	df 91       	pop	r29
    600e:	cf 91       	pop	r28
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	ff 90       	pop	r15
    6016:	ef 90       	pop	r14
    6018:	df 90       	pop	r13
    601a:	cf 90       	pop	r12
    601c:	bf 90       	pop	r11
    601e:	af 90       	pop	r10
    6020:	9f 90       	pop	r9
    6022:	8f 90       	pop	r8
    6024:	7f 90       	pop	r7
    6026:	6f 90       	pop	r6
    6028:	08 95       	ret

0000602a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4982
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
  }
}
////////////////////////////////////////////////////////
void display_element_dialog_set_variable(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    602a:	4f 92       	push	r4
    602c:	5f 92       	push	r5
    602e:	6f 92       	push	r6
    6030:	7f 92       	push	r7
    6032:	8f 92       	push	r8
    6034:	9f 92       	push	r9
    6036:	af 92       	push	r10
    6038:	bf 92       	push	r11
    603a:	cf 92       	push	r12
    603c:	df 92       	push	r13
    603e:	ef 92       	push	r14
    6040:	ff 92       	push	r15
    6042:	0f 93       	push	r16
    6044:	1f 93       	push	r17
    6046:	cf 93       	push	r28
    6048:	df 93       	push	r29
    604a:	cd b7       	in	r28, 0x3d	; 61
    604c:	de b7       	in	r29, 0x3e	; 62
    604e:	2d 97       	sbiw	r28, 0x0d	; 13
    6050:	0f b6       	in	r0, 0x3f	; 63
    6052:	f8 94       	cli
    6054:	de bf       	out	0x3e, r29	; 62
    6056:	0f be       	out	0x3f, r0	; 63
    6058:	cd bf       	out	0x3d, r28	; 61
    605a:	6c 01       	movw	r12, r24
    605c:	7b 01       	movw	r14, r22
    605e:	2a 01       	movw	r4, r20
    6060:	39 01       	movw	r6, r18
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6062:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    6066:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    606a:	10 e0       	ldi	r17, 0x00	; 0
    606c:	00 e0       	ldi	r16, 0x00	; 0
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4989
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    606e:	4b 01       	movw	r8, r22
    6070:	82 0e       	add	r8, r18
    6072:	93 1e       	adc	r9, r19
    6074:	5c 01       	movw	r10, r24
    6076:	a4 0e       	add	r10, r20
    6078:	b5 1e       	adc	r11, r21
    607a:	94 01       	movw	r18, r8
    607c:	20 1b       	sub	r18, r16
    607e:	31 0b       	sbc	r19, r17
    6080:	a5 01       	movw	r20, r10
    6082:	40 1b       	sub	r20, r16
    6084:	51 0b       	sbc	r21, r17
    6086:	b8 01       	movw	r22, r16
    6088:	6e 0d       	add	r22, r14
    608a:	7f 1d       	adc	r23, r15
    608c:	c8 01       	movw	r24, r16
    608e:	8c 0d       	add	r24, r12
    6090:	9d 1d       	adc	r25, r13
    6092:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    6096:	0f 5f       	subi	r16, 0xFF	; 255
    6098:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4988
  uint16_t tmp1, posx1, posy1;
  char line1[9];
  float te;

  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    609a:	03 30       	cpi	r16, 0x03	; 3
    609c:	11 05       	cpc	r17, r1
    609e:	69 f7       	brne	.-38     	; 0x607a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x50>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    60a0:	8f ef       	ldi	r24, 0xFF	; 255
    60a2:	9f ef       	ldi	r25, 0xFF	; 255
    60a4:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    60a8:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4991
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  my_lcd.Set_Draw_color(WHITE);
  my_lcd.Fill_Rectangle(x + 3, y + 3, x + size_x - 3, y + size_y - 3);
    60ac:	93 01       	movw	r18, r6
    60ae:	23 50       	subi	r18, 0x03	; 3
    60b0:	31 09       	sbc	r19, r1
    60b2:	2e 0d       	add	r18, r14
    60b4:	3f 1d       	adc	r19, r15
    60b6:	a2 01       	movw	r20, r4
    60b8:	43 50       	subi	r20, 0x03	; 3
    60ba:	51 09       	sbc	r21, r1
    60bc:	4c 0d       	add	r20, r12
    60be:	5d 1d       	adc	r21, r13
    60c0:	b7 01       	movw	r22, r14
    60c2:	6d 5f       	subi	r22, 0xFD	; 253
    60c4:	7f 4f       	sbci	r23, 0xFF	; 255
    60c6:	c6 01       	movw	r24, r12
    60c8:	03 96       	adiw	r24, 0x03	; 3
    60ca:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4993

  if (menu_dialog_set_divider != 0)
    60ce:	00 91 a0 08 	lds	r16, 0x08A0	; 0x8008a0 <menu_dialog_set_divider>
    60d2:	10 91 a1 08 	lds	r17, 0x08A1	; 0x8008a1 <menu_dialog_set_divider+0x1>
    60d6:	80 91 9e 08 	lds	r24, 0x089E	; 0x80089e <menu_dialog_set_variable_now>
    60da:	90 91 9f 08 	lds	r25, 0x089F	; 0x80089f <menu_dialog_set_variable_now+0x1>
    60de:	9e 01       	movw	r18, r28
    60e0:	2f 5f       	subi	r18, 0xFF	; 255
    60e2:	3f 4f       	sbci	r19, 0xFF	; 255
    60e4:	59 01       	movw	r10, r18
    60e6:	01 15       	cp	r16, r1
    60e8:	11 05       	cpc	r17, r1
    60ea:	09 f4       	brne	.+2      	; 0x60ee <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc4>
    60ec:	5e c0       	rjmp	.+188    	; 0x61aa <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x180>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4995
  {
    te = menu_dialog_set_variable_now / (menu_dialog_set_divider * 1.0);
    60ee:	bc 01       	movw	r22, r24
    60f0:	99 0f       	add	r25, r25
    60f2:	88 0b       	sbc	r24, r24
    60f4:	99 0b       	sbc	r25, r25
    60f6:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    60fa:	6a 87       	std	Y+10, r22	; 0x0a
    60fc:	7b 87       	std	Y+11, r23	; 0x0b
    60fe:	8c 87       	std	Y+12, r24	; 0x0c
    6100:	9d 87       	std	Y+13, r25	; 0x0d
    6102:	b8 01       	movw	r22, r16
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    610c:	9b 01       	movw	r18, r22
    610e:	ac 01       	movw	r20, r24
    6110:	6a 85       	ldd	r22, Y+10	; 0x0a
    6112:	7b 85       	ldd	r23, Y+11	; 0x0b
    6114:	8c 85       	ldd	r24, Y+12	; 0x0c
    6116:	9d 85       	ldd	r25, Y+13	; 0x0d
    6118:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4996
    dtostrf(te, 4, 2, line1);
    611c:	85 01       	movw	r16, r10
    611e:	22 e0       	ldi	r18, 0x02	; 2
    6120:	44 e0       	ldi	r20, 0x04	; 4
    6122:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6126:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    612a:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5002
  }
  else
    itoa(menu_dialog_set_variable_now, line1, 10);
  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
    612e:	f5 01       	movw	r30, r10
    6130:	01 90       	ld	r0, Z+
    6132:	00 20       	and	r0, r0
    6134:	e9 f7       	brne	.-6      	; 0x6130 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x106>
    6136:	31 97       	sbiw	r30, 0x01	; 1
    6138:	ea 19       	sub	r30, r10
    613a:	fb 09       	sbc	r31, r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5004
  posx1 = (size_x - tmp1) / 2;
  posy1 = (size_y - show_string_size_hight(2)) / 2;
    613c:	a3 01       	movw	r20, r6
    613e:	4c 50       	subi	r20, 0x0C	; 12
    6140:	51 09       	sbc	r21, r1
    6142:	56 95       	lsr	r21
    6144:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5005
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6146:	31 e0       	ldi	r19, 0x01	; 1
    6148:	e3 1a       	sub	r14, r19
    614a:	f1 08       	sbc	r15, r1
    614c:	4e 0d       	add	r20, r14
    614e:	5f 1d       	adc	r21, r15
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    6150:	86 e0       	ldi	r24, 0x06	; 6
    6152:	e8 9f       	mul	r30, r24
    6154:	f0 01       	movw	r30, r0
    6156:	11 24       	eor	r1, r1
    6158:	ee 0f       	add	r30, r30
    615a:	ff 1f       	adc	r31, r31
_Z35display_element_dialog_set_variablejjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5003
  else
    itoa(menu_dialog_set_variable_now, line1, 10);
  my_lcd.Set_Draw_color(BLACK);

  tmp1 = show_string_size_width(strlen(line1), 2);
  posx1 = (size_x - tmp1) / 2;
    615c:	b2 01       	movw	r22, r4
    615e:	6e 1b       	sub	r22, r30
    6160:	7f 0b       	sbc	r23, r31
    6162:	76 95       	lsr	r23
    6164:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5005
  posy1 = (size_y - show_string_size_hight(2)) / 2;
  show_string(line1, x + posx1 , y + posy1 - 1 , 2, BLACK, WHITE, 0);
    6166:	6c 0d       	add	r22, r12
    6168:	7d 1d       	adc	r23, r13
    616a:	ee 24       	eor	r14, r14
    616c:	ea 94       	dec	r14
    616e:	fe 2c       	mov	r15, r14
    6170:	10 e0       	ldi	r17, 0x00	; 0
    6172:	00 e0       	ldi	r16, 0x00	; 0
    6174:	22 e0       	ldi	r18, 0x02	; 2
    6176:	c5 01       	movw	r24, r10
    6178:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5006
}
    617c:	2d 96       	adiw	r28, 0x0d	; 13
    617e:	0f b6       	in	r0, 0x3f	; 63
    6180:	f8 94       	cli
    6182:	de bf       	out	0x3e, r29	; 62
    6184:	0f be       	out	0x3f, r0	; 63
    6186:	cd bf       	out	0x3d, r28	; 61
    6188:	df 91       	pop	r29
    618a:	cf 91       	pop	r28
    618c:	1f 91       	pop	r17
    618e:	0f 91       	pop	r16
    6190:	ff 90       	pop	r15
    6192:	ef 90       	pop	r14
    6194:	df 90       	pop	r13
    6196:	cf 90       	pop	r12
    6198:	bf 90       	pop	r11
    619a:	af 90       	pop	r10
    619c:	9f 90       	pop	r9
    619e:	8f 90       	pop	r8
    61a0:	7f 90       	pop	r7
    61a2:	6f 90       	pop	r6
    61a4:	5f 90       	pop	r5
    61a6:	4f 90       	pop	r4
    61a8:	08 95       	ret
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    61aa:	4a e0       	ldi	r20, 0x0A	; 10
    61ac:	b9 01       	movw	r22, r18
    61ae:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
    61b2:	b9 cf       	rjmp	.-142    	; 0x6126 <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xfc>

000061b4 <display_element_default_ring_set_temp(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z37display_element_default_ring_set_tempjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4809
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
}
////
void display_element_default_ring_set_temp(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    61b4:	ef 92       	push	r14
    61b6:	0f 93       	push	r16
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4810
  display_element_dialog_set_variable(x, y, size_x, size_y, args1, args2);
    61b8:	0e 94 15 30 	call	0x602a	; 0x602a <display_element_dialog_set_variable(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4811
}
    61bc:	0f 91       	pop	r16
    61be:	ef 90       	pop	r14
    61c0:	08 95       	ret

000061c2 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4866
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    61c2:	af 92       	push	r10
    61c4:	bf 92       	push	r11
    61c6:	cf 92       	push	r12
    61c8:	df 92       	push	r13
    61ca:	ef 92       	push	r14
    61cc:	ff 92       	push	r15
    61ce:	0f 93       	push	r16
    61d0:	1f 93       	push	r17
    61d2:	cf 93       	push	r28
    61d4:	df 93       	push	r29
    61d6:	cd b7       	in	r28, 0x3d	; 61
    61d8:	de b7       	in	r29, 0x3e	; 62
    61da:	60 97       	sbiw	r28, 0x10	; 16
    61dc:	0f b6       	in	r0, 0x3f	; 63
    61de:	f8 94       	cli
    61e0:	de bf       	out	0x3e, r29	; 62
    61e2:	0f be       	out	0x3f, r0	; 63
    61e4:	cd bf       	out	0x3d, r28	; 61
    61e6:	5c 01       	movw	r10, r24
    61e8:	8b 01       	movw	r16, r22
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    61ea:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    61ee:	9e 01       	movw	r18, r28
    61f0:	2f 5f       	subi	r18, 0xFF	; 255
    61f2:	3f 4f       	sbci	r19, 0xFF	; 255
    61f4:	69 01       	movw	r12, r18
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4868
}
////////////////////////////////////////////////////
void display_element_show_date_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
  char str1[16];
  if (selftest_get_0(SELFTEST_ERR_RTC) == 0)
    61f6:	80 fd       	sbrc	r24, 0
    61f8:	4e c0       	rjmp	.+156    	; 0x6296 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xd4>
_ZNK8DateTime4yearEv():
/home/saric/Arduino/libraries/RTClib/RTClib.h:38
    DateTime (uint16_t year, uint8_t month, uint8_t day, 
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
    61fa:	80 91 46 10 	lds	r24, 0x1046	; 0x801046 <now>
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	80 53       	subi	r24, 0x30	; 48
    6202:	98 4f       	sbci	r25, 0xF8	; 248
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4870
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
    6204:	9f 93       	push	r25
    6206:	8f 93       	push	r24
    6208:	80 91 47 10 	lds	r24, 0x1047	; 0x801047 <now+0x1>
    620c:	1f 92       	push	r1
    620e:	8f 93       	push	r24
    6210:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <now+0x2>
    6214:	1f 92       	push	r1
    6216:	8f 93       	push	r24
    6218:	88 e3       	ldi	r24, 0x38	; 56
    621a:	93 e0       	ldi	r25, 0x03	; 3
    621c:	9f 93       	push	r25
    621e:	8f 93       	push	r24
    6220:	3f 93       	push	r19
    6222:	2f 93       	push	r18
    6224:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
    6228:	0f b6       	in	r0, 0x3f	; 63
    622a:	f8 94       	cli
    622c:	de bf       	out	0x3e, r29	; 62
    622e:	0f be       	out	0x3f, r0	; 63
    6230:	cd bf       	out	0x3d, r28	; 61
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6232:	8f ef       	ldi	r24, 0xFF	; 255
    6234:	9f ef       	ldi	r25, 0xFF	; 255
    6236:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    623a:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
_Z27display_element_show_date_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4876
  }
  else
  {
    strcpy(str1, "--.--.----");
  }
  my_lcd.Set_Draw_color(WHITE); my_lcd.Draw_Fast_HLine(x, y, 142); my_lcd.Draw_Fast_HLine(x, y + 1, 142); show_string(str1, x, y + 2, 3, BLACK, WHITE, 0);
    623e:	4e e8       	ldi	r20, 0x8E	; 142
    6240:	50 e0       	ldi	r21, 0x00	; 0
    6242:	b8 01       	movw	r22, r16
    6244:	c5 01       	movw	r24, r10
    6246:	0e 94 b0 83 	call	0x10760	; 0x10760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    624a:	b8 01       	movw	r22, r16
    624c:	6f 5f       	subi	r22, 0xFF	; 255
    624e:	7f 4f       	sbci	r23, 0xFF	; 255
    6250:	4e e8       	ldi	r20, 0x8E	; 142
    6252:	50 e0       	ldi	r21, 0x00	; 0
    6254:	c5 01       	movw	r24, r10
    6256:	0e 94 b0 83 	call	0x10760	; 0x10760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    625a:	a8 01       	movw	r20, r16
    625c:	4e 5f       	subi	r20, 0xFE	; 254
    625e:	5f 4f       	sbci	r21, 0xFF	; 255
    6260:	ee 24       	eor	r14, r14
    6262:	ea 94       	dec	r14
    6264:	fe 2c       	mov	r15, r14
    6266:	10 e0       	ldi	r17, 0x00	; 0
    6268:	00 e0       	ldi	r16, 0x00	; 0
    626a:	23 e0       	ldi	r18, 0x03	; 3
    626c:	b5 01       	movw	r22, r10
    626e:	c6 01       	movw	r24, r12
    6270:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4877
}
    6274:	60 96       	adiw	r28, 0x10	; 16
    6276:	0f b6       	in	r0, 0x3f	; 63
    6278:	f8 94       	cli
    627a:	de bf       	out	0x3e, r29	; 62
    627c:	0f be       	out	0x3f, r0	; 63
    627e:	cd bf       	out	0x3d, r28	; 61
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	1f 91       	pop	r17
    6286:	0f 91       	pop	r16
    6288:	ff 90       	pop	r15
    628a:	ef 90       	pop	r14
    628c:	df 90       	pop	r13
    628e:	cf 90       	pop	r12
    6290:	bf 90       	pop	r11
    6292:	af 90       	pop	r10
    6294:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4874
  {
    sprintf(str1, "%02d.%02d.%04d", now.day(), now.month(), now.year());
  }
  else
  {
    strcpy(str1, "--.--.----");
    6296:	67 e4       	ldi	r22, 0x47	; 71
    6298:	73 e0       	ldi	r23, 0x03	; 3
    629a:	c9 01       	movw	r24, r18
    629c:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
    62a0:	c8 cf       	rjmp	.-112    	; 0x6232 <display_element_show_date_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>

000062a2 <MenuPrepareStyle()>:
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2152



/////////////////////////////////////////////////////////////////////////////////////////////
void MenuPrepareStyle(void)
{
    62a2:	4f 92       	push	r4
    62a4:	5f 92       	push	r5
    62a6:	6f 92       	push	r6
    62a8:	7f 92       	push	r7
    62aa:	8f 92       	push	r8
    62ac:	9f 92       	push	r9
    62ae:	af 92       	push	r10
    62b0:	bf 92       	push	r11
    62b2:	cf 92       	push	r12
    62b4:	df 92       	push	r13
    62b6:	ef 92       	push	r14
    62b8:	ff 92       	push	r15
    62ba:	0f 93       	push	r16
    62bc:	1f 93       	push	r17
    62be:	cf 93       	push	r28
    62c0:	df 93       	push	r29
    62c2:	1f 92       	push	r1
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2163
  uint16_t color_background;
  uint8_t args1;
  Menu1 *current;
  ret_fptr *rfnt;

  current = MenuHistoryGetMenu(&args1);
    62c8:	ce 01       	movw	r24, r28
    62ca:	01 96       	adiw	r24, 0x01	; 1
    62cc:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <MenuHistoryGetMenu(unsigned char*)>
    62d0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2164
  attr = pgm_read_byte(&current->atributes);
    62d2:	fc 01       	movw	r30, r24
    62d4:	ea 5a       	subi	r30, 0xAA	; 170
    62d6:	fd 4f       	sbci	r31, 0xFD	; 253
    62d8:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2165
  x = pgm_read_word(&current->x);
    62da:	38 97       	sbiw	r30, 0x08	; 8
    62dc:	c5 90       	lpm	r12, Z+
    62de:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2166
  y = pgm_read_word(&current->y);
    62e0:	fc 01       	movw	r30, r24
    62e2:	e0 5b       	subi	r30, 0xB0	; 176
    62e4:	fd 4f       	sbci	r31, 0xFD	; 253
    62e6:	e5 90       	lpm	r14, Z+
    62e8:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2167
  size_x = pgm_read_word(&current->size_x);
    62ea:	fc 01       	movw	r30, r24
    62ec:	ee 5a       	subi	r30, 0xAE	; 174
    62ee:	fd 4f       	sbci	r31, 0xFD	; 253
    62f0:	a5 90       	lpm	r10, Z+
    62f2:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2168
  size_y = pgm_read_word(&current->size_y);
    62f4:	fc 01       	movw	r30, r24
    62f6:	ec 5a       	subi	r30, 0xAC	; 172
    62f8:	fd 4f       	sbci	r31, 0xFD	; 253
    62fa:	65 90       	lpm	r6, Z+
    62fc:	74 90       	lpm	r7, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2169
  color_background = pgm_read_word(&current->color_background);
    62fe:	fc 01       	movw	r30, r24
    6300:	e9 5a       	subi	r30, 0xA9	; 169
    6302:	fd 4f       	sbci	r31, 0xFD	; 253
    6304:	85 90       	lpm	r8, Z+
    6306:	94 90       	lpm	r9, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2171

  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
    6308:	50 fe       	sbrs	r5, 0
    630a:	03 c0       	rjmp	.+6      	; 0x6312 <MenuPrepareStyle()+0x70>
DisplayClean():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2269

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
void DisplayClean(uint16_t color)
{
  my_lcd.Fill_Screen(color);
    630c:	c4 01       	movw	r24, r8
    630e:	0e 94 89 84 	call	0x10912	; 0x10912 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2176
  if ((attr & (1 << MENU_ATTRIBUTES_CLEAN_DISPLAY)) != 0)
  {
    DisplayClean(color_background);
  }

  if ((attr & (1 << MENU_ATTRIBUTES_FILL_COLOR_RECTANGLE)) != 0)
    6312:	51 fe       	sbrs	r5, 1
    6314:	0e c0       	rjmp	.+28     	; 0x6332 <MenuPrepareStyle()+0x90>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6316:	90 92 c1 0d 	sts	0x0DC1, r9	; 0x800dc1 <my_lcd+0xb>
    631a:	80 92 c0 0d 	sts	0x0DC0, r8	; 0x800dc0 <my_lcd+0xa>
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2179
  {
    my_lcd.Set_Draw_color(color_background);
    my_lcd.Fill_Rectangle(x, y, x + size_x, y + size_y);
    631e:	97 01       	movw	r18, r14
    6320:	26 0d       	add	r18, r6
    6322:	37 1d       	adc	r19, r7
    6324:	a6 01       	movw	r20, r12
    6326:	4a 0d       	add	r20, r10
    6328:	5b 1d       	adc	r21, r11
    632a:	b7 01       	movw	r22, r14
    632c:	c6 01       	movw	r24, r12
    632e:	0e 94 1f 84 	call	0x1083e	; 0x1083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2182
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
    6332:	52 fe       	sbrs	r5, 2
    6334:	2a c0       	rjmp	.+84     	; 0x638a <MenuPrepareStyle()+0xe8>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    6336:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    633a:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    633e:	91 2c       	mov	r9, r1
    6340:	81 2c       	mov	r8, r1
_Z16MenuPrepareStylev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2187
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
    6342:	6e 0c       	add	r6, r14
    6344:	7f 1c       	adc	r7, r15
    6346:	26 01       	movw	r4, r12
    6348:	4a 0c       	add	r4, r10
    634a:	5b 1c       	adc	r5, r11
    634c:	93 01       	movw	r18, r6
    634e:	28 19       	sub	r18, r8
    6350:	39 09       	sbc	r19, r9
    6352:	a2 01       	movw	r20, r4
    6354:	48 19       	sub	r20, r8
    6356:	59 09       	sbc	r21, r9
    6358:	b7 01       	movw	r22, r14
    635a:	c6 01       	movw	r24, r12
    635c:	88 0d       	add	r24, r8
    635e:	99 1d       	adc	r25, r9
    6360:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2188
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    6364:	a5 01       	movw	r20, r10
    6366:	48 19       	sub	r20, r8
    6368:	59 09       	sbc	r21, r9
    636a:	b7 01       	movw	r22, r14
    636c:	69 5e       	subi	r22, 0xE9	; 233
    636e:	7f 4f       	sbci	r23, 0xFF	; 255
    6370:	c6 01       	movw	r24, r12
    6372:	0e 94 b0 83 	call	0x10760	; 0x10760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
    6376:	8f ef       	ldi	r24, 0xFF	; 255
    6378:	88 1a       	sub	r8, r24
    637a:	98 0a       	sbc	r9, r24
    637c:	ef ef       	ldi	r30, 0xFF	; 255
    637e:	ee 1a       	sub	r14, r30
    6380:	fe 0a       	sbc	r15, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2185
  }

  if ((attr & (1 << MENU_ATTRIBUTES_DECORATE_MENU)) != 0)
  {
    my_lcd.Set_Draw_color(BLACK);
    for (uint8_t i = 0; i < 4; i++)
    6382:	f4 e0       	ldi	r31, 0x04	; 4
    6384:	8f 16       	cp	r8, r31
    6386:	91 04       	cpc	r9, r1
    6388:	09 f7       	brne	.-62     	; 0x634c <MenuPrepareStyle()+0xaa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2191
    {
      my_lcd.Draw_Rectangle(x + i, y + i, x + size_x - i, y + size_y - i);
      my_lcd.Draw_Fast_HLine(x, y + 23 + i, size_x - i);
    }
  }
  rfnt =  pgm_read_word(&current->preload_function);
    638a:	f8 01       	movw	r30, r16
    638c:	e0 5a       	subi	r30, 0xA0	; 160
    638e:	fd 4f       	sbci	r31, 0xFD	; 253
    6390:	25 91       	lpm	r18, Z+
    6392:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2192
  (ret_fptr(rfnt))(pgm_read_byte(&current->idx), 0, 0);
    6394:	f8 01       	movw	r30, r16
    6396:	e3 5b       	subi	r30, 0xB3	; 179
    6398:	fd 4f       	sbci	r31, 0xFD	; 253
    639a:	e4 91       	lpm	r30, Z
    639c:	40 e0       	ldi	r20, 0x00	; 0
    639e:	70 e0       	ldi	r23, 0x00	; 0
    63a0:	60 e0       	ldi	r22, 0x00	; 0
    63a2:	8e 2f       	mov	r24, r30
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	f9 01       	movw	r30, r18
    63a8:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2194

}
    63aa:	0f 90       	pop	r0
    63ac:	df 91       	pop	r29
    63ae:	cf 91       	pop	r28
    63b0:	1f 91       	pop	r17
    63b2:	0f 91       	pop	r16
    63b4:	ff 90       	pop	r15
    63b6:	ef 90       	pop	r14
    63b8:	df 90       	pop	r13
    63ba:	cf 90       	pop	r12
    63bc:	bf 90       	pop	r11
    63be:	af 90       	pop	r10
    63c0:	9f 90       	pop	r9
    63c2:	8f 90       	pop	r8
    63c4:	7f 90       	pop	r7
    63c6:	6f 90       	pop	r6
    63c8:	5f 90       	pop	r5
    63ca:	4f 90       	pop	r4
    63cc:	08 95       	ret

000063ce <MenuHistoryNextMenu(unsigned char, unsigned char)>:
_Z19MenuHistoryNextMenuhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2213
  }
}
///
void MenuHistoryNextMenu(uint8_t id, uint8_t args1)
{
  if (MenuHistoryIndex < MENU_MAX_HISTORY)
    63ce:	20 91 ec 08 	lds	r18, 0x08EC	; 0x8008ec <MenuHistoryIndex>
    63d2:	2a 30       	cpi	r18, 0x0A	; 10
    63d4:	70 f4       	brcc	.+28     	; 0x63f2 <MenuHistoryNextMenu(unsigned char, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2215
  {
    MenuHistoryIndex++;
    63d6:	2f 5f       	subi	r18, 0xFF	; 255
    63d8:	20 93 ec 08 	sts	0x08EC, r18	; 0x8008ec <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2216
    MenuHistory[MenuHistoryIndex] = id;
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	f9 01       	movw	r30, r18
    63e0:	e8 5a       	subi	r30, 0xA8	; 168
    63e2:	f7 4f       	sbci	r31, 0xF7	; 247
    63e4:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2217
    Global_menu_args1[MenuHistoryIndex] = args1;
    63e6:	2e 51       	subi	r18, 0x1E	; 30
    63e8:	37 4f       	sbci	r19, 0xF7	; 247
    63ea:	f9 01       	movw	r30, r18
    63ec:	60 83       	st	Z, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2218
    MenuPrepareStyle();
    63ee:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2220
  }
}
    63f2:	08 95       	ret

000063f4 <button_click_term_set_mode_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z37button_click_term_set_mode_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5715
/*
   funkce pro prepnuti na dialog vyberu modu
*/
void button_click_term_set_mode_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_DIALOG_SELECT_TERM_MODE, default_ring);
    63f4:	60 91 0a 0a 	lds	r22, 0x0A0A	; 0x800a0a <default_ring>
    63f8:	88 e6       	ldi	r24, 0x68	; 104
    63fa:	0c 94 e7 31 	jmp	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>

000063fe <click_thermostat_set_ring_via_dialog(unsigned char, unsigned char, unsigned char)>:
_Z36click_thermostat_set_ring_via_dialoghhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5551

/////
/////
void click_thermostat_set_ring_via_dialog(uint8_t args1, uint8_t args2, uint8_t args3)
{
  MenuHistoryNextMenu(MENU_NASTAVENI_SELECT_RING_SCREEN, default_ring);
    63fe:	60 91 0a 0a 	lds	r22, 0x0A0A	; 0x800a0a <default_ring>
    6402:	8a e0       	ldi	r24, 0x0A	; 10
    6404:	0c 94 e7 31 	jmp	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>

00006408 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)>:
_Z38click_tds_associate_or_setting_onewirehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5314
    if (w_rom[cnt].used == 1) active++;
  return active;
}
/// funkce. ktera
void click_tds_associate_or_setting_onewire(uint8_t args1, uint8_t args2, uint8_t idx)
{
    6408:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5316
  //printf("%d %d\n", args1, idx);
  if (w_rom[idx].tds_idx == 255)
    640a:	8b e0       	ldi	r24, 0x0B	; 11
    640c:	48 9f       	mul	r20, r24
    640e:	f0 01       	movw	r30, r0
    6410:	11 24       	eor	r1, r1
    6412:	e5 54       	subi	r30, 0x45	; 69
    6414:	f6 4f       	sbci	r31, 0xF6	; 246
    6416:	62 85       	ldd	r22, Z+10	; 0x0a
    6418:	6f 3f       	cpi	r22, 0xFF	; 255
    641a:	a1 f4       	brne	.+40     	; 0x6444 <click_tds_associate_or_setting_onewire(unsigned char, unsigned char, unsigned char)+0x3c>
    641c:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5318
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    641e:	60 e0       	ldi	r22, 0x00	; 0
    6420:	84 e6       	ldi	r24, 0x64	; 100
    6422:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5319
    dialog_yes_function = &tds_associate;
    6426:	8e e5       	ldi	r24, 0x5E	; 94
    6428:	96 e5       	ldi	r25, 0x56	; 86
    642a:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <dialog_yes_function+0x1>
    642e:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5320
    dialog_yes_args1 = idx;
    6432:	c0 93 df 08 	sts	0x08DF, r28	; 0x8008df <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5321
    strcpy_P(dialog_text, text_associovat_tds);
    6436:	63 ea       	ldi	r22, 0xA3	; 163
    6438:	74 e3       	ldi	r23, 0x34	; 52
    643a:	8f eb       	ldi	r24, 0xBF	; 191
    643c:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5327
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
  }
}
    643e:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5321
  if (w_rom[idx].tds_idx == 255)
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &tds_associate;
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
    6440:	0c 94 90 aa 	jmp	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5325
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6444:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5327
  }
}
    6446:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5325
    dialog_yes_args1 = idx;
    strcpy_P(dialog_text, text_associovat_tds);
  }
  else
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_TDS, w_rom[idx].tds_idx);
    6448:	0c 94 e7 31 	jmp	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>

0000644c <MenuHistoryPrevMenu()>:
_Z19MenuHistoryPrevMenuv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2204


/////////////////////////////////////////////////////////////////////////////////////
void MenuHistoryPrevMenu(void)
{
  if (MenuHistoryIndex > 0)
    644c:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <MenuHistoryIndex>
    6450:	88 23       	and	r24, r24
    6452:	29 f0       	breq	.+10     	; 0x645e <MenuHistoryPrevMenu()+0x12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2206
  {
    MenuHistoryIndex--;
    6454:	81 50       	subi	r24, 0x01	; 1
    6456:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <MenuHistoryIndex>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2207
    MenuPrepareStyle();
    645a:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2209
  }
}
    645e:	08 95       	ret

00006460 <dialog_set_variable_button_click(unsigned char, unsigned char)>:
_Z32dialog_set_variable_button_clickhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2540
  MenuHistoryPrevMenu();
}

void dialog_set_variable_button_click(uint8_t args1, uint8_t args2)
{
  dialog_save_variable_function(args1, args2, 0);
    6460:	70 e0       	ldi	r23, 0x00	; 0
    6462:	e0 91 ab 08 	lds	r30, 0x08AB	; 0x8008ab <dialog_save_variable_function>
    6466:	f0 91 ac 08 	lds	r31, 0x08AC	; 0x8008ac <dialog_save_variable_function+0x1>
    646a:	40 e0       	ldi	r20, 0x00	; 0
    646c:	90 e0       	ldi	r25, 0x00	; 0
    646e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2541
  MenuHistoryPrevMenu();
    6470:	0c 94 26 32 	jmp	0x644c	; 0x644c <MenuHistoryPrevMenu()>

00006474 <click_dialog_button_yes(unsigned char, unsigned char)>:
_Z23click_dialog_button_yeshh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2534
   args1 - jsou data z definice funkce
   args2 - jsou globalni data z definice menu
*/
void click_dialog_button_yes(uint8_t args1, uint8_t args2)
{
  dialog_yes_function(dialog_yes_args1, 0, 0);
    6474:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <dialog_yes_args1>
    6478:	e0 91 e0 08 	lds	r30, 0x08E0	; 0x8008e0 <dialog_yes_function>
    647c:	f0 91 e1 08 	lds	r31, 0x08E1	; 0x8008e1 <dialog_yes_function+0x1>
    6480:	40 e0       	ldi	r20, 0x00	; 0
    6482:	70 e0       	ldi	r23, 0x00	; 0
    6484:	60 e0       	ldi	r22, 0x00	; 0
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2535
  MenuHistoryPrevMenu();
    648a:	0c 94 26 32 	jmp	0x644c	; 0x644c <MenuHistoryPrevMenu()>

0000648e <serial_putc(char, __file*)>:
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:23
#define __PRINTF_H__

#if defined (ARDUINO) && !defined (__arm__) && !defined(__ARDUINO_X86__)

int serial_putc( char c, FILE * )
{
    648e:	cf 93       	push	r28
    6490:	c8 2f       	mov	r28, r24
write():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    6492:	68 2f       	mov	r22, r24
    6494:	89 e6       	ldi	r24, 0x69	; 105
    6496:	9b e0       	ldi	r25, 0x0B	; 11
    6498:	0e 94 39 7f 	call	0xfe72	; 0xfe72 <HardwareSerial::write(unsigned char)>
_Z11serial_putccP6__file():
/home/saric/Arduino/libraries/RF24/printf.h:27
  Serial.write( c );

  return c;
}
    649c:	8c 2f       	mov	r24, r28
    649e:	cc 0f       	add	r28, r28
    64a0:	99 0b       	sbc	r25, r25
    64a2:	cf 91       	pop	r28
    64a4:	08 95       	ret

000064a6 <W5500Class::readSn(unsigned char, unsigned int)>:
_ZN10W5500Class6readSnEhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:347
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
};

extern W5500Class w5500;

uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    64a6:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:348
    uint8_t cntl_byte = (_s<<5)+0x08;
    64a8:	82 95       	swap	r24
    64aa:	88 0f       	add	r24, r24
    64ac:	80 7e       	andi	r24, 0xE0	; 224
    64ae:	68 e0       	ldi	r22, 0x08	; 8
    64b0:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:349
    return read(_addr, cntl_byte);
    64b2:	c9 01       	movw	r24, r18
    64b4:	0c 94 95 97 	jmp	0x12f2a	; 0x12f2a <W5500Class::read(unsigned int, unsigned char)>

000064b8 <EthernetClient::write(unsigned char const*, unsigned int)>:
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:77

size_t EthernetClient::write(uint8_t b) {
  return write(&b, 1);
}

size_t EthernetClient::write(const uint8_t *buf, size_t size) {
    64b8:	8f 92       	push	r8
    64ba:	9f 92       	push	r9
    64bc:	af 92       	push	r10
    64be:	bf 92       	push	r11
    64c0:	cf 92       	push	r12
    64c2:	df 92       	push	r13
    64c4:	ef 92       	push	r14
    64c6:	ff 92       	push	r15
    64c8:	0f 93       	push	r16
    64ca:	1f 93       	push	r17
    64cc:	cf 93       	push	r28
    64ce:	6c 01       	movw	r12, r24
    64d0:	5b 01       	movw	r10, r22
    64d2:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:78
  if (_sock == MAX_SOCK_NUM) {
    64d4:	fc 01       	movw	r30, r24
    64d6:	c4 85       	ldd	r28, Z+12	; 0x0c
    64d8:	c8 30       	cpi	r28, 0x08	; 8
    64da:	a1 f4       	brne	.+40     	; 0x6504 <EthernetClient::write(unsigned char const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    64dc:	81 e0       	ldi	r24, 0x01	; 1
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	f6 01       	movw	r30, r12
    64e2:	93 83       	std	Z+3, r25	; 0x03
    64e4:	82 83       	std	Z+2, r24	; 0x02
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:80
    setWriteError();
    return 0;
    64e6:	f1 2c       	mov	r15, r1
    64e8:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:87
  if (!send(_sock, buf, size)) {
    setWriteError();
    return 0;
  }
  return size;
}
    64ea:	c7 01       	movw	r24, r14
    64ec:	cf 91       	pop	r28
    64ee:	1f 91       	pop	r17
    64f0:	0f 91       	pop	r16
    64f2:	ff 90       	pop	r15
    64f4:	ef 90       	pop	r14
    64f6:	df 90       	pop	r13
    64f8:	cf 90       	pop	r12
    64fa:	bf 90       	pop	r11
    64fc:	af 90       	pop	r10
    64fe:	9f 90       	pop	r9
    6500:	8f 90       	pop	r8
    6502:	08 95       	ret
    6504:	8a 01       	movw	r16, r20
    6506:	41 30       	cpi	r20, 0x01	; 1
    6508:	58 40       	sbci	r21, 0x08	; 8
    650a:	10 f0       	brcs	.+4      	; 0x6510 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
    650c:	00 e0       	ldi	r16, 0x00	; 0
    650e:	18 e0       	ldi	r17, 0x08	; 8
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:116
    ret = len;

  // if freebuf is available, start.
  do 
  {
    freesize = w5500.getTXFreeSize(s);
    6510:	8c 2f       	mov	r24, r28
    6512:	0e 94 26 89 	call	0x1124c	; 0x1124c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
    6516:	4c 01       	movw	r8, r24
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6518:	63 e0       	ldi	r22, 0x03	; 3
    651a:	70 e0       	ldi	r23, 0x00	; 0
    651c:	8c 2f       	mov	r24, r28
    651e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:118
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    6522:	87 31       	cpi	r24, 0x17	; 23
    6524:	11 f0       	breq	.+4      	; 0x652a <EthernetClient::write(unsigned char const*, unsigned int)+0x72>
    6526:	8c 31       	cpi	r24, 0x1C	; 28
    6528:	09 f5       	brne	.+66     	; 0x656c <EthernetClient::write(unsigned char const*, unsigned int)+0xb4>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:124
    {
      ret = 0; 
      break;
    }
  } 
  while (freesize < ret);
    652a:	80 16       	cp	r8, r16
    652c:	91 06       	cpc	r9, r17
    652e:	80 f3       	brcs	.-32     	; 0x6510 <EthernetClient::write(unsigned char const*, unsigned int)+0x58>
send_data_processing():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:70
}

void W5500Class::send_data_processing(SOCKET s, const uint8_t *data, uint16_t len)
{
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);
    6530:	98 01       	movw	r18, r16
    6532:	a5 01       	movw	r20, r10
    6534:	70 e0       	ldi	r23, 0x00	; 0
    6536:	60 e0       	ldi	r22, 0x00	; 0
    6538:	8c 2f       	mov	r24, r28
    653a:	0e 94 71 98 	call	0x130e2	; 0x130e2 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:128

  // copy data
  w5500.send_data_processing(s, (uint8_t *)buf, ret);
  w5500.execCmdSn(s, Sock_SEND);
    653e:	60 e2       	ldi	r22, 0x20	; 32
    6540:	70 e0       	ldi	r23, 0x00	; 0
    6542:	8c 2f       	mov	r24, r28
    6544:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6548:	62 e0       	ldi	r22, 0x02	; 2
    654a:	70 e0       	ldi	r23, 0x00	; 0
    654c:	8c 2f       	mov	r24, r28
    654e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:131

  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
    6552:	84 fd       	sbrc	r24, 4
    6554:	0e c0       	rjmp	.+28     	; 0x6572 <EthernetClient::write(unsigned char const*, unsigned int)+0xba>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    6556:	63 e0       	ldi	r22, 0x03	; 3
    6558:	70 e0       	ldi	r23, 0x00	; 0
    655a:	8c 2f       	mov	r24, r28
    655c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
send():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:134
  {
    /* m2008.01 [bj] : reduce code */
    if ( w5500.readSnSR(s) == SnSR::CLOSED )
    6560:	81 11       	cpse	r24, r1
    6562:	f2 cf       	rjmp	.-28     	; 0x6548 <EthernetClient::write(unsigned char const*, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:136
    {
      close(s);
    6564:	8c 2f       	mov	r24, r28
    6566:	0e 94 4b 9a 	call	0x13496	; 0x13496 <close(unsigned char)>
    656a:	b8 cf       	rjmp	.-144    	; 0x64dc <EthernetClient::write(unsigned char const*, unsigned int)+0x24>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:120
  {
    freesize = w5500.getTXFreeSize(s);
    status = w5500.readSnSR(s);
    if ((status != SnSR::ESTABLISHED) && (status != SnSR::CLOSE_WAIT))
    {
      ret = 0; 
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	00 e0       	ldi	r16, 0x00	; 0
    6570:	df cf       	rjmp	.-66     	; 0x6530 <EthernetClient::write(unsigned char const*, unsigned int)+0x78>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
    6572:	40 e1       	ldi	r20, 0x10	; 16
    6574:	62 e0       	ldi	r22, 0x02	; 2
    6576:	70 e0       	ldi	r23, 0x00	; 0
    6578:	8c 2f       	mov	r24, r28
    657a:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN14EthernetClient5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:82
size_t EthernetClient::write(const uint8_t *buf, size_t size) {
  if (_sock == MAX_SOCK_NUM) {
    setWriteError();
    return 0;
  }
  if (!send(_sock, buf, size)) {
    657e:	01 2b       	or	r16, r17
    6580:	09 f0       	breq	.+2      	; 0x6584 <EthernetClient::write(unsigned char const*, unsigned int)+0xcc>
    6582:	b3 cf       	rjmp	.-154    	; 0x64ea <EthernetClient::write(unsigned char const*, unsigned int)+0x32>
    6584:	ab cf       	rjmp	.-170    	; 0x64dc <EthernetClient::write(unsigned char const*, unsigned int)+0x24>

00006586 <EthernetClient::connect(IPAddress, unsigned int)>:
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:38
  } else {
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
    6586:	df 92       	push	r13
    6588:	ef 92       	push	r14
    658a:	ff 92       	push	r15
    658c:	0f 93       	push	r16
    658e:	1f 93       	push	r17
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
  if (_sock != MAX_SOCK_NUM)
    6594:	fc 01       	movw	r30, r24
    6596:	24 85       	ldd	r18, Z+12	; 0x0c
    6598:	28 30       	cpi	r18, 0x08	; 8
    659a:	51 f0       	breq	.+20     	; 0x65b0 <EthernetClient::connect(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:59
  if (_srcport == 0) _srcport = 1024;
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    return 0;
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:71
      return 0;
    }
  }

  return 1;
}
    65a0:	df 91       	pop	r29
    65a2:	cf 91       	pop	r28
    65a4:	1f 91       	pop	r17
    65a6:	0f 91       	pop	r16
    65a8:	ff 90       	pop	r15
    65aa:	ef 90       	pop	r14
    65ac:	df 90       	pop	r13
    65ae:	08 95       	ret
    65b0:	7a 01       	movw	r14, r20
    65b2:	eb 01       	movw	r28, r22
    65b4:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:39
    return ret;
  }
}

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    65b6:	d1 2c       	mov	r13, r1
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
    65b8:	63 e0       	ldi	r22, 0x03	; 3
    65ba:	70 e0       	ldi	r23, 0x00	; 0
    65bc:	8d 2d       	mov	r24, r13
    65be:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    65c2:	81 11       	cpse	r24, r1
    65c4:	28 c0       	rjmp	.+80     	; 0x6616 <EthernetClient::connect(IPAddress, unsigned int)+0x90>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:45
      _sock = i;
    65c6:	f8 01       	movw	r30, r16
    65c8:	d4 86       	std	Z+12, r13	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:50
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
    65ca:	f8 01       	movw	r30, r16
    65cc:	84 85       	ldd	r24, Z+12	; 0x0c
    65ce:	88 30       	cpi	r24, 0x08	; 8
    65d0:	29 f3       	breq	.-54     	; 0x659c <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:53
    return 0;

  _srcport++;
    65d2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    65d6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    65da:	2f 5f       	subi	r18, 0xFF	; 255
    65dc:	3f 4f       	sbci	r19, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54
  if (_srcport == 0) _srcport = 1024;
    65de:	19 f1       	breq	.+70     	; 0x6626 <EthernetClient::connect(IPAddress, unsigned int)+0xa0>
    65e0:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
    65e4:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
socket():
    65e8:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
    65ec:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
    65f0:	61 e0       	ldi	r22, 0x01	; 1
    65f2:	0e 94 58 9a 	call	0x134b0	; 0x134b0 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    65f6:	8a 81       	ldd	r24, Y+2	; 0x02
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:70
 * 		
 * @return	1 for success else 0.
 */
uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
{
  if 
    65f8:	8f 3f       	cpi	r24, 0xFF	; 255
    65fa:	c1 f4       	brne	.+48     	; 0x662c <EthernetClient::connect(IPAddress, unsigned int)+0xa6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    (
  ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
    65fc:	8b 81       	ldd	r24, Y+3	; 0x03
    65fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6600:	01 f5       	brne	.+64     	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6602:	8c 81       	ldd	r24, Y+4	; 0x04
    6604:	8f 3f       	cpi	r24, 0xFF	; 255
    6606:	e9 f4       	brne	.+58     	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6608:	8d 81       	ldd	r24, Y+5	; 0x05
    660a:	8f 3f       	cpi	r24, 0xFF	; 255
    660c:	d1 f4       	brne	.+52     	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:58
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    _sock = MAX_SOCK_NUM;
    660e:	88 e0       	ldi	r24, 0x08	; 8
    6610:	f8 01       	movw	r30, r16
    6612:	84 87       	std	Z+12, r24	; 0x0c
    6614:	c3 cf       	rjmp	.-122    	; 0x659c <EthernetClient::connect(IPAddress, unsigned int)+0x16>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:44
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT || s == SnSR::CLOSE_WAIT) {
    6616:	8b 7f       	andi	r24, 0xFB	; 251
    6618:	88 31       	cpi	r24, 0x18	; 24
    661a:	a9 f2       	breq	.-86     	; 0x65c6 <EthernetClient::connect(IPAddress, unsigned int)+0x40>
    661c:	d3 94       	inc	r13
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:42

int EthernetClient::connect(IPAddress ip, uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    661e:	f8 e0       	ldi	r31, 0x08	; 8
    6620:	df 12       	cpse	r13, r31
    6622:	ca cf       	rjmp	.-108    	; 0x65b8 <EthernetClient::connect(IPAddress, unsigned int)+0x32>
    6624:	d2 cf       	rjmp	.-92     	; 0x65ca <EthernetClient::connect(IPAddress, unsigned int)+0x44>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:54

  if (_sock == MAX_SOCK_NUM)
    return 0;

  _srcport++;
  if (_srcport == 0) _srcport = 1024;
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	34 e0       	ldi	r19, 0x04	; 4
    662a:	da cf       	rjmp	.-76     	; 0x65e0 <EthernetClient::connect(IPAddress, unsigned int)+0x5a>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:72
    662c:	81 11       	cpse	r24, r1
    662e:	09 c0       	rjmp	.+18     	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:73
    ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
    6630:	8b 81       	ldd	r24, Y+3	; 0x03
    6632:	81 11       	cpse	r24, r1
    6634:	06 c0       	rjmp	.+12     	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    6636:	8c 81       	ldd	r24, Y+4	; 0x04
    6638:	81 11       	cpse	r24, r1
    663a:	03 c0       	rjmp	.+6      	; 0x6642 <EthernetClient::connect(IPAddress, unsigned int)+0xbc>
    663c:	8d 81       	ldd	r24, Y+5	; 0x05
    663e:	88 23       	and	r24, r24
    6640:	31 f3       	breq	.-52     	; 0x660e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
    6642:	e1 14       	cp	r14, r1
    6644:	f1 04       	cpc	r15, r1
    6646:	19 f3       	breq	.-58     	; 0x660e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:57
  socket(_sock, SnMR::TCP, _srcport, 0);

  if (!::connect(_sock, rawIPAddress(ip), port)) {
    6648:	f8 01       	movw	r30, r16
    664a:	d4 84       	ldd	r13, Z+12	; 0x0c
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    664c:	ae 01       	movw	r20, r28
    664e:	4e 5f       	subi	r20, 0xFE	; 254
    6650:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
    6652:	6d 2d       	mov	r22, r13
    6654:	62 95       	swap	r22
    6656:	66 0f       	add	r22, r22
    6658:	60 7e       	andi	r22, 0xE0	; 224
    665a:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
    665c:	24 e0       	ldi	r18, 0x04	; 4
    665e:	30 e0       	ldi	r19, 0x00	; 0
    6660:	8c e0       	ldi	r24, 0x0C	; 12
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
    6668:	4f 2d       	mov	r20, r15
    666a:	60 e1       	ldi	r22, 0x10	; 16
    666c:	70 e0       	ldi	r23, 0x00	; 0
    666e:	8d 2d       	mov	r24, r13
    6670:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
    6674:	4e 2d       	mov	r20, r14
    6676:	61 e1       	ldi	r22, 0x11	; 17
    6678:	70 e0       	ldi	r23, 0x00	; 0
    667a:	8d 2d       	mov	r24, r13
    667c:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
connect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:81
    return 0;

  // set destination IP
  w5500.writeSnDIPR(s, addr);
  w5500.writeSnDPORT(s, port);
  w5500.execCmdSn(s, Sock_CONNECT);
    6680:	64 e0       	ldi	r22, 0x04	; 4
    6682:	70 e0       	ldi	r23, 0x00	; 0
    6684:	8d 2d       	mov	r24, r13
    6686:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient7connectE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:62
    _sock = MAX_SOCK_NUM;
    return 0;
  }

  while (status() != SnSR::ESTABLISHED) {
    668a:	c8 01       	movw	r24, r16
    668c:	0e 94 2f 9b 	call	0x1365e	; 0x1365e <EthernetClient::status()>
    6690:	87 31       	cpi	r24, 0x17	; 23
    6692:	61 f0       	breq	.+24     	; 0x66ac <EthernetClient::connect(IPAddress, unsigned int)+0x126>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:63
    delay(1);
    6694:	61 e0       	ldi	r22, 0x01	; 1
    6696:	70 e0       	ldi	r23, 0x00	; 0
    6698:	80 e0       	ldi	r24, 0x00	; 0
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:64
    if (status() == SnSR::CLOSED) {
    66a0:	c8 01       	movw	r24, r16
    66a2:	0e 94 2f 9b 	call	0x1365e	; 0x1365e <EthernetClient::status()>
    66a6:	81 11       	cpse	r24, r1
    66a8:	f0 cf       	rjmp	.-32     	; 0x668a <EthernetClient::connect(IPAddress, unsigned int)+0x104>
    66aa:	b1 cf       	rjmp	.-158    	; 0x660e <EthernetClient::connect(IPAddress, unsigned int)+0x88>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:70
      _sock = MAX_SOCK_NUM;
      return 0;
    }
  }

  return 1;
    66ac:	81 e0       	ldi	r24, 0x01	; 1
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	77 cf       	rjmp	.-274    	; 0x65a0 <EthernetClient::connect(IPAddress, unsigned int)+0x1a>

000066b2 <DNSClient::getHostByName(char const*, IPAddress&)>:
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:119
        return 0;
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    66b2:	4f 92       	push	r4
    66b4:	5f 92       	push	r5
    66b6:	6f 92       	push	r6
    66b8:	7f 92       	push	r7
    66ba:	8f 92       	push	r8
    66bc:	9f 92       	push	r9
    66be:	af 92       	push	r10
    66c0:	bf 92       	push	r11
    66c2:	cf 92       	push	r12
    66c4:	df 92       	push	r13
    66c6:	ef 92       	push	r14
    66c8:	ff 92       	push	r15
    66ca:	0f 93       	push	r16
    66cc:	1f 93       	push	r17
    66ce:	cf 93       	push	r28
    66d0:	df 93       	push	r29
    66d2:	cd b7       	in	r28, 0x3d	; 61
    66d4:	de b7       	in	r29, 0x3e	; 62
    66d6:	63 97       	sbiw	r28, 0x13	; 19
    66d8:	0f b6       	in	r0, 0x3f	; 63
    66da:	f8 94       	cli
    66dc:	de bf       	out	0x3e, r29	; 62
    66de:	0f be       	out	0x3f, r0	; 63
    66e0:	cd bf       	out	0x3d, r28	; 61
    66e2:	7c 01       	movw	r14, r24
    66e4:	6b 01       	movw	r12, r22
    66e6:	3a 01       	movw	r6, r20
    66e8:	fb 01       	movw	r30, r22
    66ea:	db 01       	movw	r26, r22
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:62

int DNSClient::inet_aton(const char* aIPAddrString, IPAddress& aResult)
{
    // See if we've been given a valid IP address
    const char* p =aIPAddrString;
    while (*p &&
    66ec:	8d 91       	ld	r24, X+
    66ee:	81 11       	cpse	r24, r1
    66f0:	fd cf       	rjmp	.-6      	; 0x66ec <DNSClient::getHostByName(char const*, IPAddress&)+0x3a>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:73
    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:72

    if (*p == '\0')
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	80 e0       	ldi	r24, 0x00	; 0
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    66fa:	5a e0       	ldi	r21, 0x0A	; 10
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:74
    {
        // It's looking promising, we haven't found any invalid characters
        p = aIPAddrString;
        int segment =0;
        int segmentValue =0;
        while (*p && (segment < 4))
    66fc:	41 91       	ld	r20, Z+
    66fe:	44 23       	and	r20, r20
    6700:	01 f1       	breq	.+64     	; 0x6742 <DNSClient::getHostByName(char const*, IPAddress&)+0x90>
    6702:	84 30       	cpi	r24, 0x04	; 4
    6704:	91 05       	cpc	r25, r1
    6706:	0c f0       	brlt	.+2      	; 0x670a <DNSClient::getHostByName(char const*, IPAddress&)+0x58>
    6708:	42 c0       	rjmp	.+132    	; 0x678e <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:76
        {
            if (*p == '.')
    670a:	4e 32       	cpi	r20, 0x2E	; 46
    670c:	69 f4       	brne	.+26     	; 0x6728 <DNSClient::getHostByName(char const*, IPAddress&)+0x76>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:79
            {
                // We've reached the end of a segment
                if (segmentValue > 255)
    670e:	2f 3f       	cpi	r18, 0xFF	; 255
    6710:	31 05       	cpc	r19, r1
    6712:	09 f0       	breq	.+2      	; 0x6716 <DNSClient::getHostByName(char const*, IPAddress&)+0x64>
    6714:	e4 f5       	brge	.+120    	; 0x678e <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:86
                    // You can't have IP address segments that don't fit in a byte
                    return 0;
                }
                else
                {
                    aResult[segment] = (byte)segmentValue;
    6716:	d3 01       	movw	r26, r6
    6718:	a8 0f       	add	r26, r24
    671a:	b9 1f       	adc	r27, r25
    671c:	12 96       	adiw	r26, 0x02	; 2
    671e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:87
                    segment++;
    6720:	01 96       	adiw	r24, 0x01	; 1
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:88
                    segmentValue = 0;
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	ea cf       	rjmp	.-44     	; 0x66fc <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
inet_aton():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:94
                }
            }
            else
            {
                // Next digit
                segmentValue = (segmentValue*10)+(*p - '0');
    6728:	52 9f       	mul	r21, r18
    672a:	b0 01       	movw	r22, r0
    672c:	53 9f       	mul	r21, r19
    672e:	70 0d       	add	r23, r0
    6730:	11 24       	eor	r1, r1
    6732:	24 2f       	mov	r18, r20
    6734:	44 0f       	add	r20, r20
    6736:	33 0b       	sbc	r19, r19
    6738:	20 53       	subi	r18, 0x30	; 48
    673a:	31 09       	sbc	r19, r1
    673c:	26 0f       	add	r18, r22
    673e:	37 1f       	adc	r19, r23
    6740:	dd cf       	rjmp	.-70     	; 0x66fc <DNSClient::getHostByName(char const*, IPAddress&)+0x4a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:100
            }
            p++;
        }
        // We've reached the end of address, but there'll still be the last
        // segment to deal with
        if ((segmentValue > 255) || (segment > 3))
    6742:	2f 3f       	cpi	r18, 0xFF	; 255
    6744:	31 05       	cpc	r19, r1
    6746:	09 f0       	breq	.+2      	; 0x674a <DNSClient::getHostByName(char const*, IPAddress&)+0x98>
    6748:	14 f5       	brge	.+68     	; 0x678e <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
    674a:	84 30       	cpi	r24, 0x04	; 4
    674c:	91 05       	cpc	r25, r1
    674e:	fc f4       	brge	.+62     	; 0x678e <DNSClient::getHostByName(char const*, IPAddress&)+0xdc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:108
            // or more than four segments
            return 0;
        }
        else
        {
            aResult[segment] = (byte)segmentValue;
    6750:	68 0e       	add	r6, r24
    6752:	79 1e       	adc	r7, r25
    6754:	f3 01       	movw	r30, r6
    6756:	22 83       	std	Z+2, r18	; 0x02
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:126

    // See if it's a numeric IP address
    if (inet_aton(aHostname, aResult))
    {
        // It is, our work here is done
        return 1;
    6758:	cc 24       	eor	r12, r12
    675a:	c3 94       	inc	r12
    675c:	d1 2c       	mov	r13, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:173
        // We're done with the socket now
        iUdp.stop();
    }

    return ret;
}
    675e:	c6 01       	movw	r24, r12
    6760:	63 96       	adiw	r28, 0x13	; 19
    6762:	0f b6       	in	r0, 0x3f	; 63
    6764:	f8 94       	cli
    6766:	de bf       	out	0x3e, r29	; 62
    6768:	0f be       	out	0x3f, r0	; 63
    676a:	cd bf       	out	0x3d, r28	; 61
    676c:	df 91       	pop	r29
    676e:	cf 91       	pop	r28
    6770:	1f 91       	pop	r17
    6772:	0f 91       	pop	r16
    6774:	ff 90       	pop	r15
    6776:	ef 90       	pop	r14
    6778:	df 90       	pop	r13
    677a:	cf 90       	pop	r12
    677c:	bf 90       	pop	r11
    677e:	af 90       	pop	r10
    6780:	9f 90       	pop	r9
    6782:	8f 90       	pop	r8
    6784:	7f 90       	pop	r7
    6786:	6f 90       	pop	r6
    6788:	5f 90       	pop	r5
    678a:	4f 90       	pop	r4
    678c:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:130
        // It is, our work here is done
        return 1;
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    678e:	f7 01       	movw	r30, r14
    6790:	42 81       	ldd	r20, Z+2	; 0x02
    6792:	53 81       	ldd	r21, Z+3	; 0x03
    6794:	64 81       	ldd	r22, Z+4	; 0x04
    6796:	75 81       	ldd	r23, Z+5	; 0x05
    6798:	80 91 15 0c 	lds	r24, 0x0C15	; 0x800c15 <_ZL11INADDR_NONE.lto_priv.196+0x2>
    679c:	90 91 16 0c 	lds	r25, 0x0C16	; 0x800c16 <_ZL11INADDR_NONE.lto_priv.196+0x3>
    67a0:	a0 91 17 0c 	lds	r26, 0x0C17	; 0x800c17 <_ZL11INADDR_NONE.lto_priv.196+0x4>
    67a4:	b0 91 18 0c 	lds	r27, 0x0C18	; 0x800c18 <_ZL11INADDR_NONE.lto_priv.196+0x5>
    67a8:	48 17       	cp	r20, r24
    67aa:	59 07       	cpc	r21, r25
    67ac:	6a 07       	cpc	r22, r26
    67ae:	7b 07       	cpc	r23, r27
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x102>
    67b2:	00 c2       	rjmp	.+1024   	; 0x6bb4 <DNSClient::getHostByName(char const*, IPAddress&)+0x502>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:136
    {
        return INVALID_SERVER;
    }
	
    // Find a socket to use
    if (iUdp.begin(1024+(millis() & 0xF)) == 1)
    67b4:	87 01       	movw	r16, r14
    67b6:	08 5f       	subi	r16, 0xF8	; 248
    67b8:	1f 4f       	sbci	r17, 0xFF	; 255
    67ba:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    67be:	6f 70       	andi	r22, 0x0F	; 15
    67c0:	77 27       	eor	r23, r23
    67c2:	7c 5f       	subi	r23, 0xFC	; 252
    67c4:	c8 01       	movw	r24, r16
    67c6:	0e 94 8c 9a 	call	0x13518	; 0x13518 <EthernetUDP::begin(unsigned int)>
    67ca:	81 30       	cpi	r24, 0x01	; 1
    67cc:	09 f0       	breq	.+2      	; 0x67d0 <DNSClient::getHostByName(char const*, IPAddress&)+0x11e>
    67ce:	f7 c1       	rjmp	.+1006   	; 0x6bbe <DNSClient::getHostByName(char const*, IPAddress&)+0x50c>
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    67d0:	82 ee       	ldi	r24, 0xE2	; 226
    67d2:	92 e0       	ldi	r25, 0x02	; 2
    67d4:	9a 83       	std	Y+2, r25	; 0x02
    67d6:	89 83       	std	Y+1, r24	; 0x01
    67d8:	f7 01       	movw	r30, r14
    67da:	82 81       	ldd	r24, Z+2	; 0x02
    67dc:	93 81       	ldd	r25, Z+3	; 0x03
    67de:	a4 81       	ldd	r26, Z+4	; 0x04
    67e0:	b5 81       	ldd	r27, Z+5	; 0x05
    67e2:	8b 83       	std	Y+3, r24	; 0x03
    67e4:	9c 83       	std	Y+4, r25	; 0x04
    67e6:	ad 83       	std	Y+5, r26	; 0x05
    67e8:	be 83       	std	Y+6, r27	; 0x06
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:143
        // Try up to three times
        int retries = 0;
//        while ((retries < 3) && (ret <= 0))
        {
            // Send DNS request
            ret = iUdp.beginPacket(iDNSServer, DNS_PORT);
    67ea:	45 e3       	ldi	r20, 0x35	; 53
    67ec:	50 e0       	ldi	r21, 0x00	; 0
    67ee:	be 01       	movw	r22, r28
    67f0:	6f 5f       	subi	r22, 0xFF	; 255
    67f2:	7f 4f       	sbci	r23, 0xFF	; 255
    67f4:	c8 01       	movw	r24, r16
    67f6:	0e 94 f0 9a 	call	0x135e0	; 0x135e0 <EthernetUDP::beginPacket(IPAddress, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:144
            if (ret != 0)
    67fa:	89 2b       	or	r24, r25
    67fc:	31 f4       	brne	.+12     	; 0x680a <DNSClient::getHostByName(char const*, IPAddress&)+0x158>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    67fe:	d1 2c       	mov	r13, r1
    6800:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:169
            }
            retries++;
        }

        // We're done with the socket now
        iUdp.stop();
    6802:	c8 01       	movw	r24, r16
    6804:	0e 94 ba 9a 	call	0x13574	; 0x13574 <EthernetUDP::stop()>
    6808:	aa cf       	rjmp	.-172    	; 0x675e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:195
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    //    |                    ARCOUNT                    |
    //    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    // As we only support one request at a time at present, we can simplify
    // some of this header
    iRequestId = millis(); // generate a random ID
    680a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    680e:	f7 01       	movw	r30, r14
    6810:	77 83       	std	Z+7, r23	; 0x07
    6812:	66 83       	std	Z+6, r22	; 0x06
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:200
    uint16_t twoByteBuffer;

    // FIXME We should also check that there's enough space available to write to, rather
    // FIXME than assume there's enough space (as the code does at present)
    iUdp.write((uint8_t*)&iRequestId, sizeof(iRequestId));
    6814:	42 e0       	ldi	r20, 0x02	; 2
    6816:	50 e0       	ldi	r21, 0x00	; 0
    6818:	b7 01       	movw	r22, r14
    681a:	6a 5f       	subi	r22, 0xFA	; 250
    681c:	7f 4f       	sbci	r23, 0xFF	; 255
    681e:	c8 01       	movw	r24, r16
    6820:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:202

    twoByteBuffer = htons(QUERY_FLAG | OPCODE_STANDARD_QUERY | RECURSION_DESIRED_FLAG);
    6824:	81 e0       	ldi	r24, 0x01	; 1
    6826:	90 e0       	ldi	r25, 0x00	; 0
    6828:	9a 83       	std	Y+2, r25	; 0x02
    682a:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:203
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    682c:	42 e0       	ldi	r20, 0x02	; 2
    682e:	50 e0       	ldi	r21, 0x00	; 0
    6830:	be 01       	movw	r22, r28
    6832:	6f 5f       	subi	r22, 0xFF	; 255
    6834:	7f 4f       	sbci	r23, 0xFF	; 255
    6836:	c8 01       	movw	r24, r16
    6838:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:205

    twoByteBuffer = htons(1);  // One question record
    683c:	80 e0       	ldi	r24, 0x00	; 0
    683e:	91 e0       	ldi	r25, 0x01	; 1
    6840:	9a 83       	std	Y+2, r25	; 0x02
    6842:	89 83       	std	Y+1, r24	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:206
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6844:	42 e0       	ldi	r20, 0x02	; 2
    6846:	50 e0       	ldi	r21, 0x00	; 0
    6848:	be 01       	movw	r22, r28
    684a:	6f 5f       	subi	r22, 0xFF	; 255
    684c:	7f 4f       	sbci	r23, 0xFF	; 255
    684e:	c8 01       	movw	r24, r16
    6850:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:208

    twoByteBuffer = 0;  // Zero answer records
    6854:	1a 82       	std	Y+2, r1	; 0x02
    6856:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:209
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6858:	42 e0       	ldi	r20, 0x02	; 2
    685a:	50 e0       	ldi	r21, 0x00	; 0
    685c:	be 01       	movw	r22, r28
    685e:	6f 5f       	subi	r22, 0xFF	; 255
    6860:	7f 4f       	sbci	r23, 0xFF	; 255
    6862:	c8 01       	movw	r24, r16
    6864:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:211

    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6868:	42 e0       	ldi	r20, 0x02	; 2
    686a:	50 e0       	ldi	r21, 0x00	; 0
    686c:	be 01       	movw	r22, r28
    686e:	6f 5f       	subi	r22, 0xFF	; 255
    6870:	7f 4f       	sbci	r23, 0xFF	; 255
    6872:	c8 01       	movw	r24, r16
    6874:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:213
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6878:	42 e0       	ldi	r20, 0x02	; 2
    687a:	50 e0       	ldi	r21, 0x00	; 0
    687c:	be 01       	movw	r22, r28
    687e:	6f 5f       	subi	r22, 0xFF	; 255
    6880:	7f 4f       	sbci	r23, 0xFF	; 255
    6882:	c8 01       	movw	r24, r16
    6884:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216

    // Build question
    const char* start =aName;
    6888:	56 01       	movw	r10, r12
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:220
    const char* end =start;
    uint8_t len;
    // Run through the name being requested
    while (*end)
    688a:	f6 01       	movw	r30, r12
    688c:	80 81       	ld	r24, Z
    688e:	88 23       	and	r24, r24
    6890:	01 f1       	breq	.+64     	; 0x68d2 <DNSClient::getHostByName(char const*, IPAddress&)+0x220>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:223
    {
        // Find out how long this section of the name is
        end = start;
    6892:	65 01       	movw	r12, r10
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
        while (*end && (*end != '.') )
    6894:	f6 01       	movw	r30, r12
    6896:	81 91       	ld	r24, Z+
    6898:	2f 01       	movw	r4, r30
    689a:	88 23       	and	r24, r24
    689c:	11 f0       	breq	.+4      	; 0x68a2 <DNSClient::getHostByName(char const*, IPAddress&)+0x1f0>
    689e:	8e 32       	cpi	r24, 0x2E	; 46
    68a0:	b1 f4       	brne	.+44     	; 0x68ce <DNSClient::getHostByName(char const*, IPAddress&)+0x21c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:229
        {
            end++;
        }

        if (end-start > 0)
    68a2:	46 01       	movw	r8, r12
    68a4:	8a 18       	sub	r8, r10
    68a6:	9b 08       	sbc	r9, r11
    68a8:	18 14       	cp	r1, r8
    68aa:	19 04       	cpc	r1, r9
    68ac:	74 f4       	brge	.+28     	; 0x68ca <DNSClient::getHostByName(char const*, IPAddress&)+0x218>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:232
        {
            // Write out the size of this section
            len = end-start;
    68ae:	8d 86       	std	Y+13, r8	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:233
            iUdp.write(&len, sizeof(len));
    68b0:	41 e0       	ldi	r20, 0x01	; 1
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	be 01       	movw	r22, r28
    68b6:	63 5f       	subi	r22, 0xF3	; 243
    68b8:	7f 4f       	sbci	r23, 0xFF	; 255
    68ba:	c8 01       	movw	r24, r16
    68bc:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:235
            // And then write out the section
            iUdp.write((uint8_t*)start, end-start);
    68c0:	a4 01       	movw	r20, r8
    68c2:	b5 01       	movw	r22, r10
    68c4:	c8 01       	movw	r24, r16
    68c6:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:216
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    // and zero additional records
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));

    // Build question
    const char* start =aName;
    68ca:	52 01       	movw	r10, r4
    68cc:	de cf       	rjmp	.-68     	; 0x688a <DNSClient::getHostByName(char const*, IPAddress&)+0x1d8>
BuildRequest():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:224
    // Run through the name being requested
    while (*end)
    {
        // Find out how long this section of the name is
        end = start;
        while (*end && (*end != '.') )
    68ce:	62 01       	movw	r12, r4
    68d0:	e1 cf       	rjmp	.-62     	; 0x6894 <DNSClient::getHostByName(char const*, IPAddress&)+0x1e2>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:242
        start = end+1;
    }

    // We've got to the end of the question name, so
    // terminate it with a zero-length section
    len = 0;
    68d2:	1d 86       	std	Y+13, r1	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:243
    iUdp.write(&len, sizeof(len));
    68d4:	41 e0       	ldi	r20, 0x01	; 1
    68d6:	50 e0       	ldi	r21, 0x00	; 0
    68d8:	be 01       	movw	r22, r28
    68da:	63 5f       	subi	r22, 0xF3	; 243
    68dc:	7f 4f       	sbci	r23, 0xFF	; 255
    68de:	c8 01       	movw	r24, r16
    68e0:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:245
    // Finally the type and class of question
    twoByteBuffer = htons(TYPE_A);
    68e4:	c1 2c       	mov	r12, r1
    68e6:	dd 24       	eor	r13, r13
    68e8:	d3 94       	inc	r13
    68ea:	da 82       	std	Y+2, r13	; 0x02
    68ec:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:246
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    68ee:	42 e0       	ldi	r20, 0x02	; 2
    68f0:	50 e0       	ldi	r21, 0x00	; 0
    68f2:	be 01       	movw	r22, r28
    68f4:	6f 5f       	subi	r22, 0xFF	; 255
    68f6:	7f 4f       	sbci	r23, 0xFF	; 255
    68f8:	c8 01       	movw	r24, r16
    68fa:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:248

    twoByteBuffer = htons(CLASS_IN);  // Internet class of question
    68fe:	da 82       	std	Y+2, r13	; 0x02
    6900:	c9 82       	std	Y+1, r12	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:249
    iUdp.write((uint8_t*)&twoByteBuffer, sizeof(twoByteBuffer));
    6902:	42 e0       	ldi	r20, 0x02	; 2
    6904:	50 e0       	ldi	r21, 0x00	; 0
    6906:	be 01       	movw	r22, r28
    6908:	6f 5f       	subi	r22, 0xFF	; 255
    690a:	7f 4f       	sbci	r23, 0xFF	; 255
    690c:	c8 01       	movw	r24, r16
    690e:	0e 94 b1 98 	call	0x13162	; 0x13162 <EthernetUDP::write(unsigned char const*, unsigned int)>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:151
                // Now output the request data
                ret = BuildRequest(aHostname);
                if (ret != 0)
                {
                    // And finally send the request
                    ret = iUdp.endPacket();
    6912:	c8 01       	movw	r24, r16
    6914:	0e 94 c7 9a 	call	0x1358e	; 0x1358e <EthernetUDP::endPacket()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:152
                    if (ret != 0)
    6918:	89 2b       	or	r24, r25
    691a:	09 f4       	brne	.+2      	; 0x691e <DNSClient::getHostByName(char const*, IPAddress&)+0x26c>
    691c:	70 cf       	rjmp	.-288    	; 0x67fe <DNSClient::getHostByName(char const*, IPAddress&)+0x14c>
    691e:	f3 e0       	ldi	r31, 0x03	; 3
    6920:	af 2e       	mov	r10, r31
    6922:	b1 2c       	mov	r11, r1
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
    6924:	23 01       	movw	r4, r6
    6926:	22 e0       	ldi	r18, 0x02	; 2
    6928:	42 0e       	add	r4, r18
    692a:	51 1c       	adc	r5, r1
    692c:	43 c0       	rjmp	.+134    	; 0x69b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:271

    // We've had a reply!
    // Read the UDP header
    uint8_t header[DNS_HEADER_SIZE]; // Enough space to reuse for the DNS header
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
    692e:	f7 01       	movw	r30, r14
    6930:	42 81       	ldd	r20, Z+2	; 0x02
    6932:	53 81       	ldd	r21, Z+3	; 0x03
    6934:	64 81       	ldd	r22, Z+4	; 0x04
    6936:	75 81       	ldd	r23, Z+5	; 0x05
    6938:	81 8d       	ldd	r24, Z+25	; 0x19
    693a:	92 8d       	ldd	r25, Z+26	; 0x1a
    693c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    693e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    6940:	48 17       	cp	r20, r24
    6942:	59 07       	cpc	r21, r25
    6944:	6a 07       	cpc	r22, r26
    6946:	7b 07       	cpc	r23, r27
    6948:	09 f0       	breq	.+2      	; 0x694c <DNSClient::getHostByName(char const*, IPAddress&)+0x29a>
    694a:	2a c1       	rjmp	.+596    	; 0x6ba0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
    694c:	85 8d       	ldd	r24, Z+29	; 0x1d
    694e:	96 8d       	ldd	r25, Z+30	; 0x1e
    6950:	c5 97       	sbiw	r24, 0x35	; 53
    6952:	09 f0       	breq	.+2      	; 0x6956 <DNSClient::getHostByName(char const*, IPAddress&)+0x2a4>
    6954:	25 c1       	rjmp	.+586    	; 0x6ba0 <DNSClient::getHostByName(char const*, IPAddress&)+0x4ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:279
        // It's not from who we expected
        return INVALID_SERVER;
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    6956:	81 a1       	ldd	r24, Z+33	; 0x21
    6958:	92 a1       	ldd	r25, Z+34	; 0x22
    695a:	0c 97       	sbiw	r24, 0x0c	; 12
    695c:	0c f4       	brge	.+2      	; 0x6960 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ae>
    695e:	25 c1       	rjmp	.+586    	; 0x6baa <DNSClient::getHostByName(char const*, IPAddress&)+0x4f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:283
    {
        return TRUNCATED;
    }
    iUdp.read(header, DNS_HEADER_SIZE);
    6960:	4c e0       	ldi	r20, 0x0C	; 12
    6962:	50 e0       	ldi	r21, 0x00	; 0
    6964:	be 01       	movw	r22, r28
    6966:	6f 5f       	subi	r22, 0xFF	; 255
    6968:	7f 4f       	sbci	r23, 0xFF	; 255
    696a:	c8 01       	movw	r24, r16
    696c:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:285

    uint16_t header_flags = htons(*((uint16_t*)&header[2]));
    6970:	8b 81       	ldd	r24, Y+3	; 0x03
    6972:	9c 81       	ldd	r25, Y+4	; 0x04
    6974:	98 27       	eor	r25, r24
    6976:	89 27       	eor	r24, r25
    6978:	98 27       	eor	r25, r24
    697a:	9a 8b       	std	Y+18, r25	; 0x12
    697c:	89 8b       	std	Y+17, r24	; 0x11
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:287
    // Check that it's a response to this request
    if ( ( iRequestId != (*((uint16_t*)&header[0])) ) ||
    697e:	f7 01       	movw	r30, r14
    6980:	46 81       	ldd	r20, Z+6	; 0x06
    6982:	57 81       	ldd	r21, Z+7	; 0x07
    6984:	29 81       	ldd	r18, Y+1	; 0x01
    6986:	3a 81       	ldd	r19, Y+2	; 0x02
    6988:	42 17       	cp	r20, r18
    698a:	53 07       	cpc	r21, r19
    698c:	11 f4       	brne	.+4      	; 0x6992 <DNSClient::getHostByName(char const*, IPAddress&)+0x2e0>
    698e:	97 fd       	sbrc	r25, 7
    6990:	2f c0       	rjmp	.+94     	; 0x69f0 <DNSClient::getHostByName(char const*, IPAddress&)+0x33e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:291
        ((header_flags & QUERY_RESPONSE_MASK) != (uint16_t)RESPONSE_FLAG) )
    {
        // Mark the entire packet as read
        iUdp.flush();
    6992:	c8 01       	movw	r24, r16
    6994:	0e 94 bb 80 	call	0x10176	; 0x10176 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:292
        return INVALID_RESPONSE;
    6998:	ec ef       	ldi	r30, 0xFC	; 252
    699a:	ce 2e       	mov	r12, r30
    699c:	dd 24       	eor	r13, r13
    699e:	da 94       	dec	r13
    69a0:	81 e0       	ldi	r24, 0x01	; 1
    69a2:	a8 1a       	sub	r10, r24
    69a4:	b1 08       	sbc	r11, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:157
                    if (ret != 0)
                    {
                        // Now wait for a response
                        int wait_retries = 0;
                        ret = TIMED_OUT;
                        while ((wait_retries < 3) && (ret == TIMED_OUT))
    69a6:	09 f4       	brne	.+2      	; 0x69aa <DNSClient::getHostByName(char const*, IPAddress&)+0x2f8>
    69a8:	2c cf       	rjmp	.-424    	; 0x6802 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
    69aa:	ff ef       	ldi	r31, 0xFF	; 255
    69ac:	cf 16       	cp	r12, r31
    69ae:	df 06       	cpc	r13, r31
    69b0:	09 f0       	breq	.+2      	; 0x69b4 <DNSClient::getHostByName(char const*, IPAddress&)+0x302>
    69b2:	27 cf       	rjmp	.-434    	; 0x6802 <DNSClient::getHostByName(char const*, IPAddress&)+0x150>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:257
}


uint16_t DNSClient::ProcessResponse(uint16_t aTimeout, IPAddress& aAddress)
{
    uint32_t startTime = millis();
    69b4:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    69b8:	3b 01       	movw	r6, r22
    69ba:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:260

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    69bc:	c8 01       	movw	r24, r16
    69be:	0e 94 df 99 	call	0x133be	; 0x133be <EthernetUDP::parsePacket()>
    69c2:	18 16       	cp	r1, r24
    69c4:	19 06       	cpc	r1, r25
    69c6:	0c f4       	brge	.+2      	; 0x69ca <DNSClient::getHostByName(char const*, IPAddress&)+0x318>
    69c8:	b2 cf       	rjmp	.-156    	; 0x692e <DNSClient::getHostByName(char const*, IPAddress&)+0x27c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:262
    {
        if((millis() - startTime) > aTimeout)
    69ca:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    69ce:	66 19       	sub	r22, r6
    69d0:	77 09       	sbc	r23, r7
    69d2:	88 09       	sbc	r24, r8
    69d4:	99 09       	sbc	r25, r9
    69d6:	69 38       	cpi	r22, 0x89	; 137
    69d8:	73 41       	sbci	r23, 0x13	; 19
    69da:	81 05       	cpc	r24, r1
    69dc:	91 05       	cpc	r25, r1
    69de:	08 f0       	brcs	.+2      	; 0x69e2 <DNSClient::getHostByName(char const*, IPAddress&)+0x330>
    69e0:	db c0       	rjmp	.+438    	; 0x6b98 <DNSClient::getHostByName(char const*, IPAddress&)+0x4e6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:264
            return TIMED_OUT;
        delay(50);
    69e2:	62 e3       	ldi	r22, 0x32	; 50
    69e4:	70 e0       	ldi	r23, 0x00	; 0
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	90 e0       	ldi	r25, 0x00	; 0
    69ea:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
    69ee:	e6 cf       	rjmp	.-52     	; 0x69bc <DNSClient::getHostByName(char const*, IPAddress&)+0x30a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:296
        iUdp.flush();
        return INVALID_RESPONSE;
    }
    // Check for any errors in the response (or in our request)
    // although we don't do anything to get round these
    if ( (header_flags & TRUNCATION_FLAG) || (header_flags & RESP_MASK) )
    69f0:	8f 70       	andi	r24, 0x0F	; 15
    69f2:	92 70       	andi	r25, 0x02	; 2
    69f4:	89 2b       	or	r24, r25
    69f6:	41 f0       	breq	.+16     	; 0x6a08 <DNSClient::getHostByName(char const*, IPAddress&)+0x356>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:299
    {
        // Mark the entire packet as read
        iUdp.flush();
    69f8:	c8 01       	movw	r24, r16
    69fa:	0e 94 bb 80 	call	0x10176	; 0x10176 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:300
        return -5; //INVALID_RESPONSE;
    69fe:	7b ef       	ldi	r23, 0xFB	; 251
    6a00:	c7 2e       	mov	r12, r23
    6a02:	dd 24       	eor	r13, r13
    6a04:	da 94       	dec	r13
    6a06:	cc cf       	rjmp	.-104    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:304
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    6a08:	6f 80       	ldd	r6, Y+7	; 0x07
    6a0a:	78 84       	ldd	r7, Y+8	; 0x08
    6a0c:	76 24       	eor	r7, r6
    6a0e:	67 24       	eor	r6, r7
    6a10:	76 24       	eor	r7, r6
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6a12:	d1 2c       	mov	r13, r1
    6a14:	c1 2c       	mov	r12, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:305
        return -5; //INVALID_RESPONSE;
    }

    // And make sure we've got (at least) one answer
    uint16_t answerCount = htons(*((uint16_t*)&header[6]));
    if (answerCount == 0 )
    6a16:	61 14       	cp	r6, r1
    6a18:	71 04       	cpc	r7, r1
    6a1a:	d1 f4       	brne	.+52     	; 0x6a50 <DNSClient::getHostByName(char const*, IPAddress&)+0x39e>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:308
    {
        // Mark the entire packet as read
        iUdp.flush();
    6a1c:	c8 01       	movw	r24, r16
    6a1e:	0e 94 bb 80 	call	0x10176	; 0x10176 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:309
        return -6; //INVALID_RESPONSE;
    6a22:	6a ef       	ldi	r22, 0xFA	; 250
    6a24:	c6 2e       	mov	r12, r22
    6a26:	dd 24       	eor	r13, r13
    6a28:	da 94       	dec	r13
    6a2a:	ba cf       	rjmp	.-140    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:329
                while(len--)
                {
                    iUdp.read(); // we don't care about the returned byte
                }
            }
        } while (len != 0);
    6a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a2e:	81 11       	cpse	r24, r1
    6a30:	17 c0       	rjmp	.+46     	; 0x6a60 <DNSClient::getHostByName(char const*, IPAddress&)+0x3ae>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:334

        // Now jump over the type and class
        for (int i =0; i < 4; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6a32:	c8 01       	movw	r24, r16
    6a34:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6a38:	c8 01       	movw	r24, r16
    6a3a:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6a3e:	c8 01       	movw	r24, r16
    6a40:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6a44:	c8 01       	movw	r24, r16
    6a46:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:313
        iUdp.flush();
        return -6; //INVALID_RESPONSE;
    }

    // Skip over any questions
    for (uint16_t i =0; i < htons(*((uint16_t*)&header[4])); i++)
    6a4a:	ff ef       	ldi	r31, 0xFF	; 255
    6a4c:	cf 1a       	sub	r12, r31
    6a4e:	df 0a       	sbc	r13, r31
    6a50:	8d 81       	ldd	r24, Y+5	; 0x05
    6a52:	9e 81       	ldd	r25, Y+6	; 0x06
    6a54:	98 27       	eor	r25, r24
    6a56:	89 27       	eor	r24, r25
    6a58:	98 27       	eor	r25, r24
    6a5a:	c8 16       	cp	r12, r24
    6a5c:	d9 06       	cpc	r13, r25
    6a5e:	a8 f4       	brcc	.+42     	; 0x6a8a <DNSClient::getHostByName(char const*, IPAddress&)+0x3d8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:319
    {
        // Skip over the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6a60:	41 e0       	ldi	r20, 0x01	; 1
    6a62:	50 e0       	ldi	r21, 0x00	; 0
    6a64:	be 01       	movw	r22, r28
    6a66:	63 5f       	subi	r22, 0xF3	; 243
    6a68:	7f 4f       	sbci	r23, 0xFF	; 255
    6a6a:	c8 01       	movw	r24, r16
    6a6c:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:320
            if (len > 0)
    6a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a72:	88 23       	and	r24, r24
    6a74:	d9 f2       	breq	.-74     	; 0x6a2c <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:324
            {
                // Don't need to actually read the data out for the string, just
                // advance ptr to beyond it
                while(len--)
    6a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a78:	9f ef       	ldi	r25, 0xFF	; 255
    6a7a:	98 0f       	add	r25, r24
    6a7c:	9d 87       	std	Y+13, r25	; 0x0d
    6a7e:	88 23       	and	r24, r24
    6a80:	a9 f2       	breq	.-86     	; 0x6a2c <DNSClient::getHostByName(char const*, IPAddress&)+0x37a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:326
                {
                    iUdp.read(); // we don't care about the returned byte
    6a82:	c8 01       	movw	r24, r16
    6a84:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6a88:	f6 cf       	rjmp	.-20     	; 0x6a76 <DNSClient::getHostByName(char const*, IPAddress&)+0x3c4>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    6a8a:	91 2c       	mov	r9, r1
    6a8c:	81 2c       	mov	r8, r1
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:349
    {
        // Skip the name
        uint8_t len;
        do
        {
            iUdp.read(&len, sizeof(len));
    6a8e:	41 e0       	ldi	r20, 0x01	; 1
    6a90:	50 e0       	ldi	r21, 0x00	; 0
    6a92:	be 01       	movw	r22, r28
    6a94:	6d 5e       	subi	r22, 0xED	; 237
    6a96:	7f 4f       	sbci	r23, 0xFF	; 255
    6a98:	c8 01       	movw	r24, r16
    6a9a:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:350
            if ((len & LABEL_COMPRESSION_MASK) == 0)
    6a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    6aa0:	98 2f       	mov	r25, r24
    6aa2:	90 7c       	andi	r25, 0xC0	; 192
    6aa4:	61 f4       	brne	.+24     	; 0x6abe <DNSClient::getHostByName(char const*, IPAddress&)+0x40c>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:353
            {
                // It's just a normal label
                if (len > 0)
    6aa6:	88 23       	and	r24, r24
    6aa8:	89 f0       	breq	.+34     	; 0x6acc <DNSClient::getHostByName(char const*, IPAddress&)+0x41a>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:358
                {
                    // And it's got a length
                    // Don't need to actually read the data out for the string,
                    // just advance ptr to beyond it
                    while(len--)
    6aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    6aac:	9f ef       	ldi	r25, 0xFF	; 255
    6aae:	98 0f       	add	r25, r24
    6ab0:	9b 8b       	std	Y+19, r25	; 0x13
    6ab2:	88 23       	and	r24, r24
    6ab4:	41 f0       	breq	.+16     	; 0x6ac6 <DNSClient::getHostByName(char const*, IPAddress&)+0x414>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:360
                    {
                        iUdp.read(); // we don't care about the returned byte
    6ab6:	c8 01       	movw	r24, r16
    6ab8:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6abc:	f6 cf       	rjmp	.-20     	; 0x6aaa <DNSClient::getHostByName(char const*, IPAddress&)+0x3f8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:373
                // says that a name is either a sequence of labels ended with a
                // 0 length octet or a pointer or a sequence of labels ending in
                // a pointer.  Either way, when we get here we're at the end of
                // the name
                // Skip over the pointer
                iUdp.read(); // we don't care about the returned byte
    6abe:	c8 01       	movw	r24, r16
    6ac0:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:375
                // And set len so that we drop out of the name loop
                len = 0;
    6ac4:	1b 8a       	std	Y+19, r1	; 0x13
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:377
            }
        } while (len != 0);
    6ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    6ac8:	81 11       	cpse	r24, r1
    6aca:	e1 cf       	rjmp	.-62     	; 0x6a8e <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:382

        // Check the type and class
        uint16_t answerType;
        uint16_t answerClass;
        iUdp.read((uint8_t*)&answerType, sizeof(answerType));
    6acc:	42 e0       	ldi	r20, 0x02	; 2
    6ace:	50 e0       	ldi	r21, 0x00	; 0
    6ad0:	be 01       	movw	r22, r28
    6ad2:	61 5f       	subi	r22, 0xF1	; 241
    6ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad6:	c8 01       	movw	r24, r16
    6ad8:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:383
        iUdp.read((uint8_t*)&answerClass, sizeof(answerClass));
    6adc:	42 e0       	ldi	r20, 0x02	; 2
    6ade:	50 e0       	ldi	r21, 0x00	; 0
    6ae0:	be 01       	movw	r22, r28
    6ae2:	63 5f       	subi	r22, 0xF3	; 243
    6ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae6:	c8 01       	movw	r24, r16
    6ae8:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:388

        // Ignore the Time-To-Live as we don't do any caching
        for (int i =0; i < TTL_SIZE; i++)
        {
            iUdp.read(); // we don't care about the returned byte
    6aec:	c8 01       	movw	r24, r16
    6aee:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6af2:	c8 01       	movw	r24, r16
    6af4:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6af8:	c8 01       	movw	r24, r16
    6afa:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
    6afe:	c8 01       	movw	r24, r16
    6b00:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:393
        }

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));
    6b04:	42 e0       	ldi	r20, 0x02	; 2
    6b06:	50 e0       	ldi	r21, 0x00	; 0
    6b08:	be 01       	movw	r22, r28
    6b0a:	6f 5e       	subi	r22, 0xEF	; 239
    6b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6b0e:	c8 01       	movw	r24, r16
    6b10:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6b14:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b16:	98 89       	ldd	r25, Y+16	; 0x10
    6b18:	81 15       	cp	r24, r1
    6b1a:	91 40       	sbci	r25, 0x01	; 1
    6b1c:	e9 f4       	brne	.+58     	; 0x6b58 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
    6b1e:	cd 84       	ldd	r12, Y+13	; 0x0d
    6b20:	de 84       	ldd	r13, Y+14	; 0x0e
    6b22:	dc 24       	eor	r13, r12
    6b24:	cd 24       	eor	r12, r13
    6b26:	dc 24       	eor	r13, r12
    6b28:	81 e0       	ldi	r24, 0x01	; 1
    6b2a:	c8 16       	cp	r12, r24
    6b2c:	d1 04       	cpc	r13, r1
    6b2e:	a1 f4       	brne	.+40     	; 0x6b58 <DNSClient::getHostByName(char const*, IPAddress&)+0x4a6>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:397
        {
            if (htons(header_flags) != 4)
    6b30:	89 89       	ldd	r24, Y+17	; 0x11
    6b32:	9a 89       	ldd	r25, Y+18	; 0x12
    6b34:	81 15       	cp	r24, r1
    6b36:	94 40       	sbci	r25, 0x04	; 4
    6b38:	41 f0       	breq	.+16     	; 0x6b4a <DNSClient::getHostByName(char const*, IPAddress&)+0x498>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:401
            {
                // It's a weird size
                // Mark the entire packet as read
                iUdp.flush();
    6b3a:	c8 01       	movw	r24, r16
    6b3c:	0e 94 bb 80 	call	0x10176	; 0x10176 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:402
                return -9;//INVALID_RESPONSE;
    6b40:	57 ef       	ldi	r21, 0xF7	; 247
    6b42:	c5 2e       	mov	r12, r21
    6b44:	dd 24       	eor	r13, r13
    6b46:	da 94       	dec	r13
    6b48:	2b cf       	rjmp	.-426    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
ProcessResponse():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:404
            }
            iUdp.read(aAddress.raw_address(), 4);
    6b4a:	44 e0       	ldi	r20, 0x04	; 4
    6b4c:	50 e0       	ldi	r21, 0x00	; 0
    6b4e:	b2 01       	movw	r22, r4
    6b50:	c8 01       	movw	r24, r16
    6b52:	0e 94 96 99 	call	0x1332c	; 0x1332c <EthernetUDP::read(unsigned char*, unsigned int)>
    6b56:	24 cf       	rjmp	.-440    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:395

        // And read out the length of this answer
        // Don't need header_flags anymore, so we can reuse it here
        iUdp.read((uint8_t*)&header_flags, sizeof(header_flags));

        if ( (htons(answerType) == TYPE_A) && (htons(answerClass) == CLASS_IN) )
    6b58:	d1 2c       	mov	r13, r1
    6b5a:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6b5c:	89 89       	ldd	r24, Y+17	; 0x11
    6b5e:	9a 89       	ldd	r25, Y+18	; 0x12
    6b60:	98 27       	eor	r25, r24
    6b62:	89 27       	eor	r24, r25
    6b64:	98 27       	eor	r25, r24
    6b66:	c8 16       	cp	r12, r24
    6b68:	d9 06       	cpc	r13, r25
    6b6a:	38 f4       	brcc	.+14     	; 0x6b7a <DNSClient::getHostByName(char const*, IPAddress&)+0x4c8>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:412
            {
                iUdp.read(); // we don't care about the returned byte
    6b6c:	c8 01       	movw	r24, r16
    6b6e:	0e 94 b5 99 	call	0x1336a	; 0x1336a <EthernetUDP::read()>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:410
            return SUCCESS;
        }
        else
        {
            // This isn't an answer type we're after, move onto the next one
            for (uint16_t i =0; i < htons(header_flags); i++)
    6b72:	ff ef       	ldi	r31, 0xFF	; 255
    6b74:	cf 1a       	sub	r12, r31
    6b76:	df 0a       	sbc	r13, r31
    6b78:	f1 cf       	rjmp	.-30     	; 0x6b5c <DNSClient::getHostByName(char const*, IPAddress&)+0x4aa>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:343
    // Now we're up to the bit we're interested in, the answer
    // There might be more than one answer (although we'll just use the first
    // type A answer) and some authority and additional resource records but
    // we're going to ignore all of them.

    for (uint16_t i =0; i < answerCount; i++)
    6b7a:	2f ef       	ldi	r18, 0xFF	; 255
    6b7c:	82 1a       	sub	r8, r18
    6b7e:	92 0a       	sbc	r9, r18
    6b80:	68 14       	cp	r6, r8
    6b82:	79 04       	cpc	r7, r9
    6b84:	09 f0       	breq	.+2      	; 0x6b88 <DNSClient::getHostByName(char const*, IPAddress&)+0x4d6>
    6b86:	83 cf       	rjmp	.-250    	; 0x6a8e <DNSClient::getHostByName(char const*, IPAddress&)+0x3dc>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:418
            }
        }
    }

    // Mark the entire packet as read
    iUdp.flush();
    6b88:	c8 01       	movw	r24, r16
    6b8a:	0e 94 bb 80 	call	0x10176	; 0x10176 <EthernetUDP::flush()>
_ZN9DNSClient13getHostByNameEPKcR9IPAddress():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:421

    // If we get here then we haven't found an answer
    return -10;//INVALID_RESPONSE;
    6b8e:	46 ef       	ldi	r20, 0xF6	; 246
    6b90:	c4 2e       	mov	r12, r20
    6b92:	dd 24       	eor	r13, r13
    6b94:	da 94       	dec	r13
    6b96:	04 cf       	rjmp	.-504    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:263

    // Wait for a response packet
    while(iUdp.parsePacket() <= 0)
    {
        if((millis() - startTime) > aTimeout)
            return TIMED_OUT;
    6b98:	cc 24       	eor	r12, r12
    6b9a:	ca 94       	dec	r12
    6b9c:	dc 2c       	mov	r13, r12
    6b9e:	00 cf       	rjmp	.-512    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:275
    // Check that it's a response from the right server and the right port
    if ( (iDNSServer != iUdp.remoteIP()) || 
        (iUdp.remotePort() != DNS_PORT) )
    {
        // It's not from who we expected
        return INVALID_SERVER;
    6ba0:	2e ef       	ldi	r18, 0xFE	; 254
    6ba2:	c2 2e       	mov	r12, r18
    6ba4:	dd 24       	eor	r13, r13
    6ba6:	da 94       	dec	r13
    6ba8:	fb ce       	rjmp	.-522    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:281
    }

    // Read through the rest of the response
    if (iUdp.available() < DNS_HEADER_SIZE)
    {
        return TRUNCATED;
    6baa:	9d ef       	ldi	r25, 0xFD	; 253
    6bac:	c9 2e       	mov	r12, r25
    6bae:	dd 24       	eor	r13, r13
    6bb0:	da 94       	dec	r13
    6bb2:	f6 ce       	rjmp	.-532    	; 0x69a0 <DNSClient::getHostByName(char const*, IPAddress&)+0x2ee>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:132
    }

    // Check we've got a valid DNS server to use
    if (iDNSServer == INADDR_NONE)
    {
        return INVALID_SERVER;
    6bb4:	8e ef       	ldi	r24, 0xFE	; 254
    6bb6:	c8 2e       	mov	r12, r24
    6bb8:	dd 24       	eor	r13, r13
    6bba:	da 94       	dec	r13
    6bbc:	d0 cd       	rjmp	.-1120   	; 0x675e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:120
    }
}

int DNSClient::getHostByName(const char* aHostname, IPAddress& aResult)
{
    int ret =0;
    6bbe:	d1 2c       	mov	r13, r1
    6bc0:	c1 2c       	mov	r12, r1
    6bc2:	cd cd       	rjmp	.-1126   	; 0x675e <DNSClient::getHostByName(char const*, IPAddress&)+0xac>

00006bc4 <EthernetClient::connect(char const*, unsigned int)>:
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:23
}

EthernetClient::EthernetClient(uint8_t sock) : _sock(sock) {
}

int EthernetClient::connect(const char* host, uint16_t port) {
    6bc4:	cf 92       	push	r12
    6bc6:	df 92       	push	r13
    6bc8:	ef 92       	push	r14
    6bca:	ff 92       	push	r15
    6bcc:	0f 93       	push	r16
    6bce:	1f 93       	push	r17
    6bd0:	cf 93       	push	r28
    6bd2:	df 93       	push	r29
    6bd4:	cd b7       	in	r28, 0x3d	; 61
    6bd6:	de b7       	in	r29, 0x3e	; 62
    6bd8:	af 97       	sbiw	r28, 0x2f	; 47
    6bda:	0f b6       	in	r0, 0x3f	; 63
    6bdc:	f8 94       	cli
    6bde:	de bf       	out	0x3e, r29	; 62
    6be0:	0f be       	out	0x3f, r0	; 63
    6be2:	cd bf       	out	0x3d, r28	; 61
    6be4:	7c 01       	movw	r14, r24
    6be6:	6a 01       	movw	r12, r20
__base_ctor ():
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6be8:	02 ee       	ldi	r16, 0xE2	; 226
    6bea:	12 e0       	ldi	r17, 0x02	; 2
    6bec:	1a 83       	std	Y+2, r17	; 0x02
    6bee:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    6bf0:	1c 86       	std	Y+12, r1	; 0x0c
    6bf2:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6bf4:	88 ee       	ldi	r24, 0xE8	; 232
    6bf6:	93 e0       	ldi	r25, 0x03	; 3
    6bf8:	a0 e0       	ldi	r26, 0x00	; 0
    6bfa:	b0 e0       	ldi	r27, 0x00	; 0
    6bfc:	8d 87       	std	Y+13, r24	; 0x0d
    6bfe:	9e 87       	std	Y+14, r25	; 0x0e
    6c00:	af 87       	std	Y+15, r26	; 0x0f
    6c02:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
    6c04:	88 e9       	ldi	r24, 0x98	; 152
    6c06:	92 e0       	ldi	r25, 0x02	; 2
    6c08:	9a 87       	std	Y+10, r25	; 0x0a
    6c0a:	89 87       	std	Y+9, r24	; 0x09
    6c0c:	88 e0       	ldi	r24, 0x08	; 8
    6c0e:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
    6c10:	19 8f       	std	Y+25, r17	; 0x19
    6c12:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6c14:	1a 8e       	std	Y+26, r1	; 0x1a
    6c16:	1b 8e       	std	Y+27, r1	; 0x1b
    6c18:	1c 8e       	std	Y+28, r1	; 0x1c
    6c1a:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    6c1c:	1b a7       	std	Y+43, r17	; 0x2b
    6c1e:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
    6c20:	1c a6       	std	Y+44, r1	; 0x2c
    6c22:	1d a6       	std	Y+45, r1	; 0x2d
    6c24:	1e a6       	std	Y+46, r1	; 0x2e
    6c26:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
    6c28:	80 91 08 0c 	lds	r24, 0x0C08	; 0x800c08 <Ethernet+0x2>
    6c2c:	90 91 09 0c 	lds	r25, 0x0C09	; 0x800c09 <Ethernet+0x3>
    6c30:	a0 91 0a 0c 	lds	r26, 0x0C0A	; 0x800c0a <Ethernet+0x4>
    6c34:	b0 91 0b 0c 	lds	r27, 0x0C0B	; 0x800c0b <Ethernet+0x5>
    6c38:	8e a3       	std	Y+38, r24	; 0x26
    6c3a:	9f a3       	std	Y+39, r25	; 0x27
    6c3c:	a8 a7       	std	Y+40, r26	; 0x28
    6c3e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
    6c40:	8b 83       	std	Y+3, r24	; 0x03
    6c42:	9c 83       	std	Y+4, r25	; 0x04
    6c44:	ad 83       	std	Y+5, r26	; 0x05
    6c46:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
#define INVALID_RESPONSE -4

void DNSClient::begin(const IPAddress& aDNSServer)
{
    iDNSServer = aDNSServer;
    iRequestId = 0;
    6c48:	18 86       	std	Y+8, r1	; 0x08
    6c4a:	1f 82       	std	Y+7, r1	; 0x07
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:30
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
    6c4c:	ae 01       	movw	r20, r28
    6c4e:	46 5d       	subi	r20, 0xD6	; 214
    6c50:	5f 4f       	sbci	r21, 0xFF	; 255
    6c52:	ce 01       	movw	r24, r28
    6c54:	01 96       	adiw	r24, 0x01	; 1
    6c56:	0e 94 59 33 	call	0x66b2	; 0x66b2 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:31
  if (ret == 1) {
    6c5a:	81 30       	cpi	r24, 0x01	; 1
    6c5c:	91 05       	cpc	r25, r1
    6c5e:	b1 f4       	brne	.+44     	; 0x6c8c <EthernetClient::connect(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    return connect(remote_addr, port);
    6c60:	d7 01       	movw	r26, r14
    6c62:	ed 91       	ld	r30, X+
    6c64:	fc 91       	ld	r31, X
    6c66:	06 84       	ldd	r0, Z+14	; 0x0e
    6c68:	f7 85       	ldd	r31, Z+15	; 0x0f
    6c6a:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    6c6c:	1d a3       	std	Y+37, r17	; 0x25
    6c6e:	0c a3       	std	Y+36, r16	; 0x24
    6c70:	8c a5       	ldd	r24, Y+44	; 0x2c
    6c72:	9d a5       	ldd	r25, Y+45	; 0x2d
    6c74:	ae a5       	ldd	r26, Y+46	; 0x2e
    6c76:	bf a5       	ldd	r27, Y+47	; 0x2f
    6c78:	8e a3       	std	Y+38, r24	; 0x26
    6c7a:	9f a3       	std	Y+39, r25	; 0x27
    6c7c:	a8 a7       	std	Y+40, r26	; 0x28
    6c7e:	b9 a7       	std	Y+41, r27	; 0x29
_ZN14EthernetClient7connectEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:32
    6c80:	a6 01       	movw	r20, r12
    6c82:	be 01       	movw	r22, r28
    6c84:	6c 5d       	subi	r22, 0xDC	; 220
    6c86:	7f 4f       	sbci	r23, 0xFF	; 255
    6c88:	c7 01       	movw	r24, r14
    6c8a:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:36
  } else {
    return ret;
  }
}
    6c8c:	af 96       	adiw	r28, 0x2f	; 47
    6c8e:	0f b6       	in	r0, 0x3f	; 63
    6c90:	f8 94       	cli
    6c92:	de bf       	out	0x3e, r29	; 62
    6c94:	0f be       	out	0x3f, r0	; 63
    6c96:	cd bf       	out	0x3d, r28	; 61
    6c98:	df 91       	pop	r29
    6c9a:	cf 91       	pop	r28
    6c9c:	1f 91       	pop	r17
    6c9e:	0f 91       	pop	r16
    6ca0:	ff 90       	pop	r15
    6ca2:	ef 90       	pop	r14
    6ca4:	df 90       	pop	r13
    6ca6:	cf 90       	pop	r12
    6ca8:	08 95       	ret

00006caa <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    6caa:	cf 93       	push	r28
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    6cac:	cf b7       	in	r28, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    6cae:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    6cb0:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <SPIClass::initialized>
    6cb4:	81 11       	cpse	r24, r1
    6cb6:	27 c0       	rjmp	.+78     	; 0x6d06 <SPIClass::begin()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    6cb8:	ec eb       	ldi	r30, 0xBC	; 188
    6cba:	fb e3       	ldi	r31, 0x3B	; 59
    6cbc:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    6cbe:	e6 e7       	ldi	r30, 0x76	; 118
    6cc0:	fb e3       	ldi	r31, 0x3B	; 59
    6cc2:	94 91       	lpm	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    6cc4:	e8 2f       	mov	r30, r24
    6cc6:	f0 e0       	ldi	r31, 0x00	; 0
    6cc8:	ee 0f       	add	r30, r30
    6cca:	ff 1f       	adc	r31, r31
    6ccc:	e3 5e       	subi	r30, 0xE3	; 227
    6cce:	f9 4c       	sbci	r31, 0xC9	; 201
    6cd0:	a5 91       	lpm	r26, Z+
    6cd2:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    6cd4:	ec 91       	ld	r30, X
    6cd6:	e9 23       	and	r30, r25
    6cd8:	21 f4       	brne	.+8      	; 0x6ce2 <SPIClass::begin()+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    6cda:	61 e0       	ldi	r22, 0x01	; 1
    6cdc:	88 e0       	ldi	r24, 0x08	; 8
    6cde:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    6ce2:	61 e0       	ldi	r22, 0x01	; 1
    6ce4:	88 e0       	ldi	r24, 0x08	; 8
    6ce6:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    6cea:	8c b5       	in	r24, 0x2c	; 44
    6cec:	80 61       	ori	r24, 0x10	; 16
    6cee:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    6cf0:	8c b5       	in	r24, 0x2c	; 44
    6cf2:	80 64       	ori	r24, 0x40	; 64
    6cf4:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    6cf6:	61 e0       	ldi	r22, 0x01	; 1
    6cf8:	89 e0       	ldi	r24, 0x09	; 9
    6cfa:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    6cfe:	61 e0       	ldi	r22, 0x01	; 1
    6d00:	8a e0       	ldi	r24, 0x0A	; 10
    6d02:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    6d06:	80 91 b4 09 	lds	r24, 0x09B4	; 0x8009b4 <SPIClass::initialized>
    6d0a:	8f 5f       	subi	r24, 0xFF	; 255
    6d0c:	80 93 b4 09 	sts	0x09B4, r24	; 0x8009b4 <SPIClass::initialized>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    6d10:	cf bf       	out	0x3f, r28	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.cpp:64
}
    6d12:	cf 91       	pop	r28
    6d14:	08 95       	ret

00006d16 <SoftSPIB::transfer(unsigned char)>:
_ZN8SoftSPIB8transferEh():
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:76
    val[l] = transfer(val[l]);
    }
}


uint8_t SoftSPIB::transfer(uint8_t val) {
    6d16:	7f 92       	push	r7
    6d18:	8f 92       	push	r8
    6d1a:	9f 92       	push	r9
    6d1c:	af 92       	push	r10
    6d1e:	bf 92       	push	r11
    6d20:	cf 92       	push	r12
    6d22:	df 92       	push	r13
    6d24:	ef 92       	push	r14
    6d26:	ff 92       	push	r15
    6d28:	0f 93       	push	r16
    6d2a:	1f 93       	push	r17
    6d2c:	cf 93       	push	r28
    6d2e:	df 93       	push	r29
    6d30:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:79

    uint8_t out = 0;
    if (_order == MSBFIRST) {
    6d32:	fc 01       	movw	r30, r24
    6d34:	86 81       	ldd	r24, Z+6	; 0x06
    6d36:	81 11       	cpse	r24, r1
    6d38:	35 c0       	rjmp	.+106    	; 0x6da4 <SoftSPIB::transfer(unsigned char)+0x8e>
    6d3a:	86 2f       	mov	r24, r22
    6d3c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:81
        uint8_t v2 = 
            ((val & 0x01) << 7) |
    6d3e:	ec 01       	movw	r28, r24
    6d40:	d6 95       	lsr	r29
    6d42:	dc 2f       	mov	r29, r28
    6d44:	cc 27       	eor	r28, r28
    6d46:	d7 95       	ror	r29
    6d48:	c7 95       	ror	r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:88
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
            ((val & 0x80) >> 7);
    6d4a:	66 1f       	adc	r22, r22
    6d4c:	66 27       	eor	r22, r22
    6d4e:	66 1f       	adc	r22, r22
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d50:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:82

    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
    6d52:	ec 01       	movw	r28, r24
    6d54:	55 e0       	ldi	r21, 0x05	; 5
    6d56:	cc 0f       	add	r28, r28
    6d58:	dd 1f       	adc	r29, r29
    6d5a:	5a 95       	dec	r21
    6d5c:	e1 f7       	brne	.-8      	; 0x6d56 <SoftSPIB::transfer(unsigned char)+0x40>
    6d5e:	c0 74       	andi	r28, 0x40	; 64
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d60:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:83
    uint8_t out = 0;
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
    6d62:	ec 01       	movw	r28, r24
    6d64:	73 e0       	ldi	r23, 0x03	; 3
    6d66:	cc 0f       	add	r28, r28
    6d68:	dd 1f       	adc	r29, r29
    6d6a:	7a 95       	dec	r23
    6d6c:	e1 f7       	brne	.-8      	; 0x6d66 <SoftSPIB::transfer(unsigned char)+0x50>
    6d6e:	c0 72       	andi	r28, 0x20	; 32
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d70:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:84
    if (_order == MSBFIRST) {
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
    6d72:	ec 01       	movw	r28, r24
    6d74:	cc 0f       	add	r28, r28
    6d76:	dd 1f       	adc	r29, r29
    6d78:	c0 71       	andi	r28, 0x10	; 16
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d7a:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:85
        uint8_t v2 = 
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
    6d7c:	ec 01       	movw	r28, r24
    6d7e:	d5 95       	asr	r29
    6d80:	c7 95       	ror	r28
    6d82:	c8 70       	andi	r28, 0x08	; 8
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x20) >> 3) |
            ((val & 0x40) >> 5) |
    6d84:	6c 2b       	or	r22, r28
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:86
            ((val & 0x01) << 7) |
            ((val & 0x02) << 5) |
            ((val & 0x04) << 3) |
            ((val & 0x08) << 1) |
            ((val & 0x10) >> 1) |
            ((val & 0x20) >> 3) |
    6d86:	ec 01       	movw	r28, r24
    6d88:	a3 e0       	ldi	r26, 0x03	; 3
    6d8a:	d5 95       	asr	r29
    6d8c:	c7 95       	ror	r28
    6d8e:	aa 95       	dec	r26
    6d90:	e1 f7       	brne	.-8      	; 0x6d8a <SoftSPIB::transfer(unsigned char)+0x74>
    6d92:	c4 70       	andi	r28, 0x04	; 4
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:87
            ((val & 0x40) >> 5) |
    6d94:	6c 2b       	or	r22, r28
    6d96:	b5 e0       	ldi	r27, 0x05	; 5
    6d98:	95 95       	asr	r25
    6d9a:	87 95       	ror	r24
    6d9c:	ba 95       	dec	r27
    6d9e:	e1 f7       	brne	.-8      	; 0x6d98 <SoftSPIB::transfer(unsigned char)+0x82>
    6da0:	82 70       	andi	r24, 0x02	; 2
    6da2:	68 2b       	or	r22, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:96

    //uint8_t del = _delay >> 1;

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;
    6da4:	91 e0       	ldi	r25, 0x01	; 1
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	f8 01       	movw	r30, r16
    6daa:	21 81       	ldd	r18, Z+1	; 0x01
    6dac:	21 11       	cpse	r18, r1
    6dae:	01 c0       	rjmp	.+2      	; 0x6db2 <SoftSPIB::transfer(unsigned char)+0x9c>
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	e9 2e       	mov	r14, r25
    6db4:	f8 2e       	mov	r15, r24
    6db6:	d1 2c       	mov	r13, r1
    6db8:	c1 2c       	mov	r12, r1
    6dba:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            digitalWrite(_sck, sck);            
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6dbc:	c6 2f       	mov	r28, r22
    6dbe:	d0 e0       	ldi	r29, 0x00	; 0
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:100

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    {
        if (_cke) {
    6dc0:	f8 01       	movw	r30, r16
    6dc2:	80 81       	ld	r24, Z
    6dc4:	88 23       	and	r24, r24
    6dc6:	39 f0       	breq	.+14     	; 0x6dd6 <SoftSPIB::transfer(unsigned char)+0xc0>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:101
            sck ^= 1;
    6dc8:	f1 e0       	ldi	r31, 0x01	; 1
    6dca:	ef 26       	eor	r14, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:102
            digitalWrite(_sck, sck);            
    6dcc:	6e 2d       	mov	r22, r14
    6dce:	f8 01       	movw	r30, r16
    6dd0:	85 81       	ldd	r24, Z+5	; 0x05
    6dd2:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:107
            //wait(del);
        }

        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));
    6dd6:	be 01       	movw	r22, r28
    6dd8:	0c 2c       	mov	r0, r12
    6dda:	02 c0       	rjmp	.+4      	; 0x6de0 <SoftSPIB::transfer(unsigned char)+0xca>
    6ddc:	75 95       	asr	r23
    6dde:	67 95       	ror	r22
    6de0:	0a 94       	dec	r0
    6de2:	e2 f7       	brpl	.-8      	; 0x6ddc <SoftSPIB::transfer(unsigned char)+0xc6>
    6de4:	61 70       	andi	r22, 0x01	; 1
    6de6:	f8 01       	movw	r30, r16
    6de8:	84 81       	ldd	r24, Z+4	; 0x04
    6dea:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111

        //wait(del);

        sck ^= 1u; 
    6dee:	57 01       	movw	r10, r14
    6df0:	f1 e0       	ldi	r31, 0x01	; 1
    6df2:	af 26       	eor	r10, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:112
	digitalWrite(_sck, sck);
    6df4:	6a 2d       	mov	r22, r10
    6df6:	f8 01       	movw	r30, r16
    6df8:	85 81       	ldd	r24, Z+5	; 0x05
    6dfa:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
digitalRead():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
    6dfe:	f8 01       	movw	r30, r16
    6e00:	23 81       	ldd	r18, Z+3	; 0x03
    6e02:	30 e0       	ldi	r19, 0x00	; 0
    6e04:	f9 01       	movw	r30, r18
    6e06:	e3 5d       	subi	r30, 0xD3	; 211
    6e08:	f9 4c       	sbci	r31, 0xC9	; 201
    6e0a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6e0c:	f9 01       	movw	r30, r18
    6e0e:	e2 59       	subi	r30, 0x92	; 146
    6e10:	f4 4c       	sbci	r31, 0xC4	; 196
    6e12:	84 90       	lpm	r8, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6e14:	f9 01       	movw	r30, r18
    6e16:	ec 54       	subi	r30, 0x4C	; 76
    6e18:	f4 4c       	sbci	r31, 0xC4	; 196
    6e1a:	74 90       	lpm	r7, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6e1c:	77 20       	and	r7, r7
    6e1e:	a9 f1       	breq	.+106    	; 0x6e8a <SoftSPIB::transfer(unsigned char)+0x174>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6e20:	81 11       	cpse	r24, r1
    6e22:	0e 94 5e 89 	call	0x112bc	; 0x112bc <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6e26:	e7 2d       	mov	r30, r7
    6e28:	f0 e0       	ldi	r31, 0x00	; 0
    6e2a:	ee 0f       	add	r30, r30
    6e2c:	ff 1f       	adc	r31, r31
    6e2e:	e2 5a       	subi	r30, 0xA2	; 162
    6e30:	f4 4c       	sbci	r31, 0xC4	; 196
    6e32:	a5 91       	lpm	r26, Z+
    6e34:	b4 91       	lpm	r27, Z
    6e36:	ec 91       	ld	r30, X
    6e38:	8e 22       	and	r8, r30
    6e3a:	31 e0       	ldi	r19, 0x01	; 1
    6e3c:	20 e0       	ldi	r18, 0x00	; 0
    6e3e:	09 f4       	brne	.+2      	; 0x6e42 <SoftSPIB::transfer(unsigned char)+0x12c>
    6e40:	30 e0       	ldi	r19, 0x00	; 0
_ZN8SoftSPIB8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    6e42:	83 2f       	mov	r24, r19
    6e44:	92 2f       	mov	r25, r18
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:118

        /* ... Read bit */
        {
            bval = digitalRead(_miso);

            if (_order == MSBFIRST) {
    6e46:	f8 01       	movw	r30, r16
    6e48:	26 81       	ldd	r18, Z+6	; 0x06
    6e4a:	21 11       	cpse	r18, r1
    6e4c:	21 c0       	rjmp	.+66     	; 0x6e90 <SoftSPIB::transfer(unsigned char)+0x17a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:119
                out <<= 1;
    6e4e:	99 0c       	add	r9, r9
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6e50:	98 2a       	or	r9, r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:129
            }
        }

        //wait(del);

        if (!_cke) {
    6e52:	f8 01       	movw	r30, r16
    6e54:	80 81       	ld	r24, Z
    6e56:	88 23       	and	r24, r24
    6e58:	11 f1       	breq	.+68     	; 0x6e9e <SoftSPIB::transfer(unsigned char)+0x188>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:111
        /* ... Write bit */
        digitalWrite(_mosi, ((val & (1<<bit)) ? HIGH : LOW));

        //wait(del);

        sck ^= 1u; 
    6e5a:	75 01       	movw	r14, r10
    6e5c:	ff ef       	ldi	r31, 0xFF	; 255
    6e5e:	cf 1a       	sub	r12, r31
    6e60:	df 0a       	sbc	r13, r31
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:98

    uint8_t bval = 0;

    int sck = (_ckp) ? HIGH : LOW;

    for (uint8_t bit = 0u; bit < 8u; bit++)
    6e62:	28 e0       	ldi	r18, 0x08	; 8
    6e64:	c2 16       	cp	r12, r18
    6e66:	d1 04       	cpc	r13, r1
    6e68:	09 f0       	breq	.+2      	; 0x6e6c <SoftSPIB::transfer(unsigned char)+0x156>
    6e6a:	aa cf       	rjmp	.-172    	; 0x6dc0 <SoftSPIB::transfer(unsigned char)+0xaa>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:137
        }
    }

    return out;

}
    6e6c:	89 2d       	mov	r24, r9
    6e6e:	df 91       	pop	r29
    6e70:	cf 91       	pop	r28
    6e72:	1f 91       	pop	r17
    6e74:	0f 91       	pop	r16
    6e76:	ff 90       	pop	r15
    6e78:	ef 90       	pop	r14
    6e7a:	df 90       	pop	r13
    6e7c:	cf 90       	pop	r12
    6e7e:	bf 90       	pop	r11
    6e80:	af 90       	pop	r10
    6e82:	9f 90       	pop	r9
    6e84:	8f 90       	pop	r8
    6e86:	7f 90       	pop	r7
    6e88:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:220
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	80 e0       	ldi	r24, 0x00	; 0
    6e8e:	db cf       	rjmp	.-74     	; 0x6e46 <SoftSPIB::transfer(unsigned char)+0x130>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:123
            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
                out |= bval << 7;
    6e90:	96 95       	lsr	r25
    6e92:	98 2f       	mov	r25, r24
    6e94:	88 27       	eor	r24, r24
    6e96:	97 95       	ror	r25
    6e98:	87 95       	ror	r24
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:122

            if (_order == MSBFIRST) {
                out <<= 1;
                out |= bval;
            } else {
                out >>= 1;
    6e9a:	96 94       	lsr	r9
    6e9c:	d9 cf       	rjmp	.-78     	; 0x6e50 <SoftSPIB::transfer(unsigned char)+0x13a>
/home/saric/Arduino/libraries/SoftSPIB/SoftSPIB.cpp:131

        //wait(del);

        if (!_cke) {
            sck ^= 1u;
            digitalWrite(_sck, sck);
    6e9e:	6e 2d       	mov	r22, r14
    6ea0:	85 81       	ldd	r24, Z+5	; 0x05
    6ea2:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
    6ea6:	da cf       	rjmp	.-76     	; 0x6e5c <SoftSPIB::transfer(unsigned char)+0x146>

00006ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>:
_ZN11LCDWIKI_KBV12Push_CommandEjPha():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6ea8:	cf 93       	push	r28
    6eaa:	df 93       	push	r29
    6eac:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:306
  	CS_ACTIVE;
    6eae:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6eb0:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6eb2:	8c 91       	ld	r24, X
    6eb4:	92 ad       	ldd	r25, Z+58	; 0x3a
    6eb6:	89 23       	and	r24, r25
    6eb8:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:307
    writeCmd16(cmd);
    6eba:	a0 a9       	ldd	r26, Z+48	; 0x30
    6ebc:	b1 a9       	ldd	r27, Z+49	; 0x31
    6ebe:	8c 91       	ld	r24, X
    6ec0:	93 ad       	ldd	r25, Z+59	; 0x3b
    6ec2:	89 23       	and	r24, r25
    6ec4:	8c 93       	st	X, r24
    6ec6:	72 b9       	out	0x02, r23	; 2
    6ec8:	a2 a9       	ldd	r26, Z+50	; 0x32
    6eca:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ecc:	8c 91       	ld	r24, X
    6ece:	94 ad       	ldd	r25, Z+60	; 0x3c
    6ed0:	89 23       	and	r24, r25
    6ed2:	8c 93       	st	X, r24
    6ed4:	a2 a9       	ldd	r26, Z+50	; 0x32
    6ed6:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ed8:	8c 91       	ld	r24, X
    6eda:	90 ad       	ldd	r25, Z+56	; 0x38
    6edc:	89 2b       	or	r24, r25
    6ede:	8c 93       	st	X, r24
    6ee0:	62 b9       	out	0x02, r22	; 2
    6ee2:	a2 a9       	ldd	r26, Z+50	; 0x32
    6ee4:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ee6:	8c 91       	ld	r24, X
    6ee8:	94 ad       	ldd	r25, Z+60	; 0x3c
    6eea:	89 23       	and	r24, r25
    6eec:	8c 93       	st	X, r24
    6eee:	a2 a9       	ldd	r26, Z+50	; 0x32
    6ef0:	b3 a9       	ldd	r27, Z+51	; 0x33
    6ef2:	8c 91       	ld	r24, X
    6ef4:	90 ad       	ldd	r25, Z+56	; 0x38
    6ef6:	89 2b       	or	r24, r25
    6ef8:	8c 93       	st	X, r24
    6efa:	a0 a9       	ldd	r26, Z+48	; 0x30
    6efc:	b1 a9       	ldd	r27, Z+49	; 0x31
    6efe:	8c 91       	ld	r24, X
    6f00:	97 a9       	ldd	r25, Z+55	; 0x37
    6f02:	89 2b       	or	r24, r25
    6f04:	8c 93       	st	X, r24
    6f06:	da 01       	movw	r26, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:308
    while (N-- > 0) 
    6f08:	9f ef       	ldi	r25, 0xFF	; 255
    6f0a:	92 0f       	add	r25, r18
    6f0c:	12 16       	cp	r1, r18
    6f0e:	0c f0       	brlt	.+2      	; 0x6f12 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x6a>
    6f10:	3f c0       	rjmp	.+126    	; 0x6f90 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:310
	{
        uint8_t u8 = *block++;
    6f12:	8d 91       	ld	r24, X+
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:311
        writeData8(u8); 
    6f14:	82 b9       	out	0x02, r24	; 2
    6f16:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f18:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f1a:	88 81       	ld	r24, Y
    6f1c:	24 ad       	ldd	r18, Z+60	; 0x3c
    6f1e:	82 23       	and	r24, r18
    6f20:	88 83       	st	Y, r24
    6f22:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f24:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f26:	88 81       	ld	r24, Y
    6f28:	20 ad       	ldd	r18, Z+56	; 0x38
    6f2a:	82 2b       	or	r24, r18
    6f2c:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:312
		if(N && (lcd_driver == ID_7575))
    6f2e:	99 23       	and	r25, r25
    6f30:	69 f1       	breq	.+90     	; 0x6f8c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
    6f32:	20 8d       	ldd	r18, Z+24	; 0x18
    6f34:	31 8d       	ldd	r19, Z+25	; 0x19
    6f36:	21 30       	cpi	r18, 0x01	; 1
    6f38:	31 05       	cpc	r19, r1
    6f3a:	41 f5       	brne	.+80     	; 0x6f8c <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0xe4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:314
		{
			cmd++;
    6f3c:	6f 5f       	subi	r22, 0xFF	; 255
    6f3e:	7f 4f       	sbci	r23, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:315
			writeCmd16(cmd);
    6f40:	c0 a9       	ldd	r28, Z+48	; 0x30
    6f42:	d1 a9       	ldd	r29, Z+49	; 0x31
    6f44:	88 81       	ld	r24, Y
    6f46:	23 ad       	ldd	r18, Z+59	; 0x3b
    6f48:	82 23       	and	r24, r18
    6f4a:	88 83       	st	Y, r24
    6f4c:	72 b9       	out	0x02, r23	; 2
    6f4e:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f50:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f52:	88 81       	ld	r24, Y
    6f54:	24 ad       	ldd	r18, Z+60	; 0x3c
    6f56:	82 23       	and	r24, r18
    6f58:	88 83       	st	Y, r24
    6f5a:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f5c:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f5e:	88 81       	ld	r24, Y
    6f60:	20 ad       	ldd	r18, Z+56	; 0x38
    6f62:	82 2b       	or	r24, r18
    6f64:	88 83       	st	Y, r24
    6f66:	62 b9       	out	0x02, r22	; 2
    6f68:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f6a:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f6c:	88 81       	ld	r24, Y
    6f6e:	24 ad       	ldd	r18, Z+60	; 0x3c
    6f70:	82 23       	and	r24, r18
    6f72:	88 83       	st	Y, r24
    6f74:	c2 a9       	ldd	r28, Z+50	; 0x32
    6f76:	d3 a9       	ldd	r29, Z+51	; 0x33
    6f78:	88 81       	ld	r24, Y
    6f7a:	20 ad       	ldd	r18, Z+56	; 0x38
    6f7c:	82 2b       	or	r24, r18
    6f7e:	88 83       	st	Y, r24
    6f80:	c0 a9       	ldd	r28, Z+48	; 0x30
    6f82:	d1 a9       	ldd	r29, Z+49	; 0x31
    6f84:	88 81       	ld	r24, Y
    6f86:	27 a9       	ldd	r18, Z+55	; 0x37
    6f88:	82 2b       	or	r24, r18
    6f8a:	88 83       	st	Y, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:305
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_KBV::Push_Command(uint16_t cmd, uint8_t *block, int8_t N)
{
    6f8c:	29 2f       	mov	r18, r25
    6f8e:	bc cf       	rjmp	.-136    	; 0x6f08 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)+0x60>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:318
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    6f90:	a6 a5       	ldd	r26, Z+46	; 0x2e
    6f92:	b7 a5       	ldd	r27, Z+47	; 0x2f
    6f94:	8c 91       	ld	r24, X
    6f96:	96 a9       	ldd	r25, Z+54	; 0x36
    6f98:	89 2b       	or	r24, r25
    6f9a:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:319
}
    6f9c:	df 91       	pop	r29
    6f9e:	cf 91       	pop	r28
    6fa0:	08 95       	ret

00006fa2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_KBV15Set_Addr_WindowEiiii():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:323

// Sets the LCD address window 
void LCDWIKI_KBV::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    6fa2:	af 92       	push	r10
    6fa4:	bf 92       	push	r11
    6fa6:	cf 92       	push	r12
    6fa8:	df 92       	push	r13
    6faa:	ef 92       	push	r14
    6fac:	ff 92       	push	r15
    6fae:	0f 93       	push	r16
    6fb0:	1f 93       	push	r17
    6fb2:	cf 93       	push	r28
    6fb4:	df 93       	push	r29
    6fb6:	00 d0       	rcall	.+0      	; 0x6fb8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x16>
    6fb8:	00 d0       	rcall	.+0      	; 0x6fba <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x18>
    6fba:	1f 92       	push	r1
    6fbc:	1f 92       	push	r1
    6fbe:	cd b7       	in	r28, 0x3d	; 61
    6fc0:	de b7       	in	r29, 0x3e	; 62
    6fc2:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:324
	CS_ACTIVE;
    6fc4:	dc 01       	movw	r26, r24
    6fc6:	9e 96       	adiw	r26, 0x2e	; 46
    6fc8:	ed 91       	ld	r30, X+
    6fca:	fc 91       	ld	r31, X
    6fcc:	9f 97       	sbiw	r26, 0x2f	; 47
    6fce:	80 81       	ld	r24, Z
    6fd0:	da 96       	adiw	r26, 0x3a	; 58
    6fd2:	9c 91       	ld	r25, X
    6fd4:	da 97       	sbiw	r26, 0x3a	; 58
    6fd6:	89 23       	and	r24, r25
    6fd8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:325
	if(lcd_driver == ID_932X) 
    6fda:	58 96       	adiw	r26, 0x18	; 24
    6fdc:	8d 91       	ld	r24, X+
    6fde:	9c 91       	ld	r25, X
    6fe0:	59 97       	sbiw	r26, 0x19	; 25
    6fe2:	00 97       	sbiw	r24, 0x00	; 0
    6fe4:	09 f0       	breq	.+2      	; 0x6fe8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x46>
    6fe6:	44 c3       	rjmp	.+1672   	; 0x7670 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6ce>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:336
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    6fe8:	56 96       	adiw	r26, 0x16	; 22
    6fea:	8d 91       	ld	r24, X+
    6fec:	9c 91       	ld	r25, X
    6fee:	57 97       	sbiw	r26, 0x17	; 23
    6ff0:	82 30       	cpi	r24, 0x02	; 2
    6ff2:	91 05       	cpc	r25, r1
    6ff4:	09 f4       	brne	.+2      	; 0x6ff8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x56>
    6ff6:	0b c3       	rjmp	.+1558   	; 0x760e <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x66c>
    6ff8:	83 30       	cpi	r24, 0x03	; 3
    6ffa:	91 05       	cpc	r25, r1
    6ffc:	09 f4       	brne	.+2      	; 0x7000 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x5e>
    6ffe:	23 c3       	rjmp	.+1606   	; 0x7646 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6a4>
    7000:	01 97       	sbiw	r24, 0x01	; 1
    7002:	09 f0       	breq	.+2      	; 0x7006 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x64>
    7004:	32 c3       	rjmp	.+1636   	; 0x766a <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6c8>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    7006:	1e 96       	adiw	r26, 0x0e	; 14
    7008:	0d 90       	ld	r0, X+
    700a:	bc 91       	ld	r27, X
    700c:	a0 2d       	mov	r26, r0
    700e:	68 01       	movw	r12, r16
    7010:	c0 94       	com	r12
    7012:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    7014:	40 95       	com	r20
    7016:	50 95       	com	r21
    7018:	fa 01       	movw	r30, r20
    701a:	ea 0f       	add	r30, r26
    701c:	fb 1f       	adc	r31, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:349
			      x  = x2;
			      y  = y1;
    701e:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:346
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    7020:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:347
			      x2 = WIDTH  - 1 - t;
    7022:	9f 01       	movw	r18, r30
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:344
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    7024:	ab 01       	movw	r20, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:345
			      x1 = WIDTH  - 1 - y2;
    7026:	b6 01       	movw	r22, r12
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    7028:	6a 0f       	add	r22, r26
    702a:	7b 1f       	adc	r23, r27
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:371
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    702c:	d7 01       	movw	r26, r14
    702e:	d0 96       	adiw	r26, 0x30	; 48
    7030:	cd 90       	ld	r12, X+
    7032:	dc 90       	ld	r13, X
    7034:	d6 01       	movw	r26, r12
    7036:	bc 90       	ld	r11, X
    7038:	d7 01       	movw	r26, r14
    703a:	db 96       	adiw	r26, 0x3b	; 59
    703c:	ac 90       	ld	r10, X
    703e:	ba 20       	and	r11, r10
    7040:	d6 01       	movw	r26, r12
    7042:	bc 92       	st	X, r11
    7044:	12 b8       	out	0x02, r1	; 2
    7046:	d7 01       	movw	r26, r14
    7048:	d2 96       	adiw	r26, 0x32	; 50
    704a:	cd 90       	ld	r12, X+
    704c:	dc 90       	ld	r13, X
    704e:	d6 01       	movw	r26, r12
    7050:	bc 90       	ld	r11, X
    7052:	d7 01       	movw	r26, r14
    7054:	dc 96       	adiw	r26, 0x3c	; 60
    7056:	ac 90       	ld	r10, X
    7058:	ba 20       	and	r11, r10
    705a:	d6 01       	movw	r26, r12
    705c:	bc 92       	st	X, r11
    705e:	d7 01       	movw	r26, r14
    7060:	d2 96       	adiw	r26, 0x32	; 50
    7062:	cd 90       	ld	r12, X+
    7064:	dc 90       	ld	r13, X
    7066:	d6 01       	movw	r26, r12
    7068:	bc 90       	ld	r11, X
    706a:	d7 01       	movw	r26, r14
    706c:	d8 96       	adiw	r26, 0x38	; 56
    706e:	ac 90       	ld	r10, X
    7070:	ba 28       	or	r11, r10
    7072:	d6 01       	movw	r26, r12
    7074:	bc 92       	st	X, r11
    7076:	a0 e5       	ldi	r26, 0x50	; 80
    7078:	a2 b9       	out	0x02, r26	; 2
    707a:	d7 01       	movw	r26, r14
    707c:	d2 96       	adiw	r26, 0x32	; 50
    707e:	cd 90       	ld	r12, X+
    7080:	dc 90       	ld	r13, X
    7082:	d6 01       	movw	r26, r12
    7084:	bc 90       	ld	r11, X
    7086:	d7 01       	movw	r26, r14
    7088:	dc 96       	adiw	r26, 0x3c	; 60
    708a:	ac 90       	ld	r10, X
    708c:	ba 20       	and	r11, r10
    708e:	d6 01       	movw	r26, r12
    7090:	bc 92       	st	X, r11
    7092:	d7 01       	movw	r26, r14
    7094:	d2 96       	adiw	r26, 0x32	; 50
    7096:	cd 90       	ld	r12, X+
    7098:	dc 90       	ld	r13, X
    709a:	d6 01       	movw	r26, r12
    709c:	bc 90       	ld	r11, X
    709e:	d7 01       	movw	r26, r14
    70a0:	d8 96       	adiw	r26, 0x38	; 56
    70a2:	ac 90       	ld	r10, X
    70a4:	ba 28       	or	r11, r10
    70a6:	d6 01       	movw	r26, r12
    70a8:	bc 92       	st	X, r11
    70aa:	d7 01       	movw	r26, r14
    70ac:	d0 96       	adiw	r26, 0x30	; 48
    70ae:	cd 90       	ld	r12, X+
    70b0:	dc 90       	ld	r13, X
    70b2:	d6 01       	movw	r26, r12
    70b4:	bc 90       	ld	r11, X
    70b6:	d7 01       	movw	r26, r14
    70b8:	d7 96       	adiw	r26, 0x37	; 55
    70ba:	ac 90       	ld	r10, X
    70bc:	ba 28       	or	r11, r10
    70be:	d6 01       	movw	r26, r12
    70c0:	bc 92       	st	X, r11
    70c2:	72 b9       	out	0x02, r23	; 2
    70c4:	d7 01       	movw	r26, r14
    70c6:	d2 96       	adiw	r26, 0x32	; 50
    70c8:	ad 90       	ld	r10, X+
    70ca:	bc 90       	ld	r11, X
    70cc:	d5 01       	movw	r26, r10
    70ce:	7c 91       	ld	r23, X
    70d0:	d7 01       	movw	r26, r14
    70d2:	dc 96       	adiw	r26, 0x3c	; 60
    70d4:	dc 90       	ld	r13, X
    70d6:	7d 21       	and	r23, r13
    70d8:	d5 01       	movw	r26, r10
    70da:	7c 93       	st	X, r23
    70dc:	d7 01       	movw	r26, r14
    70de:	d2 96       	adiw	r26, 0x32	; 50
    70e0:	ad 90       	ld	r10, X+
    70e2:	bc 90       	ld	r11, X
    70e4:	d5 01       	movw	r26, r10
    70e6:	7c 91       	ld	r23, X
    70e8:	d7 01       	movw	r26, r14
    70ea:	d8 96       	adiw	r26, 0x38	; 56
    70ec:	dc 90       	ld	r13, X
    70ee:	7d 29       	or	r23, r13
    70f0:	d5 01       	movw	r26, r10
    70f2:	7c 93       	st	X, r23
    70f4:	62 b9       	out	0x02, r22	; 2
    70f6:	d7 01       	movw	r26, r14
    70f8:	d2 96       	adiw	r26, 0x32	; 50
    70fa:	cd 90       	ld	r12, X+
    70fc:	dc 90       	ld	r13, X
    70fe:	d6 01       	movw	r26, r12
    7100:	6c 91       	ld	r22, X
    7102:	d7 01       	movw	r26, r14
    7104:	dc 96       	adiw	r26, 0x3c	; 60
    7106:	7c 91       	ld	r23, X
    7108:	67 23       	and	r22, r23
    710a:	d6 01       	movw	r26, r12
    710c:	6c 93       	st	X, r22
    710e:	d7 01       	movw	r26, r14
    7110:	d2 96       	adiw	r26, 0x32	; 50
    7112:	cd 90       	ld	r12, X+
    7114:	dc 90       	ld	r13, X
    7116:	d6 01       	movw	r26, r12
    7118:	6c 91       	ld	r22, X
    711a:	d7 01       	movw	r26, r14
    711c:	d8 96       	adiw	r26, 0x38	; 56
    711e:	7c 91       	ld	r23, X
    7120:	67 2b       	or	r22, r23
    7122:	d6 01       	movw	r26, r12
    7124:	6c 93       	st	X, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:372
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    7126:	d7 01       	movw	r26, r14
    7128:	d0 96       	adiw	r26, 0x30	; 48
    712a:	cd 90       	ld	r12, X+
    712c:	dc 90       	ld	r13, X
    712e:	d6 01       	movw	r26, r12
    7130:	6c 91       	ld	r22, X
    7132:	d7 01       	movw	r26, r14
    7134:	db 96       	adiw	r26, 0x3b	; 59
    7136:	7c 91       	ld	r23, X
    7138:	67 23       	and	r22, r23
    713a:	d6 01       	movw	r26, r12
    713c:	6c 93       	st	X, r22
    713e:	12 b8       	out	0x02, r1	; 2
    7140:	d7 01       	movw	r26, r14
    7142:	d2 96       	adiw	r26, 0x32	; 50
    7144:	cd 90       	ld	r12, X+
    7146:	dc 90       	ld	r13, X
    7148:	d6 01       	movw	r26, r12
    714a:	6c 91       	ld	r22, X
    714c:	d7 01       	movw	r26, r14
    714e:	dc 96       	adiw	r26, 0x3c	; 60
    7150:	7c 91       	ld	r23, X
    7152:	67 23       	and	r22, r23
    7154:	d6 01       	movw	r26, r12
    7156:	6c 93       	st	X, r22
    7158:	d7 01       	movw	r26, r14
    715a:	d2 96       	adiw	r26, 0x32	; 50
    715c:	cd 90       	ld	r12, X+
    715e:	dc 90       	ld	r13, X
    7160:	d6 01       	movw	r26, r12
    7162:	6c 91       	ld	r22, X
    7164:	d7 01       	movw	r26, r14
    7166:	d8 96       	adiw	r26, 0x38	; 56
    7168:	7c 91       	ld	r23, X
    716a:	67 2b       	or	r22, r23
    716c:	d6 01       	movw	r26, r12
    716e:	6c 93       	st	X, r22
    7170:	61 e5       	ldi	r22, 0x51	; 81
    7172:	62 b9       	out	0x02, r22	; 2
    7174:	d7 01       	movw	r26, r14
    7176:	d2 96       	adiw	r26, 0x32	; 50
    7178:	cd 90       	ld	r12, X+
    717a:	dc 90       	ld	r13, X
    717c:	d6 01       	movw	r26, r12
    717e:	6c 91       	ld	r22, X
    7180:	d7 01       	movw	r26, r14
    7182:	dc 96       	adiw	r26, 0x3c	; 60
    7184:	7c 91       	ld	r23, X
    7186:	67 23       	and	r22, r23
    7188:	d6 01       	movw	r26, r12
    718a:	6c 93       	st	X, r22
    718c:	d7 01       	movw	r26, r14
    718e:	d2 96       	adiw	r26, 0x32	; 50
    7190:	cd 90       	ld	r12, X+
    7192:	dc 90       	ld	r13, X
    7194:	d6 01       	movw	r26, r12
    7196:	6c 91       	ld	r22, X
    7198:	d7 01       	movw	r26, r14
    719a:	d8 96       	adiw	r26, 0x38	; 56
    719c:	7c 91       	ld	r23, X
    719e:	67 2b       	or	r22, r23
    71a0:	d6 01       	movw	r26, r12
    71a2:	6c 93       	st	X, r22
    71a4:	d7 01       	movw	r26, r14
    71a6:	d0 96       	adiw	r26, 0x30	; 48
    71a8:	cd 90       	ld	r12, X+
    71aa:	dc 90       	ld	r13, X
    71ac:	d6 01       	movw	r26, r12
    71ae:	6c 91       	ld	r22, X
    71b0:	d7 01       	movw	r26, r14
    71b2:	d7 96       	adiw	r26, 0x37	; 55
    71b4:	7c 91       	ld	r23, X
    71b6:	67 2b       	or	r22, r23
    71b8:	d6 01       	movw	r26, r12
    71ba:	6c 93       	st	X, r22
    71bc:	32 b9       	out	0x02, r19	; 2
    71be:	d7 01       	movw	r26, r14
    71c0:	d2 96       	adiw	r26, 0x32	; 50
    71c2:	cd 90       	ld	r12, X+
    71c4:	dc 90       	ld	r13, X
    71c6:	d6 01       	movw	r26, r12
    71c8:	3c 91       	ld	r19, X
    71ca:	d7 01       	movw	r26, r14
    71cc:	dc 96       	adiw	r26, 0x3c	; 60
    71ce:	6c 91       	ld	r22, X
    71d0:	36 23       	and	r19, r22
    71d2:	d6 01       	movw	r26, r12
    71d4:	3c 93       	st	X, r19
    71d6:	d7 01       	movw	r26, r14
    71d8:	d2 96       	adiw	r26, 0x32	; 50
    71da:	cd 90       	ld	r12, X+
    71dc:	dc 90       	ld	r13, X
    71de:	d6 01       	movw	r26, r12
    71e0:	3c 91       	ld	r19, X
    71e2:	d7 01       	movw	r26, r14
    71e4:	d8 96       	adiw	r26, 0x38	; 56
    71e6:	6c 91       	ld	r22, X
    71e8:	36 2b       	or	r19, r22
    71ea:	d6 01       	movw	r26, r12
    71ec:	3c 93       	st	X, r19
    71ee:	22 b9       	out	0x02, r18	; 2
    71f0:	d7 01       	movw	r26, r14
    71f2:	d2 96       	adiw	r26, 0x32	; 50
    71f4:	6d 91       	ld	r22, X+
    71f6:	7c 91       	ld	r23, X
    71f8:	db 01       	movw	r26, r22
    71fa:	2c 91       	ld	r18, X
    71fc:	d7 01       	movw	r26, r14
    71fe:	dc 96       	adiw	r26, 0x3c	; 60
    7200:	3c 91       	ld	r19, X
    7202:	23 23       	and	r18, r19
    7204:	db 01       	movw	r26, r22
    7206:	2c 93       	st	X, r18
    7208:	d7 01       	movw	r26, r14
    720a:	d2 96       	adiw	r26, 0x32	; 50
    720c:	6d 91       	ld	r22, X+
    720e:	7c 91       	ld	r23, X
    7210:	db 01       	movw	r26, r22
    7212:	2c 91       	ld	r18, X
    7214:	d7 01       	movw	r26, r14
    7216:	d8 96       	adiw	r26, 0x38	; 56
    7218:	3c 91       	ld	r19, X
    721a:	23 2b       	or	r18, r19
    721c:	db 01       	movw	r26, r22
    721e:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:373
    writeCmdData16(ILI932X_VER_START_AD, y1);
    7220:	d7 01       	movw	r26, r14
    7222:	d0 96       	adiw	r26, 0x30	; 48
    7224:	6d 91       	ld	r22, X+
    7226:	7c 91       	ld	r23, X
    7228:	db 01       	movw	r26, r22
    722a:	2c 91       	ld	r18, X
    722c:	d7 01       	movw	r26, r14
    722e:	db 96       	adiw	r26, 0x3b	; 59
    7230:	3c 91       	ld	r19, X
    7232:	23 23       	and	r18, r19
    7234:	db 01       	movw	r26, r22
    7236:	2c 93       	st	X, r18
    7238:	12 b8       	out	0x02, r1	; 2
    723a:	d7 01       	movw	r26, r14
    723c:	d2 96       	adiw	r26, 0x32	; 50
    723e:	6d 91       	ld	r22, X+
    7240:	7c 91       	ld	r23, X
    7242:	db 01       	movw	r26, r22
    7244:	2c 91       	ld	r18, X
    7246:	d7 01       	movw	r26, r14
    7248:	dc 96       	adiw	r26, 0x3c	; 60
    724a:	3c 91       	ld	r19, X
    724c:	23 23       	and	r18, r19
    724e:	db 01       	movw	r26, r22
    7250:	2c 93       	st	X, r18
    7252:	d7 01       	movw	r26, r14
    7254:	d2 96       	adiw	r26, 0x32	; 50
    7256:	6d 91       	ld	r22, X+
    7258:	7c 91       	ld	r23, X
    725a:	db 01       	movw	r26, r22
    725c:	2c 91       	ld	r18, X
    725e:	d7 01       	movw	r26, r14
    7260:	d8 96       	adiw	r26, 0x38	; 56
    7262:	3c 91       	ld	r19, X
    7264:	23 2b       	or	r18, r19
    7266:	db 01       	movw	r26, r22
    7268:	2c 93       	st	X, r18
    726a:	22 e5       	ldi	r18, 0x52	; 82
    726c:	22 b9       	out	0x02, r18	; 2
    726e:	d7 01       	movw	r26, r14
    7270:	d2 96       	adiw	r26, 0x32	; 50
    7272:	6d 91       	ld	r22, X+
    7274:	7c 91       	ld	r23, X
    7276:	db 01       	movw	r26, r22
    7278:	2c 91       	ld	r18, X
    727a:	d7 01       	movw	r26, r14
    727c:	dc 96       	adiw	r26, 0x3c	; 60
    727e:	3c 91       	ld	r19, X
    7280:	23 23       	and	r18, r19
    7282:	db 01       	movw	r26, r22
    7284:	2c 93       	st	X, r18
    7286:	d7 01       	movw	r26, r14
    7288:	d2 96       	adiw	r26, 0x32	; 50
    728a:	6d 91       	ld	r22, X+
    728c:	7c 91       	ld	r23, X
    728e:	db 01       	movw	r26, r22
    7290:	2c 91       	ld	r18, X
    7292:	d7 01       	movw	r26, r14
    7294:	d8 96       	adiw	r26, 0x38	; 56
    7296:	3c 91       	ld	r19, X
    7298:	23 2b       	or	r18, r19
    729a:	db 01       	movw	r26, r22
    729c:	2c 93       	st	X, r18
    729e:	d7 01       	movw	r26, r14
    72a0:	d0 96       	adiw	r26, 0x30	; 48
    72a2:	6d 91       	ld	r22, X+
    72a4:	7c 91       	ld	r23, X
    72a6:	db 01       	movw	r26, r22
    72a8:	2c 91       	ld	r18, X
    72aa:	d7 01       	movw	r26, r14
    72ac:	d7 96       	adiw	r26, 0x37	; 55
    72ae:	3c 91       	ld	r19, X
    72b0:	23 2b       	or	r18, r19
    72b2:	db 01       	movw	r26, r22
    72b4:	2c 93       	st	X, r18
    72b6:	52 b9       	out	0x02, r21	; 2
    72b8:	d7 01       	movw	r26, r14
    72ba:	d2 96       	adiw	r26, 0x32	; 50
    72bc:	6d 91       	ld	r22, X+
    72be:	7c 91       	ld	r23, X
    72c0:	db 01       	movw	r26, r22
    72c2:	2c 91       	ld	r18, X
    72c4:	d7 01       	movw	r26, r14
    72c6:	dc 96       	adiw	r26, 0x3c	; 60
    72c8:	3c 91       	ld	r19, X
    72ca:	23 23       	and	r18, r19
    72cc:	db 01       	movw	r26, r22
    72ce:	2c 93       	st	X, r18
    72d0:	d7 01       	movw	r26, r14
    72d2:	d2 96       	adiw	r26, 0x32	; 50
    72d4:	6d 91       	ld	r22, X+
    72d6:	7c 91       	ld	r23, X
    72d8:	db 01       	movw	r26, r22
    72da:	2c 91       	ld	r18, X
    72dc:	d7 01       	movw	r26, r14
    72de:	d8 96       	adiw	r26, 0x38	; 56
    72e0:	3c 91       	ld	r19, X
    72e2:	23 2b       	or	r18, r19
    72e4:	db 01       	movw	r26, r22
    72e6:	2c 93       	st	X, r18
    72e8:	42 b9       	out	0x02, r20	; 2
    72ea:	d7 01       	movw	r26, r14
    72ec:	d2 96       	adiw	r26, 0x32	; 50
    72ee:	4d 91       	ld	r20, X+
    72f0:	5c 91       	ld	r21, X
    72f2:	da 01       	movw	r26, r20
    72f4:	2c 91       	ld	r18, X
    72f6:	d7 01       	movw	r26, r14
    72f8:	dc 96       	adiw	r26, 0x3c	; 60
    72fa:	3c 91       	ld	r19, X
    72fc:	23 23       	and	r18, r19
    72fe:	da 01       	movw	r26, r20
    7300:	2c 93       	st	X, r18
    7302:	d7 01       	movw	r26, r14
    7304:	d2 96       	adiw	r26, 0x32	; 50
    7306:	4d 91       	ld	r20, X+
    7308:	5c 91       	ld	r21, X
    730a:	da 01       	movw	r26, r20
    730c:	2c 91       	ld	r18, X
    730e:	d7 01       	movw	r26, r14
    7310:	d8 96       	adiw	r26, 0x38	; 56
    7312:	3c 91       	ld	r19, X
    7314:	23 2b       	or	r18, r19
    7316:	da 01       	movw	r26, r20
    7318:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:374
    writeCmdData16(ILI932X_VER_END_AD, y2);
    731a:	d7 01       	movw	r26, r14
    731c:	d0 96       	adiw	r26, 0x30	; 48
    731e:	4d 91       	ld	r20, X+
    7320:	5c 91       	ld	r21, X
    7322:	da 01       	movw	r26, r20
    7324:	2c 91       	ld	r18, X
    7326:	d7 01       	movw	r26, r14
    7328:	db 96       	adiw	r26, 0x3b	; 59
    732a:	3c 91       	ld	r19, X
    732c:	23 23       	and	r18, r19
    732e:	da 01       	movw	r26, r20
    7330:	2c 93       	st	X, r18
    7332:	12 b8       	out	0x02, r1	; 2
    7334:	d7 01       	movw	r26, r14
    7336:	d2 96       	adiw	r26, 0x32	; 50
    7338:	4d 91       	ld	r20, X+
    733a:	5c 91       	ld	r21, X
    733c:	da 01       	movw	r26, r20
    733e:	2c 91       	ld	r18, X
    7340:	d7 01       	movw	r26, r14
    7342:	dc 96       	adiw	r26, 0x3c	; 60
    7344:	3c 91       	ld	r19, X
    7346:	23 23       	and	r18, r19
    7348:	da 01       	movw	r26, r20
    734a:	2c 93       	st	X, r18
    734c:	d7 01       	movw	r26, r14
    734e:	d2 96       	adiw	r26, 0x32	; 50
    7350:	4d 91       	ld	r20, X+
    7352:	5c 91       	ld	r21, X
    7354:	da 01       	movw	r26, r20
    7356:	2c 91       	ld	r18, X
    7358:	d7 01       	movw	r26, r14
    735a:	d8 96       	adiw	r26, 0x38	; 56
    735c:	3c 91       	ld	r19, X
    735e:	23 2b       	or	r18, r19
    7360:	da 01       	movw	r26, r20
    7362:	2c 93       	st	X, r18
    7364:	23 e5       	ldi	r18, 0x53	; 83
    7366:	22 b9       	out	0x02, r18	; 2
    7368:	d7 01       	movw	r26, r14
    736a:	d2 96       	adiw	r26, 0x32	; 50
    736c:	4d 91       	ld	r20, X+
    736e:	5c 91       	ld	r21, X
    7370:	da 01       	movw	r26, r20
    7372:	2c 91       	ld	r18, X
    7374:	d7 01       	movw	r26, r14
    7376:	dc 96       	adiw	r26, 0x3c	; 60
    7378:	3c 91       	ld	r19, X
    737a:	23 23       	and	r18, r19
    737c:	da 01       	movw	r26, r20
    737e:	2c 93       	st	X, r18
    7380:	d7 01       	movw	r26, r14
    7382:	d2 96       	adiw	r26, 0x32	; 50
    7384:	4d 91       	ld	r20, X+
    7386:	5c 91       	ld	r21, X
    7388:	da 01       	movw	r26, r20
    738a:	2c 91       	ld	r18, X
    738c:	d7 01       	movw	r26, r14
    738e:	d8 96       	adiw	r26, 0x38	; 56
    7390:	3c 91       	ld	r19, X
    7392:	23 2b       	or	r18, r19
    7394:	da 01       	movw	r26, r20
    7396:	2c 93       	st	X, r18
    7398:	d7 01       	movw	r26, r14
    739a:	d0 96       	adiw	r26, 0x30	; 48
    739c:	4d 91       	ld	r20, X+
    739e:	5c 91       	ld	r21, X
    73a0:	da 01       	movw	r26, r20
    73a2:	2c 91       	ld	r18, X
    73a4:	d7 01       	movw	r26, r14
    73a6:	d7 96       	adiw	r26, 0x37	; 55
    73a8:	3c 91       	ld	r19, X
    73aa:	23 2b       	or	r18, r19
    73ac:	da 01       	movw	r26, r20
    73ae:	2c 93       	st	X, r18
    73b0:	12 b9       	out	0x02, r17	; 2
    73b2:	d7 01       	movw	r26, r14
    73b4:	d2 96       	adiw	r26, 0x32	; 50
    73b6:	4d 91       	ld	r20, X+
    73b8:	5c 91       	ld	r21, X
    73ba:	da 01       	movw	r26, r20
    73bc:	2c 91       	ld	r18, X
    73be:	d7 01       	movw	r26, r14
    73c0:	dc 96       	adiw	r26, 0x3c	; 60
    73c2:	3c 91       	ld	r19, X
    73c4:	23 23       	and	r18, r19
    73c6:	da 01       	movw	r26, r20
    73c8:	2c 93       	st	X, r18
    73ca:	d7 01       	movw	r26, r14
    73cc:	d2 96       	adiw	r26, 0x32	; 50
    73ce:	4d 91       	ld	r20, X+
    73d0:	5c 91       	ld	r21, X
    73d2:	da 01       	movw	r26, r20
    73d4:	2c 91       	ld	r18, X
    73d6:	d7 01       	movw	r26, r14
    73d8:	d8 96       	adiw	r26, 0x38	; 56
    73da:	3c 91       	ld	r19, X
    73dc:	23 2b       	or	r18, r19
    73de:	da 01       	movw	r26, r20
    73e0:	2c 93       	st	X, r18
    73e2:	02 b9       	out	0x02, r16	; 2
    73e4:	d7 01       	movw	r26, r14
    73e6:	d2 96       	adiw	r26, 0x32	; 50
    73e8:	4d 91       	ld	r20, X+
    73ea:	5c 91       	ld	r21, X
    73ec:	da 01       	movw	r26, r20
    73ee:	2c 91       	ld	r18, X
    73f0:	d7 01       	movw	r26, r14
    73f2:	dc 96       	adiw	r26, 0x3c	; 60
    73f4:	3c 91       	ld	r19, X
    73f6:	23 23       	and	r18, r19
    73f8:	da 01       	movw	r26, r20
    73fa:	2c 93       	st	X, r18
    73fc:	d7 01       	movw	r26, r14
    73fe:	d2 96       	adiw	r26, 0x32	; 50
    7400:	4d 91       	ld	r20, X+
    7402:	5c 91       	ld	r21, X
    7404:	da 01       	movw	r26, r20
    7406:	2c 91       	ld	r18, X
    7408:	d7 01       	movw	r26, r14
    740a:	d8 96       	adiw	r26, 0x38	; 56
    740c:	3c 91       	ld	r19, X
    740e:	23 2b       	or	r18, r19
    7410:	da 01       	movw	r26, r20
    7412:	2c 93       	st	X, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:375
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    7414:	d7 01       	movw	r26, r14
    7416:	d0 96       	adiw	r26, 0x30	; 48
    7418:	4d 91       	ld	r20, X+
    741a:	5c 91       	ld	r21, X
    741c:	da 01       	movw	r26, r20
    741e:	2c 91       	ld	r18, X
    7420:	d7 01       	movw	r26, r14
    7422:	db 96       	adiw	r26, 0x3b	; 59
    7424:	3c 91       	ld	r19, X
    7426:	23 23       	and	r18, r19
    7428:	da 01       	movw	r26, r20
    742a:	2c 93       	st	X, r18
    742c:	12 b8       	out	0x02, r1	; 2
    742e:	d7 01       	movw	r26, r14
    7430:	d2 96       	adiw	r26, 0x32	; 50
    7432:	4d 91       	ld	r20, X+
    7434:	5c 91       	ld	r21, X
    7436:	da 01       	movw	r26, r20
    7438:	2c 91       	ld	r18, X
    743a:	d7 01       	movw	r26, r14
    743c:	dc 96       	adiw	r26, 0x3c	; 60
    743e:	3c 91       	ld	r19, X
    7440:	23 23       	and	r18, r19
    7442:	da 01       	movw	r26, r20
    7444:	2c 93       	st	X, r18
    7446:	d7 01       	movw	r26, r14
    7448:	d2 96       	adiw	r26, 0x32	; 50
    744a:	4d 91       	ld	r20, X+
    744c:	5c 91       	ld	r21, X
    744e:	da 01       	movw	r26, r20
    7450:	2c 91       	ld	r18, X
    7452:	d7 01       	movw	r26, r14
    7454:	d8 96       	adiw	r26, 0x38	; 56
    7456:	3c 91       	ld	r19, X
    7458:	23 2b       	or	r18, r19
    745a:	da 01       	movw	r26, r20
    745c:	2c 93       	st	X, r18
    745e:	20 e2       	ldi	r18, 0x20	; 32
    7460:	22 b9       	out	0x02, r18	; 2
    7462:	d7 01       	movw	r26, r14
    7464:	d2 96       	adiw	r26, 0x32	; 50
    7466:	4d 91       	ld	r20, X+
    7468:	5c 91       	ld	r21, X
    746a:	da 01       	movw	r26, r20
    746c:	2c 91       	ld	r18, X
    746e:	d7 01       	movw	r26, r14
    7470:	dc 96       	adiw	r26, 0x3c	; 60
    7472:	3c 91       	ld	r19, X
    7474:	23 23       	and	r18, r19
    7476:	da 01       	movw	r26, r20
    7478:	2c 93       	st	X, r18
    747a:	d7 01       	movw	r26, r14
    747c:	d2 96       	adiw	r26, 0x32	; 50
    747e:	4d 91       	ld	r20, X+
    7480:	5c 91       	ld	r21, X
    7482:	da 01       	movw	r26, r20
    7484:	2c 91       	ld	r18, X
    7486:	d7 01       	movw	r26, r14
    7488:	d8 96       	adiw	r26, 0x38	; 56
    748a:	3c 91       	ld	r19, X
    748c:	23 2b       	or	r18, r19
    748e:	da 01       	movw	r26, r20
    7490:	2c 93       	st	X, r18
    7492:	d7 01       	movw	r26, r14
    7494:	d0 96       	adiw	r26, 0x30	; 48
    7496:	4d 91       	ld	r20, X+
    7498:	5c 91       	ld	r21, X
    749a:	da 01       	movw	r26, r20
    749c:	2c 91       	ld	r18, X
    749e:	d7 01       	movw	r26, r14
    74a0:	d7 96       	adiw	r26, 0x37	; 55
    74a2:	3c 91       	ld	r19, X
    74a4:	23 2b       	or	r18, r19
    74a6:	da 01       	movw	r26, r20
    74a8:	2c 93       	st	X, r18
    74aa:	f2 b9       	out	0x02, r31	; 2
    74ac:	d7 01       	movw	r26, r14
    74ae:	d2 96       	adiw	r26, 0x32	; 50
    74b0:	4d 91       	ld	r20, X+
    74b2:	5c 91       	ld	r21, X
    74b4:	da 01       	movw	r26, r20
    74b6:	2c 91       	ld	r18, X
    74b8:	d7 01       	movw	r26, r14
    74ba:	dc 96       	adiw	r26, 0x3c	; 60
    74bc:	3c 91       	ld	r19, X
    74be:	23 23       	and	r18, r19
    74c0:	da 01       	movw	r26, r20
    74c2:	2c 93       	st	X, r18
    74c4:	d7 01       	movw	r26, r14
    74c6:	d2 96       	adiw	r26, 0x32	; 50
    74c8:	4d 91       	ld	r20, X+
    74ca:	5c 91       	ld	r21, X
    74cc:	da 01       	movw	r26, r20
    74ce:	2c 91       	ld	r18, X
    74d0:	d7 01       	movw	r26, r14
    74d2:	d8 96       	adiw	r26, 0x38	; 56
    74d4:	3c 91       	ld	r19, X
    74d6:	23 2b       	or	r18, r19
    74d8:	da 01       	movw	r26, r20
    74da:	2c 93       	st	X, r18
    74dc:	e2 b9       	out	0x02, r30	; 2
    74de:	d7 01       	movw	r26, r14
    74e0:	d2 96       	adiw	r26, 0x32	; 50
    74e2:	ed 91       	ld	r30, X+
    74e4:	fc 91       	ld	r31, X
    74e6:	d3 97       	sbiw	r26, 0x33	; 51
    74e8:	20 81       	ld	r18, Z
    74ea:	dc 96       	adiw	r26, 0x3c	; 60
    74ec:	3c 91       	ld	r19, X
    74ee:	dc 97       	sbiw	r26, 0x3c	; 60
    74f0:	23 23       	and	r18, r19
    74f2:	20 83       	st	Z, r18
    74f4:	d2 96       	adiw	r26, 0x32	; 50
    74f6:	ed 91       	ld	r30, X+
    74f8:	fc 91       	ld	r31, X
    74fa:	d3 97       	sbiw	r26, 0x33	; 51
    74fc:	20 81       	ld	r18, Z
    74fe:	d8 96       	adiw	r26, 0x38	; 56
    7500:	3c 91       	ld	r19, X
    7502:	d8 97       	sbiw	r26, 0x38	; 56
    7504:	23 2b       	or	r18, r19
    7506:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:376
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    7508:	d0 96       	adiw	r26, 0x30	; 48
    750a:	ed 91       	ld	r30, X+
    750c:	fc 91       	ld	r31, X
    750e:	d1 97       	sbiw	r26, 0x31	; 49
    7510:	20 81       	ld	r18, Z
    7512:	db 96       	adiw	r26, 0x3b	; 59
    7514:	3c 91       	ld	r19, X
    7516:	db 97       	sbiw	r26, 0x3b	; 59
    7518:	23 23       	and	r18, r19
    751a:	20 83       	st	Z, r18
    751c:	12 b8       	out	0x02, r1	; 2
    751e:	d2 96       	adiw	r26, 0x32	; 50
    7520:	ed 91       	ld	r30, X+
    7522:	fc 91       	ld	r31, X
    7524:	d3 97       	sbiw	r26, 0x33	; 51
    7526:	20 81       	ld	r18, Z
    7528:	dc 96       	adiw	r26, 0x3c	; 60
    752a:	3c 91       	ld	r19, X
    752c:	dc 97       	sbiw	r26, 0x3c	; 60
    752e:	23 23       	and	r18, r19
    7530:	20 83       	st	Z, r18
    7532:	d2 96       	adiw	r26, 0x32	; 50
    7534:	ed 91       	ld	r30, X+
    7536:	fc 91       	ld	r31, X
    7538:	d3 97       	sbiw	r26, 0x33	; 51
    753a:	20 81       	ld	r18, Z
    753c:	d8 96       	adiw	r26, 0x38	; 56
    753e:	3c 91       	ld	r19, X
    7540:	d8 97       	sbiw	r26, 0x38	; 56
    7542:	23 2b       	or	r18, r19
    7544:	20 83       	st	Z, r18
    7546:	21 e2       	ldi	r18, 0x21	; 33
    7548:	22 b9       	out	0x02, r18	; 2
    754a:	d2 96       	adiw	r26, 0x32	; 50
    754c:	ed 91       	ld	r30, X+
    754e:	fc 91       	ld	r31, X
    7550:	d3 97       	sbiw	r26, 0x33	; 51
    7552:	20 81       	ld	r18, Z
    7554:	dc 96       	adiw	r26, 0x3c	; 60
    7556:	3c 91       	ld	r19, X
    7558:	dc 97       	sbiw	r26, 0x3c	; 60
    755a:	23 23       	and	r18, r19
    755c:	20 83       	st	Z, r18
    755e:	d2 96       	adiw	r26, 0x32	; 50
    7560:	ed 91       	ld	r30, X+
    7562:	fc 91       	ld	r31, X
    7564:	d3 97       	sbiw	r26, 0x33	; 51
    7566:	20 81       	ld	r18, Z
    7568:	d8 96       	adiw	r26, 0x38	; 56
    756a:	3c 91       	ld	r19, X
    756c:	d8 97       	sbiw	r26, 0x38	; 56
    756e:	23 2b       	or	r18, r19
    7570:	20 83       	st	Z, r18
    7572:	d0 96       	adiw	r26, 0x30	; 48
    7574:	ed 91       	ld	r30, X+
    7576:	fc 91       	ld	r31, X
    7578:	d1 97       	sbiw	r26, 0x31	; 49
    757a:	20 81       	ld	r18, Z
    757c:	d7 96       	adiw	r26, 0x37	; 55
    757e:	3c 91       	ld	r19, X
    7580:	d7 97       	sbiw	r26, 0x37	; 55
    7582:	23 2b       	or	r18, r19
    7584:	20 83       	st	Z, r18
    7586:	92 b9       	out	0x02, r25	; 2
    7588:	d2 96       	adiw	r26, 0x32	; 50
    758a:	ed 91       	ld	r30, X+
    758c:	fc 91       	ld	r31, X
    758e:	d3 97       	sbiw	r26, 0x33	; 51
    7590:	90 81       	ld	r25, Z
    7592:	dc 96       	adiw	r26, 0x3c	; 60
    7594:	2c 91       	ld	r18, X
    7596:	dc 97       	sbiw	r26, 0x3c	; 60
    7598:	92 23       	and	r25, r18
    759a:	90 83       	st	Z, r25
    759c:	d2 96       	adiw	r26, 0x32	; 50
    759e:	ed 91       	ld	r30, X+
    75a0:	fc 91       	ld	r31, X
    75a2:	d3 97       	sbiw	r26, 0x33	; 51
    75a4:	90 81       	ld	r25, Z
    75a6:	d8 96       	adiw	r26, 0x38	; 56
    75a8:	2c 91       	ld	r18, X
    75aa:	d8 97       	sbiw	r26, 0x38	; 56
    75ac:	92 2b       	or	r25, r18
    75ae:	90 83       	st	Z, r25
    75b0:	82 b9       	out	0x02, r24	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    75b2:	d2 96       	adiw	r26, 0x32	; 50
    75b4:	ed 91       	ld	r30, X+
    75b6:	fc 91       	ld	r31, X
    75b8:	d3 97       	sbiw	r26, 0x33	; 51
    75ba:	80 81       	ld	r24, Z
    75bc:	dc 96       	adiw	r26, 0x3c	; 60
    75be:	9c 91       	ld	r25, X
    75c0:	dc 97       	sbiw	r26, 0x3c	; 60
    75c2:	89 23       	and	r24, r25
    75c4:	80 83       	st	Z, r24
    75c6:	d2 96       	adiw	r26, 0x32	; 50
    75c8:	ed 91       	ld	r30, X+
    75ca:	fc 91       	ld	r31, X
    75cc:	d3 97       	sbiw	r26, 0x33	; 51
    75ce:	80 81       	ld	r24, Z
    75d0:	d8 96       	adiw	r26, 0x38	; 56
    75d2:	9c 91       	ld	r25, X
    75d4:	89 2b       	or	r24, r25
    75d6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:397
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
	
		Push_Command(XC, x_buf, 4); //set x address
		Push_Command(YC, y_buf, 4); //set y address
	}
	CS_IDLE;		
    75d8:	d7 01       	movw	r26, r14
    75da:	9e 96       	adiw	r26, 0x2e	; 46
    75dc:	ed 91       	ld	r30, X+
    75de:	fc 91       	ld	r31, X
    75e0:	9f 97       	sbiw	r26, 0x2f	; 47
    75e2:	80 81       	ld	r24, Z
    75e4:	d6 96       	adiw	r26, 0x36	; 54
    75e6:	9c 91       	ld	r25, X
    75e8:	89 2b       	or	r24, r25
    75ea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:398
}
    75ec:	28 96       	adiw	r28, 0x08	; 8
    75ee:	0f b6       	in	r0, 0x3f	; 63
    75f0:	f8 94       	cli
    75f2:	de bf       	out	0x3e, r29	; 62
    75f4:	0f be       	out	0x3f, r0	; 63
    75f6:	cd bf       	out	0x3d, r28	; 61
    75f8:	df 91       	pop	r29
    75fa:	cf 91       	pop	r28
    75fc:	1f 91       	pop	r17
    75fe:	0f 91       	pop	r16
    7600:	ff 90       	pop	r15
    7602:	ef 90       	pop	r14
    7604:	df 90       	pop	r13
    7606:	cf 90       	pop	r12
    7608:	bf 90       	pop	r11
    760a:	af 90       	pop	r10
    760c:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    760e:	f7 01       	movw	r30, r14
    7610:	a6 85       	ldd	r26, Z+14	; 0x0e
    7612:	b7 85       	ldd	r27, Z+15	; 0x0f
    7614:	59 01       	movw	r10, r18
    7616:	a0 94       	com	r10
    7618:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:354
			      x2 = WIDTH  - 1 - t;
    761a:	9d 01       	movw	r18, r26
    761c:	26 1b       	sub	r18, r22
    761e:	37 0b       	sbc	r19, r23
    7620:	21 50       	subi	r18, 0x01	; 1
    7622:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    7624:	60 89       	ldd	r22, Z+16	; 0x10
    7626:	71 89       	ldd	r23, Z+17	; 0x11
    7628:	68 01       	movw	r12, r16
    762a:	c0 94       	com	r12
    762c:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:357
			      y2 = HEIGHT - 1 - t;
    762e:	8a 01       	movw	r16, r20
    7630:	00 95       	com	r16
    7632:	10 95       	com	r17
    7634:	06 0f       	add	r16, r22
    7636:	17 1f       	adc	r17, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:359
			      x  = x2;
			      y  = y2;
    7638:	c8 01       	movw	r24, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:358
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    763a:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:356
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    763c:	a6 01       	movw	r20, r12
    763e:	46 0f       	add	r20, r22
    7640:	57 1f       	adc	r21, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:353
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    7642:	b5 01       	movw	r22, r10
    7644:	f1 cc       	rjmp	.-1566   	; 0x7028 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x86>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    7646:	f7 01       	movw	r30, r14
    7648:	a0 89       	ldd	r26, Z+16	; 0x10
    764a:	b1 89       	ldd	r27, Z+17	; 0x11
    764c:	69 01       	movw	r12, r18
    764e:	c0 94       	com	r12
    7650:	d0 94       	com	r13
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    7652:	cd 01       	movw	r24, r26
    7654:	86 1b       	sub	r24, r22
    7656:	97 0b       	sbc	r25, r23
    7658:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:367
			      x  = x1;
    765a:	fa 01       	movw	r30, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:365
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    765c:	98 01       	movw	r18, r16
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:366
			      y2 = HEIGHT - 1 - t;
    765e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:363
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    7660:	ba 01       	movw	r22, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:364
			      y1 = HEIGHT - 1 - x2;
    7662:	a6 01       	movw	r20, r12
    7664:	4a 0f       	add	r20, r26
    7666:	5b 1f       	adc	r21, r27
    7668:	e1 cc       	rjmp	.-1598   	; 0x702c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:340
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
			      y  = y1;
    766a:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:339
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    766c:	fb 01       	movw	r30, r22
    766e:	de cc       	rjmp	.-1604   	; 0x702c <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x8a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:378
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    7670:	01 97       	sbiw	r24, 0x01	; 1
    7672:	09 f0       	breq	.+2      	; 0x7676 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x6d4>
    7674:	e5 c1       	rjmp	.+970    	; 0x7a40 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0xa9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:380
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    7676:	d0 96       	adiw	r26, 0x30	; 48
    7678:	ed 91       	ld	r30, X+
    767a:	fc 91       	ld	r31, X
    767c:	d1 97       	sbiw	r26, 0x31	; 49
    767e:	80 81       	ld	r24, Z
    7680:	db 96       	adiw	r26, 0x3b	; 59
    7682:	9c 91       	ld	r25, X
    7684:	db 97       	sbiw	r26, 0x3b	; 59
    7686:	89 23       	and	r24, r25
    7688:	80 83       	st	Z, r24
    768a:	82 e0       	ldi	r24, 0x02	; 2
    768c:	82 b9       	out	0x02, r24	; 2
    768e:	d2 96       	adiw	r26, 0x32	; 50
    7690:	ed 91       	ld	r30, X+
    7692:	fc 91       	ld	r31, X
    7694:	d3 97       	sbiw	r26, 0x33	; 51
    7696:	80 81       	ld	r24, Z
    7698:	dc 96       	adiw	r26, 0x3c	; 60
    769a:	9c 91       	ld	r25, X
    769c:	dc 97       	sbiw	r26, 0x3c	; 60
    769e:	89 23       	and	r24, r25
    76a0:	80 83       	st	Z, r24
    76a2:	d2 96       	adiw	r26, 0x32	; 50
    76a4:	ed 91       	ld	r30, X+
    76a6:	fc 91       	ld	r31, X
    76a8:	d3 97       	sbiw	r26, 0x33	; 51
    76aa:	80 81       	ld	r24, Z
    76ac:	d8 96       	adiw	r26, 0x38	; 56
    76ae:	9c 91       	ld	r25, X
    76b0:	d8 97       	sbiw	r26, 0x38	; 56
    76b2:	89 2b       	or	r24, r25
    76b4:	80 83       	st	Z, r24
    76b6:	d0 96       	adiw	r26, 0x30	; 48
    76b8:	ed 91       	ld	r30, X+
    76ba:	fc 91       	ld	r31, X
    76bc:	d1 97       	sbiw	r26, 0x31	; 49
    76be:	80 81       	ld	r24, Z
    76c0:	d7 96       	adiw	r26, 0x37	; 55
    76c2:	9c 91       	ld	r25, X
    76c4:	d7 97       	sbiw	r26, 0x37	; 55
    76c6:	89 2b       	or	r24, r25
    76c8:	80 83       	st	Z, r24
    76ca:	72 b9       	out	0x02, r23	; 2
    76cc:	d2 96       	adiw	r26, 0x32	; 50
    76ce:	ed 91       	ld	r30, X+
    76d0:	fc 91       	ld	r31, X
    76d2:	d3 97       	sbiw	r26, 0x33	; 51
    76d4:	80 81       	ld	r24, Z
    76d6:	dc 96       	adiw	r26, 0x3c	; 60
    76d8:	9c 91       	ld	r25, X
    76da:	dc 97       	sbiw	r26, 0x3c	; 60
    76dc:	89 23       	and	r24, r25
    76de:	80 83       	st	Z, r24
    76e0:	d2 96       	adiw	r26, 0x32	; 50
    76e2:	ed 91       	ld	r30, X+
    76e4:	fc 91       	ld	r31, X
    76e6:	d3 97       	sbiw	r26, 0x33	; 51
    76e8:	80 81       	ld	r24, Z
    76ea:	d8 96       	adiw	r26, 0x38	; 56
    76ec:	9c 91       	ld	r25, X
    76ee:	d8 97       	sbiw	r26, 0x38	; 56
    76f0:	89 2b       	or	r24, r25
    76f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:381
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    76f4:	d0 96       	adiw	r26, 0x30	; 48
    76f6:	ed 91       	ld	r30, X+
    76f8:	fc 91       	ld	r31, X
    76fa:	d1 97       	sbiw	r26, 0x31	; 49
    76fc:	80 81       	ld	r24, Z
    76fe:	db 96       	adiw	r26, 0x3b	; 59
    7700:	9c 91       	ld	r25, X
    7702:	db 97       	sbiw	r26, 0x3b	; 59
    7704:	89 23       	and	r24, r25
    7706:	80 83       	st	Z, r24
    7708:	83 e0       	ldi	r24, 0x03	; 3
    770a:	82 b9       	out	0x02, r24	; 2
    770c:	d2 96       	adiw	r26, 0x32	; 50
    770e:	ed 91       	ld	r30, X+
    7710:	fc 91       	ld	r31, X
    7712:	d3 97       	sbiw	r26, 0x33	; 51
    7714:	80 81       	ld	r24, Z
    7716:	dc 96       	adiw	r26, 0x3c	; 60
    7718:	9c 91       	ld	r25, X
    771a:	dc 97       	sbiw	r26, 0x3c	; 60
    771c:	89 23       	and	r24, r25
    771e:	80 83       	st	Z, r24
    7720:	d2 96       	adiw	r26, 0x32	; 50
    7722:	ed 91       	ld	r30, X+
    7724:	fc 91       	ld	r31, X
    7726:	d3 97       	sbiw	r26, 0x33	; 51
    7728:	80 81       	ld	r24, Z
    772a:	d8 96       	adiw	r26, 0x38	; 56
    772c:	9c 91       	ld	r25, X
    772e:	d8 97       	sbiw	r26, 0x38	; 56
    7730:	89 2b       	or	r24, r25
    7732:	80 83       	st	Z, r24
    7734:	d0 96       	adiw	r26, 0x30	; 48
    7736:	ed 91       	ld	r30, X+
    7738:	fc 91       	ld	r31, X
    773a:	d1 97       	sbiw	r26, 0x31	; 49
    773c:	80 81       	ld	r24, Z
    773e:	d7 96       	adiw	r26, 0x37	; 55
    7740:	9c 91       	ld	r25, X
    7742:	d7 97       	sbiw	r26, 0x37	; 55
    7744:	89 2b       	or	r24, r25
    7746:	80 83       	st	Z, r24
    7748:	62 b9       	out	0x02, r22	; 2
    774a:	d2 96       	adiw	r26, 0x32	; 50
    774c:	ed 91       	ld	r30, X+
    774e:	fc 91       	ld	r31, X
    7750:	d3 97       	sbiw	r26, 0x33	; 51
    7752:	80 81       	ld	r24, Z
    7754:	dc 96       	adiw	r26, 0x3c	; 60
    7756:	9c 91       	ld	r25, X
    7758:	dc 97       	sbiw	r26, 0x3c	; 60
    775a:	89 23       	and	r24, r25
    775c:	80 83       	st	Z, r24
    775e:	d2 96       	adiw	r26, 0x32	; 50
    7760:	ed 91       	ld	r30, X+
    7762:	fc 91       	ld	r31, X
    7764:	d3 97       	sbiw	r26, 0x33	; 51
    7766:	80 81       	ld	r24, Z
    7768:	d8 96       	adiw	r26, 0x38	; 56
    776a:	9c 91       	ld	r25, X
    776c:	d8 97       	sbiw	r26, 0x38	; 56
    776e:	89 2b       	or	r24, r25
    7770:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:382
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    7772:	d0 96       	adiw	r26, 0x30	; 48
    7774:	ed 91       	ld	r30, X+
    7776:	fc 91       	ld	r31, X
    7778:	d1 97       	sbiw	r26, 0x31	; 49
    777a:	80 81       	ld	r24, Z
    777c:	db 96       	adiw	r26, 0x3b	; 59
    777e:	9c 91       	ld	r25, X
    7780:	db 97       	sbiw	r26, 0x3b	; 59
    7782:	89 23       	and	r24, r25
    7784:	80 83       	st	Z, r24
    7786:	86 e0       	ldi	r24, 0x06	; 6
    7788:	82 b9       	out	0x02, r24	; 2
    778a:	d2 96       	adiw	r26, 0x32	; 50
    778c:	ed 91       	ld	r30, X+
    778e:	fc 91       	ld	r31, X
    7790:	d3 97       	sbiw	r26, 0x33	; 51
    7792:	80 81       	ld	r24, Z
    7794:	dc 96       	adiw	r26, 0x3c	; 60
    7796:	9c 91       	ld	r25, X
    7798:	dc 97       	sbiw	r26, 0x3c	; 60
    779a:	89 23       	and	r24, r25
    779c:	80 83       	st	Z, r24
    779e:	d2 96       	adiw	r26, 0x32	; 50
    77a0:	ed 91       	ld	r30, X+
    77a2:	fc 91       	ld	r31, X
    77a4:	d3 97       	sbiw	r26, 0x33	; 51
    77a6:	80 81       	ld	r24, Z
    77a8:	d8 96       	adiw	r26, 0x38	; 56
    77aa:	9c 91       	ld	r25, X
    77ac:	d8 97       	sbiw	r26, 0x38	; 56
    77ae:	89 2b       	or	r24, r25
    77b0:	80 83       	st	Z, r24
    77b2:	d0 96       	adiw	r26, 0x30	; 48
    77b4:	ed 91       	ld	r30, X+
    77b6:	fc 91       	ld	r31, X
    77b8:	d1 97       	sbiw	r26, 0x31	; 49
    77ba:	80 81       	ld	r24, Z
    77bc:	d7 96       	adiw	r26, 0x37	; 55
    77be:	9c 91       	ld	r25, X
    77c0:	d7 97       	sbiw	r26, 0x37	; 55
    77c2:	89 2b       	or	r24, r25
    77c4:	80 83       	st	Z, r24
    77c6:	52 b9       	out	0x02, r21	; 2
    77c8:	d2 96       	adiw	r26, 0x32	; 50
    77ca:	ed 91       	ld	r30, X+
    77cc:	fc 91       	ld	r31, X
    77ce:	d3 97       	sbiw	r26, 0x33	; 51
    77d0:	80 81       	ld	r24, Z
    77d2:	dc 96       	adiw	r26, 0x3c	; 60
    77d4:	9c 91       	ld	r25, X
    77d6:	dc 97       	sbiw	r26, 0x3c	; 60
    77d8:	89 23       	and	r24, r25
    77da:	80 83       	st	Z, r24
    77dc:	d2 96       	adiw	r26, 0x32	; 50
    77de:	ed 91       	ld	r30, X+
    77e0:	fc 91       	ld	r31, X
    77e2:	d3 97       	sbiw	r26, 0x33	; 51
    77e4:	80 81       	ld	r24, Z
    77e6:	d8 96       	adiw	r26, 0x38	; 56
    77e8:	9c 91       	ld	r25, X
    77ea:	d8 97       	sbiw	r26, 0x38	; 56
    77ec:	89 2b       	or	r24, r25
    77ee:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:383
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    77f0:	d0 96       	adiw	r26, 0x30	; 48
    77f2:	ed 91       	ld	r30, X+
    77f4:	fc 91       	ld	r31, X
    77f6:	d1 97       	sbiw	r26, 0x31	; 49
    77f8:	80 81       	ld	r24, Z
    77fa:	db 96       	adiw	r26, 0x3b	; 59
    77fc:	9c 91       	ld	r25, X
    77fe:	db 97       	sbiw	r26, 0x3b	; 59
    7800:	89 23       	and	r24, r25
    7802:	80 83       	st	Z, r24
    7804:	87 e0       	ldi	r24, 0x07	; 7
    7806:	82 b9       	out	0x02, r24	; 2
    7808:	d2 96       	adiw	r26, 0x32	; 50
    780a:	ed 91       	ld	r30, X+
    780c:	fc 91       	ld	r31, X
    780e:	d3 97       	sbiw	r26, 0x33	; 51
    7810:	80 81       	ld	r24, Z
    7812:	dc 96       	adiw	r26, 0x3c	; 60
    7814:	9c 91       	ld	r25, X
    7816:	dc 97       	sbiw	r26, 0x3c	; 60
    7818:	89 23       	and	r24, r25
    781a:	80 83       	st	Z, r24
    781c:	d2 96       	adiw	r26, 0x32	; 50
    781e:	ed 91       	ld	r30, X+
    7820:	fc 91       	ld	r31, X
    7822:	d3 97       	sbiw	r26, 0x33	; 51
    7824:	80 81       	ld	r24, Z
    7826:	d8 96       	adiw	r26, 0x38	; 56
    7828:	9c 91       	ld	r25, X
    782a:	d8 97       	sbiw	r26, 0x38	; 56
    782c:	89 2b       	or	r24, r25
    782e:	80 83       	st	Z, r24
    7830:	d0 96       	adiw	r26, 0x30	; 48
    7832:	ed 91       	ld	r30, X+
    7834:	fc 91       	ld	r31, X
    7836:	d1 97       	sbiw	r26, 0x31	; 49
    7838:	80 81       	ld	r24, Z
    783a:	d7 96       	adiw	r26, 0x37	; 55
    783c:	9c 91       	ld	r25, X
    783e:	d7 97       	sbiw	r26, 0x37	; 55
    7840:	89 2b       	or	r24, r25
    7842:	80 83       	st	Z, r24
    7844:	42 b9       	out	0x02, r20	; 2
    7846:	d2 96       	adiw	r26, 0x32	; 50
    7848:	ed 91       	ld	r30, X+
    784a:	fc 91       	ld	r31, X
    784c:	d3 97       	sbiw	r26, 0x33	; 51
    784e:	80 81       	ld	r24, Z
    7850:	dc 96       	adiw	r26, 0x3c	; 60
    7852:	9c 91       	ld	r25, X
    7854:	dc 97       	sbiw	r26, 0x3c	; 60
    7856:	89 23       	and	r24, r25
    7858:	80 83       	st	Z, r24
    785a:	d2 96       	adiw	r26, 0x32	; 50
    785c:	ed 91       	ld	r30, X+
    785e:	fc 91       	ld	r31, X
    7860:	d3 97       	sbiw	r26, 0x33	; 51
    7862:	80 81       	ld	r24, Z
    7864:	d8 96       	adiw	r26, 0x38	; 56
    7866:	9c 91       	ld	r25, X
    7868:	d8 97       	sbiw	r26, 0x38	; 56
    786a:	89 2b       	or	r24, r25
    786c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:384
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    786e:	d0 96       	adiw	r26, 0x30	; 48
    7870:	ed 91       	ld	r30, X+
    7872:	fc 91       	ld	r31, X
    7874:	d1 97       	sbiw	r26, 0x31	; 49
    7876:	80 81       	ld	r24, Z
    7878:	db 96       	adiw	r26, 0x3b	; 59
    787a:	9c 91       	ld	r25, X
    787c:	db 97       	sbiw	r26, 0x3b	; 59
    787e:	89 23       	and	r24, r25
    7880:	80 83       	st	Z, r24
    7882:	84 e0       	ldi	r24, 0x04	; 4
    7884:	82 b9       	out	0x02, r24	; 2
    7886:	d2 96       	adiw	r26, 0x32	; 50
    7888:	ed 91       	ld	r30, X+
    788a:	fc 91       	ld	r31, X
    788c:	d3 97       	sbiw	r26, 0x33	; 51
    788e:	80 81       	ld	r24, Z
    7890:	dc 96       	adiw	r26, 0x3c	; 60
    7892:	9c 91       	ld	r25, X
    7894:	dc 97       	sbiw	r26, 0x3c	; 60
    7896:	89 23       	and	r24, r25
    7898:	80 83       	st	Z, r24
    789a:	d2 96       	adiw	r26, 0x32	; 50
    789c:	ed 91       	ld	r30, X+
    789e:	fc 91       	ld	r31, X
    78a0:	d3 97       	sbiw	r26, 0x33	; 51
    78a2:	80 81       	ld	r24, Z
    78a4:	d8 96       	adiw	r26, 0x38	; 56
    78a6:	9c 91       	ld	r25, X
    78a8:	d8 97       	sbiw	r26, 0x38	; 56
    78aa:	89 2b       	or	r24, r25
    78ac:	80 83       	st	Z, r24
    78ae:	d0 96       	adiw	r26, 0x30	; 48
    78b0:	ed 91       	ld	r30, X+
    78b2:	fc 91       	ld	r31, X
    78b4:	d1 97       	sbiw	r26, 0x31	; 49
    78b6:	80 81       	ld	r24, Z
    78b8:	d7 96       	adiw	r26, 0x37	; 55
    78ba:	9c 91       	ld	r25, X
    78bc:	d7 97       	sbiw	r26, 0x37	; 55
    78be:	89 2b       	or	r24, r25
    78c0:	80 83       	st	Z, r24
    78c2:	32 b9       	out	0x02, r19	; 2
    78c4:	d2 96       	adiw	r26, 0x32	; 50
    78c6:	ed 91       	ld	r30, X+
    78c8:	fc 91       	ld	r31, X
    78ca:	d3 97       	sbiw	r26, 0x33	; 51
    78cc:	80 81       	ld	r24, Z
    78ce:	dc 96       	adiw	r26, 0x3c	; 60
    78d0:	9c 91       	ld	r25, X
    78d2:	dc 97       	sbiw	r26, 0x3c	; 60
    78d4:	89 23       	and	r24, r25
    78d6:	80 83       	st	Z, r24
    78d8:	d2 96       	adiw	r26, 0x32	; 50
    78da:	ed 91       	ld	r30, X+
    78dc:	fc 91       	ld	r31, X
    78de:	d3 97       	sbiw	r26, 0x33	; 51
    78e0:	80 81       	ld	r24, Z
    78e2:	d8 96       	adiw	r26, 0x38	; 56
    78e4:	9c 91       	ld	r25, X
    78e6:	d8 97       	sbiw	r26, 0x38	; 56
    78e8:	89 2b       	or	r24, r25
    78ea:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:385
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    78ec:	d0 96       	adiw	r26, 0x30	; 48
    78ee:	ed 91       	ld	r30, X+
    78f0:	fc 91       	ld	r31, X
    78f2:	d1 97       	sbiw	r26, 0x31	; 49
    78f4:	80 81       	ld	r24, Z
    78f6:	db 96       	adiw	r26, 0x3b	; 59
    78f8:	9c 91       	ld	r25, X
    78fa:	db 97       	sbiw	r26, 0x3b	; 59
    78fc:	89 23       	and	r24, r25
    78fe:	80 83       	st	Z, r24
    7900:	85 e0       	ldi	r24, 0x05	; 5
    7902:	82 b9       	out	0x02, r24	; 2
    7904:	d2 96       	adiw	r26, 0x32	; 50
    7906:	ed 91       	ld	r30, X+
    7908:	fc 91       	ld	r31, X
    790a:	d3 97       	sbiw	r26, 0x33	; 51
    790c:	80 81       	ld	r24, Z
    790e:	dc 96       	adiw	r26, 0x3c	; 60
    7910:	9c 91       	ld	r25, X
    7912:	dc 97       	sbiw	r26, 0x3c	; 60
    7914:	89 23       	and	r24, r25
    7916:	80 83       	st	Z, r24
    7918:	d2 96       	adiw	r26, 0x32	; 50
    791a:	ed 91       	ld	r30, X+
    791c:	fc 91       	ld	r31, X
    791e:	d3 97       	sbiw	r26, 0x33	; 51
    7920:	80 81       	ld	r24, Z
    7922:	d8 96       	adiw	r26, 0x38	; 56
    7924:	9c 91       	ld	r25, X
    7926:	d8 97       	sbiw	r26, 0x38	; 56
    7928:	89 2b       	or	r24, r25
    792a:	80 83       	st	Z, r24
    792c:	d0 96       	adiw	r26, 0x30	; 48
    792e:	ed 91       	ld	r30, X+
    7930:	fc 91       	ld	r31, X
    7932:	d1 97       	sbiw	r26, 0x31	; 49
    7934:	80 81       	ld	r24, Z
    7936:	d7 96       	adiw	r26, 0x37	; 55
    7938:	9c 91       	ld	r25, X
    793a:	d7 97       	sbiw	r26, 0x37	; 55
    793c:	89 2b       	or	r24, r25
    793e:	80 83       	st	Z, r24
    7940:	22 b9       	out	0x02, r18	; 2
    7942:	d2 96       	adiw	r26, 0x32	; 50
    7944:	ed 91       	ld	r30, X+
    7946:	fc 91       	ld	r31, X
    7948:	d3 97       	sbiw	r26, 0x33	; 51
    794a:	80 81       	ld	r24, Z
    794c:	dc 96       	adiw	r26, 0x3c	; 60
    794e:	9c 91       	ld	r25, X
    7950:	dc 97       	sbiw	r26, 0x3c	; 60
    7952:	89 23       	and	r24, r25
    7954:	80 83       	st	Z, r24
    7956:	d2 96       	adiw	r26, 0x32	; 50
    7958:	ed 91       	ld	r30, X+
    795a:	fc 91       	ld	r31, X
    795c:	d3 97       	sbiw	r26, 0x33	; 51
    795e:	80 81       	ld	r24, Z
    7960:	d8 96       	adiw	r26, 0x38	; 56
    7962:	9c 91       	ld	r25, X
    7964:	d8 97       	sbiw	r26, 0x38	; 56
    7966:	89 2b       	or	r24, r25
    7968:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:386
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    796a:	d0 96       	adiw	r26, 0x30	; 48
    796c:	ed 91       	ld	r30, X+
    796e:	fc 91       	ld	r31, X
    7970:	d1 97       	sbiw	r26, 0x31	; 49
    7972:	80 81       	ld	r24, Z
    7974:	db 96       	adiw	r26, 0x3b	; 59
    7976:	9c 91       	ld	r25, X
    7978:	db 97       	sbiw	r26, 0x3b	; 59
    797a:	89 23       	and	r24, r25
    797c:	80 83       	st	Z, r24
    797e:	88 e0       	ldi	r24, 0x08	; 8
    7980:	82 b9       	out	0x02, r24	; 2
    7982:	d2 96       	adiw	r26, 0x32	; 50
    7984:	ed 91       	ld	r30, X+
    7986:	fc 91       	ld	r31, X
    7988:	d3 97       	sbiw	r26, 0x33	; 51
    798a:	80 81       	ld	r24, Z
    798c:	dc 96       	adiw	r26, 0x3c	; 60
    798e:	9c 91       	ld	r25, X
    7990:	dc 97       	sbiw	r26, 0x3c	; 60
    7992:	89 23       	and	r24, r25
    7994:	80 83       	st	Z, r24
    7996:	d2 96       	adiw	r26, 0x32	; 50
    7998:	ed 91       	ld	r30, X+
    799a:	fc 91       	ld	r31, X
    799c:	d3 97       	sbiw	r26, 0x33	; 51
    799e:	80 81       	ld	r24, Z
    79a0:	d8 96       	adiw	r26, 0x38	; 56
    79a2:	9c 91       	ld	r25, X
    79a4:	d8 97       	sbiw	r26, 0x38	; 56
    79a6:	89 2b       	or	r24, r25
    79a8:	80 83       	st	Z, r24
    79aa:	d0 96       	adiw	r26, 0x30	; 48
    79ac:	ed 91       	ld	r30, X+
    79ae:	fc 91       	ld	r31, X
    79b0:	d1 97       	sbiw	r26, 0x31	; 49
    79b2:	80 81       	ld	r24, Z
    79b4:	d7 96       	adiw	r26, 0x37	; 55
    79b6:	9c 91       	ld	r25, X
    79b8:	d7 97       	sbiw	r26, 0x37	; 55
    79ba:	89 2b       	or	r24, r25
    79bc:	80 83       	st	Z, r24
    79be:	12 b9       	out	0x02, r17	; 2
    79c0:	d2 96       	adiw	r26, 0x32	; 50
    79c2:	ed 91       	ld	r30, X+
    79c4:	fc 91       	ld	r31, X
    79c6:	d3 97       	sbiw	r26, 0x33	; 51
    79c8:	80 81       	ld	r24, Z
    79ca:	dc 96       	adiw	r26, 0x3c	; 60
    79cc:	9c 91       	ld	r25, X
    79ce:	dc 97       	sbiw	r26, 0x3c	; 60
    79d0:	89 23       	and	r24, r25
    79d2:	80 83       	st	Z, r24
    79d4:	d2 96       	adiw	r26, 0x32	; 50
    79d6:	ed 91       	ld	r30, X+
    79d8:	fc 91       	ld	r31, X
    79da:	d3 97       	sbiw	r26, 0x33	; 51
    79dc:	80 81       	ld	r24, Z
    79de:	d8 96       	adiw	r26, 0x38	; 56
    79e0:	9c 91       	ld	r25, X
    79e2:	d8 97       	sbiw	r26, 0x38	; 56
    79e4:	89 2b       	or	r24, r25
    79e6:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:387
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    79e8:	d0 96       	adiw	r26, 0x30	; 48
    79ea:	ed 91       	ld	r30, X+
    79ec:	fc 91       	ld	r31, X
    79ee:	d1 97       	sbiw	r26, 0x31	; 49
    79f0:	80 81       	ld	r24, Z
    79f2:	db 96       	adiw	r26, 0x3b	; 59
    79f4:	9c 91       	ld	r25, X
    79f6:	db 97       	sbiw	r26, 0x3b	; 59
    79f8:	89 23       	and	r24, r25
    79fa:	80 83       	st	Z, r24
    79fc:	89 e0       	ldi	r24, 0x09	; 9
    79fe:	82 b9       	out	0x02, r24	; 2
    7a00:	d2 96       	adiw	r26, 0x32	; 50
    7a02:	ed 91       	ld	r30, X+
    7a04:	fc 91       	ld	r31, X
    7a06:	d3 97       	sbiw	r26, 0x33	; 51
    7a08:	80 81       	ld	r24, Z
    7a0a:	dc 96       	adiw	r26, 0x3c	; 60
    7a0c:	9c 91       	ld	r25, X
    7a0e:	dc 97       	sbiw	r26, 0x3c	; 60
    7a10:	89 23       	and	r24, r25
    7a12:	80 83       	st	Z, r24
    7a14:	d2 96       	adiw	r26, 0x32	; 50
    7a16:	ed 91       	ld	r30, X+
    7a18:	fc 91       	ld	r31, X
    7a1a:	d3 97       	sbiw	r26, 0x33	; 51
    7a1c:	80 81       	ld	r24, Z
    7a1e:	d8 96       	adiw	r26, 0x38	; 56
    7a20:	9c 91       	ld	r25, X
    7a22:	d8 97       	sbiw	r26, 0x38	; 56
    7a24:	89 2b       	or	r24, r25
    7a26:	80 83       	st	Z, r24
    7a28:	d0 96       	adiw	r26, 0x30	; 48
    7a2a:	ed 91       	ld	r30, X+
    7a2c:	fc 91       	ld	r31, X
    7a2e:	d1 97       	sbiw	r26, 0x31	; 49
    7a30:	80 81       	ld	r24, Z
    7a32:	d7 96       	adiw	r26, 0x37	; 55
    7a34:	9c 91       	ld	r25, X
    7a36:	d7 97       	sbiw	r26, 0x37	; 55
    7a38:	89 2b       	or	r24, r25
    7a3a:	80 83       	st	Z, r24
    7a3c:	02 b9       	out	0x02, r16	; 2
    7a3e:	b9 cd       	rjmp	.-1166   	; 0x75b2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x610>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:391
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF}; 
    7a40:	7d 83       	std	Y+5, r23	; 0x05
    7a42:	6e 83       	std	Y+6, r22	; 0x06
    7a44:	3f 83       	std	Y+7, r19	; 0x07
    7a46:	28 87       	std	Y+8, r18	; 0x08
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:392
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF}; 
    7a48:	59 83       	std	Y+1, r21	; 0x01
    7a4a:	4a 83       	std	Y+2, r20	; 0x02
    7a4c:	1b 83       	std	Y+3, r17	; 0x03
    7a4e:	0c 83       	std	Y+4, r16	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:394
	
		Push_Command(XC, x_buf, 4); //set x address
    7a50:	f7 01       	movw	r30, r14
    7a52:	64 8d       	ldd	r22, Z+28	; 0x1c
    7a54:	75 8d       	ldd	r23, Z+29	; 0x1d
    7a56:	24 e0       	ldi	r18, 0x04	; 4
    7a58:	ae 01       	movw	r20, r28
    7a5a:	4b 5f       	subi	r20, 0xFB	; 251
    7a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7a5e:	c7 01       	movw	r24, r14
    7a60:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:395
		Push_Command(YC, y_buf, 4); //set y address
    7a64:	d7 01       	movw	r26, r14
    7a66:	5e 96       	adiw	r26, 0x1e	; 30
    7a68:	6d 91       	ld	r22, X+
    7a6a:	7c 91       	ld	r23, X
    7a6c:	24 e0       	ldi	r18, 0x04	; 4
    7a6e:	ae 01       	movw	r20, r28
    7a70:	4f 5f       	subi	r20, 0xFF	; 255
    7a72:	5f 4f       	sbci	r21, 0xFF	; 255
    7a74:	c7 01       	movw	r24, r14
    7a76:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    7a7a:	ae cd       	rjmp	.-1188   	; 0x75d8 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)+0x636>

00007a7c <draw_menu(bool)>:
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1684




bool draw_menu(bool redraw)
{
    7a7c:	2f 92       	push	r2
    7a7e:	3f 92       	push	r3
    7a80:	4f 92       	push	r4
    7a82:	5f 92       	push	r5
    7a84:	6f 92       	push	r6
    7a86:	7f 92       	push	r7
    7a88:	8f 92       	push	r8
    7a8a:	9f 92       	push	r9
    7a8c:	af 92       	push	r10
    7a8e:	bf 92       	push	r11
    7a90:	cf 92       	push	r12
    7a92:	df 92       	push	r13
    7a94:	ef 92       	push	r14
    7a96:	ff 92       	push	r15
    7a98:	0f 93       	push	r16
    7a9a:	1f 93       	push	r17
    7a9c:	cf 93       	push	r28
    7a9e:	df 93       	push	r29
    7aa0:	cd b7       	in	r28, 0x3d	; 61
    7aa2:	de b7       	in	r29, 0x3e	; 62
    7aa4:	c3 5e       	subi	r28, 0xE3	; 227
    7aa6:	d1 09       	sbc	r29, r1
    7aa8:	0f b6       	in	r0, 0x3f	; 63
    7aaa:	f8 94       	cli
    7aac:	de bf       	out	0x3e, r29	; 62
    7aae:	0f be       	out	0x3f, r0	; 63
    7ab0:	cd bf       	out	0x3d, r28	; 61
    7ab2:	b8 2e       	mov	r11, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1716
  uint8_t menu_args1;
  uint8_t redraw_class;
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);
    7ab4:	ce 01       	movw	r24, r28
    7ab6:	8d 54       	subi	r24, 0x4D	; 77
    7ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    7aba:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <MenuHistoryGetMenu(unsigned char*)>
    7abe:	3c 01       	movw	r6, r24
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:186
  	}        
} 

uint8_t LCDWIKI_TOUCH::TP_Scan(uint8_t mode)
{
	if(TIRQ_STATE==0) 
    7ac0:	e0 91 af 0d 	lds	r30, 0x0DAF	; 0x800daf <my_touch+0x17>
    7ac4:	f0 91 b0 0d 	lds	r31, 0x0DB0	; 0x800db0 <my_touch+0x18>
    7ac8:	80 81       	ld	r24, Z
    7aca:	90 91 b5 0d 	lds	r25, 0x0DB5	; 0x800db5 <my_touch+0x1d>
    7ace:	89 23       	and	r24, r25
    7ad0:	09 f0       	breq	.+2      	; 0x7ad4 <draw_menu(bool)+0x58>
    7ad2:	76 c2       	rjmp	.+1260   	; 0x7fc0 <draw_menu(bool)+0x544>
TP_Read_Coordinate():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7ad4:	80 ed       	ldi	r24, 0xD0	; 208
    7ad6:	0e 94 31 85 	call	0x10a62	; 0x10a62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7ada:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7adc:	80 e9       	ldi	r24, 0x90	; 144
    7ade:	0e 94 31 85 	call	0x10a62	; 0x10a62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7ae2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:147
} 

uint8_t LCDWIKI_TOUCH::TP_Read_Coordinate(uint16_t *x,uint16_t *y)
{
        uint16_t xtemp,ytemp;                                                    
        xtemp=TP_Read_XY(CMD_RDX);
    7ae4:	80 ed       	ldi	r24, 0xD0	; 208
    7ae6:	0e 94 31 85 	call	0x10a62	; 0x10a62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7aea:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:148
        ytemp=TP_Read_XY(CMD_RDY);
    7aec:	80 e9       	ldi	r24, 0x90	; 144
    7aee:	0e 94 31 85 	call	0x10a62	; 0x10a62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>
    7af2:	6c 01       	movw	r12, r24
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:171
	flag=TP_Read_Coordinate(&x2,&y2);
    if(flag==0)
    {
		return 0;   
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    7af4:	e8 14       	cp	r14, r8
    7af6:	f9 04       	cpc	r15, r9
    7af8:	48 f0       	brcs	.+18     	; 0x7b0c <draw_menu(bool)+0x90>
    7afa:	c4 01       	movw	r24, r8
    7afc:	c2 96       	adiw	r24, 0x32	; 50
    7afe:	e8 16       	cp	r14, r24
    7b00:	f9 06       	cpc	r15, r25
    7b02:	50 f0       	brcs	.+20     	; 0x7b18 <draw_menu(bool)+0x9c>
    7b04:	8e 14       	cp	r8, r14
    7b06:	9f 04       	cpc	r9, r15
    7b08:	08 f4       	brcc	.+2      	; 0x7b0c <draw_menu(bool)+0x90>
    7b0a:	52 c0       	rjmp	.+164    	; 0x7bb0 <draw_menu(bool)+0x134>
    7b0c:	c7 01       	movw	r24, r14
    7b0e:	c2 96       	adiw	r24, 0x32	; 50
    7b10:	88 16       	cp	r8, r24
    7b12:	99 06       	cpc	r9, r25
    7b14:	08 f0       	brcs	.+2      	; 0x7b18 <draw_menu(bool)+0x9c>
    7b16:	4c c0       	rjmp	.+152    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:172
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    7b18:	0c 15       	cp	r16, r12
    7b1a:	1d 05       	cpc	r17, r13
    7b1c:	48 f0       	brcs	.+18     	; 0x7b30 <draw_menu(bool)+0xb4>
    7b1e:	c6 01       	movw	r24, r12
    7b20:	c2 96       	adiw	r24, 0x32	; 50
    7b22:	08 17       	cp	r16, r24
    7b24:	19 07       	cpc	r17, r25
    7b26:	48 f0       	brcs	.+18     	; 0x7b3a <draw_menu(bool)+0xbe>
    7b28:	c0 16       	cp	r12, r16
    7b2a:	d1 06       	cpc	r13, r17
    7b2c:	08 f4       	brcc	.+2      	; 0x7b30 <draw_menu(bool)+0xb4>
    7b2e:	40 c0       	rjmp	.+128    	; 0x7bb0 <draw_menu(bool)+0x134>
    7b30:	c8 01       	movw	r24, r16
    7b32:	c2 96       	adiw	r24, 0x32	; 50
    7b34:	c8 16       	cp	r12, r24
    7b36:	d9 06       	cpc	r13, r25
    7b38:	d8 f5       	brcc	.+118    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:174
    {
        *x=(x1+x2)/2;
    7b3a:	e8 0c       	add	r14, r8
    7b3c:	f9 1c       	adc	r15, r9
    7b3e:	97 01       	movw	r18, r14
    7b40:	36 95       	lsr	r19
    7b42:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:201
			temp = (long)XFAC*x/10000;
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
    7b44:	a4 e5       	ldi	r26, 0x54	; 84
    7b46:	b3 e0       	ldi	r27, 0x03	; 3
    7b48:	0e 94 cb b4 	call	0x16996	; 0x16996 <__umulhisi3>
    7b4c:	20 e1       	ldi	r18, 0x10	; 16
    7b4e:	22 2e       	mov	r2, r18
    7b50:	27 e2       	ldi	r18, 0x27	; 39
    7b52:	32 2e       	mov	r3, r18
    7b54:	41 2c       	mov	r4, r1
    7b56:	51 2c       	mov	r5, r1
    7b58:	a2 01       	movw	r20, r4
    7b5a:	91 01       	movw	r18, r2
    7b5c:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
    7b60:	79 01       	movw	r14, r18
    7b62:	6e e0       	ldi	r22, 0x0E	; 14
    7b64:	e6 1a       	sub	r14, r22
    7b66:	f1 08       	sbc	r15, r1
    7b68:	f0 92 9d 0d 	sts	0x0D9D, r15	; 0x800d9d <my_touch+0x5>
    7b6c:	e0 92 9c 0d 	sts	0x0D9C, r14	; 0x800d9c <my_touch+0x4>
TP_Read_Coordinate2():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:175
    }
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//Before and after the two samples are within +- ERR_RANGE.
    &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
    {
        *x=(x1+x2)/2;
        *y=(y1+y2)/2;
    7b70:	0c 0d       	add	r16, r12
    7b72:	1d 1d       	adc	r17, r13
    7b74:	98 01       	movw	r18, r16
    7b76:	36 95       	lsr	r19
    7b78:	27 95       	ror	r18
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:202
			x=temp+XOFFSET;
			temp = (long)YFAC*y/10000;
		    y=temp+YOFFSET;
	   */
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
    7b7a:	a4 e0       	ldi	r26, 0x04	; 4
    7b7c:	b5 e0       	ldi	r27, 0x05	; 5
    7b7e:	0e 94 cb b4 	call	0x16996	; 0x16996 <__umulhisi3>
    7b82:	a2 01       	movw	r20, r4
    7b84:	91 01       	movw	r18, r2
    7b86:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
    7b8a:	2e 51       	subi	r18, 0x1E	; 30
    7b8c:	31 09       	sbc	r19, r1
    7b8e:	30 93 9f 0d 	sts	0x0D9F, r19	; 0x800d9f <my_touch+0x7>
    7b92:	20 93 9e 0d 	sts	0x0D9E, r18	; 0x800d9e <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:203
			switch(touch_rotation)
    7b96:	80 91 a5 0d 	lds	r24, 0x0DA5	; 0x800da5 <my_touch+0xd>
    7b9a:	81 30       	cpi	r24, 0x01	; 1
    7b9c:	09 f4       	brne	.+2      	; 0x7ba0 <draw_menu(bool)+0x124>
    7b9e:	c6 c1       	rjmp	.+908    	; 0x7f2c <draw_menu(bool)+0x4b0>
    7ba0:	08 f4       	brcc	.+2      	; 0x7ba4 <draw_menu(bool)+0x128>
    7ba2:	93 c1       	rjmp	.+806    	; 0x7eca <draw_menu(bool)+0x44e>
    7ba4:	82 30       	cpi	r24, 0x02	; 2
    7ba6:	09 f4       	brne	.+2      	; 0x7baa <draw_menu(bool)+0x12e>
    7ba8:	f2 c1       	rjmp	.+996    	; 0x7f8e <draw_menu(bool)+0x512>
    7baa:	83 30       	cpi	r24, 0x03	; 3
    7bac:	09 f4       	brne	.+2      	; 0x7bb0 <draw_menu(bool)+0x134>
    7bae:	fb c1       	rjmp	.+1014   	; 0x7fa6 <draw_menu(bool)+0x52a>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:315
					break;
				default:
					break;
			}
	 	}
		if((touch_statue&TP_PRES_DOWN)==0)
    7bb0:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0xc>
    7bb4:	87 fd       	sbrc	r24, 7
    7bb6:	13 c0       	rjmp	.+38     	; 0x7bde <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:317
		{		 
			touch_statue=TP_PRES_DOWN|TP_CATH_PRES; 
    7bb8:	80 ec       	ldi	r24, 0xC0	; 192
    7bba:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <my_touch+0xc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:318
			x0=x;
    7bbe:	80 91 9c 0d 	lds	r24, 0x0D9C	; 0x800d9c <my_touch+0x4>
    7bc2:	90 91 9d 0d 	lds	r25, 0x0D9D	; 0x800d9d <my_touch+0x5>
    7bc6:	90 93 99 0d 	sts	0x0D99, r25	; 0x800d99 <my_touch+0x1>
    7bca:	80 93 98 0d 	sts	0x0D98, r24	; 0x800d98 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:319
			y0=y;  	   			 
    7bce:	80 91 9e 0d 	lds	r24, 0x0D9E	; 0x800d9e <my_touch+0x6>
    7bd2:	90 91 9f 0d 	lds	r25, 0x0D9F	; 0x800d9f <my_touch+0x7>
    7bd6:	90 93 9b 0d 	sts	0x0D9B, r25	; 0x800d9b <my_touch+0x3>
    7bda:	80 93 9a 0d 	sts	0x0D9A, r24	; 0x800d9a <my_touch+0x2>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1722

  click_x = 0;
  click_y = 0;

  my_touch.TP_Scan(0);
  if (my_touch.TP_Get_State()&TP_PRES_DOWN && redraw == false)
    7bde:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0xc>
    7be2:	87 ff       	sbrs	r24, 7
    7be4:	08 c2       	rjmp	.+1040   	; 0x7ff6 <draw_menu(bool)+0x57a>
    7be6:	b1 10       	cpse	r11, r1
    7be8:	06 c2       	rjmp	.+1036   	; 0x7ff6 <draw_menu(bool)+0x57a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1724
  {
    click_x = my_touch.x;
    7bea:	80 91 9c 0d 	lds	r24, 0x0D9C	; 0x800d9c <my_touch+0x4>
    7bee:	90 91 9d 0d 	lds	r25, 0x0D9D	; 0x800d9d <my_touch+0x5>
    7bf2:	cc 53       	subi	r28, 0x3C	; 60
    7bf4:	df 4f       	sbci	r29, 0xFF	; 255
    7bf6:	99 83       	std	Y+1, r25	; 0x01
    7bf8:	88 83       	st	Y, r24
    7bfa:	c4 5c       	subi	r28, 0xC4	; 196
    7bfc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1725
    click_y = my_touch.y;
    7bfe:	e0 91 9e 0d 	lds	r30, 0x0D9E	; 0x800d9e <my_touch+0x6>
    7c02:	f0 91 9f 0d 	lds	r31, 0x0D9F	; 0x800d9f <my_touch+0x7>
    7c06:	ca 53       	subi	r28, 0x3A	; 58
    7c08:	df 4f       	sbci	r29, 0xFF	; 255
    7c0a:	f9 83       	std	Y+1, r31	; 0x01
    7c0c:	e8 83       	st	Y, r30
    7c0e:	c6 5c       	subi	r28, 0xC6	; 198
    7c10:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1728
  }

  global_x = pgm_read_word(&current->x);
    7c12:	83 01       	movw	r16, r6
    7c14:	02 5b       	subi	r16, 0xB2	; 178
    7c16:	1d 4f       	sbci	r17, 0xFD	; 253
    7c18:	f8 01       	movw	r30, r16
    7c1a:	25 91       	lpm	r18, Z+
    7c1c:	34 91       	lpm	r19, Z
    7c1e:	c8 54       	subi	r28, 0x48	; 72
    7c20:	df 4f       	sbci	r29, 0xFF	; 255
    7c22:	39 83       	std	Y+1, r19	; 0x01
    7c24:	28 83       	st	Y, r18
    7c26:	c8 5b       	subi	r28, 0xB8	; 184
    7c28:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1729
  global_y = pgm_read_word(&current->y);
    7c2a:	73 01       	movw	r14, r6
    7c2c:	30 eb       	ldi	r19, 0xB0	; 176
    7c2e:	e3 1a       	sub	r14, r19
    7c30:	3d ef       	ldi	r19, 0xFD	; 253
    7c32:	f3 0a       	sbc	r15, r19
    7c34:	f7 01       	movw	r30, r14
    7c36:	45 91       	lpm	r20, Z+
    7c38:	54 91       	lpm	r21, Z
    7c3a:	c6 54       	subi	r28, 0x46	; 70
    7c3c:	df 4f       	sbci	r29, 0xFF	; 255
    7c3e:	59 83       	std	Y+1, r21	; 0x01
    7c40:	48 83       	st	Y, r20
    7c42:	ca 5b       	subi	r28, 0xBA	; 186
    7c44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1732


  rfnt = pgm_read_word(&current->redraw_class_0);
    7c46:	f3 01       	movw	r30, r6
    7c48:	e6 5a       	subi	r30, 0xA6	; 166
    7c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    7c4c:	25 91       	lpm	r18, Z+
    7c4e:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1733
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7c50:	63 01       	movw	r12, r6
    7c52:	53 eb       	ldi	r21, 0xB3	; 179
    7c54:	c5 1a       	sub	r12, r21
    7c56:	5d ef       	ldi	r21, 0xFD	; 253
    7c58:	d5 0a       	sbc	r13, r21
    7c5a:	f6 01       	movw	r30, r12
    7c5c:	84 91       	lpm	r24, Z
    7c5e:	cd 54       	subi	r28, 0x4D	; 77
    7c60:	df 4f       	sbci	r29, 0xFF	; 255
    7c62:	68 81       	ld	r22, Y
    7c64:	c3 5b       	subi	r28, 0xB3	; 179
    7c66:	d0 40       	sbci	r29, 0x00	; 0
    7c68:	70 e0       	ldi	r23, 0x00	; 0
    7c6a:	4f ef       	ldi	r20, 0xFF	; 255
    7c6c:	90 e0       	ldi	r25, 0x00	; 0
    7c6e:	f9 01       	movw	r30, r18
    7c70:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1735
  if (rdr == 0)
    cbi(redraw_class, 0);
    7c72:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1734
  global_y = pgm_read_word(&current->y);


  rfnt = pgm_read_word(&current->redraw_class_0);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    7c74:	88 23       	and	r24, r24
    7c76:	11 f0       	breq	.+4      	; 0x7c7c <draw_menu(bool)+0x200>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1737
    cbi(redraw_class, 0);
  else
    sbi(redraw_class, 0);
    7c78:	aa 24       	eor	r10, r10
    7c7a:	a3 94       	inc	r10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1739
  ///
  rfnt = pgm_read_word(&current->redraw_class_1);
    7c7c:	f3 01       	movw	r30, r6
    7c7e:	e4 5a       	subi	r30, 0xA4	; 164
    7c80:	fd 4f       	sbci	r31, 0xFD	; 253
    7c82:	25 91       	lpm	r18, Z+
    7c84:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1740
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7c86:	f6 01       	movw	r30, r12
    7c88:	84 91       	lpm	r24, Z
    7c8a:	cd 54       	subi	r28, 0x4D	; 77
    7c8c:	df 4f       	sbci	r29, 0xFF	; 255
    7c8e:	68 81       	ld	r22, Y
    7c90:	c3 5b       	subi	r28, 0xB3	; 179
    7c92:	d0 40       	sbci	r29, 0x00	; 0
    7c94:	70 e0       	ldi	r23, 0x00	; 0
    7c96:	4f ef       	ldi	r20, 0xFF	; 255
    7c98:	90 e0       	ldi	r25, 0x00	; 0
    7c9a:	f9 01       	movw	r30, r18
    7c9c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1741
  if (rdr == 0)
    7c9e:	81 11       	cpse	r24, r1
    7ca0:	b7 c1       	rjmp	.+878    	; 0x8010 <draw_menu(bool)+0x594>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1742
    cbi(redraw_class, 1);
    7ca2:	e8 94       	clt
    7ca4:	a1 f8       	bld	r10, 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1746
  else
    sbi(redraw_class, 1);
  ///
  rfnt = pgm_read_word(&current->redraw_class_2);
    7ca6:	f3 01       	movw	r30, r6
    7ca8:	e2 5a       	subi	r30, 0xA2	; 162
    7caa:	fd 4f       	sbci	r31, 0xFD	; 253
    7cac:	25 91       	lpm	r18, Z+
    7cae:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1747
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
    7cb0:	f6 01       	movw	r30, r12
    7cb2:	84 91       	lpm	r24, Z
    7cb4:	cd 54       	subi	r28, 0x4D	; 77
    7cb6:	df 4f       	sbci	r29, 0xFF	; 255
    7cb8:	68 81       	ld	r22, Y
    7cba:	c3 5b       	subi	r28, 0xB3	; 179
    7cbc:	d0 40       	sbci	r29, 0x00	; 0
    7cbe:	70 e0       	ldi	r23, 0x00	; 0
    7cc0:	4f ef       	ldi	r20, 0xFF	; 255
    7cc2:	90 e0       	ldi	r25, 0x00	; 0
    7cc4:	f9 01       	movw	r30, r18
    7cc6:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1748
  if (rdr == 0)
    7cc8:	81 11       	cpse	r24, r1
    7cca:	a5 c1       	rjmp	.+842    	; 0x8016 <draw_menu(bool)+0x59a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1749
    cbi(redraw_class, 2);
    7ccc:	8a 2d       	mov	r24, r10
    7cce:	8b 7f       	andi	r24, 0xFB	; 251
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1753
  else
    sbi(redraw_class, 2);
  ///
  if (redraw == false)
    7cd0:	b1 10       	cpse	r11, r1
    7cd2:	a4 c1       	rjmp	.+840    	; 0x801c <draw_menu(bool)+0x5a0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1754
    cbi(redraw_class, 3);
    7cd4:	87 7f       	andi	r24, 0xF7	; 247
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
  else
    sbi(redraw_class, 3);
    7cd6:	cf 52       	subi	r28, 0x2F	; 47
    7cd8:	df 4f       	sbci	r29, 0xFF	; 255
    7cda:	88 83       	st	Y, r24
    7cdc:	c1 5d       	subi	r28, 0xD1	; 209
    7cde:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1759
  /////
  /////
  rdr = pgm_read_byte(&current->redraw_class);
    7ce0:	f3 01       	movw	r30, r6
    7ce2:	e7 5a       	subi	r30, 0xA7	; 167
    7ce4:	fd 4f       	sbci	r31, 0xFD	; 253
    7ce6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1760
  if (enable_redraw(rdr, redraw_class) == true)
    7ce8:	cf 52       	subi	r28, 0x2F	; 47
    7cea:	df 4f       	sbci	r29, 0xFF	; 255
    7cec:	68 81       	ld	r22, Y
    7cee:	c1 5d       	subi	r28, 0xD1	; 209
    7cf0:	d0 40       	sbci	r29, 0x00	; 0
    7cf2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    7cf6:	88 23       	and	r24, r24
    7cf8:	d9 f0       	breq	.+54     	; 0x7d30 <draw_menu(bool)+0x2b4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1762
  {
    strcpy_P(str1, pgm_read_word(&current->name));
    7cfa:	f3 01       	movw	r30, r6
    7cfc:	65 91       	lpm	r22, Z+
    7cfe:	74 91       	lpm	r23, Z
    7d00:	ce 01       	movw	r24, r28
    7d02:	01 96       	adiw	r24, 0x01	; 1
    7d04:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1763
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
    7d08:	f7 01       	movw	r30, r14
    7d0a:	45 91       	lpm	r20, Z+
    7d0c:	54 91       	lpm	r21, Z
    7d0e:	f8 01       	movw	r30, r16
    7d10:	65 91       	lpm	r22, Z+
    7d12:	74 91       	lpm	r23, Z
    7d14:	4b 5f       	subi	r20, 0xFB	; 251
    7d16:	5f 4f       	sbci	r21, 0xFF	; 255
    7d18:	6b 5f       	subi	r22, 0xFB	; 251
    7d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7d1c:	ee 24       	eor	r14, r14
    7d1e:	ea 94       	dec	r14
    7d20:	fe 2c       	mov	r15, r14
    7d22:	10 e0       	ldi	r17, 0x00	; 0
    7d24:	00 e0       	ldi	r16, 0x00	; 0
    7d26:	22 e0       	ldi	r18, 0x02	; 2
    7d28:	ce 01       	movw	r24, r28
    7d2a:	01 96       	adiw	r24, 0x01	; 1
    7d2c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1718
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    7d30:	91 2c       	mov	r9, r1
    7d32:	c4 53       	subi	r28, 0x34	; 52
    7d34:	df 4f       	sbci	r29, 0xFF	; 255
    7d36:	18 82       	st	Y, r1
    7d38:	cc 5c       	subi	r28, 0xCC	; 204
    7d3a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7d3c:	13 01       	movw	r2, r6
    7d3e:	fb eb       	ldi	r31, 0xBB	; 187
    7d40:	2f 1a       	sub	r2, r31
    7d42:	fd ef       	ldi	r31, 0xFD	; 253
    7d44:	3f 0a       	sbc	r3, r31
    7d46:	f1 01       	movw	r30, r2
    7d48:	84 91       	lpm	r24, Z
    7d4a:	98 16       	cp	r9, r24
    7d4c:	08 f0       	brcs	.+2      	; 0x7d50 <draw_menu(bool)+0x2d4>
    7d4e:	68 c1       	rjmp	.+720    	; 0x8020 <draw_menu(bool)+0x5a4>
    7d50:	f1 e1       	ldi	r31, 0x11	; 17
    7d52:	9f 9e       	mul	r9, r31
    7d54:	20 01       	movw	r4, r0
    7d56:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1773
  {
    button_1 = &current->button_1[idx];
    //rfnt = pgm_read_word(&button_1->enable_show);
    //active = (ret_fptr(rfnt))(pgm_read_byte(&button_1->args), menu_args1, -1);
    //if (active == 0) continue;
    rdr = pgm_read_byte(&button_1->redraw_class);
    7d58:	f2 01       	movw	r30, r4
    7d5a:	70 96       	adiw	r30, 0x10	; 16
    7d5c:	e6 0d       	add	r30, r6
    7d5e:	f7 1d       	adc	r31, r7
    7d60:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1774
    if (enable_redraw(rdr, redraw_class) == true)
    7d62:	cf 52       	subi	r28, 0x2F	; 47
    7d64:	df 4f       	sbci	r29, 0xFF	; 255
    7d66:	68 81       	ld	r22, Y
    7d68:	c1 5d       	subi	r28, 0xD1	; 209
    7d6a:	d0 40       	sbci	r29, 0x00	; 0
    7d6c:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    7d70:	88 23       	and	r24, r24
    7d72:	09 f4       	brne	.+2      	; 0x7d76 <draw_menu(bool)+0x2fa>
    7d74:	43 c0       	rjmp	.+134    	; 0x7dfc <draw_menu(bool)+0x380>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1776
    {
      strcpy_P(str2, pgm_read_word(&button_1->name));
    7d76:	f2 01       	movw	r30, r4
    7d78:	32 96       	adiw	r30, 0x02	; 2
    7d7a:	e6 0d       	add	r30, r6
    7d7c:	f7 1d       	adc	r31, r7
    7d7e:	65 91       	lpm	r22, Z+
    7d80:	74 91       	lpm	r23, Z
    7d82:	ce 01       	movw	r24, r28
    7d84:	8f 57       	subi	r24, 0x7F	; 127
    7d86:	9f 4f       	sbci	r25, 0xFF	; 255
    7d88:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1777
      str1[0] = 0;
    7d8c:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1778
      button_click_1(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), pgm_read_byte(&button_1->font_size), pgm_read_byte(&button_1->font_size), str2, str1, 0);
    7d8e:	f2 01       	movw	r30, r4
    7d90:	3c 96       	adiw	r30, 0x0c	; 12
    7d92:	e6 0d       	add	r30, r6
    7d94:	f7 1d       	adc	r31, r7
    7d96:	e4 90       	lpm	r14, Z
    7d98:	04 91       	lpm	r16, Z
    7d9a:	f2 01       	movw	r30, r4
    7d9c:	3a 96       	adiw	r30, 0x0a	; 10
    7d9e:	e6 0d       	add	r30, r6
    7da0:	f7 1d       	adc	r31, r7
    7da2:	25 91       	lpm	r18, Z+
    7da4:	34 91       	lpm	r19, Z
    7da6:	f2 01       	movw	r30, r4
    7da8:	38 96       	adiw	r30, 0x08	; 8
    7daa:	e6 0d       	add	r30, r6
    7dac:	f7 1d       	adc	r31, r7
    7dae:	45 91       	lpm	r20, Z+
    7db0:	54 91       	lpm	r21, Z
    7db2:	f2 01       	movw	r30, r4
    7db4:	36 96       	adiw	r30, 0x06	; 6
    7db6:	e6 0d       	add	r30, r6
    7db8:	f7 1d       	adc	r31, r7
    7dba:	65 91       	lpm	r22, Z+
    7dbc:	74 91       	lpm	r23, Z
    7dbe:	f2 01       	movw	r30, r4
    7dc0:	34 96       	adiw	r30, 0x04	; 4
    7dc2:	e6 0d       	add	r30, r6
    7dc4:	f7 1d       	adc	r31, r7
    7dc6:	85 91       	lpm	r24, Z+
    7dc8:	94 91       	lpm	r25, Z
    7dca:	c6 54       	subi	r28, 0x46	; 70
    7dcc:	df 4f       	sbci	r29, 0xFF	; 255
    7dce:	e8 81       	ld	r30, Y
    7dd0:	f9 81       	ldd	r31, Y+1	; 0x01
    7dd2:	ca 5b       	subi	r28, 0xBA	; 186
    7dd4:	d0 40       	sbci	r29, 0x00	; 0
    7dd6:	6e 0f       	add	r22, r30
    7dd8:	7f 1f       	adc	r23, r31
    7dda:	81 2c       	mov	r8, r1
    7ddc:	fe 01       	movw	r30, r28
    7dde:	31 96       	adiw	r30, 0x01	; 1
    7de0:	5f 01       	movw	r10, r30
    7de2:	e0 58       	subi	r30, 0x80	; 128
    7de4:	ff 4f       	sbci	r31, 0xFF	; 255
    7de6:	6f 01       	movw	r12, r30
    7de8:	c8 54       	subi	r28, 0x48	; 72
    7dea:	df 4f       	sbci	r29, 0xFF	; 255
    7dec:	e8 81       	ld	r30, Y
    7dee:	f9 81       	ldd	r31, Y+1	; 0x01
    7df0:	c8 5b       	subi	r28, 0xB8	; 184
    7df2:	d0 40       	sbci	r29, 0x00	; 0
    7df4:	8e 0f       	add	r24, r30
    7df6:	9f 1f       	adc	r25, r31
    7df8:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1780
    }
    if (click_x > 0 && click_y > 0)
    7dfc:	cc 53       	subi	r28, 0x3C	; 60
    7dfe:	df 4f       	sbci	r29, 0xFF	; 255
    7e00:	28 81       	ld	r18, Y
    7e02:	39 81       	ldd	r19, Y+1	; 0x01
    7e04:	c4 5c       	subi	r28, 0xC4	; 196
    7e06:	d0 40       	sbci	r29, 0x00	; 0
    7e08:	23 2b       	or	r18, r19
    7e0a:	09 f4       	brne	.+2      	; 0x7e0e <draw_menu(bool)+0x392>
    7e0c:	5c c0       	rjmp	.+184    	; 0x7ec6 <draw_menu(bool)+0x44a>
    7e0e:	ca 53       	subi	r28, 0x3A	; 58
    7e10:	df 4f       	sbci	r29, 0xFF	; 255
    7e12:	48 81       	ld	r20, Y
    7e14:	59 81       	ldd	r21, Y+1	; 0x01
    7e16:	c6 5c       	subi	r28, 0xC6	; 198
    7e18:	d0 40       	sbci	r29, 0x00	; 0
    7e1a:	45 2b       	or	r20, r21
    7e1c:	09 f4       	brne	.+2      	; 0x7e20 <draw_menu(bool)+0x3a4>
    7e1e:	53 c0       	rjmp	.+166    	; 0x7ec6 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1781
      if (button_click_touch(global_x + pgm_read_word(&button_1->x), global_y + pgm_read_word(&button_1->y), pgm_read_word(&button_1->size_x), pgm_read_word(&button_1->size_y), click_x, click_y) == true)
    7e20:	f2 01       	movw	r30, r4
    7e22:	3a 96       	adiw	r30, 0x0a	; 10
    7e24:	e6 0d       	add	r30, r6
    7e26:	f7 1d       	adc	r31, r7
    7e28:	25 91       	lpm	r18, Z+
    7e2a:	34 91       	lpm	r19, Z
    7e2c:	f2 01       	movw	r30, r4
    7e2e:	38 96       	adiw	r30, 0x08	; 8
    7e30:	e6 0d       	add	r30, r6
    7e32:	f7 1d       	adc	r31, r7
    7e34:	45 91       	lpm	r20, Z+
    7e36:	54 91       	lpm	r21, Z
    7e38:	f2 01       	movw	r30, r4
    7e3a:	36 96       	adiw	r30, 0x06	; 6
    7e3c:	e6 0d       	add	r30, r6
    7e3e:	f7 1d       	adc	r31, r7
    7e40:	65 91       	lpm	r22, Z+
    7e42:	74 91       	lpm	r23, Z
    7e44:	f2 01       	movw	r30, r4
    7e46:	34 96       	adiw	r30, 0x04	; 4
    7e48:	e6 0d       	add	r30, r6
    7e4a:	f7 1d       	adc	r31, r7
    7e4c:	85 91       	lpm	r24, Z+
    7e4e:	94 91       	lpm	r25, Z
    7e50:	c6 54       	subi	r28, 0x46	; 70
    7e52:	df 4f       	sbci	r29, 0xFF	; 255
    7e54:	e8 81       	ld	r30, Y
    7e56:	f9 81       	ldd	r31, Y+1	; 0x01
    7e58:	ca 5b       	subi	r28, 0xBA	; 186
    7e5a:	d0 40       	sbci	r29, 0x00	; 0
    7e5c:	6e 0f       	add	r22, r30
    7e5e:	7f 1f       	adc	r23, r31
    7e60:	ca 53       	subi	r28, 0x3A	; 58
    7e62:	df 4f       	sbci	r29, 0xFF	; 255
    7e64:	e8 80       	ld	r14, Y
    7e66:	f9 80       	ldd	r15, Y+1	; 0x01
    7e68:	c6 5c       	subi	r28, 0xC6	; 198
    7e6a:	d0 40       	sbci	r29, 0x00	; 0
    7e6c:	cc 53       	subi	r28, 0x3C	; 60
    7e6e:	df 4f       	sbci	r29, 0xFF	; 255
    7e70:	08 81       	ld	r16, Y
    7e72:	19 81       	ldd	r17, Y+1	; 0x01
    7e74:	c4 5c       	subi	r28, 0xC4	; 196
    7e76:	d0 40       	sbci	r29, 0x00	; 0
    7e78:	c8 54       	subi	r28, 0x48	; 72
    7e7a:	df 4f       	sbci	r29, 0xFF	; 255
    7e7c:	e8 81       	ld	r30, Y
    7e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    7e80:	c8 5b       	subi	r28, 0xB8	; 184
    7e82:	d0 40       	sbci	r29, 0x00	; 0
    7e84:	8e 0f       	add	r24, r30
    7e86:	9f 1f       	adc	r25, r31
    7e88:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    7e8c:	18 2f       	mov	r17, r24
    7e8e:	88 23       	and	r24, r24
    7e90:	d1 f0       	breq	.+52     	; 0x7ec6 <draw_menu(bool)+0x44a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1783
      {
        fntargs =  pgm_read_word(&button_1->onclick);
    7e92:	f2 01       	movw	r30, r4
    7e94:	3e 96       	adiw	r30, 0x0e	; 14
    7e96:	e6 0d       	add	r30, r6
    7e98:	f7 1d       	adc	r31, r7
    7e9a:	25 91       	lpm	r18, Z+
    7e9c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1784
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
    7e9e:	f2 01       	movw	r30, r4
    7ea0:	3d 96       	adiw	r30, 0x0d	; 13
    7ea2:	e6 0d       	add	r30, r6
    7ea4:	f7 1d       	adc	r31, r7
    7ea6:	84 91       	lpm	r24, Z
    7ea8:	cd 54       	subi	r28, 0x4D	; 77
    7eaa:	df 4f       	sbci	r29, 0xFF	; 255
    7eac:	68 81       	ld	r22, Y
    7eae:	c3 5b       	subi	r28, 0xB3	; 179
    7eb0:	d0 40       	sbci	r29, 0x00	; 0
    7eb2:	70 e0       	ldi	r23, 0x00	; 0
    7eb4:	49 2d       	mov	r20, r9
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	f9 01       	movw	r30, r18
    7eba:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1785
        ret = true;
    7ebc:	c4 53       	subi	r28, 0x34	; 52
    7ebe:	df 4f       	sbci	r29, 0xFF	; 255
    7ec0:	18 83       	st	Y, r17
    7ec2:	cc 5c       	subi	r28, 0xCC	; 204
    7ec4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1767
    strcpy_P(str1, pgm_read_word(&current->name));
    show_string(str1, pgm_read_word(&current->x) + 5, pgm_read_word(&current->y) + 5, 2, BLACK, WHITE, 0);
  }
  /// tlacitko typ 1 se prekresluje s celym menu
  /// tlacitko typ 1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_1); idx++)
    7ec6:	93 94       	inc	r9
    7ec8:	3e cf       	rjmp	.-388    	; 0x7d46 <draw_menu(bool)+0x2ca>
TP_Scan():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:206
			x=((long)XFAC*x)/10000+XOFFSET;
		    y=((long)YFAC*y)/10000+YOFFSET;
			switch(touch_rotation)
			{
				case 0:
					if(lcd_rotation == 0)
    7eca:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xe>
    7ece:	88 23       	and	r24, r24
    7ed0:	09 f4       	brne	.+2      	; 0x7ed4 <draw_menu(bool)+0x458>
    7ed2:	6e ce       	rjmp	.-804    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:210
					{
						break;
					}
					else if(lcd_rotation == 1)
    7ed4:	81 30       	cpi	r24, 0x01	; 1
    7ed6:	59 f4       	brne	.+22     	; 0x7eee <draw_menu(bool)+0x472>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:280
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7ed8:	30 93 9d 0d 	sts	0x0D9D, r19	; 0x800d9d <my_touch+0x5>
    7edc:	20 93 9c 0d 	sts	0x0D9C, r18	; 0x800d9c <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7ee0:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0xa>
    7ee4:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0xb>
    7ee8:	8e 19       	sub	r24, r14
    7eea:	9f 09       	sbc	r25, r15
    7eec:	3d c0       	rjmp	.+122    	; 0x7f68 <draw_menu(bool)+0x4ec>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:218
						tmp = x;
						x=y;
						y=tmp;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7eee:	82 30       	cpi	r24, 0x02	; 2
    7ef0:	59 f4       	brne	.+22     	; 0x7f08 <draw_menu(bool)+0x48c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:261
					}
					break;
				case 2:
					if(lcd_rotation == 0)
					{
						x = wid-x;
    7ef2:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x8>
    7ef6:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x9>
    7efa:	8e 19       	sub	r24, r14
    7efc:	9f 09       	sbc	r25, r15
    7efe:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x5>
    7f02:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch+0x4>
    7f06:	2a c0       	rjmp	.+84     	; 0x7f5c <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:223
					else if(lcd_rotation == 2)
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7f08:	83 30       	cpi	r24, 0x03	; 3
    7f0a:	09 f0       	breq	.+2      	; 0x7f0e <draw_menu(bool)+0x492>
    7f0c:	51 ce       	rjmp	.-862    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:269
					else if(lcd_rotation == 1)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
    7f0e:	f0 92 9f 0d 	sts	0x0D9F, r15	; 0x800d9f <my_touch+0x7>
    7f12:	e0 92 9e 0d 	sts	0x0D9E, r14	; 0x800d9e <my_touch+0x6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:270
						x = wid-x;
    7f16:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x8>
    7f1a:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x9>
    7f1e:	82 1b       	sub	r24, r18
    7f20:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7f22:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x5>
    7f26:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch+0x4>
    7f2a:	42 ce       	rjmp	.-892    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:233
						y=tmp;
						x = wid-x;
					}
					break;
				case 1:
					if(lcd_rotation == 0)
    7f2c:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xe>
    7f30:	81 11       	cpse	r24, r1
    7f32:	07 c0       	rjmp	.+14     	; 0x7f42 <draw_menu(bool)+0x4c6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:301
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
					{
						x = wid-x;;
    7f34:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x8>
    7f38:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x9>
    7f3c:	8e 19       	sub	r24, r14
    7f3e:	9f 09       	sbc	r25, r15
    7f40:	f0 cf       	rjmp	.-32     	; 0x7f22 <draw_menu(bool)+0x4a6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:237
				case 1:
					if(lcd_rotation == 0)
					{
						x = wid-x;
					}
					else if(lcd_rotation == 1)
    7f42:	81 30       	cpi	r24, 0x01	; 1
    7f44:	49 f4       	brne	.+18     	; 0x7f58 <draw_menu(bool)+0x4dc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:307
					}
					else if(lcd_rotation == 3)
					{
						uint16_t tmp;
						tmp = x;
						x=y;
    7f46:	30 93 9d 0d 	sts	0x0D9D, r19	; 0x800d9d <my_touch+0x5>
    7f4a:	20 93 9c 0d 	sts	0x0D9C, r18	; 0x800d9c <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:308
						y=tmp;
    7f4e:	f0 92 9f 0d 	sts	0x0D9F, r15	; 0x800d9f <my_touch+0x7>
    7f52:	e0 92 9e 0d 	sts	0x0D9E, r14	; 0x800d9e <my_touch+0x6>
    7f56:	2c ce       	rjmp	.-936    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:244
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
					}
					else if(lcd_rotation == 2)
    7f58:	82 30       	cpi	r24, 0x02	; 2
    7f5a:	59 f4       	brne	.+22     	; 0x7f72 <draw_menu(bool)+0x4f6>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:288
					}
					break;
				case 3:
					if(lcd_rotation == 0)
					{
						y = heig - y;
    7f5c:	80 91 a2 0d 	lds	r24, 0x0DA2	; 0x800da2 <my_touch+0xa>
    7f60:	90 91 a3 0d 	lds	r25, 0x0DA3	; 0x800da3 <my_touch+0xb>
    7f64:	82 1b       	sub	r24, r18
    7f66:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:297
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
    7f68:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x7>
    7f6c:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x6>
    7f70:	1f ce       	rjmp	.-962    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:248
					}
					else if(lcd_rotation == 2)
					{
						y = heig - y;
					}
					else if(lcd_rotation == 3)
    7f72:	83 30       	cpi	r24, 0x03	; 3
    7f74:	09 f0       	breq	.+2      	; 0x7f78 <draw_menu(bool)+0x4fc>
    7f76:	1c ce       	rjmp	.-968    	; 0x7bb0 <draw_menu(bool)+0x134>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:296
					{
						uint16_t tmp;
						tmp = x;
						x=y;
						y=tmp;
						x = wid-x;
    7f78:	80 91 a0 0d 	lds	r24, 0x0DA0	; 0x800da0 <my_touch+0x8>
    7f7c:	90 91 a1 0d 	lds	r25, 0x0DA1	; 0x800da1 <my_touch+0x9>
    7f80:	82 1b       	sub	r24, r18
    7f82:	93 0b       	sbc	r25, r19
    7f84:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x5>
    7f88:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch+0x4>
    7f8c:	a9 cf       	rjmp	.-174    	; 0x7ee0 <draw_menu(bool)+0x464>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:259
						x = wid-x;
						y = heig - y;
					}
					break;
				case 2:
					if(lcd_rotation == 0)
    7f8e:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xe>
    7f92:	88 23       	and	r24, r24
    7f94:	09 f4       	brne	.+2      	; 0x7f98 <draw_menu(bool)+0x51c>
    7f96:	ad cf       	rjmp	.-166    	; 0x7ef2 <draw_menu(bool)+0x476>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:264
					{
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7f98:	81 30       	cpi	r24, 0x01	; 1
    7f9a:	09 f4       	brne	.+2      	; 0x7f9e <draw_menu(bool)+0x522>
    7f9c:	b8 cf       	rjmp	.-144    	; 0x7f0e <draw_menu(bool)+0x492>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:276
					}
					else if(lcd_rotation == 2)
					{
						break;
					}
					else if(lcd_rotation == 3)
    7f9e:	83 30       	cpi	r24, 0x03	; 3
    7fa0:	09 f0       	breq	.+2      	; 0x7fa4 <draw_menu(bool)+0x528>
    7fa2:	06 ce       	rjmp	.-1012   	; 0x7bb0 <draw_menu(bool)+0x134>
    7fa4:	99 cf       	rjmp	.-206    	; 0x7ed8 <draw_menu(bool)+0x45c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:286
						y=tmp;
						y = heig - y;
					}
					break;
				case 3:
					if(lcd_rotation == 0)
    7fa6:	80 91 a6 0d 	lds	r24, 0x0DA6	; 0x800da6 <my_touch+0xe>
    7faa:	88 23       	and	r24, r24
    7fac:	b9 f2       	breq	.-82     	; 0x7f5c <draw_menu(bool)+0x4e0>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:290
					{
						y = heig - y;
					}
					else if(lcd_rotation == 1)
    7fae:	81 30       	cpi	r24, 0x01	; 1
    7fb0:	19 f3       	breq	.-58     	; 0x7f78 <draw_menu(bool)+0x4fc>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:299
						x=y;
						y=tmp;
						x = wid-x;
						y = heig - y;
					}
					else if(lcd_rotation == 2)
    7fb2:	82 30       	cpi	r24, 0x02	; 2
    7fb4:	09 f4       	brne	.+2      	; 0x7fb8 <draw_menu(bool)+0x53c>
    7fb6:	be cf       	rjmp	.-132    	; 0x7f34 <draw_menu(bool)+0x4b8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:303
					{
						x = wid-x;;
					}
					else if(lcd_rotation == 3)
    7fb8:	83 30       	cpi	r24, 0x03	; 3
    7fba:	09 f0       	breq	.+2      	; 0x7fbe <draw_menu(bool)+0x542>
    7fbc:	f9 cd       	rjmp	.-1038   	; 0x7bb0 <draw_menu(bool)+0x134>
    7fbe:	c3 cf       	rjmp	.-122    	; 0x7f46 <draw_menu(bool)+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:324
			y0=y;  	   			 
		}			   
	}
	else
	{
		if(touch_statue&TP_PRES_DOWN)
    7fc0:	80 91 a4 0d 	lds	r24, 0x0DA4	; 0x800da4 <my_touch+0xc>
    7fc4:	87 ff       	sbrs	r24, 7
    7fc6:	04 c0       	rjmp	.+8      	; 0x7fd0 <draw_menu(bool)+0x554>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:326
		{
			touch_statue&=~(1<<7);
    7fc8:	8f 77       	andi	r24, 0x7F	; 127
    7fca:	80 93 a4 0d 	sts	0x0DA4, r24	; 0x800da4 <my_touch+0xc>
    7fce:	07 ce       	rjmp	.-1010   	; 0x7bde <draw_menu(bool)+0x162>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:330
		}
		else
		{
			x0=0;
    7fd0:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <my_touch+0x1>
    7fd4:	10 92 98 0d 	sts	0x0D98, r1	; 0x800d98 <my_touch>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:331
			y0=0;
    7fd8:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <my_touch+0x3>
    7fdc:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <my_touch+0x2>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:332
			x=0xffff;
    7fe0:	8f ef       	ldi	r24, 0xFF	; 255
    7fe2:	9f ef       	ldi	r25, 0xFF	; 255
    7fe4:	90 93 9d 0d 	sts	0x0D9D, r25	; 0x800d9d <my_touch+0x5>
    7fe8:	80 93 9c 0d 	sts	0x0D9C, r24	; 0x800d9c <my_touch+0x4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:333
			y=0xffff;
    7fec:	90 93 9f 0d 	sts	0x0D9F, r25	; 0x800d9f <my_touch+0x7>
    7ff0:	80 93 9e 0d 	sts	0x0D9E, r24	; 0x800d9e <my_touch+0x6>
    7ff4:	f4 cd       	rjmp	.-1048   	; 0x7bde <draw_menu(bool)+0x162>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1719
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
  click_y = 0;
    7ff6:	ca 53       	subi	r28, 0x3A	; 58
    7ff8:	df 4f       	sbci	r29, 0xFF	; 255
    7ffa:	19 82       	std	Y+1, r1	; 0x01
    7ffc:	18 82       	st	Y, r1
    7ffe:	c6 5c       	subi	r28, 0xC6	; 198
    8000:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1718
  uint8_t active;
  uint8_t slider_active;

  current = MenuHistoryGetMenu(&menu_args1);

  click_x = 0;
    8002:	cc 53       	subi	r28, 0x3C	; 60
    8004:	df 4f       	sbci	r29, 0xFF	; 255
    8006:	19 82       	std	Y+1, r1	; 0x01
    8008:	18 82       	st	Y, r1
    800a:	c4 5c       	subi	r28, 0xC4	; 196
    800c:	d0 40       	sbci	r29, 0x00	; 0
    800e:	01 ce       	rjmp	.-1022   	; 0x7c12 <draw_menu(bool)+0x196>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1744
  rfnt = pgm_read_word(&current->redraw_class_1);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 1);
  else
    sbi(redraw_class, 1);
    8010:	68 94       	set
    8012:	a1 f8       	bld	r10, 1
    8014:	48 ce       	rjmp	.-880    	; 0x7ca6 <draw_menu(bool)+0x22a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1751
  rfnt = pgm_read_word(&current->redraw_class_2);
  rdr = (ret_fptr(rfnt))(pgm_read_byte(&current->idx), menu_args1, -1);
  if (rdr == 0)
    cbi(redraw_class, 2);
  else
    sbi(redraw_class, 2);
    8016:	8a 2d       	mov	r24, r10
    8018:	84 60       	ori	r24, 0x04	; 4
    801a:	5a ce       	rjmp	.-844    	; 0x7cd0 <draw_menu(bool)+0x254>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1756
  ///
  if (redraw == false)
    cbi(redraw_class, 3);
  else
    sbi(redraw_class, 3);
    801c:	88 60       	ori	r24, 0x08	; 8
    801e:	5b ce       	rjmp	.-842    	; 0x7cd6 <draw_menu(bool)+0x25a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1788
        fntargs =  pgm_read_word(&button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8020:	c4 53       	subi	r28, 0x34	; 52
    8022:	df 4f       	sbci	r29, 0xFF	; 255
    8024:	f8 81       	ld	r31, Y
    8026:	cc 5c       	subi	r28, 0xCC	; 204
    8028:	d0 40       	sbci	r29, 0x00	; 0
    802a:	f1 11       	cpse	r31, r1
    802c:	0c 94 de 4f 	jmp	0x9fbc	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8030:	91 2c       	mov	r9, r1
    8032:	93 01       	movw	r18, r6
    8034:	2a 5b       	subi	r18, 0xBA	; 186
    8036:	3d 4f       	sbci	r19, 0xFD	; 253
    8038:	c4 54       	subi	r28, 0x44	; 68
    803a:	df 4f       	sbci	r29, 0xFF	; 255
    803c:	39 83       	std	Y+1, r19	; 0x01
    803e:	28 83       	st	Y, r18
    8040:	cc 5b       	subi	r28, 0xBC	; 188
    8042:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    8044:	1e 01       	movw	r2, r28
    8046:	31 e8       	ldi	r19, 0x81	; 129
    8048:	23 0e       	add	r2, r19
    804a:	31 1c       	adc	r3, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    804c:	c4 54       	subi	r28, 0x44	; 68
    804e:	df 4f       	sbci	r29, 0xFF	; 255
    8050:	e8 81       	ld	r30, Y
    8052:	f9 81       	ldd	r31, Y+1	; 0x01
    8054:	cc 5b       	subi	r28, 0xBC	; 188
    8056:	d0 40       	sbci	r29, 0x00	; 0
    8058:	84 91       	lpm	r24, Z
    805a:	98 16       	cp	r9, r24
    805c:	08 f0       	brcs	.+2      	; 0x8060 <draw_menu(bool)+0x5e4>
    805e:	1c c1       	rjmp	.+568    	; 0x8298 <draw_menu(bool)+0x81c>
    8060:	f7 e1       	ldi	r31, 0x17	; 23
    8062:	9f 9e       	mul	r9, r31
    8064:	20 01       	movw	r4, r0
    8066:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1793
  {
    button_2 = &current->button_2[idx];
    rfnt = pgm_read_word(&button_2->enable_show);
    8068:	f2 01       	movw	r30, r4
    806a:	ef 53       	subi	r30, 0x3F	; 63
    806c:	ff 4f       	sbci	r31, 0xFF	; 255
    806e:	e6 0d       	add	r30, r6
    8070:	f7 1d       	adc	r31, r7
    8072:	25 91       	lpm	r18, Z+
    8074:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1794
    active = (ret_fptr(rfnt))(pgm_read_byte(&button_2->args), menu_args1, idx);
    8076:	c2 01       	movw	r24, r4
    8078:	85 54       	subi	r24, 0x45	; 69
    807a:	9f 4f       	sbci	r25, 0xFF	; 255
    807c:	a3 01       	movw	r20, r6
    807e:	48 0f       	add	r20, r24
    8080:	59 1f       	adc	r21, r25
    8082:	ca 54       	subi	r28, 0x4A	; 74
    8084:	df 4f       	sbci	r29, 0xFF	; 255
    8086:	59 83       	std	Y+1, r21	; 0x01
    8088:	48 83       	st	Y, r20
    808a:	c6 5b       	subi	r28, 0xB6	; 182
    808c:	d0 40       	sbci	r29, 0x00	; 0
    808e:	fa 01       	movw	r30, r20
    8090:	84 91       	lpm	r24, Z
    8092:	cd 54       	subi	r28, 0x4D	; 77
    8094:	df 4f       	sbci	r29, 0xFF	; 255
    8096:	68 81       	ld	r22, Y
    8098:	c3 5b       	subi	r28, 0xB3	; 179
    809a:	d0 40       	sbci	r29, 0x00	; 0
    809c:	70 e0       	ldi	r23, 0x00	; 0
    809e:	49 2d       	mov	r20, r9
    80a0:	90 e0       	ldi	r25, 0x00	; 0
    80a2:	f9 01       	movw	r30, r18
    80a4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1795
    if (active == 0) continue;
    80a6:	88 23       	and	r24, r24
    80a8:	09 f4       	brne	.+2      	; 0x80ac <draw_menu(bool)+0x630>
    80aa:	f4 c0       	rjmp	.+488    	; 0x8294 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1796
    rdr = pgm_read_byte(&button_2->redraw_class);
    80ac:	f2 01       	movw	r30, r4
    80ae:	e0 54       	subi	r30, 0x40	; 64
    80b0:	ff 4f       	sbci	r31, 0xFF	; 255
    80b2:	e6 0d       	add	r30, r6
    80b4:	f7 1d       	adc	r31, r7
    80b6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1797
    if (enable_redraw(rdr, redraw_class) == true)
    80b8:	cf 52       	subi	r28, 0x2F	; 47
    80ba:	df 4f       	sbci	r29, 0xFF	; 255
    80bc:	68 81       	ld	r22, Y
    80be:	c1 5d       	subi	r28, 0xD1	; 209
    80c0:	d0 40       	sbci	r29, 0x00	; 0
    80c2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    80c6:	88 23       	and	r24, r24
    80c8:	09 f4       	brne	.+2      	; 0x80cc <draw_menu(bool)+0x650>
    80ca:	78 c0       	rjmp	.+240    	; 0x81bc <draw_menu(bool)+0x740>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1799
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
    80cc:	f2 01       	movw	r30, r4
    80ce:	e4 55       	subi	r30, 0x54	; 84
    80d0:	ff 4f       	sbci	r31, 0xFF	; 255
    80d2:	e6 0d       	add	r30, r6
    80d4:	f7 1d       	adc	r31, r7
    80d6:	65 91       	lpm	r22, Z+
    80d8:	74 91       	lpm	r23, Z
    80da:	c1 01       	movw	r24, r2
    80dc:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1800
      rfnt = pgm_read_word(&button_2->get_status_fnt);
    80e0:	f2 01       	movw	r30, r4
    80e2:	e2 54       	subi	r30, 0x42	; 66
    80e4:	ff 4f       	sbci	r31, 0xFF	; 255
    80e6:	e6 0d       	add	r30, r6
    80e8:	f7 1d       	adc	r31, r7
    80ea:	25 91       	lpm	r18, Z+
    80ec:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    80ee:	ca 54       	subi	r28, 0x4A	; 74
    80f0:	df 4f       	sbci	r29, 0xFF	; 255
    80f2:	e8 81       	ld	r30, Y
    80f4:	f9 81       	ldd	r31, Y+1	; 0x01
    80f6:	c6 5b       	subi	r28, 0xB6	; 182
    80f8:	d0 40       	sbci	r29, 0x00	; 0
    80fa:	84 91       	lpm	r24, Z
    80fc:	cd 54       	subi	r28, 0x4D	; 77
    80fe:	df 4f       	sbci	r29, 0xFF	; 255
    8100:	68 81       	ld	r22, Y
    8102:	c3 5b       	subi	r28, 0xB3	; 179
    8104:	d0 40       	sbci	r29, 0x00	; 0
    8106:	70 e0       	ldi	r23, 0x00	; 0
    8108:	49 2d       	mov	r20, r9
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	f9 01       	movw	r30, r18
    810e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1802
      str1[0] = 0;
    8110:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1807
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    8112:	f2 01       	movw	r30, r4
    8114:	e7 54       	subi	r30, 0x47	; 71
    8116:	ff 4f       	sbci	r31, 0xFF	; 255
    8118:	e6 0d       	add	r30, r6
    811a:	f7 1d       	adc	r31, r7
    811c:	a5 90       	lpm	r10, Z+
    811e:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1806
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
    8120:	f2 01       	movw	r30, r4
    8122:	e9 54       	subi	r30, 0x49	; 73
    8124:	ff 4f       	sbci	r31, 0xFF	; 255
    8126:	e6 0d       	add	r30, r6
    8128:	f7 1d       	adc	r31, r7
    812a:	c5 90       	lpm	r12, Z+
    812c:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1805
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
    812e:	82 01       	movw	r16, r4
    8130:	0a 54       	subi	r16, 0x4A	; 74
    8132:	1f 4f       	sbci	r17, 0xFF	; 255
    8134:	06 0d       	add	r16, r6
    8136:	17 1d       	adc	r17, r7
    8138:	f8 01       	movw	r30, r16
    813a:	04 91       	lpm	r16, Z
    813c:	f2 01       	movw	r30, r4
    813e:	ec 54       	subi	r30, 0x4C	; 76
    8140:	ff 4f       	sbci	r31, 0xFF	; 255
    8142:	e6 0d       	add	r30, r6
    8144:	f7 1d       	adc	r31, r7
    8146:	25 91       	lpm	r18, Z+
    8148:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1804
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
    814a:	f2 01       	movw	r30, r4
    814c:	ee 54       	subi	r30, 0x4E	; 78
    814e:	ff 4f       	sbci	r31, 0xFF	; 255
    8150:	e6 0d       	add	r30, r6
    8152:	f7 1d       	adc	r31, r7
    8154:	45 91       	lpm	r20, Z+
    8156:	54 91       	lpm	r21, Z
    8158:	f2 01       	movw	r30, r4
    815a:	e0 55       	subi	r30, 0x50	; 80
    815c:	ff 4f       	sbci	r31, 0xFF	; 255
    815e:	e6 0d       	add	r30, r6
    8160:	f7 1d       	adc	r31, r7
    8162:	65 91       	lpm	r22, Z+
    8164:	74 91       	lpm	r23, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    8166:	f2 01       	movw	r30, r4
    8168:	e2 55       	subi	r30, 0x52	; 82
    816a:	ff 4f       	sbci	r31, 0xFF	; 255
    816c:	e6 0d       	add	r30, r6
    816e:	f7 1d       	adc	r31, r7
    8170:	a5 91       	lpm	r26, Z+
    8172:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1801
    rdr = pgm_read_byte(&button_2->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&button_2->name));
      rfnt = pgm_read_word(&button_2->get_status_fnt);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8174:	88 24       	eor	r8, r8
    8176:	83 94       	inc	r8
    8178:	81 11       	cpse	r24, r1
    817a:	01 c0       	rjmp	.+2      	; 0x817e <draw_menu(bool)+0x702>
    817c:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1803
      str1[0] = 0;
      button_click_2( global_x + pgm_read_word(&button_2->x), \
    817e:	c6 54       	subi	r28, 0x46	; 70
    8180:	df 4f       	sbci	r29, 0xFF	; 255
    8182:	88 81       	ld	r24, Y
    8184:	99 81       	ldd	r25, Y+1	; 0x01
    8186:	ca 5b       	subi	r28, 0xBA	; 186
    8188:	d0 40       	sbci	r29, 0x00	; 0
    818a:	68 0f       	add	r22, r24
    818c:	79 1f       	adc	r23, r25
    818e:	e1 e0       	ldi	r30, 0x01	; 1
    8190:	f0 e0       	ldi	r31, 0x00	; 0
    8192:	ec 0f       	add	r30, r28
    8194:	fd 1f       	adc	r31, r29
    8196:	ff 93       	push	r31
    8198:	ef 93       	push	r30
    819a:	3f 92       	push	r3
    819c:	2f 92       	push	r2
    819e:	e1 2c       	mov	r14, r1
    81a0:	c8 54       	subi	r28, 0x48	; 72
    81a2:	df 4f       	sbci	r29, 0xFF	; 255
    81a4:	88 81       	ld	r24, Y
    81a6:	99 81       	ldd	r25, Y+1	; 0x01
    81a8:	c8 5b       	subi	r28, 0xB8	; 184
    81aa:	d0 40       	sbci	r29, 0x00	; 0
    81ac:	8a 0f       	add	r24, r26
    81ae:	9b 1f       	adc	r25, r27
    81b0:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
    81b4:	0f 90       	pop	r0
    81b6:	0f 90       	pop	r0
    81b8:	0f 90       	pop	r0
    81ba:	0f 90       	pop	r0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1809
                      global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), \
                      pgm_read_word(&button_2->size_y), pgm_read_byte(&button_2->font_size), 0,  \
                      pgm_read_word(&button_2->color_active), \
                      pgm_read_word(&button_2->color_inactive), state,  str2, str1);
    }
    if (click_x > 0 && click_y > 0)
    81bc:	cc 53       	subi	r28, 0x3C	; 60
    81be:	df 4f       	sbci	r29, 0xFF	; 255
    81c0:	28 81       	ld	r18, Y
    81c2:	39 81       	ldd	r19, Y+1	; 0x01
    81c4:	c4 5c       	subi	r28, 0xC4	; 196
    81c6:	d0 40       	sbci	r29, 0x00	; 0
    81c8:	23 2b       	or	r18, r19
    81ca:	09 f4       	brne	.+2      	; 0x81ce <draw_menu(bool)+0x752>
    81cc:	63 c0       	rjmp	.+198    	; 0x8294 <draw_menu(bool)+0x818>
    81ce:	ca 53       	subi	r28, 0x3A	; 58
    81d0:	df 4f       	sbci	r29, 0xFF	; 255
    81d2:	48 81       	ld	r20, Y
    81d4:	59 81       	ldd	r21, Y+1	; 0x01
    81d6:	c6 5c       	subi	r28, 0xC6	; 198
    81d8:	d0 40       	sbci	r29, 0x00	; 0
    81da:	45 2b       	or	r20, r21
    81dc:	09 f4       	brne	.+2      	; 0x81e0 <draw_menu(bool)+0x764>
    81de:	5a c0       	rjmp	.+180    	; 0x8294 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1810
      if (button_click_touch(global_x + pgm_read_word(&button_2->x), global_y + pgm_read_word(&button_2->y), pgm_read_word(&button_2->size_x), pgm_read_word(&button_2->size_y), click_x, click_y) == true)
    81e0:	f2 01       	movw	r30, r4
    81e2:	ec 54       	subi	r30, 0x4C	; 76
    81e4:	ff 4f       	sbci	r31, 0xFF	; 255
    81e6:	e6 0d       	add	r30, r6
    81e8:	f7 1d       	adc	r31, r7
    81ea:	25 91       	lpm	r18, Z+
    81ec:	34 91       	lpm	r19, Z
    81ee:	f2 01       	movw	r30, r4
    81f0:	ee 54       	subi	r30, 0x4E	; 78
    81f2:	ff 4f       	sbci	r31, 0xFF	; 255
    81f4:	e6 0d       	add	r30, r6
    81f6:	f7 1d       	adc	r31, r7
    81f8:	45 91       	lpm	r20, Z+
    81fa:	54 91       	lpm	r21, Z
    81fc:	f2 01       	movw	r30, r4
    81fe:	e0 55       	subi	r30, 0x50	; 80
    8200:	ff 4f       	sbci	r31, 0xFF	; 255
    8202:	e6 0d       	add	r30, r6
    8204:	f7 1d       	adc	r31, r7
    8206:	65 91       	lpm	r22, Z+
    8208:	74 91       	lpm	r23, Z
    820a:	f2 01       	movw	r30, r4
    820c:	e2 55       	subi	r30, 0x52	; 82
    820e:	ff 4f       	sbci	r31, 0xFF	; 255
    8210:	e6 0d       	add	r30, r6
    8212:	f7 1d       	adc	r31, r7
    8214:	85 91       	lpm	r24, Z+
    8216:	94 91       	lpm	r25, Z
    8218:	c6 54       	subi	r28, 0x46	; 70
    821a:	df 4f       	sbci	r29, 0xFF	; 255
    821c:	e8 81       	ld	r30, Y
    821e:	f9 81       	ldd	r31, Y+1	; 0x01
    8220:	ca 5b       	subi	r28, 0xBA	; 186
    8222:	d0 40       	sbci	r29, 0x00	; 0
    8224:	6e 0f       	add	r22, r30
    8226:	7f 1f       	adc	r23, r31
    8228:	ca 53       	subi	r28, 0x3A	; 58
    822a:	df 4f       	sbci	r29, 0xFF	; 255
    822c:	e8 80       	ld	r14, Y
    822e:	f9 80       	ldd	r15, Y+1	; 0x01
    8230:	c6 5c       	subi	r28, 0xC6	; 198
    8232:	d0 40       	sbci	r29, 0x00	; 0
    8234:	cc 53       	subi	r28, 0x3C	; 60
    8236:	df 4f       	sbci	r29, 0xFF	; 255
    8238:	08 81       	ld	r16, Y
    823a:	19 81       	ldd	r17, Y+1	; 0x01
    823c:	c4 5c       	subi	r28, 0xC4	; 196
    823e:	d0 40       	sbci	r29, 0x00	; 0
    8240:	c8 54       	subi	r28, 0x48	; 72
    8242:	df 4f       	sbci	r29, 0xFF	; 255
    8244:	e8 81       	ld	r30, Y
    8246:	f9 81       	ldd	r31, Y+1	; 0x01
    8248:	c8 5b       	subi	r28, 0xB8	; 184
    824a:	d0 40       	sbci	r29, 0x00	; 0
    824c:	8e 0f       	add	r24, r30
    824e:	9f 1f       	adc	r25, r31
    8250:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8254:	18 2f       	mov	r17, r24
    8256:	88 23       	and	r24, r24
    8258:	e9 f0       	breq	.+58     	; 0x8294 <draw_menu(bool)+0x818>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1812
      {
        fntargs =  pgm_read_word(&button_2->onclick);
    825a:	f2 01       	movw	r30, r4
    825c:	e4 54       	subi	r30, 0x44	; 68
    825e:	ff 4f       	sbci	r31, 0xFF	; 255
    8260:	e6 0d       	add	r30, r6
    8262:	f7 1d       	adc	r31, r7
    8264:	25 91       	lpm	r18, Z+
    8266:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1813
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
    8268:	ca 54       	subi	r28, 0x4A	; 74
    826a:	df 4f       	sbci	r29, 0xFF	; 255
    826c:	e8 81       	ld	r30, Y
    826e:	f9 81       	ldd	r31, Y+1	; 0x01
    8270:	c6 5b       	subi	r28, 0xB6	; 182
    8272:	d0 40       	sbci	r29, 0x00	; 0
    8274:	84 91       	lpm	r24, Z
    8276:	cd 54       	subi	r28, 0x4D	; 77
    8278:	df 4f       	sbci	r29, 0xFF	; 255
    827a:	68 81       	ld	r22, Y
    827c:	c3 5b       	subi	r28, 0xB3	; 179
    827e:	d0 40       	sbci	r29, 0x00	; 0
    8280:	70 e0       	ldi	r23, 0x00	; 0
    8282:	49 2d       	mov	r20, r9
    8284:	90 e0       	ldi	r25, 0x00	; 0
    8286:	f9 01       	movw	r30, r18
    8288:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1814
        ret = true;
    828a:	c4 53       	subi	r28, 0x34	; 52
    828c:	df 4f       	sbci	r29, 0xFF	; 255
    828e:	18 83       	st	Y, r17
    8290:	cc 5c       	subi	r28, 0xCC	; 204
    8292:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1790
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// tlacitko typ 2
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_button_2); idx++)
    8294:	93 94       	inc	r9
    8296:	da ce       	rjmp	.-588    	; 0x804c <draw_menu(bool)+0x5d0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1817
        fntargs =  pgm_read_word(&button_2->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&button_2->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8298:	c4 53       	subi	r28, 0x34	; 52
    829a:	df 4f       	sbci	r29, 0xFF	; 255
    829c:	f8 81       	ld	r31, Y
    829e:	cc 5c       	subi	r28, 0xCC	; 204
    82a0:	d0 40       	sbci	r29, 0x00	; 0
    82a2:	f1 11       	cpse	r31, r1
    82a4:	0c 94 de 4f 	jmp	0x9fbc	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    82a8:	91 2c       	mov	r9, r1
    82aa:	53 01       	movw	r10, r6
    82ac:	29 eb       	ldi	r18, 0xB9	; 185
    82ae:	a2 1a       	sub	r10, r18
    82b0:	2d ef       	ldi	r18, 0xFD	; 253
    82b2:	b2 0a       	sbc	r11, r18
    82b4:	f5 01       	movw	r30, r10
    82b6:	84 91       	lpm	r24, Z
    82b8:	98 16       	cp	r9, r24
    82ba:	08 f0       	brcs	.+2      	; 0x82be <draw_menu(bool)+0x842>
    82bc:	bf c0       	rjmp	.+382    	; 0x843c <draw_menu(bool)+0x9c0>
    82be:	f0 e1       	ldi	r31, 0x10	; 16
    82c0:	9f 9e       	mul	r9, r31
    82c2:	60 01       	movw	r12, r0
    82c4:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1822
  {
    function_1 = &current->function_1[idx];
    rfnt = pgm_read_word(&function_1->enable_show);
    82c6:	f6 01       	movw	r30, r12
    82c8:	e3 5d       	subi	r30, 0xD3	; 211
    82ca:	fe 4f       	sbci	r31, 0xFE	; 254
    82cc:	e6 0d       	add	r30, r6
    82ce:	f7 1d       	adc	r31, r7
    82d0:	25 91       	lpm	r18, Z+
    82d2:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1823
    active = (ret_fptr(rfnt))(pgm_read_byte(&function_1->args), menu_args1, idx);
    82d4:	86 01       	movw	r16, r12
    82d6:	0d 5d       	subi	r16, 0xDD	; 221
    82d8:	1e 4f       	sbci	r17, 0xFE	; 254
    82da:	06 0d       	add	r16, r6
    82dc:	17 1d       	adc	r17, r7
    82de:	f8 01       	movw	r30, r16
    82e0:	84 91       	lpm	r24, Z
    82e2:	cd 54       	subi	r28, 0x4D	; 77
    82e4:	df 4f       	sbci	r29, 0xFF	; 255
    82e6:	68 81       	ld	r22, Y
    82e8:	c3 5b       	subi	r28, 0xB3	; 179
    82ea:	d0 40       	sbci	r29, 0x00	; 0
    82ec:	70 e0       	ldi	r23, 0x00	; 0
    82ee:	49 2d       	mov	r20, r9
    82f0:	90 e0       	ldi	r25, 0x00	; 0
    82f2:	f9 01       	movw	r30, r18
    82f4:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1824
    if (active == 0) continue;
    82f6:	88 23       	and	r24, r24
    82f8:	09 f4       	brne	.+2      	; 0x82fc <draw_menu(bool)+0x880>
    82fa:	9e c0       	rjmp	.+316    	; 0x8438 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1825
    rdr = pgm_read_byte(&function_1->redraw_class);
    82fc:	f6 01       	movw	r30, r12
    82fe:	e6 5d       	subi	r30, 0xD6	; 214
    8300:	fe 4f       	sbci	r31, 0xFE	; 254
    8302:	e6 0d       	add	r30, r6
    8304:	f7 1d       	adc	r31, r7
    8306:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1826
    if (enable_redraw(rdr, redraw_class) == true)
    8308:	cf 52       	subi	r28, 0x2F	; 47
    830a:	df 4f       	sbci	r29, 0xFF	; 255
    830c:	68 81       	ld	r22, Y
    830e:	c1 5d       	subi	r28, 0xD1	; 209
    8310:	d0 40       	sbci	r29, 0x00	; 0
    8312:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    8316:	88 23       	and	r24, r24
    8318:	09 f4       	brne	.+2      	; 0x831c <draw_menu(bool)+0x8a0>
    831a:	3c c0       	rjmp	.+120    	; 0x8394 <draw_menu(bool)+0x918>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1828
    {
      fnt_coordinate_xy =  pgm_read_word(&function_1->fnt_coordinate_xy);
    831c:	f6 01       	movw	r30, r12
    831e:	ec 5d       	subi	r30, 0xDC	; 220
    8320:	fe 4f       	sbci	r31, 0xFE	; 254
    8322:	e6 0d       	add	r30, r6
    8324:	f7 1d       	adc	r31, r7
    8326:	a5 91       	lpm	r26, Z+
    8328:	b4 91       	lpm	r27, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1829
      ((fptr_coordinate_xy)fnt_coordinate_xy)(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), pgm_read_byte(&function_1->args), menu_args1);
    832a:	f8 01       	movw	r30, r16
    832c:	04 91       	lpm	r16, Z
    832e:	f6 01       	movw	r30, r12
    8330:	e8 5d       	subi	r30, 0xD8	; 216
    8332:	fe 4f       	sbci	r31, 0xFE	; 254
    8334:	e6 0d       	add	r30, r6
    8336:	f7 1d       	adc	r31, r7
    8338:	25 91       	lpm	r18, Z+
    833a:	34 91       	lpm	r19, Z
    833c:	f6 01       	movw	r30, r12
    833e:	ea 5d       	subi	r30, 0xDA	; 218
    8340:	fe 4f       	sbci	r31, 0xFE	; 254
    8342:	e6 0d       	add	r30, r6
    8344:	f7 1d       	adc	r31, r7
    8346:	45 91       	lpm	r20, Z+
    8348:	54 91       	lpm	r21, Z
    834a:	f6 01       	movw	r30, r12
    834c:	ef 5d       	subi	r30, 0xDF	; 223
    834e:	fe 4f       	sbci	r31, 0xFE	; 254
    8350:	e6 0d       	add	r30, r6
    8352:	f7 1d       	adc	r31, r7
    8354:	65 91       	lpm	r22, Z+
    8356:	74 91       	lpm	r23, Z
    8358:	f6 01       	movw	r30, r12
    835a:	e1 5e       	subi	r30, 0xE1	; 225
    835c:	fe 4f       	sbci	r31, 0xFE	; 254
    835e:	e6 0d       	add	r30, r6
    8360:	f7 1d       	adc	r31, r7
    8362:	85 91       	lpm	r24, Z+
    8364:	94 91       	lpm	r25, Z
    8366:	c6 54       	subi	r28, 0x46	; 70
    8368:	df 4f       	sbci	r29, 0xFF	; 255
    836a:	e8 81       	ld	r30, Y
    836c:	f9 81       	ldd	r31, Y+1	; 0x01
    836e:	ca 5b       	subi	r28, 0xBA	; 186
    8370:	d0 40       	sbci	r29, 0x00	; 0
    8372:	6e 0f       	add	r22, r30
    8374:	7f 1f       	adc	r23, r31
    8376:	cd 54       	subi	r28, 0x4D	; 77
    8378:	df 4f       	sbci	r29, 0xFF	; 255
    837a:	e8 80       	ld	r14, Y
    837c:	c3 5b       	subi	r28, 0xB3	; 179
    837e:	d0 40       	sbci	r29, 0x00	; 0
    8380:	c8 54       	subi	r28, 0x48	; 72
    8382:	df 4f       	sbci	r29, 0xFF	; 255
    8384:	e8 81       	ld	r30, Y
    8386:	f9 81       	ldd	r31, Y+1	; 0x01
    8388:	c8 5b       	subi	r28, 0xB8	; 184
    838a:	d0 40       	sbci	r29, 0x00	; 0
    838c:	8e 0f       	add	r24, r30
    838e:	9f 1f       	adc	r25, r31
    8390:	fd 01       	movw	r30, r26
    8392:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1831
    }
    if (click_x > 0 && click_y > 0)
    8394:	cc 53       	subi	r28, 0x3C	; 60
    8396:	df 4f       	sbci	r29, 0xFF	; 255
    8398:	28 81       	ld	r18, Y
    839a:	39 81       	ldd	r19, Y+1	; 0x01
    839c:	c4 5c       	subi	r28, 0xC4	; 196
    839e:	d0 40       	sbci	r29, 0x00	; 0
    83a0:	23 2b       	or	r18, r19
    83a2:	09 f4       	brne	.+2      	; 0x83a6 <draw_menu(bool)+0x92a>
    83a4:	49 c0       	rjmp	.+146    	; 0x8438 <draw_menu(bool)+0x9bc>
    83a6:	ca 53       	subi	r28, 0x3A	; 58
    83a8:	df 4f       	sbci	r29, 0xFF	; 255
    83aa:	48 81       	ld	r20, Y
    83ac:	59 81       	ldd	r21, Y+1	; 0x01
    83ae:	c6 5c       	subi	r28, 0xC6	; 198
    83b0:	d0 40       	sbci	r29, 0x00	; 0
    83b2:	45 2b       	or	r20, r21
    83b4:	09 f4       	brne	.+2      	; 0x83b8 <draw_menu(bool)+0x93c>
    83b6:	40 c0       	rjmp	.+128    	; 0x8438 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1832
      if (button_click_touch(global_x + pgm_read_word(&function_1->x), global_y + pgm_read_word(&function_1->y), pgm_read_word(&function_1->size_x), pgm_read_word(&function_1->size_y), click_x, click_y) == true)
    83b8:	f6 01       	movw	r30, r12
    83ba:	e8 5d       	subi	r30, 0xD8	; 216
    83bc:	fe 4f       	sbci	r31, 0xFE	; 254
    83be:	e6 0d       	add	r30, r6
    83c0:	f7 1d       	adc	r31, r7
    83c2:	25 91       	lpm	r18, Z+
    83c4:	34 91       	lpm	r19, Z
    83c6:	f6 01       	movw	r30, r12
    83c8:	ea 5d       	subi	r30, 0xDA	; 218
    83ca:	fe 4f       	sbci	r31, 0xFE	; 254
    83cc:	e6 0d       	add	r30, r6
    83ce:	f7 1d       	adc	r31, r7
    83d0:	45 91       	lpm	r20, Z+
    83d2:	54 91       	lpm	r21, Z
    83d4:	f6 01       	movw	r30, r12
    83d6:	ef 5d       	subi	r30, 0xDF	; 223
    83d8:	fe 4f       	sbci	r31, 0xFE	; 254
    83da:	e6 0d       	add	r30, r6
    83dc:	f7 1d       	adc	r31, r7
    83de:	65 91       	lpm	r22, Z+
    83e0:	74 91       	lpm	r23, Z
    83e2:	f6 01       	movw	r30, r12
    83e4:	e1 5e       	subi	r30, 0xE1	; 225
    83e6:	fe 4f       	sbci	r31, 0xFE	; 254
    83e8:	e6 0d       	add	r30, r6
    83ea:	f7 1d       	adc	r31, r7
    83ec:	85 91       	lpm	r24, Z+
    83ee:	94 91       	lpm	r25, Z
    83f0:	c6 54       	subi	r28, 0x46	; 70
    83f2:	df 4f       	sbci	r29, 0xFF	; 255
    83f4:	e8 81       	ld	r30, Y
    83f6:	f9 81       	ldd	r31, Y+1	; 0x01
    83f8:	ca 5b       	subi	r28, 0xBA	; 186
    83fa:	d0 40       	sbci	r29, 0x00	; 0
    83fc:	6e 0f       	add	r22, r30
    83fe:	7f 1f       	adc	r23, r31
    8400:	ca 53       	subi	r28, 0x3A	; 58
    8402:	df 4f       	sbci	r29, 0xFF	; 255
    8404:	e8 80       	ld	r14, Y
    8406:	f9 80       	ldd	r15, Y+1	; 0x01
    8408:	c6 5c       	subi	r28, 0xC6	; 198
    840a:	d0 40       	sbci	r29, 0x00	; 0
    840c:	cc 53       	subi	r28, 0x3C	; 60
    840e:	df 4f       	sbci	r29, 0xFF	; 255
    8410:	08 81       	ld	r16, Y
    8412:	19 81       	ldd	r17, Y+1	; 0x01
    8414:	c4 5c       	subi	r28, 0xC4	; 196
    8416:	d0 40       	sbci	r29, 0x00	; 0
    8418:	c8 54       	subi	r28, 0x48	; 72
    841a:	df 4f       	sbci	r29, 0xFF	; 255
    841c:	e8 81       	ld	r30, Y
    841e:	f9 81       	ldd	r31, Y+1	; 0x01
    8420:	c8 5b       	subi	r28, 0xB8	; 184
    8422:	d0 40       	sbci	r29, 0x00	; 0
    8424:	8e 0f       	add	r24, r30
    8426:	9f 1f       	adc	r25, r31
    8428:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    842c:	88 23       	and	r24, r24
    842e:	21 f0       	breq	.+8      	; 0x8438 <draw_menu(bool)+0x9bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1837
      {
        //fntargs =  pgm_read_word(&function_1->onclick);
        //((fptr_args)fntargs)(pgm_read_byte(&function_1->args), menu_args1);
        //ret = true;
        printf("mrdka funkce\n");
    8430:	82 e5       	ldi	r24, 0x52	; 82
    8432:	93 e0       	ldi	r25, 0x03	; 3
    8434:	0e 94 4e b7 	call	0x16e9c	; 0x16e9c <puts>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1819
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  /// menu programy
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_function_1); idx++)
    8438:	93 94       	inc	r9
    843a:	3c cf       	rjmp	.-392    	; 0x82b4 <draw_menu(bool)+0x838>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    843c:	ca 54       	subi	r28, 0x4A	; 74
    843e:	df 4f       	sbci	r29, 0xFF	; 255
    8440:	18 82       	st	Y, r1
    8442:	c6 5b       	subi	r28, 0xB6	; 182
    8444:	d0 40       	sbci	r29, 0x00	; 0
    8446:	93 01       	movw	r18, r6
    8448:	28 5b       	subi	r18, 0xB8	; 184
    844a:	3d 4f       	sbci	r19, 0xFD	; 253
    844c:	c8 53       	subi	r28, 0x38	; 56
    844e:	df 4f       	sbci	r29, 0xFF	; 255
    8450:	39 83       	std	Y+1, r19	; 0x01
    8452:	28 83       	st	Y, r18
    8454:	c8 5c       	subi	r28, 0xC8	; 200
    8456:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    8458:	4e 01       	movw	r8, r28
    845a:	31 e8       	ldi	r19, 0x81	; 129
    845c:	83 0e       	add	r8, r19
    845e:	91 1c       	adc	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    8460:	ae 01       	movw	r20, r28
    8462:	4f 5f       	subi	r20, 0xFF	; 255
    8464:	5f 4f       	sbci	r21, 0xFF	; 255
    8466:	cc 54       	subi	r28, 0x4C	; 76
    8468:	df 4f       	sbci	r29, 0xFF	; 255
    846a:	59 83       	std	Y+1, r21	; 0x01
    846c:	48 83       	st	Y, r20
    846e:	c4 5b       	subi	r28, 0xB4	; 180
    8470:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8472:	c8 53       	subi	r28, 0x38	; 56
    8474:	df 4f       	sbci	r29, 0xFF	; 255
    8476:	e8 81       	ld	r30, Y
    8478:	f9 81       	ldd	r31, Y+1	; 0x01
    847a:	c8 5c       	subi	r28, 0xC8	; 200
    847c:	d0 40       	sbci	r29, 0x00	; 0
    847e:	84 91       	lpm	r24, Z
    8480:	ca 54       	subi	r28, 0x4A	; 74
    8482:	df 4f       	sbci	r29, 0xFF	; 255
    8484:	f8 81       	ld	r31, Y
    8486:	c6 5b       	subi	r28, 0xB6	; 182
    8488:	d0 40       	sbci	r29, 0x00	; 0
    848a:	f8 17       	cp	r31, r24
    848c:	08 f0       	brcs	.+2      	; 0x8490 <draw_menu(bool)+0xa14>
    848e:	d0 c1       	rjmp	.+928    	; 0x8830 <draw_menu(bool)+0xdb4>
    8490:	27 e1       	ldi	r18, 0x17	; 23
    8492:	f2 9f       	mul	r31, r18
    8494:	60 01       	movw	r12, r0
    8496:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1846
  {
    switch_1 = &current->switch_1[idx];
    rdr = pgm_read_byte(&switch_1->redraw_class);
    8498:	f6 01       	movw	r30, r12
    849a:	eb 59       	subi	r30, 0x9B	; 155
    849c:	fe 4f       	sbci	r31, 0xFE	; 254
    849e:	e6 0d       	add	r30, r6
    84a0:	f7 1d       	adc	r31, r7
    84a2:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1847
    if (enable_redraw(rdr, redraw_class) == true)
    84a4:	cf 52       	subi	r28, 0x2F	; 47
    84a6:	df 4f       	sbci	r29, 0xFF	; 255
    84a8:	68 81       	ld	r22, Y
    84aa:	c1 5d       	subi	r28, 0xD1	; 209
    84ac:	d0 40       	sbci	r29, 0x00	; 0
    84ae:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    84b2:	88 23       	and	r24, r24
    84b4:	09 f4       	brne	.+2      	; 0x84b8 <draw_menu(bool)+0xa3c>
    84b6:	41 c1       	rjmp	.+642    	; 0x873a <draw_menu(bool)+0xcbe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1849
    {
      strcpy_P(str2, pgm_read_word(&switch_1->name));
    84b8:	f6 01       	movw	r30, r12
    84ba:	e1 5b       	subi	r30, 0xB1	; 177
    84bc:	fe 4f       	sbci	r31, 0xFE	; 254
    84be:	e6 0d       	add	r30, r6
    84c0:	f7 1d       	adc	r31, r7
    84c2:	65 91       	lpm	r22, Z+
    84c4:	74 91       	lpm	r23, Z
    84c6:	c4 01       	movw	r24, r8
    84c8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1850
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
    84cc:	f6 01       	movw	r30, r12
    84ce:	ef 59       	subi	r30, 0x9F	; 159
    84d0:	fe 4f       	sbci	r31, 0xFE	; 254
    84d2:	e6 0d       	add	r30, r6
    84d4:	f7 1d       	adc	r31, r7
    84d6:	25 91       	lpm	r18, Z+
    84d8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1851
      gss = pgm_read_word(&switch_1->get_status_string);
    84da:	f6 01       	movw	r30, r12
    84dc:	ed 59       	subi	r30, 0x9D	; 157
    84de:	fe 4f       	sbci	r31, 0xFE	; 254
    84e0:	e6 0d       	add	r30, r6
    84e2:	f7 1d       	adc	r31, r7
    84e4:	e5 90       	lpm	r14, Z+
    84e6:	f4 90       	lpm	r15, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1852
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    84e8:	86 01       	movw	r16, r12
    84ea:	02 5a       	subi	r16, 0xA2	; 162
    84ec:	1e 4f       	sbci	r17, 0xFE	; 254
    84ee:	06 0d       	add	r16, r6
    84f0:	17 1d       	adc	r17, r7
    84f2:	f8 01       	movw	r30, r16
    84f4:	84 91       	lpm	r24, Z
    84f6:	cd 54       	subi	r28, 0x4D	; 77
    84f8:	df 4f       	sbci	r29, 0xFF	; 255
    84fa:	68 81       	ld	r22, Y
    84fc:	c3 5b       	subi	r28, 0xB3	; 179
    84fe:	d0 40       	sbci	r29, 0x00	; 0
    8500:	70 e0       	ldi	r23, 0x00	; 0
    8502:	ca 54       	subi	r28, 0x4A	; 74
    8504:	df 4f       	sbci	r29, 0xFF	; 255
    8506:	48 81       	ld	r20, Y
    8508:	c6 5b       	subi	r28, 0xB6	; 182
    850a:	d0 40       	sbci	r29, 0x00	; 0
    850c:	90 e0       	ldi	r25, 0x00	; 0
    850e:	f9 01       	movw	r30, r18
    8510:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1853
      str3[0] = 0;
    8512:	cf 55       	subi	r28, 0x5F	; 95
    8514:	df 4f       	sbci	r29, 0xFF	; 255
    8516:	18 82       	st	Y, r1
    8518:	c1 5a       	subi	r28, 0xA1	; 161
    851a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1854
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
    851c:	f8 01       	movw	r30, r16
    851e:	84 91       	lpm	r24, Z
    8520:	9e 01       	movw	r18, r28
    8522:	2f 55       	subi	r18, 0x5F	; 95
    8524:	3f 4f       	sbci	r19, 0xFF	; 255
    8526:	ae 01       	movw	r20, r28
    8528:	4f 5f       	subi	r20, 0xFF	; 255
    852a:	5f 4f       	sbci	r21, 0xFF	; 255
    852c:	cd 54       	subi	r28, 0x4D	; 77
    852e:	df 4f       	sbci	r29, 0xFF	; 255
    8530:	68 81       	ld	r22, Y
    8532:	c3 5b       	subi	r28, 0xB3	; 179
    8534:	d0 40       	sbci	r29, 0x00	; 0
    8536:	f7 01       	movw	r30, r14
    8538:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1859
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);
    853a:	f6 01       	movw	r30, r12
    853c:	e7 5a       	subi	r30, 0xA7	; 167
    853e:	fe 4f       	sbci	r31, 0xFE	; 254
    8540:	e6 0d       	add	r30, r6
    8542:	f7 1d       	adc	r31, r7
    8544:	25 91       	lpm	r18, Z+
    8546:	34 91       	lpm	r19, Z
    8548:	c4 54       	subi	r28, 0x44	; 68
    854a:	df 4f       	sbci	r29, 0xFF	; 255
    854c:	39 83       	std	Y+1, r19	; 0x01
    854e:	28 83       	st	Y, r18
    8550:	cc 5b       	subi	r28, 0xBC	; 188
    8552:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1858
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
    8554:	f6 01       	movw	r30, r12
    8556:	e9 5a       	subi	r30, 0xA9	; 169
    8558:	fe 4f       	sbci	r31, 0xFE	; 254
    855a:	e6 0d       	add	r30, r6
    855c:	f7 1d       	adc	r31, r7
    855e:	45 90       	lpm	r4, Z+
    8560:	54 90       	lpm	r5, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1857
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
                      pgm_read_word(&switch_1->size_x), \
    8562:	f6 01       	movw	r30, r12
    8564:	eb 5a       	subi	r30, 0xAB	; 171
    8566:	fe 4f       	sbci	r31, 0xFE	; 254
    8568:	e6 0d       	add	r30, r6
    856a:	f7 1d       	adc	r31, r7
    856c:	85 91       	lpm	r24, Z+
    856e:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1856
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
                      global_y + pgm_read_word(&switch_1->y), \
    8570:	f6 01       	movw	r30, r12
    8572:	ed 5a       	subi	r30, 0xAD	; 173
    8574:	fe 4f       	sbci	r31, 0xFE	; 254
    8576:	e6 0d       	add	r30, r6
    8578:	f7 1d       	adc	r31, r7
    857a:	25 90       	lpm	r2, Z+
    857c:	34 90       	lpm	r3, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1855
      rfnt = pgm_read_word(&switch_1->get_status_fnt);
      gss = pgm_read_word(&switch_1->get_status_string);
      state = ((ret_fptr)rfnt)(pgm_read_byte(&switch_1->args), menu_args1, idx);
      str3[0] = 0;
      ((ret_string_fptr)gss)(pgm_read_byte(&switch_1->args), menu_args1, str1, str3);
      button_switch_1(global_x + pgm_read_word(&switch_1->x), \
    857e:	c6 54       	subi	r28, 0x46	; 70
    8580:	df 4f       	sbci	r29, 0xFF	; 255
    8582:	48 81       	ld	r20, Y
    8584:	59 81       	ldd	r21, Y+1	; 0x01
    8586:	ca 5b       	subi	r28, 0xBA	; 186
    8588:	d0 40       	sbci	r29, 0x00	; 0
    858a:	24 0e       	add	r2, r20
    858c:	35 1e       	adc	r3, r21
    858e:	f6 01       	movw	r30, r12
    8590:	ef 5a       	subi	r30, 0xAF	; 175
    8592:	fe 4f       	sbci	r31, 0xFE	; 254
    8594:	e6 0d       	add	r30, r6
    8596:	f7 1d       	adc	r31, r7
    8598:	a5 90       	lpm	r10, Z+
    859a:	b4 90       	lpm	r11, Z
    859c:	c8 54       	subi	r28, 0x48	; 72
    859e:	df 4f       	sbci	r29, 0xFF	; 255
    85a0:	68 81       	ld	r22, Y
    85a2:	79 81       	ldd	r23, Y+1	; 0x01
    85a4:	c8 5b       	subi	r28, 0xB8	; 184
    85a6:	d0 40       	sbci	r29, 0x00	; 0
    85a8:	a6 0e       	add	r10, r22
    85aa:	b7 1e       	adc	r11, r23
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    85ac:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    85b0:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
    85b4:	10 e0       	ldi	r17, 0x00	; 0
    85b6:	00 e0       	ldi	r16, 0x00	; 0
    85b8:	55 24       	eor	r5, r5
    85ba:	fc 01       	movw	r30, r24
    85bc:	ff 27       	eor	r31, r31
    85be:	ce 53       	subi	r28, 0x3E	; 62
    85c0:	df 4f       	sbci	r29, 0xFF	; 255
    85c2:	f9 83       	std	Y+1, r31	; 0x01
    85c4:	e8 83       	st	Y, r30
    85c6:	c2 5c       	subi	r28, 0xC2	; 194
    85c8:	d0 40       	sbci	r29, 0x00	; 0
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5167
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
    85ca:	91 01       	movw	r18, r2
    85cc:	24 0d       	add	r18, r4
    85ce:	35 1d       	adc	r19, r5
    85d0:	c6 53       	subi	r28, 0x36	; 54
    85d2:	df 4f       	sbci	r29, 0xFF	; 255
    85d4:	39 83       	std	Y+1, r19	; 0x01
    85d6:	28 83       	st	Y, r18
    85d8:	ca 5c       	subi	r28, 0xCA	; 202
    85da:	d0 40       	sbci	r29, 0x00	; 0
    85dc:	7f 01       	movw	r14, r30
    85de:	ea 0c       	add	r14, r10
    85e0:	fb 1c       	adc	r15, r11
    85e2:	c6 53       	subi	r28, 0x36	; 54
    85e4:	df 4f       	sbci	r29, 0xFF	; 255
    85e6:	28 81       	ld	r18, Y
    85e8:	39 81       	ldd	r19, Y+1	; 0x01
    85ea:	ca 5c       	subi	r28, 0xCA	; 202
    85ec:	d0 40       	sbci	r29, 0x00	; 0
    85ee:	20 1b       	sub	r18, r16
    85f0:	31 0b       	sbc	r19, r17
    85f2:	a7 01       	movw	r20, r14
    85f4:	40 1b       	sub	r20, r16
    85f6:	51 0b       	sbc	r21, r17
    85f8:	b1 01       	movw	r22, r2
    85fa:	60 0f       	add	r22, r16
    85fc:	71 1f       	adc	r23, r17
    85fe:	c5 01       	movw	r24, r10
    8600:	80 0f       	add	r24, r16
    8602:	91 1f       	adc	r25, r17
    8604:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
    8608:	0f 5f       	subi	r16, 0xFF	; 255
    860a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5166
/// typ button_1 ////
void button_switch_1(uint16_t x, uint16_t y, uint8_t size_x, uint8_t size_y, uint8_t font_size, uint8_t state, char *text, char *text_value)
{
  uint8_t posx , posy, tmpy, tmpx;
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    860c:	03 30       	cpi	r16, 0x03	; 3
    860e:	11 05       	cpc	r17, r1
    8610:	41 f7       	brne	.-48     	; 0x85e2 <draw_menu(bool)+0xb66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5169
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
    8612:	f4 01       	movw	r30, r8
    8614:	01 90       	ld	r0, Z+
    8616:	00 20       	and	r0, r0
    8618:	e9 f7       	brne	.-6      	; 0x8614 <draw_menu(bool)+0xb98>
    861a:	31 97       	sbiw	r30, 0x01	; 1
    861c:	e8 19       	sub	r30, r8
    861e:	f9 09       	sbc	r31, r9
show_string_size_hight():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2620
  return str_len * 6 * text_size;
}

uint8_t show_string_size_hight(uint8_t text_size)
{
  return 6 * text_size;
    8620:	c4 54       	subi	r28, 0x44	; 68
    8622:	df 4f       	sbci	r29, 0xFF	; 255
    8624:	88 81       	ld	r24, Y
    8626:	cc 5b       	subi	r28, 0xBC	; 188
    8628:	d0 40       	sbci	r29, 0x00	; 0
    862a:	88 0f       	add	r24, r24
    862c:	c4 54       	subi	r28, 0x44	; 68
    862e:	df 4f       	sbci	r29, 0xFF	; 255
    8630:	38 81       	ld	r19, Y
    8632:	cc 5b       	subi	r28, 0xBC	; 188
    8634:	d0 40       	sbci	r29, 0x00	; 0
    8636:	83 0f       	add	r24, r19
    8638:	88 0f       	add	r24, r24
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5171
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    863a:	a2 01       	movw	r20, r4
    863c:	48 1b       	sub	r20, r24
    863e:	51 09       	sbc	r21, r1
    8640:	57 ff       	sbrs	r21, 7
    8642:	02 c0       	rjmp	.+4      	; 0x8648 <draw_menu(bool)+0xbcc>
    8644:	4d 5f       	subi	r20, 0xFD	; 253
    8646:	5f 4f       	sbci	r21, 0xFF	; 255
    8648:	55 95       	asr	r21
    864a:	47 95       	ror	r20
    864c:	55 95       	asr	r21
    864e:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    8650:	42 0d       	add	r20, r2
    8652:	53 2d       	mov	r21, r3
    8654:	51 1d       	adc	r21, r1
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    8656:	66 e0       	ldi	r22, 0x06	; 6
    8658:	e6 9f       	mul	r30, r22
    865a:	f0 01       	movw	r30, r0
    865c:	11 24       	eor	r1, r1
    865e:	c4 54       	subi	r28, 0x44	; 68
    8660:	df 4f       	sbci	r29, 0xFF	; 255
    8662:	78 81       	ld	r23, Y
    8664:	cc 5b       	subi	r28, 0xBC	; 188
    8666:	d0 40       	sbci	r29, 0x00	; 0
    8668:	7e 9f       	mul	r23, r30
    866a:	c0 01       	movw	r24, r0
    866c:	7f 9f       	mul	r23, r31
    866e:	90 0d       	add	r25, r0
    8670:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5170
  my_lcd.Set_Draw_color(BLACK);
  for (uint8_t r = 0; r < 3; r++)
    my_lcd.Draw_Rectangle(x + r, y + r, x + size_x - r, y + size_y - r);
  tmpy = show_string_size_hight(font_size);
  tmpx = show_string_size_width(strlen(text), font_size);
  posx = (size_x - tmpx) / 2;
    8672:	99 27       	eor	r25, r25
    8674:	ce 53       	subi	r28, 0x3E	; 62
    8676:	df 4f       	sbci	r29, 0xFF	; 255
    8678:	68 81       	ld	r22, Y
    867a:	79 81       	ldd	r23, Y+1	; 0x01
    867c:	c2 5c       	subi	r28, 0xC2	; 194
    867e:	d0 40       	sbci	r29, 0x00	; 0
    8680:	68 1b       	sub	r22, r24
    8682:	79 0b       	sbc	r23, r25
    8684:	77 ff       	sbrs	r23, 7
    8686:	02 c0       	rjmp	.+4      	; 0x868c <draw_menu(bool)+0xc10>
    8688:	6f 5f       	subi	r22, 0xFF	; 255
    868a:	7f 4f       	sbci	r23, 0xFF	; 255
    868c:	75 95       	asr	r23
    868e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5172
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
    8690:	6a 0d       	add	r22, r10
    8692:	7b 2d       	mov	r23, r11
    8694:	71 1d       	adc	r23, r1
    8696:	ee 24       	eor	r14, r14
    8698:	ea 94       	dec	r14
    869a:	fe 2c       	mov	r15, r14
    869c:	10 e0       	ldi	r17, 0x00	; 0
    869e:	00 e0       	ldi	r16, 0x00	; 0
    86a0:	c4 54       	subi	r28, 0x44	; 68
    86a2:	df 4f       	sbci	r29, 0xFF	; 255
    86a4:	28 81       	ld	r18, Y
    86a6:	cc 5b       	subi	r28, 0xBC	; 188
    86a8:	d0 40       	sbci	r29, 0x00	; 0
    86aa:	c4 01       	movw	r24, r8
    86ac:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5174
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
    86b0:	cc 54       	subi	r28, 0x4C	; 76
    86b2:	df 4f       	sbci	r29, 0xFF	; 255
    86b4:	e8 81       	ld	r30, Y
    86b6:	f9 81       	ldd	r31, Y+1	; 0x01
    86b8:	c4 5b       	subi	r28, 0xB4	; 180
    86ba:	d0 40       	sbci	r29, 0x00	; 0
    86bc:	01 90       	ld	r0, Z+
    86be:	00 20       	and	r0, r0
    86c0:	e9 f7       	brne	.-6      	; 0x86bc <draw_menu(bool)+0xc40>
    86c2:	31 97       	sbiw	r30, 0x01	; 1
    86c4:	cc 54       	subi	r28, 0x4C	; 76
    86c6:	df 4f       	sbci	r29, 0xFF	; 255
    86c8:	88 81       	ld	r24, Y
    86ca:	99 81       	ldd	r25, Y+1	; 0x01
    86cc:	c4 5b       	subi	r28, 0xB4	; 180
    86ce:	d0 40       	sbci	r29, 0x00	; 0
    86d0:	e8 1b       	sub	r30, r24
    86d2:	f9 0b       	sbc	r31, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5176
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
    86d4:	a2 01       	movw	r20, r4
    86d6:	46 50       	subi	r20, 0x06	; 6
    86d8:	51 09       	sbc	r21, r1
    86da:	57 ff       	sbrs	r21, 7
    86dc:	02 c0       	rjmp	.+4      	; 0x86e2 <draw_menu(bool)+0xc66>
    86de:	4d 5f       	subi	r20, 0xFD	; 253
    86e0:	5f 4f       	sbci	r21, 0xFF	; 255
    86e2:	55 95       	asr	r21
    86e4:	47 95       	ror	r20
    86e6:	55 95       	asr	r21
    86e8:	47 95       	ror	r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5177
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    86ea:	55 27       	eor	r21, r21
    86ec:	ca 01       	movw	r24, r20
    86ee:	88 0f       	add	r24, r24
    86f0:	99 1f       	adc	r25, r25
    86f2:	48 0f       	add	r20, r24
    86f4:	59 1f       	adc	r21, r25
    86f6:	42 0d       	add	r20, r2
    86f8:	53 1d       	adc	r21, r3
show_string_size_width():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2615
  my_lcd.Print_String(str, x, y);
}

uint16_t show_string_size_width(uint8_t str_len, uint8_t text_size)
{
  return str_len * 6 * text_size;
    86fa:	96 e0       	ldi	r25, 0x06	; 6
    86fc:	e9 9f       	mul	r30, r25
    86fe:	f0 01       	movw	r30, r0
    8700:	11 24       	eor	r1, r1
button_switch_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5175
  posx = (size_x - tmpx) / 2;
  posy = (size_y - tmpy) / 4;
  show_string(text, x + posx, y + posy, font_size, BLACK, WHITE, 0);
  tmpy = show_string_size_hight(1);
  tmpx = show_string_size_width(strlen(text_value), 1);
  posx = (size_x - tmpx) / 2;
    8702:	ff 27       	eor	r31, r31
    8704:	ce 53       	subi	r28, 0x3E	; 62
    8706:	df 4f       	sbci	r29, 0xFF	; 255
    8708:	68 81       	ld	r22, Y
    870a:	79 81       	ldd	r23, Y+1	; 0x01
    870c:	c2 5c       	subi	r28, 0xC2	; 194
    870e:	d0 40       	sbci	r29, 0x00	; 0
    8710:	6e 1b       	sub	r22, r30
    8712:	7f 0b       	sbc	r23, r31
    8714:	77 ff       	sbrs	r23, 7
    8716:	02 c0       	rjmp	.+4      	; 0x871c <draw_menu(bool)+0xca0>
    8718:	6f 5f       	subi	r22, 0xFF	; 255
    871a:	7f 4f       	sbci	r23, 0xFF	; 255
    871c:	75 95       	asr	r23
    871e:	67 95       	ror	r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5177
  posy = (size_y - tmpy) / 4;
  show_string(text_value, x + posx, y + (posy * 3), 1, BLACK, WHITE, 0);
    8720:	6a 0d       	add	r22, r10
    8722:	7b 2d       	mov	r23, r11
    8724:	71 1d       	adc	r23, r1
    8726:	ee 24       	eor	r14, r14
    8728:	ea 94       	dec	r14
    872a:	fe 2c       	mov	r15, r14
    872c:	10 e0       	ldi	r17, 0x00	; 0
    872e:	00 e0       	ldi	r16, 0x00	; 0
    8730:	21 e0       	ldi	r18, 0x01	; 1
    8732:	ce 01       	movw	r24, r28
    8734:	01 96       	adiw	r24, 0x01	; 1
    8736:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_Z9draw_menub():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1862
                      pgm_read_word(&switch_1->size_x), \
                      pgm_read_word(&switch_1->size_y), \
                      pgm_read_word(&switch_1->font_size), state, str2, str1);

    }
    if (click_x > 0 && click_y > 0)
    873a:	cc 53       	subi	r28, 0x3C	; 60
    873c:	df 4f       	sbci	r29, 0xFF	; 255
    873e:	e8 81       	ld	r30, Y
    8740:	f9 81       	ldd	r31, Y+1	; 0x01
    8742:	c4 5c       	subi	r28, 0xC4	; 196
    8744:	d0 40       	sbci	r29, 0x00	; 0
    8746:	ef 2b       	or	r30, r31
    8748:	09 f4       	brne	.+2      	; 0x874c <draw_menu(bool)+0xcd0>
    874a:	66 c0       	rjmp	.+204    	; 0x8818 <draw_menu(bool)+0xd9c>
    874c:	ca 53       	subi	r28, 0x3A	; 58
    874e:	df 4f       	sbci	r29, 0xFF	; 255
    8750:	28 81       	ld	r18, Y
    8752:	39 81       	ldd	r19, Y+1	; 0x01
    8754:	c6 5c       	subi	r28, 0xC6	; 198
    8756:	d0 40       	sbci	r29, 0x00	; 0
    8758:	23 2b       	or	r18, r19
    875a:	09 f4       	brne	.+2      	; 0x875e <draw_menu(bool)+0xce2>
    875c:	5d c0       	rjmp	.+186    	; 0x8818 <draw_menu(bool)+0xd9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1863
      if (button_click_touch(global_x + pgm_read_word(&switch_1->x), global_y + pgm_read_word(&switch_1->y), pgm_read_word(&switch_1->size_x), pgm_read_word(&switch_1->size_y), click_x, click_y) == true)
    875e:	f6 01       	movw	r30, r12
    8760:	e9 5a       	subi	r30, 0xA9	; 169
    8762:	fe 4f       	sbci	r31, 0xFE	; 254
    8764:	e6 0d       	add	r30, r6
    8766:	f7 1d       	adc	r31, r7
    8768:	25 91       	lpm	r18, Z+
    876a:	34 91       	lpm	r19, Z
    876c:	f6 01       	movw	r30, r12
    876e:	eb 5a       	subi	r30, 0xAB	; 171
    8770:	fe 4f       	sbci	r31, 0xFE	; 254
    8772:	e6 0d       	add	r30, r6
    8774:	f7 1d       	adc	r31, r7
    8776:	45 91       	lpm	r20, Z+
    8778:	54 91       	lpm	r21, Z
    877a:	f6 01       	movw	r30, r12
    877c:	ed 5a       	subi	r30, 0xAD	; 173
    877e:	fe 4f       	sbci	r31, 0xFE	; 254
    8780:	e6 0d       	add	r30, r6
    8782:	f7 1d       	adc	r31, r7
    8784:	65 91       	lpm	r22, Z+
    8786:	74 91       	lpm	r23, Z
    8788:	f6 01       	movw	r30, r12
    878a:	ef 5a       	subi	r30, 0xAF	; 175
    878c:	fe 4f       	sbci	r31, 0xFE	; 254
    878e:	e6 0d       	add	r30, r6
    8790:	f7 1d       	adc	r31, r7
    8792:	85 91       	lpm	r24, Z+
    8794:	94 91       	lpm	r25, Z
    8796:	c6 54       	subi	r28, 0x46	; 70
    8798:	df 4f       	sbci	r29, 0xFF	; 255
    879a:	e8 81       	ld	r30, Y
    879c:	f9 81       	ldd	r31, Y+1	; 0x01
    879e:	ca 5b       	subi	r28, 0xBA	; 186
    87a0:	d0 40       	sbci	r29, 0x00	; 0
    87a2:	6e 0f       	add	r22, r30
    87a4:	7f 1f       	adc	r23, r31
    87a6:	ca 53       	subi	r28, 0x3A	; 58
    87a8:	df 4f       	sbci	r29, 0xFF	; 255
    87aa:	e8 80       	ld	r14, Y
    87ac:	f9 80       	ldd	r15, Y+1	; 0x01
    87ae:	c6 5c       	subi	r28, 0xC6	; 198
    87b0:	d0 40       	sbci	r29, 0x00	; 0
    87b2:	cc 53       	subi	r28, 0x3C	; 60
    87b4:	df 4f       	sbci	r29, 0xFF	; 255
    87b6:	08 81       	ld	r16, Y
    87b8:	19 81       	ldd	r17, Y+1	; 0x01
    87ba:	c4 5c       	subi	r28, 0xC4	; 196
    87bc:	d0 40       	sbci	r29, 0x00	; 0
    87be:	c8 54       	subi	r28, 0x48	; 72
    87c0:	df 4f       	sbci	r29, 0xFF	; 255
    87c2:	e8 81       	ld	r30, Y
    87c4:	f9 81       	ldd	r31, Y+1	; 0x01
    87c6:	c8 5b       	subi	r28, 0xB8	; 184
    87c8:	d0 40       	sbci	r29, 0x00	; 0
    87ca:	8e 0f       	add	r24, r30
    87cc:	9f 1f       	adc	r25, r31
    87ce:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    87d2:	18 2f       	mov	r17, r24
    87d4:	88 23       	and	r24, r24
    87d6:	01 f1       	breq	.+64     	; 0x8818 <draw_menu(bool)+0xd9c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1865
      {
        fntargs =  pgm_read_word(&switch_1->onclick);
    87d8:	f6 01       	movw	r30, r12
    87da:	e1 5a       	subi	r30, 0xA1	; 161
    87dc:	fe 4f       	sbci	r31, 0xFE	; 254
    87de:	e6 0d       	add	r30, r6
    87e0:	f7 1d       	adc	r31, r7
    87e2:	25 91       	lpm	r18, Z+
    87e4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1866
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
    87e6:	f6 01       	movw	r30, r12
    87e8:	e2 5a       	subi	r30, 0xA2	; 162
    87ea:	fe 4f       	sbci	r31, 0xFE	; 254
    87ec:	e6 0d       	add	r30, r6
    87ee:	f7 1d       	adc	r31, r7
    87f0:	84 91       	lpm	r24, Z
    87f2:	cd 54       	subi	r28, 0x4D	; 77
    87f4:	df 4f       	sbci	r29, 0xFF	; 255
    87f6:	68 81       	ld	r22, Y
    87f8:	c3 5b       	subi	r28, 0xB3	; 179
    87fa:	d0 40       	sbci	r29, 0x00	; 0
    87fc:	70 e0       	ldi	r23, 0x00	; 0
    87fe:	ca 54       	subi	r28, 0x4A	; 74
    8800:	df 4f       	sbci	r29, 0xFF	; 255
    8802:	48 81       	ld	r20, Y
    8804:	c6 5b       	subi	r28, 0xB6	; 182
    8806:	d0 40       	sbci	r29, 0x00	; 0
    8808:	90 e0       	ldi	r25, 0x00	; 0
    880a:	f9 01       	movw	r30, r18
    880c:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1867
        ret = true;
    880e:	c4 53       	subi	r28, 0x34	; 52
    8810:	df 4f       	sbci	r29, 0xFF	; 255
    8812:	18 83       	st	Y, r17
    8814:	cc 5c       	subi	r28, 0xCC	; 204
    8816:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1843
      }
  }
  if (ret == true)  goto draw_menu_end;
  /////
  /// menu switch_1
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_switch_1); idx++)
    8818:	ca 54       	subi	r28, 0x4A	; 74
    881a:	df 4f       	sbci	r29, 0xFF	; 255
    881c:	f8 81       	ld	r31, Y
    881e:	c6 5b       	subi	r28, 0xB6	; 182
    8820:	d0 40       	sbci	r29, 0x00	; 0
    8822:	ff 5f       	subi	r31, 0xFF	; 255
    8824:	ca 54       	subi	r28, 0x4A	; 74
    8826:	df 4f       	sbci	r29, 0xFF	; 255
    8828:	f8 83       	st	Y, r31
    882a:	c6 5b       	subi	r28, 0xB6	; 182
    882c:	d0 40       	sbci	r29, 0x00	; 0
    882e:	21 ce       	rjmp	.-958    	; 0x8472 <draw_menu(bool)+0x9f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1870
        fntargs =  pgm_read_word(&switch_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&switch_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    8830:	c4 53       	subi	r28, 0x34	; 52
    8832:	df 4f       	sbci	r29, 0xFF	; 255
    8834:	28 81       	ld	r18, Y
    8836:	cc 5c       	subi	r28, 0xCC	; 204
    8838:	d0 40       	sbci	r29, 0x00	; 0
    883a:	21 11       	cpse	r18, r1
    883c:	0c 94 de 4f 	jmp	0x9fbc	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    8840:	51 2c       	mov	r5, r1
    8842:	43 01       	movw	r8, r6
    8844:	36 eb       	ldi	r19, 0xB6	; 182
    8846:	83 1a       	sub	r8, r19
    8848:	3d ef       	ldi	r19, 0xFD	; 253
    884a:	93 0a       	sbc	r9, r19
    884c:	f4 01       	movw	r30, r8
    884e:	84 91       	lpm	r24, Z
    8850:	58 16       	cp	r5, r24
    8852:	08 f0       	brcs	.+2      	; 0x8856 <draw_menu(bool)+0xdda>
    8854:	cd c0       	rjmp	.+410    	; 0x89f0 <draw_menu(bool)+0xf74>
    8856:	c5 2c       	mov	r12, r5
    8858:	d1 2c       	mov	r13, r1
    885a:	fd e1       	ldi	r31, 0x1D	; 29
    885c:	cf 0e       	add	r12, r31
    885e:	d1 1c       	adc	r13, r1
    8860:	84 e0       	ldi	r24, 0x04	; 4
    8862:	cc 0c       	add	r12, r12
    8864:	dd 1c       	adc	r13, r13
    8866:	8a 95       	dec	r24
    8868:	e1 f7       	brne	.-8      	; 0x8862 <draw_menu(bool)+0xde6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1875
  {
    symbol_button_1 = &current->symbol_button_1[idx];
    rfnt = pgm_read_word(&symbol_button_1->enable_show);
    886a:	f3 01       	movw	r30, r6
    886c:	ec 0d       	add	r30, r12
    886e:	fd 1d       	adc	r31, r13
    8870:	25 91       	lpm	r18, Z+
    8872:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1876
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    8874:	56 01       	movw	r10, r12
    8876:	44 e0       	ldi	r20, 0x04	; 4
    8878:	a4 1a       	sub	r10, r20
    887a:	b1 08       	sbc	r11, r1
    887c:	a6 0c       	add	r10, r6
    887e:	b7 1c       	adc	r11, r7
    8880:	f5 01       	movw	r30, r10
    8882:	84 91       	lpm	r24, Z
    8884:	cd 54       	subi	r28, 0x4D	; 77
    8886:	df 4f       	sbci	r29, 0xFF	; 255
    8888:	68 81       	ld	r22, Y
    888a:	c3 5b       	subi	r28, 0xB3	; 179
    888c:	d0 40       	sbci	r29, 0x00	; 0
    888e:	70 e0       	ldi	r23, 0x00	; 0
    8890:	45 2d       	mov	r20, r5
    8892:	90 e0       	ldi	r25, 0x00	; 0
    8894:	f9 01       	movw	r30, r18
    8896:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1877
    if (active == 0) continue;
    8898:	88 23       	and	r24, r24
    889a:	09 f4       	brne	.+2      	; 0x889e <draw_menu(bool)+0xe22>
    889c:	a7 c0       	rjmp	.+334    	; 0x89ec <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1878
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    889e:	f6 01       	movw	r30, r12
    88a0:	31 97       	sbiw	r30, 0x01	; 1
    88a2:	e6 0d       	add	r30, r6
    88a4:	f7 1d       	adc	r31, r7
    88a6:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1879
    if (enable_redraw(rdr, redraw_class) == true)
    88a8:	cf 52       	subi	r28, 0x2F	; 47
    88aa:	df 4f       	sbci	r29, 0xFF	; 255
    88ac:	68 81       	ld	r22, Y
    88ae:	c1 5d       	subi	r28, 0xD1	; 209
    88b0:	d0 40       	sbci	r29, 0x00	; 0
    88b2:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    88b6:	88 23       	and	r24, r24
    88b8:	09 f4       	brne	.+2      	; 0x88bc <draw_menu(bool)+0xe40>
    88ba:	36 c0       	rjmp	.+108    	; 0x8928 <draw_menu(bool)+0xeac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1883
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    88bc:	f6 01       	movw	r30, r12
    88be:	3e 97       	sbiw	r30, 0x0e	; 14
    88c0:	e6 0d       	add	r30, r6
    88c2:	f7 1d       	adc	r31, r7
    88c4:	e5 90       	lpm	r14, Z+
    88c6:	f4 90       	lpm	r15, Z
    88c8:	f6 01       	movw	r30, r12
    88ca:	35 97       	sbiw	r30, 0x05	; 5
    88cc:	e6 0d       	add	r30, r6
    88ce:	f7 1d       	adc	r31, r7
    88d0:	05 91       	lpm	r16, Z+
    88d2:	14 91       	lpm	r17, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1882
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
    88d4:	f6 01       	movw	r30, r12
    88d6:	37 97       	sbiw	r30, 0x07	; 7
    88d8:	e6 0d       	add	r30, r6
    88da:	f7 1d       	adc	r31, r7
    88dc:	25 91       	lpm	r18, Z+
    88de:	34 91       	lpm	r19, Z
    88e0:	f6 01       	movw	r30, r12
    88e2:	39 97       	sbiw	r30, 0x09	; 9
    88e4:	e6 0d       	add	r30, r6
    88e6:	f7 1d       	adc	r31, r7
    88e8:	45 91       	lpm	r20, Z+
    88ea:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1881
    active = (ret_fptr(rfnt))(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    if (active == 0) continue;
    rdr = pgm_read_byte(&symbol_button_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      button_click_3(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), \
    88ec:	f6 01       	movw	r30, r12
    88ee:	3b 97       	sbiw	r30, 0x0b	; 11
    88f0:	e6 0d       	add	r30, r6
    88f2:	f7 1d       	adc	r31, r7
    88f4:	65 91       	lpm	r22, Z+
    88f6:	74 91       	lpm	r23, Z
    88f8:	f6 01       	movw	r30, r12
    88fa:	3d 97       	sbiw	r30, 0x0d	; 13
    88fc:	e6 0d       	add	r30, r6
    88fe:	f7 1d       	adc	r31, r7
    8900:	85 91       	lpm	r24, Z+
    8902:	94 91       	lpm	r25, Z
    8904:	c6 54       	subi	r28, 0x46	; 70
    8906:	df 4f       	sbci	r29, 0xFF	; 255
    8908:	e8 81       	ld	r30, Y
    890a:	f9 81       	ldd	r31, Y+1	; 0x01
    890c:	ca 5b       	subi	r28, 0xBA	; 186
    890e:	d0 40       	sbci	r29, 0x00	; 0
    8910:	6e 0f       	add	r22, r30
    8912:	7f 1f       	adc	r23, r31
    8914:	c8 54       	subi	r28, 0x48	; 72
    8916:	df 4f       	sbci	r29, 0xFF	; 255
    8918:	e8 81       	ld	r30, Y
    891a:	f9 81       	ldd	r31, Y+1	; 0x01
    891c:	c8 5b       	subi	r28, 0xB8	; 184
    891e:	d0 40       	sbci	r29, 0x00	; 0
    8920:	8e 0f       	add	r24, r30
    8922:	9f 1f       	adc	r25, r31
    8924:	0e 94 11 2c 	call	0x5822	; 0x5822 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1885
                     pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), \
                     pgm_read_word(&symbol_button_1->znak_size), pgm_read_word(&symbol_button_1->znak));
    }
    if (click_x > 0 && click_y > 0)
    8928:	cc 53       	subi	r28, 0x3C	; 60
    892a:	df 4f       	sbci	r29, 0xFF	; 255
    892c:	28 81       	ld	r18, Y
    892e:	39 81       	ldd	r19, Y+1	; 0x01
    8930:	c4 5c       	subi	r28, 0xC4	; 196
    8932:	d0 40       	sbci	r29, 0x00	; 0
    8934:	23 2b       	or	r18, r19
    8936:	09 f4       	brne	.+2      	; 0x893a <draw_menu(bool)+0xebe>
    8938:	59 c0       	rjmp	.+178    	; 0x89ec <draw_menu(bool)+0xf70>
    893a:	ca 53       	subi	r28, 0x3A	; 58
    893c:	df 4f       	sbci	r29, 0xFF	; 255
    893e:	48 81       	ld	r20, Y
    8940:	59 81       	ldd	r21, Y+1	; 0x01
    8942:	c6 5c       	subi	r28, 0xC6	; 198
    8944:	d0 40       	sbci	r29, 0x00	; 0
    8946:	45 2b       	or	r20, r21
    8948:	09 f4       	brne	.+2      	; 0x894c <draw_menu(bool)+0xed0>
    894a:	50 c0       	rjmp	.+160    	; 0x89ec <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1886
      if (button_click_touch(global_x + pgm_read_word(&symbol_button_1->x), global_y + pgm_read_word(&symbol_button_1->y), pgm_read_word(&symbol_button_1->size_x), pgm_read_word(&symbol_button_1->size_y), click_x, click_y) == true)
    894c:	f6 01       	movw	r30, r12
    894e:	37 97       	sbiw	r30, 0x07	; 7
    8950:	e6 0d       	add	r30, r6
    8952:	f7 1d       	adc	r31, r7
    8954:	25 91       	lpm	r18, Z+
    8956:	34 91       	lpm	r19, Z
    8958:	f6 01       	movw	r30, r12
    895a:	39 97       	sbiw	r30, 0x09	; 9
    895c:	e6 0d       	add	r30, r6
    895e:	f7 1d       	adc	r31, r7
    8960:	45 91       	lpm	r20, Z+
    8962:	54 91       	lpm	r21, Z
    8964:	f6 01       	movw	r30, r12
    8966:	3b 97       	sbiw	r30, 0x0b	; 11
    8968:	e6 0d       	add	r30, r6
    896a:	f7 1d       	adc	r31, r7
    896c:	65 91       	lpm	r22, Z+
    896e:	74 91       	lpm	r23, Z
    8970:	f6 01       	movw	r30, r12
    8972:	3d 97       	sbiw	r30, 0x0d	; 13
    8974:	e6 0d       	add	r30, r6
    8976:	f7 1d       	adc	r31, r7
    8978:	85 91       	lpm	r24, Z+
    897a:	94 91       	lpm	r25, Z
    897c:	c6 54       	subi	r28, 0x46	; 70
    897e:	df 4f       	sbci	r29, 0xFF	; 255
    8980:	e8 81       	ld	r30, Y
    8982:	f9 81       	ldd	r31, Y+1	; 0x01
    8984:	ca 5b       	subi	r28, 0xBA	; 186
    8986:	d0 40       	sbci	r29, 0x00	; 0
    8988:	6e 0f       	add	r22, r30
    898a:	7f 1f       	adc	r23, r31
    898c:	ca 53       	subi	r28, 0x3A	; 58
    898e:	df 4f       	sbci	r29, 0xFF	; 255
    8990:	e8 80       	ld	r14, Y
    8992:	f9 80       	ldd	r15, Y+1	; 0x01
    8994:	c6 5c       	subi	r28, 0xC6	; 198
    8996:	d0 40       	sbci	r29, 0x00	; 0
    8998:	cc 53       	subi	r28, 0x3C	; 60
    899a:	df 4f       	sbci	r29, 0xFF	; 255
    899c:	08 81       	ld	r16, Y
    899e:	19 81       	ldd	r17, Y+1	; 0x01
    89a0:	c4 5c       	subi	r28, 0xC4	; 196
    89a2:	d0 40       	sbci	r29, 0x00	; 0
    89a4:	c8 54       	subi	r28, 0x48	; 72
    89a6:	df 4f       	sbci	r29, 0xFF	; 255
    89a8:	e8 81       	ld	r30, Y
    89aa:	f9 81       	ldd	r31, Y+1	; 0x01
    89ac:	c8 5b       	subi	r28, 0xB8	; 184
    89ae:	d0 40       	sbci	r29, 0x00	; 0
    89b0:	8e 0f       	add	r24, r30
    89b2:	9f 1f       	adc	r25, r31
    89b4:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    89b8:	18 2f       	mov	r17, r24
    89ba:	88 23       	and	r24, r24
    89bc:	b9 f0       	breq	.+46     	; 0x89ec <draw_menu(bool)+0xf70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1888
      {
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
    89be:	f6 01       	movw	r30, r12
    89c0:	33 97       	sbiw	r30, 0x03	; 3
    89c2:	e6 0d       	add	r30, r6
    89c4:	f7 1d       	adc	r31, r7
    89c6:	25 91       	lpm	r18, Z+
    89c8:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1889
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
    89ca:	f5 01       	movw	r30, r10
    89cc:	84 91       	lpm	r24, Z
    89ce:	cd 54       	subi	r28, 0x4D	; 77
    89d0:	df 4f       	sbci	r29, 0xFF	; 255
    89d2:	68 81       	ld	r22, Y
    89d4:	c3 5b       	subi	r28, 0xB3	; 179
    89d6:	d0 40       	sbci	r29, 0x00	; 0
    89d8:	70 e0       	ldi	r23, 0x00	; 0
    89da:	45 2d       	mov	r20, r5
    89dc:	90 e0       	ldi	r25, 0x00	; 0
    89de:	f9 01       	movw	r30, r18
    89e0:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1890
        ret = true;
    89e2:	c4 53       	subi	r28, 0x34	; 52
    89e4:	df 4f       	sbci	r29, 0xFF	; 255
    89e6:	18 83       	st	Y, r17
    89e8:	cc 5c       	subi	r28, 0xCC	; 204
    89ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1872
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_symbol_button_1); idx++)
    89ec:	53 94       	inc	r5
    89ee:	2e cf       	rjmp	.-420    	; 0x884c <draw_menu(bool)+0xdd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1893
        fntargs =  pgm_read_word(&symbol_button_1->onclick);
        ((fptr_args)fntargs)(pgm_read_byte(&symbol_button_1->args), menu_args1, idx);
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
    89f0:	c4 53       	subi	r28, 0x34	; 52
    89f2:	df 4f       	sbci	r29, 0xFF	; 255
    89f4:	f8 81       	ld	r31, Y
    89f6:	cc 5c       	subi	r28, 0xCC	; 204
    89f8:	d0 40       	sbci	r29, 0x00	; 0
    89fa:	f1 11       	cpse	r31, r1
    89fc:	0c 94 de 4f 	jmp	0x9fbc	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    8a00:	51 2c       	mov	r5, r1
    8a02:	93 01       	movw	r18, r6
    8a04:	25 5b       	subi	r18, 0xB5	; 181
    8a06:	3d 4f       	sbci	r19, 0xFD	; 253
    8a08:	cc 52       	subi	r28, 0x2C	; 44
    8a0a:	df 4f       	sbci	r29, 0xFF	; 255
    8a0c:	39 83       	std	Y+1, r19	; 0x01
    8a0e:	28 83       	st	Y, r18
    8a10:	c4 5d       	subi	r28, 0xD4	; 212
    8a12:	d0 40       	sbci	r29, 0x00	; 0
    8a14:	cc 52       	subi	r28, 0x2C	; 44
    8a16:	df 4f       	sbci	r29, 0xFF	; 255
    8a18:	e8 81       	ld	r30, Y
    8a1a:	f9 81       	ldd	r31, Y+1	; 0x01
    8a1c:	c4 5d       	subi	r28, 0xD4	; 212
    8a1e:	d0 40       	sbci	r29, 0x00	; 0
    8a20:	84 91       	lpm	r24, Z
    8a22:	58 16       	cp	r5, r24
    8a24:	08 f0       	brcs	.+2      	; 0x8a28 <draw_menu(bool)+0xfac>
    8a26:	51 c3       	rjmp	.+1698   	; 0x90ca <draw_menu(bool)+0x164e>
    8a28:	f7 e1       	ldi	r31, 0x17	; 23
    8a2a:	5f 9e       	mul	r5, r31
    8a2c:	60 01       	movw	r12, r0
    8a2e:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1898
  {
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    8a30:	f6 01       	movw	r30, r12
    8a32:	e8 50       	subi	r30, 0x08	; 8
    8a34:	fe 4f       	sbci	r31, 0xFE	; 254
    8a36:	e6 0d       	add	r30, r6
    8a38:	f7 1d       	adc	r31, r7
    8a3a:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1899
    if (enable_redraw(rdr, redraw_class) == true)
    8a3c:	cf 52       	subi	r28, 0x2F	; 47
    8a3e:	df 4f       	sbci	r29, 0xFF	; 255
    8a40:	68 81       	ld	r22, Y
    8a42:	c1 5d       	subi	r28, 0xD1	; 209
    8a44:	d0 40       	sbci	r29, 0x00	; 0
    8a46:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    8a4a:	88 23       	and	r24, r24
    8a4c:	09 f4       	brne	.+2      	; 0x8a50 <draw_menu(bool)+0xfd4>
    8a4e:	89 c1       	rjmp	.+786    	; 0x8d62 <draw_menu(bool)+0x12e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1901
    {
      loop_i = 0;
    8a50:	ce 54       	subi	r28, 0x4E	; 78
    8a52:	df 4f       	sbci	r29, 0xFF	; 255
    8a54:	18 82       	st	Y, r1
    8a56:	c2 5b       	subi	r28, 0xB2	; 178
    8a58:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1904
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8a5a:	f6 01       	movw	r30, r12
    8a5c:	ea 50       	subi	r30, 0x0A	; 10
    8a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    8a60:	e6 0d       	add	r30, r6
    8a62:	f7 1d       	adc	r31, r7
    8a64:	25 91       	lpm	r18, Z+
    8a66:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1905
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    8a68:	f6 01       	movw	r30, r12
    8a6a:	ef 50       	subi	r30, 0x0F	; 15
    8a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    8a6e:	e6 0d       	add	r30, r6
    8a70:	f7 1d       	adc	r31, r7
    8a72:	84 91       	lpm	r24, Z
    8a74:	cd 54       	subi	r28, 0x4D	; 77
    8a76:	df 4f       	sbci	r29, 0xFF	; 255
    8a78:	68 81       	ld	r22, Y
    8a7a:	c3 5b       	subi	r28, 0xB3	; 179
    8a7c:	d0 40       	sbci	r29, 0x00	; 0
    8a7e:	70 e0       	ldi	r23, 0x00	; 0
    8a80:	40 e0       	ldi	r20, 0x00	; 0
    8a82:	90 e0       	ldi	r25, 0x00	; 0
    8a84:	f9 01       	movw	r30, r18
    8a86:	19 95       	eicall
    8a88:	cf 54       	subi	r28, 0x4F	; 79
    8a8a:	df 4f       	sbci	r29, 0xFF	; 255
    8a8c:	88 83       	st	Y, r24
    8a8e:	c1 5b       	subi	r28, 0xB1	; 177
    8a90:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1906
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
    8a92:	f6 01       	movw	r30, r12
    8a94:	ee 50       	subi	r30, 0x0E	; 14
    8a96:	fe 4f       	sbci	r31, 0xFE	; 254
    8a98:	e6 0d       	add	r30, r6
    8a9a:	f7 1d       	adc	r31, r7
    8a9c:	25 91       	lpm	r18, Z+
    8a9e:	34 91       	lpm	r19, Z
    8aa0:	c1 53       	subi	r28, 0x31	; 49
    8aa2:	df 4f       	sbci	r29, 0xFF	; 255
    8aa4:	39 83       	std	Y+1, r19	; 0x01
    8aa6:	28 83       	st	Y, r18
    8aa8:	cf 5c       	subi	r28, 0xCF	; 207
    8aaa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8aac:	56 01       	movw	r10, r12
    8aae:	3e e1       	ldi	r19, 0x1E	; 30
    8ab0:	a3 1a       	sub	r10, r19
    8ab2:	3e ef       	ldi	r19, 0xFE	; 254
    8ab4:	b3 0a       	sbc	r11, r19
    8ab6:	a6 0c       	add	r10, r6
    8ab8:	b7 1c       	adc	r11, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8aba:	46 01       	movw	r8, r12
    8abc:	4c e1       	ldi	r20, 0x1C	; 28
    8abe:	84 1a       	sub	r8, r20
    8ac0:	4e ef       	ldi	r20, 0xFE	; 254
    8ac2:	94 0a       	sbc	r9, r20
    8ac4:	86 0c       	add	r8, r6
    8ac6:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1911
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8ac8:	16 01       	movw	r2, r12
    8aca:	53 e1       	ldi	r21, 0x13	; 19
    8acc:	25 1a       	sub	r2, r21
    8ace:	5e ef       	ldi	r21, 0xFE	; 254
    8ad0:	35 0a       	sbc	r3, r21
    8ad2:	26 0c       	add	r2, r6
    8ad4:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8ad6:	c6 01       	movw	r24, r12
    8ad8:	84 51       	subi	r24, 0x14	; 20
    8ada:	9e 4f       	sbci	r25, 0xFE	; 254
    8adc:	b3 01       	movw	r22, r6
    8ade:	68 0f       	add	r22, r24
    8ae0:	79 1f       	adc	r23, r25
    8ae2:	ca 54       	subi	r28, 0x4A	; 74
    8ae4:	df 4f       	sbci	r29, 0xFF	; 255
    8ae6:	79 83       	std	Y+1, r23	; 0x01
    8ae8:	68 83       	st	Y, r22
    8aea:	c6 5b       	subi	r28, 0xB6	; 182
    8aec:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8aee:	01 97       	sbiw	r24, 0x01	; 1
    8af0:	f3 01       	movw	r30, r6
    8af2:	e8 0f       	add	r30, r24
    8af4:	f9 1f       	adc	r31, r25
    8af6:	c4 54       	subi	r28, 0x44	; 68
    8af8:	df 4f       	sbci	r29, 0xFF	; 255
    8afa:	f9 83       	std	Y+1, r31	; 0x01
    8afc:	e8 83       	st	Y, r30
    8afe:	cc 5b       	subi	r28, 0xBC	; 188
    8b00:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8b02:	03 96       	adiw	r24, 0x03	; 3
    8b04:	93 01       	movw	r18, r6
    8b06:	28 0f       	add	r18, r24
    8b08:	39 1f       	adc	r19, r25
    8b0a:	ce 53       	subi	r28, 0x3E	; 62
    8b0c:	df 4f       	sbci	r29, 0xFF	; 255
    8b0e:	39 83       	std	Y+1, r19	; 0x01
    8b10:	28 83       	st	Y, r18
    8b12:	c2 5c       	subi	r28, 0xC2	; 194
    8b14:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8b16:	04 97       	sbiw	r24, 0x04	; 4
    8b18:	a3 01       	movw	r20, r6
    8b1a:	48 0f       	add	r20, r24
    8b1c:	59 1f       	adc	r21, r25
    8b1e:	c8 53       	subi	r28, 0x38	; 56
    8b20:	df 4f       	sbci	r29, 0xFF	; 255
    8b22:	59 83       	std	Y+1, r21	; 0x01
    8b24:	48 83       	st	Y, r20
    8b26:	c8 5c       	subi	r28, 0xC8	; 200
    8b28:	d0 40       	sbci	r29, 0x00	; 0
    8b2a:	02 97       	sbiw	r24, 0x02	; 2
    8b2c:	b3 01       	movw	r22, r6
    8b2e:	68 0f       	add	r22, r24
    8b30:	79 1f       	adc	r23, r25
    8b32:	c6 53       	subi	r28, 0x36	; 54
    8b34:	df 4f       	sbci	r29, 0xFF	; 255
    8b36:	79 83       	std	Y+1, r23	; 0x01
    8b38:	68 83       	st	Y, r22
    8b3a:	ca 5c       	subi	r28, 0xCA	; 202
    8b3c:	d0 40       	sbci	r29, 0x00	; 0
    8b3e:	02 97       	sbiw	r24, 0x02	; 2
    8b40:	f3 01       	movw	r30, r6
    8b42:	e8 0f       	add	r30, r24
    8b44:	f9 1f       	adc	r31, r25
    8b46:	c3 53       	subi	r28, 0x33	; 51
    8b48:	df 4f       	sbci	r29, 0xFF	; 255
    8b4a:	f9 83       	std	Y+1, r31	; 0x01
    8b4c:	e8 83       	st	Y, r30
    8b4e:	cd 5c       	subi	r28, 0xCD	; 205
    8b50:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1903
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8b52:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1902
    dyn_symbol_1 = &current->dyn_symbol_1[idx];
    rdr = pgm_read_byte(&dyn_symbol_1->redraw_class);
    if (enable_redraw(rdr, redraw_class) == true)
    {
      loop_i = 0;
      loop_t = 0;
    8b54:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1907
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
    8b56:	ce 54       	subi	r28, 0x4E	; 78
    8b58:	df 4f       	sbci	r29, 0xFF	; 255
    8b5a:	88 81       	ld	r24, Y
    8b5c:	c2 5b       	subi	r28, 0xB2	; 178
    8b5e:	d0 40       	sbci	r29, 0x00	; 0
    8b60:	cf 54       	subi	r28, 0x4F	; 79
    8b62:	df 4f       	sbci	r29, 0xFF	; 255
    8b64:	98 81       	ld	r25, Y
    8b66:	c1 5b       	subi	r28, 0xB1	; 177
    8b68:	d0 40       	sbci	r29, 0x00	; 0
    8b6a:	89 17       	cp	r24, r25
    8b6c:	08 f0       	brcs	.+2      	; 0x8b70 <draw_menu(bool)+0x10f4>
    8b6e:	f9 c0       	rjmp	.+498    	; 0x8d62 <draw_menu(bool)+0x12e6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8b70:	f5 01       	movw	r30, r10
    8b72:	45 91       	lpm	r20, Z+
    8b74:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8b76:	f4 01       	movw	r30, r8
    8b78:	25 91       	lpm	r18, Z+
    8b7a:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1911
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8b7c:	f1 01       	movw	r30, r2
    8b7e:	94 91       	lpm	r25, Z
    8b80:	99 23       	and	r25, r25
    8b82:	09 f4       	brne	.+2      	; 0x8b86 <draw_menu(bool)+0x110a>
    8b84:	b0 c0       	rjmp	.+352    	; 0x8ce6 <draw_menu(bool)+0x126a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1910
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8b86:	c6 54       	subi	r28, 0x46	; 70
    8b88:	df 4f       	sbci	r29, 0xFF	; 255
    8b8a:	68 81       	ld	r22, Y
    8b8c:	79 81       	ldd	r23, Y+1	; 0x01
    8b8e:	ca 5b       	subi	r28, 0xBA	; 186
    8b90:	d0 40       	sbci	r29, 0x00	; 0
    8b92:	62 0f       	add	r22, r18
    8b94:	73 1f       	adc	r23, r19
    8b96:	c0 54       	subi	r28, 0x40	; 64
    8b98:	df 4f       	sbci	r29, 0xFF	; 255
    8b9a:	79 83       	std	Y+1, r23	; 0x01
    8b9c:	68 83       	st	Y, r22
    8b9e:	c0 5c       	subi	r28, 0xC0	; 192
    8ba0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1916
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8ba2:	f1 01       	movw	r30, r2
    8ba4:	94 91       	lpm	r25, Z
    8ba6:	91 30       	cpi	r25, 0x01	; 1
    8ba8:	09 f4       	brne	.+2      	; 0x8bac <draw_menu(bool)+0x1130>
    8baa:	bc c0       	rjmp	.+376    	; 0x8d24 <draw_menu(bool)+0x12a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1909
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_symbol_1->get_status_string);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8bac:	c8 54       	subi	r28, 0x48	; 72
    8bae:	df 4f       	sbci	r29, 0xFF	; 255
    8bb0:	28 81       	ld	r18, Y
    8bb2:	39 81       	ldd	r19, Y+1	; 0x01
    8bb4:	c8 5b       	subi	r28, 0xB8	; 184
    8bb6:	d0 40       	sbci	r29, 0x00	; 0
    8bb8:	24 0f       	add	r18, r20
    8bba:	35 1f       	adc	r19, r21
    8bbc:	c2 54       	subi	r28, 0x42	; 66
    8bbe:	df 4f       	sbci	r29, 0xFF	; 255
    8bc0:	39 83       	std	Y+1, r19	; 0x01
    8bc2:	28 83       	st	Y, r18
    8bc4:	ce 5b       	subi	r28, 0xBE	; 190
    8bc6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1921
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8bc8:	f1 01       	movw	r30, r2
    8bca:	94 91       	lpm	r25, Z
    8bcc:	92 30       	cpi	r25, 0x02	; 2
    8bce:	09 f0       	breq	.+2      	; 0x8bd2 <draw_menu(bool)+0x1156>
    8bd0:	46 c0       	rjmp	.+140    	; 0x8c5e <draw_menu(bool)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1923
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8bd2:	f5 01       	movw	r30, r10
    8bd4:	25 91       	lpm	r18, Z+
    8bd6:	34 91       	lpm	r19, Z
    8bd8:	c4 54       	subi	r28, 0x44	; 68
    8bda:	df 4f       	sbci	r29, 0xFF	; 255
    8bdc:	e8 81       	ld	r30, Y
    8bde:	f9 81       	ldd	r31, Y+1	; 0x01
    8be0:	cc 5b       	subi	r28, 0xBC	; 188
    8be2:	d0 40       	sbci	r29, 0x00	; 0
    8be4:	94 91       	lpm	r25, Z
    8be6:	c8 54       	subi	r28, 0x48	; 72
    8be8:	df 4f       	sbci	r29, 0xFF	; 255
    8bea:	48 81       	ld	r20, Y
    8bec:	59 81       	ldd	r21, Y+1	; 0x01
    8bee:	c8 5b       	subi	r28, 0xB8	; 184
    8bf0:	d0 40       	sbci	r29, 0x00	; 0
    8bf2:	24 0f       	add	r18, r20
    8bf4:	35 1f       	adc	r19, r21
    8bf6:	b9 01       	movw	r22, r18
    8bf8:	91 9f       	mul	r25, r17
    8bfa:	60 0d       	add	r22, r0
    8bfc:	71 1d       	adc	r23, r1
    8bfe:	11 24       	eor	r1, r1
    8c00:	c2 54       	subi	r28, 0x42	; 66
    8c02:	df 4f       	sbci	r29, 0xFF	; 255
    8c04:	79 83       	std	Y+1, r23	; 0x01
    8c06:	68 83       	st	Y, r22
    8c08:	ce 5b       	subi	r28, 0xBE	; 190
    8c0a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1924
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8c0c:	f4 01       	movw	r30, r8
    8c0e:	25 91       	lpm	r18, Z+
    8c10:	34 91       	lpm	r19, Z
    8c12:	ca 54       	subi	r28, 0x4A	; 74
    8c14:	df 4f       	sbci	r29, 0xFF	; 255
    8c16:	e8 81       	ld	r30, Y
    8c18:	f9 81       	ldd	r31, Y+1	; 0x01
    8c1a:	c6 5b       	subi	r28, 0xB6	; 182
    8c1c:	d0 40       	sbci	r29, 0x00	; 0
    8c1e:	94 91       	lpm	r25, Z
    8c20:	c6 54       	subi	r28, 0x46	; 70
    8c22:	df 4f       	sbci	r29, 0xFF	; 255
    8c24:	48 81       	ld	r20, Y
    8c26:	59 81       	ldd	r21, Y+1	; 0x01
    8c28:	ca 5b       	subi	r28, 0xBA	; 186
    8c2a:	d0 40       	sbci	r29, 0x00	; 0
    8c2c:	24 0f       	add	r18, r20
    8c2e:	35 1f       	adc	r19, r21
    8c30:	b9 01       	movw	r22, r18
    8c32:	9f 9d       	mul	r25, r15
    8c34:	60 0d       	add	r22, r0
    8c36:	71 1d       	adc	r23, r1
    8c38:	11 24       	eor	r1, r1
    8c3a:	c0 54       	subi	r28, 0x40	; 64
    8c3c:	df 4f       	sbci	r29, 0xFF	; 255
    8c3e:	79 83       	std	Y+1, r23	; 0x01
    8c40:	68 83       	st	Y, r22
    8c42:	c0 5c       	subi	r28, 0xC0	; 192
    8c44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1925
          loop_t++;
    8c46:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1926
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8c48:	ce 53       	subi	r28, 0x3E	; 62
    8c4a:	df 4f       	sbci	r29, 0xFF	; 255
    8c4c:	e8 81       	ld	r30, Y
    8c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    8c50:	c2 5c       	subi	r28, 0xC2	; 194
    8c52:	d0 40       	sbci	r29, 0x00	; 0
    8c54:	94 91       	lpm	r25, Z
    8c56:	19 17       	cp	r17, r25
    8c58:	10 f0       	brcs	.+4      	; 0x8c5e <draw_menu(bool)+0x11e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1929
          {
            loop_t = 0;
            loop_r++;
    8c5a:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1928
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8c5c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1932
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    8c5e:	9e 01       	movw	r18, r28
    8c60:	2f 57       	subi	r18, 0x7F	; 127
    8c62:	3f 4f       	sbci	r19, 0xFF	; 255
    8c64:	ae 01       	movw	r20, r28
    8c66:	4f 5f       	subi	r20, 0xFF	; 255
    8c68:	5f 4f       	sbci	r21, 0xFF	; 255
    8c6a:	cd 54       	subi	r28, 0x4D	; 77
    8c6c:	df 4f       	sbci	r29, 0xFF	; 255
    8c6e:	68 81       	ld	r22, Y
    8c70:	c3 5b       	subi	r28, 0xB3	; 179
    8c72:	d0 40       	sbci	r29, 0x00	; 0
    8c74:	c1 53       	subi	r28, 0x31	; 49
    8c76:	df 4f       	sbci	r29, 0xFF	; 255
    8c78:	e8 81       	ld	r30, Y
    8c7a:	f9 81       	ldd	r31, Y+1	; 0x01
    8c7c:	cf 5c       	subi	r28, 0xCF	; 207
    8c7e:	d0 40       	sbci	r29, 0x00	; 0
    8c80:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1934
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
    8c82:	c8 53       	subi	r28, 0x38	; 56
    8c84:	df 4f       	sbci	r29, 0xFF	; 255
    8c86:	e8 81       	ld	r30, Y
    8c88:	f9 81       	ldd	r31, Y+1	; 0x01
    8c8a:	c8 5c       	subi	r28, 0xC8	; 200
    8c8c:	d0 40       	sbci	r29, 0x00	; 0
    8c8e:	04 91       	lpm	r16, Z
    8c90:	c6 53       	subi	r28, 0x36	; 54
    8c92:	df 4f       	sbci	r29, 0xFF	; 255
    8c94:	e8 81       	ld	r30, Y
    8c96:	f9 81       	ldd	r31, Y+1	; 0x01
    8c98:	ca 5c       	subi	r28, 0xCA	; 202
    8c9a:	d0 40       	sbci	r29, 0x00	; 0
    8c9c:	25 91       	lpm	r18, Z+
    8c9e:	34 91       	lpm	r19, Z
    8ca0:	c3 53       	subi	r28, 0x33	; 51
    8ca2:	df 4f       	sbci	r29, 0xFF	; 255
    8ca4:	e8 81       	ld	r30, Y
    8ca6:	f9 81       	ldd	r31, Y+1	; 0x01
    8ca8:	cd 5c       	subi	r28, 0xCD	; 205
    8caa:	d0 40       	sbci	r29, 0x00	; 0
    8cac:	45 91       	lpm	r20, Z+
    8cae:	54 91       	lpm	r21, Z
    8cb0:	e9 80       	ldd	r14, Y+1	; 0x01
    8cb2:	c0 54       	subi	r28, 0x40	; 64
    8cb4:	df 4f       	sbci	r29, 0xFF	; 255
    8cb6:	68 81       	ld	r22, Y
    8cb8:	79 81       	ldd	r23, Y+1	; 0x01
    8cba:	c0 5c       	subi	r28, 0xC0	; 192
    8cbc:	d0 40       	sbci	r29, 0x00	; 0
    8cbe:	c2 54       	subi	r28, 0x42	; 66
    8cc0:	df 4f       	sbci	r29, 0xFF	; 255
    8cc2:	88 81       	ld	r24, Y
    8cc4:	99 81       	ldd	r25, Y+1	; 0x01
    8cc6:	ce 5b       	subi	r28, 0xBE	; 190
    8cc8:	d0 40       	sbci	r29, 0x00	; 0
    8cca:	0e 94 11 2c 	call	0x5822	; 0x5822 <button_click_3(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1935
        loop_i++;
    8cce:	ce 54       	subi	r28, 0x4E	; 78
    8cd0:	df 4f       	sbci	r29, 0xFF	; 255
    8cd2:	88 81       	ld	r24, Y
    8cd4:	c2 5b       	subi	r28, 0xB2	; 178
    8cd6:	d0 40       	sbci	r29, 0x00	; 0
    8cd8:	8f 5f       	subi	r24, 0xFF	; 255
    8cda:	ce 54       	subi	r28, 0x4E	; 78
    8cdc:	df 4f       	sbci	r29, 0xFF	; 255
    8cde:	88 83       	st	Y, r24
    8ce0:	c2 5b       	subi	r28, 0xB2	; 178
    8ce2:	d0 40       	sbci	r29, 0x00	; 0
    8ce4:	38 cf       	rjmp	.-400    	; 0x8b56 <draw_menu(bool)+0x10da>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1913
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8ce6:	f4 01       	movw	r30, r8
    8ce8:	25 91       	lpm	r18, Z+
    8cea:	34 91       	lpm	r19, Z
    8cec:	ca 54       	subi	r28, 0x4A	; 74
    8cee:	df 4f       	sbci	r29, 0xFF	; 255
    8cf0:	e8 81       	ld	r30, Y
    8cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    8cf4:	c6 5b       	subi	r28, 0xB6	; 182
    8cf6:	d0 40       	sbci	r29, 0x00	; 0
    8cf8:	94 91       	lpm	r25, Z
    8cfa:	c6 54       	subi	r28, 0x46	; 70
    8cfc:	df 4f       	sbci	r29, 0xFF	; 255
    8cfe:	68 81       	ld	r22, Y
    8d00:	79 81       	ldd	r23, Y+1	; 0x01
    8d02:	ca 5b       	subi	r28, 0xBA	; 186
    8d04:	d0 40       	sbci	r29, 0x00	; 0
    8d06:	26 0f       	add	r18, r22
    8d08:	37 1f       	adc	r19, r23
    8d0a:	f9 01       	movw	r30, r18
    8d0c:	91 9f       	mul	r25, r17
    8d0e:	e0 0d       	add	r30, r0
    8d10:	f1 1d       	adc	r31, r1
    8d12:	11 24       	eor	r1, r1
    8d14:	c0 54       	subi	r28, 0x40	; 64
    8d16:	df 4f       	sbci	r29, 0xFF	; 255
    8d18:	f9 83       	std	Y+1, r31	; 0x01
    8d1a:	e8 83       	st	Y, r30
    8d1c:	c0 5c       	subi	r28, 0xC0	; 192
    8d1e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1914
          loop_t++;
    8d20:	1f 5f       	subi	r17, 0xFF	; 255
    8d22:	3f cf       	rjmp	.-386    	; 0x8ba2 <draw_menu(bool)+0x1126>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1918
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8d24:	f5 01       	movw	r30, r10
    8d26:	25 91       	lpm	r18, Z+
    8d28:	34 91       	lpm	r19, Z
    8d2a:	c4 54       	subi	r28, 0x44	; 68
    8d2c:	df 4f       	sbci	r29, 0xFF	; 255
    8d2e:	e8 81       	ld	r30, Y
    8d30:	f9 81       	ldd	r31, Y+1	; 0x01
    8d32:	cc 5b       	subi	r28, 0xBC	; 188
    8d34:	d0 40       	sbci	r29, 0x00	; 0
    8d36:	94 91       	lpm	r25, Z
    8d38:	c8 54       	subi	r28, 0x48	; 72
    8d3a:	df 4f       	sbci	r29, 0xFF	; 255
    8d3c:	48 81       	ld	r20, Y
    8d3e:	59 81       	ldd	r21, Y+1	; 0x01
    8d40:	c8 5b       	subi	r28, 0xB8	; 184
    8d42:	d0 40       	sbci	r29, 0x00	; 0
    8d44:	24 0f       	add	r18, r20
    8d46:	35 1f       	adc	r19, r21
    8d48:	b9 01       	movw	r22, r18
    8d4a:	91 9f       	mul	r25, r17
    8d4c:	60 0d       	add	r22, r0
    8d4e:	71 1d       	adc	r23, r1
    8d50:	11 24       	eor	r1, r1
    8d52:	c2 54       	subi	r28, 0x42	; 66
    8d54:	df 4f       	sbci	r29, 0xFF	; 255
    8d56:	79 83       	std	Y+1, r23	; 0x01
    8d58:	68 83       	st	Y, r22
    8d5a:	ce 5b       	subi	r28, 0xBE	; 190
    8d5c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1919
          loop_t++;
    8d5e:	1f 5f       	subi	r17, 0xFF	; 255
    8d60:	33 cf       	rjmp	.-410    	; 0x8bc8 <draw_menu(bool)+0x114c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1938
        char z = str1[0];
        button_click_3(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), pgm_read_byte(&dyn_symbol_1->font_size), z);
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    8d62:	cc 53       	subi	r28, 0x3C	; 60
    8d64:	df 4f       	sbci	r29, 0xFF	; 255
    8d66:	28 81       	ld	r18, Y
    8d68:	39 81       	ldd	r19, Y+1	; 0x01
    8d6a:	c4 5c       	subi	r28, 0xC4	; 196
    8d6c:	d0 40       	sbci	r29, 0x00	; 0
    8d6e:	23 2b       	or	r18, r19
    8d70:	09 f4       	brne	.+2      	; 0x8d74 <draw_menu(bool)+0x12f8>
    8d72:	69 c1       	rjmp	.+722    	; 0x9046 <draw_menu(bool)+0x15ca>
    8d74:	ca 53       	subi	r28, 0x3A	; 58
    8d76:	df 4f       	sbci	r29, 0xFF	; 255
    8d78:	48 81       	ld	r20, Y
    8d7a:	59 81       	ldd	r21, Y+1	; 0x01
    8d7c:	c6 5c       	subi	r28, 0xC6	; 198
    8d7e:	d0 40       	sbci	r29, 0x00	; 0
    8d80:	45 2b       	or	r20, r21
    8d82:	09 f4       	brne	.+2      	; 0x8d86 <draw_menu(bool)+0x130a>
    8d84:	60 c1       	rjmp	.+704    	; 0x9046 <draw_menu(bool)+0x15ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1940
    {
      loop_i = 0;
    8d86:	ce 54       	subi	r28, 0x4E	; 78
    8d88:	df 4f       	sbci	r29, 0xFF	; 255
    8d8a:	18 82       	st	Y, r1
    8d8c:	c2 5b       	subi	r28, 0xB2	; 178
    8d8e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1943
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
    8d90:	f6 01       	movw	r30, r12
    8d92:	ea 50       	subi	r30, 0x0A	; 10
    8d94:	fe 4f       	sbci	r31, 0xFE	; 254
    8d96:	e6 0d       	add	r30, r6
    8d98:	f7 1d       	adc	r31, r7
    8d9a:	25 91       	lpm	r18, Z+
    8d9c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1944
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    8d9e:	c6 01       	movw	r24, r12
    8da0:	8f 50       	subi	r24, 0x0F	; 15
    8da2:	9e 4f       	sbci	r25, 0xFE	; 254
    8da4:	b3 01       	movw	r22, r6
    8da6:	68 0f       	add	r22, r24
    8da8:	79 1f       	adc	r23, r25
    8daa:	ce 53       	subi	r28, 0x3E	; 62
    8dac:	df 4f       	sbci	r29, 0xFF	; 255
    8dae:	79 83       	std	Y+1, r23	; 0x01
    8db0:	68 83       	st	Y, r22
    8db2:	c2 5c       	subi	r28, 0xC2	; 194
    8db4:	d0 40       	sbci	r29, 0x00	; 0
    8db6:	fb 01       	movw	r30, r22
    8db8:	84 91       	lpm	r24, Z
    8dba:	cd 54       	subi	r28, 0x4D	; 77
    8dbc:	df 4f       	sbci	r29, 0xFF	; 255
    8dbe:	68 81       	ld	r22, Y
    8dc0:	c3 5b       	subi	r28, 0xB3	; 179
    8dc2:	d0 40       	sbci	r29, 0x00	; 0
    8dc4:	70 e0       	ldi	r23, 0x00	; 0
    8dc6:	40 e0       	ldi	r20, 0x00	; 0
    8dc8:	90 e0       	ldi	r25, 0x00	; 0
    8dca:	f9 01       	movw	r30, r18
    8dcc:	19 95       	eicall
    8dce:	c4 54       	subi	r28, 0x44	; 68
    8dd0:	df 4f       	sbci	r29, 0xFF	; 255
    8dd2:	88 83       	st	Y, r24
    8dd4:	cc 5b       	subi	r28, 0xBC	; 188
    8dd6:	d0 40       	sbci	r29, 0x00	; 0
    8dd8:	cf 54       	subi	r28, 0x4F	; 79
    8dda:	df 4f       	sbci	r29, 0xFF	; 255
    8ddc:	88 83       	st	Y, r24
    8dde:	c1 5b       	subi	r28, 0xB1	; 177
    8de0:	d0 40       	sbci	r29, 0x00	; 0
    8de2:	ce 54       	subi	r28, 0x4E	; 78
    8de4:	df 4f       	sbci	r29, 0xFF	; 255
    8de6:	a8 80       	ld	r10, Y
    8de8:	c2 5b       	subi	r28, 0xB2	; 178
    8dea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8dec:	16 01       	movw	r2, r12
    8dee:	fe e1       	ldi	r31, 0x1E	; 30
    8df0:	2f 1a       	sub	r2, r31
    8df2:	fe ef       	ldi	r31, 0xFE	; 254
    8df4:	3f 0a       	sbc	r3, r31
    8df6:	26 0c       	add	r2, r6
    8df8:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8dfa:	46 01       	movw	r8, r12
    8dfc:	2c e1       	ldi	r18, 0x1C	; 28
    8dfe:	82 1a       	sub	r8, r18
    8e00:	2e ef       	ldi	r18, 0xFE	; 254
    8e02:	92 0a       	sbc	r9, r18
    8e04:	86 0c       	add	r8, r6
    8e06:	97 1c       	adc	r9, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1949
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8e08:	c6 01       	movw	r24, r12
    8e0a:	83 51       	subi	r24, 0x13	; 19
    8e0c:	9e 4f       	sbci	r25, 0xFE	; 254
    8e0e:	a3 01       	movw	r20, r6
    8e10:	48 0f       	add	r20, r24
    8e12:	59 1f       	adc	r21, r25
    8e14:	ca 54       	subi	r28, 0x4A	; 74
    8e16:	df 4f       	sbci	r29, 0xFF	; 255
    8e18:	59 83       	std	Y+1, r21	; 0x01
    8e1a:	48 83       	st	Y, r20
    8e1c:	c6 5b       	subi	r28, 0xB6	; 182
    8e1e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    8e20:	01 97       	sbiw	r24, 0x01	; 1
    8e22:	b3 01       	movw	r22, r6
    8e24:	68 0f       	add	r22, r24
    8e26:	79 1f       	adc	r23, r25
    8e28:	c8 53       	subi	r28, 0x38	; 56
    8e2a:	df 4f       	sbci	r29, 0xFF	; 255
    8e2c:	79 83       	std	Y+1, r23	; 0x01
    8e2e:	68 83       	st	Y, r22
    8e30:	c8 5c       	subi	r28, 0xC8	; 200
    8e32:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8e34:	01 97       	sbiw	r24, 0x01	; 1
    8e36:	f3 01       	movw	r30, r6
    8e38:	e8 0f       	add	r30, r24
    8e3a:	f9 1f       	adc	r31, r25
    8e3c:	c6 53       	subi	r28, 0x36	; 54
    8e3e:	df 4f       	sbci	r29, 0xFF	; 255
    8e40:	f9 83       	std	Y+1, r31	; 0x01
    8e42:	e8 83       	st	Y, r30
    8e44:	ca 5c       	subi	r28, 0xCA	; 202
    8e46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1964
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8e48:	03 96       	adiw	r24, 0x03	; 3
    8e4a:	93 01       	movw	r18, r6
    8e4c:	28 0f       	add	r18, r24
    8e4e:	39 1f       	adc	r19, r25
    8e50:	c3 53       	subi	r28, 0x33	; 51
    8e52:	df 4f       	sbci	r29, 0xFF	; 255
    8e54:	39 83       	std	Y+1, r19	; 0x01
    8e56:	28 83       	st	Y, r18
    8e58:	cd 5c       	subi	r28, 0xCD	; 205
    8e5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8e5c:	06 97       	sbiw	r24, 0x06	; 6
    8e5e:	a3 01       	movw	r20, r6
    8e60:	48 0f       	add	r20, r24
    8e62:	59 1f       	adc	r21, r25
    8e64:	c1 53       	subi	r28, 0x31	; 49
    8e66:	df 4f       	sbci	r29, 0xFF	; 255
    8e68:	59 83       	std	Y+1, r21	; 0x01
    8e6a:	48 83       	st	Y, r20
    8e6c:	cf 5c       	subi	r28, 0xCF	; 207
    8e6e:	d0 40       	sbci	r29, 0x00	; 0
    8e70:	02 97       	sbiw	r24, 0x02	; 2
    8e72:	b3 01       	movw	r22, r6
    8e74:	68 0f       	add	r22, r24
    8e76:	79 1f       	adc	r23, r25
    8e78:	ce 52       	subi	r28, 0x2E	; 46
    8e7a:	df 4f       	sbci	r29, 0xFF	; 255
    8e7c:	79 83       	std	Y+1, r23	; 0x01
    8e7e:	68 83       	st	Y, r22
    8e80:	c2 5d       	subi	r28, 0xD2	; 210
    8e82:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1942
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
      loop_r = 0;
    8e84:	41 2c       	mov	r4, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1941
      }
    }
    if (click_x > 0 && click_y > 0)
    {
      loop_i = 0;
      loop_t = 0;
    8e86:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1945
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
    8e88:	c4 54       	subi	r28, 0x44	; 68
    8e8a:	df 4f       	sbci	r29, 0xFF	; 255
    8e8c:	78 81       	ld	r23, Y
    8e8e:	cc 5b       	subi	r28, 0xBC	; 188
    8e90:	d0 40       	sbci	r29, 0x00	; 0
    8e92:	a7 16       	cp	r10, r23
    8e94:	08 f0       	brcs	.+2      	; 0x8e98 <draw_menu(bool)+0x141c>
    8e96:	d7 c0       	rjmp	.+430    	; 0x9046 <draw_menu(bool)+0x15ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8e98:	f1 01       	movw	r30, r2
    8e9a:	25 91       	lpm	r18, Z+
    8e9c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8e9e:	f4 01       	movw	r30, r8
    8ea0:	85 91       	lpm	r24, Z+
    8ea2:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1949
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
    8ea4:	ca 54       	subi	r28, 0x4A	; 74
    8ea6:	df 4f       	sbci	r29, 0xFF	; 255
    8ea8:	e8 81       	ld	r30, Y
    8eaa:	f9 81       	ldd	r31, Y+1	; 0x01
    8eac:	c6 5b       	subi	r28, 0xB6	; 182
    8eae:	d0 40       	sbci	r29, 0x00	; 0
    8eb0:	44 91       	lpm	r20, Z
    8eb2:	44 23       	and	r20, r20
    8eb4:	09 f4       	brne	.+2      	; 0x8eb8 <draw_menu(bool)+0x143c>
    8eb6:	cb c0       	rjmp	.+406    	; 0x904e <draw_menu(bool)+0x15d2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1948
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
    8eb8:	c6 54       	subi	r28, 0x46	; 70
    8eba:	df 4f       	sbci	r29, 0xFF	; 255
    8ebc:	48 81       	ld	r20, Y
    8ebe:	59 81       	ldd	r21, Y+1	; 0x01
    8ec0:	ca 5b       	subi	r28, 0xBA	; 186
    8ec2:	d0 40       	sbci	r29, 0x00	; 0
    8ec4:	48 0f       	add	r20, r24
    8ec6:	59 1f       	adc	r21, r25
    8ec8:	c0 54       	subi	r28, 0x40	; 64
    8eca:	df 4f       	sbci	r29, 0xFF	; 255
    8ecc:	59 83       	std	Y+1, r21	; 0x01
    8ece:	48 83       	st	Y, r20
    8ed0:	c0 5c       	subi	r28, 0xC0	; 192
    8ed2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1954
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
    8ed4:	ca 54       	subi	r28, 0x4A	; 74
    8ed6:	df 4f       	sbci	r29, 0xFF	; 255
    8ed8:	e8 81       	ld	r30, Y
    8eda:	f9 81       	ldd	r31, Y+1	; 0x01
    8edc:	c6 5b       	subi	r28, 0xB6	; 182
    8ede:	d0 40       	sbci	r29, 0x00	; 0
    8ee0:	84 91       	lpm	r24, Z
    8ee2:	81 30       	cpi	r24, 0x01	; 1
    8ee4:	09 f4       	brne	.+2      	; 0x8ee8 <draw_menu(bool)+0x146c>
    8ee6:	d2 c0       	rjmp	.+420    	; 0x908c <draw_menu(bool)+0x1610>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1947
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_symbol_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
    8ee8:	c8 54       	subi	r28, 0x48	; 72
    8eea:	df 4f       	sbci	r29, 0xFF	; 255
    8eec:	48 81       	ld	r20, Y
    8eee:	59 81       	ldd	r21, Y+1	; 0x01
    8ef0:	c8 5b       	subi	r28, 0xB8	; 184
    8ef2:	d0 40       	sbci	r29, 0x00	; 0
    8ef4:	42 0f       	add	r20, r18
    8ef6:	53 1f       	adc	r21, r19
    8ef8:	c2 54       	subi	r28, 0x42	; 66
    8efa:	df 4f       	sbci	r29, 0xFF	; 255
    8efc:	59 83       	std	Y+1, r21	; 0x01
    8efe:	48 83       	st	Y, r20
    8f00:	ce 5b       	subi	r28, 0xBE	; 190
    8f02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1959
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          loop_t++;
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL_NEW_LINE)
    8f04:	ca 54       	subi	r28, 0x4A	; 74
    8f06:	df 4f       	sbci	r29, 0xFF	; 255
    8f08:	e8 81       	ld	r30, Y
    8f0a:	f9 81       	ldd	r31, Y+1	; 0x01
    8f0c:	c6 5b       	subi	r28, 0xB6	; 182
    8f0e:	d0 40       	sbci	r29, 0x00	; 0
    8f10:	84 91       	lpm	r24, Z
    8f12:	82 30       	cpi	r24, 0x02	; 2
    8f14:	09 f0       	breq	.+2      	; 0x8f18 <draw_menu(bool)+0x149c>
    8f16:	46 c0       	rjmp	.+140    	; 0x8fa4 <draw_menu(bool)+0x1528>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1961
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    8f18:	f1 01       	movw	r30, r2
    8f1a:	85 91       	lpm	r24, Z+
    8f1c:	94 91       	lpm	r25, Z
    8f1e:	c6 53       	subi	r28, 0x36	; 54
    8f20:	df 4f       	sbci	r29, 0xFF	; 255
    8f22:	e8 81       	ld	r30, Y
    8f24:	f9 81       	ldd	r31, Y+1	; 0x01
    8f26:	ca 5c       	subi	r28, 0xCA	; 202
    8f28:	d0 40       	sbci	r29, 0x00	; 0
    8f2a:	24 91       	lpm	r18, Z
    8f2c:	c8 54       	subi	r28, 0x48	; 72
    8f2e:	df 4f       	sbci	r29, 0xFF	; 255
    8f30:	48 81       	ld	r20, Y
    8f32:	59 81       	ldd	r21, Y+1	; 0x01
    8f34:	c8 5b       	subi	r28, 0xB8	; 184
    8f36:	d0 40       	sbci	r29, 0x00	; 0
    8f38:	84 0f       	add	r24, r20
    8f3a:	95 1f       	adc	r25, r21
    8f3c:	bc 01       	movw	r22, r24
    8f3e:	2b 9d       	mul	r18, r11
    8f40:	60 0d       	add	r22, r0
    8f42:	71 1d       	adc	r23, r1
    8f44:	11 24       	eor	r1, r1
    8f46:	c2 54       	subi	r28, 0x42	; 66
    8f48:	df 4f       	sbci	r29, 0xFF	; 255
    8f4a:	79 83       	std	Y+1, r23	; 0x01
    8f4c:	68 83       	st	Y, r22
    8f4e:	ce 5b       	subi	r28, 0xBE	; 190
    8f50:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1962
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
    8f52:	f4 01       	movw	r30, r8
    8f54:	85 91       	lpm	r24, Z+
    8f56:	94 91       	lpm	r25, Z
    8f58:	c8 53       	subi	r28, 0x38	; 56
    8f5a:	df 4f       	sbci	r29, 0xFF	; 255
    8f5c:	e8 81       	ld	r30, Y
    8f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    8f60:	c8 5c       	subi	r28, 0xC8	; 200
    8f62:	d0 40       	sbci	r29, 0x00	; 0
    8f64:	24 91       	lpm	r18, Z
    8f66:	c6 54       	subi	r28, 0x46	; 70
    8f68:	df 4f       	sbci	r29, 0xFF	; 255
    8f6a:	48 81       	ld	r20, Y
    8f6c:	59 81       	ldd	r21, Y+1	; 0x01
    8f6e:	ca 5b       	subi	r28, 0xBA	; 186
    8f70:	d0 40       	sbci	r29, 0x00	; 0
    8f72:	84 0f       	add	r24, r20
    8f74:	95 1f       	adc	r25, r21
    8f76:	bc 01       	movw	r22, r24
    8f78:	24 9d       	mul	r18, r4
    8f7a:	60 0d       	add	r22, r0
    8f7c:	71 1d       	adc	r23, r1
    8f7e:	11 24       	eor	r1, r1
    8f80:	c0 54       	subi	r28, 0x40	; 64
    8f82:	df 4f       	sbci	r29, 0xFF	; 255
    8f84:	79 83       	std	Y+1, r23	; 0x01
    8f86:	68 83       	st	Y, r22
    8f88:	c0 5c       	subi	r28, 0xC0	; 192
    8f8a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1963
          loop_t++;
    8f8c:	b3 94       	inc	r11
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1964
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
    8f8e:	c3 53       	subi	r28, 0x33	; 51
    8f90:	df 4f       	sbci	r29, 0xFF	; 255
    8f92:	e8 81       	ld	r30, Y
    8f94:	f9 81       	ldd	r31, Y+1	; 0x01
    8f96:	cd 5c       	subi	r28, 0xCD	; 205
    8f98:	d0 40       	sbci	r29, 0x00	; 0
    8f9a:	84 91       	lpm	r24, Z
    8f9c:	b8 16       	cp	r11, r24
    8f9e:	10 f0       	brcs	.+4      	; 0x8fa4 <draw_menu(bool)+0x1528>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1967
          {
            loop_t = 0;
            loop_r++;
    8fa0:	43 94       	inc	r4
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1966
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_symbol_1->max_items_count) - 1))
          {
            loop_t = 0;
    8fa2:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    8fa4:	c1 53       	subi	r28, 0x31	; 49
    8fa6:	df 4f       	sbci	r29, 0xFF	; 255
    8fa8:	e8 81       	ld	r30, Y
    8faa:	f9 81       	ldd	r31, Y+1	; 0x01
    8fac:	cf 5c       	subi	r28, 0xCF	; 207
    8fae:	d0 40       	sbci	r29, 0x00	; 0
    8fb0:	25 91       	lpm	r18, Z+
    8fb2:	34 91       	lpm	r19, Z
    8fb4:	ce 52       	subi	r28, 0x2E	; 46
    8fb6:	df 4f       	sbci	r29, 0xFF	; 255
    8fb8:	e8 81       	ld	r30, Y
    8fba:	f9 81       	ldd	r31, Y+1	; 0x01
    8fbc:	c2 5d       	subi	r28, 0xD2	; 210
    8fbe:	d0 40       	sbci	r29, 0x00	; 0
    8fc0:	45 91       	lpm	r20, Z+
    8fc2:	54 91       	lpm	r21, Z
    8fc4:	ca 53       	subi	r28, 0x3A	; 58
    8fc6:	df 4f       	sbci	r29, 0xFF	; 255
    8fc8:	e8 80       	ld	r14, Y
    8fca:	f9 80       	ldd	r15, Y+1	; 0x01
    8fcc:	c6 5c       	subi	r28, 0xC6	; 198
    8fce:	d0 40       	sbci	r29, 0x00	; 0
    8fd0:	cc 53       	subi	r28, 0x3C	; 60
    8fd2:	df 4f       	sbci	r29, 0xFF	; 255
    8fd4:	08 81       	ld	r16, Y
    8fd6:	19 81       	ldd	r17, Y+1	; 0x01
    8fd8:	c4 5c       	subi	r28, 0xC4	; 196
    8fda:	d0 40       	sbci	r29, 0x00	; 0
    8fdc:	c0 54       	subi	r28, 0x40	; 64
    8fde:	df 4f       	sbci	r29, 0xFF	; 255
    8fe0:	68 81       	ld	r22, Y
    8fe2:	79 81       	ldd	r23, Y+1	; 0x01
    8fe4:	c0 5c       	subi	r28, 0xC0	; 192
    8fe6:	d0 40       	sbci	r29, 0x00	; 0
    8fe8:	c2 54       	subi	r28, 0x42	; 66
    8fea:	df 4f       	sbci	r29, 0xFF	; 255
    8fec:	88 81       	ld	r24, Y
    8fee:	99 81       	ldd	r25, Y+1	; 0x01
    8ff0:	ce 5b       	subi	r28, 0xBE	; 190
    8ff2:	d0 40       	sbci	r29, 0x00	; 0
    8ff4:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    8ff8:	18 2f       	mov	r17, r24
    8ffa:	81 e0       	ldi	r24, 0x01	; 1
    8ffc:	8a 0d       	add	r24, r10
    8ffe:	11 23       	and	r17, r17
    9000:	21 f1       	breq	.+72     	; 0x904a <draw_menu(bool)+0x15ce>
    9002:	ce 54       	subi	r28, 0x4E	; 78
    9004:	df 4f       	sbci	r29, 0xFF	; 255
    9006:	a8 82       	st	Y, r10
    9008:	c2 5b       	subi	r28, 0xB2	; 178
    900a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1972
        {
          fntargs =  pgm_read_word(&dyn_symbol_1->dyn_symbol_onclick);
    900c:	f6 01       	movw	r30, r12
    900e:	ec 50       	subi	r30, 0x0C	; 12
    9010:	fe 4f       	sbci	r31, 0xFE	; 254
    9012:	e6 0d       	add	r30, r6
    9014:	f7 1d       	adc	r31, r7
    9016:	25 91       	lpm	r18, Z+
    9018:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1973
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_symbol_1->args), menu_args1, loop_i);
    901a:	ce 53       	subi	r28, 0x3E	; 62
    901c:	df 4f       	sbci	r29, 0xFF	; 255
    901e:	e8 81       	ld	r30, Y
    9020:	f9 81       	ldd	r31, Y+1	; 0x01
    9022:	c2 5c       	subi	r28, 0xC2	; 194
    9024:	d0 40       	sbci	r29, 0x00	; 0
    9026:	84 91       	lpm	r24, Z
    9028:	cd 54       	subi	r28, 0x4D	; 77
    902a:	df 4f       	sbci	r29, 0xFF	; 255
    902c:	68 81       	ld	r22, Y
    902e:	c3 5b       	subi	r28, 0xB3	; 179
    9030:	d0 40       	sbci	r29, 0x00	; 0
    9032:	70 e0       	ldi	r23, 0x00	; 0
    9034:	4a 2d       	mov	r20, r10
    9036:	90 e0       	ldi	r25, 0x00	; 0
    9038:	f9 01       	movw	r30, r18
    903a:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1974
          ret = true;
    903c:	c4 53       	subi	r28, 0x34	; 52
    903e:	df 4f       	sbci	r29, 0xFF	; 255
    9040:	18 83       	st	Y, r17
    9042:	cc 5c       	subi	r28, 0xCC	; 204
    9044:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1895
        ret = true;
      }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_symbol_1); idx++)
    9046:	53 94       	inc	r5
    9048:	e5 cc       	rjmp	.-1590   	; 0x8a14 <draw_menu(bool)+0xf98>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1970
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_symbol_1->size_x), pgm_read_word(&dyn_symbol_1->size_y), click_x, click_y) == true)
    904a:	a8 2e       	mov	r10, r24
    904c:	1d cf       	rjmp	.-454    	; 0x8e88 <draw_menu(bool)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1951
      {
        new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y);
        if (pgm_read_byte(&dyn_symbol_1->direction) == VERTICAL)
        {
          new_y = global_y + pgm_read_word(&dyn_symbol_1->first_y) + (pgm_read_byte(&dyn_symbol_1->step_y) * loop_t);
    904e:	f4 01       	movw	r30, r8
    9050:	85 91       	lpm	r24, Z+
    9052:	94 91       	lpm	r25, Z
    9054:	c8 53       	subi	r28, 0x38	; 56
    9056:	df 4f       	sbci	r29, 0xFF	; 255
    9058:	e8 81       	ld	r30, Y
    905a:	f9 81       	ldd	r31, Y+1	; 0x01
    905c:	c8 5c       	subi	r28, 0xC8	; 200
    905e:	d0 40       	sbci	r29, 0x00	; 0
    9060:	44 91       	lpm	r20, Z
    9062:	c6 54       	subi	r28, 0x46	; 70
    9064:	df 4f       	sbci	r29, 0xFF	; 255
    9066:	68 81       	ld	r22, Y
    9068:	79 81       	ldd	r23, Y+1	; 0x01
    906a:	ca 5b       	subi	r28, 0xBA	; 186
    906c:	d0 40       	sbci	r29, 0x00	; 0
    906e:	86 0f       	add	r24, r22
    9070:	97 1f       	adc	r25, r23
    9072:	fc 01       	movw	r30, r24
    9074:	4b 9d       	mul	r20, r11
    9076:	e0 0d       	add	r30, r0
    9078:	f1 1d       	adc	r31, r1
    907a:	11 24       	eor	r1, r1
    907c:	c0 54       	subi	r28, 0x40	; 64
    907e:	df 4f       	sbci	r29, 0xFF	; 255
    9080:	f9 83       	std	Y+1, r31	; 0x01
    9082:	e8 83       	st	Y, r30
    9084:	c0 5c       	subi	r28, 0xC0	; 192
    9086:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1952
          loop_t++;
    9088:	b3 94       	inc	r11
    908a:	24 cf       	rjmp	.-440    	; 0x8ed4 <draw_menu(bool)+0x1458>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1956
        }
        if (pgm_read_byte(&dyn_symbol_1->direction) == HORIZONTAL)
        {
          new_x = global_x + pgm_read_word(&dyn_symbol_1->first_x) + (pgm_read_byte(&dyn_symbol_1->step_x) * loop_t);
    908c:	f1 01       	movw	r30, r2
    908e:	85 91       	lpm	r24, Z+
    9090:	94 91       	lpm	r25, Z
    9092:	c6 53       	subi	r28, 0x36	; 54
    9094:	df 4f       	sbci	r29, 0xFF	; 255
    9096:	e8 81       	ld	r30, Y
    9098:	f9 81       	ldd	r31, Y+1	; 0x01
    909a:	ca 5c       	subi	r28, 0xCA	; 202
    909c:	d0 40       	sbci	r29, 0x00	; 0
    909e:	24 91       	lpm	r18, Z
    90a0:	c8 54       	subi	r28, 0x48	; 72
    90a2:	df 4f       	sbci	r29, 0xFF	; 255
    90a4:	48 81       	ld	r20, Y
    90a6:	59 81       	ldd	r21, Y+1	; 0x01
    90a8:	c8 5b       	subi	r28, 0xB8	; 184
    90aa:	d0 40       	sbci	r29, 0x00	; 0
    90ac:	84 0f       	add	r24, r20
    90ae:	95 1f       	adc	r25, r21
    90b0:	bc 01       	movw	r22, r24
    90b2:	2b 9d       	mul	r18, r11
    90b4:	60 0d       	add	r22, r0
    90b6:	71 1d       	adc	r23, r1
    90b8:	11 24       	eor	r1, r1
    90ba:	c2 54       	subi	r28, 0x42	; 66
    90bc:	df 4f       	sbci	r29, 0xFF	; 255
    90be:	79 83       	std	Y+1, r23	; 0x01
    90c0:	68 83       	st	Y, r22
    90c2:	ce 5b       	subi	r28, 0xBE	; 190
    90c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1957
          loop_t++;
    90c6:	b3 94       	inc	r11
    90c8:	1d cf       	rjmp	.-454    	; 0x8f04 <draw_menu(bool)+0x1488>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1981
        }
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    90ca:	c4 53       	subi	r28, 0x34	; 52
    90cc:	df 4f       	sbci	r29, 0xFF	; 255
    90ce:	f8 81       	ld	r31, Y
    90d0:	cc 5c       	subi	r28, 0xCC	; 204
    90d2:	d0 40       	sbci	r29, 0x00	; 0
    90d4:	f1 11       	cpse	r31, r1
    90d6:	0c 94 de 4f 	jmp	0x9fbc	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    90da:	91 2c       	mov	r9, r1
    90dc:	93 01       	movw	r18, r6
    90de:	27 5b       	subi	r18, 0xB7	; 183
    90e0:	3d 4f       	sbci	r19, 0xFD	; 253
    90e2:	ce 52       	subi	r28, 0x2E	; 46
    90e4:	df 4f       	sbci	r29, 0xFF	; 255
    90e6:	39 83       	std	Y+1, r19	; 0x01
    90e8:	28 83       	st	Y, r18
    90ea:	c2 5d       	subi	r28, 0xD2	; 210
    90ec:	d0 40       	sbci	r29, 0x00	; 0
    90ee:	ce 52       	subi	r28, 0x2E	; 46
    90f0:	df 4f       	sbci	r29, 0xFF	; 255
    90f2:	e8 81       	ld	r30, Y
    90f4:	f9 81       	ldd	r31, Y+1	; 0x01
    90f6:	c2 5d       	subi	r28, 0xD2	; 210
    90f8:	d0 40       	sbci	r29, 0x00	; 0
    90fa:	84 91       	lpm	r24, Z
    90fc:	98 16       	cp	r9, r24
    90fe:	08 f0       	brcs	.+2      	; 0x9102 <draw_menu(bool)+0x1686>
    9100:	05 c3       	rjmp	.+1546   	; 0x970c <draw_menu(bool)+0x1c90>
    9102:	f7 e1       	ldi	r31, 0x17	; 23
    9104:	9f 9e       	mul	r9, r31
    9106:	20 01       	movw	r4, r0
    9108:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1986
  {
    dyn_button_1 = &current->dyn_button[idx];
    rdr = pgm_read_byte(&dyn_button_1->redraw_class);
    910a:	f2 01       	movw	r30, r4
    910c:	e6 55       	subi	r30, 0x56	; 86
    910e:	fe 4f       	sbci	r31, 0xFE	; 254
    9110:	e6 0d       	add	r30, r6
    9112:	f7 1d       	adc	r31, r7
    9114:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1987
    if (enable_redraw(rdr, redraw_class) == true)
    9116:	cf 52       	subi	r28, 0x2F	; 47
    9118:	df 4f       	sbci	r29, 0xFF	; 255
    911a:	68 81       	ld	r22, Y
    911c:	c1 5d       	subi	r28, 0xD1	; 209
    911e:	d0 40       	sbci	r29, 0x00	; 0
    9120:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    9124:	88 23       	and	r24, r24
    9126:	09 f4       	brne	.+2      	; 0x912a <draw_menu(bool)+0x16ae>
    9128:	74 c1       	rjmp	.+744    	; 0x9412 <draw_menu(bool)+0x1996>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1989
    {
      loop_i = 0;
    912a:	ce 54       	subi	r28, 0x4E	; 78
    912c:	df 4f       	sbci	r29, 0xFF	; 255
    912e:	18 82       	st	Y, r1
    9130:	c2 5b       	subi	r28, 0xB2	; 178
    9132:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1991
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    9134:	f2 01       	movw	r30, r4
    9136:	e8 55       	subi	r30, 0x58	; 88
    9138:	fe 4f       	sbci	r31, 0xFE	; 254
    913a:	e6 0d       	add	r30, r6
    913c:	f7 1d       	adc	r31, r7
    913e:	25 91       	lpm	r18, Z+
    9140:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1992
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    9142:	f2 01       	movw	r30, r4
    9144:	ed 55       	subi	r30, 0x5D	; 93
    9146:	fe 4f       	sbci	r31, 0xFE	; 254
    9148:	e6 0d       	add	r30, r6
    914a:	f7 1d       	adc	r31, r7
    914c:	84 91       	lpm	r24, Z
    914e:	cd 54       	subi	r28, 0x4D	; 77
    9150:	df 4f       	sbci	r29, 0xFF	; 255
    9152:	68 81       	ld	r22, Y
    9154:	c3 5b       	subi	r28, 0xB3	; 179
    9156:	d0 40       	sbci	r29, 0x00	; 0
    9158:	70 e0       	ldi	r23, 0x00	; 0
    915a:	40 e0       	ldi	r20, 0x00	; 0
    915c:	90 e0       	ldi	r25, 0x00	; 0
    915e:	f9 01       	movw	r30, r18
    9160:	19 95       	eicall
    9162:	cf 54       	subi	r28, 0x4F	; 79
    9164:	df 4f       	sbci	r29, 0xFF	; 255
    9166:	88 83       	st	Y, r24
    9168:	c1 5b       	subi	r28, 0xB1	; 177
    916a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1993
      gss = pgm_read_word(&dyn_button_1->get_status_string);
    916c:	f2 01       	movw	r30, r4
    916e:	ec 55       	subi	r30, 0x5C	; 92
    9170:	fe 4f       	sbci	r31, 0xFE	; 254
    9172:	e6 0d       	add	r30, r6
    9174:	f7 1d       	adc	r31, r7
    9176:	25 91       	lpm	r18, Z+
    9178:	34 91       	lpm	r19, Z
    917a:	cc 52       	subi	r28, 0x2C	; 44
    917c:	df 4f       	sbci	r29, 0xFF	; 255
    917e:	39 83       	std	Y+1, r19	; 0x01
    9180:	28 83       	st	Y, r18
    9182:	c4 5d       	subi	r28, 0xD4	; 212
    9184:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1995

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9186:	f2 01       	movw	r30, r4
    9188:	ee 55       	subi	r30, 0x5E	; 94
    918a:	fe 4f       	sbci	r31, 0xFE	; 254
    918c:	e6 0d       	add	r30, r6
    918e:	f7 1d       	adc	r31, r7
    9190:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1996
      if (slider_active != MENU_SLIDER_OFF)
    9192:	4f 3f       	cpi	r20, 0xFF	; 255
    9194:	b9 f0       	breq	.+46     	; 0x91c4 <draw_menu(bool)+0x1748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1997
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9196:	f2 01       	movw	r30, r4
    9198:	e0 56       	subi	r30, 0x60	; 96
    919a:	fe 4f       	sbci	r31, 0xFE	; 254
    919c:	e6 0d       	add	r30, r6
    919e:	f7 1d       	adc	r31, r7
    91a0:	24 91       	lpm	r18, Z
    91a2:	f2 01       	movw	r30, r4
    91a4:	ef 55       	subi	r30, 0x5F	; 95
    91a6:	fe 4f       	sbci	r31, 0xFE	; 254
    91a8:	e6 0d       	add	r30, r6
    91aa:	f7 1d       	adc	r31, r7
    91ac:	e4 91       	lpm	r30, Z
    91ae:	2e 9f       	mul	r18, r30
    91b0:	20 2d       	mov	r18, r0
    91b2:	11 24       	eor	r1, r1
    91b4:	be 01       	movw	r22, r28
    91b6:	6f 54       	subi	r22, 0x4F	; 79
    91b8:	7f 4f       	sbci	r23, 0xFF	; 255
    91ba:	ce 01       	movw	r24, r28
    91bc:	8e 54       	subi	r24, 0x4E	; 78
    91be:	9f 4f       	sbci	r25, 0xFF	; 255
    91c0:	0e 94 ef 24 	call	0x49de	; 0x49de <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    91c4:	c2 01       	movw	r24, r4
    91c6:	8c 56       	subi	r24, 0x6C	; 108
    91c8:	9e 4f       	sbci	r25, 0xFE	; 254
    91ca:	a3 01       	movw	r20, r6
    91cc:	48 0f       	add	r20, r24
    91ce:	59 1f       	adc	r21, r25
    91d0:	ca 54       	subi	r28, 0x4A	; 74
    91d2:	df 4f       	sbci	r29, 0xFF	; 255
    91d4:	59 83       	std	Y+1, r21	; 0x01
    91d6:	48 83       	st	Y, r20
    91d8:	c6 5b       	subi	r28, 0xB6	; 182
    91da:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    91dc:	12 01       	movw	r2, r4
    91de:	5a e6       	ldi	r21, 0x6A	; 106
    91e0:	25 1a       	sub	r2, r21
    91e2:	5e ef       	ldi	r21, 0xFE	; 254
    91e4:	35 0a       	sbc	r3, r21
    91e6:	26 0c       	add	r2, r6
    91e8:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    91ea:	0b 96       	adiw	r24, 0x0b	; 11
    91ec:	b3 01       	movw	r22, r6
    91ee:	68 0f       	add	r22, r24
    91f0:	79 1f       	adc	r23, r25
    91f2:	c4 54       	subi	r28, 0x44	; 68
    91f4:	df 4f       	sbci	r29, 0xFF	; 255
    91f6:	79 83       	std	Y+1, r23	; 0x01
    91f8:	68 83       	st	Y, r22
    91fa:	cc 5b       	subi	r28, 0xBC	; 188
    91fc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    91fe:	01 97       	sbiw	r24, 0x01	; 1
    9200:	f3 01       	movw	r30, r6
    9202:	e8 0f       	add	r30, r24
    9204:	f9 1f       	adc	r31, r25
    9206:	c8 53       	subi	r28, 0x38	; 56
    9208:	df 4f       	sbci	r29, 0xFF	; 255
    920a:	f9 83       	std	Y+1, r31	; 0x01
    920c:	e8 83       	st	Y, r30
    920e:	c8 5c       	subi	r28, 0xC8	; 200
    9210:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9212:	01 97       	sbiw	r24, 0x01	; 1
    9214:	93 01       	movw	r18, r6
    9216:	28 0f       	add	r18, r24
    9218:	39 1f       	adc	r19, r25
    921a:	c6 53       	subi	r28, 0x36	; 54
    921c:	df 4f       	sbci	r29, 0xFF	; 255
    921e:	39 83       	std	Y+1, r19	; 0x01
    9220:	28 83       	st	Y, r18
    9222:	ca 5c       	subi	r28, 0xCA	; 202
    9224:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2007
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9226:	01 97       	sbiw	r24, 0x01	; 1
    9228:	a3 01       	movw	r20, r6
    922a:	48 0f       	add	r20, r24
    922c:	59 1f       	adc	r21, r25
    922e:	ce 53       	subi	r28, 0x3E	; 62
    9230:	df 4f       	sbci	r29, 0xFF	; 255
    9232:	59 83       	std	Y+1, r21	; 0x01
    9234:	48 83       	st	Y, r20
    9236:	c2 5c       	subi	r28, 0xC2	; 194
    9238:	d0 40       	sbci	r29, 0x00	; 0
    923a:	02 97       	sbiw	r24, 0x02	; 2
    923c:	b3 01       	movw	r22, r6
    923e:	68 0f       	add	r22, r24
    9240:	79 1f       	adc	r23, r25
    9242:	c3 53       	subi	r28, 0x33	; 51
    9244:	df 4f       	sbci	r29, 0xFF	; 255
    9246:	79 83       	std	Y+1, r23	; 0x01
    9248:	68 83       	st	Y, r22
    924a:	cd 5c       	subi	r28, 0xCD	; 205
    924c:	d0 40       	sbci	r29, 0x00	; 0
    924e:	02 97       	sbiw	r24, 0x02	; 2
    9250:	f3 01       	movw	r30, r6
    9252:	e8 0f       	add	r30, r24
    9254:	f9 1f       	adc	r31, r25
    9256:	c1 53       	subi	r28, 0x31	; 49
    9258:	df 4f       	sbci	r29, 0xFF	; 255
    925a:	f9 83       	std	Y+1, r31	; 0x01
    925c:	e8 83       	st	Y, r30
    925e:	cf 5c       	subi	r28, 0xCF	; 207
    9260:	d0 40       	sbci	r29, 0x00	; 0
    9262:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1998
      gss = pgm_read_word(&dyn_button_1->get_status_string);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    9264:	ce 54       	subi	r28, 0x4E	; 78
    9266:	df 4f       	sbci	r29, 0xFF	; 255
    9268:	88 81       	ld	r24, Y
    926a:	c2 5b       	subi	r28, 0xB2	; 178
    926c:	d0 40       	sbci	r29, 0x00	; 0
    926e:	cf 54       	subi	r28, 0x4F	; 79
    9270:	df 4f       	sbci	r29, 0xFF	; 255
    9272:	98 81       	ld	r25, Y
    9274:	c1 5b       	subi	r28, 0xB1	; 177
    9276:	d0 40       	sbci	r29, 0x00	; 0
    9278:	89 17       	cp	r24, r25
    927a:	08 f0       	brcs	.+2      	; 0x927e <draw_menu(bool)+0x1802>
    927c:	ca c0       	rjmp	.+404    	; 0x9412 <draw_menu(bool)+0x1996>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    927e:	ca 54       	subi	r28, 0x4A	; 74
    9280:	df 4f       	sbci	r29, 0xFF	; 255
    9282:	e8 81       	ld	r30, Y
    9284:	f9 81       	ldd	r31, Y+1	; 0x01
    9286:	c6 5b       	subi	r28, 0xB6	; 182
    9288:	d0 40       	sbci	r29, 0x00	; 0
    928a:	45 91       	lpm	r20, Z+
    928c:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    928e:	f1 01       	movw	r30, r2
    9290:	25 91       	lpm	r18, Z+
    9292:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2002
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9294:	c4 54       	subi	r28, 0x44	; 68
    9296:	df 4f       	sbci	r29, 0xFF	; 255
    9298:	e8 81       	ld	r30, Y
    929a:	f9 81       	ldd	r31, Y+1	; 0x01
    929c:	cc 5b       	subi	r28, 0xBC	; 188
    929e:	d0 40       	sbci	r29, 0x00	; 0
    92a0:	94 91       	lpm	r25, Z
    92a2:	99 23       	and	r25, r25
    92a4:	09 f4       	brne	.+2      	; 0x92a8 <draw_menu(bool)+0x182c>
    92a6:	74 c0       	rjmp	.+232    	; 0x9390 <draw_menu(bool)+0x1914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2001
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    92a8:	c6 54       	subi	r28, 0x46	; 70
    92aa:	df 4f       	sbci	r29, 0xFF	; 255
    92ac:	68 81       	ld	r22, Y
    92ae:	79 81       	ldd	r23, Y+1	; 0x01
    92b0:	ca 5b       	subi	r28, 0xBA	; 186
    92b2:	d0 40       	sbci	r29, 0x00	; 0
    92b4:	62 0f       	add	r22, r18
    92b6:	73 1f       	adc	r23, r19
    92b8:	c0 54       	subi	r28, 0x40	; 64
    92ba:	df 4f       	sbci	r29, 0xFF	; 255
    92bc:	79 83       	std	Y+1, r23	; 0x01
    92be:	68 83       	st	Y, r22
    92c0:	c0 5c       	subi	r28, 0xC0	; 192
    92c2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2004
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    92c4:	c4 54       	subi	r28, 0x44	; 68
    92c6:	df 4f       	sbci	r29, 0xFF	; 255
    92c8:	e8 81       	ld	r30, Y
    92ca:	f9 81       	ldd	r31, Y+1	; 0x01
    92cc:	cc 5b       	subi	r28, 0xBC	; 188
    92ce:	d0 40       	sbci	r29, 0x00	; 0
    92d0:	94 91       	lpm	r25, Z
    92d2:	91 30       	cpi	r25, 0x01	; 1
    92d4:	09 f4       	brne	.+2      	; 0x92d8 <draw_menu(bool)+0x185c>
    92d6:	7a c0       	rjmp	.+244    	; 0x93cc <draw_menu(bool)+0x1950>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2000
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    92d8:	c8 54       	subi	r28, 0x48	; 72
    92da:	df 4f       	sbci	r29, 0xFF	; 255
    92dc:	28 81       	ld	r18, Y
    92de:	39 81       	ldd	r19, Y+1	; 0x01
    92e0:	c8 5b       	subi	r28, 0xB8	; 184
    92e2:	d0 40       	sbci	r29, 0x00	; 0
    92e4:	24 0f       	add	r18, r20
    92e6:	35 1f       	adc	r19, r21
    92e8:	c2 54       	subi	r28, 0x42	; 66
    92ea:	df 4f       	sbci	r29, 0xFF	; 255
    92ec:	39 83       	std	Y+1, r19	; 0x01
    92ee:	28 83       	st	Y, r18
    92f0:	ce 5b       	subi	r28, 0xBE	; 190
    92f2:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2006
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    92f4:	9e 01       	movw	r18, r28
    92f6:	2f 57       	subi	r18, 0x7F	; 127
    92f8:	3f 4f       	sbci	r19, 0xFF	; 255
    92fa:	ae 01       	movw	r20, r28
    92fc:	4f 5f       	subi	r20, 0xFF	; 255
    92fe:	5f 4f       	sbci	r21, 0xFF	; 255
    9300:	cd 54       	subi	r28, 0x4D	; 77
    9302:	df 4f       	sbci	r29, 0xFF	; 255
    9304:	68 81       	ld	r22, Y
    9306:	c3 5b       	subi	r28, 0xB3	; 179
    9308:	d0 40       	sbci	r29, 0x00	; 0
    930a:	cc 52       	subi	r28, 0x2C	; 44
    930c:	df 4f       	sbci	r29, 0xFF	; 255
    930e:	e8 81       	ld	r30, Y
    9310:	f9 81       	ldd	r31, Y+1	; 0x01
    9312:	c4 5d       	subi	r28, 0xD4	; 212
    9314:	d0 40       	sbci	r29, 0x00	; 0
    9316:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2007
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
    9318:	ce 53       	subi	r28, 0x3E	; 62
    931a:	df 4f       	sbci	r29, 0xFF	; 255
    931c:	e8 81       	ld	r30, Y
    931e:	f9 81       	ldd	r31, Y+1	; 0x01
    9320:	c2 5c       	subi	r28, 0xC2	; 194
    9322:	d0 40       	sbci	r29, 0x00	; 0
    9324:	e4 90       	lpm	r14, Z
    9326:	04 91       	lpm	r16, Z
    9328:	c3 53       	subi	r28, 0x33	; 51
    932a:	df 4f       	sbci	r29, 0xFF	; 255
    932c:	e8 81       	ld	r30, Y
    932e:	f9 81       	ldd	r31, Y+1	; 0x01
    9330:	cd 5c       	subi	r28, 0xCD	; 205
    9332:	d0 40       	sbci	r29, 0x00	; 0
    9334:	25 91       	lpm	r18, Z+
    9336:	34 91       	lpm	r19, Z
    9338:	c1 53       	subi	r28, 0x31	; 49
    933a:	df 4f       	sbci	r29, 0xFF	; 255
    933c:	e8 81       	ld	r30, Y
    933e:	f9 81       	ldd	r31, Y+1	; 0x01
    9340:	cf 5c       	subi	r28, 0xCF	; 207
    9342:	d0 40       	sbci	r29, 0x00	; 0
    9344:	45 91       	lpm	r20, Z+
    9346:	54 91       	lpm	r21, Z
    9348:	88 24       	eor	r8, r8
    934a:	83 94       	inc	r8
    934c:	be 01       	movw	r22, r28
    934e:	6f 57       	subi	r22, 0x7F	; 127
    9350:	7f 4f       	sbci	r23, 0xFF	; 255
    9352:	5b 01       	movw	r10, r22
    9354:	ce 01       	movw	r24, r28
    9356:	01 96       	adiw	r24, 0x01	; 1
    9358:	6c 01       	movw	r12, r24
    935a:	c0 54       	subi	r28, 0x40	; 64
    935c:	df 4f       	sbci	r29, 0xFF	; 255
    935e:	68 81       	ld	r22, Y
    9360:	79 81       	ldd	r23, Y+1	; 0x01
    9362:	c0 5c       	subi	r28, 0xC0	; 192
    9364:	d0 40       	sbci	r29, 0x00	; 0
    9366:	c2 54       	subi	r28, 0x42	; 66
    9368:	df 4f       	sbci	r29, 0xFF	; 255
    936a:	88 81       	ld	r24, Y
    936c:	99 81       	ldd	r25, Y+1	; 0x01
    936e:	ce 5b       	subi	r28, 0xBE	; 190
    9370:	d0 40       	sbci	r29, 0x00	; 0
    9372:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <button_click_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char, char*, char*, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2008
        loop_t++;
    9376:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2009
        loop_i++;
    9378:	ce 54       	subi	r28, 0x4E	; 78
    937a:	df 4f       	sbci	r29, 0xFF	; 255
    937c:	88 81       	ld	r24, Y
    937e:	c2 5b       	subi	r28, 0xB2	; 178
    9380:	d0 40       	sbci	r29, 0x00	; 0
    9382:	8f 5f       	subi	r24, 0xFF	; 255
    9384:	ce 54       	subi	r28, 0x4E	; 78
    9386:	df 4f       	sbci	r29, 0xFF	; 255
    9388:	88 83       	st	Y, r24
    938a:	c2 5b       	subi	r28, 0xB2	; 178
    938c:	d0 40       	sbci	r29, 0x00	; 0
    938e:	6a cf       	rjmp	.-300    	; 0x9264 <draw_menu(bool)+0x17e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2003
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9390:	f1 01       	movw	r30, r2
    9392:	25 91       	lpm	r18, Z+
    9394:	34 91       	lpm	r19, Z
    9396:	c8 53       	subi	r28, 0x38	; 56
    9398:	df 4f       	sbci	r29, 0xFF	; 255
    939a:	e8 81       	ld	r30, Y
    939c:	f9 81       	ldd	r31, Y+1	; 0x01
    939e:	c8 5c       	subi	r28, 0xC8	; 200
    93a0:	d0 40       	sbci	r29, 0x00	; 0
    93a2:	94 91       	lpm	r25, Z
    93a4:	c6 54       	subi	r28, 0x46	; 70
    93a6:	df 4f       	sbci	r29, 0xFF	; 255
    93a8:	68 81       	ld	r22, Y
    93aa:	79 81       	ldd	r23, Y+1	; 0x01
    93ac:	ca 5b       	subi	r28, 0xBA	; 186
    93ae:	d0 40       	sbci	r29, 0x00	; 0
    93b0:	26 0f       	add	r18, r22
    93b2:	37 1f       	adc	r19, r23
    93b4:	f9 01       	movw	r30, r18
    93b6:	91 9f       	mul	r25, r17
    93b8:	e0 0d       	add	r30, r0
    93ba:	f1 1d       	adc	r31, r1
    93bc:	11 24       	eor	r1, r1
    93be:	c0 54       	subi	r28, 0x40	; 64
    93c0:	df 4f       	sbci	r29, 0xFF	; 255
    93c2:	f9 83       	std	Y+1, r31	; 0x01
    93c4:	e8 83       	st	Y, r30
    93c6:	c0 5c       	subi	r28, 0xC0	; 192
    93c8:	d0 40       	sbci	r29, 0x00	; 0
    93ca:	7c cf       	rjmp	.-264    	; 0x92c4 <draw_menu(bool)+0x1848>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2005
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    93cc:	ca 54       	subi	r28, 0x4A	; 74
    93ce:	df 4f       	sbci	r29, 0xFF	; 255
    93d0:	e8 81       	ld	r30, Y
    93d2:	f9 81       	ldd	r31, Y+1	; 0x01
    93d4:	c6 5b       	subi	r28, 0xB6	; 182
    93d6:	d0 40       	sbci	r29, 0x00	; 0
    93d8:	25 91       	lpm	r18, Z+
    93da:	34 91       	lpm	r19, Z
    93dc:	c6 53       	subi	r28, 0x36	; 54
    93de:	df 4f       	sbci	r29, 0xFF	; 255
    93e0:	e8 81       	ld	r30, Y
    93e2:	f9 81       	ldd	r31, Y+1	; 0x01
    93e4:	ca 5c       	subi	r28, 0xCA	; 202
    93e6:	d0 40       	sbci	r29, 0x00	; 0
    93e8:	94 91       	lpm	r25, Z
    93ea:	c8 54       	subi	r28, 0x48	; 72
    93ec:	df 4f       	sbci	r29, 0xFF	; 255
    93ee:	48 81       	ld	r20, Y
    93f0:	59 81       	ldd	r21, Y+1	; 0x01
    93f2:	c8 5b       	subi	r28, 0xB8	; 184
    93f4:	d0 40       	sbci	r29, 0x00	; 0
    93f6:	24 0f       	add	r18, r20
    93f8:	35 1f       	adc	r19, r21
    93fa:	b9 01       	movw	r22, r18
    93fc:	91 9f       	mul	r25, r17
    93fe:	60 0d       	add	r22, r0
    9400:	71 1d       	adc	r23, r1
    9402:	11 24       	eor	r1, r1
    9404:	c2 54       	subi	r28, 0x42	; 66
    9406:	df 4f       	sbci	r29, 0xFF	; 255
    9408:	79 83       	std	Y+1, r23	; 0x01
    940a:	68 83       	st	Y, r22
    940c:	ce 5b       	subi	r28, 0xBE	; 190
    940e:	d0 40       	sbci	r29, 0x00	; 0
    9410:	71 cf       	rjmp	.-286    	; 0x92f4 <draw_menu(bool)+0x1878>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2012
        button_click_1(new_x, new_y , pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), pgm_read_byte(&dyn_button_1->font_size), pgm_read_byte(&dyn_button_1->font_size), str1, str2, 1);
        loop_t++;
        loop_i++;
      }
    }
    if (click_x > 0 && click_y > 0)
    9412:	cc 53       	subi	r28, 0x3C	; 60
    9414:	df 4f       	sbci	r29, 0xFF	; 255
    9416:	e8 81       	ld	r30, Y
    9418:	f9 81       	ldd	r31, Y+1	; 0x01
    941a:	c4 5c       	subi	r28, 0xC4	; 196
    941c:	d0 40       	sbci	r29, 0x00	; 0
    941e:	ef 2b       	or	r30, r31
    9420:	09 f4       	brne	.+2      	; 0x9424 <draw_menu(bool)+0x19a8>
    9422:	51 c1       	rjmp	.+674    	; 0x96c6 <draw_menu(bool)+0x1c4a>
    9424:	ca 53       	subi	r28, 0x3A	; 58
    9426:	df 4f       	sbci	r29, 0xFF	; 255
    9428:	28 81       	ld	r18, Y
    942a:	39 81       	ldd	r19, Y+1	; 0x01
    942c:	c6 5c       	subi	r28, 0xC6	; 198
    942e:	d0 40       	sbci	r29, 0x00	; 0
    9430:	23 2b       	or	r18, r19
    9432:	09 f4       	brne	.+2      	; 0x9436 <draw_menu(bool)+0x19ba>
    9434:	48 c1       	rjmp	.+656    	; 0x96c6 <draw_menu(bool)+0x1c4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2014
    {
      loop_i = 0;
    9436:	ce 54       	subi	r28, 0x4E	; 78
    9438:	df 4f       	sbci	r29, 0xFF	; 255
    943a:	18 82       	st	Y, r1
    943c:	c2 5b       	subi	r28, 0xB2	; 178
    943e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2016
      loop_t = 0;
      rfnt =  pgm_read_word(&dyn_button_1->function_for_max_items);
    9440:	f2 01       	movw	r30, r4
    9442:	e8 55       	subi	r30, 0x58	; 88
    9444:	fe 4f       	sbci	r31, 0xFE	; 254
    9446:	e6 0d       	add	r30, r6
    9448:	f7 1d       	adc	r31, r7
    944a:	25 91       	lpm	r18, Z+
    944c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2017
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    944e:	c2 01       	movw	r24, r4
    9450:	8d 55       	subi	r24, 0x5D	; 93
    9452:	9e 4f       	sbci	r25, 0xFE	; 254
    9454:	a3 01       	movw	r20, r6
    9456:	48 0f       	add	r20, r24
    9458:	59 1f       	adc	r21, r25
    945a:	ca 54       	subi	r28, 0x4A	; 74
    945c:	df 4f       	sbci	r29, 0xFF	; 255
    945e:	59 83       	std	Y+1, r21	; 0x01
    9460:	48 83       	st	Y, r20
    9462:	c6 5b       	subi	r28, 0xB6	; 182
    9464:	d0 40       	sbci	r29, 0x00	; 0
    9466:	fa 01       	movw	r30, r20
    9468:	84 91       	lpm	r24, Z
    946a:	cd 54       	subi	r28, 0x4D	; 77
    946c:	df 4f       	sbci	r29, 0xFF	; 255
    946e:	68 81       	ld	r22, Y
    9470:	c3 5b       	subi	r28, 0xB3	; 179
    9472:	d0 40       	sbci	r29, 0x00	; 0
    9474:	70 e0       	ldi	r23, 0x00	; 0
    9476:	40 e0       	ldi	r20, 0x00	; 0
    9478:	90 e0       	ldi	r25, 0x00	; 0
    947a:	f9 01       	movw	r30, r18
    947c:	19 95       	eicall
    947e:	cf 54       	subi	r28, 0x4F	; 79
    9480:	df 4f       	sbci	r29, 0xFF	; 255
    9482:	88 83       	st	Y, r24
    9484:	c1 5b       	subi	r28, 0xB1	; 177
    9486:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2019

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
    9488:	f2 01       	movw	r30, r4
    948a:	ee 55       	subi	r30, 0x5E	; 94
    948c:	fe 4f       	sbci	r31, 0xFE	; 254
    948e:	e6 0d       	add	r30, r6
    9490:	f7 1d       	adc	r31, r7
    9492:	44 91       	lpm	r20, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2020
      if (slider_active != MENU_SLIDER_OFF)
    9494:	4f 3f       	cpi	r20, 0xFF	; 255
    9496:	b9 f0       	breq	.+46     	; 0x94c6 <draw_menu(bool)+0x1a4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2021
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
    9498:	f2 01       	movw	r30, r4
    949a:	e0 56       	subi	r30, 0x60	; 96
    949c:	fe 4f       	sbci	r31, 0xFE	; 254
    949e:	e6 0d       	add	r30, r6
    94a0:	f7 1d       	adc	r31, r7
    94a2:	24 91       	lpm	r18, Z
    94a4:	f2 01       	movw	r30, r4
    94a6:	ef 55       	subi	r30, 0x5F	; 95
    94a8:	fe 4f       	sbci	r31, 0xFE	; 254
    94aa:	e6 0d       	add	r30, r6
    94ac:	f7 1d       	adc	r31, r7
    94ae:	e4 91       	lpm	r30, Z
    94b0:	2e 9f       	mul	r18, r30
    94b2:	20 2d       	mov	r18, r0
    94b4:	11 24       	eor	r1, r1
    94b6:	be 01       	movw	r22, r28
    94b8:	6f 54       	subi	r22, 0x4F	; 79
    94ba:	7f 4f       	sbci	r23, 0xFF	; 255
    94bc:	ce 01       	movw	r24, r28
    94be:	8e 54       	subi	r24, 0x4E	; 78
    94c0:	9f 4f       	sbci	r25, 0xFF	; 255
    94c2:	0e 94 ef 24 	call	0x49de	; 0x49de <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    94c6:	ce 54       	subi	r28, 0x4E	; 78
    94c8:	df 4f       	sbci	r29, 0xFF	; 255
    94ca:	a8 80       	ld	r10, Y
    94cc:	c2 5b       	subi	r28, 0xB2	; 178
    94ce:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
      while (loop_i < loop_cnt)
    94d0:	cf 54       	subi	r28, 0x4F	; 79
    94d2:	df 4f       	sbci	r29, 0xFF	; 255
    94d4:	88 80       	ld	r8, Y
    94d6:	c1 5b       	subi	r28, 0xB1	; 177
    94d8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2024
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    94da:	c2 01       	movw	r24, r4
    94dc:	8c 56       	subi	r24, 0x6C	; 108
    94de:	9e 4f       	sbci	r25, 0xFE	; 254
    94e0:	93 01       	movw	r18, r6
    94e2:	28 0f       	add	r18, r24
    94e4:	39 1f       	adc	r19, r25
    94e6:	c4 54       	subi	r28, 0x44	; 68
    94e8:	df 4f       	sbci	r29, 0xFF	; 255
    94ea:	39 83       	std	Y+1, r19	; 0x01
    94ec:	28 83       	st	Y, r18
    94ee:	cc 5b       	subi	r28, 0xBC	; 188
    94f0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    94f2:	12 01       	movw	r2, r4
    94f4:	3a e6       	ldi	r19, 0x6A	; 106
    94f6:	23 1a       	sub	r2, r19
    94f8:	3e ef       	ldi	r19, 0xFE	; 254
    94fa:	33 0a       	sbc	r3, r19
    94fc:	26 0c       	add	r2, r6
    94fe:	37 1c       	adc	r3, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9500:	0b 96       	adiw	r24, 0x0b	; 11
    9502:	a3 01       	movw	r20, r6
    9504:	48 0f       	add	r20, r24
    9506:	59 1f       	adc	r21, r25
    9508:	ce 53       	subi	r28, 0x3E	; 62
    950a:	df 4f       	sbci	r29, 0xFF	; 255
    950c:	59 83       	std	Y+1, r21	; 0x01
    950e:	48 83       	st	Y, r20
    9510:	c2 5c       	subi	r28, 0xC2	; 194
    9512:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    9514:	01 97       	sbiw	r24, 0x01	; 1
    9516:	b3 01       	movw	r22, r6
    9518:	68 0f       	add	r22, r24
    951a:	79 1f       	adc	r23, r25
    951c:	c8 53       	subi	r28, 0x38	; 56
    951e:	df 4f       	sbci	r29, 0xFF	; 255
    9520:	79 83       	std	Y+1, r23	; 0x01
    9522:	68 83       	st	Y, r22
    9524:	c8 5c       	subi	r28, 0xC8	; 200
    9526:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    9528:	01 97       	sbiw	r24, 0x01	; 1
    952a:	f3 01       	movw	r30, r6
    952c:	e8 0f       	add	r30, r24
    952e:	f9 1f       	adc	r31, r25
    9530:	c6 53       	subi	r28, 0x36	; 54
    9532:	df 4f       	sbci	r29, 0xFF	; 255
    9534:	f9 83       	std	Y+1, r31	; 0x01
    9536:	e8 83       	st	Y, r30
    9538:	ca 5c       	subi	r28, 0xCA	; 202
    953a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    953c:	03 97       	sbiw	r24, 0x03	; 3
    953e:	93 01       	movw	r18, r6
    9540:	28 0f       	add	r18, r24
    9542:	39 1f       	adc	r19, r25
    9544:	c3 53       	subi	r28, 0x33	; 51
    9546:	df 4f       	sbci	r29, 0xFF	; 255
    9548:	39 83       	std	Y+1, r19	; 0x01
    954a:	28 83       	st	Y, r18
    954c:	cd 5c       	subi	r28, 0xCD	; 205
    954e:	d0 40       	sbci	r29, 0x00	; 0
    9550:	02 97       	sbiw	r24, 0x02	; 2
    9552:	a3 01       	movw	r20, r6
    9554:	48 0f       	add	r20, r24
    9556:	59 1f       	adc	r21, r25
    9558:	c1 53       	subi	r28, 0x31	; 49
    955a:	df 4f       	sbci	r29, 0xFF	; 255
    955c:	59 83       	std	Y+1, r21	; 0x01
    955e:	48 83       	st	Y, r20
    9560:	cf 5c       	subi	r28, 0xCF	; 207
    9562:	d0 40       	sbci	r29, 0x00	; 0
    9564:	d1 2c       	mov	r13, r1
    9566:	c1 2c       	mov	r12, r1
    9568:	ba 2c       	mov	r11, r10
    956a:	bc 0c       	add	r11, r12
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2022
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);

      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
    956c:	b8 14       	cp	r11, r8
    956e:	08 f0       	brcs	.+2      	; 0x9572 <draw_menu(bool)+0x1af6>
    9570:	aa c0       	rjmp	.+340    	; 0x96c6 <draw_menu(bool)+0x1c4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2024
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    9572:	c4 54       	subi	r28, 0x44	; 68
    9574:	df 4f       	sbci	r29, 0xFF	; 255
    9576:	e8 81       	ld	r30, Y
    9578:	f9 81       	ldd	r31, Y+1	; 0x01
    957a:	cc 5b       	subi	r28, 0xBC	; 188
    957c:	d0 40       	sbci	r29, 0x00	; 0
    957e:	25 91       	lpm	r18, Z+
    9580:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    9582:	f1 01       	movw	r30, r2
    9584:	85 91       	lpm	r24, Z+
    9586:	94 91       	lpm	r25, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2026
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
    9588:	ce 53       	subi	r28, 0x3E	; 62
    958a:	df 4f       	sbci	r29, 0xFF	; 255
    958c:	e8 81       	ld	r30, Y
    958e:	f9 81       	ldd	r31, Y+1	; 0x01
    9590:	c2 5c       	subi	r28, 0xC2	; 194
    9592:	d0 40       	sbci	r29, 0x00	; 0
    9594:	44 91       	lpm	r20, Z
    9596:	44 23       	and	r20, r20
    9598:	09 f4       	brne	.+2      	; 0x959c <draw_menu(bool)+0x1b20>
    959a:	97 c0       	rjmp	.+302    	; 0x96ca <draw_menu(bool)+0x1c4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2025
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
    959c:	c6 54       	subi	r28, 0x46	; 70
    959e:	df 4f       	sbci	r29, 0xFF	; 255
    95a0:	48 81       	ld	r20, Y
    95a2:	59 81       	ldd	r21, Y+1	; 0x01
    95a4:	ca 5b       	subi	r28, 0xBA	; 186
    95a6:	d0 40       	sbci	r29, 0x00	; 0
    95a8:	48 0f       	add	r20, r24
    95aa:	59 1f       	adc	r21, r25
    95ac:	c0 54       	subi	r28, 0x40	; 64
    95ae:	df 4f       	sbci	r29, 0xFF	; 255
    95b0:	59 83       	std	Y+1, r21	; 0x01
    95b2:	48 83       	st	Y, r20
    95b4:	c0 5c       	subi	r28, 0xC0	; 192
    95b6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    95b8:	ce 53       	subi	r28, 0x3E	; 62
    95ba:	df 4f       	sbci	r29, 0xFF	; 255
    95bc:	e8 81       	ld	r30, Y
    95be:	f9 81       	ldd	r31, Y+1	; 0x01
    95c0:	c2 5c       	subi	r28, 0xC2	; 194
    95c2:	d0 40       	sbci	r29, 0x00	; 0
    95c4:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2024
      slider_active = pgm_read_byte(&dyn_button_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_button_1->max_items_count)*pgm_read_byte(&dyn_button_1->max_row_count));
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
    95c6:	c8 54       	subi	r28, 0x48	; 72
    95c8:	df 4f       	sbci	r29, 0xFF	; 255
    95ca:	48 81       	ld	r20, Y
    95cc:	59 81       	ldd	r21, Y+1	; 0x01
    95ce:	c8 5b       	subi	r28, 0xB8	; 184
    95d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2028
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
        if (pgm_read_byte(&dyn_button_1->direction) == HORIZONTAL)
    95d2:	81 30       	cpi	r24, 0x01	; 1
    95d4:	e9 f4       	brne	.+58     	; 0x9610 <draw_menu(bool)+0x1b94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2029
          new_x = global_x + pgm_read_word(&dyn_button_1->first_x) + (pgm_read_byte(&dyn_button_1->step_x) * loop_t);
    95d6:	c4 54       	subi	r28, 0x44	; 68
    95d8:	df 4f       	sbci	r29, 0xFF	; 255
    95da:	e8 81       	ld	r30, Y
    95dc:	f9 81       	ldd	r31, Y+1	; 0x01
    95de:	cc 5b       	subi	r28, 0xBC	; 188
    95e0:	d0 40       	sbci	r29, 0x00	; 0
    95e2:	85 91       	lpm	r24, Z+
    95e4:	94 91       	lpm	r25, Z
    95e6:	c6 53       	subi	r28, 0x36	; 54
    95e8:	df 4f       	sbci	r29, 0xFF	; 255
    95ea:	e8 81       	ld	r30, Y
    95ec:	f9 81       	ldd	r31, Y+1	; 0x01
    95ee:	ca 5c       	subi	r28, 0xCA	; 202
    95f0:	d0 40       	sbci	r29, 0x00	; 0
    95f2:	44 91       	lpm	r20, Z
    95f4:	c8 54       	subi	r28, 0x48	; 72
    95f6:	df 4f       	sbci	r29, 0xFF	; 255
    95f8:	28 81       	ld	r18, Y
    95fa:	39 81       	ldd	r19, Y+1	; 0x01
    95fc:	c8 5b       	subi	r28, 0xB8	; 184
    95fe:	d0 40       	sbci	r29, 0x00	; 0
    9600:	82 0f       	add	r24, r18
    9602:	93 1f       	adc	r25, r19
    9604:	4c 9d       	mul	r20, r12
    9606:	90 01       	movw	r18, r0
    9608:	4d 9d       	mul	r20, r13
    960a:	30 0d       	add	r19, r0
    960c:	11 24       	eor	r1, r1
    960e:	ac 01       	movw	r20, r24
    9610:	42 0f       	add	r20, r18
    9612:	53 1f       	adc	r21, r19
    9614:	c2 54       	subi	r28, 0x42	; 66
    9616:	df 4f       	sbci	r29, 0xFF	; 255
    9618:	59 83       	std	Y+1, r21	; 0x01
    961a:	48 83       	st	Y, r20
    961c:	ce 5b       	subi	r28, 0xBE	; 190
    961e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2030
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_button_1->size_x), pgm_read_word(&dyn_button_1->size_y), click_x, click_y) == true)
    9620:	c3 53       	subi	r28, 0x33	; 51
    9622:	df 4f       	sbci	r29, 0xFF	; 255
    9624:	e8 81       	ld	r30, Y
    9626:	f9 81       	ldd	r31, Y+1	; 0x01
    9628:	cd 5c       	subi	r28, 0xCD	; 205
    962a:	d0 40       	sbci	r29, 0x00	; 0
    962c:	25 91       	lpm	r18, Z+
    962e:	34 91       	lpm	r19, Z
    9630:	c1 53       	subi	r28, 0x31	; 49
    9632:	df 4f       	sbci	r29, 0xFF	; 255
    9634:	e8 81       	ld	r30, Y
    9636:	f9 81       	ldd	r31, Y+1	; 0x01
    9638:	cf 5c       	subi	r28, 0xCF	; 207
    963a:	d0 40       	sbci	r29, 0x00	; 0
    963c:	45 91       	lpm	r20, Z+
    963e:	54 91       	lpm	r21, Z
    9640:	ca 53       	subi	r28, 0x3A	; 58
    9642:	df 4f       	sbci	r29, 0xFF	; 255
    9644:	e8 80       	ld	r14, Y
    9646:	f9 80       	ldd	r15, Y+1	; 0x01
    9648:	c6 5c       	subi	r28, 0xC6	; 198
    964a:	d0 40       	sbci	r29, 0x00	; 0
    964c:	cc 53       	subi	r28, 0x3C	; 60
    964e:	df 4f       	sbci	r29, 0xFF	; 255
    9650:	08 81       	ld	r16, Y
    9652:	19 81       	ldd	r17, Y+1	; 0x01
    9654:	c4 5c       	subi	r28, 0xC4	; 196
    9656:	d0 40       	sbci	r29, 0x00	; 0
    9658:	c0 54       	subi	r28, 0x40	; 64
    965a:	df 4f       	sbci	r29, 0xFF	; 255
    965c:	68 81       	ld	r22, Y
    965e:	79 81       	ldd	r23, Y+1	; 0x01
    9660:	c0 5c       	subi	r28, 0xC0	; 192
    9662:	d0 40       	sbci	r29, 0x00	; 0
    9664:	c2 54       	subi	r28, 0x42	; 66
    9666:	df 4f       	sbci	r29, 0xFF	; 255
    9668:	88 81       	ld	r24, Y
    966a:	99 81       	ldd	r25, Y+1	; 0x01
    966c:	ce 5b       	subi	r28, 0xBE	; 190
    966e:	d0 40       	sbci	r29, 0x00	; 0
    9670:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9674:	18 2f       	mov	r17, r24
    9676:	5f ef       	ldi	r21, 0xFF	; 255
    9678:	c5 1a       	sub	r12, r21
    967a:	d5 0a       	sbc	r13, r21
    967c:	88 23       	and	r24, r24
    967e:	09 f4       	brne	.+2      	; 0x9682 <draw_menu(bool)+0x1c06>
    9680:	73 cf       	rjmp	.-282    	; 0x9568 <draw_menu(bool)+0x1aec>
    9682:	ce 54       	subi	r28, 0x4E	; 78
    9684:	df 4f       	sbci	r29, 0xFF	; 255
    9686:	b8 82       	st	Y, r11
    9688:	c2 5b       	subi	r28, 0xB2	; 178
    968a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2032
        {
          fntargs =  pgm_read_word(&dyn_button_1->dyn_button_onclick);
    968c:	f2 01       	movw	r30, r4
    968e:	ea 55       	subi	r30, 0x5A	; 90
    9690:	fe 4f       	sbci	r31, 0xFE	; 254
    9692:	e6 0d       	add	r30, r6
    9694:	f7 1d       	adc	r31, r7
    9696:	25 91       	lpm	r18, Z+
    9698:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2033
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_button_1->args), menu_args1, loop_i);
    969a:	ca 54       	subi	r28, 0x4A	; 74
    969c:	df 4f       	sbci	r29, 0xFF	; 255
    969e:	e8 81       	ld	r30, Y
    96a0:	f9 81       	ldd	r31, Y+1	; 0x01
    96a2:	c6 5b       	subi	r28, 0xB6	; 182
    96a4:	d0 40       	sbci	r29, 0x00	; 0
    96a6:	84 91       	lpm	r24, Z
    96a8:	cd 54       	subi	r28, 0x4D	; 77
    96aa:	df 4f       	sbci	r29, 0xFF	; 255
    96ac:	68 81       	ld	r22, Y
    96ae:	c3 5b       	subi	r28, 0xB3	; 179
    96b0:	d0 40       	sbci	r29, 0x00	; 0
    96b2:	70 e0       	ldi	r23, 0x00	; 0
    96b4:	4b 2d       	mov	r20, r11
    96b6:	90 e0       	ldi	r25, 0x00	; 0
    96b8:	f9 01       	movw	r30, r18
    96ba:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2034
          ret = true;
    96bc:	c4 53       	subi	r28, 0x34	; 52
    96be:	df 4f       	sbci	r29, 0xFF	; 255
    96c0:	18 83       	st	Y, r17
    96c2:	cc 5c       	subi	r28, 0xCC	; 204
    96c4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:1983
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  ////
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_button_1); idx++)
    96c6:	93 94       	inc	r9
    96c8:	12 cd       	rjmp	.-1500   	; 0x90ee <draw_menu(bool)+0x1672>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2027
      while (loop_i < loop_cnt)
      {
        new_x = global_x + pgm_read_word(&dyn_button_1->first_x);
        new_y = global_y + pgm_read_word(&dyn_button_1->first_y);
        if (pgm_read_byte(&dyn_button_1->direction) == VERTICAL)
          new_y = global_y + pgm_read_word(&dyn_button_1->first_y) + (pgm_read_byte(&dyn_button_1->step_y) * loop_t);
    96ca:	f1 01       	movw	r30, r2
    96cc:	85 91       	lpm	r24, Z+
    96ce:	94 91       	lpm	r25, Z
    96d0:	c8 53       	subi	r28, 0x38	; 56
    96d2:	df 4f       	sbci	r29, 0xFF	; 255
    96d4:	e8 81       	ld	r30, Y
    96d6:	f9 81       	ldd	r31, Y+1	; 0x01
    96d8:	c8 5c       	subi	r28, 0xC8	; 200
    96da:	d0 40       	sbci	r29, 0x00	; 0
    96dc:	64 91       	lpm	r22, Z
    96de:	c6 54       	subi	r28, 0x46	; 70
    96e0:	df 4f       	sbci	r29, 0xFF	; 255
    96e2:	48 81       	ld	r20, Y
    96e4:	59 81       	ldd	r21, Y+1	; 0x01
    96e6:	ca 5b       	subi	r28, 0xBA	; 186
    96e8:	d0 40       	sbci	r29, 0x00	; 0
    96ea:	84 0f       	add	r24, r20
    96ec:	95 1f       	adc	r25, r21
    96ee:	6c 9d       	mul	r22, r12
    96f0:	a0 01       	movw	r20, r0
    96f2:	6d 9d       	mul	r22, r13
    96f4:	50 0d       	add	r21, r0
    96f6:	11 24       	eor	r1, r1
    96f8:	bc 01       	movw	r22, r24
    96fa:	64 0f       	add	r22, r20
    96fc:	75 1f       	adc	r23, r21
    96fe:	c0 54       	subi	r28, 0x40	; 64
    9700:	df 4f       	sbci	r29, 0xFF	; 255
    9702:	79 83       	std	Y+1, r23	; 0x01
    9704:	68 83       	st	Y, r22
    9706:	c0 5c       	subi	r28, 0xC0	; 192
    9708:	d0 40       	sbci	r29, 0x00	; 0
    970a:	56 cf       	rjmp	.-340    	; 0x95b8 <draw_menu(bool)+0x1b3c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2042
        loop_t++;
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
    970c:	c4 53       	subi	r28, 0x34	; 52
    970e:	df 4f       	sbci	r29, 0xFF	; 255
    9710:	f8 81       	ld	r31, Y
    9712:	cc 5c       	subi	r28, 0xCC	; 204
    9714:	d0 40       	sbci	r29, 0x00	; 0
    9716:	f1 11       	cpse	r31, r1
    9718:	51 c4       	rjmp	.+2210   	; 0x9fbc <draw_menu(bool)+0x2540>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    971a:	ca 54       	subi	r28, 0x4A	; 74
    971c:	df 4f       	sbci	r29, 0xFF	; 255
    971e:	18 82       	st	Y, r1
    9720:	c6 5b       	subi	r28, 0xB6	; 182
    9722:	d0 40       	sbci	r29, 0x00	; 0
    9724:	93 01       	movw	r18, r6
    9726:	24 5b       	subi	r18, 0xB4	; 180
    9728:	3d 4f       	sbci	r19, 0xFD	; 253
    972a:	c0 52       	subi	r28, 0x20	; 32
    972c:	df 4f       	sbci	r29, 0xFF	; 255
    972e:	39 83       	std	Y+1, r19	; 0x01
    9730:	28 83       	st	Y, r18
    9732:	c0 5e       	subi	r28, 0xE0	; 224
    9734:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
          {
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9736:	ae 01       	movw	r20, r28
    9738:	4f 57       	subi	r20, 0x7F	; 127
    973a:	5f 4f       	sbci	r21, 0xFF	; 255
    973c:	cc 54       	subi	r28, 0x4C	; 76
    973e:	df 4f       	sbci	r29, 0xFF	; 255
    9740:	59 83       	std	Y+1, r21	; 0x01
    9742:	48 83       	st	Y, r20
    9744:	c4 5b       	subi	r28, 0xB4	; 180
    9746:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    9748:	c0 52       	subi	r28, 0x20	; 32
    974a:	df 4f       	sbci	r29, 0xFF	; 255
    974c:	e8 81       	ld	r30, Y
    974e:	f9 81       	ldd	r31, Y+1	; 0x01
    9750:	c0 5e       	subi	r28, 0xE0	; 224
    9752:	d0 40       	sbci	r29, 0x00	; 0
    9754:	84 91       	lpm	r24, Z
    9756:	ca 54       	subi	r28, 0x4A	; 74
    9758:	df 4f       	sbci	r29, 0xFF	; 255
    975a:	f8 81       	ld	r31, Y
    975c:	c6 5b       	subi	r28, 0xB6	; 182
    975e:	d0 40       	sbci	r29, 0x00	; 0
    9760:	f8 17       	cp	r31, r24
    9762:	08 f0       	brcs	.+2      	; 0x9766 <draw_menu(bool)+0x1cea>
    9764:	31 c4       	rjmp	.+2146   	; 0x9fc8 <draw_menu(bool)+0x254c>
    9766:	2e e1       	ldi	r18, 0x1E	; 30
    9768:	f2 9f       	mul	r31, r18
    976a:	20 01       	movw	r4, r0
    976c:	11 24       	eor	r1, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2046
  {
    dyn_select_box_1 = &current->dyn_select_box_1[idx];
    rdr = pgm_read_byte(&dyn_select_box_1->redraw_class);
    976e:	f2 01       	movw	r30, r4
    9770:	ec 5b       	subi	r30, 0xBC	; 188
    9772:	fd 4f       	sbci	r31, 0xFD	; 253
    9774:	e6 0d       	add	r30, r6
    9776:	f7 1d       	adc	r31, r7
    9778:	84 91       	lpm	r24, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2047
    if (enable_redraw(rdr, redraw_class) == true)
    977a:	cf 52       	subi	r28, 0x2F	; 47
    977c:	df 4f       	sbci	r29, 0xFF	; 255
    977e:	68 81       	ld	r22, Y
    9780:	c1 5d       	subi	r28, 0xD1	; 209
    9782:	d0 40       	sbci	r29, 0x00	; 0
    9784:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <enable_redraw(unsigned char, unsigned char)>
    9788:	88 23       	and	r24, r24
    978a:	09 f4       	brne	.+2      	; 0x978e <draw_menu(bool)+0x1d12>
    978c:	45 c2       	rjmp	.+1162   	; 0x9c18 <draw_menu(bool)+0x219c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2049
    {
      loop_i = 0;
    978e:	ce 54       	subi	r28, 0x4E	; 78
    9790:	df 4f       	sbci	r29, 0xFF	; 255
    9792:	18 82       	st	Y, r1
    9794:	c2 5b       	subi	r28, 0xB2	; 178
    9796:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2052
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    9798:	f2 01       	movw	r30, r4
    979a:	e0 5c       	subi	r30, 0xC0	; 192
    979c:	fd 4f       	sbci	r31, 0xFD	; 253
    979e:	e6 0d       	add	r30, r6
    97a0:	f7 1d       	adc	r31, r7
    97a2:	25 91       	lpm	r18, Z+
    97a4:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2053
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    97a6:	c2 01       	movw	r24, r4
    97a8:	85 5c       	subi	r24, 0xC5	; 197
    97aa:	9d 4f       	sbci	r25, 0xFD	; 253
    97ac:	a3 01       	movw	r20, r6
    97ae:	48 0f       	add	r20, r24
    97b0:	59 1f       	adc	r21, r25
    97b2:	c8 53       	subi	r28, 0x38	; 56
    97b4:	df 4f       	sbci	r29, 0xFF	; 255
    97b6:	59 83       	std	Y+1, r21	; 0x01
    97b8:	48 83       	st	Y, r20
    97ba:	c8 5c       	subi	r28, 0xC8	; 200
    97bc:	d0 40       	sbci	r29, 0x00	; 0
    97be:	fa 01       	movw	r30, r20
    97c0:	84 91       	lpm	r24, Z
    97c2:	cd 54       	subi	r28, 0x4D	; 77
    97c4:	df 4f       	sbci	r29, 0xFF	; 255
    97c6:	68 81       	ld	r22, Y
    97c8:	c3 5b       	subi	r28, 0xB3	; 179
    97ca:	d0 40       	sbci	r29, 0x00	; 0
    97cc:	70 e0       	ldi	r23, 0x00	; 0
    97ce:	40 e0       	ldi	r20, 0x00	; 0
    97d0:	90 e0       	ldi	r25, 0x00	; 0
    97d2:	f9 01       	movw	r30, r18
    97d4:	19 95       	eicall
    97d6:	cf 54       	subi	r28, 0x4F	; 79
    97d8:	df 4f       	sbci	r29, 0xFF	; 255
    97da:	88 83       	st	Y, r24
    97dc:	c1 5b       	subi	r28, 0xB1	; 177
    97de:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2054
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
    97e0:	f2 01       	movw	r30, r4
    97e2:	e4 5c       	subi	r30, 0xC4	; 196
    97e4:	fd 4f       	sbci	r31, 0xFD	; 253
    97e6:	e6 0d       	add	r30, r6
    97e8:	f7 1d       	adc	r31, r7
    97ea:	25 91       	lpm	r18, Z+
    97ec:	34 91       	lpm	r19, Z
    97ee:	ce 51       	subi	r28, 0x1E	; 30
    97f0:	df 4f       	sbci	r29, 0xFF	; 255
    97f2:	39 83       	std	Y+1, r19	; 0x01
    97f4:	28 83       	st	Y, r18
    97f6:	c2 5e       	subi	r28, 0xE2	; 226
    97f8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2055
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    97fa:	f2 01       	movw	r30, r4
    97fc:	e6 5c       	subi	r30, 0xC6	; 198
    97fe:	fd 4f       	sbci	r31, 0xFD	; 253
    9800:	e6 0d       	add	r30, r6
    9802:	f7 1d       	adc	r31, r7
    9804:	44 91       	lpm	r20, Z
    9806:	c2 01       	movw	r24, r4
    9808:	88 5c       	subi	r24, 0xC8	; 200
    980a:	9d 4f       	sbci	r25, 0xFD	; 253
    980c:	b3 01       	movw	r22, r6
    980e:	68 0f       	add	r22, r24
    9810:	79 1f       	adc	r23, r25
    9812:	c1 53       	subi	r28, 0x31	; 49
    9814:	df 4f       	sbci	r29, 0xFF	; 255
    9816:	79 83       	std	Y+1, r23	; 0x01
    9818:	68 83       	st	Y, r22
    981a:	cf 5c       	subi	r28, 0xCF	; 207
    981c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2056
      if (slider_active != MENU_SLIDER_OFF)
    981e:	4f 3f       	cpi	r20, 0xFF	; 255
    9820:	99 f0       	breq	.+38     	; 0x9848 <draw_menu(bool)+0x1dcc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2057
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    9822:	fb 01       	movw	r30, r22
    9824:	24 91       	lpm	r18, Z
    9826:	f2 01       	movw	r30, r4
    9828:	e7 5c       	subi	r30, 0xC7	; 199
    982a:	fd 4f       	sbci	r31, 0xFD	; 253
    982c:	e6 0d       	add	r30, r6
    982e:	f7 1d       	adc	r31, r7
    9830:	e4 91       	lpm	r30, Z
    9832:	2e 9f       	mul	r18, r30
    9834:	20 2d       	mov	r18, r0
    9836:	11 24       	eor	r1, r1
    9838:	be 01       	movw	r22, r28
    983a:	6f 54       	subi	r22, 0x4F	; 79
    983c:	7f 4f       	sbci	r23, 0xFF	; 255
    983e:	ce 01       	movw	r24, r28
    9840:	8e 54       	subi	r24, 0x4E	; 78
    9842:	9f 4f       	sbci	r25, 0xFF	; 255
    9844:	0e 94 ef 24 	call	0x49de	; 0x49de <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2060
      while (loop_i < loop_cnt)
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9848:	c2 01       	movw	r24, r4
    984a:	89 5c       	subi	r24, 0xC9	; 201
    984c:	9d 4f       	sbci	r25, 0xFD	; 253
    984e:	93 01       	movw	r18, r6
    9850:	28 0f       	add	r18, r24
    9852:	39 1f       	adc	r19, r25
    9854:	c4 54       	subi	r28, 0x44	; 68
    9856:	df 4f       	sbci	r29, 0xFF	; 255
    9858:	39 83       	std	Y+1, r19	; 0x01
    985a:	28 83       	st	Y, r18
    985c:	cc 5b       	subi	r28, 0xBC	; 188
    985e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9860:	40 97       	sbiw	r24, 0x10	; 16
    9862:	a3 01       	movw	r20, r6
    9864:	48 0f       	add	r20, r24
    9866:	59 1f       	adc	r21, r25
    9868:	ce 53       	subi	r28, 0x3E	; 62
    986a:	df 4f       	sbci	r29, 0xFF	; 255
    986c:	59 83       	std	Y+1, r21	; 0x01
    986e:	48 83       	st	Y, r20
    9870:	c2 5c       	subi	r28, 0xC2	; 194
    9872:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9874:	12 01       	movw	r2, r4
    9876:	57 ed       	ldi	r21, 0xD7	; 215
    9878:	25 1a       	sub	r2, r21
    987a:	5d ef       	ldi	r21, 0xFD	; 253
    987c:	35 0a       	sbc	r3, r21
    987e:	26 0c       	add	r2, r6
    9880:	37 1c       	adc	r3, r7
    9882:	0f 96       	adiw	r24, 0x0f	; 15
    9884:	b3 01       	movw	r22, r6
    9886:	68 0f       	add	r22, r24
    9888:	79 1f       	adc	r23, r25
    988a:	c6 53       	subi	r28, 0x36	; 54
    988c:	df 4f       	sbci	r29, 0xFF	; 255
    988e:	79 83       	std	Y+1, r23	; 0x01
    9890:	68 83       	st	Y, r22
    9892:	ca 5c       	subi	r28, 0xCA	; 202
    9894:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9896:	01 97       	sbiw	r24, 0x01	; 1
    9898:	f3 01       	movw	r30, r6
    989a:	e8 0f       	add	r30, r24
    989c:	f9 1f       	adc	r31, r25
    989e:	c3 53       	subi	r28, 0x33	; 51
    98a0:	df 4f       	sbci	r29, 0xFF	; 255
    98a2:	f9 83       	std	Y+1, r31	; 0x01
    98a4:	e8 83       	st	Y, r30
    98a6:	cd 5c       	subi	r28, 0xCD	; 205
    98a8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
            loop_t = 0;
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    98aa:	0d 96       	adiw	r24, 0x0d	; 13
    98ac:	93 01       	movw	r18, r6
    98ae:	28 0f       	add	r18, r24
    98b0:	39 1f       	adc	r19, r25
    98b2:	ce 52       	subi	r28, 0x2E	; 46
    98b4:	df 4f       	sbci	r29, 0xFF	; 255
    98b6:	39 83       	std	Y+1, r19	; 0x01
    98b8:	28 83       	st	Y, r18
    98ba:	c2 5d       	subi	r28, 0xD2	; 210
    98bc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    98be:	0f 97       	sbiw	r24, 0x0f	; 15
    98c0:	a3 01       	movw	r20, r6
    98c2:	48 0f       	add	r20, r24
    98c4:	59 1f       	adc	r21, r25
    98c6:	cc 52       	subi	r28, 0x2C	; 44
    98c8:	df 4f       	sbci	r29, 0xFF	; 255
    98ca:	59 83       	std	Y+1, r21	; 0x01
    98cc:	48 83       	st	Y, r20
    98ce:	c4 5d       	subi	r28, 0xD4	; 212
    98d0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    98d2:	02 97       	sbiw	r24, 0x02	; 2
    98d4:	b3 01       	movw	r22, r6
    98d6:	68 0f       	add	r22, r24
    98d8:	79 1f       	adc	r23, r25
    98da:	ca 52       	subi	r28, 0x2A	; 42
    98dc:	df 4f       	sbci	r29, 0xFF	; 255
    98de:	79 83       	std	Y+1, r23	; 0x01
    98e0:	68 83       	st	Y, r22
    98e2:	c6 5d       	subi	r28, 0xD6	; 214
    98e4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    98e6:	01 97       	sbiw	r24, 0x01	; 1
    98e8:	f3 01       	movw	r30, r6
    98ea:	e8 0f       	add	r30, r24
    98ec:	f9 1f       	adc	r31, r25
    98ee:	c8 52       	subi	r28, 0x28	; 40
    98f0:	df 4f       	sbci	r29, 0xFF	; 255
    98f2:	f9 83       	std	Y+1, r31	; 0x01
    98f4:	e8 83       	st	Y, r30
    98f6:	c8 5d       	subi	r28, 0xD8	; 216
    98f8:	d0 40       	sbci	r29, 0x00	; 0
    98fa:	01 97       	sbiw	r24, 0x01	; 1
    98fc:	93 01       	movw	r18, r6
    98fe:	28 0f       	add	r18, r24
    9900:	39 1f       	adc	r19, r25
    9902:	c6 52       	subi	r28, 0x26	; 38
    9904:	df 4f       	sbci	r29, 0xFF	; 255
    9906:	39 83       	std	Y+1, r19	; 0x01
    9908:	28 83       	st	Y, r18
    990a:	ca 5d       	subi	r28, 0xDA	; 218
    990c:	d0 40       	sbci	r29, 0x00	; 0
    990e:	02 97       	sbiw	r24, 0x02	; 2
    9910:	a3 01       	movw	r20, r6
    9912:	48 0f       	add	r20, r24
    9914:	59 1f       	adc	r21, r25
    9916:	c4 52       	subi	r28, 0x24	; 36
    9918:	df 4f       	sbci	r29, 0xFF	; 255
    991a:	59 83       	std	Y+1, r21	; 0x01
    991c:	48 83       	st	Y, r20
    991e:	cc 5d       	subi	r28, 0xDC	; 220
    9920:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9922:	02 97       	sbiw	r24, 0x02	; 2
    9924:	b3 01       	movw	r22, r6
    9926:	68 0f       	add	r22, r24
    9928:	79 1f       	adc	r23, r25
    992a:	c2 52       	subi	r28, 0x22	; 34
    992c:	df 4f       	sbci	r29, 0xFF	; 255
    992e:	79 83       	std	Y+1, r23	; 0x01
    9930:	68 83       	st	Y, r22
    9932:	ce 5d       	subi	r28, 0xDE	; 222
    9934:	d0 40       	sbci	r29, 0x00	; 0
    9936:	f1 2c       	mov	r15, r1
    9938:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2058
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      gss = pgm_read_word(&dyn_select_box_1->get_status_string);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    993a:	ce 54       	subi	r28, 0x4E	; 78
    993c:	df 4f       	sbci	r29, 0xFF	; 255
    993e:	88 81       	ld	r24, Y
    9940:	c2 5b       	subi	r28, 0xB2	; 178
    9942:	d0 40       	sbci	r29, 0x00	; 0
    9944:	cf 54       	subi	r28, 0x4F	; 79
    9946:	df 4f       	sbci	r29, 0xFF	; 255
    9948:	98 81       	ld	r25, Y
    994a:	c1 5b       	subi	r28, 0xB1	; 177
    994c:	d0 40       	sbci	r29, 0x00	; 0
    994e:	89 17       	cp	r24, r25
    9950:	08 f0       	brcs	.+2      	; 0x9954 <draw_menu(bool)+0x1ed8>
    9952:	62 c1       	rjmp	.+708    	; 0x9c18 <draw_menu(bool)+0x219c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2060
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9954:	c4 54       	subi	r28, 0x44	; 68
    9956:	df 4f       	sbci	r29, 0xFF	; 255
    9958:	e8 81       	ld	r30, Y
    995a:	f9 81       	ldd	r31, Y+1	; 0x01
    995c:	cc 5b       	subi	r28, 0xBC	; 188
    995e:	d0 40       	sbci	r29, 0x00	; 0
    9960:	94 91       	lpm	r25, Z
    9962:	91 11       	cpse	r25, r1
    9964:	34 c0       	rjmp	.+104    	; 0x99ce <draw_menu(bool)+0x1f52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2062
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9966:	ce 53       	subi	r28, 0x3E	; 62
    9968:	df 4f       	sbci	r29, 0xFF	; 255
    996a:	e8 81       	ld	r30, Y
    996c:	f9 81       	ldd	r31, Y+1	; 0x01
    996e:	c2 5c       	subi	r28, 0xC2	; 194
    9970:	d0 40       	sbci	r29, 0x00	; 0
    9972:	25 91       	lpm	r18, Z+
    9974:	34 91       	lpm	r19, Z
    9976:	c8 54       	subi	r28, 0x48	; 72
    9978:	df 4f       	sbci	r29, 0xFF	; 255
    997a:	48 81       	ld	r20, Y
    997c:	59 81       	ldd	r21, Y+1	; 0x01
    997e:	c8 5b       	subi	r28, 0xB8	; 184
    9980:	d0 40       	sbci	r29, 0x00	; 0
    9982:	42 0f       	add	r20, r18
    9984:	53 1f       	adc	r21, r19
    9986:	c2 54       	subi	r28, 0x42	; 66
    9988:	df 4f       	sbci	r29, 0xFF	; 255
    998a:	59 83       	std	Y+1, r21	; 0x01
    998c:	48 83       	st	Y, r20
    998e:	ce 5b       	subi	r28, 0xBE	; 190
    9990:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2063
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9992:	f1 01       	movw	r30, r2
    9994:	25 91       	lpm	r18, Z+
    9996:	34 91       	lpm	r19, Z
    9998:	c6 53       	subi	r28, 0x36	; 54
    999a:	df 4f       	sbci	r29, 0xFF	; 255
    999c:	e8 81       	ld	r30, Y
    999e:	f9 81       	ldd	r31, Y+1	; 0x01
    99a0:	ca 5c       	subi	r28, 0xCA	; 202
    99a2:	d0 40       	sbci	r29, 0x00	; 0
    99a4:	94 91       	lpm	r25, Z
    99a6:	c6 54       	subi	r28, 0x46	; 70
    99a8:	df 4f       	sbci	r29, 0xFF	; 255
    99aa:	48 81       	ld	r20, Y
    99ac:	59 81       	ldd	r21, Y+1	; 0x01
    99ae:	ca 5b       	subi	r28, 0xBA	; 186
    99b0:	d0 40       	sbci	r29, 0x00	; 0
    99b2:	24 0f       	add	r18, r20
    99b4:	35 1f       	adc	r19, r21
    99b6:	b9 01       	movw	r22, r18
    99b8:	91 9f       	mul	r25, r17
    99ba:	60 0d       	add	r22, r0
    99bc:	71 1d       	adc	r23, r1
    99be:	11 24       	eor	r1, r1
    99c0:	c0 54       	subi	r28, 0x40	; 64
    99c2:	df 4f       	sbci	r29, 0xFF	; 255
    99c4:	79 83       	std	Y+1, r23	; 0x01
    99c6:	68 83       	st	Y, r22
    99c8:	c0 5c       	subi	r28, 0xC0	; 192
    99ca:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2064
          loop_t++;
    99cc:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2066
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    99ce:	c4 54       	subi	r28, 0x44	; 68
    99d0:	df 4f       	sbci	r29, 0xFF	; 255
    99d2:	e8 81       	ld	r30, Y
    99d4:	f9 81       	ldd	r31, Y+1	; 0x01
    99d6:	cc 5b       	subi	r28, 0xBC	; 188
    99d8:	d0 40       	sbci	r29, 0x00	; 0
    99da:	94 91       	lpm	r25, Z
    99dc:	91 30       	cpi	r25, 0x01	; 1
    99de:	09 f0       	breq	.+2      	; 0x99e2 <draw_menu(bool)+0x1f66>
    99e0:	34 c0       	rjmp	.+104    	; 0x9a4a <draw_menu(bool)+0x1fce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2068
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    99e2:	f1 01       	movw	r30, r2
    99e4:	25 91       	lpm	r18, Z+
    99e6:	34 91       	lpm	r19, Z
    99e8:	c6 54       	subi	r28, 0x46	; 70
    99ea:	df 4f       	sbci	r29, 0xFF	; 255
    99ec:	48 81       	ld	r20, Y
    99ee:	59 81       	ldd	r21, Y+1	; 0x01
    99f0:	ca 5b       	subi	r28, 0xBA	; 186
    99f2:	d0 40       	sbci	r29, 0x00	; 0
    99f4:	42 0f       	add	r20, r18
    99f6:	53 1f       	adc	r21, r19
    99f8:	c0 54       	subi	r28, 0x40	; 64
    99fa:	df 4f       	sbci	r29, 0xFF	; 255
    99fc:	59 83       	std	Y+1, r21	; 0x01
    99fe:	48 83       	st	Y, r20
    9a00:	c0 5c       	subi	r28, 0xC0	; 192
    9a02:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2069
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9a04:	ce 53       	subi	r28, 0x3E	; 62
    9a06:	df 4f       	sbci	r29, 0xFF	; 255
    9a08:	e8 81       	ld	r30, Y
    9a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a0c:	c2 5c       	subi	r28, 0xC2	; 194
    9a0e:	d0 40       	sbci	r29, 0x00	; 0
    9a10:	25 91       	lpm	r18, Z+
    9a12:	34 91       	lpm	r19, Z
    9a14:	c3 53       	subi	r28, 0x33	; 51
    9a16:	df 4f       	sbci	r29, 0xFF	; 255
    9a18:	e8 81       	ld	r30, Y
    9a1a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a1c:	cd 5c       	subi	r28, 0xCD	; 205
    9a1e:	d0 40       	sbci	r29, 0x00	; 0
    9a20:	94 91       	lpm	r25, Z
    9a22:	c8 54       	subi	r28, 0x48	; 72
    9a24:	df 4f       	sbci	r29, 0xFF	; 255
    9a26:	48 81       	ld	r20, Y
    9a28:	59 81       	ldd	r21, Y+1	; 0x01
    9a2a:	c8 5b       	subi	r28, 0xB8	; 184
    9a2c:	d0 40       	sbci	r29, 0x00	; 0
    9a2e:	24 0f       	add	r18, r20
    9a30:	35 1f       	adc	r19, r21
    9a32:	b9 01       	movw	r22, r18
    9a34:	91 9f       	mul	r25, r17
    9a36:	60 0d       	add	r22, r0
    9a38:	71 1d       	adc	r23, r1
    9a3a:	11 24       	eor	r1, r1
    9a3c:	c2 54       	subi	r28, 0x42	; 66
    9a3e:	df 4f       	sbci	r29, 0xFF	; 255
    9a40:	79 83       	std	Y+1, r23	; 0x01
    9a42:	68 83       	st	Y, r22
    9a44:	ce 5b       	subi	r28, 0xBE	; 190
    9a46:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2070
          loop_t++;
    9a48:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2072
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9a4a:	c4 54       	subi	r28, 0x44	; 68
    9a4c:	df 4f       	sbci	r29, 0xFF	; 255
    9a4e:	e8 81       	ld	r30, Y
    9a50:	f9 81       	ldd	r31, Y+1	; 0x01
    9a52:	cc 5b       	subi	r28, 0xBC	; 188
    9a54:	d0 40       	sbci	r29, 0x00	; 0
    9a56:	94 91       	lpm	r25, Z
    9a58:	92 30       	cpi	r25, 0x02	; 2
    9a5a:	09 f0       	breq	.+2      	; 0x9a5e <draw_menu(bool)+0x1fe2>
    9a5c:	4b c0       	rjmp	.+150    	; 0x9af4 <draw_menu(bool)+0x2078>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2074
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9a5e:	ce 53       	subi	r28, 0x3E	; 62
    9a60:	df 4f       	sbci	r29, 0xFF	; 255
    9a62:	e8 81       	ld	r30, Y
    9a64:	f9 81       	ldd	r31, Y+1	; 0x01
    9a66:	c2 5c       	subi	r28, 0xC2	; 194
    9a68:	d0 40       	sbci	r29, 0x00	; 0
    9a6a:	25 91       	lpm	r18, Z+
    9a6c:	34 91       	lpm	r19, Z
    9a6e:	c3 53       	subi	r28, 0x33	; 51
    9a70:	df 4f       	sbci	r29, 0xFF	; 255
    9a72:	e8 81       	ld	r30, Y
    9a74:	f9 81       	ldd	r31, Y+1	; 0x01
    9a76:	cd 5c       	subi	r28, 0xCD	; 205
    9a78:	d0 40       	sbci	r29, 0x00	; 0
    9a7a:	94 91       	lpm	r25, Z
    9a7c:	c8 54       	subi	r28, 0x48	; 72
    9a7e:	df 4f       	sbci	r29, 0xFF	; 255
    9a80:	48 81       	ld	r20, Y
    9a82:	59 81       	ldd	r21, Y+1	; 0x01
    9a84:	c8 5b       	subi	r28, 0xB8	; 184
    9a86:	d0 40       	sbci	r29, 0x00	; 0
    9a88:	24 0f       	add	r18, r20
    9a8a:	35 1f       	adc	r19, r21
    9a8c:	b9 01       	movw	r22, r18
    9a8e:	91 9f       	mul	r25, r17
    9a90:	60 0d       	add	r22, r0
    9a92:	71 1d       	adc	r23, r1
    9a94:	11 24       	eor	r1, r1
    9a96:	c2 54       	subi	r28, 0x42	; 66
    9a98:	df 4f       	sbci	r29, 0xFF	; 255
    9a9a:	79 83       	std	Y+1, r23	; 0x01
    9a9c:	68 83       	st	Y, r22
    9a9e:	ce 5b       	subi	r28, 0xBE	; 190
    9aa0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2075
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9aa2:	f1 01       	movw	r30, r2
    9aa4:	25 91       	lpm	r18, Z+
    9aa6:	34 91       	lpm	r19, Z
    9aa8:	c6 53       	subi	r28, 0x36	; 54
    9aaa:	df 4f       	sbci	r29, 0xFF	; 255
    9aac:	e8 81       	ld	r30, Y
    9aae:	f9 81       	ldd	r31, Y+1	; 0x01
    9ab0:	ca 5c       	subi	r28, 0xCA	; 202
    9ab2:	d0 40       	sbci	r29, 0x00	; 0
    9ab4:	94 91       	lpm	r25, Z
    9ab6:	c6 54       	subi	r28, 0x46	; 70
    9ab8:	df 4f       	sbci	r29, 0xFF	; 255
    9aba:	48 81       	ld	r20, Y
    9abc:	59 81       	ldd	r21, Y+1	; 0x01
    9abe:	ca 5b       	subi	r28, 0xBA	; 186
    9ac0:	d0 40       	sbci	r29, 0x00	; 0
    9ac2:	24 0f       	add	r18, r20
    9ac4:	35 1f       	adc	r19, r21
    9ac6:	b9 01       	movw	r22, r18
    9ac8:	9f 9d       	mul	r25, r15
    9aca:	60 0d       	add	r22, r0
    9acc:	71 1d       	adc	r23, r1
    9ace:	11 24       	eor	r1, r1
    9ad0:	c0 54       	subi	r28, 0x40	; 64
    9ad2:	df 4f       	sbci	r29, 0xFF	; 255
    9ad4:	79 83       	std	Y+1, r23	; 0x01
    9ad6:	68 83       	st	Y, r22
    9ad8:	c0 5c       	subi	r28, 0xC0	; 192
    9ada:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2076
          loop_t++;
    9adc:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2077
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
    9ade:	c1 53       	subi	r28, 0x31	; 49
    9ae0:	df 4f       	sbci	r29, 0xFF	; 255
    9ae2:	e8 81       	ld	r30, Y
    9ae4:	f9 81       	ldd	r31, Y+1	; 0x01
    9ae6:	cf 5c       	subi	r28, 0xCF	; 207
    9ae8:	d0 40       	sbci	r29, 0x00	; 0
    9aea:	94 91       	lpm	r25, Z
    9aec:	19 17       	cp	r17, r25
    9aee:	10 f0       	brcs	.+4      	; 0x9af4 <draw_menu(bool)+0x2078>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2080
          {
            loop_t = 0;
            loop_r++;
    9af0:	f3 94       	inc	r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2079
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1))
          {
            loop_t = 0;
    9af2:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2083
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
    9af4:	9e 01       	movw	r18, r28
    9af6:	2f 57       	subi	r18, 0x7F	; 127
    9af8:	3f 4f       	sbci	r19, 0xFF	; 255
    9afa:	ae 01       	movw	r20, r28
    9afc:	4f 5f       	subi	r20, 0xFF	; 255
    9afe:	5f 4f       	sbci	r21, 0xFF	; 255
    9b00:	cd 54       	subi	r28, 0x4D	; 77
    9b02:	df 4f       	sbci	r29, 0xFF	; 255
    9b04:	68 81       	ld	r22, Y
    9b06:	c3 5b       	subi	r28, 0xB3	; 179
    9b08:	d0 40       	sbci	r29, 0x00	; 0
    9b0a:	ce 51       	subi	r28, 0x1E	; 30
    9b0c:	df 4f       	sbci	r29, 0xFF	; 255
    9b0e:	e8 81       	ld	r30, Y
    9b10:	f9 81       	ldd	r31, Y+1	; 0x01
    9b12:	c2 5e       	subi	r28, 0xE2	; 226
    9b14:	d0 40       	sbci	r29, 0x00	; 0
    9b16:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2084
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
    9b18:	ce 52       	subi	r28, 0x2E	; 46
    9b1a:	df 4f       	sbci	r29, 0xFF	; 255
    9b1c:	e8 81       	ld	r30, Y
    9b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    9b20:	c2 5d       	subi	r28, 0xD2	; 210
    9b22:	d0 40       	sbci	r29, 0x00	; 0
    9b24:	25 91       	lpm	r18, Z+
    9b26:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9b28:	c8 53       	subi	r28, 0x38	; 56
    9b2a:	df 4f       	sbci	r29, 0xFF	; 255
    9b2c:	e8 81       	ld	r30, Y
    9b2e:	f9 81       	ldd	r31, Y+1	; 0x01
    9b30:	c8 5c       	subi	r28, 0xC8	; 200
    9b32:	d0 40       	sbci	r29, 0x00	; 0
    9b34:	84 91       	lpm	r24, Z
    9b36:	cd 54       	subi	r28, 0x4D	; 77
    9b38:	df 4f       	sbci	r29, 0xFF	; 255
    9b3a:	68 81       	ld	r22, Y
    9b3c:	c3 5b       	subi	r28, 0xB3	; 179
    9b3e:	d0 40       	sbci	r29, 0x00	; 0
    9b40:	70 e0       	ldi	r23, 0x00	; 0
    9b42:	ce 54       	subi	r28, 0x4E	; 78
    9b44:	df 4f       	sbci	r29, 0xFF	; 255
    9b46:	48 81       	ld	r20, Y
    9b48:	c2 5b       	subi	r28, 0xB2	; 178
    9b4a:	d0 40       	sbci	r29, 0x00	; 0
    9b4c:	90 e0       	ldi	r25, 0x00	; 0
    9b4e:	f9 01       	movw	r30, r18
    9b50:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2089
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
    9b52:	cc 52       	subi	r28, 0x2C	; 44
    9b54:	df 4f       	sbci	r29, 0xFF	; 255
    9b56:	e8 81       	ld	r30, Y
    9b58:	f9 81       	ldd	r31, Y+1	; 0x01
    9b5a:	c4 5d       	subi	r28, 0xD4	; 212
    9b5c:	d0 40       	sbci	r29, 0x00	; 0
    9b5e:	a5 90       	lpm	r10, Z+
    9b60:	b4 90       	lpm	r11, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2088
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
    9b62:	ca 52       	subi	r28, 0x2A	; 42
    9b64:	df 4f       	sbci	r29, 0xFF	; 255
    9b66:	e8 81       	ld	r30, Y
    9b68:	f9 81       	ldd	r31, Y+1	; 0x01
    9b6a:	c6 5d       	subi	r28, 0xD6	; 214
    9b6c:	d0 40       	sbci	r29, 0x00	; 0
    9b6e:	c5 90       	lpm	r12, Z+
    9b70:	d4 90       	lpm	r13, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2087
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
    9b72:	c8 52       	subi	r28, 0x28	; 40
    9b74:	df 4f       	sbci	r29, 0xFF	; 255
    9b76:	e8 81       	ld	r30, Y
    9b78:	f9 81       	ldd	r31, Y+1	; 0x01
    9b7a:	c8 5d       	subi	r28, 0xD8	; 216
    9b7c:	d0 40       	sbci	r29, 0x00	; 0
    9b7e:	e4 90       	lpm	r14, Z
    9b80:	c6 52       	subi	r28, 0x26	; 38
    9b82:	df 4f       	sbci	r29, 0xFF	; 255
    9b84:	e8 81       	ld	r30, Y
    9b86:	f9 81       	ldd	r31, Y+1	; 0x01
    9b88:	ca 5d       	subi	r28, 0xDA	; 218
    9b8a:	d0 40       	sbci	r29, 0x00	; 0
    9b8c:	04 91       	lpm	r16, Z
    9b8e:	c4 52       	subi	r28, 0x24	; 36
    9b90:	df 4f       	sbci	r29, 0xFF	; 255
    9b92:	e8 81       	ld	r30, Y
    9b94:	f9 81       	ldd	r31, Y+1	; 0x01
    9b96:	cc 5d       	subi	r28, 0xDC	; 220
    9b98:	d0 40       	sbci	r29, 0x00	; 0
    9b9a:	25 91       	lpm	r18, Z+
    9b9c:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9b9e:	c2 52       	subi	r28, 0x22	; 34
    9ba0:	df 4f       	sbci	r29, 0xFF	; 255
    9ba2:	e8 81       	ld	r30, Y
    9ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    9ba6:	ce 5d       	subi	r28, 0xDE	; 222
    9ba8:	d0 40       	sbci	r29, 0x00	; 0
    9baa:	45 91       	lpm	r20, Z+
    9bac:	54 91       	lpm	r21, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2085
            loop_r++;
          }
        }
        ((ret_string_fptr)gss)(loop_i, menu_args1, str1, str2);
        rfnt = pgm_read_word(&dyn_select_box_1->get_status_fnt);
        state = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9bae:	88 24       	eor	r8, r8
    9bb0:	83 94       	inc	r8
    9bb2:	81 11       	cpse	r24, r1
    9bb4:	01 c0       	rjmp	.+2      	; 0x9bb8 <draw_menu(bool)+0x213c>
    9bb6:	81 2c       	mov	r8, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2086
        button_click_2(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), \
    9bb8:	cb 54       	subi	r28, 0x4B	; 75
    9bba:	df 4f       	sbci	r29, 0xFF	; 255
    9bbc:	f8 81       	ld	r31, Y
    9bbe:	c5 5b       	subi	r28, 0xB5	; 181
    9bc0:	d0 40       	sbci	r29, 0x00	; 0
    9bc2:	ff 93       	push	r31
    9bc4:	cc 54       	subi	r28, 0x4C	; 76
    9bc6:	df 4f       	sbci	r29, 0xFF	; 255
    9bc8:	68 81       	ld	r22, Y
    9bca:	c4 5b       	subi	r28, 0xB4	; 180
    9bcc:	d0 40       	sbci	r29, 0x00	; 0
    9bce:	6f 93       	push	r22
    9bd0:	81 e0       	ldi	r24, 0x01	; 1
    9bd2:	90 e0       	ldi	r25, 0x00	; 0
    9bd4:	8c 0f       	add	r24, r28
    9bd6:	9d 1f       	adc	r25, r29
    9bd8:	9f 93       	push	r25
    9bda:	8f 93       	push	r24
    9bdc:	c0 54       	subi	r28, 0x40	; 64
    9bde:	df 4f       	sbci	r29, 0xFF	; 255
    9be0:	68 81       	ld	r22, Y
    9be2:	79 81       	ldd	r23, Y+1	; 0x01
    9be4:	c0 5c       	subi	r28, 0xC0	; 192
    9be6:	d0 40       	sbci	r29, 0x00	; 0
    9be8:	c2 54       	subi	r28, 0x42	; 66
    9bea:	df 4f       	sbci	r29, 0xFF	; 255
    9bec:	88 81       	ld	r24, Y
    9bee:	99 81       	ldd	r25, Y+1	; 0x01
    9bf0:	ce 5b       	subi	r28, 0xBE	; 190
    9bf2:	d0 40       	sbci	r29, 0x00	; 0
    9bf4:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <button_click_2(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int, unsigned int, unsigned char, char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2090
                       pgm_read_word(&dyn_select_box_1->size_y), pgm_read_byte(&dyn_select_box_1->font_size_1), pgm_read_byte(&dyn_select_box_1->font_size_2), \
                       pgm_read_word(&dyn_select_box_1->color_active), \
                       pgm_read_word(&dyn_select_box_1->color_inactive), state,  str1, str2);
        loop_i++;
    9bf8:	ce 54       	subi	r28, 0x4E	; 78
    9bfa:	df 4f       	sbci	r29, 0xFF	; 255
    9bfc:	88 81       	ld	r24, Y
    9bfe:	c2 5b       	subi	r28, 0xB2	; 178
    9c00:	d0 40       	sbci	r29, 0x00	; 0
    9c02:	8f 5f       	subi	r24, 0xFF	; 255
    9c04:	ce 54       	subi	r28, 0x4E	; 78
    9c06:	df 4f       	sbci	r29, 0xFF	; 255
    9c08:	88 83       	st	Y, r24
    9c0a:	c2 5b       	subi	r28, 0xB2	; 178
    9c0c:	d0 40       	sbci	r29, 0x00	; 0
    9c0e:	0f 90       	pop	r0
    9c10:	0f 90       	pop	r0
    9c12:	0f 90       	pop	r0
    9c14:	0f 90       	pop	r0
    9c16:	91 ce       	rjmp	.-734    	; 0x993a <draw_menu(bool)+0x1ebe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2093
      }
    }
    if (click_x > 0 && click_y > 0)
    9c18:	cc 53       	subi	r28, 0x3C	; 60
    9c1a:	df 4f       	sbci	r29, 0xFF	; 255
    9c1c:	e8 81       	ld	r30, Y
    9c1e:	f9 81       	ldd	r31, Y+1	; 0x01
    9c20:	c4 5c       	subi	r28, 0xC4	; 196
    9c22:	d0 40       	sbci	r29, 0x00	; 0
    9c24:	ef 2b       	or	r30, r31
    9c26:	09 f4       	brne	.+2      	; 0x9c2a <draw_menu(bool)+0x21ae>
    9c28:	bb c1       	rjmp	.+886    	; 0x9fa0 <draw_menu(bool)+0x2524>
    9c2a:	ca 53       	subi	r28, 0x3A	; 58
    9c2c:	df 4f       	sbci	r29, 0xFF	; 255
    9c2e:	28 81       	ld	r18, Y
    9c30:	39 81       	ldd	r19, Y+1	; 0x01
    9c32:	c6 5c       	subi	r28, 0xC6	; 198
    9c34:	d0 40       	sbci	r29, 0x00	; 0
    9c36:	23 2b       	or	r18, r19
    9c38:	09 f4       	brne	.+2      	; 0x9c3c <draw_menu(bool)+0x21c0>
    9c3a:	b2 c1       	rjmp	.+868    	; 0x9fa0 <draw_menu(bool)+0x2524>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2095
    {
      loop_i = 0;
    9c3c:	ce 54       	subi	r28, 0x4E	; 78
    9c3e:	df 4f       	sbci	r29, 0xFF	; 255
    9c40:	18 82       	st	Y, r1
    9c42:	c2 5b       	subi	r28, 0xB2	; 178
    9c44:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2098
      loop_t = 0;
      loop_r = 0;
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
    9c46:	f2 01       	movw	r30, r4
    9c48:	e0 5c       	subi	r30, 0xC0	; 192
    9c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    9c4c:	e6 0d       	add	r30, r6
    9c4e:	f7 1d       	adc	r31, r7
    9c50:	25 91       	lpm	r18, Z+
    9c52:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2099
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9c54:	c2 01       	movw	r24, r4
    9c56:	85 5c       	subi	r24, 0xC5	; 197
    9c58:	9d 4f       	sbci	r25, 0xFD	; 253
    9c5a:	a3 01       	movw	r20, r6
    9c5c:	48 0f       	add	r20, r24
    9c5e:	59 1f       	adc	r21, r25
    9c60:	ce 53       	subi	r28, 0x3E	; 62
    9c62:	df 4f       	sbci	r29, 0xFF	; 255
    9c64:	59 83       	std	Y+1, r21	; 0x01
    9c66:	48 83       	st	Y, r20
    9c68:	c2 5c       	subi	r28, 0xC2	; 194
    9c6a:	d0 40       	sbci	r29, 0x00	; 0
    9c6c:	fa 01       	movw	r30, r20
    9c6e:	84 91       	lpm	r24, Z
    9c70:	cd 54       	subi	r28, 0x4D	; 77
    9c72:	df 4f       	sbci	r29, 0xFF	; 255
    9c74:	68 81       	ld	r22, Y
    9c76:	c3 5b       	subi	r28, 0xB3	; 179
    9c78:	d0 40       	sbci	r29, 0x00	; 0
    9c7a:	70 e0       	ldi	r23, 0x00	; 0
    9c7c:	40 e0       	ldi	r20, 0x00	; 0
    9c7e:	90 e0       	ldi	r25, 0x00	; 0
    9c80:	f9 01       	movw	r30, r18
    9c82:	19 95       	eicall
    9c84:	cf 54       	subi	r28, 0x4F	; 79
    9c86:	df 4f       	sbci	r29, 0xFF	; 255
    9c88:	88 83       	st	Y, r24
    9c8a:	c1 5b       	subi	r28, 0xB1	; 177
    9c8c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2100
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
    9c8e:	f2 01       	movw	r30, r4
    9c90:	e6 5c       	subi	r30, 0xC6	; 198
    9c92:	fd 4f       	sbci	r31, 0xFD	; 253
    9c94:	e6 0d       	add	r30, r6
    9c96:	f7 1d       	adc	r31, r7
    9c98:	44 91       	lpm	r20, Z
    9c9a:	c2 01       	movw	r24, r4
    9c9c:	88 5c       	subi	r24, 0xC8	; 200
    9c9e:	9d 4f       	sbci	r25, 0xFD	; 253
    9ca0:	93 01       	movw	r18, r6
    9ca2:	28 0f       	add	r18, r24
    9ca4:	39 1f       	adc	r19, r25
    9ca6:	c3 53       	subi	r28, 0x33	; 51
    9ca8:	df 4f       	sbci	r29, 0xFF	; 255
    9caa:	39 83       	std	Y+1, r19	; 0x01
    9cac:	28 83       	st	Y, r18
    9cae:	cd 5c       	subi	r28, 0xCD	; 205
    9cb0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2101
      if (slider_active != MENU_SLIDER_OFF)
    9cb2:	4f 3f       	cpi	r20, 0xFF	; 255
    9cb4:	99 f0       	breq	.+38     	; 0x9cdc <draw_menu(bool)+0x2260>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2102
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
    9cb6:	f9 01       	movw	r30, r18
    9cb8:	24 91       	lpm	r18, Z
    9cba:	f2 01       	movw	r30, r4
    9cbc:	e7 5c       	subi	r30, 0xC7	; 199
    9cbe:	fd 4f       	sbci	r31, 0xFD	; 253
    9cc0:	e6 0d       	add	r30, r6
    9cc2:	f7 1d       	adc	r31, r7
    9cc4:	e4 91       	lpm	r30, Z
    9cc6:	2e 9f       	mul	r18, r30
    9cc8:	20 2d       	mov	r18, r0
    9cca:	11 24       	eor	r1, r1
    9ccc:	be 01       	movw	r22, r28
    9cce:	6f 54       	subi	r22, 0x4F	; 79
    9cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    9cd2:	ce 01       	movw	r24, r28
    9cd4:	8e 54       	subi	r24, 0x4E	; 78
    9cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9cd8:	0e 94 ef 24 	call	0x49de	; 0x49de <process_display_element_slider(unsigned char*, unsigned char*, unsigned char, unsigned char)>
    9cdc:	ce 54       	subi	r28, 0x4E	; 78
    9cde:	df 4f       	sbci	r29, 0xFF	; 255
    9ce0:	88 80       	ld	r8, Y
    9ce2:	c2 5b       	subi	r28, 0xB2	; 178
    9ce4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
      while (loop_i < loop_cnt)
    9ce6:	cf 54       	subi	r28, 0x4F	; 79
    9ce8:	df 4f       	sbci	r29, 0xFF	; 255
    9cea:	28 80       	ld	r2, Y
    9cec:	c1 5b       	subi	r28, 0xB1	; 177
    9cee:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9cf0:	c2 01       	movw	r24, r4
    9cf2:	89 5c       	subi	r24, 0xC9	; 201
    9cf4:	9d 4f       	sbci	r25, 0xFD	; 253
    9cf6:	93 01       	movw	r18, r6
    9cf8:	28 0f       	add	r18, r24
    9cfa:	39 1f       	adc	r19, r25
    9cfc:	c4 54       	subi	r28, 0x44	; 68
    9cfe:	df 4f       	sbci	r29, 0xFF	; 255
    9d00:	39 83       	std	Y+1, r19	; 0x01
    9d02:	28 83       	st	Y, r18
    9d04:	cc 5b       	subi	r28, 0xBC	; 188
    9d06:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9d08:	62 01       	movw	r12, r4
    9d0a:	39 ed       	ldi	r19, 0xD9	; 217
    9d0c:	c3 1a       	sub	r12, r19
    9d0e:	3d ef       	ldi	r19, 0xFD	; 253
    9d10:	d3 0a       	sbc	r13, r19
    9d12:	c6 0c       	add	r12, r6
    9d14:	d7 1c       	adc	r13, r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9d16:	52 01       	movw	r10, r4
    9d18:	47 ed       	ldi	r20, 0xD7	; 215
    9d1a:	a4 1a       	sub	r10, r20
    9d1c:	4d ef       	ldi	r20, 0xFD	; 253
    9d1e:	b4 0a       	sbc	r11, r20
    9d20:	a6 0c       	add	r10, r6
    9d22:	b7 1c       	adc	r11, r7
    9d24:	01 97       	sbiw	r24, 0x01	; 1
    9d26:	b3 01       	movw	r22, r6
    9d28:	68 0f       	add	r22, r24
    9d2a:	79 1f       	adc	r23, r25
    9d2c:	c8 53       	subi	r28, 0x38	; 56
    9d2e:	df 4f       	sbci	r29, 0xFF	; 255
    9d30:	79 83       	std	Y+1, r23	; 0x01
    9d32:	68 83       	st	Y, r22
    9d34:	c8 5c       	subi	r28, 0xC8	; 200
    9d36:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
          loop_t++;
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9d38:	01 97       	sbiw	r24, 0x01	; 1
    9d3a:	f3 01       	movw	r30, r6
    9d3c:	e8 0f       	add	r30, r24
    9d3e:	f9 1f       	adc	r31, r25
    9d40:	c6 53       	subi	r28, 0x36	; 54
    9d42:	df 4f       	sbci	r29, 0xFF	; 255
    9d44:	f9 83       	std	Y+1, r31	; 0x01
    9d46:	e8 83       	st	Y, r30
    9d48:	ca 5c       	subi	r28, 0xCA	; 202
    9d4a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9d4c:	08 97       	sbiw	r24, 0x08	; 8
    9d4e:	93 01       	movw	r18, r6
    9d50:	28 0f       	add	r18, r24
    9d52:	39 1f       	adc	r19, r25
    9d54:	c1 53       	subi	r28, 0x31	; 49
    9d56:	df 4f       	sbci	r29, 0xFF	; 255
    9d58:	39 83       	std	Y+1, r19	; 0x01
    9d5a:	28 83       	st	Y, r18
    9d5c:	cf 5c       	subi	r28, 0xCF	; 207
    9d5e:	d0 40       	sbci	r29, 0x00	; 0
    9d60:	02 97       	sbiw	r24, 0x02	; 2
    9d62:	a3 01       	movw	r20, r6
    9d64:	48 0f       	add	r20, r24
    9d66:	59 1f       	adc	r21, r25
    9d68:	ce 52       	subi	r28, 0x2E	; 46
    9d6a:	df 4f       	sbci	r29, 0xFF	; 255
    9d6c:	59 83       	std	Y+1, r21	; 0x01
    9d6e:	48 83       	st	Y, r20
    9d70:	c2 5d       	subi	r28, 0xD2	; 210
    9d72:	d0 40       	sbci	r29, 0x00	; 0
    9d74:	31 2c       	mov	r3, r1
    9d76:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2103
      rfnt =  pgm_read_word(&dyn_select_box_1->function_for_max_items);
      loop_cnt = ((ret_fptr)rfnt)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
      slider_active = pgm_read_byte(&dyn_select_box_1->slider_args);
      if (slider_active != MENU_SLIDER_OFF)
        process_display_element_slider(&loop_i, &loop_cnt, slider_active, pgm_read_byte(&dyn_select_box_1->max_items_count)*pgm_read_byte(&dyn_select_box_1->max_row_count));
      while (loop_i < loop_cnt)
    9d78:	82 14       	cp	r8, r2
    9d7a:	08 f0       	brcs	.+2      	; 0x9d7e <draw_menu(bool)+0x2302>
    9d7c:	11 c1       	rjmp	.+546    	; 0x9fa0 <draw_menu(bool)+0x2524>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2105
      {
        if (pgm_read_byte(&dyn_select_box_1->direction) == VERTICAL)
    9d7e:	c4 54       	subi	r28, 0x44	; 68
    9d80:	df 4f       	sbci	r29, 0xFF	; 255
    9d82:	e8 81       	ld	r30, Y
    9d84:	f9 81       	ldd	r31, Y+1	; 0x01
    9d86:	cc 5b       	subi	r28, 0xBC	; 188
    9d88:	d0 40       	sbci	r29, 0x00	; 0
    9d8a:	84 91       	lpm	r24, Z
    9d8c:	81 11       	cpse	r24, r1
    9d8e:	2f c0       	rjmp	.+94     	; 0x9dee <draw_menu(bool)+0x2372>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2107
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x);
    9d90:	f6 01       	movw	r30, r12
    9d92:	85 91       	lpm	r24, Z+
    9d94:	94 91       	lpm	r25, Z
    9d96:	c8 54       	subi	r28, 0x48	; 72
    9d98:	df 4f       	sbci	r29, 0xFF	; 255
    9d9a:	28 81       	ld	r18, Y
    9d9c:	39 81       	ldd	r19, Y+1	; 0x01
    9d9e:	c8 5b       	subi	r28, 0xB8	; 184
    9da0:	d0 40       	sbci	r29, 0x00	; 0
    9da2:	28 0f       	add	r18, r24
    9da4:	39 1f       	adc	r19, r25
    9da6:	c2 54       	subi	r28, 0x42	; 66
    9da8:	df 4f       	sbci	r29, 0xFF	; 255
    9daa:	39 83       	std	Y+1, r19	; 0x01
    9dac:	28 83       	st	Y, r18
    9dae:	ce 5b       	subi	r28, 0xBE	; 190
    9db0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2108
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_t);
    9db2:	f5 01       	movw	r30, r10
    9db4:	85 91       	lpm	r24, Z+
    9db6:	94 91       	lpm	r25, Z
    9db8:	c8 53       	subi	r28, 0x38	; 56
    9dba:	df 4f       	sbci	r29, 0xFF	; 255
    9dbc:	e8 81       	ld	r30, Y
    9dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    9dc0:	c8 5c       	subi	r28, 0xC8	; 200
    9dc2:	d0 40       	sbci	r29, 0x00	; 0
    9dc4:	24 91       	lpm	r18, Z
    9dc6:	c6 54       	subi	r28, 0x46	; 70
    9dc8:	df 4f       	sbci	r29, 0xFF	; 255
    9dca:	48 81       	ld	r20, Y
    9dcc:	59 81       	ldd	r21, Y+1	; 0x01
    9dce:	ca 5b       	subi	r28, 0xBA	; 186
    9dd0:	d0 40       	sbci	r29, 0x00	; 0
    9dd2:	84 0f       	add	r24, r20
    9dd4:	95 1f       	adc	r25, r21
    9dd6:	bc 01       	movw	r22, r24
    9dd8:	29 9d       	mul	r18, r9
    9dda:	60 0d       	add	r22, r0
    9ddc:	71 1d       	adc	r23, r1
    9dde:	11 24       	eor	r1, r1
    9de0:	c0 54       	subi	r28, 0x40	; 64
    9de2:	df 4f       	sbci	r29, 0xFF	; 255
    9de4:	79 83       	std	Y+1, r23	; 0x01
    9de6:	68 83       	st	Y, r22
    9de8:	c0 5c       	subi	r28, 0xC0	; 192
    9dea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2109
          loop_t++;
    9dec:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2111
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL)
    9dee:	c4 54       	subi	r28, 0x44	; 68
    9df0:	df 4f       	sbci	r29, 0xFF	; 255
    9df2:	e8 81       	ld	r30, Y
    9df4:	f9 81       	ldd	r31, Y+1	; 0x01
    9df6:	cc 5b       	subi	r28, 0xBC	; 188
    9df8:	d0 40       	sbci	r29, 0x00	; 0
    9dfa:	84 91       	lpm	r24, Z
    9dfc:	81 30       	cpi	r24, 0x01	; 1
    9dfe:	79 f5       	brne	.+94     	; 0x9e5e <draw_menu(bool)+0x23e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2113
        {
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y);
    9e00:	f5 01       	movw	r30, r10
    9e02:	85 91       	lpm	r24, Z+
    9e04:	94 91       	lpm	r25, Z
    9e06:	c6 54       	subi	r28, 0x46	; 70
    9e08:	df 4f       	sbci	r29, 0xFF	; 255
    9e0a:	28 81       	ld	r18, Y
    9e0c:	39 81       	ldd	r19, Y+1	; 0x01
    9e0e:	ca 5b       	subi	r28, 0xBA	; 186
    9e10:	d0 40       	sbci	r29, 0x00	; 0
    9e12:	28 0f       	add	r18, r24
    9e14:	39 1f       	adc	r19, r25
    9e16:	c0 54       	subi	r28, 0x40	; 64
    9e18:	df 4f       	sbci	r29, 0xFF	; 255
    9e1a:	39 83       	std	Y+1, r19	; 0x01
    9e1c:	28 83       	st	Y, r18
    9e1e:	c0 5c       	subi	r28, 0xC0	; 192
    9e20:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2114
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9e22:	f6 01       	movw	r30, r12
    9e24:	85 91       	lpm	r24, Z+
    9e26:	94 91       	lpm	r25, Z
    9e28:	c6 53       	subi	r28, 0x36	; 54
    9e2a:	df 4f       	sbci	r29, 0xFF	; 255
    9e2c:	e8 81       	ld	r30, Y
    9e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    9e30:	ca 5c       	subi	r28, 0xCA	; 202
    9e32:	d0 40       	sbci	r29, 0x00	; 0
    9e34:	24 91       	lpm	r18, Z
    9e36:	c8 54       	subi	r28, 0x48	; 72
    9e38:	df 4f       	sbci	r29, 0xFF	; 255
    9e3a:	48 81       	ld	r20, Y
    9e3c:	59 81       	ldd	r21, Y+1	; 0x01
    9e3e:	c8 5b       	subi	r28, 0xB8	; 184
    9e40:	d0 40       	sbci	r29, 0x00	; 0
    9e42:	84 0f       	add	r24, r20
    9e44:	95 1f       	adc	r25, r21
    9e46:	bc 01       	movw	r22, r24
    9e48:	29 9d       	mul	r18, r9
    9e4a:	60 0d       	add	r22, r0
    9e4c:	71 1d       	adc	r23, r1
    9e4e:	11 24       	eor	r1, r1
    9e50:	c2 54       	subi	r28, 0x42	; 66
    9e52:	df 4f       	sbci	r29, 0xFF	; 255
    9e54:	79 83       	std	Y+1, r23	; 0x01
    9e56:	68 83       	st	Y, r22
    9e58:	ce 5b       	subi	r28, 0xBE	; 190
    9e5a:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2115
          loop_t++;
    9e5c:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2117
        }
        if (pgm_read_byte(&dyn_select_box_1->direction) == HORIZONTAL_NEW_LINE)
    9e5e:	c4 54       	subi	r28, 0x44	; 68
    9e60:	df 4f       	sbci	r29, 0xFF	; 255
    9e62:	e8 81       	ld	r30, Y
    9e64:	f9 81       	ldd	r31, Y+1	; 0x01
    9e66:	cc 5b       	subi	r28, 0xBC	; 188
    9e68:	d0 40       	sbci	r29, 0x00	; 0
    9e6a:	84 91       	lpm	r24, Z
    9e6c:	82 30       	cpi	r24, 0x02	; 2
    9e6e:	09 f0       	breq	.+2      	; 0x9e72 <draw_menu(bool)+0x23f6>
    9e70:	46 c0       	rjmp	.+140    	; 0x9efe <draw_menu(bool)+0x2482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2119
        {
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
    9e72:	f6 01       	movw	r30, r12
    9e74:	85 91       	lpm	r24, Z+
    9e76:	94 91       	lpm	r25, Z
    9e78:	c6 53       	subi	r28, 0x36	; 54
    9e7a:	df 4f       	sbci	r29, 0xFF	; 255
    9e7c:	e8 81       	ld	r30, Y
    9e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    9e80:	ca 5c       	subi	r28, 0xCA	; 202
    9e82:	d0 40       	sbci	r29, 0x00	; 0
    9e84:	24 91       	lpm	r18, Z
    9e86:	c8 54       	subi	r28, 0x48	; 72
    9e88:	df 4f       	sbci	r29, 0xFF	; 255
    9e8a:	48 81       	ld	r20, Y
    9e8c:	59 81       	ldd	r21, Y+1	; 0x01
    9e8e:	c8 5b       	subi	r28, 0xB8	; 184
    9e90:	d0 40       	sbci	r29, 0x00	; 0
    9e92:	84 0f       	add	r24, r20
    9e94:	95 1f       	adc	r25, r21
    9e96:	bc 01       	movw	r22, r24
    9e98:	29 9d       	mul	r18, r9
    9e9a:	60 0d       	add	r22, r0
    9e9c:	71 1d       	adc	r23, r1
    9e9e:	11 24       	eor	r1, r1
    9ea0:	c2 54       	subi	r28, 0x42	; 66
    9ea2:	df 4f       	sbci	r29, 0xFF	; 255
    9ea4:	79 83       	std	Y+1, r23	; 0x01
    9ea6:	68 83       	st	Y, r22
    9ea8:	ce 5b       	subi	r28, 0xBE	; 190
    9eaa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2120
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
    9eac:	f5 01       	movw	r30, r10
    9eae:	85 91       	lpm	r24, Z+
    9eb0:	94 91       	lpm	r25, Z
    9eb2:	c8 53       	subi	r28, 0x38	; 56
    9eb4:	df 4f       	sbci	r29, 0xFF	; 255
    9eb6:	e8 81       	ld	r30, Y
    9eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    9eba:	c8 5c       	subi	r28, 0xC8	; 200
    9ebc:	d0 40       	sbci	r29, 0x00	; 0
    9ebe:	24 91       	lpm	r18, Z
    9ec0:	c6 54       	subi	r28, 0x46	; 70
    9ec2:	df 4f       	sbci	r29, 0xFF	; 255
    9ec4:	48 81       	ld	r20, Y
    9ec6:	59 81       	ldd	r21, Y+1	; 0x01
    9ec8:	ca 5b       	subi	r28, 0xBA	; 186
    9eca:	d0 40       	sbci	r29, 0x00	; 0
    9ecc:	84 0f       	add	r24, r20
    9ece:	95 1f       	adc	r25, r21
    9ed0:	bc 01       	movw	r22, r24
    9ed2:	23 9d       	mul	r18, r3
    9ed4:	60 0d       	add	r22, r0
    9ed6:	71 1d       	adc	r23, r1
    9ed8:	11 24       	eor	r1, r1
    9eda:	c0 54       	subi	r28, 0x40	; 64
    9edc:	df 4f       	sbci	r29, 0xFF	; 255
    9ede:	79 83       	std	Y+1, r23	; 0x01
    9ee0:	68 83       	st	Y, r22
    9ee2:	c0 5c       	subi	r28, 0xC0	; 192
    9ee4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2121
          loop_t++;
    9ee6:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2122
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
    9ee8:	c3 53       	subi	r28, 0x33	; 51
    9eea:	df 4f       	sbci	r29, 0xFF	; 255
    9eec:	e8 81       	ld	r30, Y
    9eee:	f9 81       	ldd	r31, Y+1	; 0x01
    9ef0:	cd 5c       	subi	r28, 0xCD	; 205
    9ef2:	d0 40       	sbci	r29, 0x00	; 0
    9ef4:	84 91       	lpm	r24, Z
    9ef6:	98 16       	cp	r9, r24
    9ef8:	10 f0       	brcs	.+4      	; 0x9efe <draw_menu(bool)+0x2482>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2125
          {
            loop_t = 0;
            loop_r++;
    9efa:	33 94       	inc	r3
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2124
          new_x = global_x + pgm_read_word(&dyn_select_box_1->first_x) + (pgm_read_byte(&dyn_select_box_1->step_x) * loop_t);
          new_y = global_y + pgm_read_word(&dyn_select_box_1->first_y) + (pgm_read_byte(&dyn_select_box_1->step_y) * loop_r);
          loop_t++;
          if (loop_t > (pgm_read_byte(&dyn_select_box_1->max_items_count) - 1) )
          {
            loop_t = 0;
    9efc:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9efe:	c1 53       	subi	r28, 0x31	; 49
    9f00:	df 4f       	sbci	r29, 0xFF	; 255
    9f02:	e8 81       	ld	r30, Y
    9f04:	f9 81       	ldd	r31, Y+1	; 0x01
    9f06:	cf 5c       	subi	r28, 0xCF	; 207
    9f08:	d0 40       	sbci	r29, 0x00	; 0
    9f0a:	25 91       	lpm	r18, Z+
    9f0c:	34 91       	lpm	r19, Z
    9f0e:	ce 52       	subi	r28, 0x2E	; 46
    9f10:	df 4f       	sbci	r29, 0xFF	; 255
    9f12:	e8 81       	ld	r30, Y
    9f14:	f9 81       	ldd	r31, Y+1	; 0x01
    9f16:	c2 5d       	subi	r28, 0xD2	; 210
    9f18:	d0 40       	sbci	r29, 0x00	; 0
    9f1a:	45 91       	lpm	r20, Z+
    9f1c:	54 91       	lpm	r21, Z
    9f1e:	ca 53       	subi	r28, 0x3A	; 58
    9f20:	df 4f       	sbci	r29, 0xFF	; 255
    9f22:	e8 80       	ld	r14, Y
    9f24:	f9 80       	ldd	r15, Y+1	; 0x01
    9f26:	c6 5c       	subi	r28, 0xC6	; 198
    9f28:	d0 40       	sbci	r29, 0x00	; 0
    9f2a:	cc 53       	subi	r28, 0x3C	; 60
    9f2c:	df 4f       	sbci	r29, 0xFF	; 255
    9f2e:	08 81       	ld	r16, Y
    9f30:	19 81       	ldd	r17, Y+1	; 0x01
    9f32:	c4 5c       	subi	r28, 0xC4	; 196
    9f34:	d0 40       	sbci	r29, 0x00	; 0
    9f36:	c0 54       	subi	r28, 0x40	; 64
    9f38:	df 4f       	sbci	r29, 0xFF	; 255
    9f3a:	68 81       	ld	r22, Y
    9f3c:	79 81       	ldd	r23, Y+1	; 0x01
    9f3e:	c0 5c       	subi	r28, 0xC0	; 192
    9f40:	d0 40       	sbci	r29, 0x00	; 0
    9f42:	c2 54       	subi	r28, 0x42	; 66
    9f44:	df 4f       	sbci	r29, 0xFF	; 255
    9f46:	88 81       	ld	r24, Y
    9f48:	99 81       	ldd	r25, Y+1	; 0x01
    9f4a:	ce 5b       	subi	r28, 0xBE	; 190
    9f4c:	d0 40       	sbci	r29, 0x00	; 0
    9f4e:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <button_click_touch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    9f52:	18 2f       	mov	r17, r24
    9f54:	81 e0       	ldi	r24, 0x01	; 1
    9f56:	88 0d       	add	r24, r8
    9f58:	11 23       	and	r17, r17
    9f5a:	71 f1       	breq	.+92     	; 0x9fb8 <draw_menu(bool)+0x253c>
    9f5c:	ce 54       	subi	r28, 0x4E	; 78
    9f5e:	df 4f       	sbci	r29, 0xFF	; 255
    9f60:	88 82       	st	Y, r8
    9f62:	c2 5b       	subi	r28, 0xB2	; 178
    9f64:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2130
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
    9f66:	f2 01       	movw	r30, r4
    9f68:	e2 5c       	subi	r30, 0xC2	; 194
    9f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    9f6c:	e6 0d       	add	r30, r6
    9f6e:	f7 1d       	adc	r31, r7
    9f70:	25 91       	lpm	r18, Z+
    9f72:	34 91       	lpm	r19, Z
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2131
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
    9f74:	ce 53       	subi	r28, 0x3E	; 62
    9f76:	df 4f       	sbci	r29, 0xFF	; 255
    9f78:	e8 81       	ld	r30, Y
    9f7a:	f9 81       	ldd	r31, Y+1	; 0x01
    9f7c:	c2 5c       	subi	r28, 0xC2	; 194
    9f7e:	d0 40       	sbci	r29, 0x00	; 0
    9f80:	84 91       	lpm	r24, Z
    9f82:	cd 54       	subi	r28, 0x4D	; 77
    9f84:	df 4f       	sbci	r29, 0xFF	; 255
    9f86:	68 81       	ld	r22, Y
    9f88:	c3 5b       	subi	r28, 0xB3	; 179
    9f8a:	d0 40       	sbci	r29, 0x00	; 0
    9f8c:	70 e0       	ldi	r23, 0x00	; 0
    9f8e:	48 2d       	mov	r20, r8
    9f90:	90 e0       	ldi	r25, 0x00	; 0
    9f92:	f9 01       	movw	r30, r18
    9f94:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
          ret = true;
    9f96:	c4 53       	subi	r28, 0x34	; 52
    9f98:	df 4f       	sbci	r29, 0xFF	; 255
    9f9a:	18 83       	st	Y, r17
    9f9c:	cc 5c       	subi	r28, 0xCC	; 204
    9f9e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2043
        loop_i++;
      }
    }
  }
  if (ret == true)  goto draw_menu_end;
  for (uint8_t idx = 0; idx < pgm_read_byte(&current->len_dyn_select_box_1); idx++)
    9fa0:	ca 54       	subi	r28, 0x4A	; 74
    9fa2:	df 4f       	sbci	r29, 0xFF	; 255
    9fa4:	f8 81       	ld	r31, Y
    9fa6:	c6 5b       	subi	r28, 0xB6	; 182
    9fa8:	d0 40       	sbci	r29, 0x00	; 0
    9faa:	ff 5f       	subi	r31, 0xFF	; 255
    9fac:	ca 54       	subi	r28, 0x4A	; 74
    9fae:	df 4f       	sbci	r29, 0xFF	; 255
    9fb0:	f8 83       	st	Y, r31
    9fb2:	c6 5b       	subi	r28, 0xB6	; 182
    9fb4:	d0 40       	sbci	r29, 0x00	; 0
    9fb6:	c8 cb       	rjmp	.-2160   	; 0x9748 <draw_menu(bool)+0x1ccc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2128
          {
            loop_t = 0;
            loop_r++;
          }
        }
        if (button_click_touch(new_x, new_y, pgm_read_word(&dyn_select_box_1->size_x), pgm_read_word(&dyn_select_box_1->size_y), click_x, click_y) == true)
    9fb8:	88 2e       	mov	r8, r24
    9fba:	de ce       	rjmp	.-580    	; 0x9d78 <draw_menu(bool)+0x22fc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2132
        {
          fntargs =  pgm_read_word(&dyn_select_box_1->dyn_symbol_onclick);
          ((fptr_args)fntargs)(pgm_read_byte(&dyn_select_box_1->args), menu_args1, loop_i);
          ret = true;
    9fbc:	21 e0       	ldi	r18, 0x01	; 1
    9fbe:	c4 53       	subi	r28, 0x34	; 52
    9fc0:	df 4f       	sbci	r29, 0xFF	; 255
    9fc2:	28 83       	st	Y, r18
    9fc4:	cc 5c       	subi	r28, 0xCC	; 204
    9fc6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2143
  }


draw_menu_end:
  return ret;
}
    9fc8:	c4 53       	subi	r28, 0x34	; 52
    9fca:	df 4f       	sbci	r29, 0xFF	; 255
    9fcc:	88 81       	ld	r24, Y
    9fce:	cc 5c       	subi	r28, 0xCC	; 204
    9fd0:	d0 40       	sbci	r29, 0x00	; 0
    9fd2:	cd 51       	subi	r28, 0x1D	; 29
    9fd4:	df 4f       	sbci	r29, 0xFF	; 255
    9fd6:	0f b6       	in	r0, 0x3f	; 63
    9fd8:	f8 94       	cli
    9fda:	de bf       	out	0x3e, r29	; 62
    9fdc:	0f be       	out	0x3f, r0	; 63
    9fde:	cd bf       	out	0x3d, r28	; 61
    9fe0:	df 91       	pop	r29
    9fe2:	cf 91       	pop	r28
    9fe4:	1f 91       	pop	r17
    9fe6:	0f 91       	pop	r16
    9fe8:	ff 90       	pop	r15
    9fea:	ef 90       	pop	r14
    9fec:	df 90       	pop	r13
    9fee:	cf 90       	pop	r12
    9ff0:	bf 90       	pop	r11
    9ff2:	af 90       	pop	r10
    9ff4:	9f 90       	pop	r9
    9ff6:	8f 90       	pop	r8
    9ff8:	7f 90       	pop	r7
    9ffa:	6f 90       	pop	r6
    9ffc:	5f 90       	pop	r5
    9ffe:	4f 90       	pop	r4
    a000:	3f 90       	pop	r3
    a002:	2f 90       	pop	r2
    a004:	08 95       	ret

0000a006 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_weekhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:371
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day );
}
//// nastavi jaky v jakych dnech program plati
void thermostat_program_set_week(uint8_t program_id, uint8_t interval_id, uint8_t week)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_week_day, week);
    a006:	2d e4       	ldi	r18, 0x4D	; 77
    a008:	82 9f       	mul	r24, r18
    a00a:	c0 01       	movw	r24, r0
    a00c:	11 24       	eor	r1, r1
    a00e:	26 e0       	ldi	r18, 0x06	; 6
    a010:	62 9f       	mul	r22, r18
    a012:	80 0d       	add	r24, r0
    a014:	91 1d       	adc	r25, r1
    a016:	11 24       	eor	r1, r1
    a018:	64 2f       	mov	r22, r20
    a01a:	8e 50       	subi	r24, 0x0E	; 14
    a01c:	9e 4f       	sbci	r25, 0xFE	; 254
    a01e:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a022 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>:
_Z32thermostat_program_set_thresholdhhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:330
  ret = (EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1) << 8)  + EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1);
  return ret;
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
    a022:	1f 93       	push	r17
    a024:	cf 93       	push	r28
    a026:	df 93       	push	r29
    a028:	14 2f       	mov	r17, r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:331
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
    a02a:	9d e4       	ldi	r25, 0x4D	; 77
    a02c:	89 9f       	mul	r24, r25
    a02e:	e0 01       	movw	r28, r0
    a030:	11 24       	eor	r1, r1
    a032:	cf 50       	subi	r28, 0x0F	; 15
    a034:	de 4f       	sbci	r29, 0xFE	; 254
    a036:	86 e0       	ldi	r24, 0x06	; 6
    a038:	68 9f       	mul	r22, r24
    a03a:	c0 0d       	add	r28, r0
    a03c:	d1 1d       	adc	r29, r1
    a03e:	11 24       	eor	r1, r1
    a040:	65 2f       	mov	r22, r21
    a042:	ce 01       	movw	r24, r28
    a044:	05 96       	adiw	r24, 0x05	; 5
    a046:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a04a:	61 2f       	mov	r22, r17
    a04c:	ce 01       	movw	r24, r28
    a04e:	04 96       	adiw	r24, 0x04	; 4
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:333
}
    a050:	df 91       	pop	r29
    a052:	cf 91       	pop	r28
    a054:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:332
}
//// nastavi rozhodovaci uroven termostatu
void thermostat_program_set_threshold(uint8_t program_id, uint8_t interval_id, uint16_t threshold)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_high_1, ((threshold >> 8) & 0xff));
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_threshold_low_1, (threshold & 0xff));
    a056:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a05a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z27thermostat_program_set_timehhhhhhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:312
  *stop_min = (stop & 0b00000011) * 15;
  *active = start & 0b00000001;
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
    a05a:	cf 92       	push	r12
    a05c:	ef 92       	push	r14
    a05e:	0f 93       	push	r16
    a060:	1f 93       	push	r17
    a062:	cf 93       	push	r28
    a064:	df 93       	push	r29
    a066:	c8 2f       	mov	r28, r24
    a068:	56 2f       	mov	r21, r22
    a06a:	8e 2d       	mov	r24, r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:315
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
    a06c:	3f e0       	ldi	r19, 0x0F	; 15
    a06e:	63 2f       	mov	r22, r19
    a070:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
    a074:	83 70       	andi	r24, 0x03	; 3
    a076:	98 e0       	ldi	r25, 0x08	; 8
    a078:	09 9f       	mul	r16, r25
    a07a:	80 01       	movw	r16, r0
    a07c:	11 24       	eor	r1, r1
    a07e:	08 0f       	add	r16, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a080:	8d e4       	ldi	r24, 0x4D	; 77
    a082:	c8 9f       	mul	r28, r24
    a084:	e0 01       	movw	r28, r0
    a086:	11 24       	eor	r1, r1
    a088:	cf 50       	subi	r28, 0x0F	; 15
    a08a:	de 4f       	sbci	r29, 0xFE	; 254
    a08c:	96 e0       	ldi	r25, 0x06	; 6
    a08e:	59 9f       	mul	r21, r25
    a090:	c0 0d       	add	r28, r0
    a092:	d1 1d       	adc	r29, r1
    a094:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:314
}
//// nastavi cas termostatu
void thermostat_program_set_time(uint8_t program_id, uint8_t interval_id, uint8_t start_hour, uint8_t start_min, uint8_t stop_hour, uint8_t stop_min, uint8_t active)
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
    a096:	82 2f       	mov	r24, r18
    a098:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
    a09c:	68 2f       	mov	r22, r24
    a09e:	66 0f       	add	r22, r22
    a0a0:	66 70       	andi	r22, 0x06	; 6
    a0a2:	88 e0       	ldi	r24, 0x08	; 8
    a0a4:	48 9f       	mul	r20, r24
    a0a6:	a0 01       	movw	r20, r0
    a0a8:	11 24       	eor	r1, r1
    a0aa:	9c 2d       	mov	r25, r12
    a0ac:	91 70       	andi	r25, 0x01	; 1
    a0ae:	c9 2e       	mov	r12, r25
    a0b0:	c4 0e       	add	r12, r20
    a0b2:	6c 0d       	add	r22, r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:316
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
    a0b4:	ce 01       	movw	r24, r28
    a0b6:	02 96       	adiw	r24, 0x02	; 2
    a0b8:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a0bc:	60 2f       	mov	r22, r16
    a0be:	ce 01       	movw	r24, r28
    a0c0:	03 96       	adiw	r24, 0x03	; 3
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:318
}
    a0c2:	df 91       	pop	r29
    a0c4:	cf 91       	pop	r28
    a0c6:	1f 91       	pop	r17
    a0c8:	0f 91       	pop	r16
    a0ca:	ef 90       	pop	r14
    a0cc:	cf 90       	pop	r12
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:317
{
  uint8_t start, stop;
  start = ((start_hour << 3) & 0b11111000) + (((start_min / 15) << 1) & 0b00000110 ) + (active & 0b00000001);
  stop = ((stop_hour << 3) & 0b11111000) + ((stop_min / 15) & 0b00000011);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1, start);
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1, stop);
    a0ce:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a0d2 <thermostat_program_set_name(unsigned char, char*)>:
_Z27thermostat_program_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:281
    if (t == 0) break;
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
    a0d2:	ef 92       	push	r14
    a0d4:	ff 92       	push	r15
    a0d6:	0f 93       	push	r16
    a0d8:	1f 93       	push	r17
    a0da:	cf 93       	push	r28
    a0dc:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:284
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    a0de:	9d e4       	ldi	r25, 0x4D	; 77
    a0e0:	89 9f       	mul	r24, r25
    a0e2:	80 01       	movw	r16, r0
    a0e4:	11 24       	eor	r1, r1
    a0e6:	eb 01       	movw	r28, r22
    a0e8:	78 01       	movw	r14, r16
    a0ea:	8c ec       	ldi	r24, 0xCC	; 204
    a0ec:	e8 1a       	sub	r14, r24
    a0ee:	8d ef       	ldi	r24, 0xFD	; 253
    a0f0:	f8 0a       	sbc	r15, r24
    a0f2:	02 5c       	subi	r16, 0xC2	; 194
    a0f4:	1d 4f       	sbci	r17, 0xFD	; 253
    a0f6:	69 91       	ld	r22, Y+
    a0f8:	c7 01       	movw	r24, r14
    a0fa:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:285
    if (name[i] == 0) break;
    a0fe:	fe 01       	movw	r30, r28
    a100:	31 97       	sbiw	r30, 0x01	; 1
    a102:	80 81       	ld	r24, Z
    a104:	88 23       	and	r24, r24
    a106:	31 f0       	breq	.+12     	; 0xa114 <thermostat_program_set_name(unsigned char, char*)+0x42>
    a108:	9f ef       	ldi	r25, 0xFF	; 255
    a10a:	e9 1a       	sub	r14, r25
    a10c:	f9 0a       	sbc	r15, r25
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:282
  }
}
//// nastavi pojmenovani programu
void thermostat_program_set_name(uint8_t program_id, char *name)
{
  for (uint8_t i = 0; i < eeprom_thermostat_program_name_bytes_size; i++)
    a10e:	e0 16       	cp	r14, r16
    a110:	f1 06       	cpc	r15, r17
    a112:	89 f7       	brne	.-30     	; 0xa0f6 <thermostat_program_set_name(unsigned char, char*)+0x24>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:287
  {
    EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + i + eeprom_thermostat_program_name, name[i]);
    if (name[i] == 0) break;
  }
}
    a114:	df 91       	pop	r29
    a116:	cf 91       	pop	r28
    a118:	1f 91       	pop	r17
    a11a:	0f 91       	pop	r16
    a11c:	ff 90       	pop	r15
    a11e:	ef 90       	pop	r14
    a120:	08 95       	ret

0000a122 <thermostat_ring_set_pid_eeprom(unsigned char)>:
_Z30thermostat_ring_set_pid_eepromh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:232
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
}

void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
    a122:	ef 92       	push	r14
    a124:	ff 92       	push	r15
    a126:	0f 93       	push	r16
    a128:	1f 93       	push	r17
    a12a:	cf 93       	push	r28
    a12c:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:233
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
    a12e:	e8 2e       	mov	r14, r24
    a130:	f1 2c       	mov	r15, r1
    a132:	91 e2       	ldi	r25, 0x21	; 33
    a134:	89 9f       	mul	r24, r25
    a136:	e0 01       	movw	r28, r0
    a138:	11 24       	eor	r1, r1
    a13a:	87 01       	movw	r16, r14
    a13c:	00 0f       	add	r16, r16
    a13e:	11 1f       	adc	r17, r17
    a140:	00 0f       	add	r16, r16
    a142:	11 1f       	adc	r17, r17
    a144:	f8 01       	movw	r30, r16
    a146:	ed 58       	subi	r30, 0x8D	; 141
    a148:	f6 4f       	sbci	r31, 0xF6	; 246
    a14a:	40 81       	ld	r20, Z
    a14c:	51 81       	ldd	r21, Z+1	; 0x01
    a14e:	62 81       	ldd	r22, Z+2	; 0x02
    a150:	73 81       	ldd	r23, Z+3	; 0x03
    a152:	ce 01       	movw	r24, r28
    a154:	80 5a       	subi	r24, 0xA0	; 160
    a156:	9e 4f       	sbci	r25, 0xFE	; 254
    a158:	0e 94 33 97 	call	0x12e66	; 0x12e66 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:234
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
    a15c:	f8 01       	movw	r30, r16
    a15e:	e9 57       	subi	r30, 0x79	; 121
    a160:	f6 4f       	sbci	r31, 0xF6	; 246
    a162:	40 81       	ld	r20, Z
    a164:	51 81       	ldd	r21, Z+1	; 0x01
    a166:	62 81       	ldd	r22, Z+2	; 0x02
    a168:	73 81       	ldd	r23, Z+3	; 0x03
    a16a:	ce 01       	movw	r24, r28
    a16c:	8c 59       	subi	r24, 0x9C	; 156
    a16e:	9e 4f       	sbci	r25, 0xFE	; 254
    a170:	0e 94 33 97 	call	0x12e66	; 0x12e66 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:235
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
    a174:	f8 01       	movw	r30, r16
    a176:	e5 56       	subi	r30, 0x65	; 101
    a178:	f6 4f       	sbci	r31, 0xF6	; 246
    a17a:	40 81       	ld	r20, Z
    a17c:	51 81       	ldd	r21, Z+1	; 0x01
    a17e:	62 81       	ldd	r22, Z+2	; 0x02
    a180:	73 81       	ldd	r23, Z+3	; 0x03
    a182:	ce 01       	movw	r24, r28
    a184:	88 59       	subi	r24, 0x98	; 152
    a186:	9e 4f       	sbci	r25, 0xFE	; 254
    a188:	0e 94 33 97 	call	0x12e66	; 0x12e66 <EEPROMwriteFloat(unsigned int, float)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a18c:	f7 01       	movw	r30, r14
    a18e:	e1 55       	subi	r30, 0x51	; 81
    a190:	f6 4f       	sbci	r31, 0xF6	; 246
    a192:	60 81       	ld	r22, Z
    a194:	ce 01       	movw	r24, r28
    a196:	84 59       	subi	r24, 0x94	; 148
    a198:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:237
}
    a19a:	df 91       	pop	r29
    a19c:	cf 91       	pop	r28
    a19e:	1f 91       	pop	r17
    a1a0:	0f 91       	pop	r16
    a1a2:	ff 90       	pop	r15
    a1a4:	ef 90       	pop	r14
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:236
void thermostat_ring_set_pid_eeprom(uint8_t idx)
{
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p, PID_p[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i, PID_i[idx]);
  EEPROMwriteFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d, PID_d[idx]);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
    a1a6:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>:
_Z24thermostat_ring_set_modehh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:180
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
}
void thermostat_ring_set_mode(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
    a1aa:	21 e2       	ldi	r18, 0x21	; 33
    a1ac:	82 9f       	mul	r24, r18
    a1ae:	c0 01       	movw	r24, r0
    a1b0:	11 24       	eor	r1, r1
    a1b2:	82 5a       	subi	r24, 0xA2	; 162
    a1b4:	9e 4f       	sbci	r25, 0xFE	; 254
    a1b6:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a1ba <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z26button_click_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5754
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu,
   args3 ... id polozky menu
*/
void button_click_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a1ba:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5755
  if (args3 == 0) thermostat_ring_set_mode(args2, TERM_MODE_OFF);
    a1bc:	60 e0       	ldi	r22, 0x00	; 0
    a1be:	44 23       	and	r20, r20
    a1c0:	61 f0       	breq	.+24     	; 0xa1da <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5756
  if (args3 == 1) thermostat_ring_set_mode(args2, TERM_MODE_MAX);
    a1c2:	61 e0       	ldi	r22, 0x01	; 1
    a1c4:	41 30       	cpi	r20, 0x01	; 1
    a1c6:	49 f0       	breq	.+18     	; 0xa1da <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5757
  if (args3 == 2) thermostat_ring_set_mode(args2, TERM_MODE_MIN);
    a1c8:	67 e0       	ldi	r22, 0x07	; 7
    a1ca:	42 30       	cpi	r20, 0x02	; 2
    a1cc:	31 f0       	breq	.+12     	; 0xa1da <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5758
  if (args3 == 3) thermostat_ring_set_mode(args2, TERM_MODE_PROG);
    a1ce:	62 e0       	ldi	r22, 0x02	; 2
    a1d0:	43 30       	cpi	r20, 0x03	; 3
    a1d2:	19 f0       	breq	.+6      	; 0xa1da <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5759
  if (args3 == 4) thermostat_ring_set_mode(args2, TERM_MODE_MAN);
    a1d4:	44 30       	cpi	r20, 0x04	; 4
    a1d6:	19 f4       	brne	.+6      	; 0xa1de <button_click_term_set_mode(unsigned char, unsigned char, unsigned char)+0x24>
    a1d8:	68 e0       	ldi	r22, 0x08	; 8
    a1da:	0c 94 d5 50 	jmp	0xa1aa	; 0xa1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5760
}
    a1de:	08 95       	ret

0000a1e0 <thermostat_ring_set_mezni(unsigned char, int)>:
_Z25thermostat_ring_set_meznihi():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:157
int thermostat_ring_get_mezni(uint8_t idx)
{
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
    a1e0:	1f 93       	push	r17
    a1e2:	cf 93       	push	r28
    a1e4:	df 93       	push	r29
    a1e6:	16 2f       	mov	r17, r22
    a1e8:	67 2f       	mov	r22, r23
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:158
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
    a1ea:	91 e2       	ldi	r25, 0x21	; 33
    a1ec:	89 9f       	mul	r24, r25
    a1ee:	e0 01       	movw	r28, r0
    a1f0:	11 24       	eor	r1, r1
    a1f2:	ce 01       	movw	r24, r28
    a1f4:	8a 5a       	subi	r24, 0xAA	; 170
    a1f6:	9e 4f       	sbci	r25, 0xFE	; 254
    a1f8:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a1fc:	61 2f       	mov	r22, r17
    a1fe:	ce 01       	movw	r24, r28
    a200:	89 5a       	subi	r24, 0xA9	; 169
    a202:	9e 4f       	sbci	r25, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:160
}
    a204:	df 91       	pop	r29
    a206:	cf 91       	pop	r28
    a208:	1f 91       	pop	r17
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:159
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
}
void thermostat_ring_set_mezni(uint8_t idx, int temp)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni, temp >> 8);
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1, temp & 0xff);
    a20a:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a20e <helper_thermostat_set_mezni(int, unsigned char)>:
_Z27helper_thermostat_set_mezniih():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2278
/*
  args1 -- menu_dialog_set_variable_now, aktualni hodnota
  args2 -- menu_dialog_set_variable_args, id ringu
*/
void helper_thermostat_set_mezni(int args1, uint8_t args2)
{
    a20e:	9c 01       	movw	r18, r24
    a210:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2279
  thermostat_ring_set_mezni(args2, args1);
    a212:	b9 01       	movw	r22, r18
    a214:	0c 94 f0 50 	jmp	0xa1e0	; 0xa1e0 <thermostat_ring_set_mezni(unsigned char, int)>

0000a218 <thermostat_ring_set_name(unsigned char, char*)>:
_Z24thermostat_ring_set_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:110
    name[i] = t;
    if (t == 0) break;
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
    a218:	df 92       	push	r13
    a21a:	ef 92       	push	r14
    a21c:	ff 92       	push	r15
    a21e:	0f 93       	push	r16
    a220:	1f 93       	push	r17
    a222:	cf 93       	push	r28
    a224:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a226:	91 e2       	ldi	r25, 0x21	; 33
    a228:	89 9f       	mul	r24, r25
    a22a:	e0 01       	movw	r28, r0
    a22c:	11 24       	eor	r1, r1
    a22e:	7b 01       	movw	r14, r22
    a230:	8e 01       	movw	r16, r28
    a232:	04 5b       	subi	r16, 0xB4	; 180
    a234:	1e 4f       	sbci	r17, 0xFE	; 254
    a236:	cb 5a       	subi	r28, 0xAB	; 171
    a238:	de 4f       	sbci	r29, 0xFE	; 254
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:114
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a23a:	f7 01       	movw	r30, r14
    a23c:	d1 90       	ld	r13, Z+
    a23e:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:115
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    a240:	6d 2d       	mov	r22, r13
    a242:	c8 01       	movw	r24, r16
    a244:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:116
    if (t == 0) break;
    a248:	dd 20       	and	r13, r13
    a24a:	29 f0       	breq	.+10     	; 0xa256 <thermostat_ring_set_name(unsigned char, char*)+0x3e>
    a24c:	0f 5f       	subi	r16, 0xFF	; 255
    a24e:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:112
  }
}
void thermostat_ring_set_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a250:	0c 17       	cp	r16, r28
    a252:	1d 07       	cpc	r17, r29
    a254:	91 f7       	brne	.-28     	; 0xa23a <thermostat_ring_set_name(unsigned char, char*)+0x22>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:118
  {
    t = name[i];
    EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i, t);
    if (t == 0) break;
  }
}
    a256:	df 91       	pop	r29
    a258:	cf 91       	pop	r28
    a25a:	1f 91       	pop	r17
    a25c:	0f 91       	pop	r16
    a25e:	ff 90       	pop	r15
    a260:	ef 90       	pop	r14
    a262:	df 90       	pop	r13
    a264:	08 95       	ret

0000a266 <thermostat_ring_clear(unsigned char)>:
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:418
  return ret;
}


void thermostat_ring_clear(uint8_t idx)
{
    a266:	8f 92       	push	r8
    a268:	9f 92       	push	r9
    a26a:	af 92       	push	r10
    a26c:	bf 92       	push	r11
    a26e:	ef 92       	push	r14
    a270:	ff 92       	push	r15
    a272:	0f 93       	push	r16
    a274:	1f 93       	push	r17
    a276:	cf 93       	push	r28
    a278:	c8 2f       	mov	r28, r24
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    a27a:	e8 2e       	mov	r14, r24
    a27c:	f1 2c       	mov	r15, r1
    a27e:	87 01       	movw	r16, r14
    a280:	00 0f       	add	r16, r16
    a282:	11 1f       	adc	r17, r17
    a284:	00 0f       	add	r16, r16
    a286:	11 1f       	adc	r17, r17
    a288:	f8 01       	movw	r30, r16
    a28a:	ed 58       	subi	r30, 0x8D	; 141
    a28c:	f6 4f       	sbci	r31, 0xF6	; 246
    a28e:	81 2c       	mov	r8, r1
    a290:	91 2c       	mov	r9, r1
    a292:	90 e8       	ldi	r25, 0x80	; 128
    a294:	a9 2e       	mov	r10, r25
    a296:	9f e3       	ldi	r25, 0x3F	; 63
    a298:	b9 2e       	mov	r11, r25
    a29a:	80 82       	st	Z, r8
    a29c:	91 82       	std	Z+1, r9	; 0x01
    a29e:	a2 82       	std	Z+2, r10	; 0x02
    a2a0:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    a2a2:	8c 2f       	mov	r24, r28
    a2a4:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    a2a8:	8c 2f       	mov	r24, r28
    a2aa:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    a2ae:	f8 01       	movw	r30, r16
    a2b0:	e9 57       	subi	r30, 0x79	; 121
    a2b2:	f6 4f       	sbci	r31, 0xF6	; 246
    a2b4:	80 e0       	ldi	r24, 0x00	; 0
    a2b6:	90 e0       	ldi	r25, 0x00	; 0
    a2b8:	a0 e0       	ldi	r26, 0x00	; 0
    a2ba:	bf e3       	ldi	r27, 0x3F	; 63
    a2bc:	80 83       	st	Z, r24
    a2be:	91 83       	std	Z+1, r25	; 0x01
    a2c0:	a2 83       	std	Z+2, r26	; 0x02
    a2c2:	b3 83       	std	Z+3, r27	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    a2c4:	8c 2f       	mov	r24, r28
    a2c6:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    a2ca:	8c 2f       	mov	r24, r28
    a2cc:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    a2d0:	f8 01       	movw	r30, r16
    a2d2:	e5 56       	subi	r30, 0x65	; 101
    a2d4:	f6 4f       	sbci	r31, 0xF6	; 246
    a2d6:	80 82       	st	Z, r8
    a2d8:	91 82       	std	Z+1, r9	; 0x01
    a2da:	a2 82       	std	Z+2, r10	; 0x02
    a2dc:	b3 82       	std	Z+3, r11	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    a2de:	8c 2f       	mov	r24, r28
    a2e0:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    a2e4:	8c 2f       	mov	r24, r28
    a2e6:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    a2ea:	f7 01       	movw	r30, r14
    a2ec:	e1 55       	subi	r30, 0x51	; 81
    a2ee:	f6 4f       	sbci	r31, 0xF6	; 246
    a2f0:	8c e3       	ldi	r24, 0x3C	; 60
    a2f2:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    a2f4:	8c 2f       	mov	r24, r28
    a2f6:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    a2fa:	8c 2f       	mov	r24, r28
    a2fc:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    a300:	81 e2       	ldi	r24, 0x21	; 33
    a302:	c8 9f       	mul	r28, r24
    a304:	80 01       	movw	r16, r0
    a306:	11 24       	eor	r1, r1
    a308:	6f ef       	ldi	r22, 0xFF	; 255
    a30a:	c8 01       	movw	r24, r16
    a30c:	84 5a       	subi	r24, 0xA4	; 164
    a30e:	9e 4f       	sbci	r25, 0xFE	; 254
    a310:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:424
  thermostat_ring_pid_set_kp(idx, 1);
  thermostat_ring_pid_set_ki(idx, 0.5);
  thermostat_ring_pid_set_kd(idx, 1);
  thermostat_ring_pid_set_time(idx, 60);
  thermostat_ring_set_asociate_tds(idx, 255);
  thermostat_ring_set_mezni(idx, 220);
    a314:	6c ed       	ldi	r22, 0xDC	; 220
    a316:	70 e0       	ldi	r23, 0x00	; 0
    a318:	8c 2f       	mov	r24, r28
    a31a:	0e 94 f0 50 	call	0xa1e0	; 0xa1e0 <thermostat_ring_set_mezni(unsigned char, int)>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    a31e:	6f ef       	ldi	r22, 0xFF	; 255
    a320:	c8 01       	movw	r24, r16
    a322:	85 5a       	subi	r24, 0xA5	; 165
    a324:	9e 4f       	sbci	r25, 0xFE	; 254
    a326:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    a32a:	f7 01       	movw	r30, r14
    a32c:	e5 5f       	subi	r30, 0xF5	; 245
    a32e:	f5 4f       	sbci	r31, 0xF5	; 245
    a330:	10 82       	st	Z, r1
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    a332:	6f ef       	ldi	r22, 0xFF	; 255
    a334:	c8 01       	movw	r24, r16
    a336:	83 5a       	subi	r24, 0xA3	; 163
    a338:	9e 4f       	sbci	r25, 0xFE	; 254
    a33a:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    a33e:	6f ef       	ldi	r22, 0xFF	; 255
    a340:	c8 01       	movw	r24, r16
    a342:	81 5a       	subi	r24, 0xA1	; 161
    a344:	9e 4f       	sbci	r25, 0xFE	; 254
    a346:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:430
  thermostat_ring_set_program_id(idx, PROG_FREE);
  thermostat_ring_set_state(idx, 0);
  thermostat_ring_set_power(idx, 0);
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
    a34a:	60 e0       	ldi	r22, 0x00	; 0
    a34c:	8c 2f       	mov	r24, r28
    a34e:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:431
  thermostat_ring_set_name(idx, "FREE");
    a352:	6f e5       	ldi	r22, 0x5F	; 95
    a354:	73 e0       	ldi	r23, 0x03	; 3
    a356:	8c 2f       	mov	r24, r28
    a358:	0e 94 0c 51 	call	0xa218	; 0xa218 <thermostat_ring_set_name(unsigned char, char*)>
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a35c:	60 e0       	ldi	r22, 0x00	; 0
    a35e:	c8 01       	movw	r24, r16
    a360:	88 5a       	subi	r24, 0xA8	; 168
    a362:	9e 4f       	sbci	r25, 0xFE	; 254
_Z21thermostat_ring_clearh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:433
  thermostat_ring_set_active(idx, RING_FREE);
  thermostat_ring_set_output(idx, 255);
  thermostat_ring_set_mode(idx, 0);
  thermostat_ring_set_name(idx, "FREE");
  thermostat_ring_set_status_bites(idx, 0);
}
    a364:	cf 91       	pop	r28
    a366:	1f 91       	pop	r17
    a368:	0f 91       	pop	r16
    a36a:	ff 90       	pop	r15
    a36c:	ef 90       	pop	r14
    a36e:	bf 90       	pop	r11
    a370:	af 90       	pop	r10
    a372:	9f 90       	pop	r9
    a374:	8f 90       	pop	r8
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
    a376:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a37a <term_ring_do_activate(unsigned char, unsigned char, unsigned char)>:
_Z21term_ring_do_activatehhh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    a37a:	21 e2       	ldi	r18, 0x21	; 33
    a37c:	82 9f       	mul	r24, r18
    a37e:	c0 01       	movw	r24, r0
    a380:	11 24       	eor	r1, r1
    a382:	61 e0       	ldi	r22, 0x01	; 1
    a384:	83 5a       	subi	r24, 0xA3	; 163
    a386:	9e 4f       	sbci	r25, 0xFE	; 254
    a388:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a38c <set_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12set_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:55
  }
  return ret;
}
/// nastavi strukturu tds
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    a38c:	af 92       	push	r10
    a38e:	bf 92       	push	r11
    a390:	cf 92       	push	r12
    a392:	df 92       	push	r13
    a394:	ef 92       	push	r14
    a396:	ff 92       	push	r15
    a398:	0f 93       	push	r16
    a39a:	1f 93       	push	r17
    a39c:	cf 93       	push	r28
    a39e:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:56
  if (idx < HW_ONEWIRE_MAXROMS)
    a3a0:	86 30       	cpi	r24, 0x06	; 6
    a3a2:	08 f0       	brcs	.+2      	; 0xa3a6 <set_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    a3a4:	49 c0       	rjmp	.+146    	; 0xa438 <set_tds18s20(unsigned char, struct_DDS18s20*)+0xac>
    a3a6:	6b 01       	movw	r12, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:58
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    a3a8:	96 e1       	ldi	r25, 0x16	; 22
    a3aa:	89 9f       	mul	r24, r25
    a3ac:	e0 01       	movw	r28, r0
    a3ae:	11 24       	eor	r1, r1
    a3b0:	f6 01       	movw	r30, r12
    a3b2:	61 91       	ld	r22, Z+
    a3b4:	7f 01       	movw	r14, r30
    a3b6:	ce 01       	movw	r24, r28
    a3b8:	88 53       	subi	r24, 0x38	; 56
    a3ba:	9f 4f       	sbci	r25, 0xFF	; 255
    a3bc:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a3c0:	8e 01       	movw	r16, r28
    a3c2:	07 53       	subi	r16, 0x37	; 55
    a3c4:	1f 4f       	sbci	r17, 0xFF	; 255
    a3c6:	5e 01       	movw	r10, r28
    a3c8:	f1 ed       	ldi	r31, 0xD1	; 209
    a3ca:	af 0e       	add	r10, r31
    a3cc:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:61
    for (uint8_t m = 0; m < 8; m++)
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
    a3ce:	f7 01       	movw	r30, r14
    a3d0:	61 91       	ld	r22, Z+
    a3d2:	7f 01       	movw	r14, r30
    a3d4:	c8 01       	movw	r24, r16
    a3d6:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:62
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    a3da:	f7 01       	movw	r30, r14
    a3dc:	62 85       	ldd	r22, Z+10	; 0x0a
    a3de:	c8 01       	movw	r24, r16
    a3e0:	0b 96       	adiw	r24, 0x0b	; 11
    a3e2:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a3e6:	0f 5f       	subi	r16, 0xFF	; 255
    a3e8:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:59
void set_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used, tds->used);
    for (uint8_t m = 0; m < 8; m++)
    a3ea:	0a 15       	cp	r16, r10
    a3ec:	1b 05       	cpc	r17, r11
    a3ee:	79 f7       	brne	.-34     	; 0xa3ce <set_tds18s20(unsigned char, struct_DDS18s20*)+0x42>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:64
    {
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m, tds->rom[m]);
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    a3f0:	f6 01       	movw	r30, r12
    a3f2:	61 85       	ldd	r22, Z+9	; 0x09
    a3f4:	c8 01       	movw	r24, r16
    a3f6:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:65
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    a3fa:	f6 01       	movw	r30, r12
    a3fc:	63 85       	ldd	r22, Z+11	; 0x0b
    a3fe:	ce 01       	movw	r24, r28
    a400:	8e 52       	subi	r24, 0x2E	; 46
    a402:	9f 4f       	sbci	r25, 0xFF	; 255
    a404:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:66
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    a408:	f6 01       	movw	r30, r12
    a40a:	62 85       	ldd	r22, Z+10	; 0x0a
    a40c:	ce 01       	movw	r24, r28
    a40e:	8d 52       	subi	r24, 0x2D	; 45
    a410:	9f 4f       	sbci	r25, 0xFF	; 255
    a412:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a416:	f6 01       	movw	r30, r12
    a418:	64 89       	ldd	r22, Z+20	; 0x14
    a41a:	ce 01       	movw	r24, r28
    a41c:	84 52       	subi	r24, 0x24	; 36
    a41e:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a420:	df 91       	pop	r29
    a422:	cf 91       	pop	r28
    a424:	1f 91       	pop	r17
    a426:	0f 91       	pop	r16
    a428:	ff 90       	pop	r15
    a42a:	ef 90       	pop	r14
    a42c:	df 90       	pop	r13
    a42e:	cf 90       	pop	r12
    a430:	bf 90       	pop	r11
    a432:	af 90       	pop	r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:67
      EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m, tds->name[m]);
    }
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned, tds->assigned_ds2482 );
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high, (tds->offset >> 8) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low, (tds->offset) & 0xff);
    EEPROM.write(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period , tds->period);
    a434:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:69
  }
}
    a438:	df 91       	pop	r29
    a43a:	cf 91       	pop	r28
    a43c:	1f 91       	pop	r17
    a43e:	0f 91       	pop	r16
    a440:	ff 90       	pop	r15
    a442:	ef 90       	pop	r14
    a444:	df 90       	pop	r13
    a446:	cf 90       	pop	r12
    a448:	bf 90       	pop	r11
    a44a:	af 90       	pop	r10
    a44c:	08 95       	ret

0000a44e <device_set_name(char*)>:
_Z15device_set_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:74
    }
  }
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
    a44e:	ff 92       	push	r15
    a450:	0f 93       	push	r16
    a452:	1f 93       	push	r17
    a454:	cf 93       	push	r28
    a456:	df 93       	push	r29
    a458:	8c 01       	movw	r16, r24
    a45a:	d0 e0       	ldi	r29, 0x00	; 0
    a45c:	c0 e0       	ldi	r28, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:78
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = name[i];
    a45e:	f8 01       	movw	r30, r16
    a460:	f1 90       	ld	r15, Z+
    a462:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:79
    EEPROM.write(device_nazev +  i, t);
    a464:	6f 2d       	mov	r22, r15
    a466:	ce 01       	movw	r24, r28
    a468:	8c 59       	subi	r24, 0x9C	; 156
    a46a:	9f 4f       	sbci	r25, 0xFF	; 255
    a46c:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:80
    if (t == 0)
    a470:	f1 10       	cpse	r15, r1
    a472:	0b c0       	rjmp	.+22     	; 0xa48a <device_set_name(char*)+0x3c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a474:	60 e0       	ldi	r22, 0x00	; 0
    a476:	ce 01       	movw	r24, r28
    a478:	8b 59       	subi	r24, 0x9B	; 155
    a47a:	9f 4f       	sbci	r25, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
      break;
    }
  }
}
    a47c:	df 91       	pop	r29
    a47e:	cf 91       	pop	r28
    a480:	1f 91       	pop	r17
    a482:	0f 91       	pop	r16
    a484:	ff 90       	pop	r15
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:82
  {
    t = name[i];
    EEPROM.write(device_nazev +  i, t);
    if (t == 0)
    {
      EEPROM.write(device_nazev +  i + 1, 0);
    a486:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a48a:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:76
}
//// ulozi nazev zarizeni
void device_set_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a48c:	c9 30       	cpi	r28, 0x09	; 9
    a48e:	d1 05       	cpc	r29, r1
    a490:	31 f7       	brne	.-52     	; 0xa45e <device_set_name(char*)+0x10>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:86
    {
      EEPROM.write(device_nazev +  i + 1, 0);
      break;
    }
  }
}
    a492:	df 91       	pop	r29
    a494:	cf 91       	pop	r28
    a496:	1f 91       	pop	r17
    a498:	0f 91       	pop	r16
    a49a:	ff 90       	pop	r15
    a49c:	08 95       	ret

0000a49e <save_setup_network()>:
_Z18save_setup_networkv():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:41
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ulozi nastaveni site
void save_setup_network(void)
{
    a49e:	ef 92       	push	r14
    a4a0:	ff 92       	push	r15
    a4a2:	0f 93       	push	r16
    a4a4:	1f 93       	push	r17
    a4a6:	cf 93       	push	r28
    a4a8:	df 93       	push	r29
    a4aa:	0b e1       	ldi	r16, 0x1B	; 27
    a4ac:	1c e0       	ldi	r17, 0x0C	; 12
    a4ae:	ce e6       	ldi	r28, 0x6E	; 110
    a4b0:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:42
  for (uint8_t m = 0; m < 6; m++) EEPROM.write(device_mac + m, device.mac[m]);
    a4b2:	f8 01       	movw	r30, r16
    a4b4:	61 91       	ld	r22, Z+
    a4b6:	8f 01       	movw	r16, r30
    a4b8:	ce 01       	movw	r24, r28
    a4ba:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4be:	21 96       	adiw	r28, 0x01	; 1
    a4c0:	c4 37       	cpi	r28, 0x74	; 116
    a4c2:	d1 05       	cpc	r29, r1
    a4c4:	b1 f7       	brne	.-20     	; 0xa4b2 <save_setup_network()+0x14>
    a4c6:	01 e2       	ldi	r16, 0x21	; 33
    a4c8:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:43
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ip + m, device.myIP[m]);
    a4ca:	f8 01       	movw	r30, r16
    a4cc:	61 91       	ld	r22, Z+
    a4ce:	8f 01       	movw	r16, r30
    a4d0:	ce 01       	movw	r24, r28
    a4d2:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4d6:	21 96       	adiw	r28, 0x01	; 1
    a4d8:	c8 37       	cpi	r28, 0x78	; 120
    a4da:	d1 05       	cpc	r29, r1
    a4dc:	b1 f7       	brne	.-20     	; 0xa4ca <save_setup_network()+0x2c>
    a4de:	05 e2       	ldi	r16, 0x25	; 37
    a4e0:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:44
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mask + m, device.myMASK[m]);
    a4e2:	f8 01       	movw	r30, r16
    a4e4:	61 91       	ld	r22, Z+
    a4e6:	8f 01       	movw	r16, r30
    a4e8:	ce 01       	movw	r24, r28
    a4ea:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a4ee:	21 96       	adiw	r28, 0x01	; 1
    a4f0:	cc 37       	cpi	r28, 0x7C	; 124
    a4f2:	d1 05       	cpc	r29, r1
    a4f4:	b1 f7       	brne	.-20     	; 0xa4e2 <save_setup_network()+0x44>
    a4f6:	2d e2       	ldi	r18, 0x2D	; 45
    a4f8:	e2 2e       	mov	r14, r18
    a4fa:	2c e0       	ldi	r18, 0x0C	; 12
    a4fc:	f2 2e       	mov	r15, r18
    a4fe:	00 e8       	ldi	r16, 0x80	; 128
    a500:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:45
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_gw + m, device.myGW[m]);
    a502:	f7 01       	movw	r30, r14
    a504:	61 91       	ld	r22, Z+
    a506:	7f 01       	movw	r14, r30
    a508:	c8 01       	movw	r24, r16
    a50a:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a50e:	0f 5f       	subi	r16, 0xFF	; 255
    a510:	1f 4f       	sbci	r17, 0xFF	; 255
    a512:	04 38       	cpi	r16, 0x84	; 132
    a514:	11 05       	cpc	r17, r1
    a516:	a9 f7       	brne	.-22     	; 0xa502 <save_setup_network()+0x64>
    a518:	99 e2       	ldi	r25, 0x29	; 41
    a51a:	e9 2e       	mov	r14, r25
    a51c:	9c e0       	ldi	r25, 0x0C	; 12
    a51e:	f9 2e       	mov	r15, r25
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:46
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_dns + m, device.myDNS[m]);
    a520:	f7 01       	movw	r30, r14
    a522:	61 91       	ld	r22, Z+
    a524:	7f 01       	movw	r14, r30
    a526:	ce 01       	movw	r24, r28
    a528:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a52c:	21 96       	adiw	r28, 0x01	; 1
    a52e:	c0 38       	cpi	r28, 0x80	; 128
    a530:	d1 05       	cpc	r29, r1
    a532:	b1 f7       	brne	.-20     	; 0xa520 <save_setup_network()+0x82>
    a534:	81 e3       	ldi	r24, 0x31	; 49
    a536:	e8 2e       	mov	r14, r24
    a538:	8c e0       	ldi	r24, 0x0C	; 12
    a53a:	f8 2e       	mov	r15, r24
    a53c:	c4 e6       	ldi	r28, 0x64	; 100
    a53e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:47
  for (uint8_t m = 0; m < 9; m++) EEPROM.write(device_nazev + m, device.nazev[m]);
    a540:	f7 01       	movw	r30, r14
    a542:	61 91       	ld	r22, Z+
    a544:	7f 01       	movw	r14, r30
    a546:	ce 01       	movw	r24, r28
    a548:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a54c:	21 96       	adiw	r28, 0x01	; 1
    a54e:	cd 36       	cpi	r28, 0x6D	; 109
    a550:	d1 05       	cpc	r29, r1
    a552:	b1 f7       	brne	.-20     	; 0xa540 <save_setup_network()+0xa2>
    a554:	cb e3       	ldi	r28, 0x3B	; 59
    a556:	dc e0       	ldi	r29, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:48
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_mqtt_server + m, device.mqtt_server[m]);
    a558:	69 91       	ld	r22, Y+
    a55a:	c8 01       	movw	r24, r16
    a55c:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a560:	0f 5f       	subi	r16, 0xFF	; 255
    a562:	1f 4f       	sbci	r17, 0xFF	; 255
    a564:	08 38       	cpi	r16, 0x88	; 136
    a566:	11 05       	cpc	r17, r1
    a568:	b9 f7       	brne	.-18     	; 0xa558 <save_setup_network()+0xba>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:49
  EEPROM.write(device_mqtt_port, device.mqtt_port >> 8);
    a56a:	60 91 40 0c 	lds	r22, 0x0C40	; 0x800c40 <device+0x25>
    a56e:	88 e8       	ldi	r24, 0x88	; 136
    a570:	90 e0       	ldi	r25, 0x00	; 0
    a572:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:50
  EEPROM.write(device_mqtt_port + 1, device.mqtt_port & 0xff);
    a576:	60 91 3f 0c 	lds	r22, 0x0C3F	; 0x800c3f <device+0x24>
    a57a:	89 e8       	ldi	r24, 0x89	; 137
    a57c:	90 e0       	ldi	r25, 0x00	; 0
    a57e:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a582:	01 e4       	ldi	r16, 0x41	; 65
    a584:	1c e0       	ldi	r17, 0x0C	; 12
    a586:	ca e8       	ldi	r28, 0x8A	; 138
    a588:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:51
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_user + m, device.mqtt_user[m]);
    a58a:	f8 01       	movw	r30, r16
    a58c:	61 91       	ld	r22, Z+
    a58e:	8f 01       	movw	r16, r30
    a590:	ce 01       	movw	r24, r28
    a592:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a596:	21 96       	adiw	r28, 0x01	; 1
    a598:	ce 39       	cpi	r28, 0x9E	; 158
    a59a:	d1 05       	cpc	r29, r1
    a59c:	b1 f7       	brne	.-20     	; 0xa58a <save_setup_network()+0xec>
    a59e:	05 e5       	ldi	r16, 0x55	; 85
    a5a0:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:52
  for (uint8_t m = 0; m < 20; m++) EEPROM.write(device_mqtt_key + m, device.mqtt_key[m]);
    a5a2:	f8 01       	movw	r30, r16
    a5a4:	61 91       	ld	r22, Z+
    a5a6:	8f 01       	movw	r16, r30
    a5a8:	ce 01       	movw	r24, r28
    a5aa:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a5ae:	21 96       	adiw	r28, 0x01	; 1
    a5b0:	c2 3b       	cpi	r28, 0xB2	; 178
    a5b2:	d1 05       	cpc	r29, r1
    a5b4:	b1 f7       	brne	.-20     	; 0xa5a2 <save_setup_network()+0x104>
    a5b6:	09 e6       	ldi	r16, 0x69	; 105
    a5b8:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:53
  for (uint8_t m = 0; m < 4; m++) EEPROM.write(device_ntp_server + m, device.ntp_server[m]);
    a5ba:	f8 01       	movw	r30, r16
    a5bc:	61 91       	ld	r22, Z+
    a5be:	8f 01       	movw	r16, r30
    a5c0:	ce 01       	movw	r24, r28
    a5c2:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    a5c6:	21 96       	adiw	r28, 0x01	; 1
    a5c8:	c6 3b       	cpi	r28, 0xB6	; 182
    a5ca:	d1 05       	cpc	r29, r1
    a5cc:	b1 f7       	brne	.-20     	; 0xa5ba <save_setup_network()+0x11c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:54
}
    a5ce:	df 91       	pop	r29
    a5d0:	cf 91       	pop	r28
    a5d2:	1f 91       	pop	r17
    a5d4:	0f 91       	pop	r16
    a5d6:	ff 90       	pop	r15
    a5d8:	ef 90       	pop	r14
    a5da:	08 95       	ret

0000a5dc <remote_tds_set_name(unsigned char, char*) [clone .part.22]>:
_Z19remote_tds_set_namehPc.part.22():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2680
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
    a5dc:	df 92       	push	r13
    a5de:	ef 92       	push	r14
    a5e0:	ff 92       	push	r15
    a5e2:	0f 93       	push	r16
    a5e4:	1f 93       	push	r17
    a5e6:	cf 93       	push	r28
    a5e8:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a5ea:	94 e1       	ldi	r25, 0x14	; 20
    a5ec:	89 9f       	mul	r24, r25
    a5ee:	e0 01       	movw	r28, r0
    a5f0:	11 24       	eor	r1, r1
    a5f2:	7b 01       	movw	r14, r22
    a5f4:	8e 01       	movw	r16, r28
    a5f6:	06 55       	subi	r16, 0x56	; 86
    a5f8:	1a 4f       	sbci	r17, 0xFA	; 250
    a5fa:	c4 54       	subi	r28, 0x44	; 68
    a5fc:	da 4f       	sbci	r29, 0xFA	; 250
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2686
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    {
      t = name[i];
    a5fe:	f7 01       	movw	r30, r14
    a600:	d1 90       	ld	r13, Z+
    a602:	7f 01       	movw	r14, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2687
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
    a604:	6d 2d       	mov	r22, r13
    a606:	c8 01       	movw	r24, r16
    a608:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2688
      if (t == 0) break;
    a60c:	dd 20       	and	r13, r13
    a60e:	29 f0       	breq	.+10     	; 0xa61a <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x3e>
    a610:	0f 5f       	subi	r16, 0xFF	; 255
    a612:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2684
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    for (uint8_t i = 0; i < (RTDS_DEVICE_STRING_LEN); i++)
    a614:	0c 17       	cp	r16, r28
    a616:	1d 07       	cpc	r17, r29
    a618:	91 f7       	brne	.-28     	; 0xa5fe <remote_tds_set_name(unsigned char, char*) [clone .part.22]+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2690
    {
      t = name[i];
      EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i, t);
      if (t == 0) break;
    }
}
    a61a:	df 91       	pop	r29
    a61c:	cf 91       	pop	r28
    a61e:	1f 91       	pop	r17
    a620:	0f 91       	pop	r16
    a622:	ff 90       	pop	r15
    a624:	ef 90       	pop	r14
    a626:	df 90       	pop	r13
    a628:	08 95       	ret

0000a62a <button_click_set_show_default_temp(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_show_default_temphhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5524
   args2 -- globalni argument celeho menu
   args3 -- id polozky menu kliku
*/
void button_click_set_show_default_temp(uint8_t args1, uint8_t args2, uint8_t args3)
{
  default_show_temp = args3;
    a62a:	40 93 be 08 	sts	0x08BE, r20	; 0x8008be <default_show_temp>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    a62e:	64 2f       	mov	r22, r20
    a630:	8d e5       	ldi	r24, 0x5D	; 93
    a632:	90 e0       	ldi	r25, 0x00	; 0
    a634:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>

0000a638 <remote_tds_set_complete(unsigned char, unsigned char, char*)>:
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2675
    *active = 255;
  }
}
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
    a638:	cf 93       	push	r28
    a63a:	df 93       	push	r29
    a63c:	d6 2f       	mov	r29, r22
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    a63e:	8a 30       	cpi	r24, 0x0A	; 10
    a640:	78 f4       	brcc	.+30     	; 0xa660 <remote_tds_set_complete(unsigned char, unsigned char, char*)+0x28>
    a642:	ba 01       	movw	r22, r20
    a644:	c8 2f       	mov	r28, r24
    a646:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a64a:	24 e1       	ldi	r18, 0x14	; 20
    a64c:	c2 9f       	mul	r28, r18
    a64e:	c0 01       	movw	r24, r0
    a650:	11 24       	eor	r1, r1
    a652:	6d 2f       	mov	r22, r29
    a654:	83 54       	subi	r24, 0x43	; 67
    a656:	9a 4f       	sbci	r25, 0xFA	; 250
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a658:	df 91       	pop	r29
    a65a:	cf 91       	pop	r28
remote_tds_set_active():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2706
}

void remote_tds_set_active(uint8_t idx, uint8_t active)
{
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
    a65c:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z23remote_tds_set_completehhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2678
///
void remote_tds_set_complete(uint8_t idx, uint8_t active, char *name)
{
  remote_tds_set_name(idx, name);
  remote_tds_set_active(idx, active);
}
    a660:	df 91       	pop	r29
    a662:	cf 91       	pop	r28
    a664:	08 95       	ret

0000a666 <remote_tds_clear(unsigned char)>:
_Z16remote_tds_clearh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2710
  if (idx <  MAX_RTDS)
    EEPROM.write(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS, active);
}
///
void remote_tds_clear(uint8_t idx)
{
    a666:	cf 93       	push	r28
    a668:	df 93       	push	r29
    a66a:	cd b7       	in	r28, 0x3d	; 61
    a66c:	de b7       	in	r29, 0x3e	; 62
    a66e:	62 97       	sbiw	r28, 0x12	; 18
    a670:	0f b6       	in	r0, 0x3f	; 63
    a672:	f8 94       	cli
    a674:	de bf       	out	0x3e, r29	; 62
    a676:	0f be       	out	0x3f, r0	; 63
    a678:	cd bf       	out	0x3d, r28	; 61
    a67a:	e1 e0       	ldi	r30, 0x01	; 1
    a67c:	f0 e0       	ldi	r31, 0x00	; 0
    a67e:	ec 0f       	add	r30, r28
    a680:	fd 1f       	adc	r31, r29
    a682:	e8 0f       	add	r30, r24
    a684:	f1 1d       	adc	r31, r1
    a686:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2714
  char rtds_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    rtds_name[idx] = 0;
  remote_tds_set_complete(idx, 0, rtds_name);
    a688:	ae 01       	movw	r20, r28
    a68a:	4f 5f       	subi	r20, 0xFF	; 255
    a68c:	5f 4f       	sbci	r21, 0xFF	; 255
    a68e:	60 e0       	ldi	r22, 0x00	; 0
    a690:	0e 94 1c 53 	call	0xa638	; 0xa638 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2715
}
    a694:	62 96       	adiw	r28, 0x12	; 18
    a696:	0f b6       	in	r0, 0x3f	; 63
    a698:	f8 94       	cli
    a69a:	de bf       	out	0x3e, r29	; 62
    a69c:	0f be       	out	0x3f, r0	; 63
    a69e:	cd bf       	out	0x3d, r28	; 61
    a6a0:	df 91       	pop	r29
    a6a2:	cf 91       	pop	r28
    a6a4:	08 95       	ret

0000a6a6 <click_rtds_deassociate_onewire(unsigned char, unsigned char)>:
_Z30click_rtds_deassociate_onewirehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5258
/*
   args1 --- atributy z nastaveni tlacitka
   args2 --- index polozky z menu
*/
void click_rtds_deassociate_onewire(uint8_t args1, uint8_t args2)
{
    a6a6:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5260
  //printf("mazu rtds args1:%d args2:%d\n", args1, args2);
  remote_tds_clear(args2);
    a6a8:	0e 94 33 53 	call	0xa666	; 0xa666 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5261
  MenuHistoryPrevMenu();
    a6ac:	0c 94 26 32 	jmp	0x644c	; 0x644c <MenuHistoryPrevMenu()>

0000a6b0 <thermostat_ring_get_mode(unsigned char)>:
_Z24thermostat_ring_get_modeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:176
}
//////////////////////////////////////////////////////////////////////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_mode(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_mode);
    a6b0:	21 e2       	ldi	r18, 0x21	; 33
    a6b2:	82 9f       	mul	r24, r18
    a6b4:	c0 01       	movw	r24, r0
    a6b6:	11 24       	eor	r1, r1
    a6b8:	82 5a       	subi	r24, 0xA2	; 162
    a6ba:	9e 4f       	sbci	r25, 0xFE	; 254
    a6bc:	0c 94 b2 96 	jmp	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a6c0 <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)>:
_Z33display_enable_show_term_mode_manjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5857
   kdyz 0 tak se nezobrazuji polozky v menu
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
    a6c0:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <default_ring>
    a6c4:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
    a6c8:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5859
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    return 1;
    a6ca:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5858
   args1, args2, args3 nejsou zatim potreba
*/
uint8_t display_enable_show_term_mode_man(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode = thermostat_ring_get_mode(default_ring);
  if (mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL || mode == TERM_MODE_MAN)
    a6cc:	93 30       	cpi	r25, 0x03	; 3
    a6ce:	31 f0       	breq	.+12     	; 0xa6dc <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1c>
    a6d0:	95 30       	cpi	r25, 0x05	; 5
    a6d2:	29 f0       	breq	.+10     	; 0xa6de <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a6d4:	98 30       	cpi	r25, 0x08	; 8
    a6d6:	19 f0       	breq	.+6      	; 0xa6de <display_enable_show_term_mode_man(unsigned int, unsigned int, unsigned char)+0x1e>
    a6d8:	80 e0       	ldi	r24, 0x00	; 0
    a6da:	08 95       	ret
    a6dc:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5862
    return 1;

  return 0;
}
    a6de:	08 95       	ret

0000a6e0 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)>:
_Z32button_get_term_mode_is_selectedjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5735
   args1 ... globalni argument z definice menu
   args2 ... zde je cislo ringu
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a6e0:	cf 93       	push	r28
    a6e2:	86 2f       	mov	r24, r22
    a6e4:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5738
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
    a6e6:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
    a6ea:	98 2f       	mov	r25, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5739
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
    a6ec:	c1 11       	cpse	r28, r1
    a6ee:	05 c0       	rjmp	.+10     	; 0xa6fa <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x1a>
    a6f0:	81 e0       	ldi	r24, 0x01	; 1
    a6f2:	99 23       	and	r25, r25
    a6f4:	39 f0       	breq	.+14     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5737
   args3 ... id polozky dynamickeho menu
*/
uint8_t button_get_term_mode_is_selected(uint16_t args1, uint16_t args2, uint8_t args3)
{
  uint8_t mode;
  uint8_t ret = 0;
    a6f6:	80 e0       	ldi	r24, 0x00	; 0
    a6f8:	05 c0       	rjmp	.+10     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5740
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
    a6fa:	c1 30       	cpi	r28, 0x01	; 1
    a6fc:	29 f4       	brne	.+10     	; 0xa708 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x28>
    a6fe:	81 e0       	ldi	r24, 0x01	; 1
    a700:	91 30       	cpi	r25, 0x01	; 1
    a702:	c9 f7       	brne	.-14     	; 0xa6f6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5745
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
  return ret;
}
    a704:	cf 91       	pop	r28
    a706:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5741
  uint8_t mode;
  uint8_t ret = 0;
  mode = thermostat_ring_get_mode(args2);
  if (args3 == 0 && mode == TERM_MODE_OFF) ret = 1;
  if (args3 == 1 && mode == TERM_MODE_MAX) ret = 1;
  if (args3 == 2 && mode == TERM_MODE_MIN) ret = 1;
    a708:	c2 30       	cpi	r28, 0x02	; 2
    a70a:	21 f4       	brne	.+8      	; 0xa714 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x34>
    a70c:	81 e0       	ldi	r24, 0x01	; 1
    a70e:	97 30       	cpi	r25, 0x07	; 7
    a710:	91 f7       	brne	.-28     	; 0xa6f6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a712:	f8 cf       	rjmp	.-16     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5742
  if (args3 == 3 && mode == TERM_MODE_PROG) ret = 1;
    a714:	c3 30       	cpi	r28, 0x03	; 3
    a716:	21 f4       	brne	.+8      	; 0xa720 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x40>
    a718:	81 e0       	ldi	r24, 0x01	; 1
    a71a:	92 30       	cpi	r25, 0x02	; 2
    a71c:	61 f7       	brne	.-40     	; 0xa6f6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a71e:	f2 cf       	rjmp	.-28     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5743
  if (args3 == 4 && (mode == TERM_MODE_MAN || mode == TERM_MODE_MAN_HEAT || mode == TERM_MODE_MAN_COOL)) ret = 1;
    a720:	c4 30       	cpi	r28, 0x04	; 4
    a722:	49 f7       	brne	.-46     	; 0xa6f6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a724:	81 e0       	ldi	r24, 0x01	; 1
    a726:	98 30       	cpi	r25, 0x08	; 8
    a728:	69 f3       	breq	.-38     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    a72a:	93 30       	cpi	r25, 0x03	; 3
    a72c:	59 f3       	breq	.-42     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>
    a72e:	95 30       	cpi	r25, 0x05	; 5
    a730:	11 f7       	brne	.-60     	; 0xa6f6 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x16>
    a732:	e8 cf       	rjmp	.-48     	; 0xa704 <button_get_term_mode_is_selected(unsigned int, unsigned int, unsigned char)+0x24>

0000a734 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)>:
_Z40button_get_default_ring_term_mode_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5723
   prevodni funkce pro dynamicke tlacitko popisku vybraneho operacniho modu
   prevede id modu na textovy popisek
   zadne vstupni parametry
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a734:	cf 93       	push	r28
    a736:	df 93       	push	r29
    a738:	ca 01       	movw	r24, r20
    a73a:	e9 01       	movw	r28, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5724
  strcpy_P(line1, text_current_ring_mode);
    a73c:	60 e2       	ldi	r22, 0x20	; 32
    a73e:	75 e3       	ldi	r23, 0x35	; 53
    a740:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5725
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
    a744:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <default_ring>
    a748:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4076
/*
   prevodni funkce id modu na textovy popisek
*/
void convert_mode_text_1(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
    a74c:	6f ea       	ldi	r22, 0xAF	; 175
    a74e:	75 e3       	ldi	r23, 0x35	; 53
    a750:	88 23       	and	r24, r24
    a752:	61 f0       	breq	.+24     	; 0xa76c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4077
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
    a754:	65 e9       	ldi	r22, 0x95	; 149
    a756:	75 e3       	ldi	r23, 0x35	; 53
    a758:	81 30       	cpi	r24, 0x01	; 1
    a75a:	41 f0       	breq	.+16     	; 0xa76c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4078
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
    a75c:	67 e4       	ldi	r22, 0x47	; 71
    a75e:	75 e3       	ldi	r23, 0x35	; 53
    a760:	83 30       	cpi	r24, 0x03	; 3
    a762:	21 f0       	breq	.+8      	; 0xa76c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4079
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
    a764:	82 30       	cpi	r24, 0x02	; 2
    a766:	41 f4       	brne	.+16     	; 0xa778 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x44>
    a768:	6f e5       	ldi	r22, 0x5F	; 95
    a76a:	75 e3       	ldi	r23, 0x35	; 53
    a76c:	ce 01       	movw	r24, r28
    a76e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
_Z40button_get_default_ring_term_mode_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5726
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a772:	df 91       	pop	r29
    a774:	cf 91       	pop	r28
    a776:	08 95       	ret
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4080
{
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
    a778:	84 30       	cpi	r24, 0x04	; 4
    a77a:	39 f4       	brne	.+14     	; 0xa78a <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    a77c:	67 e4       	ldi	r22, 0x47	; 71
    a77e:	75 e3       	ldi	r23, 0x35	; 53
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4083
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    a780:	ce 01       	movw	r24, r28
_Z40button_get_default_ring_term_mode_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5726
*/
void button_get_default_ring_term_mode_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  strcpy_P(line1, text_current_ring_mode);
  convert_mode_text_1(thermostat_ring_get_mode(default_ring), line2);
}
    a782:	df 91       	pop	r29
    a784:	cf 91       	pop	r28
convert_mode_text_1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4083
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    a786:	0c 94 90 aa 	jmp	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4081
  if (mode == TERM_MODE_OFF)   strcpy_P(str, text_button_term_off);
  if (mode == TERM_MODE_MAX)   strcpy_P(str, text_button_term_max);
  if (mode == TERM_MODE_MAN_HEAT)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_PROG)   strcpy_P(str, text_button_term_prog);
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy_P(str, text_button_term_man);
  if (mode == TERM_MODE_FAN)   strcpy_P(str, text_button_term_fan);
    a78a:	6c e1       	ldi	r22, 0x1C	; 28
    a78c:	75 e3       	ldi	r23, 0x35	; 53
    a78e:	86 30       	cpi	r24, 0x06	; 6
    a790:	b9 f3       	breq	.-18     	; 0xa780 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4082
  if (mode == TERM_MODE_MAN)   strcpy_P(str, text_button_term_man);
    a792:	88 30       	cpi	r24, 0x08	; 8
    a794:	99 f3       	breq	.-26     	; 0xa77c <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4083
  if (mode == TERM_MODE_MIN)   strcpy_P(str, text_button_term_min);
    a796:	87 30       	cpi	r24, 0x07	; 7
    a798:	61 f7       	brne	.-40     	; 0xa772 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x3e>
    a79a:	6b e7       	ldi	r22, 0x7B	; 123
    a79c:	75 e3       	ldi	r23, 0x35	; 53
    a79e:	f0 cf       	rjmp	.-32     	; 0xa780 <button_get_default_ring_term_mode_labels(unsigned char, unsigned char, char*, char*)+0x4c>

0000a7a0 <thermostat_ring_get_mezni(unsigned char)>:
_Z25thermostat_ring_get_meznih():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:153
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
///mezni rozhodovaci teplota
int thermostat_ring_get_mezni(uint8_t idx)
{
    a7a0:	0f 93       	push	r16
    a7a2:	1f 93       	push	r17
    a7a4:	cf 93       	push	r28
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:154
  return (EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni) << 8) + EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mezni + 1);
    a7a6:	91 e2       	ldi	r25, 0x21	; 33
    a7a8:	89 9f       	mul	r24, r25
    a7aa:	80 01       	movw	r16, r0
    a7ac:	11 24       	eor	r1, r1
    a7ae:	c8 01       	movw	r24, r16
    a7b0:	8a 5a       	subi	r24, 0xAA	; 170
    a7b2:	9e 4f       	sbci	r25, 0xFE	; 254
    a7b4:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a7b8:	c8 2f       	mov	r28, r24
    a7ba:	c8 01       	movw	r24, r16
    a7bc:	89 5a       	subi	r24, 0xA9	; 169
    a7be:	9e 4f       	sbci	r25, 0xFE	; 254
    a7c0:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    a7c4:	2c 2f       	mov	r18, r28
    a7c6:	30 e0       	ldi	r19, 0x00	; 0
    a7c8:	32 2f       	mov	r19, r18
    a7ca:	22 27       	eor	r18, r18
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:155
}
    a7cc:	82 0f       	add	r24, r18
    a7ce:	93 2f       	mov	r25, r19
    a7d0:	91 1d       	adc	r25, r1
    a7d2:	cf 91       	pop	r28
    a7d4:	1f 91       	pop	r17
    a7d6:	0f 91       	pop	r16
    a7d8:	08 95       	ret

0000a7da <preload_regulator_menu(unsigned int, unsigned int, unsigned char)>:
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2286




uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a7da:	cf 93       	push	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2287
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
    a7dc:	c0 91 0a 0a 	lds	r28, 0x0A0A	; 0x800a0a <default_ring>
    a7e0:	8c 2f       	mov	r24, r28
    a7e2:	0e 94 d0 53 	call	0xa7a0	; 0xa7a0 <thermostat_ring_get_mezni(unsigned char)>
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    a7e6:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <menu_dialog_set_variable_now+0x1>
    a7ea:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
  menu_dialog_set_variable_min = min;
    a7ee:	80 ea       	ldi	r24, 0xA0	; 160
    a7f0:	90 e0       	ldi	r25, 0x00	; 0
    a7f2:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <menu_dialog_set_variable_min+0x1>
    a7f6:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
  menu_dialog_set_variable_max = max;
    a7fa:	80 e4       	ldi	r24, 0x40	; 64
    a7fc:	91 e0       	ldi	r25, 0x01	; 1
    a7fe:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <menu_dialog_set_variable_max+0x1>
    a802:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  menu_dialog_set_variable_step = step;
    a806:	85 e0       	ldi	r24, 0x05	; 5
    a808:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  menu_dialog_set_variable_args = args;
    a80c:	c0 93 51 08 	sts	0x0851, r28	; 0x800851 <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  menu_dialog_set_divider = divider;
    a810:	8a e0       	ldi	r24, 0x0A	; 10
    a812:	90 e0       	ldi	r25, 0x00	; 0
    a814:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <menu_dialog_set_divider+0x1>
    a818:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    a81c:	81 e0       	ldi	r24, 0x01	; 1
    a81e:	80 93 50 08 	sts	0x0850, r24	; 0x800850 <__data_end>
_Z22preload_regulator_menujjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2288


uint8_t preload_regulator_menu(uint16_t args1, uint16_t args2, uint8_t args3)
{
  display_function_set_variable(thermostat_ring_get_mezni(default_ring), 160, 320, 5, default_ring, 10,  H_TRUE);
  dialog_save_variable_function = &helper_thermostat_set_mezni;
    a822:	87 e0       	ldi	r24, 0x07	; 7
    a824:	91 e5       	ldi	r25, 0x51	; 81
    a826:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    a82a:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2289
}
    a82e:	cf 91       	pop	r28
    a830:	08 95       	ret

0000a832 <thermostat_ring_get_active(unsigned char)>:
_Z26thermostat_ring_get_activeh():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:133
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_active(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
    a832:	21 e2       	ldi	r18, 0x21	; 33
    a834:	82 9f       	mul	r24, r18
    a836:	c0 01       	movw	r24, r0
    a838:	11 24       	eor	r1, r1
    a83a:	83 5a       	subi	r24, 0xA3	; 163
    a83c:	9e 4f       	sbci	r25, 0xFE	; 254
    a83e:	0c 94 b2 96 	jmp	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>

0000a842 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_set_term_heat_or_coolhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5841
   args1 ... parametr z definice prvku
   args2 ... parametr z menu
   args3 ... index prvku v poradi menu
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a842:	cf 93       	push	r28
    a844:	df 93       	push	r29
    a846:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5842
  if (thermostat_ring_get_active(default_ring) != 255)
    a848:	c0 91 0a 0a 	lds	r28, 0x0A0A	; 0x800a0a <default_ring>
    a84c:	8c 2f       	mov	r24, r28
    a84e:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    a852:	8f 3f       	cpi	r24, 0xFF	; 255
    a854:	59 f0       	breq	.+22     	; 0xa86c <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5845
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    a856:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5844
*/
void button_click_set_term_heat_or_cool(uint8_t args1, uint8_t args2, uint8_t args3)
{
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
    a858:	d3 30       	cpi	r29, 0x03	; 3
    a85a:	19 f0       	breq	.+6      	; 0xa862 <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x20>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5846
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
    a85c:	d5 30       	cpi	r29, 0x05	; 5
    a85e:	31 f4       	brne	.+12     	; 0xa86c <button_click_set_term_heat_or_cool(unsigned char, unsigned char, unsigned char)+0x2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5847
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a860:	61 e0       	ldi	r22, 0x01	; 1
    a862:	8c 2f       	mov	r24, r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5849
  }
}
    a864:	df 91       	pop	r29
    a866:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5847
  if (thermostat_ring_get_active(default_ring) != 255)
  {
    if (args1 == TERM_MODE_MAN_HEAT)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 0);
    if (args1 == TERM_MODE_MAN_COOL)
      thermostat_ring_update_bites(default_ring, STATUS_BIT_HEAT_OR_COOL, 1);
    a868:	0c 94 b4 96 	jmp	0x12d68	; 0x12d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5849
  }
}
    a86c:	df 91       	pop	r29
    a86e:	cf 91       	pop	r28
    a870:	08 95       	ret

0000a872 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)>:
_Z34button_click_default_term_set_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5672
   args1 ... parametr z definice prvku
   args2 ... parametr z defini menu
   args3 ... index prvku v menu
*/
void button_click_default_term_set_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a872:	cf 93       	push	r28
    a874:	df 93       	push	r29
    a876:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5673
  if (thermostat_ring_get_active(default_ring) != 255)
    a878:	c0 91 0a 0a 	lds	r28, 0x0A0A	; 0x800a0a <default_ring>
    a87c:	8c 2f       	mov	r24, r28
    a87e:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    a882:	8f 3f       	cpi	r24, 0xFF	; 255
    a884:	39 f0       	breq	.+14     	; 0xa894 <button_click_default_term_set_mode(unsigned char, unsigned char, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5675
  {
    thermostat_ring_set_mode(default_ring, args1);
    a886:	6d 2f       	mov	r22, r29
    a888:	8c 2f       	mov	r24, r28
    a88a:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5676
    change_term_mode = 1;
    a88e:	81 e0       	ldi	r24, 0x01	; 1
    a890:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <change_term_mode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5678
  }
}
    a894:	df 91       	pop	r29
    a896:	cf 91       	pop	r28
    a898:	08 95       	ret

0000a89a <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)>:
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5656
   args3 .. index prvku v menu
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
    a89a:	cf 93       	push	r28
    a89c:	df 93       	push	r29
    a89e:	d8 2f       	mov	r29, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5658
  uint8_t ret = 0;
  if (thermostat_ring_get_active(default_ring) != 255)
    a8a0:	c0 91 0a 0a 	lds	r28, 0x0A0A	; 0x800a0a <default_ring>
    a8a4:	8c 2f       	mov	r24, r28
    a8a6:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    a8aa:	8f 3f       	cpi	r24, 0xFF	; 255
    a8ac:	29 f0       	breq	.+10     	; 0xa8b8 <button_status_default_ring_term_has_mode(unsigned char, unsigned char, unsigned char)+0x1e>
thermostat_ring_get_mode_1():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:185
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_mode, id);
}
bool thermostat_ring_get_mode_1(uint8_t idx, uint8_t args)
{
  bool ret = false;
  if (thermostat_ring_get_mode(idx) == args)
    a8ae:	8c 2f       	mov	r24, r28
    a8b0:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
    a8b4:	91 e0       	ldi	r25, 0x01	; 1
    a8b6:	d8 13       	cpse	r29, r24
_Z40button_status_default_ring_term_has_modehhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5657
   return
     - uint8_t 1... activni, 0... neaktivni
*/
uint8_t button_status_default_ring_term_has_mode(uint8_t args1, uint8_t args2, uint8_t args3)
{
  uint8_t ret = 0;
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5662
  if (thermostat_ring_get_active(default_ring) != 255)
    if (thermostat_ring_get_mode_1(default_ring, args1) == true)
      ret = 1;
  return ret;
}
    a8ba:	89 2f       	mov	r24, r25
    a8bc:	df 91       	pop	r29
    a8be:	cf 91       	pop	r28
    a8c0:	08 95       	ret

0000a8c2 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)>:
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5582
   funkce pro nastaveni vychozi ringu z menu, v promene args3 mam id polozky tlacitka z menu
   ulozim rovnou do promene default ring
   ulozim do globalniho parametru menu
*/
void button_click_set_new_default_ring_in_dialog(uint16_t args1, uint16_t args2, uint8_t args3)
{
    a8c2:	cf 93       	push	r28
    a8c4:	c4 2f       	mov	r28, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5583
  if (thermostat_ring_get_active(args3) != 255)
    a8c6:	84 2f       	mov	r24, r20
    a8c8:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    a8cc:	8f 3f       	cpi	r24, 0xFF	; 255
    a8ce:	51 f0       	breq	.+20     	; 0xa8e4 <button_click_set_new_default_ring_in_dialog(unsigned int, unsigned int, unsigned char)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5585
  {
    default_ring = args3;
    a8d0:	c0 93 0a 0a 	sts	0x0A0A, r28	; 0x800a0a <default_ring>
MenuHistoryUpdateArgs1():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2224
  }
}
///
void MenuHistoryUpdateArgs1(uint8_t args1)
{
  Global_menu_args1[MenuHistoryIndex] = args1;
    a8d4:	e0 91 ec 08 	lds	r30, 0x08EC	; 0x8008ec <MenuHistoryIndex>
    a8d8:	f0 e0       	ldi	r31, 0x00	; 0
    a8da:	ee 51       	subi	r30, 0x1E	; 30
    a8dc:	f7 4f       	sbci	r31, 0xF7	; 247
    a8de:	c0 83       	st	Z, r28
_Z43button_click_set_new_default_ring_in_dialogjjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
  }
}
    a8e0:	cf 91       	pop	r28
    a8e2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5590
    default_ring = args3;
    MenuHistoryUpdateArgs1(args3);
  }
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    a8e4:	60 e0       	ldi	r22, 0x00	; 0
    a8e6:	84 e6       	ldi	r24, 0x64	; 100
    a8e8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5591
    dialog_yes_function = &term_ring_do_activate;
    a8ec:	8d eb       	ldi	r24, 0xBD	; 189
    a8ee:	91 e5       	ldi	r25, 0x51	; 81
    a8f0:	90 93 e1 08 	sts	0x08E1, r25	; 0x8008e1 <dialog_yes_function+0x1>
    a8f4:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <dialog_yes_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5592
    dialog_yes_args1 = args3;
    a8f8:	c0 93 df 08 	sts	0x08DF, r28	; 0x8008df <dialog_yes_args1>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
    strcpy_P(dialog_text, text_term_do_activate);
    a8fc:	66 ed       	ldi	r22, 0xD6	; 214
    a8fe:	74 e3       	ldi	r23, 0x34	; 52
    a900:	8f eb       	ldi	r24, 0xBF	; 191
    a902:	98 e0       	ldi	r25, 0x08	; 8
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5595
  }
}
    a904:	cf 91       	pop	r28
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5593
  else
  {
    MenuHistoryNextMenu(MENU_DIALOG_YES_NO, 0);
    dialog_yes_function = &term_ring_do_activate;
    dialog_yes_args1 = args3;
    strcpy_P(dialog_text, text_term_do_activate);
    a906:	0c 94 90 aa 	jmp	0x15520	; 0x15520 <strcpy_P>

0000a90a <thermostat_ring_get_name(unsigned char, char*)>:
_Z24thermostat_ring_get_namehPc():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:100
  return PID_time[idx];
}

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
    a90a:	ef 92       	push	r14
    a90c:	ff 92       	push	r15
    a90e:	0f 93       	push	r16
    a910:	1f 93       	push	r17
    a912:	cf 93       	push	r28
    a914:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:104
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    a916:	91 e2       	ldi	r25, 0x21	; 33
    a918:	89 9f       	mul	r24, r25
    a91a:	e0 01       	movw	r28, r0
    a91c:	11 24       	eor	r1, r1
    a91e:	8e 01       	movw	r16, r28
    a920:	04 5b       	subi	r16, 0xB4	; 180
    a922:	1e 4f       	sbci	r17, 0xFE	; 254
    a924:	7b 01       	movw	r14, r22
    a926:	cb 5a       	subi	r28, 0xAB	; 171
    a928:	de 4f       	sbci	r29, 0xFE	; 254
    a92a:	c8 01       	movw	r24, r16
    a92c:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:105
    name[i] = t;
    a930:	f7 01       	movw	r30, r14
    a932:	81 93       	st	Z+, r24
    a934:	7f 01       	movw	r14, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:106
    if (t == 0) break;
    a936:	88 23       	and	r24, r24
    a938:	29 f0       	breq	.+10     	; 0xa944 <thermostat_ring_get_name(unsigned char, char*)+0x3a>
    a93a:	0f 5f       	subi	r16, 0xFF	; 255
    a93c:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:102

/// ziska/nastavi nazev termostatu
void thermostat_ring_get_name(uint8_t idx, char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    a93e:	0c 17       	cp	r16, r28
    a940:	1d 07       	cpc	r17, r29
    a942:	99 f7       	brne	.-26     	; 0xa92a <thermostat_ring_get_name(unsigned char, char*)+0x20>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:108
  {
    t = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_name + i);
    name[i] = t;
    if (t == 0) break;
  }
}
    a944:	df 91       	pop	r29
    a946:	cf 91       	pop	r28
    a948:	1f 91       	pop	r17
    a94a:	0f 91       	pop	r16
    a94c:	ff 90       	pop	r15
    a94e:	ef 90       	pop	r14
    a950:	08 95       	ret

0000a952 <button_get_default_ring_labels(unsigned char, unsigned char, char*, char*)>:
_Z30button_get_default_ring_labelshhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5625
   nazev vychoziho ringu
   index vychoziho ringu
   zadne vstupni argumenty
*/
void button_get_default_ring_labels(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a952:	cf 92       	push	r12
    a954:	df 92       	push	r13
    a956:	ef 92       	push	r14
    a958:	ff 92       	push	r15
    a95a:	0f 93       	push	r16
    a95c:	1f 93       	push	r17
    a95e:	cf 93       	push	r28
    a960:	df 93       	push	r29
    a962:	00 d0       	rcall	.+0      	; 0xa964 <button_get_default_ring_labels(unsigned char, unsigned char, char*, char*)+0x12>
    a964:	00 d0       	rcall	.+0      	; 0xa966 <button_get_default_ring_labels(unsigned char, unsigned char, char*, char*)+0x14>
    a966:	00 d0       	rcall	.+0      	; 0xa968 <button_get_default_ring_labels(unsigned char, unsigned char, char*, char*)+0x16>
    a968:	1f 92       	push	r1
    a96a:	cd b7       	in	r28, 0x3d	; 61
    a96c:	de b7       	in	r29, 0x3e	; 62
    a96e:	7a 01       	movw	r14, r20
    a970:	d2 2e       	mov	r13, r18
    a972:	c3 2e       	mov	r12, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5627
  char name[10];
  thermostat_ring_get_name(default_ring, name);
    a974:	8e 01       	movw	r16, r28
    a976:	0f 5f       	subi	r16, 0xFF	; 255
    a978:	1f 4f       	sbci	r17, 0xFF	; 255
    a97a:	b8 01       	movw	r22, r16
    a97c:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <default_ring>
    a980:	0e 94 85 54 	call	0xa90a	; 0xa90a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5628
  sprintf(line2, "Regulator %d - %s", default_ring, name);
    a984:	1f 93       	push	r17
    a986:	0f 93       	push	r16
    a988:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <default_ring>
    a98c:	1f 92       	push	r1
    a98e:	8f 93       	push	r24
    a990:	84 e6       	ldi	r24, 0x64	; 100
    a992:	93 e0       	ldi	r25, 0x03	; 3
    a994:	9f 93       	push	r25
    a996:	8f 93       	push	r24
    a998:	cf 92       	push	r12
    a99a:	df 92       	push	r13
    a99c:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5629
  strcpy_P(line1, text_change_default_ring);
    a9a0:	62 e0       	ldi	r22, 0x02	; 2
    a9a2:	75 e3       	ldi	r23, 0x35	; 53
    a9a4:	c7 01       	movw	r24, r14
    a9a6:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
    a9aa:	0f b6       	in	r0, 0x3f	; 63
    a9ac:	f8 94       	cli
    a9ae:	de bf       	out	0x3e, r29	; 62
    a9b0:	0f be       	out	0x3f, r0	; 63
    a9b2:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5630
}
    a9b4:	2a 96       	adiw	r28, 0x0a	; 10
    a9b6:	0f b6       	in	r0, 0x3f	; 63
    a9b8:	f8 94       	cli
    a9ba:	de bf       	out	0x3e, r29	; 62
    a9bc:	0f be       	out	0x3f, r0	; 63
    a9be:	cd bf       	out	0x3d, r28	; 61
    a9c0:	df 91       	pop	r29
    a9c2:	cf 91       	pop	r28
    a9c4:	1f 91       	pop	r17
    a9c6:	0f 91       	pop	r16
    a9c8:	ff 90       	pop	r15
    a9ca:	ef 90       	pop	r14
    a9cc:	df 90       	pop	r13
    a9ce:	cf 90       	pop	r12
    a9d0:	08 95       	ret

0000a9d2 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, char*, char*)>:
_Z43button_change_default_ring_labels_in_dialoghhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5606
   informace aktivni/neaktivni regulacni okruh
   args1 ... loop_id z menu
   args2 ... globalni parametr z menu
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    a9d2:	bf 92       	push	r11
    a9d4:	cf 92       	push	r12
    a9d6:	df 92       	push	r13
    a9d8:	ef 92       	push	r14
    a9da:	ff 92       	push	r15
    a9dc:	0f 93       	push	r16
    a9de:	1f 93       	push	r17
    a9e0:	cf 93       	push	r28
    a9e2:	df 93       	push	r29
    a9e4:	cd b7       	in	r28, 0x3d	; 61
    a9e6:	de b7       	in	r29, 0x3e	; 62
    a9e8:	66 97       	sbiw	r28, 0x16	; 22
    a9ea:	0f b6       	in	r0, 0x3f	; 63
    a9ec:	f8 94       	cli
    a9ee:	de bf       	out	0x3e, r29	; 62
    a9f0:	0f be       	out	0x3f, r0	; 63
    a9f2:	cd bf       	out	0x3d, r28	; 61
    a9f4:	18 2f       	mov	r17, r24
    a9f6:	6a 01       	movw	r12, r20
    a9f8:	02 2f       	mov	r16, r18
    a9fa:	b3 2e       	mov	r11, r19
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5609
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    a9fc:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    aa00:	9e 01       	movw	r18, r28
    aa02:	2f 5f       	subi	r18, 0xFF	; 255
    aa04:	3f 4f       	sbci	r19, 0xFF	; 255
    aa06:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5610
    strcpy_P(active, text_term_active);
    aa08:	6a ef       	ldi	r22, 0xFA	; 250
    aa0a:	74 e3       	ldi	r23, 0x34	; 52
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5609
*/
void button_change_default_ring_labels_in_dialog(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char name[10];
  char active[12];
  if (thermostat_ring_get_active(args1) != 255)
    aa0c:	8f 3f       	cpi	r24, 0xFF	; 255
    aa0e:	11 f4       	brne	.+4      	; 0xaa14 <button_change_default_ring_labels_in_dialog(unsigned char, unsigned char, char*, char*)+0x42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5612
    strcpy_P(active, text_term_active);
  else
    strcpy_P(active, text_term_deactive);
    aa10:	60 ef       	ldi	r22, 0xF0	; 240
    aa12:	74 e3       	ldi	r23, 0x34	; 52
    aa14:	c7 01       	movw	r24, r14
    aa16:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5613
  thermostat_ring_get_name(args1, name);
    aa1a:	be 01       	movw	r22, r28
    aa1c:	63 5f       	subi	r22, 0xF3	; 243
    aa1e:	7f 4f       	sbci	r23, 0xFF	; 255
    aa20:	81 2f       	mov	r24, r17
    aa22:	0e 94 85 54 	call	0xa90a	; 0xa90a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5614
  sprintf(line2, "Reg. %d %s", args1, active);
    aa26:	ff 92       	push	r15
    aa28:	ef 92       	push	r14
    aa2a:	1f 92       	push	r1
    aa2c:	1f 93       	push	r17
    aa2e:	86 e7       	ldi	r24, 0x76	; 118
    aa30:	93 e0       	ldi	r25, 0x03	; 3
    aa32:	9f 93       	push	r25
    aa34:	8f 93       	push	r24
    aa36:	bf 92       	push	r11
    aa38:	0f 93       	push	r16
    aa3a:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5615
  strcpy(line1, name);
    aa3e:	be 01       	movw	r22, r28
    aa40:	63 5f       	subi	r22, 0xF3	; 243
    aa42:	7f 4f       	sbci	r23, 0xFF	; 255
    aa44:	c6 01       	movw	r24, r12
    aa46:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
    aa4a:	0f b6       	in	r0, 0x3f	; 63
    aa4c:	f8 94       	cli
    aa4e:	de bf       	out	0x3e, r29	; 62
    aa50:	0f be       	out	0x3f, r0	; 63
    aa52:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5616
}
    aa54:	66 96       	adiw	r28, 0x16	; 22
    aa56:	0f b6       	in	r0, 0x3f	; 63
    aa58:	f8 94       	cli
    aa5a:	de bf       	out	0x3e, r29	; 62
    aa5c:	0f be       	out	0x3f, r0	; 63
    aa5e:	cd bf       	out	0x3d, r28	; 61
    aa60:	df 91       	pop	r29
    aa62:	cf 91       	pop	r28
    aa64:	1f 91       	pop	r17
    aa66:	0f 91       	pop	r16
    aa68:	ff 90       	pop	r15
    aa6a:	ef 90       	pop	r14
    aa6c:	df 90       	pop	r13
    aa6e:	cf 90       	pop	r12
    aa70:	bf 90       	pop	r11
    aa72:	08 95       	ret

0000aa74 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z35display_element_dialog_default_ringjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4791
  my_lcd.Draw_Rectangle(x, y, x + size_x, y + size_y);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void display_element_dialog_default_ring(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    aa74:	af 92       	push	r10
    aa76:	bf 92       	push	r11
    aa78:	cf 92       	push	r12
    aa7a:	df 92       	push	r13
    aa7c:	ef 92       	push	r14
    aa7e:	ff 92       	push	r15
    aa80:	0f 93       	push	r16
    aa82:	1f 93       	push	r17
    aa84:	cf 93       	push	r28
    aa86:	df 93       	push	r29
    aa88:	cd b7       	in	r28, 0x3d	; 61
    aa8a:	de b7       	in	r29, 0x3e	; 62
    aa8c:	a8 97       	sbiw	r28, 0x28	; 40
    aa8e:	0f b6       	in	r0, 0x3f	; 63
    aa90:	f8 94       	cli
    aa92:	de bf       	out	0x3e, r29	; 62
    aa94:	0f be       	out	0x3f, r0	; 63
    aa96:	cd bf       	out	0x3d, r28	; 61
    aa98:	6c 01       	movw	r12, r24
    aa9a:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4794
  char name[10];
  char default_text[30];
  strcpy_P(default_text, regulator_default_text);
    aa9c:	67 e0       	ldi	r22, 0x07	; 7
    aa9e:	74 e3       	ldi	r23, 0x34	; 52
    aaa0:	ce 01       	movw	r24, r28
    aaa2:	01 96       	adiw	r24, 0x01	; 1
    aaa4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4795
  if (thermostat_ring_get_active(default_ring) != 255)
    aaa8:	10 91 0a 0a 	lds	r17, 0x0A0A	; 0x800a0a <default_ring>
    aaac:	81 2f       	mov	r24, r17
    aaae:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    aab2:	8f 3f       	cpi	r24, 0xFF	; 255
    aab4:	51 f1       	breq	.+84     	; 0xab0a <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4797
  {
    thermostat_ring_get_name(default_ring, name);
    aab6:	be 01       	movw	r22, r28
    aab8:	61 5e       	subi	r22, 0xE1	; 225
    aaba:	7f 4f       	sbci	r23, 0xFF	; 255
    aabc:	81 2f       	mov	r24, r17
    aabe:	0e 94 85 54 	call	0xa90a	; 0xa90a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4803
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    strcat(default_text, name);
    aac2:	be 01       	movw	r22, r28
    aac4:	61 5e       	subi	r22, 0xE1	; 225
    aac6:	7f 4f       	sbci	r23, 0xFF	; 255
    aac8:	ce 01       	movw	r24, r28
    aaca:	01 96       	adiw	r24, 0x01	; 1
    aacc:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4805
  }
  show_string(default_text, x, y, 2, BLACK, WHITE, 0);
    aad0:	ee 24       	eor	r14, r14
    aad2:	ea 94       	dec	r14
    aad4:	fe 2c       	mov	r15, r14
    aad6:	10 e0       	ldi	r17, 0x00	; 0
    aad8:	00 e0       	ldi	r16, 0x00	; 0
    aada:	22 e0       	ldi	r18, 0x02	; 2
    aadc:	a5 01       	movw	r20, r10
    aade:	b6 01       	movw	r22, r12
    aae0:	ce 01       	movw	r24, r28
    aae2:	01 96       	adiw	r24, 0x01	; 1
    aae4:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4806
}
    aae8:	a8 96       	adiw	r28, 0x28	; 40
    aaea:	0f b6       	in	r0, 0x3f	; 63
    aaec:	f8 94       	cli
    aaee:	de bf       	out	0x3e, r29	; 62
    aaf0:	0f be       	out	0x3f, r0	; 63
    aaf2:	cd bf       	out	0x3d, r28	; 61
    aaf4:	df 91       	pop	r29
    aaf6:	cf 91       	pop	r28
    aaf8:	1f 91       	pop	r17
    aafa:	0f 91       	pop	r16
    aafc:	ff 90       	pop	r15
    aafe:	ef 90       	pop	r14
    ab00:	df 90       	pop	r13
    ab02:	cf 90       	pop	r12
    ab04:	bf 90       	pop	r11
    ab06:	af 90       	pop	r10
    ab08:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4802
    thermostat_ring_get_name(default_ring, name);
    strcat(default_text, name);
  }
  else
  {
    strcpy_P(name, text_err);
    ab0a:	69 e3       	ldi	r22, 0x39	; 57
    ab0c:	74 e3       	ldi	r23, 0x34	; 52
    ab0e:	ce 01       	movw	r24, r28
    ab10:	4f 96       	adiw	r24, 0x1f	; 31
    ab12:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
    ab16:	d5 cf       	rjmp	.-86     	; 0xaac2 <display_element_dialog_default_ring(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x4e>

0000ab18 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)>:
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5821
   args1 ... paramentr z definice prvku
   args2 ... paramentr z define menu
   args3 ... index prvku v menu
*/
uint8_t button_get_term_heat_or_cool(uint16_t args1, uint16_t args2, uint8_t args3)
{
    ab18:	0f 93       	push	r16
    ab1a:	1f 93       	push	r17
    ab1c:	cf 93       	push	r28
    ab1e:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5824
  uint8_t ret = 0;
  uint8_t b;
  if (thermostat_ring_get_active(default_ring) != 255)
    ab20:	c0 91 0a 0a 	lds	r28, 0x0A0A	; 0x800a0a <default_ring>
    ab24:	8c 2f       	mov	r24, r28
    ab26:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
    ab2a:	8f 3f       	cpi	r24, 0xFF	; 255
    ab2c:	71 f0       	breq	.+28     	; 0xab4a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
thermostat_ring_get_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:197
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
}
uint8_t thermostat_ring_get_status_bites(uint8_t idx, uint8_t bits)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
    ab2e:	21 e2       	ldi	r18, 0x21	; 33
    ab30:	c2 9f       	mul	r28, r18
    ab32:	c0 01       	movw	r24, r0
    ab34:	11 24       	eor	r1, r1
    ab36:	88 5a       	subi	r24, 0xA8	; 168
    ab38:	9e 4f       	sbci	r25, 0xFE	; 254
    ab3a:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_term_heat_or_cooljjh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5827
  {
    b = thermostat_ring_get_status_bites(default_ring, STATUS_BIT_HEAT_OR_COOL);
    if (b == 0 && args1 == TERM_MODE_MAN_HEAT)
    ab3e:	80 fd       	sbrc	r24, 0
    ab40:	06 c0       	rjmp	.+12     	; 0xab4e <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x36>
    ab42:	81 e0       	ldi	r24, 0x01	; 1
    ab44:	03 30       	cpi	r16, 0x03	; 3
    ab46:	11 05       	cpc	r17, r1
    ab48:	31 f0       	breq	.+12     	; 0xab56 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5829
      ret = 1;
    if (b != 0 && args1 == TERM_MODE_MAN_COOL)
    ab4a:	80 e0       	ldi	r24, 0x00	; 0
    ab4c:	04 c0       	rjmp	.+8      	; 0xab56 <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x3e>
    ab4e:	81 e0       	ldi	r24, 0x01	; 1
    ab50:	05 30       	cpi	r16, 0x05	; 5
    ab52:	11 05       	cpc	r17, r1
    ab54:	d1 f7       	brne	.-12     	; 0xab4a <button_get_term_heat_or_cool(unsigned int, unsigned int, unsigned char)+0x32>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5833
      ret = 1;
  }
  return ret;
}
    ab56:	cf 91       	pop	r28
    ab58:	1f 91       	pop	r17
    ab5a:	0f 91       	pop	r16
    ab5c:	08 95       	ret

0000ab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>:
_Z12get_tds18s20hP15struct_DDS18s20():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:35
  }
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
    ab5e:	af 92       	push	r10
    ab60:	bf 92       	push	r11
    ab62:	cf 92       	push	r12
    ab64:	df 92       	push	r13
    ab66:	ef 92       	push	r14
    ab68:	ff 92       	push	r15
    ab6a:	0f 93       	push	r16
    ab6c:	1f 93       	push	r17
    ab6e:	cf 93       	push	r28
    ab70:	df 93       	push	r29
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:37
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
    ab72:	86 30       	cpi	r24, 0x06	; 6
    ab74:	08 f0       	brcs	.+2      	; 0xab78 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x1a>
    ab76:	56 c0       	rjmp	.+172    	; 0xac24 <get_tds18s20(unsigned char, struct_DDS18s20*)+0xc6>
    ab78:	8b 01       	movw	r16, r22
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:39
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    ab7a:	96 e1       	ldi	r25, 0x16	; 22
    ab7c:	89 9f       	mul	r24, r25
    ab7e:	e0 01       	movw	r28, r0
    ab80:	11 24       	eor	r1, r1
    ab82:	ce 01       	movw	r24, r28
    ab84:	88 53       	subi	r24, 0x38	; 56
    ab86:	9f 4f       	sbci	r25, 0xFF	; 255
    ab88:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ab8c:	f8 01       	movw	r30, r16
    ab8e:	81 93       	st	Z+, r24
    ab90:	6f 01       	movw	r12, r30
    ab92:	7e 01       	movw	r14, r28
    ab94:	f9 ec       	ldi	r31, 0xC9	; 201
    ab96:	ef 0e       	add	r14, r31
    ab98:	f1 1c       	adc	r15, r1
    ab9a:	5e 01       	movw	r10, r28
    ab9c:	81 ed       	ldi	r24, 0xD1	; 209
    ab9e:	a8 0e       	add	r10, r24
    aba0:	b1 1c       	adc	r11, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:42
    for (uint8_t m = 0; m < 8; m++)
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
    aba2:	c7 01       	movw	r24, r14
    aba4:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    aba8:	f6 01       	movw	r30, r12
    abaa:	81 93       	st	Z+, r24
    abac:	6f 01       	movw	r12, r30
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:43
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    abae:	c7 01       	movw	r24, r14
    abb0:	0b 96       	adiw	r24, 0x0b	; 11
    abb2:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    abb6:	f6 01       	movw	r30, r12
    abb8:	82 87       	std	Z+10, r24	; 0x0a
    abba:	ff ef       	ldi	r31, 0xFF	; 255
    abbc:	ef 1a       	sub	r14, r31
    abbe:	ff 0a       	sbc	r15, r31
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:40
{
  uint8_t ret = 0;
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    tds->used = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    for (uint8_t m = 0; m < 8; m++)
    abc0:	ea 14       	cp	r14, r10
    abc2:	fb 04       	cpc	r15, r11
    abc4:	71 f7       	brne	.-36     	; 0xaba2 <get_tds18s20(unsigned char, struct_DDS18s20*)+0x44>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:45
    {
      tds->rom[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_rom + m);
      tds->name[m] = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_name + m);
    }
    tds->name[7] = 0;
    abc6:	f8 01       	movw	r30, r16
    abc8:	13 8a       	std	Z+19, r1	; 0x13
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:46
    tds->assigned_ds2482 = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_assigned);
    abca:	c7 01       	movw	r24, r14
    abcc:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    abd0:	f8 01       	movw	r30, r16
    abd2:	81 87       	std	Z+9, r24	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:47
    tds->offset = (EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_high) << 8) + EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_offset_low);
    abd4:	ce 01       	movw	r24, r28
    abd6:	8e 52       	subi	r24, 0x2E	; 46
    abd8:	9f 4f       	sbci	r25, 0xFF	; 255
    abda:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    abde:	f8 2e       	mov	r15, r24
    abe0:	ce 01       	movw	r24, r28
    abe2:	8d 52       	subi	r24, 0x2D	; 45
    abe4:	9f 4f       	sbci	r25, 0xFF	; 255
    abe6:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    abea:	2f 2d       	mov	r18, r15
    abec:	30 e0       	ldi	r19, 0x00	; 0
    abee:	32 2f       	mov	r19, r18
    abf0:	22 27       	eor	r18, r18
    abf2:	82 0f       	add	r24, r18
    abf4:	93 2f       	mov	r25, r19
    abf6:	91 1d       	adc	r25, r1
    abf8:	f8 01       	movw	r30, r16
    abfa:	93 87       	std	Z+11, r25	; 0x0b
    abfc:	82 87       	std	Z+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:48
    tds->period = EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_period);
    abfe:	ce 01       	movw	r24, r28
    ac00:	84 52       	subi	r24, 0x24	; 36
    ac02:	9f 4f       	sbci	r25, 0xFF	; 255
    ac04:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    ac08:	f8 01       	movw	r30, r16
    ac0a:	84 8b       	std	Z+20, r24	; 0x14
    ac0c:	81 e0       	ldi	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:52
    ret = 1;
  }
  return ret;
}
    ac0e:	df 91       	pop	r29
    ac10:	cf 91       	pop	r28
    ac12:	1f 91       	pop	r17
    ac14:	0f 91       	pop	r16
    ac16:	ff 90       	pop	r15
    ac18:	ef 90       	pop	r14
    ac1a:	df 90       	pop	r13
    ac1c:	cf 90       	pop	r12
    ac1e:	bf 90       	pop	r11
    ac20:	af 90       	pop	r10
    ac22:	08 95       	ret
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:36
}

/// ziska strikturu tds
uint8_t get_tds18s20(uint8_t idx, struct_DDS18s20 *tds)
{
  uint8_t ret = 0;
    ac24:	80 e0       	ldi	r24, 0x00	; 0
    ac26:	f3 cf       	rjmp	.-26     	; 0xac0e <get_tds18s20(unsigned char, struct_DDS18s20*)+0xb0>

0000ac28 <tds_update_associate()>:
_Z20tds_update_associatev():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:141
  tds_set_clear(w_rom[idx].tds_idx);
}

//// funkce, ktera zpetne nastavi do w_rom tds_idx, do jake realne tds je to assiciovano
void tds_update_associate(void)
{
    ac28:	ef 92       	push	r14
    ac2a:	ff 92       	push	r15
    ac2c:	0f 93       	push	r16
    ac2e:	1f 93       	push	r17
    ac30:	cf 93       	push	r28
    ac32:	df 93       	push	r29
    ac34:	cd b7       	in	r28, 0x3d	; 61
    ac36:	de b7       	in	r29, 0x3e	; 62
    ac38:	6e 97       	sbiw	r28, 0x1e	; 30
    ac3a:	0f b6       	in	r0, 0x3f	; 63
    ac3c:	f8 94       	cli
    ac3e:	de bf       	out	0x3e, r29	; 62
    ac40:	0f be       	out	0x3f, r0	; 63
    ac42:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:144
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;
    ac44:	1f 8a       	std	Y+23, r1	; 0x17
    ac46:	18 8e       	std	Y+24, r1	; 0x18
    ac48:	19 8e       	std	Y+25, r1	; 0x19
    ac4a:	1a 8e       	std	Y+26, r1	; 0x1a
    ac4c:	1b 8e       	std	Y+27, r1	; 0x1b
    ac4e:	1c 8e       	std	Y+28, r1	; 0x1c
    ac50:	1d 8e       	std	Y+29, r1	; 0x1d
    ac52:	1e 8e       	std	Y+30, r1	; 0x1e
    ac54:	0b eb       	ldi	r16, 0xBB	; 187
    ac56:	19 e0       	ldi	r17, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:148

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
  {
    w_rom[wrom_id].tds_idx = 255;
    ac58:	ee 24       	eor	r14, r14
    ac5a:	ea 94       	dec	r14
    ac5c:	f8 01       	movw	r30, r16
    ac5e:	e2 86       	std	Z+10, r14	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:149
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
    ac60:	b8 01       	movw	r22, r16
    ac62:	ce 01       	movw	r24, r28
    ac64:	47 96       	adiw	r24, 0x17	; 23
    ac66:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <tds_compare_rom(unsigned char*, unsigned char*)>
    ac6a:	81 11       	cpse	r24, r1
    ac6c:	14 c0       	rjmp	.+40     	; 0xac96 <tds_update_associate()+0x6e>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ac6e:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:154
    {
      get_tds18s20(tds_id, &tds);
    ac70:	be 01       	movw	r22, r28
    ac72:	6f 5f       	subi	r22, 0xFF	; 255
    ac74:	7f 4f       	sbci	r23, 0xFF	; 255
    ac76:	8f 2d       	mov	r24, r15
    ac78:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:155
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
    ac7c:	b8 01       	movw	r22, r16
    ac7e:	ce 01       	movw	r24, r28
    ac80:	02 96       	adiw	r24, 0x02	; 2
    ac82:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <tds_compare_rom(unsigned char*, unsigned char*)>
    ac86:	88 23       	and	r24, r24
    ac88:	11 f0       	breq	.+4      	; 0xac8e <tds_update_associate()+0x66>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:156
        w_rom[wrom_id].tds_idx = tds_id;
    ac8a:	f8 01       	movw	r30, r16
    ac8c:	f2 86       	std	Z+10, r15	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:152
  {
    w_rom[wrom_id].tds_idx = 255;
    if (tds_compare_rom(tmp_rom, w_rom[wrom_id].rom) == true)
      continue;

    for (uint8_t tds_id = 0; tds_id < HW_ONEWIRE_MAXROMS; tds_id++)
    ac8e:	f3 94       	inc	r15
    ac90:	f6 e0       	ldi	r31, 0x06	; 6
    ac92:	ff 12       	cpse	r15, r31
    ac94:	ed cf       	rjmp	.-38     	; 0xac70 <tds_update_associate()+0x48>
    ac96:	05 5f       	subi	r16, 0xF5	; 245
    ac98:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:146
{
  struct_DDS18s20 tds;
  uint8_t tmp_rom[8];
  for (uint8_t r = 0; r < 8; r++) tmp_rom[r] = 0;

  for (uint8_t wrom_id = 0; wrom_id < HW_ONEWIRE_MAXROMS; wrom_id++)
    ac9a:	89 e0       	ldi	r24, 0x09	; 9
    ac9c:	0d 3f       	cpi	r16, 0xFD	; 253
    ac9e:	18 07       	cpc	r17, r24
    aca0:	e9 f6       	brne	.-70     	; 0xac5c <tds_update_associate()+0x34>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:159
      get_tds18s20(tds_id, &tds);
      if (tds_compare_rom(tds.rom, w_rom[wrom_id].rom) == true)
        w_rom[wrom_id].tds_idx = tds_id;
    }
  }
}
    aca2:	6e 96       	adiw	r28, 0x1e	; 30
    aca4:	0f b6       	in	r0, 0x3f	; 63
    aca6:	f8 94       	cli
    aca8:	de bf       	out	0x3e, r29	; 62
    acaa:	0f be       	out	0x3f, r0	; 63
    acac:	cd bf       	out	0x3d, r28	; 61
    acae:	df 91       	pop	r29
    acb0:	cf 91       	pop	r28
    acb2:	1f 91       	pop	r17
    acb4:	0f 91       	pop	r16
    acb6:	ff 90       	pop	r15
    acb8:	ef 90       	pop	r14
    acba:	08 95       	ret

0000acbc <tds_associate(unsigned char)>:
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:202
{
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
    acbc:	af 92       	push	r10
    acbe:	bf 92       	push	r11
    acc0:	cf 92       	push	r12
    acc2:	df 92       	push	r13
    acc4:	ef 92       	push	r14
    acc6:	ff 92       	push	r15
    acc8:	1f 93       	push	r17
    acca:	cf 93       	push	r28
    accc:	df 93       	push	r29
    acce:	cd b7       	in	r28, 0x3d	; 61
    acd0:	de b7       	in	r29, 0x3e	; 62
    acd2:	66 97       	sbiw	r28, 0x16	; 22
    acd4:	0f b6       	in	r0, 0x3f	; 63
    acd6:	f8 94       	cli
    acd8:	de bf       	out	0x3e, r29	; 62
    acda:	0f be       	out	0x3f, r0	; 63
    acdc:	cd bf       	out	0x3d, r28	; 61
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:179
/// funkce overeni associace
uint8_t tds_check_associate(uint8_t id)
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
    acde:	90 91 fd 09 	lds	r25, 0x09FD	; 0x8009fd <Global_HWwirenum>
    ace2:	89 17       	cp	r24, r25
    ace4:	a0 f0       	brcs	.+40     	; 0xad0e <tds_associate(unsigned char)+0x52>
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:203
  return w_rom[id].tds_idx;
}

uint8_t tds_associate(uint8_t id)
{
  uint8_t ret = 255;
    ace6:	1f ef       	ldi	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:224
        ret = idx;
        break;
      }
    }
  }
  tds_update_associate();
    ace8:	0e 94 14 56 	call	0xac28	; 0xac28 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:226
  return ret;
}
    acec:	81 2f       	mov	r24, r17
    acee:	66 96       	adiw	r28, 0x16	; 22
    acf0:	0f b6       	in	r0, 0x3f	; 63
    acf2:	f8 94       	cli
    acf4:	de bf       	out	0x3e, r29	; 62
    acf6:	0f be       	out	0x3f, r0	; 63
    acf8:	cd bf       	out	0x3d, r28	; 61
    acfa:	df 91       	pop	r29
    acfc:	cf 91       	pop	r28
    acfe:	1f 91       	pop	r17
    ad00:	ff 90       	pop	r15
    ad02:	ef 90       	pop	r14
    ad04:	df 90       	pop	r13
    ad06:	cf 90       	pop	r12
    ad08:	bf 90       	pop	r11
    ad0a:	af 90       	pop	r10
    ad0c:	08 95       	ret
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ad0e:	a8 2e       	mov	r10, r24
    ad10:	b1 2c       	mov	r11, r1
    ad12:	2b e0       	ldi	r18, 0x0B	; 11
    ad14:	82 9f       	mul	r24, r18
    ad16:	c0 01       	movw	r24, r0
    ad18:	11 24       	eor	r1, r1
    ad1a:	fc 01       	movw	r30, r24
    ad1c:	e5 54       	subi	r30, 0x45	; 69
    ad1e:	f6 4f       	sbci	r31, 0xF6	; 246
    ad20:	7f 01       	movw	r14, r30
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ad22:	10 e0       	ldi	r17, 0x00	; 0
tds_check_associate():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:183
    {
      get_tds18s20(idx, &tds);
    ad24:	be 01       	movw	r22, r28
    ad26:	6f 5f       	subi	r22, 0xFF	; 255
    ad28:	7f 4f       	sbci	r23, 0xFF	; 255
    ad2a:	81 2f       	mov	r24, r17
    ad2c:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:184
      if (tds_compare_rom(tds.rom, w_rom[id].rom) == True)
    ad30:	b7 01       	movw	r22, r14
    ad32:	ce 01       	movw	r24, r28
    ad34:	02 96       	adiw	r24, 0x02	; 2
    ad36:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <tds_compare_rom(unsigned char*, unsigned char*)>
    ad3a:	81 11       	cpse	r24, r1
    ad3c:	d4 cf       	rjmp	.-88     	; 0xace6 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:181
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if ( id < Global_HWwirenum)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ad3e:	1f 5f       	subi	r17, 0xFF	; 255
    ad40:	16 30       	cpi	r17, 0x06	; 6
    ad42:	81 f7       	brne	.-32     	; 0xad24 <tds_associate(unsigned char)+0x68>
    ad44:	10 e0       	ldi	r17, 0x00	; 0
_Z13tds_associateh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
    ad46:	2b e0       	ldi	r18, 0x0B	; 11
    ad48:	2a 9d       	mul	r18, r10
    ad4a:	c0 01       	movw	r24, r0
    ad4c:	2b 9d       	mul	r18, r11
    ad4e:	90 0d       	add	r25, r0
    ad50:	11 24       	eor	r1, r1
    ad52:	fc 01       	movw	r30, r24
    ad54:	ec 53       	subi	r30, 0x3C	; 60
    ad56:	f6 4f       	sbci	r31, 0xF6	; 246
    ad58:	6f 01       	movw	r12, r30
    ad5a:	03 c0       	rjmp	.+6      	; 0xad62 <tds_associate(unsigned char)+0xa6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:207
{
  uint8_t ret = 255;
  struct_DDS18s20 tds;
  if (tds_check_associate(id) == 255)
  {
    for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ad5c:	1f 5f       	subi	r17, 0xFF	; 255
    ad5e:	16 30       	cpi	r17, 0x06	; 6
    ad60:	11 f2       	breq	.-124    	; 0xace6 <tds_associate(unsigned char)+0x2a>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:209
    {
      get_tds18s20(idx, &tds);
    ad62:	be 01       	movw	r22, r28
    ad64:	6f 5f       	subi	r22, 0xFF	; 255
    ad66:	7f 4f       	sbci	r23, 0xFF	; 255
    ad68:	81 2f       	mov	r24, r17
    ad6a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:210
      if (tds.used == 0 && w_rom[id].used == 1)
    ad6e:	89 81       	ldd	r24, Y+1	; 0x01
    ad70:	81 11       	cpse	r24, r1
    ad72:	f4 cf       	rjmp	.-24     	; 0xad5c <tds_associate(unsigned char)+0xa0>
    ad74:	f6 01       	movw	r30, r12
    ad76:	80 81       	ld	r24, Z
    ad78:	81 30       	cpi	r24, 0x01	; 1
    ad7a:	81 f7       	brne	.-32     	; 0xad5c <tds_associate(unsigned char)+0xa0>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:212
      {
        tds.used = 1;
    ad7c:	89 83       	std	Y+1, r24	; 0x01
    ad7e:	fe 01       	movw	r30, r28
    ad80:	32 96       	adiw	r30, 0x02	; 2
    ad82:	90 e0       	ldi	r25, 0x00	; 0
    ad84:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:214
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
    ad86:	d7 01       	movw	r26, r14
    ad88:	a8 0f       	add	r26, r24
    ad8a:	b9 1f       	adc	r27, r25
    ad8c:	2c 91       	ld	r18, X
    ad8e:	21 93       	st	Z+, r18
    ad90:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:213
    {
      get_tds18s20(idx, &tds);
      if (tds.used == 0 && w_rom[id].used == 1)
      {
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
    ad92:	88 30       	cpi	r24, 0x08	; 8
    ad94:	91 05       	cpc	r25, r1
    ad96:	b9 f7       	brne	.-18     	; 0xad86 <tds_associate(unsigned char)+0xca>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:215
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
    ad98:	2b e0       	ldi	r18, 0x0B	; 11
    ad9a:	12 9f       	mul	r17, r18
    ad9c:	f0 01       	movw	r30, r0
    ad9e:	11 24       	eor	r1, r1
    ada0:	e5 54       	subi	r30, 0x45	; 69
    ada2:	f6 4f       	sbci	r31, 0xF6	; 246
    ada4:	e0 85       	ldd	r30, Z+8	; 0x08
    ada6:	f0 e0       	ldi	r31, 0x00	; 0
    ada8:	ee 0f       	add	r30, r30
    adaa:	ff 1f       	adc	r31, r31
    adac:	ef 58       	subi	r30, 0x8F	; 143
    adae:	f6 4f       	sbci	r31, 0xF6	; 246
    adb0:	80 81       	ld	r24, Z
    adb2:	8a 87       	std	Y+10, r24	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:216
        set_tds18s20(idx, &tds);
    adb4:	be 01       	movw	r22, r28
    adb6:	6f 5f       	subi	r22, 0xFF	; 255
    adb8:	7f 4f       	sbci	r23, 0xFF	; 255
    adba:	81 2f       	mov	r24, r17
    adbc:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
    adc0:	3e e1       	ldi	r19, 0x1E	; 30
    adc2:	13 9f       	mul	r17, r19
    adc4:	a0 01       	movw	r20, r0
    adc6:	11 24       	eor	r1, r1
    adc8:	90 e0       	ldi	r25, 0x00	; 0
    adca:	80 e0       	ldi	r24, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:218
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    adcc:	20 e2       	ldi	r18, 0x20	; 32
    adce:	3e e4       	ldi	r19, 0x4E	; 78
    add0:	fc 01       	movw	r30, r24
    add2:	ee 0f       	add	r30, r30
    add4:	ff 1f       	adc	r31, r31
    add6:	e4 0f       	add	r30, r20
    add8:	f5 1f       	adc	r31, r21
    adda:	eb 5e       	subi	r30, 0xEB	; 235
    addc:	f5 4f       	sbci	r31, 0xF5	; 245
    adde:	30 87       	std	Z+8, r19	; 0x08
    ade0:	27 83       	std	Z+7, r18	; 0x07
    ade2:	01 96       	adiw	r24, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:217
        tds.used = 1;
        for (uint8_t i = 0; i < 8; i++)
          tds.rom[i] = w_rom[id].rom[i];
        tds.assigned_ds2482 = ds2482_address[w_rom[idx].assigned_ds2482].i2c_addr;
        set_tds18s20(idx, &tds);
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    ade4:	8a 30       	cpi	r24, 0x0A	; 10
    ade6:	91 05       	cpc	r25, r1
    ade8:	99 f7       	brne	.-26     	; 0xadd0 <tds_associate(unsigned char)+0x114>
    adea:	7e cf       	rjmp	.-260    	; 0xace8 <tds_associate(unsigned char)+0x2c>

0000adec <tds_set_clear(unsigned char)>:
_Z13tds_set_clearh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:120
  return tds.period;
}

//// funkce vymaze associovane 1wire -> tds
void tds_set_clear(uint8_t idx)
{
    adec:	1f 93       	push	r17
    adee:	cf 93       	push	r28
    adf0:	df 93       	push	r29
    adf2:	cd b7       	in	r28, 0x3d	; 61
    adf4:	de b7       	in	r29, 0x3e	; 62
    adf6:	66 97       	sbiw	r28, 0x16	; 22
    adf8:	0f b6       	in	r0, 0x3f	; 63
    adfa:	f8 94       	cli
    adfc:	de bf       	out	0x3e, r29	; 62
    adfe:	0f be       	out	0x3f, r0	; 63
    ae00:	cd bf       	out	0x3d, r28	; 61
    ae02:	18 2f       	mov	r17, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:122
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    ae04:	be 01       	movw	r22, r28
    ae06:	6f 5f       	subi	r22, 0xFF	; 255
    ae08:	7f 4f       	sbci	r23, 0xFF	; 255
    ae0a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:123
  tds.used = 0;
    ae0e:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:124
  strcpy(tds.name, "FREE");
    ae10:	6f e5       	ldi	r22, 0x5F	; 95
    ae12:	73 e0       	ldi	r23, 0x03	; 3
    ae14:	ce 01       	movw	r24, r28
    ae16:	0d 96       	adiw	r24, 0x0d	; 13
    ae18:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:125
  tds.offset = 0;
    ae1c:	1c 86       	std	Y+12, r1	; 0x0c
    ae1e:	1b 86       	std	Y+11, r1	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:126
  tds.period = 10;
    ae20:	8a e0       	ldi	r24, 0x0A	; 10
    ae22:	8d 8b       	std	Y+21, r24	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:128
  for (uint8_t i = 0; i < 8; i++)
    tds.rom[i] = 0;
    ae24:	1a 82       	std	Y+2, r1	; 0x02
    ae26:	1b 82       	std	Y+3, r1	; 0x03
    ae28:	1c 82       	std	Y+4, r1	; 0x04
    ae2a:	1d 82       	std	Y+5, r1	; 0x05
    ae2c:	1e 82       	std	Y+6, r1	; 0x06
    ae2e:	1f 82       	std	Y+7, r1	; 0x07
    ae30:	18 86       	std	Y+8, r1	; 0x08
    ae32:	19 86       	std	Y+9, r1	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:129
  tds.assigned_ds2482 = 0;
    ae34:	1a 86       	std	Y+10, r1	; 0x0a
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:130
  set_tds18s20(idx, &tds);
    ae36:	be 01       	movw	r22, r28
    ae38:	6f 5f       	subi	r22, 0xFF	; 255
    ae3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ae3c:	81 2f       	mov	r24, r17
    ae3e:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:131
  tds_update_associate();
    ae42:	0e 94 14 56 	call	0xac28	; 0xac28 <tds_update_associate()>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:132
}
    ae46:	66 96       	adiw	r28, 0x16	; 22
    ae48:	0f b6       	in	r0, 0x3f	; 63
    ae4a:	f8 94       	cli
    ae4c:	de bf       	out	0x3e, r29	; 62
    ae4e:	0f be       	out	0x3f, r0	; 63
    ae50:	cd bf       	out	0x3d, r28	; 61
    ae52:	df 91       	pop	r29
    ae54:	cf 91       	pop	r28
    ae56:	1f 91       	pop	r17
    ae58:	08 95       	ret

0000ae5a <click_tds_deassociate_onewire(unsigned char, unsigned char)>:
_Z29click_tds_deassociate_onewirehh():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:136

void tds_set_clear_wrom_id(uint8_t idx)
{
  tds_set_clear(w_rom[idx].tds_idx);
    ae5a:	8b e0       	ldi	r24, 0x0B	; 11
    ae5c:	68 9f       	mul	r22, r24
    ae5e:	f0 01       	movw	r30, r0
    ae60:	11 24       	eor	r1, r1
    ae62:	e5 54       	subi	r30, 0x45	; 69
    ae64:	f6 4f       	sbci	r31, 0xF6	; 246
    ae66:	82 85       	ldd	r24, Z+10	; 0x0a
    ae68:	0e 94 f6 56 	call	0xadec	; 0xadec <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5333
/// zruseni associace
void click_tds_deassociate_onewire(uint8_t args1, uint8_t idx)
{

  tds_set_clear_wrom_id(idx);
  MenuHistoryPrevMenu();
    ae6c:	0c 94 26 32 	jmp	0x644c	; 0x644c <MenuHistoryPrevMenu()>

0000ae70 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)>:
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5283
   args2 parametr ... definece z globalniho nastaveni menu, zde v nasem pripade je to index 1w cidla na sbernici
 * *line1 - vraci ROM adresu
 * *line2 - vraci akci associovat/nastavit
*/
void get_function_one_wire_associate_or_setting_text_button(uint8_t args1, uint8_t args2 , char *line1, char *line2)
{
    ae70:	8f 92       	push	r8
    ae72:	9f 92       	push	r9
    ae74:	af 92       	push	r10
    ae76:	bf 92       	push	r11
    ae78:	cf 92       	push	r12
    ae7a:	df 92       	push	r13
    ae7c:	ef 92       	push	r14
    ae7e:	ff 92       	push	r15
    ae80:	0f 93       	push	r16
    ae82:	1f 93       	push	r17
    ae84:	cf 93       	push	r28
    ae86:	df 93       	push	r29
    ae88:	cd b7       	in	r28, 0x3d	; 61
    ae8a:	de b7       	in	r29, 0x3e	; 62
    ae8c:	e0 97       	sbiw	r28, 0x30	; 48
    ae8e:	0f b6       	in	r0, 0x3f	; 63
    ae90:	f8 94       	cli
    ae92:	de bf       	out	0x3e, r29	; 62
    ae94:	0f be       	out	0x3f, r0	; 63
    ae96:	cd bf       	out	0x3d, r28	; 61
    ae98:	18 2f       	mov	r17, r24
    ae9a:	94 2e       	mov	r9, r20
    ae9c:	85 2e       	mov	r8, r21
    ae9e:	79 01       	movw	r14, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5285
  char str2[26];
  strcpy_P(line1, text_not_used);
    aea0:	66 e9       	ldi	r22, 0x96	; 150
    aea2:	74 e3       	ldi	r23, 0x34	; 52
    aea4:	84 2f       	mov	r24, r20
    aea6:	95 2f       	mov	r25, r21
    aea8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5286
  strcpy(line2, "-");
    aeac:	60 e5       	ldi	r22, 0x50	; 80
    aeae:	73 e0       	ldi	r23, 0x03	; 3
    aeb0:	c7 01       	movw	r24, r14
    aeb2:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5287
  if (w_rom[args1].used == 1)
    aeb6:	4b e0       	ldi	r20, 0x0B	; 11
    aeb8:	41 9f       	mul	r20, r17
    aeba:	c0 01       	movw	r24, r0
    aebc:	11 24       	eor	r1, r1
    aebe:	9c 01       	movw	r18, r24
    aec0:	25 54       	subi	r18, 0x45	; 69
    aec2:	36 4f       	sbci	r19, 0xF6	; 246
    aec4:	69 01       	movw	r12, r18
    aec6:	f9 01       	movw	r30, r18
    aec8:	81 85       	ldd	r24, Z+9	; 0x09
    aeca:	81 30       	cpi	r24, 0x01	; 1
    aecc:	c9 f5       	brne	.+114    	; 0xaf40 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5289
  {
    createString(str2, ':', w_rom[args1].rom, 8, 16);
    aece:	a9 01       	movw	r20, r18
    aed0:	00 e1       	ldi	r16, 0x10	; 16
    aed2:	28 e0       	ldi	r18, 0x08	; 8
    aed4:	6a e3       	ldi	r22, 0x3A	; 58
    aed6:	ce 01       	movw	r24, r28
    aed8:	01 96       	adiw	r24, 0x01	; 1
    aeda:	5c 01       	movw	r10, r24
    aedc:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5290
    sprintf(line1, "%d: %s", args1, str2);
    aee0:	bf 92       	push	r11
    aee2:	af 92       	push	r10
    aee4:	1f 92       	push	r1
    aee6:	1f 93       	push	r17
    aee8:	81 e8       	ldi	r24, 0x81	; 129
    aeea:	93 e0       	ldi	r25, 0x03	; 3
    aeec:	9f 93       	push	r25
    aeee:	8f 93       	push	r24
    aef0:	8f 92       	push	r8
    aef2:	9f 92       	push	r9
    aef4:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5292

    if (w_rom[args1].tds_idx != 255)
    aef8:	0f b6       	in	r0, 0x3f	; 63
    aefa:	f8 94       	cli
    aefc:	de bf       	out	0x3e, r29	; 62
    aefe:	0f be       	out	0x3f, r0	; 63
    af00:	cd bf       	out	0x3d, r28	; 61
    af02:	f6 01       	movw	r30, r12
    af04:	82 85       	ldd	r24, Z+10	; 0x0a
    af06:	8f 3f       	cpi	r24, 0xFF	; 255
    af08:	71 f1       	breq	.+92     	; 0xaf66 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5294
    {
      strcpy_P(line2, text_nastavit_tds);
    af0a:	63 e8       	ldi	r22, 0x83	; 131
    af0c:	74 e3       	ldi	r23, 0x34	; 52
    af0e:	c7 01       	movw	r24, r14
    af10:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    af14:	be 01       	movw	r22, r28
    af16:	65 5e       	subi	r22, 0xE5	; 229
    af18:	7f 4f       	sbci	r23, 0xFF	; 255
    af1a:	f6 01       	movw	r30, r12
    af1c:	82 85       	ldd	r24, Z+10	; 0x0a
    af1e:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    af22:	be 01       	movw	r22, r28
    af24:	69 5d       	subi	r22, 0xD9	; 217
    af26:	7f 4f       	sbci	r23, 0xFF	; 255
    af28:	c5 01       	movw	r24, r10
    af2a:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z54get_function_one_wire_associate_or_setting_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5296
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
    af2e:	63 e2       	ldi	r22, 0x23	; 35
    af30:	76 e0       	ldi	r23, 0x06	; 6
    af32:	c7 01       	movw	r24, r14
    af34:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5297
      strcat(line2, str2);
    af38:	b5 01       	movw	r22, r10
    af3a:	c7 01       	movw	r24, r14
    af3c:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5302
    }
    else
      strcpy_P(line2, text_associovat_tds);
  }
}
    af40:	e0 96       	adiw	r28, 0x30	; 48
    af42:	0f b6       	in	r0, 0x3f	; 63
    af44:	f8 94       	cli
    af46:	de bf       	out	0x3e, r29	; 62
    af48:	0f be       	out	0x3f, r0	; 63
    af4a:	cd bf       	out	0x3d, r28	; 61
    af4c:	df 91       	pop	r29
    af4e:	cf 91       	pop	r28
    af50:	1f 91       	pop	r17
    af52:	0f 91       	pop	r16
    af54:	ff 90       	pop	r15
    af56:	ef 90       	pop	r14
    af58:	df 90       	pop	r13
    af5a:	cf 90       	pop	r12
    af5c:	bf 90       	pop	r11
    af5e:	af 90       	pop	r10
    af60:	9f 90       	pop	r9
    af62:	8f 90       	pop	r8
    af64:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5300
      tds_get_name(w_rom[args1].tds_idx, str2);
      strcat(line2, " ");
      strcat(line2, str2);
    }
    else
      strcpy_P(line2, text_associovat_tds);
    af66:	63 ea       	ldi	r22, 0xA3	; 163
    af68:	74 e3       	ldi	r23, 0x34	; 52
    af6a:	c7 01       	movw	r24, r14
    af6c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
    af70:	e7 cf       	rjmp	.-50     	; 0xaf40 <get_function_one_wire_associate_or_setting_text_button(unsigned char, unsigned char, char*, char*)+0xd0>

0000af72 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4903
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
  }
}
////
void display_element_show_tds_info_static(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    af72:	3f 92       	push	r3
    af74:	4f 92       	push	r4
    af76:	5f 92       	push	r5
    af78:	6f 92       	push	r6
    af7a:	7f 92       	push	r7
    af7c:	8f 92       	push	r8
    af7e:	9f 92       	push	r9
    af80:	af 92       	push	r10
    af82:	bf 92       	push	r11
    af84:	cf 92       	push	r12
    af86:	df 92       	push	r13
    af88:	ef 92       	push	r14
    af8a:	ff 92       	push	r15
    af8c:	0f 93       	push	r16
    af8e:	1f 93       	push	r17
    af90:	cf 93       	push	r28
    af92:	df 93       	push	r29
    af94:	cd b7       	in	r28, 0x3d	; 61
    af96:	de b7       	in	r29, 0x3e	; 62
    af98:	ca 54       	subi	r28, 0x4A	; 74
    af9a:	d1 09       	sbc	r29, r1
    af9c:	0f b6       	in	r0, 0x3f	; 63
    af9e:	f8 94       	cli
    afa0:	de bf       	out	0x3e, r29	; 62
    afa2:	0f be       	out	0x3f, r0	; 63
    afa4:	cd bf       	out	0x3d, r28	; 61
    afa6:	4c 01       	movw	r8, r24
    afa8:	3b 01       	movw	r6, r22
    afaa:	3e 2c       	mov	r3, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    afac:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    afb0:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z36display_element_show_tds_info_staticjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4909
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    afb4:	26 0f       	add	r18, r22
    afb6:	37 1f       	adc	r19, r23
    afb8:	48 0f       	add	r20, r24
    afba:	59 1f       	adc	r21, r25
    afbc:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4910
  if (get_tds18s20(args2, &tds) == 1)
    afc0:	be 01       	movw	r22, r28
    afc2:	6b 5c       	subi	r22, 0xCB	; 203
    afc4:	7f 4f       	sbci	r23, 0xFF	; 255
    afc6:	8e 2d       	mov	r24, r14
    afc8:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    afcc:	23 01       	movw	r4, r6
    afce:	28 e2       	ldi	r18, 0x28	; 40
    afd0:	42 0e       	add	r4, r18
    afd2:	51 1c       	adc	r5, r1
    afd4:	9e 01       	movw	r18, r28
    afd6:	2f 5f       	subi	r18, 0xFF	; 255
    afd8:	3f 4f       	sbci	r19, 0xFF	; 255
    afda:	59 01       	movw	r10, r18
    afdc:	81 30       	cpi	r24, 0x01	; 1
    afde:	09 f0       	breq	.+2      	; 0xafe2 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x70>
    afe0:	ca c0       	rjmp	.+404    	; 0xb176 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x204>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4912
  {
    createString(str2, ':', tds.rom, 8, 16);
    afe2:	6e 01       	movw	r12, r28
    afe4:	3b e1       	ldi	r19, 0x1B	; 27
    afe6:	c3 0e       	add	r12, r19
    afe8:	d1 1c       	adc	r13, r1
    afea:	00 e1       	ldi	r16, 0x10	; 16
    afec:	28 e0       	ldi	r18, 0x08	; 8
    afee:	ae 01       	movw	r20, r28
    aff0:	4a 5c       	subi	r20, 0xCA	; 202
    aff2:	5f 4f       	sbci	r21, 0xFF	; 255
    aff4:	6a e3       	ldi	r22, 0x3A	; 58
    aff6:	c6 01       	movw	r24, r12
    aff8:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4913
    sprintf(str1, "rom: %s", str2);
    affc:	df 92       	push	r13
    affe:	cf 92       	push	r12
    b000:	88 e8       	ldi	r24, 0x88	; 136
    b002:	93 e0       	ldi	r25, 0x03	; 3
    b004:	9f 93       	push	r25
    b006:	8f 93       	push	r24
    b008:	bf 92       	push	r11
    b00a:	af 92       	push	r10
    b00c:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4914
    show_string(str1, x + 10, y + 85, 1, BLACK, WHITE, 0);
    b010:	8a e0       	ldi	r24, 0x0A	; 10
    b012:	88 0e       	add	r8, r24
    b014:	91 1c       	adc	r9, r1
    b016:	a3 01       	movw	r20, r6
    b018:	4b 5a       	subi	r20, 0xAB	; 171
    b01a:	5f 4f       	sbci	r21, 0xFF	; 255
    b01c:	ee 24       	eor	r14, r14
    b01e:	ea 94       	dec	r14
    b020:	fe 2c       	mov	r15, r14
    b022:	10 e0       	ldi	r17, 0x00	; 0
    b024:	00 e0       	ldi	r16, 0x00	; 0
    b026:	21 e0       	ldi	r18, 0x01	; 1
    b028:	b4 01       	movw	r22, r8
    b02a:	c5 01       	movw	r24, r10
    b02c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4916
    ///
    strcpy_P(str2, text_nazev);
    b030:	6c e7       	ldi	r22, 0x7C	; 124
    b032:	74 e3       	ldi	r23, 0x34	; 52
    b034:	c6 01       	movw	r24, r12
    b036:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4917
    sprintf(str1, "%s: %s", str2, tds.name);
    b03a:	85 e3       	ldi	r24, 0x35	; 53
    b03c:	90 e0       	ldi	r25, 0x00	; 0
    b03e:	8c 0f       	add	r24, r28
    b040:	9d 1f       	adc	r25, r29
    b042:	0c 96       	adiw	r24, 0x0c	; 12
    b044:	9f 93       	push	r25
    b046:	8f 93       	push	r24
    b048:	df 92       	push	r13
    b04a:	cf 92       	push	r12
    b04c:	80 e9       	ldi	r24, 0x90	; 144
    b04e:	93 e0       	ldi	r25, 0x03	; 3
    b050:	9f 93       	push	r25
    b052:	8f 93       	push	r24
    b054:	bf 92       	push	r11
    b056:	af 92       	push	r10
    b058:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4918
    show_string(str1, x + 10, y + 40, 2, BLACK, WHITE, 0);
    b05c:	22 e0       	ldi	r18, 0x02	; 2
    b05e:	a2 01       	movw	r20, r4
    b060:	b4 01       	movw	r22, r8
    b062:	c5 01       	movw	r24, r10
    b064:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4920
    /// zobrazeni offsetu
    te = tds.offset / 1000.0;
    b068:	21 96       	adiw	r28, 0x01	; 1
    b06a:	6e ad       	ldd	r22, Y+62	; 0x3e
    b06c:	7f ad       	ldd	r23, Y+63	; 0x3f
    b06e:	21 97       	sbiw	r28, 0x01	; 1
    b070:	07 2e       	mov	r0, r23
    b072:	00 0c       	add	r0, r0
    b074:	88 0b       	sbc	r24, r24
    b076:	99 0b       	sbc	r25, r25
    b078:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    b07c:	20 e0       	ldi	r18, 0x00	; 0
    b07e:	30 e0       	ldi	r19, 0x00	; 0
    b080:	4a e7       	ldi	r20, 0x7A	; 122
    b082:	54 e4       	ldi	r21, 0x44	; 68
    b084:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4921
    dtostrf(te, 4, 2, str1);
    b088:	85 01       	movw	r16, r10
    b08a:	22 e0       	ldi	r18, 0x02	; 2
    b08c:	44 e0       	ldi	r20, 0x04	; 4
    b08e:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4922
    strcat(str1, "C");
    b092:	6b ec       	ldi	r22, 0xCB	; 203
    b094:	76 e0       	ldi	r23, 0x06	; 6
    b096:	c5 01       	movw	r24, r10
    b098:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4923
    strcpy_P(str2, temp_offset_short);
    b09c:	6e e4       	ldi	r22, 0x4E	; 78
    b09e:	74 e3       	ldi	r23, 0x34	; 52
    b0a0:	c6 01       	movw	r24, r12
    b0a2:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4924
    strcat(str2, str1);
    b0a6:	b5 01       	movw	r22, r10
    b0a8:	c6 01       	movw	r24, r12
    b0aa:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4925
    show_string(str2, x + 10, y + 60 , 2, BLACK, WHITE, 0);
    b0ae:	a3 01       	movw	r20, r6
    b0b0:	44 5c       	subi	r20, 0xC4	; 196
    b0b2:	5f 4f       	sbci	r21, 0xFF	; 255
    b0b4:	10 e0       	ldi	r17, 0x00	; 0
    b0b6:	00 e0       	ldi	r16, 0x00	; 0
    b0b8:	22 e0       	ldi	r18, 0x02	; 2
    b0ba:	b4 01       	movw	r22, r8
    b0bc:	c6 01       	movw	r24, r12
    b0be:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4927
    ///
    strcpy_P(str2, nastaveni_tds_period);
    b0c2:	6f e3       	ldi	r22, 0x3F	; 63
    b0c4:	74 e3       	ldi	r23, 0x34	; 52
    b0c6:	c6 01       	movw	r24, r12
    b0c8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4928
    sprintf(str1, "%s: %ds", str2, tds.period);
    b0cc:	2a 96       	adiw	r28, 0x0a	; 10
    b0ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    b0d0:	2a 97       	sbiw	r28, 0x0a	; 10
    b0d2:	1f 92       	push	r1
    b0d4:	8f 93       	push	r24
    b0d6:	df 92       	push	r13
    b0d8:	cf 92       	push	r12
    b0da:	87 e9       	ldi	r24, 0x97	; 151
    b0dc:	93 e0       	ldi	r25, 0x03	; 3
    b0de:	9f 93       	push	r25
    b0e0:	8f 93       	push	r24
    b0e2:	bf 92       	push	r11
    b0e4:	af 92       	push	r10
    b0e6:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4929
    show_string(str1, x + 10, y + 100 , 2, BLACK, WHITE, 0);
    b0ea:	a3 01       	movw	r20, r6
    b0ec:	4c 59       	subi	r20, 0x9C	; 156
    b0ee:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f0:	22 e0       	ldi	r18, 0x02	; 2
    b0f2:	b4 01       	movw	r22, r8
    b0f4:	c5 01       	movw	r24, r10
    b0f6:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4932

    ///
    strcpy_P(str2, text_online);
    b0fa:	66 e5       	ldi	r22, 0x56	; 86
    b0fc:	74 e3       	ldi	r23, 0x34	; 52
    b0fe:	c6 01       	movw	r24, r12
    b100:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4933
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    b104:	9e e1       	ldi	r25, 0x1E	; 30
    b106:	39 9e       	mul	r3, r25
    b108:	f0 01       	movw	r30, r0
    b10a:	11 24       	eor	r1, r1
    b10c:	eb 5e       	subi	r30, 0xEB	; 235
    b10e:	f5 4f       	sbci	r31, 0xF5	; 245
    b110:	83 8d       	ldd	r24, Z+27	; 0x1b
    b112:	1f 92       	push	r1
    b114:	8f 93       	push	r24
    b116:	df 92       	push	r13
    b118:	cf 92       	push	r12
    b11a:	8f e9       	ldi	r24, 0x9F	; 159
    b11c:	93 e0       	ldi	r25, 0x03	; 3
    b11e:	9f 93       	push	r25
    b120:	8f 93       	push	r24
    b122:	bf 92       	push	r11
    b124:	af 92       	push	r10
    b126:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4934
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
    b12a:	a3 01       	movw	r20, r6
    b12c:	48 58       	subi	r20, 0x88	; 136
    b12e:	5f 4f       	sbci	r21, 0xFF	; 255
    b130:	22 e0       	ldi	r18, 0x02	; 2
    b132:	b4 01       	movw	r22, r8
    b134:	c5 01       	movw	r24, r10
    b136:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b13a:	0f b6       	in	r0, 0x3f	; 63
    b13c:	f8 94       	cli
    b13e:	de bf       	out	0x3e, r29	; 62
    b140:	0f be       	out	0x3f, r0	; 63
    b142:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4941
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
    b144:	c6 5b       	subi	r28, 0xB6	; 182
    b146:	df 4f       	sbci	r29, 0xFF	; 255
    b148:	0f b6       	in	r0, 0x3f	; 63
    b14a:	f8 94       	cli
    b14c:	de bf       	out	0x3e, r29	; 62
    b14e:	0f be       	out	0x3f, r0	; 63
    b150:	cd bf       	out	0x3d, r28	; 61
    b152:	df 91       	pop	r29
    b154:	cf 91       	pop	r28
    b156:	1f 91       	pop	r17
    b158:	0f 91       	pop	r16
    b15a:	ff 90       	pop	r15
    b15c:	ef 90       	pop	r14
    b15e:	df 90       	pop	r13
    b160:	cf 90       	pop	r12
    b162:	bf 90       	pop	r11
    b164:	af 90       	pop	r10
    b166:	9f 90       	pop	r9
    b168:	8f 90       	pop	r8
    b16a:	7f 90       	pop	r7
    b16c:	6f 90       	pop	r6
    b16e:	5f 90       	pop	r5
    b170:	4f 90       	pop	r4
    b172:	3f 90       	pop	r3
    b174:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4938
    sprintf(str1, "%s: %d", str2, status_tds18s20[args2].online);
    show_string(str1, x + 10, y + 120 , 2, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    b176:	69 e3       	ldi	r22, 0x39	; 57
    b178:	74 e3       	ldi	r23, 0x34	; 52
    b17a:	c9 01       	movw	r24, r18
    b17c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4939
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
    b180:	b4 01       	movw	r22, r8
    b182:	67 5e       	subi	r22, 0xE7	; 231
    b184:	7f 4f       	sbci	r23, 0xFF	; 255
    b186:	ee 24       	eor	r14, r14
    b188:	ea 94       	dec	r14
    b18a:	fe 2c       	mov	r15, r14
    b18c:	00 e0       	ldi	r16, 0x00	; 0
    b18e:	18 ef       	ldi	r17, 0xF8	; 248
    b190:	24 e0       	ldi	r18, 0x04	; 4
    b192:	a2 01       	movw	r20, r4
    b194:	c5 01       	movw	r24, r10
    b196:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    b19a:	d4 cf       	rjmp	.-88     	; 0xb144 <display_element_show_tds_info_static(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d2>

0000b19c <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z38display_element_show_tds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4885
{
  show_string(dialog_text, x, y, 2, BLACK, WHITE, 0);
}
//////////////////////////////////////////////
void display_element_show_tds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b19c:	af 92       	push	r10
    b19e:	bf 92       	push	r11
    b1a0:	cf 92       	push	r12
    b1a2:	df 92       	push	r13
    b1a4:	ef 92       	push	r14
    b1a6:	ff 92       	push	r15
    b1a8:	0f 93       	push	r16
    b1aa:	1f 93       	push	r17
    b1ac:	cf 93       	push	r28
    b1ae:	df 93       	push	r29
    b1b0:	cd b7       	in	r28, 0x3d	; 61
    b1b2:	de b7       	in	r29, 0x3e	; 62
    b1b4:	ca 54       	subi	r28, 0x4A	; 74
    b1b6:	d1 09       	sbc	r29, r1
    b1b8:	0f b6       	in	r0, 0x3f	; 63
    b1ba:	f8 94       	cli
    b1bc:	de bf       	out	0x3e, r29	; 62
    b1be:	0f be       	out	0x3f, r0	; 63
    b1c0:	cd bf       	out	0x3d, r28	; 61
    b1c2:	6c 01       	movw	r12, r24
    b1c4:	5b 01       	movw	r10, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4890
  struct_DDS18s20 tds;
  char str1[26];
  char str2[26];
  float te;
  if (get_tds18s20(args2, &tds) == 1)
    b1c6:	be 01       	movw	r22, r28
    b1c8:	6b 5c       	subi	r22, 0xCB	; 203
    b1ca:	7f 4f       	sbci	r23, 0xFF	; 255
    b1cc:	8e 2d       	mov	r24, r14
    b1ce:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    b1d2:	81 30       	cpi	r24, 0x01	; 1
    b1d4:	d9 f5       	brne	.+118    	; 0xb24c <display_element_show_tds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4893
  {
    /// zobrazeni teploty
    te = status_tds18s20[args2].temp / 1000.0;
    b1d6:	8e e1       	ldi	r24, 0x1E	; 30
    b1d8:	e8 9e       	mul	r14, r24
    b1da:	f0 01       	movw	r30, r0
    b1dc:	11 24       	eor	r1, r1
    b1de:	eb 5e       	subi	r30, 0xEB	; 235
    b1e0:	f5 4f       	sbci	r31, 0xF5	; 245
    b1e2:	65 81       	ldd	r22, Z+5	; 0x05
    b1e4:	76 81       	ldd	r23, Z+6	; 0x06
    b1e6:	07 2e       	mov	r0, r23
    b1e8:	00 0c       	add	r0, r0
    b1ea:	88 0b       	sbc	r24, r24
    b1ec:	99 0b       	sbc	r25, r25
    b1ee:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    b1f2:	20 e0       	ldi	r18, 0x00	; 0
    b1f4:	30 e0       	ldi	r19, 0x00	; 0
    b1f6:	4a e7       	ldi	r20, 0x7A	; 122
    b1f8:	54 e4       	ldi	r21, 0x44	; 68
    b1fa:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4894
    dtostrf(te, 4, 2, str1);
    b1fe:	8e 01       	movw	r16, r28
    b200:	05 5e       	subi	r16, 0xE5	; 229
    b202:	1f 4f       	sbci	r17, 0xFF	; 255
    b204:	22 e0       	ldi	r18, 0x02	; 2
    b206:	44 e0       	ldi	r20, 0x04	; 4
    b208:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4895
    strcat(str1, "C");
    b20c:	6b ec       	ldi	r22, 0xCB	; 203
    b20e:	76 e0       	ldi	r23, 0x06	; 6
    b210:	c8 01       	movw	r24, r16
    b212:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4896
    strcpy_P(str2, current_temp_short);
    b216:	63 e7       	ldi	r22, 0x73	; 115
    b218:	74 e3       	ldi	r23, 0x34	; 52
    b21a:	ce 01       	movw	r24, r28
    b21c:	01 96       	adiw	r24, 0x01	; 1
    b21e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4897
    strcat(str2, str1);
    b222:	b8 01       	movw	r22, r16
    b224:	ce 01       	movw	r24, r28
    b226:	01 96       	adiw	r24, 0x01	; 1
    b228:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4898
    show_string(str2, x + 10, y + 140 , 2, BLACK, WHITE, 0);
    b22c:	a5 01       	movw	r20, r10
    b22e:	44 57       	subi	r20, 0x74	; 116
    b230:	5f 4f       	sbci	r21, 0xFF	; 255
    b232:	b6 01       	movw	r22, r12
    b234:	66 5f       	subi	r22, 0xF6	; 246
    b236:	7f 4f       	sbci	r23, 0xFF	; 255
    b238:	ee 24       	eor	r14, r14
    b23a:	ea 94       	dec	r14
    b23c:	fe 2c       	mov	r15, r14
    b23e:	10 e0       	ldi	r17, 0x00	; 0
    b240:	00 e0       	ldi	r16, 0x00	; 0
    b242:	22 e0       	ldi	r18, 0x02	; 2
    b244:	ce 01       	movw	r24, r28
    b246:	01 96       	adiw	r24, 0x01	; 1
    b248:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4900
  }
}
    b24c:	c6 5b       	subi	r28, 0xB6	; 182
    b24e:	df 4f       	sbci	r29, 0xFF	; 255
    b250:	0f b6       	in	r0, 0x3f	; 63
    b252:	f8 94       	cli
    b254:	de bf       	out	0x3e, r29	; 62
    b256:	0f be       	out	0x3f, r0	; 63
    b258:	cd bf       	out	0x3d, r28	; 61
    b25a:	df 91       	pop	r29
    b25c:	cf 91       	pop	r28
    b25e:	1f 91       	pop	r17
    b260:	0f 91       	pop	r16
    b262:	ff 90       	pop	r15
    b264:	ef 90       	pop	r14
    b266:	df 90       	pop	r13
    b268:	cf 90       	pop	r12
    b26a:	bf 90       	pop	r11
    b26c:	af 90       	pop	r10
    b26e:	08 95       	ret

0000b270 <display_menu_tds_set_name(unsigned char, unsigned char)>:
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2412
  dialog_save_variable_function = &menu_tds_save_period;
}

/// funkce pro nastaveni nazvu cidla
void display_menu_tds_set_name(uint8_t args1, uint8_t args2)
{
    b270:	1f 93       	push	r17
    b272:	cf 93       	push	r28
    b274:	df 93       	push	r29
    b276:	cd b7       	in	r28, 0x3d	; 61
    b278:	de b7       	in	r29, 0x3e	; 62
    b27a:	a0 97       	sbiw	r28, 0x20	; 32
    b27c:	0f b6       	in	r0, 0x3f	; 63
    b27e:	f8 94       	cli
    b280:	de bf       	out	0x3e, r29	; 62
    b282:	0f be       	out	0x3f, r0	; 63
    b284:	cd bf       	out	0x3d, r28	; 61
    b286:	16 2f       	mov	r17, r22
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b288:	be 01       	movw	r22, r28
    b28a:	6f 5f       	subi	r22, 0xFF	; 255
    b28c:	7f 4f       	sbci	r23, 0xFF	; 255
    b28e:	81 2f       	mov	r24, r17
    b290:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    b294:	be 01       	movw	r22, r28
    b296:	63 5f       	subi	r22, 0xF3	; 243
    b298:	7f 4f       	sbci	r23, 0xFF	; 255
    b29a:	ce 01       	movw	r24, r28
    b29c:	47 96       	adiw	r24, 0x17	; 23
    b29e:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2415
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b2a2:	60 e0       	ldi	r22, 0x00	; 0
    b2a4:	87 e6       	ldi	r24, 0x67	; 103
    b2a6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b2aa:	be 01       	movw	r22, r28
    b2ac:	69 5e       	subi	r22, 0xE9	; 233
    b2ae:	7f 4f       	sbci	r23, 0xFF	; 255
    b2b0:	8d ea       	ldi	r24, 0xAD	; 173
    b2b2:	98 e0       	ldi	r25, 0x08	; 8
    b2b4:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  dialog_set_string_max_length = max_length;
    b2b8:	88 e0       	ldi	r24, 0x08	; 8
    b2ba:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
  dialog_set_string_args = idx;
    b2be:	10 93 bd 08 	sts	0x08BD, r17	; 0x8008bd <dialog_set_string_args>
_Z25display_menu_tds_set_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2417
{
  char name[10];
  tds_get_name(args2, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
    b2c2:	89 ef       	ldi	r24, 0xF9	; 249
    b2c4:	99 e5       	ldi	r25, 0x59	; 89
    b2c6:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    b2ca:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2418
}
    b2ce:	a0 96       	adiw	r28, 0x20	; 32
    b2d0:	0f b6       	in	r0, 0x3f	; 63
    b2d2:	f8 94       	cli
    b2d4:	de bf       	out	0x3e, r29	; 62
    b2d6:	0f be       	out	0x3f, r0	; 63
    b2d8:	cd bf       	out	0x3d, r28	; 61
    b2da:	df 91       	pop	r29
    b2dc:	cf 91       	pop	r28
    b2de:	1f 91       	pop	r17
    b2e0:	08 95       	ret

0000b2e2 <display_menu_tds_set_period(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2404
  dialog_save_variable_function = &menu_tds_save_offset;
}

/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
    b2e2:	1f 93       	push	r17
    b2e4:	cf 93       	push	r28
    b2e6:	df 93       	push	r29
    b2e8:	cd b7       	in	r28, 0x3d	; 61
    b2ea:	de b7       	in	r29, 0x3e	; 62
    b2ec:	66 97       	sbiw	r28, 0x16	; 22
    b2ee:	0f b6       	in	r0, 0x3f	; 63
    b2f0:	f8 94       	cli
    b2f2:	de bf       	out	0x3e, r29	; 62
    b2f4:	0f be       	out	0x3f, r0	; 63
    b2f6:	cd bf       	out	0x3d, r28	; 61
    b2f8:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2405
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    b2fa:	60 e0       	ldi	r22, 0x00	; 0
    b2fc:	86 e6       	ldi	r24, 0x66	; 102
    b2fe:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:114
}
//// funkce ziska periodu mereni
int tds_get_period(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b302:	be 01       	movw	r22, r28
    b304:	6f 5f       	subi	r22, 0xFF	; 255
    b306:	7f 4f       	sbci	r23, 0xFF	; 255
    b308:	81 2f       	mov	r24, r17
    b30a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:115
  return tds.period;
    b30e:	8d 89       	ldd	r24, Y+21	; 0x15
    b310:	90 e0       	ldi	r25, 0x00	; 0
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    b312:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <menu_dialog_set_variable_now+0x1>
    b316:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
  menu_dialog_set_variable_min = min;
    b31a:	81 e0       	ldi	r24, 0x01	; 1
    b31c:	90 e0       	ldi	r25, 0x00	; 0
    b31e:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <menu_dialog_set_variable_min+0x1>
    b322:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
  menu_dialog_set_variable_max = max;
    b326:	8f ef       	ldi	r24, 0xFF	; 255
    b328:	90 e0       	ldi	r25, 0x00	; 0
    b32a:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <menu_dialog_set_variable_max+0x1>
    b32e:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  menu_dialog_set_variable_step = step;
    b332:	81 e0       	ldi	r24, 0x01	; 1
    b334:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  menu_dialog_set_variable_args = args;
    b338:	10 93 51 08 	sts	0x0851, r17	; 0x800851 <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  menu_dialog_set_divider = divider;
    b33c:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <menu_dialog_set_divider+0x1>
    b340:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    b344:	10 92 50 08 	sts	0x0850, r1	; 0x800850 <__data_end>
_Z27display_menu_tds_set_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2407
/// funkce pro nastaveni merici periody
void display_menu_tds_set_period(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_period(args2), 1, 255, 1, args2, 0, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_period;
    b348:	8c e2       	ldi	r24, 0x2C	; 44
    b34a:	9a e5       	ldi	r25, 0x5A	; 90
    b34c:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    b350:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2408
}
    b354:	66 96       	adiw	r28, 0x16	; 22
    b356:	0f b6       	in	r0, 0x3f	; 63
    b358:	f8 94       	cli
    b35a:	de bf       	out	0x3e, r29	; 62
    b35c:	0f be       	out	0x3f, r0	; 63
    b35e:	cd bf       	out	0x3d, r28	; 61
    b360:	df 91       	pop	r29
    b362:	cf 91       	pop	r28
    b364:	1f 91       	pop	r17
    b366:	08 95       	ret

0000b368 <display_menu_tds_set_offset(unsigned char, unsigned char)>:
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2396
   args2 ... je dynamicky parametr nastaveni menu

*/
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
    b368:	1f 93       	push	r17
    b36a:	cf 93       	push	r28
    b36c:	df 93       	push	r29
    b36e:	cd b7       	in	r28, 0x3d	; 61
    b370:	de b7       	in	r29, 0x3e	; 62
    b372:	66 97       	sbiw	r28, 0x16	; 22
    b374:	0f b6       	in	r0, 0x3f	; 63
    b376:	f8 94       	cli
    b378:	de bf       	out	0x3e, r29	; 62
    b37a:	0f be       	out	0x3f, r0	; 63
    b37c:	cd bf       	out	0x3d, r28	; 61
    b37e:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2397
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
    b380:	60 e0       	ldi	r22, 0x00	; 0
    b382:	86 e6       	ldi	r24, 0x66	; 102
    b384:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
tds_get_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:98
}
//// funkce ziska offset cidlu tds
int tds_get_offset(uint8_t idx)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b388:	be 01       	movw	r22, r28
    b38a:	6f 5f       	subi	r22, 0xFF	; 255
    b38c:	7f 4f       	sbci	r23, 0xFF	; 255
    b38e:	81 2f       	mov	r24, r17
    b390:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:99
  return tds.offset;
    b394:	8b 85       	ldd	r24, Y+11	; 0x0b
    b396:	9c 85       	ldd	r25, Y+12	; 0x0c
display_function_set_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2323
      dialog_save_variable_function(menu_dialog_set_variable_now, menu_dialog_set_variable_args, 0);
  }
}
void display_function_set_variable(uint16_t now, uint16_t min, uint16_t max, uint8_t step, uint8_t args, uint16_t divider, uint8_t update_now)
{
  menu_dialog_set_variable_now = now;
    b398:	90 93 9f 08 	sts	0x089F, r25	; 0x80089f <menu_dialog_set_variable_now+0x1>
    b39c:	80 93 9e 08 	sts	0x089E, r24	; 0x80089e <menu_dialog_set_variable_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2324
  menu_dialog_set_variable_min = min;
    b3a0:	80 ef       	ldi	r24, 0xF0	; 240
    b3a2:	98 ed       	ldi	r25, 0xD8	; 216
    b3a4:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <menu_dialog_set_variable_min+0x1>
    b3a8:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <menu_dialog_set_variable_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2325
  menu_dialog_set_variable_max = max;
    b3ac:	80 e1       	ldi	r24, 0x10	; 16
    b3ae:	97 e2       	ldi	r25, 0x27	; 39
    b3b0:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <menu_dialog_set_variable_max+0x1>
    b3b4:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <menu_dialog_set_variable_max>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2326
  menu_dialog_set_variable_step = step;
    b3b8:	84 e6       	ldi	r24, 0x64	; 100
    b3ba:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <menu_dialog_set_variable_step>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2327
  menu_dialog_set_variable_args = args;
    b3be:	10 93 51 08 	sts	0x0851, r17	; 0x800851 <menu_dialog_set_variable_args>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2328
  menu_dialog_set_divider = divider;
    b3c2:	88 ee       	ldi	r24, 0xE8	; 232
    b3c4:	93 e0       	ldi	r25, 0x03	; 3
    b3c6:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <menu_dialog_set_divider+0x1>
    b3ca:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <menu_dialog_set_divider>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2330
  dialog_save_variable_function = NULL;
  menu_dialog_set_variable_update_now = update_now;
    b3ce:	10 92 50 08 	sts	0x0850, r1	; 0x800850 <__data_end>
_Z27display_menu_tds_set_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2399
/// funkce pro nastaveni offsetu tds
void display_menu_tds_set_offset(uint8_t args1, uint8_t args2)
{
  MenuHistoryNextMenu(MENU_DIALOG_SET_VARIABLE, 0);
  display_function_set_variable(tds_get_offset(args2), -10000, 10000, 100, args2, 1000, H_FALSE);
  dialog_save_variable_function = &menu_tds_save_offset;
    b3d2:	84 e5       	ldi	r24, 0x54	; 84
    b3d4:	9a e5       	ldi	r25, 0x5A	; 90
    b3d6:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    b3da:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2400
}
    b3de:	66 96       	adiw	r28, 0x16	; 22
    b3e0:	0f b6       	in	r0, 0x3f	; 63
    b3e2:	f8 94       	cli
    b3e4:	de bf       	out	0x3e, r29	; 62
    b3e6:	0f be       	out	0x3f, r0	; 63
    b3e8:	cd bf       	out	0x3d, r28	; 61
    b3ea:	df 91       	pop	r29
    b3ec:	cf 91       	pop	r28
    b3ee:	1f 91       	pop	r17
    b3f0:	08 95       	ret

0000b3f2 <menu_tds_save_name(unsigned char, unsigned char)>:
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2379
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
    b3f2:	1f 93       	push	r17
    b3f4:	cf 93       	push	r28
    b3f6:	df 93       	push	r29
    b3f8:	cd b7       	in	r28, 0x3d	; 61
    b3fa:	de b7       	in	r29, 0x3e	; 62
    b3fc:	a0 97       	sbiw	r28, 0x20	; 32
    b3fe:	0f b6       	in	r0, 0x3f	; 63
    b400:	f8 94       	cli
    b402:	de bf       	out	0x3e, r29	; 62
    b404:	0f be       	out	0x3f, r0	; 63
    b406:	cd bf       	out	0x3d, r28	; 61
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
  return dialog_set_string_args;
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    b408:	6d ea       	ldi	r22, 0xAD	; 173
    b40a:	78 e0       	ldi	r23, 0x08	; 8
    b40c:	ce 01       	movw	r24, r28
    b40e:	47 96       	adiw	r24, 0x17	; 23
    b410:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2382
/////
void menu_tds_save_name(uint8_t args1, uint8_t args2)
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    b414:	8f 89       	ldd	r24, Y+23	; 0x17
    b416:	88 23       	and	r24, r24
    b418:	a9 f0       	breq	.+42     	; 0xb444 <menu_tds_save_name(unsigned char, unsigned char)+0x52>
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    b41a:	10 91 bd 08 	lds	r17, 0x08BD	; 0x8008bd <dialog_set_string_args>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b41e:	be 01       	movw	r22, r28
    b420:	6f 5f       	subi	r22, 0xFF	; 255
    b422:	7f 4f       	sbci	r23, 0xFF	; 255
    b424:	81 2f       	mov	r24, r17
    b426:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    b42a:	be 01       	movw	r22, r28
    b42c:	69 5e       	subi	r22, 0xE9	; 233
    b42e:	7f 4f       	sbci	r23, 0xFF	; 255
    b430:	ce 01       	movw	r24, r28
    b432:	0d 96       	adiw	r24, 0x0d	; 13
    b434:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    b438:	be 01       	movw	r22, r28
    b43a:	6f 5f       	subi	r22, 0xFF	; 255
    b43c:	7f 4f       	sbci	r23, 0xFF	; 255
    b43e:	81 2f       	mov	r24, r17
    b440:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z18menu_tds_save_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2384
{
  char name[10];
  display_element_get_string(name);
  if (strlen(name) > 0)
    tds_set_name(display_element_get_string_args(), name);
}
    b444:	a0 96       	adiw	r28, 0x20	; 32
    b446:	0f b6       	in	r0, 0x3f	; 63
    b448:	f8 94       	cli
    b44a:	de bf       	out	0x3e, r29	; 62
    b44c:	0f be       	out	0x3f, r0	; 63
    b44e:	cd bf       	out	0x3d, r28	; 61
    b450:	df 91       	pop	r29
    b452:	cf 91       	pop	r28
    b454:	1f 91       	pop	r17
    b456:	08 95       	ret

0000b458 <menu_tds_save_period(unsigned char, unsigned char)>:
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2374
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
    b458:	0f 93       	push	r16
    b45a:	1f 93       	push	r17
    b45c:	cf 93       	push	r28
    b45e:	df 93       	push	r29
    b460:	cd b7       	in	r28, 0x3d	; 61
    b462:	de b7       	in	r29, 0x3e	; 62
    b464:	66 97       	sbiw	r28, 0x16	; 22
    b466:	0f b6       	in	r0, 0x3f	; 63
    b468:	f8 94       	cli
    b46a:	de bf       	out	0x3e, r29	; 62
    b46c:	0f be       	out	0x3f, r0	; 63
    b46e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2375
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
    b470:	00 91 9e 08 	lds	r16, 0x089E	; 0x80089e <menu_dialog_set_variable_now>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    b474:	10 91 51 08 	lds	r17, 0x0851	; 0x800851 <menu_dialog_set_variable_args>
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b478:	be 01       	movw	r22, r28
    b47a:	6f 5f       	subi	r22, 0xFF	; 255
    b47c:	7f 4f       	sbci	r23, 0xFF	; 255
    b47e:	81 2f       	mov	r24, r17
    b480:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:107
  tds.period = period;
    b484:	0d 8b       	std	Y+21, r16	; 0x15
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  set_tds18s20(idx, &tds);
    b486:	be 01       	movw	r22, r28
    b488:	6f 5f       	subi	r22, 0xFF	; 255
    b48a:	7f 4f       	sbci	r23, 0xFF	; 255
    b48c:	81 2f       	mov	r24, r17
    b48e:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_periodhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2376
}

void menu_tds_save_period(uint8_t args1, uint8_t args2)
{
  tds_set_period(display_function_get_variable_args(), display_function_get_variable());
}
    b492:	66 96       	adiw	r28, 0x16	; 22
    b494:	0f b6       	in	r0, 0x3f	; 63
    b496:	f8 94       	cli
    b498:	de bf       	out	0x3e, r29	; 62
    b49a:	0f be       	out	0x3f, r0	; 63
    b49c:	cd bf       	out	0x3d, r28	; 61
    b49e:	df 91       	pop	r29
    b4a0:	cf 91       	pop	r28
    b4a2:	1f 91       	pop	r17
    b4a4:	0f 91       	pop	r16
    b4a6:	08 95       	ret

0000b4a8 <menu_tds_save_offset(unsigned char, unsigned char)>:
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2369
    dialog_set_string[len - 1] = 0;
}

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
    b4a8:	ef 92       	push	r14
    b4aa:	ff 92       	push	r15
    b4ac:	1f 93       	push	r17
    b4ae:	cf 93       	push	r28
    b4b0:	df 93       	push	r29
    b4b2:	cd b7       	in	r28, 0x3d	; 61
    b4b4:	de b7       	in	r29, 0x3e	; 62
    b4b6:	66 97       	sbiw	r28, 0x16	; 22
    b4b8:	0f b6       	in	r0, 0x3f	; 63
    b4ba:	f8 94       	cli
    b4bc:	de bf       	out	0x3e, r29	; 62
    b4be:	0f be       	out	0x3f, r0	; 63
    b4c0:	cd bf       	out	0x3d, r28	; 61
display_function_get_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2300
  return menu_dialog_set_variable_args;
}

uint16_t display_function_get_variable(void)
{
  return menu_dialog_set_variable_now;
    b4c2:	e0 90 9e 08 	lds	r14, 0x089E	; 0x80089e <menu_dialog_set_variable_now>
    b4c6:	f0 90 9f 08 	lds	r15, 0x089F	; 0x80089f <menu_dialog_set_variable_now+0x1>
display_function_get_variable_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2295

/////////////////////////////////////////////////////////////////////////////////

uint8_t display_function_get_variable_args(void)
{
  return menu_dialog_set_variable_args;
    b4ca:	10 91 51 08 	lds	r17, 0x0851	; 0x800851 <menu_dialog_set_variable_args>
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b4ce:	be 01       	movw	r22, r28
    b4d0:	6f 5f       	subi	r22, 0xFF	; 255
    b4d2:	7f 4f       	sbci	r23, 0xFF	; 255
    b4d4:	81 2f       	mov	r24, r17
    b4d6:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    b4da:	fc 86       	std	Y+12, r15	; 0x0c
    b4dc:	eb 86       	std	Y+11, r14	; 0x0b
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    b4de:	be 01       	movw	r22, r28
    b4e0:	6f 5f       	subi	r22, 0xFF	; 255
    b4e2:	7f 4f       	sbci	r23, 0xFF	; 255
    b4e4:	81 2f       	mov	r24, r17
    b4e6:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z20menu_tds_save_offsethh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2371

/////
void menu_tds_save_offset(uint8_t args1, uint8_t args2)
{
  tds_set_offset(display_function_get_variable_args(), display_function_get_variable());
}
    b4ea:	66 96       	adiw	r28, 0x16	; 22
    b4ec:	0f b6       	in	r0, 0x3f	; 63
    b4ee:	f8 94       	cli
    b4f0:	de bf       	out	0x3e, r29	; 62
    b4f2:	0f be       	out	0x3f, r0	; 63
    b4f4:	cd bf       	out	0x3d, r28	; 61
    b4f6:	df 91       	pop	r29
    b4f8:	cf 91       	pop	r28
    b4fa:	1f 91       	pop	r17
    b4fc:	ff 90       	pop	r15
    b4fe:	ef 90       	pop	r14
    b500:	08 95       	ret

0000b502 <device_get_name(char*)>:
_Z15device_get_namePc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:59

//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
    b502:	0f 93       	push	r16
    b504:	1f 93       	push	r17
    b506:	cf 93       	push	r28
    b508:	df 93       	push	r29
    b50a:	8c 01       	movw	r16, r24
    b50c:	c4 e6       	ldi	r28, 0x64	; 100
    b50e:	d0 e0       	ldi	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:63
  char t;
  for (uint8_t i = 0; i < 9; i++)
  {
    t = EEPROM.read(device_nazev  + i);
    b510:	ce 01       	movw	r24, r28
    b512:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:64
    name[i] = t;
    b516:	f8 01       	movw	r30, r16
    b518:	81 93       	st	Z+, r24
    b51a:	8f 01       	movw	r16, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:65
    name[i + 1] = 0;
    b51c:	10 82       	st	Z, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:66
    if (t == 0)
    b51e:	88 23       	and	r24, r24
    b520:	21 f0       	breq	.+8      	; 0xb52a <device_get_name(char*)+0x28>
    b522:	21 96       	adiw	r28, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:61
//////////////////////////
//// nacte nazev zarizeni
void device_get_name(char *name)
{
  char t;
  for (uint8_t i = 0; i < 9; i++)
    b524:	cd 36       	cpi	r28, 0x6D	; 109
    b526:	d1 05       	cpc	r29, r1
    b528:	99 f7       	brne	.-26     	; 0xb510 <device_get_name(char*)+0xe>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:71
    if (t == 0)
    {
      break;
    }
  }
}
    b52a:	df 91       	pop	r29
    b52c:	cf 91       	pop	r28
    b52e:	1f 91       	pop	r17
    b530:	0f 91       	pop	r16
    b532:	08 95       	ret

0000b534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>:
_Z25send_mqtt_general_payloadP12PubSubClientPcPKc():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:217
  else
    mqtt_error++;
}
///
void send_mqtt_general_payload(PubSubClient *mqtt_client, char *topic, const char *payload)
{
    b534:	cf 92       	push	r12
    b536:	df 92       	push	r13
    b538:	ef 92       	push	r14
    b53a:	ff 92       	push	r15
    b53c:	0f 93       	push	r16
    b53e:	1f 93       	push	r17
    b540:	cf 93       	push	r28
    b542:	df 93       	push	r29
    b544:	cd b7       	in	r28, 0x3d	; 61
    b546:	de b7       	in	r29, 0x3e	; 62
    b548:	ca 54       	subi	r28, 0x4A	; 74
    b54a:	d1 09       	sbc	r29, r1
    b54c:	0f b6       	in	r0, 0x3f	; 63
    b54e:	f8 94       	cli
    b550:	de bf       	out	0x3e, r29	; 62
    b552:	0f be       	out	0x3f, r0	; 63
    b554:	cd bf       	out	0x3d, r28	; 61
    b556:	8c 01       	movw	r16, r24
    b558:	6b 01       	movw	r12, r22
    b55a:	7a 01       	movw	r14, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:220
  const char str_topic[64];
  char hostname[10];
  if (mqtt_client->connected())
    b55c:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
    b560:	88 23       	and	r24, r24
    b562:	89 f1       	breq	.+98     	; 0xb5c6 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0x92>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:222
  {
    mqtt_send_message++;
    b564:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <mqtt_send_message>
    b568:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <mqtt_send_message+0x1>
    b56c:	01 96       	adiw	r24, 0x01	; 1
    b56e:	90 93 66 0b 	sts	0x0B66, r25	; 0x800b66 <mqtt_send_message+0x1>
    b572:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:223
    device_get_name(hostname);
    b576:	ce 01       	movw	r24, r28
    b578:	8f 5b       	subi	r24, 0xBF	; 191
    b57a:	9f 4f       	sbci	r25, 0xFF	; 255
    b57c:	0e 94 81 5a 	call	0xb502	; 0xb502 <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:224
    strcpy_P(str_topic, header_out);
    b580:	60 91 63 0b 	lds	r22, 0x0B63	; 0x800b63 <header_out>
    b584:	70 91 64 0b 	lds	r23, 0x0B64	; 0x800b64 <header_out+0x1>
    b588:	ce 01       	movw	r24, r28
    b58a:	01 96       	adiw	r24, 0x01	; 1
    b58c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:225
    strcat(str_topic, hostname);
    b590:	be 01       	movw	r22, r28
    b592:	6f 5b       	subi	r22, 0xBF	; 191
    b594:	7f 4f       	sbci	r23, 0xFF	; 255
    b596:	ce 01       	movw	r24, r28
    b598:	01 96       	adiw	r24, 0x01	; 1
    b59a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:226
    strcat(str_topic, "/");
    b59e:	68 ed       	ldi	r22, 0xD8	; 216
    b5a0:	73 e0       	ldi	r23, 0x03	; 3
    b5a2:	ce 01       	movw	r24, r28
    b5a4:	01 96       	adiw	r24, 0x01	; 1
    b5a6:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:227
    strcat(str_topic, topic);
    b5aa:	b6 01       	movw	r22, r12
    b5ac:	ce 01       	movw	r24, r28
    b5ae:	01 96       	adiw	r24, 0x01	; 1
    b5b0:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:228
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
    b5b4:	a7 01       	movw	r20, r14
    b5b6:	be 01       	movw	r22, r28
    b5b8:	6f 5f       	subi	r22, 0xFF	; 255
    b5ba:	7f 4f       	sbci	r23, 0xFF	; 255
    b5bc:	c8 01       	movw	r24, r16
    b5be:	0e 94 ca 95 	call	0x12b94	; 0x12b94 <PubSubClient::publish(char const*, char const*)>
    b5c2:	81 11       	cpse	r24, r1
    b5c4:	09 c0       	rjmp	.+18     	; 0xb5d8 <send_mqtt_general_payload(PubSubClient*, char*, char const*)+0xa4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:231
  }
  else
    mqtt_error++;
    b5c6:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_error>
    b5ca:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_error+0x1>
    b5ce:	01 96       	adiw	r24, 0x01	; 1
    b5d0:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <mqtt_error+0x1>
    b5d4:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:232
}
    b5d8:	c6 5b       	subi	r28, 0xB6	; 182
    b5da:	df 4f       	sbci	r29, 0xFF	; 255
    b5dc:	0f b6       	in	r0, 0x3f	; 63
    b5de:	f8 94       	cli
    b5e0:	de bf       	out	0x3e, r29	; 62
    b5e2:	0f be       	out	0x3f, r0	; 63
    b5e4:	cd bf       	out	0x3d, r28	; 61
    b5e6:	df 91       	pop	r29
    b5e8:	cf 91       	pop	r28
    b5ea:	1f 91       	pop	r17
    b5ec:	0f 91       	pop	r16
    b5ee:	ff 90       	pop	r15
    b5f0:	ef 90       	pop	r14
    b5f2:	df 90       	pop	r13
    b5f4:	cf 90       	pop	r12
    b5f6:	08 95       	ret

0000b5f8 <printf_via_mqtt(char, __file*)>:
_Z15printf_via_mqttcP6__file():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:437
  return ret;
}
//////////////////////////////////////////////////////////////////////
/// servisni logovatko pres mqtt ///
int printf_via_mqtt(char c, FILE * t)
{
    b5f8:	cf 93       	push	r28
    b5fa:	df 93       	push	r29
    b5fc:	cd b7       	in	r28, 0x3d	; 61
    b5fe:	de b7       	in	r29, 0x3e	; 62
    b600:	60 97       	sbiw	r28, 0x10	; 16
    b602:	0f b6       	in	r0, 0x3f	; 63
    b604:	f8 94       	cli
    b606:	de bf       	out	0x3e, r29	; 62
    b608:	0f be       	out	0x3f, r0	; 63
    b60a:	cd bf       	out	0x3d, r28	; 61
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:439
  char topic[16];
  mqtt_log[mqtt_log_cnt] = c;
    b60c:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <mqtt_log_cnt>
    b610:	e9 2f       	mov	r30, r25
    b612:	f0 e0       	ldi	r31, 0x00	; 0
    b614:	e0 51       	subi	r30, 0x10	; 16
    b616:	f7 4f       	sbci	r31, 0xF7	; 247
    b618:	80 83       	st	Z, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:440
  mqtt_log[mqtt_log_cnt + 1] = 0;
    b61a:	11 82       	std	Z+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:441
  mqtt_log_cnt++;
    b61c:	9f 5f       	subi	r25, 0xFF	; 255
    b61e:	90 93 70 09 	sts	0x0970, r25	; 0x800970 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:442
  if (mqtt_log_cnt > 127 || c == '\n' || c == 0)
    b622:	97 fd       	sbrc	r25, 7
    b624:	04 c0       	rjmp	.+8      	; 0xb62e <printf_via_mqtt(char, __file*)+0x36>
    b626:	8a 30       	cpi	r24, 0x0A	; 10
    b628:	11 f0       	breq	.+4      	; 0xb62e <printf_via_mqtt(char, __file*)+0x36>
    b62a:	81 11       	cpse	r24, r1
    b62c:	13 c0       	rjmp	.+38     	; 0xb654 <printf_via_mqtt(char, __file*)+0x5c>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:444
  {
    strcpy(topic, "log-printf");
    b62e:	66 ea       	ldi	r22, 0xA6	; 166
    b630:	73 e0       	ldi	r23, 0x03	; 3
    b632:	ce 01       	movw	r24, r28
    b634:	01 96       	adiw	r24, 0x01	; 1
    b636:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:445
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    b63a:	40 ef       	ldi	r20, 0xF0	; 240
    b63c:	58 e0       	ldi	r21, 0x08	; 8
    b63e:	be 01       	movw	r22, r28
    b640:	6f 5f       	subi	r22, 0xFF	; 255
    b642:	7f 4f       	sbci	r23, 0xFF	; 255
    b644:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pub_mqtt_client>
    b648:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pub_mqtt_client+0x1>
    b64c:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:446
    mqtt_log_cnt = 0;
    b650:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <mqtt_log_cnt>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:448
  }
}
    b654:	60 96       	adiw	r28, 0x10	; 16
    b656:	0f b6       	in	r0, 0x3f	; 63
    b658:	f8 94       	cli
    b65a:	de bf       	out	0x3e, r29	; 62
    b65c:	0f be       	out	0x3f, r0	; 63
    b65e:	cd bf       	out	0x3d, r28	; 61
    b660:	df 91       	pop	r29
    b662:	cf 91       	pop	r28
    b664:	08 95       	ret

0000b666 <remote_tds_get_active(unsigned char, unsigned char*)>:
_Z21remote_tds_get_activehPh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2694
    }
}
///
/// je aktivni
void remote_tds_get_active(uint8_t idx, uint8_t *active)
{
    b666:	cf 93       	push	r28
    b668:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2695
  if (idx < MAX_RTDS)
    b66a:	8a 30       	cpi	r24, 0x0A	; 10
    b66c:	68 f4       	brcc	.+26     	; 0xb688 <remote_tds_get_active(unsigned char, unsigned char*)+0x22>
    b66e:	eb 01       	movw	r28, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2697
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b670:	24 e1       	ldi	r18, 0x14	; 20
    b672:	82 9f       	mul	r24, r18
    b674:	c0 01       	movw	r24, r0
    b676:	11 24       	eor	r1, r1
    b678:	83 54       	subi	r24, 0x43	; 67
    b67a:	9a 4f       	sbci	r25, 0xFA	; 250
    b67c:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b680:	88 83       	st	Y, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2701
  }
  else
    *active = 255;
}
    b682:	df 91       	pop	r29
    b684:	cf 91       	pop	r28
    b686:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2700
  if (idx < MAX_RTDS)
  {
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
    *active = 255;
    b688:	8f ef       	ldi	r24, 0xFF	; 255
    b68a:	fb 01       	movw	r30, r22
    b68c:	80 83       	st	Z, r24
    b68e:	f9 cf       	rjmp	.-14     	; 0xb682 <remote_tds_get_active(unsigned char, unsigned char*)+0x1c>

0000b690 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)>:
_Z25click_rtds_setting_sensorhhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5401
    args1 - parametr z globalniho nastaveni tlacitek
    args2 / definice menu
    loop_idx - polozka z menu
*/
void click_rtds_setting_sensor(uint8_t args1, uint8_t args2, uint8_t loop_idx)
{
    b690:	1f 93       	push	r17
    b692:	cf 93       	push	r28
    b694:	df 93       	push	r29
    b696:	1f 92       	push	r1
    b698:	cd b7       	in	r28, 0x3d	; 61
    b69a:	de b7       	in	r29, 0x3e	; 62
    b69c:	14 2f       	mov	r17, r20
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5406
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  //printf("pr %d %d %d\n", args1, args2, loop_idx);

  remote_tds_get_active(loop_idx, &active);
    b69e:	be 01       	movw	r22, r28
    b6a0:	6f 5f       	subi	r22, 0xFF	; 255
    b6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b6a4:	84 2f       	mov	r24, r20
    b6a6:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5407
  if (active == 1)
    b6aa:	89 81       	ldd	r24, Y+1	; 0x01
    b6ac:	81 30       	cpi	r24, 0x01	; 1
    b6ae:	21 f4       	brne	.+8      	; 0xb6b8 <click_rtds_setting_sensor(unsigned char, unsigned char, unsigned char)+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5409
  {
    MenuHistoryNextMenu(MENU_NASTAVENI_RTDS_DETAIL, loop_idx);
    b6b0:	61 2f       	mov	r22, r17
    b6b2:	87 e0       	ldi	r24, 0x07	; 7
    b6b4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5411
  }
}
    b6b8:	0f 90       	pop	r0
    b6ba:	df 91       	pop	r29
    b6bc:	cf 91       	pop	r28
    b6be:	1f 91       	pop	r17
    b6c0:	08 95       	ret

0000b6c2 <remote_tds_find_free()>:
_Z20remote_tds_find_freev():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2751
  }
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
    b6c2:	1f 93       	push	r17
    b6c4:	cf 93       	push	r28
    b6c6:	df 93       	push	r29
    b6c8:	1f 92       	push	r1
    b6ca:	cd b7       	in	r28, 0x3d	; 61
    b6cc:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b6ce:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2756
  {
    remote_tds_get_active(idx, &active);
    b6d0:	be 01       	movw	r22, r28
    b6d2:	6f 5f       	subi	r22, 0xFF	; 255
    b6d4:	7f 4f       	sbci	r23, 0xFF	; 255
    b6d6:	81 2f       	mov	r24, r17
    b6d8:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2757
    if (active == 0)
    b6dc:	89 81       	ldd	r24, Y+1	; 0x01
    b6de:	88 23       	and	r24, r24
    b6e0:	21 f0       	breq	.+8      	; 0xb6ea <remote_tds_find_free()+0x28>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2754
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b6e2:	1f 5f       	subi	r17, 0xFF	; 255
    b6e4:	1a 30       	cpi	r17, 0x0A	; 10
    b6e6:	a1 f7       	brne	.-24     	; 0xb6d0 <remote_tds_find_free()+0xe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2752
}
///
/// vrati prvni idx banky ktera neni aktivni
uint8_t remote_tds_find_free(void)
{
  uint8_t ret = 255;
    b6e8:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2764
      ret = idx;
      break;
    }
  }
  return ret;
}
    b6ea:	81 2f       	mov	r24, r17
    b6ec:	0f 90       	pop	r0
    b6ee:	df 91       	pop	r29
    b6f0:	cf 91       	pop	r28
    b6f2:	1f 91       	pop	r17
    b6f4:	08 95       	ret

0000b6f6 <click_rtds_add_sensor(unsigned char, unsigned char)>:
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5352
  }
  return cnt;
}

void click_rtds_add_sensor(uint8_t args1, uint8_t args)
{
    b6f6:	1f 93       	push	r17
    b6f8:	cf 93       	push	r28
    b6fa:	df 93       	push	r29
    b6fc:	00 d0       	rcall	.+0      	; 0xb6fe <click_rtds_add_sensor(unsigned char, unsigned char)+0x8>
    b6fe:	1f 92       	push	r1
    b700:	1f 92       	push	r1
    b702:	cd b7       	in	r28, 0x3d	; 61
    b704:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5355
  char rtds_topic[5];
  uint8_t idx;
  idx = remote_tds_find_free();
    b706:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <remote_tds_find_free()>
    b70a:	18 2f       	mov	r17, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5356
  if (idx != 255)
    b70c:	8f 3f       	cpi	r24, 0xFF	; 255
    b70e:	e1 f0       	breq	.+56     	; 0xb748 <click_rtds_add_sensor(unsigned char, unsigned char)+0x52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5358
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    b710:	67 eb       	ldi	r22, 0xB7	; 183
    b712:	74 e3       	ldi	r23, 0x34	; 52
    b714:	ce 01       	movw	r24, r28
    b716:	01 96       	adiw	r24, 0x01	; 1
    b718:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5359
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    b71c:	60 e0       	ldi	r22, 0x00	; 0
    b71e:	87 e6       	ldi	r24, 0x67	; 103
    b720:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    b724:	be 01       	movw	r22, r28
    b726:	6f 5f       	subi	r22, 0xFF	; 255
    b728:	7f 4f       	sbci	r23, 0xFF	; 255
    b72a:	8d ea       	ldi	r24, 0xAD	; 173
    b72c:	98 e0       	ldi	r25, 0x08	; 8
    b72e:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  dialog_set_string_max_length = max_length;
    b732:	82 e1       	ldi	r24, 0x12	; 18
    b734:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
  dialog_set_string_args = idx;
    b738:	10 93 bd 08 	sts	0x08BD, r17	; 0x8008bd <dialog_set_string_args>
_Z21click_rtds_add_sensorhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5361
  if (idx != 255)
  {
    strcpy_P(rtds_topic, text_rtds_prefix);
    MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    display_element_set_string(rtds_topic, RTDS_DEVICE_STRING_LEN, idx);
    dialog_save_variable_function = &menu_rtds_create_name;
    b73c:	8a ef       	ldi	r24, 0xFA	; 250
    b73e:	9f e5       	ldi	r25, 0x5F	; 95
    b740:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    b744:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5364
  }

}
    b748:	0f 90       	pop	r0
    b74a:	0f 90       	pop	r0
    b74c:	0f 90       	pop	r0
    b74e:	0f 90       	pop	r0
    b750:	0f 90       	pop	r0
    b752:	df 91       	pop	r29
    b754:	cf 91       	pop	r28
    b756:	1f 91       	pop	r17
    b758:	08 95       	ret

0000b75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>:
_Z23remote_tds_get_completehPhPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2655
  active - ukazatel na promenou active
  name - ukazatel na nazev topicu
*/
/// ziska nazev topicu
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
    b75a:	af 92       	push	r10
    b75c:	bf 92       	push	r11
    b75e:	cf 92       	push	r12
    b760:	df 92       	push	r13
    b762:	ef 92       	push	r14
    b764:	ff 92       	push	r15
    b766:	0f 93       	push	r16
    b768:	1f 93       	push	r17
    b76a:	cf 93       	push	r28
    b76c:	df 93       	push	r29
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2657
  char t;
  if (idx < MAX_RTDS)
    b76e:	8a 30       	cpi	r24, 0x0A	; 10
    b770:	88 f5       	brcc	.+98     	; 0xb7d4 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x7a>
    b772:	7b 01       	movw	r14, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2661
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    {
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
    b774:	94 e1       	ldi	r25, 0x14	; 20
    b776:	89 9f       	mul	r24, r25
    b778:	e0 01       	movw	r28, r0
    b77a:	11 24       	eor	r1, r1
    b77c:	6e 01       	movw	r12, r28
    b77e:	e6 e5       	ldi	r30, 0x56	; 86
    b780:	ce 1a       	sub	r12, r30
    b782:	ea ef       	ldi	r30, 0xFA	; 250
    b784:	de 0a       	sbc	r13, r30
    b786:	8a 01       	movw	r16, r20
    b788:	5e 01       	movw	r10, r28
    b78a:	f4 e4       	ldi	r31, 0x44	; 68
    b78c:	af 1a       	sub	r10, r31
    b78e:	fa ef       	ldi	r31, 0xFA	; 250
    b790:	bf 0a       	sbc	r11, r31
    b792:	c6 01       	movw	r24, r12
    b794:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2662
      name[i] = t;
    b798:	f8 01       	movw	r30, r16
    b79a:	81 93       	st	Z+, r24
    b79c:	8f 01       	movw	r16, r30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2663
      name[i + 1] = 0;
    b79e:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2664
      if (t == 0) break;
    b7a0:	88 23       	and	r24, r24
    b7a2:	31 f0       	breq	.+12     	; 0xb7b0 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x56>
    b7a4:	ff ef       	ldi	r31, 0xFF	; 255
    b7a6:	cf 1a       	sub	r12, r31
    b7a8:	df 0a       	sbc	r13, r31
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2659
void remote_tds_get_complete(uint8_t idx, uint8_t *active, char *name)
{
  char t;
  if (idx < MAX_RTDS)
  {
    for (uint8_t i = 0; i < RTDS_DEVICE_STRING_LEN; i++)
    b7aa:	ca 14       	cp	r12, r10
    b7ac:	db 04       	cpc	r13, r11
    b7ae:	89 f7       	brne	.-30     	; 0xb792 <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x38>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2666
      t = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + i);
      name[i] = t;
      name[i + 1] = 0;
      if (t == 0) break;
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
    b7b0:	ce 01       	movw	r24, r28
    b7b2:	83 54       	subi	r24, 0x43	; 67
    b7b4:	9a 4f       	sbci	r25, 0xFA	; 250
    b7b6:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    b7ba:	f7 01       	movw	r30, r14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
  }
  else
  {
    *active = 255;
    b7bc:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2672
  }
}
    b7be:	df 91       	pop	r29
    b7c0:	cf 91       	pop	r28
    b7c2:	1f 91       	pop	r17
    b7c4:	0f 91       	pop	r16
    b7c6:	ff 90       	pop	r15
    b7c8:	ef 90       	pop	r14
    b7ca:	df 90       	pop	r13
    b7cc:	cf 90       	pop	r12
    b7ce:	bf 90       	pop	r11
    b7d0:	af 90       	pop	r10
    b7d2:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2670
    }
    *active = EEPROM.read(remote_tds_name0 + (RTDS_DEVICE_TOTAL_LEN * idx) + RTDS_DEVICE_ACTIVE_BYTE_POS);
  }
  else
  {
    *active = 255;
    b7d4:	8f ef       	ldi	r24, 0xFF	; 255
    b7d6:	fb 01       	movw	r30, r22
    b7d8:	f1 cf       	rjmp	.-30     	; 0xb7bc <remote_tds_get_complete(unsigned char, unsigned char*, char*)+0x62>

0000b7da <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)>:
_Z28button_get_show_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5471
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void button_get_show_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b7da:	9f 92       	push	r9
    b7dc:	af 92       	push	r10
    b7de:	bf 92       	push	r11
    b7e0:	cf 92       	push	r12
    b7e2:	df 92       	push	r13
    b7e4:	ef 92       	push	r14
    b7e6:	ff 92       	push	r15
    b7e8:	0f 93       	push	r16
    b7ea:	1f 93       	push	r17
    b7ec:	cf 93       	push	r28
    b7ee:	df 93       	push	r29
    b7f0:	cd b7       	in	r28, 0x3d	; 61
    b7f2:	de b7       	in	r29, 0x3e	; 62
    b7f4:	aa 97       	sbiw	r28, 0x2a	; 42
    b7f6:	0f b6       	in	r0, 0x3f	; 63
    b7f8:	f8 94       	cli
    b7fa:	de bf       	out	0x3e, r29	; 62
    b7fc:	0f be       	out	0x3f, r0	; 63
    b7fe:	cd bf       	out	0x3d, r28	; 61
    b800:	98 2e       	mov	r9, r24
    b802:	7a 01       	movw	r14, r20
    b804:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5475
  char name[20];
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
    b806:	62 ef       	ldi	r22, 0xF2	; 242
    b808:	72 e0       	ldi	r23, 0x02	; 2
    b80a:	ca 01       	movw	r24, r20
    b80c:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5476
  strcpy(line2, "");
    b810:	62 ef       	ldi	r22, 0xF2	; 242
    b812:	72 e0       	ldi	r23, 0x02	; 2
    b814:	c6 01       	movw	r24, r12
    b816:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
    b81a:	88 ec       	ldi	r24, 0xC8	; 200
    b81c:	a8 2e       	mov	r10, r24
    b81e:	b1 2c       	mov	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b820:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5473
////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce, ktera vraci zpet popisek k tlacitkum
void button_get_show_default_temp(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
  char name[20];
  uint8_t cri = 0;
    b822:	10 e0       	ldi	r17, 0x00	; 0
tds_used():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:29

uint8_t tds_used(uint8_t idx)
{
  if (idx < HW_ONEWIRE_MAXROMS)
  {
    return EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used);
    b824:	c5 01       	movw	r24, r10
    b826:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z28button_get_show_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5480
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
  {
    if (tds_used(idx) == 1)
    b82a:	81 30       	cpi	r24, 0x01	; 1
    b82c:	69 f5       	brne	.+90     	; 0xb888 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0xae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5482
    {
      if (cri == args1)
    b82e:	91 12       	cpse	r9, r17
    b830:	2a c0       	rjmp	.+84     	; 0xb886 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0xac>
tds_get_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:75

//// ziska nazev tds cidla
void tds_get_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    b832:	be 01       	movw	r22, r28
    b834:	6f 5f       	subi	r22, 0xFF	; 255
    b836:	7f 4f       	sbci	r23, 0xFF	; 255
    b838:	80 2f       	mov	r24, r16
    b83a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:76
  strcpy(name, tds.name);
    b83e:	be 01       	movw	r22, r28
    b840:	63 5f       	subi	r22, 0xF3	; 243
    b842:	7f 4f       	sbci	r23, 0xFF	; 255
    b844:	ce 01       	movw	r24, r28
    b846:	47 96       	adiw	r24, 0x17	; 23
    b848:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z28button_get_show_default_temphhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5485
      {
        tds_get_name(idx, name);
        strcpy(line2, name);
    b84c:	be 01       	movw	r22, r28
    b84e:	69 5e       	subi	r22, 0xE9	; 233
    b850:	7f 4f       	sbci	r23, 0xFF	; 255
    b852:	c6 01       	movw	r24, r12
    b854:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5486
        strcpy_P(line1, nastaveni_onewire);
    b858:	68 ec       	ldi	r22, 0xC8	; 200
    b85a:	74 e3       	ldi	r23, 0x34	; 52
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
    {
      if (cri == args1)
      {
        remote_tds_get_complete(idx, &active, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_rtds);
    b85c:	c7 01       	movw	r24, r14
    b85e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5511
    }
  }
button_get_show_default_temp_end:
  /// hack kvuli goto
  cri = 0;
}
    b862:	aa 96       	adiw	r28, 0x2a	; 42
    b864:	0f b6       	in	r0, 0x3f	; 63
    b866:	f8 94       	cli
    b868:	de bf       	out	0x3e, r29	; 62
    b86a:	0f be       	out	0x3f, r0	; 63
    b86c:	cd bf       	out	0x3d, r28	; 61
    b86e:	df 91       	pop	r29
    b870:	cf 91       	pop	r28
    b872:	1f 91       	pop	r17
    b874:	0f 91       	pop	r16
    b876:	ff 90       	pop	r15
    b878:	ef 90       	pop	r14
    b87a:	df 90       	pop	r13
    b87c:	cf 90       	pop	r12
    b87e:	bf 90       	pop	r11
    b880:	af 90       	pop	r10
    b882:	9f 90       	pop	r9
    b884:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5489
        tds_get_name(idx, name);
        strcpy(line2, name);
        strcpy_P(line1, nastaveni_onewire);
        goto button_get_show_default_temp_end;
      }
      cri++;
    b886:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5478
  uint8_t cri = 0;
  uint8_t active;
  strcpy(line1, "");
  strcpy(line2, "");
  /// pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    b888:	0f 5f       	subi	r16, 0xFF	; 255
    b88a:	86 e1       	ldi	r24, 0x16	; 22
    b88c:	a8 0e       	add	r10, r24
    b88e:	b1 1c       	adc	r11, r1
    b890:	06 30       	cpi	r16, 0x06	; 6
    b892:	41 f6       	brne	.-112    	; 0xb824 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0x4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5493
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b894:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5495
  {
    remote_tds_get_active(idx, &active);
    b896:	be 01       	movw	r22, r28
    b898:	6f 5f       	subi	r22, 0xFF	; 255
    b89a:	7f 4f       	sbci	r23, 0xFF	; 255
    b89c:	80 2f       	mov	r24, r16
    b89e:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5496
    if (active == 1)
    b8a2:	89 81       	ldd	r24, Y+1	; 0x01
    b8a4:	81 30       	cpi	r24, 0x01	; 1
    b8a6:	a9 f4       	brne	.+42     	; 0xb8d2 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0xf8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5498
    {
      if (cri == args1)
    b8a8:	91 12       	cpse	r9, r17
    b8aa:	12 c0       	rjmp	.+36     	; 0xb8d0 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0xf6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5500
      {
        remote_tds_get_complete(idx, &active, name);
    b8ac:	ae 01       	movw	r20, r28
    b8ae:	49 5e       	subi	r20, 0xE9	; 233
    b8b0:	5f 4f       	sbci	r21, 0xFF	; 255
    b8b2:	be 01       	movw	r22, r28
    b8b4:	6f 5f       	subi	r22, 0xFF	; 255
    b8b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b8b8:	80 2f       	mov	r24, r16
    b8ba:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5501
        strcpy(line2, name);
    b8be:	be 01       	movw	r22, r28
    b8c0:	69 5e       	subi	r22, 0xE9	; 233
    b8c2:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c4:	c6 01       	movw	r24, r12
    b8c6:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5502
        strcpy_P(line1, nastaveni_rtds);
    b8ca:	69 eb       	ldi	r22, 0xB9	; 185
    b8cc:	74 e3       	ldi	r23, 0x34	; 52
    b8ce:	c6 cf       	rjmp	.-116    	; 0xb85c <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0x82>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5505
        goto button_get_show_default_temp_end;
      }
      cri++;
    b8d0:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5493
      }
      cri++;
    }
  }
  /// pro rtds
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    b8d2:	0f 5f       	subi	r16, 0xFF	; 255
    b8d4:	0a 30       	cpi	r16, 0x0A	; 10
    b8d6:	f9 f6       	brne	.-66     	; 0xb896 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0xbc>
    b8d8:	c4 cf       	rjmp	.-120    	; 0xb862 <button_get_show_default_temp(unsigned char, unsigned char, char*, char*)+0x88>

0000b8da <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)>:
_Z29get_function_rtds_text_buttonhhPcS_():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5241
  return active;
  }
*/

void get_function_rtds_text_button(uint8_t args1, uint8_t args2, char *line1, char *line2)
{
    b8da:	cf 92       	push	r12
    b8dc:	df 92       	push	r13
    b8de:	ef 92       	push	r14
    b8e0:	ff 92       	push	r15
    b8e2:	1f 93       	push	r17
    b8e4:	cf 93       	push	r28
    b8e6:	df 93       	push	r29
    b8e8:	1f 92       	push	r1
    b8ea:	cd b7       	in	r28, 0x3d	; 61
    b8ec:	de b7       	in	r29, 0x3e	; 62
    b8ee:	18 2f       	mov	r17, r24
    b8f0:	7a 01       	movw	r14, r20
    b8f2:	69 01       	movw	r12, r18
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5243
  uint8_t active;
  strcpy_P(line1, text_not_used);
    b8f4:	66 e9       	ldi	r22, 0x96	; 150
    b8f6:	74 e3       	ldi	r23, 0x34	; 52
    b8f8:	ca 01       	movw	r24, r20
    b8fa:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5245
  //sprintf(line2, "%d %d", args1, args2);
  line2[0] = 0;
    b8fe:	f6 01       	movw	r30, r12
    b900:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5246
  remote_tds_get_active(args1, &active);
    b902:	be 01       	movw	r22, r28
    b904:	6f 5f       	subi	r22, 0xFF	; 255
    b906:	7f 4f       	sbci	r23, 0xFF	; 255
    b908:	81 2f       	mov	r24, r17
    b90a:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5247
  if (active == 1)
    b90e:	89 81       	ldd	r24, Y+1	; 0x01
    b910:	81 30       	cpi	r24, 0x01	; 1
    b912:	39 f4       	brne	.+14     	; 0xb922 <get_function_rtds_text_button(unsigned char, unsigned char, char*, char*)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5249
  {
    remote_tds_get_complete(args1, &active, line1);
    b914:	a7 01       	movw	r20, r14
    b916:	be 01       	movw	r22, r28
    b918:	6f 5f       	subi	r22, 0xFF	; 255
    b91a:	7f 4f       	sbci	r23, 0xFF	; 255
    b91c:	81 2f       	mov	r24, r17
    b91e:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5251
  }
}
    b922:	0f 90       	pop	r0
    b924:	df 91       	pop	r29
    b926:	cf 91       	pop	r28
    b928:	1f 91       	pop	r17
    b92a:	ff 90       	pop	r15
    b92c:	ef 90       	pop	r14
    b92e:	df 90       	pop	r13
    b930:	cf 90       	pop	r12
    b932:	08 95       	ret

0000b934 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4944
    show_string(str1, x + 25, y + 40, 4, RED, WHITE, 0);
  }
}
/////
void display_element_show_rtds_info_dynamics(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    b934:	5f 92       	push	r5
    b936:	6f 92       	push	r6
    b938:	7f 92       	push	r7
    b93a:	8f 92       	push	r8
    b93c:	9f 92       	push	r9
    b93e:	af 92       	push	r10
    b940:	bf 92       	push	r11
    b942:	cf 92       	push	r12
    b944:	df 92       	push	r13
    b946:	ef 92       	push	r14
    b948:	ff 92       	push	r15
    b94a:	0f 93       	push	r16
    b94c:	1f 93       	push	r17
    b94e:	cf 93       	push	r28
    b950:	df 93       	push	r29
    b952:	cd b7       	in	r28, 0x3d	; 61
    b954:	de b7       	in	r29, 0x3e	; 62
    b956:	cd 54       	subi	r28, 0x4D	; 77
    b958:	d1 09       	sbc	r29, r1
    b95a:	0f b6       	in	r0, 0x3f	; 63
    b95c:	f8 94       	cli
    b95e:	de bf       	out	0x3e, r29	; 62
    b960:	0f be       	out	0x3f, r0	; 63
    b962:	cd bf       	out	0x3d, r28	; 61
    b964:	4c 01       	movw	r8, r24
    b966:	5b 01       	movw	r10, r22
    b968:	5e 2c       	mov	r5, r14
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    b96a:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    b96e:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4952
  char name[RTDS_DEVICE_STRING_LEN];
  float te;
  uint8_t last_update;
  uint8_t active;
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + size_x , y + size_y);
    b972:	26 0f       	add	r18, r22
    b974:	37 1f       	adc	r19, r23
    b976:	48 0f       	add	r20, r24
    b978:	59 1f       	adc	r21, r25
    b97a:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4953
  remote_tds_get_complete(args2, &active, name);
    b97e:	ae 01       	movw	r20, r28
    b980:	45 5c       	subi	r20, 0xC5	; 197
    b982:	5f 4f       	sbci	r21, 0xFF	; 255
    b984:	be 01       	movw	r22, r28
    b986:	63 5b       	subi	r22, 0xB3	; 179
    b988:	7f 4f       	sbci	r23, 0xFF	; 255
    b98a:	8e 2d       	mov	r24, r14
    b98c:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4954
  if (active == 1)
    b990:	2e 96       	adiw	r28, 0x0e	; 14
    b992:	8f ad       	ldd	r24, Y+63	; 0x3f
    b994:	2e 97       	sbiw	r28, 0x0e	; 14
    b996:	81 30       	cpi	r24, 0x01	; 1
    b998:	09 f0       	breq	.+2      	; 0xb99c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x68>
    b99a:	c1 c0       	rjmp	.+386    	; 0xbb1e <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ea>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4957
  {
    /// nazev
    strcpy_P(str1, text_nazev);
    b99c:	6c e7       	ldi	r22, 0x7C	; 124
    b99e:	74 e3       	ldi	r23, 0x34	; 52
    b9a0:	ce 01       	movw	r24, r28
    b9a2:	01 96       	adiw	r24, 0x01	; 1
    b9a4:	6c 01       	movw	r12, r24
    b9a6:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4958
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    b9aa:	34 01       	movw	r6, r8
    b9ac:	95 e0       	ldi	r25, 0x05	; 5
    b9ae:	69 0e       	add	r6, r25
    b9b0:	71 1c       	adc	r7, r1
    b9b2:	ee 24       	eor	r14, r14
    b9b4:	ea 94       	dec	r14
    b9b6:	fe 2c       	mov	r15, r14
    b9b8:	10 e0       	ldi	r17, 0x00	; 0
    b9ba:	00 e0       	ldi	r16, 0x00	; 0
    b9bc:	22 e0       	ldi	r18, 0x02	; 2
    b9be:	a5 01       	movw	r20, r10
    b9c0:	46 5f       	subi	r20, 0xF6	; 246
    b9c2:	5f 4f       	sbci	r21, 0xFF	; 255
    b9c4:	b3 01       	movw	r22, r6
    b9c6:	c6 01       	movw	r24, r12
    b9c8:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4959
    strcpy(str1, name);
    b9cc:	be 01       	movw	r22, r28
    b9ce:	65 5c       	subi	r22, 0xC5	; 197
    b9d0:	7f 4f       	sbci	r23, 0xFF	; 255
    b9d2:	c6 01       	movw	r24, r12
    b9d4:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4960
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    b9d8:	b4 01       	movw	r22, r8
    b9da:	6c 5e       	subi	r22, 0xEC	; 236
    b9dc:	7f 4f       	sbci	r23, 0xFF	; 255
    b9de:	22 e0       	ldi	r18, 0x02	; 2
    b9e0:	a5 01       	movw	r20, r10
    b9e2:	42 5e       	subi	r20, 0xE2	; 226
    b9e4:	5f 4f       	sbci	r21, 0xFF	; 255
    b9e6:	c6 01       	movw	r24, r12
    b9e8:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2797
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
  if (idx < MAX_RTDS)
    b9ec:	89 e0       	ldi	r24, 0x09	; 9
    b9ee:	85 15       	cp	r24, r5
    b9f0:	08 f4       	brcc	.+2      	; 0xb9f4 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc0>
    b9f2:	ac c0       	rjmp	.+344    	; 0xbb4c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x218>
    b9f4:	85 2d       	mov	r24, r5
    b9f6:	0e 94 9b 2b 	call	0x5736	; 0x5736 <remote_tds_get_data(unsigned char) [clone .part.26]>
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4962
    strcpy_P(str1, text_nazev);
    show_string(str1, x + 5 , y + 10 , 2, BLACK, WHITE, 0);
    strcpy(str1, name);
    show_string(str1, x + 20 , y + 30 , 2 , BLACK, WHITE, 0);
    /// teplota
    te = remote_tds_get_data(args2) / 1000.0;
    b9fa:	bc 01       	movw	r22, r24
    b9fc:	99 0f       	add	r25, r25
    b9fe:	88 0b       	sbc	r24, r24
    ba00:	99 0b       	sbc	r25, r25
    ba02:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    ba06:	20 e0       	ldi	r18, 0x00	; 0
    ba08:	30 e0       	ldi	r19, 0x00	; 0
    ba0a:	4a e7       	ldi	r20, 0x7A	; 122
    ba0c:	54 e4       	ldi	r21, 0x44	; 68
    ba0e:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4963
    dtostrf(te, 4, 2, str1);
    ba12:	86 01       	movw	r16, r12
    ba14:	22 e0       	ldi	r18, 0x02	; 2
    ba16:	44 e0       	ldi	r20, 0x04	; 4
    ba18:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4964
    strcat(str1, "C");
    ba1c:	6b ec       	ldi	r22, 0xCB	; 203
    ba1e:	76 e0       	ldi	r23, 0x06	; 6
    ba20:	c6 01       	movw	r24, r12
    ba22:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4965
    strcpy_P(str2, current_temp_short);
    ba26:	4e 01       	movw	r8, r28
    ba28:	91 e2       	ldi	r25, 0x21	; 33
    ba2a:	89 0e       	add	r8, r25
    ba2c:	91 1c       	adc	r9, r1
    ba2e:	63 e7       	ldi	r22, 0x73	; 115
    ba30:	74 e3       	ldi	r23, 0x34	; 52
    ba32:	c4 01       	movw	r24, r8
    ba34:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4966
    strcat(str2, str1);
    ba38:	b6 01       	movw	r22, r12
    ba3a:	c4 01       	movw	r24, r8
    ba3c:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4967
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    ba40:	ee 24       	eor	r14, r14
    ba42:	ea 94       	dec	r14
    ba44:	fe 2c       	mov	r15, r14
    ba46:	10 e0       	ldi	r17, 0x00	; 0
    ba48:	00 e0       	ldi	r16, 0x00	; 0
    ba4a:	22 e0       	ldi	r18, 0x02	; 2
    ba4c:	a5 01       	movw	r20, r10
    ba4e:	44 5c       	subi	r20, 0xC4	; 196
    ba50:	5f 4f       	sbci	r21, 0xFF	; 255
    ba52:	b3 01       	movw	r22, r6
    ba54:	c4 01       	movw	r24, r8
    ba56:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2807
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
    ba5a:	89 e0       	ldi	r24, 0x09	; 9
    ba5c:	85 15       	cp	r24, r5
    ba5e:	08 f4       	brcc	.+2      	; 0xba62 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x12e>
    ba60:	78 c0       	rjmp	.+240    	; 0xbb52 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x21e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    ba62:	93 e0       	ldi	r25, 0x03	; 3
    ba64:	59 9e       	mul	r5, r25
    ba66:	b0 01       	movw	r22, r0
    ba68:	11 24       	eor	r1, r1
    ba6a:	6a 59       	subi	r22, 0x9A	; 154
    ba6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ba6e:	07 2e       	mov	r0, r23
    ba70:	00 0c       	add	r0, r0
    ba72:	88 0b       	sbc	r24, r24
    ba74:	99 0b       	sbc	r25, r25
    ba76:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
    ba7a:	58 2e       	mov	r5, r24
_Z39display_element_show_rtds_info_dynamicsjjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4970
    strcpy_P(str2, current_temp_short);
    strcat(str2, str1);
    show_string(str2, x + 5, y + 60 , 2, BLACK, WHITE, 0);
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    ba7c:	6d e5       	ldi	r22, 0x5D	; 93
    ba7e:	74 e3       	ldi	r23, 0x34	; 52
    ba80:	c4 01       	movw	r24, r8
    ba82:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4971
    sprintf(str1, "%s: %d", str2, last_update);
    ba86:	1f 92       	push	r1
    ba88:	5f 92       	push	r5
    ba8a:	9f 92       	push	r9
    ba8c:	8f 92       	push	r8
    ba8e:	8f e9       	ldi	r24, 0x9F	; 159
    ba90:	93 e0       	ldi	r25, 0x03	; 3
    ba92:	9f 93       	push	r25
    ba94:	8f 93       	push	r24
    ba96:	df 92       	push	r13
    ba98:	cf 92       	push	r12
    ba9a:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4972
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    ba9e:	ee 24       	eor	r14, r14
    baa0:	ea 94       	dec	r14
    baa2:	fe 2c       	mov	r15, r14
    baa4:	10 e0       	ldi	r17, 0x00	; 0
    baa6:	00 e0       	ldi	r16, 0x00	; 0
    baa8:	21 e0       	ldi	r18, 0x01	; 1
    baaa:	a5 01       	movw	r20, r10
    baac:	40 5b       	subi	r20, 0xB0	; 176
    baae:	5f 4f       	sbci	r21, 0xFF	; 255
    bab0:	b3 01       	movw	r22, r6
    bab2:	c6 01       	movw	r24, r12
    bab4:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4974
    active = 1;
    if (last_update >= 250) active = 0;
    bab8:	0f b6       	in	r0, 0x3f	; 63
    baba:	f8 94       	cli
    babc:	de bf       	out	0x3e, r29	; 62
    babe:	0f be       	out	0x3f, r0	; 63
    bac0:	cd bf       	out	0x3d, r28	; 61
    bac2:	99 ef       	ldi	r25, 0xF9	; 249
    bac4:	95 15       	cp	r25, r5
    bac6:	08 f4       	brcc	.+2      	; 0xbaca <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x196>
    bac8:	47 c0       	rjmp	.+142    	; 0xbb58 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4973
    /// posledni aktualizace
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    baca:	81 e0       	ldi	r24, 0x01	; 1
    bacc:	2e 96       	adiw	r28, 0x0e	; 14
    bace:	8f af       	std	Y+63, r24	; 0x3f
    bad0:	2e 97       	sbiw	r28, 0x0e	; 14
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4975
    if (last_update >= 250) active = 0;
    strcpy_P(str2, text_online);
    bad2:	66 e5       	ldi	r22, 0x56	; 86
    bad4:	74 e3       	ldi	r23, 0x34	; 52
    bad6:	c4 01       	movw	r24, r8
    bad8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4976
    sprintf(str1, "%s: %d", str2, active);
    badc:	2e 96       	adiw	r28, 0x0e	; 14
    bade:	8f ad       	ldd	r24, Y+63	; 0x3f
    bae0:	2e 97       	sbiw	r28, 0x0e	; 14
    bae2:	1f 92       	push	r1
    bae4:	8f 93       	push	r24
    bae6:	9f 92       	push	r9
    bae8:	8f 92       	push	r8
    baea:	8f e9       	ldi	r24, 0x9F	; 159
    baec:	93 e0       	ldi	r25, 0x03	; 3
    baee:	9f 93       	push	r25
    baf0:	8f 93       	push	r24
    baf2:	df 92       	push	r13
    baf4:	cf 92       	push	r12
    baf6:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4977
    show_string(str1, x + 5, y + 100 , 2, BLACK, WHITE, 0);
    bafa:	a5 01       	movw	r20, r10
    bafc:	4c 59       	subi	r20, 0x9C	; 156
    bafe:	5f 4f       	sbci	r21, 0xFF	; 255
    bb00:	ee 24       	eor	r14, r14
    bb02:	ea 94       	dec	r14
    bb04:	fe 2c       	mov	r15, r14
    bb06:	10 e0       	ldi	r17, 0x00	; 0
    bb08:	00 e0       	ldi	r16, 0x00	; 0
    bb0a:	22 e0       	ldi	r18, 0x02	; 2
    bb0c:	b3 01       	movw	r22, r6
    bb0e:	c6 01       	movw	r24, r12
    bb10:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bb14:	0f b6       	in	r0, 0x3f	; 63
    bb16:	f8 94       	cli
    bb18:	de bf       	out	0x3e, r29	; 62
    bb1a:	0f be       	out	0x3f, r0	; 63
    bb1c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4979
  }
}
    bb1e:	c3 5b       	subi	r28, 0xB3	; 179
    bb20:	df 4f       	sbci	r29, 0xFF	; 255
    bb22:	0f b6       	in	r0, 0x3f	; 63
    bb24:	f8 94       	cli
    bb26:	de bf       	out	0x3e, r29	; 62
    bb28:	0f be       	out	0x3f, r0	; 63
    bb2a:	cd bf       	out	0x3d, r28	; 61
    bb2c:	df 91       	pop	r29
    bb2e:	cf 91       	pop	r28
    bb30:	1f 91       	pop	r17
    bb32:	0f 91       	pop	r16
    bb34:	ff 90       	pop	r15
    bb36:	ef 90       	pop	r14
    bb38:	df 90       	pop	r13
    bb3a:	cf 90       	pop	r12
    bb3c:	bf 90       	pop	r11
    bb3e:	af 90       	pop	r10
    bb40:	9f 90       	pop	r9
    bb42:	8f 90       	pop	r8
    bb44:	7f 90       	pop	r7
    bb46:	6f 90       	pop	r6
    bb48:	5f 90       	pop	r5
    bb4a:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2796
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
  }
}
int remote_tds_get_data(uint8_t idx)
{
  int temp = 0;
    bb4c:	90 e0       	ldi	r25, 0x00	; 0
    bb4e:	80 e0       	ldi	r24, 0x00	; 0
    bb50:	54 cf       	rjmp	.-344    	; 0xb9fa <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2806
  }
  return temp;
}
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
    bb52:	55 24       	eor	r5, r5
    bb54:	5a 94       	dec	r5
    bb56:	92 cf       	rjmp	.-220    	; 0xba7c <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x148>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4974
    last_update = remote_tds_get_last_update(args2);
    strcpy_P(str2, text_last_update);
    sprintf(str1, "%s: %d", str2, last_update);
    show_string(str1, x + 5, y + 80 , 1, BLACK, WHITE, 0);
    active = 1;
    if (last_update >= 250) active = 0;
    bb58:	2e 96       	adiw	r28, 0x0e	; 14
    bb5a:	1f ae       	std	Y+63, r1	; 0x3f
    bb5c:	2e 97       	sbiw	r28, 0x0e	; 14
    bb5e:	b9 cf       	rjmp	.-142    	; 0xbad2 <display_element_show_rtds_info_dynamics(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>

0000bb60 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)>:
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4840
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
}
///
/// funkce pro zobrazeni teploty
void display_element_show_temp_1(uint16_t x, uint16_t y, uint16_t size_x, uint16_t size_y, uint8_t args1, uint8_t args2)
{
    bb60:	2f 92       	push	r2
    bb62:	3f 92       	push	r3
    bb64:	4f 92       	push	r4
    bb66:	5f 92       	push	r5
    bb68:	6f 92       	push	r6
    bb6a:	7f 92       	push	r7
    bb6c:	8f 92       	push	r8
    bb6e:	9f 92       	push	r9
    bb70:	af 92       	push	r10
    bb72:	bf 92       	push	r11
    bb74:	cf 92       	push	r12
    bb76:	df 92       	push	r13
    bb78:	ef 92       	push	r14
    bb7a:	ff 92       	push	r15
    bb7c:	0f 93       	push	r16
    bb7e:	1f 93       	push	r17
    bb80:	cf 93       	push	r28
    bb82:	df 93       	push	r29
    bb84:	cd b7       	in	r28, 0x3d	; 61
    bb86:	de b7       	in	r29, 0x3e	; 62
    bb88:	ce 54       	subi	r28, 0x4E	; 78
    bb8a:	d1 09       	sbc	r29, r1
    bb8c:	0f b6       	in	r0, 0x3f	; 63
    bb8e:	f8 94       	cli
    bb90:	de bf       	out	0x3e, r29	; 62
    bb92:	0f be       	out	0x3f, r0	; 63
    bb94:	cd bf       	out	0x3d, r28	; 61
    bb96:	5c 01       	movw	r10, r24
    bb98:	4b 01       	movw	r8, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4845
  char str1[32];
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
    bb9a:	67 e2       	ldi	r22, 0x27	; 39
    bb9c:	74 e3       	ldi	r23, 0x34	; 52
    bb9e:	ce 01       	movw	r24, r28
    bba0:	01 96       	adiw	r24, 0x01	; 1
    bba2:	6c 01       	movw	r12, r24
    bba4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4846
  stat = get_global_temp(default_show_temp, str2, &te);
    bba8:	10 91 be 08 	lds	r17, 0x08BE	; 0x8008be <default_show_temp>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5425
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
    bbac:	69 e3       	ldi	r22, 0x39	; 57
    bbae:	74 e3       	ldi	r23, 0x34	; 52
    bbb0:	ce 01       	movw	r24, r28
    bbb2:	c7 96       	adiw	r24, 0x37	; 55
    bbb4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
    bbb8:	51 2c       	mov	r5, r1
    bbba:	41 2c       	mov	r4, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5422
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
    bbbc:	71 2c       	mov	r7, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5435
      if (tds.used == 1)
      {
        if (cri == device)
        {
          strcpy(name, tds.name);
          if (status_tds18s20[idx].online == True)
    bbbe:	0e e1       	ldi	r16, 0x1E	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5429
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if (get_tds18s20(idx, &tds) == 1)
    bbc0:	be 01       	movw	r22, r28
    bbc2:	6f 5d       	subi	r22, 0xDF	; 223
    bbc4:	7f 4f       	sbci	r23, 0xFF	; 255
    bbc6:	84 2d       	mov	r24, r4
    bbc8:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
    bbcc:	81 30       	cpi	r24, 0x01	; 1
    bbce:	09 f0       	breq	.+2      	; 0xbbd2 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x72>
    bbd0:	9c c0       	rjmp	.+312    	; 0xbd0a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5430
      if (tds.used == 1)
    bbd2:	89 a1       	ldd	r24, Y+33	; 0x21
    bbd4:	81 30       	cpi	r24, 0x01	; 1
    bbd6:	09 f0       	breq	.+2      	; 0xbbda <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x7a>
    bbd8:	98 c0       	rjmp	.+304    	; 0xbd0a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1aa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5432
      {
        if (cri == device)
    bbda:	17 11       	cpse	r17, r7
    bbdc:	95 c0       	rjmp	.+298    	; 0xbd08 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5434
        {
          strcpy(name, tds.name);
    bbde:	be 01       	movw	r22, r28
    bbe0:	63 5d       	subi	r22, 0xD3	; 211
    bbe2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbe4:	ce 01       	movw	r24, r28
    bbe6:	c7 96       	adiw	r24, 0x37	; 55
    bbe8:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5435
          if (status_tds18s20[idx].online == True)
    bbec:	04 9d       	mul	r16, r4
    bbee:	f0 01       	movw	r30, r0
    bbf0:	05 9d       	mul	r16, r5
    bbf2:	f0 0d       	add	r31, r0
    bbf4:	11 24       	eor	r1, r1
    bbf6:	eb 5e       	subi	r30, 0xEB	; 235
    bbf8:	f5 4f       	sbci	r31, 0xF5	; 245
    bbfa:	93 8d       	ldd	r25, Z+27	; 0x1b
    bbfc:	2d 96       	adiw	r28, 0x0d	; 13
    bbfe:	9f af       	std	Y+63, r25	; 0x3f
    bc00:	2d 97       	sbiw	r28, 0x0d	; 13
    bc02:	91 30       	cpi	r25, 0x01	; 1
    bc04:	09 f0       	breq	.+2      	; 0xbc08 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xa8>
    bc06:	80 c0       	rjmp	.+256    	; 0xbd08 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1a8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5437
          {
            *temp = status_tds18s20[idx].temp / 1000.0;
    bc08:	65 81       	ldd	r22, Z+5	; 0x05
    bc0a:	76 81       	ldd	r23, Z+6	; 0x06
    bc0c:	07 2e       	mov	r0, r23
    bc0e:	00 0c       	add	r0, r0
    bc10:	88 0b       	sbc	r24, r24
    bc12:	99 0b       	sbc	r25, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5455
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    bc14:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    bc18:	20 e0       	ldi	r18, 0x00	; 0
    bc1a:	30 e0       	ldi	r19, 0x00	; 0
    bc1c:	4a e7       	ldi	r20, 0x7A	; 122
    bc1e:	54 e4       	ldi	r21, 0x44	; 68
    bc20:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
    bc24:	1b 01       	movw	r2, r22
    bc26:	2c 01       	movw	r4, r24
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4847
  char str2[20];
  float te;
  uint8_t stat;
  strcpy_P(str1, current_temp);
  stat = get_global_temp(default_show_temp, str2, &te);
  strcat(str1, str2);
    bc28:	be 01       	movw	r22, r28
    bc2a:	69 5c       	subi	r22, 0xC9	; 201
    bc2c:	7f 4f       	sbci	r23, 0xFF	; 255
    bc2e:	c6 01       	movw	r24, r12
    bc30:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4848
  show_string(str1, x + 5, y + 5, 1, BLACK, WHITE, 0);
    bc34:	ee 24       	eor	r14, r14
    bc36:	ea 94       	dec	r14
    bc38:	fe 2c       	mov	r15, r14
    bc3a:	10 e0       	ldi	r17, 0x00	; 0
    bc3c:	00 e0       	ldi	r16, 0x00	; 0
    bc3e:	21 e0       	ldi	r18, 0x01	; 1
    bc40:	a4 01       	movw	r20, r8
    bc42:	4b 5f       	subi	r20, 0xFB	; 251
    bc44:	5f 4f       	sbci	r21, 0xFF	; 255
    bc46:	b5 01       	movw	r22, r10
    bc48:	6b 5f       	subi	r22, 0xFB	; 251
    bc4a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc4c:	c6 01       	movw	r24, r12
    bc4e:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    bc52:	34 01       	movw	r6, r8
    bc54:	94 e1       	ldi	r25, 0x14	; 20
    bc56:	69 0e       	add	r6, r25
    bc58:	71 1c       	adc	r7, r1
    bc5a:	c5 01       	movw	r24, r10
    bc5c:	04 96       	adiw	r24, 0x04	; 4
    bc5e:	2f 96       	adiw	r28, 0x0f	; 15
    bc60:	9f af       	std	Y+63, r25	; 0x3f
    bc62:	8e af       	std	Y+62, r24	; 0x3e
    bc64:	2f 97       	sbiw	r28, 0x0f	; 15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4849
  if (stat == 1)
    bc66:	2d 96       	adiw	r28, 0x0d	; 13
    bc68:	9f ad       	ldd	r25, Y+63	; 0x3f
    bc6a:	2d 97       	sbiw	r28, 0x0d	; 13
    bc6c:	91 30       	cpi	r25, 0x01	; 1
    bc6e:	09 f0       	breq	.+2      	; 0xbc72 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x112>
    bc70:	95 c0       	rjmp	.+298    	; 0xbd9c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x23c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4851
  {
    dtostrf(te, 4, 1, str1);
    bc72:	86 01       	movw	r16, r12
    bc74:	21 e0       	ldi	r18, 0x01	; 1
    bc76:	44 e0       	ldi	r20, 0x04	; 4
    bc78:	c2 01       	movw	r24, r4
    bc7a:	b1 01       	movw	r22, r2
    bc7c:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4852
    if (strlen(str1) <= 4)
    bc80:	f6 01       	movw	r30, r12
    bc82:	01 90       	ld	r0, Z+
    bc84:	00 20       	and	r0, r0
    bc86:	e9 f7       	brne	.-6      	; 0xbc82 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    bc88:	31 97       	sbiw	r30, 0x01	; 1
    bc8a:	ec 19       	sub	r30, r12
    bc8c:	fd 09       	sbc	r31, r13
    bc8e:	35 97       	sbiw	r30, 0x05	; 5
    bc90:	28 f4       	brcc	.+10     	; 0xbc9c <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x13c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4853
      strcat(str1, "C");
    bc92:	6b ec       	ldi	r22, 0xCB	; 203
    bc94:	76 e0       	ldi	r23, 0x06	; 6
    bc96:	c6 01       	movw	r24, r12
    bc98:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4854
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
    bc9c:	ee 24       	eor	r14, r14
    bc9e:	ea 94       	dec	r14
    bca0:	fe 2c       	mov	r15, r14
    bca2:	10 e0       	ldi	r17, 0x00	; 0
    bca4:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4859
  }
  else
  {
    strcpy_P(str1, text_err);
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    bca6:	28 e0       	ldi	r18, 0x08	; 8
    bca8:	a3 01       	movw	r20, r6
    bcaa:	2f 96       	adiw	r28, 0x0f	; 15
    bcac:	6e ad       	ldd	r22, Y+62	; 0x3e
    bcae:	7f ad       	ldd	r23, Y+63	; 0x3f
    bcb0:	2f 97       	sbiw	r28, 0x0f	; 15
    bcb2:	c6 01       	movw	r24, r12
    bcb4:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    bcb8:	10 92 c1 0d 	sts	0x0DC1, r1	; 0x800dc1 <my_lcd+0xb>
    bcbc:	10 92 c0 0d 	sts	0x0DC0, r1	; 0x800dc0 <my_lcd+0xa>
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4862
  }
  my_lcd.Set_Draw_color(BLACK);
  my_lcd.Draw_Rectangle(x, y, x + 244, y + 84);
    bcc0:	94 01       	movw	r18, r8
    bcc2:	2c 5a       	subi	r18, 0xAC	; 172
    bcc4:	3f 4f       	sbci	r19, 0xFF	; 255
    bcc6:	a5 01       	movw	r20, r10
    bcc8:	4c 50       	subi	r20, 0x0C	; 12
    bcca:	5f 4f       	sbci	r21, 0xFF	; 255
    bccc:	b4 01       	movw	r22, r8
    bcce:	c5 01       	movw	r24, r10
    bcd0:	0e 94 c6 83 	call	0x1078c	; 0x1078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4863
}
    bcd4:	c2 5b       	subi	r28, 0xB2	; 178
    bcd6:	df 4f       	sbci	r29, 0xFF	; 255
    bcd8:	0f b6       	in	r0, 0x3f	; 63
    bcda:	f8 94       	cli
    bcdc:	de bf       	out	0x3e, r29	; 62
    bcde:	0f be       	out	0x3f, r0	; 63
    bce0:	cd bf       	out	0x3d, r28	; 61
    bce2:	df 91       	pop	r29
    bce4:	cf 91       	pop	r28
    bce6:	1f 91       	pop	r17
    bce8:	0f 91       	pop	r16
    bcea:	ff 90       	pop	r15
    bcec:	ef 90       	pop	r14
    bcee:	df 90       	pop	r13
    bcf0:	cf 90       	pop	r12
    bcf2:	bf 90       	pop	r11
    bcf4:	af 90       	pop	r10
    bcf6:	9f 90       	pop	r9
    bcf8:	8f 90       	pop	r8
    bcfa:	7f 90       	pop	r7
    bcfc:	6f 90       	pop	r6
    bcfe:	5f 90       	pop	r5
    bd00:	4f 90       	pop	r4
    bd02:	3f 90       	pop	r3
    bd04:	2f 90       	pop	r2
    bd06:	08 95       	ret
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5442
            *temp = status_tds18s20[idx].temp / 1000.0;
            ret = 1;
            goto get_global_temp_end;
          }
        }
        cri++;
    bd08:	73 94       	inc	r7
    bd0a:	8f ef       	ldi	r24, 0xFF	; 255
    bd0c:	48 1a       	sub	r4, r24
    bd0e:	58 0a       	sbc	r5, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5428
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
  /// cast pro tds cidla
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    bd10:	96 e0       	ldi	r25, 0x06	; 6
    bd12:	49 16       	cp	r4, r25
    bd14:	51 04       	cpc	r5, r1
    bd16:	09 f0       	breq	.+2      	; 0xbd1a <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1ba>
    bd18:	53 cf       	rjmp	.-346    	; 0xbbc0 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x60>
    bd1a:	36 e6       	ldi	r19, 0x66	; 102
    bd1c:	23 2e       	mov	r2, r19
    bd1e:	31 2c       	mov	r3, r1
    bd20:	41 2c       	mov	r4, r1
    bd22:	51 2c       	mov	r5, r1
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5445
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bd24:	61 2c       	mov	r6, r1
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5447
  {
    remote_tds_get_active(idx, &active);
    bd26:	be 01       	movw	r22, r28
    bd28:	65 5b       	subi	r22, 0xB5	; 181
    bd2a:	7f 4f       	sbci	r23, 0xFF	; 255
    bd2c:	86 2d       	mov	r24, r6
    bd2e:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5448
    if (active == 1)
    bd32:	2c 96       	adiw	r28, 0x0c	; 12
    bd34:	8f ad       	ldd	r24, Y+63	; 0x3f
    bd36:	2c 97       	sbiw	r28, 0x0c	; 12
    bd38:	2d 96       	adiw	r28, 0x0d	; 13
    bd3a:	8f af       	std	Y+63, r24	; 0x3f
    bd3c:	2d 97       	sbiw	r28, 0x0d	; 13
    bd3e:	81 30       	cpi	r24, 0x01	; 1
    bd40:	d1 f4       	brne	.+52     	; 0xbd76 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x216>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5450
    {
      if (cri == device)
    bd42:	17 11       	cpse	r17, r7
    bd44:	17 c0       	rjmp	.+46     	; 0xbd74 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5452
      {
        remote_tds_get_complete(idx, &active, name);
    bd46:	ae 01       	movw	r20, r28
    bd48:	49 5c       	subi	r20, 0xC9	; 201
    bd4a:	5f 4f       	sbci	r21, 0xFF	; 255
    bd4c:	be 01       	movw	r22, r28
    bd4e:	65 5b       	subi	r22, 0xB5	; 181
    bd50:	7f 4f       	sbci	r23, 0xFF	; 255
    bd52:	86 2d       	mov	r24, r6
    bd54:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    bd58:	c2 01       	movw	r24, r4
    bd5a:	b1 01       	movw	r22, r2
    bd5c:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5453
    if (active == 1)
    {
      if (cri == device)
      {
        remote_tds_get_complete(idx, &active, name);
        if (remote_tds_get_last_update(idx) < 250)
    bd60:	8a 3f       	cpi	r24, 0xFA	; 250
    bd62:	40 f4       	brcc	.+16     	; 0xbd74 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x214>
remote_tds_get_data():
    bd64:	86 2d       	mov	r24, r6
    bd66:	0e 94 9b 2b 	call	0x5736	; 0x5736 <remote_tds_get_data(unsigned char) [clone .part.26]>
get_global_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5455
        {
          *temp = remote_tds_get_data(idx) / 1000.0;
    bd6a:	bc 01       	movw	r22, r24
    bd6c:	99 0f       	add	r25, r25
    bd6e:	88 0b       	sbc	r24, r24
    bd70:	99 0b       	sbc	r25, r25
    bd72:	50 cf       	rjmp	.-352    	; 0xbc14 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xb4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5460
          ret = 1;
          goto get_global_temp_end;
        }
      }
      cri++;
    bd74:	73 94       	inc	r7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5445
          }
        }
        cri++;
      }
  /// cast pro rtds cidla
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bd76:	63 94       	inc	r6
    bd78:	93 e0       	ldi	r25, 0x03	; 3
    bd7a:	29 0e       	add	r2, r25
    bd7c:	31 1c       	adc	r3, r1
    bd7e:	41 1c       	adc	r4, r1
    bd80:	51 1c       	adc	r5, r1
    bd82:	84 e8       	ldi	r24, 0x84	; 132
    bd84:	28 16       	cp	r2, r24
    bd86:	31 04       	cpc	r3, r1
    bd88:	41 04       	cpc	r4, r1
    bd8a:	51 04       	cpc	r5, r1
    bd8c:	61 f6       	brne	.-104    	; 0xbd26 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x1c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5426
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
  uint8_t active;
  strcpy_P(name, text_err);
  *temp = 0.0;
    bd8e:	21 2c       	mov	r2, r1
    bd90:	31 2c       	mov	r3, r1
    bd92:	21 01       	movw	r4, r2
_Z27display_element_show_temp_1jjjjhh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5423
/// funkce ktera vraci hodnoty pro zobrazeni, vrazi nazev, teplotu, navratova hodnota, zda jsou cisla aktualne platna
uint8_t get_global_temp(uint8_t device, char*name, float *temp)
{
  struct_DDS18s20 tds;
  uint8_t cri = 0;
  uint8_t ret = 0;
    bd94:	2d 96       	adiw	r28, 0x0d	; 13
    bd96:	1f ae       	std	Y+63, r1	; 0x3f
    bd98:	2d 97       	sbiw	r28, 0x0d	; 13
    bd9a:	46 cf       	rjmp	.-372    	; 0xbc28 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0xc8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4858
      strcat(str1, "C");
    show_string(str1, x + 4, y + 20, 8, BLACK, WHITE, 0);
  }
  else
  {
    strcpy_P(str1, text_err);
    bd9c:	69 e3       	ldi	r22, 0x39	; 57
    bd9e:	74 e3       	ldi	r23, 0x34	; 52
    bda0:	c6 01       	movw	r24, r12
    bda2:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4859
    show_string(str1, x + 4, y + 20, 8, RED, WHITE, 0);
    bda6:	ee 24       	eor	r14, r14
    bda8:	ea 94       	dec	r14
    bdaa:	fe 2c       	mov	r15, r14
    bdac:	00 e0       	ldi	r16, 0x00	; 0
    bdae:	18 ef       	ldi	r17, 0xF8	; 248
    bdb0:	7a cf       	rjmp	.-268    	; 0xbca6 <display_element_show_temp_1(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char, unsigned char)+0x146>

0000bdb2 <send_mqtt_remote_tds_status()>:
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3869
  }
*/
///
///
void send_mqtt_remote_tds_status(void)
{
    bdb2:	cf 92       	push	r12
    bdb4:	df 92       	push	r13
    bdb6:	ef 92       	push	r14
    bdb8:	ff 92       	push	r15
    bdba:	1f 93       	push	r17
    bdbc:	cf 93       	push	r28
    bdbe:	df 93       	push	r29
    bdc0:	cd b7       	in	r28, 0x3d	; 61
    bdc2:	de b7       	in	r29, 0x3e	; 62
    bdc4:	63 97       	sbiw	r28, 0x13	; 19
    bdc6:	0f b6       	in	r0, 0x3f	; 63
    bdc8:	f8 94       	cli
    bdca:	de bf       	out	0x3e, r29	; 62
    bdcc:	0f be       	out	0x3f, r0	; 63
    bdce:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3870
  uint8_t active = 0;
    bdd0:	1b 8a       	std	Y+19, r1	; 0x13
    bdd2:	86 e6       	ldi	r24, 0x66	; 102
    bdd4:	c8 2e       	mov	r12, r24
    bdd6:	d1 2c       	mov	r13, r1
    bdd8:	e1 2c       	mov	r14, r1
    bdda:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bddc:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3874
  {
    remote_tds_get_complete(idx, &active, payload);
    bdde:	ae 01       	movw	r20, r28
    bde0:	4f 5f       	subi	r20, 0xFF	; 255
    bde2:	5f 4f       	sbci	r21, 0xFF	; 255
    bde4:	be 01       	movw	r22, r28
    bde6:	6d 5e       	subi	r22, 0xED	; 237
    bde8:	7f 4f       	sbci	r23, 0xFF	; 255
    bdea:	81 2f       	mov	r24, r17
    bdec:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3876
    /// odeslu pouze pokud je neco aktivni, jinak ne
    if (active == 1)
    bdf0:	8b 89       	ldd	r24, Y+19	; 0x13
    bdf2:	81 30       	cpi	r24, 0x01	; 1
    bdf4:	09 f0       	breq	.+2      	; 0xbdf8 <send_mqtt_remote_tds_status()+0x46>
    bdf6:	44 c0       	rjmp	.+136    	; 0xbe80 <send_mqtt_remote_tds_status()+0xce>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3878
    {
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "name", payload);
    bdf8:	9e 01       	movw	r18, r28
    bdfa:	2f 5f       	subi	r18, 0xFF	; 255
    bdfc:	3f 4f       	sbci	r19, 0xFF	; 255
    bdfe:	41 eb       	ldi	r20, 0xB1	; 177
    be00:	53 e0       	ldi	r21, 0x03	; 3
    be02:	61 2f       	mov	r22, r17
    be04:	86 eb       	ldi	r24, 0xB6	; 182
    be06:	93 e0       	ldi	r25, 0x03	; 3
    be08:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3879
      itoa(active, payload, 10);
    be0c:	8b 89       	ldd	r24, Y+19	; 0x13
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    be0e:	4a e0       	ldi	r20, 0x0A	; 10
    be10:	be 01       	movw	r22, r28
    be12:	6f 5f       	subi	r22, 0xFF	; 255
    be14:	7f 4f       	sbci	r23, 0xFF	; 255
    be16:	90 e0       	ldi	r25, 0x00	; 0
    be18:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3880
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
    be1c:	9e 01       	movw	r18, r28
    be1e:	2f 5f       	subi	r18, 0xFF	; 255
    be20:	3f 4f       	sbci	r19, 0xFF	; 255
    be22:	4b eb       	ldi	r20, 0xBB	; 187
    be24:	53 e0       	ldi	r21, 0x03	; 3
    be26:	61 2f       	mov	r22, r17
    be28:	86 eb       	ldi	r24, 0xB6	; 182
    be2a:	93 e0       	ldi	r25, 0x03	; 3
    be2c:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_data():
    be30:	81 2f       	mov	r24, r17
    be32:	0e 94 9b 2b 	call	0x5736	; 0x5736 <remote_tds_get_data(unsigned char) [clone .part.26]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    be36:	4a e0       	ldi	r20, 0x0A	; 10
    be38:	be 01       	movw	r22, r28
    be3a:	6f 5f       	subi	r22, 0xFF	; 255
    be3c:	7f 4f       	sbci	r23, 0xFF	; 255
    be3e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3882
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
    be42:	9e 01       	movw	r18, r28
    be44:	2f 5f       	subi	r18, 0xFF	; 255
    be46:	3f 4f       	sbci	r19, 0xFF	; 255
    be48:	42 ec       	ldi	r20, 0xC2	; 194
    be4a:	53 e0       	ldi	r21, 0x03	; 3
    be4c:	61 2f       	mov	r22, r17
    be4e:	86 eb       	ldi	r24, 0xB6	; 182
    be50:	93 e0       	ldi	r25, 0x03	; 3
    be52:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
remote_tds_get_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2809
uint8_t remote_tds_get_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
    be56:	c7 01       	movw	r24, r14
    be58:	b6 01       	movw	r22, r12
    be5a:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    be5e:	4a e0       	ldi	r20, 0x0A	; 10
    be60:	be 01       	movw	r22, r28
    be62:	6f 5f       	subi	r22, 0xFF	; 255
    be64:	7f 4f       	sbci	r23, 0xFF	; 255
    be66:	90 e0       	ldi	r25, 0x00	; 0
    be68:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
_Z27send_mqtt_remote_tds_statusv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3884
      itoa(active, payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "active", payload);
      itoa(remote_tds_get_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    be6c:	9e 01       	movw	r18, r28
    be6e:	2f 5f       	subi	r18, 0xFF	; 255
    be70:	3f 4f       	sbci	r19, 0xFF	; 255
    be72:	47 ec       	ldi	r20, 0xC7	; 199
    be74:	53 e0       	ldi	r21, 0x03	; 3
    be76:	61 2f       	mov	r22, r17
    be78:	86 eb       	ldi	r24, 0xB6	; 182
    be7a:	93 e0       	ldi	r25, 0x03	; 3
    be7c:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3872
///
void send_mqtt_remote_tds_status(void)
{
  uint8_t active = 0;
  char payload[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    be80:	1f 5f       	subi	r17, 0xFF	; 255
    be82:	83 e0       	ldi	r24, 0x03	; 3
    be84:	c8 0e       	add	r12, r24
    be86:	d1 1c       	adc	r13, r1
    be88:	e1 1c       	adc	r14, r1
    be8a:	f1 1c       	adc	r15, r1
    be8c:	84 e8       	ldi	r24, 0x84	; 132
    be8e:	c8 16       	cp	r12, r24
    be90:	d1 04       	cpc	r13, r1
    be92:	e1 04       	cpc	r14, r1
    be94:	f1 04       	cpc	r15, r1
    be96:	09 f0       	breq	.+2      	; 0xbe9a <send_mqtt_remote_tds_status()+0xe8>
    be98:	a2 cf       	rjmp	.-188    	; 0xbdde <send_mqtt_remote_tds_status()+0x2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3887
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "temp", payload);
      itoa(remote_tds_get_last_update(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "rtds", idx, "last_update", payload);
    }
  }
}
    be9a:	63 96       	adiw	r28, 0x13	; 19
    be9c:	0f b6       	in	r0, 0x3f	; 63
    be9e:	f8 94       	cli
    bea0:	de bf       	out	0x3e, r29	; 62
    bea2:	0f be       	out	0x3f, r0	; 63
    bea4:	cd bf       	out	0x3d, r28	; 61
    bea6:	df 91       	pop	r29
    bea8:	cf 91       	pop	r28
    beaa:	1f 91       	pop	r17
    beac:	ff 90       	pop	r15
    beae:	ef 90       	pop	r14
    beb0:	df 90       	pop	r13
    beb2:	cf 90       	pop	r12
    beb4:	08 95       	ret

0000beb6 <remote_tds_name_exist(char*)>:
_Z21remote_tds_name_existPc():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2772
   navratove hodnoty
   255 ... nenalezeno
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
    beb6:	ef 92       	push	r14
    beb8:	ff 92       	push	r15
    beba:	0f 93       	push	r16
    bebc:	1f 93       	push	r17
    bebe:	cf 93       	push	r28
    bec0:	df 93       	push	r29
    bec2:	cd b7       	in	r28, 0x3d	; 61
    bec4:	de b7       	in	r29, 0x3e	; 62
    bec6:	63 97       	sbiw	r28, 0x13	; 19
    bec8:	0f b6       	in	r0, 0x3f	; 63
    beca:	f8 94       	cli
    becc:	de bf       	out	0x3e, r29	; 62
    bece:	0f be       	out	0x3f, r0	; 63
    bed0:	cd bf       	out	0x3d, r28	; 61
    bed2:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    bed4:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2774
   1..MAX_RTDS je idx bunky, kde mame tento nazev ulozen
*/
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
    bed6:	0f ef       	ldi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2778
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
  {
    remote_tds_get_complete(idx, &active, tmp_name);
    bed8:	ae 01       	movw	r20, r28
    beda:	4f 5f       	subi	r20, 0xFF	; 255
    bedc:	5f 4f       	sbci	r21, 0xFF	; 255
    bede:	be 01       	movw	r22, r28
    bee0:	6d 5e       	subi	r22, 0xED	; 237
    bee2:	7f 4f       	sbci	r23, 0xFF	; 255
    bee4:	81 2f       	mov	r24, r17
    bee6:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2779
    if (strcmp(name, tmp_name) == 0)
    beea:	be 01       	movw	r22, r28
    beec:	6f 5f       	subi	r22, 0xFF	; 255
    beee:	7f 4f       	sbci	r23, 0xFF	; 255
    bef0:	c7 01       	movw	r24, r14
    bef2:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    bef6:	89 2b       	or	r24, r25
    bef8:	09 f4       	brne	.+2      	; 0xbefc <remote_tds_name_exist(char*)+0x46>
    befa:	01 2f       	mov	r16, r17
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2776
uint8_t remote_tds_name_exist(char *name)
{
  uint8_t active;
  uint8_t found = 255;
  char tmp_name[RTDS_DEVICE_STRING_LEN];
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    befc:	1f 5f       	subi	r17, 0xFF	; 255
    befe:	1a 30       	cpi	r17, 0x0A	; 10
    bf00:	59 f7       	brne	.-42     	; 0xbed8 <remote_tds_name_exist(char*)+0x22>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2783
    remote_tds_get_complete(idx, &active, tmp_name);
    if (strcmp(name, tmp_name) == 0)
      found = idx;
  }
  return found;
}
    bf02:	80 2f       	mov	r24, r16
    bf04:	63 96       	adiw	r28, 0x13	; 19
    bf06:	0f b6       	in	r0, 0x3f	; 63
    bf08:	f8 94       	cli
    bf0a:	de bf       	out	0x3e, r29	; 62
    bf0c:	0f be       	out	0x3f, r0	; 63
    bf0e:	cd bf       	out	0x3d, r28	; 61
    bf10:	df 91       	pop	r29
    bf12:	cf 91       	pop	r28
    bf14:	1f 91       	pop	r17
    bf16:	0f 91       	pop	r16
    bf18:	ff 90       	pop	r15
    bf1a:	ef 90       	pop	r14
    bf1c:	08 95       	ret

0000bf1e <menu_rtds_update_name(unsigned char, unsigned char)>:
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5383
      remote_tds_subscibe_topic(idx);
    }
}

void menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    bf1e:	1f 93       	push	r17
    bf20:	cf 93       	push	r28
    bf22:	df 93       	push	r29
    bf24:	cd b7       	in	r28, 0x3d	; 61
    bf26:	de b7       	in	r29, 0x3e	; 62
    bf28:	62 97       	sbiw	r28, 0x12	; 18
    bf2a:	0f b6       	in	r0, 0x3f	; 63
    bf2c:	f8 94       	cli
    bf2e:	de bf       	out	0x3e, r29	; 62
    bf30:	0f be       	out	0x3f, r0	; 63
    bf32:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    bf34:	10 91 bd 08 	lds	r17, 0x08BD	; 0x8008bd <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    bf38:	6d ea       	ldi	r22, 0xAD	; 173
    bf3a:	78 e0       	ldi	r23, 0x08	; 8
    bf3c:	ce 01       	movw	r24, r28
    bf3e:	01 96       	adiw	r24, 0x01	; 1
    bf40:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5388
{
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("update %s, %d\n", name, idx);
  if (strlen(name) > 0)
    bf44:	89 81       	ldd	r24, Y+1	; 0x01
    bf46:	88 23       	and	r24, r24
    bf48:	71 f0       	breq	.+28     	; 0xbf66 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5390
  {
    if (remote_tds_name_exist(name) == 255)
    bf4a:	ce 01       	movw	r24, r28
    bf4c:	01 96       	adiw	r24, 0x01	; 1
    bf4e:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <remote_tds_name_exist(char*)>
    bf52:	8f 3f       	cpi	r24, 0xFF	; 255
    bf54:	41 f4       	brne	.+16     	; 0xbf66 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
remote_tds_set_name():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2683
}
/// nastavi topic
void remote_tds_set_name(uint8_t idx,  char *name)
{
  char t;
  if (idx < MAX_RTDS)
    bf56:	1a 30       	cpi	r17, 0x0A	; 10
    bf58:	30 f4       	brcc	.+12     	; 0xbf66 <menu_rtds_update_name(unsigned char, unsigned char)+0x48>
    bf5a:	be 01       	movw	r22, r28
    bf5c:	6f 5f       	subi	r22, 0xFF	; 255
    bf5e:	7f 4f       	sbci	r23, 0xFF	; 255
    bf60:	81 2f       	mov	r24, r17
    bf62:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <remote_tds_set_name(unsigned char, char*) [clone .part.22]>
_Z21menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5393
  if (strlen(name) > 0)
  {
    if (remote_tds_name_exist(name) == 255)
      remote_tds_set_name(idx, name);
  }
}
    bf66:	62 96       	adiw	r28, 0x12	; 18
    bf68:	0f b6       	in	r0, 0x3f	; 63
    bf6a:	f8 94       	cli
    bf6c:	de bf       	out	0x3e, r29	; 62
    bf6e:	0f be       	out	0x3f, r0	; 63
    bf70:	cd bf       	out	0x3d, r28	; 61
    bf72:	df 91       	pop	r29
    bf74:	cf 91       	pop	r28
    bf76:	1f 91       	pop	r17
    bf78:	08 95       	ret

0000bf7a <remote_tds_subscibe_topic(unsigned char)>:
_Z25remote_tds_subscibe_topich():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2721
/// funkce pro nastaveni odebirani topicu vzdalenych cidel
/*
  idx - index nazvu topicu, ktery si chci subscribnout/unsubscribnout
*/
void remote_tds_subscibe_topic(uint8_t idx)
{
    bf7a:	cf 93       	push	r28
    bf7c:	df 93       	push	r29
    bf7e:	cd b7       	in	r28, 0x3d	; 61
    bf80:	de b7       	in	r29, 0x3e	; 62
    bf82:	c1 58       	subi	r28, 0x81	; 129
    bf84:	d1 09       	sbc	r29, r1
    bf86:	0f b6       	in	r0, 0x3f	; 63
    bf88:	f8 94       	cli
    bf8a:	de bf       	out	0x3e, r29	; 62
    bf8c:	0f be       	out	0x3f, r0	; 63
    bf8e:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2724
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    bf90:	cf 57       	subi	r28, 0x7F	; 127
    bf92:	df 4f       	sbci	r29, 0xFF	; 255
    bf94:	18 82       	st	Y, r1
    bf96:	c1 58       	subi	r28, 0x81	; 129
    bf98:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2725
  remote_tds_get_complete(idx, &active, tmp1);
    bf9a:	ae 01       	movw	r20, r28
    bf9c:	4f 5f       	subi	r20, 0xFF	; 255
    bf9e:	5f 4f       	sbci	r21, 0xFF	; 255
    bfa0:	be 01       	movw	r22, r28
    bfa2:	6f 57       	subi	r22, 0x7F	; 127
    bfa4:	7f 4f       	sbci	r23, 0xFF	; 255
    bfa6:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2726
  if (active == 1)
    bfaa:	cf 57       	subi	r28, 0x7F	; 127
    bfac:	df 4f       	sbci	r29, 0xFF	; 255
    bfae:	88 81       	ld	r24, Y
    bfb0:	c1 58       	subi	r28, 0x81	; 129
    bfb2:	d0 40       	sbci	r29, 0x00	; 0
    bfb4:	81 30       	cpi	r24, 0x01	; 1
    bfb6:	a1 f4       	brne	.+40     	; 0xbfe0 <remote_tds_subscibe_topic(unsigned char)+0x66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2728
  {
    strcpy(tmp2, "/rtds/");
    bfb8:	63 ed       	ldi	r22, 0xD3	; 211
    bfba:	73 e0       	ldi	r23, 0x03	; 3
    bfbc:	ce 01       	movw	r24, r28
    bfbe:	8f 5b       	subi	r24, 0xBF	; 191
    bfc0:	9f 4f       	sbci	r25, 0xFF	; 255
    bfc2:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2729
    strcat(tmp2, tmp1);
    bfc6:	be 01       	movw	r22, r28
    bfc8:	6f 5f       	subi	r22, 0xFF	; 255
    bfca:	7f 4f       	sbci	r23, 0xFF	; 255
    bfcc:	ce 01       	movw	r24, r28
    bfce:	8f 5b       	subi	r24, 0xBF	; 191
    bfd0:	9f 4f       	sbci	r25, 0xFF	; 255
    bfd2:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2730
    mqtt_client.subscribe(tmp2);
    bfd6:	ce 01       	movw	r24, r28
    bfd8:	8f 5b       	subi	r24, 0xBF	; 191
    bfda:	9f 4f       	sbci	r25, 0xFF	; 255
    bfdc:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2732
  }
}
    bfe0:	cf 57       	subi	r28, 0x7F	; 127
    bfe2:	df 4f       	sbci	r29, 0xFF	; 255
    bfe4:	0f b6       	in	r0, 0x3f	; 63
    bfe6:	f8 94       	cli
    bfe8:	de bf       	out	0x3e, r29	; 62
    bfea:	0f be       	out	0x3f, r0	; 63
    bfec:	cd bf       	out	0x3d, r28	; 61
    bfee:	df 91       	pop	r29
    bff0:	cf 91       	pop	r28
    bff2:	08 95       	ret

0000bff4 <menu_rtds_create_name(unsigned char, unsigned char)>:
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5368

}


void menu_rtds_create_name(uint8_t args1, uint8_t args2)
{
    bff4:	1f 93       	push	r17
    bff6:	cf 93       	push	r28
    bff8:	df 93       	push	r29
    bffa:	cd b7       	in	r28, 0x3d	; 61
    bffc:	de b7       	in	r29, 0x3e	; 62
    bffe:	62 97       	sbiw	r28, 0x12	; 18
    c000:	0f b6       	in	r0, 0x3f	; 63
    c002:	f8 94       	cli
    c004:	de bf       	out	0x3e, r29	; 62
    c006:	0f be       	out	0x3f, r0	; 63
    c008:	cd bf       	out	0x3d, r28	; 61
display_element_get_string_args():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2342
  dialog_set_string_args = idx;
}

uint8_t display_element_get_string_args(void)
{
  return dialog_set_string_args;
    c00a:	10 91 bd 08 	lds	r17, 0x08BD	; 0x8008bd <dialog_set_string_args>
display_element_get_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2347
}

void display_element_get_string(char *str)
{
  strcpy(str, dialog_set_string);
    c00e:	6d ea       	ldi	r22, 0xAD	; 173
    c010:	78 e0       	ldi	r23, 0x08	; 8
    c012:	ce 01       	movw	r24, r28
    c014:	01 96       	adiw	r24, 0x01	; 1
    c016:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z21menu_rtds_create_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5374
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active = 1;
  uint8_t idx = display_element_get_string_args();
  display_element_get_string(name);
  //printf("create %s, %d\n", name, idx);
  if (strlen(name) > 0)
    c01a:	89 81       	ldd	r24, Y+1	; 0x01
    c01c:	88 23       	and	r24, r24
    c01e:	81 f0       	breq	.+32     	; 0xc040 <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5375
    if (remote_tds_name_exist(name) == 255)
    c020:	ce 01       	movw	r24, r28
    c022:	01 96       	adiw	r24, 0x01	; 1
    c024:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <remote_tds_name_exist(char*)>
    c028:	8f 3f       	cpi	r24, 0xFF	; 255
    c02a:	51 f4       	brne	.+20     	; 0xc040 <menu_rtds_create_name(unsigned char, unsigned char)+0x4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5377
    {
      remote_tds_set_complete(idx, active, name);
    c02c:	ae 01       	movw	r20, r28
    c02e:	4f 5f       	subi	r20, 0xFF	; 255
    c030:	5f 4f       	sbci	r21, 0xFF	; 255
    c032:	61 e0       	ldi	r22, 0x01	; 1
    c034:	81 2f       	mov	r24, r17
    c036:	0e 94 1c 53 	call	0xa638	; 0xa638 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5378
      remote_tds_subscibe_topic(idx);
    c03a:	81 2f       	mov	r24, r17
    c03c:	0e 94 bd 5f 	call	0xbf7a	; 0xbf7a <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5380
    }
}
    c040:	62 96       	adiw	r28, 0x12	; 18
    c042:	0f b6       	in	r0, 0x3f	; 63
    c044:	f8 94       	cli
    c046:	de bf       	out	0x3e, r29	; 62
    c048:	0f be       	out	0x3f, r0	; 63
    c04a:	cd bf       	out	0x3d, r28	; 61
    c04c:	df 91       	pop	r29
    c04e:	cf 91       	pop	r28
    c050:	1f 91       	pop	r17
    c052:	08 95       	ret

0000c054 <click_rtds_subscribe(unsigned char, unsigned char)>:
_Z20click_rtds_subscribehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5265
  remote_tds_clear(args2);
  MenuHistoryPrevMenu();
}
////
void click_rtds_subscribe(uint8_t args1, uint8_t idx)
{
    c054:	86 2f       	mov	r24, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5267
  //printf("prihlasuji %d %d\n", args1, idx);
  remote_tds_subscibe_topic(idx);
    c056:	0c 94 bd 5f 	jmp	0xbf7a	; 0xbf7a <remote_tds_subscibe_topic(unsigned char)>

0000c05a <mqtt_callback(char*, unsigned char*, unsigned int)>:
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2908
   topic - ukazatel na nazev topicu
   payload - ukazatel na pole prichozich dat
   length - pocet prichozich dat
*/
void mqtt_callback(char* topic, byte * payload, unsigned int length)
{
    c05a:	2f 92       	push	r2
    c05c:	3f 92       	push	r3
    c05e:	4f 92       	push	r4
    c060:	5f 92       	push	r5
    c062:	6f 92       	push	r6
    c064:	7f 92       	push	r7
    c066:	8f 92       	push	r8
    c068:	9f 92       	push	r9
    c06a:	af 92       	push	r10
    c06c:	bf 92       	push	r11
    c06e:	cf 92       	push	r12
    c070:	df 92       	push	r13
    c072:	ef 92       	push	r14
    c074:	ff 92       	push	r15
    c076:	0f 93       	push	r16
    c078:	1f 93       	push	r17
    c07a:	cf 93       	push	r28
    c07c:	df 93       	push	r29
    c07e:	cd b7       	in	r28, 0x3d	; 61
    c080:	de b7       	in	r29, 0x3e	; 62
    c082:	cc 52       	subi	r28, 0x2C	; 44
    c084:	d1 40       	sbci	r29, 0x01	; 1
    c086:	0f b6       	in	r0, 0x3f	; 63
    c088:	f8 94       	cli
    c08a:	de bf       	out	0x3e, r29	; 62
    c08c:	0f be       	out	0x3f, r0	; 63
    c08e:	cd bf       	out	0x3d, r28	; 61
    c090:	4c 01       	movw	r8, r24
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    c092:	1b 82       	std	Y+3, r1	; 0x03
    c094:	8a ed       	ldi	r24, 0xDA	; 218
    c096:	93 e0       	ldi	r25, 0x03	; 3
    c098:	9d 83       	std	Y+5, r25	; 0x05
    c09a:	8c 83       	std	Y+4, r24	; 0x04
    c09c:	89 e3       	ldi	r24, 0x39	; 57
    c09e:	95 e0       	ldi	r25, 0x05	; 5
    c0a0:	9f 83       	std	Y+7, r25	; 0x07
    c0a2:	8e 83       	std	Y+6, r24	; 0x06
    c0a4:	18 86       	std	Y+8, r1	; 0x08
    c0a6:	19 86       	std	Y+9, r1	; 0x09
    c0a8:	1a 86       	std	Y+10, r1	; 0x0a
    c0aa:	1b 86       	std	Y+11, r1	; 0x0b
    c0ac:	80 e6       	ldi	r24, 0x60	; 96
    c0ae:	9a ee       	ldi	r25, 0xEA	; 234
    c0b0:	a0 e0       	ldi	r26, 0x00	; 0
    c0b2:	b0 e0       	ldi	r27, 0x00	; 0
    c0b4:	8c 87       	std	Y+12, r24	; 0x0c
    c0b6:	9d 87       	std	Y+13, r25	; 0x0d
    c0b8:	ae 87       	std	Y+14, r26	; 0x0e
    c0ba:	bf 87       	std	Y+15, r27	; 0x0f
    c0bc:	18 8a       	std	Y+16, r1	; 0x10
    c0be:	19 8a       	std	Y+17, r1	; 0x11
    c0c0:	1a 8a       	std	Y+18, r1	; 0x12
    c0c2:	1b 8a       	std	Y+19, r1	; 0x13
    c0c4:	1c 8a       	std	Y+20, r1	; 0x14
    c0c6:	1d 8a       	std	Y+21, r1	; 0x15
    c0c8:	1e 8a       	std	Y+22, r1	; 0x16
    c0ca:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    c0cc:	8b e2       	ldi	r24, 0x2B	; 43
    c0ce:	90 e1       	ldi	r25, 0x10	; 16
    c0d0:	9a 83       	std	Y+2, r25	; 0x02
    c0d2:	89 83       	std	Y+1, r24	; 0x01
    c0d4:	e7 ed       	ldi	r30, 0xD7	; 215
    c0d6:	fa e0       	ldi	r31, 0x0A	; 10
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2922
  struct_DDS18s20 tds;
  char *pch;
  uint8_t active;
  NTPClient timeClient(udpClient);

  for (uint8_t j = 0; j < 128; j++) my_payload[j] = 0;
    c0d8:	80 e0       	ldi	r24, 0x00	; 0
    c0da:	11 92       	st	Z+, r1
    c0dc:	8f 5f       	subi	r24, 0xFF	; 255
    c0de:	80 38       	cpi	r24, 0x80	; 128
    c0e0:	e1 f7       	brne	.-8      	; 0xc0da <mqtt_callback(char*, unsigned char*, unsigned int)+0x80>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2924
  ////
  mqtt_receive_message++; /// inkrementuji promenou celkovy pocet prijatych zprav
    c0e2:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_receive_message>
    c0e6:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_receive_message+0x1>
    c0ea:	01 96       	adiw	r24, 0x01	; 1
    c0ec:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <mqtt_receive_message+0x1>
    c0f0:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <mqtt_receive_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2925
  strncpy(my_payload, (char*) payload, length);
    c0f4:	87 ed       	ldi	r24, 0xD7	; 215
    c0f6:	9a e0       	ldi	r25, 0x0A	; 10
    c0f8:	0e 94 2b b7 	call	0x16e56	; 0x16e56 <strncpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2928
  ///
  /// kamarad discovery
  strcpy_P(str1, termbig_subscribe);
    c0fc:	5e 01       	movw	r10, r28
    c0fe:	28 ec       	ldi	r18, 0xC8	; 200
    c100:	a2 0e       	add	r10, r18
    c102:	b1 1c       	adc	r11, r1
    c104:	6e e2       	ldi	r22, 0x2E	; 46
    c106:	72 e3       	ldi	r23, 0x32	; 50
    c108:	c5 01       	movw	r24, r10
    c10a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2929
  if (strcmp(str1, topic) == 0)
    c10e:	b4 01       	movw	r22, r8
    c110:	c5 01       	movw	r24, r10
    c112:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c116:	89 2b       	or	r24, r25
    c118:	49 f4       	brne	.+18     	; 0xc12c <mqtt_callback(char*, unsigned char*, unsigned int)+0xd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2931
  {
    mqtt_process_message++; /// inkrementuji promenou celkovy pocet zpracovanych zprav
    c11a:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c11e:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c122:	01 96       	adiw	r24, 0x01	; 1
    c124:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c128:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2934
    know_mqtt_create_or_update(my_payload, TYPE_TERMBIG);
  }
  strcpy_P(str1, thermctl_subscribe);
    c12c:	65 e4       	ldi	r22, 0x45	; 69
    c12e:	72 e3       	ldi	r23, 0x32	; 50
    c130:	c5 01       	movw	r24, r10
    c132:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2935
  if (strcmp(str1, topic) == 0)
    c136:	b4 01       	movw	r22, r8
    c138:	c5 01       	movw	r24, r10
    c13a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c13e:	89 2b       	or	r24, r25
    c140:	49 f4       	brne	.+18     	; 0xc154 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2937
  {
    mqtt_process_message++;
    c142:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c146:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c14a:	01 96       	adiw	r24, 0x01	; 1
    c14c:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c150:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2943
    know_mqtt_create_or_update(my_payload, TYPE_THERMCTL);
  }
  ///
  /// nastavovani casu
  //// /thermctl-in/global/time/set - nastaveni casu. payload json
  strcpy_P(str1, thermctl_header_in);
    c154:	6c e6       	ldi	r22, 0x6C	; 108
    c156:	72 e3       	ldi	r23, 0x32	; 50
    c158:	c5 01       	movw	r24, r10
    c15a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2944
  strcat_P(str1, global_time_set);
    c15e:	60 e1       	ldi	r22, 0x10	; 16
    c160:	72 e3       	ldi	r23, 0x32	; 50
    c162:	c5 01       	movw	r24, r10
    c164:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2945
  if (strcmp(str1, topic) == 0)
    c168:	b4 01       	movw	r22, r8
    c16a:	c5 01       	movw	r24, r10
    c16c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c170:	89 2b       	or	r24, r25
    c172:	09 f0       	breq	.+2      	; 0xc176 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11c>
    c174:	bb c0       	rjmp	.+374    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2947
  {
    mqtt_process_message++;
    c176:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c17a:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c17e:	01 96       	adiw	r24, 0x01	; 1
    c180:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c184:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:49
// TChar* = char*, const char*, const FlashStringHelper*
template <template <typename, typename> class TDeserializer, typename TDocument,
          typename TChar>
DeserializationError deserialize(TDocument &doc, TChar *input) {
  using namespace Internals;
  return makeDeserializer<TDeserializer>(
    c188:	20 91 89 0c 	lds	r18, 0x0C89	; 0x800c89 <doc>
_ZN11ArduinoJson9Internals23UnsafeCharPointerReaderIcEC2EPKc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
class UnsafeCharPointerReader {
  const TChar* _ptr;

 public:
  explicit UnsafeCharPointerReader(const TChar* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const TChar*>("")) {}
    c18c:	87 ed       	ldi	r24, 0xD7	; 215
    c18e:	9a e0       	ldi	r25, 0x0A	; 10
    c190:	89 2b       	or	r24, r25
    c192:	09 f0       	breq	.+2      	; 0xc196 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13c>
    c194:	3a c2       	rjmp	.+1140   	; 0xc60a <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b0>
_Z13mqtt_callbackPcPhj():
    c196:	82 ef       	ldi	r24, 0xF2	; 242
    c198:	92 e0       	ldi	r25, 0x02	; 2
_ZN11ArduinoJson9Internals16JsonDeserializerINS0_23UnsafeCharPointerReaderIcEENS0_11StringMoverIcEEEC2ERNS0_10MemoryPoolES3_S5_h():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/JsonDeserializer.hpp:27
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _memoryPool(&memoryPool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
    c19a:	4a e8       	ldi	r20, 0x8A	; 138
    c19c:	5c e0       	ldi	r21, 0x0C	; 12
    c19e:	2a 96       	adiw	r28, 0x0a	; 10
    c1a0:	5f af       	std	Y+63, r21	; 0x3f
    c1a2:	4e af       	std	Y+62, r20	; 0x3e
    c1a4:	2a 97       	sbiw	r28, 0x0a	; 10
    c1a6:	2c 96       	adiw	r28, 0x0c	; 12
    c1a8:	9f af       	std	Y+63, r25	; 0x3f
    c1aa:	8e af       	std	Y+62, r24	; 0x3e
    c1ac:	2c 97       	sbiw	r28, 0x0c	; 12
    c1ae:	87 ed       	ldi	r24, 0xD7	; 215
    c1b0:	9a e0       	ldi	r25, 0x0A	; 10
    c1b2:	2e 96       	adiw	r28, 0x0e	; 14
    c1b4:	9f af       	std	Y+63, r25	; 0x3f
    c1b6:	8e af       	std	Y+62, r24	; 0x3e
    c1b8:	2e 97       	sbiw	r28, 0x0e	; 14
    c1ba:	2f 96       	adiw	r28, 0x0f	; 15
    c1bc:	2f af       	std	Y+63, r18	; 0x3f
    c1be:	2f 97       	sbiw	r28, 0x0f	; 15
    c1c0:	61 96       	adiw	r28, 0x11	; 17
    c1c2:	1f ae       	std	Y+63, r1	; 0x3f
    c1c4:	61 97       	sbiw	r28, 0x11	; 17
_ZN11ArduinoJson9Internals20StaticMemoryPoolBase5clearEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Memory/StaticMemoryPool.hpp:66

  // Resets the memoryPool.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    _size = 0;
    c1c6:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <doc+0x8>
    c1ca:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <doc+0x7>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c1ce:	82 e9       	ldi	r24, 0x92	; 146
    c1d0:	9d e0       	ldi	r25, 0x0D	; 13
    c1d2:	89 2b       	or	r24, r25
    c1d4:	09 f4       	brne	.+2      	; 0xc1d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x17e>
    c1d6:	1c c2       	rjmp	.+1080   	; 0xc610 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5b6>
_ZN11ArduinoJson9Internals15JsonVariantData7setNullEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:66
    content.asRaw.data = data;
    content.asRaw.size = size;
  }

  void setNull() {
    type = JSON_NULL;
    c1d8:	10 92 93 0d 	sts	0x0D93, r1	; 0x800d93 <doc+0x10a>
    c1dc:	10 92 92 0d 	sts	0x0D92, r1	; 0x800d92 <doc+0x109>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:96
  _data->setNull();
  return *this;
    c1e0:	ca 01       	movw	r24, r20
    c1e2:	ac 01       	movw	r20, r24
    c1e4:	62 e9       	ldi	r22, 0x92	; 146
    c1e6:	7d e0       	ldi	r23, 0x0D	; 13
deserialize():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/deserialize.hpp:52
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), doc.nestingLimit)
      .parse(doc.template to<JsonVariant>());
    c1e8:	ce 01       	movw	r24, r28
    c1ea:	88 5b       	subi	r24, 0xB8	; 184
    c1ec:	9f 4f       	sbci	r25, 0xFF	; 255
    c1ee:	0e 94 65 27 	call	0x4eca	; 0x4eca <ArduinoJson::Internals::JsonDeserializer<ArduinoJson::Internals::UnsafeCharPointerReader<char>, ArduinoJson::Internals::StringMover<char> >::parse(ArduinoJson::JsonVariant)>
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
inline typename Internals::enable_if<
    Internals::is_same<typename Internals::remove_const<T>::type,
                       JsonObject>::value,
    T>::type
JsonVariant::as() const {
  return _data ? JsonObject(_memoryPool, _data->asObject()) : JsonObject();
    c1f2:	82 e9       	ldi	r24, 0x92	; 146
    c1f4:	9d e0       	ldi	r25, 0x0D	; 13
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
  friend class JsonVariant;

 public:
  typedef JsonObjectIterator iterator;

  FORCE_INLINE JsonObject() : _memoryPool(0), _data(0) {}
    c1f6:	02 e9       	ldi	r16, 0x92	; 146
    c1f8:	1d e0       	ldi	r17, 0x0D	; 13
_ZNK11ArduinoJson11JsonVariant2asINS_10JsonObjectEEENS_9Internals9enable_ifIXsrNS3_7is_sameINS3_12remove_constIT_E4typeES2_EE5valueES7_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:71
    c1fa:	89 2b       	or	r24, r25
    c1fc:	51 f0       	breq	.+20     	; 0xc212 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:88
  JsonArrayData *asArray() {
    return type == JSON_ARRAY ? &content.asArray : 0;
  }

  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
    c1fe:	80 91 92 0d 	lds	r24, 0x0D92	; 0x800d92 <doc+0x109>
    c202:	90 91 93 0d 	lds	r25, 0x0D93	; 0x800d93 <doc+0x10a>
_Z13mqtt_callbackPcPhj():
    c206:	04 e9       	ldi	r16, 0x94	; 148
    c208:	1d e0       	ldi	r17, 0x0D	; 13
_ZN11ArduinoJson9Internals15JsonVariantData8asObjectEv():
    c20a:	09 97       	sbiw	r24, 0x09	; 9
    c20c:	11 f0       	breq	.+4      	; 0xc212 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b8>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:22
    c20e:	10 e0       	ldi	r17, 0x00	; 0
    c210:	00 e0       	ldi	r16, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    }
    return slot;
  }
  template <typename TStringRef>
  FORCE_INLINE Internals::Slot* findSlot(TStringRef key) const {
    return const_cast<JsonObject*>(this)->findSlot<TStringRef>(key);
    c212:	67 ee       	ldi	r22, 0xE7	; 231
    c214:	73 e0       	ldi	r23, 0x03	; 3
    c216:	c8 01       	movw	r24, r16
    c218:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    c21c:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    deserializeJson(doc, my_payload);
    JsonObject root = doc.as<JsonObject>();
    if (root.containsKey("year") && root.containsKey("month") && root.containsKey("month") && root.containsKey("hour") && root.containsKey("minute") && root.containsKey("second"))
    c21e:	89 2b       	or	r24, r25
    c220:	09 f4       	brne	.+2      	; 0xc224 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ca>
    c222:	64 c0       	rjmp	.+200    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c224:	6c ee       	ldi	r22, 0xEC	; 236
    c226:	73 e0       	ldi	r23, 0x03	; 3
    c228:	c8 01       	movw	r24, r16
    c22a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    c22e:	2c 01       	movw	r4, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    c230:	89 2b       	or	r24, r25
    c232:	09 f4       	brne	.+2      	; 0xc236 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1dc>
    c234:	5b c0       	rjmp	.+182    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c236:	62 ef       	ldi	r22, 0xF2	; 242
    c238:	73 e0       	ldi	r23, 0x03	; 3
    c23a:	c8 01       	movw	r24, r16
    c23c:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    c240:	3c 01       	movw	r6, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    c242:	89 2b       	or	r24, r25
    c244:	09 f4       	brne	.+2      	; 0xc248 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ee>
    c246:	52 c0       	rjmp	.+164    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c248:	67 ef       	ldi	r22, 0xF7	; 247
    c24a:	73 e0       	ldi	r23, 0x03	; 3
    c24c:	c8 01       	movw	r24, r16
    c24e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
    c252:	6c 01       	movw	r12, r24
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    c254:	89 2b       	or	r24, r25
    c256:	09 f4       	brne	.+2      	; 0xc25a <mqtt_callback(char*, unsigned char*, unsigned int)+0x200>
    c258:	49 c0       	rjmp	.+146    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c25a:	6e ef       	ldi	r22, 0xFE	; 254
    c25c:	73 e0       	ldi	r23, 0x03	; 3
    c25e:	c8 01       	movw	r24, r16
    c260:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2950
    c264:	00 97       	sbiw	r24, 0x00	; 0
    c266:	09 f4       	brne	.+2      	; 0xc26a <mqtt_callback(char*, unsigned char*, unsigned int)+0x210>
    c268:	41 c0       	rjmp	.+130    	; 0xc2ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x292>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
  // unsigned long as<unsigned long>() const;
  template <typename T>
  FORCE_INLINE const typename Internals::enable_if<
      Internals::is_integral<T>::value, T>::type
  as() const {
    return _data ? _data->asInteger<T>() : T();
    c26a:	0e 94 c6 9c 	call	0x1398c	; 0x1398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c26e:	38 2e       	mov	r3, r24
    c270:	c6 01       	movw	r24, r12
    c272:	0e 94 c6 9c 	call	0x1398c	; 0x1398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c276:	d8 2e       	mov	r13, r24
    c278:	c3 01       	movw	r24, r6
    c27a:	0e 94 c6 9c 	call	0x1398c	; 0x1398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c27e:	c8 2e       	mov	r12, r24
_ZNK11ArduinoJson10JsonObject8findSlotIPKcEEPNS_9Internals4SlotET_():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:305
    c280:	65 e0       	ldi	r22, 0x05	; 5
    c282:	74 e0       	ldi	r23, 0x04	; 4
    c284:	c8 01       	movw	r24, r16
    c286:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <ArduinoJson::Internals::Slot* ArduinoJson::JsonObject::findSlot<char const*>(char const*) [clone .isra.35]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonObject.hpp:312

  template <typename TStringRef, typename TValue>
  FORCE_INLINE typename Internals::JsonVariantAs<TValue>::type get_impl(
      TStringRef key) const {
    Internals::Slot* slot = findSlot<TStringRef>(key);
    return slot ? JsonVariant(_memoryPool, &slot->value).as<TValue>()
    c28a:	10 e0       	ldi	r17, 0x00	; 0
_ZNK11ArduinoJson10JsonObject8get_implIPKchEENS_9Internals13JsonVariantAsIT0_E4typeET_():
    c28c:	00 97       	sbiw	r24, 0x00	; 0
    c28e:	19 f0       	breq	.+6      	; 0xc296 <mqtt_callback(char*, unsigned char*, unsigned int)+0x23c>
_ZNK11ArduinoJson11JsonVariant2asIhEEKNS_9Internals9enable_ifIXsrNS2_11is_integralIT_EE5valueES5_E4typeEv():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariant.hpp:182
    c290:	0e 94 c6 9c 	call	0x1398c	; 0x1398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c294:	18 2f       	mov	r17, r24
    c296:	c2 01       	movw	r24, r4
    c298:	0e 94 c6 9c 	call	0x1398c	; 0x1398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>
    c29c:	08 2f       	mov	r16, r24
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
  }

  template <typename T>
  T asInteger() const {
    switch (type) {
    c29e:	d7 01       	movw	r26, r14
    c2a0:	8d 91       	ld	r24, X+
    c2a2:	9c 91       	ld	r25, X
    c2a4:	11 97       	sbiw	r26, 0x01	; 1
    c2a6:	87 30       	cpi	r24, 0x07	; 7
    c2a8:	91 05       	cpc	r25, r1
    c2aa:	08 f0       	brcs	.+2      	; 0xc2ae <mqtt_callback(char*, unsigned char*, unsigned int)+0x254>
    c2ac:	b4 c1       	rjmp	.+872    	; 0xc616 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5bc>
    c2ae:	85 30       	cpi	r24, 0x05	; 5
    c2b0:	91 05       	cpc	r25, r1
    c2b2:	08 f0       	brcs	.+2      	; 0xc2b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x25c>
    c2b4:	be c1       	rjmp	.+892    	; 0xc632 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5d8>
    c2b6:	03 97       	sbiw	r24, 0x03	; 3
    c2b8:	08 f0       	brcs	.+2      	; 0xc2bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
    c2ba:	cd c1       	rjmp	.+922    	; 0xc656 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5fc>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c2bc:	60 e0       	ldi	r22, 0x00	; 0
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    c2be:	29 96       	adiw	r28, 0x09	; 9
    c2c0:	6f af       	std	Y+63, r22	; 0x3f
    c2c2:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    c2c4:	2a 96       	adiw	r28, 0x0a	; 10
    c2c6:	0f af       	std	Y+63, r16	; 0x3f
    c2c8:	2a 97       	sbiw	r28, 0x0a	; 10
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    c2ca:	2b 96       	adiw	r28, 0x0b	; 11
    c2cc:	1f af       	std	Y+63, r17	; 0x3f
    c2ce:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    c2d0:	2c 96       	adiw	r28, 0x0c	; 12
    c2d2:	cf ae       	std	Y+63, r12	; 0x3f
    c2d4:	2c 97       	sbiw	r28, 0x0c	; 12
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    c2d6:	2d 96       	adiw	r28, 0x0d	; 13
    c2d8:	df ae       	std	Y+63, r13	; 0x3f
    c2da:	2d 97       	sbiw	r28, 0x0d	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    c2dc:	2e 96       	adiw	r28, 0x0e	; 14
    c2de:	3f ae       	std	Y+63, r3	; 0x3f
    c2e0:	2e 97       	sbiw	r28, 0x0e	; 14
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2951
      rtc.adjust(DateTime(root["year"], root["month"], root["day"], root["hour"], root["minute"], root["second"]));
    c2e2:	ce 01       	movw	r24, r28
    c2e4:	88 5b       	subi	r24, 0xB8	; 184
    c2e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c2e8:	0e 94 10 93 	call	0x12620	; 0x12620 <RTC_DS1307::adjust(DateTime const&)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2954
  }
  //// /thermctl-in/global/time/ntp - jednorazova aktualizace casu z ntp serveru
  strcpy_P(str1, thermctl_header_in);
    c2ec:	6c e6       	ldi	r22, 0x6C	; 108
    c2ee:	72 e3       	ldi	r23, 0x32	; 50
    c2f0:	c5 01       	movw	r24, r10
    c2f2:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2955
  strcat_P(str1, global_time_ntp);
    c2f6:	60 e0       	ldi	r22, 0x00	; 0
    c2f8:	72 e3       	ldi	r23, 0x32	; 50
    c2fa:	c5 01       	movw	r24, r10
    c2fc:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2956
  if (strcmp(str1, topic) == 0)
    c300:	b4 01       	movw	r22, r8
    c302:	c5 01       	movw	r24, r10
    c304:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c308:	89 2b       	or	r24, r25
    c30a:	09 f0       	breq	.+2      	; 0xc30e <mqtt_callback(char*, unsigned char*, unsigned int)+0x2b4>
    c30c:	e5 c0       	rjmp	.+458    	; 0xc4d8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2958
  {
    mqtt_process_message++;
    c30e:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c312:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c316:	01 96       	adiw	r24, 0x01	; 1
    c318:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c31c:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
    c320:	81 e0       	ldi	r24, 0x01	; 1
    c322:	90 e0       	ldi	r25, 0x00	; 0
    c324:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    c328:	18 2f       	mov	r17, r24
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:402
//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    c32a:	7e 01       	movw	r14, r28
    c32c:	28 e4       	ldi	r18, 0x48	; 72
    c32e:	e2 0e       	add	r14, r18
    c330:	f1 1c       	adc	r15, r1
    c332:	d7 01       	movw	r26, r14
    c334:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:403
  createString(tmp1, '.', device.ntp_server, 4, 10);
    c336:	0a e0       	ldi	r16, 0x0A	; 10
    c338:	24 e0       	ldi	r18, 0x04	; 4
    c33a:	49 e6       	ldi	r20, 0x69	; 105
    c33c:	5c e0       	ldi	r21, 0x0C	; 12
    c33e:	6e e2       	ldi	r22, 0x2E	; 46
    c340:	c7 01       	movw	r24, r14
    c342:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:404
  timeClient->begin();
    c346:	ce 01       	movw	r24, r28
    c348:	01 96       	adiw	r24, 0x01	; 1
    c34a:	0e 94 f4 8e 	call	0x11de8	; 0x11de8 <NTPClient::begin()>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:405
  timeClient->setTimeOffset(3600 * offset);
    c34e:	20 e1       	ldi	r18, 0x10	; 16
    c350:	3e e0       	ldi	r19, 0x0E	; 14
    c352:	12 9f       	mul	r17, r18
    c354:	c0 01       	movw	r24, r0
    c356:	13 9f       	mul	r17, r19
    c358:	90 0d       	add	r25, r0
    c35a:	11 24       	eor	r1, r1
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    c35c:	09 2e       	mov	r0, r25
    c35e:	00 0c       	add	r0, r0
    c360:	aa 0b       	sbc	r26, r26
    c362:	bb 0b       	sbc	r27, r27
    c364:	88 87       	std	Y+8, r24	; 0x08
    c366:	99 87       	std	Y+9, r25	; 0x09
    c368:	aa 87       	std	Y+10, r26	; 0x0a
    c36a:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    c36c:	fd 82       	std	Y+5, r15	; 0x05
    c36e:	ec 82       	std	Y+4, r14	; 0x04
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    c370:	ce 01       	movw	r24, r28
    c372:	01 96       	adiw	r24, 0x01	; 1
    c374:	0e 94 0b 8f 	call	0x11e16	; 0x11e16 <NTPClient::update()>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:401

//////////////////////////////////////////////////////////////////////
uint8_t ntp_update(NTPClient *timeClient, RTC_DS1307 *rtc, uint8_t offset)
{
  char tmp1[20];
  uint8_t ret = 0;
    c378:	10 e0       	ldi	r17, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:407
  tmp1[0] = 0;
  createString(tmp1, '.', device.ntp_server, 4, 10);
  timeClient->begin();
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
    c37a:	88 23       	and	r24, r24
    c37c:	09 f4       	brne	.+2      	; 0xc380 <mqtt_callback(char*, unsigned char*, unsigned int)+0x326>
    c37e:	9a c0       	rjmp	.+308    	; 0xc4b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x45a>
getSeconds():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:148
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
}
int NTPClient::getSeconds() const {
  return (this->getEpochTime() % 60);
    c380:	ce 01       	movw	r24, r28
    c382:	01 96       	adiw	r24, 0x01	; 1
    c384:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
    c388:	2c e3       	ldi	r18, 0x3C	; 60
    c38a:	c2 2e       	mov	r12, r18
    c38c:	d1 2c       	mov	r13, r1
    c38e:	e1 2c       	mov	r14, r1
    c390:	f1 2c       	mov	r15, r1
    c392:	a7 01       	movw	r20, r14
    c394:	96 01       	movw	r18, r12
    c396:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    c39a:	36 2e       	mov	r3, r22
getMinutes():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:145
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
}
int NTPClient::getMinutes() const {
  return ((this->getEpochTime() % 3600) / 60);
    c39c:	ce 01       	movw	r24, r28
    c39e:	01 96       	adiw	r24, 0x01	; 1
    c3a0:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
    c3a4:	30 e1       	ldi	r19, 0x10	; 16
    c3a6:	43 2e       	mov	r4, r19
    c3a8:	3e e0       	ldi	r19, 0x0E	; 14
    c3aa:	53 2e       	mov	r5, r19
    c3ac:	61 2c       	mov	r6, r1
    c3ae:	71 2c       	mov	r7, r1
    c3b0:	a3 01       	movw	r20, r6
    c3b2:	92 01       	movw	r18, r4
    c3b4:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    c3b8:	a7 01       	movw	r20, r14
    c3ba:	96 01       	movw	r18, r12
    c3bc:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    c3c0:	e2 2e       	mov	r14, r18
getHours():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:142

int NTPClient::getDay() const {
  return (((this->getEpochTime()  / 86400L) + 4 ) % 7); //0 is Sunday
}
int NTPClient::getHours() const {
  return ((this->getEpochTime()  % 86400L) / 3600);
    c3c2:	ce 01       	movw	r24, r28
    c3c4:	01 96       	adiw	r24, 0x01	; 1
    c3c6:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
    c3ca:	20 e8       	ldi	r18, 0x80	; 128
    c3cc:	31 e5       	ldi	r19, 0x51	; 81
    c3ce:	41 e0       	ldi	r20, 0x01	; 1
    c3d0:	50 e0       	ldi	r21, 0x00	; 0
    c3d2:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    c3d6:	a3 01       	movw	r20, r6
    c3d8:	92 01       	movw	r18, r4
    c3da:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    c3de:	d2 2e       	mov	r13, r18
getDate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:130

  return month;
}

int NTPClient::getDate() const {
  time_t rawtime = this->getEpochTime();
    c3e0:	ce 01       	movw	r24, r28
    c3e2:	01 96       	adiw	r24, 0x01	; 1
    c3e4:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
    c3e8:	c8 57       	subi	r28, 0x78	; 120
    c3ea:	df 4f       	sbci	r29, 0xFF	; 255
    c3ec:	68 83       	st	Y, r22
    c3ee:	79 83       	std	Y+1, r23	; 0x01
    c3f0:	8a 83       	std	Y+2, r24	; 0x02
    c3f2:	9b 83       	std	Y+3, r25	; 0x03
    c3f4:	c8 58       	subi	r28, 0x88	; 136
    c3f6:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:132
  struct tm * ti;
  ti = localtime (&rawtime);
    c3f8:	ce 01       	movw	r24, r28
    c3fa:	88 57       	subi	r24, 0x78	; 120
    c3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    c3fe:	0e 94 96 9b 	call	0x1372c	; 0x1372c <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:133
  int month = (ti->tm_mday) < 10 ? 0 + (ti->tm_mday) : (ti->tm_mday);
    c402:	fc 01       	movw	r30, r24
    c404:	c3 80       	ldd	r12, Z+3	; 0x03
getMonth():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:121

  return year;
}

int NTPClient::getMonth() const {
  time_t rawtime = this->getEpochTime();
    c406:	ce 01       	movw	r24, r28
    c408:	01 96       	adiw	r24, 0x01	; 1
    c40a:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
    c40e:	c8 57       	subi	r28, 0x78	; 120
    c410:	df 4f       	sbci	r29, 0xFF	; 255
    c412:	68 83       	st	Y, r22
    c414:	79 83       	std	Y+1, r23	; 0x01
    c416:	8a 83       	std	Y+2, r24	; 0x02
    c418:	9b 83       	std	Y+3, r25	; 0x03
    c41a:	c8 58       	subi	r28, 0x88	; 136
    c41c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:123
  struct tm * ti;
  ti = localtime (&rawtime);
    c41e:	ce 01       	movw	r24, r28
    c420:	88 57       	subi	r24, 0x78	; 120
    c422:	9f 4f       	sbci	r25, 0xFF	; 255
    c424:	0e 94 96 9b 	call	0x1372c	; 0x1372c <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:124
  int month = (ti->tm_mon + 1) < 10 ? 0 + (ti->tm_mon + 1) : (ti->tm_mon + 1);
    c428:	dc 01       	movw	r26, r24
    c42a:	15 96       	adiw	r26, 0x05	; 5
    c42c:	0c 91       	ld	r16, X
    c42e:	00 2e       	mov	r0, r16
    c430:	00 0c       	add	r0, r0
    c432:	11 0b       	sbc	r17, r17
    c434:	0f 5f       	subi	r16, 0xFF	; 255
    c436:	1f 4f       	sbci	r17, 0xFF	; 255
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    c438:	ce 01       	movw	r24, r28
    c43a:	01 96       	adiw	r24, 0x01	; 1
    c43c:	0e 94 d8 8e 	call	0x11db0	; 0x11db0 <NTPClient::getYear() const>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c440:	80 3d       	cpi	r24, 0xD0	; 208
    c442:	b7 e0       	ldi	r27, 0x07	; 7
    c444:	9b 07       	cpc	r25, r27
    c446:	10 f0       	brcs	.+4      	; 0xc44c <mqtt_callback(char*, unsigned char*, unsigned int)+0x3f2>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c448:	80 5d       	subi	r24, 0xD0	; 208
    c44a:	97 40       	sbci	r25, 0x07	; 7
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
    yOff = year;
    c44c:	c8 57       	subi	r28, 0x78	; 120
    c44e:	df 4f       	sbci	r29, 0xFF	; 255
    c450:	88 83       	st	Y, r24
    c452:	c8 58       	subi	r28, 0x88	; 136
    c454:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    c456:	c7 57       	subi	r28, 0x77	; 119
    c458:	df 4f       	sbci	r29, 0xFF	; 255
    c45a:	08 83       	st	Y, r16
    c45c:	c9 58       	subi	r28, 0x89	; 137
    c45e:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    c460:	c6 57       	subi	r28, 0x76	; 118
    c462:	df 4f       	sbci	r29, 0xFF	; 255
    c464:	c8 82       	st	Y, r12
    c466:	ca 58       	subi	r28, 0x8A	; 138
    c468:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    c46a:	c5 57       	subi	r28, 0x75	; 117
    c46c:	df 4f       	sbci	r29, 0xFF	; 255
    c46e:	d8 82       	st	Y, r13
    c470:	cb 58       	subi	r28, 0x8B	; 139
    c472:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    c474:	c4 57       	subi	r28, 0x74	; 116
    c476:	df 4f       	sbci	r29, 0xFF	; 255
    c478:	e8 82       	st	Y, r14
    c47a:	cc 58       	subi	r28, 0x8C	; 140
    c47c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    c47e:	c3 57       	subi	r28, 0x73	; 115
    c480:	df 4f       	sbci	r29, 0xFF	; 255
    c482:	38 82       	st	Y, r3
    c484:	cd 58       	subi	r28, 0x8D	; 141
    c486:	d0 40       	sbci	r29, 0x00	; 0
ntp_update():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:409
    c488:	ce 01       	movw	r24, r28
    c48a:	88 57       	subi	r24, 0x78	; 120
    c48c:	9f 4f       	sbci	r25, 0xFF	; 255
    c48e:	0e 94 10 93 	call	0x12620	; 0x12620 <RTC_DS1307::adjust(DateTime const&)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:411
    ret = 1;
    printf("y%d\n", timeClient->getYear());
    c492:	ce 01       	movw	r24, r28
    c494:	01 96       	adiw	r24, 0x01	; 1
    c496:	0e 94 d8 8e 	call	0x11db0	; 0x11db0 <NTPClient::getYear() const>
    c49a:	9f 93       	push	r25
    c49c:	8f 93       	push	r24
    c49e:	89 e0       	ldi	r24, 0x09	; 9
    c4a0:	94 e0       	ldi	r25, 0x04	; 4
    c4a2:	9f 93       	push	r25
    c4a4:	8f 93       	push	r24
    c4a6:	0e 94 3a b7 	call	0x16e74	; 0x16e74 <printf>
    c4aa:	0f 90       	pop	r0
    c4ac:	0f 90       	pop	r0
    c4ae:	0f 90       	pop	r0
    c4b0:	0f 90       	pop	r0
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:410
  timeClient->setTimeOffset(3600 * offset);
  timeClient->setPoolServerName(tmp1);
  if (timeClient->update() == true)
  {
    rtc->adjust(DateTime((uint16_t)timeClient->getYear(), timeClient->getMonth() , timeClient->getDate(), timeClient->getHours(), timeClient->getMinutes(), timeClient->getSeconds()));
    ret = 1;
    c4b2:	11 e0       	ldi	r17, 0x01	; 1
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    c4b4:	89 81       	ldd	r24, Y+1	; 0x01
    c4b6:	9a 81       	ldd	r25, Y+2	; 0x02
    c4b8:	dc 01       	movw	r26, r24
    c4ba:	ed 91       	ld	r30, X+
    c4bc:	fc 91       	ld	r31, X
    c4be:	02 88       	ldd	r0, Z+18	; 0x12
    c4c0:	f3 89       	ldd	r31, Z+19	; 0x13
    c4c2:	e0 2d       	mov	r30, r0
    c4c4:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    c4c6:	1b 82       	std	Y+3, r1	; 0x03
    c4c8:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2959
  strcpy_P(str1, thermctl_header_in);
  strcat_P(str1, global_time_ntp);
  if (strcmp(str1, topic) == 0)
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
    c4cc:	11 30       	cpi	r17, 0x01	; 1
    c4ce:	09 f0       	breq	.+2      	; 0xc4d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x478>
    c4d0:	ef c0       	rjmp	.+478    	; 0xc6b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2960
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c4d2:	8d 7f       	andi	r24, 0xFD	; 253
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c4d4:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <selftest_data>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2965
  }
  //// /termbig-in/global/time/offset - nastaveni offsetu casu
  strcpy_P(str1, thermctl_header_in);
    c4d8:	6c e6       	ldi	r22, 0x6C	; 108
    c4da:	72 e3       	ldi	r23, 0x32	; 50
    c4dc:	c5 01       	movw	r24, r10
    c4de:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2966
  strcat_P(str1, global_time_offset);
    c4e2:	69 ee       	ldi	r22, 0xE9	; 233
    c4e4:	71 e3       	ldi	r23, 0x31	; 49
    c4e6:	c5 01       	movw	r24, r10
    c4e8:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2967
  if (strcmp(str1, topic) == 0)
    c4ec:	b4 01       	movw	r22, r8
    c4ee:	c5 01       	movw	r24, r10
    c4f0:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c4f4:	89 2b       	or	r24, r25
    c4f6:	91 f4       	brne	.+36     	; 0xc51c <mqtt_callback(char*, unsigned char*, unsigned int)+0x4c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2969
  {
    mqtt_process_message++;
    c4f8:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c4fc:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c500:	01 96       	adiw	r24, 0x01	; 1
    c502:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c506:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2970
    time_set_offset(atoi(my_payload));
    c50a:	87 ed       	ldi	r24, 0xD7	; 215
    c50c:	9a e0       	ldi	r25, 0x0A	; 10
    c50e:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    c512:	68 2f       	mov	r22, r24
    c514:	81 e0       	ldi	r24, 0x01	; 1
    c516:	90 e0       	ldi	r25, 0x00	; 0
    c518:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2974
    mqtt_process_message++;
    time_set_offset(atoi(my_payload));
  }
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
    c51c:	6c e6       	ldi	r22, 0x6C	; 108
    c51e:	72 e3       	ldi	r23, 0x32	; 50
    c520:	c5 01       	movw	r24, r10
    c522:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2975
  strcat(str1, device.nazev);
    c526:	61 e3       	ldi	r22, 0x31	; 49
    c528:	7c e0       	ldi	r23, 0x0C	; 12
    c52a:	c5 01       	movw	r24, r10
    c52c:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2976
  strcat(str1, "/tds/associate");
    c530:	6e e0       	ldi	r22, 0x0E	; 14
    c532:	74 e0       	ldi	r23, 0x04	; 4
    c534:	c5 01       	movw	r24, r10
    c536:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
  if (strcmp(str1, topic) == 0)
    c53a:	b4 01       	movw	r22, r8
    c53c:	c5 01       	movw	r24, r10
    c53e:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2915
  const char tmp1[16];
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
    c542:	71 2c       	mov	r7, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2977
  /// nastavovani vlastnosti TDS
  //// /thermctl-in/XXXX/tds/associate - asociace do tds si pridam mac 1wire - odpoved je pod jakem ID to mam ulozeno
  strcpy_P(str1, thermctl_header_in);
  strcat(str1, device.nazev);
  strcat(str1, "/tds/associate");
  if (strcmp(str1, topic) == 0)
    c544:	89 2b       	or	r24, r25
    c546:	b1 f4       	brne	.+44     	; 0xc574 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2979
  {
    mqtt_process_message++;
    c548:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c54c:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c550:	01 96       	adiw	r24, 0x01	; 1
    c552:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c556:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2980
    id = atoi(my_payload);
    c55a:	87 ed       	ldi	r24, 0xD7	; 215
    c55c:	9a e0       	ldi	r25, 0x0A	; 10
    c55e:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c562:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2981
    if (tds_associate(id) == 255)
    c564:	0e 94 5e 56 	call	0xacbc	; 0xacbc <tds_associate(unsigned char)>
    c568:	8f 3f       	cpi	r24, 0xFF	; 255
    c56a:	21 f4       	brne	.+8      	; 0xc574 <mqtt_callback(char*, unsigned char*, unsigned int)+0x51a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2982
      log_error(&mqtt_client, "tds/associate full or bad id");
    c56c:	8d e1       	ldi	r24, 0x1D	; 29
    c56e:	94 e0       	ldi	r25, 0x04	; 4
    c570:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2988
  }
  ///
  //// /thermctl-in/XXXX/tds/set/IDcko/name - nastavi cidlu nazev
  //// /thermctl-in/XXXX/tds/set/IDcko/offset
  //// /thermctl-in/XXXX/tds/set/IDcko/period
  strcpy_P(str1, thermctl_header_in);
    c574:	6c e6       	ldi	r22, 0x6C	; 108
    c576:	72 e3       	ldi	r23, 0x32	; 50
    c578:	c5 01       	movw	r24, r10
    c57a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2989
  strcat(str1, device.nazev);
    c57e:	61 e3       	ldi	r22, 0x31	; 49
    c580:	7c e0       	ldi	r23, 0x0C	; 12
    c582:	c5 01       	movw	r24, r10
    c584:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2990
  strcat(str1, "/tds/set/");
    c588:	6a e3       	ldi	r22, 0x3A	; 58
    c58a:	74 e0       	ldi	r23, 0x04	; 4
    c58c:	c5 01       	movw	r24, r10
    c58e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2991
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c592:	f5 01       	movw	r30, r10
    c594:	01 90       	ld	r0, Z+
    c596:	00 20       	and	r0, r0
    c598:	e9 f7       	brne	.-6      	; 0xc594 <mqtt_callback(char*, unsigned char*, unsigned int)+0x53a>
    c59a:	31 97       	sbiw	r30, 0x01	; 1
    c59c:	af 01       	movw	r20, r30
    c59e:	4a 19       	sub	r20, r10
    c5a0:	5b 09       	sbc	r21, r11
    c5a2:	b4 01       	movw	r22, r8
    c5a4:	c5 01       	movw	r24, r10
    c5a6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    c5aa:	89 2b       	or	r24, r25
    c5ac:	09 f0       	breq	.+2      	; 0xc5b0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x556>
    c5ae:	02 c1       	rjmp	.+516    	; 0xc7b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2993
  {
    mqtt_process_message++;
    c5b0:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c5b4:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c5b8:	01 96       	adiw	r24, 0x01	; 1
    c5ba:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c5be:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c5c2:	f5 01       	movw	r30, r10
    c5c4:	01 90       	ld	r0, Z+
    c5c6:	00 20       	and	r0, r0
    c5c8:	e9 f7       	brne	.-6      	; 0xc5c4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x56a>
    c5ca:	31 97       	sbiw	r30, 0x01	; 1
    c5cc:	ea 19       	sub	r30, r10
    c5ce:	fb 09       	sbc	r31, r11
    c5d0:	9e 2f       	mov	r25, r30
    c5d2:	4e 2f       	mov	r20, r30
    c5d4:	84 2f       	mov	r24, r20
    c5d6:	89 1b       	sub	r24, r25
    c5d8:	24 2f       	mov	r18, r20
    c5da:	30 e0       	ldi	r19, 0x00	; 0
    c5dc:	d4 01       	movw	r26, r8
    c5de:	0d 90       	ld	r0, X+
    c5e0:	00 20       	and	r0, r0
    c5e2:	e9 f7       	brne	.-6      	; 0xc5de <mqtt_callback(char*, unsigned char*, unsigned int)+0x584>
    c5e4:	11 97       	sbiw	r26, 0x01	; 1
    c5e6:	a8 19       	sub	r26, r8
    c5e8:	b9 09       	sbc	r27, r9
    c5ea:	2a 17       	cp	r18, r26
    c5ec:	3b 07       	cpc	r19, r27
    c5ee:	08 f0       	brcs	.+2      	; 0xc5f2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x598>
    c5f0:	61 c0       	rjmp	.+194    	; 0xc6b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x65a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2997
    {
      str1[cnt] = topic[f];
    c5f2:	d5 01       	movw	r26, r10
    c5f4:	a8 0f       	add	r26, r24
    c5f6:	b1 1d       	adc	r27, r1
    c5f8:	28 0d       	add	r18, r8
    c5fa:	39 1d       	adc	r19, r9
    c5fc:	f9 01       	movw	r30, r18
    c5fe:	80 81       	ld	r24, Z
    c600:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2998
      str1[cnt + 1] = 0;
    c602:	11 96       	adiw	r26, 0x01	; 1
    c604:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2995
  strcat(str1, "/tds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c606:	4f 5f       	subi	r20, 0xFF	; 255
    c608:	e5 cf       	rjmp	.-54     	; 0xc5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x57a>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Json/../Deserialization/./CharPointerReader.hpp:16
    c60a:	87 ed       	ldi	r24, 0xD7	; 215
    c60c:	9a e0       	ldi	r25, 0x0A	; 10
    c60e:	c5 cd       	rjmp	.-1142   	; 0xc19a <mqtt_callback(char*, unsigned char*, unsigned int)+0x140>
to():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/JsonVariantImpl.hpp:94

template <typename T>
typename Internals::enable_if<Internals::is_same<T, JsonVariant>::value,
                              JsonVariant>::type
JsonVariant::to() {
  if (!_data) return JsonVariant();
    c610:	82 e9       	ldi	r24, 0x92	; 146
    c612:	9d e0       	ldi	r25, 0x0D	; 13
    c614:	e6 cd       	rjmp	.-1076   	; 0xc1e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x188>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    c616:	87 30       	cpi	r24, 0x07	; 7
    c618:	91 05       	cpc	r25, r1
    c61a:	b1 f0       	breq	.+44     	; 0xc648 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5ee>
    c61c:	0a 97       	sbiw	r24, 0x0a	; 10
    c61e:	09 f0       	breq	.+2      	; 0xc622 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5c8>
    c620:	4d ce       	rjmp	.-870    	; 0xc2bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
    c622:	f7 01       	movw	r30, r14
    c624:	62 81       	ldd	r22, Z+2	; 0x02
    c626:	73 81       	ldd	r23, Z+3	; 0x03
    c628:	84 81       	ldd	r24, Z+4	; 0x04
    c62a:	95 81       	ldd	r25, Z+5	; 0x05
    c62c:	0e 94 c0 b5 	call	0x16b80	; 0x16b80 <__fixunssfsi>
    c630:	03 c0       	rjmp	.+6      	; 0xc638 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
    c632:	f7 01       	movw	r30, r14
    c634:	62 81       	ldd	r22, Z+2	; 0x02
    c636:	73 81       	ldd	r23, Z+3	; 0x03
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:102
    }
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
    c638:	60 3d       	cpi	r22, 0xD0	; 208
    c63a:	f7 e0       	ldi	r31, 0x07	; 7
    c63c:	7f 07       	cpc	r23, r31
    c63e:	08 f4       	brcc	.+2      	; 0xc642 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5e8>
    c640:	3e ce       	rjmp	.-900    	; 0xc2be <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:103
        year -= 2000;
    c642:	60 5d       	subi	r22, 0xD0	; 208
    c644:	77 40       	sbci	r23, 0x07	; 7
    c646:	3b ce       	rjmp	.-906    	; 0xc2be <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
    c648:	12 96       	adiw	r26, 0x02	; 2
    c64a:	6d 91       	ld	r22, X+
    c64c:	7c 91       	ld	r23, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c64e:	71 95       	neg	r23
    c650:	61 95       	neg	r22
    c652:	71 09       	sbc	r23, r1
    c654:	f1 cf       	rjmp	.-30     	; 0xc638 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
asInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
    c656:	12 96       	adiw	r26, 0x02	; 2
    c658:	ed 91       	ld	r30, X+
    c65a:	fc 91       	ld	r31, X
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
    c65c:	30 97       	sbiw	r30, 0x00	; 0
    c65e:	09 f4       	brne	.+2      	; 0xc662 <mqtt_callback(char*, unsigned char*, unsigned int)+0x608>
    c660:	2d ce       	rjmp	.-934    	; 0xc2bc <mqtt_callback(char*, unsigned char*, unsigned int)+0x262>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
    c662:	80 81       	ld	r24, Z
_Z13mqtt_callbackPcPhj():
    c664:	61 e0       	ldi	r22, 0x01	; 1
    c666:	70 e0       	ldi	r23, 0x00	; 0
parseInteger():
    c668:	84 37       	cpi	r24, 0x74	; 116
    c66a:	09 f4       	brne	.+2      	; 0xc66e <mqtt_callback(char*, unsigned char*, unsigned int)+0x614>
    c66c:	28 ce       	rjmp	.-944    	; 0xc2be <mqtt_callback(char*, unsigned char*, unsigned int)+0x264>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
    c66e:	8b 32       	cpi	r24, 0x2B	; 43
    c670:	c9 f0       	breq	.+50     	; 0xc6a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64a>
    c672:	8d 32       	cpi	r24, 0x2D	; 45
    c674:	c1 f4       	brne	.+48     	; 0xc6a6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x64c>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
    c676:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
    c678:	81 e0       	ldi	r24, 0x01	; 1
parseInteger():
    c67a:	70 e0       	ldi	r23, 0x00	; 0
    c67c:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    c67e:	4a e0       	ldi	r20, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
    c680:	91 91       	ld	r25, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
    c682:	20 ed       	ldi	r18, 0xD0	; 208
    c684:	29 0f       	add	r18, r25
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    c686:	2a 30       	cpi	r18, 0x0A	; 10
    c688:	80 f4       	brcc	.+32     	; 0xc6aa <mqtt_callback(char*, unsigned char*, unsigned int)+0x650>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
    c68a:	46 9f       	mul	r20, r22
    c68c:	90 01       	movw	r18, r0
    c68e:	47 9f       	mul	r20, r23
    c690:	30 0d       	add	r19, r0
    c692:	11 24       	eor	r1, r1
    c694:	b9 01       	movw	r22, r18
    c696:	60 53       	subi	r22, 0x30	; 48
    c698:	71 09       	sbc	r23, r1
    c69a:	69 0f       	add	r22, r25
    c69c:	71 1d       	adc	r23, r1
    c69e:	97 fd       	sbrc	r25, 7
    c6a0:	7a 95       	dec	r23
    c6a2:	ee cf       	rjmp	.-36     	; 0xc680 <mqtt_callback(char*, unsigned char*, unsigned int)+0x626>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
    c6a4:	31 96       	adiw	r30, 0x01	; 1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
    c6a6:	80 e0       	ldi	r24, 0x00	; 0
    c6a8:	e8 cf       	rjmp	.-48     	; 0xc67a <mqtt_callback(char*, unsigned char*, unsigned int)+0x620>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
    c6aa:	81 11       	cpse	r24, r1
    c6ac:	d0 cf       	rjmp	.-96     	; 0xc64e <mqtt_callback(char*, unsigned char*, unsigned int)+0x5f4>
    c6ae:	c4 cf       	rjmp	.-120    	; 0xc638 <mqtt_callback(char*, unsigned char*, unsigned int)+0x5de>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2962
  {
    mqtt_process_message++;
    if (ntp_update(&timeClient, &rtc, time_get_offset()) == 1)
      cbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    else
      sbi(selftest_data, SELFTEST_ERR_NTP); //TODO predelat na volani funkce
    c6b0:	82 60       	ori	r24, 0x02	; 2
    c6b2:	10 cf       	rjmp	.-480    	; 0xc4d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x47a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3002
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c6b4:	68 ed       	ldi	r22, 0xD8	; 216
    c6b6:	73 e0       	ldi	r23, 0x03	; 3
    c6b8:	c5 01       	movw	r24, r10
    c6ba:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    c6be:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3001
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c6c0:	61 2c       	mov	r6, r1
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
  strcpy(tds.name, name);
    c6c2:	88 e4       	ldi	r24, 0x48	; 72
    c6c4:	e8 2e       	mov	r14, r24
    c6c6:	f1 2c       	mov	r15, r1
    c6c8:	ec 0e       	add	r14, r28
    c6ca:	fd 1e       	adc	r15, r29
    c6cc:	fc e0       	ldi	r31, 0x0C	; 12
    c6ce:	ef 0e       	add	r14, r31
    c6d0:	f1 1c       	adc	r15, r1
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3003
    pch = strtok (str1, "/");
    while (pch != NULL)
    c6d2:	01 15       	cp	r16, r1
    c6d4:	11 05       	cpc	r17, r1
    c6d6:	09 f4       	brne	.+2      	; 0xc6da <mqtt_callback(char*, unsigned char*, unsigned int)+0x680>
    c6d8:	6d c0       	rjmp	.+218    	; 0xc7b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x75a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3005
    {
      if (cnt == 0) id = atoi(pch);
    c6da:	61 10       	cpse	r6, r1
    c6dc:	0d c0       	rjmp	.+26     	; 0xc6f8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x69e>
    c6de:	c8 01       	movw	r24, r16
    c6e0:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c6e4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006
      if (id < HW_ONEWIRE_MAXROMS)
    c6e6:	25 e0       	ldi	r18, 0x05	; 5
    c6e8:	28 17       	cp	r18, r24
    c6ea:	08 f0       	brcs	.+2      	; 0xc6ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
    c6ec:	5a c0       	rjmp	.+180    	; 0xc7a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3014
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
    c6ee:	8b e7       	ldi	r24, 0x7B	; 123
    c6f0:	94 e0       	ldi	r25, 0x04	; 4
    c6f2:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c6f6:	55 c0       	rjmp	.+170    	; 0xc7a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3006
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < HW_ONEWIRE_MAXROMS)
    c6f8:	85 e0       	ldi	r24, 0x05	; 5
    c6fa:	87 15       	cp	r24, r7
    c6fc:	c0 f3       	brcs	.-16     	; 0xc6ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x694>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3008
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) tds_set_name(id, my_payload);
    c6fe:	a1 e0       	ldi	r26, 0x01	; 1
    c700:	6a 12       	cpse	r6, r26
    c702:	4f c0       	rjmp	.+158    	; 0xc7a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c704:	61 eb       	ldi	r22, 0xB1	; 177
    c706:	73 e0       	ldi	r23, 0x03	; 3
    c708:	c8 01       	movw	r24, r16
    c70a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c70e:	89 2b       	or	r24, r25
    c710:	89 f4       	brne	.+34     	; 0xc734 <mqtt_callback(char*, unsigned char*, unsigned int)+0x6da>
tds_set_name():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:82
}
//// nastavi nazev k tds cidlu
void tds_set_name(uint8_t idx, char *name)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c712:	be 01       	movw	r22, r28
    c714:	68 5b       	subi	r22, 0xB8	; 184
    c716:	7f 4f       	sbci	r23, 0xFF	; 255
    c718:	87 2d       	mov	r24, r7
    c71a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:83
  strcpy(tds.name, name);
    c71e:	67 ed       	ldi	r22, 0xD7	; 215
    c720:	7a e0       	ldi	r23, 0x0A	; 10
    c722:	c7 01       	movw	r24, r14
    c724:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:84
  set_tds18s20(idx, &tds);
    c728:	be 01       	movw	r22, r28
    c72a:	68 5b       	subi	r22, 0xB8	; 184
    c72c:	7f 4f       	sbci	r23, 0xFF	; 255
    c72e:	87 2d       	mov	r24, r7
    c730:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3009
        if ((cnt == 1) && (strcmp(pch, "offset") == 0)) tds_set_offset(id, atoi(my_payload));
    c734:	6a eb       	ldi	r22, 0xBA	; 186
    c736:	77 e0       	ldi	r23, 0x07	; 7
    c738:	c8 01       	movw	r24, r16
    c73a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c73e:	89 2b       	or	r24, r25
    c740:	a9 f4       	brne	.+42     	; 0xc76c <mqtt_callback(char*, unsigned char*, unsigned int)+0x712>
    c742:	87 ed       	ldi	r24, 0xD7	; 215
    c744:	9a e0       	ldi	r25, 0x0A	; 10
    c746:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c74a:	6c 01       	movw	r12, r24
tds_set_offset():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:90
}
//// funkce nastavi offset cidlu tds
void tds_set_offset(uint8_t idx, int offset)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c74c:	be 01       	movw	r22, r28
    c74e:	68 5b       	subi	r22, 0xB8	; 184
    c750:	7f 4f       	sbci	r23, 0xFF	; 255
    c752:	87 2d       	mov	r24, r7
    c754:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:91
  tds.offset = offset;
    c758:	64 96       	adiw	r28, 0x14	; 20
    c75a:	df ae       	std	Y+63, r13	; 0x3f
    c75c:	ce ae       	std	Y+62, r12	; 0x3e
    c75e:	64 97       	sbiw	r28, 0x14	; 20
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:92
  set_tds18s20(idx, &tds);
    c760:	be 01       	movw	r22, r28
    c762:	68 5b       	subi	r22, 0xB8	; 184
    c764:	7f 4f       	sbci	r23, 0xFF	; 255
    c766:	87 2d       	mov	r24, r7
    c768:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
        if ((cnt == 1) && (strcmp(pch, "period") == 0)) tds_set_period(id, atoi(my_payload));
    c76c:	63 e4       	ldi	r22, 0x43	; 67
    c76e:	76 e0       	ldi	r23, 0x06	; 6
    c770:	c8 01       	movw	r24, r16
    c772:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c776:	89 2b       	or	r24, r25
    c778:	a1 f4       	brne	.+40     	; 0xc7a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x748>
    c77a:	87 ed       	ldi	r24, 0xD7	; 215
    c77c:	9a e0       	ldi	r25, 0x0A	; 10
    c77e:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c782:	18 2f       	mov	r17, r24
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:106
///////
//// funkce nastavi periodu mereni
void tds_set_period(uint8_t idx, uint8_t period)
{
  struct_DDS18s20 tds;
  get_tds18s20(idx, &tds);
    c784:	be 01       	movw	r22, r28
    c786:	68 5b       	subi	r22, 0xB8	; 184
    c788:	7f 4f       	sbci	r23, 0xFF	; 255
    c78a:	87 2d       	mov	r24, r7
    c78c:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3010
    c790:	6d 96       	adiw	r28, 0x1d	; 29
    c792:	1f af       	std	Y+63, r17	; 0x3f
    c794:	6d 97       	sbiw	r28, 0x1d	; 29
tds_set_period():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:108
  tds.period = period;
  set_tds18s20(idx, &tds);
    c796:	be 01       	movw	r22, r28
    c798:	68 5b       	subi	r22, 0xB8	; 184
    c79a:	7f 4f       	sbci	r23, 0xFF	; 255
    c79c:	87 2d       	mov	r24, r7
    c79e:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3016
      }
      else
      {
        log_error(&mqtt_client, "tds/set bad id");
      }
      pch = strtok (NULL, "/");
    c7a2:	68 ed       	ldi	r22, 0xD8	; 216
    c7a4:	73 e0       	ldi	r23, 0x03	; 3
    c7a6:	90 e0       	ldi	r25, 0x00	; 0
    c7a8:	80 e0       	ldi	r24, 0x00	; 0
    c7aa:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    c7ae:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3017
      cnt++;
    c7b0:	63 94       	inc	r6
    c7b2:	8f cf       	rjmp	.-226    	; 0xc6d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x678>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3022
    }
  }
  ////
  //// /thermctl-in/XXXX/tds/clear
  strcpy_P(str1, thermctl_header_in);
    c7b4:	6c e6       	ldi	r22, 0x6C	; 108
    c7b6:	72 e3       	ldi	r23, 0x32	; 50
    c7b8:	c5 01       	movw	r24, r10
    c7ba:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3023
  strcat(str1, device.nazev);
    c7be:	61 e3       	ldi	r22, 0x31	; 49
    c7c0:	7c e0       	ldi	r23, 0x0C	; 12
    c7c2:	c5 01       	movw	r24, r10
    c7c4:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3024
  strcat(str1, "/tds/clear");
    c7c8:	64 e4       	ldi	r22, 0x44	; 68
    c7ca:	74 e0       	ldi	r23, 0x04	; 4
    c7cc:	c5 01       	movw	r24, r10
    c7ce:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3025
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c7d2:	f5 01       	movw	r30, r10
    c7d4:	01 90       	ld	r0, Z+
    c7d6:	00 20       	and	r0, r0
    c7d8:	e9 f7       	brne	.-6      	; 0xc7d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x77a>
    c7da:	31 97       	sbiw	r30, 0x01	; 1
    c7dc:	af 01       	movw	r20, r30
    c7de:	4a 19       	sub	r20, r10
    c7e0:	5b 09       	sbc	r21, r11
    c7e2:	b4 01       	movw	r22, r8
    c7e4:	c5 01       	movw	r24, r10
    c7e6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    c7ea:	89 2b       	or	r24, r25
    c7ec:	a1 f4       	brne	.+40     	; 0xc816 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3027
  {
    mqtt_process_message++;
    c7ee:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c7f2:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c7f6:	01 96       	adiw	r24, 0x01	; 1
    c7f8:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c7fc:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3028
    id = atoi(my_payload);
    c800:	87 ed       	ldi	r24, 0xD7	; 215
    c802:	9a e0       	ldi	r25, 0x0A	; 10
    c804:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c808:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3029
    if (id < HW_ONEWIRE_MAXROMS)
    c80a:	b5 e0       	ldi	r27, 0x05	; 5
    c80c:	b8 17       	cp	r27, r24
    c80e:	08 f4       	brcc	.+2      	; 0xc812 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7b8>
    c810:	83 c0       	rjmp	.+262    	; 0xc918 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3030
      tds_set_clear(id);
    c812:	0e 94 f6 56 	call	0xadec	; 0xadec <tds_set_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3039
  ////////
  ////////
  /// nastavovani vlastnosti RTDS ///

  //// thermctl-in/XXXXX/rtds/register - registruje nove vzdalene cidlo
  strcpy_P(str1, thermctl_header_in);
    c816:	6c e6       	ldi	r22, 0x6C	; 108
    c818:	72 e3       	ldi	r23, 0x32	; 50
    c81a:	c5 01       	movw	r24, r10
    c81c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3040
  strcat(str1, device.nazev);
    c820:	61 e3       	ldi	r22, 0x31	; 49
    c822:	7c e0       	ldi	r23, 0x0C	; 12
    c824:	c5 01       	movw	r24, r10
    c826:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3041
  strcat(str1, "/rtds/register");
    c82a:	60 e6       	ldi	r22, 0x60	; 96
    c82c:	74 e0       	ldi	r23, 0x04	; 4
    c82e:	c5 01       	movw	r24, r10
    c830:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3042
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c834:	f5 01       	movw	r30, r10
    c836:	01 90       	ld	r0, Z+
    c838:	00 20       	and	r0, r0
    c83a:	e9 f7       	brne	.-6      	; 0xc836 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7dc>
    c83c:	31 97       	sbiw	r30, 0x01	; 1
    c83e:	af 01       	movw	r20, r30
    c840:	4a 19       	sub	r20, r10
    c842:	5b 09       	sbc	r21, r11
    c844:	b4 01       	movw	r22, r8
    c846:	c5 01       	movw	r24, r10
    c848:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    c84c:	89 2b       	or	r24, r25
    c84e:	d1 f4       	brne	.+52     	; 0xc884 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3044
  {
    mqtt_process_message++;
    c850:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c854:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c858:	01 96       	adiw	r24, 0x01	; 1
    c85a:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c85e:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3045
    if (remote_tds_name_exist(my_payload) == 255)
    c862:	87 ed       	ldi	r24, 0xD7	; 215
    c864:	9a e0       	ldi	r25, 0x0A	; 10
    c866:	0e 94 5b 5f 	call	0xbeb6	; 0xbeb6 <remote_tds_name_exist(char*)>
    c86a:	8f 3f       	cpi	r24, 0xFF	; 255
    c86c:	59 f4       	brne	.+22     	; 0xc884 <mqtt_callback(char*, unsigned char*, unsigned int)+0x82a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3047
    {
      id = remote_tds_find_free();
    c86e:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <remote_tds_find_free()>
    c872:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3048
      remote_tds_set_complete(id, 1, my_payload);
    c874:	47 ed       	ldi	r20, 0xD7	; 215
    c876:	5a e0       	ldi	r21, 0x0A	; 10
    c878:	61 e0       	ldi	r22, 0x01	; 1
    c87a:	0e 94 1c 53 	call	0xa638	; 0xa638 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3049
      remote_tds_subscibe_topic(id);
    c87e:	87 2d       	mov	r24, r7
    c880:	0e 94 bd 5f 	call	0xbf7a	; 0xbf7a <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3055
    }
    ///TODO - vratit ze jiz existuje
  }

  //// thermctl-in/XXXXX/rtds/set/IDX/name - nastavi a udela prihlaseni
  strcpy_P(str1, thermctl_header_in);
    c884:	6c e6       	ldi	r22, 0x6C	; 108
    c886:	72 e3       	ldi	r23, 0x32	; 50
    c888:	c5 01       	movw	r24, r10
    c88a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3056
  strcat(str1, device.nazev);
    c88e:	61 e3       	ldi	r22, 0x31	; 49
    c890:	7c e0       	ldi	r23, 0x0C	; 12
    c892:	c5 01       	movw	r24, r10
    c894:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3057
  strcat(str1, "/rtds/set/");
    c898:	6f e6       	ldi	r22, 0x6F	; 111
    c89a:	74 e0       	ldi	r23, 0x04	; 4
    c89c:	c5 01       	movw	r24, r10
    c89e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3058
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c8a2:	f5 01       	movw	r30, r10
    c8a4:	01 90       	ld	r0, Z+
    c8a6:	00 20       	and	r0, r0
    c8a8:	e9 f7       	brne	.-6      	; 0xc8a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x84a>
    c8aa:	31 97       	sbiw	r30, 0x01	; 1
    c8ac:	af 01       	movw	r20, r30
    c8ae:	4a 19       	sub	r20, r10
    c8b0:	5b 09       	sbc	r21, r11
    c8b2:	b4 01       	movw	r22, r8
    c8b4:	c5 01       	movw	r24, r10
    c8b6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    c8ba:	89 2b       	or	r24, r25
    c8bc:	09 f0       	breq	.+2      	; 0xc8c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x866>
    c8be:	6a c0       	rjmp	.+212    	; 0xc994 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3060
  {
    mqtt_process_message++;
    c8c0:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c8c4:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c8c8:	01 96       	adiw	r24, 0x01	; 1
    c8ca:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c8ce:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c8d2:	f5 01       	movw	r30, r10
    c8d4:	01 90       	ld	r0, Z+
    c8d6:	00 20       	and	r0, r0
    c8d8:	e9 f7       	brne	.-6      	; 0xc8d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x87a>
    c8da:	31 97       	sbiw	r30, 0x01	; 1
    c8dc:	ea 19       	sub	r30, r10
    c8de:	fb 09       	sbc	r31, r11
    c8e0:	9e 2f       	mov	r25, r30
    c8e2:	4e 2f       	mov	r20, r30
    c8e4:	84 2f       	mov	r24, r20
    c8e6:	89 1b       	sub	r24, r25
    c8e8:	24 2f       	mov	r18, r20
    c8ea:	30 e0       	ldi	r19, 0x00	; 0
    c8ec:	d4 01       	movw	r26, r8
    c8ee:	0d 90       	ld	r0, X+
    c8f0:	00 20       	and	r0, r0
    c8f2:	e9 f7       	brne	.-6      	; 0xc8ee <mqtt_callback(char*, unsigned char*, unsigned int)+0x894>
    c8f4:	11 97       	sbiw	r26, 0x01	; 1
    c8f6:	a8 19       	sub	r26, r8
    c8f8:	b9 09       	sbc	r27, r9
    c8fa:	2a 17       	cp	r18, r26
    c8fc:	3b 07       	cpc	r19, r27
    c8fe:	88 f4       	brcc	.+34     	; 0xc922 <mqtt_callback(char*, unsigned char*, unsigned int)+0x8c8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3064
    {
      str1[cnt] = topic[f];
    c900:	d5 01       	movw	r26, r10
    c902:	a8 0f       	add	r26, r24
    c904:	b1 1d       	adc	r27, r1
    c906:	28 0d       	add	r18, r8
    c908:	39 1d       	adc	r19, r9
    c90a:	f9 01       	movw	r30, r18
    c90c:	80 81       	ld	r24, Z
    c90e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3065
      str1[cnt + 1] = 0;
    c910:	11 96       	adiw	r26, 0x01	; 1
    c912:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3062
  strcat(str1, "/rtds/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    c914:	4f 5f       	subi	r20, 0xFF	; 255
    c916:	e6 cf       	rjmp	.-52     	; 0xc8e4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3032
    mqtt_process_message++;
    id = atoi(my_payload);
    if (id < HW_ONEWIRE_MAXROMS)
      tds_set_clear(id);
    else
      log_error(&mqtt_client, "tds/clear bad id");
    c918:	8f e4       	ldi	r24, 0x4F	; 79
    c91a:	94 e0       	ldi	r25, 0x04	; 4
    c91c:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c920:	7a cf       	rjmp	.-268    	; 0xc816 <mqtt_callback(char*, unsigned char*, unsigned int)+0x7bc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3069
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    c922:	68 ed       	ldi	r22, 0xD8	; 216
    c924:	73 e0       	ldi	r23, 0x03	; 3
    c926:	c5 01       	movw	r24, r10
    c928:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3068
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    c92c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3070
    pch = strtok (str1, "/");
    while (pch != NULL)
    c92e:	00 97       	sbiw	r24, 0x00	; 0
    c930:	89 f1       	breq	.+98     	; 0xc994 <mqtt_callback(char*, unsigned char*, unsigned int)+0x93a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3072
    {
      if (cnt == 0) id = atoi(pch);
    c932:	11 11       	cpse	r17, r1
    c934:	0b c0       	rjmp	.+22     	; 0xc94c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8f2>
    c936:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c93a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3086
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
        }
      }
      pch = strtok (NULL, "/");
    c93c:	68 ed       	ldi	r22, 0xD8	; 216
    c93e:	73 e0       	ldi	r23, 0x03	; 3
    c940:	90 e0       	ldi	r25, 0x00	; 0
    c942:	80 e0       	ldi	r24, 0x00	; 0
    c944:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3087
      cnt++;
    c948:	1f 5f       	subi	r17, 0xFF	; 255
    c94a:	f1 cf       	rjmp	.-30     	; 0xc92e <mqtt_callback(char*, unsigned char*, unsigned int)+0x8d4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3073
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if ((cnt == 1) && (strcmp(pch, "name") == 0))
    c94c:	11 30       	cpi	r17, 0x01	; 1
    c94e:	b1 f7       	brne	.-20     	; 0xc93c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
    c950:	61 eb       	ldi	r22, 0xB1	; 177
    c952:	73 e0       	ldi	r23, 0x03	; 3
    c954:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    c958:	89 2b       	or	r24, r25
    c95a:	81 f7       	brne	.-32     	; 0xc93c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3075
      {
        remote_tds_get_active(id, &active);
    c95c:	be 01       	movw	r22, r28
    c95e:	64 5d       	subi	r22, 0xD4	; 212
    c960:	7e 4f       	sbci	r23, 0xFE	; 254
    c962:	87 2d       	mov	r24, r7
    c964:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3076
        if (active == 0)
    c968:	c4 5d       	subi	r28, 0xD4	; 212
    c96a:	de 4f       	sbci	r29, 0xFE	; 254
    c96c:	88 81       	ld	r24, Y
    c96e:	cc 52       	subi	r28, 0x2C	; 44
    c970:	d1 40       	sbci	r29, 0x01	; 1
    c972:	81 11       	cpse	r24, r1
    c974:	0a c0       	rjmp	.+20     	; 0xc98a <mqtt_callback(char*, unsigned char*, unsigned int)+0x930>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3078
        {
          remote_tds_set_complete(id, 1, my_payload);
    c976:	47 ed       	ldi	r20, 0xD7	; 215
    c978:	5a e0       	ldi	r21, 0x0A	; 10
    c97a:	61 e0       	ldi	r22, 0x01	; 1
    c97c:	87 2d       	mov	r24, r7
    c97e:	0e 94 1c 53 	call	0xa638	; 0xa638 <remote_tds_set_complete(unsigned char, unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3079
          remote_tds_subscibe_topic(id);
    c982:	87 2d       	mov	r24, r7
    c984:	0e 94 bd 5f 	call	0xbf7a	; 0xbf7a <remote_tds_subscibe_topic(unsigned char)>
    c988:	d9 cf       	rjmp	.-78     	; 0xc93c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3083
        }
        else
        {
          log_error(&mqtt_client, "rtds/set bad id");
    c98a:	8a e7       	ldi	r24, 0x7A	; 122
    c98c:	94 e0       	ldi	r25, 0x04	; 4
    c98e:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    c992:	d4 cf       	rjmp	.-88     	; 0xc93c <mqtt_callback(char*, unsigned char*, unsigned int)+0x8e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3093
    }
  }

  ////
  //// /thermctl-in/XXXX/rtds/clear index vymaze a odhlasi
  strcpy_P(str1, thermctl_header_in);
    c994:	6c e6       	ldi	r22, 0x6C	; 108
    c996:	72 e3       	ldi	r23, 0x32	; 50
    c998:	c5 01       	movw	r24, r10
    c99a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3094
  strcat(str1, device.nazev);
    c99e:	61 e3       	ldi	r22, 0x31	; 49
    c9a0:	7c e0       	ldi	r23, 0x0C	; 12
    c9a2:	c5 01       	movw	r24, r10
    c9a4:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3095
  strcat(str1, "/rtds/clear");
    c9a8:	6a e8       	ldi	r22, 0x8A	; 138
    c9aa:	74 e0       	ldi	r23, 0x04	; 4
    c9ac:	c5 01       	movw	r24, r10
    c9ae:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3096
  if (strncmp(str1, topic, strlen(str1)) == 0)
    c9b2:	f5 01       	movw	r30, r10
    c9b4:	01 90       	ld	r0, Z+
    c9b6:	00 20       	and	r0, r0
    c9b8:	e9 f7       	brne	.-6      	; 0xc9b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x95a>
    c9ba:	31 97       	sbiw	r30, 0x01	; 1
    c9bc:	af 01       	movw	r20, r30
    c9be:	4a 19       	sub	r20, r10
    c9c0:	5b 09       	sbc	r21, r11
    c9c2:	b4 01       	movw	r22, r8
    c9c4:	c5 01       	movw	r24, r10
    c9c6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    c9ca:	89 2b       	or	r24, r25
    c9cc:	09 f0       	breq	.+2      	; 0xc9d0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x976>
    c9ce:	6f c0       	rjmp	.+222    	; 0xcaae <mqtt_callback(char*, unsigned char*, unsigned int)+0xa54>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3098
  {
    mqtt_process_message++;
    c9d0:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    c9d4:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    c9d8:	01 96       	adiw	r24, 0x01	; 1
    c9da:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    c9de:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3099
    id = atoi(my_payload);
    c9e2:	87 ed       	ldi	r24, 0xD7	; 215
    c9e4:	9a e0       	ldi	r25, 0x0A	; 10
    c9e6:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    c9ea:	78 2e       	mov	r7, r24
remote_tds_unsubscibe_topic():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2739
/// funkce pro zruseni odebirani topicu vzdalenych cidel
void remote_tds_unsubscibe_topic(uint8_t idx)
{
  char tmp1[64];
  char tmp2[64];
  uint8_t active = 0;
    c9ec:	c8 5f       	subi	r28, 0xF8	; 248
    c9ee:	de 4f       	sbci	r29, 0xFE	; 254
    c9f0:	18 82       	st	Y, r1
    c9f2:	c8 50       	subi	r28, 0x08	; 8
    c9f4:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2740
  remote_tds_get_complete(idx, &active, tmp1);
    c9f6:	ae 01       	movw	r20, r28
    c9f8:	48 57       	subi	r20, 0x78	; 120
    c9fa:	5f 4f       	sbci	r21, 0xFF	; 255
    c9fc:	be 01       	movw	r22, r28
    c9fe:	68 5f       	subi	r22, 0xF8	; 248
    ca00:	7e 4f       	sbci	r23, 0xFE	; 254
    ca02:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2741
  if (active == 1)
    ca06:	c8 5f       	subi	r28, 0xF8	; 248
    ca08:	de 4f       	sbci	r29, 0xFE	; 254
    ca0a:	88 81       	ld	r24, Y
    ca0c:	c8 50       	subi	r28, 0x08	; 8
    ca0e:	d1 40       	sbci	r29, 0x01	; 1
    ca10:	81 30       	cpi	r24, 0x01	; 1
    ca12:	09 f0       	breq	.+2      	; 0xca16 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9bc>
    ca14:	49 c0       	rjmp	.+146    	; 0xcaa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2743
  {
    strcpy(tmp2, "/rtds/");
    ca16:	8e 01       	movw	r16, r28
    ca18:	08 5b       	subi	r16, 0xB8	; 184
    ca1a:	1f 4f       	sbci	r17, 0xFF	; 255
    ca1c:	63 ed       	ldi	r22, 0xD3	; 211
    ca1e:	73 e0       	ldi	r23, 0x03	; 3
    ca20:	c8 01       	movw	r24, r16
    ca22:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2744
    strcat(tmp2, tmp1);
    ca26:	be 01       	movw	r22, r28
    ca28:	68 57       	subi	r22, 0x78	; 120
    ca2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ca2c:	c8 01       	movw	r24, r16
    ca2e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
unsubscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:497
    }
    return false;
}

boolean PubSubClient::unsubscribe(const char* topic) {
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
    ca32:	d8 01       	movw	r26, r16
    ca34:	0d 90       	ld	r0, X+
    ca36:	00 20       	and	r0, r0
    ca38:	e9 f7       	brne	.-6      	; 0xca34 <mqtt_callback(char*, unsigned char*, unsigned int)+0x9da>
    ca3a:	cd 01       	movw	r24, r26
    ca3c:	80 1b       	sub	r24, r16
    ca3e:	91 0b       	sbc	r25, r17
    ca40:	08 96       	adiw	r24, 0x08	; 8
    ca42:	81 30       	cpi	r24, 0x01	; 1
    ca44:	92 40       	sbci	r25, 0x02	; 2
    ca46:	80 f5       	brcc	.+96     	; 0xcaa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:501
        // Too long
        return false;
    }
    if (connected()) {
    ca48:	8e e0       	ldi	r24, 0x0E	; 14
    ca4a:	9e e0       	ldi	r25, 0x0E	; 14
    ca4c:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
    ca50:	88 23       	and	r24, r24
    ca52:	51 f1       	breq	.+84     	; 0xcaa8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa4e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:503
        uint16_t length = 5;
        nextMsgId++;
    ca54:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <mqtt_client+0x202>
    ca58:	90 91 11 10 	lds	r25, 0x1011	; 0x801011 <mqtt_client+0x203>
    ca5c:	01 96       	adiw	r24, 0x01	; 1
    ca5e:	90 93 11 10 	sts	0x1011, r25	; 0x801011 <mqtt_client+0x203>
    ca62:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:504
        if (nextMsgId == 0) {
    ca66:	89 2b       	or	r24, r25
    ca68:	31 f4       	brne	.+12     	; 0xca76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa1c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:505
            nextMsgId = 1;
    ca6a:	81 e0       	ldi	r24, 0x01	; 1
    ca6c:	90 e0       	ldi	r25, 0x00	; 0
    ca6e:	90 93 11 10 	sts	0x1011, r25	; 0x801011 <mqtt_client+0x203>
    ca72:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:507
        }
        buffer[length++] = (nextMsgId >> 8);
    ca76:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <mqtt_client+0x202>
    ca7a:	90 91 11 10 	lds	r25, 0x1011	; 0x801011 <mqtt_client+0x203>
    ca7e:	90 93 15 0e 	sts	0x0E15, r25	; 0x800e15 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:508
        buffer[length++] = (nextMsgId & 0xFF);
    ca82:	80 93 16 0e 	sts	0x0E16, r24	; 0x800e16 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:509
        length = writeString(topic, buffer,length);
    ca86:	47 e0       	ldi	r20, 0x07	; 7
    ca88:	50 e0       	ldi	r21, 0x00	; 0
    ca8a:	60 e1       	ldi	r22, 0x10	; 16
    ca8c:	7e e0       	ldi	r23, 0x0E	; 14
    ca8e:	c8 01       	movw	r24, r16
    ca90:	0e 94 0f 85 	call	0x10a1e	; 0x10a1e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:510
        return write(MQTTUNSUBSCRIBE|MQTTQOS1,buffer,length-5);
    ca94:	9c 01       	movw	r18, r24
    ca96:	25 50       	subi	r18, 0x05	; 5
    ca98:	31 09       	sbc	r19, r1
    ca9a:	40 e1       	ldi	r20, 0x10	; 16
    ca9c:	5e e0       	ldi	r21, 0x0E	; 14
    ca9e:	62 ea       	ldi	r22, 0xA2	; 162
    caa0:	8e e0       	ldi	r24, 0x0E	; 14
    caa2:	9e e0       	ldi	r25, 0x0E	; 14
    caa4:	0e 94 17 95 	call	0x12a2e	; 0x12a2e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3102
  {
    mqtt_process_message++;
    id = atoi(my_payload);
    remote_tds_unsubscibe_topic(id);
    /// TODO dodelat navratovou chybu
    remote_tds_clear(id);
    caa8:	87 2d       	mov	r24, r7
    caaa:	0e 94 33 53 	call	0xa666	; 0xa666 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3106
  }
  ///
  //// ziska nastaveni remote_tds
  strcpy_P(str1, thermctl_header_in);
    caae:	6c e6       	ldi	r22, 0x6C	; 108
    cab0:	72 e3       	ldi	r23, 0x32	; 50
    cab2:	c5 01       	movw	r24, r10
    cab4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3107
  strcat(str1, device.nazev);
    cab8:	61 e3       	ldi	r22, 0x31	; 49
    caba:	7c e0       	ldi	r23, 0x0C	; 12
    cabc:	c5 01       	movw	r24, r10
    cabe:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3108
  strcat(str1, "/rtds/get");
    cac2:	66 e9       	ldi	r22, 0x96	; 150
    cac4:	74 e0       	ldi	r23, 0x04	; 4
    cac6:	c5 01       	movw	r24, r10
    cac8:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3109
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cacc:	f5 01       	movw	r30, r10
    cace:	01 90       	ld	r0, Z+
    cad0:	00 20       	and	r0, r0
    cad2:	e9 f7       	brne	.-6      	; 0xcace <mqtt_callback(char*, unsigned char*, unsigned int)+0xa74>
    cad4:	31 97       	sbiw	r30, 0x01	; 1
    cad6:	af 01       	movw	r20, r30
    cad8:	4a 19       	sub	r20, r10
    cada:	5b 09       	sbc	r21, r11
    cadc:	b4 01       	movw	r22, r8
    cade:	c5 01       	movw	r24, r10
    cae0:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    cae4:	89 2b       	or	r24, r25
    cae6:	11 f4       	brne	.+4      	; 0xcaec <mqtt_callback(char*, unsigned char*, unsigned int)+0xa92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3111
  {
    send_mqtt_remote_tds_status();
    cae8:	0e 94 d9 5e 	call	0xbdb2	; 0xbdb2 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3115
  }
  ////
  //// rtds/NAME - hodnota, kde NAME je nazev cidla
  strcpy(str1, "/rtds/");
    caec:	63 ed       	ldi	r22, 0xD3	; 211
    caee:	73 e0       	ldi	r23, 0x03	; 3
    caf0:	c5 01       	movw	r24, r10
    caf2:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3116
  if (strncmp(str1, topic, strlen(str1)) == 0)
    caf6:	f5 01       	movw	r30, r10
    caf8:	01 90       	ld	r0, Z+
    cafa:	00 20       	and	r0, r0
    cafc:	e9 f7       	brne	.-6      	; 0xcaf8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xa9e>
    cafe:	31 97       	sbiw	r30, 0x01	; 1
    cb00:	af 01       	movw	r20, r30
    cb02:	4a 19       	sub	r20, r10
    cb04:	5b 09       	sbc	r21, r11
    cb06:	b4 01       	movw	r22, r8
    cb08:	c5 01       	movw	r24, r10
    cb0a:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    cb0e:	89 2b       	or	r24, r25
    cb10:	09 f0       	breq	.+2      	; 0xcb14 <mqtt_callback(char*, unsigned char*, unsigned int)+0xaba>
    cb12:	74 c0       	rjmp	.+232    	; 0xcbfc <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3118
  {
    mqtt_process_message++;
    cb14:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    cb18:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    cb1c:	01 96       	adiw	r24, 0x01	; 1
    cb1e:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    cb22:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cb26:	f5 01       	movw	r30, r10
    cb28:	01 90       	ld	r0, Z+
    cb2a:	00 20       	and	r0, r0
    cb2c:	e9 f7       	brne	.-6      	; 0xcb28 <mqtt_callback(char*, unsigned char*, unsigned int)+0xace>
    cb2e:	31 97       	sbiw	r30, 0x01	; 1
    cb30:	ea 19       	sub	r30, r10
    cb32:	fb 09       	sbc	r31, r11
    cb34:	9e 2f       	mov	r25, r30
    cb36:	4e 2f       	mov	r20, r30
    cb38:	84 2f       	mov	r24, r20
    cb3a:	89 1b       	sub	r24, r25
    cb3c:	24 2f       	mov	r18, r20
    cb3e:	30 e0       	ldi	r19, 0x00	; 0
    cb40:	d4 01       	movw	r26, r8
    cb42:	0d 90       	ld	r0, X+
    cb44:	00 20       	and	r0, r0
    cb46:	e9 f7       	brne	.-6      	; 0xcb42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xae8>
    cb48:	11 97       	sbiw	r26, 0x01	; 1
    cb4a:	a8 19       	sub	r26, r8
    cb4c:	b9 09       	sbc	r27, r9
    cb4e:	2a 17       	cp	r18, r26
    cb50:	3b 07       	cpc	r19, r27
    cb52:	60 f4       	brcc	.+24     	; 0xcb6c <mqtt_callback(char*, unsigned char*, unsigned int)+0xb12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3122
    {
      str1[cnt] = topic[f];
    cb54:	d5 01       	movw	r26, r10
    cb56:	a8 0f       	add	r26, r24
    cb58:	b1 1d       	adc	r27, r1
    cb5a:	28 0d       	add	r18, r8
    cb5c:	39 1d       	adc	r19, r9
    cb5e:	f9 01       	movw	r30, r18
    cb60:	80 81       	ld	r24, Z
    cb62:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3123
      str1[cnt + 1] = 0;
    cb64:	11 96       	adiw	r26, 0x01	; 1
    cb66:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3120
  strcpy(str1, "/rtds/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cb68:	4f 5f       	subi	r20, 0xFF	; 255
    cb6a:	e6 cf       	rjmp	.-52     	; 0xcb38 <mqtt_callback(char*, unsigned char*, unsigned int)+0xade>
    cb6c:	b4 e6       	ldi	r27, 0x64	; 100
    cb6e:	cb 2e       	mov	r12, r27
    cb70:	d1 2c       	mov	r13, r1
    cb72:	e1 2c       	mov	r14, r1
    cb74:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cb76:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3128
    {
      uint8_t active = 0;
    cb78:	29 96       	adiw	r28, 0x09	; 9
    cb7a:	1f ae       	std	Y+63, r1	; 0x3f
    cb7c:	29 97       	sbiw	r28, 0x09	; 9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3129
      remote_tds_get_complete(idx, &active, tmp1);
    cb7e:	ae 01       	movw	r20, r28
    cb80:	44 5e       	subi	r20, 0xE4	; 228
    cb82:	5e 4f       	sbci	r21, 0xFE	; 254
    cb84:	be 01       	movw	r22, r28
    cb86:	68 5b       	subi	r22, 0xB8	; 184
    cb88:	7f 4f       	sbci	r23, 0xFF	; 255
    cb8a:	81 2f       	mov	r24, r17
    cb8c:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3130
      if (active == 1 && strcmp(tmp1, str1) == 0)
    cb90:	29 96       	adiw	r28, 0x09	; 9
    cb92:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb94:	29 97       	sbiw	r28, 0x09	; 9
    cb96:	81 30       	cpi	r24, 0x01	; 1
    cb98:	21 f5       	brne	.+72     	; 0xcbe2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
    cb9a:	b5 01       	movw	r22, r10
    cb9c:	ce 01       	movw	r24, r28
    cb9e:	84 5e       	subi	r24, 0xE4	; 228
    cba0:	9e 4f       	sbci	r25, 0xFE	; 254
    cba2:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    cba6:	89 2b       	or	r24, r25
    cba8:	e1 f4       	brne	.+56     	; 0xcbe2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb88>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3132
      {
        remote_tds_set_data(idx, atoi(my_payload));
    cbaa:	87 ed       	ldi	r24, 0xD7	; 215
    cbac:	9a e0       	ldi	r25, 0x0A	; 10
    cbae:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cbb2:	09 2f       	mov	r16, r25
remote_tds_set_data():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2789
///
void remote_tds_set_data(uint8_t idx, int temp)
{
  if (idx < MAX_RTDS)
  {
    SRAM.writeByte(ram_remote_tds_store_data_low + (ram_remote_tds_store_size * idx), (temp & 0xff));
    cbb4:	48 2f       	mov	r20, r24
    cbb6:	c7 01       	movw	r24, r14
    cbb8:	b6 01       	movw	r22, r12
    cbba:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2790
    SRAM.writeByte(ram_remote_tds_store_data_high + (ram_remote_tds_store_size * idx), ((temp >> 8) & 0xff));
    cbbe:	40 2f       	mov	r20, r16
    cbc0:	c7 01       	movw	r24, r14
    cbc2:	b6 01       	movw	r22, r12
    cbc4:	6f 5f       	subi	r22, 0xFF	; 255
    cbc6:	7f 4f       	sbci	r23, 0xFF	; 255
    cbc8:	8f 4f       	sbci	r24, 0xFF	; 255
    cbca:	9f 4f       	sbci	r25, 0xFF	; 255
    cbcc:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2791
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), 0);
    cbd0:	40 e0       	ldi	r20, 0x00	; 0
    cbd2:	c7 01       	movw	r24, r14
    cbd4:	b6 01       	movw	r22, r12
    cbd6:	6e 5f       	subi	r22, 0xFE	; 254
    cbd8:	7f 4f       	sbci	r23, 0xFF	; 255
    cbda:	8f 4f       	sbci	r24, 0xFF	; 255
    cbdc:	9f 4f       	sbci	r25, 0xFF	; 255
    cbde:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3126
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    cbe2:	1f 5f       	subi	r17, 0xFF	; 255
    cbe4:	f3 e0       	ldi	r31, 0x03	; 3
    cbe6:	cf 0e       	add	r12, r31
    cbe8:	d1 1c       	adc	r13, r1
    cbea:	e1 1c       	adc	r14, r1
    cbec:	f1 1c       	adc	r15, r1
    cbee:	22 e8       	ldi	r18, 0x82	; 130
    cbf0:	c2 16       	cp	r12, r18
    cbf2:	d1 04       	cpc	r13, r1
    cbf4:	e1 04       	cpc	r14, r1
    cbf6:	f1 04       	cpc	r15, r1
    cbf8:	09 f0       	breq	.+2      	; 0xcbfc <mqtt_callback(char*, unsigned char*, unsigned int)+0xba2>
    cbfa:	be cf       	rjmp	.-132    	; 0xcb78 <mqtt_callback(char*, unsigned char*, unsigned int)+0xb1e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3136
      {
        remote_tds_set_data(idx, atoi(my_payload));
      }
    }
  }
  strcpy(str1, "/rtds/list");
    cbfc:	60 ea       	ldi	r22, 0xA0	; 160
    cbfe:	74 e0       	ldi	r23, 0x04	; 4
    cc00:	c5 01       	movw	r24, r10
    cc02:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3151
  //// thermctl-in/XXXXX/prog/set/IDX/active  - 0-off, 1-heat, 2-cool,3.....
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/theshold - pro jednotlive casove useky ruzne teploty
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/active - pro jednotlivy usek povoleni zakazani
  //// thermctl-in/XXXXX/prog_interval/set/IDX/IDcko/time - nastavi cas pro jednotlive intervaly
  //// thermctl-in/XXXXX/prog/clear - IDX
  strcpy_P(str1, thermctl_header_in);
    cc06:	6c e6       	ldi	r22, 0x6C	; 108
    cc08:	72 e3       	ldi	r23, 0x32	; 50
    cc0a:	c5 01       	movw	r24, r10
    cc0c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3152
  strcat(str1, device.nazev);
    cc10:	61 e3       	ldi	r22, 0x31	; 49
    cc12:	7c e0       	ldi	r23, 0x0C	; 12
    cc14:	c5 01       	movw	r24, r10
    cc16:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3153
  strcat(str1, "/prog/set/");
    cc1a:	6b ea       	ldi	r22, 0xAB	; 171
    cc1c:	74 e0       	ldi	r23, 0x04	; 4
    cc1e:	c5 01       	movw	r24, r10
    cc20:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3154
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cc24:	f5 01       	movw	r30, r10
    cc26:	01 90       	ld	r0, Z+
    cc28:	00 20       	and	r0, r0
    cc2a:	e9 f7       	brne	.-6      	; 0xcc26 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbcc>
    cc2c:	31 97       	sbiw	r30, 0x01	; 1
    cc2e:	af 01       	movw	r20, r30
    cc30:	4a 19       	sub	r20, r10
    cc32:	5b 09       	sbc	r21, r11
    cc34:	b4 01       	movw	r22, r8
    cc36:	c5 01       	movw	r24, r10
    cc38:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    cc3c:	89 2b       	or	r24, r25
    cc3e:	09 f0       	breq	.+2      	; 0xcc42 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbe8>
    cc40:	75 c0       	rjmp	.+234    	; 0xcd2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3156
  {
    mqtt_process_message++;
    cc42:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    cc46:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    cc4a:	01 96       	adiw	r24, 0x01	; 1
    cc4c:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    cc50:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3158
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc54:	f5 01       	movw	r30, r10
    cc56:	01 90       	ld	r0, Z+
    cc58:	00 20       	and	r0, r0
    cc5a:	e9 f7       	brne	.-6      	; 0xcc56 <mqtt_callback(char*, unsigned char*, unsigned int)+0xbfc>
    cc5c:	31 97       	sbiw	r30, 0x01	; 1
    cc5e:	ea 19       	sub	r30, r10
    cc60:	fb 09       	sbc	r31, r11
    cc62:	9e 2f       	mov	r25, r30
    cc64:	4e 2f       	mov	r20, r30
    cc66:	84 2f       	mov	r24, r20
    cc68:	89 1b       	sub	r24, r25
    cc6a:	24 2f       	mov	r18, r20
    cc6c:	30 e0       	ldi	r19, 0x00	; 0
    cc6e:	d4 01       	movw	r26, r8
    cc70:	0d 90       	ld	r0, X+
    cc72:	00 20       	and	r0, r0
    cc74:	e9 f7       	brne	.-6      	; 0xcc70 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc16>
    cc76:	11 97       	sbiw	r26, 0x01	; 1
    cc78:	a8 19       	sub	r26, r8
    cc7a:	b9 09       	sbc	r27, r9
    cc7c:	2a 17       	cp	r18, r26
    cc7e:	3b 07       	cpc	r19, r27
    cc80:	60 f4       	brcc	.+24     	; 0xcc9a <mqtt_callback(char*, unsigned char*, unsigned int)+0xc40>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3160
    {
      str1[cnt] = topic[f];
    cc82:	d5 01       	movw	r26, r10
    cc84:	a8 0f       	add	r26, r24
    cc86:	b1 1d       	adc	r27, r1
    cc88:	28 0d       	add	r18, r8
    cc8a:	39 1d       	adc	r19, r9
    cc8c:	f9 01       	movw	r30, r18
    cc8e:	80 81       	ld	r24, Z
    cc90:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3161
      str1[cnt + 1] = 0;
    cc92:	11 96       	adiw	r26, 0x01	; 1
    cc94:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3158
  strcat(str1, "/prog/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    cc96:	4f 5f       	subi	r20, 0xFF	; 255
    cc98:	e6 cf       	rjmp	.-52     	; 0xcc66 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc0c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3165
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    cc9a:	68 ed       	ldi	r22, 0xD8	; 216
    cc9c:	73 e0       	ldi	r23, 0x03	; 3
    cc9e:	c5 01       	movw	r24, r10
    cca0:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    cca4:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3164
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    cca6:	f1 2c       	mov	r15, r1
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    cca8:	ad e4       	ldi	r26, 0x4D	; 77
    ccaa:	ea 2e       	mov	r14, r26
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3166
    pch = strtok (str1, "/");
    while (pch != NULL)
    ccac:	01 15       	cp	r16, r1
    ccae:	11 05       	cpc	r17, r1
    ccb0:	e9 f1       	breq	.+122    	; 0xcd2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcd2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3168
    {
      if (cnt == 0) id = atoi(pch);
    ccb2:	f1 10       	cpse	r15, r1
    ccb4:	0c c0       	rjmp	.+24     	; 0xccce <mqtt_callback(char*, unsigned char*, unsigned int)+0xc74>
    ccb6:	c8 01       	movw	r24, r16
    ccb8:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    ccbc:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3169
      if (id < AVAILABLE_PROGRAM)
    ccbe:	f7 e0       	ldi	r31, 0x07	; 7
    ccc0:	f8 17       	cp	r31, r24
    ccc2:	58 f5       	brcc	.+86     	; 0xcd1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3176
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
    ccc4:	86 eb       	ldi	r24, 0xB6	; 182
    ccc6:	94 e0       	ldi	r25, 0x04	; 4
    ccc8:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cccc:	26 c0       	rjmp	.+76     	; 0xcd1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3169
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < AVAILABLE_PROGRAM)
    ccce:	27 e0       	ldi	r18, 0x07	; 7
    ccd0:	27 15       	cp	r18, r7
    ccd2:	c0 f3       	brcs	.-16     	; 0xccc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3171
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0))  thermostat_program_set_name(id, my_payload);
    ccd4:	81 e0       	ldi	r24, 0x01	; 1
    ccd6:	f8 12       	cpse	r15, r24
    ccd8:	20 c0       	rjmp	.+64     	; 0xcd1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    ccda:	61 eb       	ldi	r22, 0xB1	; 177
    ccdc:	73 e0       	ldi	r23, 0x03	; 3
    ccde:	c8 01       	movw	r24, r16
    cce0:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    cce4:	89 2b       	or	r24, r25
    cce6:	29 f4       	brne	.+10     	; 0xccf2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xc98>
    cce8:	67 ed       	ldi	r22, 0xD7	; 215
    ccea:	7a e0       	ldi	r23, 0x0A	; 10
    ccec:	87 2d       	mov	r24, r7
    ccee:	0e 94 69 50 	call	0xa0d2	; 0xa0d2 <thermostat_program_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3172
        if ((cnt == 1) && (strcmp(pch, "active") == 0))  thermostat_program_set_active(id, atoi(my_payload));
    ccf2:	6b eb       	ldi	r22, 0xBB	; 187
    ccf4:	73 e0       	ldi	r23, 0x03	; 3
    ccf6:	c8 01       	movw	r24, r16
    ccf8:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    ccfc:	89 2b       	or	r24, r25
    ccfe:	69 f4       	brne	.+26     	; 0xcd1a <mqtt_callback(char*, unsigned char*, unsigned int)+0xcc0>
    cd00:	87 ed       	ldi	r24, 0xD7	; 215
    cd02:	9a e0       	ldi	r25, 0x0A	; 10
    cd04:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    cd08:	7e 9c       	mul	r7, r14
    cd0a:	90 01       	movw	r18, r0
    cd0c:	11 24       	eor	r1, r1
    cd0e:	68 2f       	mov	r22, r24
    cd10:	c9 01       	movw	r24, r18
    cd12:	8f 50       	subi	r24, 0x0F	; 15
    cd14:	9e 4f       	sbci	r25, 0xFE	; 254
    cd16:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3178
      }
      else
      {
        log_error(&mqtt_client, "prog/set bad id");
      }
      pch = strtok (NULL, "/");
    cd1a:	68 ed       	ldi	r22, 0xD8	; 216
    cd1c:	73 e0       	ldi	r23, 0x03	; 3
    cd1e:	90 e0       	ldi	r25, 0x00	; 0
    cd20:	80 e0       	ldi	r24, 0x00	; 0
    cd22:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    cd26:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3179
      cnt++;
    cd28:	f3 94       	inc	r15
    cd2a:	c0 cf       	rjmp	.-128    	; 0xccac <mqtt_callback(char*, unsigned char*, unsigned int)+0xc52>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3183
    }
  }
  ////
  strcpy_P(str1, thermctl_header_in);
    cd2c:	6c e6       	ldi	r22, 0x6C	; 108
    cd2e:	72 e3       	ldi	r23, 0x32	; 50
    cd30:	c5 01       	movw	r24, r10
    cd32:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3184
  strcat(str1, device.nazev);
    cd36:	61 e3       	ldi	r22, 0x31	; 49
    cd38:	7c e0       	ldi	r23, 0x0C	; 12
    cd3a:	c5 01       	movw	r24, r10
    cd3c:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3185
  strcat(str1, "/prog/clear");
    cd40:	66 ec       	ldi	r22, 0xC6	; 198
    cd42:	74 e0       	ldi	r23, 0x04	; 4
    cd44:	c5 01       	movw	r24, r10
    cd46:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3186
  if (strncmp(str1, topic, strlen(str1)) == 0)
    cd4a:	f5 01       	movw	r30, r10
    cd4c:	01 90       	ld	r0, Z+
    cd4e:	00 20       	and	r0, r0
    cd50:	e9 f7       	brne	.-6      	; 0xcd4c <mqtt_callback(char*, unsigned char*, unsigned int)+0xcf2>
    cd52:	31 97       	sbiw	r30, 0x01	; 1
    cd54:	af 01       	movw	r20, r30
    cd56:	4a 19       	sub	r20, r10
    cd58:	5b 09       	sbc	r21, r11
    cd5a:	b4 01       	movw	r22, r8
    cd5c:	c5 01       	movw	r24, r10
    cd5e:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    cd62:	89 2b       	or	r24, r25
    cd64:	09 f0       	breq	.+2      	; 0xcd68 <mqtt_callback(char*, unsigned char*, unsigned int)+0xd0e>
    cd66:	52 c0       	rjmp	.+164    	; 0xce0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3188
  {
    mqtt_process_message++;
    cd68:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    cd6c:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    cd70:	01 96       	adiw	r24, 0x01	; 1
    cd72:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    cd76:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3189
    id = atoi(my_payload);
    cd7a:	87 ed       	ldi	r24, 0xD7	; 215
    cd7c:	9a e0       	ldi	r25, 0x0A	; 10
    cd7e:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cd82:	18 2f       	mov	r17, r24
    cd84:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3190
    if (id < AVAILABLE_PROGRAM)
    cd86:	a7 e0       	ldi	r26, 0x07	; 7
    cd88:	a8 17       	cp	r26, r24
    cd8a:	08 f4       	brcc	.+2      	; 0xcd8e <mqtt_callback(char*, unsigned char*, unsigned int)+0xd34>
    cd8c:	89 c0       	rjmp	.+274    	; 0xcea0 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3192
    {
      strcpy(tmp2, "PROG");
    cd8e:	62 ed       	ldi	r22, 0xD2	; 210
    cd90:	74 e0       	ldi	r23, 0x04	; 4
    cd92:	ce 01       	movw	r24, r28
    cd94:	88 57       	subi	r24, 0x78	; 120
    cd96:	9f 4f       	sbci	r25, 0xFF	; 255
    cd98:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3193
      thermostat_program_set_name(id, tmp2);
    cd9c:	be 01       	movw	r22, r28
    cd9e:	68 57       	subi	r22, 0x78	; 120
    cda0:	7f 4f       	sbci	r23, 0xFF	; 255
    cda2:	81 2f       	mov	r24, r17
    cda4:	0e 94 69 50 	call	0xa0d2	; 0xa0d2 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
    cda8:	bd e4       	ldi	r27, 0x4D	; 77
    cdaa:	1b 9f       	mul	r17, r27
    cdac:	c0 01       	movw	r24, r0
    cdae:	11 24       	eor	r1, r1
    cdb0:	60 e0       	ldi	r22, 0x00	; 0
    cdb2:	8f 50       	subi	r24, 0x0F	; 15
    cdb4:	9e 4f       	sbci	r25, 0xFE	; 254
    cdb6:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3195
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    cdba:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3197
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
    cdbc:	c1 2c       	mov	r12, r1
    cdbe:	e1 2c       	mov	r14, r1
    cdc0:	00 e0       	ldi	r16, 0x00	; 0
    cdc2:	20 e0       	ldi	r18, 0x00	; 0
    cdc4:	40 e0       	ldi	r20, 0x00	; 0
    cdc6:	61 2f       	mov	r22, r17
    cdc8:	87 2d       	mov	r24, r7
    cdca:	0e 94 2d 50 	call	0xa05a	; 0xa05a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3198
        thermostat_program_set_threshold(id, progid, 220);
    cdce:	4c ed       	ldi	r20, 0xDC	; 220
    cdd0:	50 e0       	ldi	r21, 0x00	; 0
    cdd2:	61 2f       	mov	r22, r17
    cdd4:	87 2d       	mov	r24, r7
    cdd6:	0e 94 11 50 	call	0xa022	; 0xa022 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3199
        thermostat_program_set_week(id, progid, 0);
    cdda:	40 e0       	ldi	r20, 0x00	; 0
    cddc:	61 2f       	mov	r22, r17
    cdde:	87 2d       	mov	r24, r7
    cde0:	0e 94 03 50 	call	0xa006	; 0xa006 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3195
    if (id < AVAILABLE_PROGRAM)
    {
      strcpy(tmp2, "PROG");
      thermostat_program_set_name(id, tmp2);
      thermostat_program_set_active(id, 0);
      for (uint8_t progid = 0; progid < MAX_PROGRAM_INTERVAL; progid++)
    cde4:	1f 5f       	subi	r17, 0xFF	; 255
    cde6:	1b 30       	cpi	r17, 0x0B	; 11
    cde8:	49 f7       	brne	.-46     	; 0xcdbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xd62>
    cdea:	0b e5       	ldi	r16, 0x5B	; 91
    cdec:	11 e0       	ldi	r17, 0x01	; 1
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
    cdee:	c8 01       	movw	r24, r16
    cdf0:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3203
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
      {
        if (thermostat_ring_get_program_id(tix) == id)
    cdf4:	78 12       	cpse	r7, r24
    cdf6:	04 c0       	rjmp	.+8      	; 0xce00 <mqtt_callback(char*, unsigned char*, unsigned int)+0xda6>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    cdf8:	6f ef       	ldi	r22, 0xFF	; 255
    cdfa:	c8 01       	movw	r24, r16
    cdfc:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    ce00:	0f 5d       	subi	r16, 0xDF	; 223
    ce02:	1f 4f       	sbci	r17, 0xFF	; 255
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3201
      {
        thermostat_program_set_time(id, progid, 0, 0, 0, 0, 0);
        thermostat_program_set_threshold(id, progid, 220);
        thermostat_program_set_week(id, progid, 0);
      }
      for (uint8_t tix = 0; tix < MAX_THERMOSTAT; tix++)
    ce04:	01 15       	cp	r16, r1
    ce06:	e2 e0       	ldi	r30, 0x02	; 2
    ce08:	1e 07       	cpc	r17, r30
    ce0a:	89 f7       	brne	.-30     	; 0xcdee <mqtt_callback(char*, unsigned char*, unsigned int)+0xd94>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3215
    {
      log_error(&mqtt_client, "prog/clear bad id");
    }
  }
  /////
  strcpy_P(str1, thermctl_header_in);
    ce0c:	6c e6       	ldi	r22, 0x6C	; 108
    ce0e:	72 e3       	ldi	r23, 0x32	; 50
    ce10:	c5 01       	movw	r24, r10
    ce12:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3216
  strcat(str1, device.nazev);
    ce16:	61 e3       	ldi	r22, 0x31	; 49
    ce18:	7c e0       	ldi	r23, 0x0C	; 12
    ce1a:	c5 01       	movw	r24, r10
    ce1c:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3217
  strcat(str1, "/prog_interval/set/");
    ce20:	69 ee       	ldi	r22, 0xE9	; 233
    ce22:	74 e0       	ldi	r23, 0x04	; 4
    ce24:	c5 01       	movw	r24, r10
    ce26:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3218
  if (strncmp(str1, topic, strlen(str1)) == 0)
    ce2a:	f5 01       	movw	r30, r10
    ce2c:	01 90       	ld	r0, Z+
    ce2e:	00 20       	and	r0, r0
    ce30:	e9 f7       	brne	.-6      	; 0xce2c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdd2>
    ce32:	31 97       	sbiw	r30, 0x01	; 1
    ce34:	af 01       	movw	r20, r30
    ce36:	4a 19       	sub	r20, r10
    ce38:	5b 09       	sbc	r21, r11
    ce3a:	b4 01       	movw	r22, r8
    ce3c:	c5 01       	movw	r24, r10
    ce3e:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    ce42:	89 2b       	or	r24, r25
    ce44:	09 f0       	breq	.+2      	; 0xce48 <mqtt_callback(char*, unsigned char*, unsigned int)+0xdee>
    ce46:	04 c1       	rjmp	.+520    	; 0xd050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3220
  {
    mqtt_process_message++;
    ce48:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    ce4c:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    ce50:	01 96       	adiw	r24, 0x01	; 1
    ce52:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    ce56:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3222
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ce5a:	f5 01       	movw	r30, r10
    ce5c:	01 90       	ld	r0, Z+
    ce5e:	00 20       	and	r0, r0
    ce60:	e9 f7       	brne	.-6      	; 0xce5c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe02>
    ce62:	31 97       	sbiw	r30, 0x01	; 1
    ce64:	ea 19       	sub	r30, r10
    ce66:	fb 09       	sbc	r31, r11
    ce68:	9e 2f       	mov	r25, r30
    ce6a:	4e 2f       	mov	r20, r30
    ce6c:	84 2f       	mov	r24, r20
    ce6e:	89 1b       	sub	r24, r25
    ce70:	24 2f       	mov	r18, r20
    ce72:	30 e0       	ldi	r19, 0x00	; 0
    ce74:	d4 01       	movw	r26, r8
    ce76:	0d 90       	ld	r0, X+
    ce78:	00 20       	and	r0, r0
    ce7a:	e9 f7       	brne	.-6      	; 0xce76 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe1c>
    ce7c:	11 97       	sbiw	r26, 0x01	; 1
    ce7e:	a8 19       	sub	r26, r8
    ce80:	b9 09       	sbc	r27, r9
    ce82:	2a 17       	cp	r18, r26
    ce84:	3b 07       	cpc	r19, r27
    ce86:	88 f4       	brcc	.+34     	; 0xceaa <mqtt_callback(char*, unsigned char*, unsigned int)+0xe50>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3224
    {
      str1[cnt] = topic[f];
    ce88:	d5 01       	movw	r26, r10
    ce8a:	a8 0f       	add	r26, r24
    ce8c:	b1 1d       	adc	r27, r1
    ce8e:	28 0d       	add	r18, r8
    ce90:	39 1d       	adc	r19, r9
    ce92:	f9 01       	movw	r30, r18
    ce94:	80 81       	ld	r24, Z
    ce96:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3225
      str1[cnt + 1] = 0;
    ce98:	11 96       	adiw	r26, 0x01	; 1
    ce9a:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3222
  strcat(str1, "/prog_interval/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    ce9c:	4f 5f       	subi	r20, 0xFF	; 255
    ce9e:	e6 cf       	rjmp	.-52     	; 0xce6c <mqtt_callback(char*, unsigned char*, unsigned int)+0xe12>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3211
        }
      }
    }
    else
    {
      log_error(&mqtt_client, "prog/clear bad id");
    cea0:	87 ed       	ldi	r24, 0xD7	; 215
    cea2:	94 e0       	ldi	r25, 0x04	; 4
    cea4:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    cea8:	b1 cf       	rjmp	.-158    	; 0xce0c <mqtt_callback(char*, unsigned char*, unsigned int)+0xdb2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3229
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    ceaa:	68 ed       	ldi	r22, 0xD8	; 216
    ceac:	73 e0       	ldi	r23, 0x03	; 3
    ceae:	c5 01       	movw	r24, r10
    ceb0:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    ceb4:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2916
  char tmp2[32];
  static char my_payload[128];
  boolean ret = 0;
  uint8_t cnt = 0;
  uint8_t id = 0;
  uint8_t id_interval = 0;
    ceb6:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3228
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    ceb8:	d1 2c       	mov	r13, r1
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    ceba:	e6 e0       	ldi	r30, 0x06	; 6
    cebc:	3e 2e       	mov	r3, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
  *start_hour = (start >> 3) & 0b00011111;
  *start_min = (start >> 1 & 0b00000011) * 15;
    cebe:	ff e0       	ldi	r31, 0x0F	; 15
    cec0:	6f 2e       	mov	r6, r31
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3230
    pch = strtok (str1, "/");
    while (pch != NULL)
    cec2:	41 14       	cp	r4, r1
    cec4:	51 04       	cpc	r5, r1
    cec6:	09 f4       	brne	.+2      	; 0xceca <mqtt_callback(char*, unsigned char*, unsigned int)+0xe70>
    cec8:	c3 c0       	rjmp	.+390    	; 0xd050 <mqtt_callback(char*, unsigned char*, unsigned int)+0xff6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3232
    {
      if (cnt == 0) id = atoi(pch);
    ceca:	d1 10       	cpse	r13, r1
    cecc:	7f c0       	rjmp	.+254    	; 0xcfcc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf72>
    cece:	c2 01       	movw	r24, r4
    ced0:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    ced4:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3234
      if (cnt == 1) id_interval = atoi(pch);
      if (id < AVAILABLE_PROGRAM && id_interval < MAX_PROGRAM_INTERVAL)
    ced6:	27 e0       	ldi	r18, 0x07	; 7
    ced8:	27 15       	cp	r18, r7
    ceda:	08 f4       	brcc	.+2      	; 0xcede <mqtt_callback(char*, unsigned char*, unsigned int)+0xe84>
    cedc:	b4 c0       	rjmp	.+360    	; 0xd046 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
    cede:	1b 30       	cpi	r17, 0x0B	; 11
    cee0:	08 f0       	brcs	.+2      	; 0xcee4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe8a>
    cee2:	b1 c0       	rjmp	.+354    	; 0xd046 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfec>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3236
      {
        if ((cnt == 2) && (strcmp(pch, "active") == 0))  thermostat_program_set_interval_active(id, id_interval, atoi(my_payload));
    cee4:	82 e0       	ldi	r24, 0x02	; 2
    cee6:	d8 12       	cpse	r13, r24
    cee8:	a5 c0       	rjmp	.+330    	; 0xd034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
    ceea:	6b eb       	ldi	r22, 0xBB	; 187
    ceec:	73 e0       	ldi	r23, 0x03	; 3
    ceee:	c2 01       	movw	r24, r4
    cef0:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    cef4:	89 2b       	or	r24, r25
    cef6:	b1 f5       	brne	.+108    	; 0xcf64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
    cef8:	87 ed       	ldi	r24, 0xD7	; 215
    cefa:	9a e0       	ldi	r25, 0x0A	; 10
    cefc:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cf00:	c8 2e       	mov	r12, r24
thermostat_program_get_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:302


//// ziska cas termostatu
void thermostat_program_get_time(uint8_t program_id, uint8_t interval_id, uint8_t *start_hour, uint8_t *start_min, uint8_t *stop_hour, uint8_t *stop_min, uint8_t *active)
{
  uint8_t start = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_start_1);
    cf02:	ad e4       	ldi	r26, 0x4D	; 77
    cf04:	7a 9e       	mul	r7, r26
    cf06:	70 01       	movw	r14, r0
    cf08:	11 24       	eor	r1, r1
    cf0a:	bf e0       	ldi	r27, 0x0F	; 15
    cf0c:	eb 1a       	sub	r14, r27
    cf0e:	be ef       	ldi	r27, 0xFE	; 254
    cf10:	fb 0a       	sbc	r15, r27
    cf12:	13 9d       	mul	r17, r3
    cf14:	e0 0c       	add	r14, r0
    cf16:	f1 1c       	adc	r15, r1
    cf18:	11 24       	eor	r1, r1
    cf1a:	c7 01       	movw	r24, r14
    cf1c:	02 96       	adiw	r24, 0x02	; 2
    cf1e:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    cf22:	28 2e       	mov	r2, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:303
  uint8_t stop = EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size)  + (interval_id * eeprom_thermostat_time_period_size_bytes) + eeprom_thermostat_program_stop_1);
    cf24:	c7 01       	movw	r24, r14
    cf26:	03 96       	adiw	r24, 0x03	; 3
    cf28:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:304
  *start_hour = (start >> 3) & 0b00011111;
    cf2c:	42 2d       	mov	r20, r2
    cf2e:	46 95       	lsr	r20
    cf30:	46 95       	lsr	r20
    cf32:	46 95       	lsr	r20
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:305
  *start_min = (start >> 1 & 0b00000011) * 15;
    cf34:	22 2d       	mov	r18, r2
    cf36:	30 e0       	ldi	r19, 0x00	; 0
    cf38:	35 95       	asr	r19
    cf3a:	27 95       	ror	r18
    cf3c:	23 70       	andi	r18, 0x03	; 3
    cf3e:	26 9d       	mul	r18, r6
    cf40:	20 2d       	mov	r18, r0
    cf42:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:306
  *stop_hour = (stop >> 3) & 0b00011111;
    cf44:	08 2f       	mov	r16, r24
    cf46:	06 95       	lsr	r16
    cf48:	06 95       	lsr	r16
    cf4a:	06 95       	lsr	r16
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:307
  *stop_min = (stop & 0b00000011) * 15;
    cf4c:	83 70       	andi	r24, 0x03	; 3
    cf4e:	86 9d       	mul	r24, r6
    cf50:	e0 2c       	mov	r14, r0
    cf52:	11 24       	eor	r1, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:308
  *active = start & 0b00000001;
    cf54:	82 2d       	mov	r24, r2
    cf56:	81 70       	andi	r24, 0x01	; 1
thermostat_program_set_interval_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:380
/***************************************************************************************************************/
void thermostat_program_set_interval_active(uint8_t program_id, uint8_t interval_id, uint8_t set_active)
{
  uint8_t start_hour, start_min, stop_hour, stop_min, active;
  thermostat_program_get_time(program_id, interval_id, &start_hour, &start_min, &stop_hour, &stop_min, &active);
  if (active != set_active)
    cf58:	c8 16       	cp	r12, r24
    cf5a:	21 f0       	breq	.+8      	; 0xcf64 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf0a>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:381
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, set_active);
    cf5c:	61 2f       	mov	r22, r17
    cf5e:	87 2d       	mov	r24, r7
    cf60:	0e 94 2d 50 	call	0xa05a	; 0xa05a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3237
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
    cf64:	6a e4       	ldi	r22, 0x4A	; 74
    cf66:	76 e0       	ldi	r23, 0x06	; 6
    cf68:	c2 01       	movw	r24, r4
    cf6a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    cf6e:	89 2b       	or	r24, r25
    cf70:	49 f4       	brne	.+18     	; 0xcf84 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf2a>
    cf72:	87 ed       	ldi	r24, 0xD7	; 215
    cf74:	9a e0       	ldi	r25, 0x0A	; 10
    cf76:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cf7a:	ac 01       	movw	r20, r24
    cf7c:	61 2f       	mov	r22, r17
    cf7e:	87 2d       	mov	r24, r7
    cf80:	0e 94 11 50 	call	0xa022	; 0xa022 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3238
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
    cf84:	62 e9       	ldi	r22, 0x92	; 146
    cf86:	76 e0       	ldi	r23, 0x06	; 6
    cf88:	c2 01       	movw	r24, r4
    cf8a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    cf8e:	89 2b       	or	r24, r25
    cf90:	09 f0       	breq	.+2      	; 0xcf94 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf3a>
    cf92:	50 c0       	rjmp	.+160    	; 0xd034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:343
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
  char *pch;
  cnt = 0;
  pch = strtok (str, ",");
    cf94:	6d ef       	ldi	r22, 0xFD	; 253
    cf96:	74 e0       	ldi	r23, 0x04	; 4
    cf98:	87 ed       	ldi	r24, 0xD7	; 215
    cf9a:	9a e0       	ldi	r25, 0x0A	; 10
    cf9c:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:340

//// rozparsuje casovy format start_hour,start_min,stop_hour,stop_min,active a ulozi jej
void thermostat_program_set_parse_interval(uint8_t program_id, uint8_t interval_id,  char *str)
{
  uint8_t cnt;
  uint8_t start_hour = 0, start_min = 0, stop_hour = 0, stop_min = 0, active = 0, week = 0;
    cfa0:	f1 2c       	mov	r15, r1
    cfa2:	c1 2c       	mov	r12, r1
    cfa4:	e1 2c       	mov	r14, r1
    cfa6:	21 2c       	mov	r2, r1
    cfa8:	41 2c       	mov	r4, r1
    cfaa:	51 2c       	mov	r5, r1
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:342
  char *pch;
  cnt = 0;
    cfac:	00 e0       	ldi	r16, 0x00	; 0
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:344
  pch = strtok (str, ",");
  while (pch != NULL)
    cfae:	00 97       	sbiw	r24, 0x00	; 0
    cfb0:	99 f1       	breq	.+102    	; 0xd018 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfbe>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:346
  {
    if (cnt == 0) start_hour = atoi(pch);
    cfb2:	01 11       	cpse	r16, r1
    cfb4:	13 c0       	rjmp	.+38     	; 0xcfdc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf82>
    cfb6:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cfba:	58 2e       	mov	r5, r24
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:353
    if (cnt == 2) stop_hour = atoi(pch);
    if (cnt == 3) stop_min = atoi(pch);
    if (cnt == 4) week = atoi(pch);
    if (cnt == 5) active = atoi(pch);

    pch = strtok (NULL, ",");
    cfbc:	6d ef       	ldi	r22, 0xFD	; 253
    cfbe:	74 e0       	ldi	r23, 0x04	; 4
    cfc0:	90 e0       	ldi	r25, 0x00	; 0
    cfc2:	80 e0       	ldi	r24, 0x00	; 0
    cfc4:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:354
    cnt++;
    cfc8:	0f 5f       	subi	r16, 0xFF	; 255
    cfca:	f1 cf       	rjmp	.-30     	; 0xcfae <mqtt_callback(char*, unsigned char*, unsigned int)+0xf54>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3233
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1) id_interval = atoi(pch);
    cfcc:	f1 e0       	ldi	r31, 0x01	; 1
    cfce:	df 12       	cpse	r13, r31
    cfd0:	82 cf       	rjmp	.-252    	; 0xced6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
    cfd2:	c2 01       	movw	r24, r4
    cfd4:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cfd8:	18 2f       	mov	r17, r24
    cfda:	7d cf       	rjmp	.-262    	; 0xced6 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe7c>
thermostat_program_set_parse_interval():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:347
  cnt = 0;
  pch = strtok (str, ",");
  while (pch != NULL)
  {
    if (cnt == 0) start_hour = atoi(pch);
    if (cnt == 1) start_min = atoi(pch);
    cfdc:	01 30       	cpi	r16, 0x01	; 1
    cfde:	21 f4       	brne	.+8      	; 0xcfe8 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf8e>
    cfe0:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cfe4:	48 2e       	mov	r4, r24
    cfe6:	ea cf       	rjmp	.-44     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:348
    if (cnt == 2) stop_hour = atoi(pch);
    cfe8:	02 30       	cpi	r16, 0x02	; 2
    cfea:	21 f4       	brne	.+8      	; 0xcff4 <mqtt_callback(char*, unsigned char*, unsigned int)+0xf9a>
    cfec:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cff0:	28 2e       	mov	r2, r24
    cff2:	e4 cf       	rjmp	.-56     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:349
    if (cnt == 3) stop_min = atoi(pch);
    cff4:	03 30       	cpi	r16, 0x03	; 3
    cff6:	21 f4       	brne	.+8      	; 0xd000 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfa6>
    cff8:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    cffc:	e8 2e       	mov	r14, r24
    cffe:	de cf       	rjmp	.-68     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:350
    if (cnt == 4) week = atoi(pch);
    d000:	04 30       	cpi	r16, 0x04	; 4
    d002:	21 f4       	brne	.+8      	; 0xd00c <mqtt_callback(char*, unsigned char*, unsigned int)+0xfb2>
    d004:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d008:	f8 2e       	mov	r15, r24
    d00a:	d8 cf       	rjmp	.-80     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:351
    if (cnt == 5) active = atoi(pch);
    d00c:	05 30       	cpi	r16, 0x05	; 5
    d00e:	b1 f6       	brne	.-84     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
    d010:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d014:	c8 2e       	mov	r12, r24
    d016:	d2 cf       	rjmp	.-92     	; 0xcfbc <mqtt_callback(char*, unsigned char*, unsigned int)+0xf62>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:356

    pch = strtok (NULL, ",");
    cnt++;
  }
  if (cnt == 6)
    d018:	06 30       	cpi	r16, 0x06	; 6
    d01a:	61 f4       	brne	.+24     	; 0xd034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:358
  {
    thermostat_program_set_time(program_id, interval_id, start_hour, start_min, stop_hour, stop_min, active);
    d01c:	02 2d       	mov	r16, r2
    d01e:	24 2d       	mov	r18, r4
    d020:	45 2d       	mov	r20, r5
    d022:	61 2f       	mov	r22, r17
    d024:	87 2d       	mov	r24, r7
    d026:	0e 94 2d 50 	call	0xa05a	; 0xa05a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:359
    thermostat_program_set_week(program_id, interval_id, week);
    d02a:	4f 2d       	mov	r20, r15
    d02c:	61 2f       	mov	r22, r17
    d02e:	87 2d       	mov	r24, r7
    d030:	0e 94 03 50 	call	0xa006	; 0xa006 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3244
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
      }
      pch = strtok (NULL, "/");
    d034:	68 ed       	ldi	r22, 0xD8	; 216
    d036:	73 e0       	ldi	r23, 0x03	; 3
    d038:	90 e0       	ldi	r25, 0x00	; 0
    d03a:	80 e0       	ldi	r24, 0x00	; 0
    d03c:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    d040:	2c 01       	movw	r4, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3245
      cnt++;
    d042:	d3 94       	inc	r13
    d044:	3e cf       	rjmp	.-388    	; 0xcec2 <mqtt_callback(char*, unsigned char*, unsigned int)+0xe68>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3242
        if ((cnt == 2) && (strcmp(pch, "threshold") == 0))  thermostat_program_set_threshold(id, id_interval , atoi(my_payload));
        if ((cnt == 2) && (strcmp(pch, "time") == 0)) thermostat_program_set_parse_interval(id, id_interval, my_payload);
      }
      else
      {
        log_error(&mqtt_client, "prog_interval/set bad id");
    d046:	8f ef       	ldi	r24, 0xFF	; 255
    d048:	94 e0       	ldi	r25, 0x04	; 4
    d04a:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d04e:	f2 cf       	rjmp	.-28     	; 0xd034 <mqtt_callback(char*, unsigned char*, unsigned int)+0xfda>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3250
      cnt++;
    }
  }
  ///
  //// thermctl-in/XXXXX/ring/default, nastavi vychozi ring na displaji
  strcpy_P(str1, thermctl_header_in);
    d050:	6c e6       	ldi	r22, 0x6C	; 108
    d052:	72 e3       	ldi	r23, 0x32	; 50
    d054:	c5 01       	movw	r24, r10
    d056:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3251
  strcat(str1, device.nazev);
    d05a:	61 e3       	ldi	r22, 0x31	; 49
    d05c:	7c e0       	ldi	r23, 0x0C	; 12
    d05e:	c5 01       	movw	r24, r10
    d060:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3252
  strcat(str1, "/ring/default");
    d064:	68 e1       	ldi	r22, 0x18	; 24
    d066:	75 e0       	ldi	r23, 0x05	; 5
    d068:	c5 01       	movw	r24, r10
    d06a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3253
  if (strcmp(str1, topic) == 0)
    d06e:	b4 01       	movw	r22, r8
    d070:	c5 01       	movw	r24, r10
    d072:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d076:	89 2b       	or	r24, r25
    d078:	a1 f4       	brne	.+40     	; 0xd0a2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1048>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3255
  {
    mqtt_process_message++;
    d07a:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    d07e:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    d082:	01 96       	adiw	r24, 0x01	; 1
    d084:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    d088:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3256
    default_ring = atoi(my_payload);
    d08c:	87 ed       	ldi	r24, 0xD7	; 215
    d08e:	9a e0       	ldi	r25, 0x0A	; 10
    d090:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d094:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    d098:	68 2f       	mov	r22, r24
    d09a:	8c e5       	ldi	r24, 0x5C	; 92
    d09c:	90 e0       	ldi	r25, 0x00	; 0
    d09e:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3261
    default_ring = atoi(my_payload);
    set_default_ring(default_ring);
  }
  ///
  //// thermctl-in/XXXXX/ring/get/IDcko/pid
  strcpy_P(str1, thermctl_header_in);
    d0a2:	6c e6       	ldi	r22, 0x6C	; 108
    d0a4:	72 e3       	ldi	r23, 0x32	; 50
    d0a6:	c5 01       	movw	r24, r10
    d0a8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3262
  strcat(str1, device.nazev);
    d0ac:	61 e3       	ldi	r22, 0x31	; 49
    d0ae:	7c e0       	ldi	r23, 0x0C	; 12
    d0b0:	c5 01       	movw	r24, r10
    d0b2:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3263
  strcat(str1, "/ring/get/");
    d0b6:	66 e2       	ldi	r22, 0x26	; 38
    d0b8:	75 e0       	ldi	r23, 0x05	; 5
    d0ba:	c5 01       	movw	r24, r10
    d0bc:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3264
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d0c0:	f5 01       	movw	r30, r10
    d0c2:	01 90       	ld	r0, Z+
    d0c4:	00 20       	and	r0, r0
    d0c6:	e9 f7       	brne	.-6      	; 0xd0c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1068>
    d0c8:	31 97       	sbiw	r30, 0x01	; 1
    d0ca:	8f 01       	movw	r16, r30
    d0cc:	0a 19       	sub	r16, r10
    d0ce:	1b 09       	sbc	r17, r11
    d0d0:	a8 01       	movw	r20, r16
    d0d2:	b4 01       	movw	r22, r8
    d0d4:	c5 01       	movw	r24, r10
    d0d6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    d0da:	89 2b       	or	r24, r25
    d0dc:	09 f0       	breq	.+2      	; 0xd0e0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1086>
    d0de:	9c c0       	rjmp	.+312    	; 0xd218 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d0e0:	90 2f       	mov	r25, r16
    d0e2:	80 2f       	mov	r24, r16
    d0e4:	89 1b       	sub	r24, r25
    d0e6:	20 2f       	mov	r18, r16
    d0e8:	30 e0       	ldi	r19, 0x00	; 0
    d0ea:	f4 01       	movw	r30, r8
    d0ec:	01 90       	ld	r0, Z+
    d0ee:	00 20       	and	r0, r0
    d0f0:	e9 f7       	brne	.-6      	; 0xd0ec <mqtt_callback(char*, unsigned char*, unsigned int)+0x1092>
    d0f2:	31 97       	sbiw	r30, 0x01	; 1
    d0f4:	e8 19       	sub	r30, r8
    d0f6:	f9 09       	sbc	r31, r9
    d0f8:	2e 17       	cp	r18, r30
    d0fa:	3f 07       	cpc	r19, r31
    d0fc:	58 f4       	brcc	.+22     	; 0xd114 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3269
    {
      str1[cnt] = topic[f];
    d0fe:	f5 01       	movw	r30, r10
    d100:	e8 0f       	add	r30, r24
    d102:	f1 1d       	adc	r31, r1
    d104:	28 0d       	add	r18, r8
    d106:	39 1d       	adc	r19, r9
    d108:	d9 01       	movw	r26, r18
    d10a:	8c 91       	ld	r24, X
    d10c:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3270
      str1[cnt + 1] = 0;
    d10e:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3267
  strcat(str1, device.nazev);
  strcat(str1, "/ring/get/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d110:	0f 5f       	subi	r16, 0xFF	; 255
    d112:	e7 cf       	rjmp	.-50     	; 0xd0e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1088>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3274
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d114:	68 ed       	ldi	r22, 0xD8	; 216
    d116:	73 e0       	ldi	r23, 0x03	; 3
    d118:	c5 01       	movw	r24, r10
    d11a:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3273
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d11e:	61 2c       	mov	r6, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3275
    pch = strtok (str1, "/");
    while (pch != NULL)
    d120:	00 97       	sbiw	r24, 0x00	; 0
    d122:	09 f4       	brne	.+2      	; 0xd126 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10cc>
    d124:	79 c0       	rjmp	.+242    	; 0xd218 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11be>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3277
    {
      if (cnt == 0) id = atoi(my_payload);
    d126:	61 10       	cpse	r6, r1
    d128:	0e c0       	rjmp	.+28     	; 0xd146 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10ec>
    d12a:	87 ed       	ldi	r24, 0xD7	; 215
    d12c:	9a e0       	ldi	r25, 0x0A	; 10
    d12e:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d132:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
      if (id < MAX_THERMOSTAT)
    d134:	b4 e0       	ldi	r27, 0x04	; 4
    d136:	b8 17       	cp	r27, r24
    d138:	08 f0       	brcs	.+2      	; 0xd13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
    d13a:	66 c0       	rjmp	.+204    	; 0xd208 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3284
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    d13c:	85 e3       	ldi	r24, 0x35	; 53
    d13e:	95 e0       	ldi	r25, 0x05	; 5
    d140:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d144:	61 c0       	rjmp	.+194    	; 0xd208 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3278
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(my_payload);
      if (id < MAX_THERMOSTAT)
    d146:	e4 e0       	ldi	r30, 0x04	; 4
    d148:	e7 15       	cp	r30, r7
    d14a:	c0 f3       	brcs	.-16     	; 0xd13c <mqtt_callback(char*, unsigned char*, unsigned int)+0x10e2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3280
      {
        if ((cnt == 1) && (strcmp(pch, "pid") == 0))  mqtt_send_pid_variable(id);
    d14c:	f1 e0       	ldi	r31, 0x01	; 1
    d14e:	6f 12       	cpse	r6, r31
    d150:	5b c0       	rjmp	.+182    	; 0xd208 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
    d152:	61 e3       	ldi	r22, 0x31	; 49
    d154:	75 e0       	ldi	r23, 0x05	; 5
    d156:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d15a:	89 2b       	or	r24, r25
    d15c:	09 f0       	breq	.+2      	; 0xd160 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1106>
    d15e:	54 c0       	rjmp	.+168    	; 0xd208 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11ae>
thermostat_get_pid_p():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:65
  array_pids[idx]->Compute();
}

float thermostat_get_pid_p(uint8_t idx)
{
  return PID_p[idx];
    d160:	c7 2c       	mov	r12, r7
    d162:	d1 2c       	mov	r13, r1
    d164:	76 01       	movw	r14, r12
    d166:	ee 0c       	add	r14, r14
    d168:	ff 1c       	adc	r15, r15
    d16a:	ee 0c       	add	r14, r14
    d16c:	ff 1c       	adc	r15, r15
    d16e:	f7 01       	movw	r30, r14
    d170:	ed 58       	subi	r30, 0x8D	; 141
    d172:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3836
   /thermctl-out/XXXXX/pid/IDX/kd
*/
void mqtt_send_pid_variable(uint8_t idx)
{
  char payload[32];
  dtostrf(thermostat_get_pid_p(idx), 7, 2, payload);
    d174:	60 81       	ld	r22, Z
    d176:	71 81       	ldd	r23, Z+1	; 0x01
    d178:	82 81       	ldd	r24, Z+2	; 0x02
    d17a:	93 81       	ldd	r25, Z+3	; 0x03
    d17c:	8e 01       	movw	r16, r28
    d17e:	08 5b       	subi	r16, 0xB8	; 184
    d180:	1f 4f       	sbci	r17, 0xFF	; 255
    d182:	22 e0       	ldi	r18, 0x02	; 2
    d184:	47 e0       	ldi	r20, 0x07	; 7
    d186:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3837
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kp", payload);
    d18a:	98 01       	movw	r18, r16
    d18c:	4d e7       	ldi	r20, 0x7D	; 125
    d18e:	56 e0       	ldi	r21, 0x06	; 6
    d190:	67 2d       	mov	r22, r7
    d192:	81 e3       	ldi	r24, 0x31	; 49
    d194:	95 e0       	ldi	r25, 0x05	; 5
    d196:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_i():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:85
  return PID_Output[idx];
}

float thermostat_get_pid_i(uint8_t idx)
{
  return PID_i[idx];
    d19a:	f7 01       	movw	r30, r14
    d19c:	e9 57       	subi	r30, 0x79	; 121
    d19e:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3838
  dtostrf(thermostat_get_pid_i(idx), 7, 2, payload);
    d1a0:	60 81       	ld	r22, Z
    d1a2:	71 81       	ldd	r23, Z+1	; 0x01
    d1a4:	82 81       	ldd	r24, Z+2	; 0x02
    d1a6:	93 81       	ldd	r25, Z+3	; 0x03
    d1a8:	22 e0       	ldi	r18, 0x02	; 2
    d1aa:	47 e0       	ldi	r20, 0x07	; 7
    d1ac:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3839
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "ki", payload);
    d1b0:	98 01       	movw	r18, r16
    d1b2:	44 e8       	ldi	r20, 0x84	; 132
    d1b4:	56 e0       	ldi	r21, 0x06	; 6
    d1b6:	67 2d       	mov	r22, r7
    d1b8:	81 e3       	ldi	r24, 0x31	; 49
    d1ba:	95 e0       	ldi	r25, 0x05	; 5
    d1bc:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_d():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:90
}

float thermostat_get_pid_d(uint8_t idx)
{
  return PID_d[idx];
    d1c0:	f7 01       	movw	r30, r14
    d1c2:	e5 56       	subi	r30, 0x65	; 101
    d1c4:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3840
  dtostrf(thermostat_get_pid_d(idx), 7, 2, payload);
    d1c6:	60 81       	ld	r22, Z
    d1c8:	71 81       	ldd	r23, Z+1	; 0x01
    d1ca:	82 81       	ldd	r24, Z+2	; 0x02
    d1cc:	93 81       	ldd	r25, Z+3	; 0x03
    d1ce:	22 e0       	ldi	r18, 0x02	; 2
    d1d0:	47 e0       	ldi	r20, 0x07	; 7
    d1d2:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3841
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "kd", payload);
    d1d6:	98 01       	movw	r18, r16
    d1d8:	4b e8       	ldi	r20, 0x8B	; 139
    d1da:	56 e0       	ldi	r21, 0x06	; 6
    d1dc:	67 2d       	mov	r22, r7
    d1de:	81 e3       	ldi	r24, 0x31	; 49
    d1e0:	95 e0       	ldi	r25, 0x05	; 5
    d1e2:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_get_pid_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:95
}

uint8_t thermostat_get_pid_time(uint8_t idx)
{
  return PID_time[idx];
    d1e6:	f6 01       	movw	r30, r12
    d1e8:	e1 55       	subi	r30, 0x51	; 81
    d1ea:	f6 4f       	sbci	r31, 0xF6	; 246
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3842
  itoa(thermostat_get_pid_time(idx), payload, 10);
    d1ec:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d1ee:	4a e0       	ldi	r20, 0x0A	; 10
    d1f0:	b8 01       	movw	r22, r16
    d1f2:	90 e0       	ldi	r25, 0x00	; 0
    d1f4:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
mqtt_send_pid_variable():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3843
  send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "pid", idx, "time", payload);
    d1f8:	98 01       	movw	r18, r16
    d1fa:	42 e9       	ldi	r20, 0x92	; 146
    d1fc:	56 e0       	ldi	r21, 0x06	; 6
    d1fe:	67 2d       	mov	r22, r7
    d200:	81 e3       	ldi	r24, 0x31	; 49
    d202:	95 e0       	ldi	r25, 0x05	; 5
    d204:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3286
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    d208:	68 ed       	ldi	r22, 0xD8	; 216
    d20a:	73 e0       	ldi	r23, 0x03	; 3
    d20c:	90 e0       	ldi	r25, 0x00	; 0
    d20e:	80 e0       	ldi	r24, 0x00	; 0
    d210:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3287
      cnt++;
    d214:	63 94       	inc	r6
    d216:	84 cf       	rjmp	.-248    	; 0xd120 <mqtt_callback(char*, unsigned char*, unsigned int)+0x10c6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3306
  //// thermctl-in/XXXXX/ring/set/IDcko/output
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kp
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_ki
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_kd
  //// thermctl-in/XXXXX/ring/set/IDcko/pid_time
  strcpy_P(str1, thermctl_header_in);
    d218:	6c e6       	ldi	r22, 0x6C	; 108
    d21a:	72 e3       	ldi	r23, 0x32	; 50
    d21c:	c5 01       	movw	r24, r10
    d21e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3307
  strcat(str1, device.nazev);
    d222:	61 e3       	ldi	r22, 0x31	; 49
    d224:	7c e0       	ldi	r23, 0x0C	; 12
    d226:	c5 01       	movw	r24, r10
    d228:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3308
  strcat(str1, "/ring/set/");
    d22c:	65 e4       	ldi	r22, 0x45	; 69
    d22e:	75 e0       	ldi	r23, 0x05	; 5
    d230:	c5 01       	movw	r24, r10
    d232:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3309
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d236:	f5 01       	movw	r30, r10
    d238:	01 90       	ld	r0, Z+
    d23a:	00 20       	and	r0, r0
    d23c:	e9 f7       	brne	.-6      	; 0xd238 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11de>
    d23e:	31 97       	sbiw	r30, 0x01	; 1
    d240:	8f 01       	movw	r16, r30
    d242:	0a 19       	sub	r16, r10
    d244:	1b 09       	sbc	r17, r11
    d246:	a8 01       	movw	r20, r16
    d248:	b4 01       	movw	r22, r8
    d24a:	c5 01       	movw	r24, r10
    d24c:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    d250:	89 2b       	or	r24, r25
    d252:	09 f0       	breq	.+2      	; 0xd256 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fc>
    d254:	c8 c1       	rjmp	.+912    	; 0xd5e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d256:	90 2f       	mov	r25, r16
    d258:	80 2f       	mov	r24, r16
    d25a:	89 1b       	sub	r24, r25
    d25c:	20 2f       	mov	r18, r16
    d25e:	30 e0       	ldi	r19, 0x00	; 0
    d260:	f4 01       	movw	r30, r8
    d262:	01 90       	ld	r0, Z+
    d264:	00 20       	and	r0, r0
    d266:	e9 f7       	brne	.-6      	; 0xd262 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1208>
    d268:	31 97       	sbiw	r30, 0x01	; 1
    d26a:	e8 19       	sub	r30, r8
    d26c:	f9 09       	sbc	r31, r9
    d26e:	2e 17       	cp	r18, r30
    d270:	3f 07       	cpc	r19, r31
    d272:	58 f4       	brcc	.+22     	; 0xd28a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1230>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3314
    {
      str1[cnt] = topic[f];
    d274:	f5 01       	movw	r30, r10
    d276:	e8 0f       	add	r30, r24
    d278:	f1 1d       	adc	r31, r1
    d27a:	28 0d       	add	r18, r8
    d27c:	39 1d       	adc	r19, r9
    d27e:	d9 01       	movw	r26, r18
    d280:	8c 91       	ld	r24, X
    d282:	80 83       	st	Z, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3315
      str1[cnt + 1] = 0;
    d284:	11 82       	std	Z+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3312
  strcat(str1, device.nazev);
  strcat(str1, "/ring/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d286:	0f 5f       	subi	r16, 0xFF	; 255
    d288:	e7 cf       	rjmp	.-50     	; 0xd258 <mqtt_callback(char*, unsigned char*, unsigned int)+0x11fe>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3319
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    d28a:	68 ed       	ldi	r22, 0xD8	; 216
    d28c:	73 e0       	ldi	r23, 0x03	; 3
    d28e:	c5 01       	movw	r24, r10
    d290:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    d294:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3318
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    d296:	d1 2c       	mov	r13, r1
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    d298:	51 e2       	ldi	r21, 0x21	; 33
    d29a:	e5 2e       	mov	r14, r21
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3320
    pch = strtok (str1, "/");
    while (pch != NULL)
    d29c:	01 15       	cp	r16, r1
    d29e:	11 05       	cpc	r17, r1
    d2a0:	09 f4       	brne	.+2      	; 0xd2a4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x124a>
    d2a2:	a1 c1       	rjmp	.+834    	; 0xd5e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x158c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3322
    {
      if (cnt == 0) id = atoi(pch);
    d2a4:	d1 10       	cpse	r13, r1
    d2a6:	0d c0       	rjmp	.+26     	; 0xd2c2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1268>
    d2a8:	c8 01       	movw	r24, r16
    d2aa:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d2ae:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
      if (id < MAX_THERMOSTAT)
    d2b0:	b4 e0       	ldi	r27, 0x04	; 4
    d2b2:	b8 17       	cp	r27, r24
    d2b4:	08 f0       	brcs	.+2      	; 0xd2b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
    d2b6:	8e c1       	rjmp	.+796    	; 0xd5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3360
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
    d2b8:	85 e3       	ldi	r24, 0x35	; 53
    d2ba:	95 e0       	ldi	r25, 0x05	; 5
    d2bc:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d2c0:	89 c1       	rjmp	.+786    	; 0xd5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3323
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (id < MAX_THERMOSTAT)
    d2c2:	e4 e0       	ldi	r30, 0x04	; 4
    d2c4:	e7 15       	cp	r30, r7
    d2c6:	c0 f3       	brcs	.-16     	; 0xd2b8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x125e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3325
      {
        if ((cnt == 1) && (strcmp(pch, "name") == 0)) thermostat_ring_set_name(id, my_payload);
    d2c8:	f1 e0       	ldi	r31, 0x01	; 1
    d2ca:	df 12       	cpse	r13, r31
    d2cc:	83 c1       	rjmp	.+774    	; 0xd5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
    d2ce:	61 eb       	ldi	r22, 0xB1	; 177
    d2d0:	73 e0       	ldi	r23, 0x03	; 3
    d2d2:	c8 01       	movw	r24, r16
    d2d4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d2d8:	89 2b       	or	r24, r25
    d2da:	29 f4       	brne	.+10     	; 0xd2e6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x128c>
    d2dc:	67 ed       	ldi	r22, 0xD7	; 215
    d2de:	7a e0       	ldi	r23, 0x0A	; 10
    d2e0:	87 2d       	mov	r24, r7
    d2e2:	0e 94 0c 51 	call	0xa218	; 0xa218 <thermostat_ring_set_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3326
        if ((cnt == 1) && (strcmp(pch, "program") == 0))
    d2e6:	64 e5       	ldi	r22, 0x54	; 84
    d2e8:	76 e0       	ldi	r23, 0x06	; 6
    d2ea:	c8 01       	movw	r24, r16
    d2ec:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d2f0:	89 2b       	or	r24, r25
    d2f2:	81 f4       	brne	.+32     	; 0xd314 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3327
          if (atoi(my_payload) < AVAILABLE_PROGRAM)
    d2f4:	87 ed       	ldi	r24, 0xD7	; 215
    d2f6:	9a e0       	ldi	r25, 0x0A	; 10
    d2f8:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d2fc:	88 30       	cpi	r24, 0x08	; 8
    d2fe:	91 05       	cpc	r25, r1
    d300:	4c f4       	brge	.+18     	; 0xd314 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12ba>
thermostat_ring_set_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:148
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
}
void thermostat_ring_set_program_id(uint8_t idx, uint8_t id)
{
  return EEPROM.write((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program, id);
    d302:	7e 9c       	mul	r7, r14
    d304:	90 01       	movw	r18, r0
    d306:	11 24       	eor	r1, r1
    d308:	68 2f       	mov	r22, r24
    d30a:	c9 01       	movw	r24, r18
    d30c:	85 5a       	subi	r24, 0xA5	; 165
    d30e:	9e 4f       	sbci	r25, 0xFE	; 254
    d310:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3329
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
    d314:	6c e5       	ldi	r22, 0x5C	; 92
    d316:	76 e0       	ldi	r23, 0x06	; 6
    d318:	c8 01       	movw	r24, r16
    d31a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d31e:	89 2b       	or	r24, r25
    d320:	79 f4       	brne	.+30     	; 0xd340 <mqtt_callback(char*, unsigned char*, unsigned int)+0x12e6>
    d322:	87 ed       	ldi	r24, 0xD7	; 215
    d324:	9a e0       	ldi	r25, 0x0A	; 10
    d326:	0e 94 5a aa 	call	0x154b4	; 0x154b4 <atof>
    d32a:	20 e0       	ldi	r18, 0x00	; 0
    d32c:	30 e0       	ldi	r19, 0x00	; 0
    d32e:	40 e2       	ldi	r20, 0x20	; 32
    d330:	51 e4       	ldi	r21, 0x41	; 65
    d332:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
    d336:	0e 94 b9 b5 	call	0x16b72	; 0x16b72 <__fixsfsi>
    d33a:	87 2d       	mov	r24, r7
    d33c:	0e 94 f0 50 	call	0xa1e0	; 0xa1e0 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3330
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
    d340:	6a e4       	ldi	r22, 0x4A	; 74
    d342:	76 e0       	ldi	r23, 0x06	; 6
    d344:	c8 01       	movw	r24, r16
    d346:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d34a:	89 2b       	or	r24, r25
    d34c:	41 f4       	brne	.+16     	; 0xd35e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1304>
    d34e:	87 ed       	ldi	r24, 0xD7	; 215
    d350:	9a e0       	ldi	r25, 0x0A	; 10
    d352:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d356:	bc 01       	movw	r22, r24
    d358:	87 2d       	mov	r24, r7
    d35a:	0e 94 f0 50 	call	0xa1e0	; 0xa1e0 <thermostat_ring_set_mezni(unsigned char, int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3331
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
    d35e:	68 e6       	ldi	r22, 0x68	; 104
    d360:	76 e0       	ldi	r23, 0x06	; 6
    d362:	c8 01       	movw	r24, r16
    d364:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d368:	89 2b       	or	r24, r25
    d36a:	09 f0       	breq	.+2      	; 0xd36e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1314>
    d36c:	52 c0       	rjmp	.+164    	; 0xd412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b8>
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4053
/// funkce prevadi ciselnou hodnotu na skutecne pojmenovani
uint8_t convert_text_mode(char *str2)
{
  uint8_t mode = 0;
  if (strcmp(str2, "off") == 0) mode = TERM_MODE_OFF;
  if (strcmp(str2, "heat") == 0) mode = TERM_MODE_MAX;
    d36e:	60 e5       	ldi	r22, 0x50	; 80
    d370:	75 e0       	ldi	r23, 0x05	; 5
    d372:	87 ed       	ldi	r24, 0xD7	; 215
    d374:	9a e0       	ldi	r25, 0x0A	; 10
    d376:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d37a:	ff 24       	eor	r15, r15
    d37c:	f3 94       	inc	r15
    d37e:	89 2b       	or	r24, r25
    d380:	09 f0       	breq	.+2      	; 0xd384 <mqtt_callback(char*, unsigned char*, unsigned int)+0x132a>
    d382:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4054
  if (strcmp(str2, "manual") == 0) mode = TERM_MODE_MAN_HEAT;
    d384:	65 e5       	ldi	r22, 0x55	; 85
    d386:	75 e0       	ldi	r23, 0x05	; 5
    d388:	87 ed       	ldi	r24, 0xD7	; 215
    d38a:	9a e0       	ldi	r25, 0x0A	; 10
    d38c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d390:	89 2b       	or	r24, r25
    d392:	11 f4       	brne	.+4      	; 0xd398 <mqtt_callback(char*, unsigned char*, unsigned int)+0x133e>
_Z13mqtt_callbackPcPhj():
    d394:	43 e0       	ldi	r20, 0x03	; 3
    d396:	f4 2e       	mov	r15, r20
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4055
  if (strcmp(str2, "auto") == 0) mode = TERM_MODE_PROG;
    d398:	6c e5       	ldi	r22, 0x5C	; 92
    d39a:	75 e0       	ldi	r23, 0x05	; 5
    d39c:	87 ed       	ldi	r24, 0xD7	; 215
    d39e:	9a e0       	ldi	r25, 0x0A	; 10
    d3a0:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d3a4:	89 2b       	or	r24, r25
    d3a6:	11 f4       	brne	.+4      	; 0xd3ac <mqtt_callback(char*, unsigned char*, unsigned int)+0x1352>
_Z13mqtt_callbackPcPhj():
    d3a8:	32 e0       	ldi	r19, 0x02	; 2
    d3aa:	f3 2e       	mov	r15, r19
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4056
  if (strcmp(str2, "cool") == 0) mode = TERM_MODE_CLIMATE_MAX;
    d3ac:	61 e6       	ldi	r22, 0x61	; 97
    d3ae:	75 e0       	ldi	r23, 0x05	; 5
    d3b0:	87 ed       	ldi	r24, 0xD7	; 215
    d3b2:	9a e0       	ldi	r25, 0x0A	; 10
    d3b4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d3b8:	89 2b       	or	r24, r25
    d3ba:	11 f4       	brne	.+4      	; 0xd3c0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1366>
_Z13mqtt_callbackPcPhj():
    d3bc:	24 e0       	ldi	r18, 0x04	; 4
    d3be:	f2 2e       	mov	r15, r18
convert_text_mode():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4057
  if (strcmp(str2, "fan_only") == 0) mode = TERM_MODE_FAN;
    d3c0:	66 e6       	ldi	r22, 0x66	; 102
    d3c2:	75 e0       	ldi	r23, 0x05	; 5
    d3c4:	87 ed       	ldi	r24, 0xD7	; 215
    d3c6:	9a e0       	ldi	r25, 0x0A	; 10
    d3c8:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d3cc:	89 2b       	or	r24, r25
    d3ce:	11 f4       	brne	.+4      	; 0xd3d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x137a>
_Z13mqtt_callbackPcPhj():
    d3d0:	96 e0       	ldi	r25, 0x06	; 6
    d3d2:	f9 2e       	mov	r15, r25
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3333
            thermostat_ring_set_program_id(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "threshold-f") == 0)) thermostat_ring_set_mezni(id, atof(my_payload) * 10); /// thereshold hodnota presne ve floatu * 10
        if ((cnt == 1) && (strcmp(pch, "threshold") == 0)) thermostat_ring_set_mezni(id, atoi(my_payload));
        if ((cnt == 1) && (strcmp(pch, "text_mode") == 0))
        {
          active = convert_text_mode(my_payload);
    d3d4:	c4 5d       	subi	r28, 0xD4	; 212
    d3d6:	de 4f       	sbci	r29, 0xFE	; 254
    d3d8:	f8 82       	st	Y, r15
    d3da:	cc 52       	subi	r28, 0x2C	; 44
    d3dc:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3334
          thermostat_ring_set_mode(id, active);
    d3de:	6f 2d       	mov	r22, r15
    d3e0:	87 2d       	mov	r24, r7
    d3e2:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3335
          if (active == TERM_MODE_MAN_HEAT)
    d3e6:	c4 5d       	subi	r28, 0xD4	; 212
    d3e8:	de 4f       	sbci	r29, 0xFE	; 254
    d3ea:	88 81       	ld	r24, Y
    d3ec:	cc 52       	subi	r28, 0x2C	; 44
    d3ee:	d1 40       	sbci	r29, 0x01	; 1
    d3f0:	83 30       	cpi	r24, 0x03	; 3
    d3f2:	21 f4       	brne	.+8      	; 0xd3fc <mqtt_callback(char*, unsigned char*, unsigned int)+0x13a2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3336
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    d3f4:	60 e0       	ldi	r22, 0x00	; 0
    d3f6:	87 2d       	mov	r24, r7
    d3f8:	0e 94 b4 96 	call	0x12d68	; 0x12d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3337
          if (active == TERM_MODE_MAN_COOL)
    d3fc:	c4 5d       	subi	r28, 0xD4	; 212
    d3fe:	de 4f       	sbci	r29, 0xFE	; 254
    d400:	88 81       	ld	r24, Y
    d402:	cc 52       	subi	r28, 0x2C	; 44
    d404:	d1 40       	sbci	r29, 0x01	; 1
    d406:	85 30       	cpi	r24, 0x05	; 5
    d408:	21 f4       	brne	.+8      	; 0xd412 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13b8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3338
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    d40a:	61 e0       	ldi	r22, 0x01	; 1
    d40c:	87 2d       	mov	r24, r7
    d40e:	0e 94 b4 96 	call	0x12d68	; 0x12d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3340
        }
        if ((cnt == 1) && (strcmp(pch, "mode") == 0))
    d412:	6d e6       	ldi	r22, 0x6D	; 109
    d414:	76 e0       	ldi	r23, 0x06	; 6
    d416:	c8 01       	movw	r24, r16
    d418:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d41c:	89 2b       	or	r24, r25
    d41e:	19 f5       	brne	.+70     	; 0xd466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3342
        {
          active = atoi(my_payload);
    d420:	87 ed       	ldi	r24, 0xD7	; 215
    d422:	9a e0       	ldi	r25, 0x0A	; 10
    d424:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d428:	c4 5d       	subi	r28, 0xD4	; 212
    d42a:	de 4f       	sbci	r29, 0xFE	; 254
    d42c:	88 83       	st	Y, r24
    d42e:	cc 52       	subi	r28, 0x2C	; 44
    d430:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3343
          thermostat_ring_set_mode(id, active);
    d432:	68 2f       	mov	r22, r24
    d434:	87 2d       	mov	r24, r7
    d436:	0e 94 d5 50 	call	0xa1aa	; 0xa1aa <thermostat_ring_set_mode(unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3344
          if (active == TERM_MODE_MAN_HEAT)
    d43a:	c4 5d       	subi	r28, 0xD4	; 212
    d43c:	de 4f       	sbci	r29, 0xFE	; 254
    d43e:	88 81       	ld	r24, Y
    d440:	cc 52       	subi	r28, 0x2C	; 44
    d442:	d1 40       	sbci	r29, 0x01	; 1
    d444:	83 30       	cpi	r24, 0x03	; 3
    d446:	21 f4       	brne	.+8      	; 0xd450 <mqtt_callback(char*, unsigned char*, unsigned int)+0x13f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3345
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 0);
    d448:	60 e0       	ldi	r22, 0x00	; 0
    d44a:	87 2d       	mov	r24, r7
    d44c:	0e 94 b4 96 	call	0x12d68	; 0x12d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3346
          if (active == TERM_MODE_MAN_COOL)
    d450:	c4 5d       	subi	r28, 0xD4	; 212
    d452:	de 4f       	sbci	r29, 0xFE	; 254
    d454:	88 81       	ld	r24, Y
    d456:	cc 52       	subi	r28, 0x2C	; 44
    d458:	d1 40       	sbci	r29, 0x01	; 1
    d45a:	85 30       	cpi	r24, 0x05	; 5
    d45c:	21 f4       	brne	.+8      	; 0xd466 <mqtt_callback(char*, unsigned char*, unsigned int)+0x140c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3347
            thermostat_ring_update_bites(id, STATUS_BIT_HEAT_OR_COOL, 1);
    d45e:	61 e0       	ldi	r22, 0x01	; 1
    d460:	87 2d       	mov	r24, r7
    d462:	0e 94 b4 96 	call	0x12d68	; 0x12d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3349
        }
        if ((cnt == 1) && (strcmp(pch, "tds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload));
    d466:	67 eb       	ldi	r22, 0xB7	; 183
    d468:	73 e0       	ldi	r23, 0x03	; 3
    d46a:	c8 01       	movw	r24, r16
    d46c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d470:	89 2b       	or	r24, r25
    d472:	69 f4       	brne	.+26     	; 0xd48e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1434>
    d474:	87 ed       	ldi	r24, 0xD7	; 215
    d476:	9a e0       	ldi	r25, 0x0A	; 10
    d478:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
}
void thermostat_ring_set_asociate_tds(uint8_t idx, uint8_t id)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds, id);
    d47c:	7e 9c       	mul	r7, r14
    d47e:	90 01       	movw	r18, r0
    d480:	11 24       	eor	r1, r1
    d482:	68 2f       	mov	r22, r24
    d484:	c9 01       	movw	r24, r18
    d486:	84 5a       	subi	r24, 0xA4	; 164
    d488:	9e 4f       	sbci	r25, 0xFE	; 254
    d48a:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3350
        if ((cnt == 1) && (strcmp(pch, "rtds") == 0)) thermostat_ring_set_asociate_tds(id, atoi(my_payload) + TDS_MEMORY_MAP_RTDS);
    d48e:	66 eb       	ldi	r22, 0xB6	; 182
    d490:	73 e0       	ldi	r23, 0x03	; 3
    d492:	c8 01       	movw	r24, r16
    d494:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d498:	89 2b       	or	r24, r25
    d49a:	69 f4       	brne	.+26     	; 0xd4b6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x145c>
    d49c:	87 ed       	ldi	r24, 0xD7	; 215
    d49e:	9a e0       	ldi	r25, 0x0A	; 10
    d4a0:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d4a4:	60 e1       	ldi	r22, 0x10	; 16
    d4a6:	68 0f       	add	r22, r24
thermostat_ring_set_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:170
    d4a8:	7e 9c       	mul	r7, r14
    d4aa:	c0 01       	movw	r24, r0
    d4ac:	11 24       	eor	r1, r1
    d4ae:	84 5a       	subi	r24, 0xA4	; 164
    d4b0:	9e 4f       	sbci	r25, 0xFE	; 254
    d4b2:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3351
        if ((cnt == 1) && (strcmp(pch, "active") == 0)) thermostat_ring_set_active(id, atoi(my_payload));
    d4b6:	6b eb       	ldi	r22, 0xBB	; 187
    d4b8:	73 e0       	ldi	r23, 0x03	; 3
    d4ba:	c8 01       	movw	r24, r16
    d4bc:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d4c0:	89 2b       	or	r24, r25
    d4c2:	69 f4       	brne	.+26     	; 0xd4de <mqtt_callback(char*, unsigned char*, unsigned int)+0x1484>
    d4c4:	87 ed       	ldi	r24, 0xD7	; 215
    d4c6:	9a e0       	ldi	r25, 0x0A	; 10
    d4c8:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
thermostat_ring_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:137
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active);
}
void thermostat_ring_set_active(uint8_t idx, uint8_t ready)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_active, ready);
    d4cc:	7e 9c       	mul	r7, r14
    d4ce:	90 01       	movw	r18, r0
    d4d0:	11 24       	eor	r1, r1
    d4d2:	68 2f       	mov	r22, r24
    d4d4:	c9 01       	movw	r24, r18
    d4d6:	83 5a       	subi	r24, 0xA3	; 163
    d4d8:	9e 4f       	sbci	r25, 0xFE	; 254
    d4da:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3352
        if ((cnt == 1) && (strcmp(pch, "output") == 0)) thermostat_ring_set_output(id, atoi(my_payload));
    d4de:	62 e7       	ldi	r22, 0x72	; 114
    d4e0:	76 e0       	ldi	r23, 0x06	; 6
    d4e2:	c8 01       	movw	r24, r16
    d4e4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d4e8:	89 2b       	or	r24, r25
    d4ea:	69 f4       	brne	.+26     	; 0xd506 <mqtt_callback(char*, unsigned char*, unsigned int)+0x14ac>
    d4ec:	87 ed       	ldi	r24, 0xD7	; 215
    d4ee:	9a e0       	ldi	r25, 0x0A	; 10
    d4f0:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
thermostat_ring_set_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:127
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
}
void thermostat_ring_set_output(uint8_t idx, uint8_t output)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output, output);
    d4f4:	7e 9c       	mul	r7, r14
    d4f6:	90 01       	movw	r18, r0
    d4f8:	11 24       	eor	r1, r1
    d4fa:	68 2f       	mov	r22, r24
    d4fc:	c9 01       	movw	r24, r18
    d4fe:	81 5a       	subi	r24, 0xA1	; 161
    d500:	9e 4f       	sbci	r25, 0xFE	; 254
    d502:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3353
        if ((cnt == 1) && (strcmp(pch, "pid_kp") == 0)) thermostat_ring_pid_set_kp(id, atof(my_payload));
    d506:	69 e7       	ldi	r22, 0x79	; 121
    d508:	76 e0       	ldi	r23, 0x06	; 6
    d50a:	c8 01       	movw	r24, r16
    d50c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d510:	89 2b       	or	r24, r25
    d512:	a1 f4       	brne	.+40     	; 0xd53c <mqtt_callback(char*, unsigned char*, unsigned int)+0x14e2>
    d514:	87 ed       	ldi	r24, 0xD7	; 215
    d516:	9a e0       	ldi	r25, 0x0A	; 10
    d518:	0e 94 5a aa 	call	0x154b4	; 0x154b4 <atof>
thermostat_ring_pid_set_kp():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:241
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer, PID_time[idx]);
}

void thermostat_ring_pid_set_kp(uint8_t id, float x)
{
  PID_p[id] = x;
    d51c:	24 e0       	ldi	r18, 0x04	; 4
    d51e:	72 9e       	mul	r7, r18
    d520:	f0 01       	movw	r30, r0
    d522:	11 24       	eor	r1, r1
    d524:	ed 58       	subi	r30, 0x8D	; 141
    d526:	f6 4f       	sbci	r31, 0xF6	; 246
    d528:	60 83       	st	Z, r22
    d52a:	71 83       	std	Z+1, r23	; 0x01
    d52c:	82 83       	std	Z+2, r24	; 0x02
    d52e:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:242
  thermostat_ring_update_pid_parameters(id);
    d530:	87 2d       	mov	r24, r7
    d532:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:243
  thermostat_ring_set_pid_eeprom(id);
    d536:	87 2d       	mov	r24, r7
    d538:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3354
        if ((cnt == 1) && (strcmp(pch, "pid_ki") == 0)) thermostat_ring_pid_set_ki(id, atof(my_payload));
    d53c:	60 e8       	ldi	r22, 0x80	; 128
    d53e:	76 e0       	ldi	r23, 0x06	; 6
    d540:	c8 01       	movw	r24, r16
    d542:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d546:	89 2b       	or	r24, r25
    d548:	a1 f4       	brne	.+40     	; 0xd572 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1518>
    d54a:	87 ed       	ldi	r24, 0xD7	; 215
    d54c:	9a e0       	ldi	r25, 0x0A	; 10
    d54e:	0e 94 5a aa 	call	0x154b4	; 0x154b4 <atof>
thermostat_ring_pid_set_ki():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:247
}
void thermostat_ring_pid_set_ki(uint8_t id, float x)
{
  PID_i[id] = x;
    d552:	a4 e0       	ldi	r26, 0x04	; 4
    d554:	7a 9e       	mul	r7, r26
    d556:	f0 01       	movw	r30, r0
    d558:	11 24       	eor	r1, r1
    d55a:	e9 57       	subi	r30, 0x79	; 121
    d55c:	f6 4f       	sbci	r31, 0xF6	; 246
    d55e:	60 83       	st	Z, r22
    d560:	71 83       	std	Z+1, r23	; 0x01
    d562:	82 83       	std	Z+2, r24	; 0x02
    d564:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:248
  thermostat_ring_update_pid_parameters(id);
    d566:	87 2d       	mov	r24, r7
    d568:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:249
  thermostat_ring_set_pid_eeprom(id);
    d56c:	87 2d       	mov	r24, r7
    d56e:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3355
        if ((cnt == 1) && (strcmp(pch, "pid_kd") == 0)) thermostat_ring_pid_set_kd(id, atof(my_payload));
    d572:	67 e8       	ldi	r22, 0x87	; 135
    d574:	76 e0       	ldi	r23, 0x06	; 6
    d576:	c8 01       	movw	r24, r16
    d578:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d57c:	89 2b       	or	r24, r25
    d57e:	a1 f4       	brne	.+40     	; 0xd5a8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x154e>
    d580:	87 ed       	ldi	r24, 0xD7	; 215
    d582:	9a e0       	ldi	r25, 0x0A	; 10
    d584:	0e 94 5a aa 	call	0x154b4	; 0x154b4 <atof>
thermostat_ring_pid_set_kd():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:253
}
void thermostat_ring_pid_set_kd(uint8_t id, float x)
{
  PID_d[id] = x;
    d588:	b4 e0       	ldi	r27, 0x04	; 4
    d58a:	7b 9e       	mul	r7, r27
    d58c:	f0 01       	movw	r30, r0
    d58e:	11 24       	eor	r1, r1
    d590:	e5 56       	subi	r30, 0x65	; 101
    d592:	f6 4f       	sbci	r31, 0xF6	; 246
    d594:	60 83       	st	Z, r22
    d596:	71 83       	std	Z+1, r23	; 0x01
    d598:	82 83       	std	Z+2, r24	; 0x02
    d59a:	93 83       	std	Z+3, r25	; 0x03
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:254
  thermostat_ring_update_pid_parameters(id);
    d59c:	87 2d       	mov	r24, r7
    d59e:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:255
  thermostat_ring_set_pid_eeprom(id);
    d5a2:	87 2d       	mov	r24, r7
    d5a4:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3356
        if ((cnt == 1) && (strcmp(pch, "pid_time") == 0)) thermostat_ring_pid_set_time(id, atoi(my_payload));
    d5a8:	6e e8       	ldi	r22, 0x8E	; 142
    d5aa:	76 e0       	ldi	r23, 0x06	; 6
    d5ac:	c8 01       	movw	r24, r16
    d5ae:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d5b2:	89 2b       	or	r24, r25
    d5b4:	79 f4       	brne	.+30     	; 0xd5d4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x157a>
    d5b6:	87 ed       	ldi	r24, 0xD7	; 215
    d5b8:	9a e0       	ldi	r25, 0x0A	; 10
    d5ba:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:260
}

void thermostat_ring_pid_set_time(uint8_t id, uint8_t timer)
{
  PID_time[id] = timer;
    d5be:	e7 2d       	mov	r30, r7
    d5c0:	f0 e0       	ldi	r31, 0x00	; 0
    d5c2:	e1 55       	subi	r30, 0x51	; 81
    d5c4:	f6 4f       	sbci	r31, 0xF6	; 246
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3356
    d5c6:	80 83       	st	Z, r24
thermostat_ring_pid_set_time():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:261
  thermostat_ring_update_pid_parameters(id);
    d5c8:	87 2d       	mov	r24, r7
    d5ca:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:262
  thermostat_ring_set_pid_eeprom(id);
    d5ce:	87 2d       	mov	r24, r7
    d5d0:	0e 94 91 50 	call	0xa122	; 0xa122 <thermostat_ring_set_pid_eeprom(unsigned char)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3362
      }
      else
      {
        log_error(&mqtt_client, "ring/set bad id");
      }
      pch = strtok (NULL, "/");
    d5d4:	68 ed       	ldi	r22, 0xD8	; 216
    d5d6:	73 e0       	ldi	r23, 0x03	; 3
    d5d8:	90 e0       	ldi	r25, 0x00	; 0
    d5da:	80 e0       	ldi	r24, 0x00	; 0
    d5dc:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    d5e0:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3363
      cnt++;
    d5e2:	d3 94       	inc	r13
    d5e4:	5b ce       	rjmp	.-842    	; 0xd29c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1242>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3368
    }

  }
  //// nastaveni ringu do vychoziho stavu
  strcpy_P(str1, thermctl_header_in);
    d5e6:	6c e6       	ldi	r22, 0x6C	; 108
    d5e8:	72 e3       	ldi	r23, 0x32	; 50
    d5ea:	c5 01       	movw	r24, r10
    d5ec:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3369
  strcat(str1, device.nazev);
    d5f0:	61 e3       	ldi	r22, 0x31	; 49
    d5f2:	7c e0       	ldi	r23, 0x0C	; 12
    d5f4:	c5 01       	movw	r24, r10
    d5f6:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3370
  strcat(str1, "/ring/clear");
    d5fa:	6f e6       	ldi	r22, 0x6F	; 111
    d5fc:	75 e0       	ldi	r23, 0x05	; 5
    d5fe:	c5 01       	movw	r24, r10
    d600:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3371
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d604:	f5 01       	movw	r30, r10
    d606:	01 90       	ld	r0, Z+
    d608:	00 20       	and	r0, r0
    d60a:	e9 f7       	brne	.-6      	; 0xd606 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ac>
    d60c:	31 97       	sbiw	r30, 0x01	; 1
    d60e:	af 01       	movw	r20, r30
    d610:	4a 19       	sub	r20, r10
    d612:	5b 09       	sbc	r21, r11
    d614:	b4 01       	movw	r22, r8
    d616:	c5 01       	movw	r24, r10
    d618:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    d61c:	89 2b       	or	r24, r25
    d61e:	a1 f4       	brne	.+40     	; 0xd648 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3373
  {
    mqtt_process_message++;
    d620:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    d624:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    d628:	01 96       	adiw	r24, 0x01	; 1
    d62a:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    d62e:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3374
    id = atoi(my_payload);
    d632:	87 ed       	ldi	r24, 0xD7	; 215
    d634:	9a e0       	ldi	r25, 0x0A	; 10
    d636:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    d63a:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3375
    if (id < MAX_THERMOSTAT)
    d63c:	e4 e0       	ldi	r30, 0x04	; 4
    d63e:	e8 17       	cp	r30, r24
    d640:	08 f4       	brcc	.+2      	; 0xd644 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ea>
    d642:	99 c1       	rjmp	.+818    	; 0xd976 <mqtt_callback(char*, unsigned char*, unsigned int)+0x191c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3377
    {
      thermostat_ring_clear(id);
    d644:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3388
  }
  ////////
  ////////
  //// nastavovani vlastnosti site
  //// ziskani nastaveni site
  strcpy_P(str1, thermctl_header_in);
    d648:	6c e6       	ldi	r22, 0x6C	; 108
    d64a:	72 e3       	ldi	r23, 0x32	; 50
    d64c:	c5 01       	movw	r24, r10
    d64e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3389
  strcat(str1, device.nazev);
    d652:	61 e3       	ldi	r22, 0x31	; 49
    d654:	7c e0       	ldi	r23, 0x0C	; 12
    d656:	c5 01       	movw	r24, r10
    d658:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3390
  strcat(str1, "/network/get/config");
    d65c:	6d e8       	ldi	r22, 0x8D	; 141
    d65e:	75 e0       	ldi	r23, 0x05	; 5
    d660:	c5 01       	movw	r24, r10
    d662:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3391
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d666:	f5 01       	movw	r30, r10
    d668:	01 90       	ld	r0, Z+
    d66a:	00 20       	and	r0, r0
    d66c:	e9 f7       	brne	.-6      	; 0xd668 <mqtt_callback(char*, unsigned char*, unsigned int)+0x160e>
    d66e:	31 97       	sbiw	r30, 0x01	; 1
    d670:	af 01       	movw	r20, r30
    d672:	4a 19       	sub	r20, r10
    d674:	5b 09       	sbc	r21, r11
    d676:	b4 01       	movw	r22, r8
    d678:	c5 01       	movw	r24, r10
    d67a:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    d67e:	89 2b       	or	r24, r25
    d680:	09 f0       	breq	.+2      	; 0xd684 <mqtt_callback(char*, unsigned char*, unsigned int)+0x162a>
    d682:	2f c1       	rjmp	.+606    	; 0xd8e2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1888>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3393
  {
    mqtt_process_message++;
    d684:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    d688:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    d68c:	01 96       	adiw	r24, 0x01	; 1
    d68e:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    d692:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:262
//// thermctl-out/XXXXX/network/name
void send_network_config(PubSubClient *mqtt_client)
{
  char payload[20];
  char str_topic[32];
  payload[0] = 0;
    d696:	c8 5f       	subi	r28, 0xF8	; 248
    d698:	de 4f       	sbci	r29, 0xFE	; 254
    d69a:	18 82       	st	Y, r1
    d69c:	c8 50       	subi	r28, 0x08	; 8
    d69e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:263
  createString(payload, ':', device.mac, 6, 16);
    d6a0:	00 e1       	ldi	r16, 0x10	; 16
    d6a2:	26 e0       	ldi	r18, 0x06	; 6
    d6a4:	4b e1       	ldi	r20, 0x1B	; 27
    d6a6:	5c e0       	ldi	r21, 0x0C	; 12
    d6a8:	6a e3       	ldi	r22, 0x3A	; 58
    d6aa:	ce 01       	movw	r24, r28
    d6ac:	88 5f       	subi	r24, 0xF8	; 248
    d6ae:	9e 4f       	sbci	r25, 0xFE	; 254
    d6b0:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:264
  strcpy_P(str_topic, network_mac);
    d6b4:	6d ed       	ldi	r22, 0xDD	; 221
    d6b6:	71 e3       	ldi	r23, 0x31	; 49
    d6b8:	ce 01       	movw	r24, r28
    d6ba:	88 5b       	subi	r24, 0xB8	; 184
    d6bc:	9f 4f       	sbci	r25, 0xFF	; 255
    d6be:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:265
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d6c2:	ae 01       	movw	r20, r28
    d6c4:	48 5f       	subi	r20, 0xF8	; 248
    d6c6:	5e 4f       	sbci	r21, 0xFE	; 254
    d6c8:	be 01       	movw	r22, r28
    d6ca:	68 5b       	subi	r22, 0xB8	; 184
    d6cc:	7f 4f       	sbci	r23, 0xFF	; 255
    d6ce:	8e e0       	ldi	r24, 0x0E	; 14
    d6d0:	9e e0       	ldi	r25, 0x0E	; 14
    d6d2:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:267
  ///
  payload[0] = 0;
    d6d6:	c8 5f       	subi	r28, 0xF8	; 248
    d6d8:	de 4f       	sbci	r29, 0xFE	; 254
    d6da:	18 82       	st	Y, r1
    d6dc:	c8 50       	subi	r28, 0x08	; 8
    d6de:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:268
  createString(payload, '.', device.myIP, 4, 10);
    d6e0:	0a e0       	ldi	r16, 0x0A	; 10
    d6e2:	24 e0       	ldi	r18, 0x04	; 4
    d6e4:	41 e2       	ldi	r20, 0x21	; 33
    d6e6:	5c e0       	ldi	r21, 0x0C	; 12
    d6e8:	6e e2       	ldi	r22, 0x2E	; 46
    d6ea:	ce 01       	movw	r24, r28
    d6ec:	88 5f       	subi	r24, 0xF8	; 248
    d6ee:	9e 4f       	sbci	r25, 0xFE	; 254
    d6f0:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:269
  strcpy_P(str_topic, network_ip);
    d6f4:	67 ec       	ldi	r22, 0xC7	; 199
    d6f6:	75 e3       	ldi	r23, 0x35	; 53
    d6f8:	ce 01       	movw	r24, r28
    d6fa:	88 5b       	subi	r24, 0xB8	; 184
    d6fc:	9f 4f       	sbci	r25, 0xFF	; 255
    d6fe:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:270
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d702:	ae 01       	movw	r20, r28
    d704:	48 5f       	subi	r20, 0xF8	; 248
    d706:	5e 4f       	sbci	r21, 0xFE	; 254
    d708:	be 01       	movw	r22, r28
    d70a:	68 5b       	subi	r22, 0xB8	; 184
    d70c:	7f 4f       	sbci	r23, 0xFF	; 255
    d70e:	8e e0       	ldi	r24, 0x0E	; 14
    d710:	9e e0       	ldi	r25, 0x0E	; 14
    d712:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:272
  ///
  payload[0] = 0;
    d716:	c8 5f       	subi	r28, 0xF8	; 248
    d718:	de 4f       	sbci	r29, 0xFE	; 254
    d71a:	18 82       	st	Y, r1
    d71c:	c8 50       	subi	r28, 0x08	; 8
    d71e:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:273
  createString(payload, '.', device.myMASK, 4, 10);
    d720:	24 e0       	ldi	r18, 0x04	; 4
    d722:	45 e2       	ldi	r20, 0x25	; 37
    d724:	5c e0       	ldi	r21, 0x0C	; 12
    d726:	6e e2       	ldi	r22, 0x2E	; 46
    d728:	ce 01       	movw	r24, r28
    d72a:	88 5f       	subi	r24, 0xF8	; 248
    d72c:	9e 4f       	sbci	r25, 0xFE	; 254
    d72e:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:274
  strcpy_P(str_topic, network_netmask);
    d732:	6d ec       	ldi	r22, 0xCD	; 205
    d734:	71 e3       	ldi	r23, 0x31	; 49
    d736:	ce 01       	movw	r24, r28
    d738:	88 5b       	subi	r24, 0xB8	; 184
    d73a:	9f 4f       	sbci	r25, 0xFF	; 255
    d73c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:275
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d740:	ae 01       	movw	r20, r28
    d742:	48 5f       	subi	r20, 0xF8	; 248
    d744:	5e 4f       	sbci	r21, 0xFE	; 254
    d746:	be 01       	movw	r22, r28
    d748:	68 5b       	subi	r22, 0xB8	; 184
    d74a:	7f 4f       	sbci	r23, 0xFF	; 255
    d74c:	8e e0       	ldi	r24, 0x0E	; 14
    d74e:	9e e0       	ldi	r25, 0x0E	; 14
    d750:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:277
  ///
  payload[0] = 0;
    d754:	c8 5f       	subi	r28, 0xF8	; 248
    d756:	de 4f       	sbci	r29, 0xFE	; 254
    d758:	18 82       	st	Y, r1
    d75a:	c8 50       	subi	r28, 0x08	; 8
    d75c:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:278
  createString(payload, '.', device.myGW, 4, 10);
    d75e:	24 e0       	ldi	r18, 0x04	; 4
    d760:	4d e2       	ldi	r20, 0x2D	; 45
    d762:	5c e0       	ldi	r21, 0x0C	; 12
    d764:	6e e2       	ldi	r22, 0x2E	; 46
    d766:	ce 01       	movw	r24, r28
    d768:	88 5f       	subi	r24, 0xF8	; 248
    d76a:	9e 4f       	sbci	r25, 0xFE	; 254
    d76c:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:279
  strcpy_P(str_topic, network_gw);
    d770:	62 ec       	ldi	r22, 0xC2	; 194
    d772:	71 e3       	ldi	r23, 0x31	; 49
    d774:	ce 01       	movw	r24, r28
    d776:	88 5b       	subi	r24, 0xB8	; 184
    d778:	9f 4f       	sbci	r25, 0xFF	; 255
    d77a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:280
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d77e:	ae 01       	movw	r20, r28
    d780:	48 5f       	subi	r20, 0xF8	; 248
    d782:	5e 4f       	sbci	r21, 0xFE	; 254
    d784:	be 01       	movw	r22, r28
    d786:	68 5b       	subi	r22, 0xB8	; 184
    d788:	7f 4f       	sbci	r23, 0xFF	; 255
    d78a:	8e e0       	ldi	r24, 0x0E	; 14
    d78c:	9e e0       	ldi	r25, 0x0E	; 14
    d78e:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:282
  ///
  payload[0] = 0;
    d792:	c8 5f       	subi	r28, 0xF8	; 248
    d794:	de 4f       	sbci	r29, 0xFE	; 254
    d796:	18 82       	st	Y, r1
    d798:	c8 50       	subi	r28, 0x08	; 8
    d79a:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:283
  createString(payload, '.', device.myDNS, 4, 10);
    d79c:	24 e0       	ldi	r18, 0x04	; 4
    d79e:	49 e2       	ldi	r20, 0x29	; 41
    d7a0:	5c e0       	ldi	r21, 0x0C	; 12
    d7a2:	6e e2       	ldi	r22, 0x2E	; 46
    d7a4:	ce 01       	movw	r24, r28
    d7a6:	88 5f       	subi	r24, 0xF8	; 248
    d7a8:	9e 4f       	sbci	r25, 0xFE	; 254
    d7aa:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:284
  strcpy_P(str_topic, network_dns);
    d7ae:	66 eb       	ldi	r22, 0xB6	; 182
    d7b0:	71 e3       	ldi	r23, 0x31	; 49
    d7b2:	ce 01       	movw	r24, r28
    d7b4:	88 5b       	subi	r24, 0xB8	; 184
    d7b6:	9f 4f       	sbci	r25, 0xFF	; 255
    d7b8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:285
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d7bc:	ae 01       	movw	r20, r28
    d7be:	48 5f       	subi	r20, 0xF8	; 248
    d7c0:	5e 4f       	sbci	r21, 0xFE	; 254
    d7c2:	be 01       	movw	r22, r28
    d7c4:	68 5b       	subi	r22, 0xB8	; 184
    d7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    d7c8:	8e e0       	ldi	r24, 0x0E	; 14
    d7ca:	9e e0       	ldi	r25, 0x0E	; 14
    d7cc:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:287
  ///
  payload[0] = 0;
    d7d0:	c8 5f       	subi	r28, 0xF8	; 248
    d7d2:	de 4f       	sbci	r29, 0xFE	; 254
    d7d4:	18 82       	st	Y, r1
    d7d6:	c8 50       	subi	r28, 0x08	; 8
    d7d8:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:288
  createString(payload, '.', device.ntp_server, 4, 10);
    d7da:	24 e0       	ldi	r18, 0x04	; 4
    d7dc:	49 e6       	ldi	r20, 0x69	; 105
    d7de:	5c e0       	ldi	r21, 0x0C	; 12
    d7e0:	6e e2       	ldi	r22, 0x2E	; 46
    d7e2:	ce 01       	movw	r24, r28
    d7e4:	88 5f       	subi	r24, 0xF8	; 248
    d7e6:	9e 4f       	sbci	r25, 0xFE	; 254
    d7e8:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:289
  strcpy_P(str_topic, network_ntp);
    d7ec:	6a ea       	ldi	r22, 0xAA	; 170
    d7ee:	71 e3       	ldi	r23, 0x31	; 49
    d7f0:	ce 01       	movw	r24, r28
    d7f2:	88 5b       	subi	r24, 0xB8	; 184
    d7f4:	9f 4f       	sbci	r25, 0xFF	; 255
    d7f6:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:290
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d7fa:	ae 01       	movw	r20, r28
    d7fc:	48 5f       	subi	r20, 0xF8	; 248
    d7fe:	5e 4f       	sbci	r21, 0xFE	; 254
    d800:	be 01       	movw	r22, r28
    d802:	68 5b       	subi	r22, 0xB8	; 184
    d804:	7f 4f       	sbci	r23, 0xFF	; 255
    d806:	8e e0       	ldi	r24, 0x0E	; 14
    d808:	9e e0       	ldi	r25, 0x0E	; 14
    d80a:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:292
  ///
  payload[0] = 0;
    d80e:	c8 5f       	subi	r28, 0xF8	; 248
    d810:	de 4f       	sbci	r29, 0xFE	; 254
    d812:	18 82       	st	Y, r1
    d814:	c8 50       	subi	r28, 0x08	; 8
    d816:	d1 40       	sbci	r29, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:293
  createString(payload, '.', device.mqtt_server, 4, 10);
    d818:	24 e0       	ldi	r18, 0x04	; 4
    d81a:	4b e3       	ldi	r20, 0x3B	; 59
    d81c:	5c e0       	ldi	r21, 0x0C	; 12
    d81e:	6e e2       	ldi	r22, 0x2E	; 46
    d820:	ce 01       	movw	r24, r28
    d822:	88 5f       	subi	r24, 0xF8	; 248
    d824:	9e 4f       	sbci	r25, 0xFE	; 254
    d826:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:294
  strcpy_P(str_topic, network_mqtt_host);
    d82a:	68 e9       	ldi	r22, 0x98	; 152
    d82c:	71 e3       	ldi	r23, 0x31	; 49
    d82e:	ce 01       	movw	r24, r28
    d830:	88 5b       	subi	r24, 0xB8	; 184
    d832:	9f 4f       	sbci	r25, 0xFF	; 255
    d834:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:295
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d838:	ae 01       	movw	r20, r28
    d83a:	48 5f       	subi	r20, 0xF8	; 248
    d83c:	5e 4f       	sbci	r21, 0xFE	; 254
    d83e:	be 01       	movw	r22, r28
    d840:	68 5b       	subi	r22, 0xB8	; 184
    d842:	7f 4f       	sbci	r23, 0xFF	; 255
    d844:	8e e0       	ldi	r24, 0x0E	; 14
    d846:	9e e0       	ldi	r25, 0x0E	; 14
    d848:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    d84c:	4a e0       	ldi	r20, 0x0A	; 10
    d84e:	be 01       	movw	r22, r28
    d850:	68 5f       	subi	r22, 0xF8	; 248
    d852:	7e 4f       	sbci	r23, 0xFE	; 254
    d854:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <device+0x24>
    d858:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <device+0x25>
    d85c:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_network_config():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:298
  ///
  itoa(device.mqtt_port, payload, 10);
  strcpy_P(str_topic, network_mqtt_port);
    d860:	66 e8       	ldi	r22, 0x86	; 134
    d862:	71 e3       	ldi	r23, 0x31	; 49
    d864:	ce 01       	movw	r24, r28
    d866:	88 5b       	subi	r24, 0xB8	; 184
    d868:	9f 4f       	sbci	r25, 0xFF	; 255
    d86a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:299
  send_mqtt_general_payload(mqtt_client, str_topic, payload);
    d86e:	ae 01       	movw	r20, r28
    d870:	48 5f       	subi	r20, 0xF8	; 248
    d872:	5e 4f       	sbci	r21, 0xFE	; 254
    d874:	be 01       	movw	r22, r28
    d876:	68 5b       	subi	r22, 0xB8	; 184
    d878:	7f 4f       	sbci	r23, 0xFF	; 255
    d87a:	8e e0       	ldi	r24, 0x0E	; 14
    d87c:	9e e0       	ldi	r25, 0x0E	; 14
    d87e:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:301
  ///
  strcpy_P(str_topic, network_mqtt_user);
    d882:	64 e7       	ldi	r22, 0x74	; 116
    d884:	71 e3       	ldi	r23, 0x31	; 49
    d886:	ce 01       	movw	r24, r28
    d888:	88 5b       	subi	r24, 0xB8	; 184
    d88a:	9f 4f       	sbci	r25, 0xFF	; 255
    d88c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:302
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_user);
    d890:	41 e4       	ldi	r20, 0x41	; 65
    d892:	5c e0       	ldi	r21, 0x0C	; 12
    d894:	be 01       	movw	r22, r28
    d896:	68 5b       	subi	r22, 0xB8	; 184
    d898:	7f 4f       	sbci	r23, 0xFF	; 255
    d89a:	8e e0       	ldi	r24, 0x0E	; 14
    d89c:	9e e0       	ldi	r25, 0x0E	; 14
    d89e:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:304
  ///
  strcpy_P(str_topic, network_mqtt_key);
    d8a2:	63 e6       	ldi	r22, 0x63	; 99
    d8a4:	71 e3       	ldi	r23, 0x31	; 49
    d8a6:	ce 01       	movw	r24, r28
    d8a8:	88 5b       	subi	r24, 0xB8	; 184
    d8aa:	9f 4f       	sbci	r25, 0xFF	; 255
    d8ac:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:305
  send_mqtt_general_payload(mqtt_client, str_topic, device.mqtt_key);
    d8b0:	45 e5       	ldi	r20, 0x55	; 85
    d8b2:	5c e0       	ldi	r21, 0x0C	; 12
    d8b4:	be 01       	movw	r22, r28
    d8b6:	68 5b       	subi	r22, 0xB8	; 184
    d8b8:	7f 4f       	sbci	r23, 0xFF	; 255
    d8ba:	8e e0       	ldi	r24, 0x0E	; 14
    d8bc:	9e e0       	ldi	r25, 0x0E	; 14
    d8be:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:307
  ///
  strcpy_P(str_topic, network_name);
    d8c2:	66 e5       	ldi	r22, 0x56	; 86
    d8c4:	71 e3       	ldi	r23, 0x31	; 49
    d8c6:	ce 01       	movw	r24, r28
    d8c8:	88 5b       	subi	r24, 0xB8	; 184
    d8ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d8cc:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:308
  send_mqtt_general_payload(mqtt_client, str_topic, device.nazev);
    d8d0:	41 e3       	ldi	r20, 0x31	; 49
    d8d2:	5c e0       	ldi	r21, 0x0C	; 12
    d8d4:	be 01       	movw	r22, r28
    d8d6:	68 5b       	subi	r22, 0xB8	; 184
    d8d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d8da:	8e e0       	ldi	r24, 0x0E	; 14
    d8dc:	9e e0       	ldi	r25, 0x0E	; 14
    d8de:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3408
  //// thermctl-in/XXXXX/network/set/mqtt_host
  //// thermctl-in/XXXXX/network/set/mqtt_port
  //// thermctl-in/XXXXX/network/set/mqtt_user
  //// thermctl-in/XXXXX/network/set/mqtt_key
  //// thermctl-in/XXXXX/network/set/name
  strcpy_P(str1, thermctl_header_in);
    d8e2:	6c e6       	ldi	r22, 0x6C	; 108
    d8e4:	72 e3       	ldi	r23, 0x32	; 50
    d8e6:	c5 01       	movw	r24, r10
    d8e8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3409
  strcat(str1, device.nazev);
    d8ec:	61 e3       	ldi	r22, 0x31	; 49
    d8ee:	7c e0       	ldi	r23, 0x0C	; 12
    d8f0:	c5 01       	movw	r24, r10
    d8f2:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3410
  strcat(str1, "/network/set/");
    d8f6:	61 ea       	ldi	r22, 0xA1	; 161
    d8f8:	75 e0       	ldi	r23, 0x05	; 5
    d8fa:	c5 01       	movw	r24, r10
    d8fc:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3411
  if (strncmp(str1, topic, strlen(str1)) == 0)
    d900:	f5 01       	movw	r30, r10
    d902:	01 90       	ld	r0, Z+
    d904:	00 20       	and	r0, r0
    d906:	e9 f7       	brne	.-6      	; 0xd902 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18a8>
    d908:	31 97       	sbiw	r30, 0x01	; 1
    d90a:	af 01       	movw	r20, r30
    d90c:	4a 19       	sub	r20, r10
    d90e:	5b 09       	sbc	r21, r11
    d910:	b4 01       	movw	r22, r8
    d912:	c5 01       	movw	r24, r10
    d914:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    d918:	89 2b       	or	r24, r25
    d91a:	09 f0       	breq	.+2      	; 0xd91e <mqtt_callback(char*, unsigned char*, unsigned int)+0x18c4>
    d91c:	f1 c0       	rjmp	.+482    	; 0xdb00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3413
  {
    mqtt_process_message++;
    d91e:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    d922:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    d926:	01 96       	adiw	r24, 0x01	; 1
    d928:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    d92c:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d930:	f5 01       	movw	r30, r10
    d932:	01 90       	ld	r0, Z+
    d934:	00 20       	and	r0, r0
    d936:	e9 f7       	brne	.-6      	; 0xd932 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18d8>
    d938:	31 97       	sbiw	r30, 0x01	; 1
    d93a:	ea 19       	sub	r30, r10
    d93c:	fb 09       	sbc	r31, r11
    d93e:	9e 2f       	mov	r25, r30
    d940:	4e 2f       	mov	r20, r30
    d942:	84 2f       	mov	r24, r20
    d944:	89 1b       	sub	r24, r25
    d946:	24 2f       	mov	r18, r20
    d948:	30 e0       	ldi	r19, 0x00	; 0
    d94a:	d4 01       	movw	r26, r8
    d94c:	0d 90       	ld	r0, X+
    d94e:	00 20       	and	r0, r0
    d950:	e9 f7       	brne	.-6      	; 0xd94c <mqtt_callback(char*, unsigned char*, unsigned int)+0x18f2>
    d952:	11 97       	sbiw	r26, 0x01	; 1
    d954:	a8 19       	sub	r26, r8
    d956:	b9 09       	sbc	r27, r9
    d958:	2a 17       	cp	r18, r26
    d95a:	3b 07       	cpc	r19, r27
    d95c:	88 f4       	brcc	.+34     	; 0xd980 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1926>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3417
    {
      str1[cnt] = topic[f];
    d95e:	d5 01       	movw	r26, r10
    d960:	a8 0f       	add	r26, r24
    d962:	b1 1d       	adc	r27, r1
    d964:	28 0d       	add	r18, r8
    d966:	39 1d       	adc	r19, r9
    d968:	f9 01       	movw	r30, r18
    d96a:	80 81       	ld	r24, Z
    d96c:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3418
      str1[cnt + 1] = 0;
    d96e:	11 96       	adiw	r26, 0x01	; 1
    d970:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3415
  strcat(str1, "/network/set/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    d972:	4f 5f       	subi	r20, 0xFF	; 255
    d974:	e6 cf       	rjmp	.-52     	; 0xd942 <mqtt_callback(char*, unsigned char*, unsigned int)+0x18e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3381
    {
      thermostat_ring_clear(id);
    }
    else
    {
      log_error(&mqtt_client, "ring/clear bad id");
    d976:	8b e7       	ldi	r24, 0x7B	; 123
    d978:	95 e0       	ldi	r25, 0x05	; 5
    d97a:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
    d97e:	64 ce       	rjmp	.-824    	; 0xd648 <mqtt_callback(char*, unsigned char*, unsigned int)+0x15ee>
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:94
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
  pch = strtok (data, "/");
    d980:	68 ed       	ldi	r22, 0xD8	; 216
    d982:	73 e0       	ldi	r23, 0x03	; 3
    d984:	c5 01       	movw	r24, r10
    d986:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    d98a:	7c 01       	movw	r14, r24
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:93
uint8_t setting_network(char *data, char *my_payload)
{
  uint8_t cnt;
  uint8_t ret = 0;
  char *pch;
  cnt = 0;
    d98c:	10 e0       	ldi	r17, 0x00	; 0
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:95
  pch = strtok (data, "/");
  while (pch != NULL)
    d98e:	e1 14       	cp	r14, r1
    d990:	f1 04       	cpc	r15, r1
    d992:	09 f4       	brne	.+2      	; 0xd996 <mqtt_callback(char*, unsigned char*, unsigned int)+0x193c>
    d994:	a9 c0       	rjmp	.+338    	; 0xdae8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a8e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:97
  {
    if (strcmp(pch, "mac") == 0)
    d996:	6f ea       	ldi	r22, 0xAF	; 175
    d998:	75 e0       	ldi	r23, 0x05	; 5
    d99a:	c7 01       	movw	r24, r14
    d99c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d9a0:	89 2b       	or	r24, r25
    d9a2:	41 f4       	brne	.+16     	; 0xd9b4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x195a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:99
    {
      parseBytes(my_payload, ':', device.mac, 6, 10);
    d9a4:	46 e0       	ldi	r20, 0x06	; 6
    d9a6:	50 e0       	ldi	r21, 0x00	; 0
    d9a8:	6b e1       	ldi	r22, 0x1B	; 27
    d9aa:	7c e0       	ldi	r23, 0x0C	; 12
    d9ac:	8a e3       	ldi	r24, 0x3A	; 58
    d9ae:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:100
      cnt = 1;
    d9b2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:102
    }
    if (strcmp(pch, "ip") == 0)
    d9b4:	63 eb       	ldi	r22, 0xB3	; 179
    d9b6:	75 e0       	ldi	r23, 0x05	; 5
    d9b8:	c7 01       	movw	r24, r14
    d9ba:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d9be:	89 2b       	or	r24, r25
    d9c0:	41 f4       	brne	.+16     	; 0xd9d2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1978>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:104
    {
      parseBytes(my_payload, '.', device.myIP, 4, 10);
    d9c2:	44 e0       	ldi	r20, 0x04	; 4
    d9c4:	50 e0       	ldi	r21, 0x00	; 0
    d9c6:	61 e2       	ldi	r22, 0x21	; 33
    d9c8:	7c e0       	ldi	r23, 0x0C	; 12
    d9ca:	8e e2       	ldi	r24, 0x2E	; 46
    d9cc:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:105
      cnt = 1;
    d9d0:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:107
    }
    if (strcmp(pch, "netmask") == 0)
    d9d2:	66 eb       	ldi	r22, 0xB6	; 182
    d9d4:	75 e0       	ldi	r23, 0x05	; 5
    d9d6:	c7 01       	movw	r24, r14
    d9d8:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d9dc:	89 2b       	or	r24, r25
    d9de:	41 f4       	brne	.+16     	; 0xd9f0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1996>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:109
    {
      parseBytes(my_payload, '.', device.myMASK, 4, 10);
    d9e0:	44 e0       	ldi	r20, 0x04	; 4
    d9e2:	50 e0       	ldi	r21, 0x00	; 0
    d9e4:	65 e2       	ldi	r22, 0x25	; 37
    d9e6:	7c e0       	ldi	r23, 0x0C	; 12
    d9e8:	8e e2       	ldi	r24, 0x2E	; 46
    d9ea:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:110
      cnt = 1;
    d9ee:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:112
    }
    if (strcmp(pch, "gw") == 0)
    d9f0:	6e eb       	ldi	r22, 0xBE	; 190
    d9f2:	75 e0       	ldi	r23, 0x05	; 5
    d9f4:	c7 01       	movw	r24, r14
    d9f6:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    d9fa:	89 2b       	or	r24, r25
    d9fc:	41 f4       	brne	.+16     	; 0xda0e <mqtt_callback(char*, unsigned char*, unsigned int)+0x19b4>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:114
    {
      parseBytes(my_payload, '.', device.myGW, 4, 10);
    d9fe:	44 e0       	ldi	r20, 0x04	; 4
    da00:	50 e0       	ldi	r21, 0x00	; 0
    da02:	6d e2       	ldi	r22, 0x2D	; 45
    da04:	7c e0       	ldi	r23, 0x0C	; 12
    da06:	8e e2       	ldi	r24, 0x2E	; 46
    da08:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:115
      cnt = 1;
    da0c:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:117
    }
    if (strcmp(pch, "dns") == 0)
    da0e:	61 ec       	ldi	r22, 0xC1	; 193
    da10:	75 e0       	ldi	r23, 0x05	; 5
    da12:	c7 01       	movw	r24, r14
    da14:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    da18:	89 2b       	or	r24, r25
    da1a:	41 f4       	brne	.+16     	; 0xda2c <mqtt_callback(char*, unsigned char*, unsigned int)+0x19d2>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:119
    {
      parseBytes(my_payload, '.', device.myDNS, 4, 10);
    da1c:	44 e0       	ldi	r20, 0x04	; 4
    da1e:	50 e0       	ldi	r21, 0x00	; 0
    da20:	69 e2       	ldi	r22, 0x29	; 41
    da22:	7c e0       	ldi	r23, 0x0C	; 12
    da24:	8e e2       	ldi	r24, 0x2E	; 46
    da26:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:120
      cnt = 1;
    da2a:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:122
    }
    if (strcmp(pch, "ntp") == 0)
    da2c:	65 ec       	ldi	r22, 0xC5	; 197
    da2e:	75 e0       	ldi	r23, 0x05	; 5
    da30:	c7 01       	movw	r24, r14
    da32:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    da36:	89 2b       	or	r24, r25
    da38:	41 f4       	brne	.+16     	; 0xda4a <mqtt_callback(char*, unsigned char*, unsigned int)+0x19f0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:124
    {
      parseBytes(my_payload, '.', device.ntp_server, 4, 10);
    da3a:	44 e0       	ldi	r20, 0x04	; 4
    da3c:	50 e0       	ldi	r21, 0x00	; 0
    da3e:	69 e6       	ldi	r22, 0x69	; 105
    da40:	7c e0       	ldi	r23, 0x0C	; 12
    da42:	8e e2       	ldi	r24, 0x2E	; 46
    da44:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:125
      cnt = 1;
    da48:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:127
    }
    if (strcmp(pch, "mqtt_host") == 0)
    da4a:	69 ec       	ldi	r22, 0xC9	; 201
    da4c:	75 e0       	ldi	r23, 0x05	; 5
    da4e:	c7 01       	movw	r24, r14
    da50:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    da54:	89 2b       	or	r24, r25
    da56:	41 f4       	brne	.+16     	; 0xda68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a0e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:129
    {
      parseBytes(my_payload, '.', device.mqtt_server, 4, 10);
    da58:	44 e0       	ldi	r20, 0x04	; 4
    da5a:	50 e0       	ldi	r21, 0x00	; 0
    da5c:	6b e3       	ldi	r22, 0x3B	; 59
    da5e:	7c e0       	ldi	r23, 0x0C	; 12
    da60:	8e e2       	ldi	r24, 0x2E	; 46
    da62:	0e 94 f3 88 	call	0x111e6	; 0x111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:130
      cnt = 1;
    da66:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:132
    }
    if (strcmp(pch, "mqtt_port") == 0)
    da68:	63 ed       	ldi	r22, 0xD3	; 211
    da6a:	75 e0       	ldi	r23, 0x05	; 5
    da6c:	c7 01       	movw	r24, r14
    da6e:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    da72:	89 2b       	or	r24, r25
    da74:	49 f4       	brne	.+18     	; 0xda88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a2e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:134
    {
      device.mqtt_port = atoi(my_payload);
    da76:	87 ed       	ldi	r24, 0xD7	; 215
    da78:	9a e0       	ldi	r25, 0x0A	; 10
    da7a:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    da7e:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <device+0x25>
    da82:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device+0x24>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:135
      cnt = 1;
    da86:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:137
    }
    if (strcmp(pch, "mqtt_user") == 0)
    da88:	6d ed       	ldi	r22, 0xDD	; 221
    da8a:	75 e0       	ldi	r23, 0x05	; 5
    da8c:	c7 01       	movw	r24, r14
    da8e:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    da92:	89 2b       	or	r24, r25
    da94:	39 f4       	brne	.+14     	; 0xdaa4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a4a>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:139
    {
      strcpy(device.mqtt_user, my_payload);
    da96:	67 ed       	ldi	r22, 0xD7	; 215
    da98:	7a e0       	ldi	r23, 0x0A	; 10
    da9a:	81 e4       	ldi	r24, 0x41	; 65
    da9c:	9c e0       	ldi	r25, 0x0C	; 12
    da9e:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:140
      cnt = 1;
    daa2:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:142
    }
    if (strcmp(pch, "mqtt_pass") == 0)
    daa4:	67 ee       	ldi	r22, 0xE7	; 231
    daa6:	75 e0       	ldi	r23, 0x05	; 5
    daa8:	c7 01       	movw	r24, r14
    daaa:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    daae:	89 2b       	or	r24, r25
    dab0:	39 f4       	brne	.+14     	; 0xdac0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a66>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:144
    {
      strcpy(device.mqtt_key, my_payload);
    dab2:	67 ed       	ldi	r22, 0xD7	; 215
    dab4:	7a e0       	ldi	r23, 0x0A	; 10
    dab6:	85 e5       	ldi	r24, 0x55	; 85
    dab8:	9c e0       	ldi	r25, 0x0C	; 12
    daba:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:145
      cnt = 1;
    dabe:	11 e0       	ldi	r17, 0x01	; 1
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:147
    }
    if (strcmp(pch, "name") == 0)
    dac0:	61 eb       	ldi	r22, 0xB1	; 177
    dac2:	73 e0       	ldi	r23, 0x03	; 3
    dac4:	c7 01       	movw	r24, r14
    dac6:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    daca:	89 2b       	or	r24, r25
    dacc:	29 f4       	brne	.+10     	; 0xdad8 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a7e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:149
    {
      device_set_name(my_payload);
    dace:	87 ed       	ldi	r24, 0xD7	; 215
    dad0:	9a e0       	ldi	r25, 0x0A	; 10
    dad2:	0e 94 27 52 	call	0xa44e	; 0xa44e <device_set_name(char*)>
_Z13mqtt_callbackPcPhj():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:150
      cnt = 2;
    dad6:	12 e0       	ldi	r17, 0x02	; 2
setting_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:152
    }
    pch = strtok (NULL, "/");
    dad8:	68 ed       	ldi	r22, 0xD8	; 216
    dada:	73 e0       	ldi	r23, 0x03	; 3
    dadc:	90 e0       	ldi	r25, 0x00	; 0
    dade:	80 e0       	ldi	r24, 0x00	; 0
    dae0:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    dae4:	7c 01       	movw	r14, r24
    dae6:	53 cf       	rjmp	.-346    	; 0xd98e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1934>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3422
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = setting_network(str1, my_payload);
    if (cnt == 1)
    dae8:	11 30       	cpi	r17, 0x01	; 1
    daea:	41 f4       	brne	.+16     	; 0xdafc <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3424
    {
      save_setup_network();
    daec:	0e 94 4f 52 	call	0xa49e	; 0xa49e <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3429
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    {
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    daf0:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    daf4:	80 68       	ori	r24, 0x80	; 128
    daf6:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <selftest_data>
    dafa:	02 c0       	rjmp	.+4      	; 0xdb00 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1aa6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3427
    if (cnt == 1)
    {
      save_setup_network();
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
    if (cnt == 2)
    dafc:	12 30       	cpi	r17, 0x02	; 2
    dafe:	c1 f3       	breq	.-16     	; 0xdaf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1a96>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3434
      sbi(selftest_data, SELFTEST_RESTART_NEEDED); //TODO predelat na volani funkce
    }
  }
  //// priradi k menu pro rizeni intezity svetla vystup
  //// thermctl-in/XXXXX//light/set/IDX/output
  strcpy_P(str1, thermctl_header_in);
    db00:	6c e6       	ldi	r22, 0x6C	; 108
    db02:	72 e3       	ldi	r23, 0x32	; 50
    db04:	c5 01       	movw	r24, r10
    db06:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3435
  strcat(str1, device.nazev);
    db0a:	61 e3       	ldi	r22, 0x31	; 49
    db0c:	7c e0       	ldi	r23, 0x0C	; 12
    db0e:	c5 01       	movw	r24, r10
    db10:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3436
  strcat(str1, "/light/set/");
    db14:	61 ef       	ldi	r22, 0xF1	; 241
    db16:	75 e0       	ldi	r23, 0x05	; 5
    db18:	c5 01       	movw	r24, r10
    db1a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3437
  if (strncmp(str1, topic, strlen(str1)) == 0)
    db1e:	f5 01       	movw	r30, r10
    db20:	01 90       	ld	r0, Z+
    db22:	00 20       	and	r0, r0
    db24:	e9 f7       	brne	.-6      	; 0xdb20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ac6>
    db26:	31 97       	sbiw	r30, 0x01	; 1
    db28:	af 01       	movw	r20, r30
    db2a:	4a 19       	sub	r20, r10
    db2c:	5b 09       	sbc	r21, r11
    db2e:	b4 01       	movw	r22, r8
    db30:	c5 01       	movw	r24, r10
    db32:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    db36:	89 2b       	or	r24, r25
    db38:	09 f0       	breq	.+2      	; 0xdb3c <mqtt_callback(char*, unsigned char*, unsigned int)+0x1ae2>
    db3a:	41 c0       	rjmp	.+130    	; 0xdbbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3439
  {
    mqtt_process_message++;
    db3c:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    db40:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    db44:	01 96       	adiw	r24, 0x01	; 1
    db46:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    db4a:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    db4e:	f5 01       	movw	r30, r10
    db50:	01 90       	ld	r0, Z+
    db52:	00 20       	and	r0, r0
    db54:	e9 f7       	brne	.-6      	; 0xdb50 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1af6>
    db56:	31 97       	sbiw	r30, 0x01	; 1
    db58:	ea 19       	sub	r30, r10
    db5a:	fb 09       	sbc	r31, r11
    db5c:	9e 2f       	mov	r25, r30
    db5e:	4e 2f       	mov	r20, r30
    db60:	84 2f       	mov	r24, r20
    db62:	89 1b       	sub	r24, r25
    db64:	24 2f       	mov	r18, r20
    db66:	30 e0       	ldi	r19, 0x00	; 0
    db68:	d4 01       	movw	r26, r8
    db6a:	0d 90       	ld	r0, X+
    db6c:	00 20       	and	r0, r0
    db6e:	e9 f7       	brne	.-6      	; 0xdb6a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b10>
    db70:	11 97       	sbiw	r26, 0x01	; 1
    db72:	a8 19       	sub	r26, r8
    db74:	b9 09       	sbc	r27, r9
    db76:	2a 17       	cp	r18, r26
    db78:	3b 07       	cpc	r19, r27
    db7a:	60 f4       	brcc	.+24     	; 0xdb94 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b3a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3444
    {
      str1[cnt] = topic[f];
    db7c:	d5 01       	movw	r26, r10
    db7e:	a8 0f       	add	r26, r24
    db80:	b1 1d       	adc	r27, r1
    db82:	28 0d       	add	r18, r8
    db84:	39 1d       	adc	r19, r9
    db86:	f9 01       	movw	r30, r18
    db88:	80 81       	ld	r24, Z
    db8a:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3445
      str1[cnt + 1] = 0;
    db8c:	11 96       	adiw	r26, 0x01	; 1
    db8e:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3442
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    //strncpy(str2, payload, length);
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    db90:	4f 5f       	subi	r20, 0xFF	; 255
    db92:	e6 cf       	rjmp	.-52     	; 0xdb60 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b06>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3449
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    db94:	68 ed       	ldi	r22, 0xD8	; 216
    db96:	73 e0       	ldi	r23, 0x03	; 3
    db98:	c5 01       	movw	r24, r10
    db9a:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3448
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    db9e:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3450
    pch = strtok (str1, "/");
    while (pch != NULL)
    dba0:	00 97       	sbiw	r24, 0x00	; 0
    dba2:	69 f0       	breq	.+26     	; 0xdbbe <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3452
    {
      if (cnt == 0) id = atoi(pch);
    dba4:	11 11       	cpse	r17, r1
    dba6:	03 c0       	rjmp	.+6      	; 0xdbae <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b54>
    dba8:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    dbac:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3455
      //if ((cnt == 1) && (strcmp(pch, "output") == 0)) light_set_output(id, atoi(my_payload));
      //if ((cnt == 1) && (strcmp(pch, "value") == 0)) light_value[id] = atoi(my_payload);
      pch = strtok (NULL, "/");
    dbae:	68 ed       	ldi	r22, 0xD8	; 216
    dbb0:	73 e0       	ldi	r23, 0x03	; 3
    dbb2:	90 e0       	ldi	r25, 0x00	; 0
    dbb4:	80 e0       	ldi	r24, 0x00	; 0
    dbb6:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3456
      cnt++;
    dbba:	1f 5f       	subi	r17, 0xFF	; 255
    dbbc:	f1 cf       	rjmp	.-30     	; 0xdba0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b46>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3461
    }
  }
  ///
  /// zpetna vazba od vystupu
  strcpy_P(str1, termbig_header_out);
    dbbe:	60 e2       	ldi	r22, 0x20	; 32
    dbc0:	72 e3       	ldi	r23, 0x32	; 50
    dbc2:	c5 01       	movw	r24, r10
    dbc4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3462
  strcat(str1, "output/");
    dbc8:	6d ef       	ldi	r22, 0xFD	; 253
    dbca:	75 e0       	ldi	r23, 0x05	; 5
    dbcc:	c5 01       	movw	r24, r10
    dbce:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3463
  if (strncmp(str1, topic, strlen(str1)) == 0)
    dbd2:	f5 01       	movw	r30, r10
    dbd4:	01 90       	ld	r0, Z+
    dbd6:	00 20       	and	r0, r0
    dbd8:	e9 f7       	brne	.-6      	; 0xdbd4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b7a>
    dbda:	31 97       	sbiw	r30, 0x01	; 1
    dbdc:	af 01       	movw	r20, r30
    dbde:	4a 19       	sub	r20, r10
    dbe0:	5b 09       	sbc	r21, r11
    dbe2:	b4 01       	movw	r22, r8
    dbe4:	c5 01       	movw	r24, r10
    dbe6:	0e 94 1d b7 	call	0x16e3a	; 0x16e3a <strncmp>
    dbea:	89 2b       	or	r24, r25
    dbec:	09 f0       	breq	.+2      	; 0xdbf0 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1b96>
    dbee:	73 c0       	rjmp	.+230    	; 0xdcd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3465
  {
    mqtt_process_message++;
    dbf0:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    dbf4:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    dbf8:	01 96       	adiw	r24, 0x01	; 1
    dbfa:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    dbfe:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dc02:	f5 01       	movw	r30, r10
    dc04:	01 90       	ld	r0, Z+
    dc06:	00 20       	and	r0, r0
    dc08:	e9 f7       	brne	.-6      	; 0xdc04 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1baa>
    dc0a:	31 97       	sbiw	r30, 0x01	; 1
    dc0c:	ea 19       	sub	r30, r10
    dc0e:	fb 09       	sbc	r31, r11
    dc10:	9e 2f       	mov	r25, r30
    dc12:	4e 2f       	mov	r20, r30
    dc14:	84 2f       	mov	r24, r20
    dc16:	89 1b       	sub	r24, r25
    dc18:	24 2f       	mov	r18, r20
    dc1a:	30 e0       	ldi	r19, 0x00	; 0
    dc1c:	d4 01       	movw	r26, r8
    dc1e:	0d 90       	ld	r0, X+
    dc20:	00 20       	and	r0, r0
    dc22:	e9 f7       	brne	.-6      	; 0xdc1e <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bc4>
    dc24:	11 97       	sbiw	r26, 0x01	; 1
    dc26:	a8 19       	sub	r26, r8
    dc28:	b9 09       	sbc	r27, r9
    dc2a:	2a 17       	cp	r18, r26
    dc2c:	3b 07       	cpc	r19, r27
    dc2e:	60 f4       	brcc	.+24     	; 0xdc48 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bee>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3469
    {
      str1[cnt] = topic[f];
    dc30:	d5 01       	movw	r26, r10
    dc32:	a8 0f       	add	r26, r24
    dc34:	b1 1d       	adc	r27, r1
    dc36:	28 0d       	add	r18, r8
    dc38:	39 1d       	adc	r19, r9
    dc3a:	f9 01       	movw	r30, r18
    dc3c:	80 81       	ld	r24, Z
    dc3e:	8c 93       	st	X, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3470
      str1[cnt + 1] = 0;
    dc40:	11 96       	adiw	r26, 0x01	; 1
    dc42:	1c 92       	st	X, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3467
  strcat(str1, "output/");
  if (strncmp(str1, topic, strlen(str1)) == 0)
  {
    mqtt_process_message++;
    cnt = 0;
    for (uint8_t f = strlen(str1); f < strlen(topic); f++)
    dc44:	4f 5f       	subi	r20, 0xFF	; 255
    dc46:	e6 cf       	rjmp	.-52     	; 0xdc14 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bba>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3474
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    pch = strtok (str1, "/");
    dc48:	68 ed       	ldi	r22, 0xD8	; 216
    dc4a:	73 e0       	ldi	r23, 0x03	; 3
    dc4c:	c5 01       	movw	r24, r10
    dc4e:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    dc52:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3473
    {
      str1[cnt] = topic[f];
      str1[cnt + 1] = 0;
      cnt++;
    }
    cnt = 0;
    dc54:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3475
    pch = strtok (str1, "/");
    while (pch != NULL)
    dc56:	01 15       	cp	r16, r1
    dc58:	11 05       	cpc	r17, r1
    dc5a:	e9 f1       	breq	.+122    	; 0xdcd6 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3477
    {
      if (cnt == 0) id = atoi(pch);
    dc5c:	f1 10       	cpse	r15, r1
    dc5e:	0d c0       	rjmp	.+26     	; 0xdc7a <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c20>
    dc60:	c8 01       	movw	r24, r16
    dc62:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    dc66:	78 2e       	mov	r7, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3488
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
            if (strcmp(pch, "state")) last_output_update[id] = 0;
            break;
          }
      }
      pch = strtok (NULL, "/");
    dc68:	68 ed       	ldi	r22, 0xD8	; 216
    dc6a:	73 e0       	ldi	r23, 0x03	; 3
    dc6c:	90 e0       	ldi	r25, 0x00	; 0
    dc6e:	80 e0       	ldi	r24, 0x00	; 0
    dc70:	0e 94 97 aa 	call	0x1552e	; 0x1552e <strtok>
    dc74:	8c 01       	movw	r16, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3489
      cnt++;
    dc76:	f3 94       	inc	r15
    dc78:	ee cf       	rjmp	.-36     	; 0xdc56 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1bfc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3478
    cnt = 0;
    pch = strtok (str1, "/");
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
    dc7a:	f1 e0       	ldi	r31, 0x01	; 1
    dc7c:	ff 12       	cpse	r15, r31
    dc7e:	f4 cf       	rjmp	.-24     	; 0xdc68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dc80:	8f e5       	ldi	r24, 0x5F	; 95
    dc82:	c8 2e       	mov	r12, r24
    dc84:	dd 24       	eor	r13, r13
    dc86:	d3 94       	inc	r13
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
    dc88:	c6 01       	movw	r24, r12
    dc8a:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3481
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          if (thermostat_ring_get_output(idx) == id)
    dc8e:	78 12       	cpse	r7, r24
    dc90:	19 c0       	rjmp	.+50     	; 0xdcc4 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c6a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3483
          {
            if (strcmp(pch, "pwm")) last_output_update[id] = 0;
    dc92:	65 e0       	ldi	r22, 0x05	; 5
    dc94:	76 e0       	ldi	r23, 0x06	; 6
    dc96:	c8 01       	movw	r24, r16
    dc98:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    dc9c:	89 2b       	or	r24, r25
    dc9e:	29 f0       	breq	.+10     	; 0xdcaa <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c50>
    dca0:	e7 2d       	mov	r30, r7
    dca2:	f0 e0       	ldi	r31, 0x00	; 0
    dca4:	e0 5f       	subi	r30, 0xF0	; 240
    dca6:	f5 4f       	sbci	r31, 0xF5	; 245
    dca8:	10 82       	st	Z, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3484
            if (strcmp(pch, "state")) last_output_update[id] = 0;
    dcaa:	69 e0       	ldi	r22, 0x09	; 9
    dcac:	76 e0       	ldi	r23, 0x06	; 6
    dcae:	c8 01       	movw	r24, r16
    dcb0:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    dcb4:	89 2b       	or	r24, r25
    dcb6:	c1 f2       	breq	.-80     	; 0xdc68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dcb8:	e7 2d       	mov	r30, r7
    dcba:	f0 e0       	ldi	r31, 0x00	; 0
    dcbc:	e0 5f       	subi	r30, 0xF0	; 240
    dcbe:	f5 4f       	sbci	r31, 0xF5	; 245
    dcc0:	10 82       	st	Z, r1
    dcc2:	d2 cf       	rjmp	.-92     	; 0xdc68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
    dcc4:	21 e2       	ldi	r18, 0x21	; 33
    dcc6:	c2 0e       	add	r12, r18
    dcc8:	d1 1c       	adc	r13, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3480
    while (pch != NULL)
    {
      if (cnt == 0) id = atoi(pch);
      if (cnt == 1)
      {
        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    dcca:	84 e0       	ldi	r24, 0x04	; 4
    dccc:	c8 16       	cp	r12, r24
    dcce:	82 e0       	ldi	r24, 0x02	; 2
    dcd0:	d8 06       	cpc	r13, r24
    dcd2:	d1 f6       	brne	.-76     	; 0xdc88 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c2e>
    dcd4:	c9 cf       	rjmp	.-110    	; 0xdc68 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1c0e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3494
      cnt++;
    }
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    dcd6:	6c e6       	ldi	r22, 0x6C	; 108
    dcd8:	72 e3       	ldi	r23, 0x32	; 50
    dcda:	c5 01       	movw	r24, r10
    dcdc:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3495
  strcat(str1, device.nazev);
    dce0:	61 e3       	ldi	r22, 0x31	; 49
    dce2:	7c e0       	ldi	r23, 0x0C	; 12
    dce4:	c5 01       	movw	r24, r10
    dce6:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3496
  strcat(str1, "/reload");
    dcea:	6f e0       	ldi	r22, 0x0F	; 15
    dcec:	76 e0       	ldi	r23, 0x06	; 6
    dcee:	c5 01       	movw	r24, r10
    dcf0:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3497
  if (strcmp(str1, topic) == 0)
    dcf4:	b4 01       	movw	r22, r8
    dcf6:	c5 01       	movw	r24, r10
    dcf8:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    dcfc:	8c 01       	movw	r16, r24
    dcfe:	89 2b       	or	r24, r25
    dd00:	79 f4       	brne	.+30     	; 0xdd20 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1cc6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3499
  {
    mqtt_process_message++;
    dd02:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    dd06:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    dd0a:	01 96       	adiw	r24, 0x01	; 1
    dd0c:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    dd10:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3500
    log_error(&mqtt_client, "reload ..... ");
    dd14:	87 e1       	ldi	r24, 0x17	; 23
    dd16:	96 e0       	ldi	r25, 0x06	; 6
    dd18:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3501
    resetFunc();
    dd1c:	f8 01       	movw	r30, r16
    dd1e:	19 95       	eicall
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3505
  }

  //// thermctl-in/XXXXX/reload
  strcpy_P(str1, thermctl_header_in);
    dd20:	6c e6       	ldi	r22, 0x6C	; 108
    dd22:	72 e3       	ldi	r23, 0x32	; 50
    dd24:	c5 01       	movw	r24, r10
    dd26:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3506
  strcat(str1, device.nazev);
    dd2a:	61 e3       	ldi	r22, 0x31	; 49
    dd2c:	7c e0       	ldi	r23, 0x0C	; 12
    dd2e:	c5 01       	movw	r24, r10
    dd30:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3507
  strcat(str1, "/bootloader");
    dd34:	65 e2       	ldi	r22, 0x25	; 37
    dd36:	76 e0       	ldi	r23, 0x06	; 6
    dd38:	c5 01       	movw	r24, r10
    dd3a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3508
  if (strcmp(str1, topic) == 0)
    dd3e:	b4 01       	movw	r22, r8
    dd40:	c5 01       	movw	r24, r10
    dd42:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    dd46:	89 2b       	or	r24, r25
    dd48:	e9 f4       	brne	.+58     	; 0xdd84 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d2a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3510
  {
    mqtt_process_message++;
    dd4a:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    dd4e:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    dd52:	01 96       	adiw	r24, 0x01	; 1
    dd54:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    dd58:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3511
    log_error(&mqtt_client, "bootloader ..... ");
    dd5c:	81 e3       	ldi	r24, 0x31	; 49
    dd5e:	96 e0       	ldi	r25, 0x06	; 6
    dd60:	0e 94 cd 88 	call	0x1119a	; 0x1119a <log_error(PubSubClient*, char*) [clone .constprop.60]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3512
    EEPROM.write(bootloader_tag, 255);
    dd64:	6f ef       	ldi	r22, 0xFF	; 255
    dd66:	90 e0       	ldi	r25, 0x00	; 0
    dd68:	80 e0       	ldi	r24, 0x00	; 0
    dd6a:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
wdt_enable():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/avr/wdt.h:486
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    dd6e:	88 e1       	ldi	r24, 0x18	; 24
    dd70:	9e e0       	ldi	r25, 0x0E	; 14
    dd72:	0f b6       	in	r0, 0x3f	; 63
    dd74:	f8 94       	cli
    dd76:	a8 95       	wdr
    dd78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    dd7c:	0f be       	out	0x3f, r0	; 63
    dd7e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    dd82:	ff cf       	rjmp	.-2      	; 0xdd82 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d28>
_Z13mqtt_callbackPcPhj():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3518
    wdt_enable(WDTO_1S);
    while (1);
  }

  //// /thermctl-in/XXXXX/reset_default
  strcpy_P(str1, thermctl_header_in);
    dd84:	6c e6       	ldi	r22, 0x6C	; 108
    dd86:	72 e3       	ldi	r23, 0x32	; 50
    dd88:	c5 01       	movw	r24, r10
    dd8a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3519
  strcat(str1, device.nazev);
    dd8e:	61 e3       	ldi	r22, 0x31	; 49
    dd90:	7c e0       	ldi	r23, 0x0C	; 12
    dd92:	c5 01       	movw	r24, r10
    dd94:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3520
  strcat(str1, "/default");
    dd98:	6d e1       	ldi	r22, 0x1D	; 29
    dd9a:	75 e0       	ldi	r23, 0x05	; 5
    dd9c:	c5 01       	movw	r24, r10
    dd9e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3521
  if (strcmp(str1, topic) == 0)
    dda2:	b4 01       	movw	r22, r8
    dda4:	c5 01       	movw	r24, r10
    dda6:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <strcmp>
    ddaa:	89 2b       	or	r24, r25
    ddac:	91 f4       	brne	.+36     	; 0xddd2 <mqtt_callback(char*, unsigned char*, unsigned int)+0x1d78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3523
  {
    mqtt_process_message++;
    ddae:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
    ddb2:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
    ddb6:	01 96       	adiw	r24, 0x01	; 1
    ddb8:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <mqtt_process_message+0x1>
    ddbc:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <mqtt_process_message>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3525
    //strncpy(str2, payload, length);
    EEPROM.write(set_default_values, atoi(my_payload));
    ddc0:	87 ed       	ldi	r24, 0xD7	; 215
    ddc2:	9a e0       	ldi	r25, 0x0A	; 10
    ddc4:	0e 94 5e aa 	call	0x154bc	; 0x154bc <atoi>
    ddc8:	68 2f       	mov	r22, r24
    ddca:	8a e5       	ldi	r24, 0x5A	; 90
    ddcc:	90 e0       	ldi	r25, 0x00	; 0
    ddce:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3528
  }

}
    ddd2:	c4 5d       	subi	r28, 0xD4	; 212
    ddd4:	de 4f       	sbci	r29, 0xFE	; 254
    ddd6:	0f b6       	in	r0, 0x3f	; 63
    ddd8:	f8 94       	cli
    ddda:	de bf       	out	0x3e, r29	; 62
    dddc:	0f be       	out	0x3f, r0	; 63
    ddde:	cd bf       	out	0x3d, r28	; 61
    dde0:	df 91       	pop	r29
    dde2:	cf 91       	pop	r28
    dde4:	1f 91       	pop	r17
    dde6:	0f 91       	pop	r16
    dde8:	ff 90       	pop	r15
    ddea:	ef 90       	pop	r14
    ddec:	df 90       	pop	r13
    ddee:	cf 90       	pop	r12
    ddf0:	bf 90       	pop	r11
    ddf2:	af 90       	pop	r10
    ddf4:	9f 90       	pop	r9
    ddf6:	8f 90       	pop	r8
    ddf8:	7f 90       	pop	r7
    ddfa:	6f 90       	pop	r6
    ddfc:	5f 90       	pop	r5
    ddfe:	4f 90       	pop	r4
    de00:	3f 90       	pop	r3
    de02:	2f 90       	pop	r2
    de04:	08 95       	ret

0000de06 <mqtt_reconnect()>:
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3532
/*************************************************************************************************************************/
/// mqtt_reconent - funkce pro prihlaseni k MQTT topicum
byte mqtt_reconnect(void)
{
    de06:	0f 93       	push	r16
    de08:	1f 93       	push	r17
    de0a:	cf 93       	push	r28
    de0c:	df 93       	push	r29
    de0e:	cd b7       	in	r28, 0x3d	; 61
    de10:	de b7       	in	r29, 0x3e	; 62
    de12:	a5 97       	sbiw	r28, 0x25	; 37
    de14:	0f b6       	in	r0, 0x3f	; 63
    de16:	f8 94       	cli
    de18:	de bf       	out	0x3e, r29	; 62
    de1a:	0f be       	out	0x3f, r0	; 63
    de1c:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3538
  char nazev[10];
  char topic[26];
  byte ret = MQTT_DISCONNECTED;
  ///  /thermctl/xxxxxxxx/#
  ///  /thermctl/global/#
  device_get_name(nazev);
    de1e:	ce 01       	movw	r24, r28
    de20:	4b 96       	adiw	r24, 0x1b	; 27
    de22:	0e 94 81 5a 	call	0xb502	; 0xb502 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3539
  if (!mqtt_client.connected())
    de26:	8e e0       	ldi	r24, 0x0E	; 14
    de28:	9e e0       	ldi	r25, 0x0E	; 14
    de2a:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
    de2e:	81 11       	cpse	r24, r1
    de30:	97 c0       	rjmp	.+302    	; 0xdf60 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:117
boolean PubSubClient::connect(const char *id, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage);
}

boolean PubSubClient::connect(const char *id, const char *user, const char *pass, const char* willTopic, uint8_t willQos, boolean willRetain, const char* willMessage) {
    if (!connected()) {
    de32:	8e e0       	ldi	r24, 0x0E	; 14
    de34:	9e e0       	ldi	r25, 0x0E	; 14
    de36:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
    de3a:	81 11       	cpse	r24, r1
    de3c:	d0 c0       	rjmp	.+416    	; 0xdfde <mqtt_reconnect()+0x1d8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:120
        int result = 0;

        if (domain != NULL) {
    de3e:	60 91 23 10 	lds	r22, 0x1023	; 0x801023 <mqtt_client+0x215>
    de42:	70 91 24 10 	lds	r23, 0x1024	; 0x801024 <mqtt_client+0x216>
    de46:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
    de4a:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
    de4e:	dc 01       	movw	r26, r24
    de50:	ed 91       	ld	r30, X+
    de52:	fc 91       	ld	r31, X
    de54:	40 91 25 10 	lds	r20, 0x1025	; 0x801025 <mqtt_client+0x217>
    de58:	50 91 26 10 	lds	r21, 0x1026	; 0x801026 <mqtt_client+0x218>
    de5c:	61 15       	cp	r22, r1
    de5e:	71 05       	cpc	r23, r1
    de60:	09 f4       	brne	.+2      	; 0xde64 <mqtt_reconnect()+0x5e>
    de62:	8b c0       	rjmp	.+278    	; 0xdf7a <mqtt_reconnect()+0x174>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:121
            result = _client->connect(this->domain, this->port);
    de64:	00 88       	ldd	r0, Z+16	; 0x10
    de66:	f1 89       	ldd	r31, Z+17	; 0x11
    de68:	e0 2d       	mov	r30, r0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        } else {
            result = _client->connect(this->ip, this->port);
    de6a:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:125
        }
        if (result == 1) {
    de6c:	81 30       	cpi	r24, 0x01	; 1
    de6e:	91 05       	cpc	r25, r1
    de70:	09 f0       	breq	.+2      	; 0xde74 <mqtt_reconnect()+0x6e>
    de72:	12 c1       	rjmp	.+548    	; 0xe098 <mqtt_reconnect()+0x292>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:126
            nextMsgId = 1;
    de74:	90 93 11 10 	sts	0x1011, r25	; 0x801011 <mqtt_client+0x203>
    de78:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:135

#if MQTT_VERSION == MQTT_VERSION_3_1
            uint8_t d[9] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
    de7c:	87 e0       	ldi	r24, 0x07	; 7
    de7e:	e6 e1       	ldi	r30, 0x16	; 22
    de80:	f2 e0       	ldi	r31, 0x02	; 2
    de82:	de 01       	movw	r26, r28
    de84:	11 96       	adiw	r26, 0x01	; 1
    de86:	01 90       	ld	r0, Z+
    de88:	0d 92       	st	X+, r0
    de8a:	8a 95       	dec	r24
    de8c:	e1 f7       	brne	.-8      	; 0xde86 <mqtt_reconnect()+0x80>
    de8e:	fe 01       	movw	r30, r28
    de90:	31 96       	adiw	r30, 0x01	; 1
    de92:	a5 e1       	ldi	r26, 0x15	; 21
    de94:	be e0       	ldi	r27, 0x0E	; 14
    de96:	ce 01       	movw	r24, r28
    de98:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:139
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
                buffer[length++] = d[j];
    de9a:	21 91       	ld	r18, Z+
    de9c:	2d 93       	st	X+, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:138
#define MQTT_HEADER_VERSION_LENGTH 9
#elif MQTT_VERSION == MQTT_VERSION_3_1_1
            uint8_t d[7] = {0x00,0x04,'M','Q','T','T',MQTT_VERSION};
#define MQTT_HEADER_VERSION_LENGTH 7
#endif
            for (j = 0;j<MQTT_HEADER_VERSION_LENGTH;j++) {
    de9e:	8e 17       	cp	r24, r30
    dea0:	9f 07       	cpc	r25, r31
    dea2:	d9 f7       	brne	.-10     	; 0xde9a <mqtt_reconnect()+0x94>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:157
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
    dea4:	82 e0       	ldi	r24, 0x02	; 2
    dea6:	80 93 1c 0e 	sts	0x0E1C, r24	; 0x800e1c <mqtt_client+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:159

            buffer[length++] = ((MQTT_KEEPALIVE) >> 8);
    deaa:	10 92 1d 0e 	sts	0x0E1D, r1	; 0x800e1d <mqtt_client+0xf>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:160
            buffer[length++] = ((MQTT_KEEPALIVE) & 0xFF);
    deae:	8f e0       	ldi	r24, 0x0F	; 15
    deb0:	80 93 1e 0e 	sts	0x0E1E, r24	; 0x800e1e <mqtt_client+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:161
            length = writeString(id,buffer,length);
    deb4:	4f e0       	ldi	r20, 0x0F	; 15
    deb6:	50 e0       	ldi	r21, 0x00	; 0
    deb8:	60 e1       	ldi	r22, 0x10	; 16
    deba:	7e e0       	ldi	r23, 0x0E	; 14
    debc:	ce 01       	movw	r24, r28
    debe:	4b 96       	adiw	r24, 0x1b	; 27
    dec0:	0e 94 0f 85 	call	0x10a1e	; 0x10a1e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:174
                if(pass != NULL) {
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT,buffer,length-5);
    dec4:	9c 01       	movw	r18, r24
    dec6:	25 50       	subi	r18, 0x05	; 5
    dec8:	31 09       	sbc	r19, r1
    deca:	40 e1       	ldi	r20, 0x10	; 16
    decc:	5e e0       	ldi	r21, 0x0E	; 14
    dece:	60 e1       	ldi	r22, 0x10	; 16
    ded0:	8e e0       	ldi	r24, 0x0E	; 14
    ded2:	9e e0       	ldi	r25, 0x0E	; 14
    ded4:	0e 94 17 95 	call	0x12a2e	; 0x12a2e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:176

            lastInActivity = lastOutActivity = millis();
    ded8:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    dedc:	60 93 12 10 	sts	0x1012, r22	; 0x801012 <mqtt_client+0x204>
    dee0:	70 93 13 10 	sts	0x1013, r23	; 0x801013 <mqtt_client+0x205>
    dee4:	80 93 14 10 	sts	0x1014, r24	; 0x801014 <mqtt_client+0x206>
    dee8:	90 93 15 10 	sts	0x1015, r25	; 0x801015 <mqtt_client+0x207>
    deec:	60 93 16 10 	sts	0x1016, r22	; 0x801016 <mqtt_client+0x208>
    def0:	70 93 17 10 	sts	0x1017, r23	; 0x801017 <mqtt_client+0x209>
    def4:	80 93 18 10 	sts	0x1018, r24	; 0x801018 <mqtt_client+0x20a>
    def8:	90 93 19 10 	sts	0x1019, r25	; 0x801019 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:178

            while (!_client->available()) {
    defc:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
    df00:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
    df04:	dc 01       	movw	r26, r24
    df06:	ed 91       	ld	r30, X+
    df08:	fc 91       	ld	r31, X
    df0a:	00 84       	ldd	r0, Z+8	; 0x08
    df0c:	f1 85       	ldd	r31, Z+9	; 0x09
    df0e:	e0 2d       	mov	r30, r0
    df10:	19 95       	eicall
    df12:	89 2b       	or	r24, r25
    df14:	09 f0       	breq	.+2      	; 0xdf18 <mqtt_reconnect()+0x112>
    df16:	48 c0       	rjmp	.+144    	; 0xdfa8 <mqtt_reconnect()+0x1a2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:179
                unsigned long t = millis();
    df18:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:180
                if (t-lastInActivity >= ((int32_t) MQTT_SOCKET_TIMEOUT*100)) {
    df1c:	00 91 16 10 	lds	r16, 0x1016	; 0x801016 <mqtt_client+0x208>
    df20:	10 91 17 10 	lds	r17, 0x1017	; 0x801017 <mqtt_client+0x209>
    df24:	20 91 18 10 	lds	r18, 0x1018	; 0x801018 <mqtt_client+0x20a>
    df28:	30 91 19 10 	lds	r19, 0x1019	; 0x801019 <mqtt_client+0x20b>
    df2c:	60 1b       	sub	r22, r16
    df2e:	71 0b       	sbc	r23, r17
    df30:	82 0b       	sbc	r24, r18
    df32:	93 0b       	sbc	r25, r19
    df34:	64 36       	cpi	r22, 0x64	; 100
    df36:	71 05       	cpc	r23, r1
    df38:	81 05       	cpc	r24, r1
    df3a:	91 05       	cpc	r25, r1
    df3c:	f8 f2       	brcs	.-66     	; 0xdefc <mqtt_reconnect()+0xf6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:181
                    _state = MQTT_CONNECTION_TIMEOUT;
    df3e:	8c ef       	ldi	r24, 0xFC	; 252
    df40:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    df42:	90 93 2a 10 	sts	0x102A, r25	; 0x80102a <mqtt_client+0x21c>
    df46:	80 93 29 10 	sts	0x1029, r24	; 0x801029 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:199
                }
            }
            _client->stop();
    df4a:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
    df4e:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
    df52:	dc 01       	movw	r26, r24
    df54:	ed 91       	ld	r30, X+
    df56:	fc 91       	ld	r31, X
    df58:	04 88       	ldd	r0, Z+20	; 0x14
    df5a:	f5 89       	ldd	r31, Z+21	; 0x15
    df5c:	e0 2d       	mov	r30, r0
    df5e:	19 95       	eicall
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3568
      strcpy_P(topic, termbig_header_out);
      mqtt_client.subscribe(topic);
    }
  ret = mqtt_client.state();
  return ret;
}
    df60:	80 91 29 10 	lds	r24, 0x1029	; 0x801029 <mqtt_client+0x21b>
    df64:	a5 96       	adiw	r28, 0x25	; 37
    df66:	0f b6       	in	r0, 0x3f	; 63
    df68:	f8 94       	cli
    df6a:	de bf       	out	0x3e, r29	; 62
    df6c:	0f be       	out	0x3f, r0	; 63
    df6e:	cd bf       	out	0x3d, r28	; 61
    df70:	df 91       	pop	r29
    df72:	cf 91       	pop	r28
    df74:	1f 91       	pop	r17
    df76:	0f 91       	pop	r16
    df78:	08 95       	ret
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
        int result = 0;

        if (domain != NULL) {
            result = _client->connect(this->domain, this->port);
        } else {
            result = _client->connect(this->ip, this->port);
    df7a:	06 84       	ldd	r0, Z+14	; 0x0e
    df7c:	f7 85       	ldd	r31, Z+15	; 0x0f
    df7e:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    df80:	22 ee       	ldi	r18, 0xE2	; 226
    df82:	32 e0       	ldi	r19, 0x02	; 2
    df84:	3a 83       	std	Y+2, r19	; 0x02
    df86:	29 83       	std	Y+1, r18	; 0x01
    df88:	00 91 1f 10 	lds	r16, 0x101F	; 0x80101f <mqtt_client+0x211>
    df8c:	10 91 20 10 	lds	r17, 0x1020	; 0x801020 <mqtt_client+0x212>
    df90:	20 91 21 10 	lds	r18, 0x1021	; 0x801021 <mqtt_client+0x213>
    df94:	30 91 22 10 	lds	r19, 0x1022	; 0x801022 <mqtt_client+0x214>
    df98:	0b 83       	std	Y+3, r16	; 0x03
    df9a:	1c 83       	std	Y+4, r17	; 0x04
    df9c:	2d 83       	std	Y+5, r18	; 0x05
    df9e:	3e 83       	std	Y+6, r19	; 0x06
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:123
    dfa0:	be 01       	movw	r22, r28
    dfa2:	6f 5f       	subi	r22, 0xFF	; 255
    dfa4:	7f 4f       	sbci	r23, 0xFF	; 255
    dfa6:	61 cf       	rjmp	.-318    	; 0xde6a <mqtt_reconnect()+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:187
                    _client->stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
    dfa8:	ce 01       	movw	r24, r28
    dfaa:	85 96       	adiw	r24, 0x25	; 37
    dfac:	0e 94 cb 8c 	call	0x11996	; 0x11996 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:189

            if (len == 4) {
    dfb0:	04 97       	sbiw	r24, 0x04	; 4
    dfb2:	59 f6       	brne	.-106    	; 0xdf4a <mqtt_reconnect()+0x144>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
                if (buffer[3] == 0) {
    dfb4:	80 91 13 0e 	lds	r24, 0x0E13	; 0x800e13 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:196
                    lastInActivity = millis();
                    pingOutstanding = false;
                    _state = MQTT_CONNECTED;
                    return true;
                } else {
                    _state = buffer[3];
    dfb8:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:190
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == 0) {
    dfba:	81 11       	cpse	r24, r1
    dfbc:	c2 cf       	rjmp	.-124    	; 0xdf42 <mqtt_reconnect()+0x13c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:191
                    lastInActivity = millis();
    dfbe:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    dfc2:	60 93 16 10 	sts	0x1016, r22	; 0x801016 <mqtt_client+0x208>
    dfc6:	70 93 17 10 	sts	0x1017, r23	; 0x801017 <mqtt_client+0x209>
    dfca:	80 93 18 10 	sts	0x1018, r24	; 0x801018 <mqtt_client+0x20a>
    dfce:	90 93 19 10 	sts	0x1019, r25	; 0x801019 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:192
                    pingOutstanding = false;
    dfd2:	10 92 1a 10 	sts	0x101A, r1	; 0x80101a <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:193
                    _state = MQTT_CONNECTED;
    dfd6:	10 92 2a 10 	sts	0x102A, r1	; 0x80102a <mqtt_client+0x21c>
    dfda:	10 92 29 10 	sts	0x1029, r1	; 0x801029 <mqtt_client+0x21b>
_Z14mqtt_reconnectv():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3542
  ///  /thermctl/global/#
  device_get_name(nazev);
  if (!mqtt_client.connected())
    if (mqtt_client.connect(nazev))
    {
      strcpy_P(topic, thermctl_header_in);
    dfde:	6c e6       	ldi	r22, 0x6C	; 108
    dfe0:	72 e3       	ldi	r23, 0x32	; 50
    dfe2:	ce 01       	movw	r24, r28
    dfe4:	01 96       	adiw	r24, 0x01	; 1
    dfe6:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3543
      strcat(topic, nazev);
    dfea:	be 01       	movw	r22, r28
    dfec:	65 5e       	subi	r22, 0xE5	; 229
    dfee:	7f 4f       	sbci	r23, 0xFF	; 255
    dff0:	ce 01       	movw	r24, r28
    dff2:	01 96       	adiw	r24, 0x01	; 1
    dff4:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3544
      strcat(topic, "/#");
    dff8:	6d e9       	ldi	r22, 0x9D	; 157
    dffa:	76 e0       	ldi	r23, 0x06	; 6
    dffc:	ce 01       	movw	r24, r28
    dffe:	01 96       	adiw	r24, 0x01	; 1
    e000:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3545
      mqtt_client.subscribe(topic);
    e004:	ce 01       	movw	r24, r28
    e006:	01 96       	adiw	r24, 0x01	; 1
    e008:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3546
      strcpy_P(topic, thermctl_header_in);
    e00c:	6c e6       	ldi	r22, 0x6C	; 108
    e00e:	72 e3       	ldi	r23, 0x32	; 50
    e010:	ce 01       	movw	r24, r28
    e012:	01 96       	adiw	r24, 0x01	; 1
    e014:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3547
      strcat(topic, "global/#");
    e018:	67 e9       	ldi	r22, 0x97	; 151
    e01a:	76 e0       	ldi	r23, 0x06	; 6
    e01c:	ce 01       	movw	r24, r28
    e01e:	01 96       	adiw	r24, 0x01	; 1
    e020:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3548
      mqtt_client.subscribe(topic);
    e024:	ce 01       	movw	r24, r28
    e026:	01 96       	adiw	r24, 0x01	; 1
    e028:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e02c:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3551
        remote_tds_subscibe_topic(idx);
    e02e:	81 2f       	mov	r24, r17
    e030:	0e 94 bd 5f 	call	0xbf7a	; 0xbf7a <remote_tds_subscibe_topic(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3550
      mqtt_client.subscribe(topic);
      strcpy_P(topic, thermctl_header_in);
      strcat(topic, "global/#");
      mqtt_client.subscribe(topic);
      //// /rtds/xxxxx
      for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    e034:	1f 5f       	subi	r17, 0xFF	; 255
    e036:	1a 30       	cpi	r17, 0x0A	; 10
    e038:	d1 f7       	brne	.-12     	; 0xe02e <mqtt_reconnect()+0x228>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3553
        remote_tds_subscibe_topic(idx);
      //// svetelny controller
      strcpy_P(topic, lightctl_header_out);
    e03a:	6d e5       	ldi	r22, 0x5D	; 93
    e03c:	72 e3       	ldi	r23, 0x32	; 50
    e03e:	ce 01       	movw	r24, r28
    e040:	01 96       	adiw	r24, 0x01	; 1
    e042:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3554
      strcat(topic, "/#");
    e046:	6d e9       	ldi	r22, 0x9D	; 157
    e048:	76 e0       	ldi	r23, 0x06	; 6
    e04a:	ce 01       	movw	r24, r28
    e04c:	01 96       	adiw	r24, 0x01	; 1
    e04e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3555
      mqtt_client.subscribe(topic);
    e052:	ce 01       	movw	r24, r28
    e054:	01 96       	adiw	r24, 0x01	; 1
    e056:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3557
      /// zpetna vazba od ostatnich room controleru
      strcpy_P(topic, thermctl_subscribe);
    e05a:	65 e4       	ldi	r22, 0x45	; 69
    e05c:	72 e3       	ldi	r23, 0x32	; 50
    e05e:	ce 01       	movw	r24, r28
    e060:	01 96       	adiw	r24, 0x01	; 1
    e062:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3558
      mqtt_client.subscribe(topic);
    e066:	ce 01       	movw	r24, r28
    e068:	01 96       	adiw	r24, 0x01	; 1
    e06a:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3560
      /// zpetna vazba od ostatnich term controlleru
      strcpy_P(topic, termbig_subscribe);
    e06e:	6e e2       	ldi	r22, 0x2E	; 46
    e070:	72 e3       	ldi	r23, 0x32	; 50
    e072:	ce 01       	movw	r24, r28
    e074:	01 96       	adiw	r24, 0x01	; 1
    e076:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3561
      mqtt_client.subscribe(topic);
    e07a:	ce 01       	movw	r24, r28
    e07c:	01 96       	adiw	r24, 0x01	; 1
    e07e:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3563
      /// zpetna vazba od vystupu
      strcpy_P(topic, termbig_header_out);
    e082:	60 e2       	ldi	r22, 0x20	; 32
    e084:	72 e3       	ldi	r23, 0x32	; 50
    e086:	ce 01       	movw	r24, r28
    e088:	01 96       	adiw	r24, 0x01	; 1
    e08a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3564
      mqtt_client.subscribe(topic);
    e08e:	ce 01       	movw	r24, r28
    e090:	01 96       	adiw	r24, 0x01	; 1
    e092:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>
    e096:	64 cf       	rjmp	.-312    	; 0xdf60 <mqtt_reconnect()+0x15a>
connect():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:201
                    _state = buffer[3];
                }
            }
            _client->stop();
        } else {
            _state = MQTT_CONNECT_FAILED;
    e098:	8e ef       	ldi	r24, 0xFE	; 254
    e09a:	9f ef       	ldi	r25, 0xFF	; 255
    e09c:	90 93 2a 10 	sts	0x102A, r25	; 0x80102a <mqtt_client+0x21c>
    e0a0:	80 93 29 10 	sts	0x1029, r24	; 0x801029 <mqtt_client+0x21b>
    e0a4:	5d cf       	rjmp	.-326    	; 0xdf60 <mqtt_reconnect()+0x15a>

0000e0a6 <setup>:
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4245
/*************************************************************************************************************************/


/// setup - zakladni nastaveni - vola se pouze 1x
void setup()
{
    e0a6:	2f 92       	push	r2
    e0a8:	3f 92       	push	r3
    e0aa:	4f 92       	push	r4
    e0ac:	5f 92       	push	r5
    e0ae:	6f 92       	push	r6
    e0b0:	7f 92       	push	r7
    e0b2:	8f 92       	push	r8
    e0b4:	9f 92       	push	r9
    e0b6:	af 92       	push	r10
    e0b8:	bf 92       	push	r11
    e0ba:	cf 92       	push	r12
    e0bc:	df 92       	push	r13
    e0be:	ef 92       	push	r14
    e0c0:	ff 92       	push	r15
    e0c2:	0f 93       	push	r16
    e0c4:	1f 93       	push	r17
    e0c6:	cf 93       	push	r28
    e0c8:	df 93       	push	r29
    e0ca:	cd b7       	in	r28, 0x3d	; 61
    e0cc:	de b7       	in	r29, 0x3e	; 62
    e0ce:	cd 54       	subi	r28, 0x4D	; 77
    e0d0:	d1 40       	sbci	r29, 0x01	; 1
    e0d2:	0f b6       	in	r0, 0x3f	; 63
    e0d4:	f8 94       	cli
    e0d6:	de bf       	out	0x3e, r29	; 62
    e0d8:	0f be       	out	0x3f, r0	; 63
    e0da:	cd bf       	out	0x3d, r28	; 61
__base_ctor ():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:25
 */

#include "NTPClient.h"
#include "time.h"

NTPClient::NTPClient(UDP& udp) {
    e0dc:	1b 82       	std	Y+3, r1	; 0x03
    e0de:	8a ed       	ldi	r24, 0xDA	; 218
    e0e0:	93 e0       	ldi	r25, 0x03	; 3
    e0e2:	9d 83       	std	Y+5, r25	; 0x05
    e0e4:	8c 83       	std	Y+4, r24	; 0x04
    e0e6:	89 e3       	ldi	r24, 0x39	; 57
    e0e8:	95 e0       	ldi	r25, 0x05	; 5
    e0ea:	9f 83       	std	Y+7, r25	; 0x07
    e0ec:	8e 83       	std	Y+6, r24	; 0x06
    e0ee:	18 86       	std	Y+8, r1	; 0x08
    e0f0:	19 86       	std	Y+9, r1	; 0x09
    e0f2:	1a 86       	std	Y+10, r1	; 0x0a
    e0f4:	1b 86       	std	Y+11, r1	; 0x0b
    e0f6:	80 e6       	ldi	r24, 0x60	; 96
    e0f8:	9a ee       	ldi	r25, 0xEA	; 234
    e0fa:	a0 e0       	ldi	r26, 0x00	; 0
    e0fc:	b0 e0       	ldi	r27, 0x00	; 0
    e0fe:	8c 87       	std	Y+12, r24	; 0x0c
    e100:	9d 87       	std	Y+13, r25	; 0x0d
    e102:	ae 87       	std	Y+14, r26	; 0x0e
    e104:	bf 87       	std	Y+15, r27	; 0x0f
    e106:	18 8a       	std	Y+16, r1	; 0x10
    e108:	19 8a       	std	Y+17, r1	; 0x11
    e10a:	1a 8a       	std	Y+18, r1	; 0x12
    e10c:	1b 8a       	std	Y+19, r1	; 0x13
    e10e:	1c 8a       	std	Y+20, r1	; 0x14
    e110:	1d 8a       	std	Y+21, r1	; 0x15
    e112:	1e 8a       	std	Y+22, r1	; 0x16
    e114:	1f 8a       	std	Y+23, r1	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:26
  this->_udp            = &udp;
    e116:	8b e2       	ldi	r24, 0x2B	; 43
    e118:	90 e1       	ldi	r25, 0x10	; 16
    e11a:	9a 83       	std	Y+2, r25	; 0x02
    e11c:	89 83       	std	Y+1, r24	; 0x01
setup_io_pin():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4031
/////////////// HW funkce ///////////////////////////////////////////////////////////////////////

/// setup_io_pin - nastaveni IO pinu
void setup_io_pin(void)
{
  pinMode(ETH_RST, OUTPUT);
    e11e:	61 e0       	ldi	r22, 0x01	; 1
    e120:	86 e0       	ldi	r24, 0x06	; 6
    e122:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4032
  pinMode(ETH_CS, OUTPUT);
    e126:	61 e0       	ldi	r22, 0x01	; 1
    e128:	8f e0       	ldi	r24, 0x0F	; 15
    e12a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4033
  pinMode(LED, OUTPUT);
    e12e:	61 e0       	ldi	r22, 0x01	; 1
    e130:	88 e0       	ldi	r24, 0x08	; 8
    e132:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4034
  pinMode(PIEZO, OUTPUT);
    e136:	61 e0       	ldi	r22, 0x01	; 1
    e138:	8c e0       	ldi	r24, 0x0C	; 12
    e13a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4035
  pinMode(STORAGE_RAM_CS, OUTPUT);
    e13e:	61 e0       	ldi	r22, 0x01	; 1
    e140:	86 e1       	ldi	r24, 0x16	; 22
    e142:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4036
  pinMode(STORAGE_EEPROM_CS, OUTPUT);
    e146:	61 e0       	ldi	r22, 0x01	; 1
    e148:	87 e1       	ldi	r24, 0x17	; 23
    e14a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4037
  pinMode(JUMPER, INPUT_PULLUP);
    e14e:	62 e0       	ldi	r22, 0x02	; 2
    e150:	8e e0       	ldi	r24, 0x0E	; 14
    e152:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4039

  digitalWrite(PIEZO, LOW);
    e156:	60 e0       	ldi	r22, 0x00	; 0
    e158:	8c e0       	ldi	r24, 0x0C	; 12
    e15a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4040
  delay(1000);
    e15e:	68 ee       	ldi	r22, 0xE8	; 232
    e160:	73 e0       	ldi	r23, 0x03	; 3
    e162:	80 e0       	ldi	r24, 0x00	; 0
    e164:	90 e0       	ldi	r25, 0x00	; 0
    e166:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4041
  digitalWrite(PIEZO, HIGH);
    e16a:	61 e0       	ldi	r22, 0x01	; 1
    e16c:	8c e0       	ldi	r24, 0x0C	; 12
    e16e:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4261

  NTPClient timeClient(udpClient);

  setup_io_pin();

  interrupts();             // enable all interrupts
    e172:	78 94       	sei
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4262
  SPI.begin();
    e174:	0e 94 55 36 	call	0x6caa	; 0x6caa <SPIClass::begin()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4263
  Wire.begin();
    e178:	0e 94 c5 8a 	call	0x1158a	; 0x1158a <TwoWire::begin() [clone .constprop.63]>
begin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:240

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
  Wire.begin();
    e17c:	0e 94 c5 8a 	call	0x1158a	; 0x1158a <TwoWire::begin() [clone .constprop.63]>
mqtt_set_public_mqtt_client():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:459
  send_mqtt_general_payload(mqtt_client, topic, log);
}
///////////////////////////////////////////////////////////////////////////
void mqtt_set_public_mqtt_client(PubSubClient *mqtt_client)
{
  pub_mqtt_client = mqtt_client;
    e180:	8e e0       	ldi	r24, 0x0E	; 14
    e182:	9e e0       	ldi	r25, 0x0E	; 14
    e184:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <pub_mqtt_client+0x1>
    e188:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <pub_mqtt_client>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4267
  rtc.begin();

  mqtt_set_public_mqtt_client(&mqtt_client);
  fdevopen( &printf_via_mqtt, 0);
    e18c:	70 e0       	ldi	r23, 0x00	; 0
    e18e:	60 e0       	ldi	r22, 0x00	; 0
    e190:	8c ef       	ldi	r24, 0xFC	; 252
    e192:	9a e5       	ldi	r25, 0x5A	; 90
    e194:	0e 94 fa aa 	call	0x155f4	; 0x155f4 <fdevopen>
printf_begin():
/home/saric/Arduino/libraries/RF24/printf.h:31

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
    e198:	70 e0       	ldi	r23, 0x00	; 0
    e19a:	60 e0       	ldi	r22, 0x00	; 0
    e19c:	87 e4       	ldi	r24, 0x47	; 71
    e19e:	92 e3       	ldi	r25, 0x32	; 50
    e1a0:	0e 94 fa aa 	call	0x155f4	; 0x155f4 <fdevopen>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4270
  printf_begin();

  swSPI.begin();
    e1a4:	8d e4       	ldi	r24, 0x4D	; 77
    e1a6:	90 e1       	ldi	r25, 0x10	; 16
    e1a8:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <SoftSPIB::begin()>
MenuHistoryInit():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2229
  Global_menu_args1[MenuHistoryIndex] = args1;
}
///
void MenuHistoryInit(void)
{
  MenuHistory[MenuHistoryIndex] = MENU_DEFAULT_SCREEN;
    e1ac:	e0 91 ec 08 	lds	r30, 0x08EC	; 0x8008ec <MenuHistoryIndex>
    e1b0:	f0 e0       	ldi	r31, 0x00	; 0
    e1b2:	e8 5a       	subi	r30, 0xA8	; 168
    e1b4:	f7 4f       	sbci	r31, 0xF7	; 247
    e1b6:	10 82       	st	Z, r1
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:234
*/

// Initialization lcd modules
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
    e1b8:	0e 94 91 8b 	call	0x11722	; 0x11722 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:235
	if(lcd_model == 0xFFFF)
    e1bc:	80 91 d0 0d 	lds	r24, 0x0DD0	; 0x800dd0 <my_lcd+0x1a>
    e1c0:	90 91 d1 0d 	lds	r25, 0x0DD1	; 0x800dd1 <my_lcd+0x1b>
    e1c4:	01 96       	adiw	r24, 0x01	; 1
    e1c6:	09 f0       	breq	.+2      	; 0xe1ca <setup+0x124>
    e1c8:	4c c0       	rjmp	.+152    	; 0xe262 <setup+0x1bc>
Read_ID():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:575

//read LCD controller chip ID 
uint16_t LCDWIKI_KBV::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    e1ca:	60 e0       	ldi	r22, 0x00	; 0
    e1cc:	84 e0       	ldi	r24, 0x04	; 4
    e1ce:	90 e0       	ldi	r25, 0x00	; 0
    e1d0:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e1d4:	89 2b       	or	r24, r25
    e1d6:	39 f5       	brne	.+78     	; 0xe226 <setup+0x180>
    e1d8:	61 e0       	ldi	r22, 0x01	; 1
    e1da:	84 e0       	ldi	r24, 0x04	; 4
    e1dc:	90 e0       	ldi	r25, 0x00	; 0
    e1de:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e1e2:	81 15       	cp	r24, r1
    e1e4:	90 48       	sbci	r25, 0x80	; 128
    e1e6:	f9 f4       	brne	.+62     	; 0xe226 <setup+0x180>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:577
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    e1e8:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__malloc_margin+0x9>
    e1ec:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__malloc_margin+0xa>
    e1f0:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <__malloc_margin+0xb>
    e1f4:	2b 96       	adiw	r28, 0x0b	; 11
    e1f6:	8d af       	std	Y+61, r24	; 0x3d
    e1f8:	9e af       	std	Y+62, r25	; 0x3e
    e1fa:	af af       	std	Y+63, r26	; 0x3f
    e1fc:	2b 97       	sbiw	r28, 0x0b	; 11
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:578
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    e1fe:	23 e0       	ldi	r18, 0x03	; 3
    e200:	ae 01       	movw	r20, r28
    e202:	48 5b       	subi	r20, 0xB8	; 184
    e204:	5f 4f       	sbci	r21, 0xFF	; 255
    e206:	69 eb       	ldi	r22, 0xB9	; 185
    e208:	70 e0       	ldi	r23, 0x00	; 0
    e20a:	86 eb       	ldi	r24, 0xB6	; 182
    e20c:	9d e0       	ldi	r25, 0x0D	; 13
    e20e:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:579
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    e212:	60 e0       	ldi	r22, 0x00	; 0
    e214:	80 ed       	ldi	r24, 0xD0	; 208
    e216:	90 e0       	ldi	r25, 0x00	; 0
    e218:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
    e21c:	61 e0       	ldi	r22, 0x01	; 1
    e21e:	80 ed       	ldi	r24, 0xD0	; 208
    e220:	90 e0       	ldi	r25, 0x00	; 0
    e222:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:585
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1); //0x9341 0x9486
    e226:	61 e0       	ldi	r22, 0x01	; 1
    e228:	83 ed       	ldi	r24, 0xD3	; 211
    e22a:	90 e0       	ldi	r25, 0x00	; 0
    e22c:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:586
	if(ret == 0x9341)
    e230:	81 34       	cpi	r24, 0x41	; 65
    e232:	a3 e9       	ldi	r26, 0x93	; 147
    e234:	9a 07       	cpc	r25, r26
    e236:	89 f0       	breq	.+34     	; 0xe25a <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:590
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    e238:	86 38       	cpi	r24, 0x86	; 134
    e23a:	b4 e9       	ldi	r27, 0x94	; 148
    e23c:	9b 07       	cpc	r25, r27
    e23e:	69 f0       	breq	.+26     	; 0xe25a <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:594
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    e240:	88 38       	cpi	r24, 0x88	; 136
    e242:	e4 e9       	ldi	r30, 0x94	; 148
    e244:	9e 07       	cpc	r25, r30
    e246:	49 f0       	breq	.+18     	; 0xe25a <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:598
	{
		return 0x9488;
	}
	else if(ret == 0x7796)
    e248:	86 39       	cpi	r24, 0x96	; 150
    e24a:	f7 e7       	ldi	r31, 0x77	; 119
    e24c:	9f 07       	cpc	r25, r31
    e24e:	29 f0       	breq	.+10     	; 0xe25a <setup+0x1b4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:604
	{
		return 0x7796;
	}
	else
	{
		return Read_Reg(0, 0); //others
    e250:	60 e0       	ldi	r22, 0x00	; 0
    e252:	90 e0       	ldi	r25, 0x00	; 0
    e254:	80 e0       	ldi	r24, 0x00	; 0
    e256:	0e 94 02 8c 	call	0x11804	; 0x11804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>
Init_LCD():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:237
void LCDWIKI_KBV::Init_LCD(void)
{
	reset();
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    e25a:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <my_lcd+0x1b>
    e25e:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <my_lcd+0x1a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:240
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    e262:	00 91 d0 0d 	lds	r16, 0x0DD0	; 0x800dd0 <my_lcd+0x1a>
    e266:	10 91 d1 0d 	lds	r17, 0x0DD1	; 0x800dd1 <my_lcd+0x1b>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:955
    }
}

void LCDWIKI_KBV::start(uint16_t ID)
{
	reset();
    e26a:	0e 94 91 8b 	call	0x11722	; 0x11722 <LCDWIKI_KBV::reset() [clone .constprop.71]>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:956
	delay(200);
    e26e:	68 ec       	ldi	r22, 0xC8	; 200
    e270:	70 e0       	ldi	r23, 0x00	; 0
    e272:	80 e0       	ldi	r24, 0x00	; 0
    e274:	90 e0       	ldi	r25, 0x00	; 0
    e276:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:957
	switch(ID)
    e27a:	06 39       	cpi	r16, 0x96	; 150
    e27c:	17 47       	sbci	r17, 0x77	; 119
    e27e:	09 f0       	breq	.+2      	; 0xe282 <setup+0x1dc>
    e280:	34 c3       	rjmp	.+1640   	; 0xe8ea <setup+0x844>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:962
	{
		

		case 0x7796:
			lcd_driver = ID_7796;
    e282:	89 e0       	ldi	r24, 0x09	; 9
    e284:	90 e0       	ldi	r25, 0x00	; 0
    e286:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <my_lcd+0x19>
    e28a:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <my_lcd+0x18>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    e28e:	8a e2       	ldi	r24, 0x2A	; 42
    e290:	90 e0       	ldi	r25, 0x00	; 0
    e292:	90 93 d3 0d 	sts	0x0DD3, r25	; 0x800dd3 <my_lcd+0x1d>
    e296:	80 93 d2 0d 	sts	0x0DD2, r24	; 0x800dd2 <my_lcd+0x1c>
    e29a:	8b e2       	ldi	r24, 0x2B	; 43
    e29c:	90 e0       	ldi	r25, 0x00	; 0
    e29e:	90 93 d5 0d 	sts	0x0DD5, r25	; 0x800dd5 <my_lcd+0x1f>
    e2a2:	80 93 d4 0d 	sts	0x0DD4, r24	; 0x800dd4 <my_lcd+0x1e>
    e2a6:	8c e2       	ldi	r24, 0x2C	; 44
    e2a8:	90 e0       	ldi	r25, 0x00	; 0
    e2aa:	90 93 d7 0d 	sts	0x0DD7, r25	; 0x800dd7 <my_lcd+0x21>
    e2ae:	80 93 d6 0d 	sts	0x0DD6, r24	; 0x800dd6 <my_lcd+0x20>
    e2b2:	8e e2       	ldi	r24, 0x2E	; 46
    e2b4:	90 e0       	ldi	r25, 0x00	; 0
    e2b6:	90 93 d9 0d 	sts	0x0DD9, r25	; 0x800dd9 <my_lcd+0x23>
    e2ba:	80 93 d8 0d 	sts	0x0DD8, r24	; 0x800dd8 <my_lcd+0x22>
    e2be:	83 e3       	ldi	r24, 0x33	; 51
    e2c0:	90 e0       	ldi	r25, 0x00	; 0
    e2c2:	90 93 db 0d 	sts	0x0DDB, r25	; 0x800ddb <my_lcd+0x25>
    e2c6:	80 93 da 0d 	sts	0x0DDA, r24	; 0x800dda <my_lcd+0x24>
    e2ca:	87 e3       	ldi	r24, 0x37	; 55
    e2cc:	90 e0       	ldi	r25, 0x00	; 0
    e2ce:	90 93 dd 0d 	sts	0x0DDD, r25	; 0x800ddd <my_lcd+0x27>
    e2d2:	80 93 dc 0d 	sts	0x0DDC, r24	; 0x800ddc <my_lcd+0x26>
    e2d6:	86 e3       	ldi	r24, 0x36	; 54
    e2d8:	90 e0       	ldi	r25, 0x00	; 0
    e2da:	90 93 df 0d 	sts	0x0DDF, r25	; 0x800ddf <my_lcd+0x29>
    e2de:	80 93 de 0d 	sts	0x0DDE, r24	; 0x800dde <my_lcd+0x28>
    e2e2:	10 92 e1 0d 	sts	0x0DE1, r1	; 0x800de1 <my_lcd+0x2b>
    e2e6:	10 92 e0 0d 	sts	0x0DE0, r1	; 0x800de0 <my_lcd+0x2a>
    e2ea:	10 92 e3 0d 	sts	0x0DE3, r1	; 0x800de3 <my_lcd+0x2d>
    e2ee:	10 92 e2 0d 	sts	0x0DE2, r1	; 0x800de2 <my_lcd+0x2c>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:912
}

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    e2f2:	2a e7       	ldi	r18, 0x7A	; 122
    e2f4:	e2 2e       	mov	r14, r18
    e2f6:	22 e3       	ldi	r18, 0x32	; 50
    e2f8:	f2 2e       	mov	r15, r18
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:965

		case 0x7796:
			lcd_driver = ID_7796;
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    e2fa:	3c e6       	ldi	r19, 0x6C	; 108
    e2fc:	c3 2e       	mov	r12, r19
    e2fe:	d1 2c       	mov	r13, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:915
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    e300:	f7 01       	movw	r30, r14
    e302:	64 91       	lpm	r22, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:916
        uint8_t len = pgm_read_byte(p++);
    e304:	31 96       	adiw	r30, 0x01	; 1
    e306:	14 91       	lpm	r17, Z
    e308:	f2 e0       	ldi	r31, 0x02	; 2
    e30a:	ef 0e       	add	r14, r31
    e30c:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:917
        if (cmd == TFTLCD_DELAY8) 
    e30e:	6f 37       	cpi	r22, 0x7F	; 127
    e310:	89 f0       	breq	.+34     	; 0xe334 <setup+0x28e>
    e312:	de 01       	movw	r26, r28
    e314:	a8 5b       	subi	r26, 0xB8	; 184
    e316:	bf 4f       	sbci	r27, 0xFF	; 255
    e318:	30 e0       	ldi	r19, 0x00	; 0
    e31a:	20 e0       	ldi	r18, 0x00	; 0
    e31c:	ad 01       	movw	r20, r26
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:924
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    e31e:	21 17       	cp	r18, r17
    e320:	08 f0       	brcs	.+2      	; 0xe324 <setup+0x27e>
    e322:	da c2       	rjmp	.+1460   	; 0xe8d8 <setup+0x832>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:926
            {
                dat[i] = pgm_read_byte(p++);
    e324:	f7 01       	movw	r30, r14
    e326:	e2 0f       	add	r30, r18
    e328:	f3 1f       	adc	r31, r19
    e32a:	e4 91       	lpm	r30, Z
    e32c:	ed 93       	st	X+, r30
    e32e:	2f 5f       	subi	r18, 0xFF	; 255
    e330:	3f 4f       	sbci	r19, 0xFF	; 255
    e332:	f5 cf       	rjmp	.-22     	; 0xe31e <setup+0x278>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:919
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    e334:	61 2f       	mov	r22, r17
    e336:	70 e0       	ldi	r23, 0x00	; 0
    e338:	90 e0       	ldi	r25, 0x00	; 0
    e33a:	80 e0       	ldi	r24, 0x00	; 0
    e33c:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
setup():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:920
            len = 0;
    e340:	10 e0       	ldi	r17, 0x00	; 0
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:930
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    e342:	61 2f       	mov	r22, r17
    e344:	70 e0       	ldi	r23, 0x00	; 0
    e346:	6e 5f       	subi	r22, 0xFE	; 254
    e348:	7f 4f       	sbci	r23, 0xFF	; 255
    e34a:	c6 1a       	sub	r12, r22
    e34c:	d7 0a       	sbc	r13, r23
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:913

void LCDWIKI_KBV:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    e34e:	1c 14       	cp	r1, r12
    e350:	1d 04       	cpc	r1, r13
    e352:	b4 f2       	brlt	.-84     	; 0xe300 <setup+0x25a>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:1002
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    e354:	80 91 cc 0d 	lds	r24, 0x0DCC	; 0x800dcc <my_lcd+0x16>
    e358:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:892
}

//Anti color display 
void LCDWIKI_KBV::Invert_Display(boolean i)
{
	CS_ACTIVE;
    e35c:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
    e360:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
    e364:	80 81       	ld	r24, Z
    e366:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x3a>
    e36a:	89 23       	and	r24, r25
    e36c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:893
	uint8_t val = VL^i;
    e36e:	90 91 e0 0d 	lds	r25, 0x0DE0	; 0x800de0 <my_lcd+0x2a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:894
	if(lcd_driver == ID_932X)
    e372:	20 91 ce 0d 	lds	r18, 0x0DCE	; 0x800dce <my_lcd+0x18>
    e376:	30 91 cf 0d 	lds	r19, 0x0DCF	; 0x800dcf <my_lcd+0x19>
    e37a:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
    e37e:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
    e382:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
    e386:	21 15       	cp	r18, r1
    e388:	31 05       	cpc	r19, r1
    e38a:	09 f0       	breq	.+2      	; 0xe38e <setup+0x2e8>
    e38c:	b5 c2       	rjmp	.+1386   	; 0xe8f8 <setup+0x852>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:896
	{
		writeCmdData8(0x61, val);
    e38e:	20 81       	ld	r18, Z
    e390:	82 23       	and	r24, r18
    e392:	80 83       	st	Z, r24
    e394:	81 e6       	ldi	r24, 0x61	; 97
    e396:	82 b9       	out	0x02, r24	; 2
    e398:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e39c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e3a0:	80 81       	ld	r24, Z
    e3a2:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
    e3a6:	82 23       	and	r24, r18
    e3a8:	80 83       	st	Z, r24
    e3aa:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e3ae:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e3b2:	80 81       	ld	r24, Z
    e3b4:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
    e3b8:	82 2b       	or	r24, r18
    e3ba:	80 83       	st	Z, r24
    e3bc:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
    e3c0:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
    e3c4:	80 81       	ld	r24, Z
    e3c6:	20 91 ed 0d 	lds	r18, 0x0DED	; 0x800ded <my_lcd+0x37>
    e3ca:	82 2b       	or	r24, r18
    e3cc:	80 83       	st	Z, r24
    e3ce:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	}
	else if(lcd_driver == ID_7575)
	{
		writeCmdData8(0x01, val ? 8 : 10);
    e3d0:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e3d4:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e3d8:	80 81       	ld	r24, Z
    e3da:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
    e3de:	89 23       	and	r24, r25
    e3e0:	80 83       	st	Z, r24
    e3e2:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e3e6:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e3ea:	80 81       	ld	r24, Z
    e3ec:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    e3f0:	89 2b       	or	r24, r25
    e3f2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:906
	}
	CS_IDLE;
    e3f4:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
    e3f8:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
    e3fc:	80 81       	ld	r24, Z
    e3fe:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x36>
    e402:	89 2b       	or	r24, r25
    e404:	80 83       	st	Z, r24
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4275
  swSPI.begin();

  MenuHistoryInit();

  my_lcd.Init_LCD();
  my_lcd.Set_Rotation(3);
    e406:	83 e0       	ldi	r24, 0x03	; 3
    e408:	0e 94 2c 86 	call	0x10c58	; 0x10c58 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>
TP_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:341
	return touch_statue&TP_PRES_DOWN;
}

void LCDWIKI_TOUCH::TP_Set_Rotation(uint8_t val)
{
	touch_rotation = val;
    e40c:	83 e0       	ldi	r24, 0x03	; 3
    e40e:	80 93 a5 0d 	sts	0x0DA5, r24	; 0x800da5 <my_touch+0xd>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    e412:	20 91 ca 0d 	lds	r18, 0x0DCA	; 0x800dca <my_lcd+0x14>
    e416:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    e41a:	40 91 c8 0d 	lds	r20, 0x0DC8	; 0x800dc8 <my_lcd+0x12>
    e41e:	50 91 c9 0d 	lds	r21, 0x0DC9	; 0x800dc9 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    e422:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    e426:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <my_touch+0x15>
    e42a:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <my_touch+0x16>
    e42e:	80 81       	ld	r24, Z
    e430:	60 91 b4 0d 	lds	r22, 0x0DB4	; 0x800db4 <my_touch+0x1c>
    e434:	86 2b       	or	r24, r22
    e436:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    e438:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <my_touch+0x11>
    e43c:	f0 91 aa 0d 	lds	r31, 0x0DAA	; 0x800daa <my_touch+0x12>
    e440:	80 81       	ld	r24, Z
    e442:	60 91 b2 0d 	lds	r22, 0x0DB2	; 0x800db2 <my_touch+0x1a>
    e446:	86 2b       	or	r24, r22
    e448:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    e44a:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <my_touch+0xf>
    e44e:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <my_touch+0x10>
    e452:	80 81       	ld	r24, Z
    e454:	60 91 b1 0d 	lds	r22, 0x0DB1	; 0x800db1 <my_touch+0x19>
    e458:	86 2b       	or	r24, r22
    e45a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    e45c:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <my_touch+0x9>
    e460:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    e464:	30 93 a3 0d 	sts	0x0DA3, r19	; 0x800da3 <my_touch+0xb>
    e468:	20 93 a2 0d 	sts	0x0DA2, r18	; 0x800da2 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    e46c:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <my_touch+0xe>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4278
  my_touch.TP_Set_Rotation(3);
  my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
  my_lcd.Fill_Screen(WHITE);
    e470:	8f ef       	ldi	r24, 0xFF	; 255
    e472:	9f ef       	ldi	r25, 0xFF	; 255
    e474:	0e 94 89 84 	call	0x10912	; 0x10912 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>
Set_Draw_color():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
    e478:	8f e1       	ldi	r24, 0x1F	; 31
    e47a:	90 e0       	ldi	r25, 0x00	; 0
    e47c:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
    e480:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4280
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
    e484:	1e 01       	movw	r2, r28
    e486:	28 e4       	ldi	r18, 0x48	; 72
    e488:	22 0e       	add	r2, r18
    e48a:	31 1c       	adc	r3, r1
    e48c:	61 ef       	ldi	r22, 0xF1	; 241
    e48e:	73 e3       	ldi	r23, 0x33	; 51
    e490:	c1 01       	movw	r24, r2
    e492:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4281
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
    e496:	ee 24       	eor	r14, r14
    e498:	ea 94       	dec	r14
    e49a:	fe 2c       	mov	r15, r14
    e49c:	0f e1       	ldi	r16, 0x1F	; 31
    e49e:	10 e0       	ldi	r17, 0x00	; 0
    e4a0:	22 e0       	ldi	r18, 0x02	; 2
    e4a2:	4a e0       	ldi	r20, 0x0A	; 10
    e4a4:	50 e0       	ldi	r21, 0x00	; 0
    e4a6:	6e e1       	ldi	r22, 0x1E	; 30
    e4a8:	70 e0       	ldi	r23, 0x00	; 0
    e4aa:	c1 01       	movw	r24, r2
    e4ac:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e4b0:	8e e1       	ldi	r24, 0x1E	; 30
    e4b2:	90 e0       	ldi	r25, 0x00	; 0
    e4b4:	c4 5c       	subi	r28, 0xC4	; 196
    e4b6:	de 4f       	sbci	r29, 0xFE	; 254
    e4b8:	99 83       	std	Y+1, r25	; 0x01
    e4ba:	88 83       	st	Y, r24
    e4bc:	cc 53       	subi	r28, 0x3C	; 60
    e4be:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
  ///
  for (uint8_t init = 0;  init < 16; init++)
    e4c0:	a1 2c       	mov	r10, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    {
      strcpy_P(str1, text_rtc_cas);
    e4c2:	d2 2c       	mov	r13, r2
    e4c4:	b3 2c       	mov	r11, r3
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    e4c6:	a2 e3       	ldi	r26, 0x32	; 50
    e4c8:	b1 e0       	ldi	r27, 0x01	; 1
    e4ca:	ac 0f       	add	r26, r28
    e4cc:	bd 1f       	adc	r27, r29
    e4ce:	12 96       	adiw	r26, 0x02	; 2
    e4d0:	cc 5b       	subi	r28, 0xBC	; 188
    e4d2:	de 4f       	sbci	r29, 0xFE	; 254
    e4d4:	b9 83       	std	Y+1, r27	; 0x01
    e4d6:	a8 83       	st	Y, r26
    e4d8:	c4 54       	subi	r28, 0x44	; 68
    e4da:	d1 40       	sbci	r29, 0x01	; 1
    e4dc:	ec e2       	ldi	r30, 0x2C	; 44
    e4de:	f1 e0       	ldi	r31, 0x01	; 1
    e4e0:	ec 0f       	add	r30, r28
    e4e2:	fd 1f       	adc	r31, r29
    e4e4:	32 96       	adiw	r30, 0x02	; 2
    e4e6:	ca 5b       	subi	r28, 0xBA	; 186
    e4e8:	de 4f       	sbci	r29, 0xFE	; 254
    e4ea:	f9 83       	std	Y+1, r31	; 0x01
    e4ec:	e8 83       	st	Y, r30
    e4ee:	c6 54       	subi	r28, 0x46	; 70
    e4f0:	d1 40       	sbci	r29, 0x01	; 1
    e4f2:	26 e2       	ldi	r18, 0x26	; 38
    e4f4:	31 e0       	ldi	r19, 0x01	; 1
    e4f6:	2c 0f       	add	r18, r28
    e4f8:	3d 1f       	adc	r19, r29
    e4fa:	2e 5f       	subi	r18, 0xFE	; 254
    e4fc:	3f 4f       	sbci	r19, 0xFF	; 255
    e4fe:	c8 5b       	subi	r28, 0xB8	; 184
    e500:	de 4f       	sbci	r29, 0xFE	; 254
    e502:	39 83       	std	Y+1, r19	; 0x01
    e504:	28 83       	st	Y, r18
    e506:	c8 54       	subi	r28, 0x48	; 72
    e508:	d1 40       	sbci	r29, 0x01	; 1
    e50a:	8e ed       	ldi	r24, 0xDE	; 222
    e50c:	90 e0       	ldi	r25, 0x00	; 0
    e50e:	8c 0f       	add	r24, r28
    e510:	9d 1f       	adc	r25, r29
    e512:	02 96       	adiw	r24, 0x02	; 2
    e514:	c6 5b       	subi	r28, 0xB6	; 182
    e516:	de 4f       	sbci	r29, 0xFE	; 254
    e518:	99 83       	std	Y+1, r25	; 0x01
    e51a:	88 83       	st	Y, r24
    e51c:	ca 54       	subi	r28, 0x4A	; 74
    e51e:	d1 40       	sbci	r29, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
    e520:	a8 ec       	ldi	r26, 0xC8	; 200
    e522:	b0 e0       	ldi	r27, 0x00	; 0
    e524:	ac 0f       	add	r26, r28
    e526:	bd 1f       	adc	r27, r29
    e528:	1c 96       	adiw	r26, 0x0c	; 12
    e52a:	c4 5b       	subi	r28, 0xB4	; 180
    e52c:	de 4f       	sbci	r29, 0xFE	; 254
    e52e:	b9 83       	std	Y+1, r27	; 0x01
    e530:	a8 83       	st	Y, r26
    e532:	cc 54       	subi	r28, 0x4C	; 76
    e534:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4285
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
  {
    show_string("X", 30 + (init * 15), 30, 1, RED, WHITE, 0);
    e536:	ee 24       	eor	r14, r14
    e538:	ea 94       	dec	r14
    e53a:	fe 2c       	mov	r15, r14
    e53c:	00 e0       	ldi	r16, 0x00	; 0
    e53e:	18 ef       	ldi	r17, 0xF8	; 248
    e540:	21 e0       	ldi	r18, 0x01	; 1
    e542:	4e e1       	ldi	r20, 0x1E	; 30
    e544:	50 e0       	ldi	r21, 0x00	; 0
    e546:	c4 5c       	subi	r28, 0xC4	; 196
    e548:	de 4f       	sbci	r29, 0xFE	; 254
    e54a:	68 81       	ld	r22, Y
    e54c:	79 81       	ldd	r23, Y+1	; 0x01
    e54e:	cc 53       	subi	r28, 0x3C	; 60
    e550:	d1 40       	sbci	r29, 0x01	; 1
    e552:	80 ea       	ldi	r24, 0xA0	; 160
    e554:	96 e0       	ldi	r25, 0x06	; 6
    e556:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4287
    /// inicalizace vnitrniho ADC prevodniku
    if (init == 0)
    e55a:	a1 10       	cpse	r10, r1
    e55c:	18 c2       	rjmp	.+1072   	; 0xe98e <setup+0x8e8>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4289
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e55e:	61 ee       	ldi	r22, 0xE1	; 225
    e560:	73 e3       	ldi	r23, 0x33	; 51
    e562:	c1 01       	movw	r24, r2
    e564:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4290
      strcat(str1, ":1");
    e568:	62 ea       	ldi	r22, 0xA2	; 162
    e56a:	76 e0       	ldi	r23, 0x06	; 6
    e56c:	c1 01       	movw	r24, r2
    e56e:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4291
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e572:	00 ee       	ldi	r16, 0xE0	; 224
    e574:	17 e0       	ldi	r17, 0x07	; 7
    e576:	21 e0       	ldi	r18, 0x01	; 1
    e578:	42 e3       	ldi	r20, 0x32	; 50
    e57a:	50 e0       	ldi	r21, 0x00	; 0
    e57c:	6e e1       	ldi	r22, 0x1E	; 30
    e57e:	70 e0       	ldi	r23, 0x00	; 0
    e580:	c1 01       	movw	r24, r2
    e582:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4293

      tritri = 0;
    e586:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <tritri+0x1>
    e58a:	10 92 08 0a 	sts	0x0A08, r1	; 0x800a08 <tritri>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4294
      petnula = 0;
    e58e:	10 92 07 0a 	sts	0x0A07, r1	; 0x800a07 <petnula+0x1>
    e592:	10 92 06 0a 	sts	0x0A06, r1	; 0x800a06 <petnula>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4295
      dvanact = 0;
    e596:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <dvanact+0x1>
    e59a:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <dvanact>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4297
      dvanact = 0;
      light_curr = 0;
    e59e:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <light_curr+0x1>
    e5a2:	10 92 cc 0a 	sts	0x0ACC, r1	; 0x800acc <light_curr>
init_a2d():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:35

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// inicializace a2d prevodniku //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init_a2d(uint8_t enable_channel, uint8_t delicka, uint8_t reference)
{
a2d_enable = enable_channel;
    e5a6:	88 ef       	ldi	r24, 0xF8	; 248
    e5a8:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:36
a2d_reference = reference;
    e5ac:	83 e0       	ldi	r24, 0x03	; 3
    e5ae:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <a2d_reference>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:38
a2d_delicka = delicka;
a2d_index = 0;
    e5b2:	10 92 cb 0a 	sts	0x0ACB, r1	; 0x800acb <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:39
a2d_input = 0;
    e5b6:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:41
a2d_data = 0;
ADCSRA = ((1<<ADEN|1<<ADIE) + (a2d_delicka & 7));
    e5ba:	8e e8       	ldi	r24, 0x8E	; 142
    e5bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:42
ADMUX = 0;
    e5c0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:43
ADMUX = ((a2d_reference & 3) << 6) ;
    e5c4:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <a2d_reference>
    e5c8:	b0 e4       	ldi	r27, 0x40	; 64
    e5ca:	8b 9f       	mul	r24, r27
    e5cc:	c0 01       	movw	r24, r0
    e5ce:	11 24       	eor	r1, r1
    e5d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
a2d_handler():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:18
typedef void (*a2d_interupt)(uint8_t, uint16_t);
volatile static a2d_interupt a2d_interupt_func;

void a2d_handler(void (*a2d_command)(uint8_t channel, uint16_t data))
{
a2d_interupt_func = a2d_command;
    e5d4:	81 e4       	ldi	r24, 0x41	; 65
    e5d6:	95 e2       	ldi	r25, 0x25	; 37
    e5d8:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
    e5dc:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_ZL17a2d_interupt_func.lto_priv.228>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4303
      /// inicializace prevodniku
      init_a2d((1 << A_PROUD | 1 << A_TRIV | 1 << A_PETV | 1 << A_DVANACTV | 1 << A_LIGHT), 6, 3);
      a2d_handler(a2d_complete);
      ///
      /// spotreba proudu
      a2d_run_now = 0;
    e5e0:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4304
      a2d_start_first(A_PROUD);
    e5e4:	83 e0       	ldi	r24, 0x03	; 3
    e5e6:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4305
      milis = millis();
    e5ea:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e5ee:	2b 01       	movw	r4, r22
    e5f0:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4306
      while (a2d_run_now == 0 && millis() - milis < 10);
    e5f2:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
    e5f6:	81 11       	cpse	r24, r1
    e5f8:	0b c0       	rjmp	.+22     	; 0xe610 <setup+0x56a>
    e5fa:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e5fe:	64 19       	sub	r22, r4
    e600:	75 09       	sbc	r23, r5
    e602:	86 09       	sbc	r24, r6
    e604:	97 09       	sbc	r25, r7
    e606:	6a 30       	cpi	r22, 0x0A	; 10
    e608:	71 05       	cpc	r23, r1
    e60a:	81 05       	cpc	r24, r1
    e60c:	91 05       	cpc	r25, r1
    e60e:	88 f3       	brcs	.-30     	; 0xe5f2 <setup+0x54c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4308
      /// regulator 3.3V
      a2d_run_now = 0;
    e610:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4309
      a2d_start_first(A_TRIV);
    e614:	86 e0       	ldi	r24, 0x06	; 6
    e616:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4310
      milis = millis();
    e61a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e61e:	2b 01       	movw	r4, r22
    e620:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4311
      while (a2d_run_now == 0 && millis() - milis < 10);
    e622:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
    e626:	81 11       	cpse	r24, r1
    e628:	0b c0       	rjmp	.+22     	; 0xe640 <setup+0x59a>
    e62a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e62e:	64 19       	sub	r22, r4
    e630:	75 09       	sbc	r23, r5
    e632:	86 09       	sbc	r24, r6
    e634:	97 09       	sbc	r25, r7
    e636:	6a 30       	cpi	r22, 0x0A	; 10
    e638:	71 05       	cpc	r23, r1
    e63a:	81 05       	cpc	r24, r1
    e63c:	91 05       	cpc	r25, r1
    e63e:	88 f3       	brcs	.-30     	; 0xe622 <setup+0x57c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4313
      /// regulator 5.0V
      a2d_run_now = 0;
    e640:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4314
      a2d_start_first(A_PETV);
    e644:	85 e0       	ldi	r24, 0x05	; 5
    e646:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4315
      milis = millis();
    e64a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e64e:	2b 01       	movw	r4, r22
    e650:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4316
      while (a2d_run_now == 0 && millis() - milis < 10);
    e652:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
    e656:	81 11       	cpse	r24, r1
    e658:	0b c0       	rjmp	.+22     	; 0xe670 <setup+0x5ca>
    e65a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e65e:	64 19       	sub	r22, r4
    e660:	75 09       	sbc	r23, r5
    e662:	86 09       	sbc	r24, r6
    e664:	97 09       	sbc	r25, r7
    e666:	6a 30       	cpi	r22, 0x0A	; 10
    e668:	71 05       	cpc	r23, r1
    e66a:	81 05       	cpc	r24, r1
    e66c:	91 05       	cpc	r25, r1
    e66e:	88 f3       	brcs	.-30     	; 0xe652 <setup+0x5ac>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4318
      /// vstupni napeti 12V
      a2d_run_now = 0;
    e670:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4319
      a2d_start_first(A_DVANACTV);
    e674:	84 e0       	ldi	r24, 0x04	; 4
    e676:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4320
      milis = millis();
    e67a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e67e:	2b 01       	movw	r4, r22
    e680:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4321
      while (a2d_run_now == 0 && millis() - milis < 10);
    e682:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
    e686:	81 11       	cpse	r24, r1
    e688:	0b c0       	rjmp	.+22     	; 0xe6a0 <setup+0x5fa>
    e68a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e68e:	64 19       	sub	r22, r4
    e690:	75 09       	sbc	r23, r5
    e692:	86 09       	sbc	r24, r6
    e694:	97 09       	sbc	r25, r7
    e696:	6a 30       	cpi	r22, 0x0A	; 10
    e698:	71 05       	cpc	r23, r1
    e69a:	81 05       	cpc	r24, r1
    e69c:	91 05       	cpc	r25, r1
    e69e:	88 f3       	brcs	.-30     	; 0xe682 <setup+0x5dc>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4323
      /// aktualni intenzita svetla
      a2d_run_now = 0;
    e6a0:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4324
      a2d_start_first(A_LIGHT);
    e6a4:	87 e0       	ldi	r24, 0x07	; 7
    e6a6:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4325
      milis = millis();
    e6aa:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e6ae:	2b 01       	movw	r4, r22
    e6b0:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4326
      while (a2d_run_now == 0 && millis() - milis < 10);
    e6b2:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
    e6b6:	81 11       	cpse	r24, r1
    e6b8:	0b c0       	rjmp	.+22     	; 0xe6d0 <setup+0x62a>
    e6ba:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    e6be:	64 19       	sub	r22, r4
    e6c0:	75 09       	sbc	r23, r5
    e6c2:	86 09       	sbc	r24, r6
    e6c4:	97 09       	sbc	r25, r7
    e6c6:	6a 30       	cpi	r22, 0x0A	; 10
    e6c8:	71 05       	cpc	r23, r1
    e6ca:	81 05       	cpc	r24, r1
    e6cc:	91 05       	cpc	r25, r1
    e6ce:	88 f3       	brcs	.-30     	; 0xe6b2 <setup+0x60c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4328
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
    e6d0:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e6d4:	4e 01       	movw	r8, r28
    e6d6:	ea ef       	ldi	r30, 0xFA	; 250
    e6d8:	8e 1a       	sub	r8, r30
    e6da:	ee ef       	ldi	r30, 0xFE	; 254
    e6dc:	9e 0a       	sbc	r9, r30
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e6de:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <tritri>
    e6e2:	90 91 09 0a 	lds	r25, 0x0A09	; 0x800a09 <tritri+0x1>
    e6e6:	25 e0       	ldi	r18, 0x05	; 5
    e6e8:	28 9f       	mul	r18, r24
    e6ea:	b0 01       	movw	r22, r0
    e6ec:	29 9f       	mul	r18, r25
    e6ee:	70 0d       	add	r23, r0
    e6f0:	11 24       	eor	r1, r1
    e6f2:	90 e0       	ldi	r25, 0x00	; 0
    e6f4:	80 e0       	ldi	r24, 0x00	; 0
    e6f6:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    e6fa:	20 e0       	ldi	r18, 0x00	; 0
    e6fc:	30 e0       	ldi	r19, 0x00	; 0
    e6fe:	4a e7       	ldi	r20, 0x7A	; 122
    e700:	54 e4       	ldi	r21, 0x44	; 68
    e702:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4330
      milis = millis();
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
    e706:	84 01       	movw	r16, r8
    e708:	22 e0       	ldi	r18, 0x02	; 2
    e70a:	44 e0       	ldi	r20, 0x04	; 4
    e70c:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4331
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e710:	7e 01       	movw	r14, r28
    e712:	f2 ef       	ldi	r31, 0xF2	; 242
    e714:	ef 1a       	sub	r14, r31
    e716:	fe ef       	ldi	r31, 0xFE	; 254
    e718:	ff 0a       	sbc	r15, r31
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e71a:	60 91 06 0a 	lds	r22, 0x0A06	; 0x800a06 <petnula>
    e71e:	70 91 07 0a 	lds	r23, 0x0A07	; 0x800a07 <petnula+0x1>
    e722:	13 e0       	ldi	r17, 0x03	; 3
    e724:	66 0f       	add	r22, r22
    e726:	77 1f       	adc	r23, r23
    e728:	1a 95       	dec	r17
    e72a:	e1 f7       	brne	.-8      	; 0xe724 <setup+0x67e>
    e72c:	90 e0       	ldi	r25, 0x00	; 0
    e72e:	80 e0       	ldi	r24, 0x00	; 0
    e730:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    e734:	20 e0       	ldi	r18, 0x00	; 0
    e736:	30 e0       	ldi	r19, 0x00	; 0
    e738:	4a e7       	ldi	r20, 0x7A	; 122
    e73a:	54 e4       	ldi	r21, 0x44	; 68
    e73c:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4331
      while (a2d_run_now == 0 && millis() - milis < 10);
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
    e740:	87 01       	movw	r16, r14
    e742:	22 e0       	ldi	r18, 0x02	; 2
    e744:	44 e0       	ldi	r20, 0x04	; 4
    e746:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e74a:	3e 01       	movw	r6, r28
    e74c:	2a ee       	ldi	r18, 0xEA	; 234
    e74e:	62 1a       	sub	r6, r18
    e750:	2e ef       	ldi	r18, 0xFE	; 254
    e752:	72 0a       	sbc	r7, r18
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
    e754:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <dvanact>
    e758:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <dvanact+0x1>
    e75c:	29 e3       	ldi	r18, 0x39	; 57
    e75e:	28 9f       	mul	r18, r24
    e760:	b0 01       	movw	r22, r0
    e762:	29 9f       	mul	r18, r25
    e764:	70 0d       	add	r23, r0
    e766:	11 24       	eor	r1, r1
    e768:	90 e0       	ldi	r25, 0x00	; 0
    e76a:	80 e0       	ldi	r24, 0x00	; 0
    e76c:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
    e770:	20 e0       	ldi	r18, 0x00	; 0
    e772:	30 e0       	ldi	r19, 0x00	; 0
    e774:	4a e7       	ldi	r20, 0x7A	; 122
    e776:	54 e4       	ldi	r21, 0x44	; 68
    e778:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4332
      /// zatim nepotrebuji automaticke mereni
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
    e77c:	83 01       	movw	r16, r6
    e77e:	22 e0       	ldi	r18, 0x02	; 2
    e780:	44 e0       	ldi	r20, 0x04	; 4
    e782:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e786:	2e 01       	movw	r4, r28
    e788:	32 ee       	ldi	r19, 0xE2	; 226
    e78a:	43 1a       	sub	r4, r19
    e78c:	3e ef       	ldi	r19, 0xFE	; 254
    e78e:	53 0a       	sbc	r5, r19
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
    e790:	60 91 02 0a 	lds	r22, 0x0A02	; 0x800a02 <proud>
    e794:	70 91 03 0a 	lds	r23, 0x0A03	; 0x800a03 <proud+0x1>
    e798:	90 e0       	ldi	r25, 0x00	; 0
    e79a:	80 e0       	ldi	r24, 0x00	; 0
    e79c:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4333
      a2d_run_now = 0;
      /// prevedu float na string
      dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, s_tritri);
      dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, s_petnula);
      dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, s_dvanact);
      dtostrf(prepocet_proudu(proud), 4, 2, s_current);
    e7a0:	82 01       	movw	r16, r4
    e7a2:	22 e0       	ldi	r18, 0x02	; 2
    e7a4:	44 e0       	ldi	r20, 0x04	; 4
    e7a6:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4334
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
    e7aa:	5f 92       	push	r5
    e7ac:	4f 92       	push	r4
    e7ae:	7f 92       	push	r7
    e7b0:	6f 92       	push	r6
    e7b2:	ff 92       	push	r15
    e7b4:	ef 92       	push	r14
    e7b6:	9f 92       	push	r9
    e7b8:	8f 92       	push	r8
    e7ba:	85 ea       	ldi	r24, 0xA5	; 165
    e7bc:	96 e0       	ldi	r25, 0x06	; 6
    e7be:	9f 93       	push	r25
    e7c0:	8f 93       	push	r24
    e7c2:	4e 01       	movw	r8, r28
    e7c4:	88 e8       	ldi	r24, 0x88	; 136
    e7c6:	88 0e       	add	r8, r24
    e7c8:	91 1c       	adc	r9, r1
    e7ca:	9f 92       	push	r9
    e7cc:	8f 92       	push	r8
    e7ce:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4335
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e7d2:	ee 24       	eor	r14, r14
    e7d4:	ea 94       	dec	r14
    e7d6:	fe 2c       	mov	r15, r14
    e7d8:	00 ee       	ldi	r16, 0xE0	; 224
    e7da:	17 e0       	ldi	r17, 0x07	; 7
    e7dc:	21 e0       	ldi	r18, 0x01	; 1
    e7de:	42 e3       	ldi	r20, 0x32	; 50
    e7e0:	50 e0       	ldi	r21, 0x00	; 0
    e7e2:	60 ea       	ldi	r22, 0xA0	; 160
    e7e4:	70 e0       	ldi	r23, 0x00	; 0
    e7e6:	c4 01       	movw	r24, r8
    e7e8:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    e7ec:	0f b6       	in	r0, 0x3f	; 63
    e7ee:	f8 94       	cli
    e7f0:	de bf       	out	0x3e, r29	; 62
    e7f2:	0f be       	out	0x3f, r0	; 63
    e7f4:	cd bf       	out	0x3d, r28	; 61
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4625
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    }
    ///
    /// kontrola NTP serveru
    if (init == 14)
    e7f6:	2e e0       	ldi	r18, 0x0E	; 14
    e7f8:	a2 12       	cpse	r10, r18
    e7fa:	0c 94 33 7c 	jmp	0xf866	; 0xf866 <setup+0x17c0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4627
    {
      strcpy_P(str1, text_ntp_cas);
    e7fe:	69 ef       	ldi	r22, 0xF9	; 249
    e800:	72 e3       	ldi	r23, 0x32	; 50
    e802:	c1 01       	movw	r24, r2
    e804:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4628
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e808:	ee 24       	eor	r14, r14
    e80a:	ea 94       	dec	r14
    e80c:	fe 2c       	mov	r15, r14
    e80e:	00 ee       	ldi	r16, 0xE0	; 224
    e810:	17 e0       	ldi	r17, 0x07	; 7
    e812:	21 e0       	ldi	r18, 0x01	; 1
    e814:	4e eb       	ldi	r20, 0xBE	; 190
    e816:	50 e0       	ldi	r21, 0x00	; 0
    e818:	6e e1       	ldi	r22, 0x1E	; 30
    e81a:	70 e0       	ldi	r23, 0x00	; 0
    e81c:	c1 01       	movw	r24, r2
    e81e:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:421

uint8_t ntp_check(NTPClient *timeClient)
{
  char tmp1[20];
  uint8_t ret = 0;
  tmp1[0] = 0;
    e822:	c2 52       	subi	r28, 0x22	; 34
    e824:	df 4f       	sbci	r29, 0xFF	; 255
    e826:	18 82       	st	Y, r1
    e828:	ce 5d       	subi	r28, 0xDE	; 222
    e82a:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:422
  createString(tmp1, '.', device.ntp_server, 4, 10);
    e82c:	0a e0       	ldi	r16, 0x0A	; 10
    e82e:	24 e0       	ldi	r18, 0x04	; 4
    e830:	49 e6       	ldi	r20, 0x69	; 105
    e832:	5c e0       	ldi	r21, 0x0C	; 12
    e834:	6e e2       	ldi	r22, 0x2E	; 46
    e836:	ce 01       	movw	r24, r28
    e838:	82 52       	subi	r24, 0x22	; 34
    e83a:	9f 4f       	sbci	r25, 0xFF	; 255
    e83c:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
    e840:	89 e3       	ldi	r24, 0x39	; 57
    e842:	95 e0       	ldi	r25, 0x05	; 5
    e844:	9f 83       	std	Y+7, r25	; 0x07
    e846:	8e 83       	std	Y+6, r24	; 0x06
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
    e848:	89 81       	ldd	r24, Y+1	; 0x01
    e84a:	9a 81       	ldd	r25, Y+2	; 0x02
    e84c:	dc 01       	movw	r26, r24
    e84e:	ed 91       	ld	r30, X+
    e850:	fc 91       	ld	r31, X
    e852:	06 84       	ldd	r0, Z+14	; 0x0e
    e854:	f7 85       	ldd	r31, Z+15	; 0x0f
    e856:	e0 2d       	mov	r30, r0
    e858:	69 e3       	ldi	r22, 0x39	; 57
    e85a:	75 e0       	ldi	r23, 0x05	; 5
    e85c:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
    e85e:	81 e0       	ldi	r24, 0x01	; 1
    e860:	8b 83       	std	Y+3, r24	; 0x03
setTimeOffset():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:172

  this->_udpSetup = false;
}

void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
    e862:	80 e1       	ldi	r24, 0x10	; 16
    e864:	9e e0       	ldi	r25, 0x0E	; 14
    e866:	a0 e0       	ldi	r26, 0x00	; 0
    e868:	b0 e0       	ldi	r27, 0x00	; 0
    e86a:	88 87       	std	Y+8, r24	; 0x08
    e86c:	99 87       	std	Y+9, r25	; 0x09
    e86e:	aa 87       	std	Y+10, r26	; 0x0a
    e870:	bb 87       	std	Y+11, r27	; 0x0b
setPoolServerName():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:180
void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
}

void NTPClient::setPoolServerName(const char* poolServerName) {
    this->_poolServerName = poolServerName;
    e872:	ee ed       	ldi	r30, 0xDE	; 222
    e874:	f0 e0       	ldi	r31, 0x00	; 0
    e876:	ec 0f       	add	r30, r28
    e878:	fd 1f       	adc	r31, r29
    e87a:	fd 83       	std	Y+5, r31	; 0x05
    e87c:	ec 83       	std	Y+4, r30	; 0x04
setUpdateInterval():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:176
void NTPClient::setTimeOffset(int timeOffset) {
  this->_timeOffset     = timeOffset;
}

void NTPClient::setUpdateInterval(unsigned long updateInterval) {
  this->_updateInterval = updateInterval;
    e87e:	81 e0       	ldi	r24, 0x01	; 1
    e880:	90 e0       	ldi	r25, 0x00	; 0
    e882:	a0 e0       	ldi	r26, 0x00	; 0
    e884:	b0 e0       	ldi	r27, 0x00	; 0
    e886:	8c 87       	std	Y+12, r24	; 0x0c
    e888:	9d 87       	std	Y+13, r25	; 0x0d
    e88a:	ae 87       	std	Y+14, r26	; 0x0e
    e88c:	bf 87       	std	Y+15, r27	; 0x0f
ntp_check():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:427
  timeClient->begin();
  timeClient->setTimeOffset(3600);
  timeClient->setPoolServerName(tmp1);
  timeClient->setUpdateInterval(1);
  if (timeClient->update() == true)
    e88e:	ce 01       	movw	r24, r28
    e890:	01 96       	adiw	r24, 0x01	; 1
    e892:	0e 94 0b 8f 	call	0x11e16	; 0x11e16 <NTPClient::update()>
    e896:	18 2f       	mov	r17, r24
end():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:166

  return hoursStr + ":" + minuteStr + ":" + secondStr;
}

void NTPClient::end() {
  this->_udp->stop();
    e898:	89 81       	ldd	r24, Y+1	; 0x01
    e89a:	9a 81       	ldd	r25, Y+2	; 0x02
    e89c:	dc 01       	movw	r26, r24
    e89e:	ed 91       	ld	r30, X+
    e8a0:	fc 91       	ld	r31, X
    e8a2:	02 88       	ldd	r0, Z+18	; 0x12
    e8a4:	f3 89       	ldd	r31, Z+19	; 0x13
    e8a6:	e0 2d       	mov	r30, r0
    e8a8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:168

  this->_udpSetup = false;
    e8aa:	1b 82       	std	Y+3, r1	; 0x03
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4629
      if (ntp_check(&timeClient) == 0)
    e8ac:	11 11       	cpse	r17, r1
    e8ae:	c5 c7       	rjmp	.+3978   	; 0xf83a <setup+0x1794>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4631
      {
        strcpy_P(str1, text_err);
    e8b0:	69 e3       	ldi	r22, 0x39	; 57
    e8b2:	74 e3       	ldi	r23, 0x34	; 52
    e8b4:	c1 01       	movw	r24, r2
    e8b6:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4632
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    e8ba:	00 e0       	ldi	r16, 0x00	; 0
    e8bc:	18 ef       	ldi	r17, 0xF8	; 248
    e8be:	21 e0       	ldi	r18, 0x01	; 1
    e8c0:	4e eb       	ldi	r20, 0xBE	; 190
    e8c2:	50 e0       	ldi	r21, 0x00	; 0
    e8c4:	60 ea       	ldi	r22, 0xA0	; 160
    e8c6:	70 e0       	ldi	r23, 0x00	; 0
    e8c8:	c1 01       	movw	r24, r2
    e8ca:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    e8ce:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    e8d2:	82 60       	ori	r24, 0x02	; 2
    e8d4:	0c 94 cb 7c 	jmp	0xf996	; 0xf996 <setup+0x18f0>
    e8d8:	e1 0e       	add	r14, r17
    e8da:	f1 1c       	adc	r15, r1
init_table8():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:928
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    e8dc:	70 e0       	ldi	r23, 0x00	; 0
    e8de:	21 2f       	mov	r18, r17
    e8e0:	86 eb       	ldi	r24, 0xB6	; 182
    e8e2:	9d e0       	ldi	r25, 0x0D	; 13
    e8e4:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
    e8e8:	2c cd       	rjmp	.-1448   	; 0xe342 <setup+0x29c>
start():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:999
            	0x29, 0
			};
			init_table8(ST7796S_regValues, sizeof(ST7796S_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    e8ea:	8f ef       	ldi	r24, 0xFF	; 255
    e8ec:	90 e0       	ldi	r25, 0x00	; 0
    e8ee:	90 93 cf 0d 	sts	0x0DCF, r25	; 0x800dcf <my_lcd+0x19>
    e8f2:	80 93 ce 0d 	sts	0x0DCE, r24	; 0x800dce <my_lcd+0x18>
    e8f6:	2e cd       	rjmp	.-1444   	; 0xe354 <setup+0x2ae>
Invert_Display():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:898
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    e8f8:	21 30       	cpi	r18, 0x01	; 1
    e8fa:	31 05       	cpc	r19, r1
    e8fc:	31 f5       	brne	.+76     	; 0xe94a <setup+0x8a4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:900
	{
		writeCmdData8(0x01, val ? 8 : 10);
    e8fe:	20 81       	ld	r18, Z
    e900:	82 23       	and	r24, r18
    e902:	80 83       	st	Z, r24
    e904:	81 e0       	ldi	r24, 0x01	; 1
    e906:	82 b9       	out	0x02, r24	; 2
    e908:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e90c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e910:	80 81       	ld	r24, Z
    e912:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
    e916:	82 23       	and	r24, r18
    e918:	80 83       	st	Z, r24
    e91a:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e91e:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e922:	80 81       	ld	r24, Z
    e924:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
    e928:	82 2b       	or	r24, r18
    e92a:	80 83       	st	Z, r24
    e92c:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
    e930:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
    e934:	80 81       	ld	r24, Z
    e936:	20 91 ed 0d 	lds	r18, 0x0DED	; 0x800ded <my_lcd+0x37>
    e93a:	82 2b       	or	r24, r18
    e93c:	80 83       	st	Z, r24
setup():
    e93e:	88 e0       	ldi	r24, 0x08	; 8
Invert_Display():
    e940:	91 11       	cpse	r25, r1
    e942:	01 c0       	rjmp	.+2      	; 0xe946 <setup+0x8a0>
setup():
    e944:	8a e0       	ldi	r24, 0x0A	; 10
Invert_Display():
    e946:	82 b9       	out	0x02, r24	; 2
    e948:	43 cd       	rjmp	.-1402   	; 0xe3d0 <setup+0x32a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:904
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    e94a:	20 81       	ld	r18, Z
    e94c:	82 23       	and	r24, r18
    e94e:	80 83       	st	Z, r24
setup():
    e950:	81 e2       	ldi	r24, 0x21	; 33
Invert_Display():
    e952:	91 11       	cpse	r25, r1
    e954:	01 c0       	rjmp	.+2      	; 0xe958 <setup+0x8b2>
setup():
    e956:	80 e2       	ldi	r24, 0x20	; 32
Invert_Display():
    e958:	82 b9       	out	0x02, r24	; 2
    e95a:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e95e:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e962:	80 81       	ld	r24, Z
    e964:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
    e968:	89 23       	and	r24, r25
    e96a:	80 83       	st	Z, r24
    e96c:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
    e970:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
    e974:	80 81       	ld	r24, Z
    e976:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
    e97a:	89 2b       	or	r24, r25
    e97c:	80 83       	st	Z, r24
    e97e:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
    e982:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
    e986:	80 81       	ld	r24, Z
    e988:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
    e98c:	31 cd       	rjmp	.-1438   	; 0xe3f0 <setup+0x34a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4339
      sprintf(str2, "3.3V=%s; 5.0V=%s; IN=%s; I=%s", s_tritri, s_petnula, s_dvanact, s_current);
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace vnitrniho teplomeru LM75B
    if (init == 1)
    e98e:	b1 e0       	ldi	r27, 0x01	; 1
    e990:	ab 12       	cpse	r10, r27
    e992:	c3 c0       	rjmp	.+390    	; 0xeb1a <setup+0xa74>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4341
    {
      strcpy_P(str1, text_vnitrni_ochrany);
    e994:	61 ee       	ldi	r22, 0xE1	; 225
    e996:	73 e3       	ldi	r23, 0x33	; 51
    e998:	c1 01       	movw	r24, r2
    e99a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4342
      strcat(str1, ":2");
    e99e:	63 ec       	ldi	r22, 0xC3	; 195
    e9a0:	76 e0       	ldi	r23, 0x06	; 6
    e9a2:	c1 01       	movw	r24, r2
    e9a4:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4343
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    e9a8:	ee 24       	eor	r14, r14
    e9aa:	ea 94       	dec	r14
    e9ac:	fe 2c       	mov	r15, r14
    e9ae:	00 ee       	ldi	r16, 0xE0	; 224
    e9b0:	17 e0       	ldi	r17, 0x07	; 7
    e9b2:	21 e0       	ldi	r18, 0x01	; 1
    e9b4:	4c e3       	ldi	r20, 0x3C	; 60
    e9b6:	50 e0       	ldi	r21, 0x00	; 0
    e9b8:	6e e1       	ldi	r22, 0x1E	; 30
    e9ba:	70 e0       	ldi	r23, 0x00	; 0
    e9bc:	c1 01       	movw	r24, r2
    e9be:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
readTemperatureC():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:83
  inline int16_t convertFloatTemperature(float value) {
    return (int16_t)(value / temperature_frac_factor);
  }

  float readTemperatureC() {
    return convertIntegerTemperature(readIntegerTemperatureRegister(attributes->registers->temperature));
    e9c2:	e0 91 0c 0e 	lds	r30, 0x0E0C	; 0x800e0c <lm75_temp+0xb>
    e9c6:	f0 91 0d 0e 	lds	r31, 0x0E0D	; 0x800e0d <lm75_temp+0xc>
    e9ca:	04 80       	ldd	r0, Z+4	; 0x04
    e9cc:	f5 81       	ldd	r31, Z+5	; 0x05
    e9ce:	e0 2d       	mov	r30, r0
    e9d0:	10 81       	ld	r17, Z
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:53
  .registers                      = &LM75_Compatible_Registers,
};

int16_t Temperature_LM75_Derived::readIntegerTemperatureRegister(uint8_t register_index) {
  // Select the temperature register at register_index.
  bus->beginTransmission(i2c_address);
    e9d2:	80 91 03 0e 	lds	r24, 0x0E03	; 0x800e03 <lm75_temp+0x2>
    e9d6:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:54
  bus->write(register_index);
    e9da:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    e9de:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    e9e2:	dc 01       	movw	r26, r24
    e9e4:	ed 91       	ld	r30, X+
    e9e6:	fc 91       	ld	r31, X
    e9e8:	01 90       	ld	r0, Z+
    e9ea:	f0 81       	ld	r31, Z
    e9ec:	e0 2d       	mov	r30, r0
    e9ee:	61 2f       	mov	r22, r17
    e9f0:	19 95       	eicall
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:55
  bus->endTransmission();
    e9f2:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    e9f6:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    e9fa:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:58

  // Start a transaction to read the register data.
  bus->requestFrom(i2c_address, (uint8_t) (resolution <= 8 ? 1 : 2));
    e9fe:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    ea02:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    ea06:	20 91 04 0e 	lds	r18, 0x0E04	; 0x800e04 <lm75_temp+0x3>
setup():
    ea0a:	41 e0       	ldi	r20, 0x01	; 1
readIntegerTemperatureRegister():
    ea0c:	29 30       	cpi	r18, 0x09	; 9
    ea0e:	08 f0       	brcs	.+2      	; 0xea12 <setup+0x96c>
setup():
    ea10:	42 e0       	ldi	r20, 0x02	; 2
readIntegerTemperatureRegister():
    ea12:	60 91 03 0e 	lds	r22, 0x0E03	; 0x800e03 <lm75_temp+0x2>
    ea16:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:61

  // Read the most significant byte of the temperature data.
  uint16_t t = bus->read() << 8;
    ea1a:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    ea1e:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    ea22:	dc 01       	movw	r26, r24
    ea24:	ed 91       	ld	r30, X+
    ea26:	fc 91       	ld	r31, X
    ea28:	02 84       	ldd	r0, Z+10	; 0x0a
    ea2a:	f3 85       	ldd	r31, Z+11	; 0x0b
    ea2c:	e0 2d       	mov	r30, r0
    ea2e:	19 95       	eicall
    ea30:	c1 5c       	subi	r28, 0xC1	; 193
    ea32:	de 4f       	sbci	r29, 0xFE	; 254
    ea34:	88 83       	st	Y, r24
    ea36:	cf 53       	subi	r28, 0x3F	; 63
    ea38:	d1 40       	sbci	r29, 0x01	; 1
    ea3a:	c2 5c       	subi	r28, 0xC2	; 194
    ea3c:	de 4f       	sbci	r29, 0xFE	; 254
    ea3e:	18 82       	st	Y, r1
    ea40:	ce 53       	subi	r28, 0x3E	; 62
    ea42:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:64
  
  // Read the least significant byte of the temperature data, if requested.
  if (resolution > 8) {
    ea44:	80 91 04 0e 	lds	r24, 0x0E04	; 0x800e04 <lm75_temp+0x3>
    ea48:	89 30       	cpi	r24, 0x09	; 9
    ea4a:	c8 f0       	brcs	.+50     	; 0xea7e <setup+0x9d8>
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:65
    t |= bus->read();
    ea4c:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    ea50:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    ea54:	dc 01       	movw	r26, r24
    ea56:	ed 91       	ld	r30, X+
    ea58:	fc 91       	ld	r31, X
    ea5a:	02 84       	ldd	r0, Z+10	; 0x0a
    ea5c:	f3 85       	ldd	r31, Z+11	; 0x0b
    ea5e:	e0 2d       	mov	r30, r0
    ea60:	19 95       	eicall
    ea62:	c2 5c       	subi	r28, 0xC2	; 194
    ea64:	de 4f       	sbci	r29, 0xFE	; 254
    ea66:	e8 81       	ld	r30, Y
    ea68:	f9 81       	ldd	r31, Y+1	; 0x01
    ea6a:	ce 53       	subi	r28, 0x3E	; 62
    ea6c:	d1 40       	sbci	r29, 0x01	; 1
    ea6e:	e8 2b       	or	r30, r24
    ea70:	f9 2b       	or	r31, r25
    ea72:	c2 5c       	subi	r28, 0xC2	; 194
    ea74:	de 4f       	sbci	r29, 0xFE	; 254
    ea76:	f9 83       	std	Y+1, r31	; 0x01
    ea78:	e8 83       	st	Y, r30
    ea7a:	ce 53       	subi	r28, 0x3E	; 62
    ea7c:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:69
  }

  // Finished reading the register data.
  bus->endTransmission();
    ea7e:	80 91 01 0e 	lds	r24, 0x0E01	; 0x800e01 <lm75_temp>
    ea82:	90 91 02 0e 	lds	r25, 0x0E02	; 0x800e02 <lm75_temp+0x1>
    ea86:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
      dtostrf(lm75_temp.readTemperatureC(), 4, 2, s_current);
    ea8a:	7e 01       	movw	r14, r28
    ea8c:	f2 ee       	ldi	r31, 0xE2	; 226
    ea8e:	ef 1a       	sub	r14, r31
    ea90:	fe ef       	ldi	r31, 0xFE	; 254
    ea92:	ff 0a       	sbc	r15, r31
readIntegerTemperatureRegister():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.cpp:72

  // Mask out unused/reserved bit from the full 16-bit register.
  t &= resolution_mask;
    ea94:	60 91 05 0e 	lds	r22, 0x0E05	; 0x800e05 <lm75_temp+0x4>
    ea98:	70 91 06 0e 	lds	r23, 0x0E06	; 0x800e06 <lm75_temp+0x5>
    ea9c:	c2 5c       	subi	r28, 0xC2	; 194
    ea9e:	de 4f       	sbci	r29, 0xFE	; 254
    eaa0:	28 81       	ld	r18, Y
    eaa2:	39 81       	ldd	r19, Y+1	; 0x01
    eaa4:	ce 53       	subi	r28, 0x3E	; 62
    eaa6:	d1 40       	sbci	r29, 0x01	; 1
    eaa8:	62 23       	and	r22, r18
    eaaa:	73 23       	and	r23, r19
_ZN24Temperature_LM75_Derived25convertIntegerTemperatureEi():
/home/saric/Arduino/libraries/I2C_Temperature_Sensors_derived_from_the_LM75/src/Temperature_LM75_Derived.h:75
    setInternalResolution(attributes->default_temperature_resolution);
    setInternalTemperatureFracWidth(attributes->default_temperature_frac_width);
  }

  inline float convertIntegerTemperature(int16_t value) {
    return (float)value * temperature_frac_factor;
    eaac:	07 2e       	mov	r0, r23
    eaae:	00 0c       	add	r0, r0
    eab0:	88 0b       	sbc	r24, r24
    eab2:	99 0b       	sbc	r25, r25
    eab4:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
    eab8:	20 91 08 0e 	lds	r18, 0x0E08	; 0x800e08 <lm75_temp+0x7>
    eabc:	30 91 09 0e 	lds	r19, 0x0E09	; 0x800e09 <lm75_temp+0x8>
    eac0:	40 91 0a 0e 	lds	r20, 0x0E0A	; 0x800e0a <lm75_temp+0x9>
    eac4:	50 91 0b 0e 	lds	r21, 0x0E0B	; 0x800e0b <lm75_temp+0xa>
    eac8:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4344
    eacc:	87 01       	movw	r16, r14
    eace:	22 e0       	ldi	r18, 0x02	; 2
    ead0:	44 e0       	ldi	r20, 0x04	; 4
    ead2:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4345
      sprintf(str2, "iT=%sC", s_current);
    ead6:	ff 92       	push	r15
    ead8:	ef 92       	push	r14
    eada:	86 ec       	ldi	r24, 0xC6	; 198
    eadc:	96 e0       	ldi	r25, 0x06	; 6
    eade:	9f 93       	push	r25
    eae0:	8f 93       	push	r24
    eae2:	4e 01       	movw	r8, r28
    eae4:	38 e8       	ldi	r19, 0x88	; 136
    eae6:	83 0e       	add	r8, r19
    eae8:	91 1c       	adc	r9, r1
    eaea:	9f 92       	push	r9
    eaec:	8f 92       	push	r8
    eaee:	0e 94 79 b7 	call	0x16ef2	; 0x16ef2 <sprintf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4346
      show_string(str2, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eaf2:	ee 24       	eor	r14, r14
    eaf4:	ea 94       	dec	r14
    eaf6:	fe 2c       	mov	r15, r14
    eaf8:	00 ee       	ldi	r16, 0xE0	; 224
    eafa:	17 e0       	ldi	r17, 0x07	; 7
    eafc:	21 e0       	ldi	r18, 0x01	; 1
    eafe:	4c e3       	ldi	r20, 0x3C	; 60
    eb00:	50 e0       	ldi	r21, 0x00	; 0
    eb02:	60 ea       	ldi	r22, 0xA0	; 160
    eb04:	70 e0       	ldi	r23, 0x00	; 0
    eb06:	c4 01       	movw	r24, r8
    eb08:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    eb0c:	0f 90       	pop	r0
    eb0e:	0f 90       	pop	r0
    eb10:	0f 90       	pop	r0
    eb12:	0f 90       	pop	r0
    eb14:	0f 90       	pop	r0
    eb16:	0f 90       	pop	r0
    eb18:	6e ce       	rjmp	.-804    	; 0xe7f6 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4350
    }
    ///
    //// nastaveni vychozich hodnot systemu
    if (init == 2)
    eb1a:	82 e0       	ldi	r24, 0x02	; 2
    eb1c:	a8 12       	cpse	r10, r24
    eb1e:	8c c1       	rjmp	.+792    	; 0xee38 <setup+0xd92>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4352
    {
      if (EEPROM.read(set_default_values) == 255)
    eb20:	8a e5       	ldi	r24, 0x5A	; 90
    eb22:	90 e0       	ldi	r25, 0x00	; 0
    eb24:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    eb28:	8f 3f       	cpi	r24, 0xFF	; 255
    eb2a:	09 f0       	breq	.+2      	; 0xeb2e <setup+0xa88>
    eb2c:	74 c1       	rjmp	.+744    	; 0xee16 <setup+0xd70>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4354
      {
        EEPROM.write(set_default_values, 0);
    eb2e:	60 e0       	ldi	r22, 0x00	; 0
    eb30:	8a e5       	ldi	r24, 0x5A	; 90
    eb32:	90 e0       	ldi	r25, 0x00	; 0
    eb34:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4355
        strcpy_P(str1, text_vychozi_nastaveni);
    eb38:	6f ec       	ldi	r22, 0xCF	; 207
    eb3a:	73 e3       	ldi	r23, 0x33	; 51
    eb3c:	8d 2d       	mov	r24, r13
    eb3e:	9b 2d       	mov	r25, r11
    eb40:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4356
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    eb44:	ee 24       	eor	r14, r14
    eb46:	ea 94       	dec	r14
    eb48:	fe 2c       	mov	r15, r14
    eb4a:	00 e0       	ldi	r16, 0x00	; 0
    eb4c:	18 ef       	ldi	r17, 0xF8	; 248
    eb4e:	21 e0       	ldi	r18, 0x01	; 1
    eb50:	46 e4       	ldi	r20, 0x46	; 70
    eb52:	50 e0       	ldi	r21, 0x00	; 0
    eb54:	6e e1       	ldi	r22, 0x1E	; 30
    eb56:	70 e0       	ldi	r23, 0x00	; 0
    eb58:	8d 2d       	mov	r24, r13
    eb5a:	9b 2d       	mov	r25, r11
    eb5c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
set_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2866
}
//////////////////////////
/// funkce pro nastaveni vychoziho zobrazeni zdroje teploty
void set_default_show_temp(uint8_t default_temp)
{
  EEPROM.write(my_default_show_temp, default_temp);
    eb60:	6f ef       	ldi	r22, 0xFF	; 255
    eb62:	8d e5       	ldi	r24, 0x5D	; 93
    eb64:	90 e0       	ldi	r25, 0x00	; 0
    eb66:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4361
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );

        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
    eb6a:	80 e0       	ldi	r24, 0x00	; 0
    eb6c:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
    eb70:	81 e0       	ldi	r24, 0x01	; 1
    eb72:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
    eb76:	82 e0       	ldi	r24, 0x02	; 2
    eb78:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
    eb7c:	83 e0       	ldi	r24, 0x03	; 3
    eb7e:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
    eb82:	84 e0       	ldi	r24, 0x04	; 4
    eb84:	0e 94 33 51 	call	0xa266	; 0xa266 <thermostat_ring_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eb88:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4365
        {
          strcpy(tmp1, "");
    eb8a:	62 ef       	ldi	r22, 0xF2	; 242
    eb8c:	72 e0       	ldi	r23, 0x02	; 2
    eb8e:	ce 01       	movw	r24, r28
    eb90:	8e 50       	subi	r24, 0x0E	; 14
    eb92:	9f 4f       	sbci	r25, 0xFF	; 255
    eb94:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4366
          remote_tds_clear(idx);
    eb98:	81 2f       	mov	r24, r17
    eb9a:	0e 94 33 53 	call	0xa666	; 0xa666 <remote_tds_clear(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4363
        set_default_show_temp(255);

        for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
          thermostat_ring_clear(idx);
        ///
        for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
    eb9e:	1f 5f       	subi	r17, 0xFF	; 255
    eba0:	1a 30       	cpi	r17, 0x0A	; 10
    eba2:	99 f7       	brne	.-26     	; 0xeb8a <setup+0xae4>
    eba4:	e1 ef       	ldi	r30, 0xF1	; 241
    eba6:	8e 2e       	mov	r8, r30
    eba8:	99 24       	eor	r9, r9
    ebaa:	93 94       	inc	r9
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4369
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    ebac:	10 e0       	ldi	r17, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4371
        {
          strcpy(str2, "PROG");
    ebae:	62 ed       	ldi	r22, 0xD2	; 210
    ebb0:	74 e0       	ldi	r23, 0x04	; 4
    ebb2:	ce 01       	movw	r24, r28
    ebb4:	88 57       	subi	r24, 0x78	; 120
    ebb6:	9f 4f       	sbci	r25, 0xFF	; 255
    ebb8:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4372
          thermostat_program_set_name(idx, str2);
    ebbc:	be 01       	movw	r22, r28
    ebbe:	68 57       	subi	r22, 0x78	; 120
    ebc0:	7f 4f       	sbci	r23, 0xFF	; 255
    ebc2:	81 2f       	mov	r24, r17
    ebc4:	0e 94 69 50 	call	0xa0d2	; 0xa0d2 <thermostat_program_set_name(unsigned char, char*)>
thermostat_program_set_active():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:295
{
  return EEPROM.read(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active);
}
void thermostat_program_set_active(uint8_t program_id, uint8_t active)
{
  EEPROM.write(eeprom_thermostat_program_first_byte + (program_id * eeprom_thermostat_one_program_bytes_size) + eeprom_thermostat_program_active, active);
    ebc8:	60 e0       	ldi	r22, 0x00	; 0
    ebca:	c4 01       	movw	r24, r8
    ebcc:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    ebd0:	f1 2c       	mov	r15, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4376
          {
            thermostat_program_set_time(idx, interval_id, 0, 0, 0, 0, 0);
    ebd2:	c1 2c       	mov	r12, r1
    ebd4:	e1 2c       	mov	r14, r1
    ebd6:	00 e0       	ldi	r16, 0x00	; 0
    ebd8:	20 e0       	ldi	r18, 0x00	; 0
    ebda:	40 e0       	ldi	r20, 0x00	; 0
    ebdc:	6f 2d       	mov	r22, r15
    ebde:	81 2f       	mov	r24, r17
    ebe0:	0e 94 2d 50 	call	0xa05a	; 0xa05a <thermostat_program_set_time(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4377
            thermostat_program_set_threshold(idx, interval_id, 220);
    ebe4:	4c ed       	ldi	r20, 0xDC	; 220
    ebe6:	50 e0       	ldi	r21, 0x00	; 0
    ebe8:	6f 2d       	mov	r22, r15
    ebea:	81 2f       	mov	r24, r17
    ebec:	0e 94 11 50 	call	0xa022	; 0xa022 <thermostat_program_set_threshold(unsigned char, unsigned char, unsigned int)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4378
            thermostat_program_set_week(idx, interval_id, 0);
    ebf0:	40 e0       	ldi	r20, 0x00	; 0
    ebf2:	6f 2d       	mov	r22, r15
    ebf4:	81 2f       	mov	r24, r17
    ebf6:	0e 94 03 50 	call	0xa006	; 0xa006 <thermostat_program_set_week(unsigned char, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4374
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
        {
          strcpy(str2, "PROG");
          thermostat_program_set_name(idx, str2);
          thermostat_program_set_active(idx, 0);
          for (uint8_t interval_id = 0; interval_id < MAX_PROGRAM_INTERVAL; interval_id++)
    ebfa:	f3 94       	inc	r15
    ebfc:	9b e0       	ldi	r25, 0x0B	; 11
    ebfe:	f9 12       	cpse	r15, r25
    ec00:	e8 cf       	rjmp	.-48     	; 0xebd2 <setup+0xb2c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4369
        {
          strcpy(tmp1, "");
          remote_tds_clear(idx);
        }
        ///
        for (uint8_t idx = 0; idx < AVAILABLE_PROGRAM; idx++)
    ec02:	1f 5f       	subi	r17, 0xFF	; 255
    ec04:	ad e4       	ldi	r26, 0x4D	; 77
    ec06:	8a 0e       	add	r8, r26
    ec08:	91 1c       	adc	r9, r1
    ec0a:	18 30       	cpi	r17, 0x08	; 8
    ec0c:	81 f6       	brne	.-96     	; 0xebae <setup+0xb08>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
          get_tds18s20(idx, &tds);
          strcpy(tds.name, "FREE");
          tds.used = 0;
          tds.offset = 0;
          tds.assigned_ds2482 = 0;
          tds.period = 10;
    ec0e:	7a e0       	ldi	r23, 0x0A	; 10
    ec10:	f7 2e       	mov	r15, r23
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    ec12:	1f ef       	ldi	r17, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4384
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
        {
          get_tds18s20(idx, &tds);
    ec14:	be 01       	movw	r22, r28
    ec16:	68 53       	subi	r22, 0x38	; 56
    ec18:	7f 4f       	sbci	r23, 0xFF	; 255
    ec1a:	80 2f       	mov	r24, r16
    ec1c:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4385
          strcpy(tds.name, "FREE");
    ec20:	6f e5       	ldi	r22, 0x5F	; 95
    ec22:	73 e0       	ldi	r23, 0x03	; 3
    ec24:	c4 5b       	subi	r28, 0xB4	; 180
    ec26:	de 4f       	sbci	r29, 0xFE	; 254
    ec28:	88 81       	ld	r24, Y
    ec2a:	99 81       	ldd	r25, Y+1	; 0x01
    ec2c:	cc 54       	subi	r28, 0x4C	; 76
    ec2e:	d1 40       	sbci	r29, 0x01	; 1
    ec30:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4386
          tds.used = 0;
    ec34:	c8 53       	subi	r28, 0x38	; 56
    ec36:	df 4f       	sbci	r29, 0xFF	; 255
    ec38:	18 82       	st	Y, r1
    ec3a:	c8 5c       	subi	r28, 0xC8	; 200
    ec3c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4387
          tds.offset = 0;
    ec3e:	ce 52       	subi	r28, 0x2E	; 46
    ec40:	df 4f       	sbci	r29, 0xFF	; 255
    ec42:	19 82       	std	Y+1, r1	; 0x01
    ec44:	18 82       	st	Y, r1
    ec46:	c2 5d       	subi	r28, 0xD2	; 210
    ec48:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4388
          tds.assigned_ds2482 = 0;
    ec4a:	cf 52       	subi	r28, 0x2F	; 47
    ec4c:	df 4f       	sbci	r29, 0xFF	; 255
    ec4e:	18 82       	st	Y, r1
    ec50:	c1 5d       	subi	r28, 0xD1	; 209
    ec52:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4389
          tds.period = 10;
    ec54:	c4 52       	subi	r28, 0x24	; 36
    ec56:	df 4f       	sbci	r29, 0xFF	; 255
    ec58:	f8 82       	st	Y, r15
    ec5a:	cc 5d       	subi	r28, 0xDC	; 220
    ec5c:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4390
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
    ec5e:	c7 53       	subi	r28, 0x37	; 55
    ec60:	df 4f       	sbci	r29, 0xFF	; 255
    ec62:	18 83       	st	Y, r17
    ec64:	c9 5c       	subi	r28, 0xC9	; 201
    ec66:	d0 40       	sbci	r29, 0x00	; 0
    ec68:	c6 53       	subi	r28, 0x36	; 54
    ec6a:	df 4f       	sbci	r29, 0xFF	; 255
    ec6c:	18 83       	st	Y, r17
    ec6e:	ca 5c       	subi	r28, 0xCA	; 202
    ec70:	d0 40       	sbci	r29, 0x00	; 0
    ec72:	c5 53       	subi	r28, 0x35	; 53
    ec74:	df 4f       	sbci	r29, 0xFF	; 255
    ec76:	18 83       	st	Y, r17
    ec78:	cb 5c       	subi	r28, 0xCB	; 203
    ec7a:	d0 40       	sbci	r29, 0x00	; 0
    ec7c:	c4 53       	subi	r28, 0x34	; 52
    ec7e:	df 4f       	sbci	r29, 0xFF	; 255
    ec80:	18 83       	st	Y, r17
    ec82:	cc 5c       	subi	r28, 0xCC	; 204
    ec84:	d0 40       	sbci	r29, 0x00	; 0
    ec86:	c3 53       	subi	r28, 0x33	; 51
    ec88:	df 4f       	sbci	r29, 0xFF	; 255
    ec8a:	18 83       	st	Y, r17
    ec8c:	cd 5c       	subi	r28, 0xCD	; 205
    ec8e:	d0 40       	sbci	r29, 0x00	; 0
    ec90:	c2 53       	subi	r28, 0x32	; 50
    ec92:	df 4f       	sbci	r29, 0xFF	; 255
    ec94:	18 83       	st	Y, r17
    ec96:	ce 5c       	subi	r28, 0xCE	; 206
    ec98:	d0 40       	sbci	r29, 0x00	; 0
    ec9a:	c1 53       	subi	r28, 0x31	; 49
    ec9c:	df 4f       	sbci	r29, 0xFF	; 255
    ec9e:	18 83       	st	Y, r17
    eca0:	cf 5c       	subi	r28, 0xCF	; 207
    eca2:	d0 40       	sbci	r29, 0x00	; 0
    eca4:	c0 53       	subi	r28, 0x30	; 48
    eca6:	df 4f       	sbci	r29, 0xFF	; 255
    eca8:	18 83       	st	Y, r17
    ecaa:	c0 5d       	subi	r28, 0xD0	; 208
    ecac:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4391
          set_tds18s20(idx, &tds);
    ecae:	be 01       	movw	r22, r28
    ecb0:	68 53       	subi	r22, 0x38	; 56
    ecb2:	7f 4f       	sbci	r23, 0xFF	; 255
    ecb4:	80 2f       	mov	r24, r16
    ecb6:	0e 94 c6 51 	call	0xa38c	; 0xa38c <set_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4382
            thermostat_program_set_threshold(idx, interval_id, 220);
            thermostat_program_set_week(idx, interval_id, 0);
          }
        }
        ///
        for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXDEVICES; idx++)
    ecba:	0f 5f       	subi	r16, 0xFF	; 255
    ecbc:	06 30       	cpi	r16, 0x06	; 6
    ecbe:	09 f0       	breq	.+2      	; 0xecc2 <setup+0xc1c>
    ecc0:	a9 cf       	rjmp	.-174    	; 0xec14 <setup+0xb6e>
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
    ecc2:	84 e1       	ldi	r24, 0x14	; 20
    ecc4:	c2 52       	subi	r28, 0x22	; 34
    ecc6:	df 4f       	sbci	r29, 0xFF	; 255
    ecc8:	88 83       	st	Y, r24
    ecca:	ce 5d       	subi	r28, 0xDE	; 222
    eccc:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:105
    m = month;
    ecce:	8c e0       	ldi	r24, 0x0C	; 12
    ecd0:	c1 52       	subi	r28, 0x21	; 33
    ecd2:	df 4f       	sbci	r29, 0xFF	; 255
    ecd4:	88 83       	st	Y, r24
    ecd6:	cf 5d       	subi	r28, 0xDF	; 223
    ecd8:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:106
    d = day;
    ecda:	8e e0       	ldi	r24, 0x0E	; 14
    ecdc:	c0 52       	subi	r28, 0x20	; 32
    ecde:	df 4f       	sbci	r29, 0xFF	; 255
    ece0:	88 83       	st	Y, r24
    ece2:	c0 5e       	subi	r28, 0xE0	; 224
    ece4:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:107
    hh = hour;
    ece6:	91 e1       	ldi	r25, 0x11	; 17
    ece8:	cf 51       	subi	r28, 0x1F	; 31
    ecea:	df 4f       	sbci	r29, 0xFF	; 255
    ecec:	98 83       	st	Y, r25
    ecee:	c1 5e       	subi	r28, 0xE1	; 225
    ecf0:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:108
    mm = min;
    ecf2:	ce 51       	subi	r28, 0x1E	; 30
    ecf4:	df 4f       	sbci	r29, 0xFF	; 255
    ecf6:	88 83       	st	Y, r24
    ecf8:	c2 5e       	subi	r28, 0xE2	; 226
    ecfa:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:109
    ss = sec;
    ecfc:	cd 51       	subi	r28, 0x1D	; 29
    ecfe:	df 4f       	sbci	r29, 0xFF	; 255
    ed00:	18 82       	st	Y, r1
    ed02:	c3 5e       	subi	r28, 0xE3	; 227
    ed04:	d0 40       	sbci	r29, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4394
          tds.period = 10;
          for (uint8_t m = 0; m < 8; m++) tds.rom[m] = 0xff;
          set_tds18s20(idx, &tds);
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
    ed06:	ce 01       	movw	r24, r28
    ed08:	82 52       	subi	r24, 0x22	; 34
    ed0a:	9f 4f       	sbci	r25, 0xFF	; 255
    ed0c:	0e 94 10 93 	call	0x12620	; 0x12620 <RTC_DS1307::adjust(DateTime const&)>
time_set_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4024
  return EEPROM.read(time_offset);
}
/// time_set_offset - nastavi casovy offset letni/zimni
void time_set_offset(uint8_t offset)
{
  EEPROM.write(time_offset, offset);
    ed10:	61 e0       	ldi	r22, 0x01	; 1
    ed12:	81 e0       	ldi	r24, 0x01	; 1
    ed14:	90 e0       	ldi	r25, 0x00	; 0
    ed16:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4397
        }

        rtc.adjust(DateTime(2020, 12, 14, 17, 14, 0));
        time_set_offset(1);
        /// pokus o vetsi random
        device.mac[0] = 2; device.mac[1] = 1; device.mac[2] = 2; device.mac[3] = dvanact >> 1; device.mac[4] = light_curr >> 1; device.mac[5] = proud >> 1;
    ed1a:	82 e0       	ldi	r24, 0x02	; 2
    ed1c:	80 93 1b 0c 	sts	0x0C1B, r24	; 0x800c1b <device>
    ed20:	91 e0       	ldi	r25, 0x01	; 1
    ed22:	90 93 1c 0c 	sts	0x0C1C, r25	; 0x800c1c <device+0x1>
    ed26:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <device+0x2>
    ed2a:	20 91 04 0a 	lds	r18, 0x0A04	; 0x800a04 <dvanact>
    ed2e:	30 91 05 0a 	lds	r19, 0x0A05	; 0x800a05 <dvanact+0x1>
    ed32:	36 95       	lsr	r19
    ed34:	27 95       	ror	r18
    ed36:	20 93 1e 0c 	sts	0x0C1E, r18	; 0x800c1e <device+0x3>
    ed3a:	20 91 cc 0a 	lds	r18, 0x0ACC	; 0x800acc <light_curr>
    ed3e:	30 91 cd 0a 	lds	r19, 0x0ACD	; 0x800acd <light_curr+0x1>
    ed42:	36 95       	lsr	r19
    ed44:	27 95       	ror	r18
    ed46:	20 93 1f 0c 	sts	0x0C1F, r18	; 0x800c1f <device+0x4>
    ed4a:	20 91 02 0a 	lds	r18, 0x0A02	; 0x800a02 <proud>
    ed4e:	30 91 03 0a 	lds	r19, 0x0A03	; 0x800a03 <proud+0x1>
    ed52:	36 95       	lsr	r19
    ed54:	27 95       	ror	r18
    ed56:	20 93 20 0c 	sts	0x0C20, r18	; 0x800c20 <device+0x5>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4398
        device.myIP[0] = 192; device.myIP[1] = 168; device.myIP[2] = 2; device.myIP[3] = 110;
    ed5a:	30 ec       	ldi	r19, 0xC0	; 192
    ed5c:	30 93 21 0c 	sts	0x0C21, r19	; 0x800c21 <device+0x6>
    ed60:	28 ea       	ldi	r18, 0xA8	; 168
    ed62:	20 93 22 0c 	sts	0x0C22, r18	; 0x800c22 <device+0x7>
    ed66:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <device+0x8>
    ed6a:	4e e6       	ldi	r20, 0x6E	; 110
    ed6c:	40 93 24 0c 	sts	0x0C24, r20	; 0x800c24 <device+0x9>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4399
        device.myMASK[0] = 255; device.myMASK[1] = 255; device.myMASK[2] = 255; device.myMASK[3] = 0;
    ed70:	10 93 25 0c 	sts	0x0C25, r17	; 0x800c25 <device+0xa>
    ed74:	10 93 26 0c 	sts	0x0C26, r17	; 0x800c26 <device+0xb>
    ed78:	10 93 27 0c 	sts	0x0C27, r17	; 0x800c27 <device+0xc>
    ed7c:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <device+0xd>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4401

        device.myGW[0] = 192; device.myGW[1] = 168; device.myGW[2] = 2; device.myGW[3] = 1;
    ed80:	30 93 2d 0c 	sts	0x0C2D, r19	; 0x800c2d <device+0x12>
    ed84:	20 93 2e 0c 	sts	0x0C2E, r18	; 0x800c2e <device+0x13>
    ed88:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <device+0x14>
    ed8c:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <device+0x15>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4402
        device.myDNS[0] = 192; device.myDNS[1] = 168; device.myDNS[2] = 2; device.myDNS[3] = 1;
    ed90:	30 93 29 0c 	sts	0x0C29, r19	; 0x800c29 <device+0xe>
    ed94:	20 93 2a 0c 	sts	0x0C2A, r18	; 0x800c2a <device+0xf>
    ed98:	80 93 2b 0c 	sts	0x0C2B, r24	; 0x800c2b <device+0x10>
    ed9c:	90 93 2c 0c 	sts	0x0C2C, r25	; 0x800c2c <device+0x11>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4403
        device.mqtt_server[0] = 192; device.mqtt_server[1] = 168; device.mqtt_server[2] = 2; device.mqtt_server[3] = 1;
    eda0:	30 93 3b 0c 	sts	0x0C3B, r19	; 0x800c3b <device+0x20>
    eda4:	20 93 3c 0c 	sts	0x0C3C, r18	; 0x800c3c <device+0x21>
    eda8:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <device+0x22>
    edac:	90 93 3e 0c 	sts	0x0C3E, r25	; 0x800c3e <device+0x23>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4404
        device.ntp_server[0] = 192; device.ntp_server[1] = 168; device.ntp_server[2] = 2; device.ntp_server[3] = 1;
    edb0:	30 93 69 0c 	sts	0x0C69, r19	; 0x800c69 <device+0x4e>
    edb4:	20 93 6a 0c 	sts	0x0C6A, r18	; 0x800c6a <device+0x4f>
    edb8:	80 93 6b 0c 	sts	0x0C6B, r24	; 0x800c6b <device+0x50>
    edbc:	90 93 6c 0c 	sts	0x0C6C, r25	; 0x800c6c <device+0x51>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4405
        device.mqtt_port = 1883;
    edc0:	8b e5       	ldi	r24, 0x5B	; 91
    edc2:	97 e0       	ldi	r25, 0x07	; 7
    edc4:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <device+0x25>
    edc8:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device+0x24>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4406
        strcpy(device.mqtt_user, "saric");
    edcc:	6d ec       	ldi	r22, 0xCD	; 205
    edce:	76 e0       	ldi	r23, 0x06	; 6
    edd0:	81 e4       	ldi	r24, 0x41	; 65
    edd2:	9c e0       	ldi	r25, 0x0C	; 12
    edd4:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4407
        strcpy(device.mqtt_key, "no");
    edd8:	63 ed       	ldi	r22, 0xD3	; 211
    edda:	76 e0       	ldi	r23, 0x06	; 6
    eddc:	85 e5       	ldi	r24, 0x55	; 85
    edde:	9c e0       	ldi	r25, 0x0C	; 12
    ede0:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4408
        save_setup_network();
    ede4:	0e 94 4f 52 	call	0xa49e	; 0xa49e <save_setup_network()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4409
        strcpy(str1, "TERM D1");
    ede8:	66 ed       	ldi	r22, 0xD6	; 214
    edea:	76 e0       	ldi	r23, 0x06	; 6
    edec:	8d 2d       	mov	r24, r13
    edee:	9b 2d       	mov	r25, r11
    edf0:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4410
        device_set_name(str1);
    edf4:	8d 2d       	mov	r24, r13
    edf6:	9b 2d       	mov	r25, r11
    edf8:	0e 94 27 52 	call	0xa44e	; 0xa44e <device_set_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4412
        char hostname[10];
        device_get_name(hostname);
    edfc:	ce 01       	movw	r24, r28
    edfe:	82 52       	subi	r24, 0x22	; 34
    ee00:	9f 4f       	sbci	r25, 0xFF	; 255
    ee02:	0e 94 81 5a 	call	0xb502	; 0xb502 <device_get_name(char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4413
        default_ring = 0;
    ee06:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <default_ring>
set_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2851
/*
   ring - cislo aktivniho ringu
*/
void set_default_ring(uint8_t ring)
{
  EEPROM.write(my_default_ring, ring);
    ee0a:	60 e0       	ldi	r22, 0x00	; 0
    ee0c:	8c e5       	ldi	r24, 0x5C	; 92
    ee0e:	90 e0       	ldi	r25, 0x00	; 0
    ee10:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
    ee14:	f0 cc       	rjmp	.-1568   	; 0xe7f6 <setup+0x750>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4418
        default_ring = 0;
        set_default_ring(default_ring);
      }
      else
      {
        strcpy_P(str1, text_bezny_start);
    ee16:	63 ec       	ldi	r22, 0xC3	; 195
    ee18:	73 e3       	ldi	r23, 0x33	; 51
    ee1a:	8d 2d       	mov	r24, r13
    ee1c:	9b 2d       	mov	r25, r11
    ee1e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4419
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    ee22:	ee 24       	eor	r14, r14
    ee24:	ea 94       	dec	r14
    ee26:	fe 2c       	mov	r15, r14
    ee28:	00 ee       	ldi	r16, 0xE0	; 224
    ee2a:	17 e0       	ldi	r17, 0x07	; 7
    ee2c:	21 e0       	ldi	r18, 0x01	; 1
    ee2e:	46 e4       	ldi	r20, 0x46	; 70
    ee30:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ee32:	6e e1       	ldi	r22, 0x1E	; 30
    ee34:	70 e0       	ldi	r23, 0x00	; 0
    ee36:	5d c0       	rjmp	.+186    	; 0xeef2 <setup+0xe4c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4424
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
    }
    ///
    /// test SRAM
    if (init == 3)
    ee38:	b3 e0       	ldi	r27, 0x03	; 3
    ee3a:	ab 12       	cpse	r10, r27
    ee3c:	72 c0       	rjmp	.+228    	; 0xef22 <setup+0xe7c>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:50



void SRAM_23LC::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    ee3e:	61 e0       	ldi	r22, 0x01	; 1
    ee40:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
    ee44:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:51
  pinMode(_chipSelect, OUTPUT);
    ee48:	61 e0       	ldi	r22, 0x01	; 1
    ee4a:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
    ee4e:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:53

  _spi->begin();
    ee52:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
    ee56:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
    ee5a:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <SoftSPIB::begin()>
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
    ee5e:	60 e0       	ldi	r22, 0x00	; 0
    ee60:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
    ee64:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
    ee68:	61 e0       	ldi	r22, 0x01	; 1
    ee6a:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
    ee6e:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
    ee72:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
begin():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:56
  pinMode(_chipSelect, OUTPUT);

  _spi->begin();

  startCommand(SRAM_23LC_COMMAND_WRMR, 0);
  _spi->transfer(SRAM_23LC_MODE_SEQUENTIAL);
    ee76:	60 e4       	ldi	r22, 0x40	; 64
    ee78:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
    ee7c:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
    ee80:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
    ee84:	61 e0       	ldi	r22, 0x01	; 1
    ee86:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
    ee8a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4427
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
    ee8e:	4b ea       	ldi	r20, 0xAB	; 171
    ee90:	60 e0       	ldi	r22, 0x00	; 0
    ee92:	70 e0       	ldi	r23, 0x00	; 0
    ee94:	cb 01       	movw	r24, r22
    ee96:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
      if (SRAM.readByte(0) == 0xAB)
    ee9a:	60 e0       	ldi	r22, 0x00	; 0
    ee9c:	70 e0       	ldi	r23, 0x00	; 0
    ee9e:	cb 01       	movw	r24, r22
    eea0:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      {
        strcpy_P(str1, text_test_ram);
    eea4:	66 eb       	ldi	r22, 0xB6	; 182
    eea6:	73 e3       	ldi	r23, 0x33	; 51
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4428
    /// test SRAM
    if (init == 3)
    {
      SRAM.begin();
      SRAM.writeByte(0, 0xAB);
      if (SRAM.readByte(0) == 0xAB)
    eea8:	8b 3a       	cpi	r24, 0xAB	; 171
    eeaa:	41 f5       	brne	.+80     	; 0xeefc <setup+0xe56>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4430
      {
        strcpy_P(str1, text_test_ram);
    eeac:	8d 2d       	mov	r24, r13
    eeae:	9b 2d       	mov	r25, r11
    eeb0:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4431
        strcat(str1, " init ...");
    eeb4:	6e ed       	ldi	r22, 0xDE	; 222
    eeb6:	76 e0       	ldi	r23, 0x06	; 6
    eeb8:	8d 2d       	mov	r24, r13
    eeba:	9b 2d       	mov	r25, r11
    eebc:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4432
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eec0:	ee 24       	eor	r14, r14
    eec2:	ea 94       	dec	r14
    eec4:	fe 2c       	mov	r15, r14
    eec6:	00 ee       	ldi	r16, 0xE0	; 224
    eec8:	17 e0       	ldi	r17, 0x07	; 7
    eeca:	21 e0       	ldi	r18, 0x01	; 1
    eecc:	40 e5       	ldi	r20, 0x50	; 80
    eece:	50 e0       	ldi	r21, 0x00	; 0
    eed0:	6e e1       	ldi	r22, 0x1E	; 30
    eed2:	70 e0       	ldi	r23, 0x00	; 0
    eed4:	8d 2d       	mov	r24, r13
    eed6:	9b 2d       	mov	r25, r11
    eed8:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4445
            sprintf(str1, "%d/2048", p);
            show_string(str1, 180, 50 + (init * 10), 1, GREEN, WHITE, 0 );
          }
          }
        */
        strcpy_P(str1, text_ok);
    eedc:	63 eb       	ldi	r22, 0xB3	; 179
    eede:	73 e3       	ldi	r23, 0x33	; 51
    eee0:	8d 2d       	mov	r24, r13
    eee2:	9b 2d       	mov	r25, r11
    eee4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4446
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eee8:	21 e0       	ldi	r18, 0x01	; 1
    eeea:	40 e5       	ldi	r20, 0x50	; 80
    eeec:	50 e0       	ldi	r21, 0x00	; 0
    eeee:	62 ed       	ldi	r22, 0xD2	; 210
    eef0:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
      }
      else
      {
        strcpy_P(str1, text_test_ram);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    eef2:	8d 2d       	mov	r24, r13
    eef4:	9b 2d       	mov	r25, r11
    eef6:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    eefa:	7d cc       	rjmp	.-1798   	; 0xe7f6 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4450
        strcpy_P(str1, text_ok);
        show_string(str1, 210, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_ram);
    eefc:	8d 2d       	mov	r24, r13
    eefe:	9b 2d       	mov	r25, r11
    ef00:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4451
        strcat_P(str1, text_err);
    ef04:	69 e3       	ldi	r22, 0x39	; 57
    ef06:	74 e3       	ldi	r23, 0x34	; 52
    ef08:	8d 2d       	mov	r24, r13
    ef0a:	9b 2d       	mov	r25, r11
    ef0c:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4452
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    ef10:	ee 24       	eor	r14, r14
    ef12:	ea 94       	dec	r14
    ef14:	fe 2c       	mov	r15, r14
    ef16:	00 e0       	ldi	r16, 0x00	; 0
    ef18:	18 ef       	ldi	r17, 0xF8	; 248
    ef1a:	21 e0       	ldi	r18, 0x01	; 1
    ef1c:	40 e5       	ldi	r20, 0x50	; 80
    ef1e:	50 e0       	ldi	r21, 0x00	; 0
    ef20:	88 cf       	rjmp	.-240    	; 0xee32 <setup+0xd8c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4457
      }
    }

    //// init EEPROMKY
    if (init == 4)
    ef22:	e4 e0       	ldi	r30, 0x04	; 4
    ef24:	ae 12       	cpse	r10, r30
    ef26:	e5 c4       	rjmp	.+2506   	; 0xf8f2 <setup+0x184c>
begin():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:31
}


void EEPROM_CAT25::begin(void)
{
  digitalWrite(_chipSelect, HIGH);
    ef28:	61 e0       	ldi	r22, 0x01	; 1
    ef2a:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <SROM+0xa>
    ef2e:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:32
  pinMode(_chipSelect, OUTPUT);
    ef32:	61 e0       	ldi	r22, 0x01	; 1
    ef34:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <SROM+0xa>
    ef38:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:34

  _spi->begin();
    ef3c:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
    ef40:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
    ef44:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <SoftSPIB::begin()>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:90
}

size_t EEPROM_CAT25::writeByte(const uint32_t address, const uint8_t byte)
{

  if (address >= _capacity) {
    ef48:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM+0x4>
    ef4c:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x5>
    ef50:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <SROM+0x6>
    ef54:	b0 91 74 0c 	lds	r27, 0x0C74	; 0x800c74 <SROM+0x7>
    ef58:	89 2b       	or	r24, r25
    ef5a:	8a 2b       	or	r24, r26
    ef5c:	8b 2b       	or	r24, r27
    ef5e:	a9 f0       	breq	.+42     	; 0xef8a <setup+0xee4>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    ef60:	0e 94 b4 8a 	call	0x11568	; 0x11568 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    ef64:	80 fd       	sbrc	r24, 0
    ef66:	fc cf       	rjmp	.-8      	; 0xef60 <setup+0xeba>
enableWrite():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:60
  return(true);
}

void EEPROM_CAT25::enableWrite(void)
{
  startCommand(EEPROM_CAT25_COMMAND_WREN, 0);
    ef68:	86 e0       	ldi	r24, 0x06	; 6
    ef6a:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:61
  endCommand();
    ef6e:	0e 94 67 8a 	call	0x114ce	; 0x114ce <EEPROM_CAT25::endCommand() [clone .constprop.90]>
writeByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:100
  while (!isReady()) {
    yield();
  }

  enableWrite();
  startCommand(EEPROM_CAT25_COMMAND_WRITE, address);
    ef72:	82 e0       	ldi	r24, 0x02	; 2
    ef74:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:101
  _spi->transfer(byte);
    ef78:	6a eb       	ldi	r22, 0xBA	; 186
    ef7a:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
    ef7e:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
    ef82:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:102
  endCommand();
    ef86:	0e 94 67 8a 	call	0x114ce	; 0x114ce <EEPROM_CAT25::endCommand() [clone .constprop.90]>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:72
  endCommand();
}

uint8_t EEPROM_CAT25::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    ef8a:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM+0x4>
    ef8e:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x5>
    ef92:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <SROM+0x6>
    ef96:	b0 91 74 0c 	lds	r27, 0x0C74	; 0x800c74 <SROM+0x7>
    ef9a:	89 2b       	or	r24, r25
    ef9c:	8a 2b       	or	r24, r26
    ef9e:	8b 2b       	or	r24, r27
    efa0:	71 f1       	breq	.+92     	; 0xeffe <setup+0xf58>
isReady():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:52
  return(ret);
}

bool EEPROM_CAT25::isReady(void)
{
  if ((getStatusRegister() & EEPROM_CAT25_RDY_Msk) == EEPROM_CAT25_RDY_BUSY) {
    efa2:	0e 94 b4 8a 	call	0x11568	; 0x11568 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>
    efa6:	80 fd       	sbrc	r24, 0
    efa8:	fc cf       	rjmp	.-8      	; 0xefa2 <setup+0xefc>
readByte():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:80

  while (!isReady()) {
    yield();
  }

  startCommand(EEPROM_CAT25_COMMAND_READ, address);
    efaa:	83 e0       	ldi	r24, 0x03	; 3
    efac:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:81
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
    efb0:	6f ef       	ldi	r22, 0xFF	; 255
    efb2:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
    efb6:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
    efba:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
    efbe:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:82
  endCommand();
    efc0:	0e 94 67 8a 	call	0x114ce	; 0x114ce <EEPROM_CAT25::endCommand() [clone .constprop.90]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4461
    {
      SROM.begin();
      SROM.writeByte(0, 0xBA);
      if (SROM.readByte(0) == 0xBA)
    efc4:	1a 3b       	cpi	r17, 0xBA	; 186
    efc6:	d9 f4       	brne	.+54     	; 0xeffe <setup+0xf58>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4464

      {
        strcpy_P(str1, text_test_eeprom);
    efc8:	63 ea       	ldi	r22, 0xA3	; 163
    efca:	73 e3       	ldi	r23, 0x33	; 51
    efcc:	8d 2d       	mov	r24, r13
    efce:	9b 2d       	mov	r25, r11
    efd0:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4465
        strcat_P(str1, text_ok);
    efd4:	63 eb       	ldi	r22, 0xB3	; 179
    efd6:	73 e3       	ldi	r23, 0x33	; 51
    efd8:	8d 2d       	mov	r24, r13
    efda:	9b 2d       	mov	r25, r11
    efdc:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4466
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    efe0:	ee 24       	eor	r14, r14
    efe2:	ea 94       	dec	r14
    efe4:	fe 2c       	mov	r15, r14
    efe6:	00 ee       	ldi	r16, 0xE0	; 224
    efe8:	17 e0       	ldi	r17, 0x07	; 7
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4472
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
        strcat_P(str1, text_err);
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    efea:	21 e0       	ldi	r18, 0x01	; 1
    efec:	4a e5       	ldi	r20, 0x5A	; 90
    efee:	50 e0       	ldi	r21, 0x00	; 0
    eff0:	6e e1       	ldi	r22, 0x1E	; 30
    eff2:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    eff4:	8d 2d       	mov	r24, r13
    eff6:	9b 2d       	mov	r25, r11
    eff8:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    effc:	fc c0       	rjmp	.+504    	; 0xf1f6 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4470
        strcat_P(str1, text_ok);
        show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_test_eeprom);
    effe:	63 ea       	ldi	r22, 0xA3	; 163
    f000:	73 e3       	ldi	r23, 0x33	; 51
    f002:	8d 2d       	mov	r24, r13
    f004:	9b 2d       	mov	r25, r11
    f006:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4471
        strcat_P(str1, text_err);
    f00a:	69 e3       	ldi	r22, 0x39	; 57
    f00c:	74 e3       	ldi	r23, 0x34	; 52
    f00e:	8d 2d       	mov	r24, r13
    f010:	9b 2d       	mov	r25, r11
    f012:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strcat_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4472
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
    f016:	ee 24       	eor	r14, r14
    f018:	ea 94       	dec	r14
    f01a:	fe 2c       	mov	r15, r14
    f01c:	00 e0       	ldi	r16, 0x00	; 0
    f01e:	18 ef       	ldi	r17, 0xF8	; 248
    f020:	e4 cf       	rjmp	.-56     	; 0xefea <setup+0xf44>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4479
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    {
      strcpy_P(str1, text_nastaveni_systemu);
    f022:	61 e9       	ldi	r22, 0x91	; 145
    f024:	73 e3       	ldi	r23, 0x33	; 51
    f026:	8d 2d       	mov	r24, r13
    f028:	9b 2d       	mov	r25, r11
    f02a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4480
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f02e:	ee 24       	eor	r14, r14
    f030:	ea 94       	dec	r14
    f032:	fe 2c       	mov	r15, r14
    f034:	00 ee       	ldi	r16, 0xE0	; 224
    f036:	17 e0       	ldi	r17, 0x07	; 7
    f038:	21 e0       	ldi	r18, 0x01	; 1
    f03a:	44 e6       	ldi	r20, 0x64	; 100
    f03c:	50 e0       	ldi	r21, 0x00	; 0
    f03e:	6e e1       	ldi	r22, 0x1E	; 30
    f040:	70 e0       	ldi	r23, 0x00	; 0
    f042:	8d 2d       	mov	r24, r13
    f044:	9b 2d       	mov	r25, r11
    f046:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    f04a:	ab e1       	ldi	r26, 0x1B	; 27
    f04c:	ea 2e       	mov	r14, r26
    f04e:	ac e0       	ldi	r26, 0x0C	; 12
    f050:	fa 2e       	mov	r15, r26
    f052:	0e e6       	ldi	r16, 0x6E	; 110
    f054:	10 e0       	ldi	r17, 0x00	; 0
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:25

///////////////////////////////////////// MQTT network funkce //////////////////////////////////////////////////////
//
void load_setup_network(void)
{
  for (uint8_t m = 0; m < 6; m++) device.mac[m] = EEPROM.read(device_mac + m);
    f056:	c8 01       	movw	r24, r16
    f058:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f05c:	d7 01       	movw	r26, r14
    f05e:	8d 93       	st	X+, r24
    f060:	7d 01       	movw	r14, r26
    f062:	0f 5f       	subi	r16, 0xFF	; 255
    f064:	1f 4f       	sbci	r17, 0xFF	; 255
    f066:	04 37       	cpi	r16, 0x74	; 116
    f068:	11 05       	cpc	r17, r1
    f06a:	a9 f7       	brne	.-22     	; 0xf056 <setup+0xfb0>
    f06c:	e1 e2       	ldi	r30, 0x21	; 33
    f06e:	ee 2e       	mov	r14, r30
    f070:	ec e0       	ldi	r30, 0x0C	; 12
    f072:	fe 2e       	mov	r15, r30
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:26
  for (uint8_t m = 0; m < 4; m++) device.myIP[m] = EEPROM.read(device_ip + m);
    f074:	c8 01       	movw	r24, r16
    f076:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f07a:	f7 01       	movw	r30, r14
    f07c:	81 93       	st	Z+, r24
    f07e:	7f 01       	movw	r14, r30
    f080:	0f 5f       	subi	r16, 0xFF	; 255
    f082:	1f 4f       	sbci	r17, 0xFF	; 255
    f084:	08 37       	cpi	r16, 0x78	; 120
    f086:	11 05       	cpc	r17, r1
    f088:	a9 f7       	brne	.-22     	; 0xf074 <setup+0xfce>
    f08a:	75 e2       	ldi	r23, 0x25	; 37
    f08c:	e7 2e       	mov	r14, r23
    f08e:	7c e0       	ldi	r23, 0x0C	; 12
    f090:	f7 2e       	mov	r15, r23
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:27
  for (uint8_t m = 0; m < 4; m++) device.myMASK[m] = EEPROM.read(device_mask + m);
    f092:	c8 01       	movw	r24, r16
    f094:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f098:	d7 01       	movw	r26, r14
    f09a:	8d 93       	st	X+, r24
    f09c:	7d 01       	movw	r14, r26
    f09e:	0f 5f       	subi	r16, 0xFF	; 255
    f0a0:	1f 4f       	sbci	r17, 0xFF	; 255
    f0a2:	0c 37       	cpi	r16, 0x7C	; 124
    f0a4:	11 05       	cpc	r17, r1
    f0a6:	a9 f7       	brne	.-22     	; 0xf092 <setup+0xfec>
    f0a8:	5d e2       	ldi	r21, 0x2D	; 45
    f0aa:	85 2e       	mov	r8, r21
    f0ac:	5c e0       	ldi	r21, 0x0C	; 12
    f0ae:	95 2e       	mov	r9, r21
    f0b0:	60 e8       	ldi	r22, 0x80	; 128
    f0b2:	e6 2e       	mov	r14, r22
    f0b4:	f1 2c       	mov	r15, r1
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:28
  for (uint8_t m = 0; m < 4; m++) device.myGW[m] = EEPROM.read(device_gw + m);
    f0b6:	c7 01       	movw	r24, r14
    f0b8:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f0bc:	f4 01       	movw	r30, r8
    f0be:	81 93       	st	Z+, r24
    f0c0:	4f 01       	movw	r8, r30
    f0c2:	ff ef       	ldi	r31, 0xFF	; 255
    f0c4:	ef 1a       	sub	r14, r31
    f0c6:	ff 0a       	sbc	r15, r31
    f0c8:	24 e8       	ldi	r18, 0x84	; 132
    f0ca:	e2 16       	cp	r14, r18
    f0cc:	f1 04       	cpc	r15, r1
    f0ce:	99 f7       	brne	.-26     	; 0xf0b6 <setup+0x1010>
    f0d0:	49 e2       	ldi	r20, 0x29	; 41
    f0d2:	84 2e       	mov	r8, r20
    f0d4:	4c e0       	ldi	r20, 0x0C	; 12
    f0d6:	94 2e       	mov	r9, r20
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:29
  for (uint8_t m = 0; m < 4; m++) device.myDNS[m] = EEPROM.read(device_dns + m);
    f0d8:	c8 01       	movw	r24, r16
    f0da:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f0de:	d4 01       	movw	r26, r8
    f0e0:	8d 93       	st	X+, r24
    f0e2:	4d 01       	movw	r8, r26
    f0e4:	0f 5f       	subi	r16, 0xFF	; 255
    f0e6:	1f 4f       	sbci	r17, 0xFF	; 255
    f0e8:	00 38       	cpi	r16, 0x80	; 128
    f0ea:	11 05       	cpc	r17, r1
    f0ec:	a9 f7       	brne	.-22     	; 0xf0d8 <setup+0x1032>
    f0ee:	31 e3       	ldi	r19, 0x31	; 49
    f0f0:	83 2e       	mov	r8, r19
    f0f2:	3c e0       	ldi	r19, 0x0C	; 12
    f0f4:	93 2e       	mov	r9, r19
    f0f6:	04 e6       	ldi	r16, 0x64	; 100
    f0f8:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:30
  for (uint8_t m = 0; m < 9; m++) device.nazev[m] = EEPROM.read(device_nazev + m);
    f0fa:	c8 01       	movw	r24, r16
    f0fc:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f100:	f4 01       	movw	r30, r8
    f102:	81 93       	st	Z+, r24
    f104:	4f 01       	movw	r8, r30
    f106:	0f 5f       	subi	r16, 0xFF	; 255
    f108:	1f 4f       	sbci	r17, 0xFF	; 255
    f10a:	0d 36       	cpi	r16, 0x6D	; 109
    f10c:	11 05       	cpc	r17, r1
    f10e:	a9 f7       	brne	.-22     	; 0xf0fa <setup+0x1054>
    f110:	0b e3       	ldi	r16, 0x3B	; 59
    f112:	1c e0       	ldi	r17, 0x0C	; 12
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:31
  for (uint8_t m = 0; m < 4; m++) device.mqtt_server[m] = EEPROM.read(device_mqtt_server + m);
    f114:	c7 01       	movw	r24, r14
    f116:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f11a:	d8 01       	movw	r26, r16
    f11c:	8d 93       	st	X+, r24
    f11e:	8d 01       	movw	r16, r26
    f120:	bf ef       	ldi	r27, 0xFF	; 255
    f122:	eb 1a       	sub	r14, r27
    f124:	fb 0a       	sbc	r15, r27
    f126:	e8 e8       	ldi	r30, 0x88	; 136
    f128:	ee 16       	cp	r14, r30
    f12a:	f1 04       	cpc	r15, r1
    f12c:	99 f7       	brne	.-26     	; 0xf114 <setup+0x106e>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:32
  device.mqtt_port = (EEPROM.read(device_mqtt_port) << 8) + EEPROM.read(device_mqtt_port + 1);
    f12e:	88 e8       	ldi	r24, 0x88	; 136
    f130:	90 e0       	ldi	r25, 0x00	; 0
    f132:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f136:	18 2f       	mov	r17, r24
    f138:	89 e8       	ldi	r24, 0x89	; 137
    f13a:	90 e0       	ldi	r25, 0x00	; 0
    f13c:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f140:	21 2f       	mov	r18, r17
    f142:	30 e0       	ldi	r19, 0x00	; 0
    f144:	32 2f       	mov	r19, r18
    f146:	22 27       	eor	r18, r18
    f148:	82 0f       	add	r24, r18
    f14a:	93 2f       	mov	r25, r19
    f14c:	91 1d       	adc	r25, r1
    f14e:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <device+0x25>
    f152:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device+0x24>
    f156:	21 e4       	ldi	r18, 0x41	; 65
    f158:	e2 2e       	mov	r14, r18
    f15a:	2c e0       	ldi	r18, 0x0C	; 12
    f15c:	f2 2e       	mov	r15, r18
    f15e:	0a e8       	ldi	r16, 0x8A	; 138
    f160:	10 e0       	ldi	r17, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:33
  for (uint8_t m = 0; m < 20; m++) device.mqtt_user[m] = EEPROM.read(device_mqtt_user + m);
    f162:	c8 01       	movw	r24, r16
    f164:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f168:	d7 01       	movw	r26, r14
    f16a:	8d 93       	st	X+, r24
    f16c:	7d 01       	movw	r14, r26
    f16e:	0f 5f       	subi	r16, 0xFF	; 255
    f170:	1f 4f       	sbci	r17, 0xFF	; 255
    f172:	0e 39       	cpi	r16, 0x9E	; 158
    f174:	11 05       	cpc	r17, r1
    f176:	a9 f7       	brne	.-22     	; 0xf162 <setup+0x10bc>
    f178:	85 e5       	ldi	r24, 0x55	; 85
    f17a:	e8 2e       	mov	r14, r24
    f17c:	8c e0       	ldi	r24, 0x0C	; 12
    f17e:	f8 2e       	mov	r15, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:34
  for (uint8_t m = 0; m < 20; m++) device.mqtt_key[m] = EEPROM.read(device_mqtt_key + m);
    f180:	c8 01       	movw	r24, r16
    f182:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f186:	f7 01       	movw	r30, r14
    f188:	81 93       	st	Z+, r24
    f18a:	7f 01       	movw	r14, r30
    f18c:	0f 5f       	subi	r16, 0xFF	; 255
    f18e:	1f 4f       	sbci	r17, 0xFF	; 255
    f190:	02 3b       	cpi	r16, 0xB2	; 178
    f192:	11 05       	cpc	r17, r1
    f194:	a9 f7       	brne	.-22     	; 0xf180 <setup+0x10da>
    f196:	b9 e6       	ldi	r27, 0x69	; 105
    f198:	eb 2e       	mov	r14, r27
    f19a:	bc e0       	ldi	r27, 0x0C	; 12
    f19c:	fb 2e       	mov	r15, r27
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
  for (uint8_t m = 0; m < 4; m++) device.ntp_server[m] = EEPROM.read(device_ntp_server + m);
    f19e:	c8 01       	movw	r24, r16
    f1a0:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f1a4:	d7 01       	movw	r26, r14
    f1a6:	8d 93       	st	X+, r24
    f1a8:	7d 01       	movw	r14, r26
    f1aa:	0f 5f       	subi	r16, 0xFF	; 255
    f1ac:	1f 4f       	sbci	r17, 0xFF	; 255
    f1ae:	06 3b       	cpi	r16, 0xB6	; 182
    f1b0:	11 05       	cpc	r17, r1
    f1b2:	a9 f7       	brne	.-22     	; 0xf19e <setup+0x10f8>
    f1b4:	45 e1       	ldi	r20, 0x15	; 21
    f1b6:	5a e0       	ldi	r21, 0x0A	; 10
    f1b8:	26 e0       	ldi	r18, 0x06	; 6
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
    f1ba:	60 e2       	ldi	r22, 0x20	; 32
    f1bc:	7e e4       	ldi	r23, 0x4E	; 78
load_setup_network():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:35
    f1be:	90 e0       	ldi	r25, 0x00	; 0
    f1c0:	80 e0       	ldi	r24, 0x00	; 0
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4486
    f1c2:	fc 01       	movw	r30, r24
    f1c4:	ee 0f       	add	r30, r30
    f1c6:	ff 1f       	adc	r31, r31
    f1c8:	e4 0f       	add	r30, r20
    f1ca:	f5 1f       	adc	r31, r21
    f1cc:	70 87       	std	Z+8, r23	; 0x08
    f1ce:	67 83       	std	Z+7, r22	; 0x07
    f1d0:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4485
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
    f1d2:	8a 30       	cpi	r24, 0x0A	; 10
    f1d4:	91 05       	cpc	r25, r1
    f1d6:	a9 f7       	brne	.-22     	; 0xf1c2 <setup+0x111c>
    f1d8:	21 50       	subi	r18, 0x01	; 1
    f1da:	42 5e       	subi	r20, 0xE2	; 226
    f1dc:	5f 4f       	sbci	r21, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4484
      strcpy_P(str1, text_nastaveni_systemu);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      /// nactu nastaveni site
      load_setup_network();
      //// kvuli lepsimu nabehu pocitani nastavim vychozi hodnotu na 2000 = 20 stupnu
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    f1de:	21 11       	cpse	r18, r1
    f1e0:	ee cf       	rjmp	.-36     	; 0xf1be <setup+0x1118>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4489
        for (uint8_t cnt = 0; cnt < MAX_AVG_TEMP; cnt++)
          status_tds18s20[idx].average_temp[cnt] = 20000;
      ///
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    f1e2:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <last_output_update>
    f1e6:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <last_output_update+0x1>
    f1ea:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <last_output_update+0x2>
    f1ee:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <last_output_update+0x3>
    f1f2:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <last_output_update+0x4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4283
  my_lcd.Fill_Screen(WHITE);
  my_lcd.Set_Draw_color(BLUE);
  strcpy_P(str1, term_title);
  show_string(str1, 30, 10, 2, BLUE, WHITE, 0);
  ///
  for (uint8_t init = 0;  init < 16; init++)
    f1f6:	a3 94       	inc	r10
    f1f8:	c4 5c       	subi	r28, 0xC4	; 196
    f1fa:	de 4f       	sbci	r29, 0xFE	; 254
    f1fc:	e8 81       	ld	r30, Y
    f1fe:	f9 81       	ldd	r31, Y+1	; 0x01
    f200:	cc 53       	subi	r28, 0x3C	; 60
    f202:	d1 40       	sbci	r29, 0x01	; 1
    f204:	3f 96       	adiw	r30, 0x0f	; 15
    f206:	c4 5c       	subi	r28, 0xC4	; 196
    f208:	de 4f       	sbci	r29, 0xFE	; 254
    f20a:	f9 83       	std	Y+1, r31	; 0x01
    f20c:	e8 83       	st	Y, r30
    f20e:	cc 53       	subi	r28, 0x3C	; 60
    f210:	d1 40       	sbci	r29, 0x01	; 1
    f212:	f0 e1       	ldi	r31, 0x10	; 16
    f214:	af 12       	cpse	r10, r31
    f216:	8f c9       	rjmp	.-3298   	; 0xe536 <setup+0x490>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4663
        selftest_set_0(SELFTEST_ERR_RTC);
      }
    }

  }
  delay(500);
    f218:	64 ef       	ldi	r22, 0xF4	; 244
    f21a:	71 e0       	ldi	r23, 0x01	; 1
    f21c:	80 e0       	ldi	r24, 0x00	; 0
    f21e:	90 e0       	ldi	r25, 0x00	; 0
    f220:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4664
  MenuPrepareStyle();
    f224:	0e 94 51 31 	call	0x62a2	; 0x62a2 <MenuPrepareStyle()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4665
  draw_menu(true);
    f228:	81 e0       	ldi	r24, 0x01	; 1
    f22a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4666
  a2d_run_now = 1;
    f22e:	81 e0       	ldi	r24, 0x01	; 1
    f230:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4668

}
    f234:	c3 5b       	subi	r28, 0xB3	; 179
    f236:	de 4f       	sbci	r29, 0xFE	; 254
    f238:	0f b6       	in	r0, 0x3f	; 63
    f23a:	f8 94       	cli
    f23c:	de bf       	out	0x3e, r29	; 62
    f23e:	0f be       	out	0x3f, r0	; 63
    f240:	cd bf       	out	0x3d, r28	; 61
    f242:	df 91       	pop	r29
    f244:	cf 91       	pop	r28
    f246:	1f 91       	pop	r17
    f248:	0f 91       	pop	r16
    f24a:	ff 90       	pop	r15
    f24c:	ef 90       	pop	r14
    f24e:	df 90       	pop	r13
    f250:	cf 90       	pop	r12
    f252:	bf 90       	pop	r11
    f254:	af 90       	pop	r10
    f256:	9f 90       	pop	r9
    f258:	8f 90       	pop	r8
    f25a:	7f 90       	pop	r7
    f25c:	6f 90       	pop	r6
    f25e:	5f 90       	pop	r5
    f260:	4f 90       	pop	r4
    f262:	3f 90       	pop	r3
    f264:	2f 90       	pop	r2
    f266:	08 95       	ret
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4495
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    {
      strcpy_P(str1, text_touchscreen);
    f268:	65 e8       	ldi	r22, 0x85	; 133
    f26a:	73 e3       	ldi	r23, 0x33	; 51
    f26c:	c1 01       	movw	r24, r2
    f26e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4496
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f272:	ee 24       	eor	r14, r14
    f274:	ea 94       	dec	r14
    f276:	fe 2c       	mov	r15, r14
    f278:	00 ee       	ldi	r16, 0xE0	; 224
    f27a:	17 e0       	ldi	r17, 0x07	; 7
    f27c:	21 e0       	ldi	r18, 0x01	; 1
    f27e:	4e e6       	ldi	r20, 0x6E	; 110
    f280:	50 e0       	ldi	r21, 0x00	; 0
    f282:	6e e1       	ldi	r22, 0x1E	; 30
    f284:	70 e0       	ldi	r23, 0x00	; 0
    f286:	c1 01       	movw	r24, r2
    f288:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
    f28c:	20 91 ca 0d 	lds	r18, 0x0DCA	; 0x800dca <my_lcd+0x14>
    f290:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <my_lcd+0x15>
_ZNK11LCDWIKI_KBV9Get_WidthEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:737
}

//get lcd width
int16_t LCDWIKI_KBV::Get_Width(void) const
{
	return width;
    f294:	40 91 c8 0d 	lds	r20, 0x0DC8	; 0x800dc8 <my_lcd+0x12>
    f298:	50 91 c9 0d 	lds	r21, 0x0DC9	; 0x800dc9 <my_lcd+0x13>
Get_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:886
//1  :  90 degree
//2  :  180 degree
//3  :  270 degree
uint8_t LCDWIKI_KBV::Get_Rotation(void) const
{
	return rotation;
    f29c:	90 91 cc 0d 	lds	r25, 0x0DCC	; 0x800dcc <my_lcd+0x16>
TP_Init():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:53
	y=0xffff;
}

void LCDWIKI_TOUCH::TP_Init(uint8_t r,uint16_t w, uint16_t h)
{
	TDIN_HIGH;
    f2a0:	e0 91 ad 0d 	lds	r30, 0x0DAD	; 0x800dad <my_touch+0x15>
    f2a4:	f0 91 ae 0d 	lds	r31, 0x0DAE	; 0x800dae <my_touch+0x16>
    f2a8:	80 81       	ld	r24, Z
    f2aa:	60 91 b4 0d 	lds	r22, 0x0DB4	; 0x800db4 <my_touch+0x1c>
    f2ae:	86 2b       	or	r24, r22
    f2b0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:54
	TCLK_HIGH; 
    f2b2:	e0 91 a9 0d 	lds	r30, 0x0DA9	; 0x800da9 <my_touch+0x11>
    f2b6:	f0 91 aa 0d 	lds	r31, 0x0DAA	; 0x800daa <my_touch+0x12>
    f2ba:	80 81       	ld	r24, Z
    f2bc:	60 91 b2 0d 	lds	r22, 0x0DB2	; 0x800db2 <my_touch+0x1a>
    f2c0:	86 2b       	or	r24, r22
    f2c2:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:55
	TCS_HIGH;
    f2c4:	e0 91 a7 0d 	lds	r30, 0x0DA7	; 0x800da7 <my_touch+0xf>
    f2c8:	f0 91 a8 0d 	lds	r31, 0x0DA8	; 0x800da8 <my_touch+0x10>
    f2cc:	80 81       	ld	r24, Z
    f2ce:	60 91 b1 0d 	lds	r22, 0x0DB1	; 0x800db1 <my_touch+0x19>
    f2d2:	86 2b       	or	r24, r22
    f2d4:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:56
	wid = w;
    f2d6:	50 93 a1 0d 	sts	0x0DA1, r21	; 0x800da1 <my_touch+0x9>
    f2da:	40 93 a0 0d 	sts	0x0DA0, r20	; 0x800da0 <my_touch+0x8>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:57
	heig = h;	
    f2de:	30 93 a3 0d 	sts	0x0DA3, r19	; 0x800da3 <my_touch+0xb>
    f2e2:	20 93 a2 0d 	sts	0x0DA2, r18	; 0x800da2 <my_touch+0xa>
LCD_Set_Rotation():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:351
	return touch_rotation;
}

void LCDWIKI_TOUCH::LCD_Set_Rotation(uint8_t val)
{
	lcd_rotation = val;
    f2e6:	90 93 a6 0d 	sts	0x0DA6, r25	; 0x800da6 <my_touch+0xe>
    f2ea:	85 cf       	rjmp	.-246    	; 0xf1f6 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4522
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_ONEWIRE);
      }
      else
      {
        strcpy_P(str1, text_err);
    f2ec:	69 e3       	ldi	r22, 0x39	; 57
    f2ee:	74 e3       	ldi	r23, 0x34	; 52
    f2f0:	8d 2d       	mov	r24, r13
    f2f2:	9b 2d       	mov	r25, r11
    f2f4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4523
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f2f8:	ee 24       	eor	r14, r14
    f2fa:	ea 94       	dec	r14
    f2fc:	fe 2c       	mov	r15, r14
    f2fe:	00 e0       	ldi	r16, 0x00	; 0
    f300:	18 ef       	ldi	r17, 0xF8	; 248
    f302:	21 e0       	ldi	r18, 0x01	; 1
    f304:	48 e7       	ldi	r20, 0x78	; 120
    f306:	50 e0       	ldi	r21, 0x00	; 0
    f308:	60 ea       	ldi	r22, 0xA0	; 160
    f30a:	70 e0       	ldi	r23, 0x00	; 0
    f30c:	8d 2d       	mov	r24, r13
    f30e:	9b 2d       	mov	r25, r11
    f310:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f314:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    f318:	84 60       	ori	r24, 0x04	; 4
    f31a:	3d c3       	rjmp	.+1658   	; 0xf996 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4529
        selftest_set_0(SELFTEST_ERR_ONEWIRE);
      }
    }
    ///
    /// hledani zarizeni na 1wire sbernici
    if (init == 8)
    f31c:	e8 e0       	ldi	r30, 0x08	; 8
    f31e:	ae 12       	cpse	r10, r30
    f320:	9d c0       	rjmp	.+314    	; 0xf45c <setup+0x13b6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4531
    {
      strcpy_P(str1, text_onewire_hledam);
    f322:	69 e6       	ldi	r22, 0x69	; 105
    f324:	73 e3       	ldi	r23, 0x33	; 51
    f326:	8d 2d       	mov	r24, r13
    f328:	9b 2d       	mov	r25, r11
    f32a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4532
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f32e:	ee 24       	eor	r14, r14
    f330:	ea 94       	dec	r14
    f332:	fe 2c       	mov	r15, r14
    f334:	00 ee       	ldi	r16, 0xE0	; 224
    f336:	17 e0       	ldi	r17, 0x07	; 7
    f338:	21 e0       	ldi	r18, 0x01	; 1
    f33a:	42 e8       	ldi	r20, 0x82	; 130
    f33c:	50 e0       	ldi	r21, 0x00	; 0
    f33e:	6e e1       	ldi	r22, 0x1E	; 30
    f340:	70 e0       	ldi	r23, 0x00	; 0
    f342:	8d 2d       	mov	r24, r13
    f344:	9b 2d       	mov	r25, r11
    f346:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4533
      Global_HWwirenum = 0;
    f34a:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <Global_HWwirenum>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:234
//*************************************************************************************************************//
/////vyhledani zarizeni na hw 1wire sbernici////////
uint8_t one_hw_search_device(uint8_t idx)
{
  uint8_t r;
  ds2482_address[idx].HWwirenum = 0;
    f34e:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:235
  ds2482init(ds2482_address[idx].i2c_addr);
    f352:	10 91 71 09 	lds	r17, 0x0971	; 0x800971 <ds2482_address>
ds2482init():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:186
 * Initialize TWI, this routine is designed for 8Mhz operation.
 */
uint8_t ds2482init(uint8_t addr)
{

	Wire.beginTransmission(addr);
    f356:	81 2f       	mov	r24, r17
    f358:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:187
        if (Wire.endTransmission() == I2C_ERROR_OK)
    f35c:	85 ef       	ldi	r24, 0xF5	; 245
    f35e:	9d e0       	ldi	r25, 0x0D	; 13
    f360:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
    f364:	81 11       	cpse	r24, r1
    f366:	10 c0       	rjmp	.+32     	; 0xf388 <setup+0x12e2>
ds2482setConfig():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:352
	//	return DS2482_ERR_WRITE;

	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
    f368:	81 2f       	mov	r24, r17
    f36a:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:353
        Wire.write(DS2482_C_WCFG);
    f36e:	82 ed       	ldi	r24, 0xD2	; 210
    f370:	90 e0       	ldi	r25, 0x00	; 0
    f372:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:354
        Wire.write(config);
    f376:	60 e0       	ldi	r22, 0x00	; 0
    f378:	85 ef       	ldi	r24, 0xF5	; 245
    f37a:	9d e0       	ldi	r25, 0x0D	; 13
    f37c:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:355
        if (Wire.endTransmission() == I2C_ERROR_OK)
    f380:	85 ef       	ldi	r24, 0xF5	; 245
    f382:	9d e0       	ldi	r25, 0x0D	; 13
    f384:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:236
  ds2482reset(ds2482_address[idx].i2c_addr);
    f388:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <ds2482_address>
    f38c:	0e 94 6e 91 	call	0x122dc	; 0x122dc <ds2482reset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:237
  ds2482owReset(ds2482_address[idx].i2c_addr);
    f390:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <ds2482_address>
    f394:	0e 94 38 92 	call	0x12470	; 0x12470 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:238
  r = owMatchFirst(ds2482_address[idx].i2c_addr, tmp_rom);
    f398:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <ds2482_address>
owMatchFirst():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:104
 *
 * Can return anything owMatchLast returns
 */
uint8_t owMatchFirst(uint8_t ds2482_address, uint8_t *rom)
{
	lastDiscrepancy = lastDevice = 0;
    f39c:	10 92 60 0b 	sts	0x0B60, r1	; 0x800b60 <lastDevice>
    f3a0:	10 92 57 0b 	sts	0x0B57, r1	; 0x800b57 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:105
	return owMatchNext(ds2482_address, rom);
    f3a4:	0e 94 6e 92 	call	0x124dc	; 0x124dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
one_hw_search_device():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:246
  }
  if (r) {
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    f3a8:	81 11       	cpse	r24, r1
    f3aa:	35 c0       	rjmp	.+106    	; 0xf416 <setup+0x1370>
    f3ac:	1b e0       	ldi	r17, 0x0B	; 11
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
      w_rom[Global_HWwirenum].used = 1;
    f3ae:	01 e0       	ldi	r16, 0x01	; 1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:248
    /*jina chyba*/
  }
  ///
  if (r == DS2482_ERR_OK)
    while (1) {
      if (ds2482_address[idx].HWwirenum > HW_ONEWIRE_MAXDEVICES - 1) break;
    f3b0:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <ds2482_address+0x1>
    f3b4:	86 30       	cpi	r24, 0x06	; 6
    f3b6:	78 f5       	brcc	.+94     	; 0xf416 <setup+0x1370>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:249
      for (uint8_t a = 0; a < 8; a++)  w_rom[Global_HWwirenum].rom[a] = tmp_rom[a];
    f3b8:	20 91 fd 09 	lds	r18, 0x09FD	; 0x8009fd <Global_HWwirenum>
    f3bc:	42 2f       	mov	r20, r18
    f3be:	50 e0       	ldi	r21, 0x00	; 0
    f3c0:	a8 e5       	ldi	r26, 0x58	; 88
    f3c2:	bb e0       	ldi	r27, 0x0B	; 11
    f3c4:	21 9f       	mul	r18, r17
    f3c6:	90 01       	movw	r18, r0
    f3c8:	11 24       	eor	r1, r1
    f3ca:	90 e0       	ldi	r25, 0x00	; 0
    f3cc:	80 e0       	ldi	r24, 0x00	; 0
    f3ce:	6d 91       	ld	r22, X+
    f3d0:	fc 01       	movw	r30, r24
    f3d2:	e2 0f       	add	r30, r18
    f3d4:	f3 1f       	adc	r31, r19
    f3d6:	e5 54       	subi	r30, 0x45	; 69
    f3d8:	f6 4f       	sbci	r31, 0xF6	; 246
    f3da:	60 83       	st	Z, r22
    f3dc:	01 96       	adiw	r24, 0x01	; 1
    f3de:	88 30       	cpi	r24, 0x08	; 8
    f3e0:	91 05       	cpc	r25, r1
    f3e2:	a9 f7       	brne	.-22     	; 0xf3ce <setup+0x1328>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:250
      w_rom[Global_HWwirenum].assigned_ds2482 = idx;
    f3e4:	14 9f       	mul	r17, r20
    f3e6:	f0 01       	movw	r30, r0
    f3e8:	15 9f       	mul	r17, r21
    f3ea:	f0 0d       	add	r31, r0
    f3ec:	11 24       	eor	r1, r1
    f3ee:	e5 54       	subi	r30, 0x45	; 69
    f3f0:	f6 4f       	sbci	r31, 0xF6	; 246
    f3f2:	10 86       	std	Z+8, r1	; 0x08
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:251
      w_rom[Global_HWwirenum].used = 1;
    f3f4:	01 87       	std	Z+9, r16	; 0x09
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:252
      r = owMatchNext(ds2482_address[idx].i2c_addr, tmp_rom);
    f3f6:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <ds2482_address>
    f3fa:	0e 94 6e 92 	call	0x124dc	; 0x124dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:254
      /// celkovy pocet detekovanych roms
      ds2482_address[idx].HWwirenum++;
    f3fe:	90 91 72 09 	lds	r25, 0x0972	; 0x800972 <ds2482_address+0x1>
    f402:	9f 5f       	subi	r25, 0xFF	; 255
    f404:	90 93 72 09 	sts	0x0972, r25	; 0x800972 <ds2482_address+0x1>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:255
      Global_HWwirenum++;
    f408:	90 91 fd 09 	lds	r25, 0x09FD	; 0x8009fd <Global_HWwirenum>
    f40c:	9f 5f       	subi	r25, 0xFF	; 255
    f40e:	90 93 fd 09 	sts	0x09FD, r25	; 0x8009fd <Global_HWwirenum>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:256
      if (r == DS2482_ERR_NO_DEVICE)
    f412:	85 30       	cpi	r24, 0x05	; 5
    f414:	69 f6       	brne	.-102    	; 0xf3b0 <setup+0x130a>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4535
      one_hw_search_device(0);
      tds_update_associate();
    f416:	0e 94 14 56 	call	0xac28	; 0xac28 <tds_update_associate()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4536
      strcpy (str1, "Nalezeno: ");
    f41a:	68 ee       	ldi	r22, 0xE8	; 232
    f41c:	76 e0       	ldi	r23, 0x06	; 6
    f41e:	8d 2d       	mov	r24, r13
    f420:	9b 2d       	mov	r25, r11
    f422:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4537
      itoa(Global_HWwirenum, str2, 10);
    f426:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f42a:	4a e0       	ldi	r20, 0x0A	; 10
    f42c:	be 01       	movw	r22, r28
    f42e:	68 57       	subi	r22, 0x78	; 120
    f430:	7f 4f       	sbci	r23, 0xFF	; 255
    f432:	90 e0       	ldi	r25, 0x00	; 0
    f434:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4538
      strcat(str1, str2);
    f438:	be 01       	movw	r22, r28
    f43a:	68 57       	subi	r22, 0x78	; 120
    f43c:	7f 4f       	sbci	r23, 0xFF	; 255
    f43e:	8d 2d       	mov	r24, r13
    f440:	9b 2d       	mov	r25, r11
    f442:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4539
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f446:	ee 24       	eor	r14, r14
    f448:	ea 94       	dec	r14
    f44a:	fe 2c       	mov	r15, r14
    f44c:	00 ee       	ldi	r16, 0xE0	; 224
    f44e:	17 e0       	ldi	r17, 0x07	; 7
    f450:	21 e0       	ldi	r18, 0x01	; 1
    f452:	42 e8       	ldi	r20, 0x82	; 130
    f454:	50 e0       	ldi	r21, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f456:	60 ea       	ldi	r22, 0xA0	; 160
    f458:	70 e0       	ldi	r23, 0x00	; 0
    f45a:	cc cd       	rjmp	.-1128   	; 0xeff4 <setup+0xf4e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4543
      strcat(str1, str2);
      show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace wiznet w5500
    if (init == 9)
    f45c:	f9 e0       	ldi	r31, 0x09	; 9
    f45e:	af 12       	cpse	r10, r31
    f460:	9d c2       	rjmp	.+1338   	; 0xf99c <setup+0x18f6>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4545
    {
      digitalWrite(ETH_RST, HIGH);
    f462:	61 e0       	ldi	r22, 0x01	; 1
    f464:	86 e0       	ldi	r24, 0x06	; 6
    f466:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4546
      delay(10);
    f46a:	6a e0       	ldi	r22, 0x0A	; 10
    f46c:	70 e0       	ldi	r23, 0x00	; 0
    f46e:	80 e0       	ldi	r24, 0x00	; 0
    f470:	90 e0       	ldi	r25, 0x00	; 0
    f472:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4547
      digitalWrite(ETH_RST, LOW);
    f476:	60 e0       	ldi	r22, 0x00	; 0
    f478:	86 e0       	ldi	r24, 0x06	; 6
    f47a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4548
      delay(10);
    f47e:	6a e0       	ldi	r22, 0x0A	; 10
    f480:	70 e0       	ldi	r23, 0x00	; 0
    f482:	80 e0       	ldi	r24, 0x00	; 0
    f484:	90 e0       	ldi	r25, 0x00	; 0
    f486:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4549
      digitalWrite(ETH_RST, HIGH);
    f48a:	61 e0       	ldi	r22, 0x01	; 1
    f48c:	86 e0       	ldi	r24, 0x06	; 6
    f48e:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4550
      delay(100);
    f492:	64 e6       	ldi	r22, 0x64	; 100
    f494:	70 e0       	ldi	r23, 0x00	; 0
    f496:	80 e0       	ldi	r24, 0x00	; 0
    f498:	90 e0       	ldi	r25, 0x00	; 0
    f49a:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
_ZN13EthernetClass4initEh():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.h:35

  static uint8_t _state[MAX_SOCK_NUM];
  static uint16_t _server_port[MAX_SOCK_NUM];

  EthernetClass() { _dhcp = NULL; w5500_cspin = 10; }
  void init(uint8_t _cspin = 10) { w5500_cspin = _cspin; }
    f49e:	8f e0       	ldi	r24, 0x0F	; 15
    f4a0:	80 93 12 0c 	sts	0x0C12, r24	; 0x800c12 <Ethernet+0xc>
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f4a4:	82 ee       	ldi	r24, 0xE2	; 226
    f4a6:	92 e0       	ldi	r25, 0x02	; 2
    f4a8:	ce 5c       	subi	r28, 0xCE	; 206
    f4aa:	de 4f       	sbci	r29, 0xFE	; 254
    f4ac:	99 83       	std	Y+1, r25	; 0x01
    f4ae:	88 83       	st	Y, r24
    f4b0:	c2 53       	subi	r28, 0x32	; 50
    f4b2:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f4b4:	24 e0       	ldi	r18, 0x04	; 4
    f4b6:	e5 e2       	ldi	r30, 0x25	; 37
    f4b8:	fc e0       	ldi	r31, 0x0C	; 12
    f4ba:	cc 5b       	subi	r28, 0xBC	; 188
    f4bc:	de 4f       	sbci	r29, 0xFE	; 254
    f4be:	a8 81       	ld	r26, Y
    f4c0:	b9 81       	ldd	r27, Y+1	; 0x01
    f4c2:	c4 54       	subi	r28, 0x44	; 68
    f4c4:	d1 40       	sbci	r29, 0x01	; 1
    f4c6:	01 90       	ld	r0, Z+
    f4c8:	0d 92       	st	X+, r0
    f4ca:	2a 95       	dec	r18
    f4cc:	e1 f7       	brne	.-8      	; 0xf4c6 <setup+0x1420>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f4ce:	c4 5d       	subi	r28, 0xD4	; 212
    f4d0:	de 4f       	sbci	r29, 0xFE	; 254
    f4d2:	99 83       	std	Y+1, r25	; 0x01
    f4d4:	88 83       	st	Y, r24
    f4d6:	cc 52       	subi	r28, 0x2C	; 44
    f4d8:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f4da:	24 e0       	ldi	r18, 0x04	; 4
    f4dc:	ed e2       	ldi	r30, 0x2D	; 45
    f4de:	fc e0       	ldi	r31, 0x0C	; 12
    f4e0:	ca 5b       	subi	r28, 0xBA	; 186
    f4e2:	de 4f       	sbci	r29, 0xFE	; 254
    f4e4:	a8 81       	ld	r26, Y
    f4e6:	b9 81       	ldd	r27, Y+1	; 0x01
    f4e8:	c6 54       	subi	r28, 0x46	; 70
    f4ea:	d1 40       	sbci	r29, 0x01	; 1
    f4ec:	01 90       	ld	r0, Z+
    f4ee:	0d 92       	st	X+, r0
    f4f0:	2a 95       	dec	r18
    f4f2:	e1 f7       	brne	.-8      	; 0xf4ec <setup+0x1446>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f4f4:	ca 5d       	subi	r28, 0xDA	; 218
    f4f6:	de 4f       	sbci	r29, 0xFE	; 254
    f4f8:	99 83       	std	Y+1, r25	; 0x01
    f4fa:	88 83       	st	Y, r24
    f4fc:	c6 52       	subi	r28, 0x26	; 38
    f4fe:	d1 40       	sbci	r29, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f500:	24 e0       	ldi	r18, 0x04	; 4
    f502:	e9 e2       	ldi	r30, 0x29	; 41
    f504:	fc e0       	ldi	r31, 0x0C	; 12
    f506:	c8 5b       	subi	r28, 0xB8	; 184
    f508:	de 4f       	sbci	r29, 0xFE	; 254
    f50a:	a8 81       	ld	r26, Y
    f50c:	b9 81       	ldd	r27, Y+1	; 0x01
    f50e:	c8 54       	subi	r28, 0x48	; 72
    f510:	d1 40       	sbci	r29, 0x01	; 1
    f512:	01 90       	ld	r0, Z+
    f514:	0d 92       	st	X+, r0
    f516:	2a 95       	dec	r18
    f518:	e1 f7       	brne	.-8      	; 0xf512 <setup+0x146c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:41
IPAddress::IPAddress(uint32_t address)
{
    _address.dword = address;
}

IPAddress::IPAddress(const uint8_t *address)
    f51a:	c2 52       	subi	r28, 0x22	; 34
    f51c:	df 4f       	sbci	r29, 0xFF	; 255
    f51e:	99 83       	std	Y+1, r25	; 0x01
    f520:	88 83       	st	Y, r24
    f522:	ce 5d       	subi	r28, 0xDE	; 222
    f524:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:43
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
    f526:	84 e0       	ldi	r24, 0x04	; 4
    f528:	e1 e2       	ldi	r30, 0x21	; 33
    f52a:	fc e0       	ldi	r31, 0x0C	; 12
    f52c:	c6 5b       	subi	r28, 0xB6	; 182
    f52e:	de 4f       	sbci	r29, 0xFE	; 254
    f530:	a8 81       	ld	r26, Y
    f532:	b9 81       	ldd	r27, Y+1	; 0x01
    f534:	ca 54       	subi	r28, 0x4A	; 74
    f536:	d1 40       	sbci	r29, 0x01	; 1
    f538:	01 90       	ld	r0, Z+
    f53a:	0d 92       	st	X+, r0
    f53c:	8a 95       	dec	r24
    f53e:	e1 f7       	brne	.-8      	; 0xf538 <setup+0x1492>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4552
      Ethernet.init(ETH_CS);
      Ethernet.begin(device.mac, device.myIP, device.myDNS, device.myGW, device.myMASK);
    f540:	9e 01       	movw	r18, r28
    f542:	2e 5c       	subi	r18, 0xCE	; 206
    f544:	3e 4f       	sbci	r19, 0xFE	; 254
    f546:	ae 01       	movw	r20, r28
    f548:	44 5d       	subi	r20, 0xD4	; 212
    f54a:	5e 4f       	sbci	r21, 0xFE	; 254
    f54c:	be 01       	movw	r22, r28
    f54e:	6a 5d       	subi	r22, 0xDA	; 218
    f550:	7e 4f       	sbci	r23, 0xFE	; 254
    f552:	ce 01       	movw	r24, r28
    f554:	82 52       	subi	r24, 0x22	; 34
    f556:	9f 4f       	sbci	r25, 0xFF	; 255
    f558:	0e 94 e6 97 	call	0x12fcc	; 0x12fcc <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4553
      strcpy_P(str1, text_ethernet_rozhrani);
    f55c:	67 e5       	ldi	r22, 0x57	; 87
    f55e:	73 e3       	ldi	r23, 0x33	; 51
    f560:	8d 2d       	mov	r24, r13
    f562:	9b 2d       	mov	r25, r11
    f564:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4554
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f568:	ee 24       	eor	r14, r14
    f56a:	ea 94       	dec	r14
    f56c:	fe 2c       	mov	r15, r14
    f56e:	00 ee       	ldi	r16, 0xE0	; 224
    f570:	17 e0       	ldi	r17, 0x07	; 7
    f572:	21 e0       	ldi	r18, 0x01	; 1
    f574:	4c e8       	ldi	r20, 0x8C	; 140
    f576:	50 e0       	ldi	r21, 0x00	; 0
    f578:	6e e1       	ldi	r22, 0x1E	; 30
    f57a:	70 e0       	ldi	r23, 0x00	; 0
    f57c:	8d 2d       	mov	r24, r13
    f57e:	9b 2d       	mov	r25, r11
    f580:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4555
      delay(100);
    f584:	64 e6       	ldi	r22, 0x64	; 100
    f586:	70 e0       	ldi	r23, 0x00	; 0
    f588:	80 e0       	ldi	r24, 0x00	; 0
    f58a:	90 e0       	ldi	r25, 0x00	; 0
    f58c:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
    f590:	32 ce       	rjmp	.-924    	; 0xf1f6 <setup+0x1150>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f592:	90 62       	ori	r25, 0x20	; 32
    f594:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <selftest_data>
    f598:	42 c2       	rjmp	.+1156   	; 0xfa1e <setup+0x1978>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4586
        strcpy_P(str1, text_err);
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
      else
      {
        strcpy_P(str1, text_ok);
    f59a:	63 eb       	ldi	r22, 0xB3	; 179
    f59c:	73 e3       	ldi	r23, 0x33	; 51
    f59e:	8d 2d       	mov	r24, r13
    f5a0:	9b 2d       	mov	r25, r11
    f5a2:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f5a6:	ee 24       	eor	r14, r14
    f5a8:	ea 94       	dec	r14
    f5aa:	fe 2c       	mov	r15, r14
    f5ac:	00 ee       	ldi	r16, 0xE0	; 224
    f5ae:	17 e0       	ldi	r17, 0x07	; 7
    f5b0:	5b c2       	rjmp	.+1206   	; 0xfa68 <setup+0x19c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4593
      }

    }
    ///
    /// inicializace rest api rozhrani
    if (init == 11)
    f5b2:	3b e0       	ldi	r19, 0x0B	; 11
    f5b4:	a3 12       	cpse	r10, r19
    f5b6:	0f c0       	rjmp	.+30     	; 0xf5d6 <setup+0x1530>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4595
    {
      strcpy_P(str1, text_rest_rozhrani);
    f5b8:	68 e2       	ldi	r22, 0x28	; 40
    f5ba:	73 e3       	ldi	r23, 0x33	; 51
    f5bc:	8d 2d       	mov	r24, r13
    f5be:	9b 2d       	mov	r25, r11
    f5c0:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4596
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f5c4:	ee 24       	eor	r14, r14
    f5c6:	ea 94       	dec	r14
    f5c8:	fe 2c       	mov	r15, r14
    f5ca:	00 ee       	ldi	r16, 0xE0	; 224
    f5cc:	17 e0       	ldi	r17, 0x07	; 7
    f5ce:	21 e0       	ldi	r18, 0x01	; 1
    f5d0:	40 ea       	ldi	r20, 0xA0	; 160
    f5d2:	50 e0       	ldi	r21, 0x00	; 0
    f5d4:	0d cd       	rjmp	.-1510   	; 0xeff0 <setup+0xf4a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4600
    }
    ///
    /// inicializace nrf
    if (init == 12)
    f5d6:	8c e0       	ldi	r24, 0x0C	; 12
    f5d8:	a8 12       	cpse	r10, r24
    f5da:	4a c2       	rjmp	.+1172   	; 0xfa70 <setup+0x19ca>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4602
    {
      strcpy_P(str1, text_nrf_rozhrani);
    f5dc:	6b e1       	ldi	r22, 0x1B	; 27
    f5de:	73 e3       	ldi	r23, 0x33	; 51
    f5e0:	8d 2d       	mov	r24, r13
    f5e2:	9b 2d       	mov	r25, r11
    f5e4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4603
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f5e8:	ee 24       	eor	r14, r14
    f5ea:	ea 94       	dec	r14
    f5ec:	fe 2c       	mov	r15, r14
    f5ee:	00 ee       	ldi	r16, 0xE0	; 224
    f5f0:	17 e0       	ldi	r17, 0x07	; 7
    f5f2:	21 e0       	ldi	r18, 0x01	; 1
    f5f4:	4a ea       	ldi	r20, 0xAA	; 170
    f5f6:	50 e0       	ldi	r21, 0x00	; 0
    f5f8:	fb cc       	rjmp	.-1546   	; 0xeff0 <setup+0xf4a>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
void PID::Initialize()
{
   outputSum = *myOutput;
   lastInput = *myInput;
   if(outputSum > outMax) outputSum = outMax;
   else if(outputSum < outMin) outputSum = outMin;
    f5fa:	d8 01       	movw	r26, r16
    f5fc:	d2 96       	adiw	r26, 0x32	; 50
    f5fe:	8d 91       	ld	r24, X+
    f600:	9d 91       	ld	r25, X+
    f602:	0d 90       	ld	r0, X+
    f604:	bc 91       	ld	r27, X
    f606:	a0 2d       	mov	r26, r0
    f608:	c8 5c       	subi	r28, 0xC8	; 200
    f60a:	de 4f       	sbci	r29, 0xFE	; 254
    f60c:	88 83       	st	Y, r24
    f60e:	99 83       	std	Y+1, r25	; 0x01
    f610:	aa 83       	std	Y+2, r26	; 0x02
    f612:	bb 83       	std	Y+3, r27	; 0x03
    f614:	c8 53       	subi	r28, 0x38	; 56
    f616:	d1 40       	sbci	r29, 0x01	; 1
    f618:	9c 01       	movw	r18, r24
    f61a:	ad 01       	movw	r20, r26
    f61c:	c3 01       	movw	r24, r6
    f61e:	b2 01       	movw	r22, r4
    f620:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    f624:	87 fd       	sbrc	r24, 7
    f626:	13 c3       	rjmp	.+1574   	; 0xfc4e <setup+0x1ba8>
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:182
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  /*we just went from manual to auto*/
        PID::Initialize();
    }
    inAuto = newAuto;
    f628:	d8 01       	movw	r26, r16
    f62a:	da 96       	adiw	r26, 0x3a	; 58
    f62c:	cc 92       	st	X, r12
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    f62e:	f8 01       	movw	r30, r16
    f630:	12 aa       	std	Z+50, r1	; 0x32
    f632:	13 aa       	std	Z+51, r1	; 0x33
    f634:	14 aa       	std	Z+52, r1	; 0x34
    f636:	15 aa       	std	Z+53, r1	; 0x35
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    f638:	80 e0       	ldi	r24, 0x00	; 0
    f63a:	90 e0       	ldi	r25, 0x00	; 0
    f63c:	af e7       	ldi	r26, 0x7F	; 127
    f63e:	b3 e4       	ldi	r27, 0x43	; 67
    f640:	86 ab       	std	Z+54, r24	; 0x36
    f642:	97 ab       	std	Z+55, r25	; 0x37
    f644:	a0 af       	std	Z+56, r26	; 0x38
    f646:	b1 af       	std	Z+57, r27	; 0x39
/home/saric/Arduino/libraries/PID/PID_v1.cpp:162

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    f648:	26 8d       	ldd	r18, Z+30	; 0x1e
    f64a:	37 8d       	ldd	r19, Z+31	; 0x1f
    f64c:	c8 5c       	subi	r28, 0xC8	; 200
    f64e:	de 4f       	sbci	r29, 0xFE	; 254
    f650:	39 83       	std	Y+1, r19	; 0x01
    f652:	28 83       	st	Y, r18
    f654:	c8 53       	subi	r28, 0x38	; 56
    f656:	d1 40       	sbci	r29, 0x01	; 1
    f658:	d9 01       	movw	r26, r18
    f65a:	4d 90       	ld	r4, X+
    f65c:	5d 90       	ld	r5, X+
    f65e:	6d 90       	ld	r6, X+
    f660:	7c 90       	ld	r7, X
    f662:	20 e0       	ldi	r18, 0x00	; 0
    f664:	30 e0       	ldi	r19, 0x00	; 0
    f666:	4f e7       	ldi	r20, 0x7F	; 127
    f668:	53 e4       	ldi	r21, 0x43	; 67
    f66a:	c3 01       	movw	r24, r6
    f66c:	b2 01       	movw	r22, r4
    f66e:	0e 94 ef b5 	call	0x16bde	; 0x16bde <__gesf2>
    f672:	18 16       	cp	r1, r24
    f674:	94 f5       	brge	.+100    	; 0xf6da <setup+0x1634>
    f676:	80 e0       	ldi	r24, 0x00	; 0
    f678:	90 e0       	ldi	r25, 0x00	; 0
    f67a:	af e7       	ldi	r26, 0x7F	; 127
    f67c:	b3 e4       	ldi	r27, 0x43	; 67
    f67e:	c8 5c       	subi	r28, 0xC8	; 200
    f680:	de 4f       	sbci	r29, 0xFE	; 254
    f682:	e8 81       	ld	r30, Y
    f684:	f9 81       	ldd	r31, Y+1	; 0x01
    f686:	c8 53       	subi	r28, 0x38	; 56
    f688:	d1 40       	sbci	r29, 0x01	; 1
    f68a:	80 83       	st	Z, r24
    f68c:	91 83       	std	Z+1, r25	; 0x01
    f68e:	a2 83       	std	Z+2, r26	; 0x02
    f690:	b3 83       	std	Z+3, r27	; 0x03
/home/saric/Arduino/libraries/PID/PID_v1.cpp:165
	   else if(*myOutput < outMin) *myOutput = outMin;

	   if(outputSum > outMax) outputSum= outMax;
    f692:	d8 01       	movw	r26, r16
    f694:	96 96       	adiw	r26, 0x26	; 38
    f696:	8d 91       	ld	r24, X+
    f698:	9d 91       	ld	r25, X+
    f69a:	0d 90       	ld	r0, X+
    f69c:	bc 91       	ld	r27, X
    f69e:	a0 2d       	mov	r26, r0
    f6a0:	c8 5c       	subi	r28, 0xC8	; 200
    f6a2:	de 4f       	sbci	r29, 0xFE	; 254
    f6a4:	88 83       	st	Y, r24
    f6a6:	99 83       	std	Y+1, r25	; 0x01
    f6a8:	aa 83       	std	Y+2, r26	; 0x02
    f6aa:	bb 83       	std	Y+3, r27	; 0x03
    f6ac:	c8 53       	subi	r28, 0x38	; 56
    f6ae:	d1 40       	sbci	r29, 0x01	; 1
    f6b0:	f8 01       	movw	r30, r16
    f6b2:	46 a8       	ldd	r4, Z+54	; 0x36
    f6b4:	57 a8       	ldd	r5, Z+55	; 0x37
    f6b6:	60 ac       	ldd	r6, Z+56	; 0x38
    f6b8:	71 ac       	ldd	r7, Z+57	; 0x39
    f6ba:	a3 01       	movw	r20, r6
    f6bc:	92 01       	movw	r18, r4
    f6be:	bc 01       	movw	r22, r24
    f6c0:	cd 01       	movw	r24, r26
    f6c2:	0e 94 ef b5 	call	0x16bde	; 0x16bde <__gesf2>
    f6c6:	18 16       	cp	r1, r24
    f6c8:	ec f4       	brge	.+58     	; 0xf704 <setup+0x165e>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166
	   else if(outputSum < outMin) outputSum= outMin;
    f6ca:	d8 01       	movw	r26, r16
    f6cc:	96 96       	adiw	r26, 0x26	; 38
    f6ce:	4d 92       	st	X+, r4
    f6d0:	5d 92       	st	X+, r5
    f6d2:	6d 92       	st	X+, r6
    f6d4:	7c 92       	st	X, r7
    f6d6:	99 97       	sbiw	r26, 0x29	; 41
    f6d8:	28 c0       	rjmp	.+80     	; 0xf72a <setup+0x1684>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:163
   outMax = Max;

   if(inAuto)
   {
	   if(*myOutput > outMax) *myOutput = outMax;
	   else if(*myOutput < outMin) *myOutput = outMin;
    f6da:	20 e0       	ldi	r18, 0x00	; 0
    f6dc:	30 e0       	ldi	r19, 0x00	; 0
    f6de:	a9 01       	movw	r20, r18
    f6e0:	c3 01       	movw	r24, r6
    f6e2:	b2 01       	movw	r22, r4
    f6e4:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    f6e8:	87 ff       	sbrs	r24, 7
    f6ea:	d3 cf       	rjmp	.-90     	; 0xf692 <setup+0x15ec>
    f6ec:	c8 5c       	subi	r28, 0xC8	; 200
    f6ee:	de 4f       	sbci	r29, 0xFE	; 254
    f6f0:	a8 81       	ld	r26, Y
    f6f2:	b9 81       	ldd	r27, Y+1	; 0x01
    f6f4:	c8 53       	subi	r28, 0x38	; 56
    f6f6:	d1 40       	sbci	r29, 0x01	; 1
    f6f8:	1d 92       	st	X+, r1
    f6fa:	1d 92       	st	X+, r1
    f6fc:	1d 92       	st	X+, r1
    f6fe:	1c 92       	st	X, r1
    f700:	13 97       	sbiw	r26, 0x03	; 3
    f702:	c7 cf       	rjmp	.-114    	; 0xf692 <setup+0x15ec>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:166

	   if(outputSum > outMax) outputSum= outMax;
	   else if(outputSum < outMin) outputSum= outMin;
    f704:	f8 01       	movw	r30, r16
    f706:	42 a8       	ldd	r4, Z+50	; 0x32
    f708:	53 a8       	ldd	r5, Z+51	; 0x33
    f70a:	64 a8       	ldd	r6, Z+52	; 0x34
    f70c:	75 a8       	ldd	r7, Z+53	; 0x35
    f70e:	a3 01       	movw	r20, r6
    f710:	92 01       	movw	r18, r4
    f712:	c8 5c       	subi	r28, 0xC8	; 200
    f714:	de 4f       	sbci	r29, 0xFE	; 254
    f716:	68 81       	ld	r22, Y
    f718:	79 81       	ldd	r23, Y+1	; 0x01
    f71a:	8a 81       	ldd	r24, Y+2	; 0x02
    f71c:	9b 81       	ldd	r25, Y+3	; 0x03
    f71e:	c8 53       	subi	r28, 0x38	; 56
    f720:	d1 40       	sbci	r29, 0x01	; 1
    f722:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
    f726:	87 fd       	sbrc	r24, 7
    f728:	d0 cf       	rjmp	.-96     	; 0xf6ca <setup+0x1624>
    f72a:	c0 5c       	subi	r28, 0xC0	; 192
    f72c:	de 4f       	sbci	r29, 0xFE	; 254
    f72e:	e8 81       	ld	r30, Y
    f730:	f9 81       	ldd	r31, Y+1	; 0x01
    f732:	c0 54       	subi	r28, 0x40	; 64
    f734:	d1 40       	sbci	r29, 0x01	; 1
    f736:	34 96       	adiw	r30, 0x04	; 4
    f738:	c0 5c       	subi	r28, 0xC0	; 192
    f73a:	de 4f       	sbci	r29, 0xFE	; 254
    f73c:	f9 83       	std	Y+1, r31	; 0x01
    f73e:	e8 83       	st	Y, r30
    f740:	c0 54       	subi	r28, 0x40	; 64
    f742:	d1 40       	sbci	r29, 0x01	; 1
    f744:	ce 5b       	subi	r28, 0xBE	; 190
    f746:	de 4f       	sbci	r29, 0xFE	; 254
    f748:	28 81       	ld	r18, Y
    f74a:	39 81       	ldd	r19, Y+1	; 0x01
    f74c:	c2 54       	subi	r28, 0x42	; 66
    f74e:	d1 40       	sbci	r29, 0x01	; 1
    f750:	2c 5f       	subi	r18, 0xFC	; 252
    f752:	3f 4f       	sbci	r19, 0xFF	; 255
    f754:	ce 5b       	subi	r28, 0xBE	; 190
    f756:	de 4f       	sbci	r29, 0xFE	; 254
    f758:	39 83       	std	Y+1, r19	; 0x01
    f75a:	28 83       	st	Y, r18
    f75c:	c2 54       	subi	r28, 0x42	; 66
    f75e:	d1 40       	sbci	r29, 0x01	; 1
    f760:	34 e0       	ldi	r19, 0x04	; 4
    f762:	e3 0e       	add	r14, r19
    f764:	f1 1c       	adc	r15, r1
    f766:	82 e0       	ldi	r24, 0x02	; 2
    f768:	88 0e       	add	r8, r24
    f76a:	91 1c       	adc	r9, r1
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:40

PID** array_pids = new PID*[MAX_THERMOSTAT];

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
    f76c:	9a e0       	ldi	r25, 0x0A	; 10
    f76e:	89 16       	cp	r8, r25
    f770:	91 04       	cpc	r9, r1
    f772:	09 f0       	breq	.+2      	; 0xf776 <setup+0x16d0>
    f774:	ad c1       	rjmp	.+858    	; 0xfad0 <setup+0x1a2a>
    f776:	ab e0       	ldi	r26, 0x0B	; 11
    f778:	ba e0       	ldi	r27, 0x0A	; 10
    f77a:	c8 5c       	subi	r28, 0xC8	; 200
    f77c:	de 4f       	sbci	r29, 0xFE	; 254
    f77e:	b9 83       	std	Y+1, r27	; 0x01
    f780:	a8 83       	st	Y, r26
    f782:	c8 53       	subi	r28, 0x38	; 56
    f784:	d1 40       	sbci	r29, 0x01	; 1
    f786:	43 e7       	ldi	r20, 0x73	; 115
    f788:	44 2e       	mov	r4, r20
    f78a:	49 e0       	ldi	r20, 0x09	; 9
    f78c:	54 2e       	mov	r5, r20
    f78e:	57 e8       	ldi	r21, 0x87	; 135
    f790:	65 2e       	mov	r6, r21
    f792:	59 e0       	ldi	r21, 0x09	; 9
    f794:	75 2e       	mov	r7, r21
    f796:	6b e9       	ldi	r22, 0x9B	; 155
    f798:	86 2e       	mov	r8, r22
    f79a:	69 e0       	ldi	r22, 0x09	; 9
    f79c:	96 2e       	mov	r9, r22
    f79e:	7f ea       	ldi	r23, 0xAF	; 175
    f7a0:	e7 2e       	mov	r14, r23
    f7a2:	79 e0       	ldi	r23, 0x09	; 9
    f7a4:	f7 2e       	mov	r15, r23
    f7a6:	00 e6       	ldi	r16, 0x60	; 96
    f7a8:	11 e0       	ldi	r17, 0x01	; 1
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4613
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f7aa:	c1 2c       	mov	r12, r1
thermostat_ring_set_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:23
{
  return therm_stav[idx];
}
void thermostat_ring_set_state(uint8_t idx, uint8_t stav)
{
  therm_stav[idx] = stav;
    f7ac:	c8 5c       	subi	r28, 0xC8	; 200
    f7ae:	de 4f       	sbci	r29, 0xFE	; 254
    f7b0:	e8 81       	ld	r30, Y
    f7b2:	f9 81       	ldd	r31, Y+1	; 0x01
    f7b4:	c8 53       	subi	r28, 0x38	; 56
    f7b6:	d1 40       	sbci	r29, 0x01	; 1
    f7b8:	11 92       	st	Z+, r1
    f7ba:	c8 5c       	subi	r28, 0xC8	; 200
    f7bc:	de 4f       	sbci	r29, 0xFE	; 254
    f7be:	f9 83       	std	Y+1, r31	; 0x01
    f7c0:	e8 83       	st	Y, r30
    f7c2:	c8 53       	subi	r28, 0x38	; 56
    f7c4:	d1 40       	sbci	r29, 0x01	; 1
thermostat_ring_get_pid_eeprom():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:225
  array_pids[idx]->SetSampleTime(PID_time[idx]);
}

void thermostat_ring_get_pid_eeprom(uint8_t idx)
{
  PID_p[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_p);
    f7c6:	c8 01       	movw	r24, r16
    f7c8:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <EEPROMreadFloat(unsigned int)>
    f7cc:	d2 01       	movw	r26, r4
    f7ce:	6d 93       	st	X+, r22
    f7d0:	7d 93       	st	X+, r23
    f7d2:	8d 93       	st	X+, r24
    f7d4:	9d 93       	st	X+, r25
    f7d6:	2d 01       	movw	r4, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:226
  PID_i[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_i);
    f7d8:	c8 01       	movw	r24, r16
    f7da:	04 96       	adiw	r24, 0x04	; 4
    f7dc:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <EEPROMreadFloat(unsigned int)>
    f7e0:	f3 01       	movw	r30, r6
    f7e2:	61 93       	st	Z+, r22
    f7e4:	71 93       	st	Z+, r23
    f7e6:	81 93       	st	Z+, r24
    f7e8:	91 93       	st	Z+, r25
    f7ea:	3f 01       	movw	r6, r30
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:227
  PID_d[idx] = EEPROMreadFloat(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_d);
    f7ec:	c8 01       	movw	r24, r16
    f7ee:	08 96       	adiw	r24, 0x08	; 8
    f7f0:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <EEPROMreadFloat(unsigned int)>
    f7f4:	d4 01       	movw	r26, r8
    f7f6:	6d 93       	st	X+, r22
    f7f8:	7d 93       	st	X+, r23
    f7fa:	8d 93       	st	X+, r24
    f7fc:	9d 93       	st	X+, r25
    f7fe:	4d 01       	movw	r8, r26
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:228
  PID_time[idx] = EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_pid_timer);
    f800:	c8 01       	movw	r24, r16
    f802:	0c 96       	adiw	r24, 0x0c	; 12
    f804:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
    f808:	f7 01       	movw	r30, r14
    f80a:	81 93       	st	Z+, r24
    f80c:	7f 01       	movw	r14, r30
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4618
      {
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
    f80e:	8c 2d       	mov	r24, r12
    f810:	0e 94 af 22 	call	0x455e	; 0x455e <thermostat_ring_update_pid_parameters(unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4613
    {
      strcpy_P(str1, text_pid_regulator);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      thermostat_init_pid();
      /// nastaveni vychozich hodnot pro regulator
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    f814:	c3 94       	inc	r12
    f816:	0f 5d       	subi	r16, 0xDF	; 223
    f818:	1f 4f       	sbci	r17, 0xFF	; 255
    f81a:	f5 e0       	ldi	r31, 0x05	; 5
    f81c:	cf 12       	cpse	r12, r31
    f81e:	c6 cf       	rjmp	.-116    	; 0xf7ac <setup+0x1706>
get_default_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2860
   return
     - uint8_t s id ringu
*/
uint8_t get_default_ring(void)
{
  return EEPROM.read(my_default_ring);
    f820:	8c e5       	ldi	r24, 0x5C	; 92
    f822:	90 e0       	ldi	r25, 0x00	; 0
    f824:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4620
        thermostat_ring_set_state(idx, 0);
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
    f828:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <default_ring>
get_default_show_temp():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2875
   return
     - uint8_t s id cislo cidla
*/
uint8_t get_default_show_temp(void)
{
  return EEPROM.read(my_default_show_temp);
    f82c:	8d e5       	ldi	r24, 0x5D	; 93
    f82e:	90 e0       	ldi	r25, 0x00	; 0
    f830:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4621
        thermostat_ring_set_power(idx, 0);
        thermostat_ring_get_pid_eeprom(idx);
        thermostat_ring_update_pid_parameters(idx);
      }
      default_ring = get_default_ring();
      default_show_temp = get_default_show_temp();
    f834:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <default_show_temp>
    f838:	de cc       	rjmp	.-1604   	; 0xf1f6 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4637
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
        selftest_set_0(SELFTEST_ERR_NTP);
      }
      else
      {
        strcpy_P(str1, text_ok);
    f83a:	63 eb       	ldi	r22, 0xB3	; 179
    f83c:	73 e3       	ldi	r23, 0x33	; 51
    f83e:	c1 01       	movw	r24, r2
    f840:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4638
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f844:	ee 24       	eor	r14, r14
    f846:	ea 94       	dec	r14
    f848:	fe 2c       	mov	r15, r14
    f84a:	00 ee       	ldi	r16, 0xE0	; 224
    f84c:	17 e0       	ldi	r17, 0x07	; 7
    f84e:	21 e0       	ldi	r18, 0x01	; 1
    f850:	4e eb       	ldi	r20, 0xBE	; 190
    f852:	50 e0       	ldi	r21, 0x00	; 0
    f854:	60 ea       	ldi	r22, 0xA0	; 160
    f856:	70 e0       	ldi	r23, 0x00	; 0
    f858:	c1 01       	movw	r24, r2
    f85a:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f85e:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    f862:	8d 7f       	andi	r24, 0xFD	; 253
    f864:	98 c0       	rjmp	.+304    	; 0xf996 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4644
        selftest_clear_0(SELFTEST_ERR_NTP);
      }
    }
    ///
    /// inicializace RTC casu
    if (init == 15)
    f866:	bf e0       	ldi	r27, 0x0F	; 15
    f868:	ab 12       	cpse	r10, r27
    f86a:	c5 cc       	rjmp	.-1654   	; 0xf1f6 <setup+0x1150>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4646
    {
      strcpy_P(str1, text_rtc_cas);
    f86c:	66 ee       	ldi	r22, 0xE6	; 230
    f86e:	72 e3       	ldi	r23, 0x32	; 50
    f870:	8d 2d       	mov	r24, r13
    f872:	9b 2d       	mov	r25, r11
    f874:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4647
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f878:	ee 24       	eor	r14, r14
    f87a:	ea 94       	dec	r14
    f87c:	fe 2c       	mov	r15, r14
    f87e:	00 ee       	ldi	r16, 0xE0	; 224
    f880:	17 e0       	ldi	r17, 0x07	; 7
    f882:	21 e0       	ldi	r18, 0x01	; 1
    f884:	48 ec       	ldi	r20, 0xC8	; 200
    f886:	50 e0       	ldi	r21, 0x00	; 0
    f888:	6e e1       	ldi	r22, 0x1E	; 30
    f88a:	70 e0       	ldi	r23, 0x00	; 0
    f88c:	8d 2d       	mov	r24, r13
    f88e:	9b 2d       	mov	r25, r11
    f890:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4648
      if (rtc.isrunning())
    f894:	0e 94 57 91 	call	0x122ae	; 0x122ae <RTC_DS1307::isrunning() [clone .constprop.127]>
    f898:	88 23       	and	r24, r24
    f89a:	99 f0       	breq	.+38     	; 0xf8c2 <setup+0x181c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4650
      {
        strcpy_P(str1, text_ok);
    f89c:	63 eb       	ldi	r22, 0xB3	; 179
    f89e:	73 e3       	ldi	r23, 0x33	; 51
    f8a0:	8d 2d       	mov	r24, r13
    f8a2:	9b 2d       	mov	r25, r11
    f8a4:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4651
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f8a8:	21 e0       	ldi	r18, 0x01	; 1
    f8aa:	48 ec       	ldi	r20, 0xC8	; 200
    f8ac:	50 e0       	ldi	r21, 0x00	; 0
    f8ae:	60 ea       	ldi	r22, 0xA0	; 160
    f8b0:	70 e0       	ldi	r23, 0x00	; 0
    f8b2:	8d 2d       	mov	r24, r13
    f8b4:	9b 2d       	mov	r25, r11
    f8b6:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f8ba:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    f8be:	8e 7f       	andi	r24, 0xFE	; 254
    f8c0:	6a c0       	rjmp	.+212    	; 0xf996 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4656
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
        selftest_clear_0(SELFTEST_ERR_RTC);
      }
      else
      {
        strcpy_P(str1, text_err);
    f8c2:	69 e3       	ldi	r22, 0x39	; 57
    f8c4:	74 e3       	ldi	r23, 0x34	; 52
    f8c6:	8d 2d       	mov	r24, r13
    f8c8:	9b 2d       	mov	r25, r11
    f8ca:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4657
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    f8ce:	ee 24       	eor	r14, r14
    f8d0:	ea 94       	dec	r14
    f8d2:	fe 2c       	mov	r15, r14
    f8d4:	00 e0       	ldi	r16, 0x00	; 0
    f8d6:	18 ef       	ldi	r17, 0xF8	; 248
    f8d8:	21 e0       	ldi	r18, 0x01	; 1
    f8da:	48 ec       	ldi	r20, 0xC8	; 200
    f8dc:	50 e0       	ldi	r21, 0x00	; 0
    f8de:	60 ea       	ldi	r22, 0xA0	; 160
    f8e0:	70 e0       	ldi	r23, 0x00	; 0
    f8e2:	8d 2d       	mov	r24, r13
    f8e4:	9b 2d       	mov	r25, r11
    f8e6:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f8ea:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    f8ee:	81 60       	ori	r24, 0x01	; 1
    f8f0:	52 c0       	rjmp	.+164    	; 0xf996 <setup+0x18f0>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4477
        show_string(str1, 30, 50 + (init * 10), 1, RED, WHITE, 0 );
      }
    }

    ///  nacteni provoznich parametru
    if (init == 5)
    f8f2:	25 e0       	ldi	r18, 0x05	; 5
    f8f4:	a2 16       	cp	r10, r18
    f8f6:	09 f4       	brne	.+2      	; 0xf8fa <setup+0x1854>
    f8f8:	94 cb       	rjmp	.-2264   	; 0xf022 <setup+0xf7c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4493
      for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
        last_output_update[idx] = 0;
    }
    ///
    /// zobrazeni kalibracnich informaci touchscreenu
    if (init == 6)
    f8fa:	36 e0       	ldi	r19, 0x06	; 6
    f8fc:	a3 16       	cp	r10, r19
    f8fe:	09 f4       	brne	.+2      	; 0xf902 <setup+0x185c>
    f900:	b3 cc       	rjmp	.-1690   	; 0xf268 <setup+0x11c2>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4501
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      my_touch.TP_Init(my_lcd.Get_Rotation(), my_lcd.Get_Display_Width(), my_lcd.Get_Display_Height());
    }
    ///
    /// inicializace ds2482
    if (init == 7)
    f902:	87 e0       	ldi	r24, 0x07	; 7
    f904:	a8 12       	cpse	r10, r24
    f906:	0a cd       	rjmp	.-1516   	; 0xf31c <setup+0x1276>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4503
    {
      strcpy_P(str1, text_onewire_rozhrani);
    f908:	66 e7       	ldi	r22, 0x76	; 118
    f90a:	73 e3       	ldi	r23, 0x33	; 51
    f90c:	8d 2d       	mov	r24, r13
    f90e:	9b 2d       	mov	r25, r11
    f910:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4504
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f914:	ee 24       	eor	r14, r14
    f916:	ea 94       	dec	r14
    f918:	fe 2c       	mov	r15, r14
    f91a:	00 ee       	ldi	r16, 0xE0	; 224
    f91c:	17 e0       	ldi	r17, 0x07	; 7
    f91e:	21 e0       	ldi	r18, 0x01	; 1
    f920:	48 e7       	ldi	r20, 0x78	; 120
    f922:	50 e0       	ldi	r21, 0x00	; 0
    f924:	6e e1       	ldi	r22, 0x1E	; 30
    f926:	70 e0       	ldi	r23, 0x00	; 0
    f928:	8d 2d       	mov	r24, r13
    f92a:	9b 2d       	mov	r25, r11
    f92c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4505
      ds2482_address[0].i2c_addr = 0b0011000;
    f930:	88 e1       	ldi	r24, 0x18	; 24
    f932:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <ds2482_address>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4506
      ds2482_address[0].HWwirenum = 0;
    f936:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <ds2482_address+0x1>
    f93a:	e5 e1       	ldi	r30, 0x15	; 21
    f93c:	fa e0       	ldi	r31, 0x0A	; 10
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4510
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
      {
        status_tds18s20[idx].wait = false;
    f93e:	15 8e       	std	Z+29, r1	; 0x1d
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4511
        status_tds18s20[idx].period_now = 0;
    f940:	14 8e       	std	Z+28, r1	; 0x1c
    f942:	7e 96       	adiw	r30, 0x1e	; 30
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4508
      strcpy_P(str1, text_onewire_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      ds2482_address[0].i2c_addr = 0b0011000;
      ds2482_address[0].HWwirenum = 0;
      ///
      for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++ )
    f944:	ba e0       	ldi	r27, 0x0A	; 10
    f946:	e9 3c       	cpi	r30, 0xC9	; 201
    f948:	fb 07       	cpc	r31, r27
    f94a:	c9 f7       	brne	.-14     	; 0xf93e <setup+0x1898>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    f94c:	4a e0       	ldi	r20, 0x0A	; 10
    f94e:	be 01       	movw	r22, r28
    f950:	6e 50       	subi	r22, 0x0E	; 14
    f952:	7f 4f       	sbci	r23, 0xFF	; 255
    f954:	88 e1       	ldi	r24, 0x18	; 24
    f956:	90 e0       	ldi	r25, 0x00	; 0
    f958:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4514
      {
        status_tds18s20[idx].wait = false;
        status_tds18s20[idx].period_now = 0;
      }
      itoa(ds2482_address[0].i2c_addr, tmp1, 10);
      if (ds2482reset(ds2482_address[0].i2c_addr) == DS2482_ERR_OK)
    f95c:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <ds2482_address>
    f960:	0e 94 6e 91 	call	0x122dc	; 0x122dc <ds2482reset(unsigned char)>
    f964:	81 11       	cpse	r24, r1
    f966:	c2 cc       	rjmp	.-1660   	; 0xf2ec <setup+0x1246>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4516
      {
        strcpy_P(str1, text_ok);
    f968:	63 eb       	ldi	r22, 0xB3	; 179
    f96a:	73 e3       	ldi	r23, 0x33	; 51
    f96c:	8d 2d       	mov	r24, r13
    f96e:	9b 2d       	mov	r25, r11
    f970:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4517
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f974:	ee 24       	eor	r14, r14
    f976:	ea 94       	dec	r14
    f978:	fe 2c       	mov	r15, r14
    f97a:	00 ee       	ldi	r16, 0xE0	; 224
    f97c:	17 e0       	ldi	r17, 0x07	; 7
    f97e:	21 e0       	ldi	r18, 0x01	; 1
    f980:	48 e7       	ldi	r20, 0x78	; 120
    f982:	50 e0       	ldi	r21, 0x00	; 0
    f984:	60 ea       	ldi	r22, 0xA0	; 160
    f986:	70 e0       	ldi	r23, 0x00	; 0
    f988:	8d 2d       	mov	r24, r13
    f98a:	9b 2d       	mov	r25, r11
    f98c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    f990:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
    f994:	8b 7f       	andi	r24, 0xFB	; 251
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
    f996:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <selftest_data>
    f99a:	2d cc       	rjmp	.-1958   	; 0xf1f6 <setup+0x1150>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4559
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
      delay(100);
    }
    ///
    ///inicializace mqtt rozhrani
    if (init == 10)
    f99c:	9a e0       	ldi	r25, 0x0A	; 10
    f99e:	a9 12       	cpse	r10, r25
    f9a0:	08 ce       	rjmp	.-1008   	; 0xf5b2 <setup+0x150c>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4561
    {
      strcpy_P(str1, text_mqtt_rozhrani);
    f9a2:	69 e4       	ldi	r22, 0x49	; 73
    f9a4:	73 e3       	ldi	r23, 0x33	; 51
    f9a6:	c1 01       	movw	r24, r2
    f9a8:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4562
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    f9ac:	ee 24       	eor	r14, r14
    f9ae:	ea 94       	dec	r14
    f9b0:	fe 2c       	mov	r15, r14
    f9b2:	00 ee       	ldi	r16, 0xE0	; 224
    f9b4:	17 e0       	ldi	r17, 0x07	; 7
    f9b6:	21 e0       	ldi	r18, 0x01	; 1
    f9b8:	46 e9       	ldi	r20, 0x96	; 150
    f9ba:	50 e0       	ldi	r21, 0x00	; 0
    f9bc:	6e e1       	ldi	r22, 0x1E	; 30
    f9be:	70 e0       	ldi	r23, 0x00	; 0
    f9c0:	c1 01       	movw	r24, r2
    f9c2:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4563
      mqtt_client.setServer(device.mqtt_server, device.mqtt_port);
    f9c6:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <device+0x24>
    f9ca:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <device+0x25>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:556
    }
    return rc;
}

PubSubClient& PubSubClient::setServer(uint8_t * ip, uint16_t port) {
    IPAddress addr(ip[0],ip[1],ip[2],ip[3]);
    f9ce:	20 91 3e 0c 	lds	r18, 0x0C3E	; 0x800c3e <device+0x23>
    f9d2:	30 91 3d 0c 	lds	r19, 0x0C3D	; 0x800c3d <device+0x22>
    f9d6:	40 91 3c 0c 	lds	r20, 0x0C3C	; 0x800c3c <device+0x21>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
    f9da:	50 91 3b 0c 	lds	r21, 0x0C3B	; 0x800c3b <device+0x20>
    f9de:	50 93 1f 10 	sts	0x101F, r21	; 0x80101f <mqtt_client+0x211>
    f9e2:	40 93 20 10 	sts	0x1020, r20	; 0x801020 <mqtt_client+0x212>
    f9e6:	30 93 21 10 	sts	0x1021, r19	; 0x801021 <mqtt_client+0x213>
    f9ea:	20 93 22 10 	sts	0x1022, r18	; 0x801022 <mqtt_client+0x214>
setServer():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:562
    return setServer(addr,port);
}

PubSubClient& PubSubClient::setServer(IPAddress ip, uint16_t port) {
    this->ip = ip;
    this->port = port;
    f9ee:	90 93 26 10 	sts	0x1026, r25	; 0x801026 <mqtt_client+0x218>
    f9f2:	80 93 25 10 	sts	0x1025, r24	; 0x801025 <mqtt_client+0x217>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:563
    this->domain = NULL;
    f9f6:	10 92 24 10 	sts	0x1024, r1	; 0x801024 <mqtt_client+0x216>
    f9fa:	10 92 23 10 	sts	0x1023, r1	; 0x801023 <mqtt_client+0x215>
setCallback():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:574
    this->port = port;
    return *this;
}

PubSubClient& PubSubClient::setCallback(MQTT_CALLBACK_SIGNATURE) {
    this->callback = callback;
    f9fe:	8d e2       	ldi	r24, 0x2D	; 45
    fa00:	90 e6       	ldi	r25, 0x60	; 96
    fa02:	90 93 1c 10 	sts	0x101C, r25	; 0x80101c <mqtt_client+0x20e>
    fa06:	80 93 1b 10 	sts	0x101B, r24	; 0x80101b <mqtt_client+0x20d>
send_mqtt_set_header():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:162

////////////////////////////////////////////////////////////////////////////////////////////////////////
//****************************************************************************************************//
void send_mqtt_set_header(char* header)
{
  header_out = header;
    fa0a:	8a e3       	ldi	r24, 0x3A	; 58
    fa0c:	93 e3       	ldi	r25, 0x33	; 51
    fa0e:	90 93 64 0b 	sts	0x0B64, r25	; 0x800b64 <header_out+0x1>
    fa12:	80 93 63 0b 	sts	0x0B63, r24	; 0x800b63 <header_out>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4566
      mqtt_client.setCallback(mqtt_callback);
      send_mqtt_set_header(thermctl_header_out);
      milis = millis();
    fa16:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    fa1a:	2b 01       	movw	r4, r22
    fa1c:	3c 01       	movw	r6, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4567
      while ((millis() - milis) < 3000 )
    fa1e:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    fa22:	64 19       	sub	r22, r4
    fa24:	75 09       	sbc	r23, r5
    fa26:	86 09       	sbc	r24, r6
    fa28:	97 09       	sbc	r25, r7
    fa2a:	68 3b       	cpi	r22, 0xB8	; 184
    fa2c:	7b 40       	sbci	r23, 0x0B	; 11
    fa2e:	81 05       	cpc	r24, r1
    fa30:	91 05       	cpc	r25, r1
    fa32:	58 f4       	brcc	.+22     	; 0xfa4a <setup+0x19a4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4569
      {
        mqtt_client.loop();
    fa34:	0e 94 b3 93 	call	0x12766	; 0x12766 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4570
        if (mqtt_reconnect() == 0)
    fa38:	0e 94 03 6f 	call	0xde06	; 0xde06 <mqtt_reconnect()>
    fa3c:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <selftest_data>
    fa40:	81 11       	cpse	r24, r1
    fa42:	a7 cd       	rjmp	.-1202   	; 0xf592 <setup+0x14ec>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
    fa44:	9f 7d       	andi	r25, 0xDF	; 223
    fa46:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <selftest_data>
selftest_get_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3975
     ... 0 - neni oznacen jako chybny
     ... neni 0 - chybny flag
*/
uint8_t selftest_get_0(uint8_t what)
{
  return selftest_data & (1 << what);
    fa4a:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
setup():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4579
        }
        else
          selftest_set_0(SELFTEST_MQTT_LINK);
      }

      if (selftest_get_0(SELFTEST_MQTT_LINK) != 0)
    fa4e:	85 ff       	sbrs	r24, 5
    fa50:	a4 cd       	rjmp	.-1208   	; 0xf59a <setup+0x14f4>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4581
      {
        strcpy_P(str1, text_err);
    fa52:	69 e3       	ldi	r22, 0x39	; 57
    fa54:	74 e3       	ldi	r23, 0x34	; 52
    fa56:	8d 2d       	mov	r24, r13
    fa58:	9b 2d       	mov	r25, r11
    fa5a:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4582
        show_string(str1, 160, 50 + (init * 10), 1, RED, WHITE, 0 );
    fa5e:	ee 24       	eor	r14, r14
    fa60:	ea 94       	dec	r14
    fa62:	fe 2c       	mov	r15, r14
    fa64:	00 e0       	ldi	r16, 0x00	; 0
    fa66:	18 ef       	ldi	r17, 0xF8	; 248
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4587
      }
      else
      {
        strcpy_P(str1, text_ok);
        show_string(str1, 160, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fa68:	21 e0       	ldi	r18, 0x01	; 1
    fa6a:	46 e9       	ldi	r20, 0x96	; 150
    fa6c:	50 e0       	ldi	r21, 0x00	; 0
    fa6e:	f3 cc       	rjmp	.-1562   	; 0xf456 <setup+0x13b0>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4607
      strcpy_P(str1, text_nrf_rozhrani);
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    }
    ///
    /// inicializace termostatu
    if (init == 13)
    fa70:	ad e0       	ldi	r26, 0x0D	; 13
    fa72:	aa 12       	cpse	r10, r26
    fa74:	0c 94 fb 73 	jmp	0xe7f6	; 0xe7f6 <setup+0x750>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4609
    {
      strcpy_P(str1, text_pid_regulator);
    fa78:	6d e0       	ldi	r22, 0x0D	; 13
    fa7a:	73 e3       	ldi	r23, 0x33	; 51
    fa7c:	8d 2d       	mov	r24, r13
    fa7e:	9b 2d       	mov	r25, r11
    fa80:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4610
      show_string(str1, 30, 50 + (init * 10), 1, GREEN, WHITE, 0 );
    fa84:	ee 24       	eor	r14, r14
    fa86:	ea 94       	dec	r14
    fa88:	fe 2c       	mov	r15, r14
    fa8a:	00 ee       	ldi	r16, 0xE0	; 224
    fa8c:	17 e0       	ldi	r17, 0x07	; 7
    fa8e:	21 e0       	ldi	r18, 0x01	; 1
    fa90:	44 eb       	ldi	r20, 0xB4	; 180
    fa92:	50 e0       	ldi	r21, 0x00	; 0
    fa94:	6e e1       	ldi	r22, 0x1E	; 30
    fa96:	70 e0       	ldi	r23, 0x00	; 0
    fa98:	8d 2d       	mov	r24, r13
    fa9a:	9b 2d       	mov	r25, r11
    fa9c:	0e 94 a0 84 	call	0x10940	; 0x10940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>
    faa0:	a6 e7       	ldi	r26, 0x76	; 118
    faa2:	b8 e0       	ldi	r27, 0x08	; 8
    faa4:	c0 5c       	subi	r28, 0xC0	; 192
    faa6:	de 4f       	sbci	r29, 0xFE	; 254
    faa8:	b9 83       	std	Y+1, r27	; 0x01
    faaa:	a8 83       	st	Y, r26
    faac:	c0 54       	subi	r28, 0x40	; 64
    faae:	d1 40       	sbci	r29, 0x01	; 1
    fab0:	e2 e6       	ldi	r30, 0x62	; 98
    fab2:	f8 e0       	ldi	r31, 0x08	; 8
    fab4:	ce 5b       	subi	r28, 0xBE	; 190
    fab6:	de 4f       	sbci	r29, 0xFE	; 254
    fab8:	f9 83       	std	Y+1, r31	; 0x01
    faba:	e8 83       	st	Y, r30
    fabc:	c2 54       	subi	r28, 0x42	; 66
    fabe:	d1 40       	sbci	r29, 0x01	; 1
    fac0:	fa e8       	ldi	r31, 0x8A	; 138
    fac2:	ef 2e       	mov	r14, r31
    fac4:	f8 e0       	ldi	r31, 0x08	; 8
    fac6:	ff 2e       	mov	r15, r31
    fac8:	91 2c       	mov	r9, r1
    faca:	81 2c       	mov	r8, r1
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
   pOnE = POn == P_ON_E;
    facc:	cc 24       	eor	r12, r12
    face:	c3 94       	inc	r12
operator new():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/new.cpp:22
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
    fad0:	8c e3       	ldi	r24, 0x3C	; 60
    fad2:	90 e0       	ldi	r25, 0x00	; 0
    fad4:	0e 94 dc ae 	call	0x15db8	; 0x15db8 <malloc>
    fad8:	8c 01       	movw	r16, r24
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:23
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
        double Kp, double Ki, double Kd, int POn, int ControllerDirection)
{
    myOutput = Output;
    fada:	c0 5c       	subi	r28, 0xC0	; 192
    fadc:	de 4f       	sbci	r29, 0xFE	; 254
    fade:	e8 81       	ld	r30, Y
    fae0:	f9 81       	ldd	r31, Y+1	; 0x01
    fae2:	c0 54       	subi	r28, 0x40	; 64
    fae4:	d1 40       	sbci	r29, 0x01	; 1
    fae6:	dc 01       	movw	r26, r24
    fae8:	5f 96       	adiw	r26, 0x1f	; 31
    faea:	fc 93       	st	X, r31
    faec:	ee 93       	st	-X, r30
    faee:	5e 97       	sbiw	r26, 0x1e	; 30
/home/saric/Arduino/libraries/PID/PID_v1.cpp:24
    myInput = Input;
    faf0:	ce 5b       	subi	r28, 0xBE	; 190
    faf2:	de 4f       	sbci	r29, 0xFE	; 254
    faf4:	28 81       	ld	r18, Y
    faf6:	39 81       	ldd	r19, Y+1	; 0x01
    faf8:	c2 54       	subi	r28, 0x42	; 66
    fafa:	d1 40       	sbci	r29, 0x01	; 1
    fafc:	5d 96       	adiw	r26, 0x1d	; 29
    fafe:	3c 93       	st	X, r19
    fb00:	2e 93       	st	-X, r18
    fb02:	5c 97       	sbiw	r26, 0x1c	; 28
/home/saric/Arduino/libraries/PID/PID_v1.cpp:25
    mySetpoint = Setpoint;
    fb04:	91 96       	adiw	r26, 0x21	; 33
    fb06:	fc 92       	st	X, r15
    fb08:	ee 92       	st	-X, r14
    fb0a:	90 97       	sbiw	r26, 0x20	; 32
/home/saric/Arduino/libraries/PID/PID_v1.cpp:26
    inAuto = false;
    fb0c:	da 96       	adiw	r26, 0x3a	; 58
    fb0e:	1c 92       	st	X, r1
    fb10:	da 97       	sbiw	r26, 0x3a	; 58
SetOutputLimits():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:157
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
   if(Min >= Max) return;
   outMin = Min;
    fb12:	d2 96       	adiw	r26, 0x32	; 50
    fb14:	1d 92       	st	X+, r1
    fb16:	1d 92       	st	X+, r1
    fb18:	1d 92       	st	X+, r1
    fb1a:	1c 92       	st	X, r1
    fb1c:	d5 97       	sbiw	r26, 0x35	; 53
/home/saric/Arduino/libraries/PID/PID_v1.cpp:158
   outMax = Max;
    fb1e:	80 e0       	ldi	r24, 0x00	; 0
    fb20:	90 e0       	ldi	r25, 0x00	; 0
    fb22:	af e7       	ldi	r26, 0x7F	; 127
    fb24:	b3 e4       	ldi	r27, 0x43	; 67
    fb26:	f8 01       	movw	r30, r16
    fb28:	86 ab       	std	Z+54, r24	; 0x36
    fb2a:	97 ab       	std	Z+55, r25	; 0x37
    fb2c:	a0 af       	std	Z+56, r26	; 0x38
    fb2e:	b1 af       	std	Z+57, r27	; 0x39
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:31
    inAuto = false;

    PID::SetOutputLimits(0, 255);				//default output limit corresponds to
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    fb30:	84 e6       	ldi	r24, 0x64	; 100
    fb32:	90 e0       	ldi	r25, 0x00	; 0
    fb34:	a0 e0       	ldi	r26, 0x00	; 0
    fb36:	b0 e0       	ldi	r27, 0x00	; 0
    fb38:	86 a7       	std	Z+46, r24	; 0x2e
    fb3a:	97 a7       	std	Z+47, r25	; 0x2f
    fb3c:	a0 ab       	std	Z+48, r26	; 0x30
    fb3e:	b1 ab       	std	Z+49, r27	; 0x31
SetControllerDirection():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:211
   {
	    kp = (0 - kp);
      ki = (0 - ki);
      kd = (0 - kd);
   }
   controllerDirection = Direction;
    fb40:	11 8e       	std	Z+25, r1	; 0x19
    fb42:	10 8e       	std	Z+24, r1	; 0x18
SetTunings():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:106
 ******************************************************************************/
void PID::SetTunings(double Kp, double Ki, double Kd, int POn)
{
   if (Kp<0 || Ki<0 || Kd<0) return;

   pOn = POn;
    fb44:	21 e0       	ldi	r18, 0x01	; 1
    fb46:	30 e0       	ldi	r19, 0x00	; 0
    fb48:	33 8f       	std	Z+27, r19	; 0x1b
    fb4a:	22 8f       	std	Z+26, r18	; 0x1a
/home/saric/Arduino/libraries/PID/PID_v1.cpp:107
   pOnE = POn == P_ON_E;
    fb4c:	c3 ae       	std	Z+59, r12	; 0x3b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:109

   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    fb4e:	80 e0       	ldi	r24, 0x00	; 0
    fb50:	90 e0       	ldi	r25, 0x00	; 0
    fb52:	a0 e0       	ldi	r26, 0x00	; 0
    fb54:	b0 e4       	ldi	r27, 0x40	; 64
    fb56:	80 83       	st	Z, r24
    fb58:	91 83       	std	Z+1, r25	; 0x01
    fb5a:	a2 83       	std	Z+2, r26	; 0x02
    fb5c:	b3 83       	std	Z+3, r27	; 0x03
    fb5e:	80 e0       	ldi	r24, 0x00	; 0
    fb60:	90 e0       	ldi	r25, 0x00	; 0
    fb62:	a0 ea       	ldi	r26, 0xA0	; 160
    fb64:	b0 e4       	ldi	r27, 0x40	; 64
    fb66:	84 83       	std	Z+4, r24	; 0x04
    fb68:	95 83       	std	Z+5, r25	; 0x05
    fb6a:	a6 83       	std	Z+6, r26	; 0x06
    fb6c:	b7 83       	std	Z+7, r27	; 0x07
    fb6e:	80 e0       	ldi	r24, 0x00	; 0
    fb70:	90 e0       	ldi	r25, 0x00	; 0
    fb72:	a0 e8       	ldi	r26, 0x80	; 128
    fb74:	bf e3       	ldi	r27, 0x3F	; 63
    fb76:	80 87       	std	Z+8, r24	; 0x08
    fb78:	91 87       	std	Z+9, r25	; 0x09
    fb7a:	a2 87       	std	Z+10, r26	; 0x0a
    fb7c:	b3 87       	std	Z+11, r27	; 0x0b
/home/saric/Arduino/libraries/PID/PID_v1.cpp:112

   double SampleTimeInSec = ((double)SampleTime)/1000;
   kp = Kp;
    fb7e:	80 e0       	ldi	r24, 0x00	; 0
    fb80:	90 e0       	ldi	r25, 0x00	; 0
    fb82:	a0 e0       	ldi	r26, 0x00	; 0
    fb84:	b0 e4       	ldi	r27, 0x40	; 64
    fb86:	84 87       	std	Z+12, r24	; 0x0c
    fb88:	95 87       	std	Z+13, r25	; 0x0d
    fb8a:	a6 87       	std	Z+14, r26	; 0x0e
    fb8c:	b7 87       	std	Z+15, r27	; 0x0f
/home/saric/Arduino/libraries/PID/PID_v1.cpp:113
   ki = Ki * SampleTimeInSec;
    fb8e:	80 e0       	ldi	r24, 0x00	; 0
    fb90:	90 e0       	ldi	r25, 0x00	; 0
    fb92:	a0 e0       	ldi	r26, 0x00	; 0
    fb94:	bf e3       	ldi	r27, 0x3F	; 63
    fb96:	80 8b       	std	Z+16, r24	; 0x10
    fb98:	91 8b       	std	Z+17, r25	; 0x11
    fb9a:	a2 8b       	std	Z+18, r26	; 0x12
    fb9c:	b3 8b       	std	Z+19, r27	; 0x13
/home/saric/Arduino/libraries/PID/PID_v1.cpp:114
   kd = Kd / SampleTimeInSec;
    fb9e:	80 e0       	ldi	r24, 0x00	; 0
    fba0:	90 e0       	ldi	r25, 0x00	; 0
    fba2:	a0 e2       	ldi	r26, 0x20	; 32
    fba4:	b1 e4       	ldi	r27, 0x41	; 65
    fba6:	84 8b       	std	Z+20, r24	; 0x14
    fba8:	95 8b       	std	Z+21, r25	; 0x15
    fbaa:	a6 8b       	std	Z+22, r26	; 0x16
    fbac:	b7 8b       	std	Z+23, r27	; 0x17
__base_ctor ():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:36
    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds

    PID::SetControllerDirection(ControllerDirection);
    PID::SetTunings(Kp, Ki, Kd, POn);

    lastTime = (millis() / 1000) - SampleTime;
    fbae:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
    fbb2:	28 ee       	ldi	r18, 0xE8	; 232
    fbb4:	33 e0       	ldi	r19, 0x03	; 3
    fbb6:	40 e0       	ldi	r20, 0x00	; 0
    fbb8:	50 e0       	ldi	r21, 0x00	; 0
    fbba:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
    fbbe:	f8 01       	movw	r30, r16
    fbc0:	86 a5       	ldd	r24, Z+46	; 0x2e
    fbc2:	97 a5       	ldd	r25, Z+47	; 0x2f
    fbc4:	a0 a9       	ldd	r26, Z+48	; 0x30
    fbc6:	b1 a9       	ldd	r27, Z+49	; 0x31
    fbc8:	28 1b       	sub	r18, r24
    fbca:	39 0b       	sbc	r19, r25
    fbcc:	4a 0b       	sbc	r20, r26
    fbce:	5b 0b       	sbc	r21, r27
    fbd0:	d8 01       	movw	r26, r16
    fbd2:	22 a3       	std	Z+34, r18	; 0x22
    fbd4:	33 a3       	std	Z+35, r19	; 0x23
    fbd6:	44 a3       	std	Z+36, r20	; 0x24
    fbd8:	55 a3       	std	Z+37, r21	; 0x25
thermostat_init_pid():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:42

void thermostat_init_pid(void)
{
  for (uint8_t p = 0; p < MAX_THERMOSTAT; p++)
  {
    array_pids[p] = new PID(&PID_Input[p], &PID_Output[p], &PID_Setpoint[p], 2, 5, 1, DIRECT);
    fbda:	e0 91 19 0c 	lds	r30, 0x0C19	; 0x800c19 <array_pids>
    fbde:	f0 91 1a 0c 	lds	r31, 0x0C1A	; 0x800c1a <array_pids+0x1>
    fbe2:	e8 0d       	add	r30, r8
    fbe4:	f9 1d       	adc	r31, r9
    fbe6:	11 83       	std	Z+1, r17	; 0x01
    fbe8:	00 83       	st	Z, r16
SetMode():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:178
 * automatically initialized
 ******************************************************************************/
void PID::SetMode(int Mode)
{
    bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    fbea:	da 96       	adiw	r26, 0x3a	; 58
    fbec:	8c 91       	ld	r24, X
    fbee:	da 97       	sbiw	r26, 0x3a	; 58
    fbf0:	81 11       	cpse	r24, r1
    fbf2:	1a cd       	rjmp	.-1484   	; 0xf628 <setup+0x1582>
Initialize():
/home/saric/Arduino/libraries/PID/PID_v1.cpp:191
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/
void PID::Initialize()
{
   outputSum = *myOutput;
    fbf4:	5e 96       	adiw	r26, 0x1e	; 30
    fbf6:	ed 91       	ld	r30, X+
    fbf8:	fc 91       	ld	r31, X
    fbfa:	40 80       	ld	r4, Z
    fbfc:	51 80       	ldd	r5, Z+1	; 0x01
    fbfe:	62 80       	ldd	r6, Z+2	; 0x02
    fc00:	73 80       	ldd	r7, Z+3	; 0x03
    fc02:	f8 01       	movw	r30, r16
    fc04:	46 a2       	std	Z+38, r4	; 0x26
    fc06:	57 a2       	std	Z+39, r5	; 0x27
    fc08:	60 a6       	std	Z+40, r6	; 0x28
    fc0a:	71 a6       	std	Z+41, r7	; 0x29
/home/saric/Arduino/libraries/PID/PID_v1.cpp:192
   lastInput = *myInput;
    fc0c:	04 8c       	ldd	r0, Z+28	; 0x1c
    fc0e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    fc10:	e0 2d       	mov	r30, r0
    fc12:	80 81       	ld	r24, Z
    fc14:	91 81       	ldd	r25, Z+1	; 0x01
    fc16:	a2 81       	ldd	r26, Z+2	; 0x02
    fc18:	b3 81       	ldd	r27, Z+3	; 0x03
    fc1a:	f8 01       	movw	r30, r16
    fc1c:	82 a7       	std	Z+42, r24	; 0x2a
    fc1e:	93 a7       	std	Z+43, r25	; 0x2b
    fc20:	a4 a7       	std	Z+44, r26	; 0x2c
    fc22:	b5 a7       	std	Z+45, r27	; 0x2d
/home/saric/Arduino/libraries/PID/PID_v1.cpp:193
   if(outputSum > outMax) outputSum = outMax;
    fc24:	86 a9       	ldd	r24, Z+54	; 0x36
    fc26:	97 a9       	ldd	r25, Z+55	; 0x37
    fc28:	a0 ad       	ldd	r26, Z+56	; 0x38
    fc2a:	b1 ad       	ldd	r27, Z+57	; 0x39
    fc2c:	c8 5c       	subi	r28, 0xC8	; 200
    fc2e:	de 4f       	sbci	r29, 0xFE	; 254
    fc30:	88 83       	st	Y, r24
    fc32:	99 83       	std	Y+1, r25	; 0x01
    fc34:	aa 83       	std	Y+2, r26	; 0x02
    fc36:	bb 83       	std	Y+3, r27	; 0x03
    fc38:	c8 53       	subi	r28, 0x38	; 56
    fc3a:	d1 40       	sbci	r29, 0x01	; 1
    fc3c:	9c 01       	movw	r18, r24
    fc3e:	ad 01       	movw	r20, r26
    fc40:	c3 01       	movw	r24, r6
    fc42:	b2 01       	movw	r22, r4
    fc44:	0e 94 ef b5 	call	0x16bde	; 0x16bde <__gesf2>
    fc48:	18 16       	cp	r1, r24
    fc4a:	0c f0       	brlt	.+2      	; 0xfc4e <setup+0x1ba8>
    fc4c:	d6 cc       	rjmp	.-1620   	; 0xf5fa <setup+0x1554>
/home/saric/Arduino/libraries/PID/PID_v1.cpp:194
   else if(outputSum < outMin) outputSum = outMin;
    fc4e:	c8 5c       	subi	r28, 0xC8	; 200
    fc50:	de 4f       	sbci	r29, 0xFE	; 254
    fc52:	88 81       	ld	r24, Y
    fc54:	99 81       	ldd	r25, Y+1	; 0x01
    fc56:	aa 81       	ldd	r26, Y+2	; 0x02
    fc58:	bb 81       	ldd	r27, Y+3	; 0x03
    fc5a:	c8 53       	subi	r28, 0x38	; 56
    fc5c:	d1 40       	sbci	r29, 0x01	; 1
    fc5e:	f8 01       	movw	r30, r16
    fc60:	86 a3       	std	Z+38, r24	; 0x26
    fc62:	97 a3       	std	Z+39, r25	; 0x27
    fc64:	a0 a7       	std	Z+40, r26	; 0x28
    fc66:	b1 a7       	std	Z+41, r27	; 0x29
    fc68:	df cc       	rjmp	.-1602   	; 0xf628 <setup+0x1582>

0000fc6a <display_menu_rtds_update_name(unsigned char, unsigned char)>:
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2421
  display_element_set_string(name, 8, args2);
  dialog_save_variable_function = &menu_tds_save_name;
}
/// funkce pro nastaveni nazvu rtds
void display_menu_rtds_update_name(uint8_t args1, uint8_t args2)
{
    fc6a:	1f 93       	push	r17
    fc6c:	cf 93       	push	r28
    fc6e:	df 93       	push	r29
    fc70:	cd b7       	in	r28, 0x3d	; 61
    fc72:	de b7       	in	r29, 0x3e	; 62
    fc74:	63 97       	sbiw	r28, 0x13	; 19
    fc76:	0f b6       	in	r0, 0x3f	; 63
    fc78:	f8 94       	cli
    fc7a:	de bf       	out	0x3e, r29	; 62
    fc7c:	0f be       	out	0x3f, r0	; 63
    fc7e:	cd bf       	out	0x3d, r28	; 61
    fc80:	16 2f       	mov	r17, r22
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2424
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
    fc82:	ae 01       	movw	r20, r28
    fc84:	4f 5f       	subi	r20, 0xFF	; 255
    fc86:	5f 4f       	sbci	r21, 0xFF	; 255
    fc88:	be 01       	movw	r22, r28
    fc8a:	6d 5e       	subi	r22, 0xED	; 237
    fc8c:	7f 4f       	sbci	r23, 0xFF	; 255
    fc8e:	81 2f       	mov	r24, r17
    fc90:	0e 94 ad 5b 	call	0xb75a	; 0xb75a <remote_tds_get_complete(unsigned char, unsigned char*, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2425
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
    fc94:	60 e0       	ldi	r22, 0x00	; 0
    fc96:	87 e6       	ldi	r24, 0x67	; 103
    fc98:	0e 94 e7 31 	call	0x63ce	; 0x63ce <MenuHistoryNextMenu(unsigned char, unsigned char)>
display_element_set_string():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2335
  menu_dialog_set_variable_update_now = update_now;
}
/////
void display_element_set_string(char *str, uint8_t max_length, uint8_t idx)
{
  strcpy(dialog_set_string, str);
    fc9c:	be 01       	movw	r22, r28
    fc9e:	6f 5f       	subi	r22, 0xFF	; 255
    fca0:	7f 4f       	sbci	r23, 0xFF	; 255
    fca2:	8d ea       	ldi	r24, 0xAD	; 173
    fca4:	98 e0       	ldi	r25, 0x08	; 8
    fca6:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2336
  dialog_set_string_max_length = max_length;
    fcaa:	82 e1       	ldi	r24, 0x12	; 18
    fcac:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <dialog_set_string_max_length>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2337
  dialog_set_string_args = idx;
    fcb0:	10 93 bd 08 	sts	0x08BD, r17	; 0x8008bd <dialog_set_string_args>
_Z29display_menu_rtds_update_namehh():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2427
  char name[RTDS_DEVICE_STRING_LEN];
  uint8_t active;
  remote_tds_get_complete(args2, &active, name);
  MenuHistoryNextMenu(MENU_DIALOG_KEYBOARD_ALFA, 0);
  display_element_set_string(name, RTDS_DEVICE_STRING_LEN, args2);
  dialog_save_variable_function = &menu_rtds_update_name;
    fcb4:	8f e8       	ldi	r24, 0x8F	; 143
    fcb6:	9f e5       	ldi	r25, 0x5F	; 95
    fcb8:	90 93 ac 08 	sts	0x08AC, r25	; 0x8008ac <dialog_save_variable_function+0x1>
    fcbc:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <dialog_save_variable_function>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2428
}
    fcc0:	63 96       	adiw	r28, 0x13	; 19
    fcc2:	0f b6       	in	r0, 0x3f	; 63
    fcc4:	f8 94       	cli
    fcc6:	de bf       	out	0x3e, r29	; 62
    fcc8:	0f be       	out	0x3f, r0	; 63
    fcca:	cd bf       	out	0x3d, r28	; 61
    fccc:	df 91       	pop	r29
    fcce:	cf 91       	pop	r28
    fcd0:	1f 91       	pop	r17
    fcd2:	08 95       	ret

0000fcd4 <twi_readFrom.part.0.constprop.169>:
twi_readFrom.part.0.constprop.169():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:157
  if(TWI_BUFFER_SIZE < length){
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    fcd4:	90 91 2b 11 	lds	r25, 0x112B	; 0x80112b <twi_state>
    fcd8:	91 11       	cpse	r25, r1
    fcda:	fc cf       	rjmp	.-8      	; 0xfcd4 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    fcdc:	91 e0       	ldi	r25, 0x01	; 1
    fcde:	90 93 2b 11 	sts	0x112B, r25	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:161
  twi_sendStop = sendStop;
    fce2:	90 93 2a 11 	sts	0x112A, r25	; 0x80112a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:163
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    fce6:	2f ef       	ldi	r18, 0xFF	; 255
    fce8:	20 93 29 11 	sts	0x1129, r18	; 0x801129 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    fcec:	10 92 28 11 	sts	0x1128, r1	; 0x801128 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    fcf0:	26 0f       	add	r18, r22
    fcf2:	20 93 27 11 	sts	0x1127, r18	; 0x801127 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:175
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    fcf6:	90 93 26 11 	sts	0x1126, r25	; 0x801126 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:176
  twi_slarw |= address << 1;
    fcfa:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <twi_slarw>
    fcfe:	88 0f       	add	r24, r24
    fd00:	89 2b       	or	r24, r25
    fd02:	80 93 26 11 	sts	0x1126, r24	; 0x801126 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:178

  if (true == twi_inRepStart) {
    fd06:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <twi_inRepStart>
    fd0a:	81 30       	cpi	r24, 0x01	; 1
    fd0c:	f9 f4       	brne	.+62     	; 0xfd4c <twi_readFrom.part.0.constprop.169+0x78>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    fd0e:	10 92 25 11 	sts	0x1125, r1	; 0x801125 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:187
    do {
      TWDR = twi_slarw;
    fd12:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <twi_slarw>
    fd16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:188
    } while(TWCR & _BV(TWWC));
    fd1a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    fd1e:	83 fd       	sbrc	r24, 3
    fd20:	f8 cf       	rjmp	.-16     	; 0xfd12 <twi_readFrom.part.0.constprop.169+0x3e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    fd22:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    fd24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    fd28:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_state>
    fd2c:	81 30       	cpi	r24, 0x01	; 1
    fd2e:	e1 f3       	breq	.-8      	; 0xfd28 <twi_readFrom.part.0.constprop.169+0x54>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    fd30:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <twi_masterBufferIndex>
    fd34:	86 17       	cp	r24, r22
    fd36:	10 f4       	brcc	.+4      	; 0xfd3c <twi_readFrom.part.0.constprop.169+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:201
    length = twi_masterBufferIndex;
    fd38:	60 91 28 11 	lds	r22, 0x1128	; 0x801128 <twi_masterBufferIndex>
    fd3c:	a5 e0       	ldi	r26, 0x05	; 5
    fd3e:	b1 e1       	ldi	r27, 0x11	; 17
    fd40:	e5 ee       	ldi	r30, 0xE5	; 229
    fd42:	f0 e1       	ldi	r31, 0x10	; 16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    fd44:	80 e0       	ldi	r24, 0x00	; 0
    fd46:	86 13       	cpse	r24, r22
    fd48:	03 c0       	rjmp	.+6      	; 0xfd50 <twi_readFrom.part.0.constprop.169+0x7c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    fd4a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    fd4c:	85 ee       	ldi	r24, 0xE5	; 229
    fd4e:	ea cf       	rjmp	.-44     	; 0xfd24 <twi_readFrom.part.0.constprop.169+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:205
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    fd50:	9d 91       	ld	r25, X+
    fd52:	91 93       	st	Z+, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:204

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    fd54:	8f 5f       	subi	r24, 0xFF	; 255
    fd56:	f7 cf       	rjmp	.-18     	; 0xfd46 <twi_readFrom.part.0.constprop.169+0x72>

0000fd58 <TwoWire::read()>:
_ZN7TwoWire4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fd58:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
    fd5c:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    fd60:	2f ef       	ldi	r18, 0xFF	; 255
    fd62:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fd64:	98 17       	cp	r25, r24
    fd66:	48 f4       	brcc	.+18     	; 0xfd7a <TwoWire::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    fd68:	e9 2f       	mov	r30, r25
    fd6a:	f0 e0       	ldi	r31, 0x00	; 0
    fd6c:	eb 51       	subi	r30, 0x1B	; 27
    fd6e:	ff 4e       	sbci	r31, 0xEF	; 239
    fd70:	20 81       	ld	r18, Z
    fd72:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    fd74:	9f 5f       	subi	r25, 0xFF	; 255
    fd76:	90 93 e0 10 	sts	0x10E0, r25	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    fd7a:	c9 01       	movw	r24, r18
    fd7c:	08 95       	ret

0000fd7e <TwoWire::read() [clone .constprop.130]>:
_ZN7TwoWire4readEv.constprop.130():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fd7e:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
    fd82:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:246
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
    fd86:	2f ef       	ldi	r18, 0xFF	; 255
    fd88:	3f ef       	ldi	r19, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:249

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    fd8a:	98 17       	cp	r25, r24
    fd8c:	48 f4       	brcc	.+18     	; 0xfda0 <TwoWire::read() [clone .constprop.130]+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:250
    value = rxBuffer[rxBufferIndex];
    fd8e:	e9 2f       	mov	r30, r25
    fd90:	f0 e0       	ldi	r31, 0x00	; 0
    fd92:	eb 51       	subi	r30, 0x1B	; 27
    fd94:	ff 4e       	sbci	r31, 0xEF	; 239
    fd96:	20 81       	ld	r18, Z
    fd98:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:251
    ++rxBufferIndex;
    fd9a:	9f 5f       	subi	r25, 0xFF	; 255
    fd9c:	90 93 e0 10 	sts	0x10E0, r25	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:255
  }

  return value;
}
    fda0:	c9 01       	movw	r24, r18
    fda2:	08 95       	ret

0000fda4 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    fda4:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
    fda8:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:239
}
    fdac:	89 1b       	sub	r24, r25
    fdae:	99 0b       	sbc	r25, r25
    fdb0:	08 95       	ret

0000fdb2 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:314
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
    fdb2:	08 95       	ret

0000fdb4 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:299
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
    fdb4:	08 95       	ret

0000fdb6 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    fdb6:	fc 01       	movw	r30, r24
    fdb8:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    fdba:	44 8d       	ldd	r20, Z+28	; 0x1c
    fdbc:	25 2f       	mov	r18, r21
    fdbe:	30 e0       	ldi	r19, 0x00	; 0
    fdc0:	84 2f       	mov	r24, r20
    fdc2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    fdc4:	82 1b       	sub	r24, r18
    fdc6:	93 0b       	sbc	r25, r19
    fdc8:	54 17       	cp	r21, r20
    fdca:	10 f0       	brcs	.+4      	; 0xfdd0 <HardwareSerial::availableForWrite()+0x1a>
    fdcc:	cf 96       	adiw	r24, 0x3f	; 63
    fdce:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    fdd0:	01 97       	sbiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:188
}
    fdd2:	08 95       	ret

0000fdd4 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:164
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
    fdd4:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    fdd6:	91 8d       	ldd	r25, Z+25	; 0x19
    fdd8:	82 8d       	ldd	r24, Z+26	; 0x1a
    fdda:	98 17       	cp	r25, r24
    fddc:	61 f0       	breq	.+24     	; 0xfdf6 <HardwareSerial::read()+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    fdde:	a2 8d       	ldd	r26, Z+26	; 0x1a
    fde0:	ae 0f       	add	r26, r30
    fde2:	bf 2f       	mov	r27, r31
    fde4:	b1 1d       	adc	r27, r1
    fde6:	5d 96       	adiw	r26, 0x1d	; 29
    fde8:	8c 91       	ld	r24, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    fdea:	92 8d       	ldd	r25, Z+26	; 0x1a
    fdec:	9f 5f       	subi	r25, 0xFF	; 255
    fdee:	9f 73       	andi	r25, 0x3F	; 63
    fdf0:	92 8f       	std	Z+26, r25	; 0x1a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    fdf2:	90 e0       	ldi	r25, 0x00	; 0
    fdf4:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    fdf6:	8f ef       	ldi	r24, 0xFF	; 255
    fdf8:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    fdfa:	08 95       	ret

0000fdfc <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:155
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
    fdfc:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    fdfe:	91 8d       	ldd	r25, Z+25	; 0x19
    fe00:	82 8d       	ldd	r24, Z+26	; 0x1a
    fe02:	98 17       	cp	r25, r24
    fe04:	31 f0       	breq	.+12     	; 0xfe12 <__DATA_REGION_LENGTH__+0x12>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    fe06:	82 8d       	ldd	r24, Z+26	; 0x1a
    fe08:	e8 0f       	add	r30, r24
    fe0a:	f1 1d       	adc	r31, r1
    fe0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    fe0e:	90 e0       	ldi	r25, 0x00	; 0
    fe10:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    fe12:	8f ef       	ldi	r24, 0xFF	; 255
    fe14:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    fe16:	08 95       	ret

0000fe18 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    fe18:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    fe1a:	91 8d       	ldd	r25, Z+25	; 0x19
    fe1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    fe1e:	89 2f       	mov	r24, r25
    fe20:	90 e0       	ldi	r25, 0x00	; 0
    fe22:	80 5c       	subi	r24, 0xC0	; 192
    fe24:	9f 4f       	sbci	r25, 0xFF	; 255
    fe26:	82 1b       	sub	r24, r18
    fe28:	91 09       	sbc	r25, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:152
}
    fe2a:	8f 73       	andi	r24, 0x3F	; 63
    fe2c:	99 27       	eor	r25, r25
    fe2e:	08 95       	ret

0000fe30 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:82
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    fe30:	fc 01       	movw	r30, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    fe32:	a4 8d       	ldd	r26, Z+28	; 0x1c
    fe34:	a8 0f       	add	r26, r24
    fe36:	b9 2f       	mov	r27, r25
    fe38:	b1 1d       	adc	r27, r1
    fe3a:	a3 5a       	subi	r26, 0xA3	; 163
    fe3c:	bf 4f       	sbci	r27, 0xFF	; 255
    fe3e:	2c 91       	ld	r18, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    fe40:	84 8d       	ldd	r24, Z+28	; 0x1c
    fe42:	90 e0       	ldi	r25, 0x00	; 0
    fe44:	01 96       	adiw	r24, 0x01	; 1
    fe46:	8f 73       	andi	r24, 0x3F	; 63
    fe48:	99 27       	eor	r25, r25
    fe4a:	84 8f       	std	Z+28, r24	; 0x1c
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    fe4c:	a6 89       	ldd	r26, Z+22	; 0x16
    fe4e:	b7 89       	ldd	r27, Z+23	; 0x17
    fe50:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    fe52:	a0 89       	ldd	r26, Z+16	; 0x10
    fe54:	b1 89       	ldd	r27, Z+17	; 0x11
    fe56:	8c 91       	ld	r24, X
    fe58:	80 64       	ori	r24, 0x40	; 64
    fe5a:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    fe5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    fe5e:	84 8d       	ldd	r24, Z+28	; 0x1c
    fe60:	98 13       	cpse	r25, r24
    fe62:	06 c0       	rjmp	.+12     	; 0xfe70 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    fe64:	02 88       	ldd	r0, Z+18	; 0x12
    fe66:	f3 89       	ldd	r31, Z+19	; 0x13
    fe68:	e0 2d       	mov	r30, r0
    fe6a:	80 81       	ld	r24, Z
    fe6c:	8f 7d       	andi	r24, 0xDF	; 223
    fe6e:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    fe70:	08 95       	ret

0000fe72 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:211
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    fe72:	ef 92       	push	r14
    fe74:	ff 92       	push	r15
    fe76:	0f 93       	push	r16
    fe78:	1f 93       	push	r17
    fe7a:	cf 93       	push	r28
    fe7c:	df 93       	push	r29
    fe7e:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    fe80:	81 e0       	ldi	r24, 0x01	; 1
    fe82:	88 8f       	std	Y+24, r24	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    fe84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    fe86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    fe88:	98 13       	cpse	r25, r24
    fe8a:	16 c0       	rjmp	.+44     	; 0xfeb8 <HardwareSerial::write(unsigned char)+0x46>
    fe8c:	e8 89       	ldd	r30, Y+16	; 0x10
    fe8e:	f9 89       	ldd	r31, Y+17	; 0x11
    fe90:	80 81       	ld	r24, Z
    fe92:	85 ff       	sbrs	r24, 5
    fe94:	11 c0       	rjmp	.+34     	; 0xfeb8 <HardwareSerial::write(unsigned char)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    fe96:	ee 89       	ldd	r30, Y+22	; 0x16
    fe98:	ff 89       	ldd	r31, Y+23	; 0x17
    fe9a:	60 83       	st	Z, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    fe9c:	e8 89       	ldd	r30, Y+16	; 0x10
    fe9e:	f9 89       	ldd	r31, Y+17	; 0x11
    fea0:	80 81       	ld	r24, Z
    fea2:	80 64       	ori	r24, 0x40	; 64
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    fea4:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    fea6:	81 e0       	ldi	r24, 0x01	; 1
    fea8:	90 e0       	ldi	r25, 0x00	; 0
    feaa:	df 91       	pop	r29
    feac:	cf 91       	pop	r28
    feae:	1f 91       	pop	r17
    feb0:	0f 91       	pop	r16
    feb2:	ff 90       	pop	r15
    feb4:	ef 90       	pop	r14
    feb6:	08 95       	ret
    feb8:	f6 2e       	mov	r15, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    feba:	0b 8d       	ldd	r16, Y+27	; 0x1b
    febc:	10 e0       	ldi	r17, 0x00	; 0
    febe:	0f 5f       	subi	r16, 0xFF	; 255
    fec0:	1f 4f       	sbci	r17, 0xFF	; 255
    fec2:	0f 73       	andi	r16, 0x3F	; 63
    fec4:	11 27       	eor	r17, r17
    fec6:	e0 2e       	mov	r14, r16
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    fec8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    feca:	8e 11       	cpse	r24, r14
    fecc:	0c c0       	rjmp	.+24     	; 0xfee6 <HardwareSerial::write(unsigned char)+0x74>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    fece:	0f b6       	in	r0, 0x3f	; 63
    fed0:	07 fc       	sbrc	r0, 7
    fed2:	fa cf       	rjmp	.-12     	; 0xfec8 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    fed4:	e8 89       	ldd	r30, Y+16	; 0x10
    fed6:	f9 89       	ldd	r31, Y+17	; 0x11
    fed8:	80 81       	ld	r24, Z
    feda:	85 ff       	sbrs	r24, 5
    fedc:	f5 cf       	rjmp	.-22     	; 0xfec8 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    fede:	ce 01       	movw	r24, r28
    fee0:	0e 94 18 7f 	call	0xfe30	; 0xfe30 <HardwareSerial::_tx_udr_empty_irq()>
    fee4:	f1 cf       	rjmp	.-30     	; 0xfec8 <HardwareSerial::write(unsigned char)+0x56>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    fee6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    fee8:	ec 0f       	add	r30, r28
    feea:	fd 2f       	mov	r31, r29
    feec:	f1 1d       	adc	r31, r1
    feee:	e3 5a       	subi	r30, 0xA3	; 163
    fef0:	ff 4f       	sbci	r31, 0xFF	; 255
    fef2:	f0 82       	st	Z, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    fef4:	0b 8f       	std	Y+27, r16	; 0x1b
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    fef6:	ea 89       	ldd	r30, Y+18	; 0x12
    fef8:	fb 89       	ldd	r31, Y+19	; 0x13
    fefa:	80 81       	ld	r24, Z
    fefc:	80 62       	ori	r24, 0x20	; 32
    fefe:	d2 cf       	rjmp	.-92     	; 0xfea4 <HardwareSerial::write(unsigned char)+0x32>

0000ff00 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    ff00:	cf 93       	push	r28
    ff02:	df 93       	push	r29
    ff04:	ec 01       	movw	r28, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    ff06:	88 8d       	ldd	r24, Y+24	; 0x18
    ff08:	88 23       	and	r24, r24
    ff0a:	b9 f0       	breq	.+46     	; 0xff3a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    ff0c:	aa 89       	ldd	r26, Y+18	; 0x12
    ff0e:	bb 89       	ldd	r27, Y+19	; 0x13
    ff10:	e8 89       	ldd	r30, Y+16	; 0x10
    ff12:	f9 89       	ldd	r31, Y+17	; 0x11
    ff14:	8c 91       	ld	r24, X
    ff16:	85 fd       	sbrc	r24, 5
    ff18:	03 c0       	rjmp	.+6      	; 0xff20 <HardwareSerial::flush()+0x20>
    ff1a:	80 81       	ld	r24, Z
    ff1c:	86 fd       	sbrc	r24, 6
    ff1e:	0d c0       	rjmp	.+26     	; 0xff3a <HardwareSerial::flush()+0x3a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    ff20:	0f b6       	in	r0, 0x3f	; 63
    ff22:	07 fc       	sbrc	r0, 7
    ff24:	f7 cf       	rjmp	.-18     	; 0xff14 <HardwareSerial::flush()+0x14>
    ff26:	8c 91       	ld	r24, X
    ff28:	85 ff       	sbrs	r24, 5
    ff2a:	f2 cf       	rjmp	.-28     	; 0xff10 <HardwareSerial::flush()+0x10>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    ff2c:	80 81       	ld	r24, Z
    ff2e:	85 ff       	sbrs	r24, 5
    ff30:	ed cf       	rjmp	.-38     	; 0xff0c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    ff32:	ce 01       	movw	r24, r28
    ff34:	0e 94 18 7f 	call	0xfe30	; 0xfe30 <HardwareSerial::_tx_udr_empty_irq()>
    ff38:	e9 cf       	rjmp	.-46     	; 0xff0c <HardwareSerial::flush()+0xc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    ff3a:	df 91       	pop	r29
    ff3c:	cf 91       	pop	r28
    ff3e:	08 95       	ret

0000ff40 <Serial0_available()>:
_Z17Serial0_availablev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    ff40:	89 e6       	ldi	r24, 0x69	; 105
    ff42:	9b e0       	ldi	r25, 0x0B	; 11
    ff44:	0e 94 0c 7f 	call	0xfe18	; 0xfe18 <HardwareSerial::available()>
    ff48:	21 e0       	ldi	r18, 0x01	; 1
    ff4a:	89 2b       	or	r24, r25
    ff4c:	09 f4       	brne	.+2      	; 0xff50 <Serial0_available()+0x10>
    ff4e:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    ff50:	82 2f       	mov	r24, r18
    ff52:	08 95       	ret

0000ff54 <serialEventRun()>:
_Z14serialEventRunv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    ff54:	80 e0       	ldi	r24, 0x00	; 0
    ff56:	90 e0       	ldi	r25, 0x00	; 0
    ff58:	89 2b       	or	r24, r25
    ff5a:	29 f0       	breq	.+10     	; 0xff66 <serialEventRun()+0x12>
    ff5c:	0e 94 a0 7f 	call	0xff40	; 0xff40 <Serial0_available()>
    ff60:	81 11       	cpse	r24, r1
    ff62:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    ff66:	80 e0       	ldi	r24, 0x00	; 0
    ff68:	90 e0       	ldi	r25, 0x00	; 0
    ff6a:	89 2b       	or	r24, r25
    ff6c:	49 f0       	breq	.+18     	; 0xff80 <serialEventRun()+0x2c>
    ff6e:	80 e0       	ldi	r24, 0x00	; 0
    ff70:	90 e0       	ldi	r25, 0x00	; 0
    ff72:	89 2b       	or	r24, r25
    ff74:	29 f0       	breq	.+10     	; 0xff80 <serialEventRun()+0x2c>
    ff76:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    ff7a:	81 11       	cpse	r24, r1
    ff7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    ff80:	08 95       	ret

0000ff82 <micros>:
micros():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:91
  return m;
}

unsigned long micros() {
  unsigned long m;
  uint8_t oldSREG = SREG;
    ff82:	3f b7       	in	r19, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:96
  // t will be the number where the timer0 counter stopped
  uint8_t t;

  // Stop all interrupts
  cli();
    ff84:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:97
  m = timer0_overflow_count;
    ff86:	80 91 d4 10 	lds	r24, 0x10D4	; 0x8010d4 <timer0_overflow_count>
    ff8a:	90 91 d5 10 	lds	r25, 0x10D5	; 0x8010d5 <timer0_overflow_count+0x1>
    ff8e:	a0 91 d6 10 	lds	r26, 0x10D6	; 0x8010d6 <timer0_overflow_count+0x2>
    ff92:	b0 91 d7 10 	lds	r27, 0x10D7	; 0x8010d7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:101

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    ff96:	26 b5       	in	r18, 0x26	; 38
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:110
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    ff98:	a8 9b       	sbis	0x15, 0	; 21
    ff9a:	05 c0       	rjmp	.+10     	; 0xffa6 <micros+0x24>
    ff9c:	2f 3f       	cpi	r18, 0xFF	; 255
    ff9e:	19 f0       	breq	.+6      	; 0xffa6 <micros+0x24>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:111
    m++;
    ffa0:	01 96       	adiw	r24, 0x01	; 1
    ffa2:	a1 1d       	adc	r26, r1
    ffa4:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:117
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    m++;
#endif
  // Restore SREG
  SREG = oldSREG;
    ffa6:	3f bf       	out	0x3f, r19	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:169
#else
  // 32 MHz, 24 MHz, 16 MHz, 8 MHz, 4 MHz, 1 MHz
  // Shift by 8 to the left (multiply by 256) so t (which is 1 byte in size) can fit in 
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    ffa8:	ba 2f       	mov	r27, r26
    ffaa:	a9 2f       	mov	r26, r25
    ffac:	98 2f       	mov	r25, r24
    ffae:	88 27       	eor	r24, r24
    ffb0:	bc 01       	movw	r22, r24
    ffb2:	cd 01       	movw	r24, r26
    ffb4:	62 0f       	add	r22, r18
    ffb6:	71 1d       	adc	r23, r1
    ffb8:	81 1d       	adc	r24, r1
    ffba:	91 1d       	adc	r25, r1
    ffbc:	42 e0       	ldi	r20, 0x02	; 2
    ffbe:	66 0f       	add	r22, r22
    ffc0:	77 1f       	adc	r23, r23
    ffc2:	88 1f       	adc	r24, r24
    ffc4:	99 1f       	adc	r25, r25
    ffc6:	4a 95       	dec	r20
    ffc8:	d1 f7       	brne	.-12     	; 0xffbe <micros+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:171
#endif
}
    ffca:	08 95       	ret

0000ffcc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    ffcc:	af 92       	push	r10
    ffce:	bf 92       	push	r11
    ffd0:	cf 92       	push	r12
    ffd2:	df 92       	push	r13
    ffd4:	ef 92       	push	r14
    ffd6:	ff 92       	push	r15
    ffd8:	0f 93       	push	r16
    ffda:	1f 93       	push	r17
    ffdc:	cf 93       	push	r28
    ffde:	df 93       	push	r29
    ffe0:	6c 01       	movw	r12, r24
    ffe2:	7b 01       	movw	r14, r22
    ffe4:	8b 01       	movw	r16, r22
    ffe6:	04 0f       	add	r16, r20
    ffe8:	15 1f       	adc	r17, r21
    ffea:	eb 01       	movw	r28, r22
    ffec:	5e 01       	movw	r10, r28
    ffee:	ae 18       	sub	r10, r14
    fff0:	bf 08       	sbc	r11, r15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
    fff2:	c0 17       	cp	r28, r16
    fff4:	d1 07       	cpc	r29, r17
    fff6:	59 f0       	breq	.+22     	; 0x1000e <__EEPROM_REGION_LENGTH__+0xe>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
    fff8:	69 91       	ld	r22, Y+
    fffa:	d6 01       	movw	r26, r12
    fffc:	ed 91       	ld	r30, X+
    fffe:	fc 91       	ld	r31, X
   10000:	01 90       	ld	r0, Z+
   10002:	f0 81       	ld	r31, Z
   10004:	e0 2d       	mov	r30, r0
   10006:	c6 01       	movw	r24, r12
   10008:	19 95       	eicall
   1000a:	89 2b       	or	r24, r25
   1000c:	79 f7       	brne	.-34     	; 0xffec <Print::write(unsigned char const*, unsigned int)+0x20>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
   1000e:	c5 01       	movw	r24, r10
   10010:	df 91       	pop	r29
   10012:	cf 91       	pop	r28
   10014:	1f 91       	pop	r17
   10016:	0f 91       	pop	r16
   10018:	ff 90       	pop	r15
   1001a:	ef 90       	pop	r14
   1001c:	df 90       	pop	r13
   1001e:	cf 90       	pop	r12
   10020:	bf 90       	pop	r11
   10022:	af 90       	pop	r10
   10024:	08 95       	ret

00010026 <twi_stop>:
twi_stop():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
   10026:	85 ed       	ldi	r24, 0xD5	; 213
   10028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:376

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
   1002c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   10030:	84 fd       	sbrc	r24, 4
   10032:	fc cf       	rjmp	.-8      	; 0x1002c <twi_stop+0x6>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
   10034:	10 92 2b 11 	sts	0x112B, r1	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:382
}
   10038:	08 95       	ret

0001003a <twi_transmit>:
twi_transmit():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
   1003a:	20 91 94 10 	lds	r18, 0x1094	; 0x801094 <twi_txBufferLength>
   1003e:	26 0f       	add	r18, r22
   10040:	33 27       	eor	r19, r19
   10042:	33 1f       	adc	r19, r19
   10044:	21 32       	cpi	r18, 0x21	; 33
   10046:	31 05       	cpc	r19, r1
   10048:	ec f4       	brge	.+58     	; 0x10084 <twi_transmit+0x4a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:312
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
   1004a:	20 91 2b 11 	lds	r18, 0x112B	; 0x80112b <twi_state>
   1004e:	fc 01       	movw	r30, r24
   10050:	90 e0       	ldi	r25, 0x00	; 0
   10052:	80 e0       	ldi	r24, 0x00	; 0
   10054:	24 30       	cpi	r18, 0x04	; 4
   10056:	69 f0       	breq	.+26     	; 0x10072 <twi_transmit+0x38>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:313
    return 2;
   10058:	82 e0       	ldi	r24, 0x02	; 2
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
   1005a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:318
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
   1005c:	a0 91 94 10 	lds	r26, 0x1094	; 0x801094 <twi_txBufferLength>
   10060:	21 91       	ld	r18, Z+
   10062:	ac 01       	movw	r20, r24
   10064:	4c 58       	subi	r20, 0x8C	; 140
   10066:	5f 4e       	sbci	r21, 0xEF	; 239
   10068:	a4 0f       	add	r26, r20
   1006a:	b5 2f       	mov	r27, r21
   1006c:	b1 1d       	adc	r27, r1
   1006e:	2c 93       	st	X, r18
   10070:	01 96       	adiw	r24, 0x01	; 1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:317
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
   10072:	86 17       	cp	r24, r22
   10074:	98 f3       	brcs	.-26     	; 0x1005c <twi_transmit+0x22>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
   10076:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <twi_txBufferLength>
   1007a:	68 0f       	add	r22, r24
   1007c:	60 93 94 10 	sts	0x1094, r22	; 0x801094 <twi_txBufferLength>
   10080:	80 e0       	ldi	r24, 0x00	; 0
   10082:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
   10084:	81 e0       	ldi	r24, 0x01	; 1
   10086:	08 95       	ret

00010088 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:274
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
   10088:	08 95       	ret

0001008a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:264
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
   1008a:	e0 91 e0 10 	lds	r30, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   1008e:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   10092:	e8 17       	cp	r30, r24
   10094:	30 f4       	brcc	.+12     	; 0x100a2 <TwoWire::peek()+0x18>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:265
    value = rxBuffer[rxBufferIndex];
   10096:	f0 e0       	ldi	r31, 0x00	; 0
   10098:	eb 51       	subi	r30, 0x1B	; 27
   1009a:	ff 4e       	sbci	r31, 0xEF	; 239
   1009c:	80 81       	ld	r24, Z
   1009e:	90 e0       	ldi	r25, 0x00	; 0
   100a0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:262
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
   100a2:	8f ef       	ldi	r24, 0xFF	; 255
   100a4:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:269
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
   100a6:	08 95       	ret

000100a8 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:219

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   100a8:	cf 92       	push	r12
   100aa:	df 92       	push	r13
   100ac:	ef 92       	push	r14
   100ae:	ff 92       	push	r15
   100b0:	0f 93       	push	r16
   100b2:	1f 93       	push	r17
   100b4:	cf 93       	push	r28
   100b6:	df 93       	push	r29
   100b8:	7c 01       	movw	r14, r24
   100ba:	cb 01       	movw	r24, r22
   100bc:	8a 01       	movw	r16, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:220
  if(transmitting){
   100be:	20 91 e4 10 	lds	r18, 0x10E4	; 0x8010e4 <TwoWire::transmitting>
   100c2:	22 23       	and	r18, r18
   100c4:	89 f0       	breq	.+34     	; 0x100e8 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
   100c6:	eb 01       	movw	r28, r22
   100c8:	6b 01       	movw	r12, r22
   100ca:	c4 0e       	add	r12, r20
   100cc:	d5 1e       	adc	r13, r21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:222
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
   100ce:	cc 15       	cp	r28, r12
   100d0:	dd 05       	cpc	r29, r13
   100d2:	69 f0       	breq	.+26     	; 0x100ee <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:223
      write(data[i]);
   100d4:	69 91       	ld	r22, Y+
   100d6:	d7 01       	movw	r26, r14
   100d8:	ed 91       	ld	r30, X+
   100da:	fc 91       	ld	r31, X
   100dc:	01 90       	ld	r0, Z+
   100de:	f0 81       	ld	r31, Z
   100e0:	e0 2d       	mov	r30, r0
   100e2:	c7 01       	movw	r24, r14
   100e4:	19 95       	eicall
   100e6:	f3 cf       	rjmp	.-26     	; 0x100ce <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:228
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
   100e8:	64 2f       	mov	r22, r20
   100ea:	0e 94 1d 80 	call	0x1003a	; 0x1003a <twi_transmit>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:231
  }
  return quantity;
}
   100ee:	c8 01       	movw	r24, r16
   100f0:	df 91       	pop	r29
   100f2:	cf 91       	pop	r28
   100f4:	1f 91       	pop	r17
   100f6:	0f 91       	pop	r16
   100f8:	ff 90       	pop	r15
   100fa:	ef 90       	pop	r14
   100fc:	df 90       	pop	r13
   100fe:	cf 90       	pop	r12
   10100:	08 95       	ret

00010102 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:194

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
   10102:	cf 93       	push	r28
   10104:	df 93       	push	r29
   10106:	1f 92       	push	r1
   10108:	cd b7       	in	r28, 0x3d	; 61
   1010a:	de b7       	in	r29, 0x3e	; 62
   1010c:	69 83       	std	Y+1, r22	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:195
  if(transmitting){
   1010e:	20 91 e4 10 	lds	r18, 0x10E4	; 0x8010e4 <TwoWire::transmitting>
   10112:	22 23       	and	r18, r18
   10114:	f9 f0       	breq	.+62     	; 0x10154 <TwoWire::write(unsigned char)+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:198
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
   10116:	20 91 e1 10 	lds	r18, 0x10E1	; 0x8010e1 <TwoWire::txBufferLength>
   1011a:	20 32       	cpi	r18, 0x20	; 32
   1011c:	58 f0       	brcs	.+22     	; 0x10134 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   1011e:	21 e0       	ldi	r18, 0x01	; 1
   10120:	30 e0       	ldi	r19, 0x00	; 0
   10122:	fc 01       	movw	r30, r24
   10124:	33 83       	std	Z+3, r19	; 0x03
   10126:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:200
      setWriteError();
      return 0;
   10128:	90 e0       	ldi	r25, 0x00	; 0
   1012a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:213
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
   1012c:	0f 90       	pop	r0
   1012e:	df 91       	pop	r29
   10130:	cf 91       	pop	r28
   10132:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:203
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
   10134:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <TwoWire::txBufferIndex>
   10138:	e8 2f       	mov	r30, r24
   1013a:	f0 e0       	ldi	r31, 0x00	; 0
   1013c:	ec 5a       	subi	r30, 0xAC	; 172
   1013e:	ff 4e       	sbci	r31, 0xEF	; 239
   10140:	99 81       	ldd	r25, Y+1	; 0x01
   10142:	90 83       	st	Z, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:204
    ++txBufferIndex;
   10144:	8f 5f       	subi	r24, 0xFF	; 255
   10146:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:206
    // update amount in buffer
    txBufferLength = txBufferIndex;
   1014a:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:212
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
   1014e:	81 e0       	ldi	r24, 0x01	; 1
   10150:	90 e0       	ldi	r25, 0x00	; 0
   10152:	ec cf       	rjmp	.-40     	; 0x1012c <TwoWire::write(unsigned char)+0x2a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:210
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
   10154:	61 e0       	ldi	r22, 0x01	; 1
   10156:	ce 01       	movw	r24, r28
   10158:	01 96       	adiw	r24, 0x01	; 1
   1015a:	0e 94 1d 80 	call	0x1003a	; 0x1003a <twi_transmit>
   1015e:	f7 cf       	rjmp	.-18     	; 0x1014e <TwoWire::write(unsigned char)+0x4c>

00010160 <SPIClass::endTransaction()>:
_ZN8SPIClass14endTransactionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:287
      #endif
      {
        SREG = interruptSave;
      }
    }
  }
   10160:	08 95       	ret

00010162 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
   10162:	8e bd       	out	0x2e, r24	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
   10164:	00 00       	nop
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
   10166:	0d b4       	in	r0, 0x2d	; 45
   10168:	07 fe       	sbrs	r0, 7
   1016a:	fd cf       	rjmp	.-6      	; 0x10166 <SPIClass::transfer(unsigned char)+0x4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:221
    return SPDR;
   1016c:	8e b5       	in	r24, 0x2e	; 46
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:222
  }
   1016e:	08 95       	ret

00010170 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
   10170:	8c bd       	out	0x2c, r24	; 44
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
   10172:	9d bd       	out	0x2d, r25	; 45
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/SPI/src/SPI.h:208
  }
   10174:	08 95       	ret

00010176 <EthernetUDP::flush()>:
_ZN11EthernetUDP5flushEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:212
  ::peek(_sock, &b);
  return b;
}

void EthernetUDP::flush()
{
   10176:	cf 93       	push	r28
   10178:	df 93       	push	r29
   1017a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:217
  // could this fail (loop endlessly) if _remaining > 0 and recv in read fails?
  // should only occur if recv fails after telling us the data is there, lets
  // hope the w5500 always behaves :)

  while (_remaining)
   1017c:	89 8d       	ldd	r24, Y+25	; 0x19
   1017e:	9a 8d       	ldd	r25, Y+26	; 0x1a
   10180:	89 2b       	or	r24, r25
   10182:	41 f0       	breq	.+16     	; 0x10194 <EthernetUDP::flush()+0x1e>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:219
  {
    read();
   10184:	e8 81       	ld	r30, Y
   10186:	f9 81       	ldd	r31, Y+1	; 0x01
   10188:	02 84       	ldd	r0, Z+10	; 0x0a
   1018a:	f3 85       	ldd	r31, Z+11	; 0x0b
   1018c:	e0 2d       	mov	r30, r0
   1018e:	ce 01       	movw	r24, r28
   10190:	19 95       	eicall
   10192:	f4 cf       	rjmp	.-24     	; 0x1017c <EthernetUDP::flush()+0x6>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:221
  }
}
   10194:	df 91       	pop	r29
   10196:	cf 91       	pop	r28
   10198:	08 95       	ret

0001019a <EthernetUDP::write(unsigned char)>:
_ZN11EthernetUDP5writeEh():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:111
{
  return sendUDP(_sock);
}

size_t EthernetUDP::write(uint8_t byte)
{
   1019a:	cf 93       	push	r28
   1019c:	df 93       	push	r29
   1019e:	1f 92       	push	r1
   101a0:	cd b7       	in	r28, 0x3d	; 61
   101a2:	de b7       	in	r29, 0x3e	; 62
   101a4:	69 83       	std	Y+1, r22	; 0x01
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:112
  return write(&byte, 1);
   101a6:	dc 01       	movw	r26, r24
   101a8:	ed 91       	ld	r30, X+
   101aa:	fc 91       	ld	r31, X
   101ac:	02 80       	ldd	r0, Z+2	; 0x02
   101ae:	f3 81       	ldd	r31, Z+3	; 0x03
   101b0:	e0 2d       	mov	r30, r0
   101b2:	41 e0       	ldi	r20, 0x01	; 1
   101b4:	50 e0       	ldi	r21, 0x00	; 0
   101b6:	be 01       	movw	r22, r28
   101b8:	6f 5f       	subi	r22, 0xFF	; 255
   101ba:	7f 4f       	sbci	r23, 0xFF	; 255
   101bc:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:113
}
   101be:	0f 90       	pop	r0
   101c0:	df 91       	pop	r29
   101c2:	cf 91       	pop	r28
   101c4:	08 95       	ret

000101c6 <EthernetUDP::available()>:
_ZN11EthernetUDP9availableEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:69

/* return number of bytes available in the current packet,
   will return zero if parsePacket hasn't been called yet */
int EthernetUDP::available() {
  return _remaining;
}
   101c6:	fc 01       	movw	r30, r24
   101c8:	81 8d       	ldd	r24, Z+25	; 0x19
   101ca:	92 8d       	ldd	r25, Z+26	; 0x1a
   101cc:	08 95       	ret

000101ce <EthernetUDP::remotePort()>:
_ZN11EthernetUDP10remotePortEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:102
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
  // Return the port of the host who sent the current incoming packet
  virtual uint16_t remotePort() { return _remotePort; };
   101ce:	fc 01       	movw	r30, r24
   101d0:	85 89       	ldd	r24, Z+21	; 0x15
   101d2:	96 89       	ldd	r25, Z+22	; 0x16
   101d4:	08 95       	ret

000101d6 <EthernetUDP::remoteIP()>:
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   101d6:	22 ee       	ldi	r18, 0xE2	; 226
   101d8:	32 e0       	ldi	r19, 0x02	; 2
   101da:	fc 01       	movw	r30, r24
   101dc:	31 83       	std	Z+1, r19	; 0x01
   101de:	20 83       	st	Z, r18
   101e0:	fb 01       	movw	r30, r22
   101e2:	41 89       	ldd	r20, Z+17	; 0x11
   101e4:	52 89       	ldd	r21, Z+18	; 0x12
   101e6:	63 89       	ldd	r22, Z+19	; 0x13
   101e8:	74 89       	ldd	r23, Z+20	; 0x14
   101ea:	fc 01       	movw	r30, r24
   101ec:	42 83       	std	Z+2, r20	; 0x02
   101ee:	53 83       	std	Z+3, r21	; 0x03
   101f0:	64 83       	std	Z+4, r22	; 0x04
   101f2:	75 83       	std	Z+5, r23	; 0x05
_ZN11EthernetUDP8remoteIPEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.h:100
  // Return the next byte from the current packet without moving on to the next byte
  virtual int peek();
  virtual void flush();	// Finish reading the current packet

  // Return the IP address of the host who sent the current incoming packet
  virtual IPAddress remoteIP() { return _remoteIP; };
   101f4:	08 95       	ret

000101f6 <UDP::beginMulticast(IPAddress, unsigned int)>:
_ZN3UDP14beginMulticastE9IPAddressj():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Udp.h:45

class UDP : public Stream {

public:
  virtual uint8_t begin(uint16_t) =0;  // initialize, start listening on specified port. Returns 1 if successful, 0 if there are no sockets available to use
  virtual uint8_t beginMulticast(IPAddress, uint16_t) { return 0; }  // initialize, start listening on specified multicast IP address and port. Returns 1 if successful, 0 on failure
   101f6:	80 e0       	ldi	r24, 0x00	; 0
   101f8:	08 95       	ret

000101fa <EthernetClient::operator==(EthernetClient const&)>:
_ZN14EthernetClienteqERKS_():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:167
EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
}

bool EthernetClient::operator==(const EthernetClient& rhs) {
  return _sock == rhs._sock && _sock != MAX_SOCK_NUM && rhs._sock != MAX_SOCK_NUM;
   101fa:	fc 01       	movw	r30, r24
   101fc:	94 85       	ldd	r25, Z+12	; 0x0c
   101fe:	fb 01       	movw	r30, r22
   10200:	84 85       	ldd	r24, Z+12	; 0x0c
   10202:	98 13       	cpse	r25, r24
   10204:	03 c0       	rjmp	.+6      	; 0x1020c <EthernetClient::operator==(EthernetClient const&)+0x12>
   10206:	81 e0       	ldi	r24, 0x01	; 1
   10208:	98 30       	cpi	r25, 0x08	; 8
   1020a:	09 f4       	brne	.+2      	; 0x1020e <EthernetClient::operator==(EthernetClient const&)+0x14>
   1020c:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:168
}
   1020e:	08 95       	ret

00010210 <EthernetClient::operator bool()>:
_ZN14EthernetClientcvbEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:163

// the next function allows us to use the client returned by
// EthernetServer::available() as the condition in an if-statement.

EthernetClient::operator bool() {
  return _sock != MAX_SOCK_NUM;
   10210:	21 e0       	ldi	r18, 0x01	; 1
   10212:	fc 01       	movw	r30, r24
   10214:	84 85       	ldd	r24, Z+12	; 0x0c
   10216:	88 30       	cpi	r24, 0x08	; 8
   10218:	09 f4       	brne	.+2      	; 0x1021c <EthernetClient::operator bool()+0xc>
   1021a:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:164
}
   1021c:	82 2f       	mov	r24, r18
   1021e:	08 95       	ret

00010220 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
   10220:	2f 92       	push	r2
   10222:	3f 92       	push	r3
   10224:	4f 92       	push	r4
   10226:	5f 92       	push	r5
   10228:	6f 92       	push	r6
   1022a:	7f 92       	push	r7
   1022c:	8f 92       	push	r8
   1022e:	9f 92       	push	r9
   10230:	af 92       	push	r10
   10232:	bf 92       	push	r11
   10234:	cf 92       	push	r12
   10236:	df 92       	push	r13
   10238:	ef 92       	push	r14
   1023a:	ff 92       	push	r15
   1023c:	0f 93       	push	r16
   1023e:	1f 93       	push	r17
   10240:	cf 93       	push	r28
   10242:	df 93       	push	r29
   10244:	cd b7       	in	r28, 0x3d	; 61
   10246:	de b7       	in	r29, 0x3e	; 62
   10248:	2d 97       	sbiw	r28, 0x0d	; 13
   1024a:	0f b6       	in	r0, 0x3f	; 63
   1024c:	f8 94       	cli
   1024e:	de bf       	out	0x3e, r29	; 62
   10250:	0f be       	out	0x3f, r0	; 63
   10252:	cd bf       	out	0x3d, r28	; 61
   10254:	fc 01       	movw	r30, r24
   10256:	a0 81       	ld	r26, Z
   10258:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
   1025a:	cb 01       	movw	r24, r22
   1025c:	8e 50       	subi	r24, 0x0E	; 14
   1025e:	97 42       	sbci	r25, 0x27	; 39
   10260:	02 97       	sbiw	r24, 0x02	; 2
   10262:	20 f5       	brcc	.+72     	; 0x102ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
   10264:	fd 01       	movw	r30, r26
   10266:	01 90       	ld	r0, Z+
   10268:	00 20       	and	r0, r0
   1026a:	e9 f7       	brne	.-6      	; 0x10266 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x46>
   1026c:	31 97       	sbiw	r30, 0x01	; 1
   1026e:	ea 1b       	sub	r30, r26
   10270:	fb 0b       	sbc	r31, r27
   10272:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <my_lcd+0xc>
   10276:	26 e0       	ldi	r18, 0x06	; 6
   10278:	82 9f       	mul	r24, r18
   1027a:	c0 01       	movw	r24, r0
   1027c:	11 24       	eor	r1, r1
   1027e:	8e 9f       	mul	r24, r30
   10280:	90 01       	movw	r18, r0
   10282:	8f 9f       	mul	r24, r31
   10284:	30 0d       	add	r19, r0
   10286:	9e 9f       	mul	r25, r30
   10288:	30 0d       	add	r19, r0
   1028a:	11 24       	eor	r1, r1
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
   1028c:	80 91 c8 0d 	lds	r24, 0x0DC8	; 0x800dc8 <my_lcd+0x12>
   10290:	90 91 c9 0d 	lds	r25, 0x0DC9	; 0x800dc9 <my_lcd+0x13>
   10294:	82 1b       	sub	r24, r18
   10296:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
   10298:	6e 30       	cpi	r22, 0x0E	; 14
   1029a:	77 42       	sbci	r23, 0x27	; 39
   1029c:	89 f5       	brne	.+98     	; 0x10300 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
   1029e:	bc 01       	movw	r22, r24
   102a0:	97 ff       	sbrs	r25, 7
   102a2:	02 c0       	rjmp	.+4      	; 0x102a8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x88>
   102a4:	6f 5f       	subi	r22, 0xFF	; 255
   102a6:	7f 4f       	sbci	r23, 0xFF	; 255
   102a8:	75 95       	asr	r23
   102aa:	67 95       	ror	r22
Set_Text_Cousur():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
   102ac:	70 93 b9 0d 	sts	0x0DB9, r23	; 0x800db9 <my_lcd+0x3>
   102b0:	60 93 b8 0d 	sts	0x0DB8, r22	; 0x800db8 <my_lcd+0x2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
   102b4:	50 93 bb 0d 	sts	0x0DBB, r21	; 0x800dbb <my_lcd+0x5>
   102b8:	40 93 ba 0d 	sts	0x0DBA, r20	; 0x800dba <my_lcd+0x4>
   102bc:	be 83       	std	Y+6, r27	; 0x06
   102be:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
   102c0:	ed 81       	ldd	r30, Y+5	; 0x05
   102c2:	fe 81       	ldd	r31, Y+6	; 0x06
   102c4:	91 91       	ld	r25, Z+
   102c6:	fe 83       	std	Y+6, r31	; 0x06
   102c8:	ed 83       	std	Y+5, r30	; 0x05
   102ca:	89 2f       	mov	r24, r25
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
   102cc:	99 23       	and	r25, r25
   102ce:	09 f4       	brne	.+2      	; 0x102d2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xb2>
   102d0:	dd c0       	rjmp	.+442    	; 0x1048c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x26c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
   102d2:	9a 30       	cpi	r25, 0x0A	; 10
   102d4:	c9 f4       	brne	.+50     	; 0x10308 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xe8>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
   102d6:	80 91 c2 0d 	lds	r24, 0x0DC2	; 0x800dc2 <my_lcd+0xc>
   102da:	f8 e0       	ldi	r31, 0x08	; 8
   102dc:	8f 9f       	mul	r24, r31
   102de:	c0 01       	movw	r24, r0
   102e0:	11 24       	eor	r1, r1
   102e2:	20 91 ba 0d 	lds	r18, 0x0DBA	; 0x800dba <my_lcd+0x4>
   102e6:	30 91 bb 0d 	lds	r19, 0x0DBB	; 0x800dbb <my_lcd+0x5>
   102ea:	82 0f       	add	r24, r18
   102ec:	93 1f       	adc	r25, r19
   102ee:	90 93 bb 0d 	sts	0x0DBB, r25	; 0x800dbb <my_lcd+0x5>
   102f2:	80 93 ba 0d 	sts	0x0DBA, r24	; 0x800dba <my_lcd+0x4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
   102f6:	10 92 b9 0d 	sts	0x0DB9, r1	; 0x800db9 <my_lcd+0x3>
   102fa:	10 92 b8 0d 	sts	0x0DB8, r1	; 0x800db8 <my_lcd+0x2>
   102fe:	e0 cf       	rjmp	.-64     	; 0x102c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Print():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
   10300:	bc 01       	movw	r22, r24
   10302:	61 50       	subi	r22, 0x01	; 1
   10304:	71 09       	sbc	r23, r1
   10306:	d2 cf       	rjmp	.-92     	; 0x102ac <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x8c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
   10308:	9d 30       	cpi	r25, 0x0D	; 13
   1030a:	d1 f2       	breq	.-76     	; 0x102c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1030c:	20 91 b8 0d 	lds	r18, 0x0DB8	; 0x800db8 <my_lcd+0x2>
   10310:	30 91 b9 0d 	lds	r19, 0x0DB9	; 0x800db9 <my_lcd+0x3>
   10314:	39 87       	std	Y+9, r19	; 0x09
   10316:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   10318:	20 91 c8 0d 	lds	r18, 0x0DC8	; 0x800dc8 <my_lcd+0x12>
   1031c:	30 91 c9 0d 	lds	r19, 0x0DC9	; 0x800dc9 <my_lcd+0x13>
   10320:	48 85       	ldd	r20, Y+8	; 0x08
   10322:	59 85       	ldd	r21, Y+9	; 0x09
   10324:	42 17       	cp	r20, r18
   10326:	53 07       	cpc	r21, r19
   10328:	0c f0       	brlt	.+2      	; 0x1032c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x10c>
   1032a:	88 c0       	rjmp	.+272    	; 0x1043c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   1032c:	60 90 ba 0d 	lds	r6, 0x0DBA	; 0x800dba <my_lcd+0x4>
   10330:	70 90 bb 0d 	lds	r7, 0x0DBB	; 0x800dbb <my_lcd+0x5>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   10334:	20 91 ca 0d 	lds	r18, 0x0DCA	; 0x800dca <my_lcd+0x14>
   10338:	30 91 cb 0d 	lds	r19, 0x0DCB	; 0x800dcb <my_lcd+0x15>
   1033c:	62 16       	cp	r6, r18
   1033e:	73 06       	cpc	r7, r19
   10340:	0c f0       	brlt	.+2      	; 0x10344 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x124>
   10342:	7c c0       	rjmp	.+248    	; 0x1043c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   10344:	50 91 c2 0d 	lds	r21, 0x0DC2	; 0x800dc2 <my_lcd+0xc>
   10348:	5a 83       	std	Y+2, r21	; 0x02
   1034a:	c5 2e       	mov	r12, r21
   1034c:	d1 2c       	mov	r13, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
   1034e:	28 85       	ldd	r18, Y+8	; 0x08
   10350:	39 85       	ldd	r19, Y+9	; 0x09
   10352:	e6 e0       	ldi	r30, 0x06	; 6
   10354:	5e 9f       	mul	r21, r30
   10356:	20 0d       	add	r18, r0
   10358:	31 1d       	adc	r19, r1
   1035a:	11 24       	eor	r1, r1
   1035c:	12 16       	cp	r1, r18
   1035e:	13 06       	cpc	r1, r19
   10360:	0c f0       	brlt	.+2      	; 0x10364 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x144>
   10362:	6c c0       	rjmp	.+216    	; 0x1043c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   10364:	96 01       	movw	r18, r12
   10366:	93 e0       	ldi	r25, 0x03	; 3
   10368:	22 0f       	add	r18, r18
   1036a:	33 1f       	adc	r19, r19
   1036c:	9a 95       	dec	r25
   1036e:	e1 f7       	brne	.-8      	; 0x10368 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x148>
   10370:	26 0d       	add	r18, r6
   10372:	37 1d       	adc	r19, r7
   10374:	12 16       	cp	r1, r18
   10376:	13 06       	cpc	r1, r19
   10378:	0c f0       	brlt	.+2      	; 0x1037c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x15c>
   1037a:	60 c0       	rjmp	.+192    	; 0x1043c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
   1037c:	80 3b       	cpi	r24, 0xB0	; 176
   1037e:	08 f0       	brcs	.+2      	; 0x10382 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x162>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
   10380:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
   10382:	f0 91 c3 0d 	lds	r31, 0x0DC3	; 0x800dc3 <my_lcd+0xd>
   10386:	ff 83       	std	Y+7, r31	; 0x07
   10388:	20 90 be 0d 	lds	r2, 0x0DBE	; 0x800dbe <my_lcd+0x8>
   1038c:	30 90 bf 0d 	lds	r3, 0x0DBF	; 0x800dbf <my_lcd+0x9>
   10390:	20 91 bc 0d 	lds	r18, 0x0DBC	; 0x800dbc <my_lcd+0x6>
   10394:	30 91 bd 0d 	lds	r19, 0x0DBD	; 0x800dbd <my_lcd+0x7>
   10398:	3c 83       	std	Y+4, r19	; 0x04
   1039a:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   1039c:	48 85       	ldd	r20, Y+8	; 0x08
   1039e:	59 85       	ldd	r21, Y+9	; 0x09
   103a0:	5d 87       	std	Y+13, r21	; 0x0d
   103a2:	4c 87       	std	Y+12, r20	; 0x0c
   103a4:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   103a6:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   103a8:	23 e6       	ldi	r18, 0x63	; 99
   103aa:	36 e3       	ldi	r19, 0x36	; 54
   103ac:	24 1b       	sub	r18, r20
   103ae:	35 0b       	sbc	r19, r21
   103b0:	f9 01       	movw	r30, r18
   103b2:	45 e0       	ldi	r20, 0x05	; 5
   103b4:	84 9f       	mul	r24, r20
   103b6:	e0 0d       	add	r30, r0
   103b8:	f1 1d       	adc	r31, r1
   103ba:	11 24       	eor	r1, r1
   103bc:	fb 87       	std	Y+11, r31	; 0x0b
   103be:	ea 87       	std	Y+10, r30	; 0x0a
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   103c0:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
   103c2:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
   103c4:	55 30       	cpi	r21, 0x05	; 5
   103c6:	29 f0       	breq	.+10     	; 0x103d2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b2>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
   103c8:	ea 85       	ldd	r30, Y+10	; 0x0a
   103ca:	fb 85       	ldd	r31, Y+11	; 0x0b
   103cc:	ea 0d       	add	r30, r10
   103ce:	fb 1d       	adc	r31, r11
   103d0:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
   103d2:	23 01       	movw	r4, r6
   103d4:	91 2c       	mov	r9, r1
   103d6:	81 2c       	mov	r8, r1
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
   103d8:	8e 2f       	mov	r24, r30
   103da:	90 e0       	ldi	r25, 0x00	; 0
   103dc:	99 87       	std	Y+9, r25	; 0x09
   103de:	88 87       	std	Y+8, r24	; 0x08
   103e0:	e0 ff       	sbrs	r30, 0
   103e2:	3c c0       	rjmp	.+120    	; 0x1045c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x23c>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
   103e4:	9a 81       	ldd	r25, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
   103e6:	2b 81       	ldd	r18, Y+3	; 0x03
   103e8:	3c 81       	ldd	r19, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
   103ea:	eb 80       	ldd	r14, Y+3	; 0x03
   103ec:	fc 80       	ldd	r15, Y+4	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
   103ee:	91 30       	cpi	r25, 0x01	; 1
   103f0:	09 f0       	breq	.+2      	; 0x103f4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
   103f2:	42 c0       	rjmp	.+132    	; 0x10478 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   103f4:	a3 01       	movw	r20, r6
   103f6:	48 0d       	add	r20, r8
   103f8:	59 1d       	adc	r21, r9
   103fa:	b5 01       	movw	r22, r10
   103fc:	86 eb       	ldi	r24, 0xB6	; 182
   103fe:	9d e0       	ldi	r25, 0x0D	; 13
   10400:	0e 94 15 20 	call	0x402a	; 0x402a <LCDWIKI_KBV::Draw_Pixe(int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
   10404:	e8 85       	ldd	r30, Y+8	; 0x08
   10406:	f9 85       	ldd	r31, Y+9	; 0x09
   10408:	f5 95       	asr	r31
   1040a:	e7 95       	ror	r30
   1040c:	3f ef       	ldi	r19, 0xFF	; 255
   1040e:	83 1a       	sub	r8, r19
   10410:	93 0a       	sbc	r9, r19
   10412:	4c 0c       	add	r4, r12
   10414:	5d 1c       	adc	r5, r13
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
   10416:	48 e0       	ldi	r20, 0x08	; 8
   10418:	84 16       	cp	r8, r20
   1041a:	91 04       	cpc	r9, r1
   1041c:	e9 f6       	brne	.-70     	; 0x103d8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1b8>
   1041e:	5f ef       	ldi	r21, 0xFF	; 255
   10420:	a5 1a       	sub	r10, r21
   10422:	b5 0a       	sbc	r11, r21
   10424:	8c 85       	ldd	r24, Y+12	; 0x0c
   10426:	9d 85       	ldd	r25, Y+13	; 0x0d
   10428:	8c 0d       	add	r24, r12
   1042a:	9d 1d       	adc	r25, r13
   1042c:	9d 87       	std	Y+13, r25	; 0x0d
   1042e:	8c 87       	std	Y+12, r24	; 0x0c
   10430:	99 81       	ldd	r25, Y+1	; 0x01
   10432:	9f 5f       	subi	r25, 0xFF	; 255
   10434:	99 83       	std	Y+1, r25	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
   10436:	96 30       	cpi	r25, 0x06	; 6
   10438:	09 f0       	breq	.+2      	; 0x1043c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x21c>
   1043a:	c2 cf       	rjmp	.-124    	; 0x103c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1a0>
write():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
   1043c:	20 91 c2 0d 	lds	r18, 0x0DC2	; 0x800dc2 <my_lcd+0xc>
   10440:	80 91 b8 0d 	lds	r24, 0x0DB8	; 0x800db8 <my_lcd+0x2>
   10444:	90 91 b9 0d 	lds	r25, 0x0DB9	; 0x800db9 <my_lcd+0x3>
   10448:	e6 e0       	ldi	r30, 0x06	; 6
   1044a:	2e 9f       	mul	r18, r30
   1044c:	80 0d       	add	r24, r0
   1044e:	91 1d       	adc	r25, r1
   10450:	11 24       	eor	r1, r1
   10452:	90 93 b9 0d 	sts	0x0DB9, r25	; 0x800db9 <my_lcd+0x3>
   10456:	80 93 b8 0d 	sts	0x0DB8, r24	; 0x800db8 <my_lcd+0x2>
   1045a:	32 cf       	rjmp	.-412    	; 0x102c0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0xa0>
Draw_Char():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
   1045c:	eb 81       	ldd	r30, Y+3	; 0x03
   1045e:	fc 81       	ldd	r31, Y+4	; 0x04
   10460:	2e 16       	cp	r2, r30
   10462:	3f 06       	cpc	r3, r31
   10464:	79 f2       	breq	.-98     	; 0x10404 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
   10466:	ff 81       	ldd	r31, Y+7	; 0x07
   10468:	f1 11       	cpse	r31, r1
   1046a:	cc cf       	rjmp	.-104    	; 0x10404 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
   1046c:	2a 81       	ldd	r18, Y+2	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   1046e:	71 01       	movw	r14, r2
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
   10470:	21 30       	cpi	r18, 0x01	; 1
   10472:	11 f4       	brne	.+4      	; 0x10478 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x258>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
   10474:	91 01       	movw	r18, r2
   10476:	be cf       	rjmp	.-132    	; 0x103f4 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1d4>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
   10478:	86 01       	movw	r16, r12
   1047a:	96 01       	movw	r18, r12
   1047c:	a2 01       	movw	r20, r4
   1047e:	6c 85       	ldd	r22, Y+12	; 0x0c
   10480:	7d 85       	ldd	r23, Y+13	; 0x0d
   10482:	86 eb       	ldi	r24, 0xB6	; 182
   10484:	9d e0       	ldi	r25, 0x0D	; 13
   10486:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1048a:	bc cf       	rjmp	.-136    	; 0x10404 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.154():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
   1048c:	2d 96       	adiw	r28, 0x0d	; 13
   1048e:	0f b6       	in	r0, 0x3f	; 63
   10490:	f8 94       	cli
   10492:	de bf       	out	0x3e, r29	; 62
   10494:	0f be       	out	0x3f, r0	; 63
   10496:	cd bf       	out	0x3d, r28	; 61
   10498:	df 91       	pop	r29
   1049a:	cf 91       	pop	r28
   1049c:	1f 91       	pop	r17
   1049e:	0f 91       	pop	r16
   104a0:	ff 90       	pop	r15
   104a2:	ef 90       	pop	r14
   104a4:	df 90       	pop	r13
   104a6:	cf 90       	pop	r12
   104a8:	bf 90       	pop	r11
   104aa:	af 90       	pop	r10
   104ac:	9f 90       	pop	r9
   104ae:	8f 90       	pop	r8
   104b0:	7f 90       	pop	r7
   104b2:	6f 90       	pop	r6
   104b4:	5f 90       	pop	r5
   104b6:	4f 90       	pop	r4
   104b8:	3f 90       	pop	r3
   104ba:	2f 90       	pop	r2
   104bc:	08 95       	ret

000104be <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:233
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
   104be:	8f 92       	push	r8
   104c0:	9f 92       	push	r9
   104c2:	af 92       	push	r10
   104c4:	bf 92       	push	r11
   104c6:	ef 92       	push	r14
   104c8:	ff 92       	push	r15
   104ca:	0f 93       	push	r16
   104cc:	1f 93       	push	r17
   104ce:	cf 93       	push	r28
   104d0:	df 93       	push	r29
   104d2:	cd b7       	in	r28, 0x3d	; 61
   104d4:	de b7       	in	r29, 0x3e	; 62
   104d6:	a1 97       	sbiw	r28, 0x21	; 33
   104d8:	0f b6       	in	r0, 0x3f	; 63
   104da:	f8 94       	cli
   104dc:	de bf       	out	0x3e, r29	; 62
   104de:	0f be       	out	0x3f, r0	; 63
   104e0:	cd bf       	out	0x3d, r28	; 61
   104e2:	7c 01       	movw	r14, r24
   104e4:	fa 01       	movw	r30, r20
   104e6:	cb 01       	movw	r24, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   104e8:	19 a2       	std	Y+33, r1	; 0x21
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   104ea:	22 30       	cpi	r18, 0x02	; 2
   104ec:	08 f4       	brcc	.+2      	; 0x104f0 <Print::printNumber(unsigned long, unsigned char)+0x32>
   104ee:	2a e0       	ldi	r18, 0x0A	; 10
   104f0:	8e 01       	movw	r16, r28
   104f2:	0f 5d       	subi	r16, 0xDF	; 223
   104f4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
   104f6:	82 2e       	mov	r8, r18
   104f8:	91 2c       	mov	r9, r1
   104fa:	b1 2c       	mov	r11, r1
   104fc:	a1 2c       	mov	r10, r1
   104fe:	bf 01       	movw	r22, r30
   10500:	a5 01       	movw	r20, r10
   10502:	94 01       	movw	r18, r8
   10504:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
   10508:	f9 01       	movw	r30, r18
   1050a:	ca 01       	movw	r24, r20
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1050c:	6a 30       	cpi	r22, 0x0A	; 10
   1050e:	74 f5       	brge	.+92     	; 0x1056c <Print::printNumber(unsigned long, unsigned char)+0xae>
   10510:	60 5d       	subi	r22, 0xD0	; 208
   10512:	d8 01       	movw	r26, r16
   10514:	6e 93       	st	-X, r22
   10516:	8d 01       	movw	r16, r26
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
   10518:	23 2b       	or	r18, r19
   1051a:	24 2b       	or	r18, r20
   1051c:	25 2b       	or	r18, r21
   1051e:	79 f7       	brne	.-34     	; 0x104fe <Print::printNumber(unsigned long, unsigned char)+0x40>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   10520:	90 e0       	ldi	r25, 0x00	; 0
   10522:	80 e0       	ldi	r24, 0x00	; 0
write():
   10524:	10 97       	sbiw	r26, 0x00	; 0
   10526:	89 f0       	breq	.+34     	; 0x1054a <Print::printNumber(unsigned long, unsigned char)+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
   10528:	fd 01       	movw	r30, r26
   1052a:	01 90       	ld	r0, Z+
   1052c:	00 20       	and	r0, r0
   1052e:	e9 f7       	brne	.-6      	; 0x1052a <Print::printNumber(unsigned long, unsigned char)+0x6c>
   10530:	31 97       	sbiw	r30, 0x01	; 1
   10532:	af 01       	movw	r20, r30
   10534:	4a 1b       	sub	r20, r26
   10536:	5b 0b       	sbc	r21, r27
   10538:	d7 01       	movw	r26, r14
   1053a:	ed 91       	ld	r30, X+
   1053c:	fc 91       	ld	r31, X
   1053e:	02 80       	ldd	r0, Z+2	; 0x02
   10540:	f3 81       	ldd	r31, Z+3	; 0x03
   10542:	e0 2d       	mov	r30, r0
   10544:	b8 01       	movw	r22, r16
   10546:	c7 01       	movw	r24, r14
   10548:	19 95       	eicall
_ZN5Print11printNumberEmh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
   1054a:	a1 96       	adiw	r28, 0x21	; 33
   1054c:	0f b6       	in	r0, 0x3f	; 63
   1054e:	f8 94       	cli
   10550:	de bf       	out	0x3e, r29	; 62
   10552:	0f be       	out	0x3f, r0	; 63
   10554:	cd bf       	out	0x3d, r28	; 61
   10556:	df 91       	pop	r29
   10558:	cf 91       	pop	r28
   1055a:	1f 91       	pop	r17
   1055c:	0f 91       	pop	r16
   1055e:	ff 90       	pop	r15
   10560:	ef 90       	pop	r14
   10562:	bf 90       	pop	r11
   10564:	af 90       	pop	r10
   10566:	9f 90       	pop	r9
   10568:	8f 90       	pop	r8
   1056a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   1056c:	69 5c       	subi	r22, 0xC9	; 201
   1056e:	d1 cf       	rjmp	.-94     	; 0x10512 <Print::printNumber(unsigned long, unsigned char)+0x54>

00010570 <TwoWire::requestFrom(int, int) [clone .constprop.129]>:
_ZN7TwoWire11requestFromEii.constprop.129():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:131
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
   10570:	68 2f       	mov	r22, r24
   10572:	88 e6       	ldi	r24, 0x68	; 104
   10574:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <twi_readFrom.part.0.constprop.169>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   10578:	10 92 e0 10 	sts	0x10E0, r1	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   1057c:	80 93 df 10 	sts	0x10DF, r24	; 0x8010df <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:134
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   10580:	08 95       	ret

00010582 <IPAddress::printTo(Print&) const>:
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:104
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
   10582:	8f 92       	push	r8
   10584:	9f 92       	push	r9
   10586:	af 92       	push	r10
   10588:	bf 92       	push	r11
   1058a:	cf 92       	push	r12
   1058c:	df 92       	push	r13
   1058e:	ef 92       	push	r14
   10590:	ff 92       	push	r15
   10592:	0f 93       	push	r16
   10594:	1f 93       	push	r17
   10596:	cf 93       	push	r28
   10598:	df 93       	push	r29
   1059a:	7c 01       	movw	r14, r24
   1059c:	eb 01       	movw	r28, r22
   1059e:	6c 01       	movw	r12, r24
   105a0:	82 e0       	ldi	r24, 0x02	; 2
   105a2:	c8 0e       	add	r12, r24
   105a4:	d1 1c       	adc	r13, r1
   105a6:	47 01       	movw	r8, r14
   105a8:	e5 e0       	ldi	r30, 0x05	; 5
   105aa:	8e 0e       	add	r8, r30
   105ac:	91 1c       	adc	r9, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:105
    size_t n = 0;
   105ae:	10 e0       	ldi	r17, 0x00	; 0
   105b0:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:108
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
   105b2:	f6 01       	movw	r30, r12
   105b4:	41 91       	ld	r20, Z+
   105b6:	6f 01       	movw	r12, r30
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   105b8:	50 e0       	ldi	r21, 0x00	; 0
   105ba:	70 e0       	ldi	r23, 0x00	; 0
   105bc:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   105be:	2a e0       	ldi	r18, 0x0A	; 10
   105c0:	ce 01       	movw	r24, r28
   105c2:	0e 94 5f 82 	call	0x104be	; 0x104be <Print::printNumber(unsigned long, unsigned char)>
   105c6:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   105c8:	e8 81       	ld	r30, Y
   105ca:	f9 81       	ldd	r31, Y+1	; 0x01
   105cc:	01 90       	ld	r0, Z+
   105ce:	f0 81       	ld	r31, Z
   105d0:	e0 2d       	mov	r30, r0
   105d2:	6e e2       	ldi	r22, 0x2E	; 46
   105d4:	ce 01       	movw	r24, r28
   105d6:	19 95       	eicall
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:109
        n += p.print('.');
   105d8:	8a 0d       	add	r24, r10
   105da:	9b 1d       	adc	r25, r11
   105dc:	08 0f       	add	r16, r24
   105de:	19 1f       	adc	r17, r25
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:106
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
   105e0:	c8 14       	cp	r12, r8
   105e2:	d9 04       	cpc	r13, r9
   105e4:	31 f7       	brne	.-52     	; 0x105b2 <IPAddress::printTo(Print&) const+0x30>
print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:74
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   105e6:	f7 01       	movw	r30, r14
   105e8:	45 81       	ldd	r20, Z+5	; 0x05
   105ea:	50 e0       	ldi	r21, 0x00	; 0
   105ec:	70 e0       	ldi	r23, 0x00	; 0
   105ee:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   105f0:	2a e0       	ldi	r18, 0x0A	; 10
   105f2:	ce 01       	movw	r24, r28
   105f4:	0e 94 5f 82 	call	0x104be	; 0x104be <Print::printNumber(unsigned long, unsigned char)>
_ZNK9IPAddress7printToER5Print():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:113
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
   105f8:	80 0f       	add	r24, r16
   105fa:	91 1f       	adc	r25, r17
   105fc:	df 91       	pop	r29
   105fe:	cf 91       	pop	r28
   10600:	1f 91       	pop	r17
   10602:	0f 91       	pop	r16
   10604:	ff 90       	pop	r15
   10606:	ef 90       	pop	r14
   10608:	df 90       	pop	r13
   1060a:	cf 90       	pop	r12
   1060c:	bf 90       	pop	r11
   1060e:	af 90       	pop	r10
   10610:	9f 90       	pop	r9
   10612:	8f 90       	pop	r8
   10614:	08 95       	ret

00010616 <W5500Class::readSnRX_RSR(unsigned char)>:
_ZN10W5500Class12readSnRX_RSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:320
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
   10616:	1f 93       	push	r17
   10618:	cf 93       	push	r28
   1061a:	df 93       	push	r29
   1061c:	18 2f       	mov	r17, r24
   1061e:	66 e2       	ldi	r22, 0x26	; 38
   10620:	70 e0       	ldi	r23, 0x00	; 0
   10622:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   10626:	c8 2f       	mov	r28, r24
   10628:	d0 e0       	ldi	r29, 0x00	; 0
   1062a:	dc 2f       	mov	r29, r28
   1062c:	cc 27       	eor	r28, r28
   1062e:	67 e2       	ldi	r22, 0x27	; 39
   10630:	70 e0       	ldi	r23, 0x00	; 0
   10632:	81 2f       	mov	r24, r17
   10634:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   10638:	8c 0f       	add	r24, r28
   1063a:	9d 2f       	mov	r25, r29
   1063c:	91 1d       	adc	r25, r1
   1063e:	df 91       	pop	r29
   10640:	cf 91       	pop	r28
   10642:	1f 91       	pop	r17
   10644:	08 95       	ret

00010646 <W5500Class::readSnTX_FSR(unsigned char)>:
_ZN10W5500Class12readSnTX_FSREh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:317
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
  __SOCKET_REGISTER16(SnMSSR,     0x0012)        // Max Segment Size
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
   10646:	1f 93       	push	r17
   10648:	cf 93       	push	r28
   1064a:	df 93       	push	r29
   1064c:	18 2f       	mov	r17, r24
   1064e:	60 e2       	ldi	r22, 0x20	; 32
   10650:	70 e0       	ldi	r23, 0x00	; 0
   10652:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   10656:	c8 2f       	mov	r28, r24
   10658:	d0 e0       	ldi	r29, 0x00	; 0
   1065a:	dc 2f       	mov	r29, r28
   1065c:	cc 27       	eor	r28, r28
   1065e:	61 e2       	ldi	r22, 0x21	; 33
   10660:	70 e0       	ldi	r23, 0x00	; 0
   10662:	81 2f       	mov	r24, r17
   10664:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   10668:	8c 0f       	add	r24, r28
   1066a:	9d 2f       	mov	r25, r29
   1066c:	91 1d       	adc	r25, r1
   1066e:	df 91       	pop	r29
   10670:	cf 91       	pop	r28
   10672:	1f 91       	pop	r17
   10674:	08 95       	ret

00010676 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   10676:	0e 94 e9 b6 	call	0x16dd2	; 0x16dd2 <abort>

0001067a <EthernetUDP::beginPacket(char const*, unsigned int)>:
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:84
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

int EthernetUDP::beginPacket(const char *host, uint16_t port)
{
   1067a:	cf 92       	push	r12
   1067c:	df 92       	push	r13
   1067e:	ef 92       	push	r14
   10680:	ff 92       	push	r15
   10682:	0f 93       	push	r16
   10684:	1f 93       	push	r17
   10686:	cf 93       	push	r28
   10688:	df 93       	push	r29
   1068a:	cd b7       	in	r28, 0x3d	; 61
   1068c:	de b7       	in	r29, 0x3e	; 62
   1068e:	af 97       	sbiw	r28, 0x2f	; 47
   10690:	0f b6       	in	r0, 0x3f	; 63
   10692:	f8 94       	cli
   10694:	de bf       	out	0x3e, r29	; 62
   10696:	0f be       	out	0x3f, r0	; 63
   10698:	cd bf       	out	0x3d, r28	; 61
   1069a:	7c 01       	movw	r14, r24
   1069c:	6a 01       	movw	r12, r20
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   1069e:	02 ee       	ldi	r16, 0xE2	; 226
   106a0:	12 e0       	ldi	r17, 0x02	; 2
   106a2:	1a 83       	std	Y+2, r17	; 0x02
   106a4:	09 83       	std	Y+1, r16	; 0x01
_ZN5PrintC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   106a6:	1c 86       	std	Y+12, r1	; 0x0c
   106a8:	1b 86       	std	Y+11, r1	; 0x0b
_ZN6StreamC2Ev():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/Stream.h:63
   106aa:	88 ee       	ldi	r24, 0xE8	; 232
   106ac:	93 e0       	ldi	r25, 0x03	; 3
   106ae:	a0 e0       	ldi	r26, 0x00	; 0
   106b0:	b0 e0       	ldi	r27, 0x00	; 0
   106b2:	8d 87       	std	Y+13, r24	; 0x0d
   106b4:	9e 87       	std	Y+14, r25	; 0x0e
   106b6:	af 87       	std	Y+15, r26	; 0x0f
   106b8:	b8 8b       	std	Y+16, r27	; 0x10
__base_ctor ():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:40
#include "Ethernet2.h"
#include "Udp.h"
#include "Dns.h"

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}
   106ba:	88 e9       	ldi	r24, 0x98	; 152
   106bc:	92 e0       	ldi	r25, 0x02	; 2
   106be:	9a 87       	std	Y+10, r25	; 0x0a
   106c0:	89 87       	std	Y+9, r24	; 0x09
   106c2:	88 e0       	ldi	r24, 0x08	; 8
   106c4:	8d 8b       	std	Y+21, r24	; 0x15
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
   106c6:	19 8f       	std	Y+25, r17	; 0x19
   106c8:	08 8f       	std	Y+24, r16	; 0x18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   106ca:	1a 8e       	std	Y+26, r1	; 0x1a
   106cc:	1b 8e       	std	Y+27, r1	; 0x1b
   106ce:	1c 8e       	std	Y+28, r1	; 0x1c
   106d0:	1d 8e       	std	Y+29, r1	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:23
*/

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   106d2:	1b a7       	std	Y+43, r17	; 0x2b
   106d4:	0a a7       	std	Y+42, r16	; 0x2a
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:25
{
    _address.dword = 0;
   106d6:	1c a6       	std	Y+44, r1	; 0x2c
   106d8:	1d a6       	std	Y+45, r1	; 0x2d
   106da:	1e a6       	std	Y+46, r1	; 0x2e
   106dc:	1f a6       	std	Y+47, r1	; 0x2f
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   106de:	80 91 08 0c 	lds	r24, 0x0C08	; 0x800c08 <Ethernet+0x2>
   106e2:	90 91 09 0c 	lds	r25, 0x0C09	; 0x800c09 <Ethernet+0x3>
   106e6:	a0 91 0a 0c 	lds	r26, 0x0C0A	; 0x800c0a <Ethernet+0x4>
   106ea:	b0 91 0b 0c 	lds	r27, 0x0C0B	; 0x800c0b <Ethernet+0x5>
   106ee:	8e a3       	std	Y+38, r24	; 0x26
   106f0:	9f a3       	std	Y+39, r25	; 0x27
   106f2:	a8 a7       	std	Y+40, r26	; 0x28
   106f4:	b9 a7       	std	Y+41, r27	; 0x29
_ZN9IPAddressaSERKS_():
   106f6:	8b 83       	std	Y+3, r24	; 0x03
   106f8:	9c 83       	std	Y+4, r25	; 0x04
   106fa:	ad 83       	std	Y+5, r26	; 0x05
   106fc:	be 83       	std	Y+6, r27	; 0x06
begin():
/home/saric/Arduino/libraries/Ethernet2/src/Dns.cpp:54
   106fe:	18 86       	std	Y+8, r1	; 0x08
   10700:	1f 82       	std	Y+7, r1	; 0x07
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:91
  int ret = 0;
  DNSClient dns;
  IPAddress remote_addr;

  dns.begin(Ethernet.dnsServerIP());
  ret = dns.getHostByName(host, remote_addr);
   10702:	ae 01       	movw	r20, r28
   10704:	46 5d       	subi	r20, 0xD6	; 214
   10706:	5f 4f       	sbci	r21, 0xFF	; 255
   10708:	ce 01       	movw	r24, r28
   1070a:	01 96       	adiw	r24, 0x01	; 1
   1070c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <DNSClient::getHostByName(char const*, IPAddress&)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:92
  if (ret == 1) {
   10710:	81 30       	cpi	r24, 0x01	; 1
   10712:	91 05       	cpc	r25, r1
   10714:	b1 f4       	brne	.+44     	; 0x10742 <EthernetUDP::beginPacket(char const*, unsigned int)+0xc8>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
    return beginPacket(remote_addr, port);
   10716:	d7 01       	movw	r26, r14
   10718:	ed 91       	ld	r30, X+
   1071a:	fc 91       	ld	r31, X
   1071c:	04 88       	ldd	r0, Z+20	; 0x14
   1071e:	f5 89       	ldd	r31, Z+21	; 0x15
   10720:	e0 2d       	mov	r30, r0
_ZN9IPAddressC2ERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
   10722:	1d a3       	std	Y+37, r17	; 0x25
   10724:	0c a3       	std	Y+36, r16	; 0x24
   10726:	8c a5       	ldd	r24, Y+44	; 0x2c
   10728:	9d a5       	ldd	r25, Y+45	; 0x2d
   1072a:	ae a5       	ldd	r26, Y+46	; 0x2e
   1072c:	bf a5       	ldd	r27, Y+47	; 0x2f
   1072e:	8e a3       	std	Y+38, r24	; 0x26
   10730:	9f a3       	std	Y+39, r25	; 0x27
   10732:	a8 a7       	std	Y+40, r26	; 0x28
   10734:	b9 a7       	std	Y+41, r27	; 0x29
_ZN11EthernetUDP11beginPacketEPKcj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:93
   10736:	a6 01       	movw	r20, r12
   10738:	be 01       	movw	r22, r28
   1073a:	6c 5d       	subi	r22, 0xDC	; 220
   1073c:	7f 4f       	sbci	r23, 0xFF	; 255
   1073e:	c7 01       	movw	r24, r14
   10740:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:97
  } else {
    return ret;
  }
}
   10742:	af 96       	adiw	r28, 0x2f	; 47
   10744:	0f b6       	in	r0, 0x3f	; 63
   10746:	f8 94       	cli
   10748:	de bf       	out	0x3e, r29	; 62
   1074a:	0f be       	out	0x3f, r0	; 63
   1074c:	cd bf       	out	0x3d, r28	; 61
   1074e:	df 91       	pop	r29
   10750:	cf 91       	pop	r28
   10752:	1f 91       	pop	r17
   10754:	0f 91       	pop	r16
   10756:	ff 90       	pop	r15
   10758:	ef 90       	pop	r14
   1075a:	df 90       	pop	r13
   1075c:	cf 90       	pop	r12
   1075e:	08 95       	ret

00010760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.190():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
   10760:	ef 92       	push	r14
   10762:	ff 92       	push	r15
   10764:	0f 93       	push	r16
   10766:	1f 93       	push	r17
   10768:	9a 01       	movw	r18, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
   1076a:	e0 90 c0 0d 	lds	r14, 0x0DC0	; 0x800dc0 <my_lcd+0xa>
   1076e:	f0 90 c1 0d 	lds	r15, 0x0DC1	; 0x800dc1 <my_lcd+0xb>
   10772:	01 e0       	ldi	r16, 0x01	; 1
   10774:	10 e0       	ldi	r17, 0x00	; 0
   10776:	ab 01       	movw	r20, r22
   10778:	bc 01       	movw	r22, r24
   1077a:	86 eb       	ldi	r24, 0xB6	; 182
   1077c:	9d e0       	ldi	r25, 0x0D	; 13
   1077e:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
   10782:	1f 91       	pop	r17
   10784:	0f 91       	pop	r16
   10786:	ff 90       	pop	r15
   10788:	ef 90       	pop	r14
   1078a:	08 95       	ret

0001078c <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]>:
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:162
    	}
  	}
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1078c:	8f 92       	push	r8
   1078e:	9f 92       	push	r9
   10790:	af 92       	push	r10
   10792:	bf 92       	push	r11
   10794:	cf 92       	push	r12
   10796:	df 92       	push	r13
   10798:	ef 92       	push	r14
   1079a:	ff 92       	push	r15
   1079c:	0f 93       	push	r16
   1079e:	1f 93       	push	r17
   107a0:	cf 93       	push	r28
   107a2:	df 93       	push	r29
   107a4:	6c 01       	movw	r12, r24
   107a6:	eb 01       	movw	r28, r22
   107a8:	4a 01       	movw	r8, r20
   107aa:	79 01       	movw	r14, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
   107ac:	9a 01       	movw	r18, r20
   107ae:	28 1b       	sub	r18, r24
   107b0:	39 0b       	sbc	r19, r25
   107b2:	89 01       	movw	r16, r18
   107b4:	0f 5f       	subi	r16, 0xFF	; 255
   107b6:	1f 4f       	sbci	r17, 0xFF	; 255
   107b8:	c7 01       	movw	r24, r14
   107ba:	86 1b       	sub	r24, r22
   107bc:	97 0b       	sbc	r25, r23
   107be:	5c 01       	movw	r10, r24
   107c0:	4f ef       	ldi	r20, 0xFF	; 255
   107c2:	a4 1a       	sub	r10, r20
   107c4:	b4 0a       	sbc	r11, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
   107c6:	17 ff       	sbrs	r17, 7
   107c8:	04 c0       	rjmp	.+8      	; 0x107d2 <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x46>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
   107ca:	89 01       	movw	r16, r18
   107cc:	00 95       	com	r16
   107ce:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
   107d0:	64 01       	movw	r12, r8
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
   107d2:	b7 fe       	sbrs	r11, 7
   107d4:	04 c0       	rjmp	.+8      	; 0x107de <LCDWIKI_GUI::Draw_Rectangle(int, int, int, int) [clone .constprop.189]+0x52>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
   107d6:	5c 01       	movw	r10, r24
   107d8:	a0 94       	com	r10
   107da:	b0 94       	com	r11
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   107dc:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
   107de:	a8 01       	movw	r20, r16
   107e0:	be 01       	movw	r22, r28
   107e2:	c6 01       	movw	r24, r12
   107e4:	0e 94 b0 83 	call	0x10760	; 0x10760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
   107e8:	a8 01       	movw	r20, r16
   107ea:	b7 01       	movw	r22, r14
   107ec:	c6 01       	movw	r24, r12
   107ee:	0e 94 b0 83 	call	0x10760	; 0x10760 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.190]>
Draw_Fast_VLine():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
{
	Fill_Rect(x, y, 1, h, draw_color);
   107f2:	e0 90 c0 0d 	lds	r14, 0x0DC0	; 0x800dc0 <my_lcd+0xa>
   107f6:	f0 90 c1 0d 	lds	r15, 0x0DC1	; 0x800dc1 <my_lcd+0xb>
   107fa:	85 01       	movw	r16, r10
   107fc:	21 e0       	ldi	r18, 0x01	; 1
   107fe:	30 e0       	ldi	r19, 0x00	; 0
   10800:	ae 01       	movw	r20, r28
   10802:	b6 01       	movw	r22, r12
   10804:	86 eb       	ldi	r24, 0xB6	; 182
   10806:	9d e0       	ldi	r25, 0x0D	; 13
   10808:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
   1080c:	e0 90 c0 0d 	lds	r14, 0x0DC0	; 0x800dc0 <my_lcd+0xa>
   10810:	f0 90 c1 0d 	lds	r15, 0x0DC1	; 0x800dc1 <my_lcd+0xb>
   10814:	21 e0       	ldi	r18, 0x01	; 1
   10816:	30 e0       	ldi	r19, 0x00	; 0
   10818:	ae 01       	movw	r20, r28
   1081a:	b4 01       	movw	r22, r8
   1081c:	86 eb       	ldi	r24, 0xB6	; 182
   1081e:	9d e0       	ldi	r25, 0x0D	; 13
   10820:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
_ZN11LCDWIKI_GUI14Draw_RectangleEiiii.constprop.189():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:179
	}
	Draw_Fast_HLine(x1, y1, w);
  	Draw_Fast_HLine(x1, y2, w);
	Draw_Fast_VLine(x1, y1, h);
	Draw_Fast_VLine(x2, y1, h);
}
   10824:	df 91       	pop	r29
   10826:	cf 91       	pop	r28
   10828:	1f 91       	pop	r17
   1082a:	0f 91       	pop	r16
   1082c:	ff 90       	pop	r15
   1082e:	ef 90       	pop	r14
   10830:	df 90       	pop	r13
   10832:	cf 90       	pop	r12
   10834:	bf 90       	pop	r11
   10836:	af 90       	pop	r10
   10838:	9f 90       	pop	r9
   1083a:	8f 90       	pop	r8
   1083c:	08 95       	ret

0001083e <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]>:
_ZN11LCDWIKI_GUI14Fill_RectangleEiiii.constprop.188():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:70
	Read_GRAM(x, y, &colour, 1, 1);
	return colour;
}

//fill a rectangle
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
   1083e:	ef 92       	push	r14
   10840:	ff 92       	push	r15
   10842:	0f 93       	push	r16
   10844:	1f 93       	push	r17
   10846:	cf 93       	push	r28
   10848:	df 93       	push	r29
   1084a:	f9 01       	movw	r30, r18
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:72
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   1084c:	ea 01       	movw	r28, r20
   1084e:	c8 1b       	sub	r28, r24
   10850:	d9 0b       	sbc	r29, r25
   10852:	9e 01       	movw	r18, r28
   10854:	2f 5f       	subi	r18, 0xFF	; 255
   10856:	3f 4f       	sbci	r19, 0xFF	; 255
   10858:	df 01       	movw	r26, r30
   1085a:	a6 1b       	sub	r26, r22
   1085c:	b7 0b       	sbc	r27, r23
   1085e:	8d 01       	movw	r16, r26
   10860:	0f 5f       	subi	r16, 0xFF	; 255
   10862:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:73
   	if (w < 0) 
   10864:	37 ff       	sbrs	r19, 7
   10866:	04 c0       	rjmp	.+8      	; 0x10870 <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x32>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:76
	{ 
		x1 = x2; 
		w = -w; 
   10868:	9e 01       	movw	r18, r28
   1086a:	20 95       	com	r18
   1086c:	30 95       	com	r19
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:75
void LCDWIKI_GUI::Fill_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
	int w = x2 - x1 + 1, h = y2 - y1 + 1;
   	if (w < 0) 
	{ 
		x1 = x2; 
   1086e:	ca 01       	movw	r24, r20
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:78
		w = -w; 
	}
	if (h < 0) 
   10870:	17 ff       	sbrs	r17, 7
   10872:	04 c0       	rjmp	.+8      	; 0x1087c <LCDWIKI_GUI::Fill_Rectangle(int, int, int, int) [clone .constprop.188]+0x3e>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:81
	{ 
		y1 = y2; 
		h = -h; 
   10874:	8d 01       	movw	r16, r26
   10876:	00 95       	com	r16
   10878:	10 95       	com	r17
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:80
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
   1087a:	bf 01       	movw	r22, r30
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:83
		h = -h; 
	}
	Fill_Rect(x1, y1, w, h, draw_color);
   1087c:	e0 90 c0 0d 	lds	r14, 0x0DC0	; 0x800dc0 <my_lcd+0xa>
   10880:	f0 90 c1 0d 	lds	r15, 0x0DC1	; 0x800dc1 <my_lcd+0xb>
   10884:	ab 01       	movw	r20, r22
   10886:	bc 01       	movw	r22, r24
   10888:	86 eb       	ldi	r24, 0xB6	; 182
   1088a:	9d e0       	ldi	r25, 0x0D	; 13
   1088c:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:84
}
   10890:	df 91       	pop	r29
   10892:	cf 91       	pop	r28
   10894:	1f 91       	pop	r17
   10896:	0f 91       	pop	r16
   10898:	ff 90       	pop	r15
   1089a:	ef 90       	pop	r14
   1089c:	08 95       	ret

0001089e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>:
_ZN9SRAM_23LC16sendAddressBytesEm.constprop.184():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:133
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}

void SRAM_23LC::sendAddressBytes(const uint32_t address)
   1089e:	cf 92       	push	r12
   108a0:	df 92       	push	r13
   108a2:	ef 92       	push	r14
   108a4:	ff 92       	push	r15
   108a6:	6b 01       	movw	r12, r22
   108a8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:135
{
  if (_capacity > 0x10000) {
   108aa:	80 91 80 0c 	lds	r24, 0x0C80	; 0x800c80 <SRAM+0x4>
   108ae:	90 91 81 0c 	lds	r25, 0x0C81	; 0x800c81 <SRAM+0x5>
   108b2:	a0 91 82 0c 	lds	r26, 0x0C82	; 0x800c82 <SRAM+0x6>
   108b6:	b0 91 83 0c 	lds	r27, 0x0C83	; 0x800c83 <SRAM+0x7>
   108ba:	01 97       	sbiw	r24, 0x01	; 1
   108bc:	a1 40       	sbci	r26, 0x01	; 1
   108be:	b1 05       	cpc	r27, r1
   108c0:	48 f0       	brcs	.+18     	; 0x108d4 <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]+0x36>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:136
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   108c2:	b7 01       	movw	r22, r14
   108c4:	88 27       	eor	r24, r24
   108c6:	99 27       	eor	r25, r25
   108c8:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   108cc:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   108d0:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:138
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   108d4:	99 27       	eor	r25, r25
   108d6:	8f 2d       	mov	r24, r15
   108d8:	7e 2d       	mov	r23, r14
   108da:	6d 2d       	mov	r22, r13
   108dc:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   108e0:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   108e4:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
  _spi->transfer((uint8_t)(address & 0xFF));
   108e8:	6c 2d       	mov	r22, r12
   108ea:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   108ee:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:140
}
   108f2:	ff 90       	pop	r15
   108f4:	ef 90       	pop	r14
   108f6:	df 90       	pop	r13
   108f8:	cf 90       	pop	r12
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:139
{
  if (_capacity > 0x10000) {
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
  }
  _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  _spi->transfer((uint8_t)(address & 0xFF));
   108fa:	0c 94 8b 36 	jmp	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>

000108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>:
_ZN7TwoWire17beginTransmissionEh.constprop.167():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:144
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
   108fe:	91 e0       	ldi	r25, 0x01	; 1
   10900:	90 93 e4 10 	sts	0x10E4, r25	; 0x8010e4 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:146
  // set address of targeted slave
  txAddress = address;
   10904:	80 93 e3 10 	sts	0x10E3, r24	; 0x8010e3 <TwoWire::txAddress>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:148
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   10908:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:149
  txBufferLength = 0;
   1090c:	10 92 e1 10 	sts	0x10E1, r1	; 0x8010e1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:150
}
   10910:	08 95       	ret

00010912 <LCDWIKI_GUI::Fill_Screen(unsigned int) [clone .constprop.161]>:
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:99
{
	Fill_Rect(x, y, w, 1, draw_color);
}

//Fill the full screen with color
void LCDWIKI_GUI::Fill_Screen(uint16_t color)
   10912:	ef 92       	push	r14
   10914:	ff 92       	push	r15
   10916:	0f 93       	push	r16
   10918:	1f 93       	push	r17
_ZNK11LCDWIKI_KBV10Get_HeightEv():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:743
}

//get lcd height
int16_t LCDWIKI_KBV::Get_Height(void) const
{
	return height;
   1091a:	e6 eb       	ldi	r30, 0xB6	; 182
   1091c:	fd e0       	ldi	r31, 0x0D	; 13
_ZN11LCDWIKI_GUI11Fill_ScreenEj.constprop.161():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:101
{
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
   1091e:	04 89       	ldd	r16, Z+20	; 0x14
   10920:	15 89       	ldd	r17, Z+21	; 0x15
   10922:	22 89       	ldd	r18, Z+18	; 0x12
   10924:	33 89       	ldd	r19, Z+19	; 0x13
   10926:	7c 01       	movw	r14, r24
   10928:	50 e0       	ldi	r21, 0x00	; 0
   1092a:	40 e0       	ldi	r20, 0x00	; 0
   1092c:	70 e0       	ldi	r23, 0x00	; 0
   1092e:	60 e0       	ldi	r22, 0x00	; 0
   10930:	cf 01       	movw	r24, r30
   10932:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <LCDWIKI_KBV::Fill_Rect(int, int, int, int, unsigned int)>
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:102
}
   10936:	1f 91       	pop	r17
   10938:	0f 91       	pop	r16
   1093a:	ff 90       	pop	r15
   1093c:	ef 90       	pop	r14
   1093e:	08 95       	ret

00010940 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]>:
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2604
    csize - velikost pisma
    fc - foreground color
    bc - backgroud color
    mode - ?
*/
void show_string(char *str, int16_t x, int16_t y, uint8_t csize, uint16_t fc, uint16_t bc, boolean mode)
   10940:	8f 92       	push	r8
   10942:	9f 92       	push	r9
   10944:	af 92       	push	r10
   10946:	bf 92       	push	r11
   10948:	cf 92       	push	r12
   1094a:	df 92       	push	r13
   1094c:	ef 92       	push	r14
   1094e:	ff 92       	push	r15
   10950:	0f 93       	push	r16
   10952:	1f 93       	push	r17
   10954:	cf 93       	push	r28
   10956:	df 93       	push	r29
   10958:	00 d0       	rcall	.+0      	; 0x1095a <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1a>
   1095a:	00 d0       	rcall	.+0      	; 0x1095c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x1c>
   1095c:	cd b7       	in	r28, 0x3d	; 61
   1095e:	de b7       	in	r29, 0x3e	; 62
   10960:	6c 01       	movw	r12, r24
   10962:	5b 01       	movw	r10, r22
   10964:	4a 01       	movw	r8, r20
Set_Text_Mode():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
   10966:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xd>
Set_Text_Size():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:529
}

//set text size
void LCDWIKI_GUI::Set_Text_Size(uint8_t s)
{
	text_size = s;
   1096a:	20 93 c2 0d 	sts	0x0DC2, r18	; 0x800dc2 <my_lcd+0xc>
Set_Text_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
   1096e:	10 93 bd 0d 	sts	0x0DBD, r17	; 0x800dbd <my_lcd+0x7>
   10972:	00 93 bc 0d 	sts	0x0DBC, r16	; 0x800dbc <my_lcd+0x6>
Set_Text_Back_colour():
/home/saric/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
   10976:	f0 92 bf 0d 	sts	0x0DBF, r15	; 0x800dbf <my_lcd+0x9>
   1097a:	e0 92 be 0d 	sts	0x0DBE, r14	; 0x800dbe <my_lcd+0x8>
_ZN6String4initEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:133
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
   1097e:	1a 82       	std	Y+2, r1	; 0x02
   10980:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:134
  capacity = 0;
   10982:	1c 82       	std	Y+4, r1	; 0x04
   10984:	1b 82       	std	Y+3, r1	; 0x03
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:135
  len = 0;
   10986:	1e 82       	std	Y+6, r1	; 0x06
   10988:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
   1098a:	fc 01       	movw	r30, r24
   1098c:	01 90       	ld	r0, Z+
   1098e:	00 20       	and	r0, r0
   10990:	e9 f7       	brne	.-6      	; 0x1098c <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x4c>
   10992:	31 97       	sbiw	r30, 0x01	; 1
   10994:	8f 01       	movw	r16, r30
   10996:	08 1b       	sub	r16, r24
   10998:	19 0b       	sbc	r17, r25
changeBuffer():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:157
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1099a:	b8 01       	movw	r22, r16
   1099c:	6f 5f       	subi	r22, 0xFF	; 255
   1099e:	7f 4f       	sbci	r23, 0xFF	; 255
   109a0:	90 e0       	ldi	r25, 0x00	; 0
   109a2:	80 e0       	ldi	r24, 0x00	; 0
   109a4:	0e 94 08 b6 	call	0x16c10	; 0x16c10 <realloc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:158
  if (newbuffer) {
   109a8:	00 97       	sbiw	r24, 0x00	; 0
   109aa:	81 f0       	breq	.+32     	; 0x109cc <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x8c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:159
    buffer = newbuffer;
   109ac:	9a 83       	std	Y+2, r25	; 0x02
   109ae:	89 83       	std	Y+1, r24	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:160
    capacity = maxStrLen;
   109b0:	1c 83       	std	Y+4, r17	; 0x04
   109b2:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:149

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
   109b4:	2d 81       	ldd	r18, Y+5	; 0x05
   109b6:	3e 81       	ldd	r19, Y+6	; 0x06
   109b8:	23 2b       	or	r18, r19
   109ba:	11 f4       	brne	.+4      	; 0x109c0 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x80>
   109bc:	fc 01       	movw	r30, r24
   109be:	10 82       	st	Z, r1
copy():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:176
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
   109c0:	1e 83       	std	Y+6, r17	; 0x06
   109c2:	0d 83       	std	Y+5, r16	; 0x05
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:177
  strcpy(buffer, cstr);
   109c4:	b6 01       	movw	r22, r12
   109c6:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
   109ca:	0c c0       	rjmp	.+24     	; 0x109e4 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0xa4>
invalidate():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:140
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
   109cc:	89 81       	ldd	r24, Y+1	; 0x01
   109ce:	9a 81       	ldd	r25, Y+2	; 0x02
   109d0:	00 97       	sbiw	r24, 0x00	; 0
   109d2:	11 f0       	breq	.+4      	; 0x109d8 <show_string(char*, int, int, unsigned char, unsigned int, unsigned int, bool) [clone .constprop.149]+0x98>
   109d4:	0e 94 78 af 	call	0x15ef0	; 0x15ef0 <free>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:141
  buffer = NULL;
   109d8:	1a 82       	std	Y+2, r1	; 0x02
   109da:	19 82       	std	Y+1, r1	; 0x01
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:142
  capacity = len = 0;
   109dc:	1e 82       	std	Y+6, r1	; 0x06
   109de:	1d 82       	std	Y+5, r1	; 0x05
   109e0:	1c 82       	std	Y+4, r1	; 0x04
   109e2:	1b 82       	std	Y+3, r1	; 0x03
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2610
{
  my_lcd.Set_Text_Mode(mode);
  my_lcd.Set_Text_Size(csize);
  my_lcd.Set_Text_colour(fc);
  my_lcd.Set_Text_Back_colour(bc);
  my_lcd.Print_String(str, x, y);
   109e4:	a4 01       	movw	r20, r8
   109e6:	b5 01       	movw	r22, r10
   109e8:	ce 01       	movw	r24, r28
   109ea:	01 96       	adiw	r24, 0x01	; 1
   109ec:	0e 94 10 81 	call	0x10220	; 0x10220 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.154]>
__base_dtor ():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  free(buffer);
   109f0:	89 81       	ldd	r24, Y+1	; 0x01
   109f2:	9a 81       	ldd	r25, Y+2	; 0x02
   109f4:	0e 94 78 af 	call	0x15ef0	; 0x15ef0 <free>
_Z11show_stringPciihjjb.constprop.149():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2611
}
   109f8:	26 96       	adiw	r28, 0x06	; 6
   109fa:	0f b6       	in	r0, 0x3f	; 63
   109fc:	f8 94       	cli
   109fe:	de bf       	out	0x3e, r29	; 62
   10a00:	0f be       	out	0x3f, r0	; 63
   10a02:	cd bf       	out	0x3d, r28	; 61
   10a04:	df 91       	pop	r29
   10a06:	cf 91       	pop	r28
   10a08:	1f 91       	pop	r17
   10a0a:	0f 91       	pop	r16
   10a0c:	ff 90       	pop	r15
   10a0e:	ef 90       	pop	r14
   10a10:	df 90       	pop	r13
   10a12:	cf 90       	pop	r12
   10a14:	bf 90       	pop	r11
   10a16:	af 90       	pop	r10
   10a18:	9f 90       	pop	r9
   10a1a:	8f 90       	pop	r8
   10a1c:	08 95       	ret

00010a1e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>:
_ZN12PubSubClient11writeStringEPKcPhj.constprop.148():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:524
    _state = MQTT_DISCONNECTED;
    _client->stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t PubSubClient::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   10a1e:	cf 93       	push	r28
   10a20:	df 93       	push	r29
   10a22:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:527
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   10a24:	fa 01       	movw	r30, r20
   10a26:	32 96       	adiw	r30, 0x02	; 2
   10a28:	e6 0f       	add	r30, r22
   10a2a:	f7 1f       	adc	r31, r23
   10a2c:	dc 01       	movw	r26, r24
   10a2e:	9d 01       	movw	r18, r26
   10a30:	2c 1b       	sub	r18, r28
   10a32:	3d 0b       	sbc	r19, r29
   10a34:	cf 01       	movw	r24, r30
   10a36:	86 1b       	sub	r24, r22
   10a38:	97 0b       	sbc	r25, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:528
    while (*idp) {
   10a3a:	4d 91       	ld	r20, X+
   10a3c:	44 23       	and	r20, r20
   10a3e:	11 f0       	breq	.+4      	; 0x10a44 <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x26>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:529
        buf[pos++] = *idp++;
   10a40:	41 93       	st	Z+, r20
   10a42:	f5 cf       	rjmp	.-22     	; 0x10a2e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]+0x10>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:532
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   10a44:	ac 01       	movw	r20, r24
   10a46:	42 1b       	sub	r20, r18
   10a48:	53 0b       	sbc	r21, r19
   10a4a:	64 0f       	add	r22, r20
   10a4c:	75 1f       	adc	r23, r21
   10a4e:	fb 01       	movw	r30, r22
   10a50:	32 97       	sbiw	r30, 0x02	; 2
   10a52:	30 83       	st	Z, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:533
    buf[pos-i-1] = (i & 0xFF);
   10a54:	61 50       	subi	r22, 0x01	; 1
   10a56:	71 09       	sbc	r23, r1
   10a58:	fb 01       	movw	r30, r22
   10a5a:	20 83       	st	Z, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:535
    return pos;
}
   10a5c:	df 91       	pop	r29
   10a5e:	cf 91       	pop	r28
   10a60:	08 95       	ret

00010a62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]>:
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:114
   	return num; 
}

#define READ_TIMES 5 //the times for read
#define LOST_VAL 1          //
uint16_t LCDWIKI_TOUCH::TP_Read_XY(uint8_t xy)
   10a62:	ef 92       	push	r14
   10a64:	ff 92       	push	r15
   10a66:	0f 93       	push	r16
   10a68:	1f 93       	push	r17
   10a6a:	cf 93       	push	r28
   10a6c:	df 93       	push	r29
   10a6e:	00 d0       	rcall	.+0      	; 0x10a70 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0xe>
   10a70:	00 d0       	rcall	.+0      	; 0x10a72 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x10>
   10a72:	00 d0       	rcall	.+0      	; 0x10a74 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x12>
   10a74:	1f 92       	push	r1
   10a76:	cd b7       	in	r28, 0x3d	; 61
   10a78:	de b7       	in	r29, 0x3e	; 62
   10a7a:	fe 01       	movw	r30, r28
   10a7c:	31 96       	adiw	r30, 0x01	; 1
   10a7e:	ae 01       	movw	r20, r28
   10a80:	45 5f       	subi	r20, 0xF5	; 245
   10a82:	5f 4f       	sbci	r21, 0xFF	; 255
   10a84:	7f 01       	movw	r14, r30
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:84

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
	uint8_t count=0; 
	TCS_LOW; 
   10a86:	20 91 a7 0d 	lds	r18, 0x0DA7	; 0x800da7 <my_touch+0xf>
   10a8a:	30 91 a8 0d 	lds	r19, 0x0DA8	; 0x800da8 <my_touch+0x10>
   10a8e:	d9 01       	movw	r26, r18
   10a90:	6c 91       	ld	r22, X
   10a92:	90 91 b1 0d 	lds	r25, 0x0DB1	; 0x800db1 <my_touch+0x19>
   10a96:	90 95       	com	r25
   10a98:	96 23       	and	r25, r22
   10a9a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:85
	TCLK_LOW;           
   10a9c:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10aa0:	30 91 aa 0d 	lds	r19, 0x0DAA	; 0x800daa <my_touch+0x12>
   10aa4:	d9 01       	movw	r26, r18
   10aa6:	6c 91       	ld	r22, X
   10aa8:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10aac:	90 95       	com	r25
   10aae:	96 23       	and	r25, r22
   10ab0:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:86
	TDIN_LOW;
   10ab2:	20 91 ad 0d 	lds	r18, 0x0DAD	; 0x800dad <my_touch+0x15>
   10ab6:	30 91 ae 0d 	lds	r19, 0x0DAE	; 0x800dae <my_touch+0x16>
   10aba:	d9 01       	movw	r26, r18
   10abc:	6c 91       	ld	r22, X
   10abe:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1c>
   10ac2:	90 95       	com	r25
   10ac4:	96 23       	and	r25, r22
   10ac6:	9c 93       	st	X, r25
   10ac8:	28 e0       	ldi	r18, 0x08	; 8
   10aca:	30 e0       	ldi	r19, 0x00	; 0
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:63
	LCD_Set_Rotation(r);
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
   10acc:	10 e8       	ldi	r17, 0x80	; 128
   10ace:	60 91 ad 0d 	lds	r22, 0x0DAD	; 0x800dad <my_touch+0x15>
   10ad2:	70 91 ae 0d 	lds	r23, 0x0DAE	; 0x800dae <my_touch+0x16>
   10ad6:	90 91 b4 0d 	lds	r25, 0x0DB4	; 0x800db4 <my_touch+0x1c>
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
	while(val)
	{
		if(data&val)
   10ada:	08 2f       	mov	r16, r24
   10adc:	01 23       	and	r16, r17
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   10ade:	db 01       	movw	r26, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:66
void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
	{
		if(data&val)
   10ae0:	09 f4       	brne	.+2      	; 0x10ae4 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x82>
   10ae2:	b1 c0       	rjmp	.+354    	; 0x10c46 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x1e4>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:68
		{
			TDIN_HIGH; 
   10ae4:	0c 91       	ld	r16, X
   10ae6:	90 2b       	or	r25, r16
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		}
		else
		{
			TDIN_LOW;
   10ae8:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:74
		}
		TCLK_LOW;
   10aea:	60 91 a9 0d 	lds	r22, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10aee:	70 91 aa 0d 	lds	r23, 0x0DAA	; 0x800daa <my_touch+0x12>
   10af2:	db 01       	movw	r26, r22
   10af4:	0c 91       	ld	r16, X
   10af6:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10afa:	90 95       	com	r25
   10afc:	90 23       	and	r25, r16
   10afe:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:75
		TCLK_HIGH;
   10b00:	60 91 a9 0d 	lds	r22, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b04:	70 91 aa 0d 	lds	r23, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b08:	db 01       	movw	r26, r22
   10b0a:	9c 91       	ld	r25, X
   10b0c:	00 91 b2 0d 	lds	r16, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b10:	90 2b       	or	r25, r16
   10b12:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:76
		val >>= 1;
   10b14:	16 95       	lsr	r17
   10b16:	21 50       	subi	r18, 0x01	; 1
   10b18:	31 09       	sbc	r19, r1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:64
}

void LCDWIKI_TOUCH::TP_Write_Byte(uint8_t data)
{
	uint8_t val = 0x80;
	while(val)
   10b1a:	c9 f6       	brne	.-78     	; 0x10ace <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x6c>
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:89
	TCS_LOW; 
	TCLK_LOW;           
	TDIN_LOW;
	TP_Write_Byte(cmd);
	//delay_us(6);              
	TCLK_LOW; 
   10b1c:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b20:	30 91 aa 0d 	lds	r19, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b24:	d9 01       	movw	r26, r18
   10b26:	6c 91       	ld	r22, X
   10b28:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b2c:	90 95       	com	r25
   10b2e:	96 23       	and	r25, r22
   10b30:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:91
	delay_us(1); 
	TCLK_HIGH;
   10b32:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b36:	30 91 aa 0d 	lds	r19, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b3a:	d9 01       	movw	r26, r18
   10b3c:	9c 91       	ld	r25, X
   10b3e:	60 91 b2 0d 	lds	r22, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b42:	96 2b       	or	r25, r22
   10b44:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:92
	TCLK_LOW;
   10b46:	20 91 a9 0d 	lds	r18, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b4a:	30 91 aa 0d 	lds	r19, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b4e:	d9 01       	movw	r26, r18
   10b50:	6c 91       	ld	r22, X
   10b52:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b56:	90 95       	com	r25
   10b58:	96 23       	and	r25, r22
   10b5a:	9c 93       	st	X, r25
   10b5c:	60 e1       	ldi	r22, 0x10	; 16
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   10b5e:	30 e0       	ldi	r19, 0x00	; 0
   10b60:	20 e0       	ldi	r18, 0x00	; 0
TP_Read_ADC():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:95
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
	{   
	    num<<=1;          
   10b62:	22 0f       	add	r18, r18
   10b64:	33 1f       	adc	r19, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:96
	    TCLK_LOW;                         
   10b66:	00 91 a9 0d 	lds	r16, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b6a:	10 91 aa 0d 	lds	r17, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b6e:	d8 01       	movw	r26, r16
   10b70:	7c 91       	ld	r23, X
   10b72:	90 91 b2 0d 	lds	r25, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b76:	90 95       	com	r25
   10b78:	97 23       	and	r25, r23
   10b7a:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:97
	    TCLK_HIGH;
   10b7c:	00 91 a9 0d 	lds	r16, 0x0DA9	; 0x800da9 <my_touch+0x11>
   10b80:	10 91 aa 0d 	lds	r17, 0x0DAA	; 0x800daa <my_touch+0x12>
   10b84:	d8 01       	movw	r26, r16
   10b86:	9c 91       	ld	r25, X
   10b88:	70 91 b2 0d 	lds	r23, 0x0DB2	; 0x800db2 <my_touch+0x1a>
   10b8c:	97 2b       	or	r25, r23
   10b8e:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:98
	    if(TDOUT_STATE)
   10b90:	00 91 ab 0d 	lds	r16, 0x0DAB	; 0x800dab <my_touch+0x13>
   10b94:	10 91 ac 0d 	lds	r17, 0x0DAC	; 0x800dac <my_touch+0x14>
   10b98:	d8 01       	movw	r26, r16
   10b9a:	9c 91       	ld	r25, X
   10b9c:	70 91 b3 0d 	lds	r23, 0x0DB3	; 0x800db3 <my_touch+0x1b>
   10ba0:	97 23       	and	r25, r23
   10ba2:	11 f0       	breq	.+4      	; 0x10ba8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x146>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:100
	    {
	         num += 1;                  
   10ba4:	2f 5f       	subi	r18, 0xFF	; 255
   10ba6:	3f 4f       	sbci	r19, 0xFF	; 255
   10ba8:	61 50       	subi	r22, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:93
	//delay_us(6);              
	TCLK_LOW; 
	delay_us(1); 
	TCLK_HIGH;
	TCLK_LOW;
	for(count=0;count<16;count++)  
   10baa:	d9 f6       	brne	.-74     	; 0x10b62 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x100>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:108
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
    TCS_HIGH;   
   10bac:	60 91 a7 0d 	lds	r22, 0x0DA7	; 0x800da7 <my_touch+0xf>
   10bb0:	70 91 a8 0d 	lds	r23, 0x0DA8	; 0x800da8 <my_touch+0x10>
   10bb4:	db 01       	movw	r26, r22
   10bb6:	9c 91       	ld	r25, X
   10bb8:	10 91 b1 0d 	lds	r17, 0x0DB1	; 0x800db1 <my_touch+0x19>
   10bbc:	91 2b       	or	r25, r17
   10bbe:	9c 93       	st	X, r25
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:107
		else
		{
			num += 0; 
		}
	}
	num>>=4;   // the high 12 bits is valid
   10bc0:	94 e0       	ldi	r25, 0x04	; 4
   10bc2:	36 95       	lsr	r19
   10bc4:	27 95       	ror	r18
   10bc6:	9a 95       	dec	r25
   10bc8:	e1 f7       	brne	.-8      	; 0x10bc2 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x160>
_ZN13LCDWIKI_TOUCH10TP_Read_XYEh.constprop.121():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:122
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
   10bca:	d7 01       	movw	r26, r14
   10bcc:	2d 93       	st	X+, r18
   10bce:	3d 93       	st	X+, r19
   10bd0:	7d 01       	movw	r14, r26
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:120
{
 	uint16_t i, j;
 	uint16_t buf[READ_TIMES];
 	uint16_t sum=0;
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
   10bd2:	a4 17       	cp	r26, r20
   10bd4:	b5 07       	cpc	r27, r21
   10bd6:	09 f0       	breq	.+2      	; 0x10bda <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x178>
   10bd8:	56 cf       	rjmp	.-340    	; 0x10a86 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x24>
   10bda:	cf 01       	movw	r24, r30
   10bdc:	08 96       	adiw	r24, 0x08	; 8
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:82
	}
}

uint16_t LCDWIKI_TOUCH::TP_Read_ADC(uint8_t cmd)
{
	uint16_t num=0; 
   10bde:	df 01       	movw	r26, r30
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:128
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
       	{
        	if(buf[i]>buf[j])
   10be0:	20 81       	ld	r18, Z
   10be2:	31 81       	ldd	r19, Z+1	; 0x01
   10be4:	12 96       	adiw	r26, 0x02	; 2
   10be6:	4d 91       	ld	r20, X+
   10be8:	5c 91       	ld	r21, X
   10bea:	13 97       	sbiw	r26, 0x03	; 3
   10bec:	42 17       	cp	r20, r18
   10bee:	53 07       	cpc	r21, r19
   10bf0:	30 f4       	brcc	.+12     	; 0x10bfe <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x19c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:131
            {
             	temp=buf[i];
             	buf[i]=buf[j];
   10bf2:	51 83       	std	Z+1, r21	; 0x01
   10bf4:	40 83       	st	Z, r20
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:132
             	buf[j]=temp;
   10bf6:	13 96       	adiw	r26, 0x03	; 3
   10bf8:	3c 93       	st	X, r19
   10bfa:	2e 93       	st	-X, r18
   10bfc:	12 97       	sbiw	r26, 0x02	; 2
   10bfe:	12 96       	adiw	r26, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:126
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
 	{
  		for(j=i+1;j<READ_TIMES;j++)
   10c00:	8a 17       	cp	r24, r26
   10c02:	9b 07       	cpc	r25, r27
   10c04:	69 f7       	brne	.-38     	; 0x10be0 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17e>
   10c06:	32 96       	adiw	r30, 0x02	; 2
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:124
 	uint16_t temp;    
 	for(i=0;i<READ_TIMES;i++)
 	{                                 
  		buf[i]=TP_Read_ADC(xy);            
    }                                    
	for(i=0;i<READ_TIMES-1; i++)//Sort in ascending order
   10c08:	e8 17       	cp	r30, r24
   10c0a:	f9 07       	cpc	r31, r25
   10c0c:	41 f7       	brne	.-48     	; 0x10bde <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x17c>
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:138
          	}
      	}
  	}          
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++) //Remove maximum and minimum values
	{
		sum+=buf[i];
   10c0e:	8b 81       	ldd	r24, Y+3	; 0x03
   10c10:	9c 81       	ldd	r25, Y+4	; 0x04
   10c12:	2d 81       	ldd	r18, Y+5	; 0x05
   10c14:	3e 81       	ldd	r19, Y+6	; 0x06
   10c16:	82 0f       	add	r24, r18
   10c18:	93 1f       	adc	r25, r19
   10c1a:	2f 81       	ldd	r18, Y+7	; 0x07
   10c1c:	38 85       	ldd	r19, Y+8	; 0x08
   10c1e:	82 0f       	add	r24, r18
   10c20:	93 1f       	adc	r25, r19
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:140
	}
	temp=sum/(READ_TIMES-2*LOST_VAL);
   10c22:	63 e0       	ldi	r22, 0x03	; 3
   10c24:	70 e0       	ldi	r23, 0x00	; 0
   10c26:	0e 94 57 b4 	call	0x168ae	; 0x168ae <__udivmodhi4>
   10c2a:	cb 01       	movw	r24, r22
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:142
	return temp;   
} 
   10c2c:	2a 96       	adiw	r28, 0x0a	; 10
   10c2e:	0f b6       	in	r0, 0x3f	; 63
   10c30:	f8 94       	cli
   10c32:	de bf       	out	0x3e, r29	; 62
   10c34:	0f be       	out	0x3f, r0	; 63
   10c36:	cd bf       	out	0x3d, r28	; 61
   10c38:	df 91       	pop	r29
   10c3a:	cf 91       	pop	r28
   10c3c:	1f 91       	pop	r17
   10c3e:	0f 91       	pop	r16
   10c40:	ff 90       	pop	r15
   10c42:	ef 90       	pop	r14
   10c44:	08 95       	ret
TP_Write_Byte():
/home/saric/Arduino/libraries/LCDWIKI_TOUCH/LCDWIKI_TOUCH.cpp:72
		{
			TDIN_HIGH; 
		}
		else
		{
			TDIN_LOW;
   10c46:	0c 91       	ld	r16, X
   10c48:	90 95       	com	r25
   10c4a:	90 23       	and	r25, r16
   10c4c:	4d cf       	rjmp	.-358    	; 0x10ae8 <LCDWIKI_TOUCH::TP_Read_XY(unsigned char) [clone .constprop.121]+0x86>

00010c4e <TwoWire::write(int) [clone .constprop.99]>:
_ZN7TwoWire5writeEi.constprop.99():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.h:78
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
   10c4e:	68 2f       	mov	r22, r24
   10c50:	85 ef       	ldi	r24, 0xF5	; 245
   10c52:	9d e0       	ldi	r25, 0x0D	; 13
   10c54:	0c 94 81 80 	jmp	0x10102	; 0x10102 <TwoWire::write(unsigned char)>

00010c58 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]>:
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:747
}

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
   10c58:	0f 93       	push	r16
   10c5a:	1f 93       	push	r17
   10c5c:	cf 93       	push	r28
   10c5e:	df 93       	push	r29
   10c60:	00 d0       	rcall	.+0      	; 0x10c62 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xa>
   10c62:	00 d0       	rcall	.+0      	; 0x10c64 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0xc>
   10c64:	cd b7       	in	r28, 0x3d	; 61
   10c66:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:749
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
   10c68:	48 2f       	mov	r20, r24
   10c6a:	43 70       	andi	r20, 0x03	; 3
   10c6c:	50 e0       	ldi	r21, 0x00	; 0
   10c6e:	50 93 cd 0d 	sts	0x0DCD, r21	; 0x800dcd <my_lcd+0x17>
   10c72:	40 93 cc 0d 	sts	0x0DCC, r20	; 0x800dcc <my_lcd+0x16>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10c76:	28 2f       	mov	r18, r24
   10c78:	21 70       	andi	r18, 0x01	; 1
   10c7a:	80 ff       	sbrs	r24, 0
   10c7c:	3d c1       	rjmp	.+634    	; 0x10ef8 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2a0>
   10c7e:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0x10>
   10c82:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_lcd+0x11>
   10c86:	90 93 c9 0d 	sts	0x0DC9, r25	; 0x800dc9 <my_lcd+0x13>
   10c8a:	80 93 c8 0d 	sts	0x0DC8, r24	; 0x800dc8 <my_lcd+0x12>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:751
    height = (rotation & 1) ? WIDTH : HEIGHT;
   10c8e:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_lcd+0xe>
   10c92:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_lcd+0xf>
   10c96:	21 11       	cpse	r18, r1
   10c98:	04 c0       	rjmp	.+8      	; 0x10ca2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4a>
   10c9a:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0x10>
   10c9e:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_lcd+0x11>
   10ca2:	90 93 cb 0d 	sts	0x0DCB, r25	; 0x800dcb <my_lcd+0x15>
   10ca6:	80 93 ca 0d 	sts	0x0DCA, r24	; 0x800dca <my_lcd+0x14>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:752
	CS_ACTIVE;
   10caa:	a0 91 e4 0d 	lds	r26, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   10cae:	b0 91 e5 0d 	lds	r27, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   10cb2:	8c 91       	ld	r24, X
   10cb4:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x3a>
   10cb8:	89 23       	and	r24, r25
   10cba:	8c 93       	st	X, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:753
	if(lcd_driver == ID_932X)
   10cbc:	40 91 ce 0d 	lds	r20, 0x0DCE	; 0x800dce <my_lcd+0x18>
   10cc0:	50 91 cf 0d 	lds	r21, 0x0DCF	; 0x800dcf <my_lcd+0x19>
   10cc4:	80 91 cc 0d 	lds	r24, 0x0DCC	; 0x800dcc <my_lcd+0x16>
   10cc8:	90 91 cd 0d 	lds	r25, 0x0DCD	; 0x800dcd <my_lcd+0x17>
   10ccc:	a0 91 e6 0d 	lds	r26, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10cd0:	b0 91 e7 0d 	lds	r27, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10cd4:	20 91 f1 0d 	lds	r18, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
   10cd8:	41 15       	cp	r20, r1
   10cda:	51 05       	cpc	r21, r1
   10cdc:	09 f0       	breq	.+2      	; 0x10ce0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x88>
   10cde:	13 c1       	rjmp	.+550    	; 0x10f06 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2ae>
   10ce0:	01 97       	sbiw	r24, 0x01	; 1
   10ce2:	83 30       	cpi	r24, 0x03	; 3
   10ce4:	91 05       	cpc	r25, r1
   10ce6:	08 f0       	brcs	.+2      	; 0x10cea <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x92>
   10ce8:	0c c1       	rjmp	.+536    	; 0x10f02 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2aa>
   10cea:	88 0f       	add	r24, r24
   10cec:	99 1f       	adc	r25, r25
   10cee:	fc 01       	movw	r30, r24
   10cf0:	e0 5b       	subi	r30, 0xB0	; 176
   10cf2:	fd 4f       	sbci	r31, 0xFD	; 253
   10cf4:	90 81       	ld	r25, Z
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:771
				break;
		 	case 3 : 
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
   10cf6:	30 91 de 0d 	lds	r19, 0x0DDE	; 0x800dde <my_lcd+0x28>
   10cfa:	40 91 df 0d 	lds	r20, 0x0DDF	; 0x800ddf <my_lcd+0x29>
   10cfe:	8c 91       	ld	r24, X
   10d00:	28 23       	and	r18, r24
   10d02:	2c 93       	st	X, r18
   10d04:	42 b9       	out	0x02, r20	; 2
   10d06:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d0a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d0e:	80 81       	ld	r24, Z
   10d10:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10d14:	82 23       	and	r24, r18
   10d16:	80 83       	st	Z, r24
   10d18:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d1c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d20:	80 81       	ld	r24, Z
   10d22:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10d26:	82 2b       	or	r24, r18
   10d28:	80 83       	st	Z, r24
   10d2a:	32 b9       	out	0x02, r19	; 2
   10d2c:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d30:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d34:	80 81       	ld	r24, Z
   10d36:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10d3a:	82 23       	and	r24, r18
   10d3c:	80 83       	st	Z, r24
   10d3e:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d42:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d46:	80 81       	ld	r24, Z
   10d48:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10d4c:	82 2b       	or	r24, r18
   10d4e:	80 83       	st	Z, r24
   10d50:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10d54:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10d58:	80 81       	ld	r24, Z
   10d5a:	20 91 ed 0d 	lds	r18, 0x0DED	; 0x800ded <my_lcd+0x37>
   10d5e:	82 2b       	or	r24, r18
   10d60:	80 83       	st	Z, r24
   10d62:	80 e1       	ldi	r24, 0x10	; 16
   10d64:	82 b9       	out	0x02, r24	; 2
   10d66:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d6a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d6e:	80 81       	ld	r24, Z
   10d70:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10d74:	82 23       	and	r24, r18
   10d76:	80 83       	st	Z, r24
   10d78:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d7c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d80:	80 81       	ld	r24, Z
   10d82:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10d86:	82 2b       	or	r24, r18
   10d88:	80 83       	st	Z, r24
   10d8a:	92 b9       	out	0x02, r25	; 2
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10d8c:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10d90:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10d94:	80 81       	ld	r24, Z
   10d96:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10d9a:	89 23       	and	r24, r25
   10d9c:	80 83       	st	Z, r24
   10d9e:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10da2:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10da6:	80 81       	ld	r24, Z
   10da8:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10dac:	89 2b       	or	r24, r25
   10dae:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:874
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
   10db0:	00 91 ca 0d 	lds	r16, 0x0DCA	; 0x800dca <my_lcd+0x14>
   10db4:	10 91 cb 0d 	lds	r17, 0x0DCB	; 0x800dcb <my_lcd+0x15>
   10db8:	01 50       	subi	r16, 0x01	; 1
   10dba:	11 09       	sbc	r17, r1
   10dbc:	20 91 c8 0d 	lds	r18, 0x0DC8	; 0x800dc8 <my_lcd+0x12>
   10dc0:	30 91 c9 0d 	lds	r19, 0x0DC9	; 0x800dc9 <my_lcd+0x13>
   10dc4:	21 50       	subi	r18, 0x01	; 1
   10dc6:	31 09       	sbc	r19, r1
   10dc8:	50 e0       	ldi	r21, 0x00	; 0
   10dca:	40 e0       	ldi	r20, 0x00	; 0
   10dcc:	70 e0       	ldi	r23, 0x00	; 0
   10dce:	60 e0       	ldi	r22, 0x00	; 0
   10dd0:	86 eb       	ldi	r24, 0xB6	; 182
   10dd2:	9d e0       	ldi	r25, 0x0D	; 13
   10dd4:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <LCDWIKI_KBV::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:704
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
   10dd8:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <my_lcd+0x18>
   10ddc:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <my_lcd+0x19>
   10de0:	89 2b       	or	r24, r25
   10de2:	09 f0       	breq	.+2      	; 0x10de6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x18e>
   10de4:	9e c1       	rjmp	.+828    	; 0x11122 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ca>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:706
	{
		writeCmdData8(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
   10de6:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10dea:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10dee:	80 81       	ld	r24, Z
   10df0:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
   10df4:	89 23       	and	r24, r25
   10df6:	80 83       	st	Z, r24
   10df8:	80 91 da 0d 	lds	r24, 0x0DDA	; 0x800dda <my_lcd+0x24>
   10dfc:	82 b9       	out	0x02, r24	; 2
   10dfe:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e02:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e06:	80 81       	ld	r24, Z
   10e08:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10e0c:	89 23       	and	r24, r25
   10e0e:	80 83       	st	Z, r24
   10e10:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e14:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e18:	80 81       	ld	r24, Z
   10e1a:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10e1e:	89 2b       	or	r24, r25
   10e20:	80 83       	st	Z, r24
   10e22:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10e26:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10e2a:	80 81       	ld	r24, Z
   10e2c:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   10e30:	89 2b       	or	r24, r25
   10e32:	80 83       	st	Z, r24
   10e34:	83 e0       	ldi	r24, 0x03	; 3
   10e36:	82 b9       	out	0x02, r24	; 2
   10e38:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e3c:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e40:	80 81       	ld	r24, Z
   10e42:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10e46:	89 23       	and	r24, r25
   10e48:	80 83       	st	Z, r24
   10e4a:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e4e:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e52:	80 81       	ld	r24, Z
   10e54:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10e58:	89 2b       	or	r24, r25
   10e5a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:707
        writeCmdData8(SC2, vsp);        //VL#
   10e5c:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10e60:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10e64:	80 81       	ld	r24, Z
   10e66:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
   10e6a:	89 23       	and	r24, r25
   10e6c:	80 83       	st	Z, r24
   10e6e:	80 91 dc 0d 	lds	r24, 0x0DDC	; 0x800ddc <my_lcd+0x26>
   10e72:	82 b9       	out	0x02, r24	; 2
   10e74:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e78:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e7c:	80 81       	ld	r24, Z
   10e7e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10e82:	89 23       	and	r24, r25
   10e84:	80 83       	st	Z, r24
   10e86:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10e8a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10e8e:	80 81       	ld	r24, Z
   10e90:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10e94:	89 2b       	or	r24, r25
   10e96:	80 83       	st	Z, r24
   10e98:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10e9c:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10ea0:	80 81       	ld	r24, Z
   10ea2:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   10ea6:	89 2b       	or	r24, r25
   10ea8:	80 83       	st	Z, r24
   10eaa:	12 b8       	out	0x02, r1	; 2
   10eac:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10eb0:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10eb4:	80 81       	ld	r24, Z
   10eb6:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10eba:	89 23       	and	r24, r25
   10ebc:	80 83       	st	Z, r24
   10ebe:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10ec2:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10ec6:	80 81       	ld	r24, Z
   10ec8:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10ecc:	89 2b       	or	r24, r25
   10ece:	80 83       	st	Z, r24
_ZN11LCDWIKI_KBV12Set_RotationEh.constprop.74():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:876
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
   10ed0:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   10ed4:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   10ed8:	80 81       	ld	r24, Z
   10eda:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x36>
   10ede:	89 2b       	or	r24, r25
   10ee0:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:877
}
   10ee2:	26 96       	adiw	r28, 0x06	; 6
   10ee4:	0f b6       	in	r0, 0x3f	; 63
   10ee6:	f8 94       	cli
   10ee8:	de bf       	out	0x3e, r29	; 62
   10eea:	0f be       	out	0x3f, r0	; 63
   10eec:	cd bf       	out	0x3d, r28	; 61
   10eee:	df 91       	pop	r29
   10ef0:	cf 91       	pop	r28
   10ef2:	1f 91       	pop	r17
   10ef4:	0f 91       	pop	r16
   10ef6:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:750

//set clockwise rotation
void LCDWIKI_KBV::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
   10ef8:	80 91 c4 0d 	lds	r24, 0x0DC4	; 0x800dc4 <my_lcd+0xe>
   10efc:	90 91 c5 0d 	lds	r25, 0x0DC5	; 0x800dc5 <my_lcd+0xf>
   10f00:	c2 ce       	rjmp	.-636    	; 0x10c86 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:756
    height = (rotation & 1) ? WIDTH : HEIGHT;
	CS_ACTIVE;
	if(lcd_driver == ID_932X)
	{
		uint16_t val;
		switch(rotation) 
   10f02:	90 e3       	ldi	r25, 0x30	; 48
   10f04:	f8 ce       	rjmp	.-528    	; 0x10cf6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x9e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:773
				val = 0x1018;  //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
   10f06:	46 30       	cpi	r20, 0x06	; 6
   10f08:	51 05       	cpc	r21, r1
   10f0a:	99 f5       	brne	.+102    	; 0x10f72 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x31a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:782
		{
			case 0: 
				val = 0xD0; //0 degree 
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
   10f0c:	f0 ea       	ldi	r31, 0xA0	; 160
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10f0e:	81 30       	cpi	r24, 0x01	; 1
   10f10:	91 05       	cpc	r25, r1
   10f12:	51 f0       	breq	.+20     	; 0x10f28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:779
		{
			case 0: 
				val = 0xD0; //0 degree 
   10f14:	f0 ed       	ldi	r31, 0xD0	; 208
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10f16:	81 30       	cpi	r24, 0x01	; 1
   10f18:	91 05       	cpc	r25, r1
   10f1a:	30 f0       	brcs	.+12     	; 0x10f28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:785
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
				break;
		 	case 2: 
				val = 0x00; //180 degree 
   10f1c:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:776
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
	{
		uint8_t val;
		switch(rotation)
   10f1e:	82 30       	cpi	r24, 0x02	; 2
   10f20:	91 05       	cpc	r25, r1
   10f22:	11 f0       	breq	.+4      	; 0x10f28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
   10f24:	03 97       	sbiw	r24, 0x03	; 3
   10f26:	19 f1       	breq	.+70     	; 0x10f6e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x316>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:791
				break;
		 	case 3: 
				val = 0x60; //270 degree
				break;			
		}
		writeCmdData8(MD, val);
   10f28:	8c 91       	ld	r24, X
   10f2a:	28 23       	and	r18, r24
   10f2c:	2c 93       	st	X, r18
   10f2e:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x28>
   10f32:	82 b9       	out	0x02, r24	; 2
   10f34:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10f38:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10f3c:	8c 91       	ld	r24, X
   10f3e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10f42:	89 23       	and	r24, r25
   10f44:	8c 93       	st	X, r24
   10f46:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10f4a:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10f4e:	8c 91       	ld	r24, X
   10f50:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10f54:	89 2b       	or	r24, r25
   10f56:	8c 93       	st	X, r24
   10f58:	a0 91 e6 0d 	lds	r26, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10f5c:	b0 91 e7 0d 	lds	r27, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10f60:	8c 91       	ld	r24, X
   10f62:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   10f66:	89 2b       	or	r24, r25
   10f68:	8c 93       	st	X, r24
   10f6a:	f2 b9       	out	0x02, r31	; 2
   10f6c:	0f cf       	rjmp	.-482    	; 0x10d8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:788
				break;
		 	case 2: 
				val = 0x00; //180 degree 
				break;
		 	case 3: 
				val = 0x60; //270 degree
   10f6e:	f0 e6       	ldi	r31, 0x60	; 96
   10f70:	db cf       	rjmp	.-74     	; 0x10f28 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x2d0>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:793
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
   10f72:	48 30       	cpi	r20, 0x08	; 8
   10f74:	51 05       	cpc	r21, r1
   10f76:	99 f5       	brne	.+102    	; 0x10fde <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x386>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:802
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
   10f78:	eb e2       	ldi	r30, 0x2B	; 43
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10f7a:	81 30       	cpi	r24, 0x01	; 1
   10f7c:	91 05       	cpc	r25, r1
   10f7e:	51 f0       	breq	.+20     	; 0x10f94 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:799
		{
		   	case 0:
		     	val = 0x09; //0 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=0,VF=1
   10f80:	e9 e0       	ldi	r30, 0x09	; 9
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10f82:	81 30       	cpi	r24, 0x01	; 1
   10f84:	91 05       	cpc	r25, r1
   10f86:	30 f0       	brcs	.+12     	; 0x10f94 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:805
		     	break;
		   	case 1:
		     	val = 0x2B; //90 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=1,VF=1
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
   10f88:	ea e0       	ldi	r30, 0x0A	; 10
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:796
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_9481)
	{
		uint8_t val;
		switch (rotation) 
   10f8a:	82 30       	cpi	r24, 0x02	; 2
   10f8c:	91 05       	cpc	r25, r1
   10f8e:	11 f0       	breq	.+4      	; 0x10f94 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
   10f90:	03 97       	sbiw	r24, 0x03	; 3
   10f92:	19 f1       	breq	.+70     	; 0x10fda <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x382>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:811
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10f94:	8c 91       	ld	r24, X
   10f96:	28 23       	and	r18, r24
   10f98:	2c 93       	st	X, r18
   10f9a:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x28>
   10f9e:	82 b9       	out	0x02, r24	; 2
   10fa0:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10fa4:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10fa8:	8c 91       	ld	r24, X
   10faa:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   10fae:	89 23       	and	r24, r25
   10fb0:	8c 93       	st	X, r24
   10fb2:	a0 91 e8 0d 	lds	r26, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   10fb6:	b0 91 e9 0d 	lds	r27, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   10fba:	8c 91       	ld	r24, X
   10fbc:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   10fc0:	89 2b       	or	r24, r25
   10fc2:	8c 93       	st	X, r24
   10fc4:	a0 91 e6 0d 	lds	r26, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   10fc8:	b0 91 e7 0d 	lds	r27, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   10fcc:	8c 91       	ld	r24, X
   10fce:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   10fd2:	89 2b       	or	r24, r25
   10fd4:	8c 93       	st	X, r24
   10fd6:	e2 b9       	out	0x02, r30	; 2
   10fd8:	d9 ce       	rjmp	.-590    	; 0x10d8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:808
		     	break;
		 	case 2:
		    	val = 0x0A; //180 degree PAO=0,CAO=0,P/CO=0,VO=0,RGBO=1,DO=0,HF=1,VF=0
		    	break;
		   	case 3:
		     	val = 0x28; //270 degree PAO=0,CAO=0,P/CO=1,VO=0,RGBO=1,DO=0,HF=0,VF=0
   10fda:	e8 e2       	ldi	r30, 0x28	; 40
   10fdc:	db cf       	rjmp	.-74     	; 0x10f94 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x33c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:814
		     	break;
		 }
		 writeCmdData8(MD, val); 

	}
	else if(lcd_driver == ID_9486)
   10fde:	45 30       	cpi	r20, 0x05	; 5
   10fe0:	51 05       	cpc	r21, r1
   10fe2:	a1 f5       	brne	.+104    	; 0x1104c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f4>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:817
	{
		uint8_t val;
		switch (rotation) 
   10fe4:	81 30       	cpi	r24, 0x01	; 1
   10fe6:	91 05       	cpc	r25, r1
   10fe8:	49 f1       	breq	.+82     	; 0x1103c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e4>
   10fea:	70 f1       	brcs	.+92     	; 0x11048 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3f0>
   10fec:	82 30       	cpi	r24, 0x02	; 2
   10fee:	91 05       	cpc	r25, r1
   10ff0:	39 f1       	breq	.+78     	; 0x11040 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3e8>
   10ff2:	03 97       	sbiw	r24, 0x03	; 3
   10ff4:	39 f1       	breq	.+78     	; 0x11044 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x3ec>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:832
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   10ff6:	8c 91       	ld	r24, X
   10ff8:	28 23       	and	r18, r24
   10ffa:	2c 93       	st	X, r18
   10ffc:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x28>
   11000:	82 b9       	out	0x02, r24	; 2
   11002:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11006:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1100a:	80 81       	ld	r24, Z
   1100c:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   11010:	89 23       	and	r24, r25
   11012:	80 83       	st	Z, r24
   11014:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11018:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1101c:	80 81       	ld	r24, Z
   1101e:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   11022:	89 2b       	or	r24, r25
   11024:	80 83       	st	Z, r24
   11026:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   1102a:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   1102e:	80 81       	ld	r24, Z
   11030:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   11034:	89 2b       	or	r24, r25
   11036:	80 83       	st	Z, r24
   11038:	72 b9       	out	0x02, r23	; 2
   1103a:	a8 ce       	rjmp	.-688    	; 0x10d8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:823
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
   1103c:	78 e7       	ldi	r23, 0x78	; 120
   1103e:	db cf       	rjmp	.-74     	; 0x10ff6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:826
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
   11040:	78 ec       	ldi	r23, 0xC8	; 200
   11042:	d9 cf       	rjmp	.-78     	; 0x10ff6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:829
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   11044:	78 ea       	ldi	r23, 0xA8	; 168
   11046:	d7 cf       	rjmp	.-82     	; 0x10ff6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:820
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
   11048:	78 e0       	ldi	r23, 0x08	; 8
   1104a:	d5 cf       	rjmp	.-86     	; 0x10ff6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x39e>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:834
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
   1104c:	47 30       	cpi	r20, 0x07	; 7
   1104e:	51 05       	cpc	r21, r1
   11050:	a1 f5       	brne	.+104    	; 0x110ba <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x462>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:837
	{
		uint8_t val;
		switch (rotation) 
   11052:	81 30       	cpi	r24, 0x01	; 1
   11054:	91 05       	cpc	r25, r1
   11056:	49 f1       	breq	.+82     	; 0x110aa <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x452>
   11058:	70 f1       	brcs	.+92     	; 0x110b6 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45e>
   1105a:	82 30       	cpi	r24, 0x02	; 2
   1105c:	91 05       	cpc	r25, r1
   1105e:	39 f1       	breq	.+78     	; 0x110ae <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x456>
   11060:	03 97       	sbiw	r24, 0x03	; 3
   11062:	39 f1       	breq	.+78     	; 0x110b2 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x45a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:852
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   11064:	8c 91       	ld	r24, X
   11066:	28 23       	and	r18, r24
   11068:	2c 93       	st	X, r18
   1106a:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x28>
   1106e:	82 b9       	out	0x02, r24	; 2
   11070:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11074:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   11078:	80 81       	ld	r24, Z
   1107a:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   1107e:	89 23       	and	r24, r25
   11080:	80 83       	st	Z, r24
   11082:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11086:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1108a:	80 81       	ld	r24, Z
   1108c:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   11090:	89 2b       	or	r24, r25
   11092:	80 83       	st	Z, r24
   11094:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   11098:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   1109c:	80 81       	ld	r24, Z
   1109e:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   110a2:	89 2b       	or	r24, r25
   110a4:	80 83       	st	Z, r24
   110a6:	62 b9       	out	0x02, r22	; 2
   110a8:	71 ce       	rjmp	.-798    	; 0x10d8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:843
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
   110aa:	68 ea       	ldi	r22, 0xA8	; 168
   110ac:	db cf       	rjmp	.-74     	; 0x11064 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:846
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
   110ae:	68 e1       	ldi	r22, 0x18	; 24
   110b0:	d9 cf       	rjmp	.-78     	; 0x11064 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:849
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   110b2:	68 e7       	ldi	r22, 0x78	; 120
   110b4:	d7 cf       	rjmp	.-82     	; 0x11064 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:840
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
   110b6:	68 ec       	ldi	r22, 0xC8	; 200
   110b8:	d5 cf       	rjmp	.-86     	; 0x11064 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x40c>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:857
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
   110ba:	81 30       	cpi	r24, 0x01	; 1
   110bc:	91 05       	cpc	r25, r1
   110be:	49 f1       	breq	.+82     	; 0x11112 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4ba>
   110c0:	70 f1       	brcs	.+92     	; 0x1111e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c6>
   110c2:	82 30       	cpi	r24, 0x02	; 2
   110c4:	91 05       	cpc	r25, r1
   110c6:	39 f1       	breq	.+78     	; 0x11116 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4be>
   110c8:	03 97       	sbiw	r24, 0x03	; 3
   110ca:	39 f1       	breq	.+78     	; 0x1111a <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x4c2>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:872
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
   110cc:	8c 91       	ld	r24, X
   110ce:	28 23       	and	r18, r24
   110d0:	2c 93       	st	X, r18
   110d2:	80 91 de 0d 	lds	r24, 0x0DDE	; 0x800dde <my_lcd+0x28>
   110d6:	82 b9       	out	0x02, r24	; 2
   110d8:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   110dc:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   110e0:	80 81       	ld	r24, Z
   110e2:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   110e6:	89 23       	and	r24, r25
   110e8:	80 83       	st	Z, r24
   110ea:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   110ee:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   110f2:	80 81       	ld	r24, Z
   110f4:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   110f8:	89 2b       	or	r24, r25
   110fa:	80 83       	st	Z, r24
   110fc:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   11100:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   11104:	80 81       	ld	r24, Z
   11106:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   1110a:	89 2b       	or	r24, r25
   1110c:	80 83       	st	Z, r24
   1110e:	32 b9       	out	0x02, r19	; 2
   11110:	3d ce       	rjmp	.-902    	; 0x10d8c <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x134>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:863
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
   11112:	38 e2       	ldi	r19, 0x28	; 40
   11114:	db cf       	rjmp	.-74     	; 0x110cc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:866
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
   11116:	38 e9       	ldi	r19, 0x98	; 152
   11118:	d9 cf       	rjmp	.-78     	; 0x110cc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:869
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
   1111a:	38 ef       	ldi	r19, 0xF8	; 248
   1111c:	d7 cf       	rjmp	.-82     	; 0x110cc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:860
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
   1111e:	38 e4       	ldi	r19, 0x48	; 72
   11120:	d5 cf       	rjmp	.-86     	; 0x110cc <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x474>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:875
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
   11122:	80 91 c6 0d 	lds	r24, 0x0DC6	; 0x800dc6 <my_lcd+0x10>
   11126:	90 91 c7 0d 	lds	r25, 0x0DC7	; 0x800dc7 <my_lcd+0x11>
Vert_Scroll():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:712
        writeCmdData8(SC2, vsp);        //VL#
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
   1112a:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:713
  		d[1] = top;
   1112c:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:714
  		d[2] = scrollines >> 8; //VSA
   1112e:	9b 83       	std	Y+3, r25	; 0x03
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:715
  		d[3] = scrollines;
   11130:	8c 83       	std	Y+4, r24	; 0x04
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:716
  		d[4] = bfa >> 8;        //BFA
   11132:	1d 82       	std	Y+5, r1	; 0x05
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:717
  		d[5] = bfa;
   11134:	1e 82       	std	Y+6, r1	; 0x06
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:718
		Push_Command(SC1, d, 6);
   11136:	60 91 da 0d 	lds	r22, 0x0DDA	; 0x800dda <my_lcd+0x24>
   1113a:	70 91 db 0d 	lds	r23, 0x0DDB	; 0x800ddb <my_lcd+0x25>
   1113e:	26 e0       	ldi	r18, 0x06	; 6
   11140:	ae 01       	movw	r20, r28
   11142:	4f 5f       	subi	r20, 0xFF	; 255
   11144:	5f 4f       	sbci	r21, 0xFF	; 255
   11146:	86 eb       	ldi	r24, 0xB6	; 182
   11148:	9d e0       	ldi	r25, 0x0D	; 13
   1114a:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:719
		d[0] = vsp >> 8;        //VSP
   1114e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:720
  		d[1] = vsp;
   11150:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:721
		Push_Command(SC2, d, 2);
   11152:	60 91 dc 0d 	lds	r22, 0x0DDC	; 0x800ddc <my_lcd+0x26>
   11156:	70 91 dd 0d 	lds	r23, 0x0DDD	; 0x800ddd <my_lcd+0x27>
   1115a:	22 e0       	ldi	r18, 0x02	; 2
   1115c:	ae 01       	movw	r20, r28
   1115e:	4f 5f       	subi	r20, 0xFF	; 255
   11160:	5f 4f       	sbci	r21, 0xFF	; 255
   11162:	86 eb       	ldi	r24, 0xB6	; 182
   11164:	9d e0       	ldi	r25, 0x0D	; 13
   11166:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:722
		if(lcd_driver == ID_7575)
   1116a:	80 91 ce 0d 	lds	r24, 0x0DCE	; 0x800dce <my_lcd+0x18>
   1116e:	90 91 cf 0d 	lds	r25, 0x0DCF	; 0x800dcf <my_lcd+0x19>
   11172:	01 97       	sbiw	r24, 0x01	; 1
   11174:	61 f4       	brne	.+24     	; 0x1118e <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x536>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:724
		{
			d[0] = (offset != 0) ? 0x08:0;
   11176:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:725
			Push_Command(0x01, d, 1);
   11178:	21 e0       	ldi	r18, 0x01	; 1
   1117a:	ae 01       	movw	r20, r28
   1117c:	4f 5f       	subi	r20, 0xFF	; 255
   1117e:	5f 4f       	sbci	r21, 0xFF	; 255
   11180:	61 e0       	ldi	r22, 0x01	; 1
   11182:	70 e0       	ldi	r23, 0x00	; 0
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:729
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
   11184:	86 eb       	ldi	r24, 0xB6	; 182
   11186:	9d e0       	ldi	r25, 0x0D	; 13
   11188:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <LCDWIKI_KBV::Push_Command(unsigned int, unsigned char*, signed char)>
   1118c:	a1 ce       	rjmp	.-702    	; 0x10ed0 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x278>
   1118e:	20 e0       	ldi	r18, 0x00	; 0
   11190:	50 e0       	ldi	r21, 0x00	; 0
   11192:	40 e0       	ldi	r20, 0x00	; 0
   11194:	63 e1       	ldi	r22, 0x13	; 19
   11196:	70 e0       	ldi	r23, 0x00	; 0
   11198:	f5 cf       	rjmp	.-22     	; 0x11184 <LCDWIKI_KBV::Set_Rotation(unsigned char) [clone .constprop.74]+0x52c>

0001119a <log_error(PubSubClient*, char*) [clone .constprop.60]>:
_Z9log_errorP12PubSubClientPc.constprop.60():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:450
    send_mqtt_general_payload(mqtt_get_public_mqtt_client(), topic, mqtt_log);
    mqtt_log_cnt = 0;
  }
}
///////////////////////////////////////////////////////////////////////////
void log_error(PubSubClient *mqtt_client, char *log)
   1119a:	0f 93       	push	r16
   1119c:	1f 93       	push	r17
   1119e:	cf 93       	push	r28
   111a0:	df 93       	push	r29
   111a2:	cd b7       	in	r28, 0x3d	; 61
   111a4:	de b7       	in	r29, 0x3e	; 62
   111a6:	60 97       	sbiw	r28, 0x10	; 16
   111a8:	0f b6       	in	r0, 0x3f	; 63
   111aa:	f8 94       	cli
   111ac:	de bf       	out	0x3e, r29	; 62
   111ae:	0f be       	out	0x3f, r0	; 63
   111b0:	cd bf       	out	0x3d, r28	; 61
   111b2:	8c 01       	movw	r16, r24
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:453
{
  char topic[16];
  strcpy(topic, "log-app");
   111b4:	63 ef       	ldi	r22, 0xF3	; 243
   111b6:	76 e0       	ldi	r23, 0x06	; 6
   111b8:	ce 01       	movw	r24, r28
   111ba:	01 96       	adiw	r24, 0x01	; 1
   111bc:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:454
  send_mqtt_general_payload(mqtt_client, topic, log);
   111c0:	a8 01       	movw	r20, r16
   111c2:	be 01       	movw	r22, r28
   111c4:	6f 5f       	subi	r22, 0xFF	; 255
   111c6:	7f 4f       	sbci	r23, 0xFF	; 255
   111c8:	8e e0       	ldi	r24, 0x0E	; 14
   111ca:	9e e0       	ldi	r25, 0x0E	; 14
   111cc:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:455
}
   111d0:	60 96       	adiw	r28, 0x10	; 16
   111d2:	0f b6       	in	r0, 0x3f	; 63
   111d4:	f8 94       	cli
   111d6:	de bf       	out	0x3e, r29	; 62
   111d8:	0f be       	out	0x3f, r0	; 63
   111da:	cd bf       	out	0x3d, r28	; 61
   111dc:	df 91       	pop	r29
   111de:	cf 91       	pop	r28
   111e0:	1f 91       	pop	r17
   111e2:	0f 91       	pop	r16
   111e4:	08 95       	ret

000111e6 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]>:
_Z10parseBytesPKccPhii.constprop.59():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:100
  data.f = x;
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
   111e6:	cf 92       	push	r12
   111e8:	df 92       	push	r13
   111ea:	ef 92       	push	r14
   111ec:	ff 92       	push	r15
   111ee:	0f 93       	push	r16
   111f0:	1f 93       	push	r17
   111f2:	cf 93       	push	r28
   111f4:	df 93       	push	r29
   111f6:	8b 01       	movw	r16, r22
   111f8:	7b 01       	movw	r14, r22
   111fa:	e4 0e       	add	r14, r20
   111fc:	f5 1e       	adc	r15, r21
   111fe:	c7 ed       	ldi	r28, 0xD7	; 215
   11200:	da e0       	ldi	r29, 0x0A	; 10
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
    str = strchr(str, sep);               // Find next separator
   11202:	c8 2e       	mov	r12, r24
   11204:	88 0f       	add	r24, r24
   11206:	dd 08       	sbc	r13, r13
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:102
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
    bytes[i] = strtoul(str, NULL, base);  // Convert byte
   11208:	4a e0       	ldi	r20, 0x0A	; 10
   1120a:	50 e0       	ldi	r21, 0x00	; 0
   1120c:	70 e0       	ldi	r23, 0x00	; 0
   1120e:	60 e0       	ldi	r22, 0x00	; 0
   11210:	ce 01       	movw	r24, r28
   11212:	0e 94 57 a9 	call	0x152ae	; 0x152ae <strtoul>
   11216:	f8 01       	movw	r30, r16
   11218:	61 93       	st	Z+, r22
   1121a:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:103
    str = strchr(str, sep);               // Find next separator
   1121c:	b6 01       	movw	r22, r12
   1121e:	ce 01       	movw	r24, r28
   11220:	0e 94 02 b7 	call	0x16e04	; 0x16e04 <strchr>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:104
    if (str == NULL || *str == '\0') {
   11224:	00 97       	sbiw	r24, 0x00	; 0
   11226:	49 f0       	breq	.+18     	; 0x1123a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
   11228:	fc 01       	movw	r30, r24
   1122a:	20 81       	ld	r18, Z
   1122c:	22 23       	and	r18, r18
   1122e:	29 f0       	breq	.+10     	; 0x1123a <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x54>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:107
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
   11230:	ec 01       	movw	r28, r24
   11232:	21 96       	adiw	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:101
  for (int i = 0; i < 4; i++) ar[i] = data.b[i];
}


void parseBytes(const char* str, char sep, uint8_t* bytes, int maxBytes, int base) {
  for (int i = 0; i < maxBytes; i++) {
   11234:	0e 15       	cp	r16, r14
   11236:	1f 05       	cpc	r17, r15
   11238:	39 f7       	brne	.-50     	; 0x11208 <parseBytes(char const*, char, unsigned char*, int, int) [clone .constprop.59]+0x22>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:109
    if (str == NULL || *str == '\0') {
      break;                            // No more separators, exit
    }
    str++;                                // Point to next character after separator
  }
}
   1123a:	df 91       	pop	r29
   1123c:	cf 91       	pop	r28
   1123e:	1f 91       	pop	r17
   11240:	0f 91       	pop	r16
   11242:	ff 90       	pop	r15
   11244:	ef 90       	pop	r14
   11246:	df 90       	pop	r13
   11248:	cf 90       	pop	r12
   1124a:	08 95       	ret

0001124c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>:
_ZN10W5500Class13getTXFreeSizeEh.constprop.27():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:43
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
  }
}

uint16_t W5500Class::getTXFreeSize(SOCKET s)
   1124c:	ff 92       	push	r15
   1124e:	0f 93       	push	r16
   11250:	1f 93       	push	r17
   11252:	cf 93       	push	r28
   11254:	df 93       	push	r29
   11256:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:45
{
    uint16_t val=0, val1=0;
   11258:	10 e0       	ldi	r17, 0x00	; 0
   1125a:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:47
    do {
        val1 = readSnTX_FSR(s);
   1125c:	8f 2d       	mov	r24, r15
   1125e:	0e 94 23 83 	call	0x10646	; 0x10646 <W5500Class::readSnTX_FSR(unsigned char)>
   11262:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:48
        if (val1 != 0)
   11264:	89 2b       	or	r24, r25
   11266:	21 f0       	breq	.+8      	; 0x11270 <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:49
            val = readSnTX_FSR(s);
   11268:	8f 2d       	mov	r24, r15
   1126a:	0e 94 23 83 	call	0x10646	; 0x10646 <W5500Class::readSnTX_FSR(unsigned char)>
   1126e:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:51
    } 
    while (val != val1);
   11270:	c0 17       	cp	r28, r16
   11272:	d1 07       	cpc	r29, r17
   11274:	99 f7       	brne	.-26     	; 0x1125c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:53
    return val;
}
   11276:	ce 01       	movw	r24, r28
   11278:	df 91       	pop	r29
   1127a:	cf 91       	pop	r28
   1127c:	1f 91       	pop	r17
   1127e:	0f 91       	pop	r16
   11280:	ff 90       	pop	r15
   11282:	08 95       	ret

00011284 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>:
_ZN10W5500Class17getRXReceivedSizeEh.constprop.23():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:55

uint16_t W5500Class::getRXReceivedSize(SOCKET s)
   11284:	ff 92       	push	r15
   11286:	0f 93       	push	r16
   11288:	1f 93       	push	r17
   1128a:	cf 93       	push	r28
   1128c:	df 93       	push	r29
   1128e:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:57
{
    uint16_t val=0,val1=0;
   11290:	10 e0       	ldi	r17, 0x00	; 0
   11292:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:59
    do {
        val1 = readSnRX_RSR(s);
   11294:	8f 2d       	mov	r24, r15
   11296:	0e 94 0b 83 	call	0x10616	; 0x10616 <W5500Class::readSnRX_RSR(unsigned char)>
   1129a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:60
        if (val1 != 0)
   1129c:	89 2b       	or	r24, r25
   1129e:	21 f0       	breq	.+8      	; 0x112a8 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:61
            val = readSnRX_RSR(s);
   112a0:	8f 2d       	mov	r24, r15
   112a2:	0e 94 0b 83 	call	0x10616	; 0x10616 <W5500Class::readSnRX_RSR(unsigned char)>
   112a6:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:63
    } 
    while (val != val1);
   112a8:	c0 17       	cp	r28, r16
   112aa:	d1 07       	cpc	r29, r17
   112ac:	99 f7       	brne	.-26     	; 0x11294 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:65
    return val;
}
   112ae:	ce 01       	movw	r24, r28
   112b0:	df 91       	pop	r29
   112b2:	cf 91       	pop	r28
   112b4:	1f 91       	pop	r17
   112b6:	0f 91       	pop	r16
   112b8:	ff 90       	pop	r15
   112ba:	08 95       	ret

000112bc <turnOffPWM.lto_priv.233>:
turnOffPWM.lto_priv.233():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
   112bc:	82 50       	subi	r24, 0x02	; 2
   112be:	82 31       	cpi	r24, 0x12	; 18
   112c0:	08 f0       	brcs	.+2      	; 0x112c4 <turnOffPWM.lto_priv.233+0x8>
   112c2:	5f c0       	rjmp	.+190    	; 0x11382 <turnOffPWM.lto_priv.233+0xc6>
   112c4:	e8 2f       	mov	r30, r24
   112c6:	f0 e0       	ldi	r31, 0x00	; 0
   112c8:	88 27       	eor	r24, r24
   112ca:	e6 59       	subi	r30, 0x96	; 150
   112cc:	f6 47       	sbci	r31, 0x76	; 118
   112ce:	8f 4f       	sbci	r24, 0xFF	; 255
   112d0:	0c 94 00 b6 	jmp	0x16c00	; 0x16c00 <__tablejump2__>
   112d4:	be 89       	ldd	r27, Y+22	; 0x16
   112d6:	c2 89       	ldd	r28, Z+18	; 0x12
   112d8:	7c 89       	ldd	r23, Y+20	; 0x14
   112da:	82 89       	ldd	r24, Z+18	; 0x12
   112dc:	86 89       	ldd	r24, Z+22	; 0x16
   112de:	c1 89       	ldd	r28, Z+17	; 0x11
   112e0:	8a 89       	ldd	r24, Y+18	; 0x12
   112e2:	90 89       	ldd	r25, Z+16	; 0x10
   112e4:	94 89       	ldd	r25, Z+20	; 0x14
   112e6:	9a 89       	ldd	r25, Y+18	; 0x12
   112e8:	9e 89       	ldd	r25, Y+22	; 0x16
   112ea:	a2 89       	ldd	r26, Z+18	; 0x12
   112ec:	a8 89       	ldd	r26, Y+16	; 0x10
   112ee:	ac 89       	ldd	r26, Y+20	; 0x14
   112f0:	c1 89       	ldd	r28, Z+17	; 0x11
   112f2:	b0 89       	ldd	r27, Z+16	; 0x10
   112f4:	b6 89       	ldd	r27, Z+22	; 0x16
   112f6:	ba 89       	ldd	r27, Y+18	; 0x12
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
   112f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   112fc:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
   112fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11302:	08 95       	ret
   11304:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11308:	8f 7d       	andi	r24, 0xDF	; 223
   1130a:	f9 cf       	rjmp	.-14     	; 0x112fe <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
   1130c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   11310:	87 7f       	andi	r24, 0xF7	; 247
   11312:	f5 cf       	rjmp	.-22     	; 0x112fe <turnOffPWM.lto_priv.233+0x42>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
   11314:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   11318:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
   1131a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   1131e:	08 95       	ret
   11320:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   11324:	8f 7d       	andi	r24, 0xDF	; 223
   11326:	f9 cf       	rjmp	.-14     	; 0x1131a <turnOffPWM.lto_priv.233+0x5e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
   11328:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   1132c:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1132e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11332:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
   11334:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11338:	8f 7d       	andi	r24, 0xDF	; 223
   1133a:	f9 cf       	rjmp	.-14     	; 0x1132e <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
   1133c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   11340:	87 7f       	andi	r24, 0xF7	; 247
   11342:	f5 cf       	rjmp	.-22     	; 0x1132e <turnOffPWM.lto_priv.233+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
   11344:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   11348:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   1134a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1134e:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
   11350:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   11354:	8f 7d       	andi	r24, 0xDF	; 223
   11356:	f9 cf       	rjmp	.-14     	; 0x1134a <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
   11358:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   1135c:	87 7f       	andi	r24, 0xF7	; 247
   1135e:	f5 cf       	rjmp	.-22     	; 0x1134a <turnOffPWM.lto_priv.233+0x8e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
   11360:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   11364:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   11366:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   1136a:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
   1136c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   11370:	8f 7d       	andi	r24, 0xDF	; 223
   11372:	f9 cf       	rjmp	.-14     	; 0x11366 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
   11374:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   11378:	87 7f       	andi	r24, 0xF7	; 247
   1137a:	f5 cf       	rjmp	.-22     	; 0x11366 <turnOffPWM.lto_priv.233+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
   1137c:	84 b5       	in	r24, 0x24	; 36
   1137e:	8f 77       	andi	r24, 0x7F	; 127
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   11380:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
   11382:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
   11384:	84 b5       	in	r24, 0x24	; 36
   11386:	8f 7d       	andi	r24, 0xDF	; 223
   11388:	fb cf       	rjmp	.-10     	; 0x11380 <turnOffPWM.lto_priv.233+0xc4>

0001138a <digitalWrite>:
digitalWrite():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   1138a:	1f 93       	push	r17
   1138c:	cf 93       	push	r28
   1138e:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
   11390:	28 2f       	mov	r18, r24
   11392:	30 e0       	ldi	r19, 0x00	; 0
   11394:	f9 01       	movw	r30, r18
   11396:	e3 5d       	subi	r30, 0xD3	; 211
   11398:	f9 4c       	sbci	r31, 0xC9	; 201
   1139a:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
   1139c:	f9 01       	movw	r30, r18
   1139e:	e2 59       	subi	r30, 0x92	; 146
   113a0:	f4 4c       	sbci	r31, 0xC4	; 196
   113a2:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
   113a4:	f9 01       	movw	r30, r18
   113a6:	ec 54       	subi	r30, 0x4C	; 76
   113a8:	f4 4c       	sbci	r31, 0xC4	; 196
   113aa:	c4 91       	lpm	r28, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
   113ac:	cc 23       	and	r28, r28
   113ae:	a9 f0       	breq	.+42     	; 0x113da <digitalWrite+0x50>
   113b0:	16 2f       	mov	r17, r22
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
   113b2:	81 11       	cpse	r24, r1
   113b4:	0e 94 5e 89 	call	0x112bc	; 0x112bc <turnOffPWM.lto_priv.233>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
   113b8:	ec 2f       	mov	r30, r28
   113ba:	f0 e0       	ldi	r31, 0x00	; 0
   113bc:	ee 0f       	add	r30, r30
   113be:	ff 1f       	adc	r31, r31
   113c0:	ec 55       	subi	r30, 0x5C	; 92
   113c2:	f4 4c       	sbci	r31, 0xC4	; 196
   113c4:	a5 91       	lpm	r26, Z+
   113c6:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
   113c8:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
   113ca:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
   113cc:	ec 91       	ld	r30, X
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
   113ce:	11 11       	cpse	r17, r1
   113d0:	08 c0       	rjmp	.+16     	; 0x113e2 <digitalWrite+0x58>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
   113d2:	d0 95       	com	r29
   113d4:	de 23       	and	r29, r30
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
   113d6:	dc 93       	st	X, r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
   113d8:	8f bf       	out	0x3f, r24	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:212
}
   113da:	df 91       	pop	r29
   113dc:	cf 91       	pop	r28
   113de:	1f 91       	pop	r17
   113e0:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
   113e2:	de 2b       	or	r29, r30
   113e4:	f8 cf       	rjmp	.-16     	; 0x113d6 <digitalWrite+0x4c>

000113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>:
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:78
  endCommand();

  return(ret);
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
   113e6:	cf 92       	push	r12
   113e8:	df 92       	push	r13
   113ea:	ef 92       	push	r14
   113ec:	ff 92       	push	r15
   113ee:	cf 93       	push	r28
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:80
{
  if (address >= _capacity) {
   113f0:	c0 90 80 0c 	lds	r12, 0x0C80	; 0x800c80 <SRAM+0x4>
   113f4:	d0 90 81 0c 	lds	r13, 0x0C81	; 0x800c81 <SRAM+0x5>
   113f8:	e0 90 82 0c 	lds	r14, 0x0C82	; 0x800c82 <SRAM+0x6>
   113fc:	f0 90 83 0c 	lds	r15, 0x0C83	; 0x800c83 <SRAM+0x7>
   11400:	6c 15       	cp	r22, r12
   11402:	7d 05       	cpc	r23, r13
   11404:	8e 05       	cpc	r24, r14
   11406:	9f 05       	cpc	r25, r15
   11408:	38 f5       	brcc	.+78     	; 0x11458 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x72>
   1140a:	c4 2f       	mov	r28, r20
   1140c:	6b 01       	movw	r12, r22
   1140e:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   11410:	60 e0       	ldi	r22, 0x00	; 0
   11412:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
   11416:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1141a:	62 e0       	ldi	r22, 0x02	; 2
   1141c:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   11420:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   11424:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   11428:	c7 01       	movw	r24, r14
   1142a:	b6 01       	movw	r22, r12
   1142c:	0e 94 4f 84 	call	0x1089e	; 0x1089e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:85
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
   11430:	6c 2f       	mov	r22, r28
   11432:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   11436:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   1143a:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   1143e:	61 e0       	ldi	r22, 0x01	; 1
   11440:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
   11444:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
   11448:	81 e0       	ldi	r24, 0x01	; 1
   1144a:	90 e0       	ldi	r25, 0x00	; 0
_ZN9SRAM_23LC9writeByteEmh.constprop.180():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:88

  startCommand(SRAM_23LC_COMMAND_WRITE, address);
  _spi->transfer(byte);
  endCommand();
  return(1);
}
   1144c:	cf 91       	pop	r28
   1144e:	ff 90       	pop	r15
   11450:	ef 90       	pop	r14
   11452:	df 90       	pop	r13
   11454:	cf 90       	pop	r12
   11456:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:81
}

size_t SRAM_23LC::writeByte(const uint32_t address, const uint8_t byte)
{
  if (address >= _capacity) {
    return(0);
   11458:	90 e0       	ldi	r25, 0x00	; 0
   1145a:	80 e0       	ldi	r24, 0x00	; 0
   1145c:	f7 cf       	rjmp	.-18     	; 0x1144c <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]+0x66>

0001145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>:
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:65
void SRAM_23LC::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
   1145e:	cf 92       	push	r12
   11460:	df 92       	push	r13
   11462:	ef 92       	push	r14
   11464:	ff 92       	push	r15
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:67
{
  if (address >= _capacity) {
   11466:	c0 90 80 0c 	lds	r12, 0x0C80	; 0x800c80 <SRAM+0x4>
   1146a:	d0 90 81 0c 	lds	r13, 0x0C81	; 0x800c81 <SRAM+0x5>
   1146e:	e0 90 82 0c 	lds	r14, 0x0C82	; 0x800c82 <SRAM+0x6>
   11472:	f0 90 83 0c 	lds	r15, 0x0C83	; 0x800c83 <SRAM+0x7>
   11476:	6c 15       	cp	r22, r12
   11478:	7d 05       	cpc	r23, r13
   1147a:	8e 05       	cpc	r24, r14
   1147c:	9f 05       	cpc	r25, r15
   1147e:	28 f5       	brcc	.+74     	; 0x114ca <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x6c>
   11480:	6b 01       	movw	r12, r22
   11482:	7c 01       	movw	r14, r24
startCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:125
}

void SRAM_23LC::startCommand(const uint8_t command, const uint32_t address)
{
  //_spi->beginTransaction(_spiSettings);
  digitalWrite(_chipSelect, LOW);
   11484:	60 e0       	ldi	r22, 0x00	; 0
   11486:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
   1148a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:127

  _spi->transfer(command);
   1148e:	63 e0       	ldi	r22, 0x03	; 3
   11490:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   11494:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   11498:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:129
  if (command == SRAM_23LC_COMMAND_READ || command == SRAM_23LC_COMMAND_WRITE) {
    sendAddressBytes(address);
   1149c:	c7 01       	movw	r24, r14
   1149e:	b6 01       	movw	r22, r12
   114a0:	0e 94 4f 84 	call	0x1089e	; 0x1089e <SRAM_23LC::sendAddressBytes(unsigned long) [clone .constprop.184]>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:72
  if (address >= _capacity) {
    return(0);
  }

  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
   114a4:	6f ef       	ldi	r22, 0xFF	; 255
   114a6:	80 91 7c 0c 	lds	r24, 0x0C7C	; 0x800c7c <SRAM>
   114aa:	90 91 7d 0c 	lds	r25, 0x0C7D	; 0x800c7d <SRAM+0x1>
   114ae:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
   114b2:	f8 2e       	mov	r15, r24
endCommand():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:144
  _spi->transfer((uint8_t)(address & 0xFF));
}

void SRAM_23LC::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   114b4:	61 e0       	ldi	r22, 0x01	; 1
   114b6:	80 91 84 0c 	lds	r24, 0x0C84	; 0x800c84 <SRAM+0x8>
   114ba:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
_ZN9SRAM_23LC8readByteEm.constprop.178():
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:76
  startCommand(SRAM_23LC_COMMAND_READ, address);
  uint8_t ret = _spi->transfer(SRAM_23LC_DUMMY_BYTE);
  endCommand();

  return(ret);
}
   114be:	8f 2d       	mov	r24, r15
   114c0:	ff 90       	pop	r15
   114c2:	ef 90       	pop	r14
   114c4:	df 90       	pop	r13
   114c6:	cf 90       	pop	r12
   114c8:	08 95       	ret
/home/saric/Arduino/libraries/SRAM_23LC/src/SRAM_23LC.cpp:68
}

uint8_t SRAM_23LC::readByte(const uint32_t address)
{
  if (address >= _capacity) {
    return(0);
   114ca:	f1 2c       	mov	r15, r1
   114cc:	f8 cf       	rjmp	.-16     	; 0x114be <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]+0x60>

000114ce <EEPROM_CAT25::endCommand() [clone .constprop.90]>:
_ZN12EEPROM_CAT2510endCommandEv.constprop.90():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:215
  _spi->transfer((uint8_t)(address & 0xFF));
}

void EEPROM_CAT25::endCommand(void)
{
  digitalWrite(_chipSelect, HIGH);
   114ce:	61 e0       	ldi	r22, 0x01	; 1
   114d0:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <SROM+0xa>
   114d4:	0c 94 c5 89 	jmp	0x1138a	; 0x1138a <digitalWrite>

000114d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>:
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:180
  endCommand();

  return(length);
}

void EEPROM_CAT25::startCommand(uint8_t command, const uint32_t address)
   114d8:	cf 93       	push	r28
   114da:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:183
{
  //_spi->beginTransaction();
  digitalWrite(_chipSelect, LOW);
   114dc:	60 e0       	ldi	r22, 0x00	; 0
   114de:	80 91 77 0c 	lds	r24, 0x0C77	; 0x800c77 <SROM+0xa>
   114e2:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:193
    } else if (command == EEPROM_CAT25_COMMAND_WRITE) {
      command = EEPROM_CAT25_COMMAND_WRITE_A8_HIGH;
    }
  }

  _spi->transfer(command);
   114e6:	6c 2f       	mov	r22, r28
   114e8:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
   114ec:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
   114f0:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:195

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
   114f4:	c2 50       	subi	r28, 0x02	; 2
   114f6:	c2 30       	cpi	r28, 0x02	; 2
   114f8:	a8 f5       	brcc	.+106    	; 0x11564 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x8c>
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:202
  }
}

void EEPROM_CAT25::sendAddressBytes(const uint32_t address)
{
  if (_capacity > 0x10000) {
   114fa:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM+0x4>
   114fe:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x5>
   11502:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <SROM+0x6>
   11506:	b0 91 74 0c 	lds	r27, 0x0C74	; 0x800c74 <SROM+0x7>
   1150a:	01 97       	sbiw	r24, 0x01	; 1
   1150c:	a1 40       	sbci	r26, 0x01	; 1
   1150e:	b1 05       	cpc	r27, r1
   11510:	38 f0       	brcs	.+14     	; 0x11520 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x48>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:203
    _spi->transfer((uint8_t)((address >> 16) & 0xFF));
   11512:	60 e0       	ldi	r22, 0x00	; 0
   11514:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
   11518:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
   1151c:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:206
  }

  if ((_capacity > 0x100) && (_device != CAT25040)) {
   11520:	80 91 71 0c 	lds	r24, 0x0C71	; 0x800c71 <SROM+0x4>
   11524:	90 91 72 0c 	lds	r25, 0x0C72	; 0x800c72 <SROM+0x5>
   11528:	a0 91 73 0c 	lds	r26, 0x0C73	; 0x800c73 <SROM+0x6>
   1152c:	b0 91 74 0c 	lds	r27, 0x0C74	; 0x800c74 <SROM+0x7>
   11530:	81 30       	cpi	r24, 0x01	; 1
   11532:	91 40       	sbci	r25, 0x01	; 1
   11534:	a1 05       	cpc	r26, r1
   11536:	b1 05       	cpc	r27, r1
   11538:	68 f0       	brcs	.+26     	; 0x11554 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
   1153a:	80 91 6f 0c 	lds	r24, 0x0C6F	; 0x800c6f <SROM+0x2>
   1153e:	90 91 70 0c 	lds	r25, 0x0C70	; 0x800c70 <SROM+0x3>
   11542:	0b 97       	sbiw	r24, 0x0b	; 11
   11544:	39 f0       	breq	.+14     	; 0x11554 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]+0x7c>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:207
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
   11546:	60 e0       	ldi	r22, 0x00	; 0
   11548:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
   1154c:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
   11550:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   11554:	60 e0       	ldi	r22, 0x00	; 0
   11556:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
   1155a:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   1155e:	cf 91       	pop	r28
sendAddressBytes():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:210

  if ((_capacity > 0x100) && (_device != CAT25040)) {
    _spi->transfer((uint8_t)((address >> 8) & 0xFF));
  }

  _spi->transfer((uint8_t)(address & 0xFF));
   11560:	0c 94 8b 36 	jmp	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
_ZN12EEPROM_CAT2512startCommandEhm.constprop.88():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:198
  _spi->transfer(command);

  if (command == EEPROM_CAT25_COMMAND_READ || command == EEPROM_CAT25_COMMAND_WRITE) {
    sendAddressBytes(address);
  }
}
   11564:	cf 91       	pop	r28
   11566:	08 95       	ret

00011568 <EEPROM_CAT25::getStatusRegister() [clone .constprop.87]>:
_ZN12EEPROM_CAT2517getStatusRegisterEv.constprop.87():
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:42
void EEPROM_CAT25::end(void)
{
  pinMode(_chipSelect, INPUT);
}

uint8_t EEPROM_CAT25::getStatusRegister(void)
   11568:	cf 93       	push	r28
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:44
{
  startCommand(EEPROM_CAT25_COMMAND_RDSR, 0);
   1156a:	85 e0       	ldi	r24, 0x05	; 5
   1156c:	0e 94 6c 8a 	call	0x114d8	; 0x114d8 <EEPROM_CAT25::startCommand(unsigned char, unsigned long) [clone .constprop.88]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:45
  uint8_t ret = _spi->transfer(EEPROM_CAT25_DUMMY_BYTE);
   11570:	6f ef       	ldi	r22, 0xFF	; 255
   11572:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SROM>
   11576:	90 91 6e 0c 	lds	r25, 0x0C6E	; 0x800c6e <SROM+0x1>
   1157a:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <SoftSPIB::transfer(unsigned char)>
   1157e:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:46
  endCommand();
   11580:	0e 94 67 8a 	call	0x114ce	; 0x114ce <EEPROM_CAT25::endCommand() [clone .constprop.90]>
/home/saric/Arduino/libraries/EEPROM_CAT25/src/EEPROM_CAT25.cpp:48
  return(ret);
}
   11584:	8c 2f       	mov	r24, r28
   11586:	cf 91       	pop	r28
   11588:	08 95       	ret

0001158a <TwoWire::begin() [clone .constprop.63]>:
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:57

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
   1158a:	10 92 e0 10 	sts	0x10E0, r1	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:58
  rxBufferLength = 0;
   1158e:	10 92 df 10 	sts	0x10DF, r1	; 0x8010df <TwoWire::rxBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:60

  txBufferIndex = 0;
   11592:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:61
  txBufferLength = 0;
   11596:	10 92 e1 10 	sts	0x10E1, r1	; 0x8010e1 <TwoWire::txBufferLength>
twi_init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
   1159a:	10 92 2b 11 	sts	0x112B, r1	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:72
  twi_sendStop = true; // default value
   1159e:	81 e0       	ldi	r24, 0x01	; 1
   115a0:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:73
  twi_inRepStart = false;
   115a4:	10 92 25 11 	sts	0x1125, r1	; 0x801125 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:76

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
   115a8:	61 e0       	ldi	r22, 0x01	; 1
   115aa:	83 e1       	ldi	r24, 0x13	; 19
   115ac:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:77
  digitalWrite(SCL, 1);
   115b0:	61 e0       	ldi	r22, 0x01	; 1
   115b2:	82 e1       	ldi	r24, 0x12	; 18
   115b4:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
   115b8:	e9 eb       	ldi	r30, 0xB9	; 185
   115ba:	f0 e0       	ldi	r31, 0x00	; 0
   115bc:	80 81       	ld	r24, Z
   115be:	8e 7f       	andi	r24, 0xFE	; 254
   115c0:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:81
  cbi(TWSR, TWPS1);
   115c2:	80 81       	ld	r24, Z
   115c4:	8d 7f       	andi	r24, 0xFD	; 253
   115c6:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
   115c8:	88 e4       	ldi	r24, 0x48	; 72
   115ca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
   115ce:	85 e4       	ldi	r24, 0x45	; 69
   115d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
twi_attachSlaveTxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
   115d4:	89 ed       	ldi	r24, 0xD9	; 217
   115d6:	9e e7       	ldi	r25, 0x7E	; 126
   115d8:	90 93 dd 10 	sts	0x10DD, r25	; 0x8010dd <twi_onSlaveTransmit+0x1>
   115dc:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
   115e0:	8a ed       	ldi	r24, 0xDA	; 218
   115e2:	9e e7       	ldi	r25, 0x7E	; 126
   115e4:	90 93 db 10 	sts	0x10DB, r25	; 0x8010db <twi_onSlaveReceive+0x1>
   115e8:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <twi_onSlaveReceive>
_ZN7TwoWire5beginEv.constprop.63():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:66

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
   115ec:	08 95       	ret

000115ee <W5500Class::resetSS()>:
_ZN10W5500Class7resetSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:342

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
  static inline void resetSS() {  digitalWrite(SPI_CS, HIGH); }
   115ee:	61 e0       	ldi	r22, 0x01	; 1
   115f0:	80 91 de 10 	lds	r24, 0x10DE	; 0x8010de <SPI_CS>
   115f4:	0c 94 c5 89 	jmp	0x1138a	; 0x1138a <digitalWrite>

000115f8 <W5500Class::setSS()>:
_ZN10W5500Class5setSSEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:341
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
  static inline void setSS()   {  digitalWrite(SPI_CS, LOW); }
   115f8:	60 e0       	ldi	r22, 0x00	; 0
   115fa:	80 91 de 10 	lds	r24, 0x10DE	; 0x8010de <SPI_CS>
   115fe:	0c 94 c5 89 	jmp	0x1138a	; 0x1138a <digitalWrite>

00011602 <W5500Class::write(unsigned int, unsigned char, unsigned char)>:
_ZN10W5500Class5writeEjhh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:104
    uint8_t cntl_byte = (0x18+(s<<5));
    read((uint16_t)src , cntl_byte, (uint8_t *)dst, len);
}

uint8_t W5500Class::write(uint16_t _addr, uint8_t _cb, uint8_t _data)
{
   11602:	1f 93       	push	r17
   11604:	cf 93       	push	r28
   11606:	df 93       	push	r29
   11608:	18 2f       	mov	r17, r24
   1160a:	d6 2f       	mov	r29, r22
   1160c:	c4 2f       	mov	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:105
    SPI.beginTransaction(wiznet_SPI_settings);
   1160e:	80 91 38 11 	lds	r24, 0x1138	; 0x801138 <wiznet_SPI_settings>
   11612:	90 91 39 11 	lds	r25, 0x1139	; 0x801139 <wiznet_SPI_settings+0x1>
   11616:	0e 94 b8 80 	call	0x10170	; 0x10170 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:106
    setSS();  
   1161a:	0e 94 fc 8a 	call	0x115f8	; 0x115f8 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:107
    SPI.transfer(_addr >> 8);
   1161e:	80 e0       	ldi	r24, 0x00	; 0
   11620:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:108
    SPI.transfer(_addr & 0xFF);
   11624:	81 2f       	mov	r24, r17
   11626:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:109
    SPI.transfer(_cb);
   1162a:	8d 2f       	mov	r24, r29
   1162c:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:110
    SPI.transfer(_data);
   11630:	8c 2f       	mov	r24, r28
   11632:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:111
    resetSS();
   11636:	0e 94 f7 8a 	call	0x115ee	; 0x115ee <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:115
    SPI.endTransaction();

    return 1;
}
   1163a:	81 e0       	ldi	r24, 0x01	; 1
   1163c:	df 91       	pop	r29
   1163e:	cf 91       	pop	r28
   11640:	1f 91       	pop	r17
   11642:	08 95       	ret

00011644 <pinMode>:
pinMode():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   11644:	cf 93       	push	r28
   11646:	df 93       	push	r29
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
   11648:	90 e0       	ldi	r25, 0x00	; 0
   1164a:	fc 01       	movw	r30, r24
   1164c:	e2 59       	subi	r30, 0x92	; 146
   1164e:	f4 4c       	sbci	r31, 0xC4	; 196
   11650:	24 91       	lpm	r18, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
   11652:	8c 54       	subi	r24, 0x4C	; 76
   11654:	94 4c       	sbci	r25, 0xC4	; 196
   11656:	fc 01       	movw	r30, r24
   11658:	84 91       	lpm	r24, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
   1165a:	88 23       	and	r24, r24
   1165c:	c9 f0       	breq	.+50     	; 0x11690 <pinMode+0x4c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
   1165e:	90 e0       	ldi	r25, 0x00	; 0
   11660:	88 0f       	add	r24, r24
   11662:	99 1f       	adc	r25, r25
   11664:	fc 01       	movw	r30, r24
   11666:	e3 5e       	subi	r30, 0xE3	; 227
   11668:	f9 4c       	sbci	r31, 0xC9	; 201
   1166a:	a5 91       	lpm	r26, Z+
   1166c:	b4 91       	lpm	r27, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
   1166e:	fc 01       	movw	r30, r24
   11670:	ec 55       	subi	r30, 0x5C	; 92
   11672:	f4 4c       	sbci	r31, 0xC4	; 196
   11674:	c5 91       	lpm	r28, Z+
   11676:	d4 91       	lpm	r29, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
   11678:	61 11       	cpse	r22, r1
   1167a:	0d c0       	rjmp	.+26     	; 0x11696 <pinMode+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
   1167c:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
   1167e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
   11680:	8c 91       	ld	r24, X
   11682:	20 95       	com	r18
   11684:	82 23       	and	r24, r18
   11686:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
   11688:	88 81       	ld	r24, Y
   1168a:	28 23       	and	r18, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
   1168c:	28 83       	st	Y, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
   1168e:	9f bf       	out	0x3f, r25	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
   11690:	df 91       	pop	r29
   11692:	cf 91       	pop	r28
   11694:	08 95       	ret
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
   11696:	62 30       	cpi	r22, 0x02	; 2
   11698:	51 f4       	brne	.+20     	; 0x116ae <pinMode+0x6a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
   1169a:	9f b7       	in	r25, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
   1169c:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
   1169e:	3c 91       	ld	r19, X
   116a0:	82 2f       	mov	r24, r18
   116a2:	80 95       	com	r24
   116a4:	83 23       	and	r24, r19
   116a6:	8c 93       	st	X, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
   116a8:	e8 81       	ld	r30, Y
   116aa:	2e 2b       	or	r18, r30
   116ac:	ef cf       	rjmp	.-34     	; 0x1168c <pinMode+0x48>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
   116ae:	8f b7       	in	r24, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
   116b0:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
   116b2:	ec 91       	ld	r30, X
   116b4:	2e 2b       	or	r18, r30
   116b6:	2c 93       	st	X, r18
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
   116b8:	8f bf       	out	0x3f, r24	; 63
   116ba:	ea cf       	rjmp	.-44     	; 0x11690 <pinMode+0x4c>

000116bc <delay>:
delay():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:174

void delay(unsigned long ms)
{
   116bc:	8f 92       	push	r8
   116be:	9f 92       	push	r9
   116c0:	af 92       	push	r10
   116c2:	bf 92       	push	r11
   116c4:	cf 92       	push	r12
   116c6:	df 92       	push	r13
   116c8:	ef 92       	push	r14
   116ca:	ff 92       	push	r15
   116cc:	6b 01       	movw	r12, r22
   116ce:	7c 01       	movw	r14, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:175
  uint32_t start = micros();
   116d0:	0e 94 c1 7f 	call	0xff82	; 0xff82 <micros>
   116d4:	4b 01       	movw	r8, r22
   116d6:	5c 01       	movw	r10, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:179

  while (ms > 0) {
    yield();
    while ( ms > 0 && (micros() - start) >= 1000) {
   116d8:	c1 14       	cp	r12, r1
   116da:	d1 04       	cpc	r13, r1
   116dc:	e1 04       	cpc	r14, r1
   116de:	f1 04       	cpc	r15, r1
   116e0:	b9 f0       	breq	.+46     	; 0x11710 <delay+0x54>
   116e2:	0e 94 c1 7f 	call	0xff82	; 0xff82 <micros>
   116e6:	68 19       	sub	r22, r8
   116e8:	79 09       	sbc	r23, r9
   116ea:	8a 09       	sbc	r24, r10
   116ec:	9b 09       	sbc	r25, r11
   116ee:	68 3e       	cpi	r22, 0xE8	; 232
   116f0:	73 40       	sbci	r23, 0x03	; 3
   116f2:	81 05       	cpc	r24, r1
   116f4:	91 05       	cpc	r25, r1
   116f6:	80 f3       	brcs	.-32     	; 0x116d8 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:180
      ms--;
   116f8:	21 e0       	ldi	r18, 0x01	; 1
   116fa:	c2 1a       	sub	r12, r18
   116fc:	d1 08       	sbc	r13, r1
   116fe:	e1 08       	sbc	r14, r1
   11700:	f1 08       	sbc	r15, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:181
      start += 1000;
   11702:	88 ee       	ldi	r24, 0xE8	; 232
   11704:	88 0e       	add	r8, r24
   11706:	83 e0       	ldi	r24, 0x03	; 3
   11708:	98 1e       	adc	r9, r24
   1170a:	a1 1c       	adc	r10, r1
   1170c:	b1 1c       	adc	r11, r1
   1170e:	e4 cf       	rjmp	.-56     	; 0x116d8 <delay+0x1c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:184
    }
  }
}
   11710:	ff 90       	pop	r15
   11712:	ef 90       	pop	r14
   11714:	df 90       	pop	r13
   11716:	cf 90       	pop	r12
   11718:	bf 90       	pop	r11
   1171a:	af 90       	pop	r10
   1171c:	9f 90       	pop	r9
   1171e:	8f 90       	pop	r8
   11720:	08 95       	ret

00011722 <LCDWIKI_KBV::reset() [clone .constprop.71]>:
_ZN11LCDWIKI_KBV5resetEv.constprop.71():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:250
void LCDWIKI_KBV::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
//Set all control bits to idle state
    CS_IDLE;
   11722:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   11726:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   1172a:	80 81       	ld	r24, Z
   1172c:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x36>
   11730:	89 2b       	or	r24, r25
   11732:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:251
    RD_IDLE;
   11734:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   11738:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   1173c:	80 81       	ld	r24, Z
   1173e:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x39>
   11742:	89 2b       	or	r24, r25
   11744:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:252
    WR_IDLE;
   11746:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   1174a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1174e:	80 81       	ld	r24, Z
   11750:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   11754:	89 2b       	or	r24, r25
   11756:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:262
  digitalWrite(5, HIGH);
//  delay(100);
  //digitalWrite(5, LOW);
 // delay(100);
#else
  if(_reset) 
   11758:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <my_lcd+0x3e>
   1175c:	88 23       	and	r24, r24
   1175e:	71 f0       	breq	.+28     	; 0x1177c <LCDWIKI_KBV::reset() [clone .constprop.71]+0x5a>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:264
  {
    digitalWrite(_reset, LOW);
   11760:	60 e0       	ldi	r22, 0x00	; 0
   11762:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:265
    delay(2);
   11766:	62 e0       	ldi	r22, 0x02	; 2
   11768:	70 e0       	ldi	r23, 0x00	; 0
   1176a:	80 e0       	ldi	r24, 0x00	; 0
   1176c:	90 e0       	ldi	r25, 0x00	; 0
   1176e:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:266
    digitalWrite(_reset, HIGH);
   11772:	61 e0       	ldi	r22, 0x01	; 1
   11774:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <my_lcd+0x3e>
   11778:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:272
//	delay(100);
	//digitalWrite(_reset, LOW);
	//delay(100);
  }
#endif
  CS_ACTIVE;
   1177c:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   11780:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   11784:	80 81       	ld	r24, Z
   11786:	90 91 f0 0d 	lds	r25, 0x0DF0	; 0x800df0 <my_lcd+0x3a>
   1178a:	89 23       	and	r24, r25
   1178c:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:273
  CD_COMMAND;
   1178e:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   11792:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   11796:	80 81       	ld	r24, Z
   11798:	90 91 f1 0d 	lds	r25, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
   1179c:	89 23       	and	r24, r25
   1179e:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:274
  write8(0x00);
   117a0:	12 b8       	out	0x02, r1	; 2
   117a2:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   117a6:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   117aa:	80 81       	ld	r24, Z
   117ac:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   117b0:	89 23       	and	r24, r25
   117b2:	80 83       	st	Z, r24
   117b4:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   117b8:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   117bc:	80 81       	ld	r24, Z
   117be:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   117c2:	89 2b       	or	r24, r25
   117c4:	80 83       	st	Z, r24
   117c6:	83 e0       	ldi	r24, 0x03	; 3
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:277
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
   117c8:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   117cc:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   117d0:	90 81       	ld	r25, Z
   117d2:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   117d6:	92 23       	and	r25, r18
   117d8:	90 83       	st	Z, r25
   117da:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   117de:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   117e2:	90 81       	ld	r25, Z
   117e4:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
   117e8:	92 2b       	or	r25, r18
   117ea:	90 83       	st	Z, r25
   117ec:	81 50       	subi	r24, 0x01	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:275
  }
#endif
  CS_ACTIVE;
  CD_COMMAND;
  write8(0x00);
  for(uint8_t i=0; i<3; i++)
   117ee:	61 f7       	brne	.-40     	; 0x117c8 <LCDWIKI_KBV::reset() [clone .constprop.71]+0xa6>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:279
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
   117f0:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   117f4:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   117f8:	80 81       	ld	r24, Z
   117fa:	90 91 ec 0d 	lds	r25, 0x0DEC	; 0x800dec <my_lcd+0x36>
   117fe:	89 2b       	or	r24, r25
   11800:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:280
}
   11802:	08 95       	ret

00011804 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]>:
_ZN11LCDWIKI_KBV8Read_RegEja.constprop.69():
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:491
{
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_KBV::Read_Reg(uint16_t reg, int8_t index)
   11804:	cf 93       	push	r28
   11806:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:499
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
   11808:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   1180c:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   11810:	90 81       	ld	r25, Z
   11812:	20 91 f0 0d 	lds	r18, 0x0DF0	; 0x800df0 <my_lcd+0x3a>
   11816:	92 23       	and	r25, r18
   11818:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:500
    writeCmd16(reg);
   1181a:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   1181e:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   11822:	90 81       	ld	r25, Z
   11824:	20 91 f1 0d 	lds	r18, 0x0DF1	; 0x800df1 <my_lcd+0x3b>
   11828:	92 23       	and	r25, r18
   1182a:	90 83       	st	Z, r25
   1182c:	12 b8       	out	0x02, r1	; 2
   1182e:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11832:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   11836:	90 81       	ld	r25, Z
   11838:	20 91 f2 0d 	lds	r18, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   1183c:	92 23       	and	r25, r18
   1183e:	90 83       	st	Z, r25
   11840:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11844:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   11848:	90 81       	ld	r25, Z
   1184a:	20 91 ee 0d 	lds	r18, 0x0DEE	; 0x800dee <my_lcd+0x38>
   1184e:	92 2b       	or	r25, r18
   11850:	90 83       	st	Z, r25
   11852:	82 b9       	out	0x02, r24	; 2
   11854:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   11858:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1185c:	80 81       	ld	r24, Z
   1185e:	90 91 f2 0d 	lds	r25, 0x0DF2	; 0x800df2 <my_lcd+0x3c>
   11862:	89 23       	and	r24, r25
   11864:	80 83       	st	Z, r24
   11866:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   1186a:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   1186e:	80 81       	ld	r24, Z
   11870:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   11874:	89 2b       	or	r24, r25
   11876:	80 83       	st	Z, r24
   11878:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   1187c:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   11880:	80 81       	ld	r24, Z
   11882:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   11886:	89 2b       	or	r24, r25
   11888:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:501
    setReadDir();
   1188a:	81 b1       	in	r24, 0x01	; 1
   1188c:	11 b8       	out	0x01, r1	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:502
    delay(1); 
   1188e:	61 e0       	ldi	r22, 0x01	; 1
   11890:	70 e0       	ldi	r23, 0x00	; 0
   11892:	80 e0       	ldi	r24, 0x00	; 0
   11894:	90 e0       	ldi	r25, 0x00	; 0
   11896:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:508
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
   1189a:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   1189e:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   118a2:	80 81       	ld	r24, Z
   118a4:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <my_lcd+0x3d>
   118a8:	89 23       	and	r24, r25
   118aa:	80 83       	st	Z, r24
   118ac:	20 b1       	in	r18, 0x00	; 0
   118ae:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   118b2:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   118b6:	90 81       	ld	r25, Z
   118b8:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <my_lcd+0x39>
   118bc:	98 2b       	or	r25, r24
   118be:	90 83       	st	Z, r25
   118c0:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   118c4:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   118c8:	90 81       	ld	r25, Z
   118ca:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <my_lcd+0x3d>
   118ce:	98 23       	and	r25, r24
   118d0:	90 83       	st	Z, r25
   118d2:	80 b1       	in	r24, 0x00	; 0
   118d4:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   118d8:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   118dc:	90 81       	ld	r25, Z
   118de:	30 91 ef 0d 	lds	r19, 0x0DEF	; 0x800def <my_lcd+0x39>
   118e2:	93 2b       	or	r25, r19
   118e4:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	}while (--index >= 0);   
   118e6:	c1 30       	cpi	r28, 0x01	; 1
   118e8:	79 f0       	breq	.+30     	; 0x11908 <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x104>
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:511
//    RD_IDLE;
    CS_IDLE;
   118ea:	e0 91 e4 0d 	lds	r30, 0x0DE4	; 0x800de4 <my_lcd+0x2e>
   118ee:	f0 91 e5 0d 	lds	r31, 0x0DE5	; 0x800de5 <my_lcd+0x2f>
   118f2:	90 81       	ld	r25, Z
   118f4:	30 91 ec 0d 	lds	r19, 0x0DEC	; 0x800dec <my_lcd+0x36>
   118f8:	93 2b       	or	r25, r19
   118fa:	90 83       	st	Z, r25
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:512
    setWriteDir();
   118fc:	91 b1       	in	r25, 0x01	; 1
   118fe:	9f ef       	ldi	r25, 0xFF	; 255
   11900:	91 b9       	out	0x01, r25	; 1
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:514
    return ret;
}
   11902:	92 2f       	mov	r25, r18
   11904:	cf 91       	pop	r28
   11906:	08 95       	ret
/home/saric/Arduino/libraries/LCDWIKI_KBV/LCDWIKI_KBV.cpp:509
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);  //read 16bits
	}while (--index >= 0);   
   11908:	c0 e0       	ldi	r28, 0x00	; 0
   1190a:	c7 cf       	rjmp	.-114    	; 0x1189a <LCDWIKI_KBV::Read_Reg(unsigned int, signed char) [clone .constprop.69]+0x96>

0001190c <millis>:
millis():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:78
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
   1190c:	2f b7       	in	r18, 0x3f	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:82

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
   1190e:	f8 94       	cli
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:83
  m = timer0_millis;
   11910:	60 91 d0 10 	lds	r22, 0x10D0	; 0x8010d0 <timer0_millis>
   11914:	70 91 d1 10 	lds	r23, 0x10D1	; 0x8010d1 <timer0_millis+0x1>
   11918:	80 91 d2 10 	lds	r24, 0x10D2	; 0x8010d2 <timer0_millis+0x2>
   1191c:	90 91 d3 10 	lds	r25, 0x10D3	; 0x8010d3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:84
  SREG = oldSREG;
   11920:	2f bf       	out	0x3f, r18	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:87

  return m;
}
   11922:	08 95       	ret

00011924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>:
_ZN12PubSubClient8readByteEPh.constprop.140():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:209
    }
    return true;
}

// reads a byte into result
boolean PubSubClient::readByte(uint8_t * result) {
   11924:	cf 92       	push	r12
   11926:	df 92       	push	r13
   11928:	ef 92       	push	r14
   1192a:	ff 92       	push	r15
   1192c:	cf 93       	push	r28
   1192e:	df 93       	push	r29
   11930:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:210
   uint32_t previousMillis = millis();
   11932:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   11936:	6b 01       	movw	r12, r22
   11938:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:211
   while(!_client->available()) {
   1193a:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   1193e:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
   11942:	dc 01       	movw	r26, r24
   11944:	ed 91       	ld	r30, X+
   11946:	fc 91       	ld	r31, X
   11948:	00 84       	ldd	r0, Z+8	; 0x08
   1194a:	f1 85       	ldd	r31, Z+9	; 0x09
   1194c:	e0 2d       	mov	r30, r0
   1194e:	19 95       	eicall
   11950:	89 2b       	or	r24, r25
   11952:	69 f4       	brne	.+26     	; 0x1196e <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x4a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:212
     uint32_t currentMillis = millis();
   11954:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:213
     if(currentMillis - previousMillis >= ((int32_t) MQTT_SOCKET_TIMEOUT * 100)){
   11958:	6c 19       	sub	r22, r12
   1195a:	7d 09       	sbc	r23, r13
   1195c:	8e 09       	sbc	r24, r14
   1195e:	9f 09       	sbc	r25, r15
   11960:	64 36       	cpi	r22, 0x64	; 100
   11962:	71 05       	cpc	r23, r1
   11964:	81 05       	cpc	r24, r1
   11966:	91 05       	cpc	r25, r1
   11968:	40 f3       	brcs	.-48     	; 0x1193a <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:214
       return false;
   1196a:	80 e0       	ldi	r24, 0x00	; 0
   1196c:	0d c0       	rjmp	.+26     	; 0x11988 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]+0x64>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:217
     }
   }
   *result = _client->read();
   1196e:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   11972:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
   11976:	dc 01       	movw	r26, r24
   11978:	ed 91       	ld	r30, X+
   1197a:	fc 91       	ld	r31, X
   1197c:	02 84       	ldd	r0, Z+10	; 0x0a
   1197e:	f3 85       	ldd	r31, Z+11	; 0x0b
   11980:	e0 2d       	mov	r30, r0
   11982:	19 95       	eicall
   11984:	88 83       	st	Y, r24
   11986:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:219
   return true;
}
   11988:	df 91       	pop	r29
   1198a:	cf 91       	pop	r28
   1198c:	ff 90       	pop	r15
   1198e:	ef 90       	pop	r14
   11990:	df 90       	pop	r13
   11992:	cf 90       	pop	r12
   11994:	08 95       	ret

00011996 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>:
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:232
    return true;
  }
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
   11996:	3f 92       	push	r3
   11998:	4f 92       	push	r4
   1199a:	5f 92       	push	r5
   1199c:	6f 92       	push	r6
   1199e:	7f 92       	push	r7
   119a0:	8f 92       	push	r8
   119a2:	9f 92       	push	r9
   119a4:	af 92       	push	r10
   119a6:	bf 92       	push	r11
   119a8:	cf 92       	push	r12
   119aa:	df 92       	push	r13
   119ac:	ef 92       	push	r14
   119ae:	ff 92       	push	r15
   119b0:	0f 93       	push	r16
   119b2:	1f 93       	push	r17
   119b4:	cf 93       	push	r28
   119b6:	df 93       	push	r29
   119b8:	1f 92       	push	r1
   119ba:	cd b7       	in	r28, 0x3d	; 61
   119bc:	de b7       	in	r29, 0x3e	; 62
   119be:	5c 01       	movw	r10, r24
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   119c0:	80 e1       	ldi	r24, 0x10	; 16
   119c2:	9e e0       	ldi	r25, 0x0E	; 14
   119c4:	0e 94 92 8c 	call	0x11924	; 0x11924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   119c8:	81 11       	cpse	r24, r1
   119ca:	16 c0       	rjmp	.+44     	; 0x119f8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x62>
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:234
  return false;
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
   119cc:	10 e0       	ldi	r17, 0x00	; 0
   119ce:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:280
    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   119d0:	c8 01       	movw	r24, r16
   119d2:	0f 90       	pop	r0
   119d4:	df 91       	pop	r29
   119d6:	cf 91       	pop	r28
   119d8:	1f 91       	pop	r17
   119da:	0f 91       	pop	r16
   119dc:	ff 90       	pop	r15
   119de:	ef 90       	pop	r14
   119e0:	df 90       	pop	r13
   119e2:	cf 90       	pop	r12
   119e4:	bf 90       	pop	r11
   119e6:	af 90       	pop	r10
   119e8:	9f 90       	pop	r9
   119ea:	8f 90       	pop	r8
   119ec:	7f 90       	pop	r7
   119ee:	6f 90       	pop	r6
   119f0:	5f 90       	pop	r5
   119f2:	4f 90       	pop	r4
   119f4:	3f 90       	pop	r3
   119f6:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:235
}

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   119f8:	30 90 10 0e 	lds	r3, 0x0E10	; 0x800e10 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:238
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
   119fc:	19 82       	std	Y+1, r1	; 0x01
   119fe:	31 e1       	ldi	r19, 0x11	; 17
   11a00:	83 2e       	mov	r8, r19
   11a02:	3e e0       	ldi	r19, 0x0E	; 14
   11a04:	93 2e       	mov	r9, r19
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
    *index = current_index + 1;
   11a06:	ee 24       	eor	r14, r14
   11a08:	e3 94       	inc	r14
   11a0a:	f1 2c       	mov	r15, r1
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:237
uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
   11a0c:	d1 2c       	mov	r13, r1
   11a0e:	c1 2c       	mov	r12, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:236

uint16_t PubSubClient::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
   11a10:	41 2c       	mov	r4, r1
   11a12:	51 2c       	mov	r5, r1
   11a14:	32 01       	movw	r6, r4
   11a16:	43 94       	inc	r4
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:243
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
   11a18:	ce 01       	movw	r24, r28
   11a1a:	01 96       	adiw	r24, 0x01	; 1
   11a1c:	0e 94 92 8c 	call	0x11924	; 0x11924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11a20:	88 23       	and	r24, r24
   11a22:	a1 f2       	breq	.-88     	; 0x119cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
        buffer[len++] = digit;
   11a24:	87 01       	movw	r16, r14
   11a26:	0f 5f       	subi	r16, 0xFF	; 255
   11a28:	1f 4f       	sbci	r17, 0xFF	; 255
   11a2a:	89 81       	ldd	r24, Y+1	; 0x01
   11a2c:	d4 01       	movw	r26, r8
   11a2e:	8d 93       	st	X+, r24
   11a30:	4d 01       	movw	r8, r26
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:245
        length += (digit & 127) * multiplier;
   11a32:	28 2f       	mov	r18, r24
   11a34:	2f 77       	andi	r18, 0x7F	; 127
   11a36:	30 e0       	ldi	r19, 0x00	; 0
   11a38:	24 9d       	mul	r18, r4
   11a3a:	a0 01       	movw	r20, r0
   11a3c:	25 9d       	mul	r18, r5
   11a3e:	50 0d       	add	r21, r0
   11a40:	34 9d       	mul	r19, r4
   11a42:	50 0d       	add	r21, r0
   11a44:	11 24       	eor	r1, r1
   11a46:	c4 0e       	add	r12, r20
   11a48:	d5 1e       	adc	r13, r21
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:246
        multiplier *= 128;
   11a4a:	27 e0       	ldi	r18, 0x07	; 7
   11a4c:	44 0c       	add	r4, r4
   11a4e:	55 1c       	adc	r5, r5
   11a50:	66 1c       	adc	r6, r6
   11a52:	77 1c       	adc	r7, r7
   11a54:	2a 95       	dec	r18
   11a56:	d1 f7       	brne	.-12     	; 0x11a4c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xb6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:247
    } while ((digit & 128) != 0);
   11a58:	87 fd       	sbrc	r24, 7
   11a5a:	31 c0       	rjmp	.+98     	; 0x11abe <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x128>
   11a5c:	b3 2d       	mov	r27, r3
   11a5e:	b0 7f       	andi	r27, 0xF0	; 240
   11a60:	3b 2e       	mov	r3, r27
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:248
    *lengthLength = len-1;
   11a62:	8f ef       	ldi	r24, 0xFF	; 255
   11a64:	80 0f       	add	r24, r16
   11a66:	f5 01       	movw	r30, r10
   11a68:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:250

    if (isPublish) {
   11a6a:	f0 e3       	ldi	r31, 0x30	; 48
   11a6c:	bf 13       	cpse	r27, r31
   11a6e:	29 c0       	rjmp	.+82     	; 0x11ac2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x12c>
readByte():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:225

// reads a byte into result[*index] and increments index
boolean PubSubClient::readByte(uint8_t * result, uint16_t * index){
  uint16_t current_index = *index;
  uint8_t * write_address = &(result[current_index]);
  if(readByte(write_address)){
   11a70:	c8 01       	movw	r24, r16
   11a72:	80 5f       	subi	r24, 0xF0	; 240
   11a74:	91 4f       	sbci	r25, 0xF1	; 241
   11a76:	0e 94 92 8c 	call	0x11924	; 0x11924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11a7a:	88 23       	and	r24, r24
   11a7c:	09 f4       	brne	.+2      	; 0x11a80 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xea>
   11a7e:	a6 cf       	rjmp	.-180    	; 0x119cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   11a80:	c7 01       	movw	r24, r14
   11a82:	8e 5e       	subi	r24, 0xEE	; 238
   11a84:	91 4f       	sbci	r25, 0xF1	; 241
   11a86:	0e 94 92 8c 	call	0x11924	; 0x11924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11a8a:	88 23       	and	r24, r24
   11a8c:	09 f4       	brne	.+2      	; 0x11a90 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0xfa>
   11a8e:	9e cf       	rjmp	.-196    	; 0x119cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:226
    *index = current_index + 1;
   11a90:	0e 5f       	subi	r16, 0xFE	; 254
   11a92:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN12PubSubClient10readPacketEPh.constprop.138():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:254

    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
   11a94:	d5 01       	movw	r26, r10
   11a96:	ec 91       	ld	r30, X
   11a98:	f0 e0       	ldi	r31, 0x00	; 0
   11a9a:	e2 5f       	subi	r30, 0xF2	; 242
   11a9c:	f1 4f       	sbci	r31, 0xF1	; 241
   11a9e:	e3 80       	ldd	r14, Z+3	; 0x03
   11aa0:	f1 2c       	mov	r15, r1
   11aa2:	fe 2c       	mov	r15, r14
   11aa4:	ee 24       	eor	r14, r14
   11aa6:	84 81       	ldd	r24, Z+4	; 0x04
   11aa8:	e8 0e       	add	r14, r24
   11aaa:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:256
        start = 2;
        if (buffer[0]&MQTTQOS1) {
   11aac:	80 91 10 0e 	lds	r24, 0x0E10	; 0x800e10 <mqtt_client+0x2>
   11ab0:	81 ff       	sbrs	r24, 1
   11ab2:	03 c0       	rjmp	.+6      	; 0x11aba <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x124>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:258
            // skip message id
            skip += 2;
   11ab4:	b2 e0       	ldi	r27, 0x02	; 2
   11ab6:	eb 0e       	add	r14, r27
   11ab8:	f1 1c       	adc	r15, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:255
    if (isPublish) {
        // Read in topic length to calculate bytes to skip over for Stream writing
        if(!readByte(buffer, &len)) return 0;
        if(!readByte(buffer, &len)) return 0;
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   11aba:	92 e0       	ldi	r25, 0x02	; 2
   11abc:	05 c0       	rjmp	.+10     	; 0x11ac8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x132>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:244
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        if(!readByte(&digit)) return 0;
        buffer[len++] = digit;
   11abe:	78 01       	movw	r14, r16
   11ac0:	ab cf       	rjmp	.-170    	; 0x11a18 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:240
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   11ac2:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:239
    if(!readByte(buffer, &len)) return 0;
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
   11ac4:	f1 2c       	mov	r15, r1
   11ac6:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   11ac8:	69 2e       	mov	r6, r25
   11aca:	71 2c       	mov	r7, r1
   11acc:	60 1a       	sub	r6, r16
   11ace:	71 0a       	sbc	r7, r17
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
        if(!readByte(&digit)) return 0;
        if (this->stream) {
            if (isPublish && len-*lengthLength-2>skip) {
   11ad0:	8e ef       	ldi	r24, 0xFE	; 254
   11ad2:	88 2e       	mov	r8, r24
   11ad4:	99 24       	eor	r9, r9
   11ad6:	9a 94       	dec	r9
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:262
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   11ad8:	c3 01       	movw	r24, r6
   11ada:	80 0f       	add	r24, r16
   11adc:	91 1f       	adc	r25, r17
   11ade:	8c 15       	cp	r24, r12
   11ae0:	9d 05       	cpc	r25, r13
   11ae2:	78 f5       	brcc	.+94     	; 0x11b42 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ac>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:263
        if(!readByte(&digit)) return 0;
   11ae4:	ce 01       	movw	r24, r28
   11ae6:	01 96       	adiw	r24, 0x01	; 1
   11ae8:	0e 94 92 8c 	call	0x11924	; 0x11924 <PubSubClient::readByte(unsigned char*) [clone .constprop.140]>
   11aec:	88 23       	and	r24, r24
   11aee:	09 f4       	brne	.+2      	; 0x11af2 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x15c>
   11af0:	6d cf       	rjmp	.-294    	; 0x119cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:264
        if (this->stream) {
   11af2:	80 91 27 10 	lds	r24, 0x1027	; 0x801027 <mqtt_client+0x219>
   11af6:	90 91 28 10 	lds	r25, 0x1028	; 0x801028 <mqtt_client+0x21a>
   11afa:	00 97       	sbiw	r24, 0x00	; 0
   11afc:	b1 f0       	breq	.+44     	; 0x11b2a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:265
            if (isPublish && len-*lengthLength-2>skip) {
   11afe:	e0 e3       	ldi	r30, 0x30	; 48
   11b00:	3e 12       	cpse	r3, r30
   11b02:	13 c0       	rjmp	.+38     	; 0x11b2a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
   11b04:	d5 01       	movw	r26, r10
   11b06:	2c 91       	ld	r18, X
   11b08:	f4 01       	movw	r30, r8
   11b0a:	e2 1b       	sub	r30, r18
   11b0c:	f1 09       	sbc	r31, r1
   11b0e:	9f 01       	movw	r18, r30
   11b10:	20 0f       	add	r18, r16
   11b12:	31 1f       	adc	r19, r17
   11b14:	e2 16       	cp	r14, r18
   11b16:	f3 06       	cpc	r15, r19
   11b18:	40 f4       	brcc	.+16     	; 0x11b2a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x194>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:266
                this->stream->write(digit);
   11b1a:	dc 01       	movw	r26, r24
   11b1c:	ed 91       	ld	r30, X+
   11b1e:	fc 91       	ld	r31, X
   11b20:	01 90       	ld	r0, Z+
   11b22:	f0 81       	ld	r31, Z
   11b24:	e0 2d       	mov	r30, r0
   11b26:	69 81       	ldd	r22, Y+1	; 0x01
   11b28:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:269
            }
        }
        if (len < MQTT_MAX_PACKET_SIZE) {
   11b2a:	01 15       	cp	r16, r1
   11b2c:	b2 e0       	ldi	r27, 0x02	; 2
   11b2e:	1b 07       	cpc	r17, r27
   11b30:	28 f4       	brcc	.+10     	; 0x11b3c <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1a6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:270
            buffer[len] = digit;
   11b32:	89 81       	ldd	r24, Y+1	; 0x01
   11b34:	f8 01       	movw	r30, r16
   11b36:	e2 5f       	subi	r30, 0xF2	; 242
   11b38:	f1 4f       	sbci	r31, 0xF1	; 241
   11b3a:	82 83       	std	Z+2, r24	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:272
        }
        len++;
   11b3c:	0f 5f       	subi	r16, 0xFF	; 255
   11b3e:	1f 4f       	sbci	r17, 0xFF	; 255
   11b40:	cb cf       	rjmp	.-106    	; 0x11ad8 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x142>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:275
    }

    if (!this->stream && len > MQTT_MAX_PACKET_SIZE) {
   11b42:	80 91 27 10 	lds	r24, 0x1027	; 0x801027 <mqtt_client+0x219>
   11b46:	90 91 28 10 	lds	r25, 0x1028	; 0x801028 <mqtt_client+0x21a>
   11b4a:	89 2b       	or	r24, r25
   11b4c:	09 f0       	breq	.+2      	; 0x11b50 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1ba>
   11b4e:	40 cf       	rjmp	.-384    	; 0x119d0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>
   11b50:	01 30       	cpi	r16, 0x01	; 1
   11b52:	e2 e0       	ldi	r30, 0x02	; 2
   11b54:	1e 07       	cpc	r17, r30
   11b56:	08 f0       	brcs	.+2      	; 0x11b5a <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x1c4>
   11b58:	39 cf       	rjmp	.-398    	; 0x119cc <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x36>
   11b5a:	3a cf       	rjmp	.-396    	; 0x119d0 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]+0x3a>

00011b5c <__vector_23>:
__vector_23():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:57
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   11b5c:	1f 92       	push	r1
   11b5e:	0f 92       	push	r0
   11b60:	0f b6       	in	r0, 0x3f	; 63
   11b62:	0f 92       	push	r0
   11b64:	11 24       	eor	r1, r1
   11b66:	2f 93       	push	r18
   11b68:	3f 93       	push	r19
   11b6a:	8f 93       	push	r24
   11b6c:	9f 93       	push	r25
   11b6e:	af 93       	push	r26
   11b70:	bf 93       	push	r27
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:60
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
   11b72:	80 91 d0 10 	lds	r24, 0x10D0	; 0x8010d0 <timer0_millis>
   11b76:	90 91 d1 10 	lds	r25, 0x10D1	; 0x8010d1 <timer0_millis+0x1>
   11b7a:	a0 91 d2 10 	lds	r26, 0x10D2	; 0x8010d2 <timer0_millis+0x2>
   11b7e:	b0 91 d3 10 	lds	r27, 0x10D3	; 0x8010d3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:61
  unsigned char f = timer0_fract;
   11b82:	30 91 cf 10 	lds	r19, 0x10CF	; 0x8010cf <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:64

  m += MILLIS_INC;
  f += FRACT_INC;
   11b86:	23 e0       	ldi	r18, 0x03	; 3
   11b88:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:65
  if (f >= FRACT_MAX) {
   11b8a:	2d 37       	cpi	r18, 0x7D	; 125
   11b8c:	58 f5       	brcc	.+86     	; 0x11be4 <__vector_23+0x88>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:63
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
   11b8e:	01 96       	adiw	r24, 0x01	; 1
   11b90:	a1 1d       	adc	r26, r1
   11b92:	b1 1d       	adc	r27, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:70
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
   11b94:	20 93 cf 10 	sts	0x10CF, r18	; 0x8010cf <timer0_fract>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:71
  timer0_millis = m;
   11b98:	80 93 d0 10 	sts	0x10D0, r24	; 0x8010d0 <timer0_millis>
   11b9c:	90 93 d1 10 	sts	0x10D1, r25	; 0x8010d1 <timer0_millis+0x1>
   11ba0:	a0 93 d2 10 	sts	0x10D2, r26	; 0x8010d2 <timer0_millis+0x2>
   11ba4:	b0 93 d3 10 	sts	0x10D3, r27	; 0x8010d3 <timer0_millis+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:72
  timer0_overflow_count++;
   11ba8:	80 91 d4 10 	lds	r24, 0x10D4	; 0x8010d4 <timer0_overflow_count>
   11bac:	90 91 d5 10 	lds	r25, 0x10D5	; 0x8010d5 <timer0_overflow_count+0x1>
   11bb0:	a0 91 d6 10 	lds	r26, 0x10D6	; 0x8010d6 <timer0_overflow_count+0x2>
   11bb4:	b0 91 d7 10 	lds	r27, 0x10D7	; 0x8010d7 <timer0_overflow_count+0x3>
   11bb8:	01 96       	adiw	r24, 0x01	; 1
   11bba:	a1 1d       	adc	r26, r1
   11bbc:	b1 1d       	adc	r27, r1
   11bbe:	80 93 d4 10 	sts	0x10D4, r24	; 0x8010d4 <timer0_overflow_count>
   11bc2:	90 93 d5 10 	sts	0x10D5, r25	; 0x8010d5 <timer0_overflow_count+0x1>
   11bc6:	a0 93 d6 10 	sts	0x10D6, r26	; 0x8010d6 <timer0_overflow_count+0x2>
   11bca:	b0 93 d7 10 	sts	0x10D7, r27	; 0x8010d7 <timer0_overflow_count+0x3>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:73
}
   11bce:	bf 91       	pop	r27
   11bd0:	af 91       	pop	r26
   11bd2:	9f 91       	pop	r25
   11bd4:	8f 91       	pop	r24
   11bd6:	3f 91       	pop	r19
   11bd8:	2f 91       	pop	r18
   11bda:	0f 90       	pop	r0
   11bdc:	0f be       	out	0x3f, r0	; 63
   11bde:	0f 90       	pop	r0
   11be0:	1f 90       	pop	r1
   11be2:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:66
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
   11be4:	26 e8       	ldi	r18, 0x86	; 134
   11be6:	23 0f       	add	r18, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:67
    m += 1;
   11be8:	02 96       	adiw	r24, 0x02	; 2
   11bea:	a1 1d       	adc	r26, r1
   11bec:	b1 1d       	adc	r27, r1
   11bee:	d2 cf       	rjmp	.-92     	; 0x11b94 <__vector_23+0x38>

00011bf0 <__vector_26>:
__vector_26():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
   11bf0:	1f 92       	push	r1
   11bf2:	0f 92       	push	r0
   11bf4:	0f b6       	in	r0, 0x3f	; 63
   11bf6:	0f 92       	push	r0
   11bf8:	11 24       	eor	r1, r1
   11bfa:	0b b6       	in	r0, 0x3b	; 59
   11bfc:	0f 92       	push	r0
   11bfe:	2f 93       	push	r18
   11c00:	3f 93       	push	r19
   11c02:	4f 93       	push	r20
   11c04:	5f 93       	push	r21
   11c06:	6f 93       	push	r22
   11c08:	7f 93       	push	r23
   11c0a:	8f 93       	push	r24
   11c0c:	9f 93       	push	r25
   11c0e:	af 93       	push	r26
   11c10:	bf 93       	push	r27
   11c12:	ef 93       	push	r30
   11c14:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
   11c16:	89 e6       	ldi	r24, 0x69	; 105
   11c18:	9b e0       	ldi	r25, 0x0B	; 11
   11c1a:	0e 94 18 7f 	call	0xfe30	; 0xfe30 <HardwareSerial::_tx_udr_empty_irq()>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
   11c1e:	ff 91       	pop	r31
   11c20:	ef 91       	pop	r30
   11c22:	bf 91       	pop	r27
   11c24:	af 91       	pop	r26
   11c26:	9f 91       	pop	r25
   11c28:	8f 91       	pop	r24
   11c2a:	7f 91       	pop	r23
   11c2c:	6f 91       	pop	r22
   11c2e:	5f 91       	pop	r21
   11c30:	4f 91       	pop	r20
   11c32:	3f 91       	pop	r19
   11c34:	2f 91       	pop	r18
   11c36:	0f 90       	pop	r0
   11c38:	0b be       	out	0x3b, r0	; 59
   11c3a:	0f 90       	pop	r0
   11c3c:	0f be       	out	0x3f, r0	; 63
   11c3e:	0f 90       	pop	r0
   11c40:	1f 90       	pop	r1
   11c42:	18 95       	reti

00011c44 <__vector_25>:
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   11c44:	1f 92       	push	r1
   11c46:	0f 92       	push	r0
   11c48:	0f b6       	in	r0, 0x3f	; 63
   11c4a:	0f 92       	push	r0
   11c4c:	11 24       	eor	r1, r1
   11c4e:	0b b6       	in	r0, 0x3b	; 59
   11c50:	0f 92       	push	r0
   11c52:	2f 93       	push	r18
   11c54:	8f 93       	push	r24
   11c56:	9f 93       	push	r25
   11c58:	ef 93       	push	r30
   11c5a:	ff 93       	push	r31
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
   11c5c:	e0 91 79 0b 	lds	r30, 0x0B79	; 0x800b79 <Serial+0x10>
   11c60:	f0 91 7a 0b 	lds	r31, 0x0B7A	; 0x800b7a <Serial+0x11>
   11c64:	80 81       	ld	r24, Z
   11c66:	e0 91 7f 0b 	lds	r30, 0x0B7F	; 0x800b7f <Serial+0x16>
   11c6a:	f0 91 80 0b 	lds	r31, 0x0B80	; 0x800b80 <Serial+0x17>
   11c6e:	82 fd       	sbrc	r24, 2
   11c70:	1d c0       	rjmp	.+58     	; 0x11cac <__vector_25+0x68>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
   11c72:	90 81       	ld	r25, Z
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
   11c74:	80 91 82 0b 	lds	r24, 0x0B82	; 0x800b82 <Serial+0x19>
   11c78:	8f 5f       	subi	r24, 0xFF	; 255
   11c7a:	8f 73       	andi	r24, 0x3F	; 63
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
   11c7c:	20 91 83 0b 	lds	r18, 0x0B83	; 0x800b83 <Serial+0x1a>
   11c80:	82 17       	cp	r24, r18
   11c82:	41 f0       	breq	.+16     	; 0x11c94 <__vector_25+0x50>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
   11c84:	e0 91 82 0b 	lds	r30, 0x0B82	; 0x800b82 <Serial+0x19>
   11c88:	f0 e0       	ldi	r31, 0x00	; 0
   11c8a:	e7 59       	subi	r30, 0x97	; 151
   11c8c:	f4 4f       	sbci	r31, 0xF4	; 244
   11c8e:	95 8f       	std	Z+29, r25	; 0x1d
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
   11c90:	80 93 82 0b 	sts	0x0B82, r24	; 0x800b82 <Serial+0x19>
__vector_25():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
   11c94:	ff 91       	pop	r31
   11c96:	ef 91       	pop	r30
   11c98:	9f 91       	pop	r25
   11c9a:	8f 91       	pop	r24
   11c9c:	2f 91       	pop	r18
   11c9e:	0f 90       	pop	r0
   11ca0:	0b be       	out	0x3b, r0	; 59
   11ca2:	0f 90       	pop	r0
   11ca4:	0f be       	out	0x3f, r0	; 63
   11ca6:	0f 90       	pop	r0
   11ca8:	1f 90       	pop	r1
   11caa:	18 95       	reti
_rx_complete_irq():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
   11cac:	80 81       	ld	r24, Z
   11cae:	f2 cf       	rjmp	.-28     	; 0x11c94 <__vector_25+0x50>

00011cb0 <__vector_29>:
__vector_29():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:95
{
  return a2d_index;
}

ISR(ADC_vect)
{
   11cb0:	1f 92       	push	r1
   11cb2:	0f 92       	push	r0
   11cb4:	0f b6       	in	r0, 0x3f	; 63
   11cb6:	0f 92       	push	r0
   11cb8:	11 24       	eor	r1, r1
   11cba:	0b b6       	in	r0, 0x3b	; 59
   11cbc:	0f 92       	push	r0
   11cbe:	2f 93       	push	r18
   11cc0:	3f 93       	push	r19
   11cc2:	4f 93       	push	r20
   11cc4:	5f 93       	push	r21
   11cc6:	6f 93       	push	r22
   11cc8:	7f 93       	push	r23
   11cca:	8f 93       	push	r24
   11ccc:	9f 93       	push	r25
   11cce:	af 93       	push	r26
   11cd0:	bf 93       	push	r27
   11cd2:	cf 93       	push	r28
   11cd4:	ef 93       	push	r30
   11cd6:	ff 93       	push	r31
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:96
  uint8_t back = SREG;
   11cd8:	cf b7       	in	r28, 0x3f	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
  a2d_data = ADCL + (ADCH<<8);
   11cda:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
   11cde:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   11ce2:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <_ZL17a2d_interupt_func.lto_priv.228>
   11ce6:	f0 91 b8 09 	lds	r31, 0x09B8	; 0x8009b8 <_ZL17a2d_interupt_func.lto_priv.228+0x1>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:97
}

ISR(ADC_vect)
{
  uint8_t back = SREG;
  a2d_data = ADCL + (ADCH<<8);
   11cea:	68 2f       	mov	r22, r24
   11cec:	70 e0       	ldi	r23, 0x00	; 0
   11cee:	76 2f       	mov	r23, r22
   11cf0:	66 27       	eor	r22, r22
   11cf2:	69 0f       	add	r22, r25
   11cf4:	71 1d       	adc	r23, r1
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:98
  a2d_interupt_func(a2d_input, a2d_data);
   11cf6:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <a2d_input>
   11cfa:	19 95       	eicall
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:99
  SREG = back;
   11cfc:	cf bf       	out	0x3f, r28	; 63
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:100
}
   11cfe:	ff 91       	pop	r31
   11d00:	ef 91       	pop	r30
   11d02:	cf 91       	pop	r28
   11d04:	bf 91       	pop	r27
   11d06:	af 91       	pop	r26
   11d08:	9f 91       	pop	r25
   11d0a:	8f 91       	pop	r24
   11d0c:	7f 91       	pop	r23
   11d0e:	6f 91       	pop	r22
   11d10:	5f 91       	pop	r21
   11d12:	4f 91       	pop	r20
   11d14:	3f 91       	pop	r19
   11d16:	2f 91       	pop	r18
   11d18:	0f 90       	pop	r0
   11d1a:	0b be       	out	0x3b, r0	; 59
   11d1c:	0f 90       	pop	r0
   11d1e:	0f be       	out	0x3f, r0	; 63
   11d20:	0f 90       	pop	r0
   11d22:	1f 90       	pop	r1
   11d24:	18 95       	reti

00011d26 <a2d_start_first(unsigned char)>:
_Z15a2d_start_firsth():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:58
}


void a2d_start_first(uint8_t vstup)
{
ADMUX = ((a2d_reference & 3) << 6) + (vstup & 7);
   11d26:	20 91 b5 09 	lds	r18, 0x09B5	; 0x8009b5 <a2d_reference>
   11d2a:	90 e4       	ldi	r25, 0x40	; 64
   11d2c:	29 9f       	mul	r18, r25
   11d2e:	90 01       	movw	r18, r0
   11d30:	11 24       	eor	r1, r1
   11d32:	28 0f       	add	r18, r24
   11d34:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:59
a2d_input = vstup;
   11d38:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <a2d_input>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:60
sbi(ADCSRA, ADSC);
   11d3c:	ea e7       	ldi	r30, 0x7A	; 122
   11d3e:	f0 e0       	ldi	r31, 0x00	; 0
   11d40:	80 81       	ld	r24, Z
   11d42:	80 64       	ori	r24, 0x40	; 64
   11d44:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:61
}
   11d46:	08 95       	ret

00011d48 <NTPClient::getEpochTime() const>:
_ZNK9NTPClient12getEpochTimeEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:105
    return this->forceUpdate();
  }
  return true;
}

unsigned long NTPClient::getEpochTime() const {
   11d48:	cf 92       	push	r12
   11d4a:	df 92       	push	r13
   11d4c:	ef 92       	push	r14
   11d4e:	ff 92       	push	r15
   11d50:	0f 93       	push	r16
   11d52:	1f 93       	push	r17
   11d54:	cf 93       	push	r28
   11d56:	df 93       	push	r29
   11d58:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:106
  return this->_timeOffset + // User offset
   11d5a:	cf 80       	ldd	r12, Y+7	; 0x07
   11d5c:	d8 84       	ldd	r13, Y+8	; 0x08
   11d5e:	e9 84       	ldd	r14, Y+9	; 0x09
   11d60:	fa 84       	ldd	r15, Y+10	; 0x0a
   11d62:	8f 85       	ldd	r24, Y+15	; 0x0f
   11d64:	98 89       	ldd	r25, Y+16	; 0x10
   11d66:	a9 89       	ldd	r26, Y+17	; 0x11
   11d68:	ba 89       	ldd	r27, Y+18	; 0x12
   11d6a:	c8 0e       	add	r12, r24
   11d6c:	d9 1e       	adc	r13, r25
   11d6e:	ea 1e       	adc	r14, r26
   11d70:	fb 1e       	adc	r15, r27
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:108
         this->_currentEpoc + // Epoc returned by the NTP server
         ((millis() - this->_lastUpdate) / 1000); // Time since last update
   11d72:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   11d76:	0b 89       	ldd	r16, Y+19	; 0x13
   11d78:	1c 89       	ldd	r17, Y+20	; 0x14
   11d7a:	2d 89       	ldd	r18, Y+21	; 0x15
   11d7c:	3e 89       	ldd	r19, Y+22	; 0x16
   11d7e:	60 1b       	sub	r22, r16
   11d80:	71 0b       	sbc	r23, r17
   11d82:	82 0b       	sbc	r24, r18
   11d84:	93 0b       	sbc	r25, r19
   11d86:	28 ee       	ldi	r18, 0xE8	; 232
   11d88:	33 e0       	ldi	r19, 0x03	; 3
   11d8a:	40 e0       	ldi	r20, 0x00	; 0
   11d8c:	50 e0       	ldi	r21, 0x00	; 0
   11d8e:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
   11d92:	ca 01       	movw	r24, r20
   11d94:	b9 01       	movw	r22, r18
   11d96:	6c 0d       	add	r22, r12
   11d98:	7d 1d       	adc	r23, r13
   11d9a:	8e 1d       	adc	r24, r14
   11d9c:	9f 1d       	adc	r25, r15
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:109
}
   11d9e:	df 91       	pop	r29
   11da0:	cf 91       	pop	r28
   11da2:	1f 91       	pop	r17
   11da4:	0f 91       	pop	r16
   11da6:	ff 90       	pop	r15
   11da8:	ef 90       	pop	r14
   11daa:	df 90       	pop	r13
   11dac:	cf 90       	pop	r12
   11dae:	08 95       	ret

00011db0 <NTPClient::getYear() const>:
_ZNK9NTPClient7getYearEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:111

int NTPClient::getYear() const {
   11db0:	cf 93       	push	r28
   11db2:	df 93       	push	r29
   11db4:	00 d0       	rcall	.+0      	; 0x11db6 <NTPClient::getYear() const+0x6>
   11db6:	1f 92       	push	r1
   11db8:	cd b7       	in	r28, 0x3d	; 61
   11dba:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:112
  time_t rawtime = this->getEpochTime();
   11dbc:	0e 94 a4 8e 	call	0x11d48	; 0x11d48 <NTPClient::getEpochTime() const>
   11dc0:	69 83       	std	Y+1, r22	; 0x01
   11dc2:	7a 83       	std	Y+2, r23	; 0x02
   11dc4:	8b 83       	std	Y+3, r24	; 0x03
   11dc6:	9c 83       	std	Y+4, r25	; 0x04
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:114
  struct tm * ti;
  ti = localtime (&rawtime);
   11dc8:	ce 01       	movw	r24, r28
   11dca:	01 96       	adiw	r24, 0x01	; 1
   11dcc:	0e 94 96 9b 	call	0x1372c	; 0x1372c <localtime>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:115
  int year = ti->tm_year + 1900;
   11dd0:	fc 01       	movw	r30, r24
   11dd2:	86 81       	ldd	r24, Z+6	; 0x06
   11dd4:	97 81       	ldd	r25, Z+7	; 0x07
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:118

  return year;
}
   11dd6:	84 59       	subi	r24, 0x94	; 148
   11dd8:	98 4f       	sbci	r25, 0xF8	; 248
   11dda:	0f 90       	pop	r0
   11ddc:	0f 90       	pop	r0
   11dde:	0f 90       	pop	r0
   11de0:	0f 90       	pop	r0
   11de2:	df 91       	pop	r29
   11de4:	cf 91       	pop	r28
   11de6:	08 95       	ret

00011de8 <NTPClient::begin()>:
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:52
  this->_timeOffset     = timeOffset;
  this->_poolServerName = poolServerName;
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
   11de8:	cf 93       	push	r28
   11dea:	df 93       	push	r29
   11dec:	ec 01       	movw	r28, r24
begin():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:57
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}

void NTPClient::begin(int port) {
  this->_port = port;
   11dee:	89 e3       	ldi	r24, 0x39	; 57
   11df0:	95 e0       	ldi	r25, 0x05	; 5
   11df2:	9e 83       	std	Y+6, r25	; 0x06
   11df4:	8d 83       	std	Y+5, r24	; 0x05
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:59

  this->_udp->begin(this->_port);
   11df6:	88 81       	ld	r24, Y
   11df8:	99 81       	ldd	r25, Y+1	; 0x01
   11dfa:	dc 01       	movw	r26, r24
   11dfc:	ed 91       	ld	r30, X+
   11dfe:	fc 91       	ld	r31, X
   11e00:	06 84       	ldd	r0, Z+14	; 0x0e
   11e02:	f7 85       	ldd	r31, Z+15	; 0x0f
   11e04:	e0 2d       	mov	r30, r0
   11e06:	69 e3       	ldi	r22, 0x39	; 57
   11e08:	75 e0       	ldi	r23, 0x05	; 5
   11e0a:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:61

  this->_udpSetup = true;
   11e0c:	81 e0       	ldi	r24, 0x01	; 1
   11e0e:	8a 83       	std	Y+2, r24	; 0x02
_ZN9NTPClient5beginEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:54
  this->_updateInterval = updateInterval;
}

void NTPClient::begin() {
  this->begin(NTP_DEFAULT_LOCAL_PORT);
}
   11e10:	df 91       	pop	r29
   11e12:	cf 91       	pop	r28
   11e14:	08 95       	ret

00011e16 <NTPClient::update()>:
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:96
  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;

  return true;
}

bool NTPClient::update() {
   11e16:	cf 92       	push	r12
   11e18:	df 92       	push	r13
   11e1a:	ef 92       	push	r14
   11e1c:	ff 92       	push	r15
   11e1e:	0f 93       	push	r16
   11e20:	1f 93       	push	r17
   11e22:	cf 93       	push	r28
   11e24:	df 93       	push	r29
   11e26:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:97
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
   11e28:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   11e2c:	0b 89       	ldd	r16, Y+19	; 0x13
   11e2e:	1c 89       	ldd	r17, Y+20	; 0x14
   11e30:	2d 89       	ldd	r18, Y+21	; 0x15
   11e32:	3e 89       	ldd	r19, Y+22	; 0x16
   11e34:	60 1b       	sub	r22, r16
   11e36:	71 0b       	sbc	r23, r17
   11e38:	82 0b       	sbc	r24, r18
   11e3a:	93 0b       	sbc	r25, r19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:98
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
   11e3c:	cb 84       	ldd	r12, Y+11	; 0x0b
   11e3e:	dc 84       	ldd	r13, Y+12	; 0x0c
   11e40:	ed 84       	ldd	r14, Y+13	; 0x0d
   11e42:	fe 84       	ldd	r15, Y+14	; 0x0e
   11e44:	6c 15       	cp	r22, r12
   11e46:	7d 05       	cpc	r23, r13
   11e48:	8e 05       	cpc	r24, r14
   11e4a:	9f 05       	cpc	r25, r15
   11e4c:	28 f4       	brcc	.+10     	; 0x11e58 <NTPClient::update()+0x42>
   11e4e:	01 2b       	or	r16, r17
   11e50:	02 2b       	or	r16, r18
   11e52:	03 2b       	or	r16, r19
   11e54:	09 f0       	breq	.+2      	; 0x11e58 <NTPClient::update()+0x42>
   11e56:	9e c0       	rjmp	.+316    	; 0x11f94 <NTPClient::update()+0x17e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:99
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
   11e58:	8a 81       	ldd	r24, Y+2	; 0x02
   11e5a:	81 11       	cpse	r24, r1
   11e5c:	03 c0       	rjmp	.+6      	; 0x11e64 <NTPClient::update()+0x4e>
   11e5e:	ce 01       	movw	r24, r28
   11e60:	0e 94 f4 8e 	call	0x11de8	; 0x11de8 <NTPClient::begin()>
sendNTPPacket():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:185
    this->_poolServerName = poolServerName;
}

void NTPClient::sendNTPPacket() {
  // set all bytes in the buffer to 0
  memset(this->_packetBuffer, 0, NTP_PACKET_SIZE);
   11e64:	7e 01       	movw	r14, r28
   11e66:	87 e1       	ldi	r24, 0x17	; 23
   11e68:	e8 0e       	add	r14, r24
   11e6a:	f1 1c       	adc	r15, r1
   11e6c:	8c e2       	ldi	r24, 0x2C	; 44
   11e6e:	fe 01       	movw	r30, r28
   11e70:	7b 96       	adiw	r30, 0x1b	; 27
   11e72:	df 01       	movw	r26, r30
   11e74:	1d 92       	st	X+, r1
   11e76:	8a 95       	dec	r24
   11e78:	e9 f7       	brne	.-6      	; 0x11e74 <NTPClient::update()+0x5e>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:188
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  this->_packetBuffer[0] = 0b11100011;   // LI, Version, Mode
   11e7a:	83 ee       	ldi	r24, 0xE3	; 227
   11e7c:	8f 8b       	std	Y+23, r24	; 0x17
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:189
  this->_packetBuffer[1] = 0;     // Stratum, or type of clock
   11e7e:	18 8e       	std	Y+24, r1	; 0x18
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:190
  this->_packetBuffer[2] = 6;     // Polling Interval
   11e80:	86 e0       	ldi	r24, 0x06	; 6
   11e82:	89 8f       	std	Y+25, r24	; 0x19
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:191
  this->_packetBuffer[3] = 0xEC;  // Peer Clock Precision
   11e84:	8c ee       	ldi	r24, 0xEC	; 236
   11e86:	8a 8f       	std	Y+26, r24	; 0x1a
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:193
  // 8 bytes of zero for Root Delay & Root Dispersion
  this->_packetBuffer[12]  = 49;
   11e88:	81 e3       	ldi	r24, 0x31	; 49
   11e8a:	8b a3       	std	Y+35, r24	; 0x23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:194
  this->_packetBuffer[13]  = 0x4E;
   11e8c:	9e e4       	ldi	r25, 0x4E	; 78
   11e8e:	9c a3       	std	Y+36, r25	; 0x24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:195
  this->_packetBuffer[14]  = 49;
   11e90:	8d a3       	std	Y+37, r24	; 0x25
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:196
  this->_packetBuffer[15]  = 52;
   11e92:	84 e3       	ldi	r24, 0x34	; 52
   11e94:	8e a3       	std	Y+38, r24	; 0x26
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:200

  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  this->_udp->beginPacket(this->_poolServerName, 123); //NTP requests are to port 123
   11e96:	88 81       	ld	r24, Y
   11e98:	99 81       	ldd	r25, Y+1	; 0x01
   11e9a:	6b 81       	ldd	r22, Y+3	; 0x03
   11e9c:	7c 81       	ldd	r23, Y+4	; 0x04
   11e9e:	dc 01       	movw	r26, r24
   11ea0:	ed 91       	ld	r30, X+
   11ea2:	fc 91       	ld	r31, X
   11ea4:	06 88       	ldd	r0, Z+22	; 0x16
   11ea6:	f7 89       	ldd	r31, Z+23	; 0x17
   11ea8:	e0 2d       	mov	r30, r0
   11eaa:	4b e7       	ldi	r20, 0x7B	; 123
   11eac:	50 e0       	ldi	r21, 0x00	; 0
   11eae:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:201
  this->_udp->write(this->_packetBuffer, NTP_PACKET_SIZE);
   11eb0:	88 81       	ld	r24, Y
   11eb2:	99 81       	ldd	r25, Y+1	; 0x01
   11eb4:	dc 01       	movw	r26, r24
   11eb6:	ed 91       	ld	r30, X+
   11eb8:	fc 91       	ld	r31, X
   11eba:	02 80       	ldd	r0, Z+2	; 0x02
   11ebc:	f3 81       	ldd	r31, Z+3	; 0x03
   11ebe:	e0 2d       	mov	r30, r0
   11ec0:	40 e3       	ldi	r20, 0x30	; 48
   11ec2:	50 e0       	ldi	r21, 0x00	; 0
   11ec4:	b7 01       	movw	r22, r14
   11ec6:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:202
  this->_udp->endPacket();
   11ec8:	88 81       	ld	r24, Y
   11eca:	99 81       	ldd	r25, Y+1	; 0x01
   11ecc:	dc 01       	movw	r26, r24
   11ece:	ed 91       	ld	r30, X+
   11ed0:	fc 91       	ld	r31, X
   11ed2:	00 8c       	ldd	r0, Z+24	; 0x18
   11ed4:	f1 8d       	ldd	r31, Z+25	; 0x19
   11ed6:	e0 2d       	mov	r30, r0
   11ed8:	19 95       	eicall
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:72
  #endif

  this->sendNTPPacket();

  // Wait till data is there or timeout...
  byte timeout = 0;
   11eda:	10 e0       	ldi	r17, 0x00	; 0
forceUpdate():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:75
  int cb = 0;
  do {
    delay ( 10 );
   11edc:	6a e0       	ldi	r22, 0x0A	; 10
   11ede:	70 e0       	ldi	r23, 0x00	; 0
   11ee0:	80 e0       	ldi	r24, 0x00	; 0
   11ee2:	90 e0       	ldi	r25, 0x00	; 0
   11ee4:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:76
    cb = this->_udp->parsePacket();
   11ee8:	88 81       	ld	r24, Y
   11eea:	99 81       	ldd	r25, Y+1	; 0x01
   11eec:	dc 01       	movw	r26, r24
   11eee:	ed 91       	ld	r30, X+
   11ef0:	fc 91       	ld	r31, X
   11ef2:	02 8c       	ldd	r0, Z+26	; 0x1a
   11ef4:	f3 8d       	ldd	r31, Z+27	; 0x1b
   11ef6:	e0 2d       	mov	r30, r0
   11ef8:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
    if (timeout > 100) return false; // timeout after 1000 ms
   11efa:	15 36       	cpi	r17, 0x65	; 101
   11efc:	09 f4       	brne	.+2      	; 0x11f00 <NTPClient::update()+0xea>
   11efe:	54 c0       	rjmp	.+168    	; 0x11fa8 <NTPClient::update()+0x192>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:78
    timeout++;
   11f00:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:79
  } while (cb == 0);
   11f02:	89 2b       	or	r24, r25
   11f04:	59 f3       	breq	.-42     	; 0x11edc <NTPClient::update()+0xc6>
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:81

  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time
   11f06:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   11f0a:	21 2f       	mov	r18, r17
   11f0c:	30 e0       	ldi	r19, 0x00	; 0
   11f0e:	a9 01       	movw	r20, r18
   11f10:	4f 5f       	subi	r20, 0xFF	; 255
   11f12:	5f 4f       	sbci	r21, 0xFF	; 255
   11f14:	ea e0       	ldi	r30, 0x0A	; 10
   11f16:	e4 9f       	mul	r30, r20
   11f18:	90 01       	movw	r18, r0
   11f1a:	e5 9f       	mul	r30, r21
   11f1c:	30 0d       	add	r19, r0
   11f1e:	11 24       	eor	r1, r1
   11f20:	89 01       	movw	r16, r18
   11f22:	33 0f       	add	r19, r19
   11f24:	22 0b       	sbc	r18, r18
   11f26:	33 0b       	sbc	r19, r19
   11f28:	ab 01       	movw	r20, r22
   11f2a:	bc 01       	movw	r22, r24
   11f2c:	40 1b       	sub	r20, r16
   11f2e:	51 0b       	sbc	r21, r17
   11f30:	62 0b       	sbc	r22, r18
   11f32:	73 0b       	sbc	r23, r19
   11f34:	4b 8b       	std	Y+19, r20	; 0x13
   11f36:	5c 8b       	std	Y+20, r21	; 0x14
   11f38:	6d 8b       	std	Y+21, r22	; 0x15
   11f3a:	7e 8b       	std	Y+22, r23	; 0x16
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:83

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);
   11f3c:	88 81       	ld	r24, Y
   11f3e:	99 81       	ldd	r25, Y+1	; 0x01
   11f40:	dc 01       	movw	r26, r24
   11f42:	ed 91       	ld	r30, X+
   11f44:	fc 91       	ld	r31, X
   11f46:	04 8c       	ldd	r0, Z+28	; 0x1c
   11f48:	f5 8d       	ldd	r31, Z+29	; 0x1d
   11f4a:	e0 2d       	mov	r30, r0
   11f4c:	40 e3       	ldi	r20, 0x30	; 48
   11f4e:	50 e0       	ldi	r21, 0x00	; 0
   11f50:	b7 01       	movw	r22, r14
   11f52:	19 95       	eicall
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:85

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
   11f54:	fe 01       	movw	r30, r28
   11f56:	ff 96       	adiw	r30, 0x3f	; 63
   11f58:	80 81       	ld	r24, Z
   11f5a:	91 81       	ldd	r25, Z+1	; 0x01
   11f5c:	98 27       	eor	r25, r24
   11f5e:	89 27       	eor	r24, r25
   11f60:	98 27       	eor	r25, r24
   11f62:	b0 e0       	ldi	r27, 0x00	; 0
   11f64:	a0 e0       	ldi	r26, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11f66:	dc 01       	movw	r26, r24
   11f68:	99 27       	eor	r25, r25
   11f6a:	88 27       	eor	r24, r24
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:86
  this->_lastUpdate = millis() - (10 * (timeout + 1)); // Account for delay in reading the time

  this->_udp->read(this->_packetBuffer, NTP_PACKET_SIZE);

  unsigned long highWord = word(this->_packetBuffer[40], this->_packetBuffer[41]);
  unsigned long lowWord = word(this->_packetBuffer[42], this->_packetBuffer[43]);
   11f6c:	32 96       	adiw	r30, 0x02	; 2
   11f6e:	40 81       	ld	r20, Z
   11f70:	51 81       	ldd	r21, Z+1	; 0x01
   11f72:	54 27       	eor	r21, r20
   11f74:	45 27       	eor	r20, r21
   11f76:	54 27       	eor	r21, r20
   11f78:	70 e0       	ldi	r23, 0x00	; 0
   11f7a:	60 e0       	ldi	r22, 0x00	; 0
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:89
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
   11f7c:	84 2b       	or	r24, r20
   11f7e:	95 2b       	or	r25, r21
   11f80:	a6 2b       	or	r26, r22
   11f82:	b7 2b       	or	r27, r23
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:91

  this->_currentEpoc = secsSince1900 - SEVENZYYEARS;
   11f84:	80 58       	subi	r24, 0x80	; 128
   11f86:	9e 47       	sbci	r25, 0x7E	; 126
   11f88:	aa 4a       	sbci	r26, 0xAA	; 170
   11f8a:	b3 48       	sbci	r27, 0x83	; 131
   11f8c:	8f 87       	std	Y+15, r24	; 0x0f
   11f8e:	98 8b       	std	Y+16, r25	; 0x10
   11f90:	a9 8b       	std	Y+17, r26	; 0x11
   11f92:	ba 8b       	std	Y+18, r27	; 0x12
_ZN9NTPClient6updateEv():
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:102
  if ((millis() - this->_lastUpdate >= this->_updateInterval)     // Update after _updateInterval
    || this->_lastUpdate == 0) {                                // Update if there was no update yet.
    if (!this->_udpSetup) this->begin();                         // setup the UDP client if needed
    return this->forceUpdate();
  }
  return true;
   11f94:	81 e0       	ldi	r24, 0x01	; 1
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:103
}
   11f96:	df 91       	pop	r29
   11f98:	cf 91       	pop	r28
   11f9a:	1f 91       	pop	r17
   11f9c:	0f 91       	pop	r16
   11f9e:	ff 90       	pop	r15
   11fa0:	ef 90       	pop	r14
   11fa2:	df 90       	pop	r13
   11fa4:	cf 90       	pop	r12
   11fa6:	08 95       	ret
/home/saric/Arduino/libraries/NTPClient/NTPClient.cpp:77
  byte timeout = 0;
  int cb = 0;
  do {
    delay ( 10 );
    cb = this->_udp->parsePacket();
    if (timeout > 100) return false; // timeout after 1000 ms
   11fa8:	80 e0       	ldi	r24, 0x00	; 0
   11faa:	f5 cf       	rjmp	.-22     	; 0x11f96 <NTPClient::update()+0x180>

00011fac <__vector_39>:
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:400
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
   11fac:	1f 92       	push	r1
   11fae:	0f 92       	push	r0
   11fb0:	0f b6       	in	r0, 0x3f	; 63
   11fb2:	0f 92       	push	r0
   11fb4:	11 24       	eor	r1, r1
   11fb6:	0b b6       	in	r0, 0x3b	; 59
   11fb8:	0f 92       	push	r0
   11fba:	2f 93       	push	r18
   11fbc:	3f 93       	push	r19
   11fbe:	4f 93       	push	r20
   11fc0:	5f 93       	push	r21
   11fc2:	6f 93       	push	r22
   11fc4:	7f 93       	push	r23
   11fc6:	8f 93       	push	r24
   11fc8:	9f 93       	push	r25
   11fca:	af 93       	push	r26
   11fcc:	bf 93       	push	r27
   11fce:	ef 93       	push	r30
   11fd0:	ff 93       	push	r31
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  switch(TW_STATUS){
   11fd2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
   11fd6:	88 7f       	andi	r24, 0xF8	; 248
   11fd8:	80 36       	cpi	r24, 0x60	; 96
   11fda:	09 f4       	brne	.+2      	; 0x11fde <__vector_39+0x32>
   11fdc:	4d c0       	rjmp	.+154    	; 0x12078 <__vector_39+0xcc>
   11fde:	08 f0       	brcs	.+2      	; 0x11fe2 <__vector_39+0x36>
   11fe0:	40 c0       	rjmp	.+128    	; 0x12062 <__vector_39+0xb6>
   11fe2:	88 32       	cpi	r24, 0x28	; 40
   11fe4:	09 f4       	brne	.+2      	; 0x11fe8 <__vector_39+0x3c>
   11fe6:	a9 c0       	rjmp	.+338    	; 0x1213a <__vector_39+0x18e>
   11fe8:	28 f5       	brcc	.+74     	; 0x12034 <__vector_39+0x88>
   11fea:	80 31       	cpi	r24, 0x10	; 16
   11fec:	09 f4       	brne	.+2      	; 0x11ff0 <__vector_39+0x44>
   11fee:	9d c0       	rjmp	.+314    	; 0x1212a <__vector_39+0x17e>
   11ff0:	c8 f4       	brcc	.+50     	; 0x12024 <__vector_39+0x78>
   11ff2:	88 23       	and	r24, r24
   11ff4:	09 f4       	brne	.+2      	; 0x11ff8 <__vector_39+0x4c>
   11ff6:	fb c0       	rjmp	.+502    	; 0x121ee <__vector_39+0x242>
   11ff8:	88 30       	cpi	r24, 0x08	; 8
   11ffa:	09 f4       	brne	.+2      	; 0x11ffe <__vector_39+0x52>
   11ffc:	96 c0       	rjmp	.+300    	; 0x1212a <__vector_39+0x17e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
   11ffe:	ff 91       	pop	r31
   12000:	ef 91       	pop	r30
   12002:	bf 91       	pop	r27
   12004:	af 91       	pop	r26
   12006:	9f 91       	pop	r25
   12008:	8f 91       	pop	r24
   1200a:	7f 91       	pop	r23
   1200c:	6f 91       	pop	r22
   1200e:	5f 91       	pop	r21
   12010:	4f 91       	pop	r20
   12012:	3f 91       	pop	r19
   12014:	2f 91       	pop	r18
   12016:	0f 90       	pop	r0
   12018:	0b be       	out	0x3b, r0	; 59
   1201a:	0f 90       	pop	r0
   1201c:	0f be       	out	0x3f, r0	; 63
   1201e:	0f 90       	pop	r0
   12020:	1f 90       	pop	r1
   12022:	18 95       	reti
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12024:	88 31       	cpi	r24, 0x18	; 24
   12026:	09 f4       	brne	.+2      	; 0x1202a <__vector_39+0x7e>
   12028:	88 c0       	rjmp	.+272    	; 0x1213a <__vector_39+0x18e>
   1202a:	80 32       	cpi	r24, 0x20	; 32
   1202c:	41 f7       	brne	.-48     	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
   1202e:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <twi_error>
   12032:	14 c0       	rjmp	.+40     	; 0x1205c <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12034:	80 34       	cpi	r24, 0x40	; 64
   12036:	09 f4       	brne	.+2      	; 0x1203a <__vector_39+0x8e>
   12038:	9d c0       	rjmp	.+314    	; 0x12174 <__vector_39+0x1c8>
   1203a:	40 f4       	brcc	.+16     	; 0x1204c <__vector_39+0xa0>
   1203c:	80 33       	cpi	r24, 0x30	; 48
   1203e:	b9 f3       	breq	.-18     	; 0x1202e <__vector_39+0x82>
   12040:	88 33       	cpi	r24, 0x38	; 56
   12042:	e9 f6       	brne	.-70     	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
   12044:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <twi_error>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12048:	85 ec       	ldi	r24, 0xC5	; 197
   1204a:	b0 c0       	rjmp	.+352    	; 0x121ac <__vector_39+0x200>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   1204c:	80 35       	cpi	r24, 0x50	; 80
   1204e:	09 f4       	brne	.+2      	; 0x12052 <__vector_39+0xa6>
   12050:	85 c0       	rjmp	.+266    	; 0x1215c <__vector_39+0x1b0>
   12052:	88 35       	cpi	r24, 0x58	; 88
   12054:	09 f4       	brne	.+2      	; 0x12058 <__vector_39+0xac>
   12056:	96 c0       	rjmp	.+300    	; 0x12184 <__vector_39+0x1d8>
   12058:	88 34       	cpi	r24, 0x48	; 72
   1205a:	89 f6       	brne	.-94     	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
   1205c:	0e 94 13 80 	call	0x10026	; 0x10026 <twi_stop>
   12060:	ce cf       	rjmp	.-100    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12062:	88 39       	cpi	r24, 0x98	; 152
   12064:	09 f4       	brne	.+2      	; 0x12068 <__vector_39+0xbc>
   12066:	8c c0       	rjmp	.+280    	; 0x12180 <__vector_39+0x1d4>
   12068:	38 f5       	brcc	.+78     	; 0x120b8 <__vector_39+0x10c>
   1206a:	88 37       	cpi	r24, 0x78	; 120
   1206c:	29 f0       	breq	.+10     	; 0x12078 <__vector_39+0xcc>
   1206e:	50 f4       	brcc	.+20     	; 0x12084 <__vector_39+0xd8>
   12070:	88 36       	cpi	r24, 0x68	; 104
   12072:	11 f0       	breq	.+4      	; 0x12078 <__vector_39+0xcc>
   12074:	80 37       	cpi	r24, 0x70	; 112
   12076:	19 f6       	brne	.-122    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
   12078:	83 e0       	ldi	r24, 0x03	; 3
   1207a:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
   1207e:	10 92 b6 10 	sts	0x10B6, r1	; 0x8010b6 <twi_rxBufferIndex>
   12082:	57 c0       	rjmp	.+174    	; 0x12132 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   12084:	88 38       	cpi	r24, 0x88	; 136
   12086:	09 f4       	brne	.+2      	; 0x1208a <__vector_39+0xde>
   12088:	7b c0       	rjmp	.+246    	; 0x12180 <__vector_39+0x1d4>
   1208a:	80 39       	cpi	r24, 0x90	; 144
   1208c:	19 f0       	breq	.+6      	; 0x12094 <__vector_39+0xe8>
   1208e:	80 38       	cpi	r24, 0x80	; 128
   12090:	09 f0       	breq	.+2      	; 0x12094 <__vector_39+0xe8>
   12092:	b5 cf       	rjmp	.-150    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   12094:	80 91 b6 10 	lds	r24, 0x10B6	; 0x8010b6 <twi_rxBufferIndex>
   12098:	80 32       	cpi	r24, 0x20	; 32
   1209a:	08 f0       	brcs	.+2      	; 0x1209e <__vector_39+0xf2>
   1209c:	71 c0       	rjmp	.+226    	; 0x12180 <__vector_39+0x1d4>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
   1209e:	e0 91 b6 10 	lds	r30, 0x10B6	; 0x8010b6 <twi_rxBufferIndex>
   120a2:	81 e0       	ldi	r24, 0x01	; 1
   120a4:	8e 0f       	add	r24, r30
   120a6:	80 93 b6 10 	sts	0x10B6, r24	; 0x8010b6 <twi_rxBufferIndex>
   120aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   120ae:	f0 e0       	ldi	r31, 0x00	; 0
   120b0:	ea 56       	subi	r30, 0x6A	; 106
   120b2:	ff 4e       	sbci	r31, 0xEF	; 239
   120b4:	80 83       	st	Z, r24
   120b6:	3d c0       	rjmp	.+122    	; 0x12132 <__vector_39+0x186>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   120b8:	80 3b       	cpi	r24, 0xB0	; 176
   120ba:	39 f0       	breq	.+14     	; 0x120ca <__vector_39+0x11e>
   120bc:	e0 f4       	brcc	.+56     	; 0x120f6 <__vector_39+0x14a>
   120be:	80 3a       	cpi	r24, 0xA0	; 160
   120c0:	09 f4       	brne	.+2      	; 0x120c4 <__vector_39+0x118>
   120c2:	79 c0       	rjmp	.+242    	; 0x121b6 <__vector_39+0x20a>
   120c4:	88 3a       	cpi	r24, 0xA8	; 168
   120c6:	09 f0       	breq	.+2      	; 0x120ca <__vector_39+0x11e>
   120c8:	9a cf       	rjmp	.-204    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:521

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
   120ca:	84 e0       	ldi	r24, 0x04	; 4
   120cc:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
   120d0:	10 92 95 10 	sts	0x1095, r1	; 0x801095 <twi_txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
   120d4:	10 92 94 10 	sts	0x1094, r1	; 0x801094 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
   120d8:	e0 91 dc 10 	lds	r30, 0x10DC	; 0x8010dc <twi_onSlaveTransmit>
   120dc:	f0 91 dd 10 	lds	r31, 0x10DD	; 0x8010dd <twi_onSlaveTransmit+0x1>
   120e0:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
   120e2:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <twi_txBufferLength>
   120e6:	81 11       	cpse	r24, r1
   120e8:	0f c0       	rjmp	.+30     	; 0x12108 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:531
        twi_txBufferLength = 1;
   120ea:	81 e0       	ldi	r24, 0x01	; 1
   120ec:	80 93 94 10 	sts	0x1094, r24	; 0x801094 <twi_txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:532
        twi_txBuffer[0] = 0x00;
   120f0:	10 92 74 10 	sts	0x1074, r1	; 0x801074 <twi_txBuffer>
   120f4:	09 c0       	rjmp	.+18     	; 0x12108 <__vector_39+0x15c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
   120f6:	80 3c       	cpi	r24, 0xC0	; 192
   120f8:	09 f4       	brne	.+2      	; 0x120fc <__vector_39+0x150>
   120fa:	a6 cf       	rjmp	.-180    	; 0x12048 <__vector_39+0x9c>
   120fc:	88 3c       	cpi	r24, 0xC8	; 200
   120fe:	09 f4       	brne	.+2      	; 0x12102 <__vector_39+0x156>
   12100:	a3 cf       	rjmp	.-186    	; 0x12048 <__vector_39+0x9c>
   12102:	88 3b       	cpi	r24, 0xB8	; 184
   12104:	09 f0       	breq	.+2      	; 0x12108 <__vector_39+0x15c>
   12106:	7b cf       	rjmp	.-266    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
   12108:	e0 91 95 10 	lds	r30, 0x1095	; 0x801095 <twi_txBufferIndex>
   1210c:	81 e0       	ldi	r24, 0x01	; 1
   1210e:	8e 0f       	add	r24, r30
   12110:	80 93 95 10 	sts	0x1095, r24	; 0x801095 <twi_txBufferIndex>
   12114:	f0 e0       	ldi	r31, 0x00	; 0
   12116:	ec 58       	subi	r30, 0x8C	; 140
   12118:	ff 4e       	sbci	r31, 0xEF	; 239
   1211a:	80 81       	ld	r24, Z
   1211c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   12120:	90 91 95 10 	lds	r25, 0x1095	; 0x801095 <twi_txBufferIndex>
   12124:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <twi_txBufferLength>
   12128:	29 c0       	rjmp	.+82     	; 0x1217c <__vector_39+0x1d0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
   1212a:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   1212e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   12132:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   12138:	62 cf       	rjmp	.-316    	; 0x11ffe <__vector_39+0x52>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
   1213a:	90 91 28 11 	lds	r25, 0x1128	; 0x801128 <twi_masterBufferIndex>
   1213e:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <twi_masterBufferLength>
   12142:	98 17       	cp	r25, r24
   12144:	58 f5       	brcc	.+86     	; 0x1219c <__vector_39+0x1f0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
   12146:	e0 91 28 11 	lds	r30, 0x1128	; 0x801128 <twi_masterBufferIndex>
   1214a:	81 e0       	ldi	r24, 0x01	; 1
   1214c:	8e 0f       	add	r24, r30
   1214e:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <twi_masterBufferIndex>
   12152:	f0 e0       	ldi	r31, 0x00	; 0
   12154:	eb 5f       	subi	r30, 0xFB	; 251
   12156:	fe 4e       	sbci	r31, 0xEE	; 238
   12158:	80 81       	ld	r24, Z
   1215a:	e9 cf       	rjmp	.-46     	; 0x1212e <__vector_39+0x182>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   1215c:	e0 91 28 11 	lds	r30, 0x1128	; 0x801128 <twi_masterBufferIndex>
   12160:	81 e0       	ldi	r24, 0x01	; 1
   12162:	8e 0f       	add	r24, r30
   12164:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <twi_masterBufferIndex>
   12168:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   1216c:	f0 e0       	ldi	r31, 0x00	; 0
   1216e:	eb 5f       	subi	r30, 0xFB	; 251
   12170:	fe 4e       	sbci	r31, 0xEE	; 238
   12172:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
   12174:	90 91 28 11 	lds	r25, 0x1128	; 0x801128 <twi_masterBufferIndex>
   12178:	80 91 27 11 	lds	r24, 0x1127	; 0x801127 <twi_masterBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
   1217c:	98 17       	cp	r25, r24
   1217e:	c8 f2       	brcs	.-78     	; 0x12132 <__vector_39+0x186>
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
   12180:	85 e8       	ldi	r24, 0x85	; 133
   12182:	d8 cf       	rjmp	.-80     	; 0x12134 <__vector_39+0x188>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
   12184:	e0 91 28 11 	lds	r30, 0x1128	; 0x801128 <twi_masterBufferIndex>
   12188:	81 e0       	ldi	r24, 0x01	; 1
   1218a:	8e 0f       	add	r24, r30
   1218c:	80 93 28 11 	sts	0x1128, r24	; 0x801128 <twi_masterBufferIndex>
   12190:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
   12194:	f0 e0       	ldi	r31, 0x00	; 0
   12196:	eb 5f       	subi	r30, 0xFB	; 251
   12198:	fe 4e       	sbci	r31, 0xEE	; 238
   1219a:	80 83       	st	Z, r24
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:460
  if (twi_sendStop)
   1219c:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <twi_sendStop>
   121a0:	81 11       	cpse	r24, r1
   121a2:	5c cf       	rjmp	.-328    	; 0x1205c <__vector_39+0xb0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
   121a4:	81 e0       	ldi	r24, 0x01	; 1
   121a6:	80 93 25 11 	sts	0x1125, r24	; 0x801125 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
   121aa:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
   121ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
   121b0:	10 92 2b 11 	sts	0x112B, r1	; 0x80112b <twi_state>
   121b4:	24 cf       	rjmp	.-440    	; 0x11ffe <__vector_39+0x52>
twi_releaseBus():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
   121b6:	85 ec       	ldi	r24, 0xC5	; 197
   121b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
   121bc:	10 92 2b 11 	sts	0x112B, r1	; 0x80112b <twi_state>
__vector_39():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:503
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
   121c0:	80 91 b6 10 	lds	r24, 0x10B6	; 0x8010b6 <twi_rxBufferIndex>
   121c4:	80 32       	cpi	r24, 0x20	; 32
   121c6:	30 f4       	brcc	.+12     	; 0x121d4 <__vector_39+0x228>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
   121c8:	e0 91 b6 10 	lds	r30, 0x10B6	; 0x8010b6 <twi_rxBufferIndex>
   121cc:	f0 e0       	ldi	r31, 0x00	; 0
   121ce:	ea 56       	subi	r30, 0x6A	; 106
   121d0:	ff 4e       	sbci	r31, 0xEF	; 239
   121d2:	10 82       	st	Z, r1
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
   121d4:	60 91 b6 10 	lds	r22, 0x10B6	; 0x8010b6 <twi_rxBufferIndex>
   121d8:	70 e0       	ldi	r23, 0x00	; 0
   121da:	e0 91 da 10 	lds	r30, 0x10DA	; 0x8010da <twi_onSlaveReceive>
   121de:	f0 91 db 10 	lds	r31, 0x10DB	; 0x8010db <twi_onSlaveReceive+0x1>
   121e2:	86 e9       	ldi	r24, 0x96	; 150
   121e4:	90 e1       	ldi	r25, 0x10	; 16
   121e6:	19 95       	eicall
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
   121e8:	10 92 b6 10 	sts	0x10B6, r1	; 0x8010b6 <twi_rxBufferIndex>
   121ec:	08 cf       	rjmp	.-496    	; 0x11ffe <__vector_39+0x52>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
   121ee:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <twi_error>
   121f2:	34 cf       	rjmp	.-408    	; 0x1205c <__vector_39+0xb0>

000121f4 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
   121f4:	20 91 e1 10 	lds	r18, 0x10E1	; 0x8010e1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
   121f8:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:231
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
   121fa:	21 32       	cpi	r18, 0x21	; 33
   121fc:	08 f0       	brcs	.+2      	; 0x12200 <TwoWire::endTransmission()+0xc>
   121fe:	44 c0       	rjmp	.+136    	; 0x12288 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
   12200:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_state>
   12204:	81 11       	cpse	r24, r1
   12206:	fc cf       	rjmp	.-8      	; 0x12200 <TwoWire::endTransmission()+0xc>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:173
   12208:	80 91 e3 10 	lds	r24, 0x10E3	; 0x8010e3 <TwoWire::txAddress>
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
   1220c:	92 e0       	ldi	r25, 0x02	; 2
   1220e:	90 93 2b 11 	sts	0x112B, r25	; 0x80112b <twi_state>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:240
  twi_sendStop = sendStop;
   12212:	91 e0       	ldi	r25, 0x01	; 1
   12214:	90 93 2a 11 	sts	0x112A, r25	; 0x80112a <twi_sendStop>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:242
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
   12218:	9f ef       	ldi	r25, 0xFF	; 255
   1221a:	90 93 29 11 	sts	0x1129, r25	; 0x801129 <twi_error>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
   1221e:	10 92 28 11 	sts	0x1128, r1	; 0x801128 <twi_masterBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:246
  twi_masterBufferLength = length;
   12222:	20 93 27 11 	sts	0x1127, r18	; 0x801127 <twi_masterBufferLength>
   12226:	a4 e5       	ldi	r26, 0x54	; 84
   12228:	b0 e1       	ldi	r27, 0x10	; 16
   1222a:	e5 e0       	ldi	r30, 0x05	; 5
   1222c:	f1 e1       	ldi	r31, 0x11	; 17
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1222e:	90 e0       	ldi	r25, 0x00	; 0
twi_writeTo():
   12230:	29 13       	cpse	r18, r25
   12232:	31 c0       	rjmp	.+98     	; 0x12296 <TwoWire::endTransmission()+0xa2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
   12234:	10 92 26 11 	sts	0x1126, r1	; 0x801126 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:255
  twi_slarw |= address << 1;
   12238:	90 91 26 11 	lds	r25, 0x1126	; 0x801126 <twi_slarw>
   1223c:	88 0f       	add	r24, r24
   1223e:	89 2b       	or	r24, r25
   12240:	80 93 26 11 	sts	0x1126, r24	; 0x801126 <twi_slarw>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:260

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
   12244:	80 91 25 11 	lds	r24, 0x1125	; 0x801125 <twi_inRepStart>
   12248:	81 30       	cpi	r24, 0x01	; 1
   1224a:	49 f5       	brne	.+82     	; 0x1229e <TwoWire::endTransmission()+0xaa>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
   1224c:	10 92 25 11 	sts	0x1125, r1	; 0x801125 <twi_inRepStart>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:269
    do {
      TWDR = twi_slarw;
   12250:	80 91 26 11 	lds	r24, 0x1126	; 0x801126 <twi_slarw>
   12254:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:270
    } while(TWCR & _BV(TWWC));
   12258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
   1225c:	83 fd       	sbrc	r24, 3
   1225e:	f8 cf       	rjmp	.-16     	; 0x12250 <TwoWire::endTransmission()+0x5c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
   12260:	85 ec       	ldi	r24, 0xC5	; 197
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   12262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
   12266:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <twi_state>
   1226a:	82 30       	cpi	r24, 0x02	; 2
   1226c:	e1 f3       	breq	.-8      	; 0x12266 <TwoWire::endTransmission()+0x72>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:282
    continue;
  }

  if (twi_error == 0xFF)
   1226e:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_error>
   12272:	8f 3f       	cpi	r24, 0xFF	; 255
   12274:	b1 f0       	breq	.+44     	; 0x122a2 <TwoWire::endTransmission()+0xae>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
   12276:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_error>
   1227a:	80 32       	cpi	r24, 0x20	; 32
   1227c:	a1 f0       	breq	.+40     	; 0x122a6 <TwoWire::endTransmission()+0xb2>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
   1227e:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <twi_error>
   12282:	80 33       	cpi	r24, 0x30	; 48
   12284:	91 f0       	breq	.+36     	; 0x122aa <TwoWire::endTransmission()+0xb6>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
   12286:	84 e0       	ldi	r24, 0x04	; 4
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:175
  // reset tx buffer iterator vars
  txBufferIndex = 0;
   12288:	10 92 e2 10 	sts	0x10E2, r1	; 0x8010e2 <TwoWire::txBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:176
  txBufferLength = 0;
   1228c:	10 92 e1 10 	sts	0x10E1, r1	; 0x8010e1 <TwoWire::txBufferLength>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:178
  // indicate that we are done transmitting
  transmitting = 0;
   12290:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <TwoWire::transmitting>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:188
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
   12294:	08 95       	ret
twi_writeTo():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:250
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
   12296:	3d 91       	ld	r19, X+
   12298:	31 93       	st	Z+, r19
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:249
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;

  // copy data to twi buffer
  for(i = 0; i < length; ++i){
   1229a:	9f 5f       	subi	r25, 0xFF	; 255
   1229c:	c9 cf       	rjmp	.-110    	; 0x12230 <TwoWire::endTransmission()+0x3c>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
   1229e:	85 ee       	ldi	r24, 0xE5	; 229
   122a0:	e0 cf       	rjmp	.-64     	; 0x12262 <TwoWire::endTransmission()+0x6e>
_ZN7TwoWire15endTransmissionEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }

  if (twi_error == 0xFF)
    return 0; // success
   122a2:	80 e0       	ldi	r24, 0x00	; 0
   122a4:	f1 cf       	rjmp	.-30     	; 0x12288 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
   122a6:	82 e0       	ldi	r24, 0x02	; 2
   122a8:	ef cf       	rjmp	.-34     	; 0x12288 <TwoWire::endTransmission()+0x94>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
   122aa:	83 e0       	ldi	r24, 0x03	; 3
   122ac:	ed cf       	rjmp	.-38     	; 0x12288 <TwoWire::endTransmission()+0x94>

000122ae <RTC_DS1307::isrunning() [clone .constprop.127]>:
_ZN10RTC_DS13079isrunningEv.constprop.127():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   122ae:	88 e6       	ldi	r24, 0x68	; 104
   122b0:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:246
  return true;
}

uint8_t RTC_DS1307::isrunning(void) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);
   122b4:	60 e0       	ldi	r22, 0x00	; 0
   122b6:	85 ef       	ldi	r24, 0xF5	; 245
   122b8:	9d e0       	ldi	r25, 0x0D	; 13
   122ba:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:247
  Wire.endTransmission();
   122be:	85 ef       	ldi	r24, 0xF5	; 245
   122c0:	9d e0       	ldi	r25, 0x0D	; 13
   122c2:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:249

  Wire.requestFrom(DS1307_ADDRESS, 1);
   122c6:	81 e0       	ldi	r24, 0x01	; 1
   122c8:	90 e0       	ldi	r25, 0x00	; 0
   122ca:	0e 94 b8 82 	call	0x10570	; 0x10570 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:250
  uint8_t ss = Wire._I2C_READ();
   122ce:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:251
  return !(ss>>7);
   122d2:	80 58       	subi	r24, 0x80	; 128
   122d4:	87 fb       	bst	r24, 7
   122d6:	88 27       	eor	r24, r24
   122d8:	80 f9       	bld	r24, 0
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:252
}
   122da:	08 95       	ret

000122dc <ds2482reset(unsigned char)>:
_Z11ds2482reseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:170
	if(i2c_write(DS2482_C_DRST)==FALSE) { i2c_stop();return DS2482_ERR_WRITE; }
	i2c_stop();
	return DS2482_ERR_OK;
	*/        

        Wire.beginTransmission(address);
   122dc:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:171
        Wire.write(DS2482_C_DRST);
   122e0:	80 ef       	ldi	r24, 0xF0	; 240
   122e2:	90 e0       	ldi	r25, 0x00	; 0
   122e4:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:172
        if (Wire.endTransmission() == I2C_ERROR_OK)
   122e8:	85 ef       	ldi	r24, 0xF5	; 245
   122ea:	9d e0       	ldi	r25, 0x0D	; 13
   122ec:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   122f0:	81 11       	cpse	r24, r1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:175
          return DS2482_ERR_OK;
        else
          return DS2482_ERR_I2C_DEVICE;        
   122f2:	8a e0       	ldi	r24, 0x0A	; 10
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:177

}
   122f4:	08 95       	ret

000122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:127
uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
   122f6:	86 2f       	mov	r24, r22
twi_readFrom():
   122f8:	64 2f       	mov	r22, r20
   122fa:	0e 94 6a 7e 	call	0xfcd4	; 0xfcd4 <twi_readFrom.part.0.constprop.169>
requestFrom():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:116
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
   122fe:	10 92 e0 10 	sts	0x10E0, r1	; 0x8010e0 <TwoWire::rxBufferIndex>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:117
  rxBufferLength = read;
   12302:	80 93 df 10 	sts	0x10DF, r24	; 0x8010df <TwoWire::rxBufferLength>
_ZN7TwoWire11requestFromEhh():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:129
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
   12306:	08 95       	ret

00012308 <ds2482owReadByte(unsigned char, unsigned char*)>:
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:720
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owReadByte(uint8_t address, uint8_t *byte)
{
   12308:	ff 92       	push	r15
   1230a:	0f 93       	push	r16
   1230c:	1f 93       	push	r17
   1230e:	cf 93       	push	r28
   12310:	df 93       	push	r29
   12312:	d8 2f       	mov	r29, r24
   12314:	8b 01       	movw	r16, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:738
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRB);
	i2c_stop();
	*/
	
	Wire.beginTransmission(address);
   12316:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:739
        Wire.write(DS2482_C_OWRB);
   1231a:	86 e9       	ldi	r24, 0x96	; 150
   1231c:	90 e0       	ldi	r25, 0x00	; 0
   1231e:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:740
        if (Wire.endTransmission() != I2C_ERROR_OK)
   12322:	85 ef       	ldi	r24, 0xF5	; 245
   12324:	9d e0       	ldi	r25, 0x0D	; 13
   12326:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   1232a:	ce ef       	ldi	r28, 0xFE	; 254
   1232c:	88 23       	and	r24, r24
   1232e:	41 f0       	breq	.+16     	; 0x12340 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:741
          return DS2482_ERR_WRITE;
   12330:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:809
	Wire.requestFrom(address, cnt);	
        if ( Wire.available() >= 1 )
             *byte = Wire.read();	

	return DS2482_ERR_OK;
}
   12332:	8c 2f       	mov	r24, r28
   12334:	df 91       	pop	r29
   12336:	cf 91       	pop	r28
   12338:	1f 91       	pop	r17
   1233a:	0f 91       	pop	r16
   1233c:	ff 90       	pop	r15
   1233e:	08 95       	ret
   12340:	c1 50       	subi	r28, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:750
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   12342:	e1 f1       	breq	.+120    	; 0x123bc <ds2482owReadByte(unsigned char, unsigned char*)+0xb4>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:770
		//twiReadByte(byte);
		i2c_stop();		
		*/	

		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   12344:	41 e0       	ldi	r20, 0x01	; 1
   12346:	6d 2f       	mov	r22, r29
   12348:	85 ef       	ldi	r24, 0xF5	; 245
   1234a:	9d e0       	ldi	r25, 0x0D	; 13
   1234c:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
   12350:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   12354:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   12358:	89 1b       	sub	r24, r25
   1235a:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:771
                if ( Wire.available() >= 1 )
   1235c:	18 16       	cp	r1, r24
   1235e:	19 06       	cpc	r1, r25
   12360:	1c f4       	brge	.+6      	; 0x12368 <ds2482owReadByte(unsigned char, unsigned char*)+0x60>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:772
                   t = Wire.read();
   12362:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   12366:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:775
		

		if(!(t & DS2482_S_1WB))
   12368:	f0 fc       	sbrc	r15, 0
   1236a:	ea cf       	rjmp	.-44     	; 0x12340 <ds2482owReadByte(unsigned char, unsigned char*)+0x38>
ds2482setReadPointer():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:258
	if(i2c_write(pointer)==FALSE){i2c_stop(); return DS2482_ERR_WRITE;}
	i2c_stop();
	return DS2482_ERR_OK;
	*/

        Wire.beginTransmission(address);
   1236c:	8d 2f       	mov	r24, r29
   1236e:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:259
        Wire.write(DS2482_C_SRP);
   12372:	81 ee       	ldi	r24, 0xE1	; 225
   12374:	90 e0       	ldi	r25, 0x00	; 0
   12376:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:260
        Wire.write(pointer);
   1237a:	61 ee       	ldi	r22, 0xE1	; 225
   1237c:	85 ef       	ldi	r24, 0xF5	; 245
   1237e:	9d e0       	ldi	r25, 0x0D	; 13
   12380:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:261
        if (Wire.endTransmission() == I2C_ERROR_OK)
   12384:	85 ef       	ldi	r24, 0xF5	; 245
   12386:	9d e0       	ldi	r25, 0x0D	; 13
   12388:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   1238c:	c8 2f       	mov	r28, r24
   1238e:	81 11       	cpse	r24, r1
   12390:	cf cf       	rjmp	.-98     	; 0x12330 <ds2482owReadByte(unsigned char, unsigned char*)+0x28>
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:804
	*byte=t;
	i2c_stop();
	*/

	uint8_t cnt = 1;
	Wire.requestFrom(address, cnt);	
   12392:	41 e0       	ldi	r20, 0x01	; 1
   12394:	6d 2f       	mov	r22, r29
   12396:	85 ef       	ldi	r24, 0xF5	; 245
   12398:	9d e0       	ldi	r25, 0x0D	; 13
   1239a:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1239e:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   123a2:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   123a6:	89 1b       	sub	r24, r25
   123a8:	99 0b       	sbc	r25, r25
_Z16ds2482owReadBytehPh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:805
        if ( Wire.available() >= 1 )
   123aa:	18 16       	cp	r1, r24
   123ac:	19 06       	cpc	r1, r25
   123ae:	0c f0       	brlt	.+2      	; 0x123b2 <ds2482owReadByte(unsigned char, unsigned char*)+0xaa>
   123b0:	c0 cf       	rjmp	.-128    	; 0x12332 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:806
             *byte = Wire.read();	
   123b2:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   123b6:	f8 01       	movw	r30, r16
   123b8:	80 83       	st	Z, r24
   123ba:	bb cf       	rjmp	.-138    	; 0x12332 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:751
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   123bc:	c4 e0       	ldi	r28, 0x04	; 4
   123be:	b9 cf       	rjmp	.-142    	; 0x12332 <ds2482owReadByte(unsigned char, unsigned char*)+0x2a>

000123c0 <ds2482owWriteByte(unsigned char, unsigned char)>:
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:550
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t ds2482owWriteByte(uint8_t address, uint8_t byte)
{
   123c0:	0f 93       	push	r16
   123c2:	1f 93       	push	r17
   123c4:	cf 93       	push	r28
   123c6:	df 93       	push	r29
   123c8:	08 2f       	mov	r16, r24
   123ca:	d6 2f       	mov	r29, r22
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:571
	if(i2c_write(DS2482_C_OWWB)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	if(i2c_write(byte)==FALSE){i2c_stop();return DS2482_ERR_WRITE;}
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   123cc:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:572
        Wire.write(DS2482_C_OWWB);
   123d0:	85 ea       	ldi	r24, 0xA5	; 165
   123d2:	90 e0       	ldi	r25, 0x00	; 0
   123d4:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:573
	Wire.write(byte);
   123d8:	6d 2f       	mov	r22, r29
   123da:	85 ef       	ldi	r24, 0xF5	; 245
   123dc:	9d e0       	ldi	r25, 0x0D	; 13
   123de:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:574
        if (Wire.endTransmission() != I2C_ERROR_OK)
   123e2:	85 ef       	ldi	r24, 0xF5	; 245
   123e4:	9d e0       	ldi	r25, 0x0D	; 13
   123e6:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   123ea:	c8 2f       	mov	r28, r24
   123ec:	81 11       	cpse	r24, r1
   123ee:	1d c0       	rjmp	.+58     	; 0x1242a <ds2482owWriteByte(unsigned char, unsigned char)+0x6a>
   123f0:	1e ef       	ldi	r17, 0xFE	; 254
   123f2:	11 50       	subi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:584
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253){
   123f4:	e1 f0       	breq	.+56     	; 0x1242e <ds2482owWriteByte(unsigned char, unsigned char)+0x6e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:605
		twiReadByte(&byte);
		i2c_stop();
		*/
		///todo byresit ukazatel
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);
   123f6:	41 e0       	ldi	r20, 0x01	; 1
   123f8:	60 2f       	mov	r22, r16
   123fa:	85 ef       	ldi	r24, 0xF5	; 245
   123fc:	9d e0       	ldi	r25, 0x0D	; 13
   123fe:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   12402:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   12406:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   1240a:	89 1b       	sub	r24, r25
   1240c:	99 0b       	sbc	r25, r25
_Z17ds2482owWriteBytehh():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:606
                if ( Wire.available() >= 1 )
   1240e:	18 16       	cp	r1, r24
   12410:	19 06       	cpc	r1, r25
   12412:	1c f4       	brge	.+6      	; 0x1241a <ds2482owWriteByte(unsigned char, unsigned char)+0x5a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:607
                   byte = Wire.read();
   12414:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   12418:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:610


		if(!(byte & DS2482_S_1WB))
   1241a:	d0 fd       	sbrc	r29, 0
   1241c:	ea cf       	rjmp	.-44     	; 0x123f2 <ds2482owWriteByte(unsigned char, unsigned char)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:616
			break;
	}

	
	return DS2482_ERR_OK;
}
   1241e:	8c 2f       	mov	r24, r28
   12420:	df 91       	pop	r29
   12422:	cf 91       	pop	r28
   12424:	1f 91       	pop	r17
   12426:	0f 91       	pop	r16
   12428:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:575

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWWB);
	Wire.write(byte);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   1242a:	c3 e0       	ldi	r28, 0x03	; 3
   1242c:	f8 cf       	rjmp	.-16     	; 0x1241e <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:585
	 */
	while(1)
	{
		p++;
		if (p>253){
			return DS2482_ERR_READ;
   1242e:	c4 e0       	ldi	r28, 0x04	; 4
   12430:	f6 cf       	rjmp	.-20     	; 0x1241e <ds2482owWriteByte(unsigned char, unsigned char)+0x5e>

00012432 <owMatchRom(unsigned char, unsigned char*)>:
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:48
 * DS2482_ERR_START
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 */
uint8_t owMatchRom(uint8_t ds2482_address, uint8_t *rom)
{
   12432:	ef 92       	push	r14
   12434:	ff 92       	push	r15
   12436:	1f 93       	push	r17
   12438:	cf 93       	push	r28
   1243a:	df 93       	push	r29
   1243c:	18 2f       	mov	r17, r24
   1243e:	7b 01       	movw	r14, r22
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:50
	uint8_t r;
	r = ds2482owWriteByte(ds2482_address, OW_MATCH_ROM);
   12440:	65 e5       	ldi	r22, 0x55	; 85
   12442:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:51
	if(r)
   12446:	81 11       	cpse	r24, r1
   12448:	0d c0       	rjmp	.+26     	; 0x12464 <owMatchRom(unsigned char, unsigned char*)+0x32>
   1244a:	e7 01       	movw	r28, r14
   1244c:	88 e0       	ldi	r24, 0x08	; 8
   1244e:	e8 0e       	add	r14, r24
   12450:	f1 1c       	adc	r15, r1
owWriteBlock():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:29
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
	{
		r = ds2482owWriteByte(ds2482_address, *(block+c));
   12452:	69 91       	ld	r22, Y+
   12454:	81 2f       	mov	r24, r17
   12456:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <ds2482owWriteByte(unsigned char, unsigned char)>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:30
		if(r)
   1245a:	81 11       	cpse	r24, r1
   1245c:	03 c0       	rjmp	.+6      	; 0x12464 <owMatchRom(unsigned char, unsigned char*)+0x32>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:27
 */
uint8_t owWriteBlock(uint8_t ds2482_address, uint8_t *block, uint8_t length)
{
	uint8_t r, c;
	
	for(c=0;c<length;c++)
   1245e:	ec 16       	cp	r14, r28
   12460:	fd 06       	cpc	r15, r29
   12462:	b9 f7       	brne	.-18     	; 0x12452 <owMatchRom(unsigned char, unsigned char*)+0x20>
_Z10owMatchRomhPh():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:59
	r = owWriteBlock(ds2482_address, rom, 8);
	if(r)
		return r;
	
	return DS2482_ERR_OK;
}
   12464:	df 91       	pop	r29
   12466:	cf 91       	pop	r28
   12468:	1f 91       	pop	r17
   1246a:	ff 90       	pop	r15
   1246c:	ef 90       	pop	r14
   1246e:	08 95       	ret

00012470 <ds2482owReset(unsigned char)>:
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:475
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t ds2482owReset(uint8_t address)
{
   12470:	0f 93       	push	r16
   12472:	1f 93       	push	r17
   12474:	cf 93       	push	r28
   12476:	df 93       	push	r29
   12478:	08 2f       	mov	r16, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:493
	i2c_start(address+I2C_WRITE);
	i2c_write(DS2482_C_OWRS);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   1247a:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:494
        Wire.write(DS2482_C_OWRS);
   1247e:	84 eb       	ldi	r24, 0xB4	; 180
   12480:	90 e0       	ldi	r25, 0x00	; 0
   12482:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:495
        if (Wire.endTransmission() != I2C_ERROR_OK)
   12486:	85 ef       	ldi	r24, 0xF5	; 245
   12488:	9d e0       	ldi	r25, 0x0D	; 13
   1248a:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   1248e:	c8 2f       	mov	r28, r24
   12490:	81 11       	cpse	r24, r1
   12492:	1b c0       	rjmp	.+54     	; 0x124ca <ds2482owReset(unsigned char)+0x5a>
   12494:	de ef       	ldi	r29, 0xFE	; 254
   12496:	d1 50       	subi	r29, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:520
		//twiReadByte(&byte);
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
   12498:	f9 f0       	breq	.+62     	; 0x124d8 <ds2482owReset(unsigned char)+0x68>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:524
                  return DS2482_ERR_READ;		

		uint8_t cnt = 1;
		Wire.requestFrom(address, cnt);
   1249a:	41 e0       	ldi	r20, 0x01	; 1
   1249c:	60 2f       	mov	r22, r16
   1249e:	85 ef       	ldi	r24, 0xF5	; 245
   124a0:	9d e0       	ldi	r25, 0x0D	; 13
   124a2:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   124a6:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   124aa:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   124ae:	89 1b       	sub	r24, r25
   124b0:	99 0b       	sbc	r25, r25
_Z13ds2482owReseth():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:525
		if ( Wire.available() >= 1 )
   124b2:	18 16       	cp	r1, r24
   124b4:	19 06       	cpc	r1, r25
   124b6:	1c f4       	brge	.+6      	; 0x124be <ds2482owReset(unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:526
                   byte = Wire.read();
   124b8:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   124bc:	18 2f       	mov	r17, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:528

		if(!(byte & DS2482_S_1WB))
   124be:	10 fd       	sbrc	r17, 0
   124c0:	ea cf       	rjmp	.-44     	; 0x12496 <ds2482owReset(unsigned char)+0x26>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:533
			break;
	}

	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
   124c2:	11 fd       	sbrc	r17, 1
   124c4:	03 c0       	rjmp	.+6      	; 0x124cc <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:534
		return DS2482_ERR_NO_DEVICE;
   124c6:	c5 e0       	ldi	r28, 0x05	; 5
   124c8:	01 c0       	rjmp	.+2      	; 0x124cc <ds2482owReset(unsigned char)+0x5c>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:496
	*/

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWRS);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   124ca:	c3 e0       	ldi	r28, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:537
	/* Check if there is any devices detected */
	if(!(byte & DS2482_S_PPD))
		return DS2482_ERR_NO_DEVICE;

	return DS2482_ERR_OK;
}
   124cc:	8c 2f       	mov	r24, r28
   124ce:	df 91       	pop	r29
   124d0:	cf 91       	pop	r28
   124d2:	1f 91       	pop	r17
   124d4:	0f 91       	pop	r16
   124d6:	08 95       	ret
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:521
		byte=i2c_readNak();
		i2c_stop();
		*/
		p++;
                if (p>253)
                  return DS2482_ERR_READ;		
   124d8:	c4 e0       	ldi	r28, 0x04	; 4
   124da:	f8 cf       	rjmp	.-16     	; 0x124cc <ds2482owReset(unsigned char)+0x5c>

000124dc <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]>:
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:122
 * DS2482_ERR_ADDRESS
 * DS2482_ERR_WRITE
 * DS2482_ERR_READ
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
   124dc:	df 92       	push	r13
   124de:	ef 92       	push	r14
   124e0:	ff 92       	push	r15
   124e2:	0f 93       	push	r16
   124e4:	1f 93       	push	r17
   124e6:	cf 93       	push	r28
   124e8:	df 93       	push	r29
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:130
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;

	if(lastDevice)
   124ea:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <lastDevice>
   124ee:	99 23       	and	r25, r25
   124f0:	51 f0       	breq	.+20     	; 0x12506 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x2a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:131
		return DS2482_ERR_NO_DEVICE;
   124f2:	d5 e0       	ldi	r29, 0x05	; 5
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:190
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
}
   124f4:	8d 2f       	mov	r24, r29
   124f6:	df 91       	pop	r29
   124f8:	cf 91       	pop	r28
   124fa:	1f 91       	pop	r17
   124fc:	0f 91       	pop	r16
   124fe:	ff 90       	pop	r15
   12500:	ef 90       	pop	r14
   12502:	df 90       	pop	r13
   12504:	08 95       	ret
   12506:	f8 2e       	mov	r15, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:133
	serial_byte_number = 0;

	if(lastDevice)
		return DS2482_ERR_NO_DEVICE;

	r = owReset(ds2482_address);
   12508:	0e 94 38 92 	call	0x12470	; 0x12470 <ds2482owReset(unsigned char)>
   1250c:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:134
	if(r)	return r;
   1250e:	81 11       	cpse	r24, r1
   12510:	f1 cf       	rjmp	.-30     	; 0x124f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:136

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
   12512:	60 ef       	ldi	r22, 0xF0	; 240
   12514:	8f 2d       	mov	r24, r15
   12516:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <ds2482owWriteByte(unsigned char, unsigned char)>
   1251a:	d8 2f       	mov	r29, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:128
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
	serial_byte_number = 0;
   1251c:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:127
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
	last_zero = 0;
	serial_byte_mask = 1;
   1251e:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:125
 * DS2482_ERR_NO_DEVICE
 */
uint8_t owMatchNext(uint8_t ds2482_address, uint8_t *rom)
{
	uint8_t r, bit_number, last_zero, direction, bit_test, serial_byte_mask, serial_byte_number;
	bit_number = 1;
   12520:	01 e0       	ldi	r16, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:137

	r = owReset(ds2482_address);
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
   12522:	81 11       	cpse	r24, r1
   12524:	e7 cf       	rjmp	.-50     	; 0x124f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:142
	
	while(serial_byte_number < 8)
	{
		/* If this discrepancy occurs before the last, use the same bit as we did the last time in this place */
		if(bit_number < lastDiscrepancy)
   12526:	80 91 57 0b 	lds	r24, 0x0B57	; 0x800b57 <lastDiscrepancy>
   1252a:	08 17       	cp	r16, r24
   1252c:	50 f4       	brcc	.+20     	; 0x12542 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x66>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:143
			direction = ((rom[serial_byte_number] & serial_byte_mask) > 0);
   1252e:	ee 2d       	mov	r30, r14
   12530:	f0 e0       	ldi	r31, 0x00	; 0
   12532:	e8 5a       	subi	r30, 0xA8	; 168
   12534:	f4 4f       	sbci	r31, 0xF4	; 244
   12536:	80 81       	ld	r24, Z
   12538:	81 23       	and	r24, r17
   1253a:	c1 e0       	ldi	r28, 0x01	; 1
   1253c:	29 f4       	brne	.+10     	; 0x12548 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:146
		else
			/* If same bit as last time, pick 1, else pick 0 */
			direction = (bit_number == lastDiscrepancy);
   1253e:	c0 e0       	ldi	r28, 0x00	; 0
   12540:	03 c0       	rjmp	.+6      	; 0x12548 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x6c>
   12542:	c1 e0       	ldi	r28, 0x01	; 1
   12544:	80 13       	cpse	r24, r16
   12546:	fb cf       	rjmp	.-10     	; 0x1253e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x62>
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:666
	i2c_write(DS2482_C_OWT);
	i2c_write((*direction)?0x80:0x00);
	i2c_stop();
	*/

	Wire.beginTransmission(address);
   12548:	8f 2d       	mov	r24, r15
   1254a:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:667
        Wire.write(DS2482_C_OWT);
   1254e:	88 e7       	ldi	r24, 0x78	; 120
   12550:	90 e0       	ldi	r25, 0x00	; 0
   12552:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:668
        Wire.write((*direction)?0x80:0x00);
   12556:	90 e0       	ldi	r25, 0x00	; 0
   12558:	80 e0       	ldi	r24, 0x00	; 0
ds2482owWriteTriplet():
   1255a:	cc 23       	and	r28, r28
   1255c:	11 f0       	breq	.+4      	; 0x12562 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x86>
_Z11owMatchNexthPh.constprop.97():
   1255e:	80 e8       	ldi	r24, 0x80	; 128
   12560:	90 e0       	ldi	r25, 0x00	; 0
ds2482owWriteTriplet():
   12562:	0e 94 27 86 	call	0x10c4e	; 0x10c4e <TwoWire::write(int) [clone .constprop.99]>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:669
        if (Wire.endTransmission() != I2C_ERROR_OK)
   12566:	85 ef       	ldi	r24, 0xF5	; 245
   12568:	9d e0       	ldi	r25, 0x0D	; 13
   1256a:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
   1256e:	81 11       	cpse	r24, r1
   12570:	53 c0       	rjmp	.+166    	; 0x12618 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x13c>
   12572:	6e ef       	ldi	r22, 0xFE	; 254
   12574:	d6 2e       	mov	r13, r22
   12576:	da 94       	dec	r13
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:679
	 * Keep reading the status register until the 1WB bit is cleared.
	 */
	while(1)
	{
		p++;
		if (p>253)
   12578:	dd 20       	and	r13, r13
   1257a:	09 f4       	brne	.+2      	; 0x1257e <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xa2>
   1257c:	4f c0       	rjmp	.+158    	; 0x1261c <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x140>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:698
		twiReadByte(direction);
		i2c_stop();
		*/
	
		uint8_t cnt = 1;
                Wire.requestFrom(address, cnt);	
   1257e:	41 e0       	ldi	r20, 0x01	; 1
   12580:	6f 2d       	mov	r22, r15
   12582:	85 ef       	ldi	r24, 0xF5	; 245
   12584:	9d e0       	ldi	r25, 0x0D	; 13
   12586:	0e 94 7b 91 	call	0x122f6	; 0x122f6 <TwoWire::requestFrom(unsigned char, unsigned char)>
available():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:238
   1258a:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <TwoWire::rxBufferLength>
   1258e:	90 91 e0 10 	lds	r25, 0x10E0	; 0x8010e0 <TwoWire::rxBufferIndex>
   12592:	89 1b       	sub	r24, r25
   12594:	99 0b       	sbc	r25, r25
ds2482owWriteTriplet():
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:699
                if ( Wire.available() >= 1 )
   12596:	18 16       	cp	r1, r24
   12598:	19 06       	cpc	r1, r25
   1259a:	1c f4       	brge	.+6      	; 0x125a2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xc6>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:700
                   *direction = Wire.read();
   1259c:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   125a0:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:702

		if(!((*direction) & DS2482_S_1WB))
   125a2:	c0 fd       	sbrc	r28, 0
   125a4:	e8 cf       	rjmp	.-48     	; 0x12576 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x9a>
_Z11owMatchNexthPh.constprop.97():
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:152

		r=ds2482owWriteTriplet(ds2482_address, &direction);
		if(r) return r;

		/* Convert direction to bit_test value */
		bit_test = (direction&(DS2482_S_SBR|DS2482_S_TSB)) >> 5;
   125a6:	2c 2f       	mov	r18, r28
   125a8:	30 e0       	ldi	r19, 0x00	; 0
   125aa:	c9 01       	movw	r24, r18
   125ac:	45 e0       	ldi	r20, 0x05	; 5
   125ae:	95 95       	asr	r25
   125b0:	87 95       	ror	r24
   125b2:	4a 95       	dec	r20
   125b4:	e1 f7       	brne	.-8      	; 0x125ae <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xd2>
   125b6:	83 70       	andi	r24, 0x03	; 3
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:153
		direction>>=7;
   125b8:	22 0f       	add	r18, r18
   125ba:	23 2f       	mov	r18, r19
   125bc:	22 1f       	adc	r18, r18
   125be:	33 0b       	sbc	r19, r19
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:154
		if(bit_test == 3)	/* Both bits where 1 */
   125c0:	83 30       	cpi	r24, 0x03	; 3
   125c2:	99 f0       	breq	.+38     	; 0x125ea <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x10e>
   125c4:	ee 2d       	mov	r30, r14
   125c6:	f0 e0       	ldi	r31, 0x00	; 0
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:157
			break;

		if(bit_test == 0)
   125c8:	81 11       	cpse	r24, r1
   125ca:	1b c0       	rjmp	.+54     	; 0x12602 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x126>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   125cc:	22 23       	and	r18, r18
   125ce:	11 f1       	breq	.+68     	; 0x12614 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x138>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:167
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
			rom[serial_byte_number] |= serial_byte_mask;
   125d0:	e8 5a       	subi	r30, 0xA8	; 168
   125d2:	f4 4f       	sbci	r31, 0xF4	; 244
   125d4:	80 81       	ld	r24, Z
   125d6:	81 2b       	or	r24, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   125d8:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:171
			
		bit_number++;
   125da:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:172
		serial_byte_mask <<= 1;
   125dc:	11 0f       	add	r17, r17
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:174

		if(serial_byte_mask == 0)
   125de:	11 f4       	brne	.+4      	; 0x125e4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x108>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:176
		{
			serial_byte_number++;
   125e0:	e3 94       	inc	r14
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:177
			serial_byte_mask = 1;
   125e2:	11 e0       	ldi	r17, 0x01	; 1
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:139
	if(r)	return r;

	r = owWriteByte(ds2482_address, OW_SEARCH_ROM);
	if(r)	return r;
	
	while(serial_byte_number < 8)
   125e4:	88 e0       	ldi	r24, 0x08	; 8
   125e6:	e8 12       	cpse	r14, r24
   125e8:	9e cf       	rjmp	.-196    	; 0x12526 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x4a>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:181
			serial_byte_number++;
			serial_byte_mask = 1;
		}
	}	/* while */
	
	if(!(bit_number < 65))
   125ea:	01 34       	cpi	r16, 0x41	; 65
   125ec:	08 f4       	brcc	.+2      	; 0x125f0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x114>
   125ee:	81 cf       	rjmp	.-254    	; 0x124f2 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x16>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:183
	{
		lastDiscrepancy = last_zero;
   125f0:	d0 93 57 0b 	sts	0x0B57, r29	; 0x800b57 <lastDiscrepancy>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:184
		lastDevice = (lastDiscrepancy == 0);
   125f4:	81 e0       	ldi	r24, 0x01	; 1
   125f6:	d1 11       	cpse	r29, r1
   125f8:	80 e0       	ldi	r24, 0x00	; 0
   125fa:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <lastDevice>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:189
	}else
	{
		return DS2482_ERR_NO_DEVICE;
	}
	return DS2482_ERR_OK;
   125fe:	d0 e0       	ldi	r29, 0x00	; 0
   12600:	79 cf       	rjmp	.-270    	; 0x124f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:166
				last_zero = bit_number;
		}
		/* else bit_test > 0 which means the direction was decied automaticly by the DS2482 */

		/* Set or clear the bit in the ROM */
		if(direction)
   12602:	21 11       	cpse	r18, r1
   12604:	e5 cf       	rjmp	.-54     	; 0x125d0 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xf4>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:169
			rom[serial_byte_number] |= serial_byte_mask;
		else
			rom[serial_byte_number] &= ~serial_byte_mask;
   12606:	e8 5a       	subi	r30, 0xA8	; 168
   12608:	f4 4f       	sbci	r31, 0xF4	; 244
   1260a:	80 81       	ld	r24, Z
   1260c:	91 2f       	mov	r25, r17
   1260e:	90 95       	com	r25
   12610:	89 23       	and	r24, r25
   12612:	e2 cf       	rjmp	.-60     	; 0x125d8 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0xfc>
/home/saric/Arduino/libraries/saric_ds2482/ow.cpp:160
			break;

		if(bit_test == 0)
		{
			/* Multiple matches, the DS2482 handled our branching, we brached to direction */ 
			if(!direction)
   12614:	d0 2f       	mov	r29, r16
   12616:	f7 cf       	rjmp	.-18     	; 0x12606 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x12a>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:670

	Wire.beginTransmission(address);
        Wire.write(DS2482_C_OWT);
        Wire.write((*direction)?0x80:0x00);
        if (Wire.endTransmission() != I2C_ERROR_OK)
          return DS2482_ERR_WRITE;
   12618:	d3 e0       	ldi	r29, 0x03	; 3
   1261a:	6c cf       	rjmp	.-296    	; 0x124f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>
/home/saric/Arduino/libraries/saric_ds2482/saric_ds2482.cpp:680
	 */
	while(1)
	{
		p++;
		if (p>253)
			return DS2482_ERR_READ;
   1261c:	d4 e0       	ldi	r29, 0x04	; 4
   1261e:	6a cf       	rjmp	.-300    	; 0x124f4 <owMatchNext(unsigned char, unsigned char*) [clone .constprop.97]+0x18>

00012620 <RTC_DS1307::adjust(DateTime const&)>:
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:254

void RTC_DS1307::adjust(const DateTime& dt) {
   12620:	1f 93       	push	r17
   12622:	cf 93       	push	r28
   12624:	df 93       	push	r29
   12626:	ec 01       	movw	r28, r24
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   12628:	88 e6       	ldi	r24, 0x68	; 104
   1262a:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:256
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
   1262e:	60 e0       	ldi	r22, 0x00	; 0
   12630:	85 ef       	ldi	r24, 0xF5	; 245
   12632:	9d e0       	ldi	r25, 0x0D	; 13
   12634:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   12638:	2d 81       	ldd	r18, Y+5	; 0x05
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1263a:	1a e0       	ldi	r17, 0x0A	; 10
   1263c:	82 2f       	mov	r24, r18
   1263e:	61 2f       	mov	r22, r17
   12640:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   12644:	68 2f       	mov	r22, r24
   12646:	66 0f       	add	r22, r22
   12648:	68 0f       	add	r22, r24
   1264a:	66 0f       	add	r22, r22
   1264c:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:258

void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   1264e:	85 ef       	ldi	r24, 0xF5	; 245
   12650:	9d e0       	ldi	r25, 0x0D	; 13
   12652:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   12656:	2c 81       	ldd	r18, Y+4	; 0x04
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12658:	82 2f       	mov	r24, r18
   1265a:	61 2f       	mov	r22, r17
   1265c:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   12660:	68 2f       	mov	r22, r24
   12662:	66 0f       	add	r22, r22
   12664:	68 0f       	add	r22, r24
   12666:	66 0f       	add	r22, r22
   12668:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:259
void RTC_DS1307::adjust(const DateTime& dt) {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   1266a:	85 ef       	ldi	r24, 0xF5	; 245
   1266c:	9d e0       	ldi	r25, 0x0D	; 13
   1266e:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   12672:	2b 81       	ldd	r18, Y+3	; 0x03
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   12674:	82 2f       	mov	r24, r18
   12676:	61 2f       	mov	r22, r17
   12678:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   1267c:	68 2f       	mov	r22, r24
   1267e:	66 0f       	add	r22, r22
   12680:	68 0f       	add	r22, r24
   12682:	66 0f       	add	r22, r22
   12684:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:260
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0); // start at location 0
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   12686:	85 ef       	ldi	r24, 0xF5	; 245
   12688:	9d e0       	ldi	r25, 0x0D	; 13
   1268a:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:261
  Wire._I2C_WRITE(bin2bcd(0));
   1268e:	60 e0       	ldi	r22, 0x00	; 0
   12690:	85 ef       	ldi	r24, 0xF5	; 245
   12692:	9d e0       	ldi	r25, 0x0D	; 13
   12694:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   12698:	2a 81       	ldd	r18, Y+2	; 0x02
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   1269a:	82 2f       	mov	r24, r18
   1269c:	61 2f       	mov	r22, r17
   1269e:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   126a2:	68 2f       	mov	r22, r24
   126a4:	66 0f       	add	r22, r22
   126a6:	68 0f       	add	r22, r24
   126a8:	66 0f       	add	r22, r22
   126aa:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:262
  //Wire._I2C_WRITE(0x80);
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   126ac:	85 ef       	ldi	r24, 0xF5	; 245
   126ae:	9d e0       	ldi	r25, 0x0D	; 13
   126b0:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   126b4:	29 81       	ldd	r18, Y+1	; 0x01
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   126b6:	82 2f       	mov	r24, r18
   126b8:	61 2f       	mov	r22, r17
   126ba:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   126be:	68 2f       	mov	r22, r24
   126c0:	66 0f       	add	r22, r22
   126c2:	68 0f       	add	r22, r24
   126c4:	66 0f       	add	r22, r22
   126c6:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:263
  Wire._I2C_WRITE(bin2bcd(dt.second()));
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   126c8:	85 ef       	ldi	r24, 0xF5	; 245
   126ca:	9d e0       	ldi	r25, 0x0D	; 13
   126cc:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
   126d0:	28 81       	ld	r18, Y
bin2bcd():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:237

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }
   126d2:	82 2f       	mov	r24, r18
   126d4:	61 2f       	mov	r22, r17
   126d6:	0e 94 f4 b5 	call	0x16be8	; 0x16be8 <__udivmodqi4>
   126da:	68 2f       	mov	r22, r24
   126dc:	66 0f       	add	r22, r22
   126de:	68 0f       	add	r22, r24
   126e0:	66 0f       	add	r22, r22
   126e2:	62 0f       	add	r22, r18
_ZN10RTC_DS13076adjustERK8DateTime():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:264
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   126e4:	85 ef       	ldi	r24, 0xF5	; 245
   126e6:	9d e0       	ldi	r25, 0x0D	; 13
   126e8:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire.endTransmission();
   126ec:	85 ef       	ldi	r24, 0xF5	; 245
   126ee:	9d e0       	ldi	r25, 0x0D	; 13
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:266
}
   126f0:	df 91       	pop	r29
   126f2:	cf 91       	pop	r28
   126f4:	1f 91       	pop	r17
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:265
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
  Wire._I2C_WRITE(bin2bcd(0));
  Wire._I2C_WRITE(bin2bcd(dt.day()));
  Wire._I2C_WRITE(bin2bcd(dt.month()));
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();
   126f6:	0c 94 fa 90 	jmp	0x121f4	; 0x121f4 <TwoWire::endTransmission()>

000126fa <PubSubClient::connected()>:
_ZN12PubSubClient9connectedEv():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:538
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


boolean PubSubClient::connected() {
   126fa:	cf 93       	push	r28
   126fc:	df 93       	push	r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:540
    boolean rc;
    if (_client == NULL ) {
   126fe:	fc 01       	movw	r30, r24
   12700:	a0 81       	ld	r26, Z
   12702:	b1 81       	ldd	r27, Z+1	; 0x01
   12704:	10 97       	sbiw	r26, 0x00	; 0
   12706:	21 f4       	brne	.+8      	; 0x12710 <PubSubClient::connected()+0x16>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
        rc = false;
    } else {
        rc = (int)_client->connected();
   12708:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:553
                _client->stop();
            }
        }
    }
    return rc;
}
   1270a:	df 91       	pop	r29
   1270c:	cf 91       	pop	r28
   1270e:	08 95       	ret
   12710:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   12712:	ed 91       	ld	r30, X+
   12714:	fc 91       	ld	r31, X
   12716:	11 97       	sbiw	r26, 0x01	; 1
   12718:	06 88       	ldd	r0, Z+22	; 0x16
   1271a:	f7 89       	ldd	r31, Z+23	; 0x17
   1271c:	e0 2d       	mov	r30, r0
   1271e:	cd 01       	movw	r24, r26
   12720:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:544
        if (!rc) {
   12722:	81 11       	cpse	r24, r1
   12724:	1e c0       	rjmp	.+60     	; 0x12762 <PubSubClient::connected()+0x68>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:545
            if (this->_state == MQTT_CONNECTED) {
   12726:	fe 01       	movw	r30, r28
   12728:	e5 5e       	subi	r30, 0xE5	; 229
   1272a:	fd 4f       	sbci	r31, 0xFD	; 253
   1272c:	80 81       	ld	r24, Z
   1272e:	91 81       	ldd	r25, Z+1	; 0x01
   12730:	89 2b       	or	r24, r25
   12732:	51 f7       	brne	.-44     	; 0x12708 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:546
                this->_state = MQTT_CONNECTION_LOST;
   12734:	8d ef       	ldi	r24, 0xFD	; 253
   12736:	9f ef       	ldi	r25, 0xFF	; 255
   12738:	91 83       	std	Z+1, r25	; 0x01
   1273a:	80 83       	st	Z, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:547
                _client->flush();
   1273c:	88 81       	ld	r24, Y
   1273e:	99 81       	ldd	r25, Y+1	; 0x01
   12740:	dc 01       	movw	r26, r24
   12742:	ed 91       	ld	r30, X+
   12744:	fc 91       	ld	r31, X
   12746:	06 80       	ldd	r0, Z+6	; 0x06
   12748:	f7 81       	ldd	r31, Z+7	; 0x07
   1274a:	e0 2d       	mov	r30, r0
   1274c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:548
                _client->stop();
   1274e:	88 81       	ld	r24, Y
   12750:	99 81       	ldd	r25, Y+1	; 0x01
   12752:	dc 01       	movw	r26, r24
   12754:	ed 91       	ld	r30, X+
   12756:	fc 91       	ld	r31, X
   12758:	04 88       	ldd	r0, Z+20	; 0x14
   1275a:	f5 89       	ldd	r31, Z+21	; 0x15
   1275c:	e0 2d       	mov	r30, r0
   1275e:	19 95       	eicall
   12760:	d3 cf       	rjmp	.-90     	; 0x12708 <PubSubClient::connected()+0xe>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:543
boolean PubSubClient::connected() {
    boolean rc;
    if (_client == NULL ) {
        rc = false;
    } else {
        rc = (int)_client->connected();
   12762:	81 e0       	ldi	r24, 0x01	; 1
   12764:	d2 cf       	rjmp	.-92     	; 0x1270a <PubSubClient::connected()+0x10>

00012766 <PubSubClient::loop() [clone .constprop.106]>:
_ZN12PubSubClient4loopEv.constprop.106():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:282
    }

    return len;
}

boolean PubSubClient::loop() {
   12766:	3f 92       	push	r3
   12768:	4f 92       	push	r4
   1276a:	5f 92       	push	r5
   1276c:	6f 92       	push	r6
   1276e:	7f 92       	push	r7
   12770:	8f 92       	push	r8
   12772:	9f 92       	push	r9
   12774:	af 92       	push	r10
   12776:	bf 92       	push	r11
   12778:	cf 92       	push	r12
   1277a:	df 92       	push	r13
   1277c:	ef 92       	push	r14
   1277e:	ff 92       	push	r15
   12780:	0f 93       	push	r16
   12782:	1f 93       	push	r17
   12784:	cf 93       	push	r28
   12786:	df 93       	push	r29
   12788:	1f 92       	push	r1
   1278a:	cd b7       	in	r28, 0x3d	; 61
   1278c:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1278e:	4d b6       	in	r4, 0x3d	; 61
   12790:	5e b6       	in	r5, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:283

    return len;
}

boolean PubSubClient::loop() {
    if (connected()) {
   12792:	8e e0       	ldi	r24, 0x0E	; 14
   12794:	9e e0       	ldi	r25, 0x0E	; 14
   12796:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   1279a:	98 2e       	mov	r9, r24
   1279c:	88 23       	and	r24, r24
   1279e:	09 f4       	brne	.+2      	; 0x127a2 <PubSubClient::loop() [clone .constprop.106]+0x3c>
   127a0:	45 c0       	rjmp	.+138    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:284
        unsigned long t = millis();
   127a2:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   127a6:	6b 01       	movw	r12, r22
   127a8:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:285
        if ((t - lastInActivity > MQTT_KEEPALIVE*1000UL) || (t - lastOutActivity > MQTT_KEEPALIVE*1000UL)) {
   127aa:	80 91 16 10 	lds	r24, 0x1016	; 0x801016 <mqtt_client+0x208>
   127ae:	90 91 17 10 	lds	r25, 0x1017	; 0x801017 <mqtt_client+0x209>
   127b2:	a0 91 18 10 	lds	r26, 0x1018	; 0x801018 <mqtt_client+0x20a>
   127b6:	b0 91 19 10 	lds	r27, 0x1019	; 0x801019 <mqtt_client+0x20b>
   127ba:	a7 01       	movw	r20, r14
   127bc:	96 01       	movw	r18, r12
   127be:	28 1b       	sub	r18, r24
   127c0:	39 0b       	sbc	r19, r25
   127c2:	4a 0b       	sbc	r20, r26
   127c4:	5b 0b       	sbc	r21, r27
   127c6:	da 01       	movw	r26, r20
   127c8:	c9 01       	movw	r24, r18
   127ca:	89 39       	cpi	r24, 0x99	; 153
   127cc:	9a 43       	sbci	r25, 0x3A	; 58
   127ce:	a1 05       	cpc	r26, r1
   127d0:	b1 05       	cpc	r27, r1
   127d2:	b0 f4       	brcc	.+44     	; 0x12800 <PubSubClient::loop() [clone .constprop.106]+0x9a>
   127d4:	80 91 12 10 	lds	r24, 0x1012	; 0x801012 <mqtt_client+0x204>
   127d8:	90 91 13 10 	lds	r25, 0x1013	; 0x801013 <mqtt_client+0x205>
   127dc:	a0 91 14 10 	lds	r26, 0x1014	; 0x801014 <mqtt_client+0x206>
   127e0:	b0 91 15 10 	lds	r27, 0x1015	; 0x801015 <mqtt_client+0x207>
   127e4:	a7 01       	movw	r20, r14
   127e6:	96 01       	movw	r18, r12
   127e8:	28 1b       	sub	r18, r24
   127ea:	39 0b       	sbc	r19, r25
   127ec:	4a 0b       	sbc	r20, r26
   127ee:	5b 0b       	sbc	r21, r27
   127f0:	da 01       	movw	r26, r20
   127f2:	c9 01       	movw	r24, r18
   127f4:	89 39       	cpi	r24, 0x99	; 153
   127f6:	9a 43       	sbci	r25, 0x3A	; 58
   127f8:	a1 05       	cpc	r26, r1
   127fa:	b1 05       	cpc	r27, r1
   127fc:	08 f4       	brcc	.+2      	; 0x12800 <PubSubClient::loop() [clone .constprop.106]+0x9a>
   127fe:	52 c0       	rjmp	.+164    	; 0x128a4 <PubSubClient::loop() [clone .constprop.106]+0x13e>
   12800:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   12804:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:286
            if (pingOutstanding) {
   12808:	20 91 1a 10 	lds	r18, 0x101A	; 0x80101a <mqtt_client+0x20c>
   1280c:	22 23       	and	r18, r18
   1280e:	39 f1       	breq	.+78     	; 0x1285e <PubSubClient::loop() [clone .constprop.106]+0xf8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:287
                this->_state = MQTT_CONNECTION_TIMEOUT;
   12810:	2c ef       	ldi	r18, 0xFC	; 252
   12812:	3f ef       	ldi	r19, 0xFF	; 255
   12814:	30 93 2a 10 	sts	0x102A, r19	; 0x80102a <mqtt_client+0x21c>
   12818:	20 93 29 10 	sts	0x1029, r18	; 0x801029 <mqtt_client+0x21b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:288
                _client->stop();
   1281c:	dc 01       	movw	r26, r24
   1281e:	ed 91       	ld	r30, X+
   12820:	fc 91       	ld	r31, X
   12822:	04 88       	ldd	r0, Z+20	; 0x14
   12824:	f5 89       	ldd	r31, Z+21	; 0x15
   12826:	e0 2d       	mov	r30, r0
   12828:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:289
                return false;
   1282a:	91 2c       	mov	r9, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:345
            }
        }
        return true;
    }
    return false;
}
   1282c:	89 2d       	mov	r24, r9
   1282e:	0f b6       	in	r0, 0x3f	; 63
   12830:	f8 94       	cli
   12832:	5e be       	out	0x3e, r5	; 62
   12834:	0f be       	out	0x3f, r0	; 63
   12836:	4d be       	out	0x3d, r4	; 61
   12838:	0f 90       	pop	r0
   1283a:	df 91       	pop	r29
   1283c:	cf 91       	pop	r28
   1283e:	1f 91       	pop	r17
   12840:	0f 91       	pop	r16
   12842:	ff 90       	pop	r15
   12844:	ef 90       	pop	r14
   12846:	df 90       	pop	r13
   12848:	cf 90       	pop	r12
   1284a:	bf 90       	pop	r11
   1284c:	af 90       	pop	r10
   1284e:	9f 90       	pop	r9
   12850:	8f 90       	pop	r8
   12852:	7f 90       	pop	r7
   12854:	6f 90       	pop	r6
   12856:	5f 90       	pop	r5
   12858:	4f 90       	pop	r4
   1285a:	3f 90       	pop	r3
   1285c:	08 95       	ret
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:291
            if (pingOutstanding) {
                this->_state = MQTT_CONNECTION_TIMEOUT;
                _client->stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
   1285e:	20 ec       	ldi	r18, 0xC0	; 192
   12860:	20 93 10 0e 	sts	0x0E10, r18	; 0x800e10 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:292
                buffer[1] = 0;
   12864:	10 92 11 0e 	sts	0x0E11, r1	; 0x800e11 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:293
                _client->write(buffer,2);
   12868:	dc 01       	movw	r26, r24
   1286a:	ed 91       	ld	r30, X+
   1286c:	fc 91       	ld	r31, X
   1286e:	02 80       	ldd	r0, Z+2	; 0x02
   12870:	f3 81       	ldd	r31, Z+3	; 0x03
   12872:	e0 2d       	mov	r30, r0
   12874:	42 e0       	ldi	r20, 0x02	; 2
   12876:	50 e0       	ldi	r21, 0x00	; 0
   12878:	60 e1       	ldi	r22, 0x10	; 16
   1287a:	7e e0       	ldi	r23, 0x0E	; 14
   1287c:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:294
                lastOutActivity = t;
   1287e:	c0 92 12 10 	sts	0x1012, r12	; 0x801012 <mqtt_client+0x204>
   12882:	d0 92 13 10 	sts	0x1013, r13	; 0x801013 <mqtt_client+0x205>
   12886:	e0 92 14 10 	sts	0x1014, r14	; 0x801014 <mqtt_client+0x206>
   1288a:	f0 92 15 10 	sts	0x1015, r15	; 0x801015 <mqtt_client+0x207>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:295
                lastInActivity = t;
   1288e:	c0 92 16 10 	sts	0x1016, r12	; 0x801016 <mqtt_client+0x208>
   12892:	d0 92 17 10 	sts	0x1017, r13	; 0x801017 <mqtt_client+0x209>
   12896:	e0 92 18 10 	sts	0x1018, r14	; 0x801018 <mqtt_client+0x20a>
   1289a:	f0 92 19 10 	sts	0x1019, r15	; 0x801019 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:296
                pingOutstanding = true;
   1289e:	81 e0       	ldi	r24, 0x01	; 1
   128a0:	80 93 1a 10 	sts	0x101A, r24	; 0x80101a <mqtt_client+0x20c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:299
            }
        }
        if (_client->available()) {
   128a4:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   128a8:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
   128ac:	dc 01       	movw	r26, r24
   128ae:	ed 91       	ld	r30, X+
   128b0:	fc 91       	ld	r31, X
   128b2:	00 84       	ldd	r0, Z+8	; 0x08
   128b4:	f1 85       	ldd	r31, Z+9	; 0x09
   128b6:	e0 2d       	mov	r30, r0
   128b8:	19 95       	eicall
   128ba:	89 2b       	or	r24, r25
   128bc:	09 f4       	brne	.+2      	; 0x128c0 <PubSubClient::loop() [clone .constprop.106]+0x15a>
   128be:	b6 cf       	rjmp	.-148    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:301
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   128c0:	ce 01       	movw	r24, r28
   128c2:	01 96       	adiw	r24, 0x01	; 1
   128c4:	0e 94 cb 8c 	call	0x11996	; 0x11996 <PubSubClient::readPacket(unsigned char*) [clone .constprop.138]>
   128c8:	ac 01       	movw	r20, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:304
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   128ca:	89 2b       	or	r24, r25
   128cc:	09 f4       	brne	.+2      	; 0x128d0 <PubSubClient::loop() [clone .constprop.106]+0x16a>
   128ce:	ae cf       	rjmp	.-164    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:305
                lastInActivity = t;
   128d0:	c0 92 16 10 	sts	0x1016, r12	; 0x801016 <mqtt_client+0x208>
   128d4:	d0 92 17 10 	sts	0x1017, r13	; 0x801017 <mqtt_client+0x209>
   128d8:	e0 92 18 10 	sts	0x1018, r14	; 0x801018 <mqtt_client+0x20a>
   128dc:	f0 92 19 10 	sts	0x1019, r15	; 0x801019 <mqtt_client+0x20b>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:306
                uint8_t type = buffer[0]&0xF0;
   128e0:	80 90 10 0e 	lds	r8, 0x0E10	; 0x800e10 <mqtt_client+0x2>
   128e4:	88 2d       	mov	r24, r8
   128e6:	80 7f       	andi	r24, 0xF0	; 240
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:307
                if (type == MQTTPUBLISH) {
   128e8:	80 33       	cpi	r24, 0x30	; 48
   128ea:	09 f0       	breq	.+2      	; 0x128ee <PubSubClient::loop() [clone .constprop.106]+0x188>
   128ec:	83 c0       	rjmp	.+262    	; 0x129f4 <PubSubClient::loop() [clone .constprop.106]+0x28e>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:308
                    if (callback) {
   128ee:	a0 90 1b 10 	lds	r10, 0x101B	; 0x80101b <mqtt_client+0x20d>
   128f2:	b0 90 1c 10 	lds	r11, 0x101C	; 0x80101c <mqtt_client+0x20e>
   128f6:	a1 14       	cp	r10, r1
   128f8:	b1 04       	cpc	r11, r1
   128fa:	09 f4       	brne	.+2      	; 0x128fe <PubSubClient::loop() [clone .constprop.106]+0x198>
   128fc:	97 cf       	rjmp	.-210    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:331
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   128fe:	6d b6       	in	r6, 0x3d	; 61
   12900:	7e b6       	in	r7, 0x3e	; 62
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:309
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
   12902:	69 81       	ldd	r22, Y+1	; 0x01
   12904:	70 e0       	ldi	r23, 0x00	; 0
   12906:	fb 01       	movw	r30, r22
   12908:	e2 5f       	subi	r30, 0xF2	; 242
   1290a:	f1 4f       	sbci	r31, 0xF1	; 241
   1290c:	23 81       	ldd	r18, Z+3	; 0x03
   1290e:	30 e0       	ldi	r19, 0x00	; 0
   12910:	32 2f       	mov	r19, r18
   12912:	22 27       	eor	r18, r18
   12914:	84 81       	ldd	r24, Z+4	; 0x04
   12916:	28 0f       	add	r18, r24
   12918:	31 1d       	adc	r19, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:310
                        char topic[tl+1];
   1291a:	c9 01       	movw	r24, r18
   1291c:	01 96       	adiw	r24, 0x01	; 1
   1291e:	ed b7       	in	r30, 0x3d	; 61
   12920:	fe b7       	in	r31, 0x3e	; 62
   12922:	e8 1b       	sub	r30, r24
   12924:	f9 0b       	sbc	r31, r25
   12926:	0f b6       	in	r0, 0x3f	; 63
   12928:	f8 94       	cli
   1292a:	fe bf       	out	0x3e, r31	; 62
   1292c:	0f be       	out	0x3f, r0	; 63
   1292e:	ed bf       	out	0x3d, r30	; 61
   12930:	8d b7       	in	r24, 0x3d	; 61
   12932:	9e b7       	in	r25, 0x3e	; 62
   12934:	01 96       	adiw	r24, 0x01	; 1
   12936:	db 01       	movw	r26, r22
   12938:	ad 5e       	subi	r26, 0xED	; 237
   1293a:	b1 4f       	sbci	r27, 0xF1	; 241
   1293c:	fc 01       	movw	r30, r24
   1293e:	8c 01       	movw	r16, r24
   12940:	02 0f       	add	r16, r18
   12942:	13 1f       	adc	r17, r19
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:311
                        for (uint16_t i=0;i<tl;i++) {
   12944:	e0 17       	cp	r30, r16
   12946:	f1 07       	cpc	r31, r17
   12948:	19 f0       	breq	.+6      	; 0x12950 <PubSubClient::loop() [clone .constprop.106]+0x1ea>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:312
                            topic[i] = buffer[llen+3+i];
   1294a:	3d 90       	ld	r3, X+
   1294c:	31 92       	st	Z+, r3
   1294e:	fa cf       	rjmp	.-12     	; 0x12944 <PubSubClient::loop() [clone .constprop.106]+0x1de>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:314
                        }
                        topic[tl] = 0;
   12950:	10 82       	st	Z, r1
   12952:	da 01       	movw	r26, r20
   12954:	a6 1b       	sub	r26, r22
   12956:	b7 0b       	sbc	r27, r23
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:316
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
   12958:	f8 2d       	mov	r31, r8
   1295a:	f6 70       	andi	r31, 0x06	; 6
   1295c:	8f 2e       	mov	r8, r31
   1295e:	42 e0       	ldi	r20, 0x02	; 2
   12960:	f4 13       	cpse	r31, r20
   12962:	3c c0       	rjmp	.+120    	; 0x129dc <PubSubClient::loop() [clone .constprop.106]+0x276>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:317
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   12964:	62 0f       	add	r22, r18
   12966:	73 1f       	adc	r23, r19
   12968:	fb 01       	movw	r30, r22
   1296a:	e2 5f       	subi	r30, 0xF2	; 242
   1296c:	f1 4f       	sbci	r31, 0xF1	; 241
   1296e:	45 81       	ldd	r20, Z+5	; 0x05
   12970:	50 e0       	ldi	r21, 0x00	; 0
   12972:	54 2f       	mov	r21, r20
   12974:	44 27       	eor	r20, r20
   12976:	06 81       	ldd	r16, Z+6	; 0x06
   12978:	04 0f       	add	r16, r20
   1297a:	15 2f       	mov	r17, r21
   1297c:	11 1d       	adc	r17, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   1297e:	ad 01       	movw	r20, r26
   12980:	42 1b       	sub	r20, r18
   12982:	53 0b       	sbc	r21, r19
   12984:	45 50       	subi	r20, 0x05	; 5
   12986:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:318
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
                            payload = buffer+llen+3+tl+2;
   12988:	6b 5e       	subi	r22, 0xEB	; 235
   1298a:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:319
                            callback(topic,payload,len-llen-3-tl-2);
   1298c:	f5 01       	movw	r30, r10
   1298e:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:321

                            buffer[0] = MQTTPUBACK;
   12990:	80 e4       	ldi	r24, 0x40	; 64
   12992:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:322
                            buffer[1] = 2;
   12996:	80 92 11 0e 	sts	0x0E11, r8	; 0x800e11 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:323
                            buffer[2] = (msgId >> 8);
   1299a:	10 93 12 0e 	sts	0x0E12, r17	; 0x800e12 <mqtt_client+0x4>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:324
                            buffer[3] = (msgId & 0xFF);
   1299e:	00 93 13 0e 	sts	0x0E13, r16	; 0x800e13 <mqtt_client+0x5>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:325
                            _client->write(buffer,4);
   129a2:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   129a6:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
   129aa:	dc 01       	movw	r26, r24
   129ac:	ed 91       	ld	r30, X+
   129ae:	fc 91       	ld	r31, X
   129b0:	02 80       	ldd	r0, Z+2	; 0x02
   129b2:	f3 81       	ldd	r31, Z+3	; 0x03
   129b4:	e0 2d       	mov	r30, r0
   129b6:	44 e0       	ldi	r20, 0x04	; 4
   129b8:	50 e0       	ldi	r21, 0x00	; 0
   129ba:	60 e1       	ldi	r22, 0x10	; 16
   129bc:	7e e0       	ldi	r23, 0x0E	; 14
   129be:	19 95       	eicall
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:326
                            lastOutActivity = t;
   129c0:	c0 92 12 10 	sts	0x1012, r12	; 0x801012 <mqtt_client+0x204>
   129c4:	d0 92 13 10 	sts	0x1013, r13	; 0x801013 <mqtt_client+0x205>
   129c8:	e0 92 14 10 	sts	0x1014, r14	; 0x801014 <mqtt_client+0x206>
   129cc:	f0 92 15 10 	sts	0x1015, r15	; 0x801015 <mqtt_client+0x207>
   129d0:	0f b6       	in	r0, 0x3f	; 63
   129d2:	f8 94       	cli
   129d4:	7e be       	out	0x3e, r7	; 62
   129d6:	0f be       	out	0x3f, r0	; 63
   129d8:	6d be       	out	0x3d, r6	; 61
   129da:	28 cf       	rjmp	.-432    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330

                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   129dc:	ad 01       	movw	r20, r26
   129de:	42 1b       	sub	r20, r18
   129e0:	53 0b       	sbc	r21, r19
   129e2:	43 50       	subi	r20, 0x03	; 3
   129e4:	51 09       	sbc	r21, r1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:329
                            buffer[3] = (msgId & 0xFF);
                            _client->write(buffer,4);
                            lastOutActivity = t;

                        } else {
                            payload = buffer+llen+3+tl;
   129e6:	62 0f       	add	r22, r18
   129e8:	73 1f       	adc	r23, r19
   129ea:	6d 5e       	subi	r22, 0xED	; 237
   129ec:	71 4f       	sbci	r23, 0xF1	; 241
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:330
                            callback(topic,payload,len-llen-3-tl);
   129ee:	f5 01       	movw	r30, r10
   129f0:	19 95       	eicall
   129f2:	ee cf       	rjmp	.-36     	; 0x129d0 <PubSubClient::loop() [clone .constprop.106]+0x26a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:333
                        }
                    }
                } else if (type == MQTTPINGREQ) {
   129f4:	80 3c       	cpi	r24, 0xC0	; 192
   129f6:	a9 f4       	brne	.+42     	; 0x12a22 <PubSubClient::loop() [clone .constprop.106]+0x2bc>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:334
                    buffer[0] = MQTTPINGRESP;
   129f8:	80 ed       	ldi	r24, 0xD0	; 208
   129fa:	80 93 10 0e 	sts	0x0E10, r24	; 0x800e10 <mqtt_client+0x2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:335
                    buffer[1] = 0;
   129fe:	10 92 11 0e 	sts	0x0E11, r1	; 0x800e11 <mqtt_client+0x3>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:336
                    _client->write(buffer,2);
   12a02:	80 91 0e 0e 	lds	r24, 0x0E0E	; 0x800e0e <mqtt_client>
   12a06:	90 91 0f 0e 	lds	r25, 0x0E0F	; 0x800e0f <mqtt_client+0x1>
   12a0a:	dc 01       	movw	r26, r24
   12a0c:	ed 91       	ld	r30, X+
   12a0e:	fc 91       	ld	r31, X
   12a10:	02 80       	ldd	r0, Z+2	; 0x02
   12a12:	f3 81       	ldd	r31, Z+3	; 0x03
   12a14:	e0 2d       	mov	r30, r0
   12a16:	42 e0       	ldi	r20, 0x02	; 2
   12a18:	50 e0       	ldi	r21, 0x00	; 0
   12a1a:	60 e1       	ldi	r22, 0x10	; 16
   12a1c:	7e e0       	ldi	r23, 0x0E	; 14
   12a1e:	19 95       	eicall
   12a20:	05 cf       	rjmp	.-502    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:337
                } else if (type == MQTTPINGRESP) {
   12a22:	80 3d       	cpi	r24, 0xD0	; 208
   12a24:	09 f0       	breq	.+2      	; 0x12a28 <PubSubClient::loop() [clone .constprop.106]+0x2c2>
   12a26:	02 cf       	rjmp	.-508    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:338
                    pingOutstanding = false;
   12a28:	10 92 1a 10 	sts	0x101A, r1	; 0x80101a <mqtt_client+0x20c>
   12a2c:	ff ce       	rjmp	.-514    	; 0x1282c <PubSubClient::loop() [clone .constprop.106]+0xc6>

00012a2e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>:
_ZN12PubSubClient5writeEhPhj():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:426
    lastOutActivity = millis();

    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
   12a2e:	bf 92       	push	r11
   12a30:	cf 92       	push	r12
   12a32:	df 92       	push	r13
   12a34:	ef 92       	push	r14
   12a36:	ff 92       	push	r15
   12a38:	0f 93       	push	r16
   12a3a:	1f 93       	push	r17
   12a3c:	cf 93       	push	r28
   12a3e:	df 93       	push	r29
   12a40:	00 d0       	rcall	.+0      	; 0x12a42 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x14>
   12a42:	1f 92       	push	r1
   12a44:	cd b7       	in	r28, 0x3d	; 61
   12a46:	de b7       	in	r29, 0x3e	; 62
   12a48:	7c 01       	movw	r14, r24
   12a4a:	b6 2e       	mov	r11, r22
   12a4c:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:432
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   12a4e:	c9 01       	movw	r24, r18
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:428
    return rc == tlen + 4 + plength;
}

boolean PubSubClient::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   12a50:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   12a52:	be 01       	movw	r22, r28
   12a54:	6f 5f       	subi	r22, 0xFF	; 255
   12a56:	7f 4f       	sbci	r23, 0xFF	; 255
   12a58:	6b 01       	movw	r12, r22
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:434
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   12a5a:	28 2f       	mov	r18, r24
   12a5c:	2f 77       	andi	r18, 0x7F	; 127
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:435
        len = len / 128;
   12a5e:	88 0f       	add	r24, r24
   12a60:	89 2f       	mov	r24, r25
   12a62:	88 1f       	adc	r24, r24
   12a64:	99 0b       	sbc	r25, r25
   12a66:	91 95       	neg	r25
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:436
        if (len > 0) {
   12a68:	00 97       	sbiw	r24, 0x00	; 0
   12a6a:	09 f0       	breq	.+2      	; 0x12a6e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x40>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:437
            digit |= 0x80;
   12a6c:	20 68       	ori	r18, 0x80	; 128
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:439
        }
        lenBuf[pos++] = digit;
   12a6e:	f6 01       	movw	r30, r12
   12a70:	e3 0f       	add	r30, r19
   12a72:	f1 1d       	adc	r31, r1
   12a74:	20 83       	st	Z, r18
   12a76:	3f 5f       	subi	r19, 0xFF	; 255
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:441
        llen++;
    } while(len>0);
   12a78:	00 97       	sbiw	r24, 0x00	; 0
   12a7a:	79 f7       	brne	.-34     	; 0x12a5a <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x2c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:443

    buf[4-llen] = header;
   12a7c:	e3 2f       	mov	r30, r19
   12a7e:	f0 e0       	ldi	r31, 0x00	; 0
   12a80:	ba 01       	movw	r22, r20
   12a82:	6e 1b       	sub	r22, r30
   12a84:	7f 0b       	sbc	r23, r31
   12a86:	6c 5f       	subi	r22, 0xFC	; 252
   12a88:	7f 4f       	sbci	r23, 0xFF	; 255
   12a8a:	db 01       	movw	r26, r22
   12a8c:	bc 92       	st	X, r11
   12a8e:	4e 1b       	sub	r20, r30
   12a90:	5f 0b       	sbc	r21, r31
   12a92:	4b 5f       	subi	r20, 0xFB	; 251
   12a94:	5f 4f       	sbci	r21, 0xFF	; 255
   12a96:	c6 01       	movw	r24, r12
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:444
    for (int i=0;i<llen;i++) {
   12a98:	9c 01       	movw	r18, r24
   12a9a:	2c 19       	sub	r18, r12
   12a9c:	3d 09       	sbc	r19, r13
   12a9e:	2e 17       	cp	r18, r30
   12aa0:	3f 07       	cpc	r19, r31
   12aa2:	3c f4       	brge	.+14     	; 0x12ab2 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x84>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:445
        buf[5-llen+i] = lenBuf[i];
   12aa4:	dc 01       	movw	r26, r24
   12aa6:	2d 91       	ld	r18, X+
   12aa8:	cd 01       	movw	r24, r26
   12aaa:	da 01       	movw	r26, r20
   12aac:	2d 93       	st	X+, r18
   12aae:	ad 01       	movw	r20, r26
   12ab0:	f3 cf       	rjmp	.-26     	; 0x12a98 <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0x6a>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:462
        bytesRemaining -= rc;
        writeBuf += rc;
    }
    return result;
#else
    rc = _client->write(buf+(4-llen),length+1+llen);
   12ab2:	d7 01       	movw	r26, r14
   12ab4:	8d 91       	ld	r24, X+
   12ab6:	9c 91       	ld	r25, X
   12ab8:	0f 5f       	subi	r16, 0xFF	; 255
   12aba:	1f 4f       	sbci	r17, 0xFF	; 255
   12abc:	0e 0f       	add	r16, r30
   12abe:	1f 1f       	adc	r17, r31
   12ac0:	dc 01       	movw	r26, r24
   12ac2:	ed 91       	ld	r30, X+
   12ac4:	fc 91       	ld	r31, X
   12ac6:	02 80       	ldd	r0, Z+2	; 0x02
   12ac8:	f3 81       	ldd	r31, Z+3	; 0x03
   12aca:	e0 2d       	mov	r30, r0
   12acc:	a8 01       	movw	r20, r16
   12ace:	19 95       	eicall
   12ad0:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:463
    lastOutActivity = millis();
   12ad2:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   12ad6:	f7 01       	movw	r30, r14
   12ad8:	ec 5f       	subi	r30, 0xFC	; 252
   12ada:	fd 4f       	sbci	r31, 0xFD	; 253
   12adc:	60 83       	st	Z, r22
   12ade:	71 83       	std	Z+1, r23	; 0x01
   12ae0:	82 83       	std	Z+2, r24	; 0x02
   12ae2:	93 83       	std	Z+3, r25	; 0x03
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:464
    return (rc == 1+llen+length);
   12ae4:	81 e0       	ldi	r24, 0x01	; 1
   12ae6:	0c 15       	cp	r16, r12
   12ae8:	1d 05       	cpc	r17, r13
   12aea:	09 f0       	breq	.+2      	; 0x12aee <PubSubClient::write(unsigned char, unsigned char*, unsigned int)+0xc0>
   12aec:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:466
#endif
}
   12aee:	0f 90       	pop	r0
   12af0:	0f 90       	pop	r0
   12af2:	0f 90       	pop	r0
   12af4:	0f 90       	pop	r0
   12af6:	df 91       	pop	r29
   12af8:	cf 91       	pop	r28
   12afa:	1f 91       	pop	r17
   12afc:	0f 91       	pop	r16
   12afe:	ff 90       	pop	r15
   12b00:	ef 90       	pop	r14
   12b02:	df 90       	pop	r13
   12b04:	cf 90       	pop	r12
   12b06:	bf 90       	pop	r11
   12b08:	08 95       	ret

00012b0a <PubSubClient::subscribe(char const*) [clone .constprop.145]>:
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:468

boolean PubSubClient::subscribe(const char* topic) {
   12b0a:	cf 93       	push	r28
   12b0c:	df 93       	push	r29
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:476

boolean PubSubClient::subscribe(const char* topic, uint8_t qos) {
    if (qos < 0 || qos > 1) {
        return false;
    }
    if (MQTT_MAX_PACKET_SIZE < 9 + strlen(topic)) {
   12b0e:	fc 01       	movw	r30, r24
   12b10:	01 90       	ld	r0, Z+
   12b12:	00 20       	and	r0, r0
   12b14:	e9 f7       	brne	.-6      	; 0x12b10 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x6>
   12b16:	9f 01       	movw	r18, r30
   12b18:	28 1b       	sub	r18, r24
   12b1a:	39 0b       	sbc	r19, r25
   12b1c:	28 5f       	subi	r18, 0xF8	; 248
   12b1e:	3f 4f       	sbci	r19, 0xFF	; 255
   12b20:	21 30       	cpi	r18, 0x01	; 1
   12b22:	32 40       	sbci	r19, 0x02	; 2
   12b24:	98 f5       	brcc	.+102    	; 0x12b8c <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
   12b26:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:480
        // Too long
        return false;
    }
    if (connected()) {
   12b28:	8e e0       	ldi	r24, 0x0E	; 14
   12b2a:	9e e0       	ldi	r25, 0x0E	; 14
   12b2c:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   12b30:	88 23       	and	r24, r24
   12b32:	61 f1       	breq	.+88     	; 0x12b8c <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x82>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:483
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   12b34:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <mqtt_client+0x202>
   12b38:	90 91 11 10 	lds	r25, 0x1011	; 0x801011 <mqtt_client+0x203>
   12b3c:	01 96       	adiw	r24, 0x01	; 1
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:484
        if (nextMsgId == 0) {
   12b3e:	19 f1       	breq	.+70     	; 0x12b86 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
            nextMsgId = 1;
   12b40:	90 93 11 10 	sts	0x1011, r25	; 0x801011 <mqtt_client+0x203>
   12b44:	80 93 10 10 	sts	0x1010, r24	; 0x801010 <mqtt_client+0x202>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:487
        }
        buffer[length++] = (nextMsgId >> 8);
   12b48:	80 91 10 10 	lds	r24, 0x1010	; 0x801010 <mqtt_client+0x202>
   12b4c:	90 91 11 10 	lds	r25, 0x1011	; 0x801011 <mqtt_client+0x203>
   12b50:	90 93 15 0e 	sts	0x0E15, r25	; 0x800e15 <mqtt_client+0x7>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:488
        buffer[length++] = (nextMsgId & 0xFF);
   12b54:	80 93 16 0e 	sts	0x0E16, r24	; 0x800e16 <mqtt_client+0x8>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:489
        length = writeString((char*)topic, buffer,length);
   12b58:	47 e0       	ldi	r20, 0x07	; 7
   12b5a:	50 e0       	ldi	r21, 0x00	; 0
   12b5c:	60 e1       	ldi	r22, 0x10	; 16
   12b5e:	7e e0       	ldi	r23, 0x0E	; 14
   12b60:	ce 01       	movw	r24, r28
   12b62:	0e 94 0f 85 	call	0x10a1e	; 0x10a1e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:490
        buffer[length++] = qos;
   12b66:	fc 01       	movw	r30, r24
   12b68:	e2 5f       	subi	r30, 0xF2	; 242
   12b6a:	f1 4f       	sbci	r31, 0xF1	; 241
   12b6c:	12 82       	std	Z+2, r1	; 0x02
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12b6e:	9c 01       	movw	r18, r24
   12b70:	24 50       	subi	r18, 0x04	; 4
   12b72:	31 09       	sbc	r19, r1
   12b74:	40 e1       	ldi	r20, 0x10	; 16
   12b76:	5e e0       	ldi	r21, 0x0E	; 14
   12b78:	62 e8       	ldi	r22, 0x82	; 130
   12b7a:	8e e0       	ldi	r24, 0x0E	; 14
   12b7c:	9e e0       	ldi	r25, 0x0E	; 14
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   12b7e:	df 91       	pop	r29
   12b80:	cf 91       	pop	r28
subscribe():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:491
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString((char*)topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE|MQTTQOS1,buffer,length-5);
   12b82:	0c 94 17 95 	jmp	0x12a2e	; 0x12a2e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:485
    if (connected()) {
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
   12b86:	81 e0       	ldi	r24, 0x01	; 1
   12b88:	90 e0       	ldi	r25, 0x00	; 0
   12b8a:	da cf       	rjmp	.-76     	; 0x12b40 <PubSubClient::subscribe(char const*) [clone .constprop.145]+0x36>
_ZN12PubSubClient9subscribeEPKc.constprop.145():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:470
#endif
}

boolean PubSubClient::subscribe(const char* topic) {
    return subscribe(topic, 0);
}
   12b8c:	80 e0       	ldi	r24, 0x00	; 0
   12b8e:	df 91       	pop	r29
   12b90:	cf 91       	pop	r28
   12b92:	08 95       	ret

00012b94 <PubSubClient::publish(char const*, char const*)>:
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:347
        return true;
    }
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
   12b94:	af 92       	push	r10
   12b96:	bf 92       	push	r11
   12b98:	cf 92       	push	r12
   12b9a:	df 92       	push	r13
   12b9c:	ef 92       	push	r14
   12b9e:	ff 92       	push	r15
   12ba0:	0f 93       	push	r16
   12ba2:	1f 93       	push	r17
   12ba4:	cf 93       	push	r28
   12ba6:	df 93       	push	r29
   12ba8:	7c 01       	movw	r14, r24
   12baa:	5b 01       	movw	r10, r22
   12bac:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:348
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
   12bae:	ea 01       	movw	r28, r20
   12bb0:	09 90       	ld	r0, Y+
   12bb2:	00 20       	and	r0, r0
   12bb4:	e9 f7       	brne	.-6      	; 0x12bb0 <PubSubClient::publish(char const*, char const*)+0x1c>
   12bb6:	21 97       	sbiw	r28, 0x01	; 1
   12bb8:	c4 1b       	sub	r28, r20
   12bba:	d5 0b       	sbc	r29, r21
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:360
boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength) {
    return publish(topic, payload, plength, false);
}

boolean PubSubClient::publish(const char* topic, const uint8_t* payload, unsigned int plength, boolean retained) {
    if (connected()) {
   12bbc:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   12bc0:	88 23       	and	r24, r24
   12bc2:	c9 f1       	breq	.+114    	; 0x12c36 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:361
        if (MQTT_MAX_PACKET_SIZE < 5 + 2+strlen(topic) + plength) {
   12bc4:	f5 01       	movw	r30, r10
   12bc6:	01 90       	ld	r0, Z+
   12bc8:	00 20       	and	r0, r0
   12bca:	e9 f7       	brne	.-6      	; 0x12bc6 <PubSubClient::publish(char const*, char const*)+0x32>
   12bcc:	31 97       	sbiw	r30, 0x01	; 1
   12bce:	ea 19       	sub	r30, r10
   12bd0:	fb 09       	sbc	r31, r11
   12bd2:	ce 01       	movw	r24, r28
   12bd4:	07 96       	adiw	r24, 0x07	; 7
   12bd6:	e8 0f       	add	r30, r24
   12bd8:	f9 1f       	adc	r31, r25
   12bda:	e1 30       	cpi	r30, 0x01	; 1
   12bdc:	f2 40       	sbci	r31, 0x02	; 2
   12bde:	58 f5       	brcc	.+86     	; 0x12c36 <PubSubClient::publish(char const*, char const*)+0xa2>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:367
            // Too long
            return false;
        }
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        length = writeString(topic,buffer,length);
   12be0:	67 01       	movw	r12, r14
   12be2:	82 e0       	ldi	r24, 0x02	; 2
   12be4:	c8 0e       	add	r12, r24
   12be6:	d1 1c       	adc	r13, r1
   12be8:	45 e0       	ldi	r20, 0x05	; 5
   12bea:	50 e0       	ldi	r21, 0x00	; 0
   12bec:	b6 01       	movw	r22, r12
   12bee:	c5 01       	movw	r24, r10
   12bf0:	0e 94 0f 85 	call	0x10a1e	; 0x10a1e <PubSubClient::writeString(char const*, unsigned char*, unsigned int) [clone .constprop.148]>
   12bf4:	f8 01       	movw	r30, r16
   12bf6:	dc 01       	movw	r26, r24
   12bf8:	12 96       	adiw	r26, 0x02	; 2
   12bfa:	ae 0d       	add	r26, r14
   12bfc:	bf 1d       	adc	r27, r15
   12bfe:	a8 01       	movw	r20, r16
   12c00:	4c 0f       	add	r20, r28
   12c02:	5d 1f       	adc	r21, r29
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:369
        uint16_t i;
        for (i=0;i<plength;i++) {
   12c04:	e4 17       	cp	r30, r20
   12c06:	f5 07       	cpc	r31, r21
   12c08:	19 f0       	breq	.+6      	; 0x12c10 <PubSubClient::publish(char const*, char const*)+0x7c>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:370
            buffer[length++] = payload[i];
   12c0a:	21 91       	ld	r18, Z+
   12c0c:	2d 93       	st	X+, r18
   12c0e:	fa cf       	rjmp	.-12     	; 0x12c04 <PubSubClient::publish(char const*, char const*)+0x70>
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   12c10:	25 97       	sbiw	r28, 0x05	; 5
   12c12:	9e 01       	movw	r18, r28
   12c14:	28 0f       	add	r18, r24
   12c16:	39 1f       	adc	r19, r25
   12c18:	a6 01       	movw	r20, r12
   12c1a:	60 e3       	ldi	r22, 0x30	; 48
   12c1c:	c7 01       	movw	r24, r14
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   12c1e:	df 91       	pop	r29
   12c20:	cf 91       	pop	r28
   12c22:	1f 91       	pop	r17
   12c24:	0f 91       	pop	r16
   12c26:	ff 90       	pop	r15
   12c28:	ef 90       	pop	r14
   12c2a:	df 90       	pop	r13
   12c2c:	cf 90       	pop	r12
   12c2e:	bf 90       	pop	r11
   12c30:	af 90       	pop	r10
publish():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:376
        }
        uint8_t header = MQTTPUBLISH;
        if (retained) {
            header |= 1;
        }
        return write(header,buffer,length-5);
   12c32:	0c 94 17 95 	jmp	0x12a2e	; 0x12a2e <PubSubClient::write(unsigned char, unsigned char*, unsigned int)>
_ZN12PubSubClient7publishEPKcS1_():
/home/saric/Arduino/libraries/PubSubClient/src/PubSubClient.cpp:349
    return false;
}

boolean PubSubClient::publish(const char* topic, const char* payload) {
    return publish(topic,(const uint8_t*)payload,strlen(payload),false);
}
   12c36:	80 e0       	ldi	r24, 0x00	; 0
   12c38:	df 91       	pop	r29
   12c3a:	cf 91       	pop	r28
   12c3c:	1f 91       	pop	r17
   12c3e:	0f 91       	pop	r16
   12c40:	ff 90       	pop	r15
   12c42:	ef 90       	pop	r14
   12c44:	df 90       	pop	r13
   12c46:	cf 90       	pop	r12
   12c48:	bf 90       	pop	r11
   12c4a:	af 90       	pop	r10
   12c4c:	08 95       	ret

00012c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>:
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:165
void send_mqtt_set_header(char* header)
{
  header_out = header;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
void send_mqtt_message_prefix_id_topic_payload(PubSubClient *mqtt_client, char *prefix, uint8_t id, char *topic, char *payload)
   12c4e:	af 92       	push	r10
   12c50:	bf 92       	push	r11
   12c52:	df 92       	push	r13
   12c54:	ef 92       	push	r14
   12c56:	ff 92       	push	r15
   12c58:	0f 93       	push	r16
   12c5a:	1f 93       	push	r17
   12c5c:	cf 93       	push	r28
   12c5e:	df 93       	push	r29
   12c60:	cd b7       	in	r28, 0x3d	; 61
   12c62:	de b7       	in	r29, 0x3e	; 62
   12c64:	c6 55       	subi	r28, 0x56	; 86
   12c66:	d1 09       	sbc	r29, r1
   12c68:	0f b6       	in	r0, 0x3f	; 63
   12c6a:	f8 94       	cli
   12c6c:	de bf       	out	0x3e, r29	; 62
   12c6e:	0f be       	out	0x3f, r0	; 63
   12c70:	cd bf       	out	0x3d, r28	; 61
   12c72:	5c 01       	movw	r10, r24
   12c74:	d6 2e       	mov	r13, r22
   12c76:	7a 01       	movw	r14, r20
   12c78:	89 01       	movw	r16, r18
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:170
{
  char str_topic[64];
  char hostname[10];
  char tmp1[12];
  if (mqtt_client->connected())
   12c7a:	8e e0       	ldi	r24, 0x0E	; 14
   12c7c:	9e e0       	ldi	r25, 0x0E	; 14
   12c7e:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   12c82:	88 23       	and	r24, r24
   12c84:	09 f4       	brne	.+2      	; 0x12c88 <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0x3a>
   12c86:	52 c0       	rjmp	.+164    	; 0x12d2c <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xde>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:172
  {
    mqtt_send_message++;
   12c88:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <mqtt_send_message>
   12c8c:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <mqtt_send_message+0x1>
   12c90:	01 96       	adiw	r24, 0x01	; 1
   12c92:	90 93 66 0b 	sts	0x0B66, r25	; 0x800b66 <mqtt_send_message+0x1>
   12c96:	80 93 65 0b 	sts	0x0B65, r24	; 0x800b65 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:173
    device_get_name(hostname);
   12c9a:	ce 01       	movw	r24, r28
   12c9c:	83 5b       	subi	r24, 0xB3	; 179
   12c9e:	9f 4f       	sbci	r25, 0xFF	; 255
   12ca0:	0e 94 81 5a 	call	0xb502	; 0xb502 <device_get_name(char*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:174
    strcpy_P(str_topic, header_out);
   12ca4:	60 91 63 0b 	lds	r22, 0x0B63	; 0x800b63 <header_out>
   12ca8:	70 91 64 0b 	lds	r23, 0x0B64	; 0x800b64 <header_out+0x1>
   12cac:	ce 01       	movw	r24, r28
   12cae:	01 96       	adiw	r24, 0x01	; 1
   12cb0:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:175
    strcat(str_topic, hostname);
   12cb4:	be 01       	movw	r22, r28
   12cb6:	63 5b       	subi	r22, 0xB3	; 179
   12cb8:	7f 4f       	sbci	r23, 0xFF	; 255
   12cba:	ce 01       	movw	r24, r28
   12cbc:	01 96       	adiw	r24, 0x01	; 1
   12cbe:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:176
    strcat(str_topic, "/");
   12cc2:	68 ed       	ldi	r22, 0xD8	; 216
   12cc4:	73 e0       	ldi	r23, 0x03	; 3
   12cc6:	ce 01       	movw	r24, r28
   12cc8:	01 96       	adiw	r24, 0x01	; 1
   12cca:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:177
    strcat(str_topic, prefix);
   12cce:	b5 01       	movw	r22, r10
   12cd0:	ce 01       	movw	r24, r28
   12cd2:	01 96       	adiw	r24, 0x01	; 1
   12cd4:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:178
    strcat(str_topic, "/");
   12cd8:	68 ed       	ldi	r22, 0xD8	; 216
   12cda:	73 e0       	ldi	r23, 0x03	; 3
   12cdc:	ce 01       	movw	r24, r28
   12cde:	01 96       	adiw	r24, 0x01	; 1
   12ce0:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   12ce4:	4a e0       	ldi	r20, 0x0A	; 10
   12ce6:	be 01       	movw	r22, r28
   12ce8:	6f 5b       	subi	r22, 0xBF	; 191
   12cea:	7f 4f       	sbci	r23, 0xFF	; 255
   12cec:	8d 2d       	mov	r24, r13
   12cee:	90 e0       	ldi	r25, 0x00	; 0
   12cf0:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
_Z41send_mqtt_message_prefix_id_topic_payloadP12PubSubClientPchS1_S1_.constprop.131():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:180
    itoa(id, tmp1, 10);
    strcat(str_topic, tmp1);
   12cf4:	be 01       	movw	r22, r28
   12cf6:	6f 5b       	subi	r22, 0xBF	; 191
   12cf8:	7f 4f       	sbci	r23, 0xFF	; 255
   12cfa:	ce 01       	movw	r24, r28
   12cfc:	01 96       	adiw	r24, 0x01	; 1
   12cfe:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:181
    strcat(str_topic, "/");
   12d02:	68 ed       	ldi	r22, 0xD8	; 216
   12d04:	73 e0       	ldi	r23, 0x03	; 3
   12d06:	ce 01       	movw	r24, r28
   12d08:	01 96       	adiw	r24, 0x01	; 1
   12d0a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:182
    strcat(str_topic, topic);
   12d0e:	b7 01       	movw	r22, r14
   12d10:	ce 01       	movw	r24, r28
   12d12:	01 96       	adiw	r24, 0x01	; 1
   12d14:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:183
    if (mqtt_client->publish(str_topic, payload) == false) mqtt_error++;
   12d18:	a8 01       	movw	r20, r16
   12d1a:	be 01       	movw	r22, r28
   12d1c:	6f 5f       	subi	r22, 0xFF	; 255
   12d1e:	7f 4f       	sbci	r23, 0xFF	; 255
   12d20:	8e e0       	ldi	r24, 0x0E	; 14
   12d22:	9e e0       	ldi	r25, 0x0E	; 14
   12d24:	0e 94 ca 95 	call	0x12b94	; 0x12b94 <PubSubClient::publish(char const*, char const*)>
   12d28:	81 11       	cpse	r24, r1
   12d2a:	09 c0       	rjmp	.+18     	; 0x12d3e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]+0xf0>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:186
  }
  else
    mqtt_error++;
   12d2c:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_error>
   12d30:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_error+0x1>
   12d34:	01 96       	adiw	r24, 0x01	; 1
   12d36:	90 93 68 0b 	sts	0x0B68, r25	; 0x800b68 <mqtt_error+0x1>
   12d3a:	80 93 67 0b 	sts	0x0B67, r24	; 0x800b67 <mqtt_error>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:187
}
   12d3e:	ca 5a       	subi	r28, 0xAA	; 170
   12d40:	df 4f       	sbci	r29, 0xFF	; 255
   12d42:	0f b6       	in	r0, 0x3f	; 63
   12d44:	f8 94       	cli
   12d46:	de bf       	out	0x3e, r29	; 62
   12d48:	0f be       	out	0x3f, r0	; 63
   12d4a:	cd bf       	out	0x3d, r28	; 61
   12d4c:	df 91       	pop	r29
   12d4e:	cf 91       	pop	r28
   12d50:	1f 91       	pop	r17
   12d52:	0f 91       	pop	r16
   12d54:	ff 90       	pop	r15
   12d56:	ef 90       	pop	r14
   12d58:	df 90       	pop	r13
   12d5a:	bf 90       	pop	r11
   12d5c:	af 90       	pop	r10
   12d5e:	08 95       	ret

00012d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>:
_ZN11EEPROMClass5writeEih.isra.1.lto_priv.223():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
   12d60:	0c 94 39 b4 	jmp	0x16872	; 0x16872 <eeprom_write_byte>

00012d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>:
_ZN11EEPROMClass4readEi.isra.0.lto_priv.227():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/EEPROM/src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
   12d64:	0c 94 31 b4 	jmp	0x16862	; 0x16862 <eeprom_read_byte>

00012d68 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]>:
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:203
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
   12d68:	1f 93       	push	r17
   12d6a:	cf 93       	push	r28
   12d6c:	df 93       	push	r29
   12d6e:	16 2f       	mov	r17, r22
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   12d70:	91 e2       	ldi	r25, 0x21	; 33
   12d72:	89 9f       	mul	r24, r25
   12d74:	e0 01       	movw	r28, r0
   12d76:	11 24       	eor	r1, r1
   12d78:	c8 5a       	subi	r28, 0xA8	; 168
   12d7a:	de 4f       	sbci	r29, 0xFE	; 254
   12d7c:	ce 01       	movw	r24, r28
   12d7e:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   12d82:	68 2f       	mov	r22, r24
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:206
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
   12d84:	11 11       	cpse	r17, r1
   12d86:	07 c0       	rjmp	.+14     	; 0x12d96 <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x2e>
   12d88:	6e 7f       	andi	r22, 0xFE	; 254
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12d8a:	ce 01       	movw	r24, r28
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:209
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
  thermostat_ring_set_status_bites(idx, b);
}
   12d8c:	df 91       	pop	r29
   12d8e:	cf 91       	pop	r28
   12d90:	1f 91       	pop	r17
thermostat_ring_set_status_bites():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:201
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites) & (1 << bits);
}
void thermostat_ring_set_status_bites(uint8_t idx, uint8_t bytes)
{
  EEPROM.write(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites, bytes);
   12d92:	0c 94 b0 96 	jmp	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
_Z28thermostat_ring_update_biteshhh.constprop.186():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:207
}
void thermostat_ring_update_bites(uint8_t idx, uint8_t bits, uint8_t sets)
{
  uint8_t b = thermostat_ring_get_status_data(idx);
  if (sets == 0) cbi(b, bits);
  else sbi(b, bits);
   12d96:	61 60       	ori	r22, 0x01	; 1
   12d98:	f8 cf       	rjmp	.-16     	; 0x12d8a <thermostat_ring_update_bites(unsigned char, unsigned char, unsigned char) [clone .constprop.186]+0x22>

00012d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>:
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:114



void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
   12d9a:	4f 92       	push	r4
   12d9c:	5f 92       	push	r5
   12d9e:	6f 92       	push	r6
   12da0:	7f 92       	push	r7
   12da2:	8f 92       	push	r8
   12da4:	9f 92       	push	r9
   12da6:	af 92       	push	r10
   12da8:	bf 92       	push	r11
   12daa:	cf 92       	push	r12
   12dac:	df 92       	push	r13
   12dae:	ef 92       	push	r14
   12db0:	ff 92       	push	r15
   12db2:	0f 93       	push	r16
   12db4:	1f 93       	push	r17
   12db6:	cf 93       	push	r28
   12db8:	df 93       	push	r29
   12dba:	00 d0       	rcall	.+0      	; 0x12dbc <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x22>
   12dbc:	00 d0       	rcall	.+0      	; 0x12dbe <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x24>
   12dbe:	1f 92       	push	r1
   12dc0:	1f 92       	push	r1
   12dc2:	cd b7       	in	r28, 0x3d	; 61
   12dc4:	de b7       	in	r29, 0x3e	; 62
   12dc6:	6c 01       	movw	r12, r24
   12dc8:	46 2e       	mov	r4, r22
   12dca:	52 2e       	mov	r5, r18
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:116
  char tmp1[8];
  str[0] = 0;
   12dcc:	fc 01       	movw	r30, r24
   12dce:	10 82       	st	Z, r1
   12dd0:	3a 01       	movw	r6, r20
   12dd2:	f1 2c       	mov	r15, r1
   12dd4:	e1 2c       	mov	r14, r1
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   12dd6:	a0 2e       	mov	r10, r16
   12dd8:	b1 2c       	mov	r11, r1
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
   12dda:	8e 01       	movw	r16, r28
   12ddc:	0f 5f       	subi	r16, 0xFF	; 255
   12dde:	1f 4f       	sbci	r17, 0xFF	; 255
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (strlen(tmp1) < 2)
      strcat(str, "0");
    strcat(str, tmp1); 
    if (a < maxBytes - 1)
   12de0:	82 2f       	mov	r24, r18
   12de2:	81 50       	subi	r24, 0x01	; 1
   12de4:	99 0b       	sbc	r25, r25
   12de6:	4c 01       	movw	r8, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:119
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
  {
    itoa(bytes[a], tmp1, base);
   12de8:	f3 01       	movw	r30, r6
   12dea:	81 91       	ld	r24, Z+
   12dec:	3f 01       	movw	r6, r30
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:433
   12dee:	a5 01       	movw	r20, r10
   12df0:	b8 01       	movw	r22, r16
   12df2:	90 e0       	ldi	r25, 0x00	; 0
   12df4:	0e 94 c2 aa 	call	0x15584	; 0x15584 <itoa>
_Z12createStringPccPhhh():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:120
    if (strlen(tmp1) < 2)
   12df8:	f8 01       	movw	r30, r16
   12dfa:	01 90       	ld	r0, Z+
   12dfc:	00 20       	and	r0, r0
   12dfe:	e9 f7       	brne	.-6      	; 0x12dfa <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x60>
   12e00:	31 97       	sbiw	r30, 0x01	; 1
   12e02:	e0 1b       	sub	r30, r16
   12e04:	f1 0b       	sbc	r31, r17
   12e06:	32 97       	sbiw	r30, 0x02	; 2
   12e08:	28 f4       	brcc	.+10     	; 0x12e14 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x7a>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:121
      strcat(str, "0");
   12e0a:	6b ef       	ldi	r22, 0xFB	; 251
   12e0c:	76 e0       	ldi	r23, 0x06	; 6
   12e0e:	c6 01       	movw	r24, r12
   12e10:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:122
    strcat(str, tmp1); 
   12e14:	b8 01       	movw	r22, r16
   12e16:	c6 01       	movw	r24, r12
   12e18:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:123
    if (a < maxBytes - 1)
   12e1c:	e8 14       	cp	r14, r8
   12e1e:	f9 04       	cpc	r15, r9
   12e20:	34 f4       	brge	.+12     	; 0x12e2e <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x94>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:125
    {
      tmp1[0] = sep;
   12e22:	49 82       	std	Y+1, r4	; 0x01
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:126
      tmp1[1] = 0;
   12e24:	1a 82       	std	Y+2, r1	; 0x02
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:127
      strcat(str, tmp1);
   12e26:	b8 01       	movw	r22, r16
   12e28:	c6 01       	movw	r24, r12
   12e2a:	0e 94 f7 b6 	call	0x16dee	; 0x16dee <strcat>
   12e2e:	ff ef       	ldi	r31, 0xFF	; 255
   12e30:	ef 1a       	sub	r14, r31
   12e32:	ff 0a       	sbc	r15, r31
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:117

void createString(char* str, char sep, uint8_t* bytes, uint8_t maxBytes, uint8_t base)
{
  char tmp1[8];
  str[0] = 0;
  for (uint8_t a = 0; a < maxBytes; a++ )
   12e34:	e5 14       	cp	r14, r5
   12e36:	c0 f2       	brcs	.-80     	; 0x12de8 <createString(char*, char, unsigned char*, unsigned char, unsigned char)+0x4e>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:130
      tmp1[0] = sep;
      tmp1[1] = 0;
      strcat(str, tmp1);
    }
  }
}
   12e38:	28 96       	adiw	r28, 0x08	; 8
   12e3a:	0f b6       	in	r0, 0x3f	; 63
   12e3c:	f8 94       	cli
   12e3e:	de bf       	out	0x3e, r29	; 62
   12e40:	0f be       	out	0x3f, r0	; 63
   12e42:	cd bf       	out	0x3d, r28	; 61
   12e44:	df 91       	pop	r29
   12e46:	cf 91       	pop	r28
   12e48:	1f 91       	pop	r17
   12e4a:	0f 91       	pop	r16
   12e4c:	ff 90       	pop	r15
   12e4e:	ef 90       	pop	r14
   12e50:	df 90       	pop	r13
   12e52:	cf 90       	pop	r12
   12e54:	bf 90       	pop	r11
   12e56:	af 90       	pop	r10
   12e58:	9f 90       	pop	r9
   12e5a:	8f 90       	pop	r8
   12e5c:	7f 90       	pop	r7
   12e5e:	6f 90       	pop	r6
   12e60:	5f 90       	pop	r5
   12e62:	4f 90       	pop	r4
   12e64:	08 95       	ret

00012e66 <EEPROMwriteFloat(unsigned int, float)>:
_Z16EEPROMwriteFloatjf():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:69
  return data.f;
}


void EEPROMwriteFloat(unsigned int addr, float x)
{
   12e66:	cf 92       	push	r12
   12e68:	df 92       	push	r13
   12e6a:	ef 92       	push	r14
   12e6c:	ff 92       	push	r15
   12e6e:	0f 93       	push	r16
   12e70:	1f 93       	push	r17
   12e72:	cf 93       	push	r28
   12e74:	df 93       	push	r29
   12e76:	00 d0       	rcall	.+0      	; 0x12e78 <EEPROMwriteFloat(unsigned int, float)+0x12>
   12e78:	1f 92       	push	r1
   12e7a:	cd b7       	in	r28, 0x3d	; 61
   12e7c:	de b7       	in	r29, 0x3e	; 62
   12e7e:	6c 01       	movw	r12, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:74
  union {
    uint8_t b[4];
    float f;
  } data;
  data.f = x;
   12e80:	49 83       	std	Y+1, r20	; 0x01
   12e82:	5a 83       	std	Y+2, r21	; 0x02
   12e84:	6b 83       	std	Y+3, r22	; 0x03
   12e86:	7c 83       	std	Y+4, r23	; 0x04
   12e88:	ce 01       	movw	r24, r28
   12e8a:	01 96       	adiw	r24, 0x01	; 1
   12e8c:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:75
  for (int i = 0; i < 4; i++) EEPROM.write(addr + i, data.b[i]);
   12e8e:	10 e0       	ldi	r17, 0x00	; 0
   12e90:	00 e0       	ldi	r16, 0x00	; 0
   12e92:	f7 01       	movw	r30, r14
   12e94:	61 91       	ld	r22, Z+
   12e96:	7f 01       	movw	r14, r30
   12e98:	c8 01       	movw	r24, r16
   12e9a:	8c 0d       	add	r24, r12
   12e9c:	9d 1d       	adc	r25, r13
   12e9e:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <EEPROMClass::write(int, unsigned char) [clone .isra.1] [clone .lto_priv.220] [clone .lto_priv.238]>
   12ea2:	0f 5f       	subi	r16, 0xFF	; 255
   12ea4:	1f 4f       	sbci	r17, 0xFF	; 255
   12ea6:	04 30       	cpi	r16, 0x04	; 4
   12ea8:	11 05       	cpc	r17, r1
   12eaa:	99 f7       	brne	.-26     	; 0x12e92 <EEPROMwriteFloat(unsigned int, float)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:76
}
   12eac:	0f 90       	pop	r0
   12eae:	0f 90       	pop	r0
   12eb0:	0f 90       	pop	r0
   12eb2:	0f 90       	pop	r0
   12eb4:	df 91       	pop	r29
   12eb6:	cf 91       	pop	r28
   12eb8:	1f 91       	pop	r17
   12eba:	0f 91       	pop	r16
   12ebc:	ff 90       	pop	r15
   12ebe:	ef 90       	pop	r14
   12ec0:	df 90       	pop	r13
   12ec2:	cf 90       	pop	r12
   12ec4:	08 95       	ret

00012ec6 <EEPROMreadFloat(unsigned int)>:
_Z15EEPROMreadFloatj():
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:58
}


//// cteni zapis eeprom float datovy typ
float EEPROMreadFloat(unsigned int addr)
{
   12ec6:	cf 92       	push	r12
   12ec8:	df 92       	push	r13
   12eca:	ef 92       	push	r14
   12ecc:	ff 92       	push	r15
   12ece:	0f 93       	push	r16
   12ed0:	1f 93       	push	r17
   12ed2:	cf 93       	push	r28
   12ed4:	df 93       	push	r29
   12ed6:	00 d0       	rcall	.+0      	; 0x12ed8 <EEPROMreadFloat(unsigned int)+0x12>
   12ed8:	1f 92       	push	r1
   12eda:	cd b7       	in	r28, 0x3d	; 61
   12edc:	de b7       	in	r29, 0x3e	; 62
   12ede:	7e 01       	movw	r14, r28
   12ee0:	25 e0       	ldi	r18, 0x05	; 5
   12ee2:	e2 0e       	add	r14, r18
   12ee4:	f1 1c       	adc	r15, r1
   12ee6:	8e 01       	movw	r16, r28
   12ee8:	0f 5f       	subi	r16, 0xFF	; 255
   12eea:	1f 4f       	sbci	r17, 0xFF	; 255
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:63
  union {
    uint8_t b[4];
    float f;
  } data;
  for (int i = 0; i < 4; i++) data.b[i] = EEPROM.read(addr + i);
   12eec:	6c 01       	movw	r12, r24
   12eee:	c0 1a       	sub	r12, r16
   12ef0:	d1 0a       	sbc	r13, r17
   12ef2:	c6 01       	movw	r24, r12
   12ef4:	80 0f       	add	r24, r16
   12ef6:	91 1f       	adc	r25, r17
   12ef8:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   12efc:	f8 01       	movw	r30, r16
   12efe:	81 93       	st	Z+, r24
   12f00:	8f 01       	movw	r16, r30
   12f02:	ee 15       	cp	r30, r14
   12f04:	ff 05       	cpc	r31, r15
   12f06:	a9 f7       	brne	.-22     	; 0x12ef2 <EEPROMreadFloat(unsigned int)+0x2c>
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:64
  return data.f;
   12f08:	69 81       	ldd	r22, Y+1	; 0x01
   12f0a:	7a 81       	ldd	r23, Y+2	; 0x02
   12f0c:	8b 81       	ldd	r24, Y+3	; 0x03
   12f0e:	9c 81       	ldd	r25, Y+4	; 0x04
/home/saric/Arduino/libraries/saric_utils/saric_utils.cpp:65
}
   12f10:	0f 90       	pop	r0
   12f12:	0f 90       	pop	r0
   12f14:	0f 90       	pop	r0
   12f16:	0f 90       	pop	r0
   12f18:	df 91       	pop	r29
   12f1a:	cf 91       	pop	r28
   12f1c:	1f 91       	pop	r17
   12f1e:	0f 91       	pop	r16
   12f20:	ff 90       	pop	r15
   12f22:	ef 90       	pop	r14
   12f24:	df 90       	pop	r13
   12f26:	cf 90       	pop	r12
   12f28:	08 95       	ret

00012f2a <W5500Class::read(unsigned int, unsigned char)>:
_ZN10W5500Class4readEjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:134

    return _len;
}

uint8_t W5500Class::read(uint16_t _addr, uint8_t _cb)
{
   12f2a:	cf 93       	push	r28
   12f2c:	df 93       	push	r29
   12f2e:	d8 2f       	mov	r29, r24
   12f30:	c6 2f       	mov	r28, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:135
    SPI.beginTransaction(wiznet_SPI_settings);
   12f32:	80 91 38 11 	lds	r24, 0x1138	; 0x801138 <wiznet_SPI_settings>
   12f36:	90 91 39 11 	lds	r25, 0x1139	; 0x801139 <wiznet_SPI_settings+0x1>
   12f3a:	0e 94 b8 80 	call	0x10170	; 0x10170 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:136
    setSS();
   12f3e:	0e 94 fc 8a 	call	0x115f8	; 0x115f8 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:137
    SPI.transfer(_addr >> 8);
   12f42:	80 e0       	ldi	r24, 0x00	; 0
   12f44:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:138
    SPI.transfer(_addr & 0xFF);
   12f48:	8d 2f       	mov	r24, r29
   12f4a:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:139
    SPI.transfer(_cb);
   12f4e:	8c 2f       	mov	r24, r28
   12f50:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:140
    uint8_t _data = SPI.transfer(0);
   12f54:	80 e0       	ldi	r24, 0x00	; 0
   12f56:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
   12f5a:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:141
    resetSS();
   12f5c:	0e 94 f7 8a 	call	0x115ee	; 0x115ee <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:145
    SPI.endTransaction();

    return _data;
}
   12f60:	8c 2f       	mov	r24, r28
   12f62:	df 91       	pop	r29
   12f64:	cf 91       	pop	r28
   12f66:	08 95       	ret

00012f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>:
_ZN10W5500Class5writeEjhPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:118

    return 1;
}

uint16_t W5500Class::write(uint16_t _addr, uint8_t _cb, const uint8_t *_buf, uint16_t _len)
{
   12f68:	df 92       	push	r13
   12f6a:	ef 92       	push	r14
   12f6c:	ff 92       	push	r15
   12f6e:	0f 93       	push	r16
   12f70:	1f 93       	push	r17
   12f72:	cf 93       	push	r28
   12f74:	df 93       	push	r29
   12f76:	d8 2f       	mov	r29, r24
   12f78:	d9 2e       	mov	r13, r25
   12f7a:	c6 2f       	mov	r28, r22
   12f7c:	7a 01       	movw	r14, r20
   12f7e:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:119
    SPI.beginTransaction(wiznet_SPI_settings);
   12f80:	80 91 38 11 	lds	r24, 0x1138	; 0x801138 <wiznet_SPI_settings>
   12f84:	90 91 39 11 	lds	r25, 0x1139	; 0x801139 <wiznet_SPI_settings+0x1>
   12f88:	0e 94 b8 80 	call	0x10170	; 0x10170 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:120
    setSS();
   12f8c:	0e 94 fc 8a 	call	0x115f8	; 0x115f8 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:121
    SPI.transfer(_addr >> 8);
   12f90:	8d 2d       	mov	r24, r13
   12f92:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:122
    SPI.transfer(_addr & 0xFF);
   12f96:	8d 2f       	mov	r24, r29
   12f98:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:123
    SPI.transfer(_cb);
   12f9c:	8c 2f       	mov	r24, r28
   12f9e:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
   12fa2:	e7 01       	movw	r28, r14
   12fa4:	e0 0e       	add	r14, r16
   12fa6:	f1 1e       	adc	r15, r17
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:124
    for (uint16_t i=0; i<_len; i++){
   12fa8:	ce 15       	cp	r28, r14
   12faa:	df 05       	cpc	r29, r15
   12fac:	21 f0       	breq	.+8      	; 0x12fb6 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x4e>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:125
        SPI.transfer(_buf[i]);
   12fae:	89 91       	ld	r24, Y+
   12fb0:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
   12fb4:	f9 cf       	rjmp	.-14     	; 0x12fa8 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)+0x40>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:127
    }
    resetSS();
   12fb6:	0e 94 f7 8a 	call	0x115ee	; 0x115ee <W5500Class::resetSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:131
    SPI.endTransaction();

    return _len;
}
   12fba:	c8 01       	movw	r24, r16
   12fbc:	df 91       	pop	r29
   12fbe:	cf 91       	pop	r28
   12fc0:	1f 91       	pop	r17
   12fc2:	0f 91       	pop	r16
   12fc4:	ff 90       	pop	r15
   12fc6:	ef 90       	pop	r14
   12fc8:	df 90       	pop	r13
   12fca:	08 95       	ret

00012fcc <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]>:
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:136
{
  IPAddress subnet(255, 255, 255, 0);
  begin(mac_address, local_ip, dns_server, gateway, subnet);
}

void EthernetClass::begin(uint8_t *mac, IPAddress local_ip, IPAddress dns_server, IPAddress gateway, IPAddress subnet)
   12fcc:	8f 92       	push	r8
   12fce:	9f 92       	push	r9
   12fd0:	af 92       	push	r10
   12fd2:	bf 92       	push	r11
   12fd4:	cf 92       	push	r12
   12fd6:	df 92       	push	r13
   12fd8:	ef 92       	push	r14
   12fda:	ff 92       	push	r15
   12fdc:	0f 93       	push	r16
   12fde:	1f 93       	push	r17
   12fe0:	cf 93       	push	r28
   12fe2:	5c 01       	movw	r10, r24
   12fe4:	6b 01       	movw	r12, r22
   12fe6:	7a 01       	movw	r14, r20
   12fe8:	89 01       	movw	r16, r18
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:138
{
  w5500.init(w5500_cspin);
   12fea:	c0 91 12 0c 	lds	r28, 0x0C12	; 0x800c12 <Ethernet+0xc>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:30
SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;

void W5500Class::init(uint8_t ss_pin)
{
  SPI_CS = ss_pin;
   12fee:	c0 93 de 10 	sts	0x10DE, r28	; 0x8010de <SPI_CS>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:32

  delay(1000);
   12ff2:	68 ee       	ldi	r22, 0xE8	; 232
   12ff4:	73 e0       	ldi	r23, 0x03	; 3
   12ff6:	80 e0       	ldi	r24, 0x00	; 0
   12ff8:	90 e0       	ldi	r25, 0x00	; 0
   12ffa:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
initSS():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:340
private:
  static const uint16_t RSIZE = 2048; // Max Rx buffer size

private:
  // could do inline optimizations
  static inline void initSS()  { pinMode(SPI_CS, OUTPUT); }
   12ffe:	61 e0       	ldi	r22, 0x01	; 1
   13000:	8c 2f       	mov	r24, r28
   13002:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:34
  initSS();
  SPI.begin();
   13006:	0e 94 55 36 	call	0x6caa	; 0x6caa <SPIClass::begin()>
readMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   1300a:	60 e0       	ldi	r22, 0x00	; 0
   1300c:	90 e0       	ldi	r25, 0x00	; 0
   1300e:	80 e0       	ldi	r24, 0x00	; 0
   13010:	0e 94 95 97 	call	0x12f2a	; 0x12f2a <W5500Class::read(unsigned int, unsigned char)>
_ZN10W5500Class7swResetEv.isra.1():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:417
//  readPHYCFGR();
  return read(0x002E, 0x00);
}

void W5500Class::swReset() {
  writeMR( (readMR() | 0x80) );
   13014:	48 2f       	mov	r20, r24
   13016:	40 68       	ori	r20, 0x80	; 128
writeMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:234
  static uint16_t read##name(uint8_t *_buff) {    \
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
   13018:	64 e0       	ldi	r22, 0x04	; 4
   1301a:	90 e0       	ldi	r25, 0x00	; 0
   1301c:	80 e0       	ldi	r24, 0x00	; 0
   1301e:	0e 94 01 8b 	call	0x11602	; 0x11602 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13022:	cc e0       	ldi	r28, 0x0C	; 12
   13024:	88 e0       	ldi	r24, 0x08	; 8
   13026:	88 2e       	mov	r8, r24
   13028:	91 2c       	mov	r9, r1
init():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:38
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
    uint8_t cntl_byte = (0x0C + (i<<5));
    write( 0x1E, cntl_byte, 2); //0x1E - Sn_RXBUF_SIZE
   1302a:	42 e0       	ldi	r20, 0x02	; 2
   1302c:	6c 2f       	mov	r22, r28
   1302e:	8e e1       	ldi	r24, 0x1E	; 30
   13030:	90 e0       	ldi	r25, 0x00	; 0
   13032:	0e 94 01 8b 	call	0x11602	; 0x11602 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:39
    write( 0x1F, cntl_byte, 2); //0x1F - Sn_TXBUF_SIZE
   13036:	42 e0       	ldi	r20, 0x02	; 2
   13038:	6c 2f       	mov	r22, r28
   1303a:	8f e1       	ldi	r24, 0x1F	; 31
   1303c:	90 e0       	ldi	r25, 0x00	; 0
   1303e:	0e 94 01 8b 	call	0x11602	; 0x11602 <W5500Class::write(unsigned int, unsigned char, unsigned char)>
   13042:	81 e0       	ldi	r24, 0x01	; 1
   13044:	88 1a       	sub	r8, r24
   13046:	91 08       	sbc	r9, r1
   13048:	c0 5e       	subi	r28, 0xE0	; 224
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:36

  delay(1000);
  initSS();
  SPI.begin();
  w5500.swReset();
  for (int i=0; i<MAX_SOCK_NUM; i++) {
   1304a:	81 14       	cp	r8, r1
   1304c:	91 04       	cpc	r9, r1
   1304e:	69 f7       	brne	.-38     	; 0x1302a <EthernetClass::begin(unsigned char*, IPAddress, IPAddress, IPAddress, IPAddress) [clone .constprop.100]+0x5e>
writeSHAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:237
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
  __GP_REGISTER_N(SHAR,   0x0009, 6); // Source MAC address
   13050:	26 e0       	ldi	r18, 0x06	; 6
   13052:	30 e0       	ldi	r19, 0x00	; 0
   13054:	4b e1       	ldi	r20, 0x1B	; 27
   13056:	5c e0       	ldi	r21, 0x0C	; 12
   13058:	64 e0       	ldi	r22, 0x04	; 4
   1305a:	89 e0       	ldi	r24, 0x09	; 9
   1305c:	90 e0       	ldi	r25, 0x00	; 0
   1305e:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13062:	a5 01       	movw	r20, r10
   13064:	4e 5f       	subi	r20, 0xFE	; 254
   13066:	5f 4f       	sbci	r21, 0xFF	; 255
writeSIPR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:238
  __GP_REGISTER_N(SIPR,   0x000F, 4); // Source IP address
   13068:	24 e0       	ldi	r18, 0x04	; 4
   1306a:	30 e0       	ldi	r19, 0x00	; 0
   1306c:	64 e0       	ldi	r22, 0x04	; 4
   1306e:	8f e0       	ldi	r24, 0x0F	; 15
   13070:	90 e0       	ldi	r25, 0x00	; 0
   13072:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   13076:	a7 01       	movw	r20, r14
   13078:	4e 5f       	subi	r20, 0xFE	; 254
   1307a:	5f 4f       	sbci	r21, 0xFF	; 255
writeGAR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:235
    return read(address, 0x00, _buff, size);      \
  }

public:
  __GP_REGISTER8 (MR,     0x0000);    // Mode
  __GP_REGISTER_N(GAR,    0x0001, 4); // Gateway IP address
   1307c:	24 e0       	ldi	r18, 0x04	; 4
   1307e:	30 e0       	ldi	r19, 0x00	; 0
   13080:	64 e0       	ldi	r22, 0x04	; 4
   13082:	81 e0       	ldi	r24, 0x01	; 1
   13084:	90 e0       	ldi	r25, 0x00	; 0
   13086:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40
   1308a:	a8 01       	movw	r20, r16
   1308c:	4e 5f       	subi	r20, 0xFE	; 254
   1308e:	5f 4f       	sbci	r21, 0xFF	; 255
writeSUBR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:236
  __GP_REGISTER_N(SUBR,   0x0005, 4); // Subnet mask address
   13090:	24 e0       	ldi	r18, 0x04	; 4
   13092:	30 e0       	ldi	r19, 0x00	; 0
   13094:	64 e0       	ldi	r22, 0x04	; 4
   13096:	85 e0       	ldi	r24, 0x05	; 5
   13098:	90 e0       	ldi	r25, 0x00	; 0
   1309a:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
_ZN9IPAddressaSERKS_():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:29
#include "Printable.h"
#include "WString.h"

// A class to make it easier to handle and pass around IP addresses

class IPAddress : public Printable {
   1309e:	f6 01       	movw	r30, r12
   130a0:	82 81       	ldd	r24, Z+2	; 0x02
   130a2:	93 81       	ldd	r25, Z+3	; 0x03
   130a4:	a4 81       	ldd	r26, Z+4	; 0x04
   130a6:	b5 81       	ldd	r27, Z+5	; 0x05
   130a8:	80 93 08 0c 	sts	0x0C08, r24	; 0x800c08 <Ethernet+0x2>
   130ac:	90 93 09 0c 	sts	0x0C09, r25	; 0x800c09 <Ethernet+0x3>
   130b0:	a0 93 0a 0c 	sts	0x0C0A, r26	; 0x800c0a <Ethernet+0x4>
   130b4:	b0 93 0b 0c 	sts	0x0C0B, r27	; 0x800c0b <Ethernet+0x5>
_ZN13EthernetClass5beginEPh9IPAddressS1_S1_S1_.constprop.100():
/home/saric/Arduino/libraries/Ethernet2/src/Ethernet2.cpp:144
  w5500.setMACAddress(mac);
  w5500.setIPAddress(local_ip.raw_address());
  w5500.setGatewayIp(gateway.raw_address());
  w5500.setSubnetMask(subnet.raw_address());
  _dnsServerAddress = dns_server;
}
   130b8:	cf 91       	pop	r28
   130ba:	1f 91       	pop	r17
   130bc:	0f 91       	pop	r16
   130be:	ff 90       	pop	r15
   130c0:	ef 90       	pop	r14
   130c2:	df 90       	pop	r13
   130c4:	cf 90       	pop	r12
   130c6:	bf 90       	pop	r11
   130c8:	af 90       	pop	r10
   130ca:	9f 90       	pop	r9
   130cc:	8f 90       	pop	r8
   130ce:	08 95       	ret

000130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>:
_ZN10W5500Class7writeSnEhjh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:352
uint8_t W5500Class::readSn(SOCKET _s, uint16_t _addr) {
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte);
}

uint8_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t _data) {
   130d0:	9b 01       	movw	r18, r22
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:353
    uint8_t cntl_byte = (_s<<5)+0x0C;
   130d2:	82 95       	swap	r24
   130d4:	88 0f       	add	r24, r24
   130d6:	80 7e       	andi	r24, 0xE0	; 224
   130d8:	6c e0       	ldi	r22, 0x0C	; 12
   130da:	68 0f       	add	r22, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:354
    return write(_addr, cntl_byte, _data);
   130dc:	c9 01       	movw	r24, r18
   130de:	0c 94 01 8b 	jmp	0x11602	; 0x11602 <W5500Class::write(unsigned int, unsigned char, unsigned char)>

000130e2 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>:
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:74
  // This is same as having no offset in a call to send_data_processing_offset
  send_data_processing_offset(s, 0, data, len);

}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
   130e2:	bf 92       	push	r11
   130e4:	cf 92       	push	r12
   130e6:	df 92       	push	r13
   130e8:	ef 92       	push	r14
   130ea:	ff 92       	push	r15
   130ec:	0f 93       	push	r16
   130ee:	1f 93       	push	r17
   130f0:	cf 93       	push	r28
   130f2:	df 93       	push	r29
   130f4:	b8 2e       	mov	r11, r24
   130f6:	6b 01       	movw	r12, r22
   130f8:	7a 01       	movw	r14, r20
   130fa:	89 01       	movw	r16, r18
readSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
  __SOCKET_REGISTER8(SnPROTO,     0x0014)        // Protocol in IP RAW Mode
  __SOCKET_REGISTER8(SnTOS,       0x0015)        // IP TOS
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
   130fc:	64 e2       	ldi	r22, 0x24	; 36
   130fe:	70 e0       	ldi	r23, 0x00	; 0
   13100:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   13104:	c8 2f       	mov	r28, r24
   13106:	65 e2       	ldi	r22, 0x25	; 37
   13108:	70 e0       	ldi	r23, 0x00	; 0
   1310a:	8b 2d       	mov	r24, r11
   1310c:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   13110:	d0 e0       	ldi	r29, 0x00	; 0
   13112:	dc 2f       	mov	r29, r28
   13114:	cc 27       	eor	r28, r28
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:78
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
    ptr += data_offset;
   13116:	8c 0d       	add	r24, r12
   13118:	9d 2d       	mov	r25, r13
   1311a:	91 1d       	adc	r25, r1
   1311c:	c8 0f       	add	r28, r24
   1311e:	d9 1f       	adc	r29, r25
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:77
}

void W5500Class::send_data_processing_offset(SOCKET s, uint16_t data_offset, const uint8_t *data, uint16_t len)
{
    uint16_t ptr = readSnTX_WR(s);
    uint8_t cntl_byte = (0x14+(s<<5));
   13120:	6b 2d       	mov	r22, r11
   13122:	62 95       	swap	r22
   13124:	66 0f       	add	r22, r22
   13126:	60 7e       	andi	r22, 0xE0	; 224
   13128:	6c 5e       	subi	r22, 0xEC	; 236
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:79
    ptr += data_offset;
    write(ptr, cntl_byte, data, len);
   1312a:	98 01       	movw	r18, r16
   1312c:	a7 01       	movw	r20, r14
   1312e:	ce 01       	movw	r24, r28
   13130:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:80
    ptr += len;
   13134:	c0 0f       	add	r28, r16
   13136:	d1 1f       	adc	r29, r17
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   13138:	4d 2f       	mov	r20, r29
   1313a:	64 e2       	ldi	r22, 0x24	; 36
   1313c:	70 e0       	ldi	r23, 0x00	; 0
   1313e:	8b 2d       	mov	r24, r11
   13140:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   13144:	4c 2f       	mov	r20, r28
   13146:	65 e2       	ldi	r22, 0x25	; 37
   13148:	70 e0       	ldi	r23, 0x00	; 0
   1314a:	8b 2d       	mov	r24, r11
_ZN10W5500Class27send_data_processing_offsetEhjPKhj.constprop.28():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:82
    writeSnTX_WR(s, ptr);
}
   1314c:	df 91       	pop	r29
   1314e:	cf 91       	pop	r28
   13150:	1f 91       	pop	r17
   13152:	0f 91       	pop	r16
   13154:	ff 90       	pop	r15
   13156:	ef 90       	pop	r14
   13158:	df 90       	pop	r13
   1315a:	cf 90       	pop	r12
   1315c:	bf 90       	pop	r11
writeSnTX_WR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:319
   1315e:	0c 94 68 98 	jmp	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

00013162 <EthernetUDP::write(unsigned char const*, unsigned int)>:
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:116
{
  return write(&byte, 1);
}

size_t EthernetUDP::write(const uint8_t *buffer, size_t size)
{
   13162:	af 92       	push	r10
   13164:	bf 92       	push	r11
   13166:	cf 92       	push	r12
   13168:	df 92       	push	r13
   1316a:	ff 92       	push	r15
   1316c:	0f 93       	push	r16
   1316e:	1f 93       	push	r17
   13170:	cf 93       	push	r28
   13172:	df 93       	push	r29
   13174:	8c 01       	movw	r16, r24
   13176:	5b 01       	movw	r10, r22
   13178:	ea 01       	movw	r28, r20
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:117
  uint16_t bytes_written = bufferData(_sock, _offset, buffer, size);
   1317a:	fc 01       	movw	r30, r24
   1317c:	c7 88       	ldd	r12, Z+23	; 0x17
   1317e:	d0 8c       	ldd	r13, Z+24	; 0x18
   13180:	f4 84       	ldd	r15, Z+12	; 0x0c
bufferData():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:361
}

uint16_t bufferData(SOCKET s, uint16_t offset, const uint8_t* buf, uint16_t len)
{
  uint16_t ret =0;
  if (len > w5500.getTXFreeSize(s))
   13182:	8f 2d       	mov	r24, r15
   13184:	0e 94 26 89 	call	0x1124c	; 0x1124c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13188:	8c 17       	cp	r24, r28
   1318a:	9d 07       	cpc	r25, r29
   1318c:	20 f4       	brcc	.+8      	; 0x13196 <EthernetUDP::write(unsigned char const*, unsigned int)+0x34>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:363
  {
    ret = w5500.getTXFreeSize(s); // check size not to exceed MAX size.
   1318e:	8f 2d       	mov	r24, r15
   13190:	0e 94 26 89 	call	0x1124c	; 0x1124c <W5500Class::getTXFreeSize(unsigned char) [clone .constprop.27]>
   13194:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:369
  }
  else
  {
    ret = len;
  }
  w5500.send_data_processing_offset(s, offset, buf, ret);
   13196:	9e 01       	movw	r18, r28
   13198:	a5 01       	movw	r20, r10
   1319a:	b6 01       	movw	r22, r12
   1319c:	8f 2d       	mov	r24, r15
   1319e:	0e 94 71 98 	call	0x130e2	; 0x130e2 <W5500Class::send_data_processing_offset(unsigned char, unsigned int, unsigned char const*, unsigned int) [clone .constprop.28]>
_ZN11EthernetUDP5writeEPKhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:118
  _offset += bytes_written;
   131a2:	f8 01       	movw	r30, r16
   131a4:	87 89       	ldd	r24, Z+23	; 0x17
   131a6:	90 8d       	ldd	r25, Z+24	; 0x18
   131a8:	8c 0f       	add	r24, r28
   131aa:	9d 1f       	adc	r25, r29
   131ac:	90 8f       	std	Z+24, r25	; 0x18
   131ae:	87 8b       	std	Z+23, r24	; 0x17
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:120
  return bytes_written;
}
   131b0:	ce 01       	movw	r24, r28
   131b2:	df 91       	pop	r29
   131b4:	cf 91       	pop	r28
   131b6:	1f 91       	pop	r17
   131b8:	0f 91       	pop	r16
   131ba:	ff 90       	pop	r15
   131bc:	df 90       	pop	r13
   131be:	cf 90       	pop	r12
   131c0:	bf 90       	pop	r11
   131c2:	af 90       	pop	r10
   131c4:	08 95       	ret

000131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>:
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:163
    SPI.endTransaction();

    return _len;
}

void W5500Class::execCmdSn(SOCKET s, SockCMD _cmd) {
   131c6:	cf 93       	push	r28
   131c8:	c8 2f       	mov	r28, r24
   131ca:	46 2f       	mov	r20, r22
writeSnCR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:306
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
   131cc:	61 e0       	ldi	r22, 0x01	; 1
   131ce:	70 e0       	ldi	r23, 0x00	; 0
   131d0:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
readSnCR():
   131d4:	61 e0       	ldi	r22, 0x01	; 1
   131d6:	70 e0       	ldi	r23, 0x00	; 0
   131d8:	8c 2f       	mov	r24, r28
   131da:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN10W5500Class9execCmdSnEh7SockCMD.constprop.26():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:167
    // Send command to socket
    writeSnCR(s, _cmd);
    // Wait for command to complete
    while (readSnCR(s))
   131de:	81 11       	cpse	r24, r1
   131e0:	f9 cf       	rjmp	.-14     	; 0x131d4 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]+0xe>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:169
    ;
}
   131e2:	cf 91       	pop	r28
   131e4:	08 95       	ret

000131e6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>:
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:84
    write(ptr, cntl_byte, data, len);
    ptr += len;
    writeSnTX_WR(s, ptr);
}

void W5500Class::recv_data_processing(SOCKET s, uint8_t *data, uint16_t len, uint8_t peek)
   131e6:	af 92       	push	r10
   131e8:	bf 92       	push	r11
   131ea:	cf 92       	push	r12
   131ec:	df 92       	push	r13
   131ee:	ef 92       	push	r14
   131f0:	ff 92       	push	r15
   131f2:	0f 93       	push	r16
   131f4:	1f 93       	push	r17
   131f6:	cf 93       	push	r28
   131f8:	df 93       	push	r29
   131fa:	f8 2e       	mov	r15, r24
   131fc:	5b 01       	movw	r10, r22
   131fe:	6a 01       	movw	r12, r20
   13200:	e2 2e       	mov	r14, r18
readSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
  __SOCKET_REGISTER8(SnTTL,       0x0016)        // IP TTL
  __SOCKET_REGISTER16(SnTX_FSR,   0x0020)        // TX Free Size
  __SOCKET_REGISTER16(SnTX_RD,    0x0022)        // TX Read Pointer
  __SOCKET_REGISTER16(SnTX_WR,    0x0024)        // TX Write Pointer
  __SOCKET_REGISTER16(SnRX_RSR,   0x0026)        // RX Free Size
  __SOCKET_REGISTER16(SnRX_RD,    0x0028)        // RX Read Pointer
   13202:	68 e2       	ldi	r22, 0x28	; 40
   13204:	70 e0       	ldi	r23, 0x00	; 0
   13206:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   1320a:	08 2f       	mov	r16, r24
   1320c:	10 e0       	ldi	r17, 0x00	; 0
   1320e:	10 2f       	mov	r17, r16
   13210:	00 27       	eor	r16, r16
   13212:	69 e2       	ldi	r22, 0x29	; 41
   13214:	70 e0       	ldi	r23, 0x00	; 0
   13216:	8f 2d       	mov	r24, r15
   13218:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
   1321c:	e8 01       	movw	r28, r16
   1321e:	c8 0f       	add	r28, r24
   13220:	d1 1d       	adc	r29, r1
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:149
    return _data;
}

uint16_t W5500Class::read(uint16_t _addr, uint8_t _cb, uint8_t *_buf, uint16_t _len)
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
   13222:	80 91 38 11 	lds	r24, 0x1138	; 0x801138 <wiznet_SPI_settings>
   13226:	90 91 39 11 	lds	r25, 0x1139	; 0x801139 <wiznet_SPI_settings+0x1>
   1322a:	0e 94 b8 80 	call	0x10170	; 0x10170 <SPIClass::beginTransaction(SPISettings)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:150
    setSS();
   1322e:	0e 94 fc 8a 	call	0x115f8	; 0x115f8 <W5500Class::setSS()>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:151
    SPI.transfer(_addr >> 8);
   13232:	8d 2f       	mov	r24, r29
   13234:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:152
    SPI.transfer(_addr & 0xFF);
   13238:	8c 2f       	mov	r24, r28
   1323a:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
read_data():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:99
    }
}

void W5500Class::read_data(SOCKET s, volatile uint16_t src, volatile uint8_t *dst, uint16_t len)
{
    uint8_t cntl_byte = (0x18+(s<<5));
   1323e:	8f 2d       	mov	r24, r15
   13240:	82 95       	swap	r24
   13242:	88 0f       	add	r24, r24
   13244:	80 7e       	andi	r24, 0xE0	; 224
read():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:153
{ 
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
   13246:	88 5e       	subi	r24, 0xE8	; 232
   13248:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
   1324c:	85 01       	movw	r16, r10
   1324e:	ac 0c       	add	r10, r12
   13250:	bd 1c       	adc	r11, r13
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:155
    for (uint16_t i=0; i<_len; i++){
        _buf[i] = SPI.transfer(0);
   13252:	80 e0       	ldi	r24, 0x00	; 0
   13254:	0e 94 b1 80 	call	0x10162	; 0x10162 <SPIClass::transfer(unsigned char)>
   13258:	f8 01       	movw	r30, r16
   1325a:	81 93       	st	Z+, r24
   1325c:	8f 01       	movw	r16, r30
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:154
    SPI.beginTransaction(wiznet_SPI_settings);
    setSS();
    SPI.transfer(_addr >> 8);
    SPI.transfer(_addr & 0xFF);
    SPI.transfer(_cb);
    for (uint16_t i=0; i<_len; i++){
   1325e:	ea 15       	cp	r30, r10
   13260:	fb 05       	cpc	r31, r11
   13262:	b9 f7       	brne	.-18     	; 0x13252 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0x6c>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:157
        _buf[i] = SPI.transfer(0);
    }
    resetSS();
   13264:	0e 94 f7 8a 	call	0x115ee	; 0x115ee <W5500Class::resetSS()>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:90
{
    uint16_t ptr;
    ptr = readSnRX_RD(s);

    read_data(s, ptr, data, len);
    if (!peek)
   13268:	e1 10       	cpse	r14, r1
   1326a:	18 c0       	rjmp	.+48     	; 0x1329c <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]+0xb6>
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:92
    {
        ptr += len;
   1326c:	cc 0d       	add	r28, r12
   1326e:	dd 1d       	adc	r29, r13
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   13270:	4d 2f       	mov	r20, r29
   13272:	68 e2       	ldi	r22, 0x28	; 40
   13274:	70 e0       	ldi	r23, 0x00	; 0
   13276:	8f 2d       	mov	r24, r15
   13278:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1327c:	4c 2f       	mov	r20, r28
   1327e:	69 e2       	ldi	r22, 0x29	; 41
   13280:	70 e0       	ldi	r23, 0x00	; 0
   13282:	8f 2d       	mov	r24, r15
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
        writeSnRX_RD(s, ptr);
    }
}
   13284:	df 91       	pop	r29
   13286:	cf 91       	pop	r28
   13288:	1f 91       	pop	r17
   1328a:	0f 91       	pop	r16
   1328c:	ff 90       	pop	r15
   1328e:	ef 90       	pop	r14
   13290:	df 90       	pop	r13
   13292:	cf 90       	pop	r12
   13294:	bf 90       	pop	r11
   13296:	af 90       	pop	r10
writeSnRX_RD():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:321
   13298:	0c 94 68 98 	jmp	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN10W5500Class20recv_data_processingEhPhjh.constprop.24():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.cpp:95
   1329c:	df 91       	pop	r29
   1329e:	cf 91       	pop	r28
   132a0:	1f 91       	pop	r17
   132a2:	0f 91       	pop	r16
   132a4:	ff 90       	pop	r15
   132a6:	ef 90       	pop	r14
   132a8:	df 90       	pop	r13
   132aa:	cf 90       	pop	r12
   132ac:	bf 90       	pop	r11
   132ae:	af 90       	pop	r10
   132b0:	08 95       	ret

000132b2 <recv(unsigned char, unsigned char*, int)>:
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:153
 * 		It continues to wait for data as much as the application wants to receive.
 * 		
 * @return	received data size for success else -1.
 */
int16_t recv(SOCKET s, uint8_t *buf, int16_t len)
{
   132b2:	cf 92       	push	r12
   132b4:	df 92       	push	r13
   132b6:	ef 92       	push	r14
   132b8:	ff 92       	push	r15
   132ba:	1f 93       	push	r17
   132bc:	cf 93       	push	r28
   132be:	df 93       	push	r29
   132c0:	18 2f       	mov	r17, r24
   132c2:	6b 01       	movw	r12, r22
   132c4:	7a 01       	movw	r14, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:155
  // Check how much data is available
  int16_t ret = w5500.getRXReceivedSize(s);
   132c6:	0e 94 42 89 	call	0x11284	; 0x11284 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   132ca:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:156
  if ( ret == 0 )
   132cc:	00 97       	sbiw	r24, 0x00	; 0
   132ce:	d9 f4       	brne	.+54     	; 0x13306 <recv(unsigned char, unsigned char*, int)+0x54>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   132d0:	63 e0       	ldi	r22, 0x03	; 3
   132d2:	70 e0       	ldi	r23, 0x00	; 0
   132d4:	81 2f       	mov	r24, r17
   132d6:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
_Z4recvhPhi():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:160
  {
    // No data available.
    uint8_t status = w5500.readSnSR(s);
    if ( status == SnSR::LISTEN || status == SnSR::CLOSED || status == SnSR::CLOSE_WAIT )
   132da:	84 31       	cpi	r24, 0x14	; 20
   132dc:	59 f0       	breq	.+22     	; 0x132f4 <recv(unsigned char, unsigned char*, int)+0x42>
   132de:	88 23       	and	r24, r24
   132e0:	49 f0       	breq	.+18     	; 0x132f4 <recv(unsigned char, unsigned char*, int)+0x42>
   132e2:	c1 e0       	ldi	r28, 0x01	; 1
   132e4:	d0 e0       	ldi	r29, 0x00	; 0
   132e6:	8c 31       	cpi	r24, 0x1C	; 28
   132e8:	11 f4       	brne	.+4      	; 0x132ee <recv(unsigned char, unsigned char*, int)+0x3c>
   132ea:	d0 e0       	ldi	r29, 0x00	; 0
   132ec:	c0 e0       	ldi	r28, 0x00	; 0
   132ee:	d1 95       	neg	r29
   132f0:	c1 95       	neg	r28
   132f2:	d1 09       	sbc	r29, r1
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:182
  {
    w5500.recv_data_processing(s, buf, ret);
    w5500.execCmdSn(s, Sock_RECV);
  }
  return ret;
}
   132f4:	ce 01       	movw	r24, r28
   132f6:	df 91       	pop	r29
   132f8:	cf 91       	pop	r28
   132fa:	1f 91       	pop	r17
   132fc:	ff 90       	pop	r15
   132fe:	ef 90       	pop	r14
   13300:	df 90       	pop	r13
   13302:	cf 90       	pop	r12
   13304:	08 95       	ret
   13306:	e8 16       	cp	r14, r24
   13308:	f9 06       	cpc	r15, r25
   1330a:	0c f4       	brge	.+2      	; 0x1330e <recv(unsigned char, unsigned char*, int)+0x5c>
   1330c:	e7 01       	movw	r28, r14
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:176
  else if (ret > len)
  {
    ret = len;
  }

  if ( ret > 0 )
   1330e:	1c 16       	cp	r1, r28
   13310:	1d 06       	cpc	r1, r29
   13312:	84 f7       	brge	.-32     	; 0x132f4 <recv(unsigned char, unsigned char*, int)+0x42>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:178
  {
    w5500.recv_data_processing(s, buf, ret);
   13314:	20 e0       	ldi	r18, 0x00	; 0
   13316:	ae 01       	movw	r20, r28
   13318:	b6 01       	movw	r22, r12
   1331a:	81 2f       	mov	r24, r17
   1331c:	0e 94 f3 98 	call	0x131e6	; 0x131e6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:179
    w5500.execCmdSn(s, Sock_RECV);
   13320:	60 e4       	ldi	r22, 0x40	; 64
   13322:	70 e0       	ldi	r23, 0x00	; 0
   13324:	81 2f       	mov	r24, r17
   13326:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
   1332a:	e4 cf       	rjmp	.-56     	; 0x132f4 <recv(unsigned char, unsigned char*, int)+0x42>

0001332c <EthernetUDP::read(unsigned char*, unsigned int)>:
_ZN11EthernetUDP4readEPhj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:167
  // If we get here, there's no data available
  return -1;
}

int EthernetUDP::read(unsigned char* buffer, size_t len)
{
   1332c:	cf 93       	push	r28
   1332e:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:169

  if (_remaining > 0)
   13330:	fc 01       	movw	r30, r24
   13332:	21 8d       	ldd	r18, Z+25	; 0x19
   13334:	32 8d       	ldd	r19, Z+26	; 0x1a
   13336:	21 15       	cp	r18, r1
   13338:	31 05       	cpc	r19, r1
   1333a:	29 f4       	brne	.+10     	; 0x13346 <EthernetUDP::read(unsigned char*, unsigned int)+0x1a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:195
    }

  }

  // If we get here, there's no data available or recv failed
  return -1;
   1333c:	8f ef       	ldi	r24, 0xFF	; 255
   1333e:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:197

}
   13340:	df 91       	pop	r29
   13342:	cf 91       	pop	r28
   13344:	08 95       	ret
   13346:	ec 01       	movw	r28, r24
   13348:	84 85       	ldd	r24, Z+12	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:174
  if (_remaining > 0)
  {

    int got;

    if (_remaining <= len)
   1334a:	42 17       	cp	r20, r18
   1334c:	53 07       	cpc	r21, r19
   1334e:	08 f0       	brcs	.+2      	; 0x13352 <EthernetUDP::read(unsigned char*, unsigned int)+0x26>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:177
    {
      // data should fit in the buffer
      got = recv(_sock, buffer, _remaining);
   13350:	a9 01       	movw	r20, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:183
    }
    else
    {
      // too much data for the buffer, 
      // grab as much as will fit
      got = recv(_sock, buffer, len);
   13352:	0e 94 59 99 	call	0x132b2	; 0x132b2 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:186
    }

    if (got > 0)
   13356:	18 16       	cp	r1, r24
   13358:	19 06       	cpc	r1, r25
   1335a:	84 f7       	brge	.-32     	; 0x1333c <EthernetUDP::read(unsigned char*, unsigned int)+0x10>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:188
    {
      _remaining -= got;
   1335c:	29 8d       	ldd	r18, Y+25	; 0x19
   1335e:	3a 8d       	ldd	r19, Y+26	; 0x1a
   13360:	28 1b       	sub	r18, r24
   13362:	39 0b       	sbc	r19, r25
   13364:	3a 8f       	std	Y+26, r19	; 0x1a
   13366:	29 8f       	std	Y+25, r18	; 0x19
   13368:	eb cf       	rjmp	.-42     	; 0x13340 <EthernetUDP::read(unsigned char*, unsigned int)+0x14>

0001336a <EthernetUDP::read()>:
_ZN11EthernetUDP4readEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:152
  // There aren't any packets available
  return 0;
}

int EthernetUDP::read()
{
   1336a:	0f 93       	push	r16
   1336c:	1f 93       	push	r17
   1336e:	cf 93       	push	r28
   13370:	df 93       	push	r29
   13372:	1f 92       	push	r1
   13374:	cd b7       	in	r28, 0x3d	; 61
   13376:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   13378:	fc 01       	movw	r30, r24
   1337a:	21 8d       	ldd	r18, Z+25	; 0x19
   1337c:	32 8d       	ldd	r19, Z+26	; 0x1a
   1337e:	23 2b       	or	r18, r19
   13380:	41 f4       	brne	.+16     	; 0x13392 <EthernetUDP::read()+0x28>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:163
    _remaining--;
    return byte;
  }

  // If we get here, there's no data available
  return -1;
   13382:	8f ef       	ldi	r24, 0xFF	; 255
   13384:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:164
}
   13386:	0f 90       	pop	r0
   13388:	df 91       	pop	r29
   1338a:	cf 91       	pop	r28
   1338c:	1f 91       	pop	r17
   1338e:	0f 91       	pop	r16
   13390:	08 95       	ret
   13392:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:155

int EthernetUDP::read()
{
  uint8_t byte;

  if ((_remaining > 0) && (recv(_sock, &byte, 1) > 0))
   13394:	41 e0       	ldi	r20, 0x01	; 1
   13396:	50 e0       	ldi	r21, 0x00	; 0
   13398:	be 01       	movw	r22, r28
   1339a:	6f 5f       	subi	r22, 0xFF	; 255
   1339c:	7f 4f       	sbci	r23, 0xFF	; 255
   1339e:	fc 01       	movw	r30, r24
   133a0:	84 85       	ldd	r24, Z+12	; 0x0c
   133a2:	0e 94 59 99 	call	0x132b2	; 0x132b2 <recv(unsigned char, unsigned char*, int)>
   133a6:	18 16       	cp	r1, r24
   133a8:	19 06       	cpc	r1, r25
   133aa:	5c f7       	brge	.-42     	; 0x13382 <EthernetUDP::read()+0x18>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:158
  {
    // We read things without any problems
    _remaining--;
   133ac:	f8 01       	movw	r30, r16
   133ae:	81 8d       	ldd	r24, Z+25	; 0x19
   133b0:	92 8d       	ldd	r25, Z+26	; 0x1a
   133b2:	01 97       	sbiw	r24, 0x01	; 1
   133b4:	92 8f       	std	Z+26, r25	; 0x1a
   133b6:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:159
    return byte;
   133b8:	89 81       	ldd	r24, Y+1	; 0x01
   133ba:	90 e0       	ldi	r25, 0x00	; 0
   133bc:	e4 cf       	rjmp	.-56     	; 0x13386 <EthernetUDP::read()+0x1c>

000133be <EthernetUDP::parsePacket()>:
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:123
  _offset += bytes_written;
  return bytes_written;
}

int EthernetUDP::parsePacket()
{
   133be:	0f 93       	push	r16
   133c0:	1f 93       	push	r17
   133c2:	cf 93       	push	r28
   133c4:	df 93       	push	r29
   133c6:	00 d0       	rcall	.+0      	; 0x133c8 <EthernetUDP::parsePacket()+0xa>
   133c8:	00 d0       	rcall	.+0      	; 0x133ca <EthernetUDP::parsePacket()+0xc>
   133ca:	1f 92       	push	r1
   133cc:	1f 92       	push	r1
   133ce:	cd b7       	in	r28, 0x3d	; 61
   133d0:	de b7       	in	r29, 0x3e	; 62
   133d2:	8c 01       	movw	r16, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:125
  // discard any remaining bytes in the last packet
  flush();
   133d4:	dc 01       	movw	r26, r24
   133d6:	ed 91       	ld	r30, X+
   133d8:	fc 91       	ld	r31, X
   133da:	06 80       	ldd	r0, Z+6	; 0x06
   133dc:	f7 81       	ldd	r31, Z+7	; 0x07
   133de:	e0 2d       	mov	r30, r0
   133e0:	19 95       	eicall
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:127

  if (w5500.getRXReceivedSize(_sock) > 0)
   133e2:	f8 01       	movw	r30, r16
   133e4:	84 85       	ldd	r24, Z+12	; 0x0c
   133e6:	0e 94 42 89 	call	0x11284	; 0x11284 <W5500Class::getRXReceivedSize(unsigned char) [clone .constprop.23]>
   133ea:	89 2b       	or	r24, r25
   133ec:	b1 f1       	breq	.+108    	; 0x1345a <EthernetUDP::parsePacket()+0x9c>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:133
  {
    //HACK - hand-parse the UDP packet using TCP recv method
    uint8_t tmpBuf[8];
    int ret =0; 
    //read 8 header bytes and get IP and port from it
    ret = recv(_sock,tmpBuf,8);
   133ee:	48 e0       	ldi	r20, 0x08	; 8
   133f0:	50 e0       	ldi	r21, 0x00	; 0
   133f2:	be 01       	movw	r22, r28
   133f4:	6f 5f       	subi	r22, 0xFF	; 255
   133f6:	7f 4f       	sbci	r23, 0xFF	; 255
   133f8:	d8 01       	movw	r26, r16
   133fa:	1c 96       	adiw	r26, 0x0c	; 12
   133fc:	8c 91       	ld	r24, X
   133fe:	0e 94 59 99 	call	0x132b2	; 0x132b2 <recv(unsigned char, unsigned char*, int)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:134
    if (ret > 0)
   13402:	18 16       	cp	r1, r24
   13404:	19 06       	cpc	r1, r25
   13406:	f4 f4       	brge	.+60     	; 0x13444 <EthernetUDP::parsePacket()+0x86>
operator=():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.cpp:88
    return true;
}

IPAddress& IPAddress::operator=(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
   13408:	d8 01       	movw	r26, r16
   1340a:	51 96       	adiw	r26, 0x11	; 17
   1340c:	84 e0       	ldi	r24, 0x04	; 4
   1340e:	fe 01       	movw	r30, r28
   13410:	31 96       	adiw	r30, 0x01	; 1
   13412:	01 90       	ld	r0, Z+
   13414:	0d 92       	st	X+, r0
   13416:	8a 95       	dec	r24
   13418:	e1 f7       	brne	.-8      	; 0x13412 <EthernetUDP::parsePacket()+0x54>
_ZN11EthernetUDP11parsePacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:137
    {
      _remoteIP = tmpBuf;
      _remotePort = tmpBuf[4];
   1341a:	8d 81       	ldd	r24, Y+5	; 0x05
   1341c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:138
      _remotePort = (_remotePort << 8) + tmpBuf[5];
   1341e:	98 2f       	mov	r25, r24
   13420:	88 27       	eor	r24, r24
   13422:	2e 81       	ldd	r18, Y+6	; 0x06
   13424:	82 0f       	add	r24, r18
   13426:	91 1d       	adc	r25, r1
   13428:	f8 01       	movw	r30, r16
   1342a:	96 8b       	std	Z+22, r25	; 0x16
   1342c:	85 8b       	std	Z+21, r24	; 0x15
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:139
      _remaining = tmpBuf[6];
   1342e:	8f 81       	ldd	r24, Y+7	; 0x07
   13430:	28 2f       	mov	r18, r24
   13432:	30 e0       	ldi	r19, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:140
      _remaining = (_remaining << 8) + tmpBuf[7];
   13434:	32 2f       	mov	r19, r18
   13436:	22 27       	eor	r18, r18
   13438:	88 85       	ldd	r24, Y+8	; 0x08
   1343a:	82 0f       	add	r24, r18
   1343c:	93 2f       	mov	r25, r19
   1343e:	91 1d       	adc	r25, r1
   13440:	92 8f       	std	Z+26, r25	; 0x1a
   13442:	81 8f       	std	Z+25, r24	; 0x19
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:149
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
}
   13444:	28 96       	adiw	r28, 0x08	; 8
   13446:	0f b6       	in	r0, 0x3f	; 63
   13448:	f8 94       	cli
   1344a:	de bf       	out	0x3e, r29	; 62
   1344c:	0f be       	out	0x3f, r0	; 63
   1344e:	cd bf       	out	0x3d, r28	; 61
   13450:	df 91       	pop	r29
   13452:	cf 91       	pop	r28
   13454:	1f 91       	pop	r17
   13456:	0f 91       	pop	r16
   13458:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:148
      ret = _remaining;
    }
    return ret;
  }
  // There aren't any packets available
  return 0;
   1345a:	90 e0       	ldi	r25, 0x00	; 0
   1345c:	80 e0       	ldi	r24, 0x00	; 0
   1345e:	f2 cf       	rjmp	.-28     	; 0x13444 <EthernetUDP::parsePacket()+0x86>

00013460 <EthernetUDP::peek()>:
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:200
  return -1;

}

int EthernetUDP::peek()
{
   13460:	cf 93       	push	r28
   13462:	df 93       	push	r29
   13464:	1f 92       	push	r1
   13466:	cd b7       	in	r28, 0x3d	; 61
   13468:	de b7       	in	r29, 0x3e	; 62
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   1346a:	fc 01       	movw	r30, r24
   1346c:	21 8d       	ldd	r18, Z+25	; 0x19
   1346e:	32 8d       	ldd	r19, Z+26	; 0x1a
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:206
    return -1;
   13470:	8f ef       	ldi	r24, 0xFF	; 255
   13472:	9f ef       	ldi	r25, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:205
{
  uint8_t b;
  // Unlike recv, peek doesn't check to see if there's any data available, so we must.
  // If the user hasn't called parsePacket yet then return nothing otherwise they
  // may get the UDP header
  if (!_remaining)
   13474:	23 2b       	or	r18, r19
   13476:	59 f0       	breq	.+22     	; 0x1348e <EthernetUDP::peek()+0x2e>
peek():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:192
 * 		
 * @return
 */
uint16_t peek(SOCKET s, uint8_t *buf)
{
  w5500.recv_data_processing(s, buf, 1, 1);
   13478:	21 e0       	ldi	r18, 0x01	; 1
   1347a:	41 e0       	ldi	r20, 0x01	; 1
   1347c:	50 e0       	ldi	r21, 0x00	; 0
   1347e:	be 01       	movw	r22, r28
   13480:	6f 5f       	subi	r22, 0xFF	; 255
   13482:	7f 4f       	sbci	r23, 0xFF	; 255
   13484:	84 85       	ldd	r24, Z+12	; 0x0c
   13486:	0e 94 f3 98 	call	0x131e6	; 0x131e6 <W5500Class::recv_data_processing(unsigned char, unsigned char*, unsigned int, unsigned char) [clone .constprop.24]>
_ZN11EthernetUDP4peekEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:208
    return -1;
  ::peek(_sock, &b);
  return b;
   1348a:	89 81       	ldd	r24, Y+1	; 0x01
   1348c:	90 e0       	ldi	r25, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:209
}
   1348e:	0f 90       	pop	r0
   13490:	df 91       	pop	r29
   13492:	cf 91       	pop	r28
   13494:	08 95       	ret

00013496 <close(unsigned char)>:
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:43

/**
 * @brief	This function close the socket and parameter is "s" which represent the socket number
 */
void close(SOCKET s)
{
   13496:	cf 93       	push	r28
   13498:	c8 2f       	mov	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:44
  w5500.execCmdSn(s, Sock_CLOSE);
   1349a:	60 e1       	ldi	r22, 0x10	; 16
   1349c:	70 e0       	ldi	r23, 0x00	; 0
   1349e:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   134a2:	4f ef       	ldi	r20, 0xFF	; 255
   134a4:	62 e0       	ldi	r22, 0x02	; 2
   134a6:	70 e0       	ldi	r23, 0x00	; 0
   134a8:	8c 2f       	mov	r24, r28
_Z5closeh():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:46
  w5500.writeSnIR(s, 0xFF);
}
   134aa:	cf 91       	pop	r28
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   134ac:	0c 94 68 98 	jmp	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>

000134b0 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>:
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:16

/**
 * @brief	This Socket function initialize the channel in perticular mode, and set the port and wait for w5500 done it.
 * @return 	1 for success else 0.
 */
uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
   134b0:	0f 93       	push	r16
   134b2:	1f 93       	push	r17
   134b4:	cf 93       	push	r28
   134b6:	df 93       	push	r29
   134b8:	c8 2f       	mov	r28, r24
   134ba:	d6 2f       	mov	r29, r22
   134bc:	8a 01       	movw	r16, r20
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:20
{
  if ((protocol == SnMR::TCP) || (protocol == SnMR::UDP) || (protocol == SnMR::IPRAW) || (protocol == SnMR::MACRAW) || (protocol == SnMR::PPPOE))
  {
    close(s);
   134be:	0e 94 4b 9a 	call	0x13496	; 0x13496 <close(unsigned char)>
writeSnMR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:305
  static uint16_t read##name(SOCKET _s, uint8_t *_buff) {    \
    return readSn(_s, address, _buff, size);                 \
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
   134c2:	4d 2f       	mov	r20, r29
   134c4:	70 e0       	ldi	r23, 0x00	; 0
   134c6:	60 e0       	ldi	r22, 0x00	; 0
   134c8:	8c 2f       	mov	r24, r28
   134ca:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:22
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
   134ce:	01 15       	cp	r16, r1
   134d0:	11 05       	cpc	r17, r1
   134d2:	b9 f0       	breq	.+46     	; 0x13502 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x52>
writeSnPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:309
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
   134d4:	41 2f       	mov	r20, r17
   134d6:	64 e0       	ldi	r22, 0x04	; 4
   134d8:	70 e0       	ldi	r23, 0x00	; 0
   134da:	8c 2f       	mov	r24, r28
   134dc:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   134e0:	40 2f       	mov	r20, r16
   134e2:	65 e0       	ldi	r22, 0x05	; 5
   134e4:	70 e0       	ldi	r23, 0x00	; 0
   134e6:	8c 2f       	mov	r24, r28
   134e8:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_Z6sockethhjh.part.0.constprop.21():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:30
    else {
      local_port++; // if don't set the source port, set local_port number.
      w5500.writeSnPORT(s, local_port);
    }

    w5500.execCmdSn(s, Sock_OPEN);
   134ec:	61 e0       	ldi	r22, 0x01	; 1
   134ee:	70 e0       	ldi	r23, 0x00	; 0
   134f0:	8c 2f       	mov	r24, r28
   134f2:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:36
    
    return 1;
  }

  return 0;
}
   134f6:	81 e0       	ldi	r24, 0x01	; 1
   134f8:	df 91       	pop	r29
   134fa:	cf 91       	pop	r28
   134fc:	1f 91       	pop	r17
   134fe:	0f 91       	pop	r16
   13500:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:26
    w5500.writeSnMR(s, protocol | flag);
    if (port != 0) {
      w5500.writeSnPORT(s, port);
    } 
    else {
      local_port++; // if don't set the source port, set local_port number.
   13502:	00 91 d8 10 	lds	r16, 0x10D8	; 0x8010d8 <local_port>
   13506:	10 91 d9 10 	lds	r17, 0x10D9	; 0x8010d9 <local_port+0x1>
   1350a:	0f 5f       	subi	r16, 0xFF	; 255
   1350c:	1f 4f       	sbci	r17, 0xFF	; 255
   1350e:	10 93 d9 10 	sts	0x10D9, r17	; 0x8010d9 <local_port+0x1>
   13512:	00 93 d8 10 	sts	0x10D8, r16	; 0x8010d8 <local_port>
   13516:	de cf       	rjmp	.-68     	; 0x134d4 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]+0x24>

00013518 <EthernetUDP::begin(unsigned int)>:
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:43

/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
   13518:	ef 92       	push	r14
   1351a:	ff 92       	push	r15
   1351c:	1f 93       	push	r17
   1351e:	cf 93       	push	r28
   13520:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
  if (_sock != MAX_SOCK_NUM)
   13522:	fc 01       	movw	r30, r24
   13524:	24 85       	ldd	r18, Z+12	; 0x0c
   13526:	28 30       	cpi	r18, 0x08	; 8
   13528:	39 f0       	breq	.+14     	; 0x13538 <EthernetUDP::begin(unsigned int)+0x20>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:45
    return 0;
   1352a:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:63
  _port = port;
  _remaining = 0;
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
}
   1352c:	df 91       	pop	r29
   1352e:	cf 91       	pop	r28
   13530:	1f 91       	pop	r17
   13532:	ff 90       	pop	r15
   13534:	ef 90       	pop	r14
   13536:	08 95       	ret
   13538:	7b 01       	movw	r14, r22
   1353a:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:44
/* Constructor */
EthernetUDP::EthernetUDP() : _sock(MAX_SOCK_NUM) {}

/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
   1353c:	10 e0       	ldi	r17, 0x00	; 0
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   1353e:	63 e0       	ldi	r22, 0x03	; 3
   13540:	70 e0       	ldi	r23, 0x00	; 0
   13542:	81 2f       	mov	r24, r17
   13544:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   13548:	81 11       	cpse	r24, r1
   1354a:	0e c0       	rjmp	.+28     	; 0x13568 <EthernetUDP::begin(unsigned int)+0x50>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:50
      _sock = i;
   1354c:	1c 87       	std	Y+12, r17	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:55
      break;
    }
  }

  if (_sock == MAX_SOCK_NUM)
   1354e:	8c 85       	ldd	r24, Y+12	; 0x0c
   13550:	88 30       	cpi	r24, 0x08	; 8
   13552:	59 f3       	breq	.-42     	; 0x1352a <EthernetUDP::begin(unsigned int)+0x12>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:58
    return 0;

  _port = port;
   13554:	fe 86       	std	Y+14, r15	; 0x0e
   13556:	ed 86       	std	Y+13, r14	; 0x0d
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:59
  _remaining = 0;
   13558:	1a 8e       	std	Y+26, r1	; 0x1a
   1355a:	19 8e       	std	Y+25, r1	; 0x19
socket():
   1355c:	a7 01       	movw	r20, r14
   1355e:	62 e0       	ldi	r22, 0x02	; 2
   13560:	0e 94 58 9a 	call	0x134b0	; 0x134b0 <socket(unsigned char, unsigned char, unsigned int, unsigned char) [clone .part.0] [clone .constprop.21]>
_ZN11EthernetUDP5beginEj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:62
  socket(_sock, SnMR::UDP, _port, 0);

  return 1;
   13564:	81 e0       	ldi	r24, 0x01	; 1
   13566:	e2 cf       	rjmp	.-60     	; 0x1352c <EthernetUDP::begin(unsigned int)+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:49
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
    uint8_t s = w5500.readSnSR(i);
    if (s == SnSR::CLOSED || s == SnSR::FIN_WAIT) {
   13568:	88 31       	cpi	r24, 0x18	; 24
   1356a:	81 f3       	breq	.-32     	; 0x1354c <EthernetUDP::begin(unsigned int)+0x34>
   1356c:	1f 5f       	subi	r17, 0xFF	; 255
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:47
/* Start EthernetUDP socket, listening at local port PORT */
uint8_t EthernetUDP::begin(uint16_t port) {
  if (_sock != MAX_SOCK_NUM)
    return 0;

  for (int i = 0; i < MAX_SOCK_NUM; i++) {
   1356e:	18 30       	cpi	r17, 0x08	; 8
   13570:	31 f7       	brne	.-52     	; 0x1353e <EthernetUDP::begin(unsigned int)+0x26>
   13572:	ed cf       	rjmp	.-38     	; 0x1354e <EthernetUDP::begin(unsigned int)+0x36>

00013574 <EthernetUDP::stop()>:
_ZN11EthernetUDP4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:73
  return _remaining;
}

/* Release any resources being used by this EthernetUDP instance */
void EthernetUDP::stop()
{
   13574:	cf 93       	push	r28
   13576:	df 93       	push	r29
   13578:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:74
  if (_sock == MAX_SOCK_NUM)
   1357a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1357c:	88 30       	cpi	r24, 0x08	; 8
   1357e:	21 f0       	breq	.+8      	; 0x13588 <EthernetUDP::stop()+0x14>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:77
    return;

  close(_sock);
   13580:	0e 94 4b 9a 	call	0x13496	; 0x13496 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:80

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   13584:	88 e0       	ldi	r24, 0x08	; 8
   13586:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:81
}
   13588:	df 91       	pop	r29
   1358a:	cf 91       	pop	r28
   1358c:	08 95       	ret

0001358e <EthernetUDP::endPacket()>:
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:106
  _offset = 0;
  return startUDP(_sock, rawIPAddress(ip), port);
}

int EthernetUDP::endPacket()
{
   1358e:	cf 93       	push	r28
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:107
  return sendUDP(_sock);
   13590:	fc 01       	movw	r30, r24
   13592:	c4 85       	ldd	r28, Z+12	; 0x0c
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:393
  }
}

int sendUDP(SOCKET s)
{
  w5500.execCmdSn(s, Sock_SEND);
   13594:	60 e2       	ldi	r22, 0x20	; 32
   13596:	70 e0       	ldi	r23, 0x00	; 0
   13598:	8c 2f       	mov	r24, r28
   1359a:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
  }
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
   1359e:	62 e0       	ldi	r22, 0x02	; 2
   135a0:	70 e0       	ldi	r23, 0x00	; 0
   135a2:	8c 2f       	mov	r24, r28
   135a4:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:396
		
  /* +2008.01 bj */
  while ( (w5500.readSnIR(s) & SnIR::SEND_OK) != SnIR::SEND_OK ) 
   135a8:	84 fd       	sbrc	r24, 4
   135aa:	11 c0       	rjmp	.+34     	; 0x135ce <EthernetUDP::endPacket()+0x40>
readSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   135ac:	62 e0       	ldi	r22, 0x02	; 2
   135ae:	70 e0       	ldi	r23, 0x00	; 0
   135b0:	8c 2f       	mov	r24, r28
   135b2:	0e 94 53 32 	call	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
sendUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:398
  {
    if (w5500.readSnIR(s) & SnIR::TIMEOUT)
   135b6:	83 ff       	sbrs	r24, 3
   135b8:	f2 cf       	rjmp	.-28     	; 0x1359e <EthernetUDP::endPacket()+0x10>
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   135ba:	48 e1       	ldi	r20, 0x18	; 24
   135bc:	62 e0       	ldi	r22, 0x02	; 2
   135be:	70 e0       	ldi	r23, 0x00	; 0
   135c0:	8c 2f       	mov	r24, r28
   135c2:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:402
    {
      /* +2008.01 [bj]: clear interrupt */
      w5500.writeSnIR(s, (SnIR::SEND_OK|SnIR::TIMEOUT));
      return 0;
   135c6:	90 e0       	ldi	r25, 0x00	; 0
   135c8:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:108
}
   135ca:	cf 91       	pop	r28
   135cc:	08 95       	ret
writeSnIR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:307
   135ce:	40 e1       	ldi	r20, 0x10	; 16
   135d0:	62 e0       	ldi	r22, 0x02	; 2
   135d2:	70 e0       	ldi	r23, 0x00	; 0
   135d4:	8c 2f       	mov	r24, r28
   135d6:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
_ZN11EthernetUDP9endPacketEv():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:410

  /* +2008.01 bj */	
  w5500.writeSnIR(s, SnIR::SEND_OK);

  /* Sent ok */
  return 1;
   135da:	81 e0       	ldi	r24, 0x01	; 1
   135dc:	90 e0       	ldi	r25, 0x00	; 0
   135de:	f5 cf       	rjmp	.-22     	; 0x135ca <EthernetUDP::endPacket()+0x3c>

000135e0 <EthernetUDP::beginPacket(IPAddress, unsigned int)>:
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:100
    return ret;
  }
}

int EthernetUDP::beginPacket(IPAddress ip, uint16_t port)
{
   135e0:	1f 93       	push	r17
   135e2:	cf 93       	push	r28
   135e4:	df 93       	push	r29
   135e6:	fb 01       	movw	r30, r22
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:101
  _offset = 0;
   135e8:	dc 01       	movw	r26, r24
   135ea:	58 96       	adiw	r26, 0x18	; 24
   135ec:	1c 92       	st	X, r1
   135ee:	1e 92       	st	-X, r1
   135f0:	57 97       	sbiw	r26, 0x17	; 23
startUDP():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:375
  return ret;
}

int startUDP(SOCKET s, uint8_t* addr, uint16_t port)
{
  if
   135f2:	22 81       	ldd	r18, Z+2	; 0x02
   135f4:	21 11       	cpse	r18, r1
   135f6:	09 c0       	rjmp	.+18     	; 0x1360a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:377
    (
     ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
   135f8:	23 81       	ldd	r18, Z+3	; 0x03
   135fa:	21 11       	cpse	r18, r1
   135fc:	06 c0       	rjmp	.+12     	; 0x1360a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   135fe:	24 81       	ldd	r18, Z+4	; 0x04
   13600:	21 11       	cpse	r18, r1
   13602:	03 c0       	rjmp	.+6      	; 0x1360a <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x2a>
   13604:	25 81       	ldd	r18, Z+5	; 0x05
   13606:	22 23       	and	r18, r18
   13608:	39 f1       	breq	.+78     	; 0x13658 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   1360a:	41 15       	cp	r20, r1
   1360c:	51 05       	cpc	r21, r1
   1360e:	21 f1       	breq	.+72     	; 0x13658 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x78>
   13610:	ea 01       	movw	r28, r20
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:102
  return startUDP(_sock, rawIPAddress(ip), port);
   13612:	dc 01       	movw	r26, r24
   13614:	1c 96       	adiw	r26, 0x0c	; 12
   13616:	1c 91       	ld	r17, X
_ZN9IPAddress11raw_addressEv():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/IPAddress.h:40

    // Access the raw byte array containing the address.  Because this returns a pointer
    // to the internal structure rather than a copy of the address this function should only
    // be used when you know that the usage of the returned uint8_t* will be transient and not
    // stored.
    uint8_t* raw_address() { return _address.bytes; };
   13618:	af 01       	movw	r20, r30
   1361a:	4e 5f       	subi	r20, 0xFE	; 254
   1361c:	5f 4f       	sbci	r21, 0xFF	; 255
writeSn():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:363
    uint8_t cntl_byte = (_s<<5)+0x08;
    return read(_addr, cntl_byte, _buf, _len );
}

uint16_t W5500Class::writeSn(SOCKET _s, uint16_t _addr, uint8_t *_buf, uint16_t _len) {
    uint8_t cntl_byte = (_s<<5)+0x0C;
   1361e:	61 2f       	mov	r22, r17
   13620:	62 95       	swap	r22
   13622:	66 0f       	add	r22, r22
   13624:	60 7e       	andi	r22, 0xE0	; 224
   13626:	64 5f       	subi	r22, 0xF4	; 244
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:364
    return write(_addr, cntl_byte, _buf, _len);
   13628:	24 e0       	ldi	r18, 0x04	; 4
   1362a:	30 e0       	ldi	r19, 0x00	; 0
   1362c:	8c e0       	ldi	r24, 0x0C	; 12
   1362e:	90 e0       	ldi	r25, 0x00	; 0
   13630:	0e 94 b4 97 	call	0x12f68	; 0x12f68 <W5500Class::write(unsigned int, unsigned char, unsigned char const*, unsigned int)>
writeSnDPORT():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:312
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
  __SOCKET_REGISTER16(SnPORT,     0x0004)        // Source Port
  __SOCKET_REGISTER_N(SnDHAR,     0x0006, 6)     // Destination Hardw Addr
  __SOCKET_REGISTER_N(SnDIPR,     0x000C, 4)     // Destination IP Addr
  __SOCKET_REGISTER16(SnDPORT,    0x0010)        // Destination Port
   13634:	4d 2f       	mov	r20, r29
   13636:	60 e1       	ldi	r22, 0x10	; 16
   13638:	70 e0       	ldi	r23, 0x00	; 0
   1363a:	81 2f       	mov	r24, r17
   1363c:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   13640:	4c 2f       	mov	r20, r28
   13642:	61 e1       	ldi	r22, 0x11	; 17
   13644:	70 e0       	ldi	r23, 0x00	; 0
   13646:	81 2f       	mov	r24, r17
   13648:	0e 94 68 98 	call	0x130d0	; 0x130d0 <W5500Class::writeSn(unsigned char, unsigned int, unsigned char)>
   1364c:	81 e0       	ldi	r24, 0x01	; 1
   1364e:	90 e0       	ldi	r25, 0x00	; 0
_ZN11EthernetUDP11beginPacketE9IPAddressj():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetUdp2.cpp:103
}
   13650:	df 91       	pop	r29
   13652:	cf 91       	pop	r28
   13654:	1f 91       	pop	r17
   13656:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:381
     ((port == 0x00))
    ) 
  {
    return 0;
   13658:	90 e0       	ldi	r25, 0x00	; 0
   1365a:	80 e0       	ldi	r24, 0x00	; 0
   1365c:	f9 cf       	rjmp	.-14     	; 0x13650 <EthernetUDP::beginPacket(IPAddress, unsigned int)+0x70>

0001365e <EthernetClient::status()>:
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:155
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
    (s == SnSR::CLOSE_WAIT && !available()));
}

uint8_t EthernetClient::status() {
  if (_sock == MAX_SOCK_NUM) return SnSR::CLOSED;
   1365e:	fc 01       	movw	r30, r24
   13660:	84 85       	ldd	r24, Z+12	; 0x0c
   13662:	88 30       	cpi	r24, 0x08	; 8
   13664:	21 f0       	breq	.+8      	; 0x1366e <EthernetClient::status()+0x10>
readSnSR():
/home/saric/Arduino/libraries/Ethernet2/src/utility/w5500.h:308
  
public:
  __SOCKET_REGISTER8(SnMR,        0x0000)        // Mode
  __SOCKET_REGISTER8(SnCR,        0x0001)        // Command
  __SOCKET_REGISTER8(SnIR,        0x0002)        // Interrupt
  __SOCKET_REGISTER8(SnSR,        0x0003)        // Status
   13666:	63 e0       	ldi	r22, 0x03	; 3
   13668:	70 e0       	ldi	r23, 0x00	; 0
   1366a:	0c 94 53 32 	jmp	0x64a6	; 0x64a6 <W5500Class::readSn(unsigned char, unsigned int)>
_ZN14EthernetClient6statusEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:157
  return w5500.readSnSR(_sock);
}
   1366e:	80 e0       	ldi	r24, 0x00	; 0
   13670:	08 95       	ret

00013672 <EthernetClient::connected()>:
_ZN14EthernetClient9connectedEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:146

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
   13672:	cf 93       	push	r28
   13674:	df 93       	push	r29
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  if (_sock == MAX_SOCK_NUM) return 0;
   13676:	fc 01       	movw	r30, r24
   13678:	24 85       	ldd	r18, Z+12	; 0x0c
   1367a:	28 30       	cpi	r18, 0x08	; 8
   1367c:	d9 f0       	breq	.+54     	; 0x136b4 <EthernetClient::connected()+0x42>
   1367e:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:149
  
  uint8_t s = status();
   13680:	0e 94 2f 9b 	call	0x1365e	; 0x1365e <EthernetClient::status()>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   13684:	84 31       	cpi	r24, 0x14	; 20
   13686:	89 f0       	breq	.+34     	; 0x136aa <EthernetClient::connected()+0x38>
   13688:	88 23       	and	r24, r24
   1368a:	79 f0       	breq	.+30     	; 0x136aa <EthernetClient::connected()+0x38>
   1368c:	88 31       	cpi	r24, 0x18	; 24
   1368e:	69 f0       	breq	.+26     	; 0x136aa <EthernetClient::connected()+0x38>
   13690:	21 e0       	ldi	r18, 0x01	; 1
   13692:	8c 31       	cpi	r24, 0x1C	; 28
   13694:	59 f4       	brne	.+22     	; 0x136ac <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   13696:	e8 81       	ld	r30, Y
   13698:	f9 81       	ldd	r31, Y+1	; 0x01
   1369a:	00 84       	ldd	r0, Z+8	; 0x08
   1369c:	f1 85       	ldd	r31, Z+9	; 0x09
   1369e:	e0 2d       	mov	r30, r0
   136a0:	ce 01       	movw	r24, r28
   136a2:	19 95       	eicall
   136a4:	21 e0       	ldi	r18, 0x01	; 1
   136a6:	89 2b       	or	r24, r25
   136a8:	09 f4       	brne	.+2      	; 0x136ac <EthernetClient::connected()+0x3a>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:150

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
  
  uint8_t s = status();
  return !(s == SnSR::LISTEN || s == SnSR::CLOSED || s == SnSR::FIN_WAIT ||
   136aa:	20 e0       	ldi	r18, 0x00	; 0
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:151
    (s == SnSR::CLOSE_WAIT && !available()));
   136ac:	82 2f       	mov	r24, r18
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:152
}
   136ae:	df 91       	pop	r29
   136b0:	cf 91       	pop	r28
   136b2:	08 95       	ret
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:147
  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
}

uint8_t EthernetClient::connected() {
  if (_sock == MAX_SOCK_NUM) return 0;
   136b4:	80 e0       	ldi	r24, 0x00	; 0
   136b6:	fb cf       	rjmp	.-10     	; 0x136ae <EthernetClient::connected()+0x3c>

000136b8 <EthernetClient::stop()>:
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:126

void EthernetClient::flush() {
  ::flush(_sock);
}

void EthernetClient::stop() {
   136b8:	cf 92       	push	r12
   136ba:	df 92       	push	r13
   136bc:	ef 92       	push	r14
   136be:	ff 92       	push	r15
   136c0:	cf 93       	push	r28
   136c2:	df 93       	push	r29
   136c4:	ec 01       	movw	r28, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:127
  if (_sock == MAX_SOCK_NUM)
   136c6:	8c 85       	ldd	r24, Y+12	; 0x0c
   136c8:	88 30       	cpi	r24, 0x08	; 8
   136ca:	49 f1       	breq	.+82     	; 0x1371e <EthernetClient::stop()+0x66>
disconnect():
/home/saric/Arduino/libraries/Ethernet2/src/utility/socket.cpp:94
 * @brief	This function used for disconnect the socket and parameter is "s" which represent the socket number
 * @return	1 for success else 0.
 */
void disconnect(SOCKET s)
{
  w5500.execCmdSn(s, Sock_DISCON);
   136cc:	68 e0       	ldi	r22, 0x08	; 8
   136ce:	70 e0       	ldi	r23, 0x00	; 0
   136d0:	0e 94 e3 98 	call	0x131c6	; 0x131c6 <W5500Class::execCmdSn(unsigned char, SockCMD) [clone .constprop.26]>
_ZN14EthernetClient4stopEv():
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:132
    return;

  // attempt to close the connection gracefully (send a FIN to other side)
  disconnect(_sock);
  unsigned long start = millis();
   136d4:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   136d8:	6b 01       	movw	r12, r22
   136da:	7c 01       	movw	r14, r24
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:135

  // wait a second for the connection to close
  while (status() != SnSR::CLOSED && millis() - start < 1000)
   136dc:	ce 01       	movw	r24, r28
   136de:	0e 94 2f 9b 	call	0x1365e	; 0x1365e <EthernetClient::status()>
   136e2:	88 23       	and	r24, r24
   136e4:	91 f0       	breq	.+36     	; 0x1370a <EthernetClient::stop()+0x52>
   136e6:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   136ea:	6c 19       	sub	r22, r12
   136ec:	7d 09       	sbc	r23, r13
   136ee:	8e 09       	sbc	r24, r14
   136f0:	9f 09       	sbc	r25, r15
   136f2:	68 3e       	cpi	r22, 0xE8	; 232
   136f4:	73 40       	sbci	r23, 0x03	; 3
   136f6:	81 05       	cpc	r24, r1
   136f8:	91 05       	cpc	r25, r1
   136fa:	38 f4       	brcc	.+14     	; 0x1370a <EthernetClient::stop()+0x52>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:136
    delay(1);
   136fc:	61 e0       	ldi	r22, 0x01	; 1
   136fe:	70 e0       	ldi	r23, 0x00	; 0
   13700:	80 e0       	ldi	r24, 0x00	; 0
   13702:	90 e0       	ldi	r25, 0x00	; 0
   13704:	0e 94 5e 8b 	call	0x116bc	; 0x116bc <delay>
   13708:	e9 cf       	rjmp	.-46     	; 0x136dc <EthernetClient::stop()+0x24>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:139

  // if it hasn't closed, close it forcefully
  if (status() != SnSR::CLOSED)
   1370a:	ce 01       	movw	r24, r28
   1370c:	0e 94 2f 9b 	call	0x1365e	; 0x1365e <EthernetClient::status()>
   13710:	88 23       	and	r24, r24
   13712:	19 f0       	breq	.+6      	; 0x1371a <EthernetClient::stop()+0x62>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:140
    close(_sock);
   13714:	8c 85       	ldd	r24, Y+12	; 0x0c
   13716:	0e 94 4b 9a 	call	0x13496	; 0x13496 <close(unsigned char)>
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:143

  EthernetClass::_server_port[_sock] = 0;
  _sock = MAX_SOCK_NUM;
   1371a:	88 e0       	ldi	r24, 0x08	; 8
   1371c:	8c 87       	std	Y+12, r24	; 0x0c
/home/saric/Arduino/libraries/Ethernet2/src/EthernetClient.cpp:144
}
   1371e:	df 91       	pop	r29
   13720:	cf 91       	pop	r28
   13722:	ff 90       	pop	r15
   13724:	ef 90       	pop	r14
   13726:	df 90       	pop	r13
   13728:	cf 90       	pop	r12
   1372a:	08 95       	ret

0001372c <localtime>:
localtime():
   1372c:	67 e2       	ldi	r22, 0x27	; 39
   1372e:	73 e1       	ldi	r23, 0x13	; 19
   13730:	0e 94 9d 9b 	call	0x1373a	; 0x1373a <localtime_r>
   13734:	87 e2       	ldi	r24, 0x27	; 39
   13736:	93 e1       	ldi	r25, 0x13	; 19
   13738:	08 95       	ret

0001373a <localtime_r>:
localtime_r():
   1373a:	cf 92       	push	r12
   1373c:	df 92       	push	r13
   1373e:	ef 92       	push	r14
   13740:	ff 92       	push	r15
   13742:	0f 93       	push	r16
   13744:	1f 93       	push	r17
   13746:	cf 93       	push	r28
   13748:	df 93       	push	r29
   1374a:	00 d0       	rcall	.+0      	; 0x1374c <localtime_r+0x12>
   1374c:	1f 92       	push	r1
   1374e:	cd b7       	in	r28, 0x3d	; 61
   13750:	de b7       	in	r29, 0x3e	; 62
   13752:	6c 01       	movw	r12, r24
   13754:	7b 01       	movw	r14, r22
   13756:	e0 91 3d 13 	lds	r30, 0x133D	; 0x80133d <__dst_ptr>
   1375a:	f0 91 3e 13 	lds	r31, 0x133E	; 0x80133e <__dst_ptr+0x1>
   1375e:	0f ef       	ldi	r16, 0xFF	; 255
   13760:	1f ef       	ldi	r17, 0xFF	; 255
   13762:	30 97       	sbiw	r30, 0x00	; 0
   13764:	21 f0       	breq	.+8      	; 0x1376e <localtime_r+0x34>
   13766:	63 e3       	ldi	r22, 0x33	; 51
   13768:	73 e1       	ldi	r23, 0x13	; 19
   1376a:	19 95       	eicall
   1376c:	8c 01       	movw	r16, r24
   1376e:	f6 01       	movw	r30, r12
   13770:	80 81       	ld	r24, Z
   13772:	91 81       	ldd	r25, Z+1	; 0x01
   13774:	a2 81       	ldd	r26, Z+2	; 0x02
   13776:	b3 81       	ldd	r27, Z+3	; 0x03
   13778:	40 91 33 13 	lds	r20, 0x1333	; 0x801333 <__utc_offset>
   1377c:	50 91 34 13 	lds	r21, 0x1334	; 0x801334 <__utc_offset+0x1>
   13780:	60 91 35 13 	lds	r22, 0x1335	; 0x801335 <__utc_offset+0x2>
   13784:	70 91 36 13 	lds	r23, 0x1336	; 0x801336 <__utc_offset+0x3>
   13788:	84 0f       	add	r24, r20
   1378a:	95 1f       	adc	r25, r21
   1378c:	a6 1f       	adc	r26, r22
   1378e:	b7 1f       	adc	r27, r23
   13790:	10 16       	cp	r1, r16
   13792:	11 06       	cpc	r1, r17
   13794:	cc f0       	brlt	.+50     	; 0x137c8 <localtime_r+0x8e>
   13796:	89 83       	std	Y+1, r24	; 0x01
   13798:	9a 83       	std	Y+2, r25	; 0x02
   1379a:	ab 83       	std	Y+3, r26	; 0x03
   1379c:	bc 83       	std	Y+4, r27	; 0x04
   1379e:	b7 01       	movw	r22, r14
   137a0:	ce 01       	movw	r24, r28
   137a2:	01 96       	adiw	r24, 0x01	; 1
   137a4:	0e 94 ee 9b 	call	0x137dc	; 0x137dc <gmtime_r>
   137a8:	f7 01       	movw	r30, r14
   137aa:	13 87       	std	Z+11, r17	; 0x0b
   137ac:	02 87       	std	Z+10, r16	; 0x0a
   137ae:	0f 90       	pop	r0
   137b0:	0f 90       	pop	r0
   137b2:	0f 90       	pop	r0
   137b4:	0f 90       	pop	r0
   137b6:	df 91       	pop	r29
   137b8:	cf 91       	pop	r28
   137ba:	1f 91       	pop	r17
   137bc:	0f 91       	pop	r16
   137be:	ff 90       	pop	r15
   137c0:	ef 90       	pop	r14
   137c2:	df 90       	pop	r13
   137c4:	cf 90       	pop	r12
   137c6:	08 95       	ret
   137c8:	a8 01       	movw	r20, r16
   137ca:	01 2e       	mov	r0, r17
   137cc:	00 0c       	add	r0, r0
   137ce:	66 0b       	sbc	r22, r22
   137d0:	77 0b       	sbc	r23, r23
   137d2:	84 0f       	add	r24, r20
   137d4:	95 1f       	adc	r25, r21
   137d6:	a6 1f       	adc	r26, r22
   137d8:	b7 1f       	adc	r27, r23
   137da:	dd cf       	rjmp	.-70     	; 0x13796 <localtime_r+0x5c>

000137dc <gmtime_r>:
gmtime_r():
   137dc:	cf 92       	push	r12
   137de:	df 92       	push	r13
   137e0:	ef 92       	push	r14
   137e2:	ff 92       	push	r15
   137e4:	0f 93       	push	r16
   137e6:	1f 93       	push	r17
   137e8:	cf 93       	push	r28
   137ea:	df 93       	push	r29
   137ec:	00 d0       	rcall	.+0      	; 0x137ee <gmtime_r+0x12>
   137ee:	00 d0       	rcall	.+0      	; 0x137f0 <gmtime_r+0x14>
   137f0:	1f 92       	push	r1
   137f2:	1f 92       	push	r1
   137f4:	cd b7       	in	r28, 0x3d	; 61
   137f6:	de b7       	in	r29, 0x3e	; 62
   137f8:	8b 01       	movw	r16, r22
   137fa:	fc 01       	movw	r30, r24
   137fc:	60 81       	ld	r22, Z
   137fe:	71 81       	ldd	r23, Z+1	; 0x01
   13800:	82 81       	ldd	r24, Z+2	; 0x02
   13802:	93 81       	ldd	r25, Z+3	; 0x03
   13804:	20 e8       	ldi	r18, 0x80	; 128
   13806:	31 e5       	ldi	r19, 0x51	; 81
   13808:	41 e0       	ldi	r20, 0x01	; 1
   1380a:	50 e0       	ldi	r21, 0x00	; 0
   1380c:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
   13810:	69 01       	movw	r12, r18
   13812:	7a 01       	movw	r14, r20
   13814:	2c e3       	ldi	r18, 0x3C	; 60
   13816:	30 e0       	ldi	r19, 0x00	; 0
   13818:	40 e0       	ldi	r20, 0x00	; 0
   1381a:	50 e0       	ldi	r21, 0x00	; 0
   1381c:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
   13820:	29 83       	std	Y+1, r18	; 0x01
   13822:	3a 83       	std	Y+2, r19	; 0x02
   13824:	4b 83       	std	Y+3, r20	; 0x03
   13826:	5c 83       	std	Y+4, r21	; 0x04
   13828:	89 81       	ldd	r24, Y+1	; 0x01
   1382a:	9a 81       	ldd	r25, Y+2	; 0x02
   1382c:	ab 81       	ldd	r26, Y+3	; 0x03
   1382e:	bc 81       	ldd	r27, Y+4	; 0x04
   13830:	f8 01       	movw	r30, r16
   13832:	60 83       	st	Z, r22
   13834:	6c e3       	ldi	r22, 0x3C	; 60
   13836:	70 e0       	ldi	r23, 0x00	; 0
   13838:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   1383c:	dc 01       	movw	r26, r24
   1383e:	f8 01       	movw	r30, r16
   13840:	a1 83       	std	Z+1, r26	; 0x01
   13842:	62 83       	std	Z+2, r22	; 0x02
   13844:	c6 01       	movw	r24, r12
   13846:	06 96       	adiw	r24, 0x06	; 6
   13848:	67 e0       	ldi	r22, 0x07	; 7
   1384a:	70 e0       	ldi	r23, 0x00	; 0
   1384c:	0e 94 57 b4 	call	0x168ae	; 0x168ae <__udivmodhi4>
   13850:	84 83       	std	Z+4, r24	; 0x04
   13852:	2d ea       	ldi	r18, 0xAD	; 173
   13854:	3e e8       	ldi	r19, 0x8E	; 142
   13856:	40 e0       	ldi	r20, 0x00	; 0
   13858:	50 e0       	ldi	r21, 0x00	; 0
   1385a:	c7 01       	movw	r24, r14
   1385c:	b6 01       	movw	r22, r12
   1385e:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
   13862:	29 83       	std	Y+1, r18	; 0x01
   13864:	3a 83       	std	Y+2, r19	; 0x02
   13866:	6d 83       	std	Y+5, r22	; 0x05
   13868:	7e 83       	std	Y+6, r23	; 0x06
   1386a:	8f 83       	std	Y+7, r24	; 0x07
   1386c:	98 87       	std	Y+8, r25	; 0x08
   1386e:	89 81       	ldd	r24, Y+1	; 0x01
   13870:	9a 81       	ldd	r25, Y+2	; 0x02
   13872:	24 e6       	ldi	r18, 0x64	; 100
   13874:	28 9f       	mul	r18, r24
   13876:	60 01       	movw	r12, r0
   13878:	29 9f       	mul	r18, r25
   1387a:	d0 0c       	add	r13, r0
   1387c:	11 24       	eor	r1, r1
   1387e:	6d 81       	ldd	r22, Y+5	; 0x05
   13880:	7e 81       	ldd	r23, Y+6	; 0x06
   13882:	8f 81       	ldd	r24, Y+7	; 0x07
   13884:	98 85       	ldd	r25, Y+8	; 0x08
   13886:	25 eb       	ldi	r18, 0xB5	; 181
   13888:	35 e0       	ldi	r19, 0x05	; 5
   1388a:	40 e0       	ldi	r20, 0x00	; 0
   1388c:	50 e0       	ldi	r21, 0x00	; 0
   1388e:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
   13892:	29 83       	std	Y+1, r18	; 0x01
   13894:	3a 83       	std	Y+2, r19	; 0x02
   13896:	6d 83       	std	Y+5, r22	; 0x05
   13898:	7e 83       	std	Y+6, r23	; 0x06
   1389a:	e9 80       	ldd	r14, Y+1	; 0x01
   1389c:	fa 80       	ldd	r15, Y+2	; 0x02
   1389e:	ee 0c       	add	r14, r14
   138a0:	ff 1c       	adc	r15, r15
   138a2:	ee 0c       	add	r14, r14
   138a4:	ff 1c       	adc	r15, r15
   138a6:	ec 0c       	add	r14, r12
   138a8:	fd 1c       	adc	r15, r13
   138aa:	8d 81       	ldd	r24, Y+5	; 0x05
   138ac:	9e 81       	ldd	r25, Y+6	; 0x06
   138ae:	f5 e6       	ldi	r31, 0x65	; 101
   138b0:	ef 16       	cp	r14, r31
   138b2:	f1 04       	cpc	r15, r1
   138b4:	08 f4       	brcc	.+2      	; 0x138b8 <gmtime_r+0xdc>
   138b6:	3f c0       	rjmp	.+126    	; 0x13936 <gmtime_r+0x15a>
   138b8:	01 96       	adiw	r24, 0x01	; 1
   138ba:	21 e0       	ldi	r18, 0x01	; 1
   138bc:	30 e0       	ldi	r19, 0x00	; 0
   138be:	a9 01       	movw	r20, r18
   138c0:	44 59       	subi	r20, 0x94	; 148
   138c2:	5e 4f       	sbci	r21, 0xFE	; 254
   138c4:	48 17       	cp	r20, r24
   138c6:	59 07       	cpc	r21, r25
   138c8:	60 f4       	brcc	.+24     	; 0x138e2 <gmtime_r+0x106>
   138ca:	6d e6       	ldi	r22, 0x6D	; 109
   138cc:	71 e0       	ldi	r23, 0x01	; 1
   138ce:	82 1b       	sub	r24, r18
   138d0:	93 0b       	sbc	r25, r19
   138d2:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   138d6:	dc 01       	movw	r26, r24
   138d8:	e6 0e       	add	r14, r22
   138da:	f7 1e       	adc	r15, r23
   138dc:	cd 01       	movw	r24, r26
   138de:	30 e0       	ldi	r19, 0x00	; 0
   138e0:	20 e0       	ldi	r18, 0x00	; 0
   138e2:	44 e6       	ldi	r20, 0x64	; 100
   138e4:	e4 0e       	add	r14, r20
   138e6:	f1 1c       	adc	r15, r1
   138e8:	f8 01       	movw	r30, r16
   138ea:	f7 82       	std	Z+7, r15	; 0x07
   138ec:	e6 82       	std	Z+6, r14	; 0x06
   138ee:	91 87       	std	Z+9, r25	; 0x09
   138f0:	80 87       	std	Z+8, r24	; 0x08
   138f2:	25 5c       	subi	r18, 0xC5	; 197
   138f4:	3f 4f       	sbci	r19, 0xFF	; 255
   138f6:	82 17       	cp	r24, r18
   138f8:	93 07       	cpc	r25, r19
   138fa:	38 f5       	brcc	.+78     	; 0x1394a <gmtime_r+0x16e>
   138fc:	6f e1       	ldi	r22, 0x1F	; 31
   138fe:	70 e0       	ldi	r23, 0x00	; 0
   13900:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   13904:	dc 01       	movw	r26, r24
   13906:	f8 01       	movw	r30, r16
   13908:	65 83       	std	Z+5, r22	; 0x05
   1390a:	a3 83       	std	Z+3, r26	; 0x03
   1390c:	f8 01       	movw	r30, r16
   1390e:	13 86       	std	Z+11, r1	; 0x0b
   13910:	12 86       	std	Z+10, r1	; 0x0a
   13912:	83 81       	ldd	r24, Z+3	; 0x03
   13914:	8f 5f       	subi	r24, 0xFF	; 255
   13916:	83 83       	std	Z+3, r24	; 0x03
   13918:	28 96       	adiw	r28, 0x08	; 8
   1391a:	0f b6       	in	r0, 0x3f	; 63
   1391c:	f8 94       	cli
   1391e:	de bf       	out	0x3e, r29	; 62
   13920:	0f be       	out	0x3f, r0	; 63
   13922:	cd bf       	out	0x3d, r28	; 61
   13924:	df 91       	pop	r29
   13926:	cf 91       	pop	r28
   13928:	1f 91       	pop	r17
   1392a:	0f 91       	pop	r16
   1392c:	ff 90       	pop	r15
   1392e:	ef 90       	pop	r14
   13930:	df 90       	pop	r13
   13932:	cf 90       	pop	r12
   13934:	08 95       	ret
   13936:	51 e0       	ldi	r21, 0x01	; 1
   13938:	40 e0       	ldi	r20, 0x00	; 0
   1393a:	24 e6       	ldi	r18, 0x64	; 100
   1393c:	e2 16       	cp	r14, r18
   1393e:	f1 04       	cpc	r15, r1
   13940:	09 f4       	brne	.+2      	; 0x13944 <gmtime_r+0x168>
   13942:	50 e0       	ldi	r21, 0x00	; 0
   13944:	25 2f       	mov	r18, r21
   13946:	34 2f       	mov	r19, r20
   13948:	ba cf       	rjmp	.-140    	; 0x138be <gmtime_r+0xe2>
   1394a:	69 e9       	ldi	r22, 0x99	; 153
   1394c:	70 e0       	ldi	r23, 0x00	; 0
   1394e:	82 1b       	sub	r24, r18
   13950:	93 0b       	sbc	r25, r19
   13952:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   13956:	dc 01       	movw	r26, r24
   13958:	26 2f       	mov	r18, r22
   1395a:	22 0f       	add	r18, r18
   1395c:	22 0f       	add	r18, r18
   1395e:	f2 2e       	mov	r15, r18
   13960:	f6 0e       	add	r15, r22
   13962:	6d e3       	ldi	r22, 0x3D	; 61
   13964:	70 e0       	ldi	r23, 0x00	; 0
   13966:	cd 01       	movw	r24, r26
   13968:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   1396c:	dc 01       	movw	r26, r24
   1396e:	e6 2e       	mov	r14, r22
   13970:	ee 0c       	add	r14, r14
   13972:	6f e1       	ldi	r22, 0x1F	; 31
   13974:	70 e0       	ldi	r23, 0x00	; 0
   13976:	cd 01       	movw	r24, r26
   13978:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   1397c:	dc 01       	movw	r26, r24
   1397e:	22 e0       	ldi	r18, 0x02	; 2
   13980:	26 0f       	add	r18, r22
   13982:	2f 0d       	add	r18, r15
   13984:	2e 0d       	add	r18, r14
   13986:	f8 01       	movw	r30, r16
   13988:	25 83       	std	Z+5, r18	; 0x05
   1398a:	bf cf       	rjmp	.-130    	; 0x1390a <gmtime_r+0x12e>

0001398c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const>:
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:92
  JsonObjectData *asObject() {
    return type == JSON_OBJECT ? &content.asObject : 0;
  }

  template <typename T>
  T asInteger() const {
   1398c:	fc 01       	movw	r30, r24
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
    switch (type) {
   1398e:	80 81       	ld	r24, Z
   13990:	91 81       	ldd	r25, Z+1	; 0x01
   13992:	87 30       	cpi	r24, 0x07	; 7
   13994:	91 05       	cpc	r25, r1
   13996:	38 f4       	brcc	.+14     	; 0x139a6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x1a>
   13998:	85 30       	cpi	r24, 0x05	; 5
   1399a:	91 05       	cpc	r25, r1
   1399c:	88 f4       	brcc	.+34     	; 0x139c0 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x34>
   1399e:	03 97       	sbiw	r24, 0x03	; 3
   139a0:	a0 f4       	brcc	.+40     	; 0x139ca <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   139a2:	80 e0       	ldi	r24, 0x00	; 0
   139a4:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:93
   139a6:	87 30       	cpi	r24, 0x07	; 7
   139a8:	91 05       	cpc	r25, r1
   139aa:	61 f0       	breq	.+24     	; 0x139c4 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x38>
   139ac:	0a 97       	sbiw	r24, 0x0a	; 10
   139ae:	c9 f7       	brne	.-14     	; 0x139a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:103
        return T(~content.asInteger + 1);
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
      case JSON_FLOAT:
        return T(content.asFloat);
   139b0:	62 81       	ldd	r22, Z+2	; 0x02
   139b2:	73 81       	ldd	r23, Z+3	; 0x03
   139b4:	84 81       	ldd	r24, Z+4	; 0x04
   139b6:	95 81       	ldd	r25, Z+5	; 0x05
   139b8:	0e 94 c0 b5 	call	0x16b80	; 0x16b80 <__fixunssfsi>
   139bc:	86 2f       	mov	r24, r22
   139be:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:96
  template <typename T>
  T asInteger() const {
    switch (type) {
      case JSON_POSITIVE_INTEGER:
      case JSON_BOOLEAN:
        return T(content.asInteger);
   139c0:	82 81       	ldd	r24, Z+2	; 0x02
   139c2:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:98
      case JSON_NEGATIVE_INTEGER:
        return T(~content.asInteger + 1);
   139c4:	82 81       	ldd	r24, Z+2	; 0x02
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   139c6:	81 95       	neg	r24
   139c8:	08 95       	ret
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:101
      case JSON_LINKED_STRING:
      case JSON_OWNED_STRING:
        return parseInteger<T>(content.asString);
   139ca:	02 80       	ldd	r0, Z+2	; 0x02
   139cc:	f3 81       	ldd	r31, Z+3	; 0x03
   139ce:	e0 2d       	mov	r30, r0
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:16

namespace ArduinoJson {
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL
   139d0:	30 97       	sbiw	r30, 0x00	; 0
   139d2:	39 f3       	breq	.-50     	; 0x139a2 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x16>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18

  if (*s == 't') return 1;  // "true"
   139d4:	80 81       	ld	r24, Z
   139d6:	84 37       	cpi	r24, 0x74	; 116
   139d8:	c9 f0       	breq	.+50     	; 0x13a0c <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x80>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:23

  T result = 0;
  bool negative_result = false;

  switch (*s) {
   139da:	8b 32       	cpi	r24, 0x2B	; 43
   139dc:	89 f0       	breq	.+34     	; 0x13a00 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x74>
   139de:	8d 32       	cpi	r24, 0x2D	; 45
   139e0:	81 f4       	brne	.+32     	; 0x13a02 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x76>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:26
    case '-':
      negative_result = true;
      s++;
   139e2:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:25
  T result = 0;
  bool negative_result = false;

  switch (*s) {
    case '-':
      negative_result = true;
   139e4:	91 e0       	ldi	r25, 0x01	; 1
parseInteger():
   139e6:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
      s++;
      break;
  }

  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
   139e8:	2a e0       	ldi	r18, 0x0A	; 10
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
    case '+':
      s++;
      break;
  }

  while (isdigit(*s)) {
   139ea:	61 91       	ld	r22, Z+
_ZN11ArduinoJson9Internals7isdigitEc():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/../Polyfills/ctype.hpp:11
   139ec:	30 ed       	ldi	r19, 0xD0	; 208
   139ee:	36 0f       	add	r19, r22
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:33
   139f0:	3a 30       	cpi	r19, 0x0A	; 10
   139f2:	48 f4       	brcc	.+18     	; 0x13a06 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7a>
   139f4:	82 9f       	mul	r24, r18
   139f6:	60 0d       	add	r22, r0
   139f8:	11 24       	eor	r1, r1
   139fa:	86 2f       	mov	r24, r22
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:34
    result = T(result * 10 + T(*s - '0'));
   139fc:	80 53       	subi	r24, 0x30	; 48
   139fe:	f5 cf       	rjmp	.-22     	; 0x139ea <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5e>
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:29
    case '-':
      negative_result = true;
      s++;
      break;
    case '+':
      s++;
   13a00:	31 96       	adiw	r30, 0x01	; 1
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:21
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"

  T result = 0;
  bool negative_result = false;
   13a02:	90 e0       	ldi	r25, 0x00	; 0
   13a04:	f0 cf       	rjmp	.-32     	; 0x139e6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x5a>
parseInteger():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:38
  while (isdigit(*s)) {
    result = T(result * 10 + T(*s - '0'));
    s++;
  }

  return negative_result ? T(~result + 1) : result;
   13a06:	91 11       	cpse	r25, r1
   13a08:	de cf       	rjmp	.-68     	; 0x139c6 <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x3a>
_ZNK11ArduinoJson9Internals15JsonVariantData9asIntegerIhEET_v():
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/JsonVariantData.hpp:107
      case JSON_FLOAT:
        return T(content.asFloat);
      default:
        return 0;
    }
  }
   13a0a:	08 95       	ret
/home/saric/Arduino/libraries/ArduinoJson/src/ArduinoJson/Data/../Numbers/parseInteger.hpp:18
namespace Internals {
template <typename T>
T parseInteger(const char *s) {
  if (!s) return 0;  // NULL

  if (*s == 't') return 1;  // "true"
   13a0c:	81 e0       	ldi	r24, 0x01	; 1
   13a0e:	fd cf       	rjmp	.-6      	; 0x13a0a <unsigned char ArduinoJson::Internals::JsonVariantData::asInteger<unsigned char>() const+0x7e>

00013a10 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064>:
_GLOBAL__I_65535_0_room_control_v3.ino.cpp.o.7064():
   13a10:	0f 93       	push	r16
   13a12:	1f 93       	push	r17
   13a14:	cf 93       	push	r28
   13a16:	df 93       	push	r29
   13a18:	10 92 6c 0b 	sts	0x0B6C, r1	; 0x800b6c <Serial+0x3>
   13a1c:	10 92 6b 0b 	sts	0x0B6B, r1	; 0x800b6b <Serial+0x2>
   13a20:	88 ee       	ldi	r24, 0xE8	; 232
   13a22:	93 e0       	ldi	r25, 0x03	; 3
   13a24:	a0 e0       	ldi	r26, 0x00	; 0
   13a26:	b0 e0       	ldi	r27, 0x00	; 0
   13a28:	80 93 6d 0b 	sts	0x0B6D, r24	; 0x800b6d <Serial+0x4>
   13a2c:	90 93 6e 0b 	sts	0x0B6E, r25	; 0x800b6e <Serial+0x5>
   13a30:	a0 93 6f 0b 	sts	0x0B6F, r26	; 0x800b6f <Serial+0x6>
   13a34:	b0 93 70 0b 	sts	0x0B70, r27	; 0x800b70 <Serial+0x7>
   13a38:	2a e5       	ldi	r18, 0x5A	; 90
   13a3a:	32 e0       	ldi	r19, 0x02	; 2
   13a3c:	30 93 6a 0b 	sts	0x0B6A, r19	; 0x800b6a <Serial+0x1>
   13a40:	20 93 69 0b 	sts	0x0B69, r18	; 0x800b69 <Serial>
   13a44:	25 ec       	ldi	r18, 0xC5	; 197
   13a46:	30 e0       	ldi	r19, 0x00	; 0
   13a48:	30 93 76 0b 	sts	0x0B76, r19	; 0x800b76 <Serial+0xd>
   13a4c:	20 93 75 0b 	sts	0x0B75, r18	; 0x800b75 <Serial+0xc>
   13a50:	24 ec       	ldi	r18, 0xC4	; 196
   13a52:	30 e0       	ldi	r19, 0x00	; 0
   13a54:	30 93 78 0b 	sts	0x0B78, r19	; 0x800b78 <Serial+0xf>
   13a58:	20 93 77 0b 	sts	0x0B77, r18	; 0x800b77 <Serial+0xe>
   13a5c:	20 ec       	ldi	r18, 0xC0	; 192
   13a5e:	30 e0       	ldi	r19, 0x00	; 0
   13a60:	30 93 7a 0b 	sts	0x0B7A, r19	; 0x800b7a <Serial+0x11>
   13a64:	20 93 79 0b 	sts	0x0B79, r18	; 0x800b79 <Serial+0x10>
   13a68:	21 ec       	ldi	r18, 0xC1	; 193
   13a6a:	30 e0       	ldi	r19, 0x00	; 0
   13a6c:	30 93 7c 0b 	sts	0x0B7C, r19	; 0x800b7c <Serial+0x13>
   13a70:	20 93 7b 0b 	sts	0x0B7B, r18	; 0x800b7b <Serial+0x12>
   13a74:	22 ec       	ldi	r18, 0xC2	; 194
   13a76:	30 e0       	ldi	r19, 0x00	; 0
   13a78:	30 93 7e 0b 	sts	0x0B7E, r19	; 0x800b7e <Serial+0x15>
   13a7c:	20 93 7d 0b 	sts	0x0B7D, r18	; 0x800b7d <Serial+0x14>
   13a80:	26 ec       	ldi	r18, 0xC6	; 198
   13a82:	30 e0       	ldi	r19, 0x00	; 0
   13a84:	30 93 80 0b 	sts	0x0B80, r19	; 0x800b80 <Serial+0x17>
   13a88:	20 93 7f 0b 	sts	0x0B7F, r18	; 0x800b7f <Serial+0x16>
   13a8c:	10 92 82 0b 	sts	0x0B82, r1	; 0x800b82 <Serial+0x19>
   13a90:	10 92 83 0b 	sts	0x0B83, r1	; 0x800b83 <Serial+0x1a>
   13a94:	10 92 84 0b 	sts	0x0B84, r1	; 0x800b84 <Serial+0x1b>
   13a98:	10 92 85 0b 	sts	0x0B85, r1	; 0x800b85 <Serial+0x1c>
   13a9c:	c2 ee       	ldi	r28, 0xE2	; 226
   13a9e:	d2 e0       	ldi	r29, 0x02	; 2
   13aa0:	d0 93 2d 11 	sts	0x112D, r29	; 0x80112d <_ZL11INADDR_NONE.lto_priv.203+0x1>
   13aa4:	c0 93 2c 11 	sts	0x112C, r28	; 0x80112c <_ZL11INADDR_NONE.lto_priv.203>
   13aa8:	10 92 2e 11 	sts	0x112E, r1	; 0x80112e <_ZL11INADDR_NONE.lto_priv.203+0x2>
   13aac:	10 92 2f 11 	sts	0x112F, r1	; 0x80112f <_ZL11INADDR_NONE.lto_priv.203+0x3>
   13ab0:	10 92 30 11 	sts	0x1130, r1	; 0x801130 <_ZL11INADDR_NONE.lto_priv.203+0x4>
   13ab4:	10 92 31 11 	sts	0x1131, r1	; 0x801131 <_ZL11INADDR_NONE.lto_priv.203+0x5>
   13ab8:	10 92 f8 0d 	sts	0x0DF8, r1	; 0x800df8 <Wire+0x3>
   13abc:	10 92 f7 0d 	sts	0x0DF7, r1	; 0x800df7 <Wire+0x2>
   13ac0:	80 93 f9 0d 	sts	0x0DF9, r24	; 0x800df9 <Wire+0x4>
   13ac4:	90 93 fa 0d 	sts	0x0DFA, r25	; 0x800dfa <Wire+0x5>
   13ac8:	a0 93 fb 0d 	sts	0x0DFB, r26	; 0x800dfb <Wire+0x6>
   13acc:	b0 93 fc 0d 	sts	0x0DFC, r27	; 0x800dfc <Wire+0x7>
   13ad0:	8c e6       	ldi	r24, 0x6C	; 108
   13ad2:	92 e0       	ldi	r25, 0x02	; 2
   13ad4:	90 93 f6 0d 	sts	0x0DF6, r25	; 0x800df6 <Wire+0x1>
   13ad8:	80 93 f5 0d 	sts	0x0DF5, r24	; 0x800df5 <Wire>
   13adc:	d0 93 33 11 	sts	0x1133, r29	; 0x801133 <_ZL11INADDR_NONE.lto_priv.202+0x1>
   13ae0:	c0 93 32 11 	sts	0x1132, r28	; 0x801132 <_ZL11INADDR_NONE.lto_priv.202>
   13ae4:	10 92 34 11 	sts	0x1134, r1	; 0x801134 <_ZL11INADDR_NONE.lto_priv.202+0x2>
   13ae8:	10 92 35 11 	sts	0x1135, r1	; 0x801135 <_ZL11INADDR_NONE.lto_priv.202+0x3>
   13aec:	10 92 36 11 	sts	0x1136, r1	; 0x801136 <_ZL11INADDR_NONE.lto_priv.202+0x4>
   13af0:	10 92 37 11 	sts	0x1137, r1	; 0x801137 <_ZL11INADDR_NONE.lto_priv.202+0x5>
   13af4:	80 e5       	ldi	r24, 0x50	; 80
   13af6:	80 93 38 11 	sts	0x1138, r24	; 0x801138 <wiznet_SPI_settings>
   13afa:	81 e0       	ldi	r24, 0x01	; 1
   13afc:	80 93 39 11 	sts	0x1139, r24	; 0x801139 <wiznet_SPI_settings+0x1>
   13b00:	d0 93 3b 11 	sts	0x113B, r29	; 0x80113b <_ZL11INADDR_NONE.lto_priv.201+0x1>
   13b04:	c0 93 3a 11 	sts	0x113A, r28	; 0x80113a <_ZL11INADDR_NONE.lto_priv.201>
   13b08:	10 92 3c 11 	sts	0x113C, r1	; 0x80113c <_ZL11INADDR_NONE.lto_priv.201+0x2>
   13b0c:	10 92 3d 11 	sts	0x113D, r1	; 0x80113d <_ZL11INADDR_NONE.lto_priv.201+0x3>
   13b10:	10 92 3e 11 	sts	0x113E, r1	; 0x80113e <_ZL11INADDR_NONE.lto_priv.201+0x4>
   13b14:	10 92 3f 11 	sts	0x113F, r1	; 0x80113f <_ZL11INADDR_NONE.lto_priv.201+0x5>
   13b18:	d0 93 41 11 	sts	0x1141, r29	; 0x801141 <_ZL11INADDR_NONE.lto_priv.200+0x1>
   13b1c:	c0 93 40 11 	sts	0x1140, r28	; 0x801140 <_ZL11INADDR_NONE.lto_priv.200>
   13b20:	10 92 42 11 	sts	0x1142, r1	; 0x801142 <_ZL11INADDR_NONE.lto_priv.200+0x2>
   13b24:	10 92 43 11 	sts	0x1143, r1	; 0x801143 <_ZL11INADDR_NONE.lto_priv.200+0x3>
   13b28:	10 92 44 11 	sts	0x1144, r1	; 0x801144 <_ZL11INADDR_NONE.lto_priv.200+0x4>
   13b2c:	10 92 45 11 	sts	0x1145, r1	; 0x801145 <_ZL11INADDR_NONE.lto_priv.200+0x5>
   13b30:	d0 93 47 11 	sts	0x1147, r29	; 0x801147 <_ZL11INADDR_NONE.lto_priv.199+0x1>
   13b34:	c0 93 46 11 	sts	0x1146, r28	; 0x801146 <_ZL11INADDR_NONE.lto_priv.199>
   13b38:	10 92 48 11 	sts	0x1148, r1	; 0x801148 <_ZL11INADDR_NONE.lto_priv.199+0x2>
   13b3c:	10 92 49 11 	sts	0x1149, r1	; 0x801149 <_ZL11INADDR_NONE.lto_priv.199+0x3>
   13b40:	10 92 4a 11 	sts	0x114A, r1	; 0x80114a <_ZL11INADDR_NONE.lto_priv.199+0x4>
   13b44:	10 92 4b 11 	sts	0x114B, r1	; 0x80114b <_ZL11INADDR_NONE.lto_priv.199+0x5>
   13b48:	d0 93 4d 11 	sts	0x114D, r29	; 0x80114d <_ZL11INADDR_NONE.lto_priv.198+0x1>
   13b4c:	c0 93 4c 11 	sts	0x114C, r28	; 0x80114c <_ZL11INADDR_NONE.lto_priv.198>
   13b50:	10 92 4e 11 	sts	0x114E, r1	; 0x80114e <_ZL11INADDR_NONE.lto_priv.198+0x2>
   13b54:	10 92 4f 11 	sts	0x114F, r1	; 0x80114f <_ZL11INADDR_NONE.lto_priv.198+0x3>
   13b58:	10 92 50 11 	sts	0x1150, r1	; 0x801150 <_ZL11INADDR_NONE.lto_priv.198+0x4>
   13b5c:	10 92 51 11 	sts	0x1151, r1	; 0x801151 <_ZL11INADDR_NONE.lto_priv.198+0x5>
   13b60:	d0 93 53 11 	sts	0x1153, r29	; 0x801153 <_ZL11INADDR_NONE.lto_priv.197+0x1>
   13b64:	c0 93 52 11 	sts	0x1152, r28	; 0x801152 <_ZL11INADDR_NONE.lto_priv.197>
   13b68:	10 92 54 11 	sts	0x1154, r1	; 0x801154 <_ZL11INADDR_NONE.lto_priv.197+0x2>
   13b6c:	10 92 55 11 	sts	0x1155, r1	; 0x801155 <_ZL11INADDR_NONE.lto_priv.197+0x3>
   13b70:	10 92 56 11 	sts	0x1156, r1	; 0x801156 <_ZL11INADDR_NONE.lto_priv.197+0x4>
   13b74:	10 92 57 11 	sts	0x1157, r1	; 0x801157 <_ZL11INADDR_NONE.lto_priv.197+0x5>
   13b78:	d0 93 07 0c 	sts	0x0C07, r29	; 0x800c07 <Ethernet+0x1>
   13b7c:	c0 93 06 0c 	sts	0x0C06, r28	; 0x800c06 <Ethernet>
   13b80:	10 92 08 0c 	sts	0x0C08, r1	; 0x800c08 <Ethernet+0x2>
   13b84:	10 92 09 0c 	sts	0x0C09, r1	; 0x800c09 <Ethernet+0x3>
   13b88:	10 92 0a 0c 	sts	0x0C0A, r1	; 0x800c0a <Ethernet+0x4>
   13b8c:	10 92 0b 0c 	sts	0x0C0B, r1	; 0x800c0b <Ethernet+0x5>
   13b90:	10 92 11 0c 	sts	0x0C11, r1	; 0x800c11 <Ethernet+0xb>
   13b94:	10 92 10 0c 	sts	0x0C10, r1	; 0x800c10 <Ethernet+0xa>
   13b98:	8a e0       	ldi	r24, 0x0A	; 10
   13b9a:	80 93 12 0c 	sts	0x0C12, r24	; 0x800c12 <Ethernet+0xc>
   13b9e:	d0 93 14 0c 	sts	0x0C14, r29	; 0x800c14 <_ZL11INADDR_NONE.lto_priv.196+0x1>
   13ba2:	c0 93 13 0c 	sts	0x0C13, r28	; 0x800c13 <_ZL11INADDR_NONE.lto_priv.196>
   13ba6:	10 92 15 0c 	sts	0x0C15, r1	; 0x800c15 <_ZL11INADDR_NONE.lto_priv.196+0x2>
   13baa:	10 92 16 0c 	sts	0x0C16, r1	; 0x800c16 <_ZL11INADDR_NONE.lto_priv.196+0x3>
   13bae:	10 92 17 0c 	sts	0x0C17, r1	; 0x800c17 <_ZL11INADDR_NONE.lto_priv.196+0x4>
   13bb2:	10 92 18 0c 	sts	0x0C18, r1	; 0x800c18 <_ZL11INADDR_NONE.lto_priv.196+0x5>
   13bb6:	d0 93 59 11 	sts	0x1159, r29	; 0x801159 <_ZL11INADDR_NONE.lto_priv.195+0x1>
   13bba:	c0 93 58 11 	sts	0x1158, r28	; 0x801158 <_ZL11INADDR_NONE.lto_priv.195>
   13bbe:	10 92 5a 11 	sts	0x115A, r1	; 0x80115a <_ZL11INADDR_NONE.lto_priv.195+0x2>
   13bc2:	10 92 5b 11 	sts	0x115B, r1	; 0x80115b <_ZL11INADDR_NONE.lto_priv.195+0x3>
   13bc6:	10 92 5c 11 	sts	0x115C, r1	; 0x80115c <_ZL11INADDR_NONE.lto_priv.195+0x4>
   13bca:	10 92 5d 11 	sts	0x115D, r1	; 0x80115d <_ZL11INADDR_NONE.lto_priv.195+0x5>
   13bce:	8a e0       	ldi	r24, 0x0A	; 10
   13bd0:	90 e0       	ldi	r25, 0x00	; 0
   13bd2:	0e 94 dc ae 	call	0x15db8	; 0x15db8 <malloc>
   13bd6:	90 93 1a 0c 	sts	0x0C1A, r25	; 0x800c1a <array_pids+0x1>
   13bda:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <array_pids>
   13bde:	d0 93 5f 11 	sts	0x115F, r29	; 0x80115f <_ZL11INADDR_NONE.lto_priv.194+0x1>
   13be2:	c0 93 5e 11 	sts	0x115E, r28	; 0x80115e <_ZL11INADDR_NONE.lto_priv.194>
   13be6:	10 92 60 11 	sts	0x1160, r1	; 0x801160 <_ZL11INADDR_NONE.lto_priv.194+0x2>
   13bea:	10 92 61 11 	sts	0x1161, r1	; 0x801161 <_ZL11INADDR_NONE.lto_priv.194+0x3>
   13bee:	10 92 62 11 	sts	0x1162, r1	; 0x801162 <_ZL11INADDR_NONE.lto_priv.194+0x4>
   13bf2:	10 92 63 11 	sts	0x1163, r1	; 0x801163 <_ZL11INADDR_NONE.lto_priv.194+0x5>
   13bf6:	d0 93 65 11 	sts	0x1165, r29	; 0x801165 <_ZL11INADDR_NONE.lto_priv.193+0x1>
   13bfa:	c0 93 64 11 	sts	0x1164, r28	; 0x801164 <_ZL11INADDR_NONE.lto_priv.193>
   13bfe:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <_ZL11INADDR_NONE.lto_priv.193+0x2>
   13c02:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <_ZL11INADDR_NONE.lto_priv.193+0x3>
   13c06:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <_ZL11INADDR_NONE.lto_priv.193+0x4>
   13c0a:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <_ZL11INADDR_NONE.lto_priv.193+0x5>
   13c0e:	8b e5       	ldi	r24, 0x5B	; 91
   13c10:	97 e0       	ldi	r25, 0x07	; 7
   13c12:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <device+0x25>
   13c16:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <device+0x24>
   13c1a:	d0 93 1a 13 	sts	0x131A, r29	; 0x80131a <_ZL11INADDR_NONE.lto_priv.192+0x1>
   13c1e:	c0 93 19 13 	sts	0x1319, r28	; 0x801319 <_ZL11INADDR_NONE.lto_priv.192>
   13c22:	10 92 1b 13 	sts	0x131B, r1	; 0x80131b <_ZL11INADDR_NONE.lto_priv.192+0x2>
   13c26:	10 92 1c 13 	sts	0x131C, r1	; 0x80131c <_ZL11INADDR_NONE.lto_priv.192+0x3>
   13c2a:	10 92 1d 13 	sts	0x131D, r1	; 0x80131d <_ZL11INADDR_NONE.lto_priv.192+0x4>
   13c2e:	10 92 1e 13 	sts	0x131E, r1	; 0x80131e <_ZL11INADDR_NONE.lto_priv.192+0x5>
   13c32:	88 e1       	ldi	r24, 0x18	; 24
   13c34:	80 93 51 10 	sts	0x1051, r24	; 0x801051 <swSPI+0x4>
   13c38:	8a e1       	ldi	r24, 0x1A	; 26
   13c3a:	80 93 50 10 	sts	0x1050, r24	; 0x801050 <swSPI+0x3>
   13c3e:	89 e1       	ldi	r24, 0x19	; 25
   13c40:	80 93 52 10 	sts	0x1052, r24	; 0x801052 <swSPI+0x5>
   13c44:	82 e0       	ldi	r24, 0x02	; 2
   13c46:	80 93 4f 10 	sts	0x104F, r24	; 0x80104f <swSPI+0x2>
   13c4a:	10 92 4d 10 	sts	0x104D, r1	; 0x80104d <swSPI>
   13c4e:	10 92 4e 10 	sts	0x104E, r1	; 0x80104e <swSPI+0x1>
   13c52:	10 92 53 10 	sts	0x1053, r1	; 0x801053 <swSPI+0x6>
   13c56:	60 e0       	ldi	r22, 0x00	; 0
   13c58:	89 e1       	ldi	r24, 0x19	; 25
   13c5a:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
   13c5e:	80 e1       	ldi	r24, 0x10	; 16
   13c60:	80 93 4b 10 	sts	0x104B, r24	; 0x80104b <now+0x5>
   13c64:	8c e1       	ldi	r24, 0x1C	; 28
   13c66:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <now+0x4>
   13c6a:	86 e0       	ldi	r24, 0x06	; 6
   13c6c:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <now+0x3>
   13c70:	40 e0       	ldi	r20, 0x00	; 0
   13c72:	81 e6       	ldi	r24, 0x61	; 97
   13c74:	97 e9       	ldi	r25, 0x97	; 151
   13c76:	e3 e9       	ldi	r30, 0x93	; 147
   13c78:	fe ef       	ldi	r31, 0xFE	; 254
   13c7a:	54 2f       	mov	r21, r20
   13c7c:	53 70       	andi	r21, 0x03	; 3
   13c7e:	21 e0       	ldi	r18, 0x01	; 1
   13c80:	09 f0       	breq	.+2      	; 0x13c84 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x274>
   13c82:	20 e0       	ldi	r18, 0x00	; 0
   13c84:	61 e0       	ldi	r22, 0x01	; 1
   13c86:	64 0f       	add	r22, r20
   13c88:	30 e0       	ldi	r19, 0x00	; 0
   13c8a:	d9 01       	movw	r26, r18
   13c8c:	a3 59       	subi	r26, 0x93	; 147
   13c8e:	be 4f       	sbci	r27, 0xFE	; 254
   13c90:	8a 17       	cp	r24, r26
   13c92:	9b 07       	cpc	r25, r27
   13c94:	38 f0       	brcs	.+14     	; 0x13ca4 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x294>
   13c96:	af 01       	movw	r20, r30
   13c98:	42 1b       	sub	r20, r18
   13c9a:	53 0b       	sbc	r21, r19
   13c9c:	84 0f       	add	r24, r20
   13c9e:	95 1f       	adc	r25, r21
   13ca0:	46 2f       	mov	r20, r22
   13ca2:	eb cf       	rjmp	.-42     	; 0x13c7a <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x26a>
   13ca4:	40 93 46 10 	sts	0x1046, r20	; 0x801046 <now>
   13ca8:	21 e0       	ldi	r18, 0x01	; 1
   13caa:	62 2f       	mov	r22, r18
   13cac:	61 50       	subi	r22, 0x01	; 1
   13cae:	77 0b       	sbc	r23, r23
   13cb0:	fb 01       	movw	r30, r22
   13cb2:	e6 51       	subi	r30, 0x16	; 22
   13cb4:	f4 4c       	sbci	r31, 0xC4	; 196
   13cb6:	e4 91       	lpm	r30, Z
   13cb8:	51 11       	cpse	r21, r1
   13cba:	03 c0       	rjmp	.+6      	; 0x13cc2 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x2b2>
   13cbc:	22 30       	cpi	r18, 0x02	; 2
   13cbe:	09 f4       	brne	.+2      	; 0x13cc2 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x2b2>
   13cc0:	ef 5f       	subi	r30, 0xFF	; 255
   13cc2:	f0 e0       	ldi	r31, 0x00	; 0
   13cc4:	31 e0       	ldi	r19, 0x01	; 1
   13cc6:	32 0f       	add	r19, r18
   13cc8:	8e 17       	cp	r24, r30
   13cca:	9f 07       	cpc	r25, r31
   13ccc:	20 f0       	brcs	.+8      	; 0x13cd6 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x2c6>
   13cce:	8e 1b       	sub	r24, r30
   13cd0:	9f 0b       	sbc	r25, r31
   13cd2:	23 2f       	mov	r18, r19
   13cd4:	ea cf       	rjmp	.-44     	; 0x13caa <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x29a>
   13cd6:	20 93 47 10 	sts	0x1047, r18	; 0x801047 <now+0x1>
   13cda:	8f 5f       	subi	r24, 0xFF	; 255
   13cdc:	80 93 48 10 	sts	0x1048, r24	; 0x801048 <now+0x2>
   13ce0:	10 92 0f 13 	sts	0x130F, r1	; 0x80130f <ethClient+0x3>
   13ce4:	10 92 0e 13 	sts	0x130E, r1	; 0x80130e <ethClient+0x2>
   13ce8:	48 ee       	ldi	r20, 0xE8	; 232
   13cea:	53 e0       	ldi	r21, 0x03	; 3
   13cec:	60 e0       	ldi	r22, 0x00	; 0
   13cee:	70 e0       	ldi	r23, 0x00	; 0
   13cf0:	40 93 10 13 	sts	0x1310, r20	; 0x801310 <ethClient+0x4>
   13cf4:	50 93 11 13 	sts	0x1311, r21	; 0x801311 <ethClient+0x5>
   13cf8:	60 93 12 13 	sts	0x1312, r22	; 0x801312 <ethClient+0x6>
   13cfc:	70 93 13 13 	sts	0x1313, r23	; 0x801313 <ethClient+0x7>
   13d00:	80 ec       	ldi	r24, 0xC0	; 192
   13d02:	92 e0       	ldi	r25, 0x02	; 2
   13d04:	90 93 0d 13 	sts	0x130D, r25	; 0x80130d <ethClient+0x1>
   13d08:	80 93 0c 13 	sts	0x130C, r24	; 0x80130c <ethClient>
   13d0c:	88 e0       	ldi	r24, 0x08	; 8
   13d0e:	80 93 18 13 	sts	0x1318, r24	; 0x801318 <ethClient+0xc>
   13d12:	10 92 2e 10 	sts	0x102E, r1	; 0x80102e <udpClient+0x3>
   13d16:	10 92 2d 10 	sts	0x102D, r1	; 0x80102d <udpClient+0x2>
   13d1a:	40 93 2f 10 	sts	0x102F, r20	; 0x80102f <udpClient+0x4>
   13d1e:	50 93 30 10 	sts	0x1030, r21	; 0x801030 <udpClient+0x5>
   13d22:	60 93 31 10 	sts	0x1031, r22	; 0x801031 <udpClient+0x6>
   13d26:	70 93 32 10 	sts	0x1032, r23	; 0x801032 <udpClient+0x7>
   13d2a:	28 e9       	ldi	r18, 0x98	; 152
   13d2c:	32 e0       	ldi	r19, 0x02	; 2
   13d2e:	30 93 2c 10 	sts	0x102C, r19	; 0x80102c <udpClient+0x1>
   13d32:	20 93 2b 10 	sts	0x102B, r18	; 0x80102b <udpClient>
   13d36:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <udpClient+0xc>
   13d3a:	82 ee       	ldi	r24, 0xE2	; 226
   13d3c:	92 e0       	ldi	r25, 0x02	; 2
   13d3e:	90 93 3b 10 	sts	0x103B, r25	; 0x80103b <udpClient+0x10>
   13d42:	80 93 3a 10 	sts	0x103A, r24	; 0x80103a <udpClient+0xf>
   13d46:	10 92 3c 10 	sts	0x103C, r1	; 0x80103c <udpClient+0x11>
   13d4a:	10 92 3d 10 	sts	0x103D, r1	; 0x80103d <udpClient+0x12>
   13d4e:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <udpClient+0x13>
   13d52:	10 92 3f 10 	sts	0x103F, r1	; 0x80103f <udpClient+0x14>
   13d56:	90 93 1e 10 	sts	0x101E, r25	; 0x80101e <mqtt_client+0x210>
   13d5a:	80 93 1d 10 	sts	0x101D, r24	; 0x80101d <mqtt_client+0x20f>
   13d5e:	10 92 1f 10 	sts	0x101F, r1	; 0x80101f <mqtt_client+0x211>
   13d62:	10 92 20 10 	sts	0x1020, r1	; 0x801020 <mqtt_client+0x212>
   13d66:	10 92 21 10 	sts	0x1021, r1	; 0x801021 <mqtt_client+0x213>
   13d6a:	10 92 22 10 	sts	0x1022, r1	; 0x801022 <mqtt_client+0x214>
   13d6e:	0f ef       	ldi	r16, 0xFF	; 255
   13d70:	1f ef       	ldi	r17, 0xFF	; 255
   13d72:	10 93 2a 10 	sts	0x102A, r17	; 0x80102a <mqtt_client+0x21c>
   13d76:	00 93 29 10 	sts	0x1029, r16	; 0x801029 <mqtt_client+0x21b>
   13d7a:	8c e0       	ldi	r24, 0x0C	; 12
   13d7c:	93 e1       	ldi	r25, 0x13	; 19
   13d7e:	90 93 0f 0e 	sts	0x0E0F, r25	; 0x800e0f <mqtt_client+0x1>
   13d82:	80 93 0e 0e 	sts	0x0E0E, r24	; 0x800e0e <mqtt_client>
   13d86:	10 92 28 10 	sts	0x1028, r1	; 0x801028 <mqtt_client+0x21a>
   13d8a:	10 92 27 10 	sts	0x1027, r1	; 0x801027 <mqtt_client+0x219>
   13d8e:	84 ef       	ldi	r24, 0xF4	; 244
   13d90:	92 e1       	ldi	r25, 0x12	; 18
   13d92:	23 e0       	ldi	r18, 0x03	; 3
   13d94:	30 e0       	ldi	r19, 0x00	; 0
   13d96:	30 93 f5 12 	sts	0x12F5, r19	; 0x8012f5 <radio+0x1>
   13d9a:	20 93 f4 12 	sts	0x12F4, r18	; 0x8012f4 <radio>
   13d9e:	22 e0       	ldi	r18, 0x02	; 2
   13da0:	30 e0       	ldi	r19, 0x00	; 0
   13da2:	30 93 f7 12 	sts	0x12F7, r19	; 0x8012f7 <radio+0x3>
   13da6:	20 93 f6 12 	sts	0x12F6, r18	; 0x8012f6 <radio+0x2>
   13daa:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <radio+0x6>
   13dae:	20 e2       	ldi	r18, 0x20	; 32
   13db0:	20 93 fb 12 	sts	0x12FB, r18	; 0x8012fb <radio+0x7>
   13db4:	10 92 fc 12 	sts	0x12FC, r1	; 0x8012fc <radio+0x8>
   13db8:	25 e0       	ldi	r18, 0x05	; 5
   13dba:	20 93 02 13 	sts	0x1302, r18	; 0x801302 <radio+0xe>
   13dbe:	45 e0       	ldi	r20, 0x05	; 5
   13dc0:	50 e0       	ldi	r21, 0x00	; 0
   13dc2:	60 e0       	ldi	r22, 0x00	; 0
   13dc4:	70 e0       	ldi	r23, 0x00	; 0
   13dc6:	40 93 08 13 	sts	0x1308, r20	; 0x801308 <radio+0x14>
   13dca:	50 93 09 13 	sts	0x1309, r21	; 0x801309 <radio+0x15>
   13dce:	60 93 0a 13 	sts	0x130A, r22	; 0x80130a <radio+0x16>
   13dd2:	70 93 0b 13 	sts	0x130B, r23	; 0x80130b <radio+0x17>
   13dd6:	10 92 fd 12 	sts	0x12FD, r1	; 0x8012fd <radio+0x9>
   13dda:	90 93 b2 11 	sts	0x11B2, r25	; 0x8011b2 <network+0x30>
   13dde:	80 93 b1 11 	sts	0x11B1, r24	; 0x8011b1 <network+0x2f>
   13de2:	27 eb       	ldi	r18, 0xB7	; 183
   13de4:	31 e1       	ldi	r19, 0x11	; 17
   13de6:	30 93 52 12 	sts	0x1252, r19	; 0x801252 <network+0xd0>
   13dea:	20 93 51 12 	sts	0x1251, r18	; 0x801251 <network+0xcf>
   13dee:	2f e5       	ldi	r18, 0x5F	; 95
   13df0:	32 e1       	ldi	r19, 0x12	; 18
   13df2:	30 93 5e 12 	sts	0x125E, r19	; 0x80125e <network+0xdc>
   13df6:	20 93 5d 12 	sts	0x125D, r18	; 0x80125d <network+0xdb>
   13dfa:	23 e5       	ldi	r18, 0x53	; 83
   13dfc:	32 e1       	ldi	r19, 0x12	; 18
   13dfe:	30 93 aa 11 	sts	0x11AA, r19	; 0x8011aa <network+0x28>
   13e02:	20 93 a9 11 	sts	0x11A9, r18	; 0x8011a9 <network+0x27>
   13e06:	10 92 ad 11 	sts	0x11AD, r1	; 0x8011ad <network+0x2b>
   13e0a:	10 92 ae 11 	sts	0x11AE, r1	; 0x8011ae <network+0x2c>
   13e0e:	10 92 af 11 	sts	0x11AF, r1	; 0x8011af <network+0x2d>
   13e12:	10 92 b0 11 	sts	0x11B0, r1	; 0x8011b0 <network+0x2e>
   13e16:	10 92 ac 11 	sts	0x11AC, r1	; 0x8011ac <network+0x2a>
   13e1a:	10 92 ab 11 	sts	0x11AB, r1	; 0x8011ab <network+0x29>
   13e1e:	10 92 82 11 	sts	0x1182, r1	; 0x801182 <network>
   13e22:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <mesh+0x7>
   13e26:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <mesh+0x6>
   13e2a:	82 e8       	ldi	r24, 0x82	; 130
   13e2c:	91 e1       	ldi	r25, 0x11	; 17
   13e2e:	90 93 73 11 	sts	0x1173, r25	; 0x801173 <mesh+0x9>
   13e32:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <mesh+0x8>
   13e36:	85 ef       	ldi	r24, 0xF5	; 245
   13e38:	9d e0       	ldi	r25, 0x0D	; 13
   13e3a:	90 93 02 0e 	sts	0x0E02, r25	; 0x800e02 <lm75_temp+0x1>
   13e3e:	80 93 01 0e 	sts	0x0E01, r24	; 0x800e01 <lm75_temp>
   13e42:	88 e4       	ldi	r24, 0x48	; 72
   13e44:	80 93 03 0e 	sts	0x0E03, r24	; 0x800e03 <lm75_temp+0x2>
   13e48:	8a e0       	ldi	r24, 0x0A	; 10
   13e4a:	92 e0       	ldi	r25, 0x02	; 2
   13e4c:	90 93 0d 0e 	sts	0x0E0D, r25	; 0x800e0d <lm75_temp+0xc>
   13e50:	80 93 0c 0e 	sts	0x0E0C, r24	; 0x800e0c <lm75_temp+0xb>
   13e54:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Generic_LM75_11Bit_Attributes+0x1>
   13e58:	90 93 04 0e 	sts	0x0E04, r25	; 0x800e04 <lm75_temp+0x3>
   13e5c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Generic_LM75_11Bit_Attributes>
   13e60:	89 1b       	sub	r24, r25
   13e62:	99 0b       	sbc	r25, r25
   13e64:	c1 e0       	ldi	r28, 0x01	; 1
   13e66:	d0 e0       	ldi	r29, 0x00	; 0
   13e68:	9e 01       	movw	r18, r28
   13e6a:	02 c0       	rjmp	.+4      	; 0x13e70 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x460>
   13e6c:	22 0f       	add	r18, r18
   13e6e:	33 1f       	adc	r19, r19
   13e70:	8a 95       	dec	r24
   13e72:	e2 f7       	brpl	.-8      	; 0x13e6c <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x45c>
   13e74:	c9 01       	movw	r24, r18
   13e76:	91 95       	neg	r25
   13e78:	81 95       	neg	r24
   13e7a:	91 09       	sbc	r25, r1
   13e7c:	90 93 06 0e 	sts	0x0E06, r25	; 0x800e06 <lm75_temp+0x5>
   13e80:	80 93 05 0e 	sts	0x0E05, r24	; 0x800e05 <lm75_temp+0x4>
   13e84:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Generic_LM75_11Bit_Attributes+0x2>
   13e88:	80 93 07 0e 	sts	0x0E07, r24	; 0x800e07 <lm75_temp+0x6>
   13e8c:	be 01       	movw	r22, r28
   13e8e:	02 c0       	rjmp	.+4      	; 0x13e94 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x484>
   13e90:	66 0f       	add	r22, r22
   13e92:	77 1f       	adc	r23, r23
   13e94:	8a 95       	dec	r24
   13e96:	e2 f7       	brpl	.-8      	; 0x13e90 <global constructors keyed to 65535_0_room_control_v3.ino.cpp.o.7064+0x480>
   13e98:	07 2e       	mov	r0, r23
   13e9a:	00 0c       	add	r0, r0
   13e9c:	88 0b       	sbc	r24, r24
   13e9e:	99 0b       	sbc	r25, r25
   13ea0:	0e 94 14 b3 	call	0x16628	; 0x16628 <__floatsisf>
   13ea4:	9b 01       	movw	r18, r22
   13ea6:	ac 01       	movw	r20, r24
   13ea8:	60 e0       	ldi	r22, 0x00	; 0
   13eaa:	70 e0       	ldi	r23, 0x00	; 0
   13eac:	80 e8       	ldi	r24, 0x80	; 128
   13eae:	9f e3       	ldi	r25, 0x3F	; 63
   13eb0:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
   13eb4:	60 93 08 0e 	sts	0x0E08, r22	; 0x800e08 <lm75_temp+0x7>
   13eb8:	70 93 09 0e 	sts	0x0E09, r23	; 0x800e09 <lm75_temp+0x8>
   13ebc:	80 93 0a 0e 	sts	0x0E0A, r24	; 0x800e0a <lm75_temp+0x9>
   13ec0:	90 93 0b 0e 	sts	0x0E0B, r25	; 0x800e0b <lm75_temp+0xa>
   13ec4:	80 e0       	ldi	r24, 0x00	; 0
   13ec6:	98 ef       	ldi	r25, 0xF8	; 248
   13ec8:	90 93 bf 0d 	sts	0x0DBF, r25	; 0x800dbf <my_lcd+0x9>
   13ecc:	80 93 be 0d 	sts	0x0DBE, r24	; 0x800dbe <my_lcd+0x8>
   13ed0:	20 ee       	ldi	r18, 0xE0	; 224
   13ed2:	37 e0       	ldi	r19, 0x07	; 7
   13ed4:	30 93 bd 0d 	sts	0x0DBD, r19	; 0x800dbd <my_lcd+0x7>
   13ed8:	20 93 bc 0d 	sts	0x0DBC, r18	; 0x800dbc <my_lcd+0x6>
   13edc:	90 93 c1 0d 	sts	0x0DC1, r25	; 0x800dc1 <my_lcd+0xb>
   13ee0:	80 93 c0 0d 	sts	0x0DC0, r24	; 0x800dc0 <my_lcd+0xa>
   13ee4:	81 e0       	ldi	r24, 0x01	; 1
   13ee6:	80 93 c2 0d 	sts	0x0DC2, r24	; 0x800dc2 <my_lcd+0xc>
   13eea:	10 92 c3 0d 	sts	0x0DC3, r1	; 0x800dc3 <my_lcd+0xd>
   13eee:	84 e8       	ldi	r24, 0x84	; 132
   13ef0:	92 e0       	ldi	r25, 0x02	; 2
   13ef2:	90 93 b7 0d 	sts	0x0DB7, r25	; 0x800db7 <my_lcd+0x1>
   13ef6:	80 93 b6 0d 	sts	0x0DB6, r24	; 0x800db6 <my_lcd>
   13efa:	82 e2       	ldi	r24, 0x22	; 34
   13efc:	80 93 f4 0d 	sts	0x0DF4, r24	; 0x800df4 <my_lcd+0x3e>
   13f00:	e5 ed       	ldi	r30, 0xD5	; 213
   13f02:	fb e3       	ldi	r31, 0x3B	; 59
   13f04:	e4 91       	lpm	r30, Z
   13f06:	f0 e0       	ldi	r31, 0x00	; 0
   13f08:	ee 0f       	add	r30, r30
   13f0a:	ff 1f       	adc	r31, r31
   13f0c:	ec 55       	subi	r30, 0x5C	; 92
   13f0e:	f4 4c       	sbci	r31, 0xC4	; 196
   13f10:	a5 91       	lpm	r26, Z+
   13f12:	b4 91       	lpm	r27, Z
   13f14:	b0 93 e5 0d 	sts	0x0DE5, r27	; 0x800de5 <my_lcd+0x2f>
   13f18:	a0 93 e4 0d 	sts	0x0DE4, r26	; 0x800de4 <my_lcd+0x2e>
   13f1c:	e7 ed       	ldi	r30, 0xD7	; 215
   13f1e:	fb e3       	ldi	r31, 0x3B	; 59
   13f20:	e4 91       	lpm	r30, Z
   13f22:	f0 e0       	ldi	r31, 0x00	; 0
   13f24:	ee 0f       	add	r30, r30
   13f26:	ff 1f       	adc	r31, r31
   13f28:	ec 55       	subi	r30, 0x5C	; 92
   13f2a:	f4 4c       	sbci	r31, 0xC4	; 196
   13f2c:	85 91       	lpm	r24, Z+
   13f2e:	94 91       	lpm	r25, Z
   13f30:	90 93 e7 0d 	sts	0x0DE7, r25	; 0x800de7 <my_lcd+0x31>
   13f34:	80 93 e6 0d 	sts	0x0DE6, r24	; 0x800de6 <my_lcd+0x30>
   13f38:	e8 ed       	ldi	r30, 0xD8	; 216
   13f3a:	fb e3       	ldi	r31, 0x3B	; 59
   13f3c:	e4 91       	lpm	r30, Z
   13f3e:	f0 e0       	ldi	r31, 0x00	; 0
   13f40:	ee 0f       	add	r30, r30
   13f42:	ff 1f       	adc	r31, r31
   13f44:	ec 55       	subi	r30, 0x5C	; 92
   13f46:	f4 4c       	sbci	r31, 0xC4	; 196
   13f48:	85 91       	lpm	r24, Z+
   13f4a:	94 91       	lpm	r25, Z
   13f4c:	90 93 e9 0d 	sts	0x0DE9, r25	; 0x800de9 <my_lcd+0x33>
   13f50:	80 93 e8 0d 	sts	0x0DE8, r24	; 0x800de8 <my_lcd+0x32>
   13f54:	e4 ed       	ldi	r30, 0xD4	; 212
   13f56:	fb e3       	ldi	r31, 0x3B	; 59
   13f58:	e4 91       	lpm	r30, Z
   13f5a:	f0 e0       	ldi	r31, 0x00	; 0
   13f5c:	ee 0f       	add	r30, r30
   13f5e:	ff 1f       	adc	r31, r31
   13f60:	ec 55       	subi	r30, 0x5C	; 92
   13f62:	f4 4c       	sbci	r31, 0xC4	; 196
   13f64:	85 91       	lpm	r24, Z+
   13f66:	94 91       	lpm	r25, Z
   13f68:	90 93 eb 0d 	sts	0x0DEB, r25	; 0x800deb <my_lcd+0x35>
   13f6c:	80 93 ea 0d 	sts	0x0DEA, r24	; 0x800dea <my_lcd+0x34>
   13f70:	ef e8       	ldi	r30, 0x8F	; 143
   13f72:	fb e3       	ldi	r31, 0x3B	; 59
   13f74:	84 91       	lpm	r24, Z
   13f76:	80 93 ec 0d 	sts	0x0DEC, r24	; 0x800dec <my_lcd+0x36>
   13f7a:	e1 e9       	ldi	r30, 0x91	; 145
   13f7c:	fb e3       	ldi	r31, 0x3B	; 59
   13f7e:	24 91       	lpm	r18, Z
   13f80:	20 93 ed 0d 	sts	0x0DED, r18	; 0x800ded <my_lcd+0x37>
   13f84:	e2 e9       	ldi	r30, 0x92	; 146
   13f86:	fb e3       	ldi	r31, 0x3B	; 59
   13f88:	94 91       	lpm	r25, Z
   13f8a:	90 93 ee 0d 	sts	0x0DEE, r25	; 0x800dee <my_lcd+0x38>
   13f8e:	ee e8       	ldi	r30, 0x8E	; 142
   13f90:	fb e3       	ldi	r31, 0x3B	; 59
   13f92:	e4 91       	lpm	r30, Z
   13f94:	e0 93 ef 0d 	sts	0x0DEF, r30	; 0x800def <my_lcd+0x39>
   13f98:	38 2f       	mov	r19, r24
   13f9a:	30 95       	com	r19
   13f9c:	30 93 f0 0d 	sts	0x0DF0, r19	; 0x800df0 <my_lcd+0x3a>
   13fa0:	20 95       	com	r18
   13fa2:	20 93 f1 0d 	sts	0x0DF1, r18	; 0x800df1 <my_lcd+0x3b>
   13fa6:	90 95       	com	r25
   13fa8:	90 93 f2 0d 	sts	0x0DF2, r25	; 0x800df2 <my_lcd+0x3c>
   13fac:	e0 95       	com	r30
   13fae:	e0 93 f3 0d 	sts	0x0DF3, r30	; 0x800df3 <my_lcd+0x3d>
   13fb2:	ec 91       	ld	r30, X
   13fb4:	e8 2b       	or	r30, r24
   13fb6:	ec 93       	st	X, r30
   13fb8:	e0 91 e6 0d 	lds	r30, 0x0DE6	; 0x800de6 <my_lcd+0x30>
   13fbc:	f0 91 e7 0d 	lds	r31, 0x0DE7	; 0x800de7 <my_lcd+0x31>
   13fc0:	80 81       	ld	r24, Z
   13fc2:	90 91 ed 0d 	lds	r25, 0x0DED	; 0x800ded <my_lcd+0x37>
   13fc6:	89 2b       	or	r24, r25
   13fc8:	80 83       	st	Z, r24
   13fca:	e0 91 e8 0d 	lds	r30, 0x0DE8	; 0x800de8 <my_lcd+0x32>
   13fce:	f0 91 e9 0d 	lds	r31, 0x0DE9	; 0x800de9 <my_lcd+0x33>
   13fd2:	80 81       	ld	r24, Z
   13fd4:	90 91 ee 0d 	lds	r25, 0x0DEE	; 0x800dee <my_lcd+0x38>
   13fd8:	89 2b       	or	r24, r25
   13fda:	80 83       	st	Z, r24
   13fdc:	e0 91 ea 0d 	lds	r30, 0x0DEA	; 0x800dea <my_lcd+0x34>
   13fe0:	f0 91 eb 0d 	lds	r31, 0x0DEB	; 0x800deb <my_lcd+0x35>
   13fe4:	80 81       	ld	r24, Z
   13fe6:	90 91 ef 0d 	lds	r25, 0x0DEF	; 0x800def <my_lcd+0x39>
   13fea:	89 2b       	or	r24, r25
   13fec:	80 83       	st	Z, r24
   13fee:	61 e0       	ldi	r22, 0x01	; 1
   13ff0:	81 e2       	ldi	r24, 0x21	; 33
   13ff2:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   13ff6:	61 e0       	ldi	r22, 0x01	; 1
   13ff8:	83 e2       	ldi	r24, 0x23	; 35
   13ffa:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   13ffe:	61 e0       	ldi	r22, 0x01	; 1
   14000:	84 e2       	ldi	r24, 0x24	; 36
   14002:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   14006:	61 e0       	ldi	r22, 0x01	; 1
   14008:	80 e2       	ldi	r24, 0x20	; 32
   1400a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   1400e:	61 e0       	ldi	r22, 0x01	; 1
   14010:	82 e2       	ldi	r24, 0x22	; 34
   14012:	0e 94 c5 89 	call	0x1138a	; 0x1138a <digitalWrite>
   14016:	61 e0       	ldi	r22, 0x01	; 1
   14018:	82 e2       	ldi	r24, 0x22	; 34
   1401a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   1401e:	10 92 cd 0d 	sts	0x0DCD, r1	; 0x800dcd <my_lcd+0x17>
   14022:	10 92 cc 0d 	sts	0x0DCC, r1	; 0x800dcc <my_lcd+0x16>
   14026:	86 e9       	ldi	r24, 0x96	; 150
   14028:	97 e7       	ldi	r25, 0x77	; 119
   1402a:	90 93 d1 0d 	sts	0x0DD1, r25	; 0x800dd1 <my_lcd+0x1b>
   1402e:	80 93 d0 0d 	sts	0x0DD0, r24	; 0x800dd0 <my_lcd+0x1a>
   14032:	20 e4       	ldi	r18, 0x40	; 64
   14034:	31 e0       	ldi	r19, 0x01	; 1
   14036:	30 93 c5 0d 	sts	0x0DC5, r19	; 0x800dc5 <my_lcd+0xf>
   1403a:	20 93 c4 0d 	sts	0x0DC4, r18	; 0x800dc4 <my_lcd+0xe>
   1403e:	80 ee       	ldi	r24, 0xE0	; 224
   14040:	91 e0       	ldi	r25, 0x01	; 1
   14042:	90 93 c7 0d 	sts	0x0DC7, r25	; 0x800dc7 <my_lcd+0x11>
   14046:	80 93 c6 0d 	sts	0x0DC6, r24	; 0x800dc6 <my_lcd+0x10>
   1404a:	41 b1       	in	r20, 0x01	; 1
   1404c:	4f ef       	ldi	r20, 0xFF	; 255
   1404e:	41 b9       	out	0x01, r20	; 1
   14050:	30 93 c9 0d 	sts	0x0DC9, r19	; 0x800dc9 <my_lcd+0x13>
   14054:	20 93 c8 0d 	sts	0x0DC8, r18	; 0x800dc8 <my_lcd+0x12>
   14058:	90 93 cb 0d 	sts	0x0DCB, r25	; 0x800dcb <my_lcd+0x15>
   1405c:	80 93 ca 0d 	sts	0x0DCA, r24	; 0x800dca <my_lcd+0x14>
   14060:	e0 ed       	ldi	r30, 0xD0	; 208
   14062:	fb e3       	ldi	r31, 0x3B	; 59
   14064:	e4 91       	lpm	r30, Z
   14066:	f0 e0       	ldi	r31, 0x00	; 0
   14068:	ee 0f       	add	r30, r30
   1406a:	ff 1f       	adc	r31, r31
   1406c:	ec 55       	subi	r30, 0x5C	; 92
   1406e:	f4 4c       	sbci	r31, 0xC4	; 196
   14070:	85 91       	lpm	r24, Z+
   14072:	94 91       	lpm	r25, Z
   14074:	90 93 a8 0d 	sts	0x0DA8, r25	; 0x800da8 <my_touch+0x10>
   14078:	80 93 a7 0d 	sts	0x0DA7, r24	; 0x800da7 <my_touch+0xf>
   1407c:	ef ec       	ldi	r30, 0xCF	; 207
   1407e:	fb e3       	ldi	r31, 0x3B	; 59
   14080:	e4 91       	lpm	r30, Z
   14082:	f0 e0       	ldi	r31, 0x00	; 0
   14084:	ee 0f       	add	r30, r30
   14086:	ff 1f       	adc	r31, r31
   14088:	ec 55       	subi	r30, 0x5C	; 92
   1408a:	f4 4c       	sbci	r31, 0xC4	; 196
   1408c:	85 91       	lpm	r24, Z+
   1408e:	94 91       	lpm	r25, Z
   14090:	90 93 aa 0d 	sts	0x0DAA, r25	; 0x800daa <my_touch+0x12>
   14094:	80 93 a9 0d 	sts	0x0DA9, r24	; 0x800da9 <my_touch+0x11>
   14098:	e1 ed       	ldi	r30, 0xD1	; 209
   1409a:	fb e3       	ldi	r31, 0x3B	; 59
   1409c:	e4 91       	lpm	r30, Z
   1409e:	f0 e0       	ldi	r31, 0x00	; 0
   140a0:	ee 0f       	add	r30, r30
   140a2:	ff 1f       	adc	r31, r31
   140a4:	e2 5a       	subi	r30, 0xA2	; 162
   140a6:	f4 4c       	sbci	r31, 0xC4	; 196
   140a8:	85 91       	lpm	r24, Z+
   140aa:	94 91       	lpm	r25, Z
   140ac:	90 93 ac 0d 	sts	0x0DAC, r25	; 0x800dac <my_touch+0x14>
   140b0:	80 93 ab 0d 	sts	0x0DAB, r24	; 0x800dab <my_touch+0x13>
   140b4:	e2 ed       	ldi	r30, 0xD2	; 210
   140b6:	fb e3       	ldi	r31, 0x3B	; 59
   140b8:	e4 91       	lpm	r30, Z
   140ba:	f0 e0       	ldi	r31, 0x00	; 0
   140bc:	ee 0f       	add	r30, r30
   140be:	ff 1f       	adc	r31, r31
   140c0:	ec 55       	subi	r30, 0x5C	; 92
   140c2:	f4 4c       	sbci	r31, 0xC4	; 196
   140c4:	85 91       	lpm	r24, Z+
   140c6:	94 91       	lpm	r25, Z
   140c8:	90 93 ae 0d 	sts	0x0DAE, r25	; 0x800dae <my_touch+0x16>
   140cc:	80 93 ad 0d 	sts	0x0DAD, r24	; 0x800dad <my_touch+0x15>
   140d0:	eb eb       	ldi	r30, 0xBB	; 187
   140d2:	fb e3       	ldi	r31, 0x3B	; 59
   140d4:	e4 91       	lpm	r30, Z
   140d6:	f0 e0       	ldi	r31, 0x00	; 0
   140d8:	ee 0f       	add	r30, r30
   140da:	ff 1f       	adc	r31, r31
   140dc:	e2 5a       	subi	r30, 0xA2	; 162
   140de:	f4 4c       	sbci	r31, 0xC4	; 196
   140e0:	85 91       	lpm	r24, Z+
   140e2:	94 91       	lpm	r25, Z
   140e4:	90 93 b0 0d 	sts	0x0DB0, r25	; 0x800db0 <my_touch+0x18>
   140e8:	80 93 af 0d 	sts	0x0DAF, r24	; 0x800daf <my_touch+0x17>
   140ec:	ea e8       	ldi	r30, 0x8A	; 138
   140ee:	fb e3       	ldi	r31, 0x3B	; 59
   140f0:	e4 91       	lpm	r30, Z
   140f2:	e0 93 b1 0d 	sts	0x0DB1, r30	; 0x800db1 <my_touch+0x19>
   140f6:	e9 e8       	ldi	r30, 0x89	; 137
   140f8:	fb e3       	ldi	r31, 0x3B	; 59
   140fa:	e4 91       	lpm	r30, Z
   140fc:	e0 93 b2 0d 	sts	0x0DB2, r30	; 0x800db2 <my_touch+0x1a>
   14100:	eb e8       	ldi	r30, 0x8B	; 139
   14102:	fb e3       	ldi	r31, 0x3B	; 59
   14104:	e4 91       	lpm	r30, Z
   14106:	e0 93 b3 0d 	sts	0x0DB3, r30	; 0x800db3 <my_touch+0x1b>
   1410a:	ec e8       	ldi	r30, 0x8C	; 140
   1410c:	fb e3       	ldi	r31, 0x3B	; 59
   1410e:	e4 91       	lpm	r30, Z
   14110:	e0 93 b4 0d 	sts	0x0DB4, r30	; 0x800db4 <my_touch+0x1c>
   14114:	e5 e7       	ldi	r30, 0x75	; 117
   14116:	fb e3       	ldi	r31, 0x3B	; 59
   14118:	e4 91       	lpm	r30, Z
   1411a:	e0 93 b5 0d 	sts	0x0DB5, r30	; 0x800db5 <my_touch+0x1d>
   1411e:	61 e0       	ldi	r22, 0x01	; 1
   14120:	8c e1       	ldi	r24, 0x1C	; 28
   14122:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   14126:	61 e0       	ldi	r22, 0x01	; 1
   14128:	8b e1       	ldi	r24, 0x1B	; 27
   1412a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   1412e:	60 e0       	ldi	r22, 0x00	; 0
   14130:	8d e1       	ldi	r24, 0x1D	; 29
   14132:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   14136:	61 e0       	ldi	r22, 0x01	; 1
   14138:	8e e1       	ldi	r24, 0x1E	; 30
   1413a:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   1413e:	60 e0       	ldi	r22, 0x00	; 0
   14140:	87 e0       	ldi	r24, 0x07	; 7
   14142:	0e 94 22 8b 	call	0x11644	; 0x11644 <pinMode>
   14146:	10 92 a4 0d 	sts	0x0DA4, r1	; 0x800da4 <my_touch+0xc>
   1414a:	10 92 a5 0d 	sts	0x0DA5, r1	; 0x800da5 <my_touch+0xd>
   1414e:	10 92 a6 0d 	sts	0x0DA6, r1	; 0x800da6 <my_touch+0xe>
   14152:	10 92 a1 0d 	sts	0x0DA1, r1	; 0x800da1 <my_touch+0x9>
   14156:	10 92 a0 0d 	sts	0x0DA0, r1	; 0x800da0 <my_touch+0x8>
   1415a:	10 92 a3 0d 	sts	0x0DA3, r1	; 0x800da3 <my_touch+0xb>
   1415e:	10 92 a2 0d 	sts	0x0DA2, r1	; 0x800da2 <my_touch+0xa>
   14162:	10 92 99 0d 	sts	0x0D99, r1	; 0x800d99 <my_touch+0x1>
   14166:	10 92 98 0d 	sts	0x0D98, r1	; 0x800d98 <my_touch>
   1416a:	10 92 9b 0d 	sts	0x0D9B, r1	; 0x800d9b <my_touch+0x3>
   1416e:	10 92 9a 0d 	sts	0x0D9A, r1	; 0x800d9a <my_touch+0x2>
   14172:	10 93 9d 0d 	sts	0x0D9D, r17	; 0x800d9d <my_touch+0x5>
   14176:	00 93 9c 0d 	sts	0x0D9C, r16	; 0x800d9c <my_touch+0x4>
   1417a:	10 93 9f 0d 	sts	0x0D9F, r17	; 0x800d9f <my_touch+0x7>
   1417e:	00 93 9e 0d 	sts	0x0D9E, r16	; 0x800d9e <my_touch+0x6>
   14182:	8a e0       	ldi	r24, 0x0A	; 10
   14184:	80 93 89 0c 	sts	0x0C89, r24	; 0x800c89 <doc>
   14188:	82 e9       	ldi	r24, 0x92	; 146
   1418a:	9c e0       	ldi	r25, 0x0C	; 12
   1418c:	90 93 8d 0c 	sts	0x0C8D, r25	; 0x800c8d <doc+0x4>
   14190:	80 93 8c 0c 	sts	0x0C8C, r24	; 0x800c8c <doc+0x3>
   14194:	20 e0       	ldi	r18, 0x00	; 0
   14196:	31 e0       	ldi	r19, 0x01	; 1
   14198:	30 93 8f 0c 	sts	0x0C8F, r19	; 0x800c8f <doc+0x6>
   1419c:	20 93 8e 0c 	sts	0x0C8E, r18	; 0x800c8e <doc+0x5>
   141a0:	10 92 91 0c 	sts	0x0C91, r1	; 0x800c91 <doc+0x8>
   141a4:	10 92 90 0c 	sts	0x0C90, r1	; 0x800c90 <doc+0x7>
   141a8:	8e e7       	ldi	r24, 0x7E	; 126
   141aa:	92 e0       	ldi	r25, 0x02	; 2
   141ac:	90 93 8b 0c 	sts	0x0C8B, r25	; 0x800c8b <doc+0x2>
   141b0:	80 93 8a 0c 	sts	0x0C8A, r24	; 0x800c8a <doc+0x1>
   141b4:	10 92 93 0d 	sts	0x0D93, r1	; 0x800d93 <doc+0x10a>
   141b8:	10 92 92 0d 	sts	0x0D92, r1	; 0x800d92 <doc+0x109>
   141bc:	80 e0       	ldi	r24, 0x00	; 0
   141be:	90 e0       	ldi	r25, 0x00	; 0
   141c0:	a2 e0       	ldi	r26, 0x02	; 2
   141c2:	b0 e0       	ldi	r27, 0x00	; 0
   141c4:	80 93 80 0c 	sts	0x0C80, r24	; 0x800c80 <SRAM+0x4>
   141c8:	90 93 81 0c 	sts	0x0C81, r25	; 0x800c81 <SRAM+0x5>
   141cc:	a0 93 82 0c 	sts	0x0C82, r26	; 0x800c82 <SRAM+0x6>
   141d0:	b0 93 83 0c 	sts	0x0C83, r27	; 0x800c83 <SRAM+0x7>
   141d4:	d0 93 7f 0c 	sts	0x0C7F, r29	; 0x800c7f <SRAM+0x3>
   141d8:	c0 93 7e 0c 	sts	0x0C7E, r28	; 0x800c7e <SRAM+0x2>
   141dc:	8d e4       	ldi	r24, 0x4D	; 77
   141de:	90 e1       	ldi	r25, 0x10	; 16
   141e0:	90 93 7d 0c 	sts	0x0C7D, r25	; 0x800c7d <SRAM+0x1>
   141e4:	80 93 7c 0c 	sts	0x0C7C, r24	; 0x800c7c <SRAM>
   141e8:	46 e1       	ldi	r20, 0x16	; 22
   141ea:	40 93 84 0c 	sts	0x0C84, r20	; 0x800c84 <SRAM+0x8>
   141ee:	40 e0       	ldi	r20, 0x00	; 0
   141f0:	50 e0       	ldi	r21, 0x00	; 0
   141f2:	64 e0       	ldi	r22, 0x04	; 4
   141f4:	70 e0       	ldi	r23, 0x00	; 0
   141f6:	40 93 71 0c 	sts	0x0C71, r20	; 0x800c71 <SROM+0x4>
   141fa:	50 93 72 0c 	sts	0x0C72, r21	; 0x800c72 <SROM+0x5>
   141fe:	60 93 73 0c 	sts	0x0C73, r22	; 0x800c73 <SROM+0x6>
   14202:	70 93 74 0c 	sts	0x0C74, r23	; 0x800c74 <SROM+0x7>
   14206:	30 93 76 0c 	sts	0x0C76, r19	; 0x800c76 <SROM+0x9>
   1420a:	20 93 75 0c 	sts	0x0C75, r18	; 0x800c75 <SROM+0x8>
   1420e:	10 92 70 0c 	sts	0x0C70, r1	; 0x800c70 <SROM+0x3>
   14212:	10 92 6f 0c 	sts	0x0C6F, r1	; 0x800c6f <SROM+0x2>
   14216:	90 93 6e 0c 	sts	0x0C6E, r25	; 0x800c6e <SROM+0x1>
   1421a:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <SROM>
   1421e:	87 e1       	ldi	r24, 0x17	; 23
   14220:	80 93 77 0c 	sts	0x0C77, r24	; 0x800c77 <SROM+0xa>
   14224:	df 91       	pop	r29
   14226:	cf 91       	pop	r28
   14228:	1f 91       	pop	r17
   1422a:	0f 91       	pop	r16
   1422c:	08 95       	ret

0001422e <main>:
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
   1422e:	cf 93       	push	r28
   14230:	df 93       	push	r29
   14232:	cd b7       	in	r28, 0x3d	; 61
   14234:	de b7       	in	r29, 0x3e	; 62
   14236:	c7 58       	subi	r28, 0x87	; 135
   14238:	d1 09       	sbc	r29, r1
   1423a:	0f b6       	in	r0, 0x3f	; 63
   1423c:	f8 94       	cli
   1423e:	de bf       	out	0x3e, r29	; 62
   14240:	0f be       	out	0x3f, r0	; 63
   14242:	cd bf       	out	0x3d, r28	; 61
init():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
   14244:	78 94       	sei
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
   14246:	84 b5       	in	r24, 0x24	; 36
   14248:	83 60       	ori	r24, 0x03	; 3
   1424a:	84 bd       	out	0x24, r24	; 36
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
   1424c:	85 b5       	in	r24, 0x25	; 37
   1424e:	83 60       	ori	r24, 0x03	; 3
   14250:	85 bd       	out	0x25, r24	; 37
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
   14252:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
   14256:	81 60       	ori	r24, 0x01	; 1
   14258:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
   1425c:	82 e0       	ldi	r24, 0x02	; 2
   1425e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:664
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
   14262:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
   14266:	81 60       	ori	r24, 0x01	; 1
   14268:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
   1426c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   14270:	81 60       	ori	r24, 0x01	; 1
   14272:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
   14276:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
   1427a:	84 60       	ori	r24, 0x04	; 4
   1427c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
   14280:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
   14284:	81 60       	ori	r24, 0x01	; 1
   14286:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:695
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
   1428a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
   1428e:	83 60       	ori	r24, 0x03	; 3
   14290:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:696
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
   14294:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
   14298:	81 60       	ori	r24, 0x01	; 1
   1429a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:705
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode 
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D 
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
   1429e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
   142a2:	83 60       	ori	r24, 0x03	; 3
   142a4:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:706
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
   142a8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
   142ac:	81 60       	ori	r24, 0x01	; 1
   142ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:710
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
   142b2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
   142b6:	83 60       	ori	r24, 0x03	; 3
   142b8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:711
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
   142bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
   142c0:	81 60       	ori	r24, 0x01	; 1
   142c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:717
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
   142c6:	87 e8       	ldi	r24, 0x87	; 135
   142c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
   142cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
   142d0:	0e 94 53 70 	call	0xe0a6	; 0xe0a6 <setup>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);

          strcpy(payload, tds.name);
   142d4:	21 e4       	ldi	r18, 0x41	; 65
   142d6:	30 e0       	ldi	r19, 0x00	; 0
   142d8:	2c 0f       	add	r18, r28
   142da:	3d 1f       	adc	r19, r29
   142dc:	24 5f       	subi	r18, 0xF4	; 244
   142de:	3f 4f       	sbci	r19, 0xFF	; 255
   142e0:	cc 57       	subi	r28, 0x7C	; 124
   142e2:	df 4f       	sbci	r29, 0xFF	; 255
   142e4:	39 83       	std	Y+1, r19	; 0x01
   142e6:	28 83       	st	Y, r18
   142e8:	c4 58       	subi	r28, 0x84	; 132
   142ea:	d0 40       	sbci	r29, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
          tt = status_tds18s20[id].online;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
          payload[0] = 0;
          createString(payload, ':', tds.rom, 8, 16);
   142ec:	41 e4       	ldi	r20, 0x41	; 65
   142ee:	50 e0       	ldi	r21, 0x00	; 0
   142f0:	4c 0f       	add	r20, r28
   142f2:	5d 1f       	adc	r21, r29
   142f4:	4f 5f       	subi	r20, 0xFF	; 255
   142f6:	5f 4f       	sbci	r21, 0xFF	; 255
   142f8:	ca 57       	subi	r28, 0x7A	; 122
   142fa:	df 4f       	sbci	r29, 0xFF	; 255
   142fc:	59 83       	std	Y+1, r21	; 0x01
   142fe:	48 83       	st	Y, r20
   14300:	c6 58       	subi	r28, 0x86	; 134
   14302:	d0 40       	sbci	r29, 0x00	; 0
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4682
  char str1[16];
  unsigned long load_now;



  load_now = millis();
   14304:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14308:	6b 01       	movw	r12, r22
   1430a:	7c 01       	movw	r14, r24
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4683
  if (mqtt_reconnect() == 0)
   1430c:	0e 94 03 6f 	call	0xde06	; 0xde06 <mqtt_reconnect()>
   14310:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <selftest_data>
   14314:	81 11       	cpse	r24, r1
   14316:	8a c0       	rjmp	.+276    	; 0x1442c <main+0x1fe>
selftest_clear_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3962
/*
   what - jaky chybovy flag
*/
void selftest_clear_0(uint8_t what)
{
  cbi(selftest_data, what) ;
   14318:	9f 7d       	andi	r25, 0xDF	; 223
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1431a:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4688
  if (mqtt_reconnect() == 0)
    selftest_clear_0(SELFTEST_MQTT_LINK);
  else
    selftest_set_0(SELFTEST_MQTT_LINK);

  mqtt_client.loop();
   1431e:	0e 94 b3 93 	call	0x12766	; 0x12766 <PubSubClient::loop() [clone .constprop.106]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4691


  if (draw_menu(false) == true)
   14322:	80 e0       	ldi	r24, 0x00	; 0
   14324:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <draw_menu(bool)>
   14328:	88 23       	and	r24, r24
   1432a:	19 f0       	breq	.+6      	; 0x14332 <main+0x104>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4692
    draw_menu(true);
   1432c:	81 e0       	ldi	r24, 0x01	; 1
   1432e:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <draw_menu(bool)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4696

  ////////////////////
  /// kazdych 10sec
  if ((millis() - milis_10s) > 10000)
   14332:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14336:	00 91 cb 10 	lds	r16, 0x10CB	; 0x8010cb <milis_10s>
   1433a:	10 91 cc 10 	lds	r17, 0x10CC	; 0x8010cc <milis_10s+0x1>
   1433e:	20 91 cd 10 	lds	r18, 0x10CD	; 0x8010cd <milis_10s+0x2>
   14342:	30 91 ce 10 	lds	r19, 0x10CE	; 0x8010ce <milis_10s+0x3>
   14346:	60 1b       	sub	r22, r16
   14348:	71 0b       	sbc	r23, r17
   1434a:	82 0b       	sbc	r24, r18
   1434c:	93 0b       	sbc	r25, r19
   1434e:	61 31       	cpi	r22, 0x11	; 17
   14350:	77 42       	sbci	r23, 0x27	; 39
   14352:	81 05       	cpc	r24, r1
   14354:	91 05       	cpc	r25, r1
   14356:	08 f4       	brcc	.+2      	; 0x1435a <main+0x12c>
   14358:	a6 c4       	rjmp	.+2380   	; 0x14ca6 <main+0xa78>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4698
  {
    milis_10s = millis();
   1435a:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   1435e:	60 93 cb 10 	sts	0x10CB, r22	; 0x8010cb <milis_10s>
   14362:	70 93 cc 10 	sts	0x10CC, r23	; 0x8010cc <milis_10s+0x1>
   14366:	80 93 cd 10 	sts	0x10CD, r24	; 0x8010cd <milis_10s+0x2>
   1436a:	90 93 ce 10 	sts	0x10CE, r25	; 0x8010ce <milis_10s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4701


    menu_redraw10s = 1;
   1436e:	81 e0       	ldi	r24, 0x01	; 1
   14370:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <menu_redraw10s>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3582
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
   14374:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <Global_HWwirenum>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
   14378:	4a e0       	ldi	r20, 0x0A	; 10
   1437a:	be 01       	movw	r22, r28
   1437c:	6f 5f       	subi	r22, 0xFF	; 255
   1437e:	7f 4f       	sbci	r23, 0xFF	; 255
   14380:	90 e0       	ldi	r25, 0x00	; 0
   14382:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3583
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
   14386:	ae 01       	movw	r20, r28
   14388:	4f 5f       	subi	r20, 0xFF	; 255
   1438a:	5f 4f       	sbci	r21, 0xFF	; 255
   1438c:	6d ef       	ldi	r22, 0xFD	; 253
   1438e:	76 e0       	ldi	r23, 0x06	; 6
   14390:	8e e0       	ldi	r24, 0x0E	; 14
   14392:	9e e0       	ldi	r25, 0x0E	; 14
   14394:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   14398:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   1439a:	ab e0       	ldi	r26, 0x0B	; 11
   1439c:	9a 2e       	mov	r9, r26
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   1439e:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <Global_HWwirenum>
   143a2:	18 17       	cp	r17, r24
   143a4:	08 f0       	brcs	.+2      	; 0x143a8 <main+0x17a>
   143a6:	44 c0       	rjmp	.+136    	; 0x14430 <main+0x202>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3586
  {
    createString(payload, ':', w_rom[i].rom, 8, 16);
   143a8:	19 9d       	mul	r17, r9
   143aa:	c0 01       	movw	r24, r0
   143ac:	11 24       	eor	r1, r1
   143ae:	dc 01       	movw	r26, r24
   143b0:	a5 54       	subi	r26, 0x45	; 69
   143b2:	b6 4f       	sbci	r27, 0xF6	; 246
   143b4:	5d 01       	movw	r10, r26
   143b6:	00 e1       	ldi	r16, 0x10	; 16
   143b8:	28 e0       	ldi	r18, 0x08	; 8
   143ba:	ad 01       	movw	r20, r26
   143bc:	6a e3       	ldi	r22, 0x3A	; 58
   143be:	ce 01       	movw	r24, r28
   143c0:	01 96       	adiw	r24, 0x01	; 1
   143c2:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3587
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "rom", payload);
   143c6:	9e 01       	movw	r18, r28
   143c8:	2f 5f       	subi	r18, 0xFF	; 255
   143ca:	3f 4f       	sbci	r19, 0xFF	; 255
   143cc:	49 e0       	ldi	r20, 0x09	; 9
   143ce:	57 e0       	ldi	r21, 0x07	; 7
   143d0:	61 2f       	mov	r22, r17
   143d2:	8d e0       	ldi	r24, 0x0D	; 13
   143d4:	97 e0       	ldi	r25, 0x07	; 7
   143d6:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3589
    ///
    itoa(w_rom[i].assigned_ds2482, payload, 10);
   143da:	f5 01       	movw	r30, r10
   143dc:	80 85       	ldd	r24, Z+8	; 0x08
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   143de:	4a e0       	ldi	r20, 0x0A	; 10
   143e0:	be 01       	movw	r22, r28
   143e2:	6f 5f       	subi	r22, 0xFF	; 255
   143e4:	7f 4f       	sbci	r23, 0xFF	; 255
   143e6:	90 e0       	ldi	r25, 0x00	; 0
   143e8:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3590
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "assigned", payload);
   143ec:	9e 01       	movw	r18, r28
   143ee:	2f 5f       	subi	r18, 0xFF	; 255
   143f0:	3f 4f       	sbci	r19, 0xFF	; 255
   143f2:	43 e1       	ldi	r20, 0x13	; 19
   143f4:	57 e0       	ldi	r21, 0x07	; 7
   143f6:	61 2f       	mov	r22, r17
   143f8:	8d e0       	ldi	r24, 0x0D	; 13
   143fa:	97 e0       	ldi	r25, 0x07	; 7
   143fc:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3592
    ///
    itoa(w_rom[i].tds_idx, payload, 10);
   14400:	d5 01       	movw	r26, r10
   14402:	1a 96       	adiw	r26, 0x0a	; 10
   14404:	8c 91       	ld	r24, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14406:	4a e0       	ldi	r20, 0x0A	; 10
   14408:	be 01       	movw	r22, r28
   1440a:	6f 5f       	subi	r22, 0xFF	; 255
   1440c:	7f 4f       	sbci	r23, 0xFF	; 255
   1440e:	90 e0       	ldi	r25, 0x00	; 0
   14410:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_onewire():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3593
    send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "1wire", i, "tds_idx", payload);
   14414:	9e 01       	movw	r18, r28
   14416:	2f 5f       	subi	r18, 0xFF	; 255
   14418:	3f 4f       	sbci	r19, 0xFF	; 255
   1441a:	4c e1       	ldi	r20, 0x1C	; 28
   1441c:	57 e0       	ldi	r21, 0x07	; 7
   1441e:	61 2f       	mov	r22, r17
   14420:	8d e0       	ldi	r24, 0x0D	; 13
   14422:	97 e0       	ldi	r25, 0x07	; 7
   14424:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   14428:	1f 5f       	subi	r17, 0xFF	; 255
   1442a:	b9 cf       	rjmp	.-142    	; 0x1439e <main+0x170>
selftest_set_0():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3953
/*
   what - jaky chybovy flag
*/
void selftest_set_0(uint8_t what)
{
  sbi(selftest_data, what) ;
   1442c:	90 62       	ori	r25, 0x20	; 32
   1442e:	75 cf       	rjmp	.-278    	; 0x1431a <main+0xec>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:318
void send_mqtt_status(PubSubClient *mqtt_client)
{
  char str_topic[64];
  char hostname[10];
  char payload[64];
  if (mqtt_client->connected())
   14430:	8e e0       	ldi	r24, 0x0E	; 14
   14432:	9e e0       	ldi	r25, 0x0E	; 14
   14434:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   14438:	88 23       	and	r24, r24
   1443a:	09 f4       	brne	.+2      	; 0x1443e <main+0x210>
   1443c:	ac c0       	rjmp	.+344    	; 0x14596 <main+0x368>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:320
  {
    strcpy_P(str_topic, status_mqtt_send);
   1443e:	6c e0       	ldi	r22, 0x0C	; 12
   14440:	76 e3       	ldi	r23, 0x36	; 54
   14442:	ce 01       	movw	r24, r28
   14444:	8f 5b       	subi	r24, 0xBF	; 191
   14446:	9f 4f       	sbci	r25, 0xFF	; 255
   14448:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1444c:	4a e0       	ldi	r20, 0x0A	; 10
   1444e:	be 01       	movw	r22, r28
   14450:	6f 5f       	subi	r22, 0xFF	; 255
   14452:	7f 4f       	sbci	r23, 0xFF	; 255
   14454:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <mqtt_send_message>
   14458:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <mqtt_send_message+0x1>
   1445c:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:322
    itoa(mqtt_send_message, payload, 10);
    mqtt_send_message = 0;
   14460:	10 92 66 0b 	sts	0x0B66, r1	; 0x800b66 <mqtt_send_message+0x1>
   14464:	10 92 65 0b 	sts	0x0B65, r1	; 0x800b65 <mqtt_send_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:323
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14468:	ae 01       	movw	r20, r28
   1446a:	4f 5f       	subi	r20, 0xFF	; 255
   1446c:	5f 4f       	sbci	r21, 0xFF	; 255
   1446e:	be 01       	movw	r22, r28
   14470:	6f 5b       	subi	r22, 0xBF	; 191
   14472:	7f 4f       	sbci	r23, 0xFF	; 255
   14474:	8e e0       	ldi	r24, 0x0E	; 14
   14476:	9e e0       	ldi	r25, 0x0E	; 14
   14478:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:325
    ///
    strcpy_P(str_topic, status_mqtt_error);
   1447c:	6a ef       	ldi	r22, 0xFA	; 250
   1447e:	75 e3       	ldi	r23, 0x35	; 53
   14480:	ce 01       	movw	r24, r28
   14482:	8f 5b       	subi	r24, 0xBF	; 191
   14484:	9f 4f       	sbci	r25, 0xFF	; 255
   14486:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1448a:	4a e0       	ldi	r20, 0x0A	; 10
   1448c:	be 01       	movw	r22, r28
   1448e:	6f 5f       	subi	r22, 0xFF	; 255
   14490:	7f 4f       	sbci	r23, 0xFF	; 255
   14492:	80 91 67 0b 	lds	r24, 0x0B67	; 0x800b67 <mqtt_error>
   14496:	90 91 68 0b 	lds	r25, 0x0B68	; 0x800b68 <mqtt_error+0x1>
   1449a:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:327
    itoa(mqtt_error, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1449e:	ae 01       	movw	r20, r28
   144a0:	4f 5f       	subi	r20, 0xFF	; 255
   144a2:	5f 4f       	sbci	r21, 0xFF	; 255
   144a4:	be 01       	movw	r22, r28
   144a6:	6f 5b       	subi	r22, 0xBF	; 191
   144a8:	7f 4f       	sbci	r23, 0xFF	; 255
   144aa:	8e e0       	ldi	r24, 0x0E	; 14
   144ac:	9e e0       	ldi	r25, 0x0E	; 14
   144ae:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:329
    ///
    strcpy_P(str_topic, status_mqtt_receive);
   144b2:	66 ee       	ldi	r22, 0xE6	; 230
   144b4:	75 e3       	ldi	r23, 0x35	; 53
   144b6:	ce 01       	movw	r24, r28
   144b8:	8f 5b       	subi	r24, 0xBF	; 191
   144ba:	9f 4f       	sbci	r25, 0xFF	; 255
   144bc:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   144c0:	4a e0       	ldi	r20, 0x0A	; 10
   144c2:	be 01       	movw	r22, r28
   144c4:	6f 5f       	subi	r22, 0xFF	; 255
   144c6:	7f 4f       	sbci	r23, 0xFF	; 255
   144c8:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <mqtt_receive_message>
   144cc:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <mqtt_receive_message+0x1>
   144d0:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:331
    itoa(mqtt_receive_message, payload, 10);
    mqtt_receive_message = 0;
   144d4:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <mqtt_receive_message+0x1>
   144d8:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <mqtt_receive_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:332
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   144dc:	ae 01       	movw	r20, r28
   144de:	4f 5f       	subi	r20, 0xFF	; 255
   144e0:	5f 4f       	sbci	r21, 0xFF	; 255
   144e2:	be 01       	movw	r22, r28
   144e4:	6f 5b       	subi	r22, 0xBF	; 191
   144e6:	7f 4f       	sbci	r23, 0xFF	; 255
   144e8:	8e e0       	ldi	r24, 0x0E	; 14
   144ea:	9e e0       	ldi	r25, 0x0E	; 14
   144ec:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:334
    ///
    strcpy_P(str_topic, status_mqtt_process);
   144f0:	62 ed       	ldi	r22, 0xD2	; 210
   144f2:	75 e3       	ldi	r23, 0x35	; 53
   144f4:	ce 01       	movw	r24, r28
   144f6:	8f 5b       	subi	r24, 0xBF	; 191
   144f8:	9f 4f       	sbci	r25, 0xFF	; 255
   144fa:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   144fe:	4a e0       	ldi	r20, 0x0A	; 10
   14500:	be 01       	movw	r22, r28
   14502:	6f 5f       	subi	r22, 0xFF	; 255
   14504:	7f 4f       	sbci	r23, 0xFF	; 255
   14506:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <mqtt_process_message>
   1450a:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <mqtt_process_message+0x1>
   1450e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:336
    itoa(mqtt_process_message, payload, 10);
    mqtt_process_message = 0;
   14512:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <mqtt_process_message+0x1>
   14516:	10 92 fe 09 	sts	0x09FE, r1	; 0x8009fe <mqtt_process_message>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:337
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   1451a:	ae 01       	movw	r20, r28
   1451c:	4f 5f       	subi	r20, 0xFF	; 255
   1451e:	5f 4f       	sbci	r21, 0xFF	; 255
   14520:	be 01       	movw	r22, r28
   14522:	6f 5b       	subi	r22, 0xBF	; 191
   14524:	7f 4f       	sbci	r23, 0xFF	; 255
   14526:	8e e0       	ldi	r24, 0x0E	; 14
   14528:	9e e0       	ldi	r25, 0x0E	; 14
   1452a:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:339

    payload[0] = 0;
   1452e:	19 82       	std	Y+1, r1	; 0x01
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:340
    createString(payload, '.', device.myIP, 4, 10);
   14530:	0a e0       	ldi	r16, 0x0A	; 10
   14532:	24 e0       	ldi	r18, 0x04	; 4
   14534:	41 e2       	ldi	r20, 0x21	; 33
   14536:	5c e0       	ldi	r21, 0x0C	; 12
   14538:	6e e2       	ldi	r22, 0x2E	; 46
   1453a:	ce 01       	movw	r24, r28
   1453c:	01 96       	adiw	r24, 0x01	; 1
   1453e:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:341
    strcpy_P(str_topic, network_ip);
   14542:	67 ec       	ldi	r22, 0xC7	; 199
   14544:	75 e3       	ldi	r23, 0x35	; 53
   14546:	ce 01       	movw	r24, r28
   14548:	8f 5b       	subi	r24, 0xBF	; 191
   1454a:	9f 4f       	sbci	r25, 0xFF	; 255
   1454c:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:342
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14550:	ae 01       	movw	r20, r28
   14552:	4f 5f       	subi	r20, 0xFF	; 255
   14554:	5f 4f       	sbci	r21, 0xFF	; 255
   14556:	be 01       	movw	r22, r28
   14558:	6f 5b       	subi	r22, 0xBF	; 191
   1455a:	7f 4f       	sbci	r23, 0xFF	; 255
   1455c:	8e e0       	ldi	r24, 0x0E	; 14
   1455e:	9e e0       	ldi	r25, 0x0E	; 14
   14560:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:344

    strcpy_P(str_topic, status_know_devices);
   14564:	63 eb       	ldi	r22, 0xB3	; 179
   14566:	75 e3       	ldi	r23, 0x35	; 53
   14568:	ce 01       	movw	r24, r28
   1456a:	8f 5b       	subi	r24, 0xBF	; 191
   1456c:	9f 4f       	sbci	r25, 0xFF	; 255
   1456e:	0e 94 90 aa 	call	0x15520	; 0x15520 <strcpy_P>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14572:	4a e0       	ldi	r20, 0x0A	; 10
   14574:	be 01       	movw	r22, r28
   14576:	6f 5f       	subi	r22, 0xFF	; 255
   14578:	7f 4f       	sbci	r23, 0xFF	; 255
   1457a:	90 e0       	ldi	r25, 0x00	; 0
   1457c:	80 e0       	ldi	r24, 0x00	; 0
   1457e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_status():
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:346
    itoa(count_know_mqtt, payload, 10);
    send_mqtt_general_payload(mqtt_client, str_topic, payload);
   14582:	ae 01       	movw	r20, r28
   14584:	4f 5f       	subi	r20, 0xFF	; 255
   14586:	5f 4f       	sbci	r21, 0xFF	; 255
   14588:	be 01       	movw	r22, r28
   1458a:	6f 5b       	subi	r22, 0xBF	; 191
   1458c:	7f 4f       	sbci	r23, 0xFF	; 255
   1458e:	8e e0       	ldi	r24, 0x0E	; 14
   14590:	9e e0       	ldi	r25, 0x0E	; 14
   14592:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/tmp/arduino_build_832911/sketch/saric_mqtt_network.cpp:348
  }
  mqtt_error = 0;
   14596:	10 92 68 0b 	sts	0x0B68, r1	; 0x800b68 <mqtt_error+0x1>
   1459a:	10 92 67 0b 	sts	0x0B67, r1	; 0x800b67 <mqtt_error>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3602
/// funkce pro odeslani zakladnich informaci o tomto zarizeni
void send_device_status(void)
{
  char str_topic[64];
  char payload[64];
  if (mqtt_client.connected())
   1459e:	8e e0       	ldi	r24, 0x0E	; 14
   145a0:	9e e0       	ldi	r25, 0x0E	; 14
   145a2:	0e 94 7d 93 	call	0x126fa	; 0x126fa <PubSubClient::connected()>
   145a6:	88 23       	and	r24, r24
   145a8:	09 f4       	brne	.+2      	; 0x145ac <main+0x37e>
   145aa:	6c c1       	rjmp	.+728    	; 0x14884 <main+0x656>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3604
  {
    strcpy(str_topic, "status/uptime");
   145ac:	64 e2       	ldi	r22, 0x24	; 36
   145ae:	77 e0       	ldi	r23, 0x07	; 7
   145b0:	ce 01       	movw	r24, r28
   145b2:	8f 5b       	subi	r24, 0xBF	; 191
   145b4:	9f 4f       	sbci	r25, 0xFF	; 255
   145b6:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   145ba:	4a e0       	ldi	r20, 0x0A	; 10
   145bc:	be 01       	movw	r22, r28
   145be:	6f 5f       	subi	r22, 0xFF	; 255
   145c0:	7f 4f       	sbci	r23, 0xFF	; 255
   145c2:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <uptime>
   145c6:	90 91 d3 0a 	lds	r25, 0x0AD3	; 0x800ad3 <uptime+0x1>
   145ca:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3606
    itoa(uptime, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   145ce:	ae 01       	movw	r20, r28
   145d0:	4f 5f       	subi	r20, 0xFF	; 255
   145d2:	5f 4f       	sbci	r21, 0xFF	; 255
   145d4:	be 01       	movw	r22, r28
   145d6:	6f 5b       	subi	r22, 0xBF	; 191
   145d8:	7f 4f       	sbci	r23, 0xFF	; 255
   145da:	8e e0       	ldi	r24, 0x0E	; 14
   145dc:	9e e0       	ldi	r25, 0x0E	; 14
   145de:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3608
    ///
    strcpy(str_topic, "status/brigthness");
   145e2:	62 e3       	ldi	r22, 0x32	; 50
   145e4:	77 e0       	ldi	r23, 0x07	; 7
   145e6:	ce 01       	movw	r24, r28
   145e8:	8f 5b       	subi	r24, 0xBF	; 191
   145ea:	9f 4f       	sbci	r25, 0xFF	; 255
   145ec:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   145f0:	4a e0       	ldi	r20, 0x0A	; 10
   145f2:	be 01       	movw	r22, r28
   145f4:	6f 5f       	subi	r22, 0xFF	; 255
   145f6:	7f 4f       	sbci	r23, 0xFF	; 255
   145f8:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <light_curr>
   145fc:	90 91 cd 0a 	lds	r25, 0x0ACD	; 0x800acd <light_curr+0x1>
   14600:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3610
    itoa(light_curr, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14604:	ae 01       	movw	r20, r28
   14606:	4f 5f       	subi	r20, 0xFF	; 255
   14608:	5f 4f       	sbci	r21, 0xFF	; 255
   1460a:	be 01       	movw	r22, r28
   1460c:	6f 5b       	subi	r22, 0xBF	; 191
   1460e:	7f 4f       	sbci	r23, 0xFF	; 255
   14610:	8e e0       	ldi	r24, 0x0E	; 14
   14612:	9e e0       	ldi	r25, 0x0E	; 14
   14614:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3616
    ///
    //strcpy(str_topic, "status/light");
    //itoa(jas_disp, payload, 10);
    //send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    ///
    strcpy(str_topic, "status/auto_brigthness");
   14618:	64 e4       	ldi	r22, 0x44	; 68
   1461a:	77 e0       	ldi	r23, 0x07	; 7
   1461c:	ce 01       	movw	r24, r28
   1461e:	8f 5b       	subi	r24, 0xBF	; 191
   14620:	9f 4f       	sbci	r25, 0xFF	; 255
   14622:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14626:	4a e0       	ldi	r20, 0x0A	; 10
   14628:	be 01       	movw	r22, r28
   1462a:	6f 5f       	subi	r22, 0xFF	; 255
   1462c:	7f 4f       	sbci	r23, 0xFF	; 255
   1462e:	90 e0       	ldi	r25, 0x00	; 0
   14630:	80 e0       	ldi	r24, 0x00	; 0
   14632:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3618
    itoa(auto_jas, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14636:	ae 01       	movw	r20, r28
   14638:	4f 5f       	subi	r20, 0xFF	; 255
   1463a:	5f 4f       	sbci	r21, 0xFF	; 255
   1463c:	be 01       	movw	r22, r28
   1463e:	6f 5b       	subi	r22, 0xBF	; 191
   14640:	7f 4f       	sbci	r23, 0xFF	; 255
   14642:	8e e0       	ldi	r24, 0x0E	; 14
   14644:	9e e0       	ldi	r25, 0x0E	; 14
   14646:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3620
    ///
    strcpy(str_topic, "status/load_min");
   1464a:	6b e5       	ldi	r22, 0x5B	; 91
   1464c:	77 e0       	ldi	r23, 0x07	; 7
   1464e:	ce 01       	movw	r24, r28
   14650:	8f 5b       	subi	r24, 0xBF	; 191
   14652:	9f 4f       	sbci	r25, 0xFF	; 255
   14654:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14658:	4a e0       	ldi	r20, 0x0A	; 10
   1465a:	be 01       	movw	r22, r28
   1465c:	6f 5f       	subi	r22, 0xFF	; 255
   1465e:	7f 4f       	sbci	r23, 0xFF	; 255
   14660:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <load_min>
   14664:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <load_min+0x1>
   14668:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3622
    itoa(load_min, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   1466c:	ae 01       	movw	r20, r28
   1466e:	4f 5f       	subi	r20, 0xFF	; 255
   14670:	5f 4f       	sbci	r21, 0xFF	; 255
   14672:	be 01       	movw	r22, r28
   14674:	6f 5b       	subi	r22, 0xBF	; 191
   14676:	7f 4f       	sbci	r23, 0xFF	; 255
   14678:	8e e0       	ldi	r24, 0x0E	; 14
   1467a:	9e e0       	ldi	r25, 0x0E	; 14
   1467c:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3624
    ///
    strcpy(str_topic, "status/load_max");
   14680:	6b e6       	ldi	r22, 0x6B	; 107
   14682:	77 e0       	ldi	r23, 0x07	; 7
   14684:	ce 01       	movw	r24, r28
   14686:	8f 5b       	subi	r24, 0xBF	; 191
   14688:	9f 4f       	sbci	r25, 0xFF	; 255
   1468a:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1468e:	4a e0       	ldi	r20, 0x0A	; 10
   14690:	be 01       	movw	r22, r28
   14692:	6f 5f       	subi	r22, 0xFF	; 255
   14694:	7f 4f       	sbci	r23, 0xFF	; 255
   14696:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <load_max>
   1469a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <load_max+0x1>
   1469e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3626
    itoa(load_max, payload, 10);
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   146a2:	ae 01       	movw	r20, r28
   146a4:	4f 5f       	subi	r20, 0xFF	; 255
   146a6:	5f 4f       	sbci	r21, 0xFF	; 255
   146a8:	be 01       	movw	r22, r28
   146aa:	6f 5b       	subi	r22, 0xBF	; 191
   146ac:	7f 4f       	sbci	r23, 0xFF	; 255
   146ae:	8e e0       	ldi	r24, 0x0E	; 14
   146b0:	9e e0       	ldi	r25, 0x0E	; 14
   146b2:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3628
    ///
    load_max = 0;
   146b6:	10 92 bb 10 	sts	0x10BB, r1	; 0x8010bb <load_max>
   146ba:	10 92 bc 10 	sts	0x10BC, r1	; 0x8010bc <load_max+0x1>
   146be:	10 92 bd 10 	sts	0x10BD, r1	; 0x8010bd <load_max+0x2>
   146c2:	10 92 be 10 	sts	0x10BE, r1	; 0x8010be <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3629
    load_min = 0xffffffff;
   146c6:	2f ef       	ldi	r18, 0xFF	; 255
   146c8:	3f ef       	ldi	r19, 0xFF	; 255
   146ca:	a9 01       	movw	r20, r18
   146cc:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <load_min>
   146d0:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <load_min+0x1>
   146d4:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <load_min+0x2>
   146d8:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3631
    ///
    strcpy(str_topic, "status/default_ring");
   146dc:	6b e7       	ldi	r22, 0x7B	; 123
   146de:	77 e0       	ldi	r23, 0x07	; 7
   146e0:	ce 01       	movw	r24, r28
   146e2:	8f 5b       	subi	r24, 0xBF	; 191
   146e4:	9f 4f       	sbci	r25, 0xFF	; 255
   146e6:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3632
    itoa(default_ring, payload, 10);
   146ea:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <default_ring>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   146ee:	4a e0       	ldi	r20, 0x0A	; 10
   146f0:	be 01       	movw	r22, r28
   146f2:	6f 5f       	subi	r22, 0xFF	; 255
   146f4:	7f 4f       	sbci	r23, 0xFF	; 255
   146f6:	90 e0       	ldi	r25, 0x00	; 0
   146f8:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3633
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   146fc:	ae 01       	movw	r20, r28
   146fe:	4f 5f       	subi	r20, 0xFF	; 255
   14700:	5f 4f       	sbci	r21, 0xFF	; 255
   14702:	be 01       	movw	r22, r28
   14704:	6f 5b       	subi	r22, 0xBF	; 191
   14706:	7f 4f       	sbci	r23, 0xFF	; 255
   14708:	8e e0       	ldi	r24, 0x0E	; 14
   1470a:	9e e0       	ldi	r25, 0x0E	; 14
   1470c:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3635
    ///
    strcpy(str_topic, "status/selftest");
   14710:	6f e8       	ldi	r22, 0x8F	; 143
   14712:	77 e0       	ldi	r23, 0x07	; 7
   14714:	ce 01       	movw	r24, r28
   14716:	8f 5b       	subi	r24, 0xBF	; 191
   14718:	9f 4f       	sbci	r25, 0xFF	; 255
   1471a:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3636
    itoa(selftest_data, payload, 10);
   1471e:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <selftest_data>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14722:	4a e0       	ldi	r20, 0x0A	; 10
   14724:	be 01       	movw	r22, r28
   14726:	6f 5f       	subi	r22, 0xFF	; 255
   14728:	7f 4f       	sbci	r23, 0xFF	; 255
   1472a:	90 e0       	ldi	r25, 0x00	; 0
   1472c:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3637
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14730:	ae 01       	movw	r20, r28
   14732:	4f 5f       	subi	r20, 0xFF	; 255
   14734:	5f 4f       	sbci	r21, 0xFF	; 255
   14736:	be 01       	movw	r22, r28
   14738:	6f 5b       	subi	r22, 0xBF	; 191
   1473a:	7f 4f       	sbci	r23, 0xFF	; 255
   1473c:	8e e0       	ldi	r24, 0x0E	; 14
   1473e:	9e e0       	ldi	r25, 0x0E	; 14
   14740:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3639

    strcpy(str_topic, "status/rtds/count");
   14744:	6f e9       	ldi	r22, 0x9F	; 159
   14746:	77 e0       	ldi	r23, 0x07	; 7
   14748:	ce 01       	movw	r24, r28
   1474a:	8f 5b       	subi	r24, 0xBF	; 191
   1474c:	9f 4f       	sbci	r25, 0xFF	; 255
   1474e:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3640
    itoa(use_rtds, payload, 10);
   14752:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <use_rtds>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14756:	4a e0       	ldi	r20, 0x0A	; 10
   14758:	be 01       	movw	r22, r28
   1475a:	6f 5f       	subi	r22, 0xFF	; 255
   1475c:	7f 4f       	sbci	r23, 0xFF	; 255
   1475e:	90 e0       	ldi	r25, 0x00	; 0
   14760:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3641
    send_mqtt_general_payload(&mqtt_client, str_topic, payload);
   14764:	ae 01       	movw	r20, r28
   14766:	4f 5f       	subi	r20, 0xFF	; 255
   14768:	5f 4f       	sbci	r21, 0xFF	; 255
   1476a:	be 01       	movw	r22, r28
   1476c:	6f 5b       	subi	r22, 0xBF	; 191
   1476e:	7f 4f       	sbci	r23, 0xFF	; 255
   14770:	8e e0       	ldi	r24, 0x0E	; 14
   14772:	9e e0       	ldi	r25, 0x0E	; 14
   14774:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
time_get_offset():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4019
///
/////////////// Casove funkce ///////////////////////////////////////////////////////////////////
/// time_get_offset - ziska casovy offset, letni/zimni cas
uint8_t time_get_offset(void)
{
  return EEPROM.read(time_offset);
   14778:	81 e0       	ldi	r24, 0x01	; 1
   1477a:	90 e0       	ldi	r25, 0x00	; 0
   1477c:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14780:	4a e0       	ldi	r20, 0x0A	; 10
   14782:	be 01       	movw	r22, r28
   14784:	6f 5f       	subi	r22, 0xFF	; 255
   14786:	7f 4f       	sbci	r23, 0xFF	; 255
   14788:	90 e0       	ldi	r25, 0x00	; 0
   1478a:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3648
      strcpy(str_topic, "status/light/count");
      itoa(use_light_curr, payload, 10);
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
   1478e:	ae 01       	movw	r20, r28
   14790:	4f 5f       	subi	r20, 0xFF	; 255
   14792:	5f 4f       	sbci	r21, 0xFF	; 255
   14794:	61 eb       	ldi	r22, 0xB1	; 177
   14796:	77 e0       	ldi	r23, 0x07	; 7
   14798:	8e e0       	ldi	r24, 0x0E	; 14
   1479a:	9e e0       	ldi	r25, 0x0E	; 14
   1479c:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   147a0:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <tritri>
   147a4:	90 91 09 0a 	lds	r25, 0x0A09	; 0x800a09 <tritri+0x1>
   147a8:	25 e0       	ldi	r18, 0x05	; 5
   147aa:	28 9f       	mul	r18, r24
   147ac:	b0 01       	movw	r22, r0
   147ae:	29 9f       	mul	r18, r25
   147b0:	70 0d       	add	r23, r0
   147b2:	11 24       	eor	r1, r1
   147b4:	90 e0       	ldi	r25, 0x00	; 0
   147b6:	80 e0       	ldi	r24, 0x00	; 0
   147b8:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
   147bc:	20 e0       	ldi	r18, 0x00	; 0
   147be:	30 e0       	ldi	r19, 0x00	; 0
   147c0:	4a e7       	ldi	r20, 0x7A	; 122
   147c2:	54 e4       	ldi	r21, 0x44	; 68
   147c4:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3650
      send_mqtt_general_payload(&mqtt_client, str_topic, payload);
    */
    itoa(time_get_offset(), payload, 10);
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
   147c8:	8e 01       	movw	r16, r28
   147ca:	0f 5f       	subi	r16, 0xFF	; 255
   147cc:	1f 4f       	sbci	r17, 0xFF	; 255
   147ce:	22 e0       	ldi	r18, 0x02	; 2
   147d0:	44 e0       	ldi	r20, 0x04	; 4
   147d2:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3651
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
   147d6:	a8 01       	movw	r20, r16
   147d8:	61 ec       	ldi	r22, 0xC1	; 193
   147da:	77 e0       	ldi	r23, 0x07	; 7
   147dc:	8e e0       	ldi	r24, 0x0E	; 14
   147de:	9e e0       	ldi	r25, 0x0E	; 14
   147e0:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   147e4:	60 91 06 0a 	lds	r22, 0x0A06	; 0x800a06 <petnula>
   147e8:	70 91 07 0a 	lds	r23, 0x0A07	; 0x800a07 <petnula+0x1>
   147ec:	f3 e0       	ldi	r31, 0x03	; 3
   147ee:	66 0f       	add	r22, r22
   147f0:	77 1f       	adc	r23, r23
   147f2:	fa 95       	dec	r31
   147f4:	e1 f7       	brne	.-8      	; 0x147ee <main+0x5c0>
   147f6:	90 e0       	ldi	r25, 0x00	; 0
   147f8:	80 e0       	ldi	r24, 0x00	; 0
   147fa:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
   147fe:	20 e0       	ldi	r18, 0x00	; 0
   14800:	30 e0       	ldi	r19, 0x00	; 0
   14802:	4a e7       	ldi	r20, 0x7A	; 122
   14804:	54 e4       	ldi	r21, 0x44	; 68
   14806:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3653
    send_mqtt_general_payload(&mqtt_client, "time/ntp_offset", payload);
    ///
    dtostrf(prepocet_napeti(tritri, CONST_PREVOD_TRIV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
   1480a:	22 e0       	ldi	r18, 0x02	; 2
   1480c:	44 e0       	ldi	r20, 0x04	; 4
   1480e:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3654
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
   14812:	a8 01       	movw	r20, r16
   14814:	64 ed       	ldi	r22, 0xD4	; 212
   14816:	77 e0       	ldi	r23, 0x07	; 7
   14818:	8e e0       	ldi	r24, 0x0E	; 14
   1481a:	9e e0       	ldi	r25, 0x0E	; 14
   1481c:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_napeti():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3997
    return
      - float cislo s vysledkem ve Voltech
*/
float prepocet_napeti(uint16_t vstup, uint8_t prevodni_pomer)
{
  float volt = (vstup * prevodni_pomer) / 1000.0;
   14820:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <dvanact>
   14824:	90 91 05 0a 	lds	r25, 0x0A05	; 0x800a05 <dvanact+0x1>
   14828:	29 e3       	ldi	r18, 0x39	; 57
   1482a:	28 9f       	mul	r18, r24
   1482c:	b0 01       	movw	r22, r0
   1482e:	29 9f       	mul	r18, r25
   14830:	70 0d       	add	r23, r0
   14832:	11 24       	eor	r1, r1
   14834:	90 e0       	ldi	r25, 0x00	; 0
   14836:	80 e0       	ldi	r24, 0x00	; 0
   14838:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
   1483c:	20 e0       	ldi	r18, 0x00	; 0
   1483e:	30 e0       	ldi	r19, 0x00	; 0
   14840:	4a e7       	ldi	r20, 0x7A	; 122
   14842:	54 e4       	ldi	r21, 0x44	; 68
   14844:	0e 94 47 b5 	call	0x16a8e	; 0x16a8e <__divsf3>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3656
    send_mqtt_general_payload(&mqtt_client, "status/voltage/33V", payload);
    ///
    dtostrf(prepocet_napeti(petnula, CONST_PREVOD_PETV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
   14848:	22 e0       	ldi	r18, 0x02	; 2
   1484a:	44 e0       	ldi	r20, 0x04	; 4
   1484c:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3657
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
   14850:	a8 01       	movw	r20, r16
   14852:	67 ee       	ldi	r22, 0xE7	; 231
   14854:	77 e0       	ldi	r23, 0x07	; 7
   14856:	8e e0       	ldi	r24, 0x0E	; 14
   14858:	9e e0       	ldi	r25, 0x0E	; 14
   1485a:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
prepocet_proudu():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4012
*/
float prepocet_proudu(uint16_t vstup)
{
#define proud_constanta  470
  float proud = (vstup - proud_constanta) * 5 / 185;
  return vstup;
   1485e:	60 91 02 0a 	lds	r22, 0x0A02	; 0x800a02 <proud>
   14862:	70 91 03 0a 	lds	r23, 0x0A03	; 0x800a03 <proud+0x1>
   14866:	90 e0       	ldi	r25, 0x00	; 0
   14868:	80 e0       	ldi	r24, 0x00	; 0
   1486a:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
send_device_status():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3659
    send_mqtt_general_payload(&mqtt_client, "status/voltage/50V", payload);
    ///
    dtostrf(prepocet_napeti(dvanact, CONST_PREVOD_DVANACTV), 4, 2, payload);
    send_mqtt_general_payload(&mqtt_client, "status/voltage/12V", payload);
    ///
    dtostrf(prepocet_proudu(proud), 4, 2, payload);
   1486e:	22 e0       	ldi	r18, 0x02	; 2
   14870:	44 e0       	ldi	r20, 0x04	; 4
   14872:	0e 94 39 a9 	call	0x15272	; 0x15272 <dtostrf>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3660
    send_mqtt_general_payload(&mqtt_client, "status/current/consume", payload);
   14876:	a8 01       	movw	r20, r16
   14878:	6a ef       	ldi	r22, 0xFA	; 250
   1487a:	77 e0       	ldi	r23, 0x07	; 7
   1487c:	8e e0       	ldi	r24, 0x0E	; 14
   1487e:	9e e0       	ldi	r25, 0x0E	; 14
   14880:	0e 94 9a 5a 	call	0xb534	; 0xb534 <send_mqtt_general_payload(PubSubClient*, char*, char const*)>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3584
  char hostname[10];
  char payload[64];
  char tmp1[4];
  itoa(Global_HWwirenum, payload, 10);
  send_mqtt_general_payload(&mqtt_client, "1wire/count", payload);
  for (uint8_t i = 0; i < Global_HWwirenum; i++)
   14884:	e8 e5       	ldi	r30, 0x58	; 88
   14886:	ae 2e       	mov	r10, r30
   14888:	bb 24       	eor	r11, r11
   1488a:	b3 94       	inc	r11
   1488c:	10 e0       	ldi	r17, 0x00	; 0
   1488e:	00 e0       	ldi	r16, 0x00	; 0
   14890:	90 2e       	mov	r9, r16
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3685
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
    //// odeslu pouze pokud je ring pripraveny
    if (thermostat_ring_get_active(idx) != RING_FREE)
   14892:	80 2f       	mov	r24, r16
   14894:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
   14898:	8f 3f       	cpi	r24, 0xFF	; 255
   1489a:	09 f4       	brne	.+2      	; 0x1489e <main+0x670>
   1489c:	0d c1       	rjmp	.+538    	; 0x14ab8 <main+0x88a>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3687
    {
      thermostat_ring_get_name(idx, payload);
   1489e:	be 01       	movw	r22, r28
   148a0:	6f 5f       	subi	r22, 0xFF	; 255
   148a2:	7f 4f       	sbci	r23, 0xFF	; 255
   148a4:	80 2f       	mov	r24, r16
   148a6:	0e 94 85 54 	call	0xa90a	; 0xa90a <thermostat_ring_get_name(unsigned char, char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3688
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "name", payload);
   148aa:	9e 01       	movw	r18, r28
   148ac:	2f 5f       	subi	r18, 0xFF	; 255
   148ae:	3f 4f       	sbci	r19, 0xFF	; 255
   148b0:	41 eb       	ldi	r20, 0xB1	; 177
   148b2:	53 e0       	ldi	r21, 0x03	; 3
   148b4:	60 2f       	mov	r22, r16
   148b6:	8a e8       	ldi	r24, 0x8A	; 138
   148b8:	97 e0       	ldi	r25, 0x07	; 7
   148ba:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3689
      itoa(thermostat_ring_get_active(idx), payload, 10);
   148be:	80 2f       	mov	r24, r16
   148c0:	0e 94 19 54 	call	0xa832	; 0xa832 <thermostat_ring_get_active(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   148c4:	4a e0       	ldi	r20, 0x0A	; 10
   148c6:	be 01       	movw	r22, r28
   148c8:	6f 5f       	subi	r22, 0xFF	; 255
   148ca:	7f 4f       	sbci	r23, 0xFF	; 255
   148cc:	90 e0       	ldi	r25, 0x00	; 0
   148ce:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3690
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "active", payload);
   148d2:	9e 01       	movw	r18, r28
   148d4:	2f 5f       	subi	r18, 0xFF	; 255
   148d6:	3f 4f       	sbci	r19, 0xFF	; 255
   148d8:	4b eb       	ldi	r20, 0xBB	; 187
   148da:	53 e0       	ldi	r21, 0x03	; 3
   148dc:	60 2f       	mov	r22, r16
   148de:	8a e8       	ldi	r24, 0x8A	; 138
   148e0:	97 e0       	ldi	r25, 0x07	; 7
   148e2:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_program_id():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:144


//// nastaveni programu k ringu termostatu
uint8_t thermostat_ring_get_program_id(uint8_t idx)
{
  return EEPROM.read((eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx)) + eeprom_thermostat_program);
   148e6:	c5 01       	movw	r24, r10
   148e8:	03 96       	adiw	r24, 0x03	; 3
   148ea:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   148ee:	4a e0       	ldi	r20, 0x0A	; 10
   148f0:	be 01       	movw	r22, r28
   148f2:	6f 5f       	subi	r22, 0xFF	; 255
   148f4:	7f 4f       	sbci	r23, 0xFF	; 255
   148f6:	90 e0       	ldi	r25, 0x00	; 0
   148f8:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3692
      itoa(thermostat_ring_get_program_id(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "program", payload);
   148fc:	9e 01       	movw	r18, r28
   148fe:	2f 5f       	subi	r18, 0xFF	; 255
   14900:	3f 4f       	sbci	r19, 0xFF	; 255
   14902:	44 e5       	ldi	r20, 0x54	; 84
   14904:	56 e0       	ldi	r21, 0x06	; 6
   14906:	60 2f       	mov	r22, r16
   14908:	8a e8       	ldi	r24, 0x8A	; 138
   1490a:	97 e0       	ldi	r25, 0x07	; 7
   1490c:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3693
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
   14910:	80 2f       	mov	r24, r16
   14912:	0e 94 d0 53 	call	0xa7a0	; 0xa7a0 <thermostat_ring_get_mezni(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14916:	4a e0       	ldi	r20, 0x0A	; 10
   14918:	be 01       	movw	r22, r28
   1491a:	6f 5f       	subi	r22, 0xFF	; 255
   1491c:	7f 4f       	sbci	r23, 0xFF	; 255
   1491e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3694
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
   14922:	9e 01       	movw	r18, r28
   14924:	2f 5f       	subi	r18, 0xFF	; 255
   14926:	3f 4f       	sbci	r19, 0xFF	; 255
   14928:	4a e4       	ldi	r20, 0x4A	; 74
   1492a:	56 e0       	ldi	r21, 0x06	; 6
   1492c:	60 2f       	mov	r22, r16
   1492e:	8a e8       	ldi	r24, 0x8A	; 138
   14930:	97 e0       	ldi	r25, 0x07	; 7
   14932:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3695
      itoa(thermostat_ring_get_mode(idx), payload, 10);
   14936:	80 2f       	mov	r24, r16
   14938:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   1493c:	4a e0       	ldi	r20, 0x0A	; 10
   1493e:	be 01       	movw	r22, r28
   14940:	6f 5f       	subi	r22, 0xFF	; 255
   14942:	7f 4f       	sbci	r23, 0xFF	; 255
   14944:	90 e0       	ldi	r25, 0x00	; 0
   14946:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3696
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
   1494a:	9e 01       	movw	r18, r28
   1494c:	2f 5f       	subi	r18, 0xFF	; 255
   1494e:	3f 4f       	sbci	r19, 0xFF	; 255
   14950:	4d e6       	ldi	r20, 0x6D	; 109
   14952:	56 e0       	ldi	r21, 0x06	; 6
   14954:	60 2f       	mov	r22, r16
   14956:	8a e8       	ldi	r24, 0x8A	; 138
   14958:	97 e0       	ldi	r25, 0x07	; 7
   1495a:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3697
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
   1495e:	80 2f       	mov	r24, r16
   14960:	0e 94 58 53 	call	0xa6b0	; 0xa6b0 <thermostat_ring_get_mode(unsigned char)>
convert_mode_text():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4063
  return mode;
}

void convert_mode_text(uint8_t mode, char *str)
{
  if (mode == TERM_MODE_OFF)   strcpy(str, "off");
   14964:	61 e1       	ldi	r22, 0x11	; 17
   14966:	78 e0       	ldi	r23, 0x08	; 8
   14968:	88 23       	and	r24, r24
   1496a:	a1 f0       	breq	.+40     	; 0x14994 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4064
  if (mode == TERM_MODE_MAX)   strcpy(str, "heat");
   1496c:	60 e5       	ldi	r22, 0x50	; 80
   1496e:	75 e0       	ldi	r23, 0x05	; 5
   14970:	81 30       	cpi	r24, 0x01	; 1
   14972:	81 f0       	breq	.+32     	; 0x14994 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4065
  if (mode == TERM_MODE_MAN_HEAT)   strcpy(str, "manual");
   14974:	65 e5       	ldi	r22, 0x55	; 85
   14976:	75 e0       	ldi	r23, 0x05	; 5
   14978:	83 30       	cpi	r24, 0x03	; 3
   1497a:	61 f0       	breq	.+24     	; 0x14994 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4066
  if (mode == TERM_MODE_PROG)   strcpy(str, "auto");
   1497c:	6c e5       	ldi	r22, 0x5C	; 92
   1497e:	75 e0       	ldi	r23, 0x05	; 5
   14980:	82 30       	cpi	r24, 0x02	; 2
   14982:	41 f0       	breq	.+16     	; 0x14994 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4067
  if (mode == TERM_MODE_CLIMATE_MAX)   strcpy(str, "cool");
   14984:	61 e6       	ldi	r22, 0x61	; 97
   14986:	75 e0       	ldi	r23, 0x05	; 5
   14988:	84 30       	cpi	r24, 0x04	; 4
   1498a:	21 f0       	breq	.+8      	; 0x14994 <main+0x766>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4068
  if (mode == TERM_MODE_FAN)   strcpy(str, "fan_only");
   1498c:	86 30       	cpi	r24, 0x06	; 6
   1498e:	31 f4       	brne	.+12     	; 0x1499c <main+0x76e>
   14990:	66 e6       	ldi	r22, 0x66	; 102
   14992:	75 e0       	ldi	r23, 0x05	; 5
   14994:	ce 01       	movw	r24, r28
   14996:	01 96       	adiw	r24, 0x01	; 1
   14998:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3698
      itoa(thermostat_ring_get_mezni(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "threshold", payload);
      itoa(thermostat_ring_get_mode(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "mode", payload);
      convert_mode_text(thermostat_ring_get_mode(idx), payload);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "text_mode", payload);
   1499c:	9e 01       	movw	r18, r28
   1499e:	2f 5f       	subi	r18, 0xFF	; 255
   149a0:	3f 4f       	sbci	r19, 0xFF	; 255
   149a2:	48 e6       	ldi	r20, 0x68	; 104
   149a4:	56 e0       	ldi	r21, 0x06	; 6
   149a6:	69 2d       	mov	r22, r9
   149a8:	8a e8       	ldi	r24, 0x8A	; 138
   149aa:	97 e0       	ldi	r25, 0x07	; 7
   149ac:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_state():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:19
uint8_t therm_power[MAX_THERMOSTAT];

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_state(uint8_t idx)
{
  return therm_stav[idx];
   149b0:	f8 01       	movw	r30, r16
   149b2:	e5 5f       	subi	r30, 0xF5	; 245
   149b4:	f5 4f       	sbci	r31, 0xF5	; 245
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3699
      itoa(thermostat_ring_get_state(idx), payload, 10);
   149b6:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   149b8:	4a e0       	ldi	r20, 0x0A	; 10
   149ba:	be 01       	movw	r22, r28
   149bc:	6f 5f       	subi	r22, 0xFF	; 255
   149be:	7f 4f       	sbci	r23, 0xFF	; 255
   149c0:	90 e0       	ldi	r25, 0x00	; 0
   149c2:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3700
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status", payload);
   149c6:	9e 01       	movw	r18, r28
   149c8:	2f 5f       	subi	r18, 0xFF	; 255
   149ca:	3f 4f       	sbci	r19, 0xFF	; 255
   149cc:	45 e1       	ldi	r20, 0x15	; 21
   149ce:	58 e0       	ldi	r21, 0x08	; 8
   149d0:	69 2d       	mov	r22, r9
   149d2:	8a e8       	ldi	r24, 0x8A	; 138
   149d4:	97 e0       	ldi	r25, 0x07	; 7
   149d6:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_asociate_tds():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:166


/// ziska/nastavi cislo tds k ringu termostatu
uint8_t thermostat_ring_get_asociate_tds(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_tds);
   149da:	c5 01       	movw	r24, r10
   149dc:	04 96       	adiw	r24, 0x04	; 4
   149de:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   149e2:	88 2e       	mov	r8, r24
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3702
      tdsid = thermostat_ring_get_asociate_tds(idx);
      if (tdsid >= TDS_MEMORY_MAP_TDS && tdsid < TDS_MEMORY_MAP_RTDS)
   149e4:	3f e0       	ldi	r19, 0x0F	; 15
   149e6:	38 17       	cp	r19, r24
   149e8:	88 f0       	brcs	.+34     	; 0x14a0c <main+0x7de>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   149ea:	4a e0       	ldi	r20, 0x0A	; 10
   149ec:	be 01       	movw	r22, r28
   149ee:	6f 5f       	subi	r22, 0xFF	; 255
   149f0:	7f 4f       	sbci	r23, 0xFF	; 255
   149f2:	90 e0       	ldi	r25, 0x00	; 0
   149f4:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3705
      {
        itoa(tdsid, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "tds", payload);
   149f8:	9e 01       	movw	r18, r28
   149fa:	2f 5f       	subi	r18, 0xFF	; 255
   149fc:	3f 4f       	sbci	r19, 0xFF	; 255
   149fe:	47 eb       	ldi	r20, 0xB7	; 183
   14a00:	53 e0       	ldi	r21, 0x03	; 3
   14a02:	69 2d       	mov	r22, r9
   14a04:	8a e8       	ldi	r24, 0x8A	; 138
   14a06:	97 e0       	ldi	r25, 0x07	; 7
   14a08:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3707
      }
      if (tdsid >= TDS_MEMORY_MAP_RTDS && tdsid < 127)
   14a0c:	80 ef       	ldi	r24, 0xF0	; 240
   14a0e:	88 0d       	add	r24, r8
   14a10:	8f 36       	cpi	r24, 0x6F	; 111
   14a12:	a0 f4       	brcc	.+40     	; 0x14a3c <main+0x80e>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14a14:	4a e0       	ldi	r20, 0x0A	; 10
   14a16:	be 01       	movw	r22, r28
   14a18:	6f 5f       	subi	r22, 0xFF	; 255
   14a1a:	7f 4f       	sbci	r23, 0xFF	; 255
   14a1c:	a8 2d       	mov	r26, r8
   14a1e:	a0 51       	subi	r26, 0x10	; 16
   14a20:	bb 0b       	sbc	r27, r27
   14a22:	cd 01       	movw	r24, r26
   14a24:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3710
      {
        itoa(tdsid - TDS_MEMORY_MAP_RTDS, payload, 10);
        send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "rtds", payload);
   14a28:	9e 01       	movw	r18, r28
   14a2a:	2f 5f       	subi	r18, 0xFF	; 255
   14a2c:	3f 4f       	sbci	r19, 0xFF	; 255
   14a2e:	46 eb       	ldi	r20, 0xB6	; 182
   14a30:	53 e0       	ldi	r21, 0x03	; 3
   14a32:	69 2d       	mov	r22, r9
   14a34:	8a e8       	ldi	r24, 0x8A	; 138
   14a36:	97 e0       	ldi	r25, 0x07	; 7
   14a38:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_output():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:123
}

/// funkce ktera nastavuje/zjistuje jestli dany operacni termostat je pripraven
uint8_t thermostat_ring_get_output(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_associate_output);
   14a3c:	c5 01       	movw	r24, r10
   14a3e:	07 96       	adiw	r24, 0x07	; 7
   14a40:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14a44:	4a e0       	ldi	r20, 0x0A	; 10
   14a46:	be 01       	movw	r22, r28
   14a48:	6f 5f       	subi	r22, 0xFF	; 255
   14a4a:	7f 4f       	sbci	r23, 0xFF	; 255
   14a4c:	90 e0       	ldi	r25, 0x00	; 0
   14a4e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3713
      }
      itoa(thermostat_ring_get_output(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output", payload);
   14a52:	9e 01       	movw	r18, r28
   14a54:	2f 5f       	subi	r18, 0xFF	; 255
   14a56:	3f 4f       	sbci	r19, 0xFF	; 255
   14a58:	42 e7       	ldi	r20, 0x72	; 114
   14a5a:	56 e0       	ldi	r21, 0x06	; 6
   14a5c:	69 2d       	mov	r22, r9
   14a5e:	8a e8       	ldi	r24, 0x8A	; 138
   14a60:	97 e0       	ldi	r25, 0x07	; 7
   14a62:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
thermostat_ring_get_status_data():
/tmp/arduino_build_832911/sketch/saric_thermostat.cpp:193
}
//////////////////////////////////////
//// nastaveni/ziska modu k ringu termostatu
uint8_t thermostat_ring_get_status_data(uint8_t idx)
{
  return EEPROM.read(eeprom_thermostat_first_byte + (eeprom_thermostat_size_bytes * idx) + eeprom_thermostat_status_bites);
   14a66:	c5 01       	movw	r24, r10
   14a68:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14a6c:	4a e0       	ldi	r20, 0x0A	; 10
   14a6e:	be 01       	movw	r22, r28
   14a70:	6f 5f       	subi	r22, 0xFF	; 255
   14a72:	7f 4f       	sbci	r23, 0xFF	; 255
   14a74:	90 e0       	ldi	r25, 0x00	; 0
   14a76:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3716

      itoa(thermostat_ring_get_status_data(idx), payload, 10);
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "status_bites", payload);
   14a7a:	9e 01       	movw	r18, r28
   14a7c:	2f 5f       	subi	r18, 0xFF	; 255
   14a7e:	3f 4f       	sbci	r19, 0xFF	; 255
   14a80:	4c e1       	ldi	r20, 0x1C	; 28
   14a82:	58 e0       	ldi	r21, 0x08	; 8
   14a84:	69 2d       	mov	r22, r9
   14a86:	8a e8       	ldi	r24, 0x8A	; 138
   14a88:	97 e0       	ldi	r25, 0x07	; 7
   14a8a:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3718

      itoa(last_output_update[idx], payload, 10);
   14a8e:	f8 01       	movw	r30, r16
   14a90:	e0 5f       	subi	r30, 0xF0	; 240
   14a92:	f5 4f       	sbci	r31, 0xF5	; 245
   14a94:	80 81       	ld	r24, Z
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14a96:	4a e0       	ldi	r20, 0x0A	; 10
   14a98:	be 01       	movw	r22, r28
   14a9a:	6f 5f       	subi	r22, 0xFF	; 255
   14a9c:	7f 4f       	sbci	r23, 0xFF	; 255
   14a9e:	90 e0       	ldi	r25, 0x00	; 0
   14aa0:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_ring():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3719
      send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "ring", idx, "output_update", payload);
   14aa4:	9e 01       	movw	r18, r28
   14aa6:	2f 5f       	subi	r18, 0xFF	; 255
   14aa8:	3f 4f       	sbci	r19, 0xFF	; 255
   14aaa:	49 e2       	ldi	r20, 0x29	; 41
   14aac:	58 e0       	ldi	r21, 0x08	; 8
   14aae:	69 2d       	mov	r22, r9
   14ab0:	8a e8       	ldi	r24, 0x8A	; 138
   14ab2:	97 e0       	ldi	r25, 0x07	; 7
   14ab4:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   14ab8:	0f 5f       	subi	r16, 0xFF	; 255
   14aba:	1f 4f       	sbci	r17, 0xFF	; 255
   14abc:	b1 e2       	ldi	r27, 0x21	; 33
   14abe:	ab 0e       	add	r10, r27
   14ac0:	b1 1c       	adc	r11, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3683
  //char hostname[10];
  char payload[64];
  uint8_t tdsid;
  //char tmp1[12];
  //device_get_name(hostname);
  for (uint8_t idx = 0; idx < MAX_THERMOSTAT; idx++)
   14ac2:	ed ef       	ldi	r30, 0xFD	; 253
   14ac4:	ae 16       	cp	r10, r30
   14ac6:	e1 e0       	ldi	r30, 0x01	; 1
   14ac8:	be 06       	cpc	r11, r30
   14aca:	09 f0       	breq	.+2      	; 0x14ace <main+0x8a0>
   14acc:	e1 ce       	rjmp	.-574    	; 0x14890 <main+0x662>
   14ace:	65 e1       	ldi	r22, 0x15	; 21
   14ad0:	a6 2e       	mov	r10, r22
   14ad2:	6a e0       	ldi	r22, 0x0A	; 10
   14ad4:	b6 2e       	mov	r11, r22
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14ad6:	10 e0       	ldi	r17, 0x00	; 0
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
    if (get_tds18s20(id, &tds) == 1)
      if (tds.used == 1) if (status_tds18s20[id].online == True)
        {
          tt = status_tds18s20[id].temp / 10;
   14ad8:	7a e0       	ldi	r23, 0x0A	; 10
   14ada:	87 2e       	mov	r8, r23
   14adc:	91 2c       	mov	r9, r1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3739
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
    if (get_tds18s20(id, &tds) == 1)
   14ade:	be 01       	movw	r22, r28
   14ae0:	6f 5b       	subi	r22, 0xBF	; 191
   14ae2:	7f 4f       	sbci	r23, 0xFF	; 255
   14ae4:	81 2f       	mov	r24, r17
   14ae6:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
   14aea:	81 30       	cpi	r24, 0x01	; 1
   14aec:	09 f0       	breq	.+2      	; 0x14af0 <main+0x8c2>
   14aee:	d2 c0       	rjmp	.+420    	; 0x14c94 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3740
      if (tds.used == 1) if (status_tds18s20[id].online == True)
   14af0:	22 96       	adiw	r28, 0x02	; 2
   14af2:	8f ad       	ldd	r24, Y+63	; 0x3f
   14af4:	22 97       	sbiw	r28, 0x02	; 2
   14af6:	81 30       	cpi	r24, 0x01	; 1
   14af8:	09 f0       	breq	.+2      	; 0x14afc <main+0x8ce>
   14afa:	cc c0       	rjmp	.+408    	; 0x14c94 <main+0xa66>
   14afc:	d5 01       	movw	r26, r10
   14afe:	5b 96       	adiw	r26, 0x1b	; 27
   14b00:	8c 91       	ld	r24, X
   14b02:	5b 97       	sbiw	r26, 0x1b	; 27
   14b04:	81 30       	cpi	r24, 0x01	; 1
   14b06:	09 f0       	breq	.+2      	; 0x14b0a <main+0x8dc>
   14b08:	c5 c0       	rjmp	.+394    	; 0x14c94 <main+0xa66>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3742
        {
          tt = status_tds18s20[id].temp / 10;
   14b0a:	15 96       	adiw	r26, 0x05	; 5
   14b0c:	8d 91       	ld	r24, X+
   14b0e:	9c 91       	ld	r25, X
   14b10:	b4 01       	movw	r22, r8
   14b12:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   14b16:	cb 01       	movw	r24, r22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14b18:	4a e0       	ldi	r20, 0x0A	; 10
   14b1a:	be 01       	movw	r22, r28
   14b1c:	6f 5f       	subi	r22, 0xFF	; 255
   14b1e:	7f 4f       	sbci	r23, 0xFF	; 255
   14b20:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3744
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp", payload);
   14b24:	9e 01       	movw	r18, r28
   14b26:	2f 5f       	subi	r18, 0xFF	; 255
   14b28:	3f 4f       	sbci	r19, 0xFF	; 255
   14b2a:	42 ec       	ldi	r20, 0xC2	; 194
   14b2c:	53 e0       	ldi	r21, 0x03	; 3
   14b2e:	61 2f       	mov	r22, r17
   14b30:	87 eb       	ldi	r24, 0xB7	; 183
   14b32:	93 e0       	ldi	r25, 0x03	; 3
   14b34:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
   14b38:	30 e0       	ldi	r19, 0x00	; 0
   14b3a:	20 e0       	ldi	r18, 0x00	; 0
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3745
          avg = 0;
   14b3c:	60 e0       	ldi	r22, 0x00	; 0
   14b3e:	70 e0       	ldi	r23, 0x00	; 0
   14b40:	cb 01       	movw	r24, r22
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3746
          for (uint8_t c = 0; c < MAX_AVG_TEMP; c++) avg = avg + status_tds18s20[id].average_temp[c];
   14b42:	f9 01       	movw	r30, r18
   14b44:	ee 0f       	add	r30, r30
   14b46:	ff 1f       	adc	r31, r31
   14b48:	ea 0d       	add	r30, r10
   14b4a:	fb 1d       	adc	r31, r11
   14b4c:	47 80       	ldd	r4, Z+7	; 0x07
   14b4e:	50 84       	ldd	r5, Z+8	; 0x08
   14b50:	05 2c       	mov	r0, r5
   14b52:	00 0c       	add	r0, r0
   14b54:	66 08       	sbc	r6, r6
   14b56:	77 08       	sbc	r7, r7
   14b58:	64 0d       	add	r22, r4
   14b5a:	75 1d       	adc	r23, r5
   14b5c:	86 1d       	adc	r24, r6
   14b5e:	97 1d       	adc	r25, r7
   14b60:	2f 5f       	subi	r18, 0xFF	; 255
   14b62:	3f 4f       	sbci	r19, 0xFF	; 255
   14b64:	2a 30       	cpi	r18, 0x0A	; 10
   14b66:	31 05       	cpc	r19, r1
   14b68:	61 f7       	brne	.-40     	; 0x14b42 <main+0x914>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3748
          avg = avg / MAX_AVG_TEMP;
          avg = avg / 10;
   14b6a:	24 e6       	ldi	r18, 0x64	; 100
   14b6c:	30 e0       	ldi	r19, 0x00	; 0
   14b6e:	40 e0       	ldi	r20, 0x00	; 0
   14b70:	50 e0       	ldi	r21, 0x00	; 0
   14b72:	0e 94 a1 b4 	call	0x16942	; 0x16942 <__divmodsi4>
   14b76:	c9 01       	movw	r24, r18
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14b78:	4a e0       	ldi	r20, 0x0A	; 10
   14b7a:	be 01       	movw	r22, r28
   14b7c:	6f 5f       	subi	r22, 0xFF	; 255
   14b7e:	7f 4f       	sbci	r23, 0xFF	; 255
   14b80:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3750
          itoa(avg, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "temp_avg", payload);
   14b84:	9e 01       	movw	r18, r28
   14b86:	2f 5f       	subi	r18, 0xFF	; 255
   14b88:	3f 4f       	sbci	r19, 0xFF	; 255
   14b8a:	47 e3       	ldi	r20, 0x37	; 55
   14b8c:	58 e0       	ldi	r21, 0x08	; 8
   14b8e:	61 2f       	mov	r22, r17
   14b90:	87 eb       	ldi	r24, 0xB7	; 183
   14b92:	93 e0       	ldi	r25, 0x03	; 3
   14b94:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3752

          strcpy(payload, tds.name);
   14b98:	cc 57       	subi	r28, 0x7C	; 124
   14b9a:	df 4f       	sbci	r29, 0xFF	; 255
   14b9c:	68 81       	ld	r22, Y
   14b9e:	79 81       	ldd	r23, Y+1	; 0x01
   14ba0:	c4 58       	subi	r28, 0x84	; 132
   14ba2:	d0 40       	sbci	r29, 0x00	; 0
   14ba4:	ce 01       	movw	r24, r28
   14ba6:	01 96       	adiw	r24, 0x01	; 1
   14ba8:	0e 94 16 b7 	call	0x16e2c	; 0x16e2c <strcpy>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3753
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "name", payload);
   14bac:	9e 01       	movw	r18, r28
   14bae:	2f 5f       	subi	r18, 0xFF	; 255
   14bb0:	3f 4f       	sbci	r19, 0xFF	; 255
   14bb2:	41 eb       	ldi	r20, 0xB1	; 177
   14bb4:	53 e0       	ldi	r21, 0x03	; 3
   14bb6:	61 2f       	mov	r22, r17
   14bb8:	87 eb       	ldi	r24, 0xB7	; 183
   14bba:	93 e0       	ldi	r25, 0x03	; 3
   14bbc:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14bc0:	4a e0       	ldi	r20, 0x0A	; 10
   14bc2:	be 01       	movw	r22, r28
   14bc4:	6f 5f       	subi	r22, 0xFF	; 255
   14bc6:	7f 4f       	sbci	r23, 0xFF	; 255
   14bc8:	2d 96       	adiw	r28, 0x0d	; 13
   14bca:	8e ad       	ldd	r24, Y+62	; 0x3e
   14bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
   14bce:	2d 97       	sbiw	r28, 0x0d	; 13
   14bd0:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3756
          tt = tds.offset;
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "offset", payload);
   14bd4:	9e 01       	movw	r18, r28
   14bd6:	2f 5f       	subi	r18, 0xFF	; 255
   14bd8:	3f 4f       	sbci	r19, 0xFF	; 255
   14bda:	4a eb       	ldi	r20, 0xBA	; 186
   14bdc:	57 e0       	ldi	r21, 0x07	; 7
   14bde:	61 2f       	mov	r22, r17
   14be0:	87 eb       	ldi	r24, 0xB7	; 183
   14be2:	93 e0       	ldi	r25, 0x03	; 3
   14be4:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3757
          tt = status_tds18s20[id].online;
   14be8:	f5 01       	movw	r30, r10
   14bea:	83 8d       	ldd	r24, Z+27	; 0x1b
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14bec:	4a e0       	ldi	r20, 0x0A	; 10
   14bee:	be 01       	movw	r22, r28
   14bf0:	6f 5f       	subi	r22, 0xFF	; 255
   14bf2:	7f 4f       	sbci	r23, 0xFF	; 255
   14bf4:	90 e0       	ldi	r25, 0x00	; 0
   14bf6:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3759
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "online", payload);
   14bfa:	9e 01       	movw	r18, r28
   14bfc:	2f 5f       	subi	r18, 0xFF	; 255
   14bfe:	3f 4f       	sbci	r19, 0xFF	; 255
   14c00:	40 e4       	ldi	r20, 0x40	; 64
   14c02:	58 e0       	ldi	r21, 0x08	; 8
   14c04:	61 2f       	mov	r22, r17
   14c06:	87 eb       	ldi	r24, 0xB7	; 183
   14c08:	93 e0       	ldi	r25, 0x03	; 3
   14c0a:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3760
          payload[0] = 0;
   14c0e:	19 82       	std	Y+1, r1	; 0x01
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3761
          createString(payload, ':', tds.rom, 8, 16);
   14c10:	00 e1       	ldi	r16, 0x10	; 16
   14c12:	28 e0       	ldi	r18, 0x08	; 8
   14c14:	ca 57       	subi	r28, 0x7A	; 122
   14c16:	df 4f       	sbci	r29, 0xFF	; 255
   14c18:	48 81       	ld	r20, Y
   14c1a:	59 81       	ldd	r21, Y+1	; 0x01
   14c1c:	c6 58       	subi	r28, 0x86	; 134
   14c1e:	d0 40       	sbci	r29, 0x00	; 0
   14c20:	6a e3       	ldi	r22, 0x3A	; 58
   14c22:	ce 01       	movw	r24, r28
   14c24:	01 96       	adiw	r24, 0x01	; 1
   14c26:	0e 94 cd 96 	call	0x12d9a	; 0x12d9a <createString(char*, char, unsigned char*, unsigned char, unsigned char)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3762
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "rom", payload);
   14c2a:	9e 01       	movw	r18, r28
   14c2c:	2f 5f       	subi	r18, 0xFF	; 255
   14c2e:	3f 4f       	sbci	r19, 0xFF	; 255
   14c30:	49 e0       	ldi	r20, 0x09	; 9
   14c32:	57 e0       	ldi	r21, 0x07	; 7
   14c34:	61 2f       	mov	r22, r17
   14c36:	87 eb       	ldi	r24, 0xB7	; 183
   14c38:	93 e0       	ldi	r25, 0x03	; 3
   14c3a:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3763
          tt = tds.period;
   14c3e:	66 96       	adiw	r28, 0x16	; 22
   14c40:	8f ad       	ldd	r24, Y+63	; 0x3f
   14c42:	66 97       	sbiw	r28, 0x16	; 22
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14c44:	4a e0       	ldi	r20, 0x0A	; 10
   14c46:	be 01       	movw	r22, r28
   14c48:	6f 5f       	subi	r22, 0xFF	; 255
   14c4a:	7f 4f       	sbci	r23, 0xFF	; 255
   14c4c:	90 e0       	ldi	r25, 0x00	; 0
   14c4e:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3765
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "period", payload);
   14c52:	9e 01       	movw	r18, r28
   14c54:	2f 5f       	subi	r18, 0xFF	; 255
   14c56:	3f 4f       	sbci	r19, 0xFF	; 255
   14c58:	43 e4       	ldi	r20, 0x43	; 67
   14c5a:	56 e0       	ldi	r21, 0x06	; 6
   14c5c:	61 2f       	mov	r22, r17
   14c5e:	87 eb       	ldi	r24, 0xB7	; 183
   14c60:	93 e0       	ldi	r25, 0x03	; 3
   14c62:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3767

          tt = (uptime & 0xff) - status_tds18s20[id].period_now;
   14c66:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <uptime>
   14c6a:	d5 01       	movw	r26, r10
   14c6c:	5c 96       	adiw	r26, 0x1c	; 28
   14c6e:	9c 91       	ld	r25, X
itoa():
/home/saric/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/stdlib.h:439
   14c70:	4a e0       	ldi	r20, 0x0A	; 10
   14c72:	be 01       	movw	r22, r28
   14c74:	6f 5f       	subi	r22, 0xFF	; 255
   14c76:	7f 4f       	sbci	r23, 0xFF	; 255
   14c78:	89 1b       	sub	r24, r25
   14c7a:	99 0b       	sbc	r25, r25
   14c7c:	0e 94 cd aa 	call	0x1559a	; 0x1559a <__itoa_ncheck>
send_mqtt_tds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3769
          itoa(tt, payload, 10);
          send_mqtt_message_prefix_id_topic_payload(&mqtt_client, "tds", id, "start_at", payload);
   14c80:	9e 01       	movw	r18, r28
   14c82:	2f 5f       	subi	r18, 0xFF	; 255
   14c84:	3f 4f       	sbci	r19, 0xFF	; 255
   14c86:	47 e4       	ldi	r20, 0x47	; 71
   14c88:	58 e0       	ldi	r21, 0x08	; 8
   14c8a:	61 2f       	mov	r22, r17
   14c8c:	87 eb       	ldi	r24, 0xB7	; 183
   14c8e:	93 e0       	ldi	r25, 0x03	; 3
   14c90:	0e 94 27 96 	call	0x12c4e	; 0x12c4e <send_mqtt_message_prefix_id_topic_payload(PubSubClient*, char*, unsigned char, char*, char*) [clone .constprop.131]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3738
  struct_DDS18s20 tds;
  char payload[64];
  char tmp1[4];
  int tt;
  long avg = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14c94:	1f 5f       	subi	r17, 0xFF	; 255
   14c96:	be e1       	ldi	r27, 0x1E	; 30
   14c98:	ab 0e       	add	r10, r27
   14c9a:	b1 1c       	adc	r11, r1
   14c9c:	16 30       	cpi	r17, 0x06	; 6
   14c9e:	09 f0       	breq	.+2      	; 0x14ca2 <main+0xa74>
   14ca0:	1e cf       	rjmp	.-452    	; 0x14ade <main+0x8b0>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4714
    send_mqtt_tds();

    //send_mqtt_program();
    ///thermostat();
    //mqtt_send_pid_variable();
    send_mqtt_remote_tds_status();
   14ca2:	0e 94 d9 5e 	call	0xbdb2	; 0xbdb2 <send_mqtt_remote_tds_status()>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4723
    //send_mesh_status();


  }

  if ((millis() - milis_1s) > 1000)
   14ca6:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14caa:	00 91 c7 10 	lds	r16, 0x10C7	; 0x8010c7 <milis_1s>
   14cae:	10 91 c8 10 	lds	r17, 0x10C8	; 0x8010c8 <milis_1s+0x1>
   14cb2:	20 91 c9 10 	lds	r18, 0x10C9	; 0x8010c9 <milis_1s+0x2>
   14cb6:	30 91 ca 10 	lds	r19, 0x10CA	; 0x8010ca <milis_1s+0x3>
   14cba:	60 1b       	sub	r22, r16
   14cbc:	71 0b       	sbc	r23, r17
   14cbe:	82 0b       	sbc	r24, r18
   14cc0:	93 0b       	sbc	r25, r19
   14cc2:	69 3e       	cpi	r22, 0xE9	; 233
   14cc4:	73 40       	sbci	r23, 0x03	; 3
   14cc6:	81 05       	cpc	r24, r1
   14cc8:	91 05       	cpc	r25, r1
   14cca:	08 f4       	brcc	.+2      	; 0x14cce <main+0xaa0>
   14ccc:	62 c1       	rjmp	.+708    	; 0x14f92 <main+0xd64>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4725
  {
    milis_1s = millis();
   14cce:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14cd2:	60 93 c7 10 	sts	0x10C7, r22	; 0x8010c7 <milis_1s>
   14cd6:	70 93 c8 10 	sts	0x10C8, r23	; 0x8010c8 <milis_1s+0x1>
   14cda:	80 93 c9 10 	sts	0x10C9, r24	; 0x8010c9 <milis_1s+0x2>
   14cde:	90 93 ca 10 	sts	0x10CA, r25	; 0x8010ca <milis_1s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4726
    uptime++;
   14ce2:	40 90 d2 0a 	lds	r4, 0x0AD2	; 0x800ad2 <uptime>
   14ce6:	50 90 d3 0a 	lds	r5, 0x0AD3	; 0x800ad3 <uptime+0x1>
   14cea:	60 90 d4 0a 	lds	r6, 0x0AD4	; 0x800ad4 <uptime+0x2>
   14cee:	70 90 d5 0a 	lds	r7, 0x0AD5	; 0x800ad5 <uptime+0x3>
   14cf2:	ff ef       	ldi	r31, 0xFF	; 255
   14cf4:	4f 1a       	sub	r4, r31
   14cf6:	5f 0a       	sbc	r5, r31
   14cf8:	6f 0a       	sbc	r6, r31
   14cfa:	7f 0a       	sbc	r7, r31
   14cfc:	40 92 d2 0a 	sts	0x0AD2, r4	; 0x800ad2 <uptime>
   14d00:	50 92 d3 0a 	sts	0x0AD3, r5	; 0x800ad3 <uptime+0x1>
   14d04:	60 92 d4 0a 	sts	0x0AD4, r6	; 0x800ad4 <uptime+0x2>
   14d08:	70 92 d5 0a 	sts	0x0AD5, r7	; 0x800ad5 <uptime+0x3>
   14d0c:	05 e1       	ldi	r16, 0x15	; 21
   14d0e:	1a e0       	ldi	r17, 0x0A	; 10
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   14d10:	b1 2c       	mov	r11, r1
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
  {
    get_tds18s20(w, &tds);
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   14d12:	92 01       	movw	r18, r4
   14d14:	33 27       	eor	r19, r19
   14d16:	ce 57       	subi	r28, 0x7E	; 126
   14d18:	df 4f       	sbci	r29, 0xFF	; 255
   14d1a:	39 83       	std	Y+1, r19	; 0x01
   14d1c:	28 83       	st	Y, r18
   14d1e:	c2 58       	subi	r28, 0x82	; 130
   14d20:	d0 40       	sbci	r29, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:272
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
  {
    get_tds18s20(w, &tds);
   14d22:	be 01       	movw	r22, r28
   14d24:	6f 5f       	subi	r22, 0xFF	; 255
   14d26:	7f 4f       	sbci	r23, 0xFF	; 255
   14d28:	8b 2d       	mov	r24, r11
   14d2a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:273
    if ((tds.used == 1) && (((uptime & 0xff) - status_tds18s20[w].period_now) > tds.period))
   14d2e:	a9 80       	ldd	r10, Y+1	; 0x01
   14d30:	31 e0       	ldi	r19, 0x01	; 1
   14d32:	a3 12       	cpse	r10, r19
   14d34:	f7 c0       	rjmp	.+494    	; 0x14f24 <main+0xcf6>
   14d36:	d8 01       	movw	r26, r16
   14d38:	5c 96       	adiw	r26, 0x1c	; 28
   14d3a:	8c 91       	ld	r24, X
   14d3c:	5c 97       	sbiw	r26, 0x1c	; 28
   14d3e:	ce 57       	subi	r28, 0x7E	; 126
   14d40:	df 4f       	sbci	r29, 0xFF	; 255
   14d42:	e8 81       	ld	r30, Y
   14d44:	f9 81       	ldd	r31, Y+1	; 0x01
   14d46:	c2 58       	subi	r28, 0x82	; 130
   14d48:	d0 40       	sbci	r29, 0x00	; 0
   14d4a:	e8 1b       	sub	r30, r24
   14d4c:	f1 09       	sbc	r31, r1
   14d4e:	2d 89       	ldd	r18, Y+21	; 0x15
   14d50:	2e 17       	cp	r18, r30
   14d52:	1f 06       	cpc	r1, r31
   14d54:	08 f0       	brcs	.+2      	; 0x14d58 <main+0xb2a>
   14d56:	e6 c0       	rjmp	.+460    	; 0x14f24 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:275
    {
      if (status_tds18s20[w].wait == false)
   14d58:	5d 96       	adiw	r26, 0x1d	; 29
   14d5a:	8c 91       	ld	r24, X
   14d5c:	81 11       	cpse	r24, r1
   14d5e:	10 c0       	rjmp	.+32     	; 0x14d80 <main+0xb52>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:277
      {
        owReset(tds.assigned_ds2482);
   14d60:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d62:	0e 94 38 92 	call	0x12470	; 0x12470 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:278
        owMatchRom(tds.assigned_ds2482, tds.rom);
   14d66:	be 01       	movw	r22, r28
   14d68:	6e 5f       	subi	r22, 0xFE	; 254
   14d6a:	7f 4f       	sbci	r23, 0xFF	; 255
   14d6c:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d6e:	0e 94 19 92 	call	0x12432	; 0x12432 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:279
        owWriteByte(tds.assigned_ds2482, OW_CONVERT_T);
   14d72:	64 e4       	ldi	r22, 0x44	; 68
   14d74:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d76:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <ds2482owWriteByte(unsigned char, unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:280
        status_tds18s20[w].wait = true;
   14d7a:	d8 01       	movw	r26, r16
   14d7c:	5d 96       	adiw	r26, 0x1d	; 29
   14d7e:	ac 92       	st	X, r10
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:282
      }
      if (status_tds18s20[w].wait == true)
   14d80:	f8 01       	movw	r30, r16
   14d82:	a5 8c       	ldd	r10, Z+29	; 0x1d
   14d84:	f1 e0       	ldi	r31, 0x01	; 1
   14d86:	af 12       	cpse	r10, r31
   14d88:	cd c0       	rjmp	.+410    	; 0x14f24 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:284
      {
        owReset(tds.assigned_ds2482);
   14d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d8c:	0e 94 38 92 	call	0x12470	; 0x12470 <ds2482owReset(unsigned char)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:285
        owMatchRom(tds.assigned_ds2482, tds.rom);
   14d90:	be 01       	movw	r22, r28
   14d92:	6e 5f       	subi	r22, 0xFE	; 254
   14d94:	7f 4f       	sbci	r23, 0xFF	; 255
   14d96:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d98:	0e 94 19 92 	call	0x12432	; 0x12432 <owMatchRom(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:286
        owReadByte(tds.assigned_ds2482, &t);
   14d9c:	be 01       	movw	r22, r28
   14d9e:	6f 57       	subi	r22, 0x7F	; 127
   14da0:	7f 4f       	sbci	r23, 0xFF	; 255
   14da2:	8a 85       	ldd	r24, Y+10	; 0x0a
   14da4:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:287
        if (t != 0)
   14da8:	cf 57       	subi	r28, 0x7F	; 127
   14daa:	df 4f       	sbci	r29, 0xFF	; 255
   14dac:	88 81       	ld	r24, Y
   14dae:	c1 58       	subi	r28, 0x81	; 129
   14db0:	d0 40       	sbci	r29, 0x00	; 0
   14db2:	88 23       	and	r24, r24
   14db4:	09 f4       	brne	.+2      	; 0x14db8 <main+0xb8a>
   14db6:	b6 c0       	rjmp	.+364    	; 0x14f24 <main+0xcf6>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:289
        {
          status_tds18s20[w].wait = false;
   14db8:	d8 01       	movw	r26, r16
   14dba:	5d 96       	adiw	r26, 0x1d	; 29
   14dbc:	1c 92       	st	X, r1
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:290
          status = owReset(tds.assigned_ds2482);
   14dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dc0:	0e 94 38 92 	call	0x12470	; 0x12470 <ds2482owReset(unsigned char)>
   14dc4:	38 2e       	mov	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:291
          status = status + owMatchRom(tds.assigned_ds2482, tds.rom );
   14dc6:	be 01       	movw	r22, r28
   14dc8:	6e 5f       	subi	r22, 0xFE	; 254
   14dca:	7f 4f       	sbci	r23, 0xFF	; 255
   14dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dce:	0e 94 19 92 	call	0x12432	; 0x12432 <owMatchRom(unsigned char, unsigned char*)>
   14dd2:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:292
          status = status + owWriteByte(tds.assigned_ds2482, OW_READ_SCRATCHPAD);
   14dd4:	6e eb       	ldi	r22, 0xBE	; 190
   14dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dd8:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <ds2482owWriteByte(unsigned char, unsigned char)>
   14ddc:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:293
          status = status + owReadByte(tds.assigned_ds2482, &e);     //0byte
   14dde:	be 01       	movw	r22, r28
   14de0:	6f 5b       	subi	r22, 0xBF	; 191
   14de2:	7f 4f       	sbci	r23, 0xFF	; 255
   14de4:	8a 85       	ldd	r24, Y+10	; 0x0a
   14de6:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14dea:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:294
          status_tds18s20[w].tempL = e;
   14dec:	22 96       	adiw	r28, 0x02	; 2
   14dee:	9f ac       	ldd	r9, Y+63	; 0x3f
   14df0:	22 97       	sbiw	r28, 0x02	; 2
   14df2:	f8 01       	movw	r30, r16
   14df4:	90 82       	st	Z, r9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:295
          status = status + owReadByte(tds.assigned_ds2482, &e);     //1byte
   14df6:	be 01       	movw	r22, r28
   14df8:	6f 5b       	subi	r22, 0xBF	; 191
   14dfa:	7f 4f       	sbci	r23, 0xFF	; 255
   14dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
   14dfe:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e02:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:296
          status_tds18s20[w].tempH = e;
   14e04:	22 96       	adiw	r28, 0x02	; 2
   14e06:	8f ac       	ldd	r8, Y+63	; 0x3f
   14e08:	22 97       	sbiw	r28, 0x02	; 2
   14e0a:	d8 01       	movw	r26, r16
   14e0c:	11 96       	adiw	r26, 0x01	; 1
   14e0e:	8c 92       	st	X, r8
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:297
          status = status + owReadByte(tds.assigned_ds2482, &e); //2byte
   14e10:	be 01       	movw	r22, r28
   14e12:	6f 5b       	subi	r22, 0xBF	; 191
   14e14:	7f 4f       	sbci	r23, 0xFF	; 255
   14e16:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e18:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e1c:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:298
          status = status + owReadByte(tds.assigned_ds2482, &e); //3byte
   14e1e:	be 01       	movw	r22, r28
   14e20:	6f 5b       	subi	r22, 0xBF	; 191
   14e22:	7f 4f       	sbci	r23, 0xFF	; 255
   14e24:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e26:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e2a:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:299
          status = status + owReadByte(tds.assigned_ds2482, &e); //4byte
   14e2c:	be 01       	movw	r22, r28
   14e2e:	6f 5b       	subi	r22, 0xBF	; 191
   14e30:	7f 4f       	sbci	r23, 0xFF	; 255
   14e32:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e34:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e38:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:300
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
   14e3a:	be 01       	movw	r22, r28
   14e3c:	6f 5b       	subi	r22, 0xBF	; 191
   14e3e:	7f 4f       	sbci	r23, 0xFF	; 255
   14e40:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e42:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e46:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:301
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
   14e48:	be 01       	movw	r22, r28
   14e4a:	6f 5b       	subi	r22, 0xBF	; 191
   14e4c:	7f 4f       	sbci	r23, 0xFF	; 255
   14e4e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e50:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e54:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:302
          status_tds18s20[w].CR = e; //count remain
   14e56:	22 96       	adiw	r28, 0x02	; 2
   14e58:	8f ad       	ldd	r24, Y+63	; 0x3f
   14e5a:	22 97       	sbiw	r28, 0x02	; 2
   14e5c:	f8 01       	movw	r30, r16
   14e5e:	82 83       	std	Z+2, r24	; 0x02
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:303
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
   14e60:	be 01       	movw	r22, r28
   14e62:	6f 5b       	subi	r22, 0xBF	; 191
   14e64:	7f 4f       	sbci	r23, 0xFF	; 255
   14e66:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e68:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
   14e6c:	38 0e       	add	r3, r24
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:304
          status_tds18s20[w].CP = e; // count per
   14e6e:	22 96       	adiw	r28, 0x02	; 2
   14e70:	2f ac       	ldd	r2, Y+63	; 0x3f
   14e72:	22 97       	sbiw	r28, 0x02	; 2
   14e74:	d8 01       	movw	r26, r16
   14e76:	13 96       	adiw	r26, 0x03	; 3
   14e78:	2c 92       	st	X, r2
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   14e7a:	be 01       	movw	r22, r28
   14e7c:	6f 5b       	subi	r22, 0xBF	; 191
   14e7e:	7f 4f       	sbci	r23, 0xFF	; 255
   14e80:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e82:	0e 94 84 91 	call	0x12308	; 0x12308 <ds2482owReadByte(unsigned char, unsigned char*)>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:306
          status_tds18s20[w].CRC = e; // crc soucet
   14e86:	22 96       	adiw	r28, 0x02	; 2
   14e88:	9f ad       	ldd	r25, Y+63	; 0x3f
   14e8a:	22 97       	sbiw	r28, 0x02	; 2
   14e8c:	f8 01       	movw	r30, r16
   14e8e:	94 83       	std	Z+4, r25	; 0x04
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:305
          status = status + owReadByte(tds.assigned_ds2482, &e); //5byte
          status = status + owReadByte(tds.assigned_ds2482, &e); //6byte
          status_tds18s20[w].CR = e; //count remain
          status = status + owReadByte(tds.assigned_ds2482, &e); //7byte
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
   14e90:	83 0d       	add	r24, r3
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:307
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
   14e92:	09 f0       	breq	.+2      	; 0x14e96 <main+0xc68>
   14e94:	e2 c1       	rjmp	.+964    	; 0x1525a <main+0x102c>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   14e96:	62 2d       	mov	r22, r2
   14e98:	70 e0       	ldi	r23, 0x00	; 0
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:309
          status_tds18s20[w].CP = e; // count per
          status = status + owReadByte(tds.assigned_ds2482, &e); //8byte
          status_tds18s20[w].CRC = e; // crc soucet
          if (status == 0)
          {
            int temp = (int) status_tds18s20[w].tempH << 11 | (int) status_tds18s20[w].tempL << 3;
   14e9a:	28 2d       	mov	r18, r8
   14e9c:	30 e0       	ldi	r19, 0x00	; 0
   14e9e:	32 2f       	mov	r19, r18
   14ea0:	22 27       	eor	r18, r18
   14ea2:	33 0f       	add	r19, r19
   14ea4:	33 0f       	add	r19, r19
   14ea6:	33 0f       	add	r19, r19
   14ea8:	f8 e0       	ldi	r31, 0x08	; 8
   14eaa:	9f 9e       	mul	r9, r31
   14eac:	c0 01       	movw	r24, r0
   14eae:	11 24       	eor	r1, r1
   14eb0:	28 2b       	or	r18, r24
   14eb2:	39 2b       	or	r19, r25
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:310
            status_tds18s20[w].temp = ((temp & 0xfff0) << 3) -  16 + (  (  (status_tds18s20[w].CP - (status_tds18s20[t].CR) << 7) ) / status_tds18s20[w].CP ) + tds.offset;
   14eb4:	b3 e0       	ldi	r27, 0x03	; 3
   14eb6:	22 0f       	add	r18, r18
   14eb8:	33 1f       	adc	r19, r19
   14eba:	ba 95       	dec	r27
   14ebc:	e1 f7       	brne	.-8      	; 0x14eb6 <main+0xc88>
   14ebe:	20 78       	andi	r18, 0x80	; 128
   14ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
   14ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
   14ec4:	40 97       	sbiw	r24, 0x10	; 16
   14ec6:	28 0f       	add	r18, r24
   14ec8:	39 1f       	adc	r19, r25
   14eca:	cf 57       	subi	r28, 0x7F	; 127
   14ecc:	df 4f       	sbci	r29, 0xFF	; 255
   14ece:	e8 81       	ld	r30, Y
   14ed0:	c1 58       	subi	r28, 0x81	; 129
   14ed2:	d0 40       	sbci	r29, 0x00	; 0
   14ed4:	4e e1       	ldi	r20, 0x1E	; 30
   14ed6:	4e 9f       	mul	r20, r30
   14ed8:	f0 01       	movw	r30, r0
   14eda:	11 24       	eor	r1, r1
   14edc:	eb 5e       	subi	r30, 0xEB	; 235
   14ede:	f5 4f       	sbci	r31, 0xF5	; 245
   14ee0:	82 81       	ldd	r24, Z+2	; 0x02
   14ee2:	db 01       	movw	r26, r22
   14ee4:	a8 1b       	sub	r26, r24
   14ee6:	b1 09       	sbc	r27, r1
   14ee8:	cd 01       	movw	r24, r26
   14eea:	96 95       	lsr	r25
   14eec:	98 2f       	mov	r25, r24
   14eee:	88 27       	eor	r24, r24
   14ef0:	97 95       	ror	r25
   14ef2:	87 95       	ror	r24
   14ef4:	0e 94 6b b4 	call	0x168d6	; 0x168d6 <__divmodhi4>
   14ef8:	26 0f       	add	r18, r22
   14efa:	37 1f       	adc	r19, r23
   14efc:	f8 01       	movw	r30, r16
   14efe:	36 83       	std	Z+6, r19	; 0x06
   14f00:	25 83       	std	Z+5, r18	; 0x05
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:311
            status_tds18s20[w].online = True;
   14f02:	a3 8e       	std	Z+27, r10	; 0x1b
   14f04:	49 e0       	ldi	r20, 0x09	; 9
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:312
            for (uint8_t av = 9; av > 0; av--) status_tds18s20[w].average_temp[av] = status_tds18s20[w].average_temp[av - 1];
   14f06:	87 89       	ldd	r24, Z+23	; 0x17
   14f08:	90 8d       	ldd	r25, Z+24	; 0x18
   14f0a:	92 8f       	std	Z+26, r25	; 0x1a
   14f0c:	81 8f       	std	Z+25, r24	; 0x19
   14f0e:	41 50       	subi	r20, 0x01	; 1
   14f10:	32 97       	sbiw	r30, 0x02	; 2
   14f12:	41 11       	cpse	r20, r1
   14f14:	f8 cf       	rjmp	.-16     	; 0x14f06 <main+0xcd8>
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:313
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
   14f16:	d8 01       	movw	r26, r16
   14f18:	18 96       	adiw	r26, 0x08	; 8
   14f1a:	3c 93       	st	X, r19
   14f1c:	2e 93       	st	-X, r18
   14f1e:	17 97       	sbiw	r26, 0x07	; 7
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:314
            status_tds18s20[w].period_now = uptime & 0xff;
   14f20:	5c 96       	adiw	r26, 0x1c	; 28
   14f22:	4c 92       	st	X, r4
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:270
uint8_t mereni_hwwire(uint16_t uptime)
{
  uint8_t status = 0;
  uint8_t t, e;
  struct_DDS18s20 tds;
  for (uint8_t w = 0; w < HW_ONEWIRE_MAXROMS; w++)
   14f24:	b3 94       	inc	r11
   14f26:	02 5e       	subi	r16, 0xE2	; 226
   14f28:	1f 4f       	sbci	r17, 0xFF	; 255
   14f2a:	f6 e0       	ldi	r31, 0x06	; 6
   14f2c:	bf 12       	cpse	r11, r31
   14f2e:	f9 ce       	rjmp	.-526    	; 0x14d22 <main+0xaf4>
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14f30:	10 e0       	ldi	r17, 0x00	; 0
tds_extended_memory_store():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2890
    if (get_tds18s20(id, &tds) == 1)
   14f32:	be 01       	movw	r22, r28
   14f34:	6f 5f       	subi	r22, 0xFF	; 255
   14f36:	7f 4f       	sbci	r23, 0xFF	; 255
   14f38:	81 2f       	mov	r24, r17
   14f3a:	0e 94 af 55 	call	0xab5e	; 0xab5e <get_tds18s20(unsigned char, struct_DDS18s20*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2889
{
  struct_DDS18s20 tds;
  int tt;
  uint16_t active = 0;
  uint16_t pos = 0;
  for (uint8_t id = 0; id < HW_ONEWIRE_MAXROMS; id++)
   14f3e:	1f 5f       	subi	r17, 0xFF	; 255
   14f40:	16 30       	cpi	r17, 0x06	; 6
   14f42:	b9 f7       	brne	.-18     	; 0x14f32 <main+0xd04>
   14f44:	f6 e6       	ldi	r31, 0x66	; 102
   14f46:	8f 2e       	mov	r8, r31
   14f48:	91 2c       	mov	r9, r1
   14f4a:	a1 2c       	mov	r10, r1
   14f4c:	b1 2c       	mov	r11, r1
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14f4e:	10 e0       	ldi	r17, 0x00	; 0
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2837
  {
    remote_tds_get_active(idx, &active);
   14f50:	be 01       	movw	r22, r28
   14f52:	6f 5f       	subi	r22, 0xFF	; 255
   14f54:	7f 4f       	sbci	r23, 0xFF	; 255
   14f56:	81 2f       	mov	r24, r17
   14f58:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2838
    if (active == 1)
   14f5c:	89 81       	ldd	r24, Y+1	; 0x01
   14f5e:	81 30       	cpi	r24, 0x01	; 1
   14f60:	61 f4       	brne	.+24     	; 0x14f7a <main+0xd4c>
remote_tds_inc_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2825
uint8_t remote_tds_inc_last_update(uint8_t idx)
{
  uint8_t last = 255;
  if (idx < MAX_RTDS)
  {
    last = SRAM.readByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx));
   14f62:	c5 01       	movw	r24, r10
   14f64:	b4 01       	movw	r22, r8
   14f66:	0e 94 2f 8a 	call	0x1145e	; 0x1145e <SRAM_23LC::readByte(unsigned long) [clone .constprop.178]>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2826
    if (last < 250)
   14f6a:	8a 3f       	cpi	r24, 0xFA	; 250
   14f6c:	08 f4       	brcc	.+2      	; 0x14f70 <main+0xd42>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2827
      last++;
   14f6e:	8f 5f       	subi	r24, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2828
    SRAM.writeByte(ram_remote_tds_store_last_update + (ram_remote_tds_store_size * idx), last);
   14f70:	48 2f       	mov	r20, r24
   14f72:	c5 01       	movw	r24, r10
   14f74:	b4 01       	movw	r22, r8
   14f76:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <SRAM_23LC::writeByte(unsigned long, unsigned char) [clone .constprop.180]>
remote_tds_update_last_update():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:2835
}

void remote_tds_update_last_update(void)
{
  uint8_t active;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   14f7a:	1f 5f       	subi	r17, 0xFF	; 255
   14f7c:	23 e0       	ldi	r18, 0x03	; 3
   14f7e:	82 0e       	add	r8, r18
   14f80:	91 1c       	adc	r9, r1
   14f82:	a1 1c       	adc	r10, r1
   14f84:	b1 1c       	adc	r11, r1
   14f86:	34 e8       	ldi	r19, 0x84	; 132
   14f88:	83 16       	cp	r8, r19
   14f8a:	91 04       	cpc	r9, r1
   14f8c:	a1 04       	cpc	r10, r1
   14f8e:	b1 04       	cpc	r11, r1
   14f90:	f9 f6       	brne	.-66     	; 0x14f50 <main+0xd22>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4733
    tds_extended_memory_store();
    remote_tds_update_last_update();
  }

  //digitalWrite(LED, LOW);
  if ((millis() - milis_05s) > 500)
   14f92:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14f96:	00 91 c3 10 	lds	r16, 0x10C3	; 0x8010c3 <milis_05s>
   14f9a:	10 91 c4 10 	lds	r17, 0x10C4	; 0x8010c4 <milis_05s+0x1>
   14f9e:	20 91 c5 10 	lds	r18, 0x10C5	; 0x8010c5 <milis_05s+0x2>
   14fa2:	30 91 c6 10 	lds	r19, 0x10C6	; 0x8010c6 <milis_05s+0x3>
   14fa6:	60 1b       	sub	r22, r16
   14fa8:	71 0b       	sbc	r23, r17
   14faa:	82 0b       	sbc	r24, r18
   14fac:	93 0b       	sbc	r25, r19
   14fae:	65 3f       	cpi	r22, 0xF5	; 245
   14fb0:	71 40       	sbci	r23, 0x01	; 1
   14fb2:	81 05       	cpc	r24, r1
   14fb4:	91 05       	cpc	r25, r1
   14fb6:	08 f4       	brcc	.+2      	; 0x14fba <main+0xd8c>
   14fb8:	bc c0       	rjmp	.+376    	; 0x15132 <main+0xf04>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4735
  {
    milis_05s = millis();
   14fba:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   14fbe:	60 93 c3 10 	sts	0x10C3, r22	; 0x8010c3 <milis_05s>
   14fc2:	70 93 c4 10 	sts	0x10C4, r23	; 0x8010c4 <milis_05s+0x1>
   14fc6:	80 93 c5 10 	sts	0x10C5, r24	; 0x8010c5 <milis_05s+0x2>
   14fca:	90 93 c6 10 	sts	0x10C6, r25	; 0x8010c6 <milis_05s+0x3>
beginTransmission():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/libraries/Wire/src/Wire.cpp:154
   14fce:	88 e6       	ldi	r24, 0x68	; 104
   14fd0:	0e 94 7f 84 	call	0x108fe	; 0x108fe <TwoWire::beginTransmission(unsigned char) [clone .constprop.167]>
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:270
}

DateTime RTC_DS1307::now() {
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire._I2C_WRITE((byte)0);	
   14fd4:	60 e0       	ldi	r22, 0x00	; 0
   14fd6:	85 ef       	ldi	r24, 0xF5	; 245
   14fd8:	9d e0       	ldi	r25, 0x0D	; 13
   14fda:	0e 94 81 80 	call	0x10102	; 0x10102 <TwoWire::write(unsigned char)>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:271
  Wire.endTransmission();
   14fde:	85 ef       	ldi	r24, 0xF5	; 245
   14fe0:	9d e0       	ldi	r25, 0x0D	; 13
   14fe2:	0e 94 fa 90 	call	0x121f4	; 0x121f4 <TwoWire::endTransmission()>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:273

  Wire.requestFrom(DS1307_ADDRESS, 7);
   14fe6:	87 e0       	ldi	r24, 0x07	; 7
   14fe8:	90 e0       	ldi	r25, 0x00	; 0
   14fea:	0e 94 b8 82 	call	0x10570	; 0x10570 <TwoWire::requestFrom(int, int) [clone .constprop.129]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:274
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   14fee:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
   14ff2:	8f 77       	andi	r24, 0x7F	; 127
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   14ff4:	28 2f       	mov	r18, r24
   14ff6:	30 e0       	ldi	r19, 0x00	; 0
   14ff8:	94 e0       	ldi	r25, 0x04	; 4
   14ffa:	35 95       	asr	r19
   14ffc:	27 95       	ror	r18
   14ffe:	9a 95       	dec	r25
   15000:	e1 f7       	brne	.-8      	; 0x14ffa <main+0xdcc>
   15002:	92 2f       	mov	r25, r18
   15004:	99 0f       	add	r25, r25
   15006:	99 0f       	add	r25, r25
   15008:	12 2f       	mov	r17, r18
   1500a:	19 1b       	sub	r17, r25
   1500c:	11 0f       	add	r17, r17
   1500e:	18 0f       	add	r17, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:275
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   15010:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15014:	9c 01       	movw	r18, r24
   15016:	44 e0       	ldi	r20, 0x04	; 4
   15018:	35 95       	asr	r19
   1501a:	27 95       	ror	r18
   1501c:	4a 95       	dec	r20
   1501e:	e1 f7       	brne	.-8      	; 0x15018 <main+0xdea>
   15020:	2f 70       	andi	r18, 0x0F	; 15
   15022:	33 27       	eor	r19, r19
   15024:	92 2f       	mov	r25, r18
   15026:	99 0f       	add	r25, r25
   15028:	99 0f       	add	r25, r25
   1502a:	02 2f       	mov	r16, r18
   1502c:	09 1b       	sub	r16, r25
   1502e:	00 0f       	add	r16, r16
   15030:	08 0f       	add	r16, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:276
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   15032:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   15036:	9c 01       	movw	r18, r24
   15038:	54 e0       	ldi	r21, 0x04	; 4
   1503a:	35 95       	asr	r19
   1503c:	27 95       	ror	r18
   1503e:	5a 95       	dec	r21
   15040:	e1 f7       	brne	.-8      	; 0x1503a <main+0xe0c>
   15042:	2f 70       	andi	r18, 0x0F	; 15
   15044:	33 27       	eor	r19, r19
   15046:	92 2f       	mov	r25, r18
   15048:	99 0f       	add	r25, r25
   1504a:	99 0f       	add	r25, r25
   1504c:	b2 2e       	mov	r11, r18
   1504e:	b9 1a       	sub	r11, r25
   15050:	bb 0c       	add	r11, r11
   15052:	b8 0e       	add	r11, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:277

  Wire.requestFrom(DS1307_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   15054:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:278
  uint8_t d = bcd2bin(Wire._I2C_READ());
   15058:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1505c:	9c 01       	movw	r18, r24
   1505e:	64 e0       	ldi	r22, 0x04	; 4
   15060:	35 95       	asr	r19
   15062:	27 95       	ror	r18
   15064:	6a 95       	dec	r22
   15066:	e1 f7       	brne	.-8      	; 0x15060 <main+0xe32>
   15068:	2f 70       	andi	r18, 0x0F	; 15
   1506a:	33 27       	eor	r19, r19
   1506c:	92 2f       	mov	r25, r18
   1506e:	99 0f       	add	r25, r25
   15070:	99 0f       	add	r25, r25
   15072:	a2 2e       	mov	r10, r18
   15074:	a9 1a       	sub	r10, r25
   15076:	aa 0c       	add	r10, r10
   15078:	a8 0e       	add	r10, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:279
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   1507a:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   1507e:	9c 01       	movw	r18, r24
   15080:	74 e0       	ldi	r23, 0x04	; 4
   15082:	35 95       	asr	r19
   15084:	27 95       	ror	r18
   15086:	7a 95       	dec	r23
   15088:	e1 f7       	brne	.-8      	; 0x15082 <main+0xe54>
   1508a:	2f 70       	andi	r18, 0x0F	; 15
   1508c:	33 27       	eor	r19, r19
   1508e:	92 2f       	mov	r25, r18
   15090:	99 0f       	add	r25, r25
   15092:	99 0f       	add	r25, r25
   15094:	92 2e       	mov	r9, r18
   15096:	99 1a       	sub	r9, r25
   15098:	99 0c       	add	r9, r9
   1509a:	98 0e       	add	r9, r24
now():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:280
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   1509c:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <TwoWire::read() [clone .constprop.130]>
bcd2bin():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:236
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   150a0:	9c 01       	movw	r18, r24
   150a2:	e4 e0       	ldi	r30, 0x04	; 4
   150a4:	35 95       	asr	r19
   150a6:	27 95       	ror	r18
   150a8:	ea 95       	dec	r30
   150aa:	e1 f7       	brne	.-8      	; 0x150a4 <main+0xe76>
   150ac:	2f 70       	andi	r18, 0x0F	; 15
   150ae:	33 27       	eor	r19, r19
   150b0:	92 2f       	mov	r25, r18
   150b2:	99 0f       	add	r25, r25
   150b4:	99 0f       	add	r25, r25
   150b6:	29 1b       	sub	r18, r25
   150b8:	22 0f       	add	r18, r18
   150ba:	82 0f       	add	r24, r18
__base_ctor ():
/home/saric/Arduino/libraries/RTClib/RTClib.cpp:104
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   150bc:	80 93 46 10 	sts	0x1046, r24	; 0x801046 <now>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4736
    now = rtc.now();
   150c0:	90 92 47 10 	sts	0x1047, r9	; 0x801047 <now+0x1>
   150c4:	a0 92 48 10 	sts	0x1048, r10	; 0x801048 <now+0x2>
   150c8:	b0 92 49 10 	sts	0x1049, r11	; 0x801049 <now+0x3>
   150cc:	00 93 4a 10 	sts	0x104A, r16	; 0x80104a <now+0x4>
   150d0:	10 93 4b 10 	sts	0x104B, r17	; 0x80104b <now+0x5>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3981
}
///
/// selftest - pusteni skupiny vlastnich selftestu
void selftest(void)
{
  if (!rtc.isrunning())
   150d4:	0e 94 57 91 	call	0x122ae	; 0x122ae <RTC_DS1307::isrunning() [clone .constprop.127]>
   150d8:	90 91 c9 0a 	lds	r25, 0x0AC9	; 0x800ac9 <selftest_data>
   150dc:	81 11       	cpse	r24, r1
   150de:	bf c0       	rjmp	.+382    	; 0x1525e <main+0x1030>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3982
    sbi(selftest_data, SELFTEST_ERR_RTC);
   150e0:	91 60       	ori	r25, 0x01	; 1
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   150e2:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <selftest_data>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4738
  if ((millis() - milis_05s) > 500)
  {
    milis_05s = millis();
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;
   150e6:	81 e0       	ldi	r24, 0x01	; 1
   150e8:	80 93 d1 0a 	sts	0x0AD1, r24	; 0x800ad1 <menu_redraw05s>
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5342
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
   150ec:	19 82       	std	Y+1, r1	; 0x01
main():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5341

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
   150ee:	00 e0       	ldi	r16, 0x00	; 0
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5343
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   150f0:	10 e0       	ldi	r17, 0x00	; 0
count_use_rtds():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5345
  {
    remote_tds_get_active(idx, &active);
   150f2:	be 01       	movw	r22, r28
   150f4:	6f 5f       	subi	r22, 0xFF	; 255
   150f6:	7f 4f       	sbci	r23, 0xFF	; 255
   150f8:	81 2f       	mov	r24, r17
   150fa:	0e 94 33 5b 	call	0xb666	; 0xb666 <remote_tds_get_active(unsigned char, unsigned char*)>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5346
    if (active == 1) cnt++;
   150fe:	89 81       	ldd	r24, Y+1	; 0x01
   15100:	81 30       	cpi	r24, 0x01	; 1
   15102:	09 f4       	brne	.+2      	; 0x15106 <main+0xed8>
   15104:	0f 5f       	subi	r16, 0xFF	; 255
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:5343
//// vraci pocet pouzitych vzdalenych mqtt tds cidel
uint8_t count_use_rtds(void)
{
  uint8_t cnt = 0;
  uint8_t active = 0;
  for (uint8_t idx = 0; idx < MAX_RTDS; idx++)
   15106:	1f 5f       	subi	r17, 0xFF	; 255
   15108:	1a 30       	cpi	r17, 0x0A	; 10
   1510a:	99 f7       	brne	.-26     	; 0x150f2 <main+0xec4>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4741
    now = rtc.now();
    selftest();
    menu_redraw05s = 1;


    use_rtds = count_use_rtds();
   1510c:	00 93 d0 0a 	sts	0x0AD0, r16	; 0x800ad0 <use_rtds>
   15110:	08 ec       	ldi	r16, 0xC8	; 200
   15112:	10 e0       	ldi	r17, 0x00	; 0
main():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:19
struct_ds2482 ds2482_address[DS2482_COUNT];

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
   15114:	b1 2c       	mov	r11, r1
count_use_tds():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:21
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
    if ( EEPROM.read(eeprom_wire_know_rom + (idx * eeprom_tds_size_bytes) + eeprom_tds_used) == 1) cnt++;
   15116:	c8 01       	movw	r24, r16
   15118:	0e 94 b2 96 	call	0x12d64	; 0x12d64 <EEPROMClass::read(int) [clone .isra.0] [clone .lto_priv.224] [clone .lto_priv.239]>
   1511c:	81 30       	cpi	r24, 0x01	; 1
   1511e:	09 f4       	brne	.+2      	; 0x15122 <main+0xef4>
   15120:	b3 94       	inc	r11
   15122:	0a 5e       	subi	r16, 0xEA	; 234
   15124:	1f 4f       	sbci	r17, 0xFF	; 255
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:20

/// vraci pocet alokovanych k pouziti 1w cidel
uint8_t count_use_tds(void)
{
  uint8_t cnt = 0;
  for (uint8_t idx = 0; idx < HW_ONEWIRE_MAXROMS; idx++)
   15126:	0c 34       	cpi	r16, 0x4C	; 76
   15128:	51 e0       	ldi	r21, 0x01	; 1
   1512a:	15 07       	cpc	r17, r21
   1512c:	a1 f7       	brne	.-24     	; 0x15116 <main+0xee8>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4742
    use_tds = count_use_tds();
   1512e:	b0 92 cf 0a 	sts	0x0ACF, r11	; 0x800acf <use_tds>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4751




  /// kazdych 50ms
  if ((millis() - milis_005s) > 50)
   15132:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   15136:	00 91 bf 10 	lds	r16, 0x10BF	; 0x8010bf <milis_005s>
   1513a:	10 91 c0 10 	lds	r17, 0x10C0	; 0x8010c0 <milis_005s+0x1>
   1513e:	20 91 c1 10 	lds	r18, 0x10C1	; 0x8010c1 <milis_005s+0x2>
   15142:	30 91 c2 10 	lds	r19, 0x10C2	; 0x8010c2 <milis_005s+0x3>
   15146:	60 1b       	sub	r22, r16
   15148:	71 0b       	sbc	r23, r17
   1514a:	82 0b       	sbc	r24, r18
   1514c:	93 0b       	sbc	r25, r19
   1514e:	63 33       	cpi	r22, 0x33	; 51
   15150:	71 05       	cpc	r23, r1
   15152:	81 05       	cpc	r24, r1
   15154:	91 05       	cpc	r25, r1
   15156:	90 f1       	brcs	.+100    	; 0x151bc <main+0xf8e>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4753
  {
    milis_005s = millis();
   15158:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   1515c:	60 93 bf 10 	sts	0x10BF, r22	; 0x8010bf <milis_005s>
   15160:	70 93 c0 10 	sts	0x10C0, r23	; 0x8010c0 <milis_005s+0x1>
   15164:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <milis_005s+0x2>
   15168:	90 93 c2 10 	sts	0x10C2, r25	; 0x8010c2 <milis_005s+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4756

    /// obsluha adc prevodniku
    if (a2d_run_now == 1)
   1516c:	80 91 ce 0a 	lds	r24, 0x0ACE	; 0x800ace <a2d_run_now>
   15170:	81 30       	cpi	r24, 0x01	; 1
   15172:	21 f5       	brne	.+72     	; 0x151bc <main+0xf8e>
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
	if ( (a2d_enable & v) != 0 ) 
   15174:	30 91 ca 0a 	lds	r19, 0x0ACA	; 0x800aca <a2d_enable>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15178:	20 91 cb 0a 	lds	r18, 0x0ACB	; 0x800acb <a2d_index>
   1517c:	90 e0       	ldi	r25, 0x00	; 0
   1517e:	80 e0       	ldi	r24, 0x00	; 0
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:69
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
	{
	v = (1 << i);
   15180:	61 e0       	ldi	r22, 0x01	; 1
   15182:	70 e0       	ldi	r23, 0x00	; 0
   15184:	ab 01       	movw	r20, r22
   15186:	08 2e       	mov	r0, r24
   15188:	01 c0       	rjmp	.+2      	; 0x1518c <main+0xf5e>
   1518a:	44 0f       	add	r20, r20
   1518c:	0a 94       	dec	r0
   1518e:	ea f7       	brpl	.-6      	; 0x1518a <main+0xf5c>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:70
	if ( (a2d_enable & v) != 0 ) 
   15190:	e3 2f       	mov	r30, r19
   15192:	e4 23       	and	r30, r20
   15194:	09 f4       	brne	.+2      	; 0x15198 <main+0xf6a>
   15196:	65 c0       	rjmp	.+202    	; 0x15262 <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:71
		if ( (a2d_index & v) == 0) 
   15198:	e2 2f       	mov	r30, r18
   1519a:	e4 23       	and	r30, r20
   1519c:	09 f0       	breq	.+2      	; 0x151a0 <main+0xf72>
   1519e:	61 c0       	rjmp	.+194    	; 0x15262 <main+0x1034>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:73
			{
			sbi(a2d_index, i);
   151a0:	24 2b       	or	r18, r20
   151a2:	20 93 cb 0a 	sts	0x0ACB, r18	; 0x800acb <a2d_index>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:74
			a2d_start_first(i);
   151a6:	0e 94 93 8e 	call	0x11d26	; 0x11d26 <a2d_start_first(unsigned char)>
loop():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4759
    {
      a2d_start_process();
      a2d_run_now = 0;
   151aa:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4760
      if (a2d_done() == 0) a2d_run_now = 1;
   151ae:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <a2d_index>
   151b2:	81 11       	cpse	r24, r1
   151b4:	03 c0       	rjmp	.+6      	; 0x151bc <main+0xf8e>
   151b6:	81 e0       	ldi	r24, 0x01	; 1
   151b8:	80 93 ce 0a 	sts	0x0ACE, r24	; 0x800ace <a2d_run_now>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4764
    }
  }

  load = millis() - load_now;
   151bc:	0e 94 86 8c 	call	0x1190c	; 0x1190c <millis>
   151c0:	dc 01       	movw	r26, r24
   151c2:	cb 01       	movw	r24, r22
   151c4:	8c 19       	sub	r24, r12
   151c6:	9d 09       	sbc	r25, r13
   151c8:	ae 09       	sbc	r26, r14
   151ca:	bf 09       	sbc	r27, r15
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4765
  if (load < load_min) load_min = load;
   151cc:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <load_min>
   151d0:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <load_min+0x1>
   151d4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <load_min+0x2>
   151d8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <load_min+0x3>
   151dc:	80 17       	cp	r24, r16
   151de:	91 07       	cpc	r25, r17
   151e0:	a2 07       	cpc	r26, r18
   151e2:	b3 07       	cpc	r27, r19
   151e4:	40 f4       	brcc	.+16     	; 0x151f6 <main+0xfc8>
   151e6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <load_min>
   151ea:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <load_min+0x1>
   151ee:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <load_min+0x2>
   151f2:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <load_min+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4766
  if (load > load_max) load_max = load;
   151f6:	00 91 bb 10 	lds	r16, 0x10BB	; 0x8010bb <load_max>
   151fa:	10 91 bc 10 	lds	r17, 0x10BC	; 0x8010bc <load_max+0x1>
   151fe:	20 91 bd 10 	lds	r18, 0x10BD	; 0x8010bd <load_max+0x2>
   15202:	30 91 be 10 	lds	r19, 0x10BE	; 0x8010be <load_max+0x3>
   15206:	08 17       	cp	r16, r24
   15208:	19 07       	cpc	r17, r25
   1520a:	2a 07       	cpc	r18, r26
   1520c:	3b 07       	cpc	r19, r27
   1520e:	40 f4       	brcc	.+16     	; 0x15220 <main+0xff2>
   15210:	80 93 bb 10 	sts	0x10BB, r24	; 0x8010bb <load_max>
   15214:	90 93 bc 10 	sts	0x10BC, r25	; 0x8010bc <load_max+0x1>
   15218:	a0 93 bd 10 	sts	0x10BD, r26	; 0x8010bd <load_max+0x2>
   1521c:	b0 93 be 10 	sts	0x10BE, r27	; 0x8010be <load_max+0x3>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4769

  /// automaticke nastaveni jasu displaye
  if (light_curr < light_min) light_min = light_curr;
   15220:	80 91 cc 0a 	lds	r24, 0x0ACC	; 0x800acc <light_curr>
   15224:	90 91 cd 0a 	lds	r25, 0x0ACD	; 0x800acd <light_curr+0x1>
   15228:	20 91 b9 10 	lds	r18, 0x10B9	; 0x8010b9 <light_min>
   1522c:	30 91 ba 10 	lds	r19, 0x10BA	; 0x8010ba <light_min+0x1>
   15230:	82 17       	cp	r24, r18
   15232:	93 07       	cpc	r25, r19
   15234:	20 f4       	brcc	.+8      	; 0x1523e <main+0x1010>
   15236:	90 93 ba 10 	sts	0x10BA, r25	; 0x8010ba <light_min+0x1>
   1523a:	80 93 b9 10 	sts	0x10B9, r24	; 0x8010b9 <light_min>
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:4770
  if (light_curr > light_max) light_max = light_curr;
   1523e:	20 91 b7 10 	lds	r18, 0x10B7	; 0x8010b7 <light_max>
   15242:	30 91 b8 10 	lds	r19, 0x10B8	; 0x8010b8 <light_max+0x1>
   15246:	28 17       	cp	r18, r24
   15248:	39 07       	cpc	r19, r25
   1524a:	20 f4       	brcc	.+8      	; 0x15254 <main+0x1026>
   1524c:	90 93 b8 10 	sts	0x10B8, r25	; 0x8010b8 <light_max+0x1>
   15250:	80 93 b7 10 	sts	0x10B7, r24	; 0x8010b7 <light_max>
main():
/home/saric/.arduino15/packages/MegaCore/hardware/avr/2.0.4/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
   15254:	0e 94 aa 7f 	call	0xff54	; 0xff54 <serialEventRun()>
   15258:	55 c8       	rjmp	.-3926   	; 0x14304 <main+0xd6>
mereni_hwwire():
/tmp/arduino_build_832911/sketch/saric_tds_function.cpp:318
            status_tds18s20[w].average_temp[0] = status_tds18s20[w].temp;
            status_tds18s20[w].period_now = uptime & 0xff;
          }
          else
          {
            status_tds18s20[w].online = False;
   1525a:	13 8e       	std	Z+27, r1	; 0x1b
   1525c:	63 ce       	rjmp	.-826    	; 0x14f24 <main+0xcf6>
selftest():
/home/saric/Arduino/Automatizace/room_control_v3/room_control_v3.ino:3984
void selftest(void)
{
  if (!rtc.isrunning())
    sbi(selftest_data, SELFTEST_ERR_RTC);
  else
    cbi(selftest_data, SELFTEST_ERR_RTC);
   1525e:	9e 7f       	andi	r25, 0xFE	; 254
   15260:	40 cf       	rjmp	.-384    	; 0x150e2 <main+0xeb4>
   15262:	01 96       	adiw	r24, 0x01	; 1
a2d_start_process():
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:67
/////////////funkce a2d prevodniku, automaticka spousteni mereni////////////////////////////////////////////////////////
void a2d_start_process(void)
{
uint8_t start = 0;
uint8_t v = 0;
for(uint8_t i = 0; i < 8; i++)	
   15264:	88 30       	cpi	r24, 0x08	; 8
   15266:	91 05       	cpc	r25, r1
   15268:	09 f0       	breq	.+2      	; 0x1526c <main+0x103e>
   1526a:	8c cf       	rjmp	.-232    	; 0x15184 <main+0xf56>
/home/saric/Arduino/libraries/saric_a2d/saric_ha2d.cpp:83
	}

//// pokud jsem jiz zmeril vsechny, tak jedu od zacatku
if (start == 0)
	{
	a2d_index = 0;
   1526c:	10 92 cb 0a 	sts	0x0ACB, r1	; 0x800acb <a2d_index>
   15270:	9c cf       	rjmp	.-200    	; 0x151aa <main+0xf7c>

00015272 <dtostrf>:
dtostrf():
   15272:	ef 92       	push	r14
   15274:	0f 93       	push	r16
   15276:	1f 93       	push	r17
   15278:	cf 93       	push	r28
   1527a:	df 93       	push	r29
   1527c:	e8 01       	movw	r28, r16
   1527e:	34 e0       	ldi	r19, 0x04	; 4
   15280:	47 fd       	sbrc	r20, 7
   15282:	34 e1       	ldi	r19, 0x14	; 20
   15284:	04 2e       	mov	r0, r20
   15286:	00 0c       	add	r0, r0
   15288:	55 0b       	sbc	r21, r21
   1528a:	57 ff       	sbrs	r21, 7
   1528c:	03 c0       	rjmp	.+6      	; 0x15294 <dtostrf+0x22>
   1528e:	51 95       	neg	r21
   15290:	41 95       	neg	r20
   15292:	51 09       	sbc	r21, r1
   15294:	e3 2e       	mov	r14, r19
   15296:	02 2f       	mov	r16, r18
   15298:	24 2f       	mov	r18, r20
   1529a:	ae 01       	movw	r20, r28
   1529c:	0e 94 63 ad 	call	0x15ac6	; 0x15ac6 <dtoa_prf>
   152a0:	ce 01       	movw	r24, r28
   152a2:	df 91       	pop	r29
   152a4:	cf 91       	pop	r28
   152a6:	1f 91       	pop	r17
   152a8:	0f 91       	pop	r16
   152aa:	ef 90       	pop	r14
   152ac:	08 95       	ret

000152ae <strtoul>:
strtoul():
   152ae:	3f 92       	push	r3
   152b0:	4f 92       	push	r4
   152b2:	5f 92       	push	r5
   152b4:	6f 92       	push	r6
   152b6:	7f 92       	push	r7
   152b8:	8f 92       	push	r8
   152ba:	9f 92       	push	r9
   152bc:	af 92       	push	r10
   152be:	bf 92       	push	r11
   152c0:	cf 92       	push	r12
   152c2:	df 92       	push	r13
   152c4:	ef 92       	push	r14
   152c6:	ff 92       	push	r15
   152c8:	0f 93       	push	r16
   152ca:	1f 93       	push	r17
   152cc:	cf 93       	push	r28
   152ce:	df 93       	push	r29
   152d0:	5c 01       	movw	r10, r24
   152d2:	6b 01       	movw	r12, r22
   152d4:	7a 01       	movw	r14, r20
   152d6:	61 15       	cp	r22, r1
   152d8:	71 05       	cpc	r23, r1
   152da:	19 f0       	breq	.+6      	; 0x152e2 <strtoul+0x34>
   152dc:	fb 01       	movw	r30, r22
   152de:	91 83       	std	Z+1, r25	; 0x01
   152e0:	80 83       	st	Z, r24
   152e2:	e1 14       	cp	r14, r1
   152e4:	f1 04       	cpc	r15, r1
   152e6:	49 f0       	breq	.+18     	; 0x152fa <strtoul+0x4c>
   152e8:	c7 01       	movw	r24, r14
   152ea:	02 97       	sbiw	r24, 0x02	; 2
   152ec:	83 97       	sbiw	r24, 0x23	; 35
   152ee:	28 f0       	brcs	.+10     	; 0x152fa <strtoul+0x4c>
   152f0:	60 e0       	ldi	r22, 0x00	; 0
   152f2:	70 e0       	ldi	r23, 0x00	; 0
   152f4:	cb 01       	movw	r24, r22
   152f6:	9b c0       	rjmp	.+310    	; 0x1542e <strtoul+0x180>
   152f8:	5e 01       	movw	r10, r28
   152fa:	e5 01       	movw	r28, r10
   152fc:	21 96       	adiw	r28, 0x01	; 1
   152fe:	f5 01       	movw	r30, r10
   15300:	10 81       	ld	r17, Z
   15302:	81 2f       	mov	r24, r17
   15304:	90 e0       	ldi	r25, 0x00	; 0
   15306:	0e 94 7c aa 	call	0x154f8	; 0x154f8 <isspace>
   1530a:	89 2b       	or	r24, r25
   1530c:	a9 f7       	brne	.-22     	; 0x152f8 <strtoul+0x4a>
   1530e:	1d 32       	cpi	r17, 0x2D	; 45
   15310:	09 f0       	breq	.+2      	; 0x15314 <strtoul+0x66>
   15312:	5c c0       	rjmp	.+184    	; 0x153cc <strtoul+0x11e>
   15314:	21 96       	adiw	r28, 0x01	; 1
   15316:	f5 01       	movw	r30, r10
   15318:	11 81       	ldd	r17, Z+1	; 0x01
   1531a:	01 e0       	ldi	r16, 0x01	; 1
   1531c:	e1 14       	cp	r14, r1
   1531e:	f1 04       	cpc	r15, r1
   15320:	09 f4       	brne	.+2      	; 0x15324 <strtoul+0x76>
   15322:	bb c0       	rjmp	.+374    	; 0x1549a <strtoul+0x1ec>
   15324:	f0 e1       	ldi	r31, 0x10	; 16
   15326:	ef 16       	cp	r14, r31
   15328:	f1 04       	cpc	r15, r1
   1532a:	09 f0       	breq	.+2      	; 0x1532e <strtoul+0x80>
   1532c:	9b c0       	rjmp	.+310    	; 0x15464 <strtoul+0x1b6>
   1532e:	10 33       	cpi	r17, 0x30	; 48
   15330:	41 f4       	brne	.+16     	; 0x15342 <strtoul+0x94>
   15332:	88 81       	ld	r24, Y
   15334:	8f 7d       	andi	r24, 0xDF	; 223
   15336:	88 35       	cpi	r24, 0x58	; 88
   15338:	09 f0       	breq	.+2      	; 0x1533c <strtoul+0x8e>
   1533a:	8f c0       	rjmp	.+286    	; 0x1545a <strtoul+0x1ac>
   1533c:	19 81       	ldd	r17, Y+1	; 0x01
   1533e:	22 96       	adiw	r28, 0x02	; 2
   15340:	02 60       	ori	r16, 0x02	; 2
   15342:	e0 e1       	ldi	r30, 0x10	; 16
   15344:	ee 2e       	mov	r14, r30
   15346:	f1 2c       	mov	r15, r1
   15348:	88 24       	eor	r8, r8
   1534a:	8a 94       	dec	r8
   1534c:	98 2c       	mov	r9, r8
   1534e:	a8 2c       	mov	r10, r8
   15350:	ff e0       	ldi	r31, 0x0F	; 15
   15352:	bf 2e       	mov	r11, r31
   15354:	20 e0       	ldi	r18, 0x00	; 0
   15356:	60 e0       	ldi	r22, 0x00	; 0
   15358:	70 e0       	ldi	r23, 0x00	; 0
   1535a:	cb 01       	movw	r24, r22
   1535c:	27 01       	movw	r4, r14
   1535e:	0f 2c       	mov	r0, r15
   15360:	00 0c       	add	r0, r0
   15362:	66 08       	sbc	r6, r6
   15364:	77 08       	sbc	r7, r7
   15366:	fe 01       	movw	r30, r28
   15368:	50 ed       	ldi	r21, 0xD0	; 208
   1536a:	35 2e       	mov	r3, r21
   1536c:	31 0e       	add	r3, r17
   1536e:	39 e0       	ldi	r19, 0x09	; 9
   15370:	33 15       	cp	r19, r3
   15372:	68 f4       	brcc	.+26     	; 0x1538e <strtoul+0xe0>
   15374:	3f eb       	ldi	r19, 0xBF	; 191
   15376:	31 0f       	add	r19, r17
   15378:	49 ec       	ldi	r20, 0xC9	; 201
   1537a:	34 2e       	mov	r3, r20
   1537c:	3a 31       	cpi	r19, 0x1A	; 26
   1537e:	30 f0       	brcs	.+12     	; 0x1538c <strtoul+0xde>
   15380:	3f e9       	ldi	r19, 0x9F	; 159
   15382:	31 0f       	add	r19, r17
   15384:	3a 31       	cpi	r19, 0x1A	; 26
   15386:	b0 f5       	brcc	.+108    	; 0x153f4 <strtoul+0x146>
   15388:	39 ea       	ldi	r19, 0xA9	; 169
   1538a:	33 2e       	mov	r3, r19
   1538c:	31 0e       	add	r3, r17
   1538e:	3e 14       	cp	r3, r14
   15390:	1f 04       	cpc	r1, r15
   15392:	84 f5       	brge	.+96     	; 0x153f4 <strtoul+0x146>
   15394:	2f 3f       	cpi	r18, 0xFF	; 255
   15396:	b9 f0       	breq	.+46     	; 0x153c6 <strtoul+0x118>
   15398:	86 16       	cp	r8, r22
   1539a:	97 06       	cpc	r9, r23
   1539c:	a8 06       	cpc	r10, r24
   1539e:	b9 06       	cpc	r11, r25
   153a0:	38 f1       	brcs	.+78     	; 0x153f0 <strtoul+0x142>
   153a2:	a3 01       	movw	r20, r6
   153a4:	92 01       	movw	r18, r4
   153a6:	0e 94 47 b4 	call	0x1688e	; 0x1688e <__mulsi3>
   153aa:	23 2d       	mov	r18, r3
   153ac:	30 e0       	ldi	r19, 0x00	; 0
   153ae:	50 e0       	ldi	r21, 0x00	; 0
   153b0:	40 e0       	ldi	r20, 0x00	; 0
   153b2:	62 0f       	add	r22, r18
   153b4:	73 1f       	adc	r23, r19
   153b6:	84 1f       	adc	r24, r20
   153b8:	95 1f       	adc	r25, r21
   153ba:	62 17       	cp	r22, r18
   153bc:	73 07       	cpc	r23, r19
   153be:	84 07       	cpc	r24, r20
   153c0:	95 07       	cpc	r25, r21
   153c2:	b0 f0       	brcs	.+44     	; 0x153f0 <strtoul+0x142>
   153c4:	21 e0       	ldi	r18, 0x01	; 1
   153c6:	21 96       	adiw	r28, 0x01	; 1
   153c8:	10 81       	ld	r17, Z
   153ca:	cd cf       	rjmp	.-102    	; 0x15366 <strtoul+0xb8>
   153cc:	1b 32       	cpi	r17, 0x2B	; 43
   153ce:	21 f4       	brne	.+8      	; 0x153d8 <strtoul+0x12a>
   153d0:	e5 01       	movw	r28, r10
   153d2:	22 96       	adiw	r28, 0x02	; 2
   153d4:	f5 01       	movw	r30, r10
   153d6:	11 81       	ldd	r17, Z+1	; 0x01
   153d8:	00 e0       	ldi	r16, 0x00	; 0
   153da:	a0 cf       	rjmp	.-192    	; 0x1531c <strtoul+0x6e>
   153dc:	78 e0       	ldi	r23, 0x08	; 8
   153de:	e7 2e       	mov	r14, r23
   153e0:	f1 2c       	mov	r15, r1
   153e2:	88 24       	eor	r8, r8
   153e4:	8a 94       	dec	r8
   153e6:	98 2c       	mov	r9, r8
   153e8:	a8 2c       	mov	r10, r8
   153ea:	6f e1       	ldi	r22, 0x1F	; 31
   153ec:	b6 2e       	mov	r11, r22
   153ee:	b2 cf       	rjmp	.-156    	; 0x15354 <strtoul+0xa6>
   153f0:	2f ef       	ldi	r18, 0xFF	; 255
   153f2:	e9 cf       	rjmp	.-46     	; 0x153c6 <strtoul+0x118>
   153f4:	c1 14       	cp	r12, r1
   153f6:	d1 04       	cpc	r13, r1
   153f8:	31 f0       	breq	.+12     	; 0x15406 <strtoul+0x158>
   153fa:	22 23       	and	r18, r18
   153fc:	51 f1       	breq	.+84     	; 0x15452 <strtoul+0x1a4>
   153fe:	21 97       	sbiw	r28, 0x01	; 1
   15400:	f6 01       	movw	r30, r12
   15402:	d1 83       	std	Z+1, r29	; 0x01
   15404:	c0 83       	st	Z, r28
   15406:	00 ff       	sbrs	r16, 0
   15408:	07 c0       	rjmp	.+14     	; 0x15418 <strtoul+0x16a>
   1540a:	90 95       	com	r25
   1540c:	80 95       	com	r24
   1540e:	70 95       	com	r23
   15410:	61 95       	neg	r22
   15412:	7f 4f       	sbci	r23, 0xFF	; 255
   15414:	8f 4f       	sbci	r24, 0xFF	; 255
   15416:	9f 4f       	sbci	r25, 0xFF	; 255
   15418:	2f 3f       	cpi	r18, 0xFF	; 255
   1541a:	49 f4       	brne	.+18     	; 0x1542e <strtoul+0x180>
   1541c:	82 e2       	ldi	r24, 0x22	; 34
   1541e:	90 e0       	ldi	r25, 0x00	; 0
   15420:	90 93 38 13 	sts	0x1338, r25	; 0x801338 <errno+0x1>
   15424:	80 93 37 13 	sts	0x1337, r24	; 0x801337 <errno>
   15428:	6f ef       	ldi	r22, 0xFF	; 255
   1542a:	7f ef       	ldi	r23, 0xFF	; 255
   1542c:	cb 01       	movw	r24, r22
   1542e:	df 91       	pop	r29
   15430:	cf 91       	pop	r28
   15432:	1f 91       	pop	r17
   15434:	0f 91       	pop	r16
   15436:	ff 90       	pop	r15
   15438:	ef 90       	pop	r14
   1543a:	df 90       	pop	r13
   1543c:	cf 90       	pop	r12
   1543e:	bf 90       	pop	r11
   15440:	af 90       	pop	r10
   15442:	9f 90       	pop	r9
   15444:	8f 90       	pop	r8
   15446:	7f 90       	pop	r7
   15448:	6f 90       	pop	r6
   1544a:	5f 90       	pop	r5
   1544c:	4f 90       	pop	r4
   1544e:	3f 90       	pop	r3
   15450:	08 95       	ret
   15452:	01 ff       	sbrs	r16, 1
   15454:	d8 cf       	rjmp	.-80     	; 0x15406 <strtoul+0x158>
   15456:	22 97       	sbiw	r28, 0x02	; 2
   15458:	d3 cf       	rjmp	.-90     	; 0x15400 <strtoul+0x152>
   1545a:	10 e3       	ldi	r17, 0x30	; 48
   1545c:	e1 14       	cp	r14, r1
   1545e:	f1 04       	cpc	r15, r1
   15460:	09 f4       	brne	.+2      	; 0x15464 <strtoul+0x1b6>
   15462:	bc cf       	rjmp	.-136    	; 0x153dc <strtoul+0x12e>
   15464:	3a e0       	ldi	r19, 0x0A	; 10
   15466:	e3 16       	cp	r14, r19
   15468:	f1 04       	cpc	r15, r1
   1546a:	e9 f0       	breq	.+58     	; 0x154a6 <strtoul+0x1f8>
   1546c:	80 e1       	ldi	r24, 0x10	; 16
   1546e:	e8 16       	cp	r14, r24
   15470:	f1 04       	cpc	r15, r1
   15472:	09 f4       	brne	.+2      	; 0x15476 <strtoul+0x1c8>
   15474:	66 cf       	rjmp	.-308    	; 0x15342 <strtoul+0x94>
   15476:	e8 e0       	ldi	r30, 0x08	; 8
   15478:	ee 16       	cp	r14, r30
   1547a:	f1 04       	cpc	r15, r1
   1547c:	09 f4       	brne	.+2      	; 0x15480 <strtoul+0x1d2>
   1547e:	b1 cf       	rjmp	.-158    	; 0x153e2 <strtoul+0x134>
   15480:	6f ef       	ldi	r22, 0xFF	; 255
   15482:	7f ef       	ldi	r23, 0xFF	; 255
   15484:	cb 01       	movw	r24, r22
   15486:	97 01       	movw	r18, r14
   15488:	0f 2c       	mov	r0, r15
   1548a:	00 0c       	add	r0, r0
   1548c:	44 0b       	sbc	r20, r20
   1548e:	55 0b       	sbc	r21, r21
   15490:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
   15494:	49 01       	movw	r8, r18
   15496:	5a 01       	movw	r10, r20
   15498:	5d cf       	rjmp	.-326    	; 0x15354 <strtoul+0xa6>
   1549a:	10 33       	cpi	r17, 0x30	; 48
   1549c:	09 f4       	brne	.+2      	; 0x154a0 <strtoul+0x1f2>
   1549e:	49 cf       	rjmp	.-366    	; 0x15332 <strtoul+0x84>
   154a0:	9a e0       	ldi	r25, 0x0A	; 10
   154a2:	e9 2e       	mov	r14, r25
   154a4:	f1 2c       	mov	r15, r1
   154a6:	89 e9       	ldi	r24, 0x99	; 153
   154a8:	88 2e       	mov	r8, r24
   154aa:	98 2c       	mov	r9, r8
   154ac:	a8 2c       	mov	r10, r8
   154ae:	89 e1       	ldi	r24, 0x19	; 25
   154b0:	b8 2e       	mov	r11, r24
   154b2:	50 cf       	rjmp	.-352    	; 0x15354 <strtoul+0xa6>

000154b4 <atof>:
atof():
   154b4:	66 27       	eor	r22, r22
   154b6:	77 27       	eor	r23, r23
   154b8:	0c 94 01 b0 	jmp	0x16002	; 0x16002 <strtod>

000154bc <atoi>:
atoi():
   154bc:	fc 01       	movw	r30, r24
   154be:	88 27       	eor	r24, r24
   154c0:	99 27       	eor	r25, r25
   154c2:	e8 94       	clt
   154c4:	21 91       	ld	r18, Z+
   154c6:	20 32       	cpi	r18, 0x20	; 32
   154c8:	e9 f3       	breq	.-6      	; 0x154c4 <atoi+0x8>
   154ca:	29 30       	cpi	r18, 0x09	; 9
   154cc:	10 f0       	brcs	.+4      	; 0x154d2 <atoi+0x16>
   154ce:	2e 30       	cpi	r18, 0x0E	; 14
   154d0:	c8 f3       	brcs	.-14     	; 0x154c4 <atoi+0x8>
   154d2:	2b 32       	cpi	r18, 0x2B	; 43
   154d4:	41 f0       	breq	.+16     	; 0x154e6 <atoi+0x2a>
   154d6:	2d 32       	cpi	r18, 0x2D	; 45
   154d8:	39 f4       	brne	.+14     	; 0x154e8 <atoi+0x2c>
   154da:	68 94       	set
   154dc:	04 c0       	rjmp	.+8      	; 0x154e6 <atoi+0x2a>
   154de:	0e 94 d8 aa 	call	0x155b0	; 0x155b0 <__mulhi_const_10>
   154e2:	82 0f       	add	r24, r18
   154e4:	91 1d       	adc	r25, r1
   154e6:	21 91       	ld	r18, Z+
   154e8:	20 53       	subi	r18, 0x30	; 48
   154ea:	2a 30       	cpi	r18, 0x0A	; 10
   154ec:	c0 f3       	brcs	.-16     	; 0x154de <atoi+0x22>
   154ee:	1e f4       	brtc	.+6      	; 0x154f6 <atoi+0x3a>
   154f0:	90 95       	com	r25
   154f2:	81 95       	neg	r24
   154f4:	9f 4f       	sbci	r25, 0xFF	; 255
   154f6:	08 95       	ret

000154f8 <isspace>:
isspace():
   154f8:	91 11       	cpse	r25, r1
   154fa:	0c 94 37 b2 	jmp	0x1646e	; 0x1646e <__ctype_isfalse>
   154fe:	80 32       	cpi	r24, 0x20	; 32
   15500:	19 f0       	breq	.+6      	; 0x15508 <isspace+0x10>
   15502:	89 50       	subi	r24, 0x09	; 9
   15504:	85 50       	subi	r24, 0x05	; 5
   15506:	c8 f7       	brcc	.-14     	; 0x154fa <isspace+0x2>
   15508:	08 95       	ret

0001550a <strcat_P>:
strcat_P():
   1550a:	fb 01       	movw	r30, r22
   1550c:	dc 01       	movw	r26, r24
   1550e:	0d 90       	ld	r0, X+
   15510:	00 20       	and	r0, r0
   15512:	e9 f7       	brne	.-6      	; 0x1550e <strcat_P+0x4>
   15514:	11 97       	sbiw	r26, 0x01	; 1
   15516:	05 90       	lpm	r0, Z+
   15518:	0d 92       	st	X+, r0
   1551a:	00 20       	and	r0, r0
   1551c:	e1 f7       	brne	.-8      	; 0x15516 <strcat_P+0xc>
   1551e:	08 95       	ret

00015520 <strcpy_P>:
strcpy_P():
   15520:	fb 01       	movw	r30, r22
   15522:	dc 01       	movw	r26, r24
   15524:	05 90       	lpm	r0, Z+
   15526:	0d 92       	st	X+, r0
   15528:	00 20       	and	r0, r0
   1552a:	e1 f7       	brne	.-8      	; 0x15524 <strcpy_P+0x4>
   1552c:	08 95       	ret

0001552e <strtok>:
strtok():
   1552e:	4f e1       	ldi	r20, 0x1F	; 31
   15530:	53 e1       	ldi	r21, 0x13	; 19
   15532:	0c 94 9b aa 	jmp	0x15536	; 0x15536 <strtok_r>

00015536 <strtok_r>:
strtok_r():
   15536:	fa 01       	movw	r30, r20
   15538:	a1 91       	ld	r26, Z+
   1553a:	b0 81       	ld	r27, Z
   1553c:	00 97       	sbiw	r24, 0x00	; 0
   1553e:	19 f4       	brne	.+6      	; 0x15546 <strtok_r+0x10>
   15540:	10 97       	sbiw	r26, 0x00	; 0
   15542:	e1 f0       	breq	.+56     	; 0x1557c <strtok_r+0x46>
   15544:	cd 01       	movw	r24, r26
   15546:	dc 01       	movw	r26, r24
   15548:	cd 01       	movw	r24, r26
   1554a:	0d 90       	ld	r0, X+
   1554c:	00 20       	and	r0, r0
   1554e:	11 f4       	brne	.+4      	; 0x15554 <strtok_r+0x1e>
   15550:	c0 01       	movw	r24, r0
   15552:	13 c0       	rjmp	.+38     	; 0x1557a <strtok_r+0x44>
   15554:	fb 01       	movw	r30, r22
   15556:	21 91       	ld	r18, Z+
   15558:	22 23       	and	r18, r18
   1555a:	19 f0       	breq	.+6      	; 0x15562 <strtok_r+0x2c>
   1555c:	20 15       	cp	r18, r0
   1555e:	d9 f7       	brne	.-10     	; 0x15556 <strtok_r+0x20>
   15560:	f3 cf       	rjmp	.-26     	; 0x15548 <strtok_r+0x12>
   15562:	fb 01       	movw	r30, r22
   15564:	21 91       	ld	r18, Z+
   15566:	20 15       	cp	r18, r0
   15568:	19 f4       	brne	.+6      	; 0x15570 <strtok_r+0x3a>
   1556a:	1e 92       	st	-X, r1
   1556c:	11 96       	adiw	r26, 0x01	; 1
   1556e:	06 c0       	rjmp	.+12     	; 0x1557c <strtok_r+0x46>
   15570:	22 23       	and	r18, r18
   15572:	c1 f7       	brne	.-16     	; 0x15564 <strtok_r+0x2e>
   15574:	0d 90       	ld	r0, X+
   15576:	00 20       	and	r0, r0
   15578:	a1 f7       	brne	.-24     	; 0x15562 <strtok_r+0x2c>
   1557a:	d0 01       	movw	r26, r0
   1557c:	fa 01       	movw	r30, r20
   1557e:	a1 93       	st	Z+, r26
   15580:	b0 83       	st	Z, r27
   15582:	08 95       	ret

00015584 <itoa>:
itoa():
   15584:	45 32       	cpi	r20, 0x25	; 37
   15586:	51 05       	cpc	r21, r1
   15588:	20 f4       	brcc	.+8      	; 0x15592 <itoa+0xe>
   1558a:	42 30       	cpi	r20, 0x02	; 2
   1558c:	10 f0       	brcs	.+4      	; 0x15592 <itoa+0xe>
   1558e:	0c 94 cd aa 	jmp	0x1559a	; 0x1559a <__itoa_ncheck>
   15592:	fb 01       	movw	r30, r22
   15594:	10 82       	st	Z, r1
   15596:	cb 01       	movw	r24, r22
   15598:	08 95       	ret

0001559a <__itoa_ncheck>:
__itoa_ncheck():
   1559a:	bb 27       	eor	r27, r27
   1559c:	4a 30       	cpi	r20, 0x0A	; 10
   1559e:	31 f4       	brne	.+12     	; 0x155ac <__itoa_ncheck+0x12>
   155a0:	99 23       	and	r25, r25
   155a2:	22 f4       	brpl	.+8      	; 0x155ac <__itoa_ncheck+0x12>
   155a4:	bd e2       	ldi	r27, 0x2D	; 45
   155a6:	90 95       	com	r25
   155a8:	81 95       	neg	r24
   155aa:	9f 4f       	sbci	r25, 0xFF	; 255
   155ac:	0c 94 e1 aa 	jmp	0x155c2	; 0x155c2 <__utoa_common>

000155b0 <__mulhi_const_10>:
__mulhi_const_10():
   155b0:	7a e0       	ldi	r23, 0x0A	; 10
   155b2:	97 9f       	mul	r25, r23
   155b4:	90 2d       	mov	r25, r0
   155b6:	87 9f       	mul	r24, r23
   155b8:	80 2d       	mov	r24, r0
   155ba:	91 0d       	add	r25, r1
   155bc:	11 24       	eor	r1, r1
   155be:	08 95       	ret

000155c0 <__utoa_ncheck>:
__utoa_ncheck():
   155c0:	bb 27       	eor	r27, r27

000155c2 <__utoa_common>:
   155c2:	fb 01       	movw	r30, r22
   155c4:	55 27       	eor	r21, r21
   155c6:	aa 27       	eor	r26, r26
   155c8:	88 0f       	add	r24, r24
   155ca:	99 1f       	adc	r25, r25
   155cc:	aa 1f       	adc	r26, r26
   155ce:	a4 17       	cp	r26, r20
   155d0:	10 f0       	brcs	.+4      	; 0x155d6 <__utoa_common+0x14>
   155d2:	a4 1b       	sub	r26, r20
   155d4:	83 95       	inc	r24
   155d6:	50 51       	subi	r21, 0x10	; 16
   155d8:	b9 f7       	brne	.-18     	; 0x155c8 <__utoa_common+0x6>
   155da:	a0 5d       	subi	r26, 0xD0	; 208
   155dc:	aa 33       	cpi	r26, 0x3A	; 58
   155de:	08 f0       	brcs	.+2      	; 0x155e2 <__utoa_common+0x20>
   155e0:	a9 5d       	subi	r26, 0xD9	; 217
   155e2:	a1 93       	st	Z+, r26
   155e4:	00 97       	sbiw	r24, 0x00	; 0
   155e6:	79 f7       	brne	.-34     	; 0x155c6 <__utoa_common+0x4>
   155e8:	b1 11       	cpse	r27, r1
   155ea:	b1 93       	st	Z+, r27
   155ec:	11 92       	st	Z+, r1
   155ee:	cb 01       	movw	r24, r22
   155f0:	0c 94 6f b2 	jmp	0x164de	; 0x164de <strrev>

000155f4 <fdevopen>:
fdevopen():
   155f4:	0f 93       	push	r16
   155f6:	1f 93       	push	r17
   155f8:	cf 93       	push	r28
   155fa:	df 93       	push	r29
   155fc:	00 97       	sbiw	r24, 0x00	; 0
   155fe:	59 f4       	brne	.+22     	; 0x15616 <fdevopen+0x22>
   15600:	61 15       	cp	r22, r1
   15602:	71 05       	cpc	r23, r1
   15604:	41 f4       	brne	.+16     	; 0x15616 <fdevopen+0x22>
   15606:	f0 e0       	ldi	r31, 0x00	; 0
   15608:	e0 e0       	ldi	r30, 0x00	; 0
   1560a:	cf 01       	movw	r24, r30
   1560c:	df 91       	pop	r29
   1560e:	cf 91       	pop	r28
   15610:	1f 91       	pop	r17
   15612:	0f 91       	pop	r16
   15614:	08 95       	ret
   15616:	8b 01       	movw	r16, r22
   15618:	ec 01       	movw	r28, r24
   1561a:	6e e0       	ldi	r22, 0x0E	; 14
   1561c:	70 e0       	ldi	r23, 0x00	; 0
   1561e:	81 e0       	ldi	r24, 0x01	; 1
   15620:	90 e0       	ldi	r25, 0x00	; 0
   15622:	0e 94 47 ad 	call	0x15a8e	; 0x15a8e <calloc>
   15626:	fc 01       	movw	r30, r24
   15628:	89 2b       	or	r24, r25
   1562a:	69 f3       	breq	.-38     	; 0x15606 <fdevopen+0x12>
   1562c:	80 e8       	ldi	r24, 0x80	; 128
   1562e:	83 83       	std	Z+3, r24	; 0x03
   15630:	01 15       	cp	r16, r1
   15632:	11 05       	cpc	r17, r1
   15634:	71 f0       	breq	.+28     	; 0x15652 <fdevopen+0x5e>
   15636:	13 87       	std	Z+11, r17	; 0x0b
   15638:	02 87       	std	Z+10, r16	; 0x0a
   1563a:	81 e8       	ldi	r24, 0x81	; 129
   1563c:	83 83       	std	Z+3, r24	; 0x03
   1563e:	80 91 21 13 	lds	r24, 0x1321	; 0x801321 <__iob>
   15642:	90 91 22 13 	lds	r25, 0x1322	; 0x801322 <__iob+0x1>
   15646:	89 2b       	or	r24, r25
   15648:	21 f4       	brne	.+8      	; 0x15652 <fdevopen+0x5e>
   1564a:	f0 93 22 13 	sts	0x1322, r31	; 0x801322 <__iob+0x1>
   1564e:	e0 93 21 13 	sts	0x1321, r30	; 0x801321 <__iob>
   15652:	20 97       	sbiw	r28, 0x00	; 0
   15654:	d1 f2       	breq	.-76     	; 0x1560a <fdevopen+0x16>
   15656:	d1 87       	std	Z+9, r29	; 0x09
   15658:	c0 87       	std	Z+8, r28	; 0x08
   1565a:	83 81       	ldd	r24, Z+3	; 0x03
   1565c:	82 60       	ori	r24, 0x02	; 2
   1565e:	83 83       	std	Z+3, r24	; 0x03
   15660:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <__iob+0x2>
   15664:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <__iob+0x3>
   15668:	89 2b       	or	r24, r25
   1566a:	79 f6       	brne	.-98     	; 0x1560a <fdevopen+0x16>
   1566c:	f0 93 24 13 	sts	0x1324, r31	; 0x801324 <__iob+0x3>
   15670:	e0 93 23 13 	sts	0x1323, r30	; 0x801323 <__iob+0x2>
   15674:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <__iob+0x4>
   15678:	90 91 26 13 	lds	r25, 0x1326	; 0x801326 <__iob+0x5>
   1567c:	89 2b       	or	r24, r25
   1567e:	29 f6       	brne	.-118    	; 0x1560a <fdevopen+0x16>
   15680:	f0 93 26 13 	sts	0x1326, r31	; 0x801326 <__iob+0x5>
   15684:	e0 93 25 13 	sts	0x1325, r30	; 0x801325 <__iob+0x4>
   15688:	c0 cf       	rjmp	.-128    	; 0x1560a <fdevopen+0x16>

0001568a <vfprintf>:
vfprintf():
   1568a:	2f 92       	push	r2
   1568c:	3f 92       	push	r3
   1568e:	4f 92       	push	r4
   15690:	5f 92       	push	r5
   15692:	6f 92       	push	r6
   15694:	7f 92       	push	r7
   15696:	8f 92       	push	r8
   15698:	9f 92       	push	r9
   1569a:	af 92       	push	r10
   1569c:	bf 92       	push	r11
   1569e:	cf 92       	push	r12
   156a0:	df 92       	push	r13
   156a2:	ef 92       	push	r14
   156a4:	ff 92       	push	r15
   156a6:	0f 93       	push	r16
   156a8:	1f 93       	push	r17
   156aa:	cf 93       	push	r28
   156ac:	df 93       	push	r29
   156ae:	00 d0       	rcall	.+0      	; 0x156b0 <vfprintf+0x26>
   156b0:	00 d0       	rcall	.+0      	; 0x156b2 <vfprintf+0x28>
   156b2:	00 d0       	rcall	.+0      	; 0x156b4 <vfprintf+0x2a>
   156b4:	1f 92       	push	r1
   156b6:	1f 92       	push	r1
   156b8:	cd b7       	in	r28, 0x3d	; 61
   156ba:	de b7       	in	r29, 0x3e	; 62
   156bc:	7c 01       	movw	r14, r24
   156be:	3b 01       	movw	r6, r22
   156c0:	8a 01       	movw	r16, r20
   156c2:	fc 01       	movw	r30, r24
   156c4:	17 82       	std	Z+7, r1	; 0x07
   156c6:	16 82       	std	Z+6, r1	; 0x06
   156c8:	83 81       	ldd	r24, Z+3	; 0x03
   156ca:	81 ff       	sbrs	r24, 1
   156cc:	dd c1       	rjmp	.+954    	; 0x15a88 <vfprintf+0x3fe>
   156ce:	ce 01       	movw	r24, r28
   156d0:	01 96       	adiw	r24, 0x01	; 1
   156d2:	5c 01       	movw	r10, r24
   156d4:	f7 01       	movw	r30, r14
   156d6:	93 81       	ldd	r25, Z+3	; 0x03
   156d8:	f3 01       	movw	r30, r6
   156da:	93 fd       	sbrc	r25, 3
   156dc:	85 91       	lpm	r24, Z+
   156de:	93 ff       	sbrs	r25, 3
   156e0:	81 91       	ld	r24, Z+
   156e2:	3f 01       	movw	r6, r30
   156e4:	88 23       	and	r24, r24
   156e6:	09 f4       	brne	.+2      	; 0x156ea <vfprintf+0x60>
   156e8:	53 c1       	rjmp	.+678    	; 0x15990 <vfprintf+0x306>
   156ea:	85 32       	cpi	r24, 0x25	; 37
   156ec:	39 f4       	brne	.+14     	; 0x156fc <vfprintf+0x72>
   156ee:	93 fd       	sbrc	r25, 3
   156f0:	85 91       	lpm	r24, Z+
   156f2:	93 ff       	sbrs	r25, 3
   156f4:	81 91       	ld	r24, Z+
   156f6:	3f 01       	movw	r6, r30
   156f8:	85 32       	cpi	r24, 0x25	; 37
   156fa:	29 f4       	brne	.+10     	; 0x15706 <vfprintf+0x7c>
   156fc:	b7 01       	movw	r22, r14
   156fe:	90 e0       	ldi	r25, 0x00	; 0
   15700:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15704:	e7 cf       	rjmp	.-50     	; 0x156d4 <vfprintf+0x4a>
   15706:	91 2c       	mov	r9, r1
   15708:	21 2c       	mov	r2, r1
   1570a:	31 2c       	mov	r3, r1
   1570c:	ff e1       	ldi	r31, 0x1F	; 31
   1570e:	f3 15       	cp	r31, r3
   15710:	38 f0       	brcs	.+14     	; 0x15720 <vfprintf+0x96>
   15712:	8b 32       	cpi	r24, 0x2B	; 43
   15714:	11 f1       	breq	.+68     	; 0x1575a <vfprintf+0xd0>
   15716:	90 f4       	brcc	.+36     	; 0x1573c <vfprintf+0xb2>
   15718:	80 32       	cpi	r24, 0x20	; 32
   1571a:	09 f1       	breq	.+66     	; 0x1575e <vfprintf+0xd4>
   1571c:	83 32       	cpi	r24, 0x23	; 35
   1571e:	29 f1       	breq	.+74     	; 0x1576a <vfprintf+0xe0>
   15720:	37 fc       	sbrc	r3, 7
   15722:	3c c0       	rjmp	.+120    	; 0x1579c <vfprintf+0x112>
   15724:	20 ed       	ldi	r18, 0xD0	; 208
   15726:	28 0f       	add	r18, r24
   15728:	2a 30       	cpi	r18, 0x0A	; 10
   1572a:	50 f5       	brcc	.+84     	; 0x15780 <vfprintf+0xf6>
   1572c:	36 fe       	sbrs	r3, 6
   1572e:	20 c0       	rjmp	.+64     	; 0x15770 <vfprintf+0xe6>
   15730:	8a e0       	ldi	r24, 0x0A	; 10
   15732:	98 9e       	mul	r9, r24
   15734:	20 0d       	add	r18, r0
   15736:	11 24       	eor	r1, r1
   15738:	92 2e       	mov	r9, r18
   1573a:	06 c0       	rjmp	.+12     	; 0x15748 <vfprintf+0xbe>
   1573c:	8d 32       	cpi	r24, 0x2D	; 45
   1573e:	91 f0       	breq	.+36     	; 0x15764 <vfprintf+0xda>
   15740:	80 33       	cpi	r24, 0x30	; 48
   15742:	71 f7       	brne	.-36     	; 0x15720 <vfprintf+0x96>
   15744:	68 94       	set
   15746:	30 f8       	bld	r3, 0
   15748:	f3 01       	movw	r30, r6
   1574a:	93 fd       	sbrc	r25, 3
   1574c:	85 91       	lpm	r24, Z+
   1574e:	93 ff       	sbrs	r25, 3
   15750:	81 91       	ld	r24, Z+
   15752:	3f 01       	movw	r6, r30
   15754:	81 11       	cpse	r24, r1
   15756:	da cf       	rjmp	.-76     	; 0x1570c <vfprintf+0x82>
   15758:	21 c0       	rjmp	.+66     	; 0x1579c <vfprintf+0x112>
   1575a:	68 94       	set
   1575c:	31 f8       	bld	r3, 1
   1575e:	68 94       	set
   15760:	32 f8       	bld	r3, 2
   15762:	f2 cf       	rjmp	.-28     	; 0x15748 <vfprintf+0xbe>
   15764:	68 94       	set
   15766:	33 f8       	bld	r3, 3
   15768:	ef cf       	rjmp	.-34     	; 0x15748 <vfprintf+0xbe>
   1576a:	68 94       	set
   1576c:	34 f8       	bld	r3, 4
   1576e:	ec cf       	rjmp	.-40     	; 0x15748 <vfprintf+0xbe>
   15770:	ea e0       	ldi	r30, 0x0A	; 10
   15772:	2e 9e       	mul	r2, r30
   15774:	20 0d       	add	r18, r0
   15776:	11 24       	eor	r1, r1
   15778:	22 2e       	mov	r2, r18
   1577a:	68 94       	set
   1577c:	35 f8       	bld	r3, 5
   1577e:	e4 cf       	rjmp	.-56     	; 0x15748 <vfprintf+0xbe>
   15780:	8e 32       	cpi	r24, 0x2E	; 46
   15782:	29 f4       	brne	.+10     	; 0x1578e <vfprintf+0x104>
   15784:	36 fc       	sbrc	r3, 6
   15786:	04 c1       	rjmp	.+520    	; 0x15990 <vfprintf+0x306>
   15788:	68 94       	set
   1578a:	36 f8       	bld	r3, 6
   1578c:	dd cf       	rjmp	.-70     	; 0x15748 <vfprintf+0xbe>
   1578e:	8c 36       	cpi	r24, 0x6C	; 108
   15790:	19 f4       	brne	.+6      	; 0x15798 <vfprintf+0x10e>
   15792:	68 94       	set
   15794:	37 f8       	bld	r3, 7
   15796:	d8 cf       	rjmp	.-80     	; 0x15748 <vfprintf+0xbe>
   15798:	88 36       	cpi	r24, 0x68	; 104
   1579a:	b1 f2       	breq	.-84     	; 0x15748 <vfprintf+0xbe>
   1579c:	98 2f       	mov	r25, r24
   1579e:	9f 7d       	andi	r25, 0xDF	; 223
   157a0:	95 54       	subi	r25, 0x45	; 69
   157a2:	93 30       	cpi	r25, 0x03	; 3
   157a4:	e0 f0       	brcs	.+56     	; 0x157de <vfprintf+0x154>
   157a6:	83 36       	cpi	r24, 0x63	; 99
   157a8:	a1 f1       	breq	.+104    	; 0x15812 <vfprintf+0x188>
   157aa:	83 37       	cpi	r24, 0x73	; 115
   157ac:	c1 f1       	breq	.+112    	; 0x1581e <vfprintf+0x194>
   157ae:	83 35       	cpi	r24, 0x53	; 83
   157b0:	09 f0       	breq	.+2      	; 0x157b4 <vfprintf+0x12a>
   157b2:	63 c0       	rjmp	.+198    	; 0x1587a <vfprintf+0x1f0>
   157b4:	28 01       	movw	r4, r16
   157b6:	f2 e0       	ldi	r31, 0x02	; 2
   157b8:	4f 0e       	add	r4, r31
   157ba:	51 1c       	adc	r5, r1
   157bc:	f8 01       	movw	r30, r16
   157be:	c0 80       	ld	r12, Z
   157c0:	d1 80       	ldd	r13, Z+1	; 0x01
   157c2:	69 2d       	mov	r22, r9
   157c4:	70 e0       	ldi	r23, 0x00	; 0
   157c6:	36 fc       	sbrc	r3, 6
   157c8:	02 c0       	rjmp	.+4      	; 0x157ce <vfprintf+0x144>
   157ca:	6f ef       	ldi	r22, 0xFF	; 255
   157cc:	7f ef       	ldi	r23, 0xFF	; 255
   157ce:	c6 01       	movw	r24, r12
   157d0:	0e 94 52 b2 	call	0x164a4	; 0x164a4 <strnlen_P>
   157d4:	4c 01       	movw	r8, r24
   157d6:	68 94       	set
   157d8:	37 f8       	bld	r3, 7
   157da:	82 01       	movw	r16, r4
   157dc:	0a c0       	rjmp	.+20     	; 0x157f2 <vfprintf+0x168>
   157de:	0c 5f       	subi	r16, 0xFC	; 252
   157e0:	1f 4f       	sbci	r17, 0xFF	; 255
   157e2:	ff e3       	ldi	r31, 0x3F	; 63
   157e4:	f9 83       	std	Y+1, r31	; 0x01
   157e6:	88 24       	eor	r8, r8
   157e8:	83 94       	inc	r8
   157ea:	91 2c       	mov	r9, r1
   157ec:	65 01       	movw	r12, r10
   157ee:	e8 94       	clt
   157f0:	37 f8       	bld	r3, 7
   157f2:	33 fe       	sbrs	r3, 3
   157f4:	2d c0       	rjmp	.+90     	; 0x15850 <vfprintf+0x1c6>
   157f6:	52 2c       	mov	r5, r2
   157f8:	81 14       	cp	r8, r1
   157fa:	91 04       	cpc	r9, r1
   157fc:	71 f5       	brne	.+92     	; 0x1585a <vfprintf+0x1d0>
   157fe:	55 20       	and	r5, r5
   15800:	09 f4       	brne	.+2      	; 0x15804 <vfprintf+0x17a>
   15802:	68 cf       	rjmp	.-304    	; 0x156d4 <vfprintf+0x4a>
   15804:	b7 01       	movw	r22, r14
   15806:	80 e2       	ldi	r24, 0x20	; 32
   15808:	90 e0       	ldi	r25, 0x00	; 0
   1580a:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   1580e:	5a 94       	dec	r5
   15810:	f6 cf       	rjmp	.-20     	; 0x157fe <vfprintf+0x174>
   15812:	f8 01       	movw	r30, r16
   15814:	80 81       	ld	r24, Z
   15816:	89 83       	std	Y+1, r24	; 0x01
   15818:	0e 5f       	subi	r16, 0xFE	; 254
   1581a:	1f 4f       	sbci	r17, 0xFF	; 255
   1581c:	e4 cf       	rjmp	.-56     	; 0x157e6 <vfprintf+0x15c>
   1581e:	28 01       	movw	r4, r16
   15820:	f2 e0       	ldi	r31, 0x02	; 2
   15822:	4f 0e       	add	r4, r31
   15824:	51 1c       	adc	r5, r1
   15826:	f8 01       	movw	r30, r16
   15828:	c0 80       	ld	r12, Z
   1582a:	d1 80       	ldd	r13, Z+1	; 0x01
   1582c:	69 2d       	mov	r22, r9
   1582e:	70 e0       	ldi	r23, 0x00	; 0
   15830:	36 fc       	sbrc	r3, 6
   15832:	02 c0       	rjmp	.+4      	; 0x15838 <vfprintf+0x1ae>
   15834:	6f ef       	ldi	r22, 0xFF	; 255
   15836:	7f ef       	ldi	r23, 0xFF	; 255
   15838:	c6 01       	movw	r24, r12
   1583a:	0e 94 64 b2 	call	0x164c8	; 0x164c8 <strnlen>
   1583e:	4c 01       	movw	r8, r24
   15840:	82 01       	movw	r16, r4
   15842:	d5 cf       	rjmp	.-86     	; 0x157ee <vfprintf+0x164>
   15844:	b7 01       	movw	r22, r14
   15846:	80 e2       	ldi	r24, 0x20	; 32
   15848:	90 e0       	ldi	r25, 0x00	; 0
   1584a:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   1584e:	2a 94       	dec	r2
   15850:	28 14       	cp	r2, r8
   15852:	19 04       	cpc	r1, r9
   15854:	09 f0       	breq	.+2      	; 0x15858 <vfprintf+0x1ce>
   15856:	b0 f7       	brcc	.-20     	; 0x15844 <vfprintf+0x1ba>
   15858:	ce cf       	rjmp	.-100    	; 0x157f6 <vfprintf+0x16c>
   1585a:	f6 01       	movw	r30, r12
   1585c:	37 fc       	sbrc	r3, 7
   1585e:	85 91       	lpm	r24, Z+
   15860:	37 fe       	sbrs	r3, 7
   15862:	81 91       	ld	r24, Z+
   15864:	6f 01       	movw	r12, r30
   15866:	b7 01       	movw	r22, r14
   15868:	90 e0       	ldi	r25, 0x00	; 0
   1586a:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   1586e:	51 10       	cpse	r5, r1
   15870:	5a 94       	dec	r5
   15872:	f1 e0       	ldi	r31, 0x01	; 1
   15874:	8f 1a       	sub	r8, r31
   15876:	91 08       	sbc	r9, r1
   15878:	bf cf       	rjmp	.-130    	; 0x157f8 <vfprintf+0x16e>
   1587a:	84 36       	cpi	r24, 0x64	; 100
   1587c:	19 f0       	breq	.+6      	; 0x15884 <vfprintf+0x1fa>
   1587e:	89 36       	cpi	r24, 0x69	; 105
   15880:	09 f0       	breq	.+2      	; 0x15884 <vfprintf+0x1fa>
   15882:	77 c0       	rjmp	.+238    	; 0x15972 <vfprintf+0x2e8>
   15884:	f8 01       	movw	r30, r16
   15886:	37 fe       	sbrs	r3, 7
   15888:	6b c0       	rjmp	.+214    	; 0x15960 <vfprintf+0x2d6>
   1588a:	60 81       	ld	r22, Z
   1588c:	71 81       	ldd	r23, Z+1	; 0x01
   1588e:	82 81       	ldd	r24, Z+2	; 0x02
   15890:	93 81       	ldd	r25, Z+3	; 0x03
   15892:	0c 5f       	subi	r16, 0xFC	; 252
   15894:	1f 4f       	sbci	r17, 0xFF	; 255
   15896:	f3 2d       	mov	r31, r3
   15898:	ff 76       	andi	r31, 0x6F	; 111
   1589a:	3f 2e       	mov	r3, r31
   1589c:	97 ff       	sbrs	r25, 7
   1589e:	09 c0       	rjmp	.+18     	; 0x158b2 <vfprintf+0x228>
   158a0:	90 95       	com	r25
   158a2:	80 95       	com	r24
   158a4:	70 95       	com	r23
   158a6:	61 95       	neg	r22
   158a8:	7f 4f       	sbci	r23, 0xFF	; 255
   158aa:	8f 4f       	sbci	r24, 0xFF	; 255
   158ac:	9f 4f       	sbci	r25, 0xFF	; 255
   158ae:	68 94       	set
   158b0:	37 f8       	bld	r3, 7
   158b2:	2a e0       	ldi	r18, 0x0A	; 10
   158b4:	30 e0       	ldi	r19, 0x00	; 0
   158b6:	a5 01       	movw	r20, r10
   158b8:	0e 94 af b2 	call	0x1655e	; 0x1655e <__ultoa_invert>
   158bc:	c8 2e       	mov	r12, r24
   158be:	ca 18       	sub	r12, r10
   158c0:	8c 2c       	mov	r8, r12
   158c2:	43 2c       	mov	r4, r3
   158c4:	36 fe       	sbrs	r3, 6
   158c6:	0c c0       	rjmp	.+24     	; 0x158e0 <vfprintf+0x256>
   158c8:	e8 94       	clt
   158ca:	40 f8       	bld	r4, 0
   158cc:	c9 14       	cp	r12, r9
   158ce:	40 f4       	brcc	.+16     	; 0x158e0 <vfprintf+0x256>
   158d0:	34 fe       	sbrs	r3, 4
   158d2:	05 c0       	rjmp	.+10     	; 0x158de <vfprintf+0x254>
   158d4:	32 fc       	sbrc	r3, 2
   158d6:	03 c0       	rjmp	.+6      	; 0x158de <vfprintf+0x254>
   158d8:	f3 2d       	mov	r31, r3
   158da:	fe 7e       	andi	r31, 0xEE	; 238
   158dc:	4f 2e       	mov	r4, r31
   158de:	89 2c       	mov	r8, r9
   158e0:	44 fe       	sbrs	r4, 4
   158e2:	aa c0       	rjmp	.+340    	; 0x15a38 <vfprintf+0x3ae>
   158e4:	fe 01       	movw	r30, r28
   158e6:	ec 0d       	add	r30, r12
   158e8:	f1 1d       	adc	r31, r1
   158ea:	80 81       	ld	r24, Z
   158ec:	80 33       	cpi	r24, 0x30	; 48
   158ee:	09 f0       	breq	.+2      	; 0x158f2 <vfprintf+0x268>
   158f0:	9c c0       	rjmp	.+312    	; 0x15a2a <vfprintf+0x3a0>
   158f2:	24 2d       	mov	r18, r4
   158f4:	29 7e       	andi	r18, 0xE9	; 233
   158f6:	42 2e       	mov	r4, r18
   158f8:	84 2d       	mov	r24, r4
   158fa:	88 70       	andi	r24, 0x08	; 8
   158fc:	58 2e       	mov	r5, r24
   158fe:	43 fc       	sbrc	r4, 3
   15900:	aa c0       	rjmp	.+340    	; 0x15a56 <vfprintf+0x3cc>
   15902:	40 fe       	sbrs	r4, 0
   15904:	a4 c0       	rjmp	.+328    	; 0x15a4e <vfprintf+0x3c4>
   15906:	9c 2c       	mov	r9, r12
   15908:	82 14       	cp	r8, r2
   1590a:	18 f4       	brcc	.+6      	; 0x15912 <vfprintf+0x288>
   1590c:	2c 0c       	add	r2, r12
   1590e:	92 2c       	mov	r9, r2
   15910:	98 18       	sub	r9, r8
   15912:	44 fe       	sbrs	r4, 4
   15914:	a6 c0       	rjmp	.+332    	; 0x15a62 <vfprintf+0x3d8>
   15916:	b7 01       	movw	r22, r14
   15918:	80 e3       	ldi	r24, 0x30	; 48
   1591a:	90 e0       	ldi	r25, 0x00	; 0
   1591c:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15920:	42 fe       	sbrs	r4, 2
   15922:	09 c0       	rjmp	.+18     	; 0x15936 <vfprintf+0x2ac>
   15924:	88 e7       	ldi	r24, 0x78	; 120
   15926:	90 e0       	ldi	r25, 0x00	; 0
   15928:	41 fe       	sbrs	r4, 1
   1592a:	02 c0       	rjmp	.+4      	; 0x15930 <vfprintf+0x2a6>
   1592c:	88 e5       	ldi	r24, 0x58	; 88
   1592e:	90 e0       	ldi	r25, 0x00	; 0
   15930:	b7 01       	movw	r22, r14
   15932:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15936:	c9 14       	cp	r12, r9
   15938:	08 f4       	brcc	.+2      	; 0x1593c <vfprintf+0x2b2>
   1593a:	9f c0       	rjmp	.+318    	; 0x15a7a <vfprintf+0x3f0>
   1593c:	ca 94       	dec	r12
   1593e:	d1 2c       	mov	r13, r1
   15940:	9f ef       	ldi	r25, 0xFF	; 255
   15942:	c9 1a       	sub	r12, r25
   15944:	d9 0a       	sbc	r13, r25
   15946:	ca 0c       	add	r12, r10
   15948:	db 1c       	adc	r13, r11
   1594a:	f6 01       	movw	r30, r12
   1594c:	82 91       	ld	r24, -Z
   1594e:	6f 01       	movw	r12, r30
   15950:	b7 01       	movw	r22, r14
   15952:	90 e0       	ldi	r25, 0x00	; 0
   15954:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15958:	ac 14       	cp	r10, r12
   1595a:	bd 04       	cpc	r11, r13
   1595c:	b1 f7       	brne	.-20     	; 0x1594a <vfprintf+0x2c0>
   1595e:	4f cf       	rjmp	.-354    	; 0x157fe <vfprintf+0x174>
   15960:	60 81       	ld	r22, Z
   15962:	71 81       	ldd	r23, Z+1	; 0x01
   15964:	07 2e       	mov	r0, r23
   15966:	00 0c       	add	r0, r0
   15968:	88 0b       	sbc	r24, r24
   1596a:	99 0b       	sbc	r25, r25
   1596c:	0e 5f       	subi	r16, 0xFE	; 254
   1596e:	1f 4f       	sbci	r17, 0xFF	; 255
   15970:	92 cf       	rjmp	.-220    	; 0x15896 <vfprintf+0x20c>
   15972:	d3 2c       	mov	r13, r3
   15974:	e8 94       	clt
   15976:	d4 f8       	bld	r13, 4
   15978:	2a e0       	ldi	r18, 0x0A	; 10
   1597a:	30 e0       	ldi	r19, 0x00	; 0
   1597c:	85 37       	cpi	r24, 0x75	; 117
   1597e:	e1 f1       	breq	.+120    	; 0x159f8 <vfprintf+0x36e>
   15980:	23 2d       	mov	r18, r3
   15982:	29 7f       	andi	r18, 0xF9	; 249
   15984:	d2 2e       	mov	r13, r18
   15986:	8f 36       	cpi	r24, 0x6F	; 111
   15988:	a9 f1       	breq	.+106    	; 0x159f4 <vfprintf+0x36a>
   1598a:	f0 f4       	brcc	.+60     	; 0x159c8 <vfprintf+0x33e>
   1598c:	88 35       	cpi	r24, 0x58	; 88
   1598e:	51 f1       	breq	.+84     	; 0x159e4 <vfprintf+0x35a>
   15990:	f7 01       	movw	r30, r14
   15992:	86 81       	ldd	r24, Z+6	; 0x06
   15994:	97 81       	ldd	r25, Z+7	; 0x07
   15996:	2b 96       	adiw	r28, 0x0b	; 11
   15998:	0f b6       	in	r0, 0x3f	; 63
   1599a:	f8 94       	cli
   1599c:	de bf       	out	0x3e, r29	; 62
   1599e:	0f be       	out	0x3f, r0	; 63
   159a0:	cd bf       	out	0x3d, r28	; 61
   159a2:	df 91       	pop	r29
   159a4:	cf 91       	pop	r28
   159a6:	1f 91       	pop	r17
   159a8:	0f 91       	pop	r16
   159aa:	ff 90       	pop	r15
   159ac:	ef 90       	pop	r14
   159ae:	df 90       	pop	r13
   159b0:	cf 90       	pop	r12
   159b2:	bf 90       	pop	r11
   159b4:	af 90       	pop	r10
   159b6:	9f 90       	pop	r9
   159b8:	8f 90       	pop	r8
   159ba:	7f 90       	pop	r7
   159bc:	6f 90       	pop	r6
   159be:	5f 90       	pop	r5
   159c0:	4f 90       	pop	r4
   159c2:	3f 90       	pop	r3
   159c4:	2f 90       	pop	r2
   159c6:	08 95       	ret
   159c8:	80 37       	cpi	r24, 0x70	; 112
   159ca:	49 f0       	breq	.+18     	; 0x159de <vfprintf+0x354>
   159cc:	88 37       	cpi	r24, 0x78	; 120
   159ce:	01 f7       	brne	.-64     	; 0x15990 <vfprintf+0x306>
   159d0:	d4 fe       	sbrs	r13, 4
   159d2:	02 c0       	rjmp	.+4      	; 0x159d8 <vfprintf+0x34e>
   159d4:	68 94       	set
   159d6:	d2 f8       	bld	r13, 2
   159d8:	20 e1       	ldi	r18, 0x10	; 16
   159da:	30 e0       	ldi	r19, 0x00	; 0
   159dc:	0d c0       	rjmp	.+26     	; 0x159f8 <vfprintf+0x36e>
   159de:	68 94       	set
   159e0:	d4 f8       	bld	r13, 4
   159e2:	f6 cf       	rjmp	.-20     	; 0x159d0 <vfprintf+0x346>
   159e4:	34 fe       	sbrs	r3, 4
   159e6:	03 c0       	rjmp	.+6      	; 0x159ee <vfprintf+0x364>
   159e8:	82 2f       	mov	r24, r18
   159ea:	86 60       	ori	r24, 0x06	; 6
   159ec:	d8 2e       	mov	r13, r24
   159ee:	20 e1       	ldi	r18, 0x10	; 16
   159f0:	32 e0       	ldi	r19, 0x02	; 2
   159f2:	02 c0       	rjmp	.+4      	; 0x159f8 <vfprintf+0x36e>
   159f4:	28 e0       	ldi	r18, 0x08	; 8
   159f6:	30 e0       	ldi	r19, 0x00	; 0
   159f8:	f8 01       	movw	r30, r16
   159fa:	d7 fe       	sbrs	r13, 7
   159fc:	0f c0       	rjmp	.+30     	; 0x15a1c <vfprintf+0x392>
   159fe:	60 81       	ld	r22, Z
   15a00:	71 81       	ldd	r23, Z+1	; 0x01
   15a02:	82 81       	ldd	r24, Z+2	; 0x02
   15a04:	93 81       	ldd	r25, Z+3	; 0x03
   15a06:	0c 5f       	subi	r16, 0xFC	; 252
   15a08:	1f 4f       	sbci	r17, 0xFF	; 255
   15a0a:	a5 01       	movw	r20, r10
   15a0c:	0e 94 af b2 	call	0x1655e	; 0x1655e <__ultoa_invert>
   15a10:	c8 2e       	mov	r12, r24
   15a12:	ca 18       	sub	r12, r10
   15a14:	3d 2c       	mov	r3, r13
   15a16:	e8 94       	clt
   15a18:	37 f8       	bld	r3, 7
   15a1a:	52 cf       	rjmp	.-348    	; 0x158c0 <vfprintf+0x236>
   15a1c:	60 81       	ld	r22, Z
   15a1e:	71 81       	ldd	r23, Z+1	; 0x01
   15a20:	90 e0       	ldi	r25, 0x00	; 0
   15a22:	80 e0       	ldi	r24, 0x00	; 0
   15a24:	0e 5f       	subi	r16, 0xFE	; 254
   15a26:	1f 4f       	sbci	r17, 0xFF	; 255
   15a28:	f0 cf       	rjmp	.-32     	; 0x15a0a <vfprintf+0x380>
   15a2a:	42 fc       	sbrc	r4, 2
   15a2c:	02 c0       	rjmp	.+4      	; 0x15a32 <vfprintf+0x3a8>
   15a2e:	83 94       	inc	r8
   15a30:	63 cf       	rjmp	.-314    	; 0x158f8 <vfprintf+0x26e>
   15a32:	83 94       	inc	r8
   15a34:	83 94       	inc	r8
   15a36:	60 cf       	rjmp	.-320    	; 0x158f8 <vfprintf+0x26e>
   15a38:	84 2d       	mov	r24, r4
   15a3a:	86 78       	andi	r24, 0x86	; 134
   15a3c:	09 f4       	brne	.+2      	; 0x15a40 <vfprintf+0x3b6>
   15a3e:	5c cf       	rjmp	.-328    	; 0x158f8 <vfprintf+0x26e>
   15a40:	f6 cf       	rjmp	.-20     	; 0x15a2e <vfprintf+0x3a4>
   15a42:	b7 01       	movw	r22, r14
   15a44:	80 e2       	ldi	r24, 0x20	; 32
   15a46:	90 e0       	ldi	r25, 0x00	; 0
   15a48:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15a4c:	83 94       	inc	r8
   15a4e:	82 14       	cp	r8, r2
   15a50:	c0 f3       	brcs	.-16     	; 0x15a42 <vfprintf+0x3b8>
   15a52:	51 2c       	mov	r5, r1
   15a54:	5e cf       	rjmp	.-324    	; 0x15912 <vfprintf+0x288>
   15a56:	52 2c       	mov	r5, r2
   15a58:	58 18       	sub	r5, r8
   15a5a:	82 14       	cp	r8, r2
   15a5c:	08 f4       	brcc	.+2      	; 0x15a60 <vfprintf+0x3d6>
   15a5e:	59 cf       	rjmp	.-334    	; 0x15912 <vfprintf+0x288>
   15a60:	f8 cf       	rjmp	.-16     	; 0x15a52 <vfprintf+0x3c8>
   15a62:	84 2d       	mov	r24, r4
   15a64:	86 78       	andi	r24, 0x86	; 134
   15a66:	09 f4       	brne	.+2      	; 0x15a6a <vfprintf+0x3e0>
   15a68:	66 cf       	rjmp	.-308    	; 0x15936 <vfprintf+0x2ac>
   15a6a:	8b e2       	ldi	r24, 0x2B	; 43
   15a6c:	41 fe       	sbrs	r4, 1
   15a6e:	80 e2       	ldi	r24, 0x20	; 32
   15a70:	47 fc       	sbrc	r4, 7
   15a72:	8d e2       	ldi	r24, 0x2D	; 45
   15a74:	b7 01       	movw	r22, r14
   15a76:	90 e0       	ldi	r25, 0x00	; 0
   15a78:	5c cf       	rjmp	.-328    	; 0x15932 <vfprintf+0x2a8>
   15a7a:	b7 01       	movw	r22, r14
   15a7c:	80 e3       	ldi	r24, 0x30	; 48
   15a7e:	90 e0       	ldi	r25, 0x00	; 0
   15a80:	0e 94 7f b2 	call	0x164fe	; 0x164fe <fputc>
   15a84:	9a 94       	dec	r9
   15a86:	57 cf       	rjmp	.-338    	; 0x15936 <vfprintf+0x2ac>
   15a88:	8f ef       	ldi	r24, 0xFF	; 255
   15a8a:	9f ef       	ldi	r25, 0xFF	; 255
   15a8c:	84 cf       	rjmp	.-248    	; 0x15996 <vfprintf+0x30c>

00015a8e <calloc>:
calloc():
   15a8e:	0f 93       	push	r16
   15a90:	1f 93       	push	r17
   15a92:	cf 93       	push	r28
   15a94:	df 93       	push	r29
   15a96:	86 9f       	mul	r24, r22
   15a98:	80 01       	movw	r16, r0
   15a9a:	87 9f       	mul	r24, r23
   15a9c:	10 0d       	add	r17, r0
   15a9e:	96 9f       	mul	r25, r22
   15aa0:	10 0d       	add	r17, r0
   15aa2:	11 24       	eor	r1, r1
   15aa4:	c8 01       	movw	r24, r16
   15aa6:	0e 94 dc ae 	call	0x15db8	; 0x15db8 <malloc>
   15aaa:	ec 01       	movw	r28, r24
   15aac:	00 97       	sbiw	r24, 0x00	; 0
   15aae:	29 f0       	breq	.+10     	; 0x15aba <calloc+0x2c>
   15ab0:	a8 01       	movw	r20, r16
   15ab2:	70 e0       	ldi	r23, 0x00	; 0
   15ab4:	60 e0       	ldi	r22, 0x00	; 0
   15ab6:	0e 94 5d b2 	call	0x164ba	; 0x164ba <memset>
   15aba:	ce 01       	movw	r24, r28
   15abc:	df 91       	pop	r29
   15abe:	cf 91       	pop	r28
   15ac0:	1f 91       	pop	r17
   15ac2:	0f 91       	pop	r16
   15ac4:	08 95       	ret

00015ac6 <dtoa_prf>:
dtoa_prf():
   15ac6:	8f 92       	push	r8
   15ac8:	9f 92       	push	r9
   15aca:	af 92       	push	r10
   15acc:	bf 92       	push	r11
   15ace:	cf 92       	push	r12
   15ad0:	df 92       	push	r13
   15ad2:	ef 92       	push	r14
   15ad4:	ff 92       	push	r15
   15ad6:	0f 93       	push	r16
   15ad8:	1f 93       	push	r17
   15ada:	cf 93       	push	r28
   15adc:	df 93       	push	r29
   15ade:	00 d0       	rcall	.+0      	; 0x15ae0 <dtoa_prf+0x1a>
   15ae0:	00 d0       	rcall	.+0      	; 0x15ae2 <dtoa_prf+0x1c>
   15ae2:	00 d0       	rcall	.+0      	; 0x15ae4 <dtoa_prf+0x1e>
   15ae4:	cd b7       	in	r28, 0x3d	; 61
   15ae6:	de b7       	in	r29, 0x3e	; 62
   15ae8:	6a 01       	movw	r12, r20
   15aea:	f2 2e       	mov	r15, r18
   15aec:	b0 2e       	mov	r11, r16
   15aee:	10 2f       	mov	r17, r16
   15af0:	fb e3       	ldi	r31, 0x3B	; 59
   15af2:	af 2e       	mov	r10, r31
   15af4:	a0 16       	cp	r10, r16
   15af6:	08 f4       	brcc	.+2      	; 0x15afa <dtoa_prf+0x34>
   15af8:	1b e3       	ldi	r17, 0x3B	; 59
   15afa:	1f 5f       	subi	r17, 0xFF	; 255
   15afc:	01 2f       	mov	r16, r17
   15afe:	27 e0       	ldi	r18, 0x07	; 7
   15b00:	ae 01       	movw	r20, r28
   15b02:	4f 5f       	subi	r20, 0xFF	; 255
   15b04:	5f 4f       	sbci	r21, 0xFF	; 255
   15b06:	0e 94 5f b1 	call	0x162be	; 0x162be <__ftoa_engine>
   15b0a:	bc 01       	movw	r22, r24
   15b0c:	89 81       	ldd	r24, Y+1	; 0x01
   15b0e:	98 2f       	mov	r25, r24
   15b10:	99 70       	andi	r25, 0x09	; 9
   15b12:	91 30       	cpi	r25, 0x01	; 1
   15b14:	09 f4       	brne	.+2      	; 0x15b18 <dtoa_prf+0x52>
   15b16:	4e c0       	rjmp	.+156    	; 0x15bb4 <dtoa_prf+0xee>
   15b18:	9b e2       	ldi	r25, 0x2B	; 43
   15b1a:	e1 fc       	sbrc	r14, 1
   15b1c:	04 c0       	rjmp	.+8      	; 0x15b26 <dtoa_prf+0x60>
   15b1e:	9e 2d       	mov	r25, r14
   15b20:	91 70       	andi	r25, 0x01	; 1
   15b22:	e0 fc       	sbrc	r14, 0
   15b24:	49 c0       	rjmp	.+146    	; 0x15bb8 <dtoa_prf+0xf2>
   15b26:	5e 2d       	mov	r21, r14
   15b28:	50 71       	andi	r21, 0x10	; 16
   15b2a:	e8 2f       	mov	r30, r24
   15b2c:	e8 70       	andi	r30, 0x08	; 8
   15b2e:	83 ff       	sbrs	r24, 3
   15b30:	55 c0       	rjmp	.+170    	; 0x15bdc <dtoa_prf+0x116>
   15b32:	84 e0       	ldi	r24, 0x04	; 4
   15b34:	91 11       	cpse	r25, r1
   15b36:	01 c0       	rjmp	.+2      	; 0x15b3a <dtoa_prf+0x74>
   15b38:	83 e0       	ldi	r24, 0x03	; 3
   15b3a:	ef 2d       	mov	r30, r15
   15b3c:	e8 1b       	sub	r30, r24
   15b3e:	8f 15       	cp	r24, r15
   15b40:	08 f0       	brcs	.+2      	; 0x15b44 <dtoa_prf+0x7e>
   15b42:	e0 e0       	ldi	r30, 0x00	; 0
   15b44:	d6 01       	movw	r26, r12
   15b46:	8e 2f       	mov	r24, r30
   15b48:	20 e2       	ldi	r18, 0x20	; 32
   15b4a:	55 23       	and	r21, r21
   15b4c:	c9 f1       	breq	.+114    	; 0x15bc0 <dtoa_prf+0xfa>
   15b4e:	99 23       	and	r25, r25
   15b50:	29 f0       	breq	.+10     	; 0x15b5c <dtoa_prf+0x96>
   15b52:	d6 01       	movw	r26, r12
   15b54:	9c 93       	st	X, r25
   15b56:	c6 01       	movw	r24, r12
   15b58:	01 96       	adiw	r24, 0x01	; 1
   15b5a:	6c 01       	movw	r12, r24
   15b5c:	96 01       	movw	r18, r12
   15b5e:	2d 5f       	subi	r18, 0xFD	; 253
   15b60:	3f 4f       	sbci	r19, 0xFF	; 255
   15b62:	e2 fe       	sbrs	r14, 2
   15b64:	33 c0       	rjmp	.+102    	; 0x15bcc <dtoa_prf+0x106>
   15b66:	8e e4       	ldi	r24, 0x4E	; 78
   15b68:	d6 01       	movw	r26, r12
   15b6a:	8c 93       	st	X, r24
   15b6c:	91 e4       	ldi	r25, 0x41	; 65
   15b6e:	11 96       	adiw	r26, 0x01	; 1
   15b70:	9c 93       	st	X, r25
   15b72:	11 97       	sbiw	r26, 0x01	; 1
   15b74:	12 96       	adiw	r26, 0x02	; 2
   15b76:	8c 93       	st	X, r24
   15b78:	d9 01       	movw	r26, r18
   15b7a:	8e 2f       	mov	r24, r30
   15b7c:	90 e2       	ldi	r25, 0x20	; 32
   15b7e:	81 11       	cpse	r24, r1
   15b80:	2a c0       	rjmp	.+84     	; 0x15bd6 <dtoa_prf+0x110>
   15b82:	e2 0f       	add	r30, r18
   15b84:	f3 2f       	mov	r31, r19
   15b86:	f1 1d       	adc	r31, r1
   15b88:	10 82       	st	Z, r1
   15b8a:	8e ef       	ldi	r24, 0xFE	; 254
   15b8c:	9f ef       	ldi	r25, 0xFF	; 255
   15b8e:	29 96       	adiw	r28, 0x09	; 9
   15b90:	0f b6       	in	r0, 0x3f	; 63
   15b92:	f8 94       	cli
   15b94:	de bf       	out	0x3e, r29	; 62
   15b96:	0f be       	out	0x3f, r0	; 63
   15b98:	cd bf       	out	0x3d, r28	; 61
   15b9a:	df 91       	pop	r29
   15b9c:	cf 91       	pop	r28
   15b9e:	1f 91       	pop	r17
   15ba0:	0f 91       	pop	r16
   15ba2:	ff 90       	pop	r15
   15ba4:	ef 90       	pop	r14
   15ba6:	df 90       	pop	r13
   15ba8:	cf 90       	pop	r12
   15baa:	bf 90       	pop	r11
   15bac:	af 90       	pop	r10
   15bae:	9f 90       	pop	r9
   15bb0:	8f 90       	pop	r8
   15bb2:	08 95       	ret
   15bb4:	9d e2       	ldi	r25, 0x2D	; 45
   15bb6:	b7 cf       	rjmp	.-146    	; 0x15b26 <dtoa_prf+0x60>
   15bb8:	90 e2       	ldi	r25, 0x20	; 32
   15bba:	b5 cf       	rjmp	.-150    	; 0x15b26 <dtoa_prf+0x60>
   15bbc:	2d 93       	st	X+, r18
   15bbe:	81 50       	subi	r24, 0x01	; 1
   15bc0:	81 11       	cpse	r24, r1
   15bc2:	fc cf       	rjmp	.-8      	; 0x15bbc <dtoa_prf+0xf6>
   15bc4:	ce 0e       	add	r12, r30
   15bc6:	d1 1c       	adc	r13, r1
   15bc8:	e0 e0       	ldi	r30, 0x00	; 0
   15bca:	c1 cf       	rjmp	.-126    	; 0x15b4e <dtoa_prf+0x88>
   15bcc:	8e e6       	ldi	r24, 0x6E	; 110
   15bce:	d6 01       	movw	r26, r12
   15bd0:	8c 93       	st	X, r24
   15bd2:	91 e6       	ldi	r25, 0x61	; 97
   15bd4:	cc cf       	rjmp	.-104    	; 0x15b6e <dtoa_prf+0xa8>
   15bd6:	9d 93       	st	X+, r25
   15bd8:	81 50       	subi	r24, 0x01	; 1
   15bda:	d1 cf       	rjmp	.-94     	; 0x15b7e <dtoa_prf+0xb8>
   15bdc:	48 2f       	mov	r20, r24
   15bde:	44 70       	andi	r20, 0x04	; 4
   15be0:	82 ff       	sbrs	r24, 2
   15be2:	3d c0       	rjmp	.+122    	; 0x15c5e <dtoa_prf+0x198>
   15be4:	84 e0       	ldi	r24, 0x04	; 4
   15be6:	91 11       	cpse	r25, r1
   15be8:	01 c0       	rjmp	.+2      	; 0x15bec <dtoa_prf+0x126>
   15bea:	83 e0       	ldi	r24, 0x03	; 3
   15bec:	8f 15       	cp	r24, r15
   15bee:	10 f4       	brcc	.+4      	; 0x15bf4 <dtoa_prf+0x12e>
   15bf0:	ef 2d       	mov	r30, r15
   15bf2:	e8 1b       	sub	r30, r24
   15bf4:	d6 01       	movw	r26, r12
   15bf6:	8e 2f       	mov	r24, r30
   15bf8:	20 e2       	ldi	r18, 0x20	; 32
   15bfa:	55 23       	and	r21, r21
   15bfc:	09 f1       	breq	.+66     	; 0x15c40 <dtoa_prf+0x17a>
   15bfe:	99 23       	and	r25, r25
   15c00:	29 f0       	breq	.+10     	; 0x15c0c <dtoa_prf+0x146>
   15c02:	d6 01       	movw	r26, r12
   15c04:	9c 93       	st	X, r25
   15c06:	c6 01       	movw	r24, r12
   15c08:	01 96       	adiw	r24, 0x01	; 1
   15c0a:	6c 01       	movw	r12, r24
   15c0c:	96 01       	movw	r18, r12
   15c0e:	2d 5f       	subi	r18, 0xFD	; 253
   15c10:	3f 4f       	sbci	r19, 0xFF	; 255
   15c12:	e2 fe       	sbrs	r14, 2
   15c14:	1b c0       	rjmp	.+54     	; 0x15c4c <dtoa_prf+0x186>
   15c16:	89 e4       	ldi	r24, 0x49	; 73
   15c18:	d6 01       	movw	r26, r12
   15c1a:	8c 93       	st	X, r24
   15c1c:	8e e4       	ldi	r24, 0x4E	; 78
   15c1e:	11 96       	adiw	r26, 0x01	; 1
   15c20:	8c 93       	st	X, r24
   15c22:	11 97       	sbiw	r26, 0x01	; 1
   15c24:	86 e4       	ldi	r24, 0x46	; 70
   15c26:	12 96       	adiw	r26, 0x02	; 2
   15c28:	8c 93       	st	X, r24
   15c2a:	d9 01       	movw	r26, r18
   15c2c:	8e 2f       	mov	r24, r30
   15c2e:	90 e2       	ldi	r25, 0x20	; 32
   15c30:	88 23       	and	r24, r24
   15c32:	09 f4       	brne	.+2      	; 0x15c36 <dtoa_prf+0x170>
   15c34:	a6 cf       	rjmp	.-180    	; 0x15b82 <dtoa_prf+0xbc>
   15c36:	9d 93       	st	X+, r25
   15c38:	81 50       	subi	r24, 0x01	; 1
   15c3a:	fa cf       	rjmp	.-12     	; 0x15c30 <dtoa_prf+0x16a>
   15c3c:	2d 93       	st	X+, r18
   15c3e:	81 50       	subi	r24, 0x01	; 1
   15c40:	81 11       	cpse	r24, r1
   15c42:	fc cf       	rjmp	.-8      	; 0x15c3c <dtoa_prf+0x176>
   15c44:	ce 0e       	add	r12, r30
   15c46:	d1 1c       	adc	r13, r1
   15c48:	e0 e0       	ldi	r30, 0x00	; 0
   15c4a:	d9 cf       	rjmp	.-78     	; 0x15bfe <dtoa_prf+0x138>
   15c4c:	89 e6       	ldi	r24, 0x69	; 105
   15c4e:	d6 01       	movw	r26, r12
   15c50:	8c 93       	st	X, r24
   15c52:	8e e6       	ldi	r24, 0x6E	; 110
   15c54:	11 96       	adiw	r26, 0x01	; 1
   15c56:	8c 93       	st	X, r24
   15c58:	11 97       	sbiw	r26, 0x01	; 1
   15c5a:	86 e6       	ldi	r24, 0x66	; 102
   15c5c:	e4 cf       	rjmp	.-56     	; 0x15c26 <dtoa_prf+0x160>
   15c5e:	9b 01       	movw	r18, r22
   15c60:	77 ff       	sbrs	r23, 7
   15c62:	02 c0       	rjmp	.+4      	; 0x15c68 <dtoa_prf+0x1a2>
   15c64:	30 e0       	ldi	r19, 0x00	; 0
   15c66:	20 e0       	ldi	r18, 0x00	; 0
   15c68:	a1 e0       	ldi	r26, 0x01	; 1
   15c6a:	b0 e0       	ldi	r27, 0x00	; 0
   15c6c:	91 11       	cpse	r25, r1
   15c6e:	02 c0       	rjmp	.+4      	; 0x15c74 <dtoa_prf+0x1ae>
   15c70:	b0 e0       	ldi	r27, 0x00	; 0
   15c72:	a0 e0       	ldi	r26, 0x00	; 0
   15c74:	f9 01       	movw	r30, r18
   15c76:	31 96       	adiw	r30, 0x01	; 1
   15c78:	ae 0f       	add	r26, r30
   15c7a:	bf 1f       	adc	r27, r31
   15c7c:	8b 2c       	mov	r8, r11
   15c7e:	91 2c       	mov	r9, r1
   15c80:	bb 20       	and	r11, r11
   15c82:	09 f4       	brne	.+2      	; 0x15c86 <dtoa_prf+0x1c0>
   15c84:	61 c0       	rjmp	.+194    	; 0x15d48 <dtoa_prf+0x282>
   15c86:	54 01       	movw	r10, r8
   15c88:	ef ef       	ldi	r30, 0xFF	; 255
   15c8a:	ae 1a       	sub	r10, r30
   15c8c:	be 0a       	sbc	r11, r30
   15c8e:	aa 0d       	add	r26, r10
   15c90:	bb 1d       	adc	r27, r11
   15c92:	fa 16       	cp	r15, r26
   15c94:	1b 06       	cpc	r1, r27
   15c96:	19 f0       	breq	.+6      	; 0x15c9e <dtoa_prf+0x1d8>
   15c98:	14 f0       	brlt	.+4      	; 0x15c9e <dtoa_prf+0x1d8>
   15c9a:	4f 2d       	mov	r20, r15
   15c9c:	4a 1b       	sub	r20, r26
   15c9e:	51 11       	cpse	r21, r1
   15ca0:	88 c0       	rjmp	.+272    	; 0x15db2 <dtoa_prf+0x2ec>
   15ca2:	e3 fc       	sbrc	r14, 3
   15ca4:	59 c0       	rjmp	.+178    	; 0x15d58 <dtoa_prf+0x292>
   15ca6:	76 01       	movw	r14, r12
   15ca8:	a4 2f       	mov	r26, r20
   15caa:	b0 e2       	ldi	r27, 0x20	; 32
   15cac:	a1 11       	cpse	r26, r1
   15cae:	4f c0       	rjmp	.+158    	; 0x15d4e <dtoa_prf+0x288>
   15cb0:	c4 0e       	add	r12, r20
   15cb2:	d1 1c       	adc	r13, r1
   15cb4:	99 23       	and	r25, r25
   15cb6:	09 f4       	brne	.+2      	; 0x15cba <dtoa_prf+0x1f4>
   15cb8:	5b c0       	rjmp	.+182    	; 0x15d70 <dtoa_prf+0x2aa>
   15cba:	40 e0       	ldi	r20, 0x00	; 0
   15cbc:	d6 01       	movw	r26, r12
   15cbe:	11 96       	adiw	r26, 0x01	; 1
   15cc0:	f6 01       	movw	r30, r12
   15cc2:	90 83       	st	Z, r25
   15cc4:	6d 01       	movw	r12, r26
   15cc6:	55 23       	and	r21, r21
   15cc8:	09 f4       	brne	.+2      	; 0x15ccc <dtoa_prf+0x206>
   15cca:	48 c0       	rjmp	.+144    	; 0x15d5c <dtoa_prf+0x296>
   15ccc:	01 2f       	mov	r16, r17
   15cce:	06 0f       	add	r16, r22
   15cd0:	9a 81       	ldd	r25, Y+2	; 0x02
   15cd2:	58 2f       	mov	r21, r24
   15cd4:	50 71       	andi	r21, 0x10	; 16
   15cd6:	84 ff       	sbrs	r24, 4
   15cd8:	03 c0       	rjmp	.+6      	; 0x15ce0 <dtoa_prf+0x21a>
   15cda:	91 33       	cpi	r25, 0x31	; 49
   15cdc:	09 f4       	brne	.+2      	; 0x15ce0 <dtoa_prf+0x21a>
   15cde:	01 50       	subi	r16, 0x01	; 1
   15ce0:	10 16       	cp	r1, r16
   15ce2:	0c f0       	brlt	.+2      	; 0x15ce6 <dtoa_prf+0x220>
   15ce4:	47 c0       	rjmp	.+142    	; 0x15d74 <dtoa_prf+0x2ae>
   15ce6:	09 30       	cpi	r16, 0x09	; 9
   15ce8:	08 f0       	brcs	.+2      	; 0x15cec <dtoa_prf+0x226>
   15cea:	08 e0       	ldi	r16, 0x08	; 8
   15cec:	ee e2       	ldi	r30, 0x2E	; 46
   15cee:	fe 2e       	mov	r15, r30
   15cf0:	5b 01       	movw	r10, r22
   15cf2:	a0 1a       	sub	r10, r16
   15cf4:	b1 08       	sbc	r11, r1
   15cf6:	85 01       	movw	r16, r10
   15cf8:	91 94       	neg	r9
   15cfa:	81 94       	neg	r8
   15cfc:	91 08       	sbc	r9, r1
   15cfe:	2f 3f       	cpi	r18, 0xFF	; 255
   15d00:	32 07       	cpc	r19, r18
   15d02:	29 f4       	brne	.+10     	; 0x15d0e <dtoa_prf+0x248>
   15d04:	d6 01       	movw	r26, r12
   15d06:	fc 92       	st	X, r15
   15d08:	f6 01       	movw	r30, r12
   15d0a:	31 96       	adiw	r30, 0x01	; 1
   15d0c:	6f 01       	movw	r12, r30
   15d0e:	62 17       	cp	r22, r18
   15d10:	73 07       	cpc	r23, r19
   15d12:	94 f1       	brlt	.+100    	; 0x15d78 <dtoa_prf+0x2b2>
   15d14:	02 17       	cp	r16, r18
   15d16:	13 07       	cpc	r17, r19
   15d18:	7c f5       	brge	.+94     	; 0x15d78 <dtoa_prf+0x2b2>
   15d1a:	db 01       	movw	r26, r22
   15d1c:	a2 1b       	sub	r26, r18
   15d1e:	b3 0b       	sbc	r27, r19
   15d20:	aa 24       	eor	r10, r10
   15d22:	a3 94       	inc	r10
   15d24:	b1 2c       	mov	r11, r1
   15d26:	ac 0e       	add	r10, r28
   15d28:	bd 1e       	adc	r11, r29
   15d2a:	aa 0d       	add	r26, r10
   15d2c:	bb 1d       	adc	r27, r11
   15d2e:	11 96       	adiw	r26, 0x01	; 1
   15d30:	8c 91       	ld	r24, X
   15d32:	21 50       	subi	r18, 0x01	; 1
   15d34:	31 09       	sbc	r19, r1
   15d36:	d6 01       	movw	r26, r12
   15d38:	11 96       	adiw	r26, 0x01	; 1
   15d3a:	28 15       	cp	r18, r8
   15d3c:	39 05       	cpc	r19, r9
   15d3e:	f4 f0       	brlt	.+60     	; 0x15d7c <dtoa_prf+0x2b6>
   15d40:	f6 01       	movw	r30, r12
   15d42:	80 83       	st	Z, r24
   15d44:	6d 01       	movw	r12, r26
   15d46:	db cf       	rjmp	.-74     	; 0x15cfe <dtoa_prf+0x238>
   15d48:	b1 2c       	mov	r11, r1
   15d4a:	a1 2c       	mov	r10, r1
   15d4c:	a0 cf       	rjmp	.-192    	; 0x15c8e <dtoa_prf+0x1c8>
   15d4e:	f7 01       	movw	r30, r14
   15d50:	b1 93       	st	Z+, r27
   15d52:	7f 01       	movw	r14, r30
   15d54:	a1 50       	subi	r26, 0x01	; 1
   15d56:	aa cf       	rjmp	.-172    	; 0x15cac <dtoa_prf+0x1e6>
   15d58:	91 11       	cpse	r25, r1
   15d5a:	b0 cf       	rjmp	.-160    	; 0x15cbc <dtoa_prf+0x1f6>
   15d5c:	d6 01       	movw	r26, r12
   15d5e:	94 2f       	mov	r25, r20
   15d60:	50 e3       	ldi	r21, 0x30	; 48
   15d62:	02 c0       	rjmp	.+4      	; 0x15d68 <dtoa_prf+0x2a2>
   15d64:	5d 93       	st	X+, r21
   15d66:	91 50       	subi	r25, 0x01	; 1
   15d68:	91 11       	cpse	r25, r1
   15d6a:	fc cf       	rjmp	.-8      	; 0x15d64 <dtoa_prf+0x29e>
   15d6c:	c4 0e       	add	r12, r20
   15d6e:	d1 1c       	adc	r13, r1
   15d70:	40 e0       	ldi	r20, 0x00	; 0
   15d72:	ac cf       	rjmp	.-168    	; 0x15ccc <dtoa_prf+0x206>
   15d74:	01 e0       	ldi	r16, 0x01	; 1
   15d76:	ba cf       	rjmp	.-140    	; 0x15cec <dtoa_prf+0x226>
   15d78:	80 e3       	ldi	r24, 0x30	; 48
   15d7a:	db cf       	rjmp	.-74     	; 0x15d32 <dtoa_prf+0x26c>
   15d7c:	62 17       	cp	r22, r18
   15d7e:	73 07       	cpc	r23, r19
   15d80:	31 f4       	brne	.+12     	; 0x15d8e <dtoa_prf+0x2c8>
   15d82:	96 33       	cpi	r25, 0x36	; 54
   15d84:	88 f4       	brcc	.+34     	; 0x15da8 <dtoa_prf+0x2e2>
   15d86:	95 33       	cpi	r25, 0x35	; 53
   15d88:	11 f4       	brne	.+4      	; 0x15d8e <dtoa_prf+0x2c8>
   15d8a:	55 23       	and	r21, r21
   15d8c:	69 f0       	breq	.+26     	; 0x15da8 <dtoa_prf+0x2e2>
   15d8e:	f6 01       	movw	r30, r12
   15d90:	80 83       	st	Z, r24
   15d92:	fd 01       	movw	r30, r26
   15d94:	84 2f       	mov	r24, r20
   15d96:	90 e2       	ldi	r25, 0x20	; 32
   15d98:	81 11       	cpse	r24, r1
   15d9a:	08 c0       	rjmp	.+16     	; 0x15dac <dtoa_prf+0x2e6>
   15d9c:	a4 0f       	add	r26, r20
   15d9e:	b1 1d       	adc	r27, r1
   15da0:	1c 92       	st	X, r1
   15da2:	90 e0       	ldi	r25, 0x00	; 0
   15da4:	80 e0       	ldi	r24, 0x00	; 0
   15da6:	f3 ce       	rjmp	.-538    	; 0x15b8e <dtoa_prf+0xc8>
   15da8:	81 e3       	ldi	r24, 0x31	; 49
   15daa:	f1 cf       	rjmp	.-30     	; 0x15d8e <dtoa_prf+0x2c8>
   15dac:	91 93       	st	Z+, r25
   15dae:	81 50       	subi	r24, 0x01	; 1
   15db0:	f3 cf       	rjmp	.-26     	; 0x15d98 <dtoa_prf+0x2d2>
   15db2:	91 11       	cpse	r25, r1
   15db4:	83 cf       	rjmp	.-250    	; 0x15cbc <dtoa_prf+0x1f6>
   15db6:	8a cf       	rjmp	.-236    	; 0x15ccc <dtoa_prf+0x206>

00015db8 <malloc>:
malloc():
   15db8:	0f 93       	push	r16
   15dba:	1f 93       	push	r17
   15dbc:	cf 93       	push	r28
   15dbe:	df 93       	push	r29
   15dc0:	82 30       	cpi	r24, 0x02	; 2
   15dc2:	91 05       	cpc	r25, r1
   15dc4:	10 f4       	brcc	.+4      	; 0x15dca <malloc+0x12>
   15dc6:	82 e0       	ldi	r24, 0x02	; 2
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	e0 91 3b 13 	lds	r30, 0x133B	; 0x80133b <__flp>
   15dce:	f0 91 3c 13 	lds	r31, 0x133C	; 0x80133c <__flp+0x1>
   15dd2:	30 e0       	ldi	r19, 0x00	; 0
   15dd4:	20 e0       	ldi	r18, 0x00	; 0
   15dd6:	b0 e0       	ldi	r27, 0x00	; 0
   15dd8:	a0 e0       	ldi	r26, 0x00	; 0
   15dda:	30 97       	sbiw	r30, 0x00	; 0
   15ddc:	99 f4       	brne	.+38     	; 0x15e04 <malloc+0x4c>
   15dde:	21 15       	cp	r18, r1
   15de0:	31 05       	cpc	r19, r1
   15de2:	09 f4       	brne	.+2      	; 0x15de6 <malloc+0x2e>
   15de4:	4a c0       	rjmp	.+148    	; 0x15e7a <malloc+0xc2>
   15de6:	28 1b       	sub	r18, r24
   15de8:	39 0b       	sbc	r19, r25
   15dea:	24 30       	cpi	r18, 0x04	; 4
   15dec:	31 05       	cpc	r19, r1
   15dee:	d8 f5       	brcc	.+118    	; 0x15e66 <malloc+0xae>
   15df0:	8a 81       	ldd	r24, Y+2	; 0x02
   15df2:	9b 81       	ldd	r25, Y+3	; 0x03
   15df4:	61 15       	cp	r22, r1
   15df6:	71 05       	cpc	r23, r1
   15df8:	89 f1       	breq	.+98     	; 0x15e5c <malloc+0xa4>
   15dfa:	fb 01       	movw	r30, r22
   15dfc:	93 83       	std	Z+3, r25	; 0x03
   15dfe:	82 83       	std	Z+2, r24	; 0x02
   15e00:	fe 01       	movw	r30, r28
   15e02:	11 c0       	rjmp	.+34     	; 0x15e26 <malloc+0x6e>
   15e04:	40 81       	ld	r20, Z
   15e06:	51 81       	ldd	r21, Z+1	; 0x01
   15e08:	02 81       	ldd	r16, Z+2	; 0x02
   15e0a:	13 81       	ldd	r17, Z+3	; 0x03
   15e0c:	48 17       	cp	r20, r24
   15e0e:	59 07       	cpc	r21, r25
   15e10:	e0 f0       	brcs	.+56     	; 0x15e4a <malloc+0x92>
   15e12:	48 17       	cp	r20, r24
   15e14:	59 07       	cpc	r21, r25
   15e16:	99 f4       	brne	.+38     	; 0x15e3e <malloc+0x86>
   15e18:	10 97       	sbiw	r26, 0x00	; 0
   15e1a:	61 f0       	breq	.+24     	; 0x15e34 <malloc+0x7c>
   15e1c:	12 96       	adiw	r26, 0x02	; 2
   15e1e:	0c 93       	st	X, r16
   15e20:	12 97       	sbiw	r26, 0x02	; 2
   15e22:	13 96       	adiw	r26, 0x03	; 3
   15e24:	1c 93       	st	X, r17
   15e26:	32 96       	adiw	r30, 0x02	; 2
   15e28:	cf 01       	movw	r24, r30
   15e2a:	df 91       	pop	r29
   15e2c:	cf 91       	pop	r28
   15e2e:	1f 91       	pop	r17
   15e30:	0f 91       	pop	r16
   15e32:	08 95       	ret
   15e34:	00 93 3b 13 	sts	0x133B, r16	; 0x80133b <__flp>
   15e38:	10 93 3c 13 	sts	0x133C, r17	; 0x80133c <__flp+0x1>
   15e3c:	f4 cf       	rjmp	.-24     	; 0x15e26 <malloc+0x6e>
   15e3e:	21 15       	cp	r18, r1
   15e40:	31 05       	cpc	r19, r1
   15e42:	51 f0       	breq	.+20     	; 0x15e58 <malloc+0xa0>
   15e44:	42 17       	cp	r20, r18
   15e46:	53 07       	cpc	r21, r19
   15e48:	38 f0       	brcs	.+14     	; 0x15e58 <malloc+0xa0>
   15e4a:	a9 01       	movw	r20, r18
   15e4c:	db 01       	movw	r26, r22
   15e4e:	9a 01       	movw	r18, r20
   15e50:	bd 01       	movw	r22, r26
   15e52:	df 01       	movw	r26, r30
   15e54:	f8 01       	movw	r30, r16
   15e56:	c1 cf       	rjmp	.-126    	; 0x15dda <malloc+0x22>
   15e58:	ef 01       	movw	r28, r30
   15e5a:	f9 cf       	rjmp	.-14     	; 0x15e4e <malloc+0x96>
   15e5c:	90 93 3c 13 	sts	0x133C, r25	; 0x80133c <__flp+0x1>
   15e60:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <__flp>
   15e64:	cd cf       	rjmp	.-102    	; 0x15e00 <malloc+0x48>
   15e66:	fe 01       	movw	r30, r28
   15e68:	e2 0f       	add	r30, r18
   15e6a:	f3 1f       	adc	r31, r19
   15e6c:	81 93       	st	Z+, r24
   15e6e:	91 93       	st	Z+, r25
   15e70:	22 50       	subi	r18, 0x02	; 2
   15e72:	31 09       	sbc	r19, r1
   15e74:	39 83       	std	Y+1, r19	; 0x01
   15e76:	28 83       	st	Y, r18
   15e78:	d7 cf       	rjmp	.-82     	; 0x15e28 <malloc+0x70>
   15e7a:	20 91 39 13 	lds	r18, 0x1339	; 0x801339 <__brkval>
   15e7e:	30 91 3a 13 	lds	r19, 0x133A	; 0x80133a <__brkval+0x1>
   15e82:	23 2b       	or	r18, r19
   15e84:	41 f4       	brne	.+16     	; 0x15e96 <malloc+0xde>
   15e86:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__malloc_heap_start>
   15e8a:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__malloc_heap_start+0x1>
   15e8e:	30 93 3a 13 	sts	0x133A, r19	; 0x80133a <__brkval+0x1>
   15e92:	20 93 39 13 	sts	0x1339, r18	; 0x801339 <__brkval>
   15e96:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__malloc_heap_end>
   15e9a:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   15e9e:	21 15       	cp	r18, r1
   15ea0:	31 05       	cpc	r19, r1
   15ea2:	41 f4       	brne	.+16     	; 0x15eb4 <malloc+0xfc>
   15ea4:	2d b7       	in	r18, 0x3d	; 61
   15ea6:	3e b7       	in	r19, 0x3e	; 62
   15ea8:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   15eac:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   15eb0:	24 1b       	sub	r18, r20
   15eb2:	35 0b       	sbc	r19, r21
   15eb4:	e0 91 39 13 	lds	r30, 0x1339	; 0x801339 <__brkval>
   15eb8:	f0 91 3a 13 	lds	r31, 0x133A	; 0x80133a <__brkval+0x1>
   15ebc:	e2 17       	cp	r30, r18
   15ebe:	f3 07       	cpc	r31, r19
   15ec0:	a0 f4       	brcc	.+40     	; 0x15eea <malloc+0x132>
   15ec2:	2e 1b       	sub	r18, r30
   15ec4:	3f 0b       	sbc	r19, r31
   15ec6:	28 17       	cp	r18, r24
   15ec8:	39 07       	cpc	r19, r25
   15eca:	78 f0       	brcs	.+30     	; 0x15eea <malloc+0x132>
   15ecc:	ac 01       	movw	r20, r24
   15ece:	4e 5f       	subi	r20, 0xFE	; 254
   15ed0:	5f 4f       	sbci	r21, 0xFF	; 255
   15ed2:	24 17       	cp	r18, r20
   15ed4:	35 07       	cpc	r19, r21
   15ed6:	48 f0       	brcs	.+18     	; 0x15eea <malloc+0x132>
   15ed8:	4e 0f       	add	r20, r30
   15eda:	5f 1f       	adc	r21, r31
   15edc:	50 93 3a 13 	sts	0x133A, r21	; 0x80133a <__brkval+0x1>
   15ee0:	40 93 39 13 	sts	0x1339, r20	; 0x801339 <__brkval>
   15ee4:	81 93       	st	Z+, r24
   15ee6:	91 93       	st	Z+, r25
   15ee8:	9f cf       	rjmp	.-194    	; 0x15e28 <malloc+0x70>
   15eea:	f0 e0       	ldi	r31, 0x00	; 0
   15eec:	e0 e0       	ldi	r30, 0x00	; 0
   15eee:	9c cf       	rjmp	.-200    	; 0x15e28 <malloc+0x70>

00015ef0 <free>:
free():
   15ef0:	cf 93       	push	r28
   15ef2:	df 93       	push	r29
   15ef4:	00 97       	sbiw	r24, 0x00	; 0
   15ef6:	e9 f0       	breq	.+58     	; 0x15f32 <free+0x42>
   15ef8:	fc 01       	movw	r30, r24
   15efa:	32 97       	sbiw	r30, 0x02	; 2
   15efc:	13 82       	std	Z+3, r1	; 0x03
   15efe:	12 82       	std	Z+2, r1	; 0x02
   15f00:	a0 91 3b 13 	lds	r26, 0x133B	; 0x80133b <__flp>
   15f04:	b0 91 3c 13 	lds	r27, 0x133C	; 0x80133c <__flp+0x1>
   15f08:	ed 01       	movw	r28, r26
   15f0a:	30 e0       	ldi	r19, 0x00	; 0
   15f0c:	20 e0       	ldi	r18, 0x00	; 0
   15f0e:	10 97       	sbiw	r26, 0x00	; 0
   15f10:	a1 f4       	brne	.+40     	; 0x15f3a <free+0x4a>
   15f12:	20 81       	ld	r18, Z
   15f14:	31 81       	ldd	r19, Z+1	; 0x01
   15f16:	82 0f       	add	r24, r18
   15f18:	93 1f       	adc	r25, r19
   15f1a:	20 91 39 13 	lds	r18, 0x1339	; 0x801339 <__brkval>
   15f1e:	30 91 3a 13 	lds	r19, 0x133A	; 0x80133a <__brkval+0x1>
   15f22:	28 17       	cp	r18, r24
   15f24:	39 07       	cpc	r19, r25
   15f26:	09 f0       	breq	.+2      	; 0x15f2a <free+0x3a>
   15f28:	61 c0       	rjmp	.+194    	; 0x15fec <free+0xfc>
   15f2a:	f0 93 3a 13 	sts	0x133A, r31	; 0x80133a <__brkval+0x1>
   15f2e:	e0 93 39 13 	sts	0x1339, r30	; 0x801339 <__brkval>
   15f32:	df 91       	pop	r29
   15f34:	cf 91       	pop	r28
   15f36:	08 95       	ret
   15f38:	ea 01       	movw	r28, r20
   15f3a:	ce 17       	cp	r28, r30
   15f3c:	df 07       	cpc	r29, r31
   15f3e:	e8 f5       	brcc	.+122    	; 0x15fba <free+0xca>
   15f40:	4a 81       	ldd	r20, Y+2	; 0x02
   15f42:	5b 81       	ldd	r21, Y+3	; 0x03
   15f44:	9e 01       	movw	r18, r28
   15f46:	41 15       	cp	r20, r1
   15f48:	51 05       	cpc	r21, r1
   15f4a:	b1 f7       	brne	.-20     	; 0x15f38 <free+0x48>
   15f4c:	e9 01       	movw	r28, r18
   15f4e:	fb 83       	std	Y+3, r31	; 0x03
   15f50:	ea 83       	std	Y+2, r30	; 0x02
   15f52:	49 91       	ld	r20, Y+
   15f54:	59 91       	ld	r21, Y+
   15f56:	c4 0f       	add	r28, r20
   15f58:	d5 1f       	adc	r29, r21
   15f5a:	ec 17       	cp	r30, r28
   15f5c:	fd 07       	cpc	r31, r29
   15f5e:	61 f4       	brne	.+24     	; 0x15f78 <free+0x88>
   15f60:	80 81       	ld	r24, Z
   15f62:	91 81       	ldd	r25, Z+1	; 0x01
   15f64:	02 96       	adiw	r24, 0x02	; 2
   15f66:	84 0f       	add	r24, r20
   15f68:	95 1f       	adc	r25, r21
   15f6a:	e9 01       	movw	r28, r18
   15f6c:	99 83       	std	Y+1, r25	; 0x01
   15f6e:	88 83       	st	Y, r24
   15f70:	82 81       	ldd	r24, Z+2	; 0x02
   15f72:	93 81       	ldd	r25, Z+3	; 0x03
   15f74:	9b 83       	std	Y+3, r25	; 0x03
   15f76:	8a 83       	std	Y+2, r24	; 0x02
   15f78:	f0 e0       	ldi	r31, 0x00	; 0
   15f7a:	e0 e0       	ldi	r30, 0x00	; 0
   15f7c:	12 96       	adiw	r26, 0x02	; 2
   15f7e:	8d 91       	ld	r24, X+
   15f80:	9c 91       	ld	r25, X
   15f82:	13 97       	sbiw	r26, 0x03	; 3
   15f84:	00 97       	sbiw	r24, 0x00	; 0
   15f86:	b9 f5       	brne	.+110    	; 0x15ff6 <free+0x106>
   15f88:	2d 91       	ld	r18, X+
   15f8a:	3c 91       	ld	r19, X
   15f8c:	11 97       	sbiw	r26, 0x01	; 1
   15f8e:	cd 01       	movw	r24, r26
   15f90:	02 96       	adiw	r24, 0x02	; 2
   15f92:	82 0f       	add	r24, r18
   15f94:	93 1f       	adc	r25, r19
   15f96:	20 91 39 13 	lds	r18, 0x1339	; 0x801339 <__brkval>
   15f9a:	30 91 3a 13 	lds	r19, 0x133A	; 0x80133a <__brkval+0x1>
   15f9e:	28 17       	cp	r18, r24
   15fa0:	39 07       	cpc	r19, r25
   15fa2:	39 f6       	brne	.-114    	; 0x15f32 <free+0x42>
   15fa4:	30 97       	sbiw	r30, 0x00	; 0
   15fa6:	51 f5       	brne	.+84     	; 0x15ffc <free+0x10c>
   15fa8:	10 92 3c 13 	sts	0x133C, r1	; 0x80133c <__flp+0x1>
   15fac:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <__flp>
   15fb0:	b0 93 3a 13 	sts	0x133A, r27	; 0x80133a <__brkval+0x1>
   15fb4:	a0 93 39 13 	sts	0x1339, r26	; 0x801339 <__brkval>
   15fb8:	bc cf       	rjmp	.-136    	; 0x15f32 <free+0x42>
   15fba:	d3 83       	std	Z+3, r29	; 0x03
   15fbc:	c2 83       	std	Z+2, r28	; 0x02
   15fbe:	40 81       	ld	r20, Z
   15fc0:	51 81       	ldd	r21, Z+1	; 0x01
   15fc2:	84 0f       	add	r24, r20
   15fc4:	95 1f       	adc	r25, r21
   15fc6:	c8 17       	cp	r28, r24
   15fc8:	d9 07       	cpc	r29, r25
   15fca:	61 f4       	brne	.+24     	; 0x15fe4 <free+0xf4>
   15fcc:	4e 5f       	subi	r20, 0xFE	; 254
   15fce:	5f 4f       	sbci	r21, 0xFF	; 255
   15fd0:	88 81       	ld	r24, Y
   15fd2:	99 81       	ldd	r25, Y+1	; 0x01
   15fd4:	48 0f       	add	r20, r24
   15fd6:	59 1f       	adc	r21, r25
   15fd8:	51 83       	std	Z+1, r21	; 0x01
   15fda:	40 83       	st	Z, r20
   15fdc:	8a 81       	ldd	r24, Y+2	; 0x02
   15fde:	9b 81       	ldd	r25, Y+3	; 0x03
   15fe0:	93 83       	std	Z+3, r25	; 0x03
   15fe2:	82 83       	std	Z+2, r24	; 0x02
   15fe4:	21 15       	cp	r18, r1
   15fe6:	31 05       	cpc	r19, r1
   15fe8:	09 f0       	breq	.+2      	; 0x15fec <free+0xfc>
   15fea:	b0 cf       	rjmp	.-160    	; 0x15f4c <free+0x5c>
   15fec:	f0 93 3c 13 	sts	0x133C, r31	; 0x80133c <__flp+0x1>
   15ff0:	e0 93 3b 13 	sts	0x133B, r30	; 0x80133b <__flp>
   15ff4:	9e cf       	rjmp	.-196    	; 0x15f32 <free+0x42>
   15ff6:	fd 01       	movw	r30, r26
   15ff8:	dc 01       	movw	r26, r24
   15ffa:	c0 cf       	rjmp	.-128    	; 0x15f7c <free+0x8c>
   15ffc:	13 82       	std	Z+3, r1	; 0x03
   15ffe:	12 82       	std	Z+2, r1	; 0x02
   16000:	d7 cf       	rjmp	.-82     	; 0x15fb0 <free+0xc0>

00016002 <strtod>:
strtod():
   16002:	8f 92       	push	r8
   16004:	9f 92       	push	r9
   16006:	af 92       	push	r10
   16008:	bf 92       	push	r11
   1600a:	cf 92       	push	r12
   1600c:	df 92       	push	r13
   1600e:	ef 92       	push	r14
   16010:	ff 92       	push	r15
   16012:	0f 93       	push	r16
   16014:	1f 93       	push	r17
   16016:	cf 93       	push	r28
   16018:	df 93       	push	r29
   1601a:	5c 01       	movw	r10, r24
   1601c:	7b 01       	movw	r14, r22
   1601e:	61 15       	cp	r22, r1
   16020:	71 05       	cpc	r23, r1
   16022:	19 f0       	breq	.+6      	; 0x1602a <strtod+0x28>
   16024:	db 01       	movw	r26, r22
   16026:	8d 93       	st	X+, r24
   16028:	9c 93       	st	X, r25
   1602a:	85 01       	movw	r16, r10
   1602c:	0f 5f       	subi	r16, 0xFF	; 255
   1602e:	1f 4f       	sbci	r17, 0xFF	; 255
   16030:	f5 01       	movw	r30, r10
   16032:	d0 81       	ld	r29, Z
   16034:	8d 2f       	mov	r24, r29
   16036:	90 e0       	ldi	r25, 0x00	; 0
   16038:	0e 94 7c aa 	call	0x154f8	; 0x154f8 <isspace>
   1603c:	6c 01       	movw	r12, r24
   1603e:	89 2b       	or	r24, r25
   16040:	b9 f5       	brne	.+110    	; 0x160b0 <strtod+0xae>
   16042:	dd 32       	cpi	r29, 0x2D	; 45
   16044:	b9 f5       	brne	.+110    	; 0x160b4 <strtod+0xb2>
   16046:	0f 5f       	subi	r16, 0xFF	; 255
   16048:	1f 4f       	sbci	r17, 0xFF	; 255
   1604a:	d5 01       	movw	r26, r10
   1604c:	11 96       	adiw	r26, 0x01	; 1
   1604e:	dc 91       	ld	r29, X
   16050:	c1 e0       	ldi	r28, 0x01	; 1
   16052:	58 01       	movw	r10, r16
   16054:	f1 e0       	ldi	r31, 0x01	; 1
   16056:	af 1a       	sub	r10, r31
   16058:	b1 08       	sbc	r11, r1
   1605a:	43 e0       	ldi	r20, 0x03	; 3
   1605c:	50 e0       	ldi	r21, 0x00	; 0
   1605e:	60 e5       	ldi	r22, 0x50	; 80
   16060:	73 e0       	ldi	r23, 0x03	; 3
   16062:	c5 01       	movw	r24, r10
   16064:	0e 94 3a b2 	call	0x16474	; 0x16474 <strncasecmp_P>
   16068:	89 2b       	or	r24, r25
   1606a:	69 f5       	brne	.+90     	; 0x160c6 <strtod+0xc4>
   1606c:	68 01       	movw	r12, r16
   1606e:	82 e0       	ldi	r24, 0x02	; 2
   16070:	c8 0e       	add	r12, r24
   16072:	d1 1c       	adc	r13, r1
   16074:	45 e0       	ldi	r20, 0x05	; 5
   16076:	50 e0       	ldi	r21, 0x00	; 0
   16078:	6b e4       	ldi	r22, 0x4B	; 75
   1607a:	73 e0       	ldi	r23, 0x03	; 3
   1607c:	c6 01       	movw	r24, r12
   1607e:	0e 94 3a b2 	call	0x16474	; 0x16474 <strncasecmp_P>
   16082:	89 2b       	or	r24, r25
   16084:	21 f4       	brne	.+8      	; 0x1608e <strtod+0x8c>
   16086:	68 01       	movw	r12, r16
   16088:	97 e0       	ldi	r25, 0x07	; 7
   1608a:	c9 0e       	add	r12, r25
   1608c:	d1 1c       	adc	r13, r1
   1608e:	e1 14       	cp	r14, r1
   16090:	f1 04       	cpc	r15, r1
   16092:	19 f0       	breq	.+6      	; 0x1609a <strtod+0x98>
   16094:	d7 01       	movw	r26, r14
   16096:	cd 92       	st	X+, r12
   16098:	dc 92       	st	X, r13
   1609a:	60 e0       	ldi	r22, 0x00	; 0
   1609c:	70 e0       	ldi	r23, 0x00	; 0
   1609e:	80 e8       	ldi	r24, 0x80	; 128
   160a0:	9f ef       	ldi	r25, 0xFF	; 255
   160a2:	c1 11       	cpse	r28, r1
   160a4:	ff c0       	rjmp	.+510    	; 0x162a4 <strtod+0x2a2>
   160a6:	60 e0       	ldi	r22, 0x00	; 0
   160a8:	70 e0       	ldi	r23, 0x00	; 0
   160aa:	80 e8       	ldi	r24, 0x80	; 128
   160ac:	9f e7       	ldi	r25, 0x7F	; 127
   160ae:	fa c0       	rjmp	.+500    	; 0x162a4 <strtod+0x2a2>
   160b0:	58 01       	movw	r10, r16
   160b2:	bb cf       	rjmp	.-138    	; 0x1602a <strtod+0x28>
   160b4:	db 32       	cpi	r29, 0x2B	; 43
   160b6:	29 f4       	brne	.+10     	; 0x160c2 <strtod+0xc0>
   160b8:	85 01       	movw	r16, r10
   160ba:	0e 5f       	subi	r16, 0xFE	; 254
   160bc:	1f 4f       	sbci	r17, 0xFF	; 255
   160be:	f5 01       	movw	r30, r10
   160c0:	d1 81       	ldd	r29, Z+1	; 0x01
   160c2:	c0 e0       	ldi	r28, 0x00	; 0
   160c4:	c6 cf       	rjmp	.-116    	; 0x16052 <strtod+0x50>
   160c6:	43 e0       	ldi	r20, 0x03	; 3
   160c8:	50 e0       	ldi	r21, 0x00	; 0
   160ca:	68 e4       	ldi	r22, 0x48	; 72
   160cc:	73 e0       	ldi	r23, 0x03	; 3
   160ce:	c5 01       	movw	r24, r10
   160d0:	0e 94 3a b2 	call	0x16474	; 0x16474 <strncasecmp_P>
   160d4:	89 2b       	or	r24, r25
   160d6:	e9 f0       	breq	.+58     	; 0x16112 <strtod+0x110>
   160d8:	f8 01       	movw	r30, r16
   160da:	10 e0       	ldi	r17, 0x00	; 0
   160dc:	00 e0       	ldi	r16, 0x00	; 0
   160de:	20 e0       	ldi	r18, 0x00	; 0
   160e0:	30 e0       	ldi	r19, 0x00	; 0
   160e2:	a9 01       	movw	r20, r18
   160e4:	5f 01       	movw	r10, r30
   160e6:	b0 ed       	ldi	r27, 0xD0	; 208
   160e8:	8b 2e       	mov	r8, r27
   160ea:	8d 0e       	add	r8, r29
   160ec:	89 e0       	ldi	r24, 0x09	; 9
   160ee:	88 15       	cp	r24, r8
   160f0:	c8 f1       	brcs	.+114    	; 0x16164 <strtod+0x162>
   160f2:	9c 2e       	mov	r9, r28
   160f4:	68 94       	set
   160f6:	91 f8       	bld	r9, 1
   160f8:	8c 2f       	mov	r24, r28
   160fa:	88 70       	andi	r24, 0x08	; 8
   160fc:	c2 ff       	sbrs	r28, 2
   160fe:	16 c0       	rjmp	.+44     	; 0x1612c <strtod+0x12a>
   16100:	81 11       	cpse	r24, r1
   16102:	02 c0       	rjmp	.+4      	; 0x16108 <strtod+0x106>
   16104:	0f 5f       	subi	r16, 0xFF	; 255
   16106:	1f 4f       	sbci	r17, 0xFF	; 255
   16108:	31 96       	adiw	r30, 0x01	; 1
   1610a:	d5 01       	movw	r26, r10
   1610c:	dc 91       	ld	r29, X
   1610e:	c9 2d       	mov	r28, r9
   16110:	e9 cf       	rjmp	.-46     	; 0x160e4 <strtod+0xe2>
   16112:	e1 14       	cp	r14, r1
   16114:	f1 04       	cpc	r15, r1
   16116:	29 f0       	breq	.+10     	; 0x16122 <strtod+0x120>
   16118:	0e 5f       	subi	r16, 0xFE	; 254
   1611a:	1f 4f       	sbci	r17, 0xFF	; 255
   1611c:	f7 01       	movw	r30, r14
   1611e:	11 83       	std	Z+1, r17	; 0x01
   16120:	00 83       	st	Z, r16
   16122:	60 e0       	ldi	r22, 0x00	; 0
   16124:	70 e0       	ldi	r23, 0x00	; 0
   16126:	80 ec       	ldi	r24, 0xC0	; 192
   16128:	9f e7       	ldi	r25, 0x7F	; 127
   1612a:	bc c0       	rjmp	.+376    	; 0x162a4 <strtod+0x2a2>
   1612c:	88 23       	and	r24, r24
   1612e:	11 f0       	breq	.+4      	; 0x16134 <strtod+0x132>
   16130:	01 50       	subi	r16, 0x01	; 1
   16132:	11 09       	sbc	r17, r1
   16134:	a5 e0       	ldi	r26, 0x05	; 5
   16136:	b0 e0       	ldi	r27, 0x00	; 0
   16138:	0e 94 c0 b4 	call	0x16980	; 0x16980 <__muluhisi3>
   1613c:	9b 01       	movw	r18, r22
   1613e:	ac 01       	movw	r20, r24
   16140:	22 0f       	add	r18, r18
   16142:	33 1f       	adc	r19, r19
   16144:	44 1f       	adc	r20, r20
   16146:	55 1f       	adc	r21, r21
   16148:	28 0d       	add	r18, r8
   1614a:	31 1d       	adc	r19, r1
   1614c:	41 1d       	adc	r20, r1
   1614e:	51 1d       	adc	r21, r1
   16150:	28 39       	cpi	r18, 0x98	; 152
   16152:	99 e9       	ldi	r25, 0x99	; 153
   16154:	39 07       	cpc	r19, r25
   16156:	49 07       	cpc	r20, r25
   16158:	99 e1       	ldi	r25, 0x19	; 25
   1615a:	59 07       	cpc	r21, r25
   1615c:	a8 f2       	brcs	.-86     	; 0x16108 <strtod+0x106>
   1615e:	c6 60       	ori	r28, 0x06	; 6
   16160:	9c 2e       	mov	r9, r28
   16162:	d2 cf       	rjmp	.-92     	; 0x16108 <strtod+0x106>
   16164:	ae ef       	ldi	r26, 0xFE	; 254
   16166:	8a 12       	cpse	r8, r26
   16168:	06 c0       	rjmp	.+12     	; 0x16176 <strtod+0x174>
   1616a:	c3 fd       	sbrc	r28, 3
   1616c:	3c c0       	rjmp	.+120    	; 0x161e6 <strtod+0x1e4>
   1616e:	9c 2e       	mov	r9, r28
   16170:	68 94       	set
   16172:	93 f8       	bld	r9, 3
   16174:	c9 cf       	rjmp	.-110    	; 0x16108 <strtod+0x106>
   16176:	df 7d       	andi	r29, 0xDF	; 223
   16178:	d5 34       	cpi	r29, 0x45	; 69
   1617a:	a9 f5       	brne	.+106    	; 0x161e6 <strtod+0x1e4>
   1617c:	80 81       	ld	r24, Z
   1617e:	8d 32       	cpi	r24, 0x2D	; 45
   16180:	39 f4       	brne	.+14     	; 0x16190 <strtod+0x18e>
   16182:	c0 61       	ori	r28, 0x10	; 16
   16184:	df 01       	movw	r26, r30
   16186:	12 96       	adiw	r26, 0x02	; 2
   16188:	81 81       	ldd	r24, Z+1	; 0x01
   1618a:	62 e0       	ldi	r22, 0x02	; 2
   1618c:	70 e0       	ldi	r23, 0x00	; 0
   1618e:	06 c0       	rjmp	.+12     	; 0x1619c <strtod+0x19a>
   16190:	df 01       	movw	r26, r30
   16192:	8b 32       	cpi	r24, 0x2B	; 43
   16194:	c1 f3       	breq	.-16     	; 0x16186 <strtod+0x184>
   16196:	11 96       	adiw	r26, 0x01	; 1
   16198:	61 e0       	ldi	r22, 0x01	; 1
   1619a:	70 e0       	ldi	r23, 0x00	; 0
   1619c:	80 53       	subi	r24, 0x30	; 48
   1619e:	5d 01       	movw	r10, r26
   161a0:	a6 1a       	sub	r10, r22
   161a2:	b7 0a       	sbc	r11, r23
   161a4:	8a 30       	cpi	r24, 0x0A	; 10
   161a6:	f8 f4       	brcc	.+62     	; 0x161e6 <strtod+0x1e4>
   161a8:	e0 e8       	ldi	r30, 0x80	; 128
   161aa:	ce 16       	cp	r12, r30
   161ac:	ec e0       	ldi	r30, 0x0C	; 12
   161ae:	de 06       	cpc	r13, r30
   161b0:	5c f4       	brge	.+22     	; 0x161c8 <strtod+0x1c6>
   161b2:	b6 01       	movw	r22, r12
   161b4:	66 0f       	add	r22, r22
   161b6:	77 1f       	adc	r23, r23
   161b8:	66 0f       	add	r22, r22
   161ba:	77 1f       	adc	r23, r23
   161bc:	c6 0e       	add	r12, r22
   161be:	d7 1e       	adc	r13, r23
   161c0:	cc 0c       	add	r12, r12
   161c2:	dd 1c       	adc	r13, r13
   161c4:	c8 0e       	add	r12, r24
   161c6:	d1 1c       	adc	r13, r1
   161c8:	5d 01       	movw	r10, r26
   161ca:	ff ef       	ldi	r31, 0xFF	; 255
   161cc:	af 1a       	sub	r10, r31
   161ce:	bf 0a       	sbc	r11, r31
   161d0:	8c 91       	ld	r24, X
   161d2:	80 53       	subi	r24, 0x30	; 48
   161d4:	8a 30       	cpi	r24, 0x0A	; 10
   161d6:	a8 f1       	brcs	.+106    	; 0x16242 <strtod+0x240>
   161d8:	c4 ff       	sbrs	r28, 4
   161da:	03 c0       	rjmp	.+6      	; 0x161e2 <strtod+0x1e0>
   161dc:	d1 94       	neg	r13
   161de:	c1 94       	neg	r12
   161e0:	d1 08       	sbc	r13, r1
   161e2:	0c 0d       	add	r16, r12
   161e4:	1d 1d       	adc	r17, r13
   161e6:	c1 ff       	sbrs	r28, 1
   161e8:	09 c0       	rjmp	.+18     	; 0x161fc <strtod+0x1fa>
   161ea:	e1 14       	cp	r14, r1
   161ec:	f1 04       	cpc	r15, r1
   161ee:	31 f0       	breq	.+12     	; 0x161fc <strtod+0x1fa>
   161f0:	81 e0       	ldi	r24, 0x01	; 1
   161f2:	a8 1a       	sub	r10, r24
   161f4:	b1 08       	sbc	r11, r1
   161f6:	d7 01       	movw	r26, r14
   161f8:	ad 92       	st	X+, r10
   161fa:	bc 92       	st	X, r11
   161fc:	ca 01       	movw	r24, r20
   161fe:	b9 01       	movw	r22, r18
   16200:	0e 94 12 b3 	call	0x16624	; 0x16624 <__floatunsisf>
   16204:	c3 70       	andi	r28, 0x03	; 3
   16206:	c3 30       	cpi	r28, 0x03	; 3
   16208:	09 f4       	brne	.+2      	; 0x1620c <strtod+0x20a>
   1620a:	90 58       	subi	r25, 0x80	; 128
   1620c:	4b 01       	movw	r8, r22
   1620e:	5c 01       	movw	r10, r24
   16210:	20 e0       	ldi	r18, 0x00	; 0
   16212:	30 e0       	ldi	r19, 0x00	; 0
   16214:	a9 01       	movw	r20, r18
   16216:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
   1621a:	88 23       	and	r24, r24
   1621c:	09 f4       	brne	.+2      	; 0x16220 <strtod+0x21e>
   1621e:	40 c0       	rjmp	.+128    	; 0x162a0 <strtod+0x29e>
   16220:	cf e7       	ldi	r28, 0x7F	; 127
   16222:	d3 e0       	ldi	r29, 0x03	; 3
   16224:	17 ff       	sbrs	r17, 7
   16226:	05 c0       	rjmp	.+10     	; 0x16232 <strtod+0x230>
   16228:	11 95       	neg	r17
   1622a:	01 95       	neg	r16
   1622c:	11 09       	sbc	r17, r1
   1622e:	c7 e6       	ldi	r28, 0x67	; 103
   16230:	d3 e0       	ldi	r29, 0x03	; 3
   16232:	6e 01       	movw	r12, r28
   16234:	b8 e1       	ldi	r27, 0x18	; 24
   16236:	cb 1a       	sub	r12, r27
   16238:	d1 08       	sbc	r13, r1
   1623a:	80 e2       	ldi	r24, 0x20	; 32
   1623c:	e8 2e       	mov	r14, r24
   1623e:	f1 2c       	mov	r15, r1
   16240:	0f c0       	rjmp	.+30     	; 0x16260 <strtod+0x25e>
   16242:	d5 01       	movw	r26, r10
   16244:	b1 cf       	rjmp	.-158    	; 0x161a8 <strtod+0x1a6>
   16246:	fe 01       	movw	r30, r28
   16248:	25 91       	lpm	r18, Z+
   1624a:	35 91       	lpm	r19, Z+
   1624c:	45 91       	lpm	r20, Z+
   1624e:	54 91       	lpm	r21, Z
   16250:	0e 19       	sub	r16, r14
   16252:	1f 09       	sbc	r17, r15
   16254:	c5 01       	movw	r24, r10
   16256:	b4 01       	movw	r22, r8
   16258:	0e 94 73 b3 	call	0x166e6	; 0x166e6 <__mulsf3>
   1625c:	4b 01       	movw	r8, r22
   1625e:	5c 01       	movw	r10, r24
   16260:	d5 01       	movw	r26, r10
   16262:	c4 01       	movw	r24, r8
   16264:	0e 15       	cp	r16, r14
   16266:	1f 05       	cpc	r17, r15
   16268:	74 f7       	brge	.-36     	; 0x16246 <strtod+0x244>
   1626a:	24 97       	sbiw	r28, 0x04	; 4
   1626c:	f5 94       	asr	r15
   1626e:	e7 94       	ror	r14
   16270:	cc 16       	cp	r12, r28
   16272:	dd 06       	cpc	r13, r29
   16274:	a9 f7       	brne	.-22     	; 0x16260 <strtod+0x25e>
   16276:	8a 2f       	mov	r24, r26
   16278:	88 0f       	add	r24, r24
   1627a:	8b 2f       	mov	r24, r27
   1627c:	88 1f       	adc	r24, r24
   1627e:	8f 3f       	cpi	r24, 0xFF	; 255
   16280:	49 f0       	breq	.+18     	; 0x16294 <strtod+0x292>
   16282:	20 e0       	ldi	r18, 0x00	; 0
   16284:	30 e0       	ldi	r19, 0x00	; 0
   16286:	a9 01       	movw	r20, r18
   16288:	c5 01       	movw	r24, r10
   1628a:	b4 01       	movw	r22, r8
   1628c:	0e 94 0d b3 	call	0x1661a	; 0x1661a <__cmpsf2>
   16290:	81 11       	cpse	r24, r1
   16292:	06 c0       	rjmp	.+12     	; 0x162a0 <strtod+0x29e>
   16294:	82 e2       	ldi	r24, 0x22	; 34
   16296:	90 e0       	ldi	r25, 0x00	; 0
   16298:	90 93 38 13 	sts	0x1338, r25	; 0x801338 <errno+0x1>
   1629c:	80 93 37 13 	sts	0x1337, r24	; 0x801337 <errno>
   162a0:	c5 01       	movw	r24, r10
   162a2:	b4 01       	movw	r22, r8
   162a4:	df 91       	pop	r29
   162a6:	cf 91       	pop	r28
   162a8:	1f 91       	pop	r17
   162aa:	0f 91       	pop	r16
   162ac:	ff 90       	pop	r15
   162ae:	ef 90       	pop	r14
   162b0:	df 90       	pop	r13
   162b2:	cf 90       	pop	r12
   162b4:	bf 90       	pop	r11
   162b6:	af 90       	pop	r10
   162b8:	9f 90       	pop	r9
   162ba:	8f 90       	pop	r8
   162bc:	08 95       	ret

000162be <__ftoa_engine>:
__ftoa_engine():
   162be:	28 30       	cpi	r18, 0x08	; 8
   162c0:	08 f0       	brcs	.+2      	; 0x162c4 <__ftoa_engine+0x6>
   162c2:	27 e0       	ldi	r18, 0x07	; 7
   162c4:	33 27       	eor	r19, r19
   162c6:	da 01       	movw	r26, r20
   162c8:	99 0f       	add	r25, r25
   162ca:	31 1d       	adc	r19, r1
   162cc:	87 fd       	sbrc	r24, 7
   162ce:	91 60       	ori	r25, 0x01	; 1
   162d0:	00 96       	adiw	r24, 0x00	; 0
   162d2:	61 05       	cpc	r22, r1
   162d4:	71 05       	cpc	r23, r1
   162d6:	39 f4       	brne	.+14     	; 0x162e6 <__ftoa_engine+0x28>
   162d8:	32 60       	ori	r19, 0x02	; 2
   162da:	2e 5f       	subi	r18, 0xFE	; 254
   162dc:	3d 93       	st	X+, r19
   162de:	30 e3       	ldi	r19, 0x30	; 48
   162e0:	2a 95       	dec	r18
   162e2:	e1 f7       	brne	.-8      	; 0x162dc <__ftoa_engine+0x1e>
   162e4:	08 95       	ret
   162e6:	9f 3f       	cpi	r25, 0xFF	; 255
   162e8:	30 f0       	brcs	.+12     	; 0x162f6 <__ftoa_engine+0x38>
   162ea:	80 38       	cpi	r24, 0x80	; 128
   162ec:	71 05       	cpc	r23, r1
   162ee:	61 05       	cpc	r22, r1
   162f0:	09 f0       	breq	.+2      	; 0x162f4 <__ftoa_engine+0x36>
   162f2:	3c 5f       	subi	r19, 0xFC	; 252
   162f4:	3c 5f       	subi	r19, 0xFC	; 252
   162f6:	3d 93       	st	X+, r19
   162f8:	91 30       	cpi	r25, 0x01	; 1
   162fa:	08 f0       	brcs	.+2      	; 0x162fe <__ftoa_engine+0x40>
   162fc:	80 68       	ori	r24, 0x80	; 128
   162fe:	91 1d       	adc	r25, r1
   16300:	df 93       	push	r29
   16302:	cf 93       	push	r28
   16304:	1f 93       	push	r17
   16306:	0f 93       	push	r16
   16308:	ff 92       	push	r15
   1630a:	ef 92       	push	r14
   1630c:	19 2f       	mov	r17, r25
   1630e:	98 7f       	andi	r25, 0xF8	; 248
   16310:	96 95       	lsr	r25
   16312:	e9 2f       	mov	r30, r25
   16314:	96 95       	lsr	r25
   16316:	96 95       	lsr	r25
   16318:	e9 0f       	add	r30, r25
   1631a:	ff 27       	eor	r31, r31
   1631c:	e3 52       	subi	r30, 0x23	; 35
   1631e:	fc 4f       	sbci	r31, 0xFC	; 252
   16320:	99 27       	eor	r25, r25
   16322:	33 27       	eor	r19, r19
   16324:	ee 24       	eor	r14, r14
   16326:	ff 24       	eor	r15, r15
   16328:	a7 01       	movw	r20, r14
   1632a:	e7 01       	movw	r28, r14
   1632c:	05 90       	lpm	r0, Z+
   1632e:	08 94       	sec
   16330:	07 94       	ror	r0
   16332:	28 f4       	brcc	.+10     	; 0x1633e <__ftoa_engine+0x80>
   16334:	36 0f       	add	r19, r22
   16336:	e7 1e       	adc	r14, r23
   16338:	f8 1e       	adc	r15, r24
   1633a:	49 1f       	adc	r20, r25
   1633c:	51 1d       	adc	r21, r1
   1633e:	66 0f       	add	r22, r22
   16340:	77 1f       	adc	r23, r23
   16342:	88 1f       	adc	r24, r24
   16344:	99 1f       	adc	r25, r25
   16346:	06 94       	lsr	r0
   16348:	a1 f7       	brne	.-24     	; 0x16332 <__ftoa_engine+0x74>
   1634a:	05 90       	lpm	r0, Z+
   1634c:	07 94       	ror	r0
   1634e:	28 f4       	brcc	.+10     	; 0x1635a <__ftoa_engine+0x9c>
   16350:	e7 0e       	add	r14, r23
   16352:	f8 1e       	adc	r15, r24
   16354:	49 1f       	adc	r20, r25
   16356:	56 1f       	adc	r21, r22
   16358:	c1 1d       	adc	r28, r1
   1635a:	77 0f       	add	r23, r23
   1635c:	88 1f       	adc	r24, r24
   1635e:	99 1f       	adc	r25, r25
   16360:	66 1f       	adc	r22, r22
   16362:	06 94       	lsr	r0
   16364:	a1 f7       	brne	.-24     	; 0x1634e <__ftoa_engine+0x90>
   16366:	05 90       	lpm	r0, Z+
   16368:	07 94       	ror	r0
   1636a:	28 f4       	brcc	.+10     	; 0x16376 <__ftoa_engine+0xb8>
   1636c:	f8 0e       	add	r15, r24
   1636e:	49 1f       	adc	r20, r25
   16370:	56 1f       	adc	r21, r22
   16372:	c7 1f       	adc	r28, r23
   16374:	d1 1d       	adc	r29, r1
   16376:	88 0f       	add	r24, r24
   16378:	99 1f       	adc	r25, r25
   1637a:	66 1f       	adc	r22, r22
   1637c:	77 1f       	adc	r23, r23
   1637e:	06 94       	lsr	r0
   16380:	a1 f7       	brne	.-24     	; 0x1636a <__ftoa_engine+0xac>
   16382:	05 90       	lpm	r0, Z+
   16384:	07 94       	ror	r0
   16386:	20 f4       	brcc	.+8      	; 0x16390 <__ftoa_engine+0xd2>
   16388:	49 0f       	add	r20, r25
   1638a:	56 1f       	adc	r21, r22
   1638c:	c7 1f       	adc	r28, r23
   1638e:	d8 1f       	adc	r29, r24
   16390:	99 0f       	add	r25, r25
   16392:	66 1f       	adc	r22, r22
   16394:	77 1f       	adc	r23, r23
   16396:	88 1f       	adc	r24, r24
   16398:	06 94       	lsr	r0
   1639a:	a9 f7       	brne	.-22     	; 0x16386 <__ftoa_engine+0xc8>
   1639c:	84 91       	lpm	r24, Z
   1639e:	10 95       	com	r17
   163a0:	17 70       	andi	r17, 0x07	; 7
   163a2:	41 f0       	breq	.+16     	; 0x163b4 <__ftoa_engine+0xf6>
   163a4:	d6 95       	lsr	r29
   163a6:	c7 95       	ror	r28
   163a8:	57 95       	ror	r21
   163aa:	47 95       	ror	r20
   163ac:	f7 94       	ror	r15
   163ae:	e7 94       	ror	r14
   163b0:	1a 95       	dec	r17
   163b2:	c1 f7       	brne	.-16     	; 0x163a4 <__ftoa_engine+0xe6>
   163b4:	e3 e8       	ldi	r30, 0x83	; 131
   163b6:	f3 e0       	ldi	r31, 0x03	; 3
   163b8:	68 94       	set
   163ba:	15 90       	lpm	r1, Z+
   163bc:	15 91       	lpm	r17, Z+
   163be:	35 91       	lpm	r19, Z+
   163c0:	65 91       	lpm	r22, Z+
   163c2:	95 91       	lpm	r25, Z+
   163c4:	05 90       	lpm	r0, Z+
   163c6:	7f e2       	ldi	r23, 0x2F	; 47
   163c8:	73 95       	inc	r23
   163ca:	e1 18       	sub	r14, r1
   163cc:	f1 0a       	sbc	r15, r17
   163ce:	43 0b       	sbc	r20, r19
   163d0:	56 0b       	sbc	r21, r22
   163d2:	c9 0b       	sbc	r28, r25
   163d4:	d0 09       	sbc	r29, r0
   163d6:	c0 f7       	brcc	.-16     	; 0x163c8 <__ftoa_engine+0x10a>
   163d8:	e1 0c       	add	r14, r1
   163da:	f1 1e       	adc	r15, r17
   163dc:	43 1f       	adc	r20, r19
   163de:	56 1f       	adc	r21, r22
   163e0:	c9 1f       	adc	r28, r25
   163e2:	d0 1d       	adc	r29, r0
   163e4:	7e f4       	brtc	.+30     	; 0x16404 <__ftoa_engine+0x146>
   163e6:	70 33       	cpi	r23, 0x30	; 48
   163e8:	11 f4       	brne	.+4      	; 0x163ee <__ftoa_engine+0x130>
   163ea:	8a 95       	dec	r24
   163ec:	e6 cf       	rjmp	.-52     	; 0x163ba <__ftoa_engine+0xfc>
   163ee:	e8 94       	clt
   163f0:	01 50       	subi	r16, 0x01	; 1
   163f2:	30 f0       	brcs	.+12     	; 0x16400 <__ftoa_engine+0x142>
   163f4:	08 0f       	add	r16, r24
   163f6:	0a f4       	brpl	.+2      	; 0x163fa <__ftoa_engine+0x13c>
   163f8:	00 27       	eor	r16, r16
   163fa:	02 17       	cp	r16, r18
   163fc:	08 f4       	brcc	.+2      	; 0x16400 <__ftoa_engine+0x142>
   163fe:	20 2f       	mov	r18, r16
   16400:	23 95       	inc	r18
   16402:	02 2f       	mov	r16, r18
   16404:	7a 33       	cpi	r23, 0x3A	; 58
   16406:	28 f0       	brcs	.+10     	; 0x16412 <__ftoa_engine+0x154>
   16408:	79 e3       	ldi	r23, 0x39	; 57
   1640a:	7d 93       	st	X+, r23
   1640c:	2a 95       	dec	r18
   1640e:	e9 f7       	brne	.-6      	; 0x1640a <__ftoa_engine+0x14c>
   16410:	10 c0       	rjmp	.+32     	; 0x16432 <__ftoa_engine+0x174>
   16412:	7d 93       	st	X+, r23
   16414:	2a 95       	dec	r18
   16416:	89 f6       	brne	.-94     	; 0x163ba <__ftoa_engine+0xfc>
   16418:	06 94       	lsr	r0
   1641a:	97 95       	ror	r25
   1641c:	67 95       	ror	r22
   1641e:	37 95       	ror	r19
   16420:	17 95       	ror	r17
   16422:	17 94       	ror	r1
   16424:	e1 18       	sub	r14, r1
   16426:	f1 0a       	sbc	r15, r17
   16428:	43 0b       	sbc	r20, r19
   1642a:	56 0b       	sbc	r21, r22
   1642c:	c9 0b       	sbc	r28, r25
   1642e:	d0 09       	sbc	r29, r0
   16430:	98 f0       	brcs	.+38     	; 0x16458 <__ftoa_engine+0x19a>
   16432:	23 95       	inc	r18
   16434:	7e 91       	ld	r23, -X
   16436:	73 95       	inc	r23
   16438:	7a 33       	cpi	r23, 0x3A	; 58
   1643a:	08 f0       	brcs	.+2      	; 0x1643e <__ftoa_engine+0x180>
   1643c:	70 e3       	ldi	r23, 0x30	; 48
   1643e:	7c 93       	st	X, r23
   16440:	20 13       	cpse	r18, r16
   16442:	b8 f7       	brcc	.-18     	; 0x16432 <__ftoa_engine+0x174>
   16444:	7e 91       	ld	r23, -X
   16446:	70 61       	ori	r23, 0x10	; 16
   16448:	7d 93       	st	X+, r23
   1644a:	30 f0       	brcs	.+12     	; 0x16458 <__ftoa_engine+0x19a>
   1644c:	83 95       	inc	r24
   1644e:	71 e3       	ldi	r23, 0x31	; 49
   16450:	7d 93       	st	X+, r23
   16452:	70 e3       	ldi	r23, 0x30	; 48
   16454:	2a 95       	dec	r18
   16456:	e1 f7       	brne	.-8      	; 0x16450 <__ftoa_engine+0x192>
   16458:	11 24       	eor	r1, r1
   1645a:	ef 90       	pop	r14
   1645c:	ff 90       	pop	r15
   1645e:	0f 91       	pop	r16
   16460:	1f 91       	pop	r17
   16462:	cf 91       	pop	r28
   16464:	df 91       	pop	r29
   16466:	99 27       	eor	r25, r25
   16468:	87 fd       	sbrc	r24, 7
   1646a:	90 95       	com	r25
   1646c:	08 95       	ret

0001646e <__ctype_isfalse>:
__ctype_isfalse():
   1646e:	99 27       	eor	r25, r25
   16470:	88 27       	eor	r24, r24

00016472 <__ctype_istrue>:
__ctype_istrue():
   16472:	08 95       	ret

00016474 <strncasecmp_P>:
strncasecmp_P():
   16474:	fb 01       	movw	r30, r22
   16476:	dc 01       	movw	r26, r24
   16478:	41 50       	subi	r20, 0x01	; 1
   1647a:	50 40       	sbci	r21, 0x00	; 0
   1647c:	88 f0       	brcs	.+34     	; 0x164a0 <strncasecmp_P+0x2c>
   1647e:	8d 91       	ld	r24, X+
   16480:	81 34       	cpi	r24, 0x41	; 65
   16482:	1c f0       	brlt	.+6      	; 0x1648a <strncasecmp_P+0x16>
   16484:	8b 35       	cpi	r24, 0x5B	; 91
   16486:	0c f4       	brge	.+2      	; 0x1648a <strncasecmp_P+0x16>
   16488:	80 5e       	subi	r24, 0xE0	; 224
   1648a:	65 91       	lpm	r22, Z+
   1648c:	61 34       	cpi	r22, 0x41	; 65
   1648e:	1c f0       	brlt	.+6      	; 0x16496 <strncasecmp_P+0x22>
   16490:	6b 35       	cpi	r22, 0x5B	; 91
   16492:	0c f4       	brge	.+2      	; 0x16496 <strncasecmp_P+0x22>
   16494:	60 5e       	subi	r22, 0xE0	; 224
   16496:	86 1b       	sub	r24, r22
   16498:	61 11       	cpse	r22, r1
   1649a:	71 f3       	breq	.-36     	; 0x16478 <strncasecmp_P+0x4>
   1649c:	99 0b       	sbc	r25, r25
   1649e:	08 95       	ret
   164a0:	88 1b       	sub	r24, r24
   164a2:	fc cf       	rjmp	.-8      	; 0x1649c <strncasecmp_P+0x28>

000164a4 <strnlen_P>:
strnlen_P():
   164a4:	fc 01       	movw	r30, r24
   164a6:	05 90       	lpm	r0, Z+
   164a8:	61 50       	subi	r22, 0x01	; 1
   164aa:	70 40       	sbci	r23, 0x00	; 0
   164ac:	01 10       	cpse	r0, r1
   164ae:	d8 f7       	brcc	.-10     	; 0x164a6 <strnlen_P+0x2>
   164b0:	80 95       	com	r24
   164b2:	90 95       	com	r25
   164b4:	8e 0f       	add	r24, r30
   164b6:	9f 1f       	adc	r25, r31
   164b8:	08 95       	ret

000164ba <memset>:
memset():
   164ba:	dc 01       	movw	r26, r24
   164bc:	01 c0       	rjmp	.+2      	; 0x164c0 <memset+0x6>
   164be:	6d 93       	st	X+, r22
   164c0:	41 50       	subi	r20, 0x01	; 1
   164c2:	50 40       	sbci	r21, 0x00	; 0
   164c4:	e0 f7       	brcc	.-8      	; 0x164be <memset+0x4>
   164c6:	08 95       	ret

000164c8 <strnlen>:
strnlen():
   164c8:	fc 01       	movw	r30, r24
   164ca:	61 50       	subi	r22, 0x01	; 1
   164cc:	70 40       	sbci	r23, 0x00	; 0
   164ce:	01 90       	ld	r0, Z+
   164d0:	01 10       	cpse	r0, r1
   164d2:	d8 f7       	brcc	.-10     	; 0x164ca <strnlen+0x2>
   164d4:	80 95       	com	r24
   164d6:	90 95       	com	r25
   164d8:	8e 0f       	add	r24, r30
   164da:	9f 1f       	adc	r25, r31
   164dc:	08 95       	ret

000164de <strrev>:
strrev():
   164de:	dc 01       	movw	r26, r24
   164e0:	fc 01       	movw	r30, r24
   164e2:	67 2f       	mov	r22, r23
   164e4:	71 91       	ld	r23, Z+
   164e6:	77 23       	and	r23, r23
   164e8:	e1 f7       	brne	.-8      	; 0x164e2 <strrev+0x4>
   164ea:	32 97       	sbiw	r30, 0x02	; 2
   164ec:	04 c0       	rjmp	.+8      	; 0x164f6 <strrev+0x18>
   164ee:	7c 91       	ld	r23, X
   164f0:	6d 93       	st	X+, r22
   164f2:	70 83       	st	Z, r23
   164f4:	62 91       	ld	r22, -Z
   164f6:	ae 17       	cp	r26, r30
   164f8:	bf 07       	cpc	r27, r31
   164fa:	c8 f3       	brcs	.-14     	; 0x164ee <strrev+0x10>
   164fc:	08 95       	ret

000164fe <fputc>:
fputc():
   164fe:	0f 93       	push	r16
   16500:	1f 93       	push	r17
   16502:	cf 93       	push	r28
   16504:	df 93       	push	r29
   16506:	18 2f       	mov	r17, r24
   16508:	09 2f       	mov	r16, r25
   1650a:	eb 01       	movw	r28, r22
   1650c:	8b 81       	ldd	r24, Y+3	; 0x03
   1650e:	81 fd       	sbrc	r24, 1
   16510:	09 c0       	rjmp	.+18     	; 0x16524 <fputc+0x26>
   16512:	1f ef       	ldi	r17, 0xFF	; 255
   16514:	0f ef       	ldi	r16, 0xFF	; 255
   16516:	81 2f       	mov	r24, r17
   16518:	90 2f       	mov	r25, r16
   1651a:	df 91       	pop	r29
   1651c:	cf 91       	pop	r28
   1651e:	1f 91       	pop	r17
   16520:	0f 91       	pop	r16
   16522:	08 95       	ret
   16524:	82 ff       	sbrs	r24, 2
   16526:	14 c0       	rjmp	.+40     	; 0x16550 <fputc+0x52>
   16528:	2e 81       	ldd	r18, Y+6	; 0x06
   1652a:	3f 81       	ldd	r19, Y+7	; 0x07
   1652c:	8c 81       	ldd	r24, Y+4	; 0x04
   1652e:	9d 81       	ldd	r25, Y+5	; 0x05
   16530:	28 17       	cp	r18, r24
   16532:	39 07       	cpc	r19, r25
   16534:	3c f4       	brge	.+14     	; 0x16544 <fputc+0x46>
   16536:	e8 81       	ld	r30, Y
   16538:	f9 81       	ldd	r31, Y+1	; 0x01
   1653a:	cf 01       	movw	r24, r30
   1653c:	01 96       	adiw	r24, 0x01	; 1
   1653e:	99 83       	std	Y+1, r25	; 0x01
   16540:	88 83       	st	Y, r24
   16542:	10 83       	st	Z, r17
   16544:	8e 81       	ldd	r24, Y+6	; 0x06
   16546:	9f 81       	ldd	r25, Y+7	; 0x07
   16548:	01 96       	adiw	r24, 0x01	; 1
   1654a:	9f 83       	std	Y+7, r25	; 0x07
   1654c:	8e 83       	std	Y+6, r24	; 0x06
   1654e:	e3 cf       	rjmp	.-58     	; 0x16516 <fputc+0x18>
   16550:	e8 85       	ldd	r30, Y+8	; 0x08
   16552:	f9 85       	ldd	r31, Y+9	; 0x09
   16554:	81 2f       	mov	r24, r17
   16556:	19 95       	eicall
   16558:	89 2b       	or	r24, r25
   1655a:	a1 f3       	breq	.-24     	; 0x16544 <fputc+0x46>
   1655c:	da cf       	rjmp	.-76     	; 0x16512 <fputc+0x14>

0001655e <__ultoa_invert>:
__ultoa_invert():
   1655e:	fa 01       	movw	r30, r20
   16560:	aa 27       	eor	r26, r26
   16562:	28 30       	cpi	r18, 0x08	; 8
   16564:	51 f1       	breq	.+84     	; 0x165ba <__ultoa_invert+0x5c>
   16566:	20 31       	cpi	r18, 0x10	; 16
   16568:	81 f1       	breq	.+96     	; 0x165ca <__ultoa_invert+0x6c>
   1656a:	e8 94       	clt
   1656c:	6f 93       	push	r22
   1656e:	6e 7f       	andi	r22, 0xFE	; 254
   16570:	6e 5f       	subi	r22, 0xFE	; 254
   16572:	7f 4f       	sbci	r23, 0xFF	; 255
   16574:	8f 4f       	sbci	r24, 0xFF	; 255
   16576:	9f 4f       	sbci	r25, 0xFF	; 255
   16578:	af 4f       	sbci	r26, 0xFF	; 255
   1657a:	b1 e0       	ldi	r27, 0x01	; 1
   1657c:	3e d0       	rcall	.+124    	; 0x165fa <__ultoa_invert+0x9c>
   1657e:	b4 e0       	ldi	r27, 0x04	; 4
   16580:	3c d0       	rcall	.+120    	; 0x165fa <__ultoa_invert+0x9c>
   16582:	67 0f       	add	r22, r23
   16584:	78 1f       	adc	r23, r24
   16586:	89 1f       	adc	r24, r25
   16588:	9a 1f       	adc	r25, r26
   1658a:	a1 1d       	adc	r26, r1
   1658c:	68 0f       	add	r22, r24
   1658e:	79 1f       	adc	r23, r25
   16590:	8a 1f       	adc	r24, r26
   16592:	91 1d       	adc	r25, r1
   16594:	a1 1d       	adc	r26, r1
   16596:	6a 0f       	add	r22, r26
   16598:	71 1d       	adc	r23, r1
   1659a:	81 1d       	adc	r24, r1
   1659c:	91 1d       	adc	r25, r1
   1659e:	a1 1d       	adc	r26, r1
   165a0:	20 d0       	rcall	.+64     	; 0x165e2 <__ultoa_invert+0x84>
   165a2:	09 f4       	brne	.+2      	; 0x165a6 <__ultoa_invert+0x48>
   165a4:	68 94       	set
   165a6:	3f 91       	pop	r19
   165a8:	2a e0       	ldi	r18, 0x0A	; 10
   165aa:	26 9f       	mul	r18, r22
   165ac:	11 24       	eor	r1, r1
   165ae:	30 19       	sub	r19, r0
   165b0:	30 5d       	subi	r19, 0xD0	; 208
   165b2:	31 93       	st	Z+, r19
   165b4:	de f6       	brtc	.-74     	; 0x1656c <__ultoa_invert+0xe>
   165b6:	cf 01       	movw	r24, r30
   165b8:	08 95       	ret
   165ba:	46 2f       	mov	r20, r22
   165bc:	47 70       	andi	r20, 0x07	; 7
   165be:	40 5d       	subi	r20, 0xD0	; 208
   165c0:	41 93       	st	Z+, r20
   165c2:	b3 e0       	ldi	r27, 0x03	; 3
   165c4:	0f d0       	rcall	.+30     	; 0x165e4 <__ultoa_invert+0x86>
   165c6:	c9 f7       	brne	.-14     	; 0x165ba <__ultoa_invert+0x5c>
   165c8:	f6 cf       	rjmp	.-20     	; 0x165b6 <__ultoa_invert+0x58>
   165ca:	46 2f       	mov	r20, r22
   165cc:	4f 70       	andi	r20, 0x0F	; 15
   165ce:	40 5d       	subi	r20, 0xD0	; 208
   165d0:	4a 33       	cpi	r20, 0x3A	; 58
   165d2:	18 f0       	brcs	.+6      	; 0x165da <__ultoa_invert+0x7c>
   165d4:	49 5d       	subi	r20, 0xD9	; 217
   165d6:	31 fd       	sbrc	r19, 1
   165d8:	40 52       	subi	r20, 0x20	; 32
   165da:	41 93       	st	Z+, r20
   165dc:	02 d0       	rcall	.+4      	; 0x165e2 <__ultoa_invert+0x84>
   165de:	a9 f7       	brne	.-22     	; 0x165ca <__ultoa_invert+0x6c>
   165e0:	ea cf       	rjmp	.-44     	; 0x165b6 <__ultoa_invert+0x58>
   165e2:	b4 e0       	ldi	r27, 0x04	; 4
   165e4:	a6 95       	lsr	r26
   165e6:	97 95       	ror	r25
   165e8:	87 95       	ror	r24
   165ea:	77 95       	ror	r23
   165ec:	67 95       	ror	r22
   165ee:	ba 95       	dec	r27
   165f0:	c9 f7       	brne	.-14     	; 0x165e4 <__ultoa_invert+0x86>
   165f2:	00 97       	sbiw	r24, 0x00	; 0
   165f4:	61 05       	cpc	r22, r1
   165f6:	71 05       	cpc	r23, r1
   165f8:	08 95       	ret
   165fa:	9b 01       	movw	r18, r22
   165fc:	ac 01       	movw	r20, r24
   165fe:	0a 2e       	mov	r0, r26
   16600:	06 94       	lsr	r0
   16602:	57 95       	ror	r21
   16604:	47 95       	ror	r20
   16606:	37 95       	ror	r19
   16608:	27 95       	ror	r18
   1660a:	ba 95       	dec	r27
   1660c:	c9 f7       	brne	.-14     	; 0x16600 <__ultoa_invert+0xa2>
   1660e:	62 0f       	add	r22, r18
   16610:	73 1f       	adc	r23, r19
   16612:	84 1f       	adc	r24, r20
   16614:	95 1f       	adc	r25, r21
   16616:	a0 1d       	adc	r26, r0
   16618:	08 95       	ret

0001661a <__cmpsf2>:
__cmpsf2():
   1661a:	0e 94 4f b3 	call	0x1669e	; 0x1669e <__fp_cmp>
   1661e:	08 f4       	brcc	.+2      	; 0x16622 <__cmpsf2+0x8>
   16620:	81 e0       	ldi	r24, 0x01	; 1
   16622:	08 95       	ret

00016624 <__floatunsisf>:
__floatunsisf():
   16624:	e8 94       	clt
   16626:	09 c0       	rjmp	.+18     	; 0x1663a <__floatsisf+0x12>

00016628 <__floatsisf>:
   16628:	97 fb       	bst	r25, 7
   1662a:	3e f4       	brtc	.+14     	; 0x1663a <__floatsisf+0x12>
   1662c:	90 95       	com	r25
   1662e:	80 95       	com	r24
   16630:	70 95       	com	r23
   16632:	61 95       	neg	r22
   16634:	7f 4f       	sbci	r23, 0xFF	; 255
   16636:	8f 4f       	sbci	r24, 0xFF	; 255
   16638:	9f 4f       	sbci	r25, 0xFF	; 255
   1663a:	99 23       	and	r25, r25
   1663c:	a9 f0       	breq	.+42     	; 0x16668 <__floatsisf+0x40>
   1663e:	f9 2f       	mov	r31, r25
   16640:	96 e9       	ldi	r25, 0x96	; 150
   16642:	bb 27       	eor	r27, r27
   16644:	93 95       	inc	r25
   16646:	f6 95       	lsr	r31
   16648:	87 95       	ror	r24
   1664a:	77 95       	ror	r23
   1664c:	67 95       	ror	r22
   1664e:	b7 95       	ror	r27
   16650:	f1 11       	cpse	r31, r1
   16652:	f8 cf       	rjmp	.-16     	; 0x16644 <__floatsisf+0x1c>
   16654:	fa f4       	brpl	.+62     	; 0x16694 <__floatsisf+0x6c>
   16656:	bb 0f       	add	r27, r27
   16658:	11 f4       	brne	.+4      	; 0x1665e <__floatsisf+0x36>
   1665a:	60 ff       	sbrs	r22, 0
   1665c:	1b c0       	rjmp	.+54     	; 0x16694 <__floatsisf+0x6c>
   1665e:	6f 5f       	subi	r22, 0xFF	; 255
   16660:	7f 4f       	sbci	r23, 0xFF	; 255
   16662:	8f 4f       	sbci	r24, 0xFF	; 255
   16664:	9f 4f       	sbci	r25, 0xFF	; 255
   16666:	16 c0       	rjmp	.+44     	; 0x16694 <__floatsisf+0x6c>
   16668:	88 23       	and	r24, r24
   1666a:	11 f0       	breq	.+4      	; 0x16670 <__floatsisf+0x48>
   1666c:	96 e9       	ldi	r25, 0x96	; 150
   1666e:	11 c0       	rjmp	.+34     	; 0x16692 <__floatsisf+0x6a>
   16670:	77 23       	and	r23, r23
   16672:	21 f0       	breq	.+8      	; 0x1667c <__floatsisf+0x54>
   16674:	9e e8       	ldi	r25, 0x8E	; 142
   16676:	87 2f       	mov	r24, r23
   16678:	76 2f       	mov	r23, r22
   1667a:	05 c0       	rjmp	.+10     	; 0x16686 <__floatsisf+0x5e>
   1667c:	66 23       	and	r22, r22
   1667e:	71 f0       	breq	.+28     	; 0x1669c <__floatsisf+0x74>
   16680:	96 e8       	ldi	r25, 0x86	; 134
   16682:	86 2f       	mov	r24, r22
   16684:	70 e0       	ldi	r23, 0x00	; 0
   16686:	60 e0       	ldi	r22, 0x00	; 0
   16688:	2a f0       	brmi	.+10     	; 0x16694 <__floatsisf+0x6c>
   1668a:	9a 95       	dec	r25
   1668c:	66 0f       	add	r22, r22
   1668e:	77 1f       	adc	r23, r23
   16690:	88 1f       	adc	r24, r24
   16692:	da f7       	brpl	.-10     	; 0x1668a <__floatsisf+0x62>
   16694:	88 0f       	add	r24, r24
   16696:	96 95       	lsr	r25
   16698:	87 95       	ror	r24
   1669a:	97 f9       	bld	r25, 7
   1669c:	08 95       	ret

0001669e <__fp_cmp>:
__fp_cmp():
   1669e:	99 0f       	add	r25, r25
   166a0:	00 08       	sbc	r0, r0
   166a2:	55 0f       	add	r21, r21
   166a4:	aa 0b       	sbc	r26, r26
   166a6:	e0 e8       	ldi	r30, 0x80	; 128
   166a8:	fe ef       	ldi	r31, 0xFE	; 254
   166aa:	16 16       	cp	r1, r22
   166ac:	17 06       	cpc	r1, r23
   166ae:	e8 07       	cpc	r30, r24
   166b0:	f9 07       	cpc	r31, r25
   166b2:	c0 f0       	brcs	.+48     	; 0x166e4 <__fp_cmp+0x46>
   166b4:	12 16       	cp	r1, r18
   166b6:	13 06       	cpc	r1, r19
   166b8:	e4 07       	cpc	r30, r20
   166ba:	f5 07       	cpc	r31, r21
   166bc:	98 f0       	brcs	.+38     	; 0x166e4 <__fp_cmp+0x46>
   166be:	62 1b       	sub	r22, r18
   166c0:	73 0b       	sbc	r23, r19
   166c2:	84 0b       	sbc	r24, r20
   166c4:	95 0b       	sbc	r25, r21
   166c6:	39 f4       	brne	.+14     	; 0x166d6 <__fp_cmp+0x38>
   166c8:	0a 26       	eor	r0, r26
   166ca:	61 f0       	breq	.+24     	; 0x166e4 <__fp_cmp+0x46>
   166cc:	23 2b       	or	r18, r19
   166ce:	24 2b       	or	r18, r20
   166d0:	25 2b       	or	r18, r21
   166d2:	21 f4       	brne	.+8      	; 0x166dc <__fp_cmp+0x3e>
   166d4:	08 95       	ret
   166d6:	0a 26       	eor	r0, r26
   166d8:	09 f4       	brne	.+2      	; 0x166dc <__fp_cmp+0x3e>
   166da:	a1 40       	sbci	r26, 0x01	; 1
   166dc:	a6 95       	lsr	r26
   166de:	8f ef       	ldi	r24, 0xFF	; 255
   166e0:	81 1d       	adc	r24, r1
   166e2:	81 1d       	adc	r24, r1
   166e4:	08 95       	ret

000166e6 <__mulsf3>:
__mulsf3():
   166e6:	0e 94 86 b3 	call	0x1670c	; 0x1670c <__mulsf3x>
   166ea:	0c 94 f7 b3 	jmp	0x167ee	; 0x167ee <__fp_round>
   166ee:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <__fp_pscA>
   166f2:	38 f0       	brcs	.+14     	; 0x16702 <__mulsf3+0x1c>
   166f4:	0e 94 f0 b3 	call	0x167e0	; 0x167e0 <__fp_pscB>
   166f8:	20 f0       	brcs	.+8      	; 0x16702 <__mulsf3+0x1c>
   166fa:	95 23       	and	r25, r21
   166fc:	11 f0       	breq	.+4      	; 0x16702 <__mulsf3+0x1c>
   166fe:	0c 94 e0 b3 	jmp	0x167c0	; 0x167c0 <__fp_inf>
   16702:	0c 94 e6 b3 	jmp	0x167cc	; 0x167cc <__fp_nan>
   16706:	11 24       	eor	r1, r1
   16708:	0c 94 2b b4 	jmp	0x16856	; 0x16856 <__fp_szero>

0001670c <__mulsf3x>:
__mulsf3x():
   1670c:	0e 94 08 b4 	call	0x16810	; 0x16810 <__fp_split3>
   16710:	70 f3       	brcs	.-36     	; 0x166ee <__mulsf3+0x8>

00016712 <__mulsf3_pse>:
   16712:	95 9f       	mul	r25, r21
   16714:	c1 f3       	breq	.-16     	; 0x16706 <__mulsf3+0x20>
   16716:	95 0f       	add	r25, r21
   16718:	50 e0       	ldi	r21, 0x00	; 0
   1671a:	55 1f       	adc	r21, r21
   1671c:	62 9f       	mul	r22, r18
   1671e:	f0 01       	movw	r30, r0
   16720:	72 9f       	mul	r23, r18
   16722:	bb 27       	eor	r27, r27
   16724:	f0 0d       	add	r31, r0
   16726:	b1 1d       	adc	r27, r1
   16728:	63 9f       	mul	r22, r19
   1672a:	aa 27       	eor	r26, r26
   1672c:	f0 0d       	add	r31, r0
   1672e:	b1 1d       	adc	r27, r1
   16730:	aa 1f       	adc	r26, r26
   16732:	64 9f       	mul	r22, r20
   16734:	66 27       	eor	r22, r22
   16736:	b0 0d       	add	r27, r0
   16738:	a1 1d       	adc	r26, r1
   1673a:	66 1f       	adc	r22, r22
   1673c:	82 9f       	mul	r24, r18
   1673e:	22 27       	eor	r18, r18
   16740:	b0 0d       	add	r27, r0
   16742:	a1 1d       	adc	r26, r1
   16744:	62 1f       	adc	r22, r18
   16746:	73 9f       	mul	r23, r19
   16748:	b0 0d       	add	r27, r0
   1674a:	a1 1d       	adc	r26, r1
   1674c:	62 1f       	adc	r22, r18
   1674e:	83 9f       	mul	r24, r19
   16750:	a0 0d       	add	r26, r0
   16752:	61 1d       	adc	r22, r1
   16754:	22 1f       	adc	r18, r18
   16756:	74 9f       	mul	r23, r20
   16758:	33 27       	eor	r19, r19
   1675a:	a0 0d       	add	r26, r0
   1675c:	61 1d       	adc	r22, r1
   1675e:	23 1f       	adc	r18, r19
   16760:	84 9f       	mul	r24, r20
   16762:	60 0d       	add	r22, r0
   16764:	21 1d       	adc	r18, r1
   16766:	82 2f       	mov	r24, r18
   16768:	76 2f       	mov	r23, r22
   1676a:	6a 2f       	mov	r22, r26
   1676c:	11 24       	eor	r1, r1
   1676e:	9f 57       	subi	r25, 0x7F	; 127
   16770:	50 40       	sbci	r21, 0x00	; 0
   16772:	9a f0       	brmi	.+38     	; 0x1679a <__mulsf3_pse+0x88>
   16774:	f1 f0       	breq	.+60     	; 0x167b2 <__mulsf3_pse+0xa0>
   16776:	88 23       	and	r24, r24
   16778:	4a f0       	brmi	.+18     	; 0x1678c <__mulsf3_pse+0x7a>
   1677a:	ee 0f       	add	r30, r30
   1677c:	ff 1f       	adc	r31, r31
   1677e:	bb 1f       	adc	r27, r27
   16780:	66 1f       	adc	r22, r22
   16782:	77 1f       	adc	r23, r23
   16784:	88 1f       	adc	r24, r24
   16786:	91 50       	subi	r25, 0x01	; 1
   16788:	50 40       	sbci	r21, 0x00	; 0
   1678a:	a9 f7       	brne	.-22     	; 0x16776 <__mulsf3_pse+0x64>
   1678c:	9e 3f       	cpi	r25, 0xFE	; 254
   1678e:	51 05       	cpc	r21, r1
   16790:	80 f0       	brcs	.+32     	; 0x167b2 <__mulsf3_pse+0xa0>
   16792:	0c 94 e0 b3 	jmp	0x167c0	; 0x167c0 <__fp_inf>
   16796:	0c 94 2b b4 	jmp	0x16856	; 0x16856 <__fp_szero>
   1679a:	5f 3f       	cpi	r21, 0xFF	; 255
   1679c:	e4 f3       	brlt	.-8      	; 0x16796 <__mulsf3_pse+0x84>
   1679e:	98 3e       	cpi	r25, 0xE8	; 232
   167a0:	d4 f3       	brlt	.-12     	; 0x16796 <__mulsf3_pse+0x84>
   167a2:	86 95       	lsr	r24
   167a4:	77 95       	ror	r23
   167a6:	67 95       	ror	r22
   167a8:	b7 95       	ror	r27
   167aa:	f7 95       	ror	r31
   167ac:	e7 95       	ror	r30
   167ae:	9f 5f       	subi	r25, 0xFF	; 255
   167b0:	c1 f7       	brne	.-16     	; 0x167a2 <__mulsf3_pse+0x90>
   167b2:	fe 2b       	or	r31, r30
   167b4:	88 0f       	add	r24, r24
   167b6:	91 1d       	adc	r25, r1
   167b8:	96 95       	lsr	r25
   167ba:	87 95       	ror	r24
   167bc:	97 f9       	bld	r25, 7
   167be:	08 95       	ret

000167c0 <__fp_inf>:
   167c0:	97 f9       	bld	r25, 7
   167c2:	9f 67       	ori	r25, 0x7F	; 127
   167c4:	80 e8       	ldi	r24, 0x80	; 128
   167c6:	70 e0       	ldi	r23, 0x00	; 0
   167c8:	60 e0       	ldi	r22, 0x00	; 0
   167ca:	08 95       	ret

000167cc <__fp_nan>:
   167cc:	9f ef       	ldi	r25, 0xFF	; 255
   167ce:	80 ec       	ldi	r24, 0xC0	; 192
   167d0:	08 95       	ret

000167d2 <__fp_pscA>:
   167d2:	00 24       	eor	r0, r0
   167d4:	0a 94       	dec	r0
   167d6:	16 16       	cp	r1, r22
   167d8:	17 06       	cpc	r1, r23
   167da:	18 06       	cpc	r1, r24
   167dc:	09 06       	cpc	r0, r25
__fp_pscA():
   167de:	08 95       	ret

000167e0 <__fp_pscB>:
__fp_pscB():
   167e0:	00 24       	eor	r0, r0
   167e2:	0a 94       	dec	r0
   167e4:	12 16       	cp	r1, r18
   167e6:	13 06       	cpc	r1, r19
   167e8:	14 06       	cpc	r1, r20
   167ea:	05 06       	cpc	r0, r21
   167ec:	08 95       	ret

000167ee <__fp_round>:
__fp_round():
   167ee:	09 2e       	mov	r0, r25
   167f0:	03 94       	inc	r0
   167f2:	00 0c       	add	r0, r0
   167f4:	11 f4       	brne	.+4      	; 0x167fa <__fp_round+0xc>
   167f6:	88 23       	and	r24, r24
   167f8:	52 f0       	brmi	.+20     	; 0x1680e <__fp_round+0x20>
   167fa:	bb 0f       	add	r27, r27
   167fc:	40 f4       	brcc	.+16     	; 0x1680e <__fp_round+0x20>
   167fe:	bf 2b       	or	r27, r31
   16800:	11 f4       	brne	.+4      	; 0x16806 <__fp_round+0x18>
   16802:	60 ff       	sbrs	r22, 0
   16804:	04 c0       	rjmp	.+8      	; 0x1680e <__fp_round+0x20>
   16806:	6f 5f       	subi	r22, 0xFF	; 255
   16808:	7f 4f       	sbci	r23, 0xFF	; 255
   1680a:	8f 4f       	sbci	r24, 0xFF	; 255
   1680c:	9f 4f       	sbci	r25, 0xFF	; 255
   1680e:	08 95       	ret

00016810 <__fp_split3>:
__fp_split3():
   16810:	57 fd       	sbrc	r21, 7
   16812:	90 58       	subi	r25, 0x80	; 128
   16814:	44 0f       	add	r20, r20
   16816:	55 1f       	adc	r21, r21
   16818:	59 f0       	breq	.+22     	; 0x16830 <__fp_splitA+0x10>
   1681a:	5f 3f       	cpi	r21, 0xFF	; 255
   1681c:	71 f0       	breq	.+28     	; 0x1683a <__fp_splitA+0x1a>
   1681e:	47 95       	ror	r20

00016820 <__fp_splitA>:
   16820:	88 0f       	add	r24, r24
   16822:	97 fb       	bst	r25, 7
   16824:	99 1f       	adc	r25, r25
   16826:	61 f0       	breq	.+24     	; 0x16840 <__fp_splitA+0x20>
   16828:	9f 3f       	cpi	r25, 0xFF	; 255
   1682a:	79 f0       	breq	.+30     	; 0x1684a <__fp_splitA+0x2a>
   1682c:	87 95       	ror	r24
   1682e:	08 95       	ret
   16830:	12 16       	cp	r1, r18
   16832:	13 06       	cpc	r1, r19
   16834:	14 06       	cpc	r1, r20
   16836:	55 1f       	adc	r21, r21
   16838:	f2 cf       	rjmp	.-28     	; 0x1681e <__fp_split3+0xe>
   1683a:	46 95       	lsr	r20
   1683c:	f1 df       	rcall	.-30     	; 0x16820 <__fp_splitA>
   1683e:	08 c0       	rjmp	.+16     	; 0x16850 <__fp_splitA+0x30>
   16840:	16 16       	cp	r1, r22
   16842:	17 06       	cpc	r1, r23
   16844:	18 06       	cpc	r1, r24
   16846:	99 1f       	adc	r25, r25
   16848:	f1 cf       	rjmp	.-30     	; 0x1682c <__fp_splitA+0xc>
   1684a:	86 95       	lsr	r24
   1684c:	71 05       	cpc	r23, r1
   1684e:	61 05       	cpc	r22, r1
   16850:	08 94       	sec
   16852:	08 95       	ret

00016854 <__fp_zero>:
__fp_zero():
   16854:	e8 94       	clt

00016856 <__fp_szero>:
   16856:	bb 27       	eor	r27, r27
   16858:	66 27       	eor	r22, r22
   1685a:	77 27       	eor	r23, r23
   1685c:	cb 01       	movw	r24, r22
   1685e:	97 f9       	bld	r25, 7
   16860:	08 95       	ret

00016862 <eeprom_read_byte>:
eeprom_read_byte():
   16862:	f9 99       	sbic	0x1f, 1	; 31
   16864:	fe cf       	rjmp	.-4      	; 0x16862 <eeprom_read_byte>
   16866:	92 bd       	out	0x22, r25	; 34
   16868:	81 bd       	out	0x21, r24	; 33
   1686a:	f8 9a       	sbi	0x1f, 0	; 31
   1686c:	99 27       	eor	r25, r25
   1686e:	80 b5       	in	r24, 0x20	; 32
   16870:	08 95       	ret

00016872 <eeprom_write_byte>:
eeprom_write_byte():
   16872:	26 2f       	mov	r18, r22

00016874 <eeprom_write_r18>:
   16874:	f9 99       	sbic	0x1f, 1	; 31
   16876:	fe cf       	rjmp	.-4      	; 0x16874 <eeprom_write_r18>
   16878:	1f ba       	out	0x1f, r1	; 31
   1687a:	92 bd       	out	0x22, r25	; 34
   1687c:	81 bd       	out	0x21, r24	; 33
   1687e:	20 bd       	out	0x20, r18	; 32
   16880:	0f b6       	in	r0, 0x3f	; 63
   16882:	f8 94       	cli
   16884:	fa 9a       	sbi	0x1f, 2	; 31
   16886:	f9 9a       	sbi	0x1f, 1	; 31
   16888:	0f be       	out	0x3f, r0	; 63
   1688a:	01 96       	adiw	r24, 0x01	; 1
   1688c:	08 95       	ret

0001688e <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
   1688e:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
   16890:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
   16892:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
   16894:	0e 94 c0 b4 	call	0x16980	; 0x16980 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
   16898:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
   1689a:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
   1689c:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
   1689e:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
   168a0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
   168a2:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
   168a4:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
   168a6:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
   168a8:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
   168aa:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
   168ac:	08 95       	ret

000168ae <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
   168ae:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
   168b0:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
   168b2:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
   168b4:	07 c0       	rjmp	.+14     	; 0x168c4 <__udivmodhi4_ep>

000168b6 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
   168b6:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
   168b8:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
   168ba:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
   168bc:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
   168be:	10 f0       	brcs	.+4      	; 0x168c4 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
   168c0:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
   168c2:	b7 0b       	sbc	r27, r23

000168c4 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
   168c4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
   168c6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
   168c8:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
   168ca:	a9 f7       	brne	.-22     	; 0x168b6 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
   168cc:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
   168ce:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
   168d0:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
   168d2:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
   168d4:	08 95       	ret

000168d6 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
   168d6:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
   168d8:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
   168da:	16 f4       	brtc	.+4      	; 0x168e0 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
   168dc:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
   168de:	07 d0       	rcall	.+14     	; 0x168ee <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
   168e0:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
   168e2:	09 d0       	rcall	.+18     	; 0x168f6 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
   168e4:	0e 94 57 b4 	call	0x168ae	; 0x168ae <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
   168e8:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
   168ea:	05 d0       	rcall	.+10     	; 0x168f6 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
   168ec:	3e f4       	brtc	.+14     	; 0x168fc <__divmodhi4_exit>

000168ee <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
   168ee:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
   168f0:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
   168f2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
   168f4:	08 95       	ret

000168f6 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
   168f6:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
   168f8:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
   168fa:	7f 4f       	sbci	r23, 0xFF	; 255

000168fc <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
   168fc:	08 95       	ret

000168fe <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
   168fe:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
   16900:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
   16902:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
   16904:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
   16906:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
   16908:	0d c0       	rjmp	.+26     	; 0x16924 <__udivmodsi4_ep>

0001690a <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
   1690a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
   1690c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
   1690e:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
   16910:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
   16912:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
   16914:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
   16916:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
   16918:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
   1691a:	20 f0       	brcs	.+8      	; 0x16924 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
   1691c:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
   1691e:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
   16920:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
   16922:	f5 0b       	sbc	r31, r21

00016924 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
   16924:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
   16926:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
   16928:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
   1692a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
   1692c:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
   1692e:	69 f7       	brne	.-38     	; 0x1690a <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
   16930:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
   16932:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
   16934:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
   16936:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
   16938:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
   1693a:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
   1693c:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
   1693e:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
   16940:	08 95       	ret

00016942 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
   16942:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
   16944:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
   16946:	1e f4       	brtc	.+6      	; 0x1694e <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
   16948:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
   1694a:	0e 94 b8 b4 	call	0x16970	; 0x16970 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
   1694e:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
   16950:	07 d0       	rcall	.+14     	; 0x16960 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
   16952:	0e 94 7f b4 	call	0x168fe	; 0x168fe <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
   16956:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
   16958:	03 d0       	rcall	.+6      	; 0x16960 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
   1695a:	4e f4       	brtc	.+18     	; 0x1696e <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
   1695c:	0c 94 b8 b4 	jmp	0x16970	; 0x16970 <__negsi2>

00016960 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
   16960:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
   16962:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
   16964:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
   16966:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
   16968:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
   1696a:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
   1696c:	5f 4f       	sbci	r21, 0xFF	; 255

0001696e <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
   1696e:	08 95       	ret

00016970 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
   16970:	90 95       	com	r25
   16972:	80 95       	com	r24
   16974:	70 95       	com	r23
   16976:	61 95       	neg	r22
   16978:	7f 4f       	sbci	r23, 0xFF	; 255
   1697a:	8f 4f       	sbci	r24, 0xFF	; 255
   1697c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
   1697e:	08 95       	ret

00016980 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
   16980:	0e 94 cb b4 	call	0x16996	; 0x16996 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
   16984:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
   16986:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
   16988:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
   1698a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
   1698c:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
   1698e:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
   16990:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
   16992:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
   16994:	08 95       	ret

00016996 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
   16996:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
   16998:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
   1699a:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
   1699c:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
   1699e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
   169a0:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
   169a2:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
   169a4:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
   169a6:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
   169a8:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
   169aa:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
   169ac:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
   169ae:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
   169b0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
   169b2:	08 95       	ret

000169b4 <__subsf3>:
__subsf3():
   169b4:	50 58       	subi	r21, 0x80	; 128

000169b6 <__addsf3>:
   169b6:	bb 27       	eor	r27, r27
   169b8:	aa 27       	eor	r26, r26
   169ba:	0e 94 f2 b4 	call	0x169e4	; 0x169e4 <__addsf3x>
   169be:	0c 94 f7 b3 	jmp	0x167ee	; 0x167ee <__fp_round>
__addsf3():
   169c2:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <__fp_pscA>
   169c6:	38 f0       	brcs	.+14     	; 0x169d6 <__addsf3+0x20>
   169c8:	0e 94 f0 b3 	call	0x167e0	; 0x167e0 <__fp_pscB>
   169cc:	20 f0       	brcs	.+8      	; 0x169d6 <__addsf3+0x20>
   169ce:	39 f4       	brne	.+14     	; 0x169de <__addsf3+0x28>
   169d0:	9f 3f       	cpi	r25, 0xFF	; 255
   169d2:	19 f4       	brne	.+6      	; 0x169da <__addsf3+0x24>
   169d4:	26 f4       	brtc	.+8      	; 0x169de <__addsf3+0x28>
   169d6:	0c 94 e6 b3 	jmp	0x167cc	; 0x167cc <__fp_nan>
   169da:	0e f4       	brtc	.+2      	; 0x169de <__addsf3+0x28>
   169dc:	e0 95       	com	r30
   169de:	e7 fb       	bst	r30, 7
   169e0:	0c 94 e0 b3 	jmp	0x167c0	; 0x167c0 <__fp_inf>

000169e4 <__addsf3x>:
__addsf3x():
   169e4:	e9 2f       	mov	r30, r25
   169e6:	0e 94 08 b4 	call	0x16810	; 0x16810 <__fp_split3>
   169ea:	58 f3       	brcs	.-42     	; 0x169c2 <__addsf3+0xc>
   169ec:	ba 17       	cp	r27, r26
   169ee:	62 07       	cpc	r22, r18
   169f0:	73 07       	cpc	r23, r19
   169f2:	84 07       	cpc	r24, r20
   169f4:	95 07       	cpc	r25, r21
   169f6:	20 f0       	brcs	.+8      	; 0x16a00 <__addsf3x+0x1c>
   169f8:	79 f4       	brne	.+30     	; 0x16a18 <__addsf3x+0x34>
   169fa:	a6 f5       	brtc	.+104    	; 0x16a64 <__addsf3x+0x80>
   169fc:	0c 94 2a b4 	jmp	0x16854	; 0x16854 <__fp_zero>
   16a00:	0e f4       	brtc	.+2      	; 0x16a04 <__addsf3x+0x20>
   16a02:	e0 95       	com	r30
   16a04:	0b 2e       	mov	r0, r27
   16a06:	ba 2f       	mov	r27, r26
   16a08:	a0 2d       	mov	r26, r0
   16a0a:	0b 01       	movw	r0, r22
   16a0c:	b9 01       	movw	r22, r18
   16a0e:	90 01       	movw	r18, r0
   16a10:	0c 01       	movw	r0, r24
   16a12:	ca 01       	movw	r24, r20
   16a14:	a0 01       	movw	r20, r0
   16a16:	11 24       	eor	r1, r1
   16a18:	ff 27       	eor	r31, r31
   16a1a:	59 1b       	sub	r21, r25
   16a1c:	99 f0       	breq	.+38     	; 0x16a44 <__addsf3x+0x60>
   16a1e:	59 3f       	cpi	r21, 0xF9	; 249
   16a20:	50 f4       	brcc	.+20     	; 0x16a36 <__addsf3x+0x52>
   16a22:	50 3e       	cpi	r21, 0xE0	; 224
   16a24:	68 f1       	brcs	.+90     	; 0x16a80 <__addsf3x+0x9c>
   16a26:	1a 16       	cp	r1, r26
   16a28:	f0 40       	sbci	r31, 0x00	; 0
   16a2a:	a2 2f       	mov	r26, r18
   16a2c:	23 2f       	mov	r18, r19
   16a2e:	34 2f       	mov	r19, r20
   16a30:	44 27       	eor	r20, r20
   16a32:	58 5f       	subi	r21, 0xF8	; 248
   16a34:	f3 cf       	rjmp	.-26     	; 0x16a1c <__addsf3x+0x38>
   16a36:	46 95       	lsr	r20
   16a38:	37 95       	ror	r19
   16a3a:	27 95       	ror	r18
   16a3c:	a7 95       	ror	r26
   16a3e:	f0 40       	sbci	r31, 0x00	; 0
   16a40:	53 95       	inc	r21
   16a42:	c9 f7       	brne	.-14     	; 0x16a36 <__addsf3x+0x52>
   16a44:	7e f4       	brtc	.+30     	; 0x16a64 <__addsf3x+0x80>
   16a46:	1f 16       	cp	r1, r31
   16a48:	ba 0b       	sbc	r27, r26
   16a4a:	62 0b       	sbc	r22, r18
   16a4c:	73 0b       	sbc	r23, r19
   16a4e:	84 0b       	sbc	r24, r20
   16a50:	ba f0       	brmi	.+46     	; 0x16a80 <__addsf3x+0x9c>
   16a52:	91 50       	subi	r25, 0x01	; 1
   16a54:	a1 f0       	breq	.+40     	; 0x16a7e <__addsf3x+0x9a>
   16a56:	ff 0f       	add	r31, r31
   16a58:	bb 1f       	adc	r27, r27
   16a5a:	66 1f       	adc	r22, r22
   16a5c:	77 1f       	adc	r23, r23
   16a5e:	88 1f       	adc	r24, r24
   16a60:	c2 f7       	brpl	.-16     	; 0x16a52 <__addsf3x+0x6e>
   16a62:	0e c0       	rjmp	.+28     	; 0x16a80 <__addsf3x+0x9c>
   16a64:	ba 0f       	add	r27, r26
   16a66:	62 1f       	adc	r22, r18
   16a68:	73 1f       	adc	r23, r19
   16a6a:	84 1f       	adc	r24, r20
   16a6c:	48 f4       	brcc	.+18     	; 0x16a80 <__addsf3x+0x9c>
   16a6e:	87 95       	ror	r24
   16a70:	77 95       	ror	r23
   16a72:	67 95       	ror	r22
   16a74:	b7 95       	ror	r27
   16a76:	f7 95       	ror	r31
   16a78:	9e 3f       	cpi	r25, 0xFE	; 254
   16a7a:	08 f0       	brcs	.+2      	; 0x16a7e <__addsf3x+0x9a>
   16a7c:	b0 cf       	rjmp	.-160    	; 0x169de <__addsf3+0x28>
   16a7e:	93 95       	inc	r25
   16a80:	88 0f       	add	r24, r24
   16a82:	08 f0       	brcs	.+2      	; 0x16a86 <__addsf3x+0xa2>
   16a84:	99 27       	eor	r25, r25
   16a86:	ee 0f       	add	r30, r30
   16a88:	97 95       	ror	r25
   16a8a:	87 95       	ror	r24
   16a8c:	08 95       	ret

00016a8e <__divsf3>:
   16a8e:	0e 94 5b b5 	call	0x16ab6	; 0x16ab6 <__divsf3x>
   16a92:	0c 94 f7 b3 	jmp	0x167ee	; 0x167ee <__fp_round>
   16a96:	0e 94 f0 b3 	call	0x167e0	; 0x167e0 <__fp_pscB>
   16a9a:	58 f0       	brcs	.+22     	; 0x16ab2 <__divsf3+0x24>
   16a9c:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <__fp_pscA>
   16aa0:	40 f0       	brcs	.+16     	; 0x16ab2 <__divsf3+0x24>
   16aa2:	29 f4       	brne	.+10     	; 0x16aae <__divsf3+0x20>
   16aa4:	5f 3f       	cpi	r21, 0xFF	; 255
   16aa6:	29 f0       	breq	.+10     	; 0x16ab2 <__divsf3+0x24>
   16aa8:	0c 94 e0 b3 	jmp	0x167c0	; 0x167c0 <__fp_inf>
   16aac:	51 11       	cpse	r21, r1
   16aae:	0c 94 2b b4 	jmp	0x16856	; 0x16856 <__fp_szero>
__divsf3():
   16ab2:	0c 94 e6 b3 	jmp	0x167cc	; 0x167cc <__fp_nan>

00016ab6 <__divsf3x>:
__divsf3x():
   16ab6:	0e 94 08 b4 	call	0x16810	; 0x16810 <__fp_split3>
   16aba:	68 f3       	brcs	.-38     	; 0x16a96 <__divsf3+0x8>

00016abc <__divsf3_pse>:
   16abc:	99 23       	and	r25, r25
   16abe:	b1 f3       	breq	.-20     	; 0x16aac <__divsf3+0x1e>
   16ac0:	55 23       	and	r21, r21
   16ac2:	91 f3       	breq	.-28     	; 0x16aa8 <__divsf3+0x1a>
   16ac4:	95 1b       	sub	r25, r21
   16ac6:	55 0b       	sbc	r21, r21
   16ac8:	bb 27       	eor	r27, r27
   16aca:	aa 27       	eor	r26, r26
   16acc:	62 17       	cp	r22, r18
   16ace:	73 07       	cpc	r23, r19
   16ad0:	84 07       	cpc	r24, r20
   16ad2:	38 f0       	brcs	.+14     	; 0x16ae2 <__divsf3_pse+0x26>
   16ad4:	9f 5f       	subi	r25, 0xFF	; 255
   16ad6:	5f 4f       	sbci	r21, 0xFF	; 255
   16ad8:	22 0f       	add	r18, r18
   16ada:	33 1f       	adc	r19, r19
   16adc:	44 1f       	adc	r20, r20
   16ade:	aa 1f       	adc	r26, r26
   16ae0:	a9 f3       	breq	.-22     	; 0x16acc <__divsf3_pse+0x10>
   16ae2:	35 d0       	rcall	.+106    	; 0x16b4e <__divsf3_pse+0x92>
   16ae4:	0e 2e       	mov	r0, r30
   16ae6:	3a f0       	brmi	.+14     	; 0x16af6 <__divsf3_pse+0x3a>
   16ae8:	e0 e8       	ldi	r30, 0x80	; 128
   16aea:	32 d0       	rcall	.+100    	; 0x16b50 <__divsf3_pse+0x94>
   16aec:	91 50       	subi	r25, 0x01	; 1
   16aee:	50 40       	sbci	r21, 0x00	; 0
   16af0:	e6 95       	lsr	r30
   16af2:	00 1c       	adc	r0, r0
   16af4:	ca f7       	brpl	.-14     	; 0x16ae8 <__divsf3_pse+0x2c>
   16af6:	2b d0       	rcall	.+86     	; 0x16b4e <__divsf3_pse+0x92>
   16af8:	fe 2f       	mov	r31, r30
   16afa:	29 d0       	rcall	.+82     	; 0x16b4e <__divsf3_pse+0x92>
   16afc:	66 0f       	add	r22, r22
   16afe:	77 1f       	adc	r23, r23
   16b00:	88 1f       	adc	r24, r24
   16b02:	bb 1f       	adc	r27, r27
   16b04:	26 17       	cp	r18, r22
   16b06:	37 07       	cpc	r19, r23
   16b08:	48 07       	cpc	r20, r24
   16b0a:	ab 07       	cpc	r26, r27
   16b0c:	b0 e8       	ldi	r27, 0x80	; 128
   16b0e:	09 f0       	breq	.+2      	; 0x16b12 <__divsf3_pse+0x56>
   16b10:	bb 0b       	sbc	r27, r27
   16b12:	80 2d       	mov	r24, r0
   16b14:	bf 01       	movw	r22, r30
   16b16:	ff 27       	eor	r31, r31
   16b18:	93 58       	subi	r25, 0x83	; 131
   16b1a:	5f 4f       	sbci	r21, 0xFF	; 255
   16b1c:	3a f0       	brmi	.+14     	; 0x16b2c <__divsf3_pse+0x70>
   16b1e:	9e 3f       	cpi	r25, 0xFE	; 254
   16b20:	51 05       	cpc	r21, r1
   16b22:	78 f0       	brcs	.+30     	; 0x16b42 <__divsf3_pse+0x86>
   16b24:	0c 94 e0 b3 	jmp	0x167c0	; 0x167c0 <__fp_inf>
   16b28:	0c 94 2b b4 	jmp	0x16856	; 0x16856 <__fp_szero>
   16b2c:	5f 3f       	cpi	r21, 0xFF	; 255
   16b2e:	e4 f3       	brlt	.-8      	; 0x16b28 <__divsf3_pse+0x6c>
   16b30:	98 3e       	cpi	r25, 0xE8	; 232
   16b32:	d4 f3       	brlt	.-12     	; 0x16b28 <__divsf3_pse+0x6c>
   16b34:	86 95       	lsr	r24
   16b36:	77 95       	ror	r23
   16b38:	67 95       	ror	r22
   16b3a:	b7 95       	ror	r27
   16b3c:	f7 95       	ror	r31
   16b3e:	9f 5f       	subi	r25, 0xFF	; 255
   16b40:	c9 f7       	brne	.-14     	; 0x16b34 <__divsf3_pse+0x78>
   16b42:	88 0f       	add	r24, r24
   16b44:	91 1d       	adc	r25, r1
   16b46:	96 95       	lsr	r25
   16b48:	87 95       	ror	r24
   16b4a:	97 f9       	bld	r25, 7
   16b4c:	08 95       	ret
   16b4e:	e1 e0       	ldi	r30, 0x01	; 1
   16b50:	66 0f       	add	r22, r22
   16b52:	77 1f       	adc	r23, r23
   16b54:	88 1f       	adc	r24, r24
   16b56:	bb 1f       	adc	r27, r27
   16b58:	62 17       	cp	r22, r18
   16b5a:	73 07       	cpc	r23, r19
   16b5c:	84 07       	cpc	r24, r20
   16b5e:	ba 07       	cpc	r27, r26
   16b60:	20 f0       	brcs	.+8      	; 0x16b6a <__divsf3_pse+0xae>
   16b62:	62 1b       	sub	r22, r18
   16b64:	73 0b       	sbc	r23, r19
   16b66:	84 0b       	sbc	r24, r20
   16b68:	ba 0b       	sbc	r27, r26
   16b6a:	ee 1f       	adc	r30, r30
   16b6c:	88 f7       	brcc	.-30     	; 0x16b50 <__divsf3_pse+0x94>
   16b6e:	e0 95       	com	r30
   16b70:	08 95       	ret

00016b72 <__fixsfsi>:
   16b72:	0e 94 c0 b5 	call	0x16b80	; 0x16b80 <__fixunssfsi>
   16b76:	68 94       	set
   16b78:	b1 11       	cpse	r27, r1
   16b7a:	0c 94 2b b4 	jmp	0x16856	; 0x16856 <__fp_szero>
   16b7e:	08 95       	ret

00016b80 <__fixunssfsi>:
   16b80:	0e 94 10 b4 	call	0x16820	; 0x16820 <__fp_splitA>
   16b84:	88 f0       	brcs	.+34     	; 0x16ba8 <__fixunssfsi+0x28>
   16b86:	9f 57       	subi	r25, 0x7F	; 127
   16b88:	98 f0       	brcs	.+38     	; 0x16bb0 <__fixunssfsi+0x30>
   16b8a:	b9 2f       	mov	r27, r25
   16b8c:	99 27       	eor	r25, r25
   16b8e:	b7 51       	subi	r27, 0x17	; 23
   16b90:	b0 f0       	brcs	.+44     	; 0x16bbe <__fixunssfsi+0x3e>
__fixunssfsi():
   16b92:	e1 f0       	breq	.+56     	; 0x16bcc <__fixunssfsi+0x4c>
   16b94:	66 0f       	add	r22, r22
   16b96:	77 1f       	adc	r23, r23
   16b98:	88 1f       	adc	r24, r24
   16b9a:	99 1f       	adc	r25, r25
   16b9c:	1a f0       	brmi	.+6      	; 0x16ba4 <__fixunssfsi+0x24>
   16b9e:	ba 95       	dec	r27
   16ba0:	c9 f7       	brne	.-14     	; 0x16b94 <__fixunssfsi+0x14>
   16ba2:	14 c0       	rjmp	.+40     	; 0x16bcc <__fixunssfsi+0x4c>
   16ba4:	b1 30       	cpi	r27, 0x01	; 1
   16ba6:	91 f0       	breq	.+36     	; 0x16bcc <__fixunssfsi+0x4c>
   16ba8:	0e 94 2a b4 	call	0x16854	; 0x16854 <__fp_zero>
   16bac:	b1 e0       	ldi	r27, 0x01	; 1
   16bae:	08 95       	ret
   16bb0:	0c 94 2a b4 	jmp	0x16854	; 0x16854 <__fp_zero>
   16bb4:	67 2f       	mov	r22, r23
   16bb6:	78 2f       	mov	r23, r24
   16bb8:	88 27       	eor	r24, r24
   16bba:	b8 5f       	subi	r27, 0xF8	; 248
   16bbc:	39 f0       	breq	.+14     	; 0x16bcc <__fixunssfsi+0x4c>
   16bbe:	b9 3f       	cpi	r27, 0xF9	; 249
   16bc0:	cc f3       	brlt	.-14     	; 0x16bb4 <__fixunssfsi+0x34>
   16bc2:	86 95       	lsr	r24
   16bc4:	77 95       	ror	r23
   16bc6:	67 95       	ror	r22
   16bc8:	b3 95       	inc	r27
   16bca:	d9 f7       	brne	.-10     	; 0x16bc2 <__fixunssfsi+0x42>
   16bcc:	3e f4       	brtc	.+14     	; 0x16bdc <__fixunssfsi+0x5c>
   16bce:	90 95       	com	r25
   16bd0:	80 95       	com	r24
   16bd2:	70 95       	com	r23
   16bd4:	61 95       	neg	r22
   16bd6:	7f 4f       	sbci	r23, 0xFF	; 255
   16bd8:	8f 4f       	sbci	r24, 0xFF	; 255
   16bda:	9f 4f       	sbci	r25, 0xFF	; 255
   16bdc:	08 95       	ret

00016bde <__gesf2>:
__gesf2():
   16bde:	0e 94 4f b3 	call	0x1669e	; 0x1669e <__fp_cmp>
   16be2:	08 f4       	brcc	.+2      	; 0x16be6 <__gesf2+0x8>
   16be4:	8f ef       	ldi	r24, 0xFF	; 255
   16be6:	08 95       	ret

00016be8 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
   16be8:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
   16bea:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
   16bec:	04 c0       	rjmp	.+8      	; 0x16bf6 <__udivmodqi4_ep>

00016bee <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
   16bee:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
   16bf0:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
   16bf2:	08 f0       	brcs	.+2      	; 0x16bf6 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
   16bf4:	96 1b       	sub	r25, r22

00016bf6 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
   16bf6:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
   16bf8:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
   16bfa:	c9 f7       	brne	.-14     	; 0x16bee <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
   16bfc:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
   16bfe:	08 95       	ret

00016c00 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
   16c00:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
   16c02:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
   16c04:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
   16c06:	8b bf       	out	0x3b, r24	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
   16c08:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
   16c0a:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
   16c0c:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
   16c0e:	19 94       	eijmp

00016c10 <realloc>:
realloc():
   16c10:	4f 92       	push	r4
   16c12:	5f 92       	push	r5
   16c14:	6f 92       	push	r6
   16c16:	7f 92       	push	r7
   16c18:	8f 92       	push	r8
   16c1a:	9f 92       	push	r9
   16c1c:	af 92       	push	r10
   16c1e:	bf 92       	push	r11
   16c20:	cf 92       	push	r12
   16c22:	df 92       	push	r13
   16c24:	ef 92       	push	r14
   16c26:	ff 92       	push	r15
   16c28:	0f 93       	push	r16
   16c2a:	1f 93       	push	r17
   16c2c:	cf 93       	push	r28
   16c2e:	df 93       	push	r29
   16c30:	8c 01       	movw	r16, r24
   16c32:	00 97       	sbiw	r24, 0x00	; 0
   16c34:	99 f4       	brne	.+38     	; 0x16c5c <realloc+0x4c>
   16c36:	cb 01       	movw	r24, r22
   16c38:	df 91       	pop	r29
   16c3a:	cf 91       	pop	r28
   16c3c:	1f 91       	pop	r17
   16c3e:	0f 91       	pop	r16
   16c40:	ff 90       	pop	r15
   16c42:	ef 90       	pop	r14
   16c44:	df 90       	pop	r13
   16c46:	cf 90       	pop	r12
   16c48:	bf 90       	pop	r11
   16c4a:	af 90       	pop	r10
   16c4c:	9f 90       	pop	r9
   16c4e:	8f 90       	pop	r8
   16c50:	7f 90       	pop	r7
   16c52:	6f 90       	pop	r6
   16c54:	5f 90       	pop	r5
   16c56:	4f 90       	pop	r4
   16c58:	0c 94 dc ae 	jmp	0x15db8	; 0x15db8 <malloc>
   16c5c:	fc 01       	movw	r30, r24
   16c5e:	e6 0f       	add	r30, r22
   16c60:	f7 1f       	adc	r31, r23
   16c62:	9c 01       	movw	r18, r24
   16c64:	22 50       	subi	r18, 0x02	; 2
   16c66:	31 09       	sbc	r19, r1
   16c68:	e2 17       	cp	r30, r18
   16c6a:	f3 07       	cpc	r31, r19
   16c6c:	08 f4       	brcc	.+2      	; 0x16c70 <realloc+0x60>
   16c6e:	ae c0       	rjmp	.+348    	; 0x16dcc <realloc+0x1bc>
   16c70:	d9 01       	movw	r26, r18
   16c72:	cd 91       	ld	r28, X+
   16c74:	dc 91       	ld	r29, X
   16c76:	11 97       	sbiw	r26, 0x01	; 1
   16c78:	c6 17       	cp	r28, r22
   16c7a:	d7 07       	cpc	r29, r23
   16c7c:	20 f1       	brcs	.+72     	; 0x16cc6 <realloc+0xb6>
   16c7e:	c5 30       	cpi	r28, 0x05	; 5
   16c80:	d1 05       	cpc	r29, r1
   16c82:	78 f0       	brcs	.+30     	; 0x16ca2 <realloc+0x92>
   16c84:	ce 01       	movw	r24, r28
   16c86:	04 97       	sbiw	r24, 0x04	; 4
   16c88:	86 17       	cp	r24, r22
   16c8a:	97 07       	cpc	r25, r23
   16c8c:	50 f0       	brcs	.+20     	; 0x16ca2 <realloc+0x92>
   16c8e:	c6 1b       	sub	r28, r22
   16c90:	d7 0b       	sbc	r29, r23
   16c92:	22 97       	sbiw	r28, 0x02	; 2
   16c94:	c1 93       	st	Z+, r28
   16c96:	d1 93       	st	Z+, r29
   16c98:	6d 93       	st	X+, r22
   16c9a:	7c 93       	st	X, r23
   16c9c:	cf 01       	movw	r24, r30
   16c9e:	0e 94 78 af 	call	0x15ef0	; 0x15ef0 <free>
   16ca2:	c8 01       	movw	r24, r16
   16ca4:	df 91       	pop	r29
   16ca6:	cf 91       	pop	r28
   16ca8:	1f 91       	pop	r17
   16caa:	0f 91       	pop	r16
   16cac:	ff 90       	pop	r15
   16cae:	ef 90       	pop	r14
   16cb0:	df 90       	pop	r13
   16cb2:	cf 90       	pop	r12
   16cb4:	bf 90       	pop	r11
   16cb6:	af 90       	pop	r10
   16cb8:	9f 90       	pop	r9
   16cba:	8f 90       	pop	r8
   16cbc:	7f 90       	pop	r7
   16cbe:	6f 90       	pop	r6
   16cc0:	5f 90       	pop	r5
   16cc2:	4f 90       	pop	r4
   16cc4:	08 95       	ret
   16cc6:	5b 01       	movw	r10, r22
   16cc8:	ac 1a       	sub	r10, r28
   16cca:	bd 0a       	sbc	r11, r29
   16ccc:	4c 01       	movw	r8, r24
   16cce:	8c 0e       	add	r8, r28
   16cd0:	9d 1e       	adc	r9, r29
   16cd2:	a0 91 3b 13 	lds	r26, 0x133B	; 0x80133b <__flp>
   16cd6:	b0 91 3c 13 	lds	r27, 0x133C	; 0x80133c <__flp+0x1>
   16cda:	51 2c       	mov	r5, r1
   16cdc:	41 2c       	mov	r4, r1
   16cde:	f1 2c       	mov	r15, r1
   16ce0:	e1 2c       	mov	r14, r1
   16ce2:	10 97       	sbiw	r26, 0x00	; 0
   16ce4:	31 f5       	brne	.+76     	; 0x16d32 <realloc+0x122>
   16ce6:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <__brkval>
   16cea:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <__brkval+0x1>
   16cee:	88 15       	cp	r24, r8
   16cf0:	99 05       	cpc	r25, r9
   16cf2:	09 f0       	breq	.+2      	; 0x16cf6 <realloc+0xe6>
   16cf4:	5c c0       	rjmp	.+184    	; 0x16dae <realloc+0x19e>
   16cf6:	46 16       	cp	r4, r22
   16cf8:	57 06       	cpc	r5, r23
   16cfa:	08 f0       	brcs	.+2      	; 0x16cfe <realloc+0xee>
   16cfc:	58 c0       	rjmp	.+176    	; 0x16dae <realloc+0x19e>
   16cfe:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__malloc_heap_end>
   16d02:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__malloc_heap_end+0x1>
   16d06:	00 97       	sbiw	r24, 0x00	; 0
   16d08:	41 f4       	brne	.+16     	; 0x16d1a <realloc+0x10a>
   16d0a:	8d b7       	in	r24, 0x3d	; 61
   16d0c:	9e b7       	in	r25, 0x3e	; 62
   16d0e:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <__malloc_margin>
   16d12:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <__malloc_margin+0x1>
   16d16:	84 1b       	sub	r24, r20
   16d18:	95 0b       	sbc	r25, r21
   16d1a:	e8 17       	cp	r30, r24
   16d1c:	f9 07       	cpc	r31, r25
   16d1e:	08 f0       	brcs	.+2      	; 0x16d22 <realloc+0x112>
   16d20:	55 c0       	rjmp	.+170    	; 0x16dcc <realloc+0x1bc>
   16d22:	f0 93 3a 13 	sts	0x133A, r31	; 0x80133a <__brkval+0x1>
   16d26:	e0 93 39 13 	sts	0x1339, r30	; 0x801339 <__brkval>
   16d2a:	f9 01       	movw	r30, r18
   16d2c:	71 83       	std	Z+1, r23	; 0x01
   16d2e:	60 83       	st	Z, r22
   16d30:	b8 cf       	rjmp	.-144    	; 0x16ca2 <realloc+0x92>
   16d32:	8d 91       	ld	r24, X+
   16d34:	9c 91       	ld	r25, X
   16d36:	11 97       	sbiw	r26, 0x01	; 1
   16d38:	12 96       	adiw	r26, 0x02	; 2
   16d3a:	6c 90       	ld	r6, X
   16d3c:	12 97       	sbiw	r26, 0x02	; 2
   16d3e:	13 96       	adiw	r26, 0x03	; 3
   16d40:	7c 90       	ld	r7, X
   16d42:	13 97       	sbiw	r26, 0x03	; 3
   16d44:	a8 15       	cp	r26, r8
   16d46:	b9 05       	cpc	r27, r9
   16d48:	59 f5       	brne	.+86     	; 0x16da0 <realloc+0x190>
   16d4a:	6c 01       	movw	r12, r24
   16d4c:	42 e0       	ldi	r20, 0x02	; 2
   16d4e:	c4 0e       	add	r12, r20
   16d50:	d1 1c       	adc	r13, r1
   16d52:	ca 14       	cp	r12, r10
   16d54:	db 04       	cpc	r13, r11
   16d56:	20 f1       	brcs	.+72     	; 0x16da0 <realloc+0x190>
   16d58:	ac 01       	movw	r20, r24
   16d5a:	4a 19       	sub	r20, r10
   16d5c:	5b 09       	sbc	r21, r11
   16d5e:	da 01       	movw	r26, r20
   16d60:	12 96       	adiw	r26, 0x02	; 2
   16d62:	15 97       	sbiw	r26, 0x05	; 5
   16d64:	80 f0       	brcs	.+32     	; 0x16d86 <realloc+0x176>
   16d66:	62 82       	std	Z+2, r6	; 0x02
   16d68:	73 82       	std	Z+3, r7	; 0x03
   16d6a:	51 83       	std	Z+1, r21	; 0x01
   16d6c:	40 83       	st	Z, r20
   16d6e:	d9 01       	movw	r26, r18
   16d70:	6d 93       	st	X+, r22
   16d72:	7c 93       	st	X, r23
   16d74:	e1 14       	cp	r14, r1
   16d76:	f1 04       	cpc	r15, r1
   16d78:	71 f0       	breq	.+28     	; 0x16d96 <realloc+0x186>
   16d7a:	d7 01       	movw	r26, r14
   16d7c:	13 96       	adiw	r26, 0x03	; 3
   16d7e:	fc 93       	st	X, r31
   16d80:	ee 93       	st	-X, r30
   16d82:	12 97       	sbiw	r26, 0x02	; 2
   16d84:	8e cf       	rjmp	.-228    	; 0x16ca2 <realloc+0x92>
   16d86:	22 96       	adiw	r28, 0x02	; 2
   16d88:	8c 0f       	add	r24, r28
   16d8a:	9d 1f       	adc	r25, r29
   16d8c:	f9 01       	movw	r30, r18
   16d8e:	91 83       	std	Z+1, r25	; 0x01
   16d90:	80 83       	st	Z, r24
   16d92:	f3 01       	movw	r30, r6
   16d94:	ef cf       	rjmp	.-34     	; 0x16d74 <realloc+0x164>
   16d96:	f0 93 3c 13 	sts	0x133C, r31	; 0x80133c <__flp+0x1>
   16d9a:	e0 93 3b 13 	sts	0x133B, r30	; 0x80133b <__flp>
   16d9e:	81 cf       	rjmp	.-254    	; 0x16ca2 <realloc+0x92>
   16da0:	48 16       	cp	r4, r24
   16da2:	59 06       	cpc	r5, r25
   16da4:	08 f4       	brcc	.+2      	; 0x16da8 <realloc+0x198>
   16da6:	2c 01       	movw	r4, r24
   16da8:	7d 01       	movw	r14, r26
   16daa:	d3 01       	movw	r26, r6
   16dac:	9a cf       	rjmp	.-204    	; 0x16ce2 <realloc+0xd2>
   16dae:	cb 01       	movw	r24, r22
   16db0:	0e 94 dc ae 	call	0x15db8	; 0x15db8 <malloc>
   16db4:	7c 01       	movw	r14, r24
   16db6:	00 97       	sbiw	r24, 0x00	; 0
   16db8:	49 f0       	breq	.+18     	; 0x16dcc <realloc+0x1bc>
   16dba:	ae 01       	movw	r20, r28
   16dbc:	b8 01       	movw	r22, r16
   16dbe:	0e 94 ee b6 	call	0x16ddc	; 0x16ddc <memcpy>
   16dc2:	c8 01       	movw	r24, r16
   16dc4:	0e 94 78 af 	call	0x15ef0	; 0x15ef0 <free>
   16dc8:	87 01       	movw	r16, r14
   16dca:	6b cf       	rjmp	.-298    	; 0x16ca2 <realloc+0x92>
   16dcc:	10 e0       	ldi	r17, 0x00	; 0
   16dce:	00 e0       	ldi	r16, 0x00	; 0
   16dd0:	68 cf       	rjmp	.-304    	; 0x16ca2 <realloc+0x92>

00016dd2 <abort>:
abort():
   16dd2:	81 e0       	ldi	r24, 0x01	; 1
   16dd4:	90 e0       	ldi	r25, 0x00	; 0
   16dd6:	f8 94       	cli
   16dd8:	0c 94 a9 b7 	jmp	0x16f52	; 0x16f52 <_exit>

00016ddc <memcpy>:
memcpy():
   16ddc:	fb 01       	movw	r30, r22
   16dde:	dc 01       	movw	r26, r24
   16de0:	02 c0       	rjmp	.+4      	; 0x16de6 <memcpy+0xa>
   16de2:	01 90       	ld	r0, Z+
   16de4:	0d 92       	st	X+, r0
   16de6:	41 50       	subi	r20, 0x01	; 1
   16de8:	50 40       	sbci	r21, 0x00	; 0
   16dea:	d8 f7       	brcc	.-10     	; 0x16de2 <memcpy+0x6>
   16dec:	08 95       	ret

00016dee <strcat>:
strcat():
   16dee:	fb 01       	movw	r30, r22
   16df0:	dc 01       	movw	r26, r24
   16df2:	0d 90       	ld	r0, X+
   16df4:	00 20       	and	r0, r0
   16df6:	e9 f7       	brne	.-6      	; 0x16df2 <strcat+0x4>
   16df8:	11 97       	sbiw	r26, 0x01	; 1
   16dfa:	01 90       	ld	r0, Z+
   16dfc:	0d 92       	st	X+, r0
   16dfe:	00 20       	and	r0, r0
   16e00:	e1 f7       	brne	.-8      	; 0x16dfa <strcat+0xc>
   16e02:	08 95       	ret

00016e04 <strchr>:
strchr():
   16e04:	fc 01       	movw	r30, r24
   16e06:	81 91       	ld	r24, Z+
   16e08:	86 17       	cp	r24, r22
   16e0a:	21 f0       	breq	.+8      	; 0x16e14 <strchr+0x10>
   16e0c:	88 23       	and	r24, r24
   16e0e:	d9 f7       	brne	.-10     	; 0x16e06 <strchr+0x2>
   16e10:	99 27       	eor	r25, r25
   16e12:	08 95       	ret
   16e14:	31 97       	sbiw	r30, 0x01	; 1
   16e16:	cf 01       	movw	r24, r30
   16e18:	08 95       	ret

00016e1a <strcmp>:
strcmp():
   16e1a:	fb 01       	movw	r30, r22
   16e1c:	dc 01       	movw	r26, r24
   16e1e:	8d 91       	ld	r24, X+
   16e20:	01 90       	ld	r0, Z+
   16e22:	80 19       	sub	r24, r0
   16e24:	01 10       	cpse	r0, r1
   16e26:	d9 f3       	breq	.-10     	; 0x16e1e <strcmp+0x4>
   16e28:	99 0b       	sbc	r25, r25
   16e2a:	08 95       	ret

00016e2c <strcpy>:
strcpy():
   16e2c:	fb 01       	movw	r30, r22
   16e2e:	dc 01       	movw	r26, r24
   16e30:	01 90       	ld	r0, Z+
   16e32:	0d 92       	st	X+, r0
   16e34:	00 20       	and	r0, r0
   16e36:	e1 f7       	brne	.-8      	; 0x16e30 <strcpy+0x4>
   16e38:	08 95       	ret

00016e3a <strncmp>:
strncmp():
   16e3a:	fb 01       	movw	r30, r22
   16e3c:	dc 01       	movw	r26, r24
   16e3e:	41 50       	subi	r20, 0x01	; 1
   16e40:	50 40       	sbci	r21, 0x00	; 0
   16e42:	30 f0       	brcs	.+12     	; 0x16e50 <strncmp+0x16>
   16e44:	8d 91       	ld	r24, X+
   16e46:	01 90       	ld	r0, Z+
   16e48:	80 19       	sub	r24, r0
   16e4a:	19 f4       	brne	.+6      	; 0x16e52 <strncmp+0x18>
   16e4c:	00 20       	and	r0, r0
   16e4e:	b9 f7       	brne	.-18     	; 0x16e3e <strncmp+0x4>
   16e50:	88 1b       	sub	r24, r24
   16e52:	99 0b       	sbc	r25, r25
   16e54:	08 95       	ret

00016e56 <strncpy>:
strncpy():
   16e56:	fb 01       	movw	r30, r22
   16e58:	dc 01       	movw	r26, r24
   16e5a:	41 50       	subi	r20, 0x01	; 1
   16e5c:	50 40       	sbci	r21, 0x00	; 0
   16e5e:	48 f0       	brcs	.+18     	; 0x16e72 <strncpy+0x1c>
   16e60:	01 90       	ld	r0, Z+
   16e62:	0d 92       	st	X+, r0
   16e64:	00 20       	and	r0, r0
   16e66:	c9 f7       	brne	.-14     	; 0x16e5a <strncpy+0x4>
   16e68:	01 c0       	rjmp	.+2      	; 0x16e6c <strncpy+0x16>
   16e6a:	1d 92       	st	X+, r1
   16e6c:	41 50       	subi	r20, 0x01	; 1
   16e6e:	50 40       	sbci	r21, 0x00	; 0
   16e70:	e0 f7       	brcc	.-8      	; 0x16e6a <strncpy+0x14>
   16e72:	08 95       	ret

00016e74 <printf>:
printf():
   16e74:	cf 93       	push	r28
   16e76:	df 93       	push	r29
   16e78:	cd b7       	in	r28, 0x3d	; 61
   16e7a:	de b7       	in	r29, 0x3e	; 62
   16e7c:	ae 01       	movw	r20, r28
   16e7e:	4a 5f       	subi	r20, 0xFA	; 250
   16e80:	5f 4f       	sbci	r21, 0xFF	; 255
   16e82:	fa 01       	movw	r30, r20
   16e84:	61 91       	ld	r22, Z+
   16e86:	71 91       	ld	r23, Z+
   16e88:	af 01       	movw	r20, r30
   16e8a:	80 91 23 13 	lds	r24, 0x1323	; 0x801323 <__iob+0x2>
   16e8e:	90 91 24 13 	lds	r25, 0x1324	; 0x801324 <__iob+0x3>
   16e92:	0e 94 45 ab 	call	0x1568a	; 0x1568a <vfprintf>
   16e96:	df 91       	pop	r29
   16e98:	cf 91       	pop	r28
   16e9a:	08 95       	ret

00016e9c <puts>:
puts():
   16e9c:	0f 93       	push	r16
   16e9e:	1f 93       	push	r17
   16ea0:	cf 93       	push	r28
   16ea2:	df 93       	push	r29
   16ea4:	e0 91 23 13 	lds	r30, 0x1323	; 0x801323 <__iob+0x2>
   16ea8:	f0 91 24 13 	lds	r31, 0x1324	; 0x801324 <__iob+0x3>
   16eac:	23 81       	ldd	r18, Z+3	; 0x03
   16eae:	ec 01       	movw	r28, r24
   16eb0:	10 e0       	ldi	r17, 0x00	; 0
   16eb2:	00 e0       	ldi	r16, 0x00	; 0
   16eb4:	21 fd       	sbrc	r18, 1
   16eb6:	08 c0       	rjmp	.+16     	; 0x16ec8 <puts+0x2c>
   16eb8:	0f ef       	ldi	r16, 0xFF	; 255
   16eba:	1f ef       	ldi	r17, 0xFF	; 255
   16ebc:	14 c0       	rjmp	.+40     	; 0x16ee6 <puts+0x4a>
   16ebe:	19 95       	eicall
   16ec0:	89 2b       	or	r24, r25
   16ec2:	11 f0       	breq	.+4      	; 0x16ec8 <puts+0x2c>
   16ec4:	0f ef       	ldi	r16, 0xFF	; 255
   16ec6:	1f ef       	ldi	r17, 0xFF	; 255
   16ec8:	89 91       	ld	r24, Y+
   16eca:	60 91 23 13 	lds	r22, 0x1323	; 0x801323 <__iob+0x2>
   16ece:	70 91 24 13 	lds	r23, 0x1324	; 0x801324 <__iob+0x3>
   16ed2:	db 01       	movw	r26, r22
   16ed4:	18 96       	adiw	r26, 0x08	; 8
   16ed6:	ed 91       	ld	r30, X+
   16ed8:	fc 91       	ld	r31, X
   16eda:	81 11       	cpse	r24, r1
   16edc:	f0 cf       	rjmp	.-32     	; 0x16ebe <puts+0x22>
   16ede:	8a e0       	ldi	r24, 0x0A	; 10
   16ee0:	19 95       	eicall
   16ee2:	89 2b       	or	r24, r25
   16ee4:	49 f7       	brne	.-46     	; 0x16eb8 <puts+0x1c>
   16ee6:	c8 01       	movw	r24, r16
   16ee8:	df 91       	pop	r29
   16eea:	cf 91       	pop	r28
   16eec:	1f 91       	pop	r17
   16eee:	0f 91       	pop	r16
   16ef0:	08 95       	ret

00016ef2 <sprintf>:
sprintf():
   16ef2:	0f 93       	push	r16
   16ef4:	1f 93       	push	r17
   16ef6:	cf 93       	push	r28
   16ef8:	df 93       	push	r29
   16efa:	cd b7       	in	r28, 0x3d	; 61
   16efc:	de b7       	in	r29, 0x3e	; 62
   16efe:	2e 97       	sbiw	r28, 0x0e	; 14
   16f00:	0f b6       	in	r0, 0x3f	; 63
   16f02:	f8 94       	cli
   16f04:	de bf       	out	0x3e, r29	; 62
   16f06:	0f be       	out	0x3f, r0	; 63
   16f08:	cd bf       	out	0x3d, r28	; 61
   16f0a:	0e 89       	ldd	r16, Y+22	; 0x16
   16f0c:	1f 89       	ldd	r17, Y+23	; 0x17
   16f0e:	86 e0       	ldi	r24, 0x06	; 6
   16f10:	8c 83       	std	Y+4, r24	; 0x04
   16f12:	1a 83       	std	Y+2, r17	; 0x02
   16f14:	09 83       	std	Y+1, r16	; 0x01
   16f16:	8f ef       	ldi	r24, 0xFF	; 255
   16f18:	9f e7       	ldi	r25, 0x7F	; 127
   16f1a:	9e 83       	std	Y+6, r25	; 0x06
   16f1c:	8d 83       	std	Y+5, r24	; 0x05
   16f1e:	ae 01       	movw	r20, r28
   16f20:	46 5e       	subi	r20, 0xE6	; 230
   16f22:	5f 4f       	sbci	r21, 0xFF	; 255
   16f24:	68 8d       	ldd	r22, Y+24	; 0x18
   16f26:	79 8d       	ldd	r23, Y+25	; 0x19
   16f28:	ce 01       	movw	r24, r28
   16f2a:	01 96       	adiw	r24, 0x01	; 1
   16f2c:	0e 94 45 ab 	call	0x1568a	; 0x1568a <vfprintf>
   16f30:	2f 81       	ldd	r18, Y+7	; 0x07
   16f32:	38 85       	ldd	r19, Y+8	; 0x08
   16f34:	02 0f       	add	r16, r18
   16f36:	13 1f       	adc	r17, r19
   16f38:	f8 01       	movw	r30, r16
   16f3a:	10 82       	st	Z, r1
   16f3c:	2e 96       	adiw	r28, 0x0e	; 14
   16f3e:	0f b6       	in	r0, 0x3f	; 63
   16f40:	f8 94       	cli
   16f42:	de bf       	out	0x3e, r29	; 62
   16f44:	0f be       	out	0x3f, r0	; 63
   16f46:	cd bf       	out	0x3d, r28	; 61
   16f48:	df 91       	pop	r29
   16f4a:	cf 91       	pop	r28
   16f4c:	1f 91       	pop	r17
   16f4e:	0f 91       	pop	r16
   16f50:	08 95       	ret

00016f52 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
   16f52:	f8 94       	cli

00016f54 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
   16f54:	ff cf       	rjmp	.-2      	; 0x16f54 <__stop_program>
